I0426 20:52:28.110270 32201 caffe.cpp:218] Using GPUs 0
I0426 20:52:28.147111 32201 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:28.613246 32201 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test113.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:28.613376 32201 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test113.prototxt
I0426 20:52:28.613634 32201 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:28.613647 32201 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:28.613709 32201 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:52:28.613759 32201 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:28.613839 32201 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:28.613858 32201 net.cpp:86] Creating Layer mnist
I0426 20:52:28.613863 32201 net.cpp:382] mnist -> data
I0426 20:52:28.613881 32201 net.cpp:382] mnist -> label
I0426 20:52:28.614838 32201 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:28.616947 32201 net.cpp:124] Setting up mnist
I0426 20:52:28.616977 32201 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:28.616982 32201 net.cpp:131] Top shape: 64 (64)
I0426 20:52:28.616986 32201 net.cpp:139] Memory required for data: 200960
I0426 20:52:28.616991 32201 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:28.617003 32201 net.cpp:86] Creating Layer conv0
I0426 20:52:28.617008 32201 net.cpp:408] conv0 <- data
I0426 20:52:28.617033 32201 net.cpp:382] conv0 -> conv0
I0426 20:52:28.855262 32201 net.cpp:124] Setting up conv0
I0426 20:52:28.855288 32201 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:28.855293 32201 net.cpp:139] Memory required for data: 3887360
I0426 20:52:28.855307 32201 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:28.855335 32201 net.cpp:86] Creating Layer pool0
I0426 20:52:28.855339 32201 net.cpp:408] pool0 <- conv0
I0426 20:52:28.855345 32201 net.cpp:382] pool0 -> pool0
I0426 20:52:28.855387 32201 net.cpp:124] Setting up pool0
I0426 20:52:28.855401 32201 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:28.855418 32201 net.cpp:139] Memory required for data: 4808960
I0426 20:52:28.855422 32201 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:28.855432 32201 net.cpp:86] Creating Layer conv1
I0426 20:52:28.855435 32201 net.cpp:408] conv1 <- pool0
I0426 20:52:28.855440 32201 net.cpp:382] conv1 -> conv1
I0426 20:52:28.858309 32201 net.cpp:124] Setting up conv1
I0426 20:52:28.858325 32201 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:52:28.858328 32201 net.cpp:139] Memory required for data: 5218560
I0426 20:52:28.858336 32201 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:28.858343 32201 net.cpp:86] Creating Layer pool1
I0426 20:52:28.858346 32201 net.cpp:408] pool1 <- conv1
I0426 20:52:28.858367 32201 net.cpp:382] pool1 -> pool1
I0426 20:52:28.858402 32201 net.cpp:124] Setting up pool1
I0426 20:52:28.858408 32201 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:52:28.858410 32201 net.cpp:139] Memory required for data: 5320960
I0426 20:52:28.858413 32201 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:28.858422 32201 net.cpp:86] Creating Layer ip1
I0426 20:52:28.858424 32201 net.cpp:408] ip1 <- pool1
I0426 20:52:28.858428 32201 net.cpp:382] ip1 -> ip1
I0426 20:52:28.859383 32201 net.cpp:124] Setting up ip1
I0426 20:52:28.859395 32201 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:28.859398 32201 net.cpp:139] Memory required for data: 5323520
I0426 20:52:28.859406 32201 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:28.859411 32201 net.cpp:86] Creating Layer relu1
I0426 20:52:28.859414 32201 net.cpp:408] relu1 <- ip1
I0426 20:52:28.859434 32201 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:28.859597 32201 net.cpp:124] Setting up relu1
I0426 20:52:28.859606 32201 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:28.859609 32201 net.cpp:139] Memory required for data: 5326080
I0426 20:52:28.859612 32201 layer_factory.hpp:77] Creating layer loss
I0426 20:52:28.859617 32201 net.cpp:86] Creating Layer loss
I0426 20:52:28.859621 32201 net.cpp:408] loss <- ip1
I0426 20:52:28.859624 32201 net.cpp:408] loss <- label
I0426 20:52:28.859629 32201 net.cpp:382] loss -> loss
I0426 20:52:28.859642 32201 layer_factory.hpp:77] Creating layer loss
I0426 20:52:28.860532 32201 net.cpp:124] Setting up loss
I0426 20:52:28.860543 32201 net.cpp:131] Top shape: (1)
I0426 20:52:28.860548 32201 net.cpp:134]     with loss weight 1
I0426 20:52:28.860561 32201 net.cpp:139] Memory required for data: 5326084
I0426 20:52:28.860580 32201 net.cpp:200] loss needs backward computation.
I0426 20:52:28.860585 32201 net.cpp:200] relu1 needs backward computation.
I0426 20:52:28.860587 32201 net.cpp:200] ip1 needs backward computation.
I0426 20:52:28.860590 32201 net.cpp:200] pool1 needs backward computation.
I0426 20:52:28.860594 32201 net.cpp:200] conv1 needs backward computation.
I0426 20:52:28.860596 32201 net.cpp:200] pool0 needs backward computation.
I0426 20:52:28.860599 32201 net.cpp:200] conv0 needs backward computation.
I0426 20:52:28.860602 32201 net.cpp:202] mnist does not need backward computation.
I0426 20:52:28.860605 32201 net.cpp:244] This network produces output loss
I0426 20:52:28.860613 32201 net.cpp:257] Network initialization done.
I0426 20:52:28.860919 32201 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test113.prototxt
I0426 20:52:28.860944 32201 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:28.861019 32201 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:52:28.861090 32201 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:28.861135 32201 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:28.861147 32201 net.cpp:86] Creating Layer mnist
I0426 20:52:28.861166 32201 net.cpp:382] mnist -> data
I0426 20:52:28.861186 32201 net.cpp:382] mnist -> label
I0426 20:52:28.861263 32201 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:28.863157 32201 net.cpp:124] Setting up mnist
I0426 20:52:28.863168 32201 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:28.863173 32201 net.cpp:131] Top shape: 100 (100)
I0426 20:52:28.863176 32201 net.cpp:139] Memory required for data: 314000
I0426 20:52:28.863179 32201 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:28.863186 32201 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:28.863189 32201 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:28.863209 32201 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:28.863215 32201 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:28.863281 32201 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:28.863288 32201 net.cpp:131] Top shape: 100 (100)
I0426 20:52:28.863292 32201 net.cpp:131] Top shape: 100 (100)
I0426 20:52:28.863296 32201 net.cpp:139] Memory required for data: 314800
I0426 20:52:28.863298 32201 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:28.863306 32201 net.cpp:86] Creating Layer conv0
I0426 20:52:28.863309 32201 net.cpp:408] conv0 <- data
I0426 20:52:28.863314 32201 net.cpp:382] conv0 -> conv0
I0426 20:52:28.864009 32201 net.cpp:124] Setting up conv0
I0426 20:52:28.864024 32201 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:28.864029 32201 net.cpp:139] Memory required for data: 6074800
I0426 20:52:28.864043 32201 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:28.864051 32201 net.cpp:86] Creating Layer pool0
I0426 20:52:28.864056 32201 net.cpp:408] pool0 <- conv0
I0426 20:52:28.864063 32201 net.cpp:382] pool0 -> pool0
I0426 20:52:28.864111 32201 net.cpp:124] Setting up pool0
I0426 20:52:28.864120 32201 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:28.864125 32201 net.cpp:139] Memory required for data: 7514800
I0426 20:52:28.864142 32201 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:28.864152 32201 net.cpp:86] Creating Layer conv1
I0426 20:52:28.864156 32201 net.cpp:408] conv1 <- pool0
I0426 20:52:28.864161 32201 net.cpp:382] conv1 -> conv1
I0426 20:52:28.866364 32201 net.cpp:124] Setting up conv1
I0426 20:52:28.866392 32201 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:52:28.866395 32201 net.cpp:139] Memory required for data: 8154800
I0426 20:52:28.866418 32201 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:28.866425 32201 net.cpp:86] Creating Layer pool1
I0426 20:52:28.866453 32201 net.cpp:408] pool1 <- conv1
I0426 20:52:28.866459 32201 net.cpp:382] pool1 -> pool1
I0426 20:52:28.866498 32201 net.cpp:124] Setting up pool1
I0426 20:52:28.866504 32201 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:52:28.866508 32201 net.cpp:139] Memory required for data: 8314800
I0426 20:52:28.866510 32201 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:28.866516 32201 net.cpp:86] Creating Layer ip1
I0426 20:52:28.866519 32201 net.cpp:408] ip1 <- pool1
I0426 20:52:28.866524 32201 net.cpp:382] ip1 -> ip1
I0426 20:52:28.866633 32201 net.cpp:124] Setting up ip1
I0426 20:52:28.866642 32201 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:28.866646 32201 net.cpp:139] Memory required for data: 8318800
I0426 20:52:28.866652 32201 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:28.866658 32201 net.cpp:86] Creating Layer relu1
I0426 20:52:28.866662 32201 net.cpp:408] relu1 <- ip1
I0426 20:52:28.866665 32201 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:28.867527 32201 net.cpp:124] Setting up relu1
I0426 20:52:28.867553 32201 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:28.867558 32201 net.cpp:139] Memory required for data: 8322800
I0426 20:52:28.867560 32201 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0426 20:52:28.867583 32201 net.cpp:86] Creating Layer ip1_relu1_0_split
I0426 20:52:28.867585 32201 net.cpp:408] ip1_relu1_0_split <- ip1
I0426 20:52:28.867591 32201 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0426 20:52:28.867597 32201 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0426 20:52:28.867632 32201 net.cpp:124] Setting up ip1_relu1_0_split
I0426 20:52:28.867640 32201 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:28.867643 32201 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:28.867645 32201 net.cpp:139] Memory required for data: 8330800
I0426 20:52:28.867650 32201 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:28.867655 32201 net.cpp:86] Creating Layer accuracy
I0426 20:52:28.867657 32201 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0426 20:52:28.867660 32201 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:28.867664 32201 net.cpp:382] accuracy -> accuracy
I0426 20:52:28.867671 32201 net.cpp:124] Setting up accuracy
I0426 20:52:28.867674 32201 net.cpp:131] Top shape: (1)
I0426 20:52:28.867677 32201 net.cpp:139] Memory required for data: 8330804
I0426 20:52:28.867681 32201 layer_factory.hpp:77] Creating layer loss
I0426 20:52:28.867684 32201 net.cpp:86] Creating Layer loss
I0426 20:52:28.867687 32201 net.cpp:408] loss <- ip1_relu1_0_split_1
I0426 20:52:28.867691 32201 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:28.867696 32201 net.cpp:382] loss -> loss
I0426 20:52:28.867700 32201 layer_factory.hpp:77] Creating layer loss
I0426 20:52:28.867913 32201 net.cpp:124] Setting up loss
I0426 20:52:28.867921 32201 net.cpp:131] Top shape: (1)
I0426 20:52:28.867924 32201 net.cpp:134]     with loss weight 1
I0426 20:52:28.867930 32201 net.cpp:139] Memory required for data: 8330808
I0426 20:52:28.867934 32201 net.cpp:200] loss needs backward computation.
I0426 20:52:28.867938 32201 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:28.867941 32201 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0426 20:52:28.867956 32201 net.cpp:200] relu1 needs backward computation.
I0426 20:52:28.867959 32201 net.cpp:200] ip1 needs backward computation.
I0426 20:52:28.867962 32201 net.cpp:200] pool1 needs backward computation.
I0426 20:52:28.867965 32201 net.cpp:200] conv1 needs backward computation.
I0426 20:52:28.867969 32201 net.cpp:200] pool0 needs backward computation.
I0426 20:52:28.867972 32201 net.cpp:200] conv0 needs backward computation.
I0426 20:52:28.867975 32201 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:28.867980 32201 net.cpp:202] mnist does not need backward computation.
I0426 20:52:28.867981 32201 net.cpp:244] This network produces output accuracy
I0426 20:52:28.867985 32201 net.cpp:244] This network produces output loss
I0426 20:52:28.868003 32201 net.cpp:257] Network initialization done.
I0426 20:52:28.868034 32201 solver.cpp:56] Solver scaffolding done.
I0426 20:52:28.868223 32201 caffe.cpp:248] Starting Optimization
I0426 20:52:28.868230 32201 solver.cpp:273] Solving LeNet
I0426 20:52:28.868233 32201 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:28.868990 32201 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:28.876423 32201 blocking_queue.cpp:49] Waiting for data
I0426 20:52:28.925223 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:28.925796 32201 solver.cpp:398]     Test net output #0: accuracy = 0.0952
I0426 20:52:28.925815 32201 solver.cpp:398]     Test net output #1: loss = 2.385 (* 1 = 2.385 loss)
I0426 20:52:28.929446 32201 solver.cpp:219] Iteration 0 (-1.32734e-30 iter/s, 0.0611901s/100 iters), loss = 2.44855
I0426 20:52:28.929486 32201 solver.cpp:238]     Train net output #0: loss = 2.44855 (* 1 = 2.44855 loss)
I0426 20:52:28.929497 32201 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:29.015964 32201 solver.cpp:219] Iteration 100 (1156.28 iter/s, 0.0864841s/100 iters), loss = 0.612881
I0426 20:52:29.016005 32201 solver.cpp:238]     Train net output #0: loss = 0.612881 (* 1 = 0.612881 loss)
I0426 20:52:29.016010 32201 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:29.103169 32201 solver.cpp:219] Iteration 200 (1147.38 iter/s, 0.0871548s/100 iters), loss = 0.223941
I0426 20:52:29.103209 32201 solver.cpp:238]     Train net output #0: loss = 0.223941 (* 1 = 0.223941 loss)
I0426 20:52:29.103215 32201 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:29.189539 32201 solver.cpp:219] Iteration 300 (1158.46 iter/s, 0.0863212s/100 iters), loss = 0.185505
I0426 20:52:29.189580 32201 solver.cpp:238]     Train net output #0: loss = 0.185505 (* 1 = 0.185505 loss)
I0426 20:52:29.189586 32201 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:29.275905 32201 solver.cpp:219] Iteration 400 (1158.33 iter/s, 0.0863314s/100 iters), loss = 0.0925751
I0426 20:52:29.275948 32201 solver.cpp:238]     Train net output #0: loss = 0.0925751 (* 1 = 0.0925751 loss)
I0426 20:52:29.275954 32201 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:29.361793 32201 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:29.434342 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:29.434981 32201 solver.cpp:398]     Test net output #0: accuracy = 0.9646
I0426 20:52:29.435014 32201 solver.cpp:398]     Test net output #1: loss = 0.118446 (* 1 = 0.118446 loss)
I0426 20:52:29.436102 32201 solver.cpp:219] Iteration 500 (624.393 iter/s, 0.160156s/100 iters), loss = 0.133941
I0426 20:52:29.436148 32201 solver.cpp:238]     Train net output #0: loss = 0.133941 (* 1 = 0.133941 loss)
I0426 20:52:29.436159 32201 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:29.534585 32201 solver.cpp:219] Iteration 600 (1015.84 iter/s, 0.0984412s/100 iters), loss = 0.0722895
I0426 20:52:29.534622 32201 solver.cpp:238]     Train net output #0: loss = 0.0722896 (* 1 = 0.0722896 loss)
I0426 20:52:29.534631 32201 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:29.634886 32201 solver.cpp:219] Iteration 700 (997.449 iter/s, 0.100256s/100 iters), loss = 0.177737
I0426 20:52:29.634914 32201 solver.cpp:238]     Train net output #0: loss = 0.177737 (* 1 = 0.177737 loss)
I0426 20:52:29.634922 32201 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:29.734339 32201 solver.cpp:219] Iteration 800 (1005.88 iter/s, 0.099415s/100 iters), loss = 0.217676
I0426 20:52:29.734364 32201 solver.cpp:238]     Train net output #0: loss = 0.217676 (* 1 = 0.217676 loss)
I0426 20:52:29.734369 32201 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:29.834846 32201 solver.cpp:219] Iteration 900 (995.294 iter/s, 0.100473s/100 iters), loss = 0.18059
I0426 20:52:29.834887 32201 solver.cpp:238]     Train net output #0: loss = 0.18059 (* 1 = 0.18059 loss)
I0426 20:52:29.834909 32201 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:29.867785 32207 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:29.928366 32201 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:29.929339 32201 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:29.929998 32201 solver.cpp:311] Iteration 1000, loss = 0.0865489
I0426 20:52:29.930012 32201 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:30.006749 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:30.007331 32201 solver.cpp:398]     Test net output #0: accuracy = 0.976
I0426 20:52:30.007354 32201 solver.cpp:398]     Test net output #1: loss = 0.0733578 (* 1 = 0.0733578 loss)
I0426 20:52:30.007375 32201 solver.cpp:316] Optimization Done.
I0426 20:52:30.007380 32201 caffe.cpp:259] Optimization Done.
