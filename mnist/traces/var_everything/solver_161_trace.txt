I0426 20:54:31.868408 32685 caffe.cpp:218] Using GPUs 0
I0426 20:54:31.906141 32685 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:32.428061 32685 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test161.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:32.428205 32685 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test161.prototxt
I0426 20:54:32.428616 32685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:32.428634 32685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:32.428755 32685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:32.428848 32685 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:32.428946 32685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:32.428978 32685 net.cpp:86] Creating Layer mnist
I0426 20:54:32.428987 32685 net.cpp:382] mnist -> data
I0426 20:54:32.429010 32685 net.cpp:382] mnist -> label
I0426 20:54:32.430133 32685 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:32.432684 32685 net.cpp:124] Setting up mnist
I0426 20:54:32.432703 32685 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:32.432710 32685 net.cpp:131] Top shape: 64 (64)
I0426 20:54:32.432714 32685 net.cpp:139] Memory required for data: 200960
I0426 20:54:32.432721 32685 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:32.432737 32685 net.cpp:86] Creating Layer conv0
I0426 20:54:32.432757 32685 net.cpp:408] conv0 <- data
I0426 20:54:32.432771 32685 net.cpp:382] conv0 -> conv0
I0426 20:54:32.716578 32685 net.cpp:124] Setting up conv0
I0426 20:54:32.716604 32685 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:32.716609 32685 net.cpp:139] Memory required for data: 7573760
I0426 20:54:32.716624 32685 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:32.716639 32685 net.cpp:86] Creating Layer pool0
I0426 20:54:32.716642 32685 net.cpp:408] pool0 <- conv0
I0426 20:54:32.716648 32685 net.cpp:382] pool0 -> pool0
I0426 20:54:32.716694 32685 net.cpp:124] Setting up pool0
I0426 20:54:32.716699 32685 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:32.716702 32685 net.cpp:139] Memory required for data: 9416960
I0426 20:54:32.716706 32685 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:32.716717 32685 net.cpp:86] Creating Layer conv1
I0426 20:54:32.716719 32685 net.cpp:408] conv1 <- pool0
I0426 20:54:32.716723 32685 net.cpp:382] conv1 -> conv1
I0426 20:54:32.718886 32685 net.cpp:124] Setting up conv1
I0426 20:54:32.718900 32685 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:32.718904 32685 net.cpp:139] Memory required for data: 9826560
I0426 20:54:32.718912 32685 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:32.718919 32685 net.cpp:86] Creating Layer pool1
I0426 20:54:32.718922 32685 net.cpp:408] pool1 <- conv1
I0426 20:54:32.718926 32685 net.cpp:382] pool1 -> pool1
I0426 20:54:32.718976 32685 net.cpp:124] Setting up pool1
I0426 20:54:32.718981 32685 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:32.718983 32685 net.cpp:139] Memory required for data: 9928960
I0426 20:54:32.718986 32685 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:32.718993 32685 net.cpp:86] Creating Layer ip1
I0426 20:54:32.718997 32685 net.cpp:408] ip1 <- pool1
I0426 20:54:32.719000 32685 net.cpp:382] ip1 -> ip1
I0426 20:54:32.719317 32685 net.cpp:124] Setting up ip1
I0426 20:54:32.719326 32685 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:32.719328 32685 net.cpp:139] Memory required for data: 9954560
I0426 20:54:32.719336 32685 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:32.719341 32685 net.cpp:86] Creating Layer relu1
I0426 20:54:32.719346 32685 net.cpp:408] relu1 <- ip1
I0426 20:54:32.719349 32685 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:32.719543 32685 net.cpp:124] Setting up relu1
I0426 20:54:32.719553 32685 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:32.719557 32685 net.cpp:139] Memory required for data: 9980160
I0426 20:54:32.719559 32685 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:32.719566 32685 net.cpp:86] Creating Layer ip2
I0426 20:54:32.719570 32685 net.cpp:408] ip2 <- ip1
I0426 20:54:32.719576 32685 net.cpp:382] ip2 -> ip2
I0426 20:54:32.720556 32685 net.cpp:124] Setting up ip2
I0426 20:54:32.720567 32685 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:32.720587 32685 net.cpp:139] Memory required for data: 10005760
I0426 20:54:32.720592 32685 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:32.720600 32685 net.cpp:86] Creating Layer relu2
I0426 20:54:32.720603 32685 net.cpp:408] relu2 <- ip2
I0426 20:54:32.720607 32685 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:32.721493 32685 net.cpp:124] Setting up relu2
I0426 20:54:32.721506 32685 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:32.721509 32685 net.cpp:139] Memory required for data: 10031360
I0426 20:54:32.721513 32685 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:32.721519 32685 net.cpp:86] Creating Layer ip3
I0426 20:54:32.721523 32685 net.cpp:408] ip3 <- ip2
I0426 20:54:32.721544 32685 net.cpp:382] ip3 -> ip3
I0426 20:54:32.721675 32685 net.cpp:124] Setting up ip3
I0426 20:54:32.721683 32685 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:32.721686 32685 net.cpp:139] Memory required for data: 10033920
I0426 20:54:32.721695 32685 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:32.721701 32685 net.cpp:86] Creating Layer relu3
I0426 20:54:32.721704 32685 net.cpp:408] relu3 <- ip3
I0426 20:54:32.721709 32685 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:32.721912 32685 net.cpp:124] Setting up relu3
I0426 20:54:32.721920 32685 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:32.721923 32685 net.cpp:139] Memory required for data: 10036480
I0426 20:54:32.721926 32685 layer_factory.hpp:77] Creating layer loss
I0426 20:54:32.721932 32685 net.cpp:86] Creating Layer loss
I0426 20:54:32.721935 32685 net.cpp:408] loss <- ip3
I0426 20:54:32.721940 32685 net.cpp:408] loss <- label
I0426 20:54:32.721945 32685 net.cpp:382] loss -> loss
I0426 20:54:32.721961 32685 layer_factory.hpp:77] Creating layer loss
I0426 20:54:32.722198 32685 net.cpp:124] Setting up loss
I0426 20:54:32.722208 32685 net.cpp:131] Top shape: (1)
I0426 20:54:32.722211 32685 net.cpp:134]     with loss weight 1
I0426 20:54:32.722224 32685 net.cpp:139] Memory required for data: 10036484
I0426 20:54:32.722228 32685 net.cpp:200] loss needs backward computation.
I0426 20:54:32.722231 32685 net.cpp:200] relu3 needs backward computation.
I0426 20:54:32.722234 32685 net.cpp:200] ip3 needs backward computation.
I0426 20:54:32.722237 32685 net.cpp:200] relu2 needs backward computation.
I0426 20:54:32.722239 32685 net.cpp:200] ip2 needs backward computation.
I0426 20:54:32.722242 32685 net.cpp:200] relu1 needs backward computation.
I0426 20:54:32.722244 32685 net.cpp:200] ip1 needs backward computation.
I0426 20:54:32.722247 32685 net.cpp:200] pool1 needs backward computation.
I0426 20:54:32.722250 32685 net.cpp:200] conv1 needs backward computation.
I0426 20:54:32.722254 32685 net.cpp:200] pool0 needs backward computation.
I0426 20:54:32.722255 32685 net.cpp:200] conv0 needs backward computation.
I0426 20:54:32.722259 32685 net.cpp:202] mnist does not need backward computation.
I0426 20:54:32.722261 32685 net.cpp:244] This network produces output loss
I0426 20:54:32.722272 32685 net.cpp:257] Network initialization done.
I0426 20:54:32.722584 32685 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test161.prototxt
I0426 20:54:32.722643 32685 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:32.722754 32685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:32.722842 32685 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:32.722887 32685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:32.722900 32685 net.cpp:86] Creating Layer mnist
I0426 20:54:32.722905 32685 net.cpp:382] mnist -> data
I0426 20:54:32.722913 32685 net.cpp:382] mnist -> label
I0426 20:54:32.723017 32685 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:32.725036 32685 net.cpp:124] Setting up mnist
I0426 20:54:32.725051 32685 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:32.725056 32685 net.cpp:131] Top shape: 100 (100)
I0426 20:54:32.725059 32685 net.cpp:139] Memory required for data: 314000
I0426 20:54:32.725064 32685 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:32.725075 32685 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:32.725080 32685 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:32.725085 32685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:32.725091 32685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:32.725237 32685 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:32.725244 32685 net.cpp:131] Top shape: 100 (100)
I0426 20:54:32.725248 32685 net.cpp:131] Top shape: 100 (100)
I0426 20:54:32.725251 32685 net.cpp:139] Memory required for data: 314800
I0426 20:54:32.725253 32685 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:32.725262 32685 net.cpp:86] Creating Layer conv0
I0426 20:54:32.725265 32685 net.cpp:408] conv0 <- data
I0426 20:54:32.725273 32685 net.cpp:382] conv0 -> conv0
I0426 20:54:32.726994 32685 net.cpp:124] Setting up conv0
I0426 20:54:32.727006 32685 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:32.727010 32685 net.cpp:139] Memory required for data: 11834800
I0426 20:54:32.727020 32685 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:32.727041 32685 net.cpp:86] Creating Layer pool0
I0426 20:54:32.727044 32685 net.cpp:408] pool0 <- conv0
I0426 20:54:32.727048 32685 net.cpp:382] pool0 -> pool0
I0426 20:54:32.727100 32685 net.cpp:124] Setting up pool0
I0426 20:54:32.727105 32685 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:32.727108 32685 net.cpp:139] Memory required for data: 14714800
I0426 20:54:32.727111 32685 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:32.727120 32685 net.cpp:86] Creating Layer conv1
I0426 20:54:32.727123 32685 net.cpp:408] conv1 <- pool0
I0426 20:54:32.727128 32685 net.cpp:382] conv1 -> conv1
I0426 20:54:32.728852 32685 net.cpp:124] Setting up conv1
I0426 20:54:32.728866 32685 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:32.728869 32685 net.cpp:139] Memory required for data: 15354800
I0426 20:54:32.728878 32685 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:32.728900 32685 net.cpp:86] Creating Layer pool1
I0426 20:54:32.728904 32685 net.cpp:408] pool1 <- conv1
I0426 20:54:32.728925 32685 net.cpp:382] pool1 -> pool1
I0426 20:54:32.728967 32685 net.cpp:124] Setting up pool1
I0426 20:54:32.728972 32685 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:32.728976 32685 net.cpp:139] Memory required for data: 15514800
I0426 20:54:32.728978 32685 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:32.728986 32685 net.cpp:86] Creating Layer ip1
I0426 20:54:32.728988 32685 net.cpp:408] ip1 <- pool1
I0426 20:54:32.728992 32685 net.cpp:382] ip1 -> ip1
I0426 20:54:32.729370 32685 net.cpp:124] Setting up ip1
I0426 20:54:32.729379 32685 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:32.729393 32685 net.cpp:139] Memory required for data: 15554800
I0426 20:54:32.729414 32685 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:32.729420 32685 net.cpp:86] Creating Layer relu1
I0426 20:54:32.729425 32685 net.cpp:408] relu1 <- ip1
I0426 20:54:32.729432 32685 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:32.729630 32685 net.cpp:124] Setting up relu1
I0426 20:54:32.729640 32685 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:32.729643 32685 net.cpp:139] Memory required for data: 15594800
I0426 20:54:32.729647 32685 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:32.729655 32685 net.cpp:86] Creating Layer ip2
I0426 20:54:32.729658 32685 net.cpp:408] ip2 <- ip1
I0426 20:54:32.729665 32685 net.cpp:382] ip2 -> ip2
I0426 20:54:32.729821 32685 net.cpp:124] Setting up ip2
I0426 20:54:32.729828 32685 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:32.729830 32685 net.cpp:139] Memory required for data: 15634800
I0426 20:54:32.729836 32685 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:32.729841 32685 net.cpp:86] Creating Layer relu2
I0426 20:54:32.729846 32685 net.cpp:408] relu2 <- ip2
I0426 20:54:32.729853 32685 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:32.730095 32685 net.cpp:124] Setting up relu2
I0426 20:54:32.730104 32685 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:32.730108 32685 net.cpp:139] Memory required for data: 15674800
I0426 20:54:32.730110 32685 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:32.730116 32685 net.cpp:86] Creating Layer ip3
I0426 20:54:32.730118 32685 net.cpp:408] ip3 <- ip2
I0426 20:54:32.730124 32685 net.cpp:382] ip3 -> ip3
I0426 20:54:32.730226 32685 net.cpp:124] Setting up ip3
I0426 20:54:32.730234 32685 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:32.730242 32685 net.cpp:139] Memory required for data: 15678800
I0426 20:54:32.730250 32685 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:32.730260 32685 net.cpp:86] Creating Layer relu3
I0426 20:54:32.730263 32685 net.cpp:408] relu3 <- ip3
I0426 20:54:32.730268 32685 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:32.731132 32685 net.cpp:124] Setting up relu3
I0426 20:54:32.731144 32685 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:32.731148 32685 net.cpp:139] Memory required for data: 15682800
I0426 20:54:32.731151 32685 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:54:32.731156 32685 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:54:32.731175 32685 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:54:32.731181 32685 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:54:32.731186 32685 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:54:32.731250 32685 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:54:32.731256 32685 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:32.731258 32685 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:32.731261 32685 net.cpp:139] Memory required for data: 15690800
I0426 20:54:32.731264 32685 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:32.731271 32685 net.cpp:86] Creating Layer accuracy
I0426 20:54:32.731273 32685 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:54:32.731282 32685 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:32.731287 32685 net.cpp:382] accuracy -> accuracy
I0426 20:54:32.731295 32685 net.cpp:124] Setting up accuracy
I0426 20:54:32.731300 32685 net.cpp:131] Top shape: (1)
I0426 20:54:32.731307 32685 net.cpp:139] Memory required for data: 15690804
I0426 20:54:32.731310 32685 layer_factory.hpp:77] Creating layer loss
I0426 20:54:32.731314 32685 net.cpp:86] Creating Layer loss
I0426 20:54:32.731317 32685 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:54:32.731322 32685 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:32.731330 32685 net.cpp:382] loss -> loss
I0426 20:54:32.731336 32685 layer_factory.hpp:77] Creating layer loss
I0426 20:54:32.731583 32685 net.cpp:124] Setting up loss
I0426 20:54:32.731592 32685 net.cpp:131] Top shape: (1)
I0426 20:54:32.731596 32685 net.cpp:134]     with loss weight 1
I0426 20:54:32.731611 32685 net.cpp:139] Memory required for data: 15690808
I0426 20:54:32.731614 32685 net.cpp:200] loss needs backward computation.
I0426 20:54:32.731618 32685 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:32.731621 32685 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:54:32.731624 32685 net.cpp:200] relu3 needs backward computation.
I0426 20:54:32.731627 32685 net.cpp:200] ip3 needs backward computation.
I0426 20:54:32.731637 32685 net.cpp:200] relu2 needs backward computation.
I0426 20:54:32.731640 32685 net.cpp:200] ip2 needs backward computation.
I0426 20:54:32.731643 32685 net.cpp:200] relu1 needs backward computation.
I0426 20:54:32.731645 32685 net.cpp:200] ip1 needs backward computation.
I0426 20:54:32.731648 32685 net.cpp:200] pool1 needs backward computation.
I0426 20:54:32.731652 32685 net.cpp:200] conv1 needs backward computation.
I0426 20:54:32.731654 32685 net.cpp:200] pool0 needs backward computation.
I0426 20:54:32.731657 32685 net.cpp:200] conv0 needs backward computation.
I0426 20:54:32.731662 32685 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:32.731670 32685 net.cpp:202] mnist does not need backward computation.
I0426 20:54:32.731673 32685 net.cpp:244] This network produces output accuracy
I0426 20:54:32.731676 32685 net.cpp:244] This network produces output loss
I0426 20:54:32.731688 32685 net.cpp:257] Network initialization done.
I0426 20:54:32.731734 32685 solver.cpp:56] Solver scaffolding done.
I0426 20:54:32.732064 32685 caffe.cpp:248] Starting Optimization
I0426 20:54:32.732071 32685 solver.cpp:273] Solving LeNet
I0426 20:54:32.732074 32685 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:32.732975 32685 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:32.740761 32685 blocking_queue.cpp:49] Waiting for data
I0426 20:54:32.811185 32694 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:32.812161 32685 solver.cpp:398]     Test net output #0: accuracy = 0.0638
I0426 20:54:32.812197 32685 solver.cpp:398]     Test net output #1: loss = 2.34889 (* 1 = 2.34889 loss)
I0426 20:54:32.816840 32685 solver.cpp:219] Iteration 0 (0 iter/s, 0.0847218s/100 iters), loss = 2.36194
I0426 20:54:32.816879 32685 solver.cpp:238]     Train net output #0: loss = 2.36194 (* 1 = 2.36194 loss)
I0426 20:54:32.816895 32685 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:32.962196 32685 solver.cpp:219] Iteration 100 (688.161 iter/s, 0.145315s/100 iters), loss = 0.687015
I0426 20:54:32.962237 32685 solver.cpp:238]     Train net output #0: loss = 0.687015 (* 1 = 0.687015 loss)
I0426 20:54:32.962244 32685 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:33.112265 32685 solver.cpp:219] Iteration 200 (666.55 iter/s, 0.150026s/100 iters), loss = 0.590666
I0426 20:54:33.112313 32685 solver.cpp:238]     Train net output #0: loss = 0.590666 (* 1 = 0.590666 loss)
I0426 20:54:33.112323 32685 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:33.256808 32685 solver.cpp:219] Iteration 300 (692.112 iter/s, 0.144485s/100 iters), loss = 0.277281
I0426 20:54:33.256850 32685 solver.cpp:238]     Train net output #0: loss = 0.277281 (* 1 = 0.277281 loss)
I0426 20:54:33.256858 32685 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:33.410645 32685 solver.cpp:219] Iteration 400 (650.279 iter/s, 0.15378s/100 iters), loss = 0.0972565
I0426 20:54:33.410696 32685 solver.cpp:238]     Train net output #0: loss = 0.0972565 (* 1 = 0.0972565 loss)
I0426 20:54:33.410708 32685 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:33.559747 32685 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:33.634896 32694 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:33.637451 32685 solver.cpp:398]     Test net output #0: accuracy = 0.9651
I0426 20:54:33.637476 32685 solver.cpp:398]     Test net output #1: loss = 0.111713 (* 1 = 0.111713 loss)
I0426 20:54:33.638835 32685 solver.cpp:219] Iteration 500 (438.351 iter/s, 0.228128s/100 iters), loss = 0.0931504
I0426 20:54:33.638883 32685 solver.cpp:238]     Train net output #0: loss = 0.0931504 (* 1 = 0.0931504 loss)
I0426 20:54:33.638892 32685 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:33.785351 32685 solver.cpp:219] Iteration 600 (682.796 iter/s, 0.146457s/100 iters), loss = 0.113548
I0426 20:54:33.785385 32685 solver.cpp:238]     Train net output #0: loss = 0.113548 (* 1 = 0.113548 loss)
I0426 20:54:33.785393 32685 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:33.936728 32685 solver.cpp:219] Iteration 700 (660.817 iter/s, 0.151328s/100 iters), loss = 0.147121
I0426 20:54:33.936774 32685 solver.cpp:238]     Train net output #0: loss = 0.147121 (* 1 = 0.147121 loss)
I0426 20:54:33.936784 32685 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:34.092360 32685 solver.cpp:219] Iteration 800 (642.78 iter/s, 0.155574s/100 iters), loss = 0.157252
I0426 20:54:34.092397 32685 solver.cpp:238]     Train net output #0: loss = 0.157252 (* 1 = 0.157252 loss)
I0426 20:54:34.092406 32685 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:34.239486 32685 solver.cpp:219] Iteration 900 (679.92 iter/s, 0.147076s/100 iters), loss = 0.155668
I0426 20:54:34.239523 32685 solver.cpp:238]     Train net output #0: loss = 0.155668 (* 1 = 0.155668 loss)
I0426 20:54:34.239533 32685 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:34.290992 32693 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:34.397531 32685 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:34.400696 32685 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:34.402529 32685 solver.cpp:311] Iteration 1000, loss = 0.116036
I0426 20:54:34.402559 32685 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:34.483908 32694 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:34.484740 32685 solver.cpp:398]     Test net output #0: accuracy = 0.9781
I0426 20:54:34.484762 32685 solver.cpp:398]     Test net output #1: loss = 0.0696895 (* 1 = 0.0696895 loss)
I0426 20:54:34.484769 32685 solver.cpp:316] Optimization Done.
I0426 20:54:34.484772 32685 caffe.cpp:259] Optimization Done.
