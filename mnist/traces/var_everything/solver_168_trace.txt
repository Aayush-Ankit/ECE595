I0426 20:54:51.331648 32745 caffe.cpp:218] Using GPUs 0
I0426 20:54:51.361846 32745 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:51.817977 32745 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test168.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:51.818126 32745 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test168.prototxt
I0426 20:54:51.818449 32745 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:51.818459 32745 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:51.818569 32745 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:54:51.818625 32745 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:51.818718 32745 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:51.818739 32745 net.cpp:86] Creating Layer mnist
I0426 20:54:51.818747 32745 net.cpp:382] mnist -> data
I0426 20:54:51.818765 32745 net.cpp:382] mnist -> label
I0426 20:54:51.819707 32745 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:51.821894 32745 net.cpp:124] Setting up mnist
I0426 20:54:51.821909 32745 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:51.821914 32745 net.cpp:131] Top shape: 64 (64)
I0426 20:54:51.821918 32745 net.cpp:139] Memory required for data: 200960
I0426 20:54:51.821923 32745 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:51.821954 32745 net.cpp:86] Creating Layer conv0
I0426 20:54:51.821957 32745 net.cpp:408] conv0 <- data
I0426 20:54:51.821967 32745 net.cpp:382] conv0 -> conv0
I0426 20:54:52.058802 32745 net.cpp:124] Setting up conv0
I0426 20:54:52.058827 32745 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:52.058830 32745 net.cpp:139] Memory required for data: 7573760
I0426 20:54:52.058845 32745 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:52.058857 32745 net.cpp:86] Creating Layer pool0
I0426 20:54:52.058861 32745 net.cpp:408] pool0 <- conv0
I0426 20:54:52.058867 32745 net.cpp:382] pool0 -> pool0
I0426 20:54:52.058928 32745 net.cpp:124] Setting up pool0
I0426 20:54:52.058933 32745 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:52.058965 32745 net.cpp:139] Memory required for data: 9416960
I0426 20:54:52.058969 32745 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:52.058980 32745 net.cpp:86] Creating Layer conv1
I0426 20:54:52.058984 32745 net.cpp:408] conv1 <- pool0
I0426 20:54:52.058990 32745 net.cpp:382] conv1 -> conv1
I0426 20:54:52.061336 32745 net.cpp:124] Setting up conv1
I0426 20:54:52.061364 32745 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:54:52.061368 32745 net.cpp:139] Memory required for data: 10236160
I0426 20:54:52.061377 32745 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:52.061384 32745 net.cpp:86] Creating Layer pool1
I0426 20:54:52.061388 32745 net.cpp:408] pool1 <- conv1
I0426 20:54:52.061391 32745 net.cpp:382] pool1 -> pool1
I0426 20:54:52.061442 32745 net.cpp:124] Setting up pool1
I0426 20:54:52.061449 32745 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:54:52.061451 32745 net.cpp:139] Memory required for data: 10440960
I0426 20:54:52.061455 32745 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:52.061460 32745 net.cpp:86] Creating Layer ip1
I0426 20:54:52.061477 32745 net.cpp:408] ip1 <- pool1
I0426 20:54:52.061483 32745 net.cpp:382] ip1 -> ip1
I0426 20:54:52.062444 32745 net.cpp:124] Setting up ip1
I0426 20:54:52.062456 32745 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:52.062459 32745 net.cpp:139] Memory required for data: 10443520
I0426 20:54:52.062467 32745 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:52.062489 32745 net.cpp:86] Creating Layer relu1
I0426 20:54:52.062492 32745 net.cpp:408] relu1 <- ip1
I0426 20:54:52.062496 32745 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:52.062685 32745 net.cpp:124] Setting up relu1
I0426 20:54:52.062693 32745 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:52.062696 32745 net.cpp:139] Memory required for data: 10446080
I0426 20:54:52.062700 32745 layer_factory.hpp:77] Creating layer loss
I0426 20:54:52.062705 32745 net.cpp:86] Creating Layer loss
I0426 20:54:52.062708 32745 net.cpp:408] loss <- ip1
I0426 20:54:52.062711 32745 net.cpp:408] loss <- label
I0426 20:54:52.062731 32745 net.cpp:382] loss -> loss
I0426 20:54:52.062749 32745 layer_factory.hpp:77] Creating layer loss
I0426 20:54:52.063704 32745 net.cpp:124] Setting up loss
I0426 20:54:52.063715 32745 net.cpp:131] Top shape: (1)
I0426 20:54:52.063735 32745 net.cpp:134]     with loss weight 1
I0426 20:54:52.063750 32745 net.cpp:139] Memory required for data: 10446084
I0426 20:54:52.063752 32745 net.cpp:200] loss needs backward computation.
I0426 20:54:52.063756 32745 net.cpp:200] relu1 needs backward computation.
I0426 20:54:52.063760 32745 net.cpp:200] ip1 needs backward computation.
I0426 20:54:52.063761 32745 net.cpp:200] pool1 needs backward computation.
I0426 20:54:52.063778 32745 net.cpp:200] conv1 needs backward computation.
I0426 20:54:52.063781 32745 net.cpp:200] pool0 needs backward computation.
I0426 20:54:52.063784 32745 net.cpp:200] conv0 needs backward computation.
I0426 20:54:52.063802 32745 net.cpp:202] mnist does not need backward computation.
I0426 20:54:52.063805 32745 net.cpp:244] This network produces output loss
I0426 20:54:52.063813 32745 net.cpp:257] Network initialization done.
I0426 20:54:52.064081 32745 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test168.prototxt
I0426 20:54:52.064105 32745 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:52.064178 32745 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:54:52.064247 32745 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:52.064290 32745 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:52.064301 32745 net.cpp:86] Creating Layer mnist
I0426 20:54:52.064306 32745 net.cpp:382] mnist -> data
I0426 20:54:52.064312 32745 net.cpp:382] mnist -> label
I0426 20:54:52.064410 32745 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:52.066576 32745 net.cpp:124] Setting up mnist
I0426 20:54:52.066603 32745 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:52.066607 32745 net.cpp:131] Top shape: 100 (100)
I0426 20:54:52.066611 32745 net.cpp:139] Memory required for data: 314000
I0426 20:54:52.066613 32745 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:52.066619 32745 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:52.066622 32745 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:52.066642 32745 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:52.066649 32745 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:52.066759 32745 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:52.066766 32745 net.cpp:131] Top shape: 100 (100)
I0426 20:54:52.066771 32745 net.cpp:131] Top shape: 100 (100)
I0426 20:54:52.066773 32745 net.cpp:139] Memory required for data: 314800
I0426 20:54:52.066776 32745 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:52.066786 32745 net.cpp:86] Creating Layer conv0
I0426 20:54:52.066789 32745 net.cpp:408] conv0 <- data
I0426 20:54:52.066794 32745 net.cpp:382] conv0 -> conv0
I0426 20:54:52.067670 32745 net.cpp:124] Setting up conv0
I0426 20:54:52.067683 32745 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:52.067687 32745 net.cpp:139] Memory required for data: 11834800
I0426 20:54:52.067705 32745 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:52.067713 32745 net.cpp:86] Creating Layer pool0
I0426 20:54:52.067730 32745 net.cpp:408] pool0 <- conv0
I0426 20:54:52.067737 32745 net.cpp:382] pool0 -> pool0
I0426 20:54:52.067791 32745 net.cpp:124] Setting up pool0
I0426 20:54:52.067800 32745 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:52.067802 32745 net.cpp:139] Memory required for data: 14714800
I0426 20:54:52.067806 32745 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:52.067818 32745 net.cpp:86] Creating Layer conv1
I0426 20:54:52.067821 32745 net.cpp:408] conv1 <- pool0
I0426 20:54:52.067827 32745 net.cpp:382] conv1 -> conv1
I0426 20:54:52.069869 32745 net.cpp:124] Setting up conv1
I0426 20:54:52.069897 32745 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:54:52.069900 32745 net.cpp:139] Memory required for data: 15994800
I0426 20:54:52.069910 32745 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:52.069916 32745 net.cpp:86] Creating Layer pool1
I0426 20:54:52.069929 32745 net.cpp:408] pool1 <- conv1
I0426 20:54:52.069936 32745 net.cpp:382] pool1 -> pool1
I0426 20:54:52.069989 32745 net.cpp:124] Setting up pool1
I0426 20:54:52.069995 32745 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:54:52.069998 32745 net.cpp:139] Memory required for data: 16314800
I0426 20:54:52.070001 32745 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:52.070008 32745 net.cpp:86] Creating Layer ip1
I0426 20:54:52.070010 32745 net.cpp:408] ip1 <- pool1
I0426 20:54:52.070017 32745 net.cpp:382] ip1 -> ip1
I0426 20:54:52.070161 32745 net.cpp:124] Setting up ip1
I0426 20:54:52.070169 32745 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:52.070173 32745 net.cpp:139] Memory required for data: 16318800
I0426 20:54:52.070179 32745 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:52.070184 32745 net.cpp:86] Creating Layer relu1
I0426 20:54:52.070188 32745 net.cpp:408] relu1 <- ip1
I0426 20:54:52.070194 32745 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:52.071094 32745 net.cpp:124] Setting up relu1
I0426 20:54:52.071105 32745 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:52.071123 32745 net.cpp:139] Memory required for data: 16322800
I0426 20:54:52.071127 32745 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0426 20:54:52.071135 32745 net.cpp:86] Creating Layer ip1_relu1_0_split
I0426 20:54:52.071137 32745 net.cpp:408] ip1_relu1_0_split <- ip1
I0426 20:54:52.071159 32745 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0426 20:54:52.071166 32745 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0426 20:54:52.071238 32745 net.cpp:124] Setting up ip1_relu1_0_split
I0426 20:54:52.071244 32745 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:52.071254 32745 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:52.071256 32745 net.cpp:139] Memory required for data: 16330800
I0426 20:54:52.071259 32745 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:52.071270 32745 net.cpp:86] Creating Layer accuracy
I0426 20:54:52.071274 32745 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0426 20:54:52.071279 32745 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:52.071285 32745 net.cpp:382] accuracy -> accuracy
I0426 20:54:52.071292 32745 net.cpp:124] Setting up accuracy
I0426 20:54:52.071297 32745 net.cpp:131] Top shape: (1)
I0426 20:54:52.071300 32745 net.cpp:139] Memory required for data: 16330804
I0426 20:54:52.071310 32745 layer_factory.hpp:77] Creating layer loss
I0426 20:54:52.071315 32745 net.cpp:86] Creating Layer loss
I0426 20:54:52.071317 32745 net.cpp:408] loss <- ip1_relu1_0_split_1
I0426 20:54:52.071322 32745 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:52.071326 32745 net.cpp:382] loss -> loss
I0426 20:54:52.071332 32745 layer_factory.hpp:77] Creating layer loss
I0426 20:54:52.071601 32745 net.cpp:124] Setting up loss
I0426 20:54:52.071614 32745 net.cpp:131] Top shape: (1)
I0426 20:54:52.071616 32745 net.cpp:134]     with loss weight 1
I0426 20:54:52.071624 32745 net.cpp:139] Memory required for data: 16330808
I0426 20:54:52.071626 32745 net.cpp:200] loss needs backward computation.
I0426 20:54:52.071630 32745 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:52.071635 32745 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0426 20:54:52.071647 32745 net.cpp:200] relu1 needs backward computation.
I0426 20:54:52.071650 32745 net.cpp:200] ip1 needs backward computation.
I0426 20:54:52.071660 32745 net.cpp:200] pool1 needs backward computation.
I0426 20:54:52.071663 32745 net.cpp:200] conv1 needs backward computation.
I0426 20:54:52.071666 32745 net.cpp:200] pool0 needs backward computation.
I0426 20:54:52.071671 32745 net.cpp:200] conv0 needs backward computation.
I0426 20:54:52.071679 32745 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:52.071683 32745 net.cpp:202] mnist does not need backward computation.
I0426 20:54:52.071686 32745 net.cpp:244] This network produces output accuracy
I0426 20:54:52.071689 32745 net.cpp:244] This network produces output loss
I0426 20:54:52.071723 32745 net.cpp:257] Network initialization done.
I0426 20:54:52.071786 32745 solver.cpp:56] Solver scaffolding done.
I0426 20:54:52.072010 32745 caffe.cpp:248] Starting Optimization
I0426 20:54:52.072016 32745 solver.cpp:273] Solving LeNet
I0426 20:54:52.072019 32745 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:52.072144 32745 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:52.078732 32745 blocking_queue.cpp:49] Waiting for data
I0426 20:54:52.153545 32752 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:52.154299 32745 solver.cpp:398]     Test net output #0: accuracy = 0.0872
I0426 20:54:52.154335 32745 solver.cpp:398]     Test net output #1: loss = 2.36219 (* 1 = 2.36219 loss)
I0426 20:54:52.158831 32745 solver.cpp:219] Iteration 0 (-1.84627e-31 iter/s, 0.0867726s/100 iters), loss = 2.36548
I0426 20:54:52.158869 32745 solver.cpp:238]     Train net output #0: loss = 2.36548 (* 1 = 2.36548 loss)
I0426 20:54:52.158880 32745 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:52.301231 32745 solver.cpp:219] Iteration 100 (702.512 iter/s, 0.142346s/100 iters), loss = 0.954544
I0426 20:54:52.301259 32745 solver.cpp:238]     Train net output #0: loss = 0.954544 (* 1 = 0.954544 loss)
I0426 20:54:52.301265 32745 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:52.444670 32745 solver.cpp:219] Iteration 200 (697.35 iter/s, 0.1434s/100 iters), loss = 0.678195
I0426 20:54:52.444695 32745 solver.cpp:238]     Train net output #0: loss = 0.678195 (* 1 = 0.678195 loss)
I0426 20:54:52.444700 32745 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:52.588980 32745 solver.cpp:219] Iteration 300 (693.168 iter/s, 0.144265s/100 iters), loss = 0.163757
I0426 20:54:52.589011 32745 solver.cpp:238]     Train net output #0: loss = 0.163757 (* 1 = 0.163757 loss)
I0426 20:54:52.589018 32745 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:52.757876 32745 solver.cpp:219] Iteration 400 (592.248 iter/s, 0.168848s/100 iters), loss = 0.0961397
I0426 20:54:52.757927 32745 solver.cpp:238]     Train net output #0: loss = 0.0961397 (* 1 = 0.0961397 loss)
I0426 20:54:52.757941 32745 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:52.922130 32745 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:52.998155 32752 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:53.000761 32745 solver.cpp:398]     Test net output #0: accuracy = 0.9663
I0426 20:54:53.000800 32745 solver.cpp:398]     Test net output #1: loss = 0.111092 (* 1 = 0.111092 loss)
I0426 20:54:53.002221 32745 solver.cpp:219] Iteration 500 (409.366 iter/s, 0.24428s/100 iters), loss = 0.153532
I0426 20:54:53.002254 32745 solver.cpp:238]     Train net output #0: loss = 0.153532 (* 1 = 0.153532 loss)
I0426 20:54:53.002266 32745 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:53.159075 32745 solver.cpp:219] Iteration 600 (637.73 iter/s, 0.156806s/100 iters), loss = 0.0852416
I0426 20:54:53.159118 32745 solver.cpp:238]     Train net output #0: loss = 0.0852416 (* 1 = 0.0852416 loss)
I0426 20:54:53.159129 32745 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:53.322316 32745 solver.cpp:219] Iteration 700 (612.807 iter/s, 0.163184s/100 iters), loss = 0.179039
I0426 20:54:53.322363 32745 solver.cpp:238]     Train net output #0: loss = 0.179039 (* 1 = 0.179039 loss)
I0426 20:54:53.322374 32745 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:53.487962 32745 solver.cpp:219] Iteration 800 (603.92 iter/s, 0.165585s/100 iters), loss = 0.21502
I0426 20:54:53.488014 32745 solver.cpp:238]     Train net output #0: loss = 0.21502 (* 1 = 0.21502 loss)
I0426 20:54:53.488026 32745 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:53.652779 32745 solver.cpp:219] Iteration 900 (606.956 iter/s, 0.164756s/100 iters), loss = 0.177147
I0426 20:54:53.652839 32745 solver.cpp:238]     Train net output #0: loss = 0.177147 (* 1 = 0.177147 loss)
I0426 20:54:53.652853 32745 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:53.707924 32751 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:53.816938 32745 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:53.819881 32745 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:53.821772 32745 solver.cpp:311] Iteration 1000, loss = 0.10069
I0426 20:54:53.821800 32745 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:53.896416 32752 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:53.898964 32745 solver.cpp:398]     Test net output #0: accuracy = 0.9757
I0426 20:54:53.899000 32745 solver.cpp:398]     Test net output #1: loss = 0.0750985 (* 1 = 0.0750985 loss)
I0426 20:54:53.899006 32745 solver.cpp:316] Optimization Done.
I0426 20:54:53.899010 32745 caffe.cpp:259] Optimization Done.
