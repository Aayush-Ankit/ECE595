I0426 20:54:07.391568 32610 caffe.cpp:218] Using GPUs 0
I0426 20:54:07.422446 32610 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:07.952404 32610 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test152.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:07.952538 32610 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test152.prototxt
I0426 20:54:07.952957 32610 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:07.952978 32610 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:07.953081 32610 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:07.953161 32610 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:07.953259 32610 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:07.953282 32610 net.cpp:86] Creating Layer mnist
I0426 20:54:07.953291 32610 net.cpp:382] mnist -> data
I0426 20:54:07.953313 32610 net.cpp:382] mnist -> label
I0426 20:54:07.954402 32610 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:07.956941 32610 net.cpp:124] Setting up mnist
I0426 20:54:07.956961 32610 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:07.956969 32610 net.cpp:131] Top shape: 64 (64)
I0426 20:54:07.956971 32610 net.cpp:139] Memory required for data: 200960
I0426 20:54:07.956979 32610 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:07.956995 32610 net.cpp:86] Creating Layer conv0
I0426 20:54:07.957016 32610 net.cpp:408] conv0 <- data
I0426 20:54:07.957028 32610 net.cpp:382] conv0 -> conv0
I0426 20:54:08.252372 32610 net.cpp:124] Setting up conv0
I0426 20:54:08.252406 32610 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:08.252413 32610 net.cpp:139] Memory required for data: 7573760
I0426 20:54:08.252430 32610 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:08.252445 32610 net.cpp:86] Creating Layer pool0
I0426 20:54:08.252450 32610 net.cpp:408] pool0 <- conv0
I0426 20:54:08.252457 32610 net.cpp:382] pool0 -> pool0
I0426 20:54:08.252522 32610 net.cpp:124] Setting up pool0
I0426 20:54:08.252532 32610 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:08.252535 32610 net.cpp:139] Memory required for data: 9416960
I0426 20:54:08.252539 32610 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:08.252552 32610 net.cpp:86] Creating Layer conv1
I0426 20:54:08.252557 32610 net.cpp:408] conv1 <- pool0
I0426 20:54:08.252562 32610 net.cpp:382] conv1 -> conv1
I0426 20:54:08.255941 32610 net.cpp:124] Setting up conv1
I0426 20:54:08.255960 32610 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:54:08.255965 32610 net.cpp:139] Memory required for data: 9580800
I0426 20:54:08.255975 32610 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:08.255985 32610 net.cpp:86] Creating Layer pool1
I0426 20:54:08.255990 32610 net.cpp:408] pool1 <- conv1
I0426 20:54:08.255995 32610 net.cpp:382] pool1 -> pool1
I0426 20:54:08.256039 32610 net.cpp:124] Setting up pool1
I0426 20:54:08.256047 32610 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:54:08.256050 32610 net.cpp:139] Memory required for data: 9621760
I0426 20:54:08.256053 32610 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:08.256062 32610 net.cpp:86] Creating Layer ip1
I0426 20:54:08.256065 32610 net.cpp:408] ip1 <- pool1
I0426 20:54:08.256072 32610 net.cpp:382] ip1 -> ip1
I0426 20:54:08.256515 32610 net.cpp:124] Setting up ip1
I0426 20:54:08.256525 32610 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:08.256530 32610 net.cpp:139] Memory required for data: 9698560
I0426 20:54:08.256538 32610 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:08.256546 32610 net.cpp:86] Creating Layer relu1
I0426 20:54:08.256549 32610 net.cpp:408] relu1 <- ip1
I0426 20:54:08.256554 32610 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:08.256755 32610 net.cpp:124] Setting up relu1
I0426 20:54:08.256767 32610 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:08.256772 32610 net.cpp:139] Memory required for data: 9775360
I0426 20:54:08.256775 32610 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:08.256783 32610 net.cpp:86] Creating Layer ip2
I0426 20:54:08.256786 32610 net.cpp:408] ip2 <- ip1
I0426 20:54:08.256793 32610 net.cpp:382] ip2 -> ip2
I0426 20:54:08.258507 32610 net.cpp:124] Setting up ip2
I0426 20:54:08.258523 32610 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:08.258527 32610 net.cpp:139] Memory required for data: 9852160
I0426 20:54:08.258535 32610 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:08.258543 32610 net.cpp:86] Creating Layer relu2
I0426 20:54:08.258548 32610 net.cpp:408] relu2 <- ip2
I0426 20:54:08.258554 32610 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:08.259495 32610 net.cpp:124] Setting up relu2
I0426 20:54:08.259510 32610 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:08.259516 32610 net.cpp:139] Memory required for data: 9928960
I0426 20:54:08.259519 32610 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:08.259528 32610 net.cpp:86] Creating Layer ip3
I0426 20:54:08.259532 32610 net.cpp:408] ip3 <- ip2
I0426 20:54:08.259538 32610 net.cpp:382] ip3 -> ip3
I0426 20:54:08.259680 32610 net.cpp:124] Setting up ip3
I0426 20:54:08.259690 32610 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:08.259694 32610 net.cpp:139] Memory required for data: 9931520
I0426 20:54:08.259704 32610 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:08.259711 32610 net.cpp:86] Creating Layer relu3
I0426 20:54:08.259714 32610 net.cpp:408] relu3 <- ip3
I0426 20:54:08.259719 32610 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:08.259920 32610 net.cpp:124] Setting up relu3
I0426 20:54:08.259932 32610 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:08.259935 32610 net.cpp:139] Memory required for data: 9934080
I0426 20:54:08.259939 32610 layer_factory.hpp:77] Creating layer loss
I0426 20:54:08.259946 32610 net.cpp:86] Creating Layer loss
I0426 20:54:08.259950 32610 net.cpp:408] loss <- ip3
I0426 20:54:08.259955 32610 net.cpp:408] loss <- label
I0426 20:54:08.259961 32610 net.cpp:382] loss -> loss
I0426 20:54:08.259979 32610 layer_factory.hpp:77] Creating layer loss
I0426 20:54:08.260251 32610 net.cpp:124] Setting up loss
I0426 20:54:08.260263 32610 net.cpp:131] Top shape: (1)
I0426 20:54:08.260267 32610 net.cpp:134]     with loss weight 1
I0426 20:54:08.260283 32610 net.cpp:139] Memory required for data: 9934084
I0426 20:54:08.260288 32610 net.cpp:200] loss needs backward computation.
I0426 20:54:08.260293 32610 net.cpp:200] relu3 needs backward computation.
I0426 20:54:08.260296 32610 net.cpp:200] ip3 needs backward computation.
I0426 20:54:08.260300 32610 net.cpp:200] relu2 needs backward computation.
I0426 20:54:08.260303 32610 net.cpp:200] ip2 needs backward computation.
I0426 20:54:08.260308 32610 net.cpp:200] relu1 needs backward computation.
I0426 20:54:08.260310 32610 net.cpp:200] ip1 needs backward computation.
I0426 20:54:08.260314 32610 net.cpp:200] pool1 needs backward computation.
I0426 20:54:08.260318 32610 net.cpp:200] conv1 needs backward computation.
I0426 20:54:08.260323 32610 net.cpp:200] pool0 needs backward computation.
I0426 20:54:08.260325 32610 net.cpp:200] conv0 needs backward computation.
I0426 20:54:08.260330 32610 net.cpp:202] mnist does not need backward computation.
I0426 20:54:08.260334 32610 net.cpp:244] This network produces output loss
I0426 20:54:08.260344 32610 net.cpp:257] Network initialization done.
I0426 20:54:08.260731 32610 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test152.prototxt
I0426 20:54:08.260763 32610 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:08.260923 32610 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:08.261055 32610 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:08.261118 32610 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:08.261137 32610 net.cpp:86] Creating Layer mnist
I0426 20:54:08.261145 32610 net.cpp:382] mnist -> data
I0426 20:54:08.261158 32610 net.cpp:382] mnist -> label
I0426 20:54:08.261286 32610 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:08.262838 32610 net.cpp:124] Setting up mnist
I0426 20:54:08.262854 32610 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:08.262861 32610 net.cpp:131] Top shape: 100 (100)
I0426 20:54:08.262866 32610 net.cpp:139] Memory required for data: 314000
I0426 20:54:08.262869 32610 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:08.262877 32610 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:08.262881 32610 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:08.262887 32610 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:08.262895 32610 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:08.262956 32610 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:08.262971 32610 net.cpp:131] Top shape: 100 (100)
I0426 20:54:08.262976 32610 net.cpp:131] Top shape: 100 (100)
I0426 20:54:08.262979 32610 net.cpp:139] Memory required for data: 314800
I0426 20:54:08.262984 32610 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:08.262994 32610 net.cpp:86] Creating Layer conv0
I0426 20:54:08.262996 32610 net.cpp:408] conv0 <- data
I0426 20:54:08.263002 32610 net.cpp:382] conv0 -> conv0
I0426 20:54:08.265033 32610 net.cpp:124] Setting up conv0
I0426 20:54:08.265051 32610 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:08.265056 32610 net.cpp:139] Memory required for data: 11834800
I0426 20:54:08.265067 32610 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:08.265075 32610 net.cpp:86] Creating Layer pool0
I0426 20:54:08.265079 32610 net.cpp:408] pool0 <- conv0
I0426 20:54:08.265085 32610 net.cpp:382] pool0 -> pool0
I0426 20:54:08.265127 32610 net.cpp:124] Setting up pool0
I0426 20:54:08.265135 32610 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:08.265137 32610 net.cpp:139] Memory required for data: 14714800
I0426 20:54:08.265141 32610 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:08.265151 32610 net.cpp:86] Creating Layer conv1
I0426 20:54:08.265154 32610 net.cpp:408] conv1 <- pool0
I0426 20:54:08.265161 32610 net.cpp:382] conv1 -> conv1
I0426 20:54:08.267037 32610 net.cpp:124] Setting up conv1
I0426 20:54:08.267055 32610 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:54:08.267060 32610 net.cpp:139] Memory required for data: 14970800
I0426 20:54:08.267071 32610 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:08.267078 32610 net.cpp:86] Creating Layer pool1
I0426 20:54:08.267082 32610 net.cpp:408] pool1 <- conv1
I0426 20:54:08.267088 32610 net.cpp:382] pool1 -> pool1
I0426 20:54:08.267130 32610 net.cpp:124] Setting up pool1
I0426 20:54:08.267138 32610 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:54:08.267140 32610 net.cpp:139] Memory required for data: 15034800
I0426 20:54:08.267144 32610 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:08.267150 32610 net.cpp:86] Creating Layer ip1
I0426 20:54:08.267155 32610 net.cpp:408] ip1 <- pool1
I0426 20:54:08.267161 32610 net.cpp:382] ip1 -> ip1
I0426 20:54:08.267627 32610 net.cpp:124] Setting up ip1
I0426 20:54:08.267637 32610 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:08.267653 32610 net.cpp:139] Memory required for data: 15154800
I0426 20:54:08.267663 32610 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:08.267668 32610 net.cpp:86] Creating Layer relu1
I0426 20:54:08.267673 32610 net.cpp:408] relu1 <- ip1
I0426 20:54:08.267678 32610 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:08.267876 32610 net.cpp:124] Setting up relu1
I0426 20:54:08.267887 32610 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:08.267892 32610 net.cpp:139] Memory required for data: 15274800
I0426 20:54:08.267896 32610 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:08.267905 32610 net.cpp:86] Creating Layer ip2
I0426 20:54:08.267910 32610 net.cpp:408] ip2 <- ip1
I0426 20:54:08.267915 32610 net.cpp:382] ip2 -> ip2
I0426 20:54:08.268682 32610 net.cpp:124] Setting up ip2
I0426 20:54:08.268693 32610 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:08.268697 32610 net.cpp:139] Memory required for data: 15394800
I0426 20:54:08.268704 32610 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:08.268709 32610 net.cpp:86] Creating Layer relu2
I0426 20:54:08.268714 32610 net.cpp:408] relu2 <- ip2
I0426 20:54:08.268719 32610 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:08.268913 32610 net.cpp:124] Setting up relu2
I0426 20:54:08.268924 32610 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:08.268929 32610 net.cpp:139] Memory required for data: 15514800
I0426 20:54:08.268934 32610 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:08.268940 32610 net.cpp:86] Creating Layer ip3
I0426 20:54:08.268944 32610 net.cpp:408] ip3 <- ip2
I0426 20:54:08.268959 32610 net.cpp:382] ip3 -> ip3
I0426 20:54:08.269099 32610 net.cpp:124] Setting up ip3
I0426 20:54:08.269109 32610 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:08.269112 32610 net.cpp:139] Memory required for data: 15518800
I0426 20:54:08.269122 32610 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:08.269129 32610 net.cpp:86] Creating Layer relu3
I0426 20:54:08.269132 32610 net.cpp:408] relu3 <- ip3
I0426 20:54:08.269137 32610 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:08.270153 32610 net.cpp:124] Setting up relu3
I0426 20:54:08.270167 32610 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:08.270172 32610 net.cpp:139] Memory required for data: 15522800
I0426 20:54:08.270176 32610 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:54:08.270182 32610 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:54:08.270187 32610 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:54:08.270193 32610 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:54:08.270200 32610 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:54:08.270244 32610 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:54:08.270251 32610 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:08.270256 32610 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:08.270259 32610 net.cpp:139] Memory required for data: 15530800
I0426 20:54:08.270262 32610 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:08.270268 32610 net.cpp:86] Creating Layer accuracy
I0426 20:54:08.270272 32610 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:54:08.270277 32610 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:08.270282 32610 net.cpp:382] accuracy -> accuracy
I0426 20:54:08.270290 32610 net.cpp:124] Setting up accuracy
I0426 20:54:08.270295 32610 net.cpp:131] Top shape: (1)
I0426 20:54:08.270299 32610 net.cpp:139] Memory required for data: 15530804
I0426 20:54:08.270303 32610 layer_factory.hpp:77] Creating layer loss
I0426 20:54:08.270308 32610 net.cpp:86] Creating Layer loss
I0426 20:54:08.270311 32610 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:54:08.270316 32610 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:08.270321 32610 net.cpp:382] loss -> loss
I0426 20:54:08.270328 32610 layer_factory.hpp:77] Creating layer loss
I0426 20:54:08.270604 32610 net.cpp:124] Setting up loss
I0426 20:54:08.270615 32610 net.cpp:131] Top shape: (1)
I0426 20:54:08.270619 32610 net.cpp:134]     with loss weight 1
I0426 20:54:08.270639 32610 net.cpp:139] Memory required for data: 15530808
I0426 20:54:08.270644 32610 net.cpp:200] loss needs backward computation.
I0426 20:54:08.270649 32610 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:08.270654 32610 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:54:08.270658 32610 net.cpp:200] relu3 needs backward computation.
I0426 20:54:08.270663 32610 net.cpp:200] ip3 needs backward computation.
I0426 20:54:08.270666 32610 net.cpp:200] relu2 needs backward computation.
I0426 20:54:08.270669 32610 net.cpp:200] ip2 needs backward computation.
I0426 20:54:08.270673 32610 net.cpp:200] relu1 needs backward computation.
I0426 20:54:08.270678 32610 net.cpp:200] ip1 needs backward computation.
I0426 20:54:08.270681 32610 net.cpp:200] pool1 needs backward computation.
I0426 20:54:08.270685 32610 net.cpp:200] conv1 needs backward computation.
I0426 20:54:08.270689 32610 net.cpp:200] pool0 needs backward computation.
I0426 20:54:08.270694 32610 net.cpp:200] conv0 needs backward computation.
I0426 20:54:08.270697 32610 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:08.270702 32610 net.cpp:202] mnist does not need backward computation.
I0426 20:54:08.270706 32610 net.cpp:244] This network produces output accuracy
I0426 20:54:08.270711 32610 net.cpp:244] This network produces output loss
I0426 20:54:08.270723 32610 net.cpp:257] Network initialization done.
I0426 20:54:08.270772 32610 solver.cpp:56] Solver scaffolding done.
I0426 20:54:08.271199 32610 caffe.cpp:248] Starting Optimization
I0426 20:54:08.271209 32610 solver.cpp:273] Solving LeNet
I0426 20:54:08.271212 32610 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:08.272198 32610 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:08.282800 32610 blocking_queue.cpp:49] Waiting for data
I0426 20:54:08.353351 32619 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:08.354573 32610 solver.cpp:398]     Test net output #0: accuracy = 0.1104
I0426 20:54:08.354598 32610 solver.cpp:398]     Test net output #1: loss = 2.31963 (* 1 = 2.31963 loss)
I0426 20:54:08.360620 32610 solver.cpp:219] Iteration 0 (-9.09443e-43 iter/s, 0.0893645s/100 iters), loss = 2.29328
I0426 20:54:08.360651 32610 solver.cpp:238]     Train net output #0: loss = 2.29328 (* 1 = 2.29328 loss)
I0426 20:54:08.360666 32610 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:08.501793 32610 solver.cpp:219] Iteration 100 (708.568 iter/s, 0.14113s/100 iters), loss = 0.732046
I0426 20:54:08.501827 32610 solver.cpp:238]     Train net output #0: loss = 0.732046 (* 1 = 0.732046 loss)
I0426 20:54:08.501834 32610 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:08.644634 32610 solver.cpp:219] Iteration 200 (700.311 iter/s, 0.142794s/100 iters), loss = 0.17276
I0426 20:54:08.644666 32610 solver.cpp:238]     Train net output #0: loss = 0.17276 (* 1 = 0.17276 loss)
I0426 20:54:08.644675 32610 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:08.785461 32610 solver.cpp:219] Iteration 300 (710.31 iter/s, 0.140784s/100 iters), loss = 0.21697
I0426 20:54:08.785490 32610 solver.cpp:238]     Train net output #0: loss = 0.21697 (* 1 = 0.21697 loss)
I0426 20:54:08.785498 32610 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:08.920089 32610 solver.cpp:219] Iteration 400 (743.017 iter/s, 0.134586s/100 iters), loss = 0.117381
I0426 20:54:08.920159 32610 solver.cpp:238]     Train net output #0: loss = 0.117381 (* 1 = 0.117381 loss)
I0426 20:54:08.920181 32610 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:09.060051 32610 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:09.137818 32619 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:09.138875 32610 solver.cpp:398]     Test net output #0: accuracy = 0.9735
I0426 20:54:09.138912 32610 solver.cpp:398]     Test net output #1: loss = 0.0820763 (* 1 = 0.0820763 loss)
I0426 20:54:09.140269 32610 solver.cpp:219] Iteration 500 (454.35 iter/s, 0.220094s/100 iters), loss = 0.111269
I0426 20:54:09.140323 32610 solver.cpp:238]     Train net output #0: loss = 0.111269 (* 1 = 0.111269 loss)
I0426 20:54:09.140331 32610 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:09.282109 32610 solver.cpp:219] Iteration 600 (705.278 iter/s, 0.141788s/100 iters), loss = 0.14124
I0426 20:54:09.282150 32610 solver.cpp:238]     Train net output #0: loss = 0.14124 (* 1 = 0.14124 loss)
I0426 20:54:09.282156 32610 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:09.423763 32610 solver.cpp:219] Iteration 700 (706.221 iter/s, 0.141599s/100 iters), loss = 0.118213
I0426 20:54:09.423799 32610 solver.cpp:238]     Train net output #0: loss = 0.118213 (* 1 = 0.118213 loss)
I0426 20:54:09.423809 32610 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:09.564311 32610 solver.cpp:219] Iteration 800 (711.744 iter/s, 0.1405s/100 iters), loss = 0.245882
I0426 20:54:09.564347 32610 solver.cpp:238]     Train net output #0: loss = 0.245882 (* 1 = 0.245882 loss)
I0426 20:54:09.564357 32610 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:09.705312 32610 solver.cpp:219] Iteration 900 (709.459 iter/s, 0.140953s/100 iters), loss = 0.0724928
I0426 20:54:09.705348 32610 solver.cpp:238]     Train net output #0: loss = 0.0724928 (* 1 = 0.0724928 loss)
I0426 20:54:09.705358 32610 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:09.752717 32618 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:09.848428 32610 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:09.851445 32610 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:09.853368 32610 solver.cpp:311] Iteration 1000, loss = 0.126462
I0426 20:54:09.853387 32610 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:09.939301 32619 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:09.940732 32610 solver.cpp:398]     Test net output #0: accuracy = 0.9807
I0426 20:54:09.940767 32610 solver.cpp:398]     Test net output #1: loss = 0.0607892 (* 1 = 0.0607892 loss)
I0426 20:54:09.940778 32610 solver.cpp:316] Optimization Done.
I0426 20:54:09.940783 32610 caffe.cpp:259] Optimization Done.
