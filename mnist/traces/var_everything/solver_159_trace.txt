I0426 20:54:26.414734 32668 caffe.cpp:218] Using GPUs 0
I0426 20:54:26.444633 32668 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:26.889629 32668 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test159.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:26.889737 32668 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test159.prototxt
I0426 20:54:26.890070 32668 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:26.890084 32668 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:26.890166 32668 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:26.890228 32668 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:26.890327 32668 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:26.890354 32668 net.cpp:86] Creating Layer mnist
I0426 20:54:26.890368 32668 net.cpp:382] mnist -> data
I0426 20:54:26.890410 32668 net.cpp:382] mnist -> label
I0426 20:54:26.891362 32668 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:26.893532 32668 net.cpp:124] Setting up mnist
I0426 20:54:26.893561 32668 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:26.893566 32668 net.cpp:131] Top shape: 64 (64)
I0426 20:54:26.893568 32668 net.cpp:139] Memory required for data: 200960
I0426 20:54:26.893573 32668 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:26.893589 32668 net.cpp:86] Creating Layer conv0
I0426 20:54:26.893592 32668 net.cpp:408] conv0 <- data
I0426 20:54:26.893604 32668 net.cpp:382] conv0 -> conv0
I0426 20:54:27.125941 32668 net.cpp:124] Setting up conv0
I0426 20:54:27.125967 32668 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:27.125970 32668 net.cpp:139] Memory required for data: 7573760
I0426 20:54:27.126019 32668 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:27.126034 32668 net.cpp:86] Creating Layer pool0
I0426 20:54:27.126039 32668 net.cpp:408] pool0 <- conv0
I0426 20:54:27.126046 32668 net.cpp:382] pool0 -> pool0
I0426 20:54:27.126106 32668 net.cpp:124] Setting up pool0
I0426 20:54:27.126143 32668 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:27.126148 32668 net.cpp:139] Memory required for data: 9416960
I0426 20:54:27.126153 32668 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:27.126168 32668 net.cpp:86] Creating Layer conv1
I0426 20:54:27.126174 32668 net.cpp:408] conv1 <- pool0
I0426 20:54:27.126183 32668 net.cpp:382] conv1 -> conv1
I0426 20:54:27.128270 32668 net.cpp:124] Setting up conv1
I0426 20:54:27.128299 32668 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:27.128303 32668 net.cpp:139] Memory required for data: 9826560
I0426 20:54:27.128310 32668 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:27.128317 32668 net.cpp:86] Creating Layer pool1
I0426 20:54:27.128321 32668 net.cpp:408] pool1 <- conv1
I0426 20:54:27.128325 32668 net.cpp:382] pool1 -> pool1
I0426 20:54:27.128371 32668 net.cpp:124] Setting up pool1
I0426 20:54:27.128396 32668 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:27.128401 32668 net.cpp:139] Memory required for data: 9928960
I0426 20:54:27.128406 32668 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:27.128417 32668 net.cpp:86] Creating Layer ip1
I0426 20:54:27.128422 32668 net.cpp:408] ip1 <- pool1
I0426 20:54:27.128429 32668 net.cpp:382] ip1 -> ip1
I0426 20:54:27.129992 32668 net.cpp:124] Setting up ip1
I0426 20:54:27.130004 32668 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:27.130008 32668 net.cpp:139] Memory required for data: 10005760
I0426 20:54:27.130015 32668 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:27.130023 32668 net.cpp:86] Creating Layer relu1
I0426 20:54:27.130028 32668 net.cpp:408] relu1 <- ip1
I0426 20:54:27.130033 32668 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:27.130230 32668 net.cpp:124] Setting up relu1
I0426 20:54:27.130240 32668 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:27.130244 32668 net.cpp:139] Memory required for data: 10082560
I0426 20:54:27.130246 32668 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:27.130255 32668 net.cpp:86] Creating Layer ip2
I0426 20:54:27.130260 32668 net.cpp:408] ip2 <- ip1
I0426 20:54:27.130270 32668 net.cpp:382] ip2 -> ip2
I0426 20:54:27.130410 32668 net.cpp:124] Setting up ip2
I0426 20:54:27.130419 32668 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:27.130421 32668 net.cpp:139] Memory required for data: 10085120
I0426 20:54:27.130429 32668 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:27.130437 32668 net.cpp:86] Creating Layer relu2
I0426 20:54:27.130444 32668 net.cpp:408] relu2 <- ip2
I0426 20:54:27.130450 32668 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:27.131234 32668 net.cpp:124] Setting up relu2
I0426 20:54:27.131247 32668 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:27.131264 32668 net.cpp:139] Memory required for data: 10087680
I0426 20:54:27.131268 32668 layer_factory.hpp:77] Creating layer loss
I0426 20:54:27.131274 32668 net.cpp:86] Creating Layer loss
I0426 20:54:27.131278 32668 net.cpp:408] loss <- ip2
I0426 20:54:27.131283 32668 net.cpp:408] loss <- label
I0426 20:54:27.131288 32668 net.cpp:382] loss -> loss
I0426 20:54:27.131304 32668 layer_factory.hpp:77] Creating layer loss
I0426 20:54:27.131567 32668 net.cpp:124] Setting up loss
I0426 20:54:27.131577 32668 net.cpp:131] Top shape: (1)
I0426 20:54:27.131580 32668 net.cpp:134]     with loss weight 1
I0426 20:54:27.131598 32668 net.cpp:139] Memory required for data: 10087684
I0426 20:54:27.131604 32668 net.cpp:200] loss needs backward computation.
I0426 20:54:27.131610 32668 net.cpp:200] relu2 needs backward computation.
I0426 20:54:27.131615 32668 net.cpp:200] ip2 needs backward computation.
I0426 20:54:27.131620 32668 net.cpp:200] relu1 needs backward computation.
I0426 20:54:27.131624 32668 net.cpp:200] ip1 needs backward computation.
I0426 20:54:27.131642 32668 net.cpp:200] pool1 needs backward computation.
I0426 20:54:27.131649 32668 net.cpp:200] conv1 needs backward computation.
I0426 20:54:27.131654 32668 net.cpp:200] pool0 needs backward computation.
I0426 20:54:27.131659 32668 net.cpp:200] conv0 needs backward computation.
I0426 20:54:27.131664 32668 net.cpp:202] mnist does not need backward computation.
I0426 20:54:27.131667 32668 net.cpp:244] This network produces output loss
I0426 20:54:27.131680 32668 net.cpp:257] Network initialization done.
I0426 20:54:27.131978 32668 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test159.prototxt
I0426 20:54:27.132009 32668 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:27.132105 32668 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:27.132192 32668 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:27.132246 32668 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:27.132262 32668 net.cpp:86] Creating Layer mnist
I0426 20:54:27.132271 32668 net.cpp:382] mnist -> data
I0426 20:54:27.132282 32668 net.cpp:382] mnist -> label
I0426 20:54:27.132396 32668 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:27.133808 32668 net.cpp:124] Setting up mnist
I0426 20:54:27.133839 32668 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:27.133846 32668 net.cpp:131] Top shape: 100 (100)
I0426 20:54:27.133847 32668 net.cpp:139] Memory required for data: 314000
I0426 20:54:27.133852 32668 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:27.133857 32668 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:27.133860 32668 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:27.133880 32668 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:27.133888 32668 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:27.133980 32668 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:27.133988 32668 net.cpp:131] Top shape: 100 (100)
I0426 20:54:27.133992 32668 net.cpp:131] Top shape: 100 (100)
I0426 20:54:27.133996 32668 net.cpp:139] Memory required for data: 314800
I0426 20:54:27.133999 32668 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:27.134011 32668 net.cpp:86] Creating Layer conv0
I0426 20:54:27.134017 32668 net.cpp:408] conv0 <- data
I0426 20:54:27.134026 32668 net.cpp:382] conv0 -> conv0
I0426 20:54:27.135613 32668 net.cpp:124] Setting up conv0
I0426 20:54:27.135627 32668 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:27.135644 32668 net.cpp:139] Memory required for data: 11834800
I0426 20:54:27.135653 32668 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:27.135659 32668 net.cpp:86] Creating Layer pool0
I0426 20:54:27.135663 32668 net.cpp:408] pool0 <- conv0
I0426 20:54:27.135666 32668 net.cpp:382] pool0 -> pool0
I0426 20:54:27.135710 32668 net.cpp:124] Setting up pool0
I0426 20:54:27.135720 32668 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:27.135723 32668 net.cpp:139] Memory required for data: 14714800
I0426 20:54:27.135728 32668 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:27.135740 32668 net.cpp:86] Creating Layer conv1
I0426 20:54:27.135761 32668 net.cpp:408] conv1 <- pool0
I0426 20:54:27.135771 32668 net.cpp:382] conv1 -> conv1
I0426 20:54:27.137495 32668 net.cpp:124] Setting up conv1
I0426 20:54:27.137511 32668 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:27.137528 32668 net.cpp:139] Memory required for data: 15354800
I0426 20:54:27.137537 32668 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:27.137543 32668 net.cpp:86] Creating Layer pool1
I0426 20:54:27.137547 32668 net.cpp:408] pool1 <- conv1
I0426 20:54:27.137552 32668 net.cpp:382] pool1 -> pool1
I0426 20:54:27.137611 32668 net.cpp:124] Setting up pool1
I0426 20:54:27.137621 32668 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:27.137626 32668 net.cpp:139] Memory required for data: 15514800
I0426 20:54:27.137631 32668 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:27.137641 32668 net.cpp:86] Creating Layer ip1
I0426 20:54:27.137646 32668 net.cpp:408] ip1 <- pool1
I0426 20:54:27.137653 32668 net.cpp:382] ip1 -> ip1
I0426 20:54:27.139170 32668 net.cpp:124] Setting up ip1
I0426 20:54:27.139197 32668 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:27.139201 32668 net.cpp:139] Memory required for data: 15634800
I0426 20:54:27.139209 32668 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:27.139214 32668 net.cpp:86] Creating Layer relu1
I0426 20:54:27.139217 32668 net.cpp:408] relu1 <- ip1
I0426 20:54:27.139222 32668 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:27.139410 32668 net.cpp:124] Setting up relu1
I0426 20:54:27.139420 32668 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:27.139423 32668 net.cpp:139] Memory required for data: 15754800
I0426 20:54:27.139426 32668 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:27.139436 32668 net.cpp:86] Creating Layer ip2
I0426 20:54:27.139442 32668 net.cpp:408] ip2 <- ip1
I0426 20:54:27.139451 32668 net.cpp:382] ip2 -> ip2
I0426 20:54:27.139602 32668 net.cpp:124] Setting up ip2
I0426 20:54:27.139611 32668 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:27.139613 32668 net.cpp:139] Memory required for data: 15758800
I0426 20:54:27.139619 32668 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:27.139626 32668 net.cpp:86] Creating Layer relu2
I0426 20:54:27.139631 32668 net.cpp:408] relu2 <- ip2
I0426 20:54:27.139637 32668 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:27.139808 32668 net.cpp:124] Setting up relu2
I0426 20:54:27.139817 32668 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:27.139822 32668 net.cpp:139] Memory required for data: 15762800
I0426 20:54:27.139824 32668 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:54:27.139832 32668 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:54:27.139837 32668 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:54:27.139843 32668 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:54:27.139865 32668 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:54:27.139914 32668 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:54:27.139924 32668 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:27.139926 32668 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:27.139930 32668 net.cpp:139] Memory required for data: 15770800
I0426 20:54:27.139935 32668 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:27.139941 32668 net.cpp:86] Creating Layer accuracy
I0426 20:54:27.139946 32668 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:54:27.139953 32668 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:27.139961 32668 net.cpp:382] accuracy -> accuracy
I0426 20:54:27.139971 32668 net.cpp:124] Setting up accuracy
I0426 20:54:27.139977 32668 net.cpp:131] Top shape: (1)
I0426 20:54:27.139982 32668 net.cpp:139] Memory required for data: 15770804
I0426 20:54:27.139987 32668 layer_factory.hpp:77] Creating layer loss
I0426 20:54:27.140000 32668 net.cpp:86] Creating Layer loss
I0426 20:54:27.140005 32668 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:54:27.140012 32668 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:27.140018 32668 net.cpp:382] loss -> loss
I0426 20:54:27.140027 32668 layer_factory.hpp:77] Creating layer loss
I0426 20:54:27.140282 32668 net.cpp:124] Setting up loss
I0426 20:54:27.140293 32668 net.cpp:131] Top shape: (1)
I0426 20:54:27.140297 32668 net.cpp:134]     with loss weight 1
I0426 20:54:27.140305 32668 net.cpp:139] Memory required for data: 15770808
I0426 20:54:27.140310 32668 net.cpp:200] loss needs backward computation.
I0426 20:54:27.140316 32668 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:27.140321 32668 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:54:27.140326 32668 net.cpp:200] relu2 needs backward computation.
I0426 20:54:27.140332 32668 net.cpp:200] ip2 needs backward computation.
I0426 20:54:27.140337 32668 net.cpp:200] relu1 needs backward computation.
I0426 20:54:27.140341 32668 net.cpp:200] ip1 needs backward computation.
I0426 20:54:27.140347 32668 net.cpp:200] pool1 needs backward computation.
I0426 20:54:27.140352 32668 net.cpp:200] conv1 needs backward computation.
I0426 20:54:27.140372 32668 net.cpp:200] pool0 needs backward computation.
I0426 20:54:27.140377 32668 net.cpp:200] conv0 needs backward computation.
I0426 20:54:27.140383 32668 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:27.140388 32668 net.cpp:202] mnist does not need backward computation.
I0426 20:54:27.140393 32668 net.cpp:244] This network produces output accuracy
I0426 20:54:27.140396 32668 net.cpp:244] This network produces output loss
I0426 20:54:27.140410 32668 net.cpp:257] Network initialization done.
I0426 20:54:27.140461 32668 solver.cpp:56] Solver scaffolding done.
I0426 20:54:27.140769 32668 caffe.cpp:248] Starting Optimization
I0426 20:54:27.140774 32668 solver.cpp:273] Solving LeNet
I0426 20:54:27.140775 32668 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:27.141757 32668 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:27.148596 32668 blocking_queue.cpp:49] Waiting for data
I0426 20:54:27.221114 32675 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:27.221959 32668 solver.cpp:398]     Test net output #0: accuracy = 0.0935
I0426 20:54:27.221992 32668 solver.cpp:398]     Test net output #1: loss = 2.3183 (* 1 = 2.3183 loss)
I0426 20:54:27.226382 32668 solver.cpp:219] Iteration 0 (0 iter/s, 0.0855624s/100 iters), loss = 2.34703
I0426 20:54:27.226419 32668 solver.cpp:238]     Train net output #0: loss = 2.34703 (* 1 = 2.34703 loss)
I0426 20:54:27.226430 32668 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:27.364605 32668 solver.cpp:219] Iteration 100 (723.654 iter/s, 0.138188s/100 iters), loss = 1.41925
I0426 20:54:27.364637 32668 solver.cpp:238]     Train net output #0: loss = 1.41925 (* 1 = 1.41925 loss)
I0426 20:54:27.364645 32668 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:27.508834 32668 solver.cpp:219] Iteration 200 (693.665 iter/s, 0.144162s/100 iters), loss = 1.49541
I0426 20:54:27.508910 32668 solver.cpp:238]     Train net output #0: loss = 1.49541 (* 1 = 1.49541 loss)
I0426 20:54:27.508924 32668 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:27.659303 32668 solver.cpp:219] Iteration 300 (664.975 iter/s, 0.150382s/100 iters), loss = 1.12774
I0426 20:54:27.659343 32668 solver.cpp:238]     Train net output #0: loss = 1.12774 (* 1 = 1.12774 loss)
I0426 20:54:27.659353 32668 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:27.809530 32668 solver.cpp:219] Iteration 400 (665.909 iter/s, 0.150171s/100 iters), loss = 1.40403
I0426 20:54:27.809576 32668 solver.cpp:238]     Train net output #0: loss = 1.40403 (* 1 = 1.40403 loss)
I0426 20:54:27.809587 32668 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:27.961086 32668 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:28.038393 32675 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:28.040863 32668 solver.cpp:398]     Test net output #0: accuracy = 0.5927
I0426 20:54:28.040889 32668 solver.cpp:398]     Test net output #1: loss = 1.2062 (* 1 = 1.2062 loss)
I0426 20:54:28.042206 32668 solver.cpp:219] Iteration 500 (429.893 iter/s, 0.232616s/100 iters), loss = 1.34018
I0426 20:54:28.042248 32668 solver.cpp:238]     Train net output #0: loss = 1.34018 (* 1 = 1.34018 loss)
I0426 20:54:28.042255 32668 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:28.180584 32668 solver.cpp:219] Iteration 600 (722.876 iter/s, 0.138336s/100 iters), loss = 1.15064
I0426 20:54:28.180616 32668 solver.cpp:238]     Train net output #0: loss = 1.15064 (* 1 = 1.15064 loss)
I0426 20:54:28.180624 32668 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:28.320179 32668 solver.cpp:219] Iteration 700 (716.585 iter/s, 0.139551s/100 iters), loss = 1.35383
I0426 20:54:28.320209 32668 solver.cpp:238]     Train net output #0: loss = 1.35383 (* 1 = 1.35383 loss)
I0426 20:54:28.320217 32668 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:28.459893 32668 solver.cpp:219] Iteration 800 (715.981 iter/s, 0.139668s/100 iters), loss = 1.17936
I0426 20:54:28.459936 32668 solver.cpp:238]     Train net output #0: loss = 1.17936 (* 1 = 1.17936 loss)
I0426 20:54:28.459946 32668 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:28.607401 32668 solver.cpp:219] Iteration 900 (678.187 iter/s, 0.147452s/100 iters), loss = 1.20599
I0426 20:54:28.607447 32668 solver.cpp:238]     Train net output #0: loss = 1.20599 (* 1 = 1.20599 loss)
I0426 20:54:28.607460 32668 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:28.656970 32674 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:28.755934 32668 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:28.762416 32668 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:28.765298 32668 solver.cpp:311] Iteration 1000, loss = 1.25991
I0426 20:54:28.765329 32668 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:28.852874 32675 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:28.854202 32668 solver.cpp:398]     Test net output #0: accuracy = 0.5956
I0426 20:54:28.854238 32668 solver.cpp:398]     Test net output #1: loss = 1.18021 (* 1 = 1.18021 loss)
I0426 20:54:28.854249 32668 solver.cpp:316] Optimization Done.
I0426 20:54:28.854255 32668 caffe.cpp:259] Optimization Done.
