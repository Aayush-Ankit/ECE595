I0426 20:52:25.964912 32193 caffe.cpp:218] Using GPUs 0
I0426 20:52:25.995806 32193 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:26.451426 32193 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test112.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:26.451555 32193 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test112.prototxt
I0426 20:52:26.451864 32193 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:26.451879 32193 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:26.451962 32193 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:52:26.452018 32193 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:26.452117 32193 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:26.452137 32193 net.cpp:86] Creating Layer mnist
I0426 20:52:26.452145 32193 net.cpp:382] mnist -> data
I0426 20:52:26.452164 32193 net.cpp:382] mnist -> label
I0426 20:52:26.453179 32193 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:26.455420 32193 net.cpp:124] Setting up mnist
I0426 20:52:26.455433 32193 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:26.455438 32193 net.cpp:131] Top shape: 64 (64)
I0426 20:52:26.455441 32193 net.cpp:139] Memory required for data: 200960
I0426 20:52:26.455447 32193 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:26.455485 32193 net.cpp:86] Creating Layer conv0
I0426 20:52:26.455490 32193 net.cpp:408] conv0 <- data
I0426 20:52:26.455502 32193 net.cpp:382] conv0 -> conv0
I0426 20:52:26.690567 32193 net.cpp:124] Setting up conv0
I0426 20:52:26.690593 32193 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:26.690598 32193 net.cpp:139] Memory required for data: 3887360
I0426 20:52:26.690613 32193 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:26.690641 32193 net.cpp:86] Creating Layer pool0
I0426 20:52:26.690645 32193 net.cpp:408] pool0 <- conv0
I0426 20:52:26.690651 32193 net.cpp:382] pool0 -> pool0
I0426 20:52:26.690696 32193 net.cpp:124] Setting up pool0
I0426 20:52:26.690703 32193 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:26.690721 32193 net.cpp:139] Memory required for data: 4808960
I0426 20:52:26.690723 32193 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:26.690752 32193 net.cpp:86] Creating Layer conv1
I0426 20:52:26.690754 32193 net.cpp:408] conv1 <- pool0
I0426 20:52:26.690760 32193 net.cpp:382] conv1 -> conv1
I0426 20:52:26.693560 32193 net.cpp:124] Setting up conv1
I0426 20:52:26.693574 32193 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:52:26.693578 32193 net.cpp:139] Memory required for data: 5218560
I0426 20:52:26.693588 32193 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:26.693595 32193 net.cpp:86] Creating Layer pool1
I0426 20:52:26.693599 32193 net.cpp:408] pool1 <- conv1
I0426 20:52:26.693604 32193 net.cpp:382] pool1 -> pool1
I0426 20:52:26.693653 32193 net.cpp:124] Setting up pool1
I0426 20:52:26.693658 32193 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:52:26.693661 32193 net.cpp:139] Memory required for data: 5320960
I0426 20:52:26.693665 32193 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:26.693672 32193 net.cpp:86] Creating Layer ip1
I0426 20:52:26.693675 32193 net.cpp:408] ip1 <- pool1
I0426 20:52:26.693681 32193 net.cpp:382] ip1 -> ip1
I0426 20:52:26.694671 32193 net.cpp:124] Setting up ip1
I0426 20:52:26.694684 32193 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:26.694686 32193 net.cpp:139] Memory required for data: 5323520
I0426 20:52:26.694694 32193 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:26.694700 32193 net.cpp:86] Creating Layer relu1
I0426 20:52:26.694703 32193 net.cpp:408] relu1 <- ip1
I0426 20:52:26.694707 32193 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:26.694897 32193 net.cpp:124] Setting up relu1
I0426 20:52:26.694906 32193 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:26.694910 32193 net.cpp:139] Memory required for data: 5326080
I0426 20:52:26.694913 32193 layer_factory.hpp:77] Creating layer loss
I0426 20:52:26.694918 32193 net.cpp:86] Creating Layer loss
I0426 20:52:26.694922 32193 net.cpp:408] loss <- ip1
I0426 20:52:26.694926 32193 net.cpp:408] loss <- label
I0426 20:52:26.694931 32193 net.cpp:382] loss -> loss
I0426 20:52:26.694946 32193 layer_factory.hpp:77] Creating layer loss
I0426 20:52:26.695858 32193 net.cpp:124] Setting up loss
I0426 20:52:26.695870 32193 net.cpp:131] Top shape: (1)
I0426 20:52:26.695889 32193 net.cpp:134]     with loss weight 1
I0426 20:52:26.695904 32193 net.cpp:139] Memory required for data: 5326084
I0426 20:52:26.695907 32193 net.cpp:200] loss needs backward computation.
I0426 20:52:26.695911 32193 net.cpp:200] relu1 needs backward computation.
I0426 20:52:26.695914 32193 net.cpp:200] ip1 needs backward computation.
I0426 20:52:26.695917 32193 net.cpp:200] pool1 needs backward computation.
I0426 20:52:26.695920 32193 net.cpp:200] conv1 needs backward computation.
I0426 20:52:26.695924 32193 net.cpp:200] pool0 needs backward computation.
I0426 20:52:26.695941 32193 net.cpp:200] conv0 needs backward computation.
I0426 20:52:26.695945 32193 net.cpp:202] mnist does not need backward computation.
I0426 20:52:26.695948 32193 net.cpp:244] This network produces output loss
I0426 20:52:26.695955 32193 net.cpp:257] Network initialization done.
I0426 20:52:26.696230 32193 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test112.prototxt
I0426 20:52:26.696254 32193 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:26.696327 32193 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:52:26.696395 32193 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:26.696439 32193 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:26.696451 32193 net.cpp:86] Creating Layer mnist
I0426 20:52:26.696472 32193 net.cpp:382] mnist -> data
I0426 20:52:26.696496 32193 net.cpp:382] mnist -> label
I0426 20:52:26.696580 32193 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:26.698595 32193 net.cpp:124] Setting up mnist
I0426 20:52:26.698607 32193 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:26.698612 32193 net.cpp:131] Top shape: 100 (100)
I0426 20:52:26.698616 32193 net.cpp:139] Memory required for data: 314000
I0426 20:52:26.698618 32193 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:26.698642 32193 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:26.698644 32193 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:26.698649 32193 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:26.698655 32193 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:26.698705 32193 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:26.698710 32193 net.cpp:131] Top shape: 100 (100)
I0426 20:52:26.698714 32193 net.cpp:131] Top shape: 100 (100)
I0426 20:52:26.698716 32193 net.cpp:139] Memory required for data: 314800
I0426 20:52:26.698719 32193 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:26.698727 32193 net.cpp:86] Creating Layer conv0
I0426 20:52:26.698731 32193 net.cpp:408] conv0 <- data
I0426 20:52:26.698735 32193 net.cpp:382] conv0 -> conv0
I0426 20:52:26.699687 32193 net.cpp:124] Setting up conv0
I0426 20:52:26.699698 32193 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:26.699702 32193 net.cpp:139] Memory required for data: 6074800
I0426 20:52:26.699728 32193 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:26.699749 32193 net.cpp:86] Creating Layer pool0
I0426 20:52:26.699753 32193 net.cpp:408] pool0 <- conv0
I0426 20:52:26.699759 32193 net.cpp:382] pool0 -> pool0
I0426 20:52:26.699792 32193 net.cpp:124] Setting up pool0
I0426 20:52:26.699797 32193 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:26.699800 32193 net.cpp:139] Memory required for data: 7514800
I0426 20:52:26.699805 32193 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:26.699811 32193 net.cpp:86] Creating Layer conv1
I0426 20:52:26.699815 32193 net.cpp:408] conv1 <- pool0
I0426 20:52:26.699820 32193 net.cpp:382] conv1 -> conv1
I0426 20:52:26.702152 32193 net.cpp:124] Setting up conv1
I0426 20:52:26.702164 32193 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:52:26.702183 32193 net.cpp:139] Memory required for data: 8154800
I0426 20:52:26.702191 32193 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:26.702213 32193 net.cpp:86] Creating Layer pool1
I0426 20:52:26.702226 32193 net.cpp:408] pool1 <- conv1
I0426 20:52:26.702232 32193 net.cpp:382] pool1 -> pool1
I0426 20:52:26.702272 32193 net.cpp:124] Setting up pool1
I0426 20:52:26.702278 32193 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:52:26.702281 32193 net.cpp:139] Memory required for data: 8314800
I0426 20:52:26.702285 32193 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:26.702301 32193 net.cpp:86] Creating Layer ip1
I0426 20:52:26.702304 32193 net.cpp:408] ip1 <- pool1
I0426 20:52:26.702309 32193 net.cpp:382] ip1 -> ip1
I0426 20:52:26.702457 32193 net.cpp:124] Setting up ip1
I0426 20:52:26.702467 32193 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:26.702477 32193 net.cpp:139] Memory required for data: 8318800
I0426 20:52:26.702484 32193 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:26.702489 32193 net.cpp:86] Creating Layer relu1
I0426 20:52:26.702498 32193 net.cpp:408] relu1 <- ip1
I0426 20:52:26.702503 32193 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:26.703393 32193 net.cpp:124] Setting up relu1
I0426 20:52:26.703404 32193 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:26.703408 32193 net.cpp:139] Memory required for data: 8322800
I0426 20:52:26.703411 32193 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0426 20:52:26.703418 32193 net.cpp:86] Creating Layer ip1_relu1_0_split
I0426 20:52:26.703438 32193 net.cpp:408] ip1_relu1_0_split <- ip1
I0426 20:52:26.703443 32193 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0426 20:52:26.703449 32193 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0426 20:52:26.703490 32193 net.cpp:124] Setting up ip1_relu1_0_split
I0426 20:52:26.703495 32193 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:26.703498 32193 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:26.703501 32193 net.cpp:139] Memory required for data: 8330800
I0426 20:52:26.703505 32193 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:26.703510 32193 net.cpp:86] Creating Layer accuracy
I0426 20:52:26.703512 32193 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0426 20:52:26.703523 32193 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:26.703528 32193 net.cpp:382] accuracy -> accuracy
I0426 20:52:26.703536 32193 net.cpp:124] Setting up accuracy
I0426 20:52:26.703539 32193 net.cpp:131] Top shape: (1)
I0426 20:52:26.703542 32193 net.cpp:139] Memory required for data: 8330804
I0426 20:52:26.703546 32193 layer_factory.hpp:77] Creating layer loss
I0426 20:52:26.703550 32193 net.cpp:86] Creating Layer loss
I0426 20:52:26.703553 32193 net.cpp:408] loss <- ip1_relu1_0_split_1
I0426 20:52:26.703557 32193 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:26.703562 32193 net.cpp:382] loss -> loss
I0426 20:52:26.703567 32193 layer_factory.hpp:77] Creating layer loss
I0426 20:52:26.703799 32193 net.cpp:124] Setting up loss
I0426 20:52:26.703809 32193 net.cpp:131] Top shape: (1)
I0426 20:52:26.703812 32193 net.cpp:134]     with loss weight 1
I0426 20:52:26.703819 32193 net.cpp:139] Memory required for data: 8330808
I0426 20:52:26.703822 32193 net.cpp:200] loss needs backward computation.
I0426 20:52:26.703826 32193 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:26.703830 32193 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0426 20:52:26.703833 32193 net.cpp:200] relu1 needs backward computation.
I0426 20:52:26.703836 32193 net.cpp:200] ip1 needs backward computation.
I0426 20:52:26.703840 32193 net.cpp:200] pool1 needs backward computation.
I0426 20:52:26.703842 32193 net.cpp:200] conv1 needs backward computation.
I0426 20:52:26.703846 32193 net.cpp:200] pool0 needs backward computation.
I0426 20:52:26.703856 32193 net.cpp:200] conv0 needs backward computation.
I0426 20:52:26.703860 32193 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:26.703865 32193 net.cpp:202] mnist does not need backward computation.
I0426 20:52:26.703867 32193 net.cpp:244] This network produces output accuracy
I0426 20:52:26.703871 32193 net.cpp:244] This network produces output loss
I0426 20:52:26.703889 32193 net.cpp:257] Network initialization done.
I0426 20:52:26.703922 32193 solver.cpp:56] Solver scaffolding done.
I0426 20:52:26.704161 32193 caffe.cpp:248] Starting Optimization
I0426 20:52:26.704169 32193 solver.cpp:273] Solving LeNet
I0426 20:52:26.704172 32193 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:26.705090 32193 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:26.710036 32193 blocking_queue.cpp:49] Waiting for data
I0426 20:52:26.781468 32200 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:26.782081 32193 solver.cpp:398]     Test net output #0: accuracy = 0.1209
I0426 20:52:26.782114 32193 solver.cpp:398]     Test net output #1: loss = 2.35111 (* 1 = 2.35111 loss)
I0426 20:52:26.785918 32193 solver.cpp:219] Iteration 0 (-9.94922e-43 iter/s, 0.0817213s/100 iters), loss = 2.40854
I0426 20:52:26.785959 32193 solver.cpp:238]     Train net output #0: loss = 2.40854 (* 1 = 2.40854 loss)
I0426 20:52:26.785986 32193 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:26.885702 32193 solver.cpp:219] Iteration 100 (1002.68 iter/s, 0.0997325s/100 iters), loss = 0.405447
I0426 20:52:26.885726 32193 solver.cpp:238]     Train net output #0: loss = 0.405447 (* 1 = 0.405447 loss)
I0426 20:52:26.885732 32193 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:26.975215 32193 solver.cpp:219] Iteration 200 (1117.59 iter/s, 0.0894781s/100 iters), loss = 0.148084
I0426 20:52:26.975240 32193 solver.cpp:238]     Train net output #0: loss = 0.148084 (* 1 = 0.148084 loss)
I0426 20:52:26.975262 32193 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:27.063118 32193 solver.cpp:219] Iteration 300 (1138.07 iter/s, 0.0878684s/100 iters), loss = 0.171019
I0426 20:52:27.063143 32193 solver.cpp:238]     Train net output #0: loss = 0.171019 (* 1 = 0.171019 loss)
I0426 20:52:27.063149 32193 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:27.149404 32193 solver.cpp:219] Iteration 400 (1159.43 iter/s, 0.0862495s/100 iters), loss = 0.101382
I0426 20:52:27.149431 32193 solver.cpp:238]     Train net output #0: loss = 0.101382 (* 1 = 0.101382 loss)
I0426 20:52:27.149437 32193 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:27.235777 32193 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:27.306054 32200 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:27.306605 32193 solver.cpp:398]     Test net output #0: accuracy = 0.9668
I0426 20:52:27.306628 32193 solver.cpp:398]     Test net output #1: loss = 0.109267 (* 1 = 0.109267 loss)
I0426 20:52:27.307562 32193 solver.cpp:219] Iteration 500 (632.444 iter/s, 0.158117s/100 iters), loss = 0.119029
I0426 20:52:27.307627 32193 solver.cpp:238]     Train net output #0: loss = 0.119029 (* 1 = 0.119029 loss)
I0426 20:52:27.307634 32193 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:27.406430 32193 solver.cpp:219] Iteration 600 (1012.12 iter/s, 0.098802s/100 iters), loss = 0.0901838
I0426 20:52:27.406453 32193 solver.cpp:238]     Train net output #0: loss = 0.0901839 (* 1 = 0.0901839 loss)
I0426 20:52:27.406461 32193 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:27.504604 32193 solver.cpp:219] Iteration 700 (1018.94 iter/s, 0.098141s/100 iters), loss = 0.173226
I0426 20:52:27.504627 32193 solver.cpp:238]     Train net output #0: loss = 0.173226 (* 1 = 0.173226 loss)
I0426 20:52:27.504633 32193 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:27.591437 32193 solver.cpp:219] Iteration 800 (1152.06 iter/s, 0.0868014s/100 iters), loss = 0.160176
I0426 20:52:27.591460 32193 solver.cpp:238]     Train net output #0: loss = 0.160176 (* 1 = 0.160176 loss)
I0426 20:52:27.591481 32193 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:27.678202 32193 solver.cpp:219] Iteration 900 (1152.98 iter/s, 0.086732s/100 iters), loss = 0.183889
I0426 20:52:27.678226 32193 solver.cpp:238]     Train net output #0: loss = 0.183889 (* 1 = 0.183889 loss)
I0426 20:52:27.678232 32193 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:27.707042 32199 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:27.764011 32193 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:27.765069 32193 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:27.765807 32193 solver.cpp:311] Iteration 1000, loss = 0.0920259
I0426 20:52:27.765822 32193 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:27.841953 32200 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:27.842514 32193 solver.cpp:398]     Test net output #0: accuracy = 0.9765
I0426 20:52:27.842535 32193 solver.cpp:398]     Test net output #1: loss = 0.0719708 (* 1 = 0.0719708 loss)
I0426 20:52:27.842557 32193 solver.cpp:316] Optimization Done.
I0426 20:52:27.842561 32193 caffe.cpp:259] Optimization Done.
