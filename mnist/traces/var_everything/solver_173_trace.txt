I0426 20:55:05.963802   338 caffe.cpp:218] Using GPUs 0
I0426 20:55:05.999132   338 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:06.463778   338 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test173.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:06.463945   338 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test173.prototxt
I0426 20:55:06.464329   338 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:06.464359   338 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:06.464448   338 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:55:06.464526   338 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:06.464606   338 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:06.464625   338 net.cpp:86] Creating Layer mnist
I0426 20:55:06.464632   338 net.cpp:382] mnist -> data
I0426 20:55:06.464650   338 net.cpp:382] mnist -> label
I0426 20:55:06.465591   338 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:06.467633   338 net.cpp:124] Setting up mnist
I0426 20:55:06.467663   338 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:06.467667   338 net.cpp:131] Top shape: 64 (64)
I0426 20:55:06.467670   338 net.cpp:139] Memory required for data: 200960
I0426 20:55:06.467675   338 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:06.467689   338 net.cpp:86] Creating Layer conv0
I0426 20:55:06.467694   338 net.cpp:408] conv0 <- data
I0426 20:55:06.467717   338 net.cpp:382] conv0 -> conv0
I0426 20:55:06.702066   338 net.cpp:124] Setting up conv0
I0426 20:55:06.702108   338 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:06.702112   338 net.cpp:139] Memory required for data: 7573760
I0426 20:55:06.702145   338 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:06.702173   338 net.cpp:86] Creating Layer pool0
I0426 20:55:06.702178   338 net.cpp:408] pool0 <- conv0
I0426 20:55:06.702183   338 net.cpp:382] pool0 -> pool0
I0426 20:55:06.702242   338 net.cpp:124] Setting up pool0
I0426 20:55:06.702253   338 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:06.702256   338 net.cpp:139] Memory required for data: 9416960
I0426 20:55:06.702260   338 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:06.702276   338 net.cpp:86] Creating Layer conv1
I0426 20:55:06.702280   338 net.cpp:408] conv1 <- pool0
I0426 20:55:06.702285   338 net.cpp:382] conv1 -> conv1
I0426 20:55:06.704474   338 net.cpp:124] Setting up conv1
I0426 20:55:06.704488   338 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:06.704491   338 net.cpp:139] Memory required for data: 10236160
I0426 20:55:06.704499   338 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:06.704505   338 net.cpp:86] Creating Layer pool1
I0426 20:55:06.704509   338 net.cpp:408] pool1 <- conv1
I0426 20:55:06.704514   338 net.cpp:382] pool1 -> pool1
I0426 20:55:06.704561   338 net.cpp:124] Setting up pool1
I0426 20:55:06.704566   338 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:06.704569   338 net.cpp:139] Memory required for data: 10440960
I0426 20:55:06.704571   338 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:06.704578   338 net.cpp:86] Creating Layer ip1
I0426 20:55:06.704581   338 net.cpp:408] ip1 <- pool1
I0426 20:55:06.704586   338 net.cpp:382] ip1 -> ip1
I0426 20:55:06.706735   338 net.cpp:124] Setting up ip1
I0426 20:55:06.706748   338 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:06.706750   338 net.cpp:139] Memory required for data: 10517760
I0426 20:55:06.706758   338 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:06.706763   338 net.cpp:86] Creating Layer relu1
I0426 20:55:06.706766   338 net.cpp:408] relu1 <- ip1
I0426 20:55:06.706770   338 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:06.706946   338 net.cpp:124] Setting up relu1
I0426 20:55:06.706954   338 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:06.706959   338 net.cpp:139] Memory required for data: 10594560
I0426 20:55:06.706961   338 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:06.706967   338 net.cpp:86] Creating Layer ip2
I0426 20:55:06.706970   338 net.cpp:408] ip2 <- ip1
I0426 20:55:06.706974   338 net.cpp:382] ip2 -> ip2
I0426 20:55:06.707082   338 net.cpp:124] Setting up ip2
I0426 20:55:06.707089   338 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:06.707093   338 net.cpp:139] Memory required for data: 10597120
I0426 20:55:06.707098   338 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:06.707103   338 net.cpp:86] Creating Layer relu2
I0426 20:55:06.707105   338 net.cpp:408] relu2 <- ip2
I0426 20:55:06.707109   338 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:06.707929   338 net.cpp:124] Setting up relu2
I0426 20:55:06.707942   338 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:06.707959   338 net.cpp:139] Memory required for data: 10599680
I0426 20:55:06.707963   338 layer_factory.hpp:77] Creating layer loss
I0426 20:55:06.707968   338 net.cpp:86] Creating Layer loss
I0426 20:55:06.707972   338 net.cpp:408] loss <- ip2
I0426 20:55:06.707976   338 net.cpp:408] loss <- label
I0426 20:55:06.707981   338 net.cpp:382] loss -> loss
I0426 20:55:06.708011   338 layer_factory.hpp:77] Creating layer loss
I0426 20:55:06.708228   338 net.cpp:124] Setting up loss
I0426 20:55:06.708237   338 net.cpp:131] Top shape: (1)
I0426 20:55:06.708240   338 net.cpp:134]     with loss weight 1
I0426 20:55:06.708254   338 net.cpp:139] Memory required for data: 10599684
I0426 20:55:06.708258   338 net.cpp:200] loss needs backward computation.
I0426 20:55:06.708261   338 net.cpp:200] relu2 needs backward computation.
I0426 20:55:06.708264   338 net.cpp:200] ip2 needs backward computation.
I0426 20:55:06.708267   338 net.cpp:200] relu1 needs backward computation.
I0426 20:55:06.708271   338 net.cpp:200] ip1 needs backward computation.
I0426 20:55:06.708283   338 net.cpp:200] pool1 needs backward computation.
I0426 20:55:06.708287   338 net.cpp:200] conv1 needs backward computation.
I0426 20:55:06.708289   338 net.cpp:200] pool0 needs backward computation.
I0426 20:55:06.708293   338 net.cpp:200] conv0 needs backward computation.
I0426 20:55:06.708297   338 net.cpp:202] mnist does not need backward computation.
I0426 20:55:06.708299   338 net.cpp:244] This network produces output loss
I0426 20:55:06.708307   338 net.cpp:257] Network initialization done.
I0426 20:55:06.708608   338 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test173.prototxt
I0426 20:55:06.708633   338 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:06.708714   338 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:55:06.708773   338 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:06.708863   338 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:06.708876   338 net.cpp:86] Creating Layer mnist
I0426 20:55:06.708880   338 net.cpp:382] mnist -> data
I0426 20:55:06.708887   338 net.cpp:382] mnist -> label
I0426 20:55:06.708969   338 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:06.711074   338 net.cpp:124] Setting up mnist
I0426 20:55:06.711086   338 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:06.711102   338 net.cpp:131] Top shape: 100 (100)
I0426 20:55:06.711104   338 net.cpp:139] Memory required for data: 314000
I0426 20:55:06.711108   338 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:06.711114   338 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:06.711117   338 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:06.711122   338 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:06.711143   338 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:06.711213   338 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:06.711221   338 net.cpp:131] Top shape: 100 (100)
I0426 20:55:06.711225   338 net.cpp:131] Top shape: 100 (100)
I0426 20:55:06.711228   338 net.cpp:139] Memory required for data: 314800
I0426 20:55:06.711230   338 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:06.711239   338 net.cpp:86] Creating Layer conv0
I0426 20:55:06.711242   338 net.cpp:408] conv0 <- data
I0426 20:55:06.711247   338 net.cpp:382] conv0 -> conv0
I0426 20:55:06.712986   338 net.cpp:124] Setting up conv0
I0426 20:55:06.713011   338 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:06.713014   338 net.cpp:139] Memory required for data: 11834800
I0426 20:55:06.713023   338 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:06.713045   338 net.cpp:86] Creating Layer pool0
I0426 20:55:06.713048   338 net.cpp:408] pool0 <- conv0
I0426 20:55:06.713053   338 net.cpp:382] pool0 -> pool0
I0426 20:55:06.713088   338 net.cpp:124] Setting up pool0
I0426 20:55:06.713096   338 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:06.713099   338 net.cpp:139] Memory required for data: 14714800
I0426 20:55:06.713102   338 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:06.713110   338 net.cpp:86] Creating Layer conv1
I0426 20:55:06.713114   338 net.cpp:408] conv1 <- pool0
I0426 20:55:06.713119   338 net.cpp:382] conv1 -> conv1
I0426 20:55:06.715070   338 net.cpp:124] Setting up conv1
I0426 20:55:06.715095   338 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:06.715097   338 net.cpp:139] Memory required for data: 15994800
I0426 20:55:06.715107   338 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:06.715129   338 net.cpp:86] Creating Layer pool1
I0426 20:55:06.715133   338 net.cpp:408] pool1 <- conv1
I0426 20:55:06.715140   338 net.cpp:382] pool1 -> pool1
I0426 20:55:06.715178   338 net.cpp:124] Setting up pool1
I0426 20:55:06.715186   338 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:06.715189   338 net.cpp:139] Memory required for data: 16314800
I0426 20:55:06.715193   338 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:06.715200   338 net.cpp:86] Creating Layer ip1
I0426 20:55:06.715204   338 net.cpp:408] ip1 <- pool1
I0426 20:55:06.715209   338 net.cpp:382] ip1 -> ip1
I0426 20:55:06.716652   338 net.cpp:124] Setting up ip1
I0426 20:55:06.716660   338 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:06.716675   338 net.cpp:139] Memory required for data: 16434800
I0426 20:55:06.716681   338 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:06.716686   338 net.cpp:86] Creating Layer relu1
I0426 20:55:06.716689   338 net.cpp:408] relu1 <- ip1
I0426 20:55:06.716709   338 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:06.717020   338 net.cpp:124] Setting up relu1
I0426 20:55:06.717030   338 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:06.717033   338 net.cpp:139] Memory required for data: 16554800
I0426 20:55:06.717037   338 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:06.717044   338 net.cpp:86] Creating Layer ip2
I0426 20:55:06.717047   338 net.cpp:408] ip2 <- ip1
I0426 20:55:06.717054   338 net.cpp:382] ip2 -> ip2
I0426 20:55:06.717191   338 net.cpp:124] Setting up ip2
I0426 20:55:06.717213   338 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:06.717216   338 net.cpp:139] Memory required for data: 16558800
I0426 20:55:06.717221   338 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:06.717237   338 net.cpp:86] Creating Layer relu2
I0426 20:55:06.717241   338 net.cpp:408] relu2 <- ip2
I0426 20:55:06.717245   338 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:06.717398   338 net.cpp:124] Setting up relu2
I0426 20:55:06.717406   338 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:06.717409   338 net.cpp:139] Memory required for data: 16562800
I0426 20:55:06.717412   338 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:55:06.717417   338 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:55:06.717422   338 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:55:06.717427   338 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:55:06.717442   338 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:55:06.717479   338 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:55:06.717486   338 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:06.717490   338 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:06.717492   338 net.cpp:139] Memory required for data: 16570800
I0426 20:55:06.717495   338 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:06.717500   338 net.cpp:86] Creating Layer accuracy
I0426 20:55:06.717504   338 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:55:06.717507   338 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:06.717512   338 net.cpp:382] accuracy -> accuracy
I0426 20:55:06.717519   338 net.cpp:124] Setting up accuracy
I0426 20:55:06.717522   338 net.cpp:131] Top shape: (1)
I0426 20:55:06.717541   338 net.cpp:139] Memory required for data: 16570804
I0426 20:55:06.717545   338 layer_factory.hpp:77] Creating layer loss
I0426 20:55:06.717550   338 net.cpp:86] Creating Layer loss
I0426 20:55:06.717553   338 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:55:06.717556   338 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:06.717561   338 net.cpp:382] loss -> loss
I0426 20:55:06.717566   338 layer_factory.hpp:77] Creating layer loss
I0426 20:55:06.717794   338 net.cpp:124] Setting up loss
I0426 20:55:06.717803   338 net.cpp:131] Top shape: (1)
I0426 20:55:06.717806   338 net.cpp:134]     with loss weight 1
I0426 20:55:06.717813   338 net.cpp:139] Memory required for data: 16570808
I0426 20:55:06.717815   338 net.cpp:200] loss needs backward computation.
I0426 20:55:06.717819   338 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:06.717823   338 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:55:06.717825   338 net.cpp:200] relu2 needs backward computation.
I0426 20:55:06.717829   338 net.cpp:200] ip2 needs backward computation.
I0426 20:55:06.717833   338 net.cpp:200] relu1 needs backward computation.
I0426 20:55:06.717834   338 net.cpp:200] ip1 needs backward computation.
I0426 20:55:06.717838   338 net.cpp:200] pool1 needs backward computation.
I0426 20:55:06.717840   338 net.cpp:200] conv1 needs backward computation.
I0426 20:55:06.717844   338 net.cpp:200] pool0 needs backward computation.
I0426 20:55:06.717847   338 net.cpp:200] conv0 needs backward computation.
I0426 20:55:06.717851   338 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:06.717864   338 net.cpp:202] mnist does not need backward computation.
I0426 20:55:06.717866   338 net.cpp:244] This network produces output accuracy
I0426 20:55:06.717869   338 net.cpp:244] This network produces output loss
I0426 20:55:06.717880   338 net.cpp:257] Network initialization done.
I0426 20:55:06.717914   338 solver.cpp:56] Solver scaffolding done.
I0426 20:55:06.718204   338 caffe.cpp:248] Starting Optimization
I0426 20:55:06.718210   338 solver.cpp:273] Solving LeNet
I0426 20:55:06.718214   338 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:06.719729   338 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:06.726761   338 blocking_queue.cpp:49] Waiting for data
I0426 20:55:06.805227   346 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:06.806164   338 solver.cpp:398]     Test net output #0: accuracy = 0.1328
I0426 20:55:06.806198   338 solver.cpp:398]     Test net output #1: loss = 2.30522 (* 1 = 2.30522 loss)
I0426 20:55:06.811520   338 solver.cpp:219] Iteration 0 (-1.57547e-31 iter/s, 0.0932437s/100 iters), loss = 2.28412
I0426 20:55:06.811561   338 solver.cpp:238]     Train net output #0: loss = 2.28412 (* 1 = 2.28412 loss)
I0426 20:55:06.811573   338 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:06.982190   338 solver.cpp:219] Iteration 100 (586.07 iter/s, 0.170628s/100 iters), loss = 0.895586
I0426 20:55:06.982231   338 solver.cpp:238]     Train net output #0: loss = 0.895586 (* 1 = 0.895586 loss)
I0426 20:55:06.982252   338 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:07.143712   338 solver.cpp:219] Iteration 200 (619.261 iter/s, 0.161483s/100 iters), loss = 1.00033
I0426 20:55:07.143736   338 solver.cpp:238]     Train net output #0: loss = 1.00033 (* 1 = 1.00033 loss)
I0426 20:55:07.143743   338 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:07.303467   338 solver.cpp:219] Iteration 300 (626.11 iter/s, 0.159716s/100 iters), loss = 0.660741
I0426 20:55:07.303508   338 solver.cpp:238]     Train net output #0: loss = 0.660741 (* 1 = 0.660741 loss)
I0426 20:55:07.303514   338 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:07.465267   338 solver.cpp:219] Iteration 400 (618.195 iter/s, 0.161761s/100 iters), loss = 0.526887
I0426 20:55:07.465294   338 solver.cpp:238]     Train net output #0: loss = 0.526887 (* 1 = 0.526887 loss)
I0426 20:55:07.465301   338 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:07.622745   338 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:07.704385   346 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:07.705418   338 solver.cpp:398]     Test net output #0: accuracy = 0.8759
I0426 20:55:07.705451   338 solver.cpp:398]     Test net output #1: loss = 0.329645 (* 1 = 0.329645 loss)
I0426 20:55:07.707090   338 solver.cpp:219] Iteration 500 (413.603 iter/s, 0.241778s/100 iters), loss = 0.205003
I0426 20:55:07.707126   338 solver.cpp:238]     Train net output #0: loss = 0.205003 (* 1 = 0.205003 loss)
I0426 20:55:07.707132   338 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:07.871156   338 solver.cpp:219] Iteration 600 (609.639 iter/s, 0.164031s/100 iters), loss = 0.229675
I0426 20:55:07.871196   338 solver.cpp:238]     Train net output #0: loss = 0.229675 (* 1 = 0.229675 loss)
I0426 20:55:07.871203   338 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:08.033044   338 solver.cpp:219] Iteration 700 (617.862 iter/s, 0.161848s/100 iters), loss = 0.14202
I0426 20:55:08.033072   338 solver.cpp:238]     Train net output #0: loss = 0.14202 (* 1 = 0.14202 loss)
I0426 20:55:08.033080   338 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:08.196218   338 solver.cpp:219] Iteration 800 (612.991 iter/s, 0.163134s/100 iters), loss = 0.190955
I0426 20:55:08.196259   338 solver.cpp:238]     Train net output #0: loss = 0.190955 (* 1 = 0.190955 loss)
I0426 20:55:08.196266   338 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:08.358994   338 solver.cpp:219] Iteration 900 (614.554 iter/s, 0.16272s/100 iters), loss = 0.18403
I0426 20:55:08.359019   338 solver.cpp:238]     Train net output #0: loss = 0.18403 (* 1 = 0.18403 loss)
I0426 20:55:08.359026   338 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:08.413733   345 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:08.521749   338 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:08.526582   338 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:08.529134   338 solver.cpp:311] Iteration 1000, loss = 0.113051
I0426 20:55:08.529148   338 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:08.609705   346 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:08.610775   338 solver.cpp:398]     Test net output #0: accuracy = 0.9789
I0426 20:55:08.610795   338 solver.cpp:398]     Test net output #1: loss = 0.0641517 (* 1 = 0.0641517 loss)
I0426 20:55:08.610817   338 solver.cpp:316] Optimization Done.
I0426 20:55:08.610821   338 caffe.cpp:259] Optimization Done.
