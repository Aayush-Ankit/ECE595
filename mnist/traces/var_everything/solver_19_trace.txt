I0426 20:48:50.617919 31385 caffe.cpp:218] Using GPUs 0
I0426 20:48:50.655453 31385 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:48:51.115552 31385 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test19.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:48:51.115721 31385 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test19.prototxt
I0426 20:48:51.116032 31385 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:48:51.116060 31385 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:48:51.116145 31385 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:48:51.116200 31385 layer_factory.hpp:77] Creating layer mnist
I0426 20:48:51.116281 31385 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:48:51.116300 31385 net.cpp:86] Creating Layer mnist
I0426 20:48:51.116307 31385 net.cpp:382] mnist -> data
I0426 20:48:51.116325 31385 net.cpp:382] mnist -> label
I0426 20:48:51.117278 31385 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:48:51.119360 31385 net.cpp:124] Setting up mnist
I0426 20:48:51.119374 31385 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:48:51.119377 31385 net.cpp:131] Top shape: 64 (64)
I0426 20:48:51.119380 31385 net.cpp:139] Memory required for data: 200960
I0426 20:48:51.119385 31385 layer_factory.hpp:77] Creating layer conv0
I0426 20:48:51.119422 31385 net.cpp:86] Creating Layer conv0
I0426 20:48:51.119426 31385 net.cpp:408] conv0 <- data
I0426 20:48:51.119437 31385 net.cpp:382] conv0 -> conv0
I0426 20:48:51.357621 31385 net.cpp:124] Setting up conv0
I0426 20:48:51.357648 31385 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:48:51.357651 31385 net.cpp:139] Memory required for data: 1675520
I0426 20:48:51.357681 31385 layer_factory.hpp:77] Creating layer pool0
I0426 20:48:51.357694 31385 net.cpp:86] Creating Layer pool0
I0426 20:48:51.357699 31385 net.cpp:408] pool0 <- conv0
I0426 20:48:51.357705 31385 net.cpp:382] pool0 -> pool0
I0426 20:48:51.357749 31385 net.cpp:124] Setting up pool0
I0426 20:48:51.357756 31385 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:48:51.357758 31385 net.cpp:139] Memory required for data: 2044160
I0426 20:48:51.357792 31385 layer_factory.hpp:77] Creating layer ip1
I0426 20:48:51.357800 31385 net.cpp:86] Creating Layer ip1
I0426 20:48:51.357803 31385 net.cpp:408] ip1 <- pool0
I0426 20:48:51.357808 31385 net.cpp:382] ip1 -> ip1
I0426 20:48:51.361080 31385 net.cpp:124] Setting up ip1
I0426 20:48:51.361094 31385 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:48:51.361098 31385 net.cpp:139] Memory required for data: 2120960
I0426 20:48:51.361105 31385 layer_factory.hpp:77] Creating layer relu1
I0426 20:48:51.361114 31385 net.cpp:86] Creating Layer relu1
I0426 20:48:51.361120 31385 net.cpp:408] relu1 <- ip1
I0426 20:48:51.361125 31385 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:48:51.361317 31385 net.cpp:124] Setting up relu1
I0426 20:48:51.361326 31385 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:48:51.361330 31385 net.cpp:139] Memory required for data: 2197760
I0426 20:48:51.361332 31385 layer_factory.hpp:77] Creating layer ip2
I0426 20:48:51.361340 31385 net.cpp:86] Creating Layer ip2
I0426 20:48:51.361342 31385 net.cpp:408] ip2 <- ip1
I0426 20:48:51.361346 31385 net.cpp:382] ip2 -> ip2
I0426 20:48:51.362294 31385 net.cpp:124] Setting up ip2
I0426 20:48:51.362306 31385 net.cpp:131] Top shape: 64 10 (640)
I0426 20:48:51.362309 31385 net.cpp:139] Memory required for data: 2200320
I0426 20:48:51.362318 31385 layer_factory.hpp:77] Creating layer relu2
I0426 20:48:51.362325 31385 net.cpp:86] Creating Layer relu2
I0426 20:48:51.362329 31385 net.cpp:408] relu2 <- ip2
I0426 20:48:51.362332 31385 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:48:51.363193 31385 net.cpp:124] Setting up relu2
I0426 20:48:51.363205 31385 net.cpp:131] Top shape: 64 10 (640)
I0426 20:48:51.363209 31385 net.cpp:139] Memory required for data: 2202880
I0426 20:48:51.363211 31385 layer_factory.hpp:77] Creating layer loss
I0426 20:48:51.363217 31385 net.cpp:86] Creating Layer loss
I0426 20:48:51.363220 31385 net.cpp:408] loss <- ip2
I0426 20:48:51.363225 31385 net.cpp:408] loss <- label
I0426 20:48:51.363230 31385 net.cpp:382] loss -> loss
I0426 20:48:51.363246 31385 layer_factory.hpp:77] Creating layer loss
I0426 20:48:51.363477 31385 net.cpp:124] Setting up loss
I0426 20:48:51.363487 31385 net.cpp:131] Top shape: (1)
I0426 20:48:51.363489 31385 net.cpp:134]     with loss weight 1
I0426 20:48:51.363503 31385 net.cpp:139] Memory required for data: 2202884
I0426 20:48:51.363507 31385 net.cpp:200] loss needs backward computation.
I0426 20:48:51.363510 31385 net.cpp:200] relu2 needs backward computation.
I0426 20:48:51.363513 31385 net.cpp:200] ip2 needs backward computation.
I0426 20:48:51.363517 31385 net.cpp:200] relu1 needs backward computation.
I0426 20:48:51.363519 31385 net.cpp:200] ip1 needs backward computation.
I0426 20:48:51.363523 31385 net.cpp:200] pool0 needs backward computation.
I0426 20:48:51.363524 31385 net.cpp:200] conv0 needs backward computation.
I0426 20:48:51.363528 31385 net.cpp:202] mnist does not need backward computation.
I0426 20:48:51.363531 31385 net.cpp:244] This network produces output loss
I0426 20:48:51.363538 31385 net.cpp:257] Network initialization done.
I0426 20:48:51.363797 31385 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test19.prototxt
I0426 20:48:51.363821 31385 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:48:51.363893 31385 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:48:51.363972 31385 layer_factory.hpp:77] Creating layer mnist
I0426 20:48:51.364014 31385 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:48:51.364029 31385 net.cpp:86] Creating Layer mnist
I0426 20:48:51.364034 31385 net.cpp:382] mnist -> data
I0426 20:48:51.364042 31385 net.cpp:382] mnist -> label
I0426 20:48:51.364120 31385 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:48:51.366052 31385 net.cpp:124] Setting up mnist
I0426 20:48:51.366066 31385 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:48:51.366083 31385 net.cpp:131] Top shape: 100 (100)
I0426 20:48:51.366087 31385 net.cpp:139] Memory required for data: 314000
I0426 20:48:51.366091 31385 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:48:51.366101 31385 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:48:51.366104 31385 net.cpp:408] label_mnist_1_split <- label
I0426 20:48:51.366109 31385 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:48:51.366116 31385 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:48:51.366192 31385 net.cpp:124] Setting up label_mnist_1_split
I0426 20:48:51.366200 31385 net.cpp:131] Top shape: 100 (100)
I0426 20:48:51.366204 31385 net.cpp:131] Top shape: 100 (100)
I0426 20:48:51.366206 31385 net.cpp:139] Memory required for data: 314800
I0426 20:48:51.366209 31385 layer_factory.hpp:77] Creating layer conv0
I0426 20:48:51.366217 31385 net.cpp:86] Creating Layer conv0
I0426 20:48:51.366221 31385 net.cpp:408] conv0 <- data
I0426 20:48:51.366225 31385 net.cpp:382] conv0 -> conv0
I0426 20:48:51.367691 31385 net.cpp:124] Setting up conv0
I0426 20:48:51.367714 31385 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:48:51.367718 31385 net.cpp:139] Memory required for data: 2618800
I0426 20:48:51.367727 31385 layer_factory.hpp:77] Creating layer pool0
I0426 20:48:51.367733 31385 net.cpp:86] Creating Layer pool0
I0426 20:48:51.367753 31385 net.cpp:408] pool0 <- conv0
I0426 20:48:51.367758 31385 net.cpp:382] pool0 -> pool0
I0426 20:48:51.367792 31385 net.cpp:124] Setting up pool0
I0426 20:48:51.367799 31385 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:48:51.367804 31385 net.cpp:139] Memory required for data: 3194800
I0426 20:48:51.367806 31385 layer_factory.hpp:77] Creating layer ip1
I0426 20:48:51.367812 31385 net.cpp:86] Creating Layer ip1
I0426 20:48:51.367816 31385 net.cpp:408] ip1 <- pool0
I0426 20:48:51.367820 31385 net.cpp:382] ip1 -> ip1
I0426 20:48:51.371114 31385 net.cpp:124] Setting up ip1
I0426 20:48:51.371126 31385 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:48:51.371145 31385 net.cpp:139] Memory required for data: 3314800
I0426 20:48:51.371152 31385 layer_factory.hpp:77] Creating layer relu1
I0426 20:48:51.371157 31385 net.cpp:86] Creating Layer relu1
I0426 20:48:51.371160 31385 net.cpp:408] relu1 <- ip1
I0426 20:48:51.371165 31385 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:48:51.371351 31385 net.cpp:124] Setting up relu1
I0426 20:48:51.371359 31385 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:48:51.371376 31385 net.cpp:139] Memory required for data: 3434800
I0426 20:48:51.371379 31385 layer_factory.hpp:77] Creating layer ip2
I0426 20:48:51.371386 31385 net.cpp:86] Creating Layer ip2
I0426 20:48:51.371388 31385 net.cpp:408] ip2 <- ip1
I0426 20:48:51.371393 31385 net.cpp:382] ip2 -> ip2
I0426 20:48:51.371503 31385 net.cpp:124] Setting up ip2
I0426 20:48:51.371511 31385 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:48:51.371515 31385 net.cpp:139] Memory required for data: 3438800
I0426 20:48:51.371521 31385 layer_factory.hpp:77] Creating layer relu2
I0426 20:48:51.371526 31385 net.cpp:86] Creating Layer relu2
I0426 20:48:51.371528 31385 net.cpp:408] relu2 <- ip2
I0426 20:48:51.371532 31385 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:48:51.371687 31385 net.cpp:124] Setting up relu2
I0426 20:48:51.371695 31385 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:48:51.371697 31385 net.cpp:139] Memory required for data: 3442800
I0426 20:48:51.371701 31385 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:48:51.371706 31385 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:48:51.371709 31385 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:48:51.371713 31385 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:48:51.371719 31385 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:48:51.371752 31385 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:48:51.371757 31385 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:48:51.371759 31385 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:48:51.371762 31385 net.cpp:139] Memory required for data: 3450800
I0426 20:48:51.371764 31385 layer_factory.hpp:77] Creating layer accuracy
I0426 20:48:51.371769 31385 net.cpp:86] Creating Layer accuracy
I0426 20:48:51.371773 31385 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:48:51.371776 31385 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:48:51.371780 31385 net.cpp:382] accuracy -> accuracy
I0426 20:48:51.371788 31385 net.cpp:124] Setting up accuracy
I0426 20:48:51.371790 31385 net.cpp:131] Top shape: (1)
I0426 20:48:51.371793 31385 net.cpp:139] Memory required for data: 3450804
I0426 20:48:51.371796 31385 layer_factory.hpp:77] Creating layer loss
I0426 20:48:51.371799 31385 net.cpp:86] Creating Layer loss
I0426 20:48:51.371803 31385 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:48:51.371806 31385 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:48:51.371809 31385 net.cpp:382] loss -> loss
I0426 20:48:51.371815 31385 layer_factory.hpp:77] Creating layer loss
I0426 20:48:51.372692 31385 net.cpp:124] Setting up loss
I0426 20:48:51.372705 31385 net.cpp:131] Top shape: (1)
I0426 20:48:51.372709 31385 net.cpp:134]     with loss weight 1
I0426 20:48:51.372714 31385 net.cpp:139] Memory required for data: 3450808
I0426 20:48:51.372719 31385 net.cpp:200] loss needs backward computation.
I0426 20:48:51.372722 31385 net.cpp:202] accuracy does not need backward computation.
I0426 20:48:51.372725 31385 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:48:51.372728 31385 net.cpp:200] relu2 needs backward computation.
I0426 20:48:51.372731 31385 net.cpp:200] ip2 needs backward computation.
I0426 20:48:51.372733 31385 net.cpp:200] relu1 needs backward computation.
I0426 20:48:51.372736 31385 net.cpp:200] ip1 needs backward computation.
I0426 20:48:51.372740 31385 net.cpp:200] pool0 needs backward computation.
I0426 20:48:51.372743 31385 net.cpp:200] conv0 needs backward computation.
I0426 20:48:51.372746 31385 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:48:51.372750 31385 net.cpp:202] mnist does not need backward computation.
I0426 20:48:51.372752 31385 net.cpp:244] This network produces output accuracy
I0426 20:48:51.372756 31385 net.cpp:244] This network produces output loss
I0426 20:48:51.372763 31385 net.cpp:257] Network initialization done.
I0426 20:48:51.372793 31385 solver.cpp:56] Solver scaffolding done.
I0426 20:48:51.373033 31385 caffe.cpp:248] Starting Optimization
I0426 20:48:51.373039 31385 solver.cpp:273] Solving LeNet
I0426 20:48:51.373052 31385 solver.cpp:274] Learning Rate Policy: inv
I0426 20:48:51.375102 31385 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:48:51.380544 31385 blocking_queue.cpp:49] Waiting for data
I0426 20:48:51.421432 31392 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:48:51.421914 31385 solver.cpp:398]     Test net output #0: accuracy = 0.0667
I0426 20:48:51.421932 31385 solver.cpp:398]     Test net output #1: loss = 2.33022 (* 1 = 2.33022 loss)
I0426 20:48:51.424155 31385 solver.cpp:219] Iteration 0 (0 iter/s, 0.0510802s/100 iters), loss = 2.35251
I0426 20:48:51.424187 31385 solver.cpp:238]     Train net output #0: loss = 2.35251 (* 1 = 2.35251 loss)
I0426 20:48:51.424198 31385 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:48:51.495481 31385 solver.cpp:219] Iteration 100 (1402.64 iter/s, 0.071294s/100 iters), loss = 0.494375
I0426 20:48:51.495520 31385 solver.cpp:238]     Train net output #0: loss = 0.494375 (* 1 = 0.494375 loss)
I0426 20:48:51.495527 31385 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:48:51.565222 31385 solver.cpp:219] Iteration 200 (1434.58 iter/s, 0.0697067s/100 iters), loss = 0.353842
I0426 20:48:51.565254 31385 solver.cpp:238]     Train net output #0: loss = 0.353842 (* 1 = 0.353842 loss)
I0426 20:48:51.565260 31385 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:48:51.635180 31385 solver.cpp:219] Iteration 300 (1430.08 iter/s, 0.069926s/100 iters), loss = 0.495165
I0426 20:48:51.635220 31385 solver.cpp:238]     Train net output #0: loss = 0.495164 (* 1 = 0.495164 loss)
I0426 20:48:51.635226 31385 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:48:51.704704 31385 solver.cpp:219] Iteration 400 (1439 iter/s, 0.0694927s/100 iters), loss = 0.315318
I0426 20:48:51.704742 31385 solver.cpp:238]     Train net output #0: loss = 0.315318 (* 1 = 0.315318 loss)
I0426 20:48:51.704763 31385 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:48:51.774268 31385 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:48:51.819779 31392 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:48:51.820269 31385 solver.cpp:398]     Test net output #0: accuracy = 0.8626
I0426 20:48:51.820305 31385 solver.cpp:398]     Test net output #1: loss = 0.38319 (* 1 = 0.38319 loss)
I0426 20:48:51.820992 31385 solver.cpp:219] Iteration 500 (860.173 iter/s, 0.116256s/100 iters), loss = 0.504218
I0426 20:48:51.821017 31385 solver.cpp:238]     Train net output #0: loss = 0.504217 (* 1 = 0.504217 loss)
I0426 20:48:51.821023 31385 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:48:51.891343 31385 solver.cpp:219] Iteration 600 (1422.11 iter/s, 0.0703181s/100 iters), loss = 0.367723
I0426 20:48:51.891367 31385 solver.cpp:238]     Train net output #0: loss = 0.367723 (* 1 = 0.367723 loss)
I0426 20:48:51.891374 31385 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:48:51.960891 31385 solver.cpp:219] Iteration 700 (1438.53 iter/s, 0.0695153s/100 iters), loss = 0.425135
I0426 20:48:51.960930 31385 solver.cpp:238]     Train net output #0: loss = 0.425135 (* 1 = 0.425135 loss)
I0426 20:48:51.960937 31385 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:48:52.030971 31385 solver.cpp:219] Iteration 800 (1427.62 iter/s, 0.0700467s/100 iters), loss = 0.467466
I0426 20:48:52.031009 31385 solver.cpp:238]     Train net output #0: loss = 0.467466 (* 1 = 0.467466 loss)
I0426 20:48:52.031016 31385 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:48:52.101260 31385 solver.cpp:219] Iteration 900 (1423.33 iter/s, 0.0702576s/100 iters), loss = 0.453313
I0426 20:48:52.101284 31385 solver.cpp:238]     Train net output #0: loss = 0.453313 (* 1 = 0.453313 loss)
I0426 20:48:52.101290 31385 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:48:52.124451 31391 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:48:52.169826 31385 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:48:52.176125 31385 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:48:52.179127 31385 solver.cpp:311] Iteration 1000, loss = 0.408471
I0426 20:48:52.179143 31385 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:48:52.222072 31392 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:48:52.222578 31385 solver.cpp:398]     Test net output #0: accuracy = 0.8789
I0426 20:48:52.222594 31385 solver.cpp:398]     Test net output #1: loss = 0.326028 (* 1 = 0.326028 loss)
I0426 20:48:52.222615 31385 solver.cpp:316] Optimization Done.
I0426 20:48:52.222617 31385 caffe.cpp:259] Optimization Done.
