I0426 20:49:53.664731 31645 caffe.cpp:218] Using GPUs 0
I0426 20:49:53.702862 31645 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:49:54.227825 31645 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test47.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:49:54.227975 31645 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test47.prototxt
I0426 20:49:54.228305 31645 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:49:54.228323 31645 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:49:54.228404 31645 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:54.228471 31645 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:54.228574 31645 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:49:54.228598 31645 net.cpp:86] Creating Layer mnist
I0426 20:49:54.228605 31645 net.cpp:382] mnist -> data
I0426 20:49:54.228628 31645 net.cpp:382] mnist -> label
I0426 20:49:54.229763 31645 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:49:54.232324 31645 net.cpp:124] Setting up mnist
I0426 20:49:54.232342 31645 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:49:54.232352 31645 net.cpp:131] Top shape: 64 (64)
I0426 20:49:54.232354 31645 net.cpp:139] Memory required for data: 200960
I0426 20:49:54.232362 31645 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:54.232375 31645 net.cpp:86] Creating Layer conv0
I0426 20:49:54.232381 31645 net.cpp:408] conv0 <- data
I0426 20:49:54.232393 31645 net.cpp:382] conv0 -> conv0
I0426 20:49:54.487859 31645 net.cpp:124] Setting up conv0
I0426 20:49:54.487901 31645 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:49:54.487905 31645 net.cpp:139] Memory required for data: 7573760
I0426 20:49:54.487920 31645 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:54.487932 31645 net.cpp:86] Creating Layer pool0
I0426 20:49:54.487936 31645 net.cpp:408] pool0 <- conv0
I0426 20:49:54.487941 31645 net.cpp:382] pool0 -> pool0
I0426 20:49:54.487987 31645 net.cpp:124] Setting up pool0
I0426 20:49:54.487993 31645 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:49:54.487996 31645 net.cpp:139] Memory required for data: 9416960
I0426 20:49:54.488014 31645 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:54.488037 31645 net.cpp:86] Creating Layer ip1
I0426 20:49:54.488040 31645 net.cpp:408] ip1 <- pool0
I0426 20:49:54.488045 31645 net.cpp:382] ip1 -> ip1
I0426 20:49:54.502368 31645 net.cpp:124] Setting up ip1
I0426 20:49:54.502398 31645 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:54.502401 31645 net.cpp:139] Memory required for data: 9493760
I0426 20:49:54.502409 31645 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:54.502416 31645 net.cpp:86] Creating Layer relu1
I0426 20:49:54.502420 31645 net.cpp:408] relu1 <- ip1
I0426 20:49:54.502425 31645 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:54.502635 31645 net.cpp:124] Setting up relu1
I0426 20:49:54.502661 31645 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:54.502665 31645 net.cpp:139] Memory required for data: 9570560
I0426 20:49:54.502667 31645 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:54.502676 31645 net.cpp:86] Creating Layer ip2
I0426 20:49:54.502678 31645 net.cpp:408] ip2 <- ip1
I0426 20:49:54.502684 31645 net.cpp:382] ip2 -> ip2
I0426 20:49:54.502807 31645 net.cpp:124] Setting up ip2
I0426 20:49:54.502816 31645 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:54.502820 31645 net.cpp:139] Memory required for data: 9573120
I0426 20:49:54.502827 31645 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:54.502833 31645 net.cpp:86] Creating Layer relu2
I0426 20:49:54.502836 31645 net.cpp:408] relu2 <- ip2
I0426 20:49:54.502840 31645 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:54.503794 31645 net.cpp:124] Setting up relu2
I0426 20:49:54.503806 31645 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:54.503825 31645 net.cpp:139] Memory required for data: 9575680
I0426 20:49:54.503829 31645 layer_factory.hpp:77] Creating layer loss
I0426 20:49:54.503839 31645 net.cpp:86] Creating Layer loss
I0426 20:49:54.503844 31645 net.cpp:408] loss <- ip2
I0426 20:49:54.503847 31645 net.cpp:408] loss <- label
I0426 20:49:54.503852 31645 net.cpp:382] loss -> loss
I0426 20:49:54.503882 31645 layer_factory.hpp:77] Creating layer loss
I0426 20:49:54.504153 31645 net.cpp:124] Setting up loss
I0426 20:49:54.504163 31645 net.cpp:131] Top shape: (1)
I0426 20:49:54.504165 31645 net.cpp:134]     with loss weight 1
I0426 20:49:54.504179 31645 net.cpp:139] Memory required for data: 9575684
I0426 20:49:54.504182 31645 net.cpp:200] loss needs backward computation.
I0426 20:49:54.504186 31645 net.cpp:200] relu2 needs backward computation.
I0426 20:49:54.504189 31645 net.cpp:200] ip2 needs backward computation.
I0426 20:49:54.504191 31645 net.cpp:200] relu1 needs backward computation.
I0426 20:49:54.504194 31645 net.cpp:200] ip1 needs backward computation.
I0426 20:49:54.504197 31645 net.cpp:200] pool0 needs backward computation.
I0426 20:49:54.504201 31645 net.cpp:200] conv0 needs backward computation.
I0426 20:49:54.504204 31645 net.cpp:202] mnist does not need backward computation.
I0426 20:49:54.504207 31645 net.cpp:244] This network produces output loss
I0426 20:49:54.504215 31645 net.cpp:257] Network initialization done.
I0426 20:49:54.504500 31645 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test47.prototxt
I0426 20:49:54.504525 31645 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:49:54.504602 31645 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:54.504680 31645 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:54.504724 31645 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:49:54.504739 31645 net.cpp:86] Creating Layer mnist
I0426 20:49:54.504745 31645 net.cpp:382] mnist -> data
I0426 20:49:54.504752 31645 net.cpp:382] mnist -> label
I0426 20:49:54.504881 31645 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:49:54.506984 31645 net.cpp:124] Setting up mnist
I0426 20:49:54.507011 31645 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:49:54.507017 31645 net.cpp:131] Top shape: 100 (100)
I0426 20:49:54.507020 31645 net.cpp:139] Memory required for data: 314000
I0426 20:49:54.507024 31645 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:49:54.507056 31645 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:49:54.507060 31645 net.cpp:408] label_mnist_1_split <- label
I0426 20:49:54.507064 31645 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:49:54.507071 31645 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:49:54.507120 31645 net.cpp:124] Setting up label_mnist_1_split
I0426 20:49:54.507125 31645 net.cpp:131] Top shape: 100 (100)
I0426 20:49:54.507129 31645 net.cpp:131] Top shape: 100 (100)
I0426 20:49:54.507148 31645 net.cpp:139] Memory required for data: 314800
I0426 20:49:54.507150 31645 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:54.507159 31645 net.cpp:86] Creating Layer conv0
I0426 20:49:54.507163 31645 net.cpp:408] conv0 <- data
I0426 20:49:54.507169 31645 net.cpp:382] conv0 -> conv0
I0426 20:49:54.509054 31645 net.cpp:124] Setting up conv0
I0426 20:49:54.509069 31645 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:49:54.509073 31645 net.cpp:139] Memory required for data: 11834800
I0426 20:49:54.509083 31645 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:54.509089 31645 net.cpp:86] Creating Layer pool0
I0426 20:49:54.509109 31645 net.cpp:408] pool0 <- conv0
I0426 20:49:54.509114 31645 net.cpp:382] pool0 -> pool0
I0426 20:49:54.509167 31645 net.cpp:124] Setting up pool0
I0426 20:49:54.509173 31645 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:49:54.509176 31645 net.cpp:139] Memory required for data: 14714800
I0426 20:49:54.509178 31645 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:54.509201 31645 net.cpp:86] Creating Layer ip1
I0426 20:49:54.509218 31645 net.cpp:408] ip1 <- pool0
I0426 20:49:54.509223 31645 net.cpp:382] ip1 -> ip1
I0426 20:49:54.523231 31645 net.cpp:124] Setting up ip1
I0426 20:49:54.523260 31645 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:54.523263 31645 net.cpp:139] Memory required for data: 14834800
I0426 20:49:54.523272 31645 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:54.523278 31645 net.cpp:86] Creating Layer relu1
I0426 20:49:54.523282 31645 net.cpp:408] relu1 <- ip1
I0426 20:49:54.523286 31645 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:54.523509 31645 net.cpp:124] Setting up relu1
I0426 20:49:54.523519 31645 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:54.523533 31645 net.cpp:139] Memory required for data: 14954800
I0426 20:49:54.523537 31645 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:54.523543 31645 net.cpp:86] Creating Layer ip2
I0426 20:49:54.523546 31645 net.cpp:408] ip2 <- ip1
I0426 20:49:54.523552 31645 net.cpp:382] ip2 -> ip2
I0426 20:49:54.523675 31645 net.cpp:124] Setting up ip2
I0426 20:49:54.523684 31645 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:54.523686 31645 net.cpp:139] Memory required for data: 14958800
I0426 20:49:54.523694 31645 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:54.523699 31645 net.cpp:86] Creating Layer relu2
I0426 20:49:54.523703 31645 net.cpp:408] relu2 <- ip2
I0426 20:49:54.523707 31645 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:54.523877 31645 net.cpp:124] Setting up relu2
I0426 20:49:54.523886 31645 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:54.523890 31645 net.cpp:139] Memory required for data: 14962800
I0426 20:49:54.523893 31645 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:49:54.523900 31645 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:49:54.523905 31645 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:49:54.523910 31645 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:49:54.523916 31645 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:49:54.523952 31645 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:49:54.523962 31645 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:54.523965 31645 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:54.523967 31645 net.cpp:139] Memory required for data: 14970800
I0426 20:49:54.523970 31645 layer_factory.hpp:77] Creating layer accuracy
I0426 20:49:54.523975 31645 net.cpp:86] Creating Layer accuracy
I0426 20:49:54.523978 31645 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:49:54.523983 31645 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:49:54.523986 31645 net.cpp:382] accuracy -> accuracy
I0426 20:49:54.523993 31645 net.cpp:124] Setting up accuracy
I0426 20:49:54.523996 31645 net.cpp:131] Top shape: (1)
I0426 20:49:54.523999 31645 net.cpp:139] Memory required for data: 14970804
I0426 20:49:54.524003 31645 layer_factory.hpp:77] Creating layer loss
I0426 20:49:54.524008 31645 net.cpp:86] Creating Layer loss
I0426 20:49:54.524011 31645 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:49:54.524015 31645 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:49:54.524019 31645 net.cpp:382] loss -> loss
I0426 20:49:54.524025 31645 layer_factory.hpp:77] Creating layer loss
I0426 20:49:54.525029 31645 net.cpp:124] Setting up loss
I0426 20:49:54.525043 31645 net.cpp:131] Top shape: (1)
I0426 20:49:54.525061 31645 net.cpp:134]     with loss weight 1
I0426 20:49:54.525068 31645 net.cpp:139] Memory required for data: 14970808
I0426 20:49:54.525071 31645 net.cpp:200] loss needs backward computation.
I0426 20:49:54.525075 31645 net.cpp:202] accuracy does not need backward computation.
I0426 20:49:54.525079 31645 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:49:54.525081 31645 net.cpp:200] relu2 needs backward computation.
I0426 20:49:54.525084 31645 net.cpp:200] ip2 needs backward computation.
I0426 20:49:54.525087 31645 net.cpp:200] relu1 needs backward computation.
I0426 20:49:54.525089 31645 net.cpp:200] ip1 needs backward computation.
I0426 20:49:54.525092 31645 net.cpp:200] pool0 needs backward computation.
I0426 20:49:54.525095 31645 net.cpp:200] conv0 needs backward computation.
I0426 20:49:54.525115 31645 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:49:54.525117 31645 net.cpp:202] mnist does not need backward computation.
I0426 20:49:54.525120 31645 net.cpp:244] This network produces output accuracy
I0426 20:49:54.525123 31645 net.cpp:244] This network produces output loss
I0426 20:49:54.525147 31645 net.cpp:257] Network initialization done.
I0426 20:49:54.525195 31645 solver.cpp:56] Solver scaffolding done.
I0426 20:49:54.525429 31645 caffe.cpp:248] Starting Optimization
I0426 20:49:54.525435 31645 solver.cpp:273] Solving LeNet
I0426 20:49:54.525454 31645 solver.cpp:274] Learning Rate Policy: inv
I0426 20:49:54.527479 31645 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:49:54.535423 31645 blocking_queue.cpp:49] Waiting for data
I0426 20:49:54.607091 31652 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:54.608013 31645 solver.cpp:398]     Test net output #0: accuracy = 0.0911
I0426 20:49:54.608032 31645 solver.cpp:398]     Test net output #1: loss = 2.31141 (* 1 = 2.31141 loss)
I0426 20:49:54.611304 31645 solver.cpp:219] Iteration 0 (-1.67598e-31 iter/s, 0.0858235s/100 iters), loss = 2.33256
I0426 20:49:54.611327 31645 solver.cpp:238]     Train net output #0: loss = 2.33256 (* 1 = 2.33256 loss)
I0426 20:49:54.611338 31645 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:49:54.754653 31645 solver.cpp:219] Iteration 100 (697.779 iter/s, 0.143312s/100 iters), loss = 0.610362
I0426 20:49:54.754678 31645 solver.cpp:238]     Train net output #0: loss = 0.610362 (* 1 = 0.610362 loss)
I0426 20:49:54.754683 31645 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:49:54.898547 31645 solver.cpp:219] Iteration 200 (695.141 iter/s, 0.143856s/100 iters), loss = 0.286746
I0426 20:49:54.898578 31645 solver.cpp:238]     Train net output #0: loss = 0.286746 (* 1 = 0.286746 loss)
I0426 20:49:54.898586 31645 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:49:55.037714 31645 solver.cpp:219] Iteration 300 (718.811 iter/s, 0.139119s/100 iters), loss = 0.190651
I0426 20:49:55.037770 31645 solver.cpp:238]     Train net output #0: loss = 0.190651 (* 1 = 0.190651 loss)
I0426 20:49:55.037788 31645 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:49:55.186949 31645 solver.cpp:219] Iteration 400 (670.375 iter/s, 0.14917s/100 iters), loss = 0.120614
I0426 20:49:55.186986 31645 solver.cpp:238]     Train net output #0: loss = 0.120614 (* 1 = 0.120614 loss)
I0426 20:49:55.186995 31645 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:49:55.325629 31645 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:49:55.399663 31652 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:55.400627 31645 solver.cpp:398]     Test net output #0: accuracy = 0.9613
I0426 20:49:55.400647 31645 solver.cpp:398]     Test net output #1: loss = 0.132489 (* 1 = 0.132489 loss)
I0426 20:49:55.401882 31645 solver.cpp:219] Iteration 500 (465.373 iter/s, 0.214881s/100 iters), loss = 0.238105
I0426 20:49:55.401904 31645 solver.cpp:238]     Train net output #0: loss = 0.238105 (* 1 = 0.238105 loss)
I0426 20:49:55.401926 31645 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:49:55.544435 31645 solver.cpp:219] Iteration 600 (701.665 iter/s, 0.142518s/100 iters), loss = 0.0747839
I0426 20:49:55.544459 31645 solver.cpp:238]     Train net output #0: loss = 0.074784 (* 1 = 0.074784 loss)
I0426 20:49:55.544466 31645 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:49:55.685139 31645 solver.cpp:219] Iteration 700 (710.91 iter/s, 0.140665s/100 iters), loss = 0.205878
I0426 20:49:55.685194 31645 solver.cpp:238]     Train net output #0: loss = 0.205878 (* 1 = 0.205878 loss)
I0426 20:49:55.685205 31645 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:49:55.830210 31645 solver.cpp:219] Iteration 800 (689.638 iter/s, 0.145004s/100 iters), loss = 0.217843
I0426 20:49:55.830243 31645 solver.cpp:238]     Train net output #0: loss = 0.217843 (* 1 = 0.217843 loss)
I0426 20:49:55.830252 31645 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:49:55.968654 31645 solver.cpp:219] Iteration 900 (722.539 iter/s, 0.138401s/100 iters), loss = 0.219968
I0426 20:49:55.968679 31645 solver.cpp:238]     Train net output #0: loss = 0.219968 (* 1 = 0.219968 loss)
I0426 20:49:55.968685 31645 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:49:56.017761 31651 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:56.112306 31645 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:49:56.155455 31645 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:49:56.172853 31645 solver.cpp:311] Iteration 1000, loss = 0.126738
I0426 20:49:56.172879 31645 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:49:56.250526 31652 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:56.251485 31645 solver.cpp:398]     Test net output #0: accuracy = 0.9729
I0426 20:49:56.251513 31645 solver.cpp:398]     Test net output #1: loss = 0.0880484 (* 1 = 0.0880484 loss)
I0426 20:49:56.251518 31645 solver.cpp:316] Optimization Done.
I0426 20:49:56.251523 31645 caffe.cpp:259] Optimization Done.
