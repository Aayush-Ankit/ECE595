I0426 20:53:09.048382 32386 caffe.cpp:218] Using GPUs 0
I0426 20:53:09.086768 32386 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:09.556288 32386 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test130.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:09.556471 32386 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test130.prototxt
I0426 20:53:09.556818 32386 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:09.556862 32386 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:09.556972 32386 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:53:09.557059 32386 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:09.557149 32386 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:09.557188 32386 net.cpp:86] Creating Layer mnist
I0426 20:53:09.557193 32386 net.cpp:382] mnist -> data
I0426 20:53:09.557229 32386 net.cpp:382] mnist -> label
I0426 20:53:09.558176 32386 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:09.560262 32386 net.cpp:124] Setting up mnist
I0426 20:53:09.560276 32386 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:09.560281 32386 net.cpp:131] Top shape: 64 (64)
I0426 20:53:09.560283 32386 net.cpp:139] Memory required for data: 200960
I0426 20:53:09.560288 32386 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:09.560317 32386 net.cpp:86] Creating Layer conv0
I0426 20:53:09.560322 32386 net.cpp:408] conv0 <- data
I0426 20:53:09.560330 32386 net.cpp:382] conv0 -> conv0
I0426 20:53:09.791122 32386 net.cpp:124] Setting up conv0
I0426 20:53:09.791165 32386 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:53:09.791169 32386 net.cpp:139] Memory required for data: 3887360
I0426 20:53:09.791218 32386 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:09.791232 32386 net.cpp:86] Creating Layer pool0
I0426 20:53:09.791240 32386 net.cpp:408] pool0 <- conv0
I0426 20:53:09.791249 32386 net.cpp:382] pool0 -> pool0
I0426 20:53:09.791337 32386 net.cpp:124] Setting up pool0
I0426 20:53:09.791345 32386 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:53:09.791349 32386 net.cpp:139] Memory required for data: 4808960
I0426 20:53:09.791352 32386 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:09.791363 32386 net.cpp:86] Creating Layer conv1
I0426 20:53:09.791368 32386 net.cpp:408] conv1 <- pool0
I0426 20:53:09.791373 32386 net.cpp:382] conv1 -> conv1
I0426 20:53:09.793643 32386 net.cpp:124] Setting up conv1
I0426 20:53:09.793673 32386 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:53:09.793678 32386 net.cpp:139] Memory required for data: 5628160
I0426 20:53:09.793700 32386 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:09.793707 32386 net.cpp:86] Creating Layer pool1
I0426 20:53:09.793726 32386 net.cpp:408] pool1 <- conv1
I0426 20:53:09.793731 32386 net.cpp:382] pool1 -> pool1
I0426 20:53:09.793767 32386 net.cpp:124] Setting up pool1
I0426 20:53:09.793773 32386 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:53:09.793792 32386 net.cpp:139] Memory required for data: 5832960
I0426 20:53:09.793794 32386 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:09.793802 32386 net.cpp:86] Creating Layer ip1
I0426 20:53:09.793804 32386 net.cpp:408] ip1 <- pool1
I0426 20:53:09.793808 32386 net.cpp:382] ip1 -> ip1
I0426 20:53:09.796186 32386 net.cpp:124] Setting up ip1
I0426 20:53:09.796198 32386 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:09.796217 32386 net.cpp:139] Memory required for data: 5909760
I0426 20:53:09.796226 32386 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:09.796232 32386 net.cpp:86] Creating Layer relu1
I0426 20:53:09.796236 32386 net.cpp:408] relu1 <- ip1
I0426 20:53:09.796255 32386 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:09.796434 32386 net.cpp:124] Setting up relu1
I0426 20:53:09.796442 32386 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:09.796447 32386 net.cpp:139] Memory required for data: 5986560
I0426 20:53:09.796449 32386 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:09.796456 32386 net.cpp:86] Creating Layer ip2
I0426 20:53:09.796459 32386 net.cpp:408] ip2 <- ip1
I0426 20:53:09.796464 32386 net.cpp:382] ip2 -> ip2
I0426 20:53:09.797475 32386 net.cpp:124] Setting up ip2
I0426 20:53:09.797487 32386 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:09.797508 32386 net.cpp:139] Memory required for data: 5989120
I0426 20:53:09.797513 32386 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:09.797520 32386 net.cpp:86] Creating Layer relu2
I0426 20:53:09.797523 32386 net.cpp:408] relu2 <- ip2
I0426 20:53:09.797544 32386 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:09.798387 32386 net.cpp:124] Setting up relu2
I0426 20:53:09.798398 32386 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:09.798411 32386 net.cpp:139] Memory required for data: 5991680
I0426 20:53:09.798414 32386 layer_factory.hpp:77] Creating layer loss
I0426 20:53:09.798420 32386 net.cpp:86] Creating Layer loss
I0426 20:53:09.798424 32386 net.cpp:408] loss <- ip2
I0426 20:53:09.798429 32386 net.cpp:408] loss <- label
I0426 20:53:09.798449 32386 net.cpp:382] loss -> loss
I0426 20:53:09.798483 32386 layer_factory.hpp:77] Creating layer loss
I0426 20:53:09.798724 32386 net.cpp:124] Setting up loss
I0426 20:53:09.798733 32386 net.cpp:131] Top shape: (1)
I0426 20:53:09.798737 32386 net.cpp:134]     with loss weight 1
I0426 20:53:09.798751 32386 net.cpp:139] Memory required for data: 5991684
I0426 20:53:09.798755 32386 net.cpp:200] loss needs backward computation.
I0426 20:53:09.798758 32386 net.cpp:200] relu2 needs backward computation.
I0426 20:53:09.798761 32386 net.cpp:200] ip2 needs backward computation.
I0426 20:53:09.798764 32386 net.cpp:200] relu1 needs backward computation.
I0426 20:53:09.798766 32386 net.cpp:200] ip1 needs backward computation.
I0426 20:53:09.798780 32386 net.cpp:200] pool1 needs backward computation.
I0426 20:53:09.798784 32386 net.cpp:200] conv1 needs backward computation.
I0426 20:53:09.798787 32386 net.cpp:200] pool0 needs backward computation.
I0426 20:53:09.798790 32386 net.cpp:200] conv0 needs backward computation.
I0426 20:53:09.798794 32386 net.cpp:202] mnist does not need backward computation.
I0426 20:53:09.798796 32386 net.cpp:244] This network produces output loss
I0426 20:53:09.798805 32386 net.cpp:257] Network initialization done.
I0426 20:53:09.799129 32386 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test130.prototxt
I0426 20:53:09.799170 32386 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:09.799255 32386 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:53:09.799319 32386 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:09.799363 32386 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:09.799376 32386 net.cpp:86] Creating Layer mnist
I0426 20:53:09.799379 32386 net.cpp:382] mnist -> data
I0426 20:53:09.799387 32386 net.cpp:382] mnist -> label
I0426 20:53:09.799471 32386 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:09.801504 32386 net.cpp:124] Setting up mnist
I0426 20:53:09.801533 32386 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:09.801538 32386 net.cpp:131] Top shape: 100 (100)
I0426 20:53:09.801542 32386 net.cpp:139] Memory required for data: 314000
I0426 20:53:09.801545 32386 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:09.801568 32386 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:09.801571 32386 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:09.801576 32386 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:09.801582 32386 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:09.801686 32386 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:09.801693 32386 net.cpp:131] Top shape: 100 (100)
I0426 20:53:09.801697 32386 net.cpp:131] Top shape: 100 (100)
I0426 20:53:09.801700 32386 net.cpp:139] Memory required for data: 314800
I0426 20:53:09.801703 32386 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:09.801712 32386 net.cpp:86] Creating Layer conv0
I0426 20:53:09.801717 32386 net.cpp:408] conv0 <- data
I0426 20:53:09.801722 32386 net.cpp:382] conv0 -> conv0
I0426 20:53:09.803288 32386 net.cpp:124] Setting up conv0
I0426 20:53:09.803303 32386 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:53:09.803306 32386 net.cpp:139] Memory required for data: 6074800
I0426 20:53:09.803331 32386 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:09.803339 32386 net.cpp:86] Creating Layer pool0
I0426 20:53:09.803341 32386 net.cpp:408] pool0 <- conv0
I0426 20:53:09.803346 32386 net.cpp:382] pool0 -> pool0
I0426 20:53:09.803381 32386 net.cpp:124] Setting up pool0
I0426 20:53:09.803387 32386 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:53:09.803390 32386 net.cpp:139] Memory required for data: 7514800
I0426 20:53:09.803393 32386 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:09.803402 32386 net.cpp:86] Creating Layer conv1
I0426 20:53:09.803406 32386 net.cpp:408] conv1 <- pool0
I0426 20:53:09.803411 32386 net.cpp:382] conv1 -> conv1
I0426 20:53:09.805140 32386 net.cpp:124] Setting up conv1
I0426 20:53:09.805155 32386 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:53:09.805160 32386 net.cpp:139] Memory required for data: 8794800
I0426 20:53:09.805184 32386 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:09.805205 32386 net.cpp:86] Creating Layer pool1
I0426 20:53:09.805209 32386 net.cpp:408] pool1 <- conv1
I0426 20:53:09.805230 32386 net.cpp:382] pool1 -> pool1
I0426 20:53:09.805274 32386 net.cpp:124] Setting up pool1
I0426 20:53:09.805280 32386 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:53:09.805294 32386 net.cpp:139] Memory required for data: 9114800
I0426 20:53:09.805297 32386 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:09.805304 32386 net.cpp:86] Creating Layer ip1
I0426 20:53:09.805306 32386 net.cpp:408] ip1 <- pool1
I0426 20:53:09.805311 32386 net.cpp:382] ip1 -> ip1
I0426 20:53:09.806826 32386 net.cpp:124] Setting up ip1
I0426 20:53:09.806833 32386 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:09.806836 32386 net.cpp:139] Memory required for data: 9234800
I0426 20:53:09.806843 32386 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:09.806848 32386 net.cpp:86] Creating Layer relu1
I0426 20:53:09.806850 32386 net.cpp:408] relu1 <- ip1
I0426 20:53:09.806854 32386 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:09.806995 32386 net.cpp:124] Setting up relu1
I0426 20:53:09.807003 32386 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:09.807006 32386 net.cpp:139] Memory required for data: 9354800
I0426 20:53:09.807008 32386 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:09.807015 32386 net.cpp:86] Creating Layer ip2
I0426 20:53:09.807018 32386 net.cpp:408] ip2 <- ip1
I0426 20:53:09.807023 32386 net.cpp:382] ip2 -> ip2
I0426 20:53:09.807126 32386 net.cpp:124] Setting up ip2
I0426 20:53:09.807132 32386 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:09.807134 32386 net.cpp:139] Memory required for data: 9358800
I0426 20:53:09.807139 32386 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:09.807143 32386 net.cpp:86] Creating Layer relu2
I0426 20:53:09.807147 32386 net.cpp:408] relu2 <- ip2
I0426 20:53:09.807150 32386 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:09.807282 32386 net.cpp:124] Setting up relu2
I0426 20:53:09.807289 32386 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:09.807292 32386 net.cpp:139] Memory required for data: 9362800
I0426 20:53:09.807296 32386 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:53:09.807299 32386 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:53:09.807302 32386 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:53:09.807307 32386 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:53:09.807322 32386 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:53:09.807373 32386 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:53:09.807379 32386 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:09.807382 32386 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:09.807384 32386 net.cpp:139] Memory required for data: 9370800
I0426 20:53:09.807387 32386 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:09.807392 32386 net.cpp:86] Creating Layer accuracy
I0426 20:53:09.807396 32386 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:53:09.807399 32386 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:09.807404 32386 net.cpp:382] accuracy -> accuracy
I0426 20:53:09.807410 32386 net.cpp:124] Setting up accuracy
I0426 20:53:09.807415 32386 net.cpp:131] Top shape: (1)
I0426 20:53:09.807417 32386 net.cpp:139] Memory required for data: 9370804
I0426 20:53:09.807420 32386 layer_factory.hpp:77] Creating layer loss
I0426 20:53:09.807425 32386 net.cpp:86] Creating Layer loss
I0426 20:53:09.807427 32386 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:53:09.807431 32386 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:09.807435 32386 net.cpp:382] loss -> loss
I0426 20:53:09.807440 32386 layer_factory.hpp:77] Creating layer loss
I0426 20:53:09.807651 32386 net.cpp:124] Setting up loss
I0426 20:53:09.807659 32386 net.cpp:131] Top shape: (1)
I0426 20:53:09.807662 32386 net.cpp:134]     with loss weight 1
I0426 20:53:09.807668 32386 net.cpp:139] Memory required for data: 9370808
I0426 20:53:09.807672 32386 net.cpp:200] loss needs backward computation.
I0426 20:53:09.807675 32386 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:09.807679 32386 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:53:09.807682 32386 net.cpp:200] relu2 needs backward computation.
I0426 20:53:09.807684 32386 net.cpp:200] ip2 needs backward computation.
I0426 20:53:09.807687 32386 net.cpp:200] relu1 needs backward computation.
I0426 20:53:09.807690 32386 net.cpp:200] ip1 needs backward computation.
I0426 20:53:09.807694 32386 net.cpp:200] pool1 needs backward computation.
I0426 20:53:09.807698 32386 net.cpp:200] conv1 needs backward computation.
I0426 20:53:09.807700 32386 net.cpp:200] pool0 needs backward computation.
I0426 20:53:09.807703 32386 net.cpp:200] conv0 needs backward computation.
I0426 20:53:09.807706 32386 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:09.807710 32386 net.cpp:202] mnist does not need backward computation.
I0426 20:53:09.807713 32386 net.cpp:244] This network produces output accuracy
I0426 20:53:09.807715 32386 net.cpp:244] This network produces output loss
I0426 20:53:09.807725 32386 net.cpp:257] Network initialization done.
I0426 20:53:09.807760 32386 solver.cpp:56] Solver scaffolding done.
I0426 20:53:09.808039 32386 caffe.cpp:248] Starting Optimization
I0426 20:53:09.808046 32386 solver.cpp:273] Solving LeNet
I0426 20:53:09.808048 32386 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:09.809557 32386 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:09.842613 32386 blocking_queue.cpp:49] Waiting for data
I0426 20:53:09.884093 32393 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:09.884747 32386 solver.cpp:398]     Test net output #0: accuracy = 0.0959
I0426 20:53:09.884768 32386 solver.cpp:398]     Test net output #1: loss = 2.32236 (* 1 = 2.32236 loss)
I0426 20:53:09.888766 32386 solver.cpp:219] Iteration 0 (-3.88348e-31 iter/s, 0.0806779s/100 iters), loss = 2.33235
I0426 20:53:09.888790 32386 solver.cpp:238]     Train net output #0: loss = 2.33235 (* 1 = 2.33235 loss)
I0426 20:53:09.888844 32386 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:53:10.017597 32386 solver.cpp:219] Iteration 100 (776.418 iter/s, 0.128797s/100 iters), loss = 0.823025
I0426 20:53:10.017623 32386 solver.cpp:238]     Train net output #0: loss = 0.823025 (* 1 = 0.823025 loss)
I0426 20:53:10.017630 32386 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:53:10.143801 32386 solver.cpp:219] Iteration 200 (792.606 iter/s, 0.126166s/100 iters), loss = 0.861154
I0426 20:53:10.143827 32386 solver.cpp:238]     Train net output #0: loss = 0.861154 (* 1 = 0.861154 loss)
I0426 20:53:10.143848 32386 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:53:10.271267 32386 solver.cpp:219] Iteration 300 (784.753 iter/s, 0.127429s/100 iters), loss = 0.246935
I0426 20:53:10.271293 32386 solver.cpp:238]     Train net output #0: loss = 0.246935 (* 1 = 0.246935 loss)
I0426 20:53:10.271316 32386 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:53:10.407601 32386 solver.cpp:219] Iteration 400 (733.695 iter/s, 0.136296s/100 iters), loss = 0.0755541
I0426 20:53:10.407642 32386 solver.cpp:238]     Train net output #0: loss = 0.0755541 (* 1 = 0.0755541 loss)
I0426 20:53:10.407649 32386 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:53:10.533787 32386 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:53:10.592393 32393 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:10.594296 32386 solver.cpp:398]     Test net output #0: accuracy = 0.968
I0426 20:53:10.594316 32386 solver.cpp:398]     Test net output #1: loss = 0.1022 (* 1 = 0.1022 loss)
I0426 20:53:10.595444 32386 solver.cpp:219] Iteration 500 (532.471 iter/s, 0.187804s/100 iters), loss = 0.0846926
I0426 20:53:10.595466 32386 solver.cpp:238]     Train net output #0: loss = 0.0846926 (* 1 = 0.0846926 loss)
I0426 20:53:10.595474 32386 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:53:10.720643 32386 solver.cpp:219] Iteration 600 (798.955 iter/s, 0.125164s/100 iters), loss = 0.114236
I0426 20:53:10.720685 32386 solver.cpp:238]     Train net output #0: loss = 0.114236 (* 1 = 0.114236 loss)
I0426 20:53:10.720690 32386 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:53:10.845975 32386 solver.cpp:219] Iteration 700 (798.217 iter/s, 0.125279s/100 iters), loss = 0.131203
I0426 20:53:10.846017 32386 solver.cpp:238]     Train net output #0: loss = 0.131203 (* 1 = 0.131203 loss)
I0426 20:53:10.846024 32386 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:53:10.972332 32386 solver.cpp:219] Iteration 800 (791.649 iter/s, 0.126319s/100 iters), loss = 0.247168
I0426 20:53:10.972373 32386 solver.cpp:238]     Train net output #0: loss = 0.247168 (* 1 = 0.247168 loss)
I0426 20:53:10.972378 32386 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:53:11.096659 32386 solver.cpp:219] Iteration 900 (804.564 iter/s, 0.124291s/100 iters), loss = 0.180413
I0426 20:53:11.096715 32386 solver.cpp:238]     Train net output #0: loss = 0.180413 (* 1 = 0.180413 loss)
I0426 20:53:11.096722 32386 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:53:11.138032 32392 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:11.220252 32386 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:53:11.224180 32386 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:53:11.226490 32386 solver.cpp:311] Iteration 1000, loss = 0.115384
I0426 20:53:11.226505 32386 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:53:11.283742 32393 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:11.285749 32386 solver.cpp:398]     Test net output #0: accuracy = 0.9783
I0426 20:53:11.285784 32386 solver.cpp:398]     Test net output #1: loss = 0.0704288 (* 1 = 0.0704288 loss)
I0426 20:53:11.285789 32386 solver.cpp:316] Optimization Done.
I0426 20:53:11.285792 32386 caffe.cpp:259] Optimization Done.
