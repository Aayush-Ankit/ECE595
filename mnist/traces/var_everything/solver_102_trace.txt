I0426 20:52:02.695968 32111 caffe.cpp:218] Using GPUs 0
I0426 20:52:02.726074 32111 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:03.184507 32111 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test102.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:03.184641 32111 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test102.prototxt
I0426 20:52:03.185041 32111 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:03.185072 32111 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:03.185161 32111 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:52:03.185223 32111 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:03.185305 32111 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:03.185325 32111 net.cpp:86] Creating Layer mnist
I0426 20:52:03.185331 32111 net.cpp:382] mnist -> data
I0426 20:52:03.185349 32111 net.cpp:382] mnist -> label
I0426 20:52:03.186291 32111 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:03.188375 32111 net.cpp:124] Setting up mnist
I0426 20:52:03.188388 32111 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:03.188393 32111 net.cpp:131] Top shape: 64 (64)
I0426 20:52:03.188395 32111 net.cpp:139] Memory required for data: 200960
I0426 20:52:03.188400 32111 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:03.188413 32111 net.cpp:86] Creating Layer conv0
I0426 20:52:03.188417 32111 net.cpp:408] conv0 <- data
I0426 20:52:03.188452 32111 net.cpp:382] conv0 -> conv0
I0426 20:52:03.419301 32111 net.cpp:124] Setting up conv0
I0426 20:52:03.419343 32111 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:03.419348 32111 net.cpp:139] Memory required for data: 3887360
I0426 20:52:03.419381 32111 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:03.419410 32111 net.cpp:86] Creating Layer pool0
I0426 20:52:03.419414 32111 net.cpp:408] pool0 <- conv0
I0426 20:52:03.419420 32111 net.cpp:382] pool0 -> pool0
I0426 20:52:03.419463 32111 net.cpp:124] Setting up pool0
I0426 20:52:03.419483 32111 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:03.419500 32111 net.cpp:139] Memory required for data: 4808960
I0426 20:52:03.419502 32111 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:03.419512 32111 net.cpp:86] Creating Layer conv1
I0426 20:52:03.419515 32111 net.cpp:408] conv1 <- pool0
I0426 20:52:03.419520 32111 net.cpp:382] conv1 -> conv1
I0426 20:52:03.422148 32111 net.cpp:124] Setting up conv1
I0426 20:52:03.422163 32111 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:52:03.422165 32111 net.cpp:139] Memory required for data: 4972800
I0426 20:52:03.422173 32111 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:03.422195 32111 net.cpp:86] Creating Layer pool1
I0426 20:52:03.422199 32111 net.cpp:408] pool1 <- conv1
I0426 20:52:03.422204 32111 net.cpp:382] pool1 -> pool1
I0426 20:52:03.422255 32111 net.cpp:124] Setting up pool1
I0426 20:52:03.422260 32111 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:52:03.422262 32111 net.cpp:139] Memory required for data: 5013760
I0426 20:52:03.422266 32111 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:03.422271 32111 net.cpp:86] Creating Layer ip1
I0426 20:52:03.422274 32111 net.cpp:408] ip1 <- pool1
I0426 20:52:03.422278 32111 net.cpp:382] ip1 -> ip1
I0426 20:52:03.422653 32111 net.cpp:124] Setting up ip1
I0426 20:52:03.422660 32111 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:03.422663 32111 net.cpp:139] Memory required for data: 5090560
I0426 20:52:03.422685 32111 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:03.422690 32111 net.cpp:86] Creating Layer relu1
I0426 20:52:03.422693 32111 net.cpp:408] relu1 <- ip1
I0426 20:52:03.422698 32111 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:03.422868 32111 net.cpp:124] Setting up relu1
I0426 20:52:03.422875 32111 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:03.422879 32111 net.cpp:139] Memory required for data: 5167360
I0426 20:52:03.422883 32111 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:03.422888 32111 net.cpp:86] Creating Layer ip2
I0426 20:52:03.422891 32111 net.cpp:408] ip2 <- ip1
I0426 20:52:03.422895 32111 net.cpp:382] ip2 -> ip2
I0426 20:52:03.423840 32111 net.cpp:124] Setting up ip2
I0426 20:52:03.423851 32111 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:03.423869 32111 net.cpp:139] Memory required for data: 5169920
I0426 20:52:03.423874 32111 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:03.423880 32111 net.cpp:86] Creating Layer relu2
I0426 20:52:03.423884 32111 net.cpp:408] relu2 <- ip2
I0426 20:52:03.423888 32111 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:03.424777 32111 net.cpp:124] Setting up relu2
I0426 20:52:03.424787 32111 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:03.424806 32111 net.cpp:139] Memory required for data: 5172480
I0426 20:52:03.424815 32111 layer_factory.hpp:77] Creating layer loss
I0426 20:52:03.424840 32111 net.cpp:86] Creating Layer loss
I0426 20:52:03.424844 32111 net.cpp:408] loss <- ip2
I0426 20:52:03.424849 32111 net.cpp:408] loss <- label
I0426 20:52:03.424870 32111 net.cpp:382] loss -> loss
I0426 20:52:03.424907 32111 layer_factory.hpp:77] Creating layer loss
I0426 20:52:03.425150 32111 net.cpp:124] Setting up loss
I0426 20:52:03.425161 32111 net.cpp:131] Top shape: (1)
I0426 20:52:03.425165 32111 net.cpp:134]     with loss weight 1
I0426 20:52:03.425192 32111 net.cpp:139] Memory required for data: 5172484
I0426 20:52:03.425210 32111 net.cpp:200] loss needs backward computation.
I0426 20:52:03.425213 32111 net.cpp:200] relu2 needs backward computation.
I0426 20:52:03.425216 32111 net.cpp:200] ip2 needs backward computation.
I0426 20:52:03.425220 32111 net.cpp:200] relu1 needs backward computation.
I0426 20:52:03.425222 32111 net.cpp:200] ip1 needs backward computation.
I0426 20:52:03.425235 32111 net.cpp:200] pool1 needs backward computation.
I0426 20:52:03.425238 32111 net.cpp:200] conv1 needs backward computation.
I0426 20:52:03.425241 32111 net.cpp:200] pool0 needs backward computation.
I0426 20:52:03.425245 32111 net.cpp:200] conv0 needs backward computation.
I0426 20:52:03.425247 32111 net.cpp:202] mnist does not need backward computation.
I0426 20:52:03.425251 32111 net.cpp:244] This network produces output loss
I0426 20:52:03.425258 32111 net.cpp:257] Network initialization done.
I0426 20:52:03.425565 32111 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test102.prototxt
I0426 20:52:03.425590 32111 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:03.425673 32111 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:52:03.425734 32111 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:03.425792 32111 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:03.425804 32111 net.cpp:86] Creating Layer mnist
I0426 20:52:03.425809 32111 net.cpp:382] mnist -> data
I0426 20:52:03.425817 32111 net.cpp:382] mnist -> label
I0426 20:52:03.425894 32111 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:03.428066 32111 net.cpp:124] Setting up mnist
I0426 20:52:03.428078 32111 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:03.428082 32111 net.cpp:131] Top shape: 100 (100)
I0426 20:52:03.428086 32111 net.cpp:139] Memory required for data: 314000
I0426 20:52:03.428088 32111 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:03.428097 32111 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:03.428100 32111 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:03.428104 32111 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:03.428110 32111 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:03.428169 32111 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:03.428174 32111 net.cpp:131] Top shape: 100 (100)
I0426 20:52:03.428177 32111 net.cpp:131] Top shape: 100 (100)
I0426 20:52:03.428179 32111 net.cpp:139] Memory required for data: 314800
I0426 20:52:03.428182 32111 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:03.428190 32111 net.cpp:86] Creating Layer conv0
I0426 20:52:03.428194 32111 net.cpp:408] conv0 <- data
I0426 20:52:03.428197 32111 net.cpp:382] conv0 -> conv0
I0426 20:52:03.430095 32111 net.cpp:124] Setting up conv0
I0426 20:52:03.430109 32111 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:03.430114 32111 net.cpp:139] Memory required for data: 6074800
I0426 20:52:03.430121 32111 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:03.430127 32111 net.cpp:86] Creating Layer pool0
I0426 20:52:03.430146 32111 net.cpp:408] pool0 <- conv0
I0426 20:52:03.430151 32111 net.cpp:382] pool0 -> pool0
I0426 20:52:03.430199 32111 net.cpp:124] Setting up pool0
I0426 20:52:03.430204 32111 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:03.430207 32111 net.cpp:139] Memory required for data: 7514800
I0426 20:52:03.430209 32111 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:03.430218 32111 net.cpp:86] Creating Layer conv1
I0426 20:52:03.430220 32111 net.cpp:408] conv1 <- pool0
I0426 20:52:03.430225 32111 net.cpp:382] conv1 -> conv1
I0426 20:52:03.432301 32111 net.cpp:124] Setting up conv1
I0426 20:52:03.432312 32111 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:52:03.432317 32111 net.cpp:139] Memory required for data: 7770800
I0426 20:52:03.432324 32111 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:03.432346 32111 net.cpp:86] Creating Layer pool1
I0426 20:52:03.432350 32111 net.cpp:408] pool1 <- conv1
I0426 20:52:03.432370 32111 net.cpp:382] pool1 -> pool1
I0426 20:52:03.432405 32111 net.cpp:124] Setting up pool1
I0426 20:52:03.432410 32111 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:52:03.432412 32111 net.cpp:139] Memory required for data: 7834800
I0426 20:52:03.432416 32111 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:03.432421 32111 net.cpp:86] Creating Layer ip1
I0426 20:52:03.432425 32111 net.cpp:408] ip1 <- pool1
I0426 20:52:03.432428 32111 net.cpp:382] ip1 -> ip1
I0426 20:52:03.432778 32111 net.cpp:124] Setting up ip1
I0426 20:52:03.432786 32111 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:03.432790 32111 net.cpp:139] Memory required for data: 7954800
I0426 20:52:03.432796 32111 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:03.432801 32111 net.cpp:86] Creating Layer relu1
I0426 20:52:03.432804 32111 net.cpp:408] relu1 <- ip1
I0426 20:52:03.432808 32111 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:03.433028 32111 net.cpp:124] Setting up relu1
I0426 20:52:03.433038 32111 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:03.433049 32111 net.cpp:139] Memory required for data: 8074800
I0426 20:52:03.433053 32111 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:03.433060 32111 net.cpp:86] Creating Layer ip2
I0426 20:52:03.433063 32111 net.cpp:408] ip2 <- ip1
I0426 20:52:03.433069 32111 net.cpp:382] ip2 -> ip2
I0426 20:52:03.433230 32111 net.cpp:124] Setting up ip2
I0426 20:52:03.433238 32111 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:03.433240 32111 net.cpp:139] Memory required for data: 8078800
I0426 20:52:03.433246 32111 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:03.433251 32111 net.cpp:86] Creating Layer relu2
I0426 20:52:03.433254 32111 net.cpp:408] relu2 <- ip2
I0426 20:52:03.433259 32111 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:03.433410 32111 net.cpp:124] Setting up relu2
I0426 20:52:03.433418 32111 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:03.433429 32111 net.cpp:139] Memory required for data: 8082800
I0426 20:52:03.433431 32111 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:52:03.433436 32111 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:52:03.433439 32111 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:52:03.433459 32111 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:52:03.433473 32111 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:52:03.433507 32111 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:52:03.433512 32111 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:03.433516 32111 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:03.433519 32111 net.cpp:139] Memory required for data: 8090800
I0426 20:52:03.433521 32111 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:03.433526 32111 net.cpp:86] Creating Layer accuracy
I0426 20:52:03.433529 32111 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:52:03.433533 32111 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:03.433537 32111 net.cpp:382] accuracy -> accuracy
I0426 20:52:03.433543 32111 net.cpp:124] Setting up accuracy
I0426 20:52:03.433547 32111 net.cpp:131] Top shape: (1)
I0426 20:52:03.433549 32111 net.cpp:139] Memory required for data: 8090804
I0426 20:52:03.433552 32111 layer_factory.hpp:77] Creating layer loss
I0426 20:52:03.433557 32111 net.cpp:86] Creating Layer loss
I0426 20:52:03.433559 32111 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:52:03.433562 32111 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:03.433567 32111 net.cpp:382] loss -> loss
I0426 20:52:03.433571 32111 layer_factory.hpp:77] Creating layer loss
I0426 20:52:03.433873 32111 net.cpp:124] Setting up loss
I0426 20:52:03.433883 32111 net.cpp:131] Top shape: (1)
I0426 20:52:03.433887 32111 net.cpp:134]     with loss weight 1
I0426 20:52:03.433892 32111 net.cpp:139] Memory required for data: 8090808
I0426 20:52:03.433897 32111 net.cpp:200] loss needs backward computation.
I0426 20:52:03.433899 32111 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:03.433903 32111 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:52:03.433907 32111 net.cpp:200] relu2 needs backward computation.
I0426 20:52:03.433909 32111 net.cpp:200] ip2 needs backward computation.
I0426 20:52:03.433913 32111 net.cpp:200] relu1 needs backward computation.
I0426 20:52:03.433915 32111 net.cpp:200] ip1 needs backward computation.
I0426 20:52:03.433918 32111 net.cpp:200] pool1 needs backward computation.
I0426 20:52:03.433921 32111 net.cpp:200] conv1 needs backward computation.
I0426 20:52:03.433925 32111 net.cpp:200] pool0 needs backward computation.
I0426 20:52:03.433928 32111 net.cpp:200] conv0 needs backward computation.
I0426 20:52:03.433931 32111 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:03.433935 32111 net.cpp:202] mnist does not need backward computation.
I0426 20:52:03.433944 32111 net.cpp:244] This network produces output accuracy
I0426 20:52:03.433953 32111 net.cpp:244] This network produces output loss
I0426 20:52:03.433961 32111 net.cpp:257] Network initialization done.
I0426 20:52:03.433996 32111 solver.cpp:56] Solver scaffolding done.
I0426 20:52:03.434272 32111 caffe.cpp:248] Starting Optimization
I0426 20:52:03.434278 32111 solver.cpp:273] Solving LeNet
I0426 20:52:03.434281 32111 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:03.435109 32111 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:03.439752 32111 blocking_queue.cpp:49] Waiting for data
I0426 20:52:03.511970 32118 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:03.512593 32111 solver.cpp:398]     Test net output #0: accuracy = 0.0856
I0426 20:52:03.512627 32111 solver.cpp:398]     Test net output #1: loss = 2.32003 (* 1 = 2.32003 loss)
I0426 20:52:03.516407 32111 solver.cpp:219] Iteration 0 (-9.89317e-43 iter/s, 0.0821024s/100 iters), loss = 2.33196
I0426 20:52:03.516432 32111 solver.cpp:238]     Train net output #0: loss = 2.33196 (* 1 = 2.33196 loss)
I0426 20:52:03.516458 32111 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:03.610218 32111 solver.cpp:219] Iteration 100 (1066.36 iter/s, 0.0937769s/100 iters), loss = 0.316851
I0426 20:52:03.610242 32111 solver.cpp:238]     Train net output #0: loss = 0.316851 (* 1 = 0.316851 loss)
I0426 20:52:03.610266 32111 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:03.712352 32111 solver.cpp:219] Iteration 200 (979.45 iter/s, 0.102098s/100 iters), loss = 0.148478
I0426 20:52:03.712394 32111 solver.cpp:238]     Train net output #0: loss = 0.148478 (* 1 = 0.148478 loss)
I0426 20:52:03.712400 32111 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:03.804548 32111 solver.cpp:219] Iteration 300 (1085.26 iter/s, 0.0921438s/100 iters), loss = 0.177402
I0426 20:52:03.804585 32111 solver.cpp:238]     Train net output #0: loss = 0.177402 (* 1 = 0.177402 loss)
I0426 20:52:03.804591 32111 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:03.897806 32111 solver.cpp:219] Iteration 400 (1072.65 iter/s, 0.093227s/100 iters), loss = 0.108546
I0426 20:52:03.897847 32111 solver.cpp:238]     Train net output #0: loss = 0.108546 (* 1 = 0.108546 loss)
I0426 20:52:03.897855 32111 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:03.990377 32111 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:04.065724 32118 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:04.066344 32111 solver.cpp:398]     Test net output #0: accuracy = 0.971
I0426 20:52:04.066378 32111 solver.cpp:398]     Test net output #1: loss = 0.0957225 (* 1 = 0.0957225 loss)
I0426 20:52:04.067348 32111 solver.cpp:219] Iteration 500 (590.032 iter/s, 0.169482s/100 iters), loss = 0.0833721
I0426 20:52:04.067368 32111 solver.cpp:238]     Train net output #0: loss = 0.0833721 (* 1 = 0.0833721 loss)
I0426 20:52:04.067375 32111 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:04.168462 32111 solver.cpp:219] Iteration 600 (989.294 iter/s, 0.101082s/100 iters), loss = 0.142545
I0426 20:52:04.168500 32111 solver.cpp:238]     Train net output #0: loss = 0.142545 (* 1 = 0.142545 loss)
I0426 20:52:04.168506 32111 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:04.260139 32111 solver.cpp:219] Iteration 700 (1091.17 iter/s, 0.0916449s/100 iters), loss = 0.199729
I0426 20:52:04.260164 32111 solver.cpp:238]     Train net output #0: loss = 0.199729 (* 1 = 0.199729 loss)
I0426 20:52:04.260170 32111 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:04.351297 32111 solver.cpp:219] Iteration 800 (1097.59 iter/s, 0.0911085s/100 iters), loss = 0.192733
I0426 20:52:04.351339 32111 solver.cpp:238]     Train net output #0: loss = 0.192733 (* 1 = 0.192733 loss)
I0426 20:52:04.351346 32111 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:04.442605 32111 solver.cpp:219] Iteration 900 (1095.82 iter/s, 0.0912558s/100 iters), loss = 0.29999
I0426 20:52:04.442644 32111 solver.cpp:238]     Train net output #0: loss = 0.29999 (* 1 = 0.29999 loss)
I0426 20:52:04.442651 32111 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:04.473426 32117 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:04.533493 32111 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:04.534795 32111 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:04.535717 32111 solver.cpp:311] Iteration 1000, loss = 0.0527588
I0426 20:52:04.535748 32111 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:04.611323 32118 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:04.611928 32111 solver.cpp:398]     Test net output #0: accuracy = 0.9777
I0426 20:52:04.611963 32111 solver.cpp:398]     Test net output #1: loss = 0.0658142 (* 1 = 0.0658142 loss)
I0426 20:52:04.611969 32111 solver.cpp:316] Optimization Done.
I0426 20:52:04.611973 32111 caffe.cpp:259] Optimization Done.
