I0426 20:49:50.841426 31637 caffe.cpp:218] Using GPUs 0
I0426 20:49:50.877300 31637 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:49:51.342216 31637 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test46.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:49:51.342346 31637 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test46.prototxt
I0426 20:49:51.342649 31637 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:49:51.342676 31637 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:49:51.342756 31637 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:51.342828 31637 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:51.342912 31637 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:49:51.342931 31637 net.cpp:86] Creating Layer mnist
I0426 20:49:51.342938 31637 net.cpp:382] mnist -> data
I0426 20:49:51.342957 31637 net.cpp:382] mnist -> label
I0426 20:49:51.343930 31637 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:49:51.346091 31637 net.cpp:124] Setting up mnist
I0426 20:49:51.346120 31637 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:49:51.346125 31637 net.cpp:131] Top shape: 64 (64)
I0426 20:49:51.346128 31637 net.cpp:139] Memory required for data: 200960
I0426 20:49:51.346134 31637 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:51.346164 31637 net.cpp:86] Creating Layer conv0
I0426 20:49:51.346169 31637 net.cpp:408] conv0 <- data
I0426 20:49:51.346179 31637 net.cpp:382] conv0 -> conv0
I0426 20:49:51.575186 31637 net.cpp:124] Setting up conv0
I0426 20:49:51.575212 31637 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:49:51.575217 31637 net.cpp:139] Memory required for data: 7573760
I0426 20:49:51.575229 31637 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:51.575243 31637 net.cpp:86] Creating Layer pool0
I0426 20:49:51.575247 31637 net.cpp:408] pool0 <- conv0
I0426 20:49:51.575251 31637 net.cpp:382] pool0 -> pool0
I0426 20:49:51.575314 31637 net.cpp:124] Setting up pool0
I0426 20:49:51.575321 31637 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:49:51.575325 31637 net.cpp:139] Memory required for data: 9416960
I0426 20:49:51.575341 31637 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:51.575350 31637 net.cpp:86] Creating Layer ip1
I0426 20:49:51.575352 31637 net.cpp:408] ip1 <- pool0
I0426 20:49:51.575358 31637 net.cpp:382] ip1 -> ip1
I0426 20:49:51.588526 31637 net.cpp:124] Setting up ip1
I0426 20:49:51.588539 31637 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:51.588542 31637 net.cpp:139] Memory required for data: 9493760
I0426 20:49:51.588551 31637 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:51.588557 31637 net.cpp:86] Creating Layer relu1
I0426 20:49:51.588559 31637 net.cpp:408] relu1 <- ip1
I0426 20:49:51.588567 31637 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:51.588764 31637 net.cpp:124] Setting up relu1
I0426 20:49:51.588773 31637 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:51.588776 31637 net.cpp:139] Memory required for data: 9570560
I0426 20:49:51.588780 31637 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:51.588788 31637 net.cpp:86] Creating Layer ip2
I0426 20:49:51.588791 31637 net.cpp:408] ip2 <- ip1
I0426 20:49:51.588796 31637 net.cpp:382] ip2 -> ip2
I0426 20:49:51.588958 31637 net.cpp:124] Setting up ip2
I0426 20:49:51.588966 31637 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:51.588969 31637 net.cpp:139] Memory required for data: 9573120
I0426 20:49:51.588977 31637 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:51.588982 31637 net.cpp:86] Creating Layer relu2
I0426 20:49:51.588985 31637 net.cpp:408] relu2 <- ip2
I0426 20:49:51.588990 31637 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:51.589848 31637 net.cpp:124] Setting up relu2
I0426 20:49:51.589859 31637 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:51.589877 31637 net.cpp:139] Memory required for data: 9575680
I0426 20:49:51.589881 31637 layer_factory.hpp:77] Creating layer loss
I0426 20:49:51.589887 31637 net.cpp:86] Creating Layer loss
I0426 20:49:51.589890 31637 net.cpp:408] loss <- ip2
I0426 20:49:51.589895 31637 net.cpp:408] loss <- label
I0426 20:49:51.589900 31637 net.cpp:382] loss -> loss
I0426 20:49:51.589931 31637 layer_factory.hpp:77] Creating layer loss
I0426 20:49:51.590195 31637 net.cpp:124] Setting up loss
I0426 20:49:51.590205 31637 net.cpp:131] Top shape: (1)
I0426 20:49:51.590209 31637 net.cpp:134]     with loss weight 1
I0426 20:49:51.590222 31637 net.cpp:139] Memory required for data: 9575684
I0426 20:49:51.590225 31637 net.cpp:200] loss needs backward computation.
I0426 20:49:51.590229 31637 net.cpp:200] relu2 needs backward computation.
I0426 20:49:51.590231 31637 net.cpp:200] ip2 needs backward computation.
I0426 20:49:51.590234 31637 net.cpp:200] relu1 needs backward computation.
I0426 20:49:51.590237 31637 net.cpp:200] ip1 needs backward computation.
I0426 20:49:51.590241 31637 net.cpp:200] pool0 needs backward computation.
I0426 20:49:51.590243 31637 net.cpp:200] conv0 needs backward computation.
I0426 20:49:51.590247 31637 net.cpp:202] mnist does not need backward computation.
I0426 20:49:51.590250 31637 net.cpp:244] This network produces output loss
I0426 20:49:51.590257 31637 net.cpp:257] Network initialization done.
I0426 20:49:51.590533 31637 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test46.prototxt
I0426 20:49:51.590556 31637 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:49:51.590627 31637 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:51.590698 31637 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:51.590741 31637 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:49:51.590754 31637 net.cpp:86] Creating Layer mnist
I0426 20:49:51.590759 31637 net.cpp:382] mnist -> data
I0426 20:49:51.590765 31637 net.cpp:382] mnist -> label
I0426 20:49:51.590849 31637 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:49:51.592749 31637 net.cpp:124] Setting up mnist
I0426 20:49:51.592761 31637 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:49:51.592766 31637 net.cpp:131] Top shape: 100 (100)
I0426 20:49:51.592768 31637 net.cpp:139] Memory required for data: 314000
I0426 20:49:51.592772 31637 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:49:51.592778 31637 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:49:51.592782 31637 net.cpp:408] label_mnist_1_split <- label
I0426 20:49:51.592787 31637 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:49:51.592792 31637 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:49:51.592916 31637 net.cpp:124] Setting up label_mnist_1_split
I0426 20:49:51.592921 31637 net.cpp:131] Top shape: 100 (100)
I0426 20:49:51.592926 31637 net.cpp:131] Top shape: 100 (100)
I0426 20:49:51.592928 31637 net.cpp:139] Memory required for data: 314800
I0426 20:49:51.592931 31637 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:51.592941 31637 net.cpp:86] Creating Layer conv0
I0426 20:49:51.592943 31637 net.cpp:408] conv0 <- data
I0426 20:49:51.592949 31637 net.cpp:382] conv0 -> conv0
I0426 20:49:51.594806 31637 net.cpp:124] Setting up conv0
I0426 20:49:51.594818 31637 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:49:51.594822 31637 net.cpp:139] Memory required for data: 11834800
I0426 20:49:51.594830 31637 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:51.594836 31637 net.cpp:86] Creating Layer pool0
I0426 20:49:51.594856 31637 net.cpp:408] pool0 <- conv0
I0426 20:49:51.594859 31637 net.cpp:382] pool0 -> pool0
I0426 20:49:51.594895 31637 net.cpp:124] Setting up pool0
I0426 20:49:51.594900 31637 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:49:51.594903 31637 net.cpp:139] Memory required for data: 14714800
I0426 20:49:51.594905 31637 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:51.594913 31637 net.cpp:86] Creating Layer ip1
I0426 20:49:51.594915 31637 net.cpp:408] ip1 <- pool0
I0426 20:49:51.594919 31637 net.cpp:382] ip1 -> ip1
I0426 20:49:51.608350 31637 net.cpp:124] Setting up ip1
I0426 20:49:51.608362 31637 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:51.608366 31637 net.cpp:139] Memory required for data: 14834800
I0426 20:49:51.608372 31637 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:51.608379 31637 net.cpp:86] Creating Layer relu1
I0426 20:49:51.608381 31637 net.cpp:408] relu1 <- ip1
I0426 20:49:51.608386 31637 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:51.608604 31637 net.cpp:124] Setting up relu1
I0426 20:49:51.608614 31637 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:51.608628 31637 net.cpp:139] Memory required for data: 14954800
I0426 20:49:51.608631 31637 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:51.608638 31637 net.cpp:86] Creating Layer ip2
I0426 20:49:51.608640 31637 net.cpp:408] ip2 <- ip1
I0426 20:49:51.608649 31637 net.cpp:382] ip2 -> ip2
I0426 20:49:51.608784 31637 net.cpp:124] Setting up ip2
I0426 20:49:51.608793 31637 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:51.608795 31637 net.cpp:139] Memory required for data: 14958800
I0426 20:49:51.608803 31637 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:51.608808 31637 net.cpp:86] Creating Layer relu2
I0426 20:49:51.608815 31637 net.cpp:408] relu2 <- ip2
I0426 20:49:51.608835 31637 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:51.608996 31637 net.cpp:124] Setting up relu2
I0426 20:49:51.609005 31637 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:51.609009 31637 net.cpp:139] Memory required for data: 14962800
I0426 20:49:51.609012 31637 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:49:51.609019 31637 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:49:51.609022 31637 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:49:51.609027 31637 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:49:51.609033 31637 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:49:51.609086 31637 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:49:51.609094 31637 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:51.609098 31637 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:51.609100 31637 net.cpp:139] Memory required for data: 14970800
I0426 20:49:51.609103 31637 layer_factory.hpp:77] Creating layer accuracy
I0426 20:49:51.609108 31637 net.cpp:86] Creating Layer accuracy
I0426 20:49:51.609112 31637 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:49:51.609115 31637 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:49:51.609119 31637 net.cpp:382] accuracy -> accuracy
I0426 20:49:51.609125 31637 net.cpp:124] Setting up accuracy
I0426 20:49:51.609130 31637 net.cpp:131] Top shape: (1)
I0426 20:49:51.609133 31637 net.cpp:139] Memory required for data: 14970804
I0426 20:49:51.609135 31637 layer_factory.hpp:77] Creating layer loss
I0426 20:49:51.609140 31637 net.cpp:86] Creating Layer loss
I0426 20:49:51.609144 31637 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:49:51.609148 31637 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:49:51.609151 31637 net.cpp:382] loss -> loss
I0426 20:49:51.609158 31637 layer_factory.hpp:77] Creating layer loss
I0426 20:49:51.610047 31637 net.cpp:124] Setting up loss
I0426 20:49:51.610075 31637 net.cpp:131] Top shape: (1)
I0426 20:49:51.610079 31637 net.cpp:134]     with loss weight 1
I0426 20:49:51.610085 31637 net.cpp:139] Memory required for data: 14970808
I0426 20:49:51.610088 31637 net.cpp:200] loss needs backward computation.
I0426 20:49:51.610092 31637 net.cpp:202] accuracy does not need backward computation.
I0426 20:49:51.610096 31637 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:49:51.610100 31637 net.cpp:200] relu2 needs backward computation.
I0426 20:49:51.610101 31637 net.cpp:200] ip2 needs backward computation.
I0426 20:49:51.610105 31637 net.cpp:200] relu1 needs backward computation.
I0426 20:49:51.610106 31637 net.cpp:200] ip1 needs backward computation.
I0426 20:49:51.610110 31637 net.cpp:200] pool0 needs backward computation.
I0426 20:49:51.610127 31637 net.cpp:200] conv0 needs backward computation.
I0426 20:49:51.610131 31637 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:49:51.610134 31637 net.cpp:202] mnist does not need backward computation.
I0426 20:49:51.610137 31637 net.cpp:244] This network produces output accuracy
I0426 20:49:51.610141 31637 net.cpp:244] This network produces output loss
I0426 20:49:51.610149 31637 net.cpp:257] Network initialization done.
I0426 20:49:51.610183 31637 solver.cpp:56] Solver scaffolding done.
I0426 20:49:51.610399 31637 caffe.cpp:248] Starting Optimization
I0426 20:49:51.610405 31637 solver.cpp:273] Solving LeNet
I0426 20:49:51.610417 31637 solver.cpp:274] Learning Rate Policy: inv
I0426 20:49:51.612349 31637 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:49:51.620218 31637 blocking_queue.cpp:49] Waiting for data
I0426 20:49:51.693183 31644 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:51.694005 31637 solver.cpp:398]     Test net output #0: accuracy = 0.133
I0426 20:49:51.694025 31637 solver.cpp:398]     Test net output #1: loss = 2.31465 (* 1 = 2.31465 loss)
I0426 20:49:51.697330 31637 solver.cpp:219] Iteration 0 (0 iter/s, 0.0868874s/100 iters), loss = 2.33392
I0426 20:49:51.697353 31637 solver.cpp:238]     Train net output #0: loss = 2.33392 (* 1 = 2.33392 loss)
I0426 20:49:51.697378 31637 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:49:51.838548 31637 solver.cpp:219] Iteration 100 (708.321 iter/s, 0.141179s/100 iters), loss = 1.00661
I0426 20:49:51.838591 31637 solver.cpp:238]     Train net output #0: loss = 1.00661 (* 1 = 1.00661 loss)
I0426 20:49:51.838613 31637 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:49:51.976716 31637 solver.cpp:219] Iteration 200 (724.035 iter/s, 0.138115s/100 iters), loss = 0.651969
I0426 20:49:51.976755 31637 solver.cpp:238]     Train net output #0: loss = 0.651969 (* 1 = 0.651969 loss)
I0426 20:49:51.976763 31637 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:49:52.116456 31637 solver.cpp:219] Iteration 300 (715.808 iter/s, 0.139702s/100 iters), loss = 0.915779
I0426 20:49:52.116490 31637 solver.cpp:238]     Train net output #0: loss = 0.915779 (* 1 = 0.915779 loss)
I0426 20:49:52.116499 31637 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:49:52.257678 31637 solver.cpp:219] Iteration 400 (708.331 iter/s, 0.141177s/100 iters), loss = 0.507218
I0426 20:49:52.257705 31637 solver.cpp:238]     Train net output #0: loss = 0.507218 (* 1 = 0.507218 loss)
I0426 20:49:52.257712 31637 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:49:52.396694 31637 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:49:52.477295 31644 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:52.478420 31637 solver.cpp:398]     Test net output #0: accuracy = 0.7704
I0426 20:49:52.478453 31637 solver.cpp:398]     Test net output #1: loss = 0.594626 (* 1 = 0.594626 loss)
I0426 20:49:52.479691 31637 solver.cpp:219] Iteration 500 (450.515 iter/s, 0.221968s/100 iters), loss = 0.544551
I0426 20:49:52.479732 31637 solver.cpp:238]     Train net output #0: loss = 0.544551 (* 1 = 0.544551 loss)
I0426 20:49:52.479746 31637 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:49:52.623872 31637 solver.cpp:219] Iteration 600 (693.808 iter/s, 0.144132s/100 iters), loss = 0.390949
I0426 20:49:52.623910 31637 solver.cpp:238]     Train net output #0: loss = 0.390949 (* 1 = 0.390949 loss)
I0426 20:49:52.623924 31637 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:49:52.766266 31637 solver.cpp:219] Iteration 700 (702.523 iter/s, 0.142344s/100 iters), loss = 0.617235
I0426 20:49:52.766315 31637 solver.cpp:238]     Train net output #0: loss = 0.617235 (* 1 = 0.617235 loss)
I0426 20:49:52.766333 31637 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:49:52.922294 31637 solver.cpp:219] Iteration 800 (641.168 iter/s, 0.155965s/100 iters), loss = 0.714958
I0426 20:49:52.922349 31637 solver.cpp:238]     Train net output #0: loss = 0.714958 (* 1 = 0.714958 loss)
I0426 20:49:52.922363 31637 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:49:53.076182 31637 solver.cpp:219] Iteration 900 (650.11 iter/s, 0.15382s/100 iters), loss = 0.697319
I0426 20:49:53.076236 31637 solver.cpp:238]     Train net output #0: loss = 0.697319 (* 1 = 0.697319 loss)
I0426 20:49:53.076249 31637 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:49:53.127729 31643 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:53.228497 31637 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:49:53.286453 31637 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:49:53.305635 31637 solver.cpp:311] Iteration 1000, loss = 0.576621
I0426 20:49:53.305665 31637 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:49:53.384542 31644 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:53.385536 31637 solver.cpp:398]     Test net output #0: accuracy = 0.7777
I0426 20:49:53.385566 31637 solver.cpp:398]     Test net output #1: loss = 0.554082 (* 1 = 0.554082 loss)
I0426 20:49:53.385573 31637 solver.cpp:316] Optimization Done.
I0426 20:49:53.385578 31637 caffe.cpp:259] Optimization Done.
