I0426 20:50:24.040767 31747 caffe.cpp:218] Using GPUs 0
I0426 20:50:24.071578 31747 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:24.529820 31747 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test59.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:24.529954 31747 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test59.prototxt
I0426 20:50:24.530298 31747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:24.530314 31747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:24.530391 31747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:24.530473 31747 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:24.530560 31747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:24.530581 31747 net.cpp:86] Creating Layer mnist
I0426 20:50:24.530587 31747 net.cpp:382] mnist -> data
I0426 20:50:24.530607 31747 net.cpp:382] mnist -> label
I0426 20:50:24.531611 31747 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:24.534021 31747 net.cpp:124] Setting up mnist
I0426 20:50:24.534035 31747 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:24.534040 31747 net.cpp:131] Top shape: 64 (64)
I0426 20:50:24.534042 31747 net.cpp:139] Memory required for data: 200960
I0426 20:50:24.534049 31747 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:24.534062 31747 net.cpp:86] Creating Layer conv0
I0426 20:50:24.534066 31747 net.cpp:408] conv0 <- data
I0426 20:50:24.534121 31747 net.cpp:382] conv0 -> conv0
I0426 20:50:24.766095 31747 net.cpp:124] Setting up conv0
I0426 20:50:24.766120 31747 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:24.766124 31747 net.cpp:139] Memory required for data: 1675520
I0426 20:50:24.766158 31747 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:24.766171 31747 net.cpp:86] Creating Layer pool0
I0426 20:50:24.766175 31747 net.cpp:408] pool0 <- conv0
I0426 20:50:24.766196 31747 net.cpp:382] pool0 -> pool0
I0426 20:50:24.766240 31747 net.cpp:124] Setting up pool0
I0426 20:50:24.766245 31747 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:24.766248 31747 net.cpp:139] Memory required for data: 2044160
I0426 20:50:24.766252 31747 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:24.766263 31747 net.cpp:86] Creating Layer conv1
I0426 20:50:24.766264 31747 net.cpp:408] conv1 <- pool0
I0426 20:50:24.766269 31747 net.cpp:382] conv1 -> conv1
I0426 20:50:24.768942 31747 net.cpp:124] Setting up conv1
I0426 20:50:24.768971 31747 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:50:24.768975 31747 net.cpp:139] Memory required for data: 2208000
I0426 20:50:24.768998 31747 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:24.769006 31747 net.cpp:86] Creating Layer pool1
I0426 20:50:24.769009 31747 net.cpp:408] pool1 <- conv1
I0426 20:50:24.769014 31747 net.cpp:382] pool1 -> pool1
I0426 20:50:24.769065 31747 net.cpp:124] Setting up pool1
I0426 20:50:24.769071 31747 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:50:24.769074 31747 net.cpp:139] Memory required for data: 2248960
I0426 20:50:24.769078 31747 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:24.769084 31747 net.cpp:86] Creating Layer ip1
I0426 20:50:24.769088 31747 net.cpp:408] ip1 <- pool1
I0426 20:50:24.769091 31747 net.cpp:382] ip1 -> ip1
I0426 20:50:24.770131 31747 net.cpp:124] Setting up ip1
I0426 20:50:24.770143 31747 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:24.770161 31747 net.cpp:139] Memory required for data: 2274560
I0426 20:50:24.770169 31747 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:24.770174 31747 net.cpp:86] Creating Layer relu1
I0426 20:50:24.770179 31747 net.cpp:408] relu1 <- ip1
I0426 20:50:24.770182 31747 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:24.770371 31747 net.cpp:124] Setting up relu1
I0426 20:50:24.770380 31747 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:24.770385 31747 net.cpp:139] Memory required for data: 2300160
I0426 20:50:24.770401 31747 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:24.770407 31747 net.cpp:86] Creating Layer ip2
I0426 20:50:24.770411 31747 net.cpp:408] ip2 <- ip1
I0426 20:50:24.770416 31747 net.cpp:382] ip2 -> ip2
I0426 20:50:24.770506 31747 net.cpp:124] Setting up ip2
I0426 20:50:24.770514 31747 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:24.770516 31747 net.cpp:139] Memory required for data: 2302720
I0426 20:50:24.770521 31747 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:24.770526 31747 net.cpp:86] Creating Layer relu2
I0426 20:50:24.770529 31747 net.cpp:408] relu2 <- ip2
I0426 20:50:24.770534 31747 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:24.771332 31747 net.cpp:124] Setting up relu2
I0426 20:50:24.771344 31747 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:24.771363 31747 net.cpp:139] Memory required for data: 2305280
I0426 20:50:24.771366 31747 layer_factory.hpp:77] Creating layer loss
I0426 20:50:24.771373 31747 net.cpp:86] Creating Layer loss
I0426 20:50:24.771375 31747 net.cpp:408] loss <- ip2
I0426 20:50:24.771380 31747 net.cpp:408] loss <- label
I0426 20:50:24.771385 31747 net.cpp:382] loss -> loss
I0426 20:50:24.771405 31747 layer_factory.hpp:77] Creating layer loss
I0426 20:50:24.771631 31747 net.cpp:124] Setting up loss
I0426 20:50:24.771641 31747 net.cpp:131] Top shape: (1)
I0426 20:50:24.771644 31747 net.cpp:134]     with loss weight 1
I0426 20:50:24.771658 31747 net.cpp:139] Memory required for data: 2305284
I0426 20:50:24.771662 31747 net.cpp:200] loss needs backward computation.
I0426 20:50:24.771666 31747 net.cpp:200] relu2 needs backward computation.
I0426 20:50:24.771668 31747 net.cpp:200] ip2 needs backward computation.
I0426 20:50:24.771672 31747 net.cpp:200] relu1 needs backward computation.
I0426 20:50:24.771674 31747 net.cpp:200] ip1 needs backward computation.
I0426 20:50:24.771687 31747 net.cpp:200] pool1 needs backward computation.
I0426 20:50:24.771690 31747 net.cpp:200] conv1 needs backward computation.
I0426 20:50:24.771693 31747 net.cpp:200] pool0 needs backward computation.
I0426 20:50:24.771697 31747 net.cpp:200] conv0 needs backward computation.
I0426 20:50:24.771699 31747 net.cpp:202] mnist does not need backward computation.
I0426 20:50:24.771703 31747 net.cpp:244] This network produces output loss
I0426 20:50:24.771710 31747 net.cpp:257] Network initialization done.
I0426 20:50:24.772047 31747 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test59.prototxt
I0426 20:50:24.772073 31747 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:24.772176 31747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:24.772258 31747 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:24.772305 31747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:24.772316 31747 net.cpp:86] Creating Layer mnist
I0426 20:50:24.772321 31747 net.cpp:382] mnist -> data
I0426 20:50:24.772328 31747 net.cpp:382] mnist -> label
I0426 20:50:24.772410 31747 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:24.774365 31747 net.cpp:124] Setting up mnist
I0426 20:50:24.774377 31747 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:24.774381 31747 net.cpp:131] Top shape: 100 (100)
I0426 20:50:24.774384 31747 net.cpp:139] Memory required for data: 314000
I0426 20:50:24.774387 31747 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:24.774397 31747 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:24.774400 31747 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:24.774405 31747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:24.774410 31747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:24.774477 31747 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:24.774492 31747 net.cpp:131] Top shape: 100 (100)
I0426 20:50:24.774495 31747 net.cpp:131] Top shape: 100 (100)
I0426 20:50:24.774498 31747 net.cpp:139] Memory required for data: 314800
I0426 20:50:24.774500 31747 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:24.774509 31747 net.cpp:86] Creating Layer conv0
I0426 20:50:24.774513 31747 net.cpp:408] conv0 <- data
I0426 20:50:24.774516 31747 net.cpp:382] conv0 -> conv0
I0426 20:50:24.776325 31747 net.cpp:124] Setting up conv0
I0426 20:50:24.776338 31747 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:24.776341 31747 net.cpp:139] Memory required for data: 2618800
I0426 20:50:24.776350 31747 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:24.776371 31747 net.cpp:86] Creating Layer pool0
I0426 20:50:24.776374 31747 net.cpp:408] pool0 <- conv0
I0426 20:50:24.776378 31747 net.cpp:382] pool0 -> pool0
I0426 20:50:24.776412 31747 net.cpp:124] Setting up pool0
I0426 20:50:24.776417 31747 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:24.776418 31747 net.cpp:139] Memory required for data: 3194800
I0426 20:50:24.776422 31747 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:24.776429 31747 net.cpp:86] Creating Layer conv1
I0426 20:50:24.776432 31747 net.cpp:408] conv1 <- pool0
I0426 20:50:24.776437 31747 net.cpp:382] conv1 -> conv1
I0426 20:50:24.778686 31747 net.cpp:124] Setting up conv1
I0426 20:50:24.778697 31747 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:50:24.778702 31747 net.cpp:139] Memory required for data: 3450800
I0426 20:50:24.778709 31747 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:24.778717 31747 net.cpp:86] Creating Layer pool1
I0426 20:50:24.778734 31747 net.cpp:408] pool1 <- conv1
I0426 20:50:24.778739 31747 net.cpp:382] pool1 -> pool1
I0426 20:50:24.778776 31747 net.cpp:124] Setting up pool1
I0426 20:50:24.778781 31747 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:50:24.778784 31747 net.cpp:139] Memory required for data: 3514800
I0426 20:50:24.778786 31747 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:24.778791 31747 net.cpp:86] Creating Layer ip1
I0426 20:50:24.778795 31747 net.cpp:408] ip1 <- pool1
I0426 20:50:24.778798 31747 net.cpp:382] ip1 -> ip1
I0426 20:50:24.779013 31747 net.cpp:124] Setting up ip1
I0426 20:50:24.779021 31747 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:24.779031 31747 net.cpp:139] Memory required for data: 3554800
I0426 20:50:24.779037 31747 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:24.779042 31747 net.cpp:86] Creating Layer relu1
I0426 20:50:24.779045 31747 net.cpp:408] relu1 <- ip1
I0426 20:50:24.779049 31747 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:24.779217 31747 net.cpp:124] Setting up relu1
I0426 20:50:24.779227 31747 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:24.779229 31747 net.cpp:139] Memory required for data: 3594800
I0426 20:50:24.779232 31747 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:24.779239 31747 net.cpp:86] Creating Layer ip2
I0426 20:50:24.779242 31747 net.cpp:408] ip2 <- ip1
I0426 20:50:24.779247 31747 net.cpp:382] ip2 -> ip2
I0426 20:50:24.779341 31747 net.cpp:124] Setting up ip2
I0426 20:50:24.779348 31747 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:24.779351 31747 net.cpp:139] Memory required for data: 3598800
I0426 20:50:24.779356 31747 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:24.779361 31747 net.cpp:86] Creating Layer relu2
I0426 20:50:24.779363 31747 net.cpp:408] relu2 <- ip2
I0426 20:50:24.779367 31747 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:24.779507 31747 net.cpp:124] Setting up relu2
I0426 20:50:24.779516 31747 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:24.779520 31747 net.cpp:139] Memory required for data: 3602800
I0426 20:50:24.779522 31747 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:50:24.779533 31747 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:50:24.779536 31747 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:50:24.779546 31747 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:50:24.779562 31747 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:50:24.779595 31747 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:50:24.779600 31747 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:24.779603 31747 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:24.779606 31747 net.cpp:139] Memory required for data: 3610800
I0426 20:50:24.779609 31747 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:24.779613 31747 net.cpp:86] Creating Layer accuracy
I0426 20:50:24.779623 31747 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:50:24.779626 31747 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:24.779630 31747 net.cpp:382] accuracy -> accuracy
I0426 20:50:24.779641 31747 net.cpp:124] Setting up accuracy
I0426 20:50:24.779645 31747 net.cpp:131] Top shape: (1)
I0426 20:50:24.779647 31747 net.cpp:139] Memory required for data: 3610804
I0426 20:50:24.779650 31747 layer_factory.hpp:77] Creating layer loss
I0426 20:50:24.779654 31747 net.cpp:86] Creating Layer loss
I0426 20:50:24.779657 31747 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:50:24.779661 31747 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:24.779665 31747 net.cpp:382] loss -> loss
I0426 20:50:24.779670 31747 layer_factory.hpp:77] Creating layer loss
I0426 20:50:24.779875 31747 net.cpp:124] Setting up loss
I0426 20:50:24.779883 31747 net.cpp:131] Top shape: (1)
I0426 20:50:24.779886 31747 net.cpp:134]     with loss weight 1
I0426 20:50:24.779894 31747 net.cpp:139] Memory required for data: 3610808
I0426 20:50:24.779897 31747 net.cpp:200] loss needs backward computation.
I0426 20:50:24.779901 31747 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:24.779904 31747 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:50:24.779907 31747 net.cpp:200] relu2 needs backward computation.
I0426 20:50:24.779911 31747 net.cpp:200] ip2 needs backward computation.
I0426 20:50:24.779913 31747 net.cpp:200] relu1 needs backward computation.
I0426 20:50:24.779916 31747 net.cpp:200] ip1 needs backward computation.
I0426 20:50:24.779918 31747 net.cpp:200] pool1 needs backward computation.
I0426 20:50:24.779922 31747 net.cpp:200] conv1 needs backward computation.
I0426 20:50:24.779947 31747 net.cpp:200] pool0 needs backward computation.
I0426 20:50:24.779950 31747 net.cpp:200] conv0 needs backward computation.
I0426 20:50:24.779953 31747 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:24.779958 31747 net.cpp:202] mnist does not need backward computation.
I0426 20:50:24.779959 31747 net.cpp:244] This network produces output accuracy
I0426 20:50:24.779963 31747 net.cpp:244] This network produces output loss
I0426 20:50:24.779973 31747 net.cpp:257] Network initialization done.
I0426 20:50:24.780009 31747 solver.cpp:56] Solver scaffolding done.
I0426 20:50:24.780315 31747 caffe.cpp:248] Starting Optimization
I0426 20:50:24.780321 31747 solver.cpp:273] Solving LeNet
I0426 20:50:24.780330 31747 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:24.781241 31747 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:24.784003 31747 blocking_queue.cpp:49] Waiting for data
I0426 20:50:24.856079 31754 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:24.856778 31747 solver.cpp:398]     Test net output #0: accuracy = 0.0939
I0426 20:50:24.856827 31747 solver.cpp:398]     Test net output #1: loss = 2.34013 (* 1 = 2.34013 loss)
I0426 20:50:24.860613 31747 solver.cpp:219] Iteration 0 (-7.04532e-31 iter/s, 0.0802385s/100 iters), loss = 2.28808
I0426 20:50:24.860659 31747 solver.cpp:238]     Train net output #0: loss = 2.28808 (* 1 = 2.28808 loss)
I0426 20:50:24.860679 31747 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:24.944258 31747 solver.cpp:219] Iteration 100 (1196.28 iter/s, 0.0835922s/100 iters), loss = 0.842265
I0426 20:50:24.944294 31747 solver.cpp:238]     Train net output #0: loss = 0.842265 (* 1 = 0.842265 loss)
I0426 20:50:24.944304 31747 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:25.023557 31747 solver.cpp:219] Iteration 200 (1261.74 iter/s, 0.0792556s/100 iters), loss = 0.30447
I0426 20:50:25.023588 31747 solver.cpp:238]     Train net output #0: loss = 0.30447 (* 1 = 0.30447 loss)
I0426 20:50:25.023598 31747 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:25.101050 31747 solver.cpp:219] Iteration 300 (1291.1 iter/s, 0.0774533s/100 iters), loss = 0.223685
I0426 20:50:25.101080 31747 solver.cpp:238]     Train net output #0: loss = 0.223685 (* 1 = 0.223685 loss)
I0426 20:50:25.101089 31747 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:25.181685 31747 solver.cpp:219] Iteration 400 (1240.83 iter/s, 0.080591s/100 iters), loss = 0.104588
I0426 20:50:25.181738 31747 solver.cpp:238]     Train net output #0: loss = 0.104588 (* 1 = 0.104588 loss)
I0426 20:50:25.181753 31747 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:25.266223 31747 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:25.341573 31754 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:25.342283 31747 solver.cpp:398]     Test net output #0: accuracy = 0.9616
I0426 20:50:25.342327 31747 solver.cpp:398]     Test net output #1: loss = 0.123393 (* 1 = 0.123393 loss)
I0426 20:50:25.343461 31747 solver.cpp:219] Iteration 500 (618.395 iter/s, 0.161709s/100 iters), loss = 0.093429
I0426 20:50:25.343508 31747 solver.cpp:238]     Train net output #0: loss = 0.093429 (* 1 = 0.093429 loss)
I0426 20:50:25.343523 31747 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:25.433025 31747 solver.cpp:219] Iteration 600 (1117.17 iter/s, 0.0895119s/100 iters), loss = 0.109556
I0426 20:50:25.433063 31747 solver.cpp:238]     Train net output #0: loss = 0.109556 (* 1 = 0.109556 loss)
I0426 20:50:25.433074 31747 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:25.511759 31747 solver.cpp:219] Iteration 700 (1270.82 iter/s, 0.0786893s/100 iters), loss = 0.149437
I0426 20:50:25.511790 31747 solver.cpp:238]     Train net output #0: loss = 0.149437 (* 1 = 0.149437 loss)
I0426 20:50:25.511798 31747 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:25.588140 31747 solver.cpp:219] Iteration 800 (1309.91 iter/s, 0.0763412s/100 iters), loss = 0.279756
I0426 20:50:25.588170 31747 solver.cpp:238]     Train net output #0: loss = 0.279756 (* 1 = 0.279756 loss)
I0426 20:50:25.588178 31747 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:25.665320 31747 solver.cpp:219] Iteration 900 (1296.31 iter/s, 0.0771421s/100 iters), loss = 0.123525
I0426 20:50:25.665370 31747 solver.cpp:238]     Train net output #0: loss = 0.123525 (* 1 = 0.123525 loss)
I0426 20:50:25.665380 31747 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:25.691082 31753 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:25.741994 31747 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:25.742959 31747 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:25.743623 31747 solver.cpp:311] Iteration 1000, loss = 0.101323
I0426 20:50:25.743639 31747 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:25.819313 31754 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:25.819870 31747 solver.cpp:398]     Test net output #0: accuracy = 0.9757
I0426 20:50:25.819892 31747 solver.cpp:398]     Test net output #1: loss = 0.0769722 (* 1 = 0.0769722 loss)
I0426 20:50:25.819900 31747 solver.cpp:316] Optimization Done.
I0426 20:50:25.819905 31747 caffe.cpp:259] Optimization Done.
