I0426 20:55:08.879464   347 caffe.cpp:218] Using GPUs 0
I0426 20:55:08.917660   347 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:09.381774   347 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test174.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:09.381925   347 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test174.prototxt
I0426 20:55:09.382313   347 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:09.382344   347 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:09.382438   347 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:09.382520   347 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:09.382602   347 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:09.382622   347 net.cpp:86] Creating Layer mnist
I0426 20:55:09.382629   347 net.cpp:382] mnist -> data
I0426 20:55:09.382648   347 net.cpp:382] mnist -> label
I0426 20:55:09.383605   347 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:09.385710   347 net.cpp:124] Setting up mnist
I0426 20:55:09.385725   347 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:09.385740   347 net.cpp:131] Top shape: 64 (64)
I0426 20:55:09.385742   347 net.cpp:139] Memory required for data: 200960
I0426 20:55:09.385748   347 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:09.385762   347 net.cpp:86] Creating Layer conv0
I0426 20:55:09.385794   347 net.cpp:408] conv0 <- data
I0426 20:55:09.385804   347 net.cpp:382] conv0 -> conv0
I0426 20:55:09.615496   347 net.cpp:124] Setting up conv0
I0426 20:55:09.615538   347 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:09.615542   347 net.cpp:139] Memory required for data: 7573760
I0426 20:55:09.615557   347 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:09.615571   347 net.cpp:86] Creating Layer pool0
I0426 20:55:09.615574   347 net.cpp:408] pool0 <- conv0
I0426 20:55:09.615581   347 net.cpp:382] pool0 -> pool0
I0426 20:55:09.615628   347 net.cpp:124] Setting up pool0
I0426 20:55:09.615634   347 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:09.615638   347 net.cpp:139] Memory required for data: 9416960
I0426 20:55:09.615640   347 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:09.615650   347 net.cpp:86] Creating Layer conv1
I0426 20:55:09.615654   347 net.cpp:408] conv1 <- pool0
I0426 20:55:09.615660   347 net.cpp:382] conv1 -> conv1
I0426 20:55:09.617988   347 net.cpp:124] Setting up conv1
I0426 20:55:09.618002   347 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:09.618005   347 net.cpp:139] Memory required for data: 10236160
I0426 20:55:09.618016   347 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:09.618022   347 net.cpp:86] Creating Layer pool1
I0426 20:55:09.618026   347 net.cpp:408] pool1 <- conv1
I0426 20:55:09.618031   347 net.cpp:382] pool1 -> pool1
I0426 20:55:09.618082   347 net.cpp:124] Setting up pool1
I0426 20:55:09.618088   347 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:09.618089   347 net.cpp:139] Memory required for data: 10440960
I0426 20:55:09.618093   347 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:09.618101   347 net.cpp:86] Creating Layer ip1
I0426 20:55:09.618104   347 net.cpp:408] ip1 <- pool1
I0426 20:55:09.618109   347 net.cpp:382] ip1 -> ip1
I0426 20:55:09.619474   347 net.cpp:124] Setting up ip1
I0426 20:55:09.619487   347 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:09.619489   347 net.cpp:139] Memory required for data: 10466560
I0426 20:55:09.619498   347 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:09.619504   347 net.cpp:86] Creating Layer relu1
I0426 20:55:09.619508   347 net.cpp:408] relu1 <- ip1
I0426 20:55:09.619511   347 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:09.619700   347 net.cpp:124] Setting up relu1
I0426 20:55:09.619709   347 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:09.619712   347 net.cpp:139] Memory required for data: 10492160
I0426 20:55:09.619715   347 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:09.619724   347 net.cpp:86] Creating Layer ip2
I0426 20:55:09.619729   347 net.cpp:408] ip2 <- ip1
I0426 20:55:09.619734   347 net.cpp:382] ip2 -> ip2
I0426 20:55:09.620705   347 net.cpp:124] Setting up ip2
I0426 20:55:09.620717   347 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:09.620730   347 net.cpp:139] Memory required for data: 10517760
I0426 20:55:09.620736   347 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:09.620743   347 net.cpp:86] Creating Layer relu2
I0426 20:55:09.620762   347 net.cpp:408] relu2 <- ip2
I0426 20:55:09.620766   347 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:09.621603   347 net.cpp:124] Setting up relu2
I0426 20:55:09.621615   347 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:09.621619   347 net.cpp:139] Memory required for data: 10543360
I0426 20:55:09.621623   347 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:09.621628   347 net.cpp:86] Creating Layer ip3
I0426 20:55:09.621632   347 net.cpp:408] ip3 <- ip2
I0426 20:55:09.621639   347 net.cpp:382] ip3 -> ip3
I0426 20:55:09.621759   347 net.cpp:124] Setting up ip3
I0426 20:55:09.621767   347 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:09.621770   347 net.cpp:139] Memory required for data: 10545920
I0426 20:55:09.621778   347 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:09.621783   347 net.cpp:86] Creating Layer relu3
I0426 20:55:09.621788   347 net.cpp:408] relu3 <- ip3
I0426 20:55:09.621791   347 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:09.621984   347 net.cpp:124] Setting up relu3
I0426 20:55:09.621992   347 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:09.621995   347 net.cpp:139] Memory required for data: 10548480
I0426 20:55:09.621999   347 layer_factory.hpp:77] Creating layer loss
I0426 20:55:09.622004   347 net.cpp:86] Creating Layer loss
I0426 20:55:09.622009   347 net.cpp:408] loss <- ip3
I0426 20:55:09.622011   347 net.cpp:408] loss <- label
I0426 20:55:09.622016   347 net.cpp:382] loss -> loss
I0426 20:55:09.622035   347 layer_factory.hpp:77] Creating layer loss
I0426 20:55:09.622299   347 net.cpp:124] Setting up loss
I0426 20:55:09.622308   347 net.cpp:131] Top shape: (1)
I0426 20:55:09.622311   347 net.cpp:134]     with loss weight 1
I0426 20:55:09.622324   347 net.cpp:139] Memory required for data: 10548484
I0426 20:55:09.622328   347 net.cpp:200] loss needs backward computation.
I0426 20:55:09.622331   347 net.cpp:200] relu3 needs backward computation.
I0426 20:55:09.622334   347 net.cpp:200] ip3 needs backward computation.
I0426 20:55:09.622337   347 net.cpp:200] relu2 needs backward computation.
I0426 20:55:09.622339   347 net.cpp:200] ip2 needs backward computation.
I0426 20:55:09.622342   347 net.cpp:200] relu1 needs backward computation.
I0426 20:55:09.622345   347 net.cpp:200] ip1 needs backward computation.
I0426 20:55:09.622349   347 net.cpp:200] pool1 needs backward computation.
I0426 20:55:09.622350   347 net.cpp:200] conv1 needs backward computation.
I0426 20:55:09.622354   347 net.cpp:200] pool0 needs backward computation.
I0426 20:55:09.622356   347 net.cpp:200] conv0 needs backward computation.
I0426 20:55:09.622359   347 net.cpp:202] mnist does not need backward computation.
I0426 20:55:09.622362   347 net.cpp:244] This network produces output loss
I0426 20:55:09.622372   347 net.cpp:257] Network initialization done.
I0426 20:55:09.622684   347 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test174.prototxt
I0426 20:55:09.622709   347 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:09.622802   347 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:09.622882   347 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:09.622925   347 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:09.622938   347 net.cpp:86] Creating Layer mnist
I0426 20:55:09.622943   347 net.cpp:382] mnist -> data
I0426 20:55:09.622951   347 net.cpp:382] mnist -> label
I0426 20:55:09.623054   347 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:09.624215   347 net.cpp:124] Setting up mnist
I0426 20:55:09.624228   347 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:09.624259   347 net.cpp:131] Top shape: 100 (100)
I0426 20:55:09.624264   347 net.cpp:139] Memory required for data: 314000
I0426 20:55:09.624266   347 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:09.624291   347 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:09.624295   347 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:09.624300   347 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:09.624306   347 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:09.624413   347 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:09.624421   347 net.cpp:131] Top shape: 100 (100)
I0426 20:55:09.624424   347 net.cpp:131] Top shape: 100 (100)
I0426 20:55:09.624428   347 net.cpp:139] Memory required for data: 314800
I0426 20:55:09.624430   347 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:09.624439   347 net.cpp:86] Creating Layer conv0
I0426 20:55:09.624442   347 net.cpp:408] conv0 <- data
I0426 20:55:09.624449   347 net.cpp:382] conv0 -> conv0
I0426 20:55:09.626161   347 net.cpp:124] Setting up conv0
I0426 20:55:09.626175   347 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:09.626178   347 net.cpp:139] Memory required for data: 11834800
I0426 20:55:09.626186   347 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:09.626194   347 net.cpp:86] Creating Layer pool0
I0426 20:55:09.626197   347 net.cpp:408] pool0 <- conv0
I0426 20:55:09.626217   347 net.cpp:382] pool0 -> pool0
I0426 20:55:09.626253   347 net.cpp:124] Setting up pool0
I0426 20:55:09.626260   347 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:09.626263   347 net.cpp:139] Memory required for data: 14714800
I0426 20:55:09.626266   347 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:09.626291   347 net.cpp:86] Creating Layer conv1
I0426 20:55:09.626293   347 net.cpp:408] conv1 <- pool0
I0426 20:55:09.626299   347 net.cpp:382] conv1 -> conv1
I0426 20:55:09.628202   347 net.cpp:124] Setting up conv1
I0426 20:55:09.628216   347 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:09.628219   347 net.cpp:139] Memory required for data: 15994800
I0426 20:55:09.628227   347 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:09.628233   347 net.cpp:86] Creating Layer pool1
I0426 20:55:09.628237   347 net.cpp:408] pool1 <- conv1
I0426 20:55:09.628258   347 net.cpp:382] pool1 -> pool1
I0426 20:55:09.628293   347 net.cpp:124] Setting up pool1
I0426 20:55:09.628300   347 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:09.628304   347 net.cpp:139] Memory required for data: 16314800
I0426 20:55:09.628306   347 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:09.628314   347 net.cpp:86] Creating Layer ip1
I0426 20:55:09.628316   347 net.cpp:408] ip1 <- pool1
I0426 20:55:09.628329   347 net.cpp:382] ip1 -> ip1
I0426 20:55:09.628928   347 net.cpp:124] Setting up ip1
I0426 20:55:09.628938   347 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:09.628967   347 net.cpp:139] Memory required for data: 16354800
I0426 20:55:09.628974   347 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:09.628979   347 net.cpp:86] Creating Layer relu1
I0426 20:55:09.628983   347 net.cpp:408] relu1 <- ip1
I0426 20:55:09.628988   347 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:09.629196   347 net.cpp:124] Setting up relu1
I0426 20:55:09.629205   347 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:09.629209   347 net.cpp:139] Memory required for data: 16394800
I0426 20:55:09.629212   347 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:09.629218   347 net.cpp:86] Creating Layer ip2
I0426 20:55:09.629221   347 net.cpp:408] ip2 <- ip1
I0426 20:55:09.629227   347 net.cpp:382] ip2 -> ip2
I0426 20:55:09.629379   347 net.cpp:124] Setting up ip2
I0426 20:55:09.629387   347 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:09.629390   347 net.cpp:139] Memory required for data: 16434800
I0426 20:55:09.629395   347 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:09.629400   347 net.cpp:86] Creating Layer relu2
I0426 20:55:09.629403   347 net.cpp:408] relu2 <- ip2
I0426 20:55:09.629408   347 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:09.629575   347 net.cpp:124] Setting up relu2
I0426 20:55:09.629582   347 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:09.629585   347 net.cpp:139] Memory required for data: 16474800
I0426 20:55:09.629588   347 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:09.629593   347 net.cpp:86] Creating Layer ip3
I0426 20:55:09.629597   347 net.cpp:408] ip3 <- ip2
I0426 20:55:09.629602   347 net.cpp:382] ip3 -> ip3
I0426 20:55:09.629709   347 net.cpp:124] Setting up ip3
I0426 20:55:09.629716   347 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:09.629720   347 net.cpp:139] Memory required for data: 16478800
I0426 20:55:09.629727   347 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:09.629732   347 net.cpp:86] Creating Layer relu3
I0426 20:55:09.629735   347 net.cpp:408] relu3 <- ip3
I0426 20:55:09.629747   347 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:09.630585   347 net.cpp:124] Setting up relu3
I0426 20:55:09.630597   347 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:09.630600   347 net.cpp:139] Memory required for data: 16482800
I0426 20:55:09.630604   347 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:55:09.630609   347 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:55:09.630612   347 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:55:09.630617   347 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:55:09.630638   347 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:55:09.630722   347 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:55:09.630728   347 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:09.630733   347 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:09.630735   347 net.cpp:139] Memory required for data: 16490800
I0426 20:55:09.630738   347 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:09.630743   347 net.cpp:86] Creating Layer accuracy
I0426 20:55:09.630748   347 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:55:09.630753   347 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:09.630758   347 net.cpp:382] accuracy -> accuracy
I0426 20:55:09.630764   347 net.cpp:124] Setting up accuracy
I0426 20:55:09.630769   347 net.cpp:131] Top shape: (1)
I0426 20:55:09.630771   347 net.cpp:139] Memory required for data: 16490804
I0426 20:55:09.630774   347 layer_factory.hpp:77] Creating layer loss
I0426 20:55:09.630779   347 net.cpp:86] Creating Layer loss
I0426 20:55:09.630781   347 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:55:09.630784   347 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:09.630789   347 net.cpp:382] loss -> loss
I0426 20:55:09.630795   347 layer_factory.hpp:77] Creating layer loss
I0426 20:55:09.631045   347 net.cpp:124] Setting up loss
I0426 20:55:09.631054   347 net.cpp:131] Top shape: (1)
I0426 20:55:09.631058   347 net.cpp:134]     with loss weight 1
I0426 20:55:09.631073   347 net.cpp:139] Memory required for data: 16490808
I0426 20:55:09.631078   347 net.cpp:200] loss needs backward computation.
I0426 20:55:09.631080   347 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:09.631086   347 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:55:09.631089   347 net.cpp:200] relu3 needs backward computation.
I0426 20:55:09.631093   347 net.cpp:200] ip3 needs backward computation.
I0426 20:55:09.631095   347 net.cpp:200] relu2 needs backward computation.
I0426 20:55:09.631098   347 net.cpp:200] ip2 needs backward computation.
I0426 20:55:09.631106   347 net.cpp:200] relu1 needs backward computation.
I0426 20:55:09.631109   347 net.cpp:200] ip1 needs backward computation.
I0426 20:55:09.631117   347 net.cpp:200] pool1 needs backward computation.
I0426 20:55:09.631120   347 net.cpp:200] conv1 needs backward computation.
I0426 20:55:09.631124   347 net.cpp:200] pool0 needs backward computation.
I0426 20:55:09.631126   347 net.cpp:200] conv0 needs backward computation.
I0426 20:55:09.631134   347 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:09.631139   347 net.cpp:202] mnist does not need backward computation.
I0426 20:55:09.631141   347 net.cpp:244] This network produces output accuracy
I0426 20:55:09.631145   347 net.cpp:244] This network produces output loss
I0426 20:55:09.631156   347 net.cpp:257] Network initialization done.
I0426 20:55:09.631196   347 solver.cpp:56] Solver scaffolding done.
I0426 20:55:09.631531   347 caffe.cpp:248] Starting Optimization
I0426 20:55:09.631537   347 solver.cpp:273] Solving LeNet
I0426 20:55:09.631539   347 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:09.632483   347 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:09.640444   347 blocking_queue.cpp:49] Waiting for data
I0426 20:55:09.715775   354 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:09.717025   347 solver.cpp:398]     Test net output #0: accuracy = 0.1102
I0426 20:55:09.717044   347 solver.cpp:398]     Test net output #1: loss = 2.30578 (* 1 = 2.30578 loss)
I0426 20:55:09.721701   347 solver.cpp:219] Iteration 0 (0 iter/s, 0.0901191s/100 iters), loss = 2.3278
I0426 20:55:09.721740   347 solver.cpp:238]     Train net output #0: loss = 2.3278 (* 1 = 2.3278 loss)
I0426 20:55:09.721750   347 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:09.890044   347 solver.cpp:219] Iteration 100 (594.168 iter/s, 0.168303s/100 iters), loss = 0.722042
I0426 20:55:09.890085   347 solver.cpp:238]     Train net output #0: loss = 0.722042 (* 1 = 0.722042 loss)
I0426 20:55:09.890091   347 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:10.054962   347 solver.cpp:219] Iteration 200 (606.504 iter/s, 0.164879s/100 iters), loss = 0.659146
I0426 20:55:10.055002   347 solver.cpp:238]     Train net output #0: loss = 0.659146 (* 1 = 0.659146 loss)
I0426 20:55:10.055007   347 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:10.220047   347 solver.cpp:219] Iteration 300 (605.94 iter/s, 0.165033s/100 iters), loss = 0.47436
I0426 20:55:10.220087   347 solver.cpp:238]     Train net output #0: loss = 0.47436 (* 1 = 0.47436 loss)
I0426 20:55:10.220093   347 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:10.385355   347 solver.cpp:219] Iteration 400 (605.072 iter/s, 0.165269s/100 iters), loss = 0.412756
I0426 20:55:10.385395   347 solver.cpp:238]     Train net output #0: loss = 0.412756 (* 1 = 0.412756 loss)
I0426 20:55:10.385401   347 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:10.550566   347 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:10.633111   354 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:10.634027   347 solver.cpp:398]     Test net output #0: accuracy = 0.768
I0426 20:55:10.634049   347 solver.cpp:398]     Test net output #1: loss = 0.569207 (* 1 = 0.569207 loss)
I0426 20:55:10.635699   347 solver.cpp:219] Iteration 500 (399.541 iter/s, 0.250287s/100 iters), loss = 0.5724
I0426 20:55:10.635777   347 solver.cpp:238]     Train net output #0: loss = 0.5724 (* 1 = 0.5724 loss)
I0426 20:55:10.635785   347 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:10.803694   347 solver.cpp:219] Iteration 600 (595.518 iter/s, 0.167921s/100 iters), loss = 0.756598
I0426 20:55:10.803735   347 solver.cpp:238]     Train net output #0: loss = 0.756598 (* 1 = 0.756598 loss)
I0426 20:55:10.803742   347 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:10.971437   347 solver.cpp:219] Iteration 700 (596.29 iter/s, 0.167704s/100 iters), loss = 0.510204
I0426 20:55:10.971495   347 solver.cpp:238]     Train net output #0: loss = 0.510204 (* 1 = 0.510204 loss)
I0426 20:55:10.971501   347 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:11.138916   347 solver.cpp:219] Iteration 800 (597.29 iter/s, 0.167423s/100 iters), loss = 0.581744
I0426 20:55:11.138957   347 solver.cpp:238]     Train net output #0: loss = 0.581744 (* 1 = 0.581744 loss)
I0426 20:55:11.138963   347 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:11.307924   347 solver.cpp:219] Iteration 900 (591.824 iter/s, 0.168969s/100 iters), loss = 0.473191
I0426 20:55:11.307962   347 solver.cpp:238]     Train net output #0: loss = 0.473191 (* 1 = 0.473191 loss)
I0426 20:55:11.307970   347 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:11.364421   353 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:11.474866   347 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:11.478106   347 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:11.479939   347 solver.cpp:311] Iteration 1000, loss = 0.496914
I0426 20:55:11.479955   347 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:11.562453   354 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:11.563730   347 solver.cpp:398]     Test net output #0: accuracy = 0.777
I0426 20:55:11.563750   347 solver.cpp:398]     Test net output #1: loss = 0.535525 (* 1 = 0.535525 loss)
I0426 20:55:11.563771   347 solver.cpp:316] Optimization Done.
I0426 20:55:11.563774   347 caffe.cpp:259] Optimization Done.
