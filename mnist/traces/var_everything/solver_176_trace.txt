I0426 20:55:14.992585   363 caffe.cpp:218] Using GPUs 0
I0426 20:55:15.030639   363 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:15.566784   363 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test176.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:15.566926   363 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test176.prototxt
I0426 20:55:15.567322   363 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:15.567339   363 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:15.567436   363 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:15.567512   363 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:15.567610   363 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:15.567634   363 net.cpp:86] Creating Layer mnist
I0426 20:55:15.567643   363 net.cpp:382] mnist -> data
I0426 20:55:15.567667   363 net.cpp:382] mnist -> label
I0426 20:55:15.568759   363 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:15.571297   363 net.cpp:124] Setting up mnist
I0426 20:55:15.571315   363 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:15.571321   363 net.cpp:131] Top shape: 64 (64)
I0426 20:55:15.571324   363 net.cpp:139] Memory required for data: 200960
I0426 20:55:15.571331   363 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:15.571346   363 net.cpp:86] Creating Layer conv0
I0426 20:55:15.571367   363 net.cpp:408] conv0 <- data
I0426 20:55:15.571379   363 net.cpp:382] conv0 -> conv0
I0426 20:55:15.867041   363 net.cpp:124] Setting up conv0
I0426 20:55:15.867074   363 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:15.867080   363 net.cpp:139] Memory required for data: 7573760
I0426 20:55:15.867099   363 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:15.867115   363 net.cpp:86] Creating Layer pool0
I0426 20:55:15.867118   363 net.cpp:408] pool0 <- conv0
I0426 20:55:15.867125   363 net.cpp:382] pool0 -> pool0
I0426 20:55:15.867182   363 net.cpp:124] Setting up pool0
I0426 20:55:15.867190   363 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:15.867194   363 net.cpp:139] Memory required for data: 9416960
I0426 20:55:15.867198   363 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:15.867211   363 net.cpp:86] Creating Layer conv1
I0426 20:55:15.867218   363 net.cpp:408] conv1 <- pool0
I0426 20:55:15.867224   363 net.cpp:382] conv1 -> conv1
I0426 20:55:15.870007   363 net.cpp:124] Setting up conv1
I0426 20:55:15.870025   363 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:15.870029   363 net.cpp:139] Memory required for data: 10236160
I0426 20:55:15.870040   363 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:15.870049   363 net.cpp:86] Creating Layer pool1
I0426 20:55:15.870054   363 net.cpp:408] pool1 <- conv1
I0426 20:55:15.870059   363 net.cpp:382] pool1 -> pool1
I0426 20:55:15.870102   363 net.cpp:124] Setting up pool1
I0426 20:55:15.870111   363 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:15.870115   363 net.cpp:139] Memory required for data: 10440960
I0426 20:55:15.870118   363 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:15.870126   363 net.cpp:86] Creating Layer ip1
I0426 20:55:15.870133   363 net.cpp:408] ip1 <- pool1
I0426 20:55:15.870139   363 net.cpp:382] ip1 -> ip1
I0426 20:55:15.871750   363 net.cpp:124] Setting up ip1
I0426 20:55:15.871765   363 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:15.871770   363 net.cpp:139] Memory required for data: 10466560
I0426 20:55:15.871779   363 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:15.871788   363 net.cpp:86] Creating Layer relu1
I0426 20:55:15.871791   363 net.cpp:408] relu1 <- ip1
I0426 20:55:15.871798   363 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:15.871999   363 net.cpp:124] Setting up relu1
I0426 20:55:15.872009   363 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:15.872014   363 net.cpp:139] Memory required for data: 10492160
I0426 20:55:15.872017   363 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:15.872026   363 net.cpp:86] Creating Layer ip2
I0426 20:55:15.872030   363 net.cpp:408] ip2 <- ip1
I0426 20:55:15.872036   363 net.cpp:382] ip2 -> ip2
I0426 20:55:15.872362   363 net.cpp:124] Setting up ip2
I0426 20:55:15.872370   363 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:15.872375   363 net.cpp:139] Memory required for data: 10568960
I0426 20:55:15.872381   363 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:15.872388   363 net.cpp:86] Creating Layer relu2
I0426 20:55:15.872391   363 net.cpp:408] relu2 <- ip2
I0426 20:55:15.872396   363 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:15.873335   363 net.cpp:124] Setting up relu2
I0426 20:55:15.873350   363 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:15.873354   363 net.cpp:139] Memory required for data: 10645760
I0426 20:55:15.873359   363 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:15.873368   363 net.cpp:86] Creating Layer ip3
I0426 20:55:15.873371   363 net.cpp:408] ip3 <- ip2
I0426 20:55:15.873378   363 net.cpp:382] ip3 -> ip3
I0426 20:55:15.873520   363 net.cpp:124] Setting up ip3
I0426 20:55:15.873529   363 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:15.873533   363 net.cpp:139] Memory required for data: 10648320
I0426 20:55:15.873543   363 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:15.873550   363 net.cpp:86] Creating Layer relu3
I0426 20:55:15.873554   363 net.cpp:408] relu3 <- ip3
I0426 20:55:15.873559   363 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:15.873757   363 net.cpp:124] Setting up relu3
I0426 20:55:15.873769   363 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:15.873772   363 net.cpp:139] Memory required for data: 10650880
I0426 20:55:15.873776   363 layer_factory.hpp:77] Creating layer loss
I0426 20:55:15.873783   363 net.cpp:86] Creating Layer loss
I0426 20:55:15.873787   363 net.cpp:408] loss <- ip3
I0426 20:55:15.873792   363 net.cpp:408] loss <- label
I0426 20:55:15.873800   363 net.cpp:382] loss -> loss
I0426 20:55:15.873821   363 layer_factory.hpp:77] Creating layer loss
I0426 20:55:15.874088   363 net.cpp:124] Setting up loss
I0426 20:55:15.874097   363 net.cpp:131] Top shape: (1)
I0426 20:55:15.874101   363 net.cpp:134]     with loss weight 1
I0426 20:55:15.874116   363 net.cpp:139] Memory required for data: 10650884
I0426 20:55:15.874121   363 net.cpp:200] loss needs backward computation.
I0426 20:55:15.874126   363 net.cpp:200] relu3 needs backward computation.
I0426 20:55:15.874130   363 net.cpp:200] ip3 needs backward computation.
I0426 20:55:15.874133   363 net.cpp:200] relu2 needs backward computation.
I0426 20:55:15.874137   363 net.cpp:200] ip2 needs backward computation.
I0426 20:55:15.874141   363 net.cpp:200] relu1 needs backward computation.
I0426 20:55:15.874145   363 net.cpp:200] ip1 needs backward computation.
I0426 20:55:15.874148   363 net.cpp:200] pool1 needs backward computation.
I0426 20:55:15.874152   363 net.cpp:200] conv1 needs backward computation.
I0426 20:55:15.874156   363 net.cpp:200] pool0 needs backward computation.
I0426 20:55:15.874161   363 net.cpp:200] conv0 needs backward computation.
I0426 20:55:15.874166   363 net.cpp:202] mnist does not need backward computation.
I0426 20:55:15.874168   363 net.cpp:244] This network produces output loss
I0426 20:55:15.874181   363 net.cpp:257] Network initialization done.
I0426 20:55:15.874565   363 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test176.prototxt
I0426 20:55:15.874598   363 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:15.874725   363 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:15.874820   363 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:15.874874   363 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:15.874891   363 net.cpp:86] Creating Layer mnist
I0426 20:55:15.874898   363 net.cpp:382] mnist -> data
I0426 20:55:15.874907   363 net.cpp:382] mnist -> label
I0426 20:55:15.875008   363 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:15.876545   363 net.cpp:124] Setting up mnist
I0426 20:55:15.876560   363 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:15.876566   363 net.cpp:131] Top shape: 100 (100)
I0426 20:55:15.876570   363 net.cpp:139] Memory required for data: 314000
I0426 20:55:15.876574   363 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:15.876587   363 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:15.876591   363 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:15.876597   363 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:15.876605   363 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:15.876659   363 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:15.876667   363 net.cpp:131] Top shape: 100 (100)
I0426 20:55:15.876672   363 net.cpp:131] Top shape: 100 (100)
I0426 20:55:15.876675   363 net.cpp:139] Memory required for data: 314800
I0426 20:55:15.876679   363 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:15.876689   363 net.cpp:86] Creating Layer conv0
I0426 20:55:15.876693   363 net.cpp:408] conv0 <- data
I0426 20:55:15.876698   363 net.cpp:382] conv0 -> conv0
I0426 20:55:15.878685   363 net.cpp:124] Setting up conv0
I0426 20:55:15.878702   363 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:15.878707   363 net.cpp:139] Memory required for data: 11834800
I0426 20:55:15.878718   363 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:15.878726   363 net.cpp:86] Creating Layer pool0
I0426 20:55:15.878731   363 net.cpp:408] pool0 <- conv0
I0426 20:55:15.878737   363 net.cpp:382] pool0 -> pool0
I0426 20:55:15.878779   363 net.cpp:124] Setting up pool0
I0426 20:55:15.878787   363 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:15.878792   363 net.cpp:139] Memory required for data: 14714800
I0426 20:55:15.878795   363 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:15.878805   363 net.cpp:86] Creating Layer conv1
I0426 20:55:15.878809   363 net.cpp:408] conv1 <- pool0
I0426 20:55:15.878815   363 net.cpp:382] conv1 -> conv1
I0426 20:55:15.881062   363 net.cpp:124] Setting up conv1
I0426 20:55:15.881078   363 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:15.881083   363 net.cpp:139] Memory required for data: 15994800
I0426 20:55:15.881093   363 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:15.881100   363 net.cpp:86] Creating Layer pool1
I0426 20:55:15.881105   363 net.cpp:408] pool1 <- conv1
I0426 20:55:15.881112   363 net.cpp:382] pool1 -> pool1
I0426 20:55:15.881155   363 net.cpp:124] Setting up pool1
I0426 20:55:15.881162   363 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:15.881166   363 net.cpp:139] Memory required for data: 16314800
I0426 20:55:15.881170   363 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:15.881177   363 net.cpp:86] Creating Layer ip1
I0426 20:55:15.881181   363 net.cpp:408] ip1 <- pool1
I0426 20:55:15.881187   363 net.cpp:382] ip1 -> ip1
I0426 20:55:15.881868   363 net.cpp:124] Setting up ip1
I0426 20:55:15.881891   363 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:15.881896   363 net.cpp:139] Memory required for data: 16354800
I0426 20:55:15.881904   363 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:15.881911   363 net.cpp:86] Creating Layer relu1
I0426 20:55:15.881914   363 net.cpp:408] relu1 <- ip1
I0426 20:55:15.881919   363 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:15.882200   363 net.cpp:124] Setting up relu1
I0426 20:55:15.882211   363 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:15.882215   363 net.cpp:139] Memory required for data: 16394800
I0426 20:55:15.882220   363 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:15.882228   363 net.cpp:86] Creating Layer ip2
I0426 20:55:15.882236   363 net.cpp:408] ip2 <- ip1
I0426 20:55:15.882243   363 net.cpp:382] ip2 -> ip2
I0426 20:55:15.882567   363 net.cpp:124] Setting up ip2
I0426 20:55:15.882575   363 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:15.882580   363 net.cpp:139] Memory required for data: 16514800
I0426 20:55:15.882587   363 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:15.882592   363 net.cpp:86] Creating Layer relu2
I0426 20:55:15.882596   363 net.cpp:408] relu2 <- ip2
I0426 20:55:15.882601   363 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:15.882777   363 net.cpp:124] Setting up relu2
I0426 20:55:15.882787   363 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:15.882791   363 net.cpp:139] Memory required for data: 16634800
I0426 20:55:15.882796   363 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:15.882802   363 net.cpp:86] Creating Layer ip3
I0426 20:55:15.882807   363 net.cpp:408] ip3 <- ip2
I0426 20:55:15.882812   363 net.cpp:382] ip3 -> ip3
I0426 20:55:15.882946   363 net.cpp:124] Setting up ip3
I0426 20:55:15.882956   363 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:15.882959   363 net.cpp:139] Memory required for data: 16638800
I0426 20:55:15.882968   363 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:15.882977   363 net.cpp:86] Creating Layer relu3
I0426 20:55:15.882979   363 net.cpp:408] relu3 <- ip3
I0426 20:55:15.882984   363 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:15.884019   363 net.cpp:124] Setting up relu3
I0426 20:55:15.884033   363 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:15.884038   363 net.cpp:139] Memory required for data: 16642800
I0426 20:55:15.884042   363 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:55:15.884049   363 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:55:15.884054   363 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:55:15.884060   363 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:55:15.884068   363 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:55:15.884114   363 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:55:15.884120   363 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:15.884125   363 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:15.884129   363 net.cpp:139] Memory required for data: 16650800
I0426 20:55:15.884132   363 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:15.884138   363 net.cpp:86] Creating Layer accuracy
I0426 20:55:15.884141   363 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:55:15.884147   363 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:15.884152   363 net.cpp:382] accuracy -> accuracy
I0426 20:55:15.884160   363 net.cpp:124] Setting up accuracy
I0426 20:55:15.884169   363 net.cpp:131] Top shape: (1)
I0426 20:55:15.884172   363 net.cpp:139] Memory required for data: 16650804
I0426 20:55:15.884176   363 layer_factory.hpp:77] Creating layer loss
I0426 20:55:15.884181   363 net.cpp:86] Creating Layer loss
I0426 20:55:15.884192   363 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:55:15.884197   363 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:15.884202   363 net.cpp:382] loss -> loss
I0426 20:55:15.884209   363 layer_factory.hpp:77] Creating layer loss
I0426 20:55:15.884474   363 net.cpp:124] Setting up loss
I0426 20:55:15.884485   363 net.cpp:131] Top shape: (1)
I0426 20:55:15.884490   363 net.cpp:134]     with loss weight 1
I0426 20:55:15.884508   363 net.cpp:139] Memory required for data: 16650808
I0426 20:55:15.884515   363 net.cpp:200] loss needs backward computation.
I0426 20:55:15.884519   363 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:15.884524   363 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:55:15.884531   363 net.cpp:200] relu3 needs backward computation.
I0426 20:55:15.884536   363 net.cpp:200] ip3 needs backward computation.
I0426 20:55:15.884538   363 net.cpp:200] relu2 needs backward computation.
I0426 20:55:15.884542   363 net.cpp:200] ip2 needs backward computation.
I0426 20:55:15.884546   363 net.cpp:200] relu1 needs backward computation.
I0426 20:55:15.884551   363 net.cpp:200] ip1 needs backward computation.
I0426 20:55:15.884554   363 net.cpp:200] pool1 needs backward computation.
I0426 20:55:15.884558   363 net.cpp:200] conv1 needs backward computation.
I0426 20:55:15.884562   363 net.cpp:200] pool0 needs backward computation.
I0426 20:55:15.884565   363 net.cpp:200] conv0 needs backward computation.
I0426 20:55:15.884570   363 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:15.884575   363 net.cpp:202] mnist does not need backward computation.
I0426 20:55:15.884578   363 net.cpp:244] This network produces output accuracy
I0426 20:55:15.884589   363 net.cpp:244] This network produces output loss
I0426 20:55:15.884613   363 net.cpp:257] Network initialization done.
I0426 20:55:15.884663   363 solver.cpp:56] Solver scaffolding done.
I0426 20:55:15.885092   363 caffe.cpp:248] Starting Optimization
I0426 20:55:15.885100   363 solver.cpp:273] Solving LeNet
I0426 20:55:15.885103   363 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:15.886083   363 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:15.898187   363 blocking_queue.cpp:49] Waiting for data
I0426 20:55:15.971194   370 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:15.972482   363 solver.cpp:398]     Test net output #0: accuracy = 0.1704
I0426 20:55:15.972506   363 solver.cpp:398]     Test net output #1: loss = 2.28486 (* 1 = 2.28486 loss)
I0426 20:55:15.978642   363 solver.cpp:219] Iteration 0 (-9.74695e-31 iter/s, 0.0935076s/100 iters), loss = 2.28987
I0426 20:55:15.978672   363 solver.cpp:238]     Train net output #0: loss = 2.28987 (* 1 = 2.28987 loss)
I0426 20:55:15.978687   363 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:16.150063   363 solver.cpp:219] Iteration 100 (583.507 iter/s, 0.171378s/100 iters), loss = 0.524306
I0426 20:55:16.150091   363 solver.cpp:238]     Train net output #0: loss = 0.524306 (* 1 = 0.524306 loss)
I0426 20:55:16.150099   363 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:16.321550   363 solver.cpp:219] Iteration 200 (583.28 iter/s, 0.171444s/100 iters), loss = 0.680063
I0426 20:55:16.321591   363 solver.cpp:238]     Train net output #0: loss = 0.680063 (* 1 = 0.680063 loss)
I0426 20:55:16.321597   363 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:16.492285   363 solver.cpp:219] Iteration 300 (585.894 iter/s, 0.170679s/100 iters), loss = 0.742639
I0426 20:55:16.492326   363 solver.cpp:238]     Train net output #0: loss = 0.742639 (* 1 = 0.742639 loss)
I0426 20:55:16.492333   363 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:16.665264   363 solver.cpp:219] Iteration 400 (578.29 iter/s, 0.172924s/100 iters), loss = 0.630371
I0426 20:55:16.665293   363 solver.cpp:238]     Train net output #0: loss = 0.630371 (* 1 = 0.630371 loss)
I0426 20:55:16.665300   363 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:16.830721   363 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:16.910650   370 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:16.911744   363 solver.cpp:398]     Test net output #0: accuracy = 0.8729
I0426 20:55:16.911777   363 solver.cpp:398]     Test net output #1: loss = 0.542237 (* 1 = 0.542237 loss)
I0426 20:55:16.913465   363 solver.cpp:219] Iteration 500 (402.975 iter/s, 0.248154s/100 iters), loss = 0.427973
I0426 20:55:16.913518   363 solver.cpp:238]     Train net output #0: loss = 0.427973 (* 1 = 0.427973 loss)
I0426 20:55:16.913525   363 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:17.088605   363 solver.cpp:219] Iteration 600 (571.143 iter/s, 0.175088s/100 iters), loss = 0.3836
I0426 20:55:17.088630   363 solver.cpp:238]     Train net output #0: loss = 0.3836 (* 1 = 0.3836 loss)
I0426 20:55:17.088637   363 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:17.257061   363 solver.cpp:219] Iteration 700 (593.771 iter/s, 0.168415s/100 iters), loss = 0.596656
I0426 20:55:17.257102   363 solver.cpp:238]     Train net output #0: loss = 0.596656 (* 1 = 0.596656 loss)
I0426 20:55:17.257108   363 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:17.426476   363 solver.cpp:219] Iteration 800 (590.457 iter/s, 0.16936s/100 iters), loss = 0.456232
I0426 20:55:17.426517   363 solver.cpp:238]     Train net output #0: loss = 0.456232 (* 1 = 0.456232 loss)
I0426 20:55:17.426524   363 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:17.596596   363 solver.cpp:219] Iteration 900 (588.011 iter/s, 0.170065s/100 iters), loss = 0.316307
I0426 20:55:17.596627   363 solver.cpp:238]     Train net output #0: loss = 0.316307 (* 1 = 0.316307 loss)
I0426 20:55:17.596634   363 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:17.653127   369 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:17.766877   363 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:17.770598   363 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:17.772912   363 solver.cpp:311] Iteration 1000, loss = 0.366474
I0426 20:55:17.772933   363 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:17.854871   370 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:17.856235   363 solver.cpp:398]     Test net output #0: accuracy = 0.9669
I0426 20:55:17.856256   363 solver.cpp:398]     Test net output #1: loss = 0.296757 (* 1 = 0.296757 loss)
I0426 20:55:17.856261   363 solver.cpp:316] Optimization Done.
I0426 20:55:17.856264   363 caffe.cpp:259] Optimization Done.
