I0426 20:50:56.370930 31871 caffe.cpp:218] Using GPUs 0
I0426 20:50:56.400328 31871 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:56.856911 31871 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test74.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:56.857054 31871 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test74.prototxt
I0426 20:50:56.857379 31871 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:56.857393 31871 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:56.857462 31871 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:56.857518 31871 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:56.857614 31871 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:56.857640 31871 net.cpp:86] Creating Layer mnist
I0426 20:50:56.857646 31871 net.cpp:382] mnist -> data
I0426 20:50:56.857666 31871 net.cpp:382] mnist -> label
I0426 20:50:56.858580 31871 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:56.860700 31871 net.cpp:124] Setting up mnist
I0426 20:50:56.860729 31871 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:56.860735 31871 net.cpp:131] Top shape: 64 (64)
I0426 20:50:56.860738 31871 net.cpp:139] Memory required for data: 200960
I0426 20:50:56.860744 31871 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:56.860772 31871 net.cpp:86] Creating Layer conv0
I0426 20:50:56.860777 31871 net.cpp:408] conv0 <- data
I0426 20:50:56.860786 31871 net.cpp:382] conv0 -> conv0
I0426 20:50:57.093333 31871 net.cpp:124] Setting up conv0
I0426 20:50:57.093374 31871 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:57.093377 31871 net.cpp:139] Memory required for data: 1675520
I0426 20:50:57.093411 31871 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:57.093439 31871 net.cpp:86] Creating Layer pool0
I0426 20:50:57.093442 31871 net.cpp:408] pool0 <- conv0
I0426 20:50:57.093448 31871 net.cpp:382] pool0 -> pool0
I0426 20:50:57.093497 31871 net.cpp:124] Setting up pool0
I0426 20:50:57.093508 31871 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:57.093511 31871 net.cpp:139] Memory required for data: 2044160
I0426 20:50:57.093514 31871 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:57.093525 31871 net.cpp:86] Creating Layer conv1
I0426 20:50:57.093528 31871 net.cpp:408] conv1 <- pool0
I0426 20:50:57.093533 31871 net.cpp:382] conv1 -> conv1
I0426 20:50:57.096334 31871 net.cpp:124] Setting up conv1
I0426 20:50:57.096349 31871 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:50:57.096351 31871 net.cpp:139] Memory required for data: 2453760
I0426 20:50:57.096359 31871 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:57.096365 31871 net.cpp:86] Creating Layer pool1
I0426 20:50:57.096369 31871 net.cpp:408] pool1 <- conv1
I0426 20:50:57.096374 31871 net.cpp:382] pool1 -> pool1
I0426 20:50:57.096439 31871 net.cpp:124] Setting up pool1
I0426 20:50:57.096444 31871 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:50:57.096447 31871 net.cpp:139] Memory required for data: 2556160
I0426 20:50:57.096451 31871 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:57.096457 31871 net.cpp:86] Creating Layer ip1
I0426 20:50:57.096460 31871 net.cpp:408] ip1 <- pool1
I0426 20:50:57.096464 31871 net.cpp:382] ip1 -> ip1
I0426 20:50:57.098052 31871 net.cpp:124] Setting up ip1
I0426 20:50:57.098063 31871 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:57.098067 31871 net.cpp:139] Memory required for data: 2632960
I0426 20:50:57.098073 31871 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:57.098079 31871 net.cpp:86] Creating Layer relu1
I0426 20:50:57.098083 31871 net.cpp:408] relu1 <- ip1
I0426 20:50:57.098086 31871 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:57.098316 31871 net.cpp:124] Setting up relu1
I0426 20:50:57.098326 31871 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:57.098330 31871 net.cpp:139] Memory required for data: 2709760
I0426 20:50:57.098332 31871 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:57.098340 31871 net.cpp:86] Creating Layer ip2
I0426 20:50:57.098342 31871 net.cpp:408] ip2 <- ip1
I0426 20:50:57.098348 31871 net.cpp:382] ip2 -> ip2
I0426 20:50:57.099340 31871 net.cpp:124] Setting up ip2
I0426 20:50:57.099351 31871 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:57.099370 31871 net.cpp:139] Memory required for data: 2712320
I0426 20:50:57.099376 31871 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:57.099382 31871 net.cpp:86] Creating Layer relu2
I0426 20:50:57.099386 31871 net.cpp:408] relu2 <- ip2
I0426 20:50:57.099390 31871 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:57.100203 31871 net.cpp:124] Setting up relu2
I0426 20:50:57.100229 31871 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:57.100231 31871 net.cpp:139] Memory required for data: 2714880
I0426 20:50:57.100234 31871 layer_factory.hpp:77] Creating layer loss
I0426 20:50:57.100256 31871 net.cpp:86] Creating Layer loss
I0426 20:50:57.100260 31871 net.cpp:408] loss <- ip2
I0426 20:50:57.100263 31871 net.cpp:408] loss <- label
I0426 20:50:57.100268 31871 net.cpp:382] loss -> loss
I0426 20:50:57.100287 31871 layer_factory.hpp:77] Creating layer loss
I0426 20:50:57.100538 31871 net.cpp:124] Setting up loss
I0426 20:50:57.100548 31871 net.cpp:131] Top shape: (1)
I0426 20:50:57.100550 31871 net.cpp:134]     with loss weight 1
I0426 20:50:57.100564 31871 net.cpp:139] Memory required for data: 2714884
I0426 20:50:57.100569 31871 net.cpp:200] loss needs backward computation.
I0426 20:50:57.100571 31871 net.cpp:200] relu2 needs backward computation.
I0426 20:50:57.100574 31871 net.cpp:200] ip2 needs backward computation.
I0426 20:50:57.100577 31871 net.cpp:200] relu1 needs backward computation.
I0426 20:50:57.100580 31871 net.cpp:200] ip1 needs backward computation.
I0426 20:50:57.100594 31871 net.cpp:200] pool1 needs backward computation.
I0426 20:50:57.100597 31871 net.cpp:200] conv1 needs backward computation.
I0426 20:50:57.100600 31871 net.cpp:200] pool0 needs backward computation.
I0426 20:50:57.100603 31871 net.cpp:200] conv0 needs backward computation.
I0426 20:50:57.100607 31871 net.cpp:202] mnist does not need backward computation.
I0426 20:50:57.100610 31871 net.cpp:244] This network produces output loss
I0426 20:50:57.100618 31871 net.cpp:257] Network initialization done.
I0426 20:50:57.100991 31871 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test74.prototxt
I0426 20:50:57.101033 31871 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:57.101120 31871 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:57.101225 31871 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:57.101269 31871 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:57.101280 31871 net.cpp:86] Creating Layer mnist
I0426 20:50:57.101284 31871 net.cpp:382] mnist -> data
I0426 20:50:57.101291 31871 net.cpp:382] mnist -> label
I0426 20:50:57.101372 31871 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:57.102695 31871 net.cpp:124] Setting up mnist
I0426 20:50:57.102723 31871 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:57.102728 31871 net.cpp:131] Top shape: 100 (100)
I0426 20:50:57.102732 31871 net.cpp:139] Memory required for data: 314000
I0426 20:50:57.102735 31871 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:57.102771 31871 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:57.102774 31871 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:57.102779 31871 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:57.102787 31871 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:57.102845 31871 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:57.102851 31871 net.cpp:131] Top shape: 100 (100)
I0426 20:50:57.102855 31871 net.cpp:131] Top shape: 100 (100)
I0426 20:50:57.102859 31871 net.cpp:139] Memory required for data: 314800
I0426 20:50:57.102861 31871 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:57.102883 31871 net.cpp:86] Creating Layer conv0
I0426 20:50:57.102886 31871 net.cpp:408] conv0 <- data
I0426 20:50:57.102891 31871 net.cpp:382] conv0 -> conv0
I0426 20:50:57.104651 31871 net.cpp:124] Setting up conv0
I0426 20:50:57.104665 31871 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:57.104667 31871 net.cpp:139] Memory required for data: 2618800
I0426 20:50:57.104676 31871 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:57.104681 31871 net.cpp:86] Creating Layer pool0
I0426 20:50:57.104701 31871 net.cpp:408] pool0 <- conv0
I0426 20:50:57.104704 31871 net.cpp:382] pool0 -> pool0
I0426 20:50:57.104737 31871 net.cpp:124] Setting up pool0
I0426 20:50:57.104758 31871 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:57.104760 31871 net.cpp:139] Memory required for data: 3194800
I0426 20:50:57.104763 31871 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:57.104786 31871 net.cpp:86] Creating Layer conv1
I0426 20:50:57.104789 31871 net.cpp:408] conv1 <- pool0
I0426 20:50:57.104794 31871 net.cpp:382] conv1 -> conv1
I0426 20:50:57.107059 31871 net.cpp:124] Setting up conv1
I0426 20:50:57.107072 31871 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:50:57.107084 31871 net.cpp:139] Memory required for data: 3834800
I0426 20:50:57.107107 31871 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:57.107113 31871 net.cpp:86] Creating Layer pool1
I0426 20:50:57.107116 31871 net.cpp:408] pool1 <- conv1
I0426 20:50:57.107121 31871 net.cpp:382] pool1 -> pool1
I0426 20:50:57.107158 31871 net.cpp:124] Setting up pool1
I0426 20:50:57.107163 31871 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:50:57.107167 31871 net.cpp:139] Memory required for data: 3994800
I0426 20:50:57.107169 31871 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:57.107174 31871 net.cpp:86] Creating Layer ip1
I0426 20:50:57.107177 31871 net.cpp:408] ip1 <- pool1
I0426 20:50:57.107193 31871 net.cpp:382] ip1 -> ip1
I0426 20:50:57.108839 31871 net.cpp:124] Setting up ip1
I0426 20:50:57.108852 31871 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:57.108862 31871 net.cpp:139] Memory required for data: 4114800
I0426 20:50:57.108886 31871 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:57.108906 31871 net.cpp:86] Creating Layer relu1
I0426 20:50:57.108916 31871 net.cpp:408] relu1 <- ip1
I0426 20:50:57.108932 31871 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:57.109099 31871 net.cpp:124] Setting up relu1
I0426 20:50:57.109109 31871 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:57.109127 31871 net.cpp:139] Memory required for data: 4234800
I0426 20:50:57.109129 31871 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:57.109143 31871 net.cpp:86] Creating Layer ip2
I0426 20:50:57.109163 31871 net.cpp:408] ip2 <- ip1
I0426 20:50:57.109167 31871 net.cpp:382] ip2 -> ip2
I0426 20:50:57.109329 31871 net.cpp:124] Setting up ip2
I0426 20:50:57.109338 31871 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:57.109341 31871 net.cpp:139] Memory required for data: 4238800
I0426 20:50:57.109346 31871 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:57.109351 31871 net.cpp:86] Creating Layer relu2
I0426 20:50:57.109354 31871 net.cpp:408] relu2 <- ip2
I0426 20:50:57.109359 31871 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:57.109612 31871 net.cpp:124] Setting up relu2
I0426 20:50:57.109621 31871 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:57.109623 31871 net.cpp:139] Memory required for data: 4242800
I0426 20:50:57.109627 31871 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:50:57.109632 31871 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:50:57.109634 31871 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:50:57.109638 31871 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:50:57.109654 31871 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:50:57.109694 31871 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:50:57.109699 31871 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:57.109702 31871 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:57.109705 31871 net.cpp:139] Memory required for data: 4250800
I0426 20:50:57.109714 31871 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:57.109719 31871 net.cpp:86] Creating Layer accuracy
I0426 20:50:57.109726 31871 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:50:57.109736 31871 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:57.109740 31871 net.cpp:382] accuracy -> accuracy
I0426 20:50:57.109746 31871 net.cpp:124] Setting up accuracy
I0426 20:50:57.109750 31871 net.cpp:131] Top shape: (1)
I0426 20:50:57.109753 31871 net.cpp:139] Memory required for data: 4250804
I0426 20:50:57.109756 31871 layer_factory.hpp:77] Creating layer loss
I0426 20:50:57.109766 31871 net.cpp:86] Creating Layer loss
I0426 20:50:57.109769 31871 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:50:57.109772 31871 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:57.109782 31871 net.cpp:382] loss -> loss
I0426 20:50:57.109787 31871 layer_factory.hpp:77] Creating layer loss
I0426 20:50:57.110002 31871 net.cpp:124] Setting up loss
I0426 20:50:57.110010 31871 net.cpp:131] Top shape: (1)
I0426 20:50:57.110013 31871 net.cpp:134]     with loss weight 1
I0426 20:50:57.110019 31871 net.cpp:139] Memory required for data: 4250808
I0426 20:50:57.110023 31871 net.cpp:200] loss needs backward computation.
I0426 20:50:57.110026 31871 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:57.110030 31871 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:50:57.110033 31871 net.cpp:200] relu2 needs backward computation.
I0426 20:50:57.110038 31871 net.cpp:200] ip2 needs backward computation.
I0426 20:50:57.110040 31871 net.cpp:200] relu1 needs backward computation.
I0426 20:50:57.110043 31871 net.cpp:200] ip1 needs backward computation.
I0426 20:50:57.110046 31871 net.cpp:200] pool1 needs backward computation.
I0426 20:50:57.110049 31871 net.cpp:200] conv1 needs backward computation.
I0426 20:50:57.110059 31871 net.cpp:200] pool0 needs backward computation.
I0426 20:50:57.110061 31871 net.cpp:200] conv0 needs backward computation.
I0426 20:50:57.110064 31871 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:57.110074 31871 net.cpp:202] mnist does not need backward computation.
I0426 20:50:57.110076 31871 net.cpp:244] This network produces output accuracy
I0426 20:50:57.110080 31871 net.cpp:244] This network produces output loss
I0426 20:50:57.110088 31871 net.cpp:257] Network initialization done.
I0426 20:50:57.110123 31871 solver.cpp:56] Solver scaffolding done.
I0426 20:50:57.110414 31871 caffe.cpp:248] Starting Optimization
I0426 20:50:57.110421 31871 solver.cpp:273] Solving LeNet
I0426 20:50:57.110424 31871 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:57.111317 31871 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:57.115290 31871 blocking_queue.cpp:49] Waiting for data
I0426 20:50:57.187058 31878 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:57.187647 31871 solver.cpp:398]     Test net output #0: accuracy = 0.1001
I0426 20:50:57.187665 31871 solver.cpp:398]     Test net output #1: loss = 2.32767 (* 1 = 2.32767 loss)
I0426 20:50:57.190343 31871 solver.cpp:219] Iteration 0 (0 iter/s, 0.0798956s/100 iters), loss = 2.33656
I0426 20:50:57.190366 31871 solver.cpp:238]     Train net output #0: loss = 2.33656 (* 1 = 2.33656 loss)
I0426 20:50:57.190392 31871 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:57.282387 31871 solver.cpp:219] Iteration 100 (1086.81 iter/s, 0.0920124s/100 iters), loss = 1.28173
I0426 20:50:57.282413 31871 solver.cpp:238]     Train net output #0: loss = 1.28173 (* 1 = 1.28173 loss)
I0426 20:50:57.282433 31871 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:57.373808 31871 solver.cpp:219] Iteration 200 (1094.27 iter/s, 0.091385s/100 iters), loss = 0.545571
I0426 20:50:57.373844 31871 solver.cpp:238]     Train net output #0: loss = 0.545571 (* 1 = 0.545571 loss)
I0426 20:50:57.373850 31871 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:57.464134 31871 solver.cpp:219] Iteration 300 (1107.66 iter/s, 0.09028s/100 iters), loss = 0.221442
I0426 20:50:57.464159 31871 solver.cpp:238]     Train net output #0: loss = 0.221442 (* 1 = 0.221442 loss)
I0426 20:50:57.464165 31871 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:57.556937 31871 solver.cpp:219] Iteration 400 (1077.97 iter/s, 0.0927672s/100 iters), loss = 0.113374
I0426 20:50:57.556964 31871 solver.cpp:238]     Train net output #0: loss = 0.113374 (* 1 = 0.113374 loss)
I0426 20:50:57.556970 31871 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:57.645229 31871 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:57.699056 31878 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:57.699622 31871 solver.cpp:398]     Test net output #0: accuracy = 0.9678
I0426 20:50:57.699657 31871 solver.cpp:398]     Test net output #1: loss = 0.102794 (* 1 = 0.102794 loss)
I0426 20:50:57.700592 31871 solver.cpp:219] Iteration 500 (696.301 iter/s, 0.143616s/100 iters), loss = 0.108279
I0426 20:50:57.700657 31871 solver.cpp:238]     Train net output #0: loss = 0.108279 (* 1 = 0.108279 loss)
I0426 20:50:57.700665 31871 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:57.802300 31871 solver.cpp:219] Iteration 600 (983.935 iter/s, 0.101633s/100 iters), loss = 0.0924987
I0426 20:50:57.802325 31871 solver.cpp:238]     Train net output #0: loss = 0.0924987 (* 1 = 0.0924987 loss)
I0426 20:50:57.802331 31871 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:57.892971 31871 solver.cpp:219] Iteration 700 (1103.32 iter/s, 0.0906353s/100 iters), loss = 0.135636
I0426 20:50:57.892995 31871 solver.cpp:238]     Train net output #0: loss = 0.135636 (* 1 = 0.135636 loss)
I0426 20:50:57.893018 31871 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:57.982795 31871 solver.cpp:219] Iteration 800 (1113.7 iter/s, 0.0897905s/100 iters), loss = 0.192204
I0426 20:50:57.982820 31871 solver.cpp:238]     Train net output #0: loss = 0.192205 (* 1 = 0.192205 loss)
I0426 20:50:57.982847 31871 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:58.080143 31871 solver.cpp:219] Iteration 900 (1027.62 iter/s, 0.0973127s/100 iters), loss = 0.199416
I0426 20:50:58.080170 31871 solver.cpp:238]     Train net output #0: loss = 0.199416 (* 1 = 0.199416 loss)
I0426 20:50:58.080194 31871 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:58.111356 31877 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:58.170207 31871 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:58.173204 31871 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:58.174445 31871 solver.cpp:311] Iteration 1000, loss = 0.148693
I0426 20:50:58.174459 31871 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:58.230782 31878 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:58.231353 31871 solver.cpp:398]     Test net output #0: accuracy = 0.9767
I0426 20:50:58.231381 31871 solver.cpp:398]     Test net output #1: loss = 0.0711606 (* 1 = 0.0711606 loss)
I0426 20:50:58.231386 31871 solver.cpp:316] Optimization Done.
I0426 20:50:58.231395 31871 caffe.cpp:259] Optimization Done.
