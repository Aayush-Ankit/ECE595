I0426 20:50:43.658704 31820 caffe.cpp:218] Using GPUs 0
I0426 20:50:43.696545 31820 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:44.224519 31820 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test68.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:44.224666 31820 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test68.prototxt
I0426 20:50:44.225088 31820 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:44.225107 31820 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:44.225211 31820 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:44.225291 31820 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:44.225389 31820 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:44.225412 31820 net.cpp:86] Creating Layer mnist
I0426 20:50:44.225422 31820 net.cpp:382] mnist -> data
I0426 20:50:44.225445 31820 net.cpp:382] mnist -> label
I0426 20:50:44.226538 31820 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:44.229086 31820 net.cpp:124] Setting up mnist
I0426 20:50:44.229105 31820 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:44.229111 31820 net.cpp:131] Top shape: 64 (64)
I0426 20:50:44.229115 31820 net.cpp:139] Memory required for data: 200960
I0426 20:50:44.229121 31820 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:44.229138 31820 net.cpp:86] Creating Layer conv0
I0426 20:50:44.229159 31820 net.cpp:408] conv0 <- data
I0426 20:50:44.229172 31820 net.cpp:382] conv0 -> conv0
I0426 20:50:44.473407 31820 net.cpp:124] Setting up conv0
I0426 20:50:44.473449 31820 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:44.473453 31820 net.cpp:139] Memory required for data: 1675520
I0426 20:50:44.473467 31820 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:44.473480 31820 net.cpp:86] Creating Layer pool0
I0426 20:50:44.473484 31820 net.cpp:408] pool0 <- conv0
I0426 20:50:44.473489 31820 net.cpp:382] pool0 -> pool0
I0426 20:50:44.473562 31820 net.cpp:124] Setting up pool0
I0426 20:50:44.473570 31820 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:44.473573 31820 net.cpp:139] Memory required for data: 2044160
I0426 20:50:44.473575 31820 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:44.473587 31820 net.cpp:86] Creating Layer conv1
I0426 20:50:44.473592 31820 net.cpp:408] conv1 <- pool0
I0426 20:50:44.473597 31820 net.cpp:382] conv1 -> conv1
I0426 20:50:44.476235 31820 net.cpp:124] Setting up conv1
I0426 20:50:44.476248 31820 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:50:44.476251 31820 net.cpp:139] Memory required for data: 2208000
I0426 20:50:44.476259 31820 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:44.476265 31820 net.cpp:86] Creating Layer pool1
I0426 20:50:44.476269 31820 net.cpp:408] pool1 <- conv1
I0426 20:50:44.476274 31820 net.cpp:382] pool1 -> pool1
I0426 20:50:44.476322 31820 net.cpp:124] Setting up pool1
I0426 20:50:44.476327 31820 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:50:44.476330 31820 net.cpp:139] Memory required for data: 2248960
I0426 20:50:44.476332 31820 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:44.476338 31820 net.cpp:86] Creating Layer ip1
I0426 20:50:44.476341 31820 net.cpp:408] ip1 <- pool1
I0426 20:50:44.476346 31820 net.cpp:382] ip1 -> ip1
I0426 20:50:44.476722 31820 net.cpp:124] Setting up ip1
I0426 20:50:44.476729 31820 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:44.476747 31820 net.cpp:139] Memory required for data: 2325760
I0426 20:50:44.476754 31820 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:44.476759 31820 net.cpp:86] Creating Layer relu1
I0426 20:50:44.476763 31820 net.cpp:408] relu1 <- ip1
I0426 20:50:44.476768 31820 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:44.477015 31820 net.cpp:124] Setting up relu1
I0426 20:50:44.477025 31820 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:44.477030 31820 net.cpp:139] Memory required for data: 2402560
I0426 20:50:44.477032 31820 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:44.477039 31820 net.cpp:86] Creating Layer ip2
I0426 20:50:44.477042 31820 net.cpp:408] ip2 <- ip1
I0426 20:50:44.477048 31820 net.cpp:382] ip2 -> ip2
I0426 20:50:44.478456 31820 net.cpp:124] Setting up ip2
I0426 20:50:44.478466 31820 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:44.478485 31820 net.cpp:139] Memory required for data: 2479360
I0426 20:50:44.478492 31820 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:44.478497 31820 net.cpp:86] Creating Layer relu2
I0426 20:50:44.478502 31820 net.cpp:408] relu2 <- ip2
I0426 20:50:44.478507 31820 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:44.479383 31820 net.cpp:124] Setting up relu2
I0426 20:50:44.479394 31820 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:44.479413 31820 net.cpp:139] Memory required for data: 2556160
I0426 20:50:44.479416 31820 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:44.479423 31820 net.cpp:86] Creating Layer ip3
I0426 20:50:44.479426 31820 net.cpp:408] ip3 <- ip2
I0426 20:50:44.479431 31820 net.cpp:382] ip3 -> ip3
I0426 20:50:44.479560 31820 net.cpp:124] Setting up ip3
I0426 20:50:44.479568 31820 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:44.479585 31820 net.cpp:139] Memory required for data: 2558720
I0426 20:50:44.479593 31820 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:44.479598 31820 net.cpp:86] Creating Layer relu3
I0426 20:50:44.479599 31820 net.cpp:408] relu3 <- ip3
I0426 20:50:44.479604 31820 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:44.479754 31820 net.cpp:124] Setting up relu3
I0426 20:50:44.479779 31820 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:44.479781 31820 net.cpp:139] Memory required for data: 2561280
I0426 20:50:44.479784 31820 layer_factory.hpp:77] Creating layer loss
I0426 20:50:44.479790 31820 net.cpp:86] Creating Layer loss
I0426 20:50:44.479794 31820 net.cpp:408] loss <- ip3
I0426 20:50:44.479797 31820 net.cpp:408] loss <- label
I0426 20:50:44.479802 31820 net.cpp:382] loss -> loss
I0426 20:50:44.479820 31820 layer_factory.hpp:77] Creating layer loss
I0426 20:50:44.480051 31820 net.cpp:124] Setting up loss
I0426 20:50:44.480060 31820 net.cpp:131] Top shape: (1)
I0426 20:50:44.480079 31820 net.cpp:134]     with loss weight 1
I0426 20:50:44.480093 31820 net.cpp:139] Memory required for data: 2561284
I0426 20:50:44.480098 31820 net.cpp:200] loss needs backward computation.
I0426 20:50:44.480101 31820 net.cpp:200] relu3 needs backward computation.
I0426 20:50:44.480103 31820 net.cpp:200] ip3 needs backward computation.
I0426 20:50:44.480108 31820 net.cpp:200] relu2 needs backward computation.
I0426 20:50:44.480109 31820 net.cpp:200] ip2 needs backward computation.
I0426 20:50:44.480113 31820 net.cpp:200] relu1 needs backward computation.
I0426 20:50:44.480115 31820 net.cpp:200] ip1 needs backward computation.
I0426 20:50:44.480118 31820 net.cpp:200] pool1 needs backward computation.
I0426 20:50:44.480121 31820 net.cpp:200] conv1 needs backward computation.
I0426 20:50:44.480124 31820 net.cpp:200] pool0 needs backward computation.
I0426 20:50:44.480128 31820 net.cpp:200] conv0 needs backward computation.
I0426 20:50:44.480130 31820 net.cpp:202] mnist does not need backward computation.
I0426 20:50:44.480134 31820 net.cpp:244] This network produces output loss
I0426 20:50:44.480141 31820 net.cpp:257] Network initialization done.
I0426 20:50:44.480450 31820 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test68.prototxt
I0426 20:50:44.480476 31820 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:44.480566 31820 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:44.480639 31820 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:44.480684 31820 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:44.480695 31820 net.cpp:86] Creating Layer mnist
I0426 20:50:44.480700 31820 net.cpp:382] mnist -> data
I0426 20:50:44.480706 31820 net.cpp:382] mnist -> label
I0426 20:50:44.480787 31820 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:44.482002 31820 net.cpp:124] Setting up mnist
I0426 20:50:44.482046 31820 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:44.482051 31820 net.cpp:131] Top shape: 100 (100)
I0426 20:50:44.482054 31820 net.cpp:139] Memory required for data: 314000
I0426 20:50:44.482059 31820 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:44.482069 31820 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:44.482071 31820 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:44.482076 31820 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:44.482084 31820 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:44.482167 31820 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:44.482174 31820 net.cpp:131] Top shape: 100 (100)
I0426 20:50:44.482178 31820 net.cpp:131] Top shape: 100 (100)
I0426 20:50:44.482182 31820 net.cpp:139] Memory required for data: 314800
I0426 20:50:44.482184 31820 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:44.482193 31820 net.cpp:86] Creating Layer conv0
I0426 20:50:44.482197 31820 net.cpp:408] conv0 <- data
I0426 20:50:44.482201 31820 net.cpp:382] conv0 -> conv0
I0426 20:50:44.483814 31820 net.cpp:124] Setting up conv0
I0426 20:50:44.483827 31820 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:44.483846 31820 net.cpp:139] Memory required for data: 2618800
I0426 20:50:44.483855 31820 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:44.483861 31820 net.cpp:86] Creating Layer pool0
I0426 20:50:44.483865 31820 net.cpp:408] pool0 <- conv0
I0426 20:50:44.483868 31820 net.cpp:382] pool0 -> pool0
I0426 20:50:44.483918 31820 net.cpp:124] Setting up pool0
I0426 20:50:44.483924 31820 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:44.483927 31820 net.cpp:139] Memory required for data: 3194800
I0426 20:50:44.483930 31820 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:44.483938 31820 net.cpp:86] Creating Layer conv1
I0426 20:50:44.483942 31820 net.cpp:408] conv1 <- pool0
I0426 20:50:44.483947 31820 net.cpp:382] conv1 -> conv1
I0426 20:50:44.486137 31820 net.cpp:124] Setting up conv1
I0426 20:50:44.486150 31820 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:50:44.486167 31820 net.cpp:139] Memory required for data: 3450800
I0426 20:50:44.486176 31820 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:44.486181 31820 net.cpp:86] Creating Layer pool1
I0426 20:50:44.486186 31820 net.cpp:408] pool1 <- conv1
I0426 20:50:44.486189 31820 net.cpp:382] pool1 -> pool1
I0426 20:50:44.486291 31820 net.cpp:124] Setting up pool1
I0426 20:50:44.486299 31820 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:50:44.486302 31820 net.cpp:139] Memory required for data: 3514800
I0426 20:50:44.486305 31820 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:44.486322 31820 net.cpp:86] Creating Layer ip1
I0426 20:50:44.486326 31820 net.cpp:408] ip1 <- pool1
I0426 20:50:44.486330 31820 net.cpp:382] ip1 -> ip1
I0426 20:50:44.486758 31820 net.cpp:124] Setting up ip1
I0426 20:50:44.486768 31820 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:44.486796 31820 net.cpp:139] Memory required for data: 3634800
I0426 20:50:44.486804 31820 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:44.486809 31820 net.cpp:86] Creating Layer relu1
I0426 20:50:44.486812 31820 net.cpp:408] relu1 <- ip1
I0426 20:50:44.486816 31820 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:44.487051 31820 net.cpp:124] Setting up relu1
I0426 20:50:44.487059 31820 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:44.487062 31820 net.cpp:139] Memory required for data: 3754800
I0426 20:50:44.487066 31820 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:44.487072 31820 net.cpp:86] Creating Layer ip2
I0426 20:50:44.487076 31820 net.cpp:408] ip2 <- ip1
I0426 20:50:44.487081 31820 net.cpp:382] ip2 -> ip2
I0426 20:50:44.487737 31820 net.cpp:124] Setting up ip2
I0426 20:50:44.487745 31820 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:44.487763 31820 net.cpp:139] Memory required for data: 3874800
I0426 20:50:44.487768 31820 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:44.487773 31820 net.cpp:86] Creating Layer relu2
I0426 20:50:44.487776 31820 net.cpp:408] relu2 <- ip2
I0426 20:50:44.487779 31820 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:44.487926 31820 net.cpp:124] Setting up relu2
I0426 20:50:44.487933 31820 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:44.487936 31820 net.cpp:139] Memory required for data: 3994800
I0426 20:50:44.487939 31820 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:44.487944 31820 net.cpp:86] Creating Layer ip3
I0426 20:50:44.487947 31820 net.cpp:408] ip3 <- ip2
I0426 20:50:44.487952 31820 net.cpp:382] ip3 -> ip3
I0426 20:50:44.488061 31820 net.cpp:124] Setting up ip3
I0426 20:50:44.488068 31820 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:44.488071 31820 net.cpp:139] Memory required for data: 3998800
I0426 20:50:44.488078 31820 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:44.488082 31820 net.cpp:86] Creating Layer relu3
I0426 20:50:44.488085 31820 net.cpp:408] relu3 <- ip3
I0426 20:50:44.488090 31820 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:44.488971 31820 net.cpp:124] Setting up relu3
I0426 20:50:44.488984 31820 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:44.489004 31820 net.cpp:139] Memory required for data: 4002800
I0426 20:50:44.489007 31820 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:50:44.489012 31820 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:50:44.489017 31820 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:50:44.489032 31820 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:50:44.489038 31820 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:50:44.489073 31820 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:50:44.489078 31820 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:44.489081 31820 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:44.489084 31820 net.cpp:139] Memory required for data: 4010800
I0426 20:50:44.489087 31820 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:44.489091 31820 net.cpp:86] Creating Layer accuracy
I0426 20:50:44.489095 31820 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:50:44.489099 31820 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:44.489104 31820 net.cpp:382] accuracy -> accuracy
I0426 20:50:44.489120 31820 net.cpp:124] Setting up accuracy
I0426 20:50:44.489125 31820 net.cpp:131] Top shape: (1)
I0426 20:50:44.489127 31820 net.cpp:139] Memory required for data: 4010804
I0426 20:50:44.489130 31820 layer_factory.hpp:77] Creating layer loss
I0426 20:50:44.489148 31820 net.cpp:86] Creating Layer loss
I0426 20:50:44.489151 31820 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:50:44.489156 31820 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:44.489159 31820 net.cpp:382] loss -> loss
I0426 20:50:44.489164 31820 layer_factory.hpp:77] Creating layer loss
I0426 20:50:44.489383 31820 net.cpp:124] Setting up loss
I0426 20:50:44.489392 31820 net.cpp:131] Top shape: (1)
I0426 20:50:44.489397 31820 net.cpp:134]     with loss weight 1
I0426 20:50:44.489413 31820 net.cpp:139] Memory required for data: 4010808
I0426 20:50:44.489416 31820 net.cpp:200] loss needs backward computation.
I0426 20:50:44.489420 31820 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:44.489424 31820 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:50:44.489428 31820 net.cpp:200] relu3 needs backward computation.
I0426 20:50:44.489429 31820 net.cpp:200] ip3 needs backward computation.
I0426 20:50:44.489434 31820 net.cpp:200] relu2 needs backward computation.
I0426 20:50:44.489435 31820 net.cpp:200] ip2 needs backward computation.
I0426 20:50:44.489439 31820 net.cpp:200] relu1 needs backward computation.
I0426 20:50:44.489441 31820 net.cpp:200] ip1 needs backward computation.
I0426 20:50:44.489444 31820 net.cpp:200] pool1 needs backward computation.
I0426 20:50:44.489447 31820 net.cpp:200] conv1 needs backward computation.
I0426 20:50:44.489450 31820 net.cpp:200] pool0 needs backward computation.
I0426 20:50:44.489454 31820 net.cpp:200] conv0 needs backward computation.
I0426 20:50:44.489457 31820 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:44.489461 31820 net.cpp:202] mnist does not need backward computation.
I0426 20:50:44.489464 31820 net.cpp:244] This network produces output accuracy
I0426 20:50:44.489467 31820 net.cpp:244] This network produces output loss
I0426 20:50:44.489477 31820 net.cpp:257] Network initialization done.
I0426 20:50:44.489517 31820 solver.cpp:56] Solver scaffolding done.
I0426 20:50:44.489892 31820 caffe.cpp:248] Starting Optimization
I0426 20:50:44.489897 31820 solver.cpp:273] Solving LeNet
I0426 20:50:44.489900 31820 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:44.490756 31820 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:44.495158 31820 blocking_queue.cpp:49] Waiting for data
I0426 20:50:44.568361 31827 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:44.568974 31820 solver.cpp:398]     Test net output #0: accuracy = 0.0978
I0426 20:50:44.569012 31820 solver.cpp:398]     Test net output #1: loss = 2.31475 (* 1 = 2.31475 loss)
I0426 20:50:44.572300 31820 solver.cpp:219] Iteration 0 (0 iter/s, 0.0823593s/100 iters), loss = 2.31842
I0426 20:50:44.572340 31820 solver.cpp:238]     Train net output #0: loss = 2.31842 (* 1 = 2.31842 loss)
I0426 20:50:44.572350 31820 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:44.672170 31820 solver.cpp:219] Iteration 100 (1001.63 iter/s, 0.0998369s/100 iters), loss = 1.40459
I0426 20:50:44.672210 31820 solver.cpp:238]     Train net output #0: loss = 1.40459 (* 1 = 1.40459 loss)
I0426 20:50:44.672216 31820 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:44.771782 31820 solver.cpp:219] Iteration 200 (1004.4 iter/s, 0.0995615s/100 iters), loss = 1.50596
I0426 20:50:44.771822 31820 solver.cpp:238]     Train net output #0: loss = 1.50596 (* 1 = 1.50596 loss)
I0426 20:50:44.771828 31820 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:44.876663 31820 solver.cpp:219] Iteration 300 (953.795 iter/s, 0.104844s/100 iters), loss = 1.42925
I0426 20:50:44.876703 31820 solver.cpp:238]     Train net output #0: loss = 1.42925 (* 1 = 1.42925 loss)
I0426 20:50:44.876713 31820 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:44.974319 31820 solver.cpp:219] Iteration 400 (1024.52 iter/s, 0.0976067s/100 iters), loss = 1.09538
I0426 20:50:44.974350 31820 solver.cpp:238]     Train net output #0: loss = 1.09538 (* 1 = 1.09538 loss)
I0426 20:50:44.974359 31820 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:45.068637 31820 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:45.124229 31827 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:45.124863 31820 solver.cpp:398]     Test net output #0: accuracy = 0.5878
I0426 20:50:45.124888 31820 solver.cpp:398]     Test net output #1: loss = 1.02761 (* 1 = 1.02761 loss)
I0426 20:50:45.125804 31820 solver.cpp:219] Iteration 500 (660.326 iter/s, 0.15144s/100 iters), loss = 1.02566
I0426 20:50:45.125854 31820 solver.cpp:238]     Train net output #0: loss = 1.02566 (* 1 = 1.02566 loss)
I0426 20:50:45.125861 31820 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:45.222961 31820 solver.cpp:219] Iteration 600 (1029.93 iter/s, 0.0970938s/100 iters), loss = 0.845618
I0426 20:50:45.222992 31820 solver.cpp:238]     Train net output #0: loss = 0.845618 (* 1 = 0.845618 loss)
I0426 20:50:45.223001 31820 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:45.320572 31820 solver.cpp:219] Iteration 700 (1024.91 iter/s, 0.0975698s/100 iters), loss = 1.20603
I0426 20:50:45.320603 31820 solver.cpp:238]     Train net output #0: loss = 1.20603 (* 1 = 1.20603 loss)
I0426 20:50:45.320611 31820 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:45.415694 31820 solver.cpp:219] Iteration 800 (1051.72 iter/s, 0.0950825s/100 iters), loss = 1.21445
I0426 20:50:45.415725 31820 solver.cpp:238]     Train net output #0: loss = 1.21445 (* 1 = 1.21445 loss)
I0426 20:50:45.415732 31820 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:45.510699 31820 solver.cpp:219] Iteration 900 (1053.02 iter/s, 0.0949645s/100 iters), loss = 1.08881
I0426 20:50:45.510730 31820 solver.cpp:238]     Train net output #0: loss = 1.08881 (* 1 = 1.08881 loss)
I0426 20:50:45.510737 31820 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:45.542460 31826 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:45.603894 31820 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:45.606453 31820 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:45.607851 31820 solver.cpp:311] Iteration 1000, loss = 1.10451
I0426 20:50:45.607866 31820 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:45.683081 31827 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:45.683691 31820 solver.cpp:398]     Test net output #0: accuracy = 0.6006
I0426 20:50:45.683725 31820 solver.cpp:398]     Test net output #1: loss = 0.956603 (* 1 = 0.956603 loss)
I0426 20:50:45.683729 31820 solver.cpp:316] Optimization Done.
I0426 20:50:45.683732 31820 caffe.cpp:259] Optimization Done.
