I0426 20:53:25.010249 32436 caffe.cpp:218] Using GPUs 0
I0426 20:53:25.047371 32436 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:25.572088 32436 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test136.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:25.572237 32436 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test136.prototxt
I0426 20:53:25.572646 32436 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:25.572664 32436 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:25.572767 32436 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:25.572863 32436 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:25.572979 32436 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:25.573004 32436 net.cpp:86] Creating Layer mnist
I0426 20:53:25.573011 32436 net.cpp:382] mnist -> data
I0426 20:53:25.573035 32436 net.cpp:382] mnist -> label
I0426 20:53:25.574131 32436 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:25.576638 32436 net.cpp:124] Setting up mnist
I0426 20:53:25.576656 32436 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:25.576663 32436 net.cpp:131] Top shape: 64 (64)
I0426 20:53:25.576666 32436 net.cpp:139] Memory required for data: 200960
I0426 20:53:25.576673 32436 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:25.576690 32436 net.cpp:86] Creating Layer conv0
I0426 20:53:25.576711 32436 net.cpp:408] conv0 <- data
I0426 20:53:25.576723 32436 net.cpp:382] conv0 -> conv0
I0426 20:53:25.858134 32436 net.cpp:124] Setting up conv0
I0426 20:53:25.858161 32436 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:53:25.858165 32436 net.cpp:139] Memory required for data: 3887360
I0426 20:53:25.858181 32436 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:25.858193 32436 net.cpp:86] Creating Layer pool0
I0426 20:53:25.858197 32436 net.cpp:408] pool0 <- conv0
I0426 20:53:25.858202 32436 net.cpp:382] pool0 -> pool0
I0426 20:53:25.858245 32436 net.cpp:124] Setting up pool0
I0426 20:53:25.858252 32436 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:53:25.858254 32436 net.cpp:139] Memory required for data: 4808960
I0426 20:53:25.858258 32436 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:25.858268 32436 net.cpp:86] Creating Layer conv1
I0426 20:53:25.858270 32436 net.cpp:408] conv1 <- pool0
I0426 20:53:25.858275 32436 net.cpp:382] conv1 -> conv1
I0426 20:53:25.860325 32436 net.cpp:124] Setting up conv1
I0426 20:53:25.860339 32436 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:53:25.860343 32436 net.cpp:139] Memory required for data: 5628160
I0426 20:53:25.860352 32436 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:25.860358 32436 net.cpp:86] Creating Layer pool1
I0426 20:53:25.860361 32436 net.cpp:408] pool1 <- conv1
I0426 20:53:25.860366 32436 net.cpp:382] pool1 -> pool1
I0426 20:53:25.860400 32436 net.cpp:124] Setting up pool1
I0426 20:53:25.860412 32436 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:53:25.860415 32436 net.cpp:139] Memory required for data: 5832960
I0426 20:53:25.860419 32436 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:25.860424 32436 net.cpp:86] Creating Layer ip1
I0426 20:53:25.860427 32436 net.cpp:408] ip1 <- pool1
I0426 20:53:25.860431 32436 net.cpp:382] ip1 -> ip1
I0426 20:53:25.862596 32436 net.cpp:124] Setting up ip1
I0426 20:53:25.862607 32436 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:25.862610 32436 net.cpp:139] Memory required for data: 5909760
I0426 20:53:25.862618 32436 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:25.862624 32436 net.cpp:86] Creating Layer relu1
I0426 20:53:25.862627 32436 net.cpp:408] relu1 <- ip1
I0426 20:53:25.862633 32436 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:25.862859 32436 net.cpp:124] Setting up relu1
I0426 20:53:25.862869 32436 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:25.862871 32436 net.cpp:139] Memory required for data: 5986560
I0426 20:53:25.862874 32436 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:25.862881 32436 net.cpp:86] Creating Layer ip2
I0426 20:53:25.862885 32436 net.cpp:408] ip2 <- ip1
I0426 20:53:25.862891 32436 net.cpp:382] ip2 -> ip2
I0426 20:53:25.863194 32436 net.cpp:124] Setting up ip2
I0426 20:53:25.863216 32436 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:25.863219 32436 net.cpp:139] Memory required for data: 6012160
I0426 20:53:25.863224 32436 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:25.863245 32436 net.cpp:86] Creating Layer relu2
I0426 20:53:25.863247 32436 net.cpp:408] relu2 <- ip2
I0426 20:53:25.863252 32436 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:25.864138 32436 net.cpp:124] Setting up relu2
I0426 20:53:25.864151 32436 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:25.864169 32436 net.cpp:139] Memory required for data: 6037760
I0426 20:53:25.864173 32436 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:25.864181 32436 net.cpp:86] Creating Layer ip3
I0426 20:53:25.864198 32436 net.cpp:408] ip3 <- ip2
I0426 20:53:25.864203 32436 net.cpp:382] ip3 -> ip3
I0426 20:53:25.864322 32436 net.cpp:124] Setting up ip3
I0426 20:53:25.864331 32436 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:25.864333 32436 net.cpp:139] Memory required for data: 6040320
I0426 20:53:25.864342 32436 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:25.864346 32436 net.cpp:86] Creating Layer relu3
I0426 20:53:25.864349 32436 net.cpp:408] relu3 <- ip3
I0426 20:53:25.864353 32436 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:25.864521 32436 net.cpp:124] Setting up relu3
I0426 20:53:25.864531 32436 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:25.864533 32436 net.cpp:139] Memory required for data: 6042880
I0426 20:53:25.864537 32436 layer_factory.hpp:77] Creating layer loss
I0426 20:53:25.864542 32436 net.cpp:86] Creating Layer loss
I0426 20:53:25.864545 32436 net.cpp:408] loss <- ip3
I0426 20:53:25.864548 32436 net.cpp:408] loss <- label
I0426 20:53:25.864553 32436 net.cpp:382] loss -> loss
I0426 20:53:25.864567 32436 layer_factory.hpp:77] Creating layer loss
I0426 20:53:25.864800 32436 net.cpp:124] Setting up loss
I0426 20:53:25.864830 32436 net.cpp:131] Top shape: (1)
I0426 20:53:25.864833 32436 net.cpp:134]     with loss weight 1
I0426 20:53:25.864847 32436 net.cpp:139] Memory required for data: 6042884
I0426 20:53:25.864851 32436 net.cpp:200] loss needs backward computation.
I0426 20:53:25.864855 32436 net.cpp:200] relu3 needs backward computation.
I0426 20:53:25.864873 32436 net.cpp:200] ip3 needs backward computation.
I0426 20:53:25.864876 32436 net.cpp:200] relu2 needs backward computation.
I0426 20:53:25.864878 32436 net.cpp:200] ip2 needs backward computation.
I0426 20:53:25.864881 32436 net.cpp:200] relu1 needs backward computation.
I0426 20:53:25.864884 32436 net.cpp:200] ip1 needs backward computation.
I0426 20:53:25.864887 32436 net.cpp:200] pool1 needs backward computation.
I0426 20:53:25.864890 32436 net.cpp:200] conv1 needs backward computation.
I0426 20:53:25.864893 32436 net.cpp:200] pool0 needs backward computation.
I0426 20:53:25.864897 32436 net.cpp:200] conv0 needs backward computation.
I0426 20:53:25.864915 32436 net.cpp:202] mnist does not need backward computation.
I0426 20:53:25.864918 32436 net.cpp:244] This network produces output loss
I0426 20:53:25.864928 32436 net.cpp:257] Network initialization done.
I0426 20:53:25.865340 32436 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test136.prototxt
I0426 20:53:25.865384 32436 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:25.865491 32436 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:25.865571 32436 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:25.865615 32436 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:25.865628 32436 net.cpp:86] Creating Layer mnist
I0426 20:53:25.865633 32436 net.cpp:382] mnist -> data
I0426 20:53:25.865639 32436 net.cpp:382] mnist -> label
I0426 20:53:25.865720 32436 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:25.867838 32436 net.cpp:124] Setting up mnist
I0426 20:53:25.867851 32436 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:25.867856 32436 net.cpp:131] Top shape: 100 (100)
I0426 20:53:25.867859 32436 net.cpp:139] Memory required for data: 314000
I0426 20:53:25.867862 32436 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:25.867868 32436 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:25.867871 32436 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:25.867892 32436 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:25.867898 32436 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:25.867955 32436 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:25.867964 32436 net.cpp:131] Top shape: 100 (100)
I0426 20:53:25.867967 32436 net.cpp:131] Top shape: 100 (100)
I0426 20:53:25.867970 32436 net.cpp:139] Memory required for data: 314800
I0426 20:53:25.867990 32436 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:25.867997 32436 net.cpp:86] Creating Layer conv0
I0426 20:53:25.868000 32436 net.cpp:408] conv0 <- data
I0426 20:53:25.868006 32436 net.cpp:382] conv0 -> conv0
I0426 20:53:25.869711 32436 net.cpp:124] Setting up conv0
I0426 20:53:25.869725 32436 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:53:25.869729 32436 net.cpp:139] Memory required for data: 6074800
I0426 20:53:25.869737 32436 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:25.869742 32436 net.cpp:86] Creating Layer pool0
I0426 20:53:25.869745 32436 net.cpp:408] pool0 <- conv0
I0426 20:53:25.869753 32436 net.cpp:382] pool0 -> pool0
I0426 20:53:25.869786 32436 net.cpp:124] Setting up pool0
I0426 20:53:25.869792 32436 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:53:25.869794 32436 net.cpp:139] Memory required for data: 7514800
I0426 20:53:25.869797 32436 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:25.869822 32436 net.cpp:86] Creating Layer conv1
I0426 20:53:25.869825 32436 net.cpp:408] conv1 <- pool0
I0426 20:53:25.869830 32436 net.cpp:382] conv1 -> conv1
I0426 20:53:25.871598 32436 net.cpp:124] Setting up conv1
I0426 20:53:25.871613 32436 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:53:25.871616 32436 net.cpp:139] Memory required for data: 8794800
I0426 20:53:25.871641 32436 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:25.871647 32436 net.cpp:86] Creating Layer pool1
I0426 20:53:25.871650 32436 net.cpp:408] pool1 <- conv1
I0426 20:53:25.871655 32436 net.cpp:382] pool1 -> pool1
I0426 20:53:25.871690 32436 net.cpp:124] Setting up pool1
I0426 20:53:25.871696 32436 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:53:25.871701 32436 net.cpp:139] Memory required for data: 9114800
I0426 20:53:25.871702 32436 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:25.871708 32436 net.cpp:86] Creating Layer ip1
I0426 20:53:25.871711 32436 net.cpp:408] ip1 <- pool1
I0426 20:53:25.871731 32436 net.cpp:382] ip1 -> ip1
I0426 20:53:25.873320 32436 net.cpp:124] Setting up ip1
I0426 20:53:25.873329 32436 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:25.873342 32436 net.cpp:139] Memory required for data: 9234800
I0426 20:53:25.873373 32436 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:25.873378 32436 net.cpp:86] Creating Layer relu1
I0426 20:53:25.873381 32436 net.cpp:408] relu1 <- ip1
I0426 20:53:25.873392 32436 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:25.873572 32436 net.cpp:124] Setting up relu1
I0426 20:53:25.873595 32436 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:25.873600 32436 net.cpp:139] Memory required for data: 9354800
I0426 20:53:25.873622 32436 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:25.873631 32436 net.cpp:86] Creating Layer ip2
I0426 20:53:25.873633 32436 net.cpp:408] ip2 <- ip1
I0426 20:53:25.873639 32436 net.cpp:382] ip2 -> ip2
I0426 20:53:25.873924 32436 net.cpp:124] Setting up ip2
I0426 20:53:25.873932 32436 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:25.873935 32436 net.cpp:139] Memory required for data: 9394800
I0426 20:53:25.873940 32436 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:25.873945 32436 net.cpp:86] Creating Layer relu2
I0426 20:53:25.873949 32436 net.cpp:408] relu2 <- ip2
I0426 20:53:25.873952 32436 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:25.874122 32436 net.cpp:124] Setting up relu2
I0426 20:53:25.874131 32436 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:25.874135 32436 net.cpp:139] Memory required for data: 9434800
I0426 20:53:25.874136 32436 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:25.874143 32436 net.cpp:86] Creating Layer ip3
I0426 20:53:25.874146 32436 net.cpp:408] ip3 <- ip2
I0426 20:53:25.874151 32436 net.cpp:382] ip3 -> ip3
I0426 20:53:25.874249 32436 net.cpp:124] Setting up ip3
I0426 20:53:25.874256 32436 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:25.874259 32436 net.cpp:139] Memory required for data: 9438800
I0426 20:53:25.874266 32436 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:25.874270 32436 net.cpp:86] Creating Layer relu3
I0426 20:53:25.874274 32436 net.cpp:408] relu3 <- ip3
I0426 20:53:25.874277 32436 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:25.875089 32436 net.cpp:124] Setting up relu3
I0426 20:53:25.875102 32436 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:25.875107 32436 net.cpp:139] Memory required for data: 9442800
I0426 20:53:25.875109 32436 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:53:25.875114 32436 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:53:25.875118 32436 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:53:25.875124 32436 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:53:25.875130 32436 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:53:25.875182 32436 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:53:25.875190 32436 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:25.875193 32436 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:25.875196 32436 net.cpp:139] Memory required for data: 9450800
I0426 20:53:25.875198 32436 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:25.875203 32436 net.cpp:86] Creating Layer accuracy
I0426 20:53:25.875206 32436 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:53:25.875211 32436 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:25.875214 32436 net.cpp:382] accuracy -> accuracy
I0426 20:53:25.875221 32436 net.cpp:124] Setting up accuracy
I0426 20:53:25.875224 32436 net.cpp:131] Top shape: (1)
I0426 20:53:25.875227 32436 net.cpp:139] Memory required for data: 9450804
I0426 20:53:25.875231 32436 layer_factory.hpp:77] Creating layer loss
I0426 20:53:25.875236 32436 net.cpp:86] Creating Layer loss
I0426 20:53:25.875238 32436 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:53:25.875241 32436 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:25.875246 32436 net.cpp:382] loss -> loss
I0426 20:53:25.875252 32436 layer_factory.hpp:77] Creating layer loss
I0426 20:53:25.875514 32436 net.cpp:124] Setting up loss
I0426 20:53:25.875524 32436 net.cpp:131] Top shape: (1)
I0426 20:53:25.875526 32436 net.cpp:134]     with loss weight 1
I0426 20:53:25.875541 32436 net.cpp:139] Memory required for data: 9450808
I0426 20:53:25.875545 32436 net.cpp:200] loss needs backward computation.
I0426 20:53:25.875548 32436 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:25.875552 32436 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:53:25.875555 32436 net.cpp:200] relu3 needs backward computation.
I0426 20:53:25.875558 32436 net.cpp:200] ip3 needs backward computation.
I0426 20:53:25.875560 32436 net.cpp:200] relu2 needs backward computation.
I0426 20:53:25.875563 32436 net.cpp:200] ip2 needs backward computation.
I0426 20:53:25.875566 32436 net.cpp:200] relu1 needs backward computation.
I0426 20:53:25.875568 32436 net.cpp:200] ip1 needs backward computation.
I0426 20:53:25.875571 32436 net.cpp:200] pool1 needs backward computation.
I0426 20:53:25.875574 32436 net.cpp:200] conv1 needs backward computation.
I0426 20:53:25.875577 32436 net.cpp:200] pool0 needs backward computation.
I0426 20:53:25.875579 32436 net.cpp:200] conv0 needs backward computation.
I0426 20:53:25.875583 32436 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:25.875587 32436 net.cpp:202] mnist does not need backward computation.
I0426 20:53:25.875589 32436 net.cpp:244] This network produces output accuracy
I0426 20:53:25.875592 32436 net.cpp:244] This network produces output loss
I0426 20:53:25.875604 32436 net.cpp:257] Network initialization done.
I0426 20:53:25.875658 32436 solver.cpp:56] Solver scaffolding done.
I0426 20:53:25.875975 32436 caffe.cpp:248] Starting Optimization
I0426 20:53:25.875983 32436 solver.cpp:273] Solving LeNet
I0426 20:53:25.875985 32436 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:25.877629 32436 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:25.883762 32436 blocking_queue.cpp:49] Waiting for data
I0426 20:53:25.955104 32443 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:25.955843 32436 solver.cpp:398]     Test net output #0: accuracy = 0.128
I0426 20:53:25.955865 32436 solver.cpp:398]     Test net output #1: loss = 2.32138 (* 1 = 2.32138 loss)
I0426 20:53:25.960438 32436 solver.cpp:219] Iteration 0 (-3.32064e-31 iter/s, 0.0844247s/100 iters), loss = 2.31181
I0426 20:53:25.960464 32436 solver.cpp:238]     Train net output #0: loss = 2.31181 (* 1 = 2.31181 loss)
I0426 20:53:25.960489 32436 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:53:26.102207 32436 solver.cpp:219] Iteration 100 (705.593 iter/s, 0.141725s/100 iters), loss = 0.24839
I0426 20:53:26.102250 32436 solver.cpp:238]     Train net output #0: loss = 0.24839 (* 1 = 0.24839 loss)
I0426 20:53:26.102262 32436 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:53:26.246456 32436 solver.cpp:219] Iteration 200 (693.512 iter/s, 0.144194s/100 iters), loss = 0.134712
I0426 20:53:26.246493 32436 solver.cpp:238]     Train net output #0: loss = 0.134712 (* 1 = 0.134712 loss)
I0426 20:53:26.246502 32436 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:53:26.389699 32436 solver.cpp:219] Iteration 300 (698.353 iter/s, 0.143194s/100 iters), loss = 0.179183
I0426 20:53:26.389737 32436 solver.cpp:238]     Train net output #0: loss = 0.179183 (* 1 = 0.179183 loss)
I0426 20:53:26.389760 32436 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:53:26.530956 32436 solver.cpp:219] Iteration 400 (708.178 iter/s, 0.141207s/100 iters), loss = 0.0676651
I0426 20:53:26.530987 32436 solver.cpp:238]     Train net output #0: loss = 0.0676652 (* 1 = 0.0676652 loss)
I0426 20:53:26.530995 32436 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:53:26.672435 32436 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:53:26.748251 32443 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:26.749063 32436 solver.cpp:398]     Test net output #0: accuracy = 0.9713
I0426 20:53:26.749088 32436 solver.cpp:398]     Test net output #1: loss = 0.090237 (* 1 = 0.090237 loss)
I0426 20:53:26.750418 32436 solver.cpp:219] Iteration 500 (455.758 iter/s, 0.219415s/100 iters), loss = 0.0660752
I0426 20:53:26.750479 32436 solver.cpp:238]     Train net output #0: loss = 0.0660753 (* 1 = 0.0660753 loss)
I0426 20:53:26.750490 32436 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:53:26.891739 32436 solver.cpp:219] Iteration 600 (707.972 iter/s, 0.141248s/100 iters), loss = 0.0944396
I0426 20:53:26.891770 32436 solver.cpp:238]     Train net output #0: loss = 0.0944397 (* 1 = 0.0944397 loss)
I0426 20:53:26.891778 32436 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:53:27.032701 32436 solver.cpp:219] Iteration 700 (709.634 iter/s, 0.140918s/100 iters), loss = 0.129039
I0426 20:53:27.032733 32436 solver.cpp:238]     Train net output #0: loss = 0.129039 (* 1 = 0.129039 loss)
I0426 20:53:27.032742 32436 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:53:27.171377 32436 solver.cpp:219] Iteration 800 (721.344 iter/s, 0.13863s/100 iters), loss = 0.255885
I0426 20:53:27.171414 32436 solver.cpp:238]     Train net output #0: loss = 0.255885 (* 1 = 0.255885 loss)
I0426 20:53:27.171422 32436 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:53:27.309919 32436 solver.cpp:219] Iteration 900 (722.064 iter/s, 0.138492s/100 iters), loss = 0.129987
I0426 20:53:27.309952 32436 solver.cpp:238]     Train net output #0: loss = 0.129987 (* 1 = 0.129987 loss)
I0426 20:53:27.309962 32436 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:53:27.358702 32442 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:27.451963 32436 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:53:27.457432 32436 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:53:27.460378 32436 solver.cpp:311] Iteration 1000, loss = 0.0880315
I0426 20:53:27.460398 32436 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:53:27.536260 32443 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:27.537160 32436 solver.cpp:398]     Test net output #0: accuracy = 0.9787
I0426 20:53:27.537184 32436 solver.cpp:398]     Test net output #1: loss = 0.0642552 (* 1 = 0.0642552 loss)
I0426 20:53:27.537190 32436 solver.cpp:316] Optimization Done.
I0426 20:53:27.537194 32436 caffe.cpp:259] Optimization Done.
