I0426 20:50:09.366883 31697 caffe.cpp:218] Using GPUs 0
I0426 20:50:09.404155 31697 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:09.869356 31697 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test53.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:09.869485 31697 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test53.prototxt
I0426 20:50:09.869797 31697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:09.869812 31697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:09.869881 31697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:09.869948 31697 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:09.870033 31697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:09.870054 31697 net.cpp:86] Creating Layer mnist
I0426 20:50:09.870059 31697 net.cpp:382] mnist -> data
I0426 20:50:09.870079 31697 net.cpp:382] mnist -> label
I0426 20:50:09.870971 31697 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:09.873070 31697 net.cpp:124] Setting up mnist
I0426 20:50:09.873098 31697 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:09.873103 31697 net.cpp:131] Top shape: 64 (64)
I0426 20:50:09.873106 31697 net.cpp:139] Memory required for data: 200960
I0426 20:50:09.873111 31697 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:09.873169 31697 net.cpp:86] Creating Layer conv0
I0426 20:50:09.873174 31697 net.cpp:408] conv0 <- data
I0426 20:50:09.873184 31697 net.cpp:382] conv0 -> conv0
I0426 20:50:10.101994 31697 net.cpp:124] Setting up conv0
I0426 20:50:10.102035 31697 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:50:10.102039 31697 net.cpp:139] Memory required for data: 7573760
I0426 20:50:10.102053 31697 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:10.102066 31697 net.cpp:86] Creating Layer pool0
I0426 20:50:10.102118 31697 net.cpp:408] pool0 <- conv0
I0426 20:50:10.102124 31697 net.cpp:382] pool0 -> pool0
I0426 20:50:10.102171 31697 net.cpp:124] Setting up pool0
I0426 20:50:10.102185 31697 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:50:10.102188 31697 net.cpp:139] Memory required for data: 9416960
I0426 20:50:10.102191 31697 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:10.102198 31697 net.cpp:86] Creating Layer ip1
I0426 20:50:10.102201 31697 net.cpp:408] ip1 <- pool0
I0426 20:50:10.102206 31697 net.cpp:382] ip1 -> ip1
I0426 20:50:10.115293 31697 net.cpp:124] Setting up ip1
I0426 20:50:10.115322 31697 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:10.115326 31697 net.cpp:139] Memory required for data: 9493760
I0426 20:50:10.115334 31697 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:10.115342 31697 net.cpp:86] Creating Layer relu1
I0426 20:50:10.115346 31697 net.cpp:408] relu1 <- ip1
I0426 20:50:10.115350 31697 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:10.115582 31697 net.cpp:124] Setting up relu1
I0426 20:50:10.115592 31697 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:10.115595 31697 net.cpp:139] Memory required for data: 9570560
I0426 20:50:10.115598 31697 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:10.115605 31697 net.cpp:86] Creating Layer ip2
I0426 20:50:10.115608 31697 net.cpp:408] ip2 <- ip1
I0426 20:50:10.115613 31697 net.cpp:382] ip2 -> ip2
I0426 20:50:10.115881 31697 net.cpp:124] Setting up ip2
I0426 20:50:10.115890 31697 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:10.115892 31697 net.cpp:139] Memory required for data: 9596160
I0426 20:50:10.115900 31697 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:10.115905 31697 net.cpp:86] Creating Layer relu2
I0426 20:50:10.115907 31697 net.cpp:408] relu2 <- ip2
I0426 20:50:10.115911 31697 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:10.116684 31697 net.cpp:124] Setting up relu2
I0426 20:50:10.116696 31697 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:10.116714 31697 net.cpp:139] Memory required for data: 9621760
I0426 20:50:10.116717 31697 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:10.116724 31697 net.cpp:86] Creating Layer ip3
I0426 20:50:10.116727 31697 net.cpp:408] ip3 <- ip2
I0426 20:50:10.116734 31697 net.cpp:382] ip3 -> ip3
I0426 20:50:10.116868 31697 net.cpp:124] Setting up ip3
I0426 20:50:10.116875 31697 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:10.116879 31697 net.cpp:139] Memory required for data: 9624320
I0426 20:50:10.116885 31697 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:10.116892 31697 net.cpp:86] Creating Layer relu3
I0426 20:50:10.116895 31697 net.cpp:408] relu3 <- ip3
I0426 20:50:10.116900 31697 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:10.117048 31697 net.cpp:124] Setting up relu3
I0426 20:50:10.117056 31697 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:10.117059 31697 net.cpp:139] Memory required for data: 9626880
I0426 20:50:10.117063 31697 layer_factory.hpp:77] Creating layer loss
I0426 20:50:10.117069 31697 net.cpp:86] Creating Layer loss
I0426 20:50:10.117071 31697 net.cpp:408] loss <- ip3
I0426 20:50:10.117075 31697 net.cpp:408] loss <- label
I0426 20:50:10.117080 31697 net.cpp:382] loss -> loss
I0426 20:50:10.117094 31697 layer_factory.hpp:77] Creating layer loss
I0426 20:50:10.117341 31697 net.cpp:124] Setting up loss
I0426 20:50:10.117349 31697 net.cpp:131] Top shape: (1)
I0426 20:50:10.117352 31697 net.cpp:134]     with loss weight 1
I0426 20:50:10.117365 31697 net.cpp:139] Memory required for data: 9626884
I0426 20:50:10.117369 31697 net.cpp:200] loss needs backward computation.
I0426 20:50:10.117372 31697 net.cpp:200] relu3 needs backward computation.
I0426 20:50:10.117375 31697 net.cpp:200] ip3 needs backward computation.
I0426 20:50:10.117378 31697 net.cpp:200] relu2 needs backward computation.
I0426 20:50:10.117382 31697 net.cpp:200] ip2 needs backward computation.
I0426 20:50:10.117383 31697 net.cpp:200] relu1 needs backward computation.
I0426 20:50:10.117386 31697 net.cpp:200] ip1 needs backward computation.
I0426 20:50:10.117399 31697 net.cpp:200] pool0 needs backward computation.
I0426 20:50:10.117403 31697 net.cpp:200] conv0 needs backward computation.
I0426 20:50:10.117406 31697 net.cpp:202] mnist does not need backward computation.
I0426 20:50:10.117409 31697 net.cpp:244] This network produces output loss
I0426 20:50:10.117416 31697 net.cpp:257] Network initialization done.
I0426 20:50:10.117684 31697 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test53.prototxt
I0426 20:50:10.117708 31697 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:10.117786 31697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:10.117846 31697 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:10.117889 31697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:10.117902 31697 net.cpp:86] Creating Layer mnist
I0426 20:50:10.117907 31697 net.cpp:382] mnist -> data
I0426 20:50:10.117913 31697 net.cpp:382] mnist -> label
I0426 20:50:10.117992 31697 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:10.119848 31697 net.cpp:124] Setting up mnist
I0426 20:50:10.119874 31697 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:10.119879 31697 net.cpp:131] Top shape: 100 (100)
I0426 20:50:10.119884 31697 net.cpp:139] Memory required for data: 314000
I0426 20:50:10.119886 31697 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:10.119892 31697 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:10.119896 31697 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:10.119900 31697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:10.119906 31697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:10.119979 31697 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:10.119985 31697 net.cpp:131] Top shape: 100 (100)
I0426 20:50:10.119989 31697 net.cpp:131] Top shape: 100 (100)
I0426 20:50:10.119992 31697 net.cpp:139] Memory required for data: 314800
I0426 20:50:10.120004 31697 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:10.120012 31697 net.cpp:86] Creating Layer conv0
I0426 20:50:10.120016 31697 net.cpp:408] conv0 <- data
I0426 20:50:10.120020 31697 net.cpp:382] conv0 -> conv0
I0426 20:50:10.121840 31697 net.cpp:124] Setting up conv0
I0426 20:50:10.121852 31697 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:50:10.121856 31697 net.cpp:139] Memory required for data: 11834800
I0426 20:50:10.121865 31697 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:10.121870 31697 net.cpp:86] Creating Layer pool0
I0426 20:50:10.121888 31697 net.cpp:408] pool0 <- conv0
I0426 20:50:10.121893 31697 net.cpp:382] pool0 -> pool0
I0426 20:50:10.121927 31697 net.cpp:124] Setting up pool0
I0426 20:50:10.121932 31697 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:50:10.121934 31697 net.cpp:139] Memory required for data: 14714800
I0426 20:50:10.121937 31697 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:10.121943 31697 net.cpp:86] Creating Layer ip1
I0426 20:50:10.121947 31697 net.cpp:408] ip1 <- pool0
I0426 20:50:10.121950 31697 net.cpp:382] ip1 -> ip1
I0426 20:50:10.135262 31697 net.cpp:124] Setting up ip1
I0426 20:50:10.135274 31697 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:10.135277 31697 net.cpp:139] Memory required for data: 14834800
I0426 20:50:10.135285 31697 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:10.135290 31697 net.cpp:86] Creating Layer relu1
I0426 20:50:10.135293 31697 net.cpp:408] relu1 <- ip1
I0426 20:50:10.135298 31697 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:10.135478 31697 net.cpp:124] Setting up relu1
I0426 20:50:10.135488 31697 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:10.135491 31697 net.cpp:139] Memory required for data: 14954800
I0426 20:50:10.135494 31697 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:10.135499 31697 net.cpp:86] Creating Layer ip2
I0426 20:50:10.135502 31697 net.cpp:408] ip2 <- ip1
I0426 20:50:10.135507 31697 net.cpp:382] ip2 -> ip2
I0426 20:50:10.135764 31697 net.cpp:124] Setting up ip2
I0426 20:50:10.135771 31697 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:10.135774 31697 net.cpp:139] Memory required for data: 14994800
I0426 20:50:10.135782 31697 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:10.135787 31697 net.cpp:86] Creating Layer relu2
I0426 20:50:10.135789 31697 net.cpp:408] relu2 <- ip2
I0426 20:50:10.135793 31697 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:10.136586 31697 net.cpp:124] Setting up relu2
I0426 20:50:10.136597 31697 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:10.136616 31697 net.cpp:139] Memory required for data: 15034800
I0426 20:50:10.136620 31697 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:10.136627 31697 net.cpp:86] Creating Layer ip3
I0426 20:50:10.136632 31697 net.cpp:408] ip3 <- ip2
I0426 20:50:10.136637 31697 net.cpp:382] ip3 -> ip3
I0426 20:50:10.136734 31697 net.cpp:124] Setting up ip3
I0426 20:50:10.136742 31697 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:10.136745 31697 net.cpp:139] Memory required for data: 15038800
I0426 20:50:10.136750 31697 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:10.136754 31697 net.cpp:86] Creating Layer relu3
I0426 20:50:10.136757 31697 net.cpp:408] relu3 <- ip3
I0426 20:50:10.136761 31697 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:10.136943 31697 net.cpp:124] Setting up relu3
I0426 20:50:10.136952 31697 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:10.136956 31697 net.cpp:139] Memory required for data: 15042800
I0426 20:50:10.136960 31697 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:50:10.136965 31697 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:50:10.136967 31697 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:50:10.136972 31697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:50:10.136978 31697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:50:10.137012 31697 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:50:10.137017 31697 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:10.137030 31697 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:10.137033 31697 net.cpp:139] Memory required for data: 15050800
I0426 20:50:10.137037 31697 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:10.137042 31697 net.cpp:86] Creating Layer accuracy
I0426 20:50:10.137045 31697 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:50:10.137050 31697 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:10.137054 31697 net.cpp:382] accuracy -> accuracy
I0426 20:50:10.137061 31697 net.cpp:124] Setting up accuracy
I0426 20:50:10.137065 31697 net.cpp:131] Top shape: (1)
I0426 20:50:10.137068 31697 net.cpp:139] Memory required for data: 15050804
I0426 20:50:10.137071 31697 layer_factory.hpp:77] Creating layer loss
I0426 20:50:10.137075 31697 net.cpp:86] Creating Layer loss
I0426 20:50:10.137079 31697 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:50:10.137082 31697 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:10.137086 31697 net.cpp:382] loss -> loss
I0426 20:50:10.137092 31697 layer_factory.hpp:77] Creating layer loss
I0426 20:50:10.137331 31697 net.cpp:124] Setting up loss
I0426 20:50:10.137341 31697 net.cpp:131] Top shape: (1)
I0426 20:50:10.137343 31697 net.cpp:134]     with loss weight 1
I0426 20:50:10.137349 31697 net.cpp:139] Memory required for data: 15050808
I0426 20:50:10.137352 31697 net.cpp:200] loss needs backward computation.
I0426 20:50:10.137356 31697 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:10.137359 31697 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:50:10.137362 31697 net.cpp:200] relu3 needs backward computation.
I0426 20:50:10.137365 31697 net.cpp:200] ip3 needs backward computation.
I0426 20:50:10.137367 31697 net.cpp:200] relu2 needs backward computation.
I0426 20:50:10.137370 31697 net.cpp:200] ip2 needs backward computation.
I0426 20:50:10.137373 31697 net.cpp:200] relu1 needs backward computation.
I0426 20:50:10.137375 31697 net.cpp:200] ip1 needs backward computation.
I0426 20:50:10.137378 31697 net.cpp:200] pool0 needs backward computation.
I0426 20:50:10.137382 31697 net.cpp:200] conv0 needs backward computation.
I0426 20:50:10.137385 31697 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:10.137388 31697 net.cpp:202] mnist does not need backward computation.
I0426 20:50:10.137392 31697 net.cpp:244] This network produces output accuracy
I0426 20:50:10.137394 31697 net.cpp:244] This network produces output loss
I0426 20:50:10.137403 31697 net.cpp:257] Network initialization done.
I0426 20:50:10.137439 31697 solver.cpp:56] Solver scaffolding done.
I0426 20:50:10.137679 31697 caffe.cpp:248] Starting Optimization
I0426 20:50:10.137686 31697 solver.cpp:273] Solving LeNet
I0426 20:50:10.137688 31697 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:10.139633 31697 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:10.148627 31697 blocking_queue.cpp:49] Waiting for data
I0426 20:50:10.221849 31704 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:10.222865 31697 solver.cpp:398]     Test net output #0: accuracy = 0.065
I0426 20:50:10.222882 31697 solver.cpp:398]     Test net output #1: loss = 2.31146 (* 1 = 2.31146 loss)
I0426 20:50:10.226200 31697 solver.cpp:219] Iteration 0 (-1.88042e-31 iter/s, 0.0884879s/100 iters), loss = 2.3092
I0426 20:50:10.226223 31697 solver.cpp:238]     Train net output #0: loss = 2.3092 (* 1 = 2.3092 loss)
I0426 20:50:10.226249 31697 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:10.378159 31697 solver.cpp:219] Iteration 100 (658.287 iter/s, 0.151909s/100 iters), loss = 0.57276
I0426 20:50:10.378201 31697 solver.cpp:238]     Train net output #0: loss = 0.57276 (* 1 = 0.57276 loss)
I0426 20:50:10.378222 31697 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:10.529934 31697 solver.cpp:219] Iteration 200 (659.105 iter/s, 0.151721s/100 iters), loss = 0.582388
I0426 20:50:10.529959 31697 solver.cpp:238]     Train net output #0: loss = 0.582388 (* 1 = 0.582388 loss)
I0426 20:50:10.529965 31697 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:10.678740 31697 solver.cpp:219] Iteration 300 (672.189 iter/s, 0.148768s/100 iters), loss = 0.243605
I0426 20:50:10.678763 31697 solver.cpp:238]     Train net output #0: loss = 0.243605 (* 1 = 0.243605 loss)
I0426 20:50:10.678784 31697 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:10.828286 31697 solver.cpp:219] Iteration 400 (668.851 iter/s, 0.14951s/100 iters), loss = 0.320642
I0426 20:50:10.828310 31697 solver.cpp:238]     Train net output #0: loss = 0.320642 (* 1 = 0.320642 loss)
I0426 20:50:10.828315 31697 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:10.976169 31697 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:11.049007 31704 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:11.051602 31697 solver.cpp:398]     Test net output #0: accuracy = 0.8751
I0426 20:50:11.051622 31697 solver.cpp:398]     Test net output #1: loss = 0.343031 (* 1 = 0.343031 loss)
I0426 20:50:11.052806 31697 solver.cpp:219] Iteration 500 (445.473 iter/s, 0.22448s/100 iters), loss = 0.495365
I0426 20:50:11.052847 31697 solver.cpp:238]     Train net output #0: loss = 0.495365 (* 1 = 0.495365 loss)
I0426 20:50:11.052870 31697 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:11.205617 31697 solver.cpp:219] Iteration 600 (654.637 iter/s, 0.152756s/100 iters), loss = 0.272851
I0426 20:50:11.205659 31697 solver.cpp:238]     Train net output #0: loss = 0.272851 (* 1 = 0.272851 loss)
I0426 20:50:11.205667 31697 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:11.358963 31697 solver.cpp:219] Iteration 700 (652.359 iter/s, 0.15329s/100 iters), loss = 0.626431
I0426 20:50:11.358994 31697 solver.cpp:238]     Train net output #0: loss = 0.626431 (* 1 = 0.626431 loss)
I0426 20:50:11.359015 31697 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:11.513355 31697 solver.cpp:219] Iteration 800 (647.885 iter/s, 0.154348s/100 iters), loss = 0.489391
I0426 20:50:11.513384 31697 solver.cpp:238]     Train net output #0: loss = 0.489391 (* 1 = 0.489391 loss)
I0426 20:50:11.513391 31697 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:11.666839 31697 solver.cpp:219] Iteration 900 (651.711 iter/s, 0.153442s/100 iters), loss = 0.165183
I0426 20:50:11.666868 31697 solver.cpp:238]     Train net output #0: loss = 0.165183 (* 1 = 0.165183 loss)
I0426 20:50:11.666877 31697 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:11.718338 31703 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:11.818770 31697 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:11.853374 31697 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:11.866936 31697 solver.cpp:311] Iteration 1000, loss = 0.108494
I0426 20:50:11.866961 31697 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:11.942064 31704 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:11.943130 31697 solver.cpp:398]     Test net output #0: accuracy = 0.9711
I0426 20:50:11.943151 31697 solver.cpp:398]     Test net output #1: loss = 0.0918107 (* 1 = 0.0918107 loss)
I0426 20:50:11.943156 31697 solver.cpp:316] Optimization Done.
I0426 20:50:11.943159 31697 caffe.cpp:259] Optimization Done.
