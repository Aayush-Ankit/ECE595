I0426 20:55:11.836786   355 caffe.cpp:218] Using GPUs 0
I0426 20:55:11.874002   355 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:12.413604   355 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test175.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:12.413738   355 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test175.prototxt
I0426 20:55:12.414144   355 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:12.414165   355 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:12.414266   355 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:12.414346   355 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:12.414443   355 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:12.414464   355 net.cpp:86] Creating Layer mnist
I0426 20:55:12.414474   355 net.cpp:382] mnist -> data
I0426 20:55:12.414495   355 net.cpp:382] mnist -> label
I0426 20:55:12.415598   355 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:12.418164   355 net.cpp:124] Setting up mnist
I0426 20:55:12.418181   355 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:12.418189   355 net.cpp:131] Top shape: 64 (64)
I0426 20:55:12.418192   355 net.cpp:139] Memory required for data: 200960
I0426 20:55:12.418200   355 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:12.418215   355 net.cpp:86] Creating Layer conv0
I0426 20:55:12.418236   355 net.cpp:408] conv0 <- data
I0426 20:55:12.418251   355 net.cpp:382] conv0 -> conv0
I0426 20:55:12.714007   355 net.cpp:124] Setting up conv0
I0426 20:55:12.714040   355 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:12.714045   355 net.cpp:139] Memory required for data: 7573760
I0426 20:55:12.714063   355 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:12.714079   355 net.cpp:86] Creating Layer pool0
I0426 20:55:12.714084   355 net.cpp:408] pool0 <- conv0
I0426 20:55:12.714092   355 net.cpp:382] pool0 -> pool0
I0426 20:55:12.714145   355 net.cpp:124] Setting up pool0
I0426 20:55:12.714153   355 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:12.714156   355 net.cpp:139] Memory required for data: 9416960
I0426 20:55:12.714160   355 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:12.714172   355 net.cpp:86] Creating Layer conv1
I0426 20:55:12.714176   355 net.cpp:408] conv1 <- pool0
I0426 20:55:12.714184   355 net.cpp:382] conv1 -> conv1
I0426 20:55:12.716940   355 net.cpp:124] Setting up conv1
I0426 20:55:12.716958   355 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:12.716962   355 net.cpp:139] Memory required for data: 10236160
I0426 20:55:12.716974   355 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:12.716982   355 net.cpp:86] Creating Layer pool1
I0426 20:55:12.716986   355 net.cpp:408] pool1 <- conv1
I0426 20:55:12.716992   355 net.cpp:382] pool1 -> pool1
I0426 20:55:12.717036   355 net.cpp:124] Setting up pool1
I0426 20:55:12.717043   355 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:12.717047   355 net.cpp:139] Memory required for data: 10440960
I0426 20:55:12.717051   355 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:12.717059   355 net.cpp:86] Creating Layer ip1
I0426 20:55:12.717063   355 net.cpp:408] ip1 <- pool1
I0426 20:55:12.717068   355 net.cpp:382] ip1 -> ip1
I0426 20:55:12.718688   355 net.cpp:124] Setting up ip1
I0426 20:55:12.718703   355 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:12.718708   355 net.cpp:139] Memory required for data: 10466560
I0426 20:55:12.718717   355 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:12.718725   355 net.cpp:86] Creating Layer relu1
I0426 20:55:12.718729   355 net.cpp:408] relu1 <- ip1
I0426 20:55:12.718736   355 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:12.718940   355 net.cpp:124] Setting up relu1
I0426 20:55:12.718951   355 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:12.718955   355 net.cpp:139] Memory required for data: 10492160
I0426 20:55:12.718960   355 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:12.718967   355 net.cpp:86] Creating Layer ip2
I0426 20:55:12.718971   355 net.cpp:408] ip2 <- ip1
I0426 20:55:12.718976   355 net.cpp:382] ip2 -> ip2
I0426 20:55:12.720140   355 net.cpp:124] Setting up ip2
I0426 20:55:12.720155   355 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:12.720160   355 net.cpp:139] Memory required for data: 10517760
I0426 20:55:12.720167   355 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:12.720175   355 net.cpp:86] Creating Layer relu2
I0426 20:55:12.720180   355 net.cpp:408] relu2 <- ip2
I0426 20:55:12.720185   355 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:12.721143   355 net.cpp:124] Setting up relu2
I0426 20:55:12.721158   355 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:12.721163   355 net.cpp:139] Memory required for data: 10543360
I0426 20:55:12.721168   355 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:12.721176   355 net.cpp:86] Creating Layer ip3
I0426 20:55:12.721180   355 net.cpp:408] ip3 <- ip2
I0426 20:55:12.721186   355 net.cpp:382] ip3 -> ip3
I0426 20:55:12.721315   355 net.cpp:124] Setting up ip3
I0426 20:55:12.721324   355 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:12.721328   355 net.cpp:139] Memory required for data: 10545920
I0426 20:55:12.721338   355 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:12.721344   355 net.cpp:86] Creating Layer relu3
I0426 20:55:12.721349   355 net.cpp:408] relu3 <- ip3
I0426 20:55:12.721354   355 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:12.721554   355 net.cpp:124] Setting up relu3
I0426 20:55:12.721565   355 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:12.721568   355 net.cpp:139] Memory required for data: 10548480
I0426 20:55:12.721572   355 layer_factory.hpp:77] Creating layer loss
I0426 20:55:12.721580   355 net.cpp:86] Creating Layer loss
I0426 20:55:12.721582   355 net.cpp:408] loss <- ip3
I0426 20:55:12.721587   355 net.cpp:408] loss <- label
I0426 20:55:12.721595   355 net.cpp:382] loss -> loss
I0426 20:55:12.721614   355 layer_factory.hpp:77] Creating layer loss
I0426 20:55:12.721894   355 net.cpp:124] Setting up loss
I0426 20:55:12.721905   355 net.cpp:131] Top shape: (1)
I0426 20:55:12.721909   355 net.cpp:134]     with loss weight 1
I0426 20:55:12.721925   355 net.cpp:139] Memory required for data: 10548484
I0426 20:55:12.721930   355 net.cpp:200] loss needs backward computation.
I0426 20:55:12.721933   355 net.cpp:200] relu3 needs backward computation.
I0426 20:55:12.721937   355 net.cpp:200] ip3 needs backward computation.
I0426 20:55:12.721941   355 net.cpp:200] relu2 needs backward computation.
I0426 20:55:12.721945   355 net.cpp:200] ip2 needs backward computation.
I0426 20:55:12.721948   355 net.cpp:200] relu1 needs backward computation.
I0426 20:55:12.721951   355 net.cpp:200] ip1 needs backward computation.
I0426 20:55:12.721956   355 net.cpp:200] pool1 needs backward computation.
I0426 20:55:12.721958   355 net.cpp:200] conv1 needs backward computation.
I0426 20:55:12.721962   355 net.cpp:200] pool0 needs backward computation.
I0426 20:55:12.721966   355 net.cpp:200] conv0 needs backward computation.
I0426 20:55:12.721971   355 net.cpp:202] mnist does not need backward computation.
I0426 20:55:12.721973   355 net.cpp:244] This network produces output loss
I0426 20:55:12.721984   355 net.cpp:257] Network initialization done.
I0426 20:55:12.722369   355 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test175.prototxt
I0426 20:55:12.722401   355 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:12.722512   355 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:12.722609   355 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:12.722664   355 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:12.722679   355 net.cpp:86] Creating Layer mnist
I0426 20:55:12.722685   355 net.cpp:382] mnist -> data
I0426 20:55:12.722694   355 net.cpp:382] mnist -> label
I0426 20:55:12.722798   355 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:12.724123   355 net.cpp:124] Setting up mnist
I0426 20:55:12.724136   355 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:12.724143   355 net.cpp:131] Top shape: 100 (100)
I0426 20:55:12.724145   355 net.cpp:139] Memory required for data: 314000
I0426 20:55:12.724150   355 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:12.724159   355 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:12.724162   355 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:12.724169   355 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:12.724175   355 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:12.724234   355 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:12.724242   355 net.cpp:131] Top shape: 100 (100)
I0426 20:55:12.724246   355 net.cpp:131] Top shape: 100 (100)
I0426 20:55:12.724251   355 net.cpp:139] Memory required for data: 314800
I0426 20:55:12.724253   355 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:12.724263   355 net.cpp:86] Creating Layer conv0
I0426 20:55:12.724267   355 net.cpp:408] conv0 <- data
I0426 20:55:12.724273   355 net.cpp:382] conv0 -> conv0
I0426 20:55:12.726266   355 net.cpp:124] Setting up conv0
I0426 20:55:12.726284   355 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:12.726289   355 net.cpp:139] Memory required for data: 11834800
I0426 20:55:12.726300   355 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:12.726307   355 net.cpp:86] Creating Layer pool0
I0426 20:55:12.726312   355 net.cpp:408] pool0 <- conv0
I0426 20:55:12.726318   355 net.cpp:382] pool0 -> pool0
I0426 20:55:12.726361   355 net.cpp:124] Setting up pool0
I0426 20:55:12.726367   355 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:12.726372   355 net.cpp:139] Memory required for data: 14714800
I0426 20:55:12.726374   355 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:12.726384   355 net.cpp:86] Creating Layer conv1
I0426 20:55:12.726388   355 net.cpp:408] conv1 <- pool0
I0426 20:55:12.726394   355 net.cpp:382] conv1 -> conv1
I0426 20:55:12.728606   355 net.cpp:124] Setting up conv1
I0426 20:55:12.728621   355 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:12.728626   355 net.cpp:139] Memory required for data: 15994800
I0426 20:55:12.728637   355 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:12.728646   355 net.cpp:86] Creating Layer pool1
I0426 20:55:12.728652   355 net.cpp:408] pool1 <- conv1
I0426 20:55:12.728657   355 net.cpp:382] pool1 -> pool1
I0426 20:55:12.728703   355 net.cpp:124] Setting up pool1
I0426 20:55:12.728709   355 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:12.728713   355 net.cpp:139] Memory required for data: 16314800
I0426 20:55:12.728718   355 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:12.728726   355 net.cpp:86] Creating Layer ip1
I0426 20:55:12.728729   355 net.cpp:408] ip1 <- pool1
I0426 20:55:12.728735   355 net.cpp:382] ip1 -> ip1
I0426 20:55:12.729413   355 net.cpp:124] Setting up ip1
I0426 20:55:12.729423   355 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:12.729437   355 net.cpp:139] Memory required for data: 16354800
I0426 20:55:12.729447   355 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:12.729457   355 net.cpp:86] Creating Layer relu1
I0426 20:55:12.729462   355 net.cpp:408] relu1 <- ip1
I0426 20:55:12.729467   355 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:12.729753   355 net.cpp:124] Setting up relu1
I0426 20:55:12.729766   355 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:12.729770   355 net.cpp:139] Memory required for data: 16394800
I0426 20:55:12.729774   355 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:12.729784   355 net.cpp:86] Creating Layer ip2
I0426 20:55:12.729789   355 net.cpp:408] ip2 <- ip1
I0426 20:55:12.729796   355 net.cpp:382] ip2 -> ip2
I0426 20:55:12.729987   355 net.cpp:124] Setting up ip2
I0426 20:55:12.729996   355 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:12.730000   355 net.cpp:139] Memory required for data: 16434800
I0426 20:55:12.730006   355 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:12.730012   355 net.cpp:86] Creating Layer relu2
I0426 20:55:12.730016   355 net.cpp:408] relu2 <- ip2
I0426 20:55:12.730021   355 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:12.730217   355 net.cpp:124] Setting up relu2
I0426 20:55:12.730227   355 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:12.730232   355 net.cpp:139] Memory required for data: 16474800
I0426 20:55:12.730235   355 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:12.730242   355 net.cpp:86] Creating Layer ip3
I0426 20:55:12.730245   355 net.cpp:408] ip3 <- ip2
I0426 20:55:12.730253   355 net.cpp:382] ip3 -> ip3
I0426 20:55:12.730383   355 net.cpp:124] Setting up ip3
I0426 20:55:12.730392   355 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:12.730396   355 net.cpp:139] Memory required for data: 16478800
I0426 20:55:12.730406   355 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:12.730412   355 net.cpp:86] Creating Layer relu3
I0426 20:55:12.730423   355 net.cpp:408] relu3 <- ip3
I0426 20:55:12.730430   355 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:12.731485   355 net.cpp:124] Setting up relu3
I0426 20:55:12.731500   355 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:12.731504   355 net.cpp:139] Memory required for data: 16482800
I0426 20:55:12.731508   355 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:55:12.731514   355 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:55:12.731519   355 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:55:12.731526   355 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:55:12.731534   355 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:55:12.731580   355 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:55:12.731587   355 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:12.731591   355 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:12.731595   355 net.cpp:139] Memory required for data: 16490800
I0426 20:55:12.731598   355 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:12.731606   355 net.cpp:86] Creating Layer accuracy
I0426 20:55:12.731611   355 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:55:12.731616   355 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:12.731621   355 net.cpp:382] accuracy -> accuracy
I0426 20:55:12.731631   355 net.cpp:124] Setting up accuracy
I0426 20:55:12.731636   355 net.cpp:131] Top shape: (1)
I0426 20:55:12.731639   355 net.cpp:139] Memory required for data: 16490804
I0426 20:55:12.731642   355 layer_factory.hpp:77] Creating layer loss
I0426 20:55:12.731648   355 net.cpp:86] Creating Layer loss
I0426 20:55:12.731652   355 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:55:12.731657   355 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:12.731662   355 net.cpp:382] loss -> loss
I0426 20:55:12.731669   355 layer_factory.hpp:77] Creating layer loss
I0426 20:55:12.731963   355 net.cpp:124] Setting up loss
I0426 20:55:12.731976   355 net.cpp:131] Top shape: (1)
I0426 20:55:12.731981   355 net.cpp:134]     with loss weight 1
I0426 20:55:12.731999   355 net.cpp:139] Memory required for data: 16490808
I0426 20:55:12.732003   355 net.cpp:200] loss needs backward computation.
I0426 20:55:12.732009   355 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:12.732013   355 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:55:12.732017   355 net.cpp:200] relu3 needs backward computation.
I0426 20:55:12.732020   355 net.cpp:200] ip3 needs backward computation.
I0426 20:55:12.732024   355 net.cpp:200] relu2 needs backward computation.
I0426 20:55:12.732028   355 net.cpp:200] ip2 needs backward computation.
I0426 20:55:12.732031   355 net.cpp:200] relu1 needs backward computation.
I0426 20:55:12.732035   355 net.cpp:200] ip1 needs backward computation.
I0426 20:55:12.732038   355 net.cpp:200] pool1 needs backward computation.
I0426 20:55:12.732043   355 net.cpp:200] conv1 needs backward computation.
I0426 20:55:12.732046   355 net.cpp:200] pool0 needs backward computation.
I0426 20:55:12.732049   355 net.cpp:200] conv0 needs backward computation.
I0426 20:55:12.732055   355 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:12.732059   355 net.cpp:202] mnist does not need backward computation.
I0426 20:55:12.732062   355 net.cpp:244] This network produces output accuracy
I0426 20:55:12.732066   355 net.cpp:244] This network produces output loss
I0426 20:55:12.732080   355 net.cpp:257] Network initialization done.
I0426 20:55:12.732131   355 solver.cpp:56] Solver scaffolding done.
I0426 20:55:12.732584   355 caffe.cpp:248] Starting Optimization
I0426 20:55:12.732591   355 solver.cpp:273] Solving LeNet
I0426 20:55:12.732595   355 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:12.733595   355 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:12.818630   362 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:12.820890   355 solver.cpp:398]     Test net output #0: accuracy = 0.1622
I0426 20:55:12.820914   355 solver.cpp:398]     Test net output #1: loss = 2.28722 (* 1 = 2.28722 loss)
I0426 20:55:12.826176   355 solver.cpp:219] Iteration 0 (-9.48025e-31 iter/s, 0.0935475s/100 iters), loss = 2.29442
I0426 20:55:12.826206   355 solver.cpp:238]     Train net output #0: loss = 2.29442 (* 1 = 2.29442 loss)
I0426 20:55:12.826220   355 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:12.994472   355 solver.cpp:219] Iteration 100 (594.359 iter/s, 0.168248s/100 iters), loss = 0.733635
I0426 20:55:12.994498   355 solver.cpp:238]     Train net output #0: loss = 0.733635 (* 1 = 0.733635 loss)
I0426 20:55:12.994504   355 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:13.162675   355 solver.cpp:219] Iteration 200 (594.656 iter/s, 0.168164s/100 iters), loss = 0.85428
I0426 20:55:13.162703   355 solver.cpp:238]     Train net output #0: loss = 0.85428 (* 1 = 0.85428 loss)
I0426 20:55:13.162710   355 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:13.328675   355 solver.cpp:219] Iteration 300 (602.556 iter/s, 0.16596s/100 iters), loss = 0.316011
I0426 20:55:13.328714   355 solver.cpp:238]     Train net output #0: loss = 0.316011 (* 1 = 0.316011 loss)
I0426 20:55:13.328722   355 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:13.493758   355 solver.cpp:219] Iteration 400 (605.947 iter/s, 0.165031s/100 iters), loss = 0.207411
I0426 20:55:13.493788   355 solver.cpp:238]     Train net output #0: loss = 0.207411 (* 1 = 0.207411 loss)
I0426 20:55:13.493795   355 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:13.655696   355 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:13.733783   362 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:13.736531   355 solver.cpp:398]     Test net output #0: accuracy = 0.8588
I0426 20:55:13.736567   355 solver.cpp:398]     Test net output #1: loss = 0.353086 (* 1 = 0.353086 loss)
I0426 20:55:13.738129   355 solver.cpp:219] Iteration 500 (409.29 iter/s, 0.244325s/100 iters), loss = 0.350744
I0426 20:55:13.738168   355 solver.cpp:238]     Train net output #0: loss = 0.350744 (* 1 = 0.350744 loss)
I0426 20:55:13.738188   355 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:13.901985   355 solver.cpp:219] Iteration 600 (610.428 iter/s, 0.16382s/100 iters), loss = 0.115686
I0426 20:55:13.902025   355 solver.cpp:238]     Train net output #0: loss = 0.115685 (* 1 = 0.115685 loss)
I0426 20:55:13.902032   355 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:14.079509   355 solver.cpp:219] Iteration 700 (563.442 iter/s, 0.177481s/100 iters), loss = 0.134578
I0426 20:55:14.079547   355 solver.cpp:238]     Train net output #0: loss = 0.134578 (* 1 = 0.134578 loss)
I0426 20:55:14.079556   355 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:14.257388   355 solver.cpp:219] Iteration 800 (562.348 iter/s, 0.177826s/100 iters), loss = 0.241583
I0426 20:55:14.257426   355 solver.cpp:238]     Train net output #0: loss = 0.241583 (* 1 = 0.241583 loss)
I0426 20:55:14.257436   355 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:14.440073   355 solver.cpp:219] Iteration 900 (547.551 iter/s, 0.182631s/100 iters), loss = 0.168558
I0426 20:55:14.440119   355 solver.cpp:238]     Train net output #0: loss = 0.168557 (* 1 = 0.168557 loss)
I0426 20:55:14.440129   355 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:14.500089   361 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:14.618780   355 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:14.623064   355 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:14.625460   355 solver.cpp:311] Iteration 1000, loss = 0.100793
I0426 20:55:14.625483   355 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:14.706796   362 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:14.709725   355 solver.cpp:398]     Test net output #0: accuracy = 0.9785
I0426 20:55:14.709748   355 solver.cpp:398]     Test net output #1: loss = 0.0669801 (* 1 = 0.0669801 loss)
I0426 20:55:14.709761   355 solver.cpp:316] Optimization Done.
I0426 20:55:14.709764   355 caffe.cpp:259] Optimization Done.
