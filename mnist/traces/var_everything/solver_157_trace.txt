I0426 20:54:20.793381 32652 caffe.cpp:218] Using GPUs 0
I0426 20:54:20.830262 32652 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:21.357476 32652 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test157.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:21.357633 32652 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test157.prototxt
I0426 20:54:21.358029 32652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:21.358050 32652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:21.358168 32652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:21.358276 32652 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:21.358413 32652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:21.358448 32652 net.cpp:86] Creating Layer mnist
I0426 20:54:21.358464 32652 net.cpp:382] mnist -> data
I0426 20:54:21.358494 32652 net.cpp:382] mnist -> label
I0426 20:54:21.359693 32652 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:21.362264 32652 net.cpp:124] Setting up mnist
I0426 20:54:21.362282 32652 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:21.362290 32652 net.cpp:131] Top shape: 64 (64)
I0426 20:54:21.362293 32652 net.cpp:139] Memory required for data: 200960
I0426 20:54:21.362301 32652 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:21.362323 32652 net.cpp:86] Creating Layer conv0
I0426 20:54:21.362331 32652 net.cpp:408] conv0 <- data
I0426 20:54:21.362352 32652 net.cpp:382] conv0 -> conv0
I0426 20:54:21.640866 32652 net.cpp:124] Setting up conv0
I0426 20:54:21.640892 32652 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:21.640895 32652 net.cpp:139] Memory required for data: 7573760
I0426 20:54:21.640970 32652 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:21.640991 32652 net.cpp:86] Creating Layer pool0
I0426 20:54:21.640998 32652 net.cpp:408] pool0 <- conv0
I0426 20:54:21.641007 32652 net.cpp:382] pool0 -> pool0
I0426 20:54:21.641062 32652 net.cpp:124] Setting up pool0
I0426 20:54:21.641072 32652 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:21.641074 32652 net.cpp:139] Memory required for data: 9416960
I0426 20:54:21.641079 32652 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:21.641094 32652 net.cpp:86] Creating Layer conv1
I0426 20:54:21.641101 32652 net.cpp:408] conv1 <- pool0
I0426 20:54:21.641109 32652 net.cpp:382] conv1 -> conv1
I0426 20:54:21.643213 32652 net.cpp:124] Setting up conv1
I0426 20:54:21.643226 32652 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:21.643229 32652 net.cpp:139] Memory required for data: 9826560
I0426 20:54:21.643237 32652 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:21.643244 32652 net.cpp:86] Creating Layer pool1
I0426 20:54:21.643249 32652 net.cpp:408] pool1 <- conv1
I0426 20:54:21.643252 32652 net.cpp:382] pool1 -> pool1
I0426 20:54:21.643299 32652 net.cpp:124] Setting up pool1
I0426 20:54:21.643311 32652 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:21.643313 32652 net.cpp:139] Memory required for data: 9928960
I0426 20:54:21.643317 32652 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:21.643327 32652 net.cpp:86] Creating Layer ip1
I0426 20:54:21.643333 32652 net.cpp:408] ip1 <- pool1
I0426 20:54:21.643342 32652 net.cpp:382] ip1 -> ip1
I0426 20:54:21.643671 32652 net.cpp:124] Setting up ip1
I0426 20:54:21.643679 32652 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:21.643683 32652 net.cpp:139] Memory required for data: 9954560
I0426 20:54:21.643694 32652 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:21.643707 32652 net.cpp:86] Creating Layer relu1
I0426 20:54:21.643712 32652 net.cpp:408] relu1 <- ip1
I0426 20:54:21.643719 32652 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:21.643921 32652 net.cpp:124] Setting up relu1
I0426 20:54:21.643931 32652 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:21.643935 32652 net.cpp:139] Memory required for data: 9980160
I0426 20:54:21.643940 32652 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:21.643950 32652 net.cpp:86] Creating Layer ip2
I0426 20:54:21.643956 32652 net.cpp:408] ip2 <- ip1
I0426 20:54:21.643965 32652 net.cpp:382] ip2 -> ip2
I0426 20:54:21.644071 32652 net.cpp:124] Setting up ip2
I0426 20:54:21.644079 32652 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:21.644083 32652 net.cpp:139] Memory required for data: 9982720
I0426 20:54:21.644091 32652 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:21.644100 32652 net.cpp:86] Creating Layer relu2
I0426 20:54:21.644107 32652 net.cpp:408] relu2 <- ip2
I0426 20:54:21.644114 32652 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:21.644902 32652 net.cpp:124] Setting up relu2
I0426 20:54:21.644915 32652 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:21.644918 32652 net.cpp:139] Memory required for data: 9985280
I0426 20:54:21.644923 32652 layer_factory.hpp:77] Creating layer loss
I0426 20:54:21.644937 32652 net.cpp:86] Creating Layer loss
I0426 20:54:21.644944 32652 net.cpp:408] loss <- ip2
I0426 20:54:21.644969 32652 net.cpp:408] loss <- label
I0426 20:54:21.644979 32652 net.cpp:382] loss -> loss
I0426 20:54:21.645000 32652 layer_factory.hpp:77] Creating layer loss
I0426 20:54:21.645251 32652 net.cpp:124] Setting up loss
I0426 20:54:21.645259 32652 net.cpp:131] Top shape: (1)
I0426 20:54:21.645262 32652 net.cpp:134]     with loss weight 1
I0426 20:54:21.645297 32652 net.cpp:139] Memory required for data: 9985284
I0426 20:54:21.645303 32652 net.cpp:200] loss needs backward computation.
I0426 20:54:21.645308 32652 net.cpp:200] relu2 needs backward computation.
I0426 20:54:21.645313 32652 net.cpp:200] ip2 needs backward computation.
I0426 20:54:21.645316 32652 net.cpp:200] relu1 needs backward computation.
I0426 20:54:21.645321 32652 net.cpp:200] ip1 needs backward computation.
I0426 20:54:21.645340 32652 net.cpp:200] pool1 needs backward computation.
I0426 20:54:21.645344 32652 net.cpp:200] conv1 needs backward computation.
I0426 20:54:21.645349 32652 net.cpp:200] pool0 needs backward computation.
I0426 20:54:21.645354 32652 net.cpp:200] conv0 needs backward computation.
I0426 20:54:21.645359 32652 net.cpp:202] mnist does not need backward computation.
I0426 20:54:21.645362 32652 net.cpp:244] This network produces output loss
I0426 20:54:21.645377 32652 net.cpp:257] Network initialization done.
I0426 20:54:21.645674 32652 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test157.prototxt
I0426 20:54:21.645706 32652 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:21.645795 32652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:21.645887 32652 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:21.645946 32652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:21.645961 32652 net.cpp:86] Creating Layer mnist
I0426 20:54:21.645970 32652 net.cpp:382] mnist -> data
I0426 20:54:21.645982 32652 net.cpp:382] mnist -> label
I0426 20:54:21.646116 32652 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:21.648093 32652 net.cpp:124] Setting up mnist
I0426 20:54:21.648106 32652 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:21.648126 32652 net.cpp:131] Top shape: 100 (100)
I0426 20:54:21.648129 32652 net.cpp:139] Memory required for data: 314000
I0426 20:54:21.648133 32652 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:21.648139 32652 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:21.648142 32652 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:21.648149 32652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:21.648154 32652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:21.648290 32652 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:21.648301 32652 net.cpp:131] Top shape: 100 (100)
I0426 20:54:21.648305 32652 net.cpp:131] Top shape: 100 (100)
I0426 20:54:21.648308 32652 net.cpp:139] Memory required for data: 314800
I0426 20:54:21.648311 32652 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:21.648320 32652 net.cpp:86] Creating Layer conv0
I0426 20:54:21.648327 32652 net.cpp:408] conv0 <- data
I0426 20:54:21.648351 32652 net.cpp:382] conv0 -> conv0
I0426 20:54:21.650045 32652 net.cpp:124] Setting up conv0
I0426 20:54:21.650074 32652 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:21.650077 32652 net.cpp:139] Memory required for data: 11834800
I0426 20:54:21.650086 32652 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:21.650094 32652 net.cpp:86] Creating Layer pool0
I0426 20:54:21.650099 32652 net.cpp:408] pool0 <- conv0
I0426 20:54:21.650104 32652 net.cpp:382] pool0 -> pool0
I0426 20:54:21.650156 32652 net.cpp:124] Setting up pool0
I0426 20:54:21.650182 32652 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:21.650187 32652 net.cpp:139] Memory required for data: 14714800
I0426 20:54:21.650192 32652 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:21.650208 32652 net.cpp:86] Creating Layer conv1
I0426 20:54:21.650214 32652 net.cpp:408] conv1 <- pool0
I0426 20:54:21.650238 32652 net.cpp:382] conv1 -> conv1
I0426 20:54:21.651939 32652 net.cpp:124] Setting up conv1
I0426 20:54:21.651952 32652 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:21.651971 32652 net.cpp:139] Memory required for data: 15354800
I0426 20:54:21.651979 32652 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:21.651985 32652 net.cpp:86] Creating Layer pool1
I0426 20:54:21.651988 32652 net.cpp:408] pool1 <- conv1
I0426 20:54:21.651993 32652 net.cpp:382] pool1 -> pool1
I0426 20:54:21.652046 32652 net.cpp:124] Setting up pool1
I0426 20:54:21.652056 32652 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:21.652061 32652 net.cpp:139] Memory required for data: 15514800
I0426 20:54:21.652066 32652 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:21.652076 32652 net.cpp:86] Creating Layer ip1
I0426 20:54:21.652081 32652 net.cpp:408] ip1 <- pool1
I0426 20:54:21.652091 32652 net.cpp:382] ip1 -> ip1
I0426 20:54:21.652438 32652 net.cpp:124] Setting up ip1
I0426 20:54:21.652446 32652 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:21.652464 32652 net.cpp:139] Memory required for data: 15554800
I0426 20:54:21.652472 32652 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:21.652482 32652 net.cpp:86] Creating Layer relu1
I0426 20:54:21.652487 32652 net.cpp:408] relu1 <- ip1
I0426 20:54:21.652492 32652 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:21.652688 32652 net.cpp:124] Setting up relu1
I0426 20:54:21.652703 32652 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:21.652705 32652 net.cpp:139] Memory required for data: 15594800
I0426 20:54:21.652717 32652 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:21.652729 32652 net.cpp:86] Creating Layer ip2
I0426 20:54:21.652735 32652 net.cpp:408] ip2 <- ip1
I0426 20:54:21.652745 32652 net.cpp:382] ip2 -> ip2
I0426 20:54:21.652905 32652 net.cpp:124] Setting up ip2
I0426 20:54:21.652915 32652 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:21.652917 32652 net.cpp:139] Memory required for data: 15598800
I0426 20:54:21.652925 32652 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:21.652932 32652 net.cpp:86] Creating Layer relu2
I0426 20:54:21.652937 32652 net.cpp:408] relu2 <- ip2
I0426 20:54:21.652945 32652 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:21.653187 32652 net.cpp:124] Setting up relu2
I0426 20:54:21.653197 32652 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:21.653199 32652 net.cpp:139] Memory required for data: 15602800
I0426 20:54:21.653203 32652 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:54:21.653210 32652 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:54:21.653216 32652 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:54:21.653223 32652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:54:21.653246 32652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:54:21.653304 32652 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:54:21.653313 32652 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:21.653318 32652 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:21.653322 32652 net.cpp:139] Memory required for data: 15610800
I0426 20:54:21.653327 32652 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:21.653337 32652 net.cpp:86] Creating Layer accuracy
I0426 20:54:21.653344 32652 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:54:21.653352 32652 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:21.653358 32652 net.cpp:382] accuracy -> accuracy
I0426 20:54:21.653369 32652 net.cpp:124] Setting up accuracy
I0426 20:54:21.653376 32652 net.cpp:131] Top shape: (1)
I0426 20:54:21.653380 32652 net.cpp:139] Memory required for data: 15610804
I0426 20:54:21.653385 32652 layer_factory.hpp:77] Creating layer loss
I0426 20:54:21.653393 32652 net.cpp:86] Creating Layer loss
I0426 20:54:21.653398 32652 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:54:21.653403 32652 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:21.653411 32652 net.cpp:382] loss -> loss
I0426 20:54:21.653421 32652 layer_factory.hpp:77] Creating layer loss
I0426 20:54:21.653692 32652 net.cpp:124] Setting up loss
I0426 20:54:21.653704 32652 net.cpp:131] Top shape: (1)
I0426 20:54:21.653708 32652 net.cpp:134]     with loss weight 1
I0426 20:54:21.653714 32652 net.cpp:139] Memory required for data: 15610808
I0426 20:54:21.653719 32652 net.cpp:200] loss needs backward computation.
I0426 20:54:21.653724 32652 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:21.653730 32652 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:54:21.653734 32652 net.cpp:200] relu2 needs backward computation.
I0426 20:54:21.653739 32652 net.cpp:200] ip2 needs backward computation.
I0426 20:54:21.653744 32652 net.cpp:200] relu1 needs backward computation.
I0426 20:54:21.653748 32652 net.cpp:200] ip1 needs backward computation.
I0426 20:54:21.653753 32652 net.cpp:200] pool1 needs backward computation.
I0426 20:54:21.653759 32652 net.cpp:200] conv1 needs backward computation.
I0426 20:54:21.653762 32652 net.cpp:200] pool0 needs backward computation.
I0426 20:54:21.653767 32652 net.cpp:200] conv0 needs backward computation.
I0426 20:54:21.653774 32652 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:21.653779 32652 net.cpp:202] mnist does not need backward computation.
I0426 20:54:21.653784 32652 net.cpp:244] This network produces output accuracy
I0426 20:54:21.653789 32652 net.cpp:244] This network produces output loss
I0426 20:54:21.653805 32652 net.cpp:257] Network initialization done.
I0426 20:54:21.653864 32652 solver.cpp:56] Solver scaffolding done.
I0426 20:54:21.654151 32652 caffe.cpp:248] Starting Optimization
I0426 20:54:21.654172 32652 solver.cpp:273] Solving LeNet
I0426 20:54:21.654176 32652 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:21.655143 32652 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:21.722321 32659 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:21.723306 32652 solver.cpp:398]     Test net output #0: accuracy = 0.0688
I0426 20:54:21.723340 32652 solver.cpp:398]     Test net output #1: loss = 2.34247 (* 1 = 2.34247 loss)
I0426 20:54:21.727785 32652 solver.cpp:219] Iteration 0 (-1.24705e-30 iter/s, 0.0735663s/100 iters), loss = 2.36436
I0426 20:54:21.727823 32652 solver.cpp:238]     Train net output #0: loss = 2.36436 (* 1 = 2.36436 loss)
I0426 20:54:21.727849 32652 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:21.859488 32652 solver.cpp:219] Iteration 100 (759.557 iter/s, 0.131656s/100 iters), loss = 0.23908
I0426 20:54:21.859544 32652 solver.cpp:238]     Train net output #0: loss = 0.23908 (* 1 = 0.23908 loss)
I0426 20:54:21.859557 32652 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:22.007555 32652 solver.cpp:219] Iteration 200 (675.7 iter/s, 0.147995s/100 iters), loss = 0.131954
I0426 20:54:22.007622 32652 solver.cpp:238]     Train net output #0: loss = 0.131954 (* 1 = 0.131954 loss)
I0426 20:54:22.007634 32652 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:22.151414 32652 solver.cpp:219] Iteration 300 (695.493 iter/s, 0.143783s/100 iters), loss = 0.174567
I0426 20:54:22.151453 32652 solver.cpp:238]     Train net output #0: loss = 0.174567 (* 1 = 0.174567 loss)
I0426 20:54:22.151463 32652 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:22.293750 32652 solver.cpp:219] Iteration 400 (702.826 iter/s, 0.142283s/100 iters), loss = 0.108461
I0426 20:54:22.293790 32652 solver.cpp:238]     Train net output #0: loss = 0.108461 (* 1 = 0.108461 loss)
I0426 20:54:22.293800 32652 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:22.437925 32652 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:22.509075 32659 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:22.511536 32652 solver.cpp:398]     Test net output #0: accuracy = 0.9737
I0426 20:54:22.511574 32652 solver.cpp:398]     Test net output #1: loss = 0.0836425 (* 1 = 0.0836425 loss)
I0426 20:54:22.512842 32652 solver.cpp:219] Iteration 500 (456.542 iter/s, 0.219038s/100 iters), loss = 0.113105
I0426 20:54:22.512883 32652 solver.cpp:238]     Train net output #0: loss = 0.113105 (* 1 = 0.113105 loss)
I0426 20:54:22.512892 32652 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:22.649963 32652 solver.cpp:219] Iteration 600 (729.589 iter/s, 0.137063s/100 iters), loss = 0.0865237
I0426 20:54:22.650020 32652 solver.cpp:238]     Train net output #0: loss = 0.0865238 (* 1 = 0.0865238 loss)
I0426 20:54:22.650034 32652 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:22.798130 32652 solver.cpp:219] Iteration 700 (675.199 iter/s, 0.148104s/100 iters), loss = 0.125582
I0426 20:54:22.798178 32652 solver.cpp:238]     Train net output #0: loss = 0.125582 (* 1 = 0.125582 loss)
I0426 20:54:22.798193 32652 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:22.938859 32652 solver.cpp:219] Iteration 800 (710.893 iter/s, 0.140668s/100 iters), loss = 0.229737
I0426 20:54:22.938902 32652 solver.cpp:238]     Train net output #0: loss = 0.229737 (* 1 = 0.229737 loss)
I0426 20:54:22.938918 32652 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:23.081941 32652 solver.cpp:219] Iteration 900 (699.158 iter/s, 0.143029s/100 iters), loss = 0.170567
I0426 20:54:23.081979 32652 solver.cpp:238]     Train net output #0: loss = 0.170567 (* 1 = 0.170567 loss)
I0426 20:54:23.081987 32652 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:23.128092 32658 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:23.219113 32652 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:23.221189 32652 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:23.222491 32652 solver.cpp:311] Iteration 1000, loss = 0.0877988
I0426 20:54:23.222510 32652 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:23.229730 32652 blocking_queue.cpp:49] Waiting for data
I0426 20:54:23.299798 32659 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:23.300802 32652 solver.cpp:398]     Test net output #0: accuracy = 0.9798
I0426 20:54:23.300832 32652 solver.cpp:398]     Test net output #1: loss = 0.0614791 (* 1 = 0.0614791 loss)
I0426 20:54:23.300838 32652 solver.cpp:316] Optimization Done.
I0426 20:54:23.300843 32652 caffe.cpp:259] Optimization Done.
