I0426 20:52:18.880338 32169 caffe.cpp:218] Using GPUs 0
I0426 20:52:18.917521 32169 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:19.441431 32169 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test109.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:19.441576 32169 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test109.prototxt
I0426 20:52:19.441988 32169 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:19.442008 32169 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:19.442121 32169 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:19.442204 32169 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:19.442308 32169 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:19.442333 32169 net.cpp:86] Creating Layer mnist
I0426 20:52:19.442342 32169 net.cpp:382] mnist -> data
I0426 20:52:19.442365 32169 net.cpp:382] mnist -> label
I0426 20:52:19.443475 32169 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:19.446038 32169 net.cpp:124] Setting up mnist
I0426 20:52:19.446056 32169 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:19.446064 32169 net.cpp:131] Top shape: 64 (64)
I0426 20:52:19.446068 32169 net.cpp:139] Memory required for data: 200960
I0426 20:52:19.446074 32169 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:19.446090 32169 net.cpp:86] Creating Layer conv0
I0426 20:52:19.446110 32169 net.cpp:408] conv0 <- data
I0426 20:52:19.446125 32169 net.cpp:382] conv0 -> conv0
I0426 20:52:19.728953 32169 net.cpp:124] Setting up conv0
I0426 20:52:19.728981 32169 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:19.728984 32169 net.cpp:139] Memory required for data: 3887360
I0426 20:52:19.728999 32169 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:19.729012 32169 net.cpp:86] Creating Layer pool0
I0426 20:52:19.729017 32169 net.cpp:408] pool0 <- conv0
I0426 20:52:19.729022 32169 net.cpp:382] pool0 -> pool0
I0426 20:52:19.729082 32169 net.cpp:124] Setting up pool0
I0426 20:52:19.729089 32169 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:19.729091 32169 net.cpp:139] Memory required for data: 4808960
I0426 20:52:19.729094 32169 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:19.729105 32169 net.cpp:86] Creating Layer conv1
I0426 20:52:19.729109 32169 net.cpp:408] conv1 <- pool0
I0426 20:52:19.729113 32169 net.cpp:382] conv1 -> conv1
I0426 20:52:19.731961 32169 net.cpp:124] Setting up conv1
I0426 20:52:19.731976 32169 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:52:19.731981 32169 net.cpp:139] Memory required for data: 4972800
I0426 20:52:19.731988 32169 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:19.731995 32169 net.cpp:86] Creating Layer pool1
I0426 20:52:19.731999 32169 net.cpp:408] pool1 <- conv1
I0426 20:52:19.732003 32169 net.cpp:382] pool1 -> pool1
I0426 20:52:19.732041 32169 net.cpp:124] Setting up pool1
I0426 20:52:19.732048 32169 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:52:19.732050 32169 net.cpp:139] Memory required for data: 5013760
I0426 20:52:19.732053 32169 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:19.732059 32169 net.cpp:86] Creating Layer ip1
I0426 20:52:19.732062 32169 net.cpp:408] ip1 <- pool1
I0426 20:52:19.732067 32169 net.cpp:382] ip1 -> ip1
I0426 20:52:19.732471 32169 net.cpp:124] Setting up ip1
I0426 20:52:19.732480 32169 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:19.732482 32169 net.cpp:139] Memory required for data: 5090560
I0426 20:52:19.732488 32169 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:19.732493 32169 net.cpp:86] Creating Layer relu1
I0426 20:52:19.732497 32169 net.cpp:408] relu1 <- ip1
I0426 20:52:19.732501 32169 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:19.732712 32169 net.cpp:124] Setting up relu1
I0426 20:52:19.732722 32169 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:19.732724 32169 net.cpp:139] Memory required for data: 5167360
I0426 20:52:19.732728 32169 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:19.732734 32169 net.cpp:86] Creating Layer ip2
I0426 20:52:19.732738 32169 net.cpp:408] ip2 <- ip1
I0426 20:52:19.732743 32169 net.cpp:382] ip2 -> ip2
I0426 20:52:19.733067 32169 net.cpp:124] Setting up ip2
I0426 20:52:19.733075 32169 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:19.733094 32169 net.cpp:139] Memory required for data: 5192960
I0426 20:52:19.733101 32169 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:19.733108 32169 net.cpp:86] Creating Layer relu2
I0426 20:52:19.733111 32169 net.cpp:408] relu2 <- ip2
I0426 20:52:19.733115 32169 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:19.733942 32169 net.cpp:124] Setting up relu2
I0426 20:52:19.733954 32169 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:19.733958 32169 net.cpp:139] Memory required for data: 5218560
I0426 20:52:19.733961 32169 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:19.733968 32169 net.cpp:86] Creating Layer ip3
I0426 20:52:19.733971 32169 net.cpp:408] ip3 <- ip2
I0426 20:52:19.733976 32169 net.cpp:382] ip3 -> ip3
I0426 20:52:19.734097 32169 net.cpp:124] Setting up ip3
I0426 20:52:19.734105 32169 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:19.734108 32169 net.cpp:139] Memory required for data: 5221120
I0426 20:52:19.734117 32169 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:19.734122 32169 net.cpp:86] Creating Layer relu3
I0426 20:52:19.734124 32169 net.cpp:408] relu3 <- ip3
I0426 20:52:19.734128 32169 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:19.734298 32169 net.cpp:124] Setting up relu3
I0426 20:52:19.734308 32169 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:19.734311 32169 net.cpp:139] Memory required for data: 5223680
I0426 20:52:19.734314 32169 layer_factory.hpp:77] Creating layer loss
I0426 20:52:19.734320 32169 net.cpp:86] Creating Layer loss
I0426 20:52:19.734323 32169 net.cpp:408] loss <- ip3
I0426 20:52:19.734328 32169 net.cpp:408] loss <- label
I0426 20:52:19.734333 32169 net.cpp:382] loss -> loss
I0426 20:52:19.734351 32169 layer_factory.hpp:77] Creating layer loss
I0426 20:52:19.734582 32169 net.cpp:124] Setting up loss
I0426 20:52:19.734592 32169 net.cpp:131] Top shape: (1)
I0426 20:52:19.734596 32169 net.cpp:134]     with loss weight 1
I0426 20:52:19.734611 32169 net.cpp:139] Memory required for data: 5223684
I0426 20:52:19.734613 32169 net.cpp:200] loss needs backward computation.
I0426 20:52:19.734617 32169 net.cpp:200] relu3 needs backward computation.
I0426 20:52:19.734621 32169 net.cpp:200] ip3 needs backward computation.
I0426 20:52:19.734623 32169 net.cpp:200] relu2 needs backward computation.
I0426 20:52:19.734627 32169 net.cpp:200] ip2 needs backward computation.
I0426 20:52:19.734628 32169 net.cpp:200] relu1 needs backward computation.
I0426 20:52:19.734632 32169 net.cpp:200] ip1 needs backward computation.
I0426 20:52:19.734634 32169 net.cpp:200] pool1 needs backward computation.
I0426 20:52:19.734637 32169 net.cpp:200] conv1 needs backward computation.
I0426 20:52:19.734642 32169 net.cpp:200] pool0 needs backward computation.
I0426 20:52:19.734644 32169 net.cpp:200] conv0 needs backward computation.
I0426 20:52:19.734647 32169 net.cpp:202] mnist does not need backward computation.
I0426 20:52:19.734650 32169 net.cpp:244] This network produces output loss
I0426 20:52:19.734659 32169 net.cpp:257] Network initialization done.
I0426 20:52:19.735007 32169 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test109.prototxt
I0426 20:52:19.735049 32169 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:19.735138 32169 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:19.735218 32169 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:19.735265 32169 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:19.735276 32169 net.cpp:86] Creating Layer mnist
I0426 20:52:19.735281 32169 net.cpp:382] mnist -> data
I0426 20:52:19.735290 32169 net.cpp:382] mnist -> label
I0426 20:52:19.735375 32169 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:19.737403 32169 net.cpp:124] Setting up mnist
I0426 20:52:19.737416 32169 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:19.737422 32169 net.cpp:131] Top shape: 100 (100)
I0426 20:52:19.737426 32169 net.cpp:139] Memory required for data: 314000
I0426 20:52:19.737428 32169 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:19.737435 32169 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:19.737439 32169 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:19.737443 32169 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:19.737450 32169 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:19.737486 32169 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:19.737507 32169 net.cpp:131] Top shape: 100 (100)
I0426 20:52:19.737511 32169 net.cpp:131] Top shape: 100 (100)
I0426 20:52:19.737514 32169 net.cpp:139] Memory required for data: 314800
I0426 20:52:19.737516 32169 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:19.737524 32169 net.cpp:86] Creating Layer conv0
I0426 20:52:19.737529 32169 net.cpp:408] conv0 <- data
I0426 20:52:19.737534 32169 net.cpp:382] conv0 -> conv0
I0426 20:52:19.739298 32169 net.cpp:124] Setting up conv0
I0426 20:52:19.739312 32169 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:19.739316 32169 net.cpp:139] Memory required for data: 6074800
I0426 20:52:19.739326 32169 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:19.739331 32169 net.cpp:86] Creating Layer pool0
I0426 20:52:19.739336 32169 net.cpp:408] pool0 <- conv0
I0426 20:52:19.739339 32169 net.cpp:382] pool0 -> pool0
I0426 20:52:19.739377 32169 net.cpp:124] Setting up pool0
I0426 20:52:19.739398 32169 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:19.739400 32169 net.cpp:139] Memory required for data: 7514800
I0426 20:52:19.739403 32169 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:19.739413 32169 net.cpp:86] Creating Layer conv1
I0426 20:52:19.739415 32169 net.cpp:408] conv1 <- pool0
I0426 20:52:19.739420 32169 net.cpp:382] conv1 -> conv1
I0426 20:52:19.741729 32169 net.cpp:124] Setting up conv1
I0426 20:52:19.741744 32169 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:52:19.741747 32169 net.cpp:139] Memory required for data: 7770800
I0426 20:52:19.741755 32169 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:19.741762 32169 net.cpp:86] Creating Layer pool1
I0426 20:52:19.741766 32169 net.cpp:408] pool1 <- conv1
I0426 20:52:19.741771 32169 net.cpp:382] pool1 -> pool1
I0426 20:52:19.741825 32169 net.cpp:124] Setting up pool1
I0426 20:52:19.741832 32169 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:52:19.741834 32169 net.cpp:139] Memory required for data: 7834800
I0426 20:52:19.741838 32169 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:19.741853 32169 net.cpp:86] Creating Layer ip1
I0426 20:52:19.741856 32169 net.cpp:408] ip1 <- pool1
I0426 20:52:19.741860 32169 net.cpp:382] ip1 -> ip1
I0426 20:52:19.742321 32169 net.cpp:124] Setting up ip1
I0426 20:52:19.742331 32169 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:19.742350 32169 net.cpp:139] Memory required for data: 7954800
I0426 20:52:19.742373 32169 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:19.742380 32169 net.cpp:86] Creating Layer relu1
I0426 20:52:19.742383 32169 net.cpp:408] relu1 <- ip1
I0426 20:52:19.742403 32169 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:19.742573 32169 net.cpp:124] Setting up relu1
I0426 20:52:19.742583 32169 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:19.742586 32169 net.cpp:139] Memory required for data: 8074800
I0426 20:52:19.742589 32169 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:19.742597 32169 net.cpp:86] Creating Layer ip2
I0426 20:52:19.742601 32169 net.cpp:408] ip2 <- ip1
I0426 20:52:19.742606 32169 net.cpp:382] ip2 -> ip2
I0426 20:52:19.742873 32169 net.cpp:124] Setting up ip2
I0426 20:52:19.742882 32169 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:19.742884 32169 net.cpp:139] Memory required for data: 8114800
I0426 20:52:19.742889 32169 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:19.742894 32169 net.cpp:86] Creating Layer relu2
I0426 20:52:19.742897 32169 net.cpp:408] relu2 <- ip2
I0426 20:52:19.742900 32169 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:19.743150 32169 net.cpp:124] Setting up relu2
I0426 20:52:19.743161 32169 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:19.743170 32169 net.cpp:139] Memory required for data: 8154800
I0426 20:52:19.743173 32169 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:19.743178 32169 net.cpp:86] Creating Layer ip3
I0426 20:52:19.743187 32169 net.cpp:408] ip3 <- ip2
I0426 20:52:19.743193 32169 net.cpp:382] ip3 -> ip3
I0426 20:52:19.743309 32169 net.cpp:124] Setting up ip3
I0426 20:52:19.743316 32169 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:19.743319 32169 net.cpp:139] Memory required for data: 8158800
I0426 20:52:19.743327 32169 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:19.743332 32169 net.cpp:86] Creating Layer relu3
I0426 20:52:19.743336 32169 net.cpp:408] relu3 <- ip3
I0426 20:52:19.743340 32169 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:19.744197 32169 net.cpp:124] Setting up relu3
I0426 20:52:19.744210 32169 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:19.744213 32169 net.cpp:139] Memory required for data: 8162800
I0426 20:52:19.744216 32169 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:52:19.744221 32169 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:52:19.744225 32169 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:52:19.744230 32169 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:52:19.744236 32169 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:52:19.744295 32169 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:52:19.744302 32169 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:19.744305 32169 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:19.744307 32169 net.cpp:139] Memory required for data: 8170800
I0426 20:52:19.744310 32169 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:19.744316 32169 net.cpp:86] Creating Layer accuracy
I0426 20:52:19.744319 32169 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:52:19.744324 32169 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:19.744328 32169 net.cpp:382] accuracy -> accuracy
I0426 20:52:19.744335 32169 net.cpp:124] Setting up accuracy
I0426 20:52:19.744345 32169 net.cpp:131] Top shape: (1)
I0426 20:52:19.744349 32169 net.cpp:139] Memory required for data: 8170804
I0426 20:52:19.744350 32169 layer_factory.hpp:77] Creating layer loss
I0426 20:52:19.744356 32169 net.cpp:86] Creating Layer loss
I0426 20:52:19.744360 32169 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:52:19.744364 32169 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:19.744374 32169 net.cpp:382] loss -> loss
I0426 20:52:19.744379 32169 layer_factory.hpp:77] Creating layer loss
I0426 20:52:19.744626 32169 net.cpp:124] Setting up loss
I0426 20:52:19.744637 32169 net.cpp:131] Top shape: (1)
I0426 20:52:19.744642 32169 net.cpp:134]     with loss weight 1
I0426 20:52:19.744655 32169 net.cpp:139] Memory required for data: 8170808
I0426 20:52:19.744666 32169 net.cpp:200] loss needs backward computation.
I0426 20:52:19.744670 32169 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:19.744674 32169 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:52:19.744678 32169 net.cpp:200] relu3 needs backward computation.
I0426 20:52:19.744679 32169 net.cpp:200] ip3 needs backward computation.
I0426 20:52:19.744683 32169 net.cpp:200] relu2 needs backward computation.
I0426 20:52:19.744685 32169 net.cpp:200] ip2 needs backward computation.
I0426 20:52:19.744688 32169 net.cpp:200] relu1 needs backward computation.
I0426 20:52:19.744701 32169 net.cpp:200] ip1 needs backward computation.
I0426 20:52:19.744704 32169 net.cpp:200] pool1 needs backward computation.
I0426 20:52:19.744707 32169 net.cpp:200] conv1 needs backward computation.
I0426 20:52:19.744715 32169 net.cpp:200] pool0 needs backward computation.
I0426 20:52:19.744719 32169 net.cpp:200] conv0 needs backward computation.
I0426 20:52:19.744721 32169 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:19.744726 32169 net.cpp:202] mnist does not need backward computation.
I0426 20:52:19.744729 32169 net.cpp:244] This network produces output accuracy
I0426 20:52:19.744732 32169 net.cpp:244] This network produces output loss
I0426 20:52:19.744742 32169 net.cpp:257] Network initialization done.
I0426 20:52:19.744788 32169 solver.cpp:56] Solver scaffolding done.
I0426 20:52:19.745158 32169 caffe.cpp:248] Starting Optimization
I0426 20:52:19.745167 32169 solver.cpp:273] Solving LeNet
I0426 20:52:19.745169 32169 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:19.746047 32169 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:19.751368 32169 blocking_queue.cpp:49] Waiting for data
I0426 20:52:19.822674 32176 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:19.823315 32169 solver.cpp:398]     Test net output #0: accuracy = 0.1
I0426 20:52:19.823335 32169 solver.cpp:398]     Test net output #1: loss = 2.32221 (* 1 = 2.32221 loss)
I0426 20:52:19.827777 32169 solver.cpp:219] Iteration 0 (0 iter/s, 0.0825805s/100 iters), loss = 2.33788
I0426 20:52:19.827800 32169 solver.cpp:238]     Train net output #0: loss = 2.33788 (* 1 = 2.33788 loss)
I0426 20:52:19.827813 32169 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:19.935675 32169 solver.cpp:219] Iteration 100 (927.118 iter/s, 0.107861s/100 iters), loss = 1.0124
I0426 20:52:19.935699 32169 solver.cpp:238]     Train net output #0: loss = 1.0124 (* 1 = 1.0124 loss)
I0426 20:52:19.935705 32169 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:20.042109 32169 solver.cpp:219] Iteration 200 (939.887 iter/s, 0.106396s/100 iters), loss = 1.0569
I0426 20:52:20.042132 32169 solver.cpp:238]     Train net output #0: loss = 1.0569 (* 1 = 1.0569 loss)
I0426 20:52:20.042138 32169 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:20.148694 32169 solver.cpp:219] Iteration 300 (938.523 iter/s, 0.10655s/100 iters), loss = 1.04077
I0426 20:52:20.148716 32169 solver.cpp:238]     Train net output #0: loss = 1.04077 (* 1 = 1.04077 loss)
I0426 20:52:20.148722 32169 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:20.253888 32169 solver.cpp:219] Iteration 400 (950.926 iter/s, 0.105161s/100 iters), loss = 0.912404
I0426 20:52:20.253911 32169 solver.cpp:238]     Train net output #0: loss = 0.912404 (* 1 = 0.912404 loss)
I0426 20:52:20.253933 32169 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:20.357097 32169 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:20.413348 32176 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:20.414762 32169 solver.cpp:398]     Test net output #0: accuracy = 0.7332
I0426 20:52:20.414780 32169 solver.cpp:398]     Test net output #1: loss = 0.85739 (* 1 = 0.85739 loss)
I0426 20:52:20.415751 32169 solver.cpp:219] Iteration 500 (617.948 iter/s, 0.161826s/100 iters), loss = 0.698018
I0426 20:52:20.415771 32169 solver.cpp:238]     Train net output #0: loss = 0.698018 (* 1 = 0.698018 loss)
I0426 20:52:20.415807 32169 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:20.524204 32169 solver.cpp:219] Iteration 600 (922.338 iter/s, 0.10842s/100 iters), loss = 0.830079
I0426 20:52:20.524229 32169 solver.cpp:238]     Train net output #0: loss = 0.830079 (* 1 = 0.830079 loss)
I0426 20:52:20.524253 32169 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:20.627816 32169 solver.cpp:219] Iteration 700 (965.469 iter/s, 0.103577s/100 iters), loss = 1.00215
I0426 20:52:20.627840 32169 solver.cpp:238]     Train net output #0: loss = 1.00215 (* 1 = 1.00215 loss)
I0426 20:52:20.627863 32169 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:20.731225 32169 solver.cpp:219] Iteration 800 (967.363 iter/s, 0.103374s/100 iters), loss = 0.84739
I0426 20:52:20.731252 32169 solver.cpp:238]     Train net output #0: loss = 0.84739 (* 1 = 0.84739 loss)
I0426 20:52:20.731279 32169 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:20.833597 32169 solver.cpp:219] Iteration 900 (977.168 iter/s, 0.102337s/100 iters), loss = 0.82617
I0426 20:52:20.833622 32169 solver.cpp:238]     Train net output #0: loss = 0.82617 (* 1 = 0.82617 loss)
I0426 20:52:20.833647 32169 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:20.867508 32175 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:20.934485 32169 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:20.936329 32169 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:20.937582 32169 solver.cpp:311] Iteration 1000, loss = 0.916061
I0426 20:52:20.937597 32169 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:21.003545 32176 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:21.004269 32169 solver.cpp:398]     Test net output #0: accuracy = 0.7604
I0426 20:52:21.004289 32169 solver.cpp:398]     Test net output #1: loss = 0.795838 (* 1 = 0.795838 loss)
I0426 20:52:21.004294 32169 solver.cpp:316] Optimization Done.
I0426 20:52:21.004297 32169 caffe.cpp:259] Optimization Done.
