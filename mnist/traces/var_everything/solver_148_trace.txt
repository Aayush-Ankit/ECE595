I0426 20:53:56.209028 32571 caffe.cpp:218] Using GPUs 0
I0426 20:53:56.237571 32571 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:56.688730 32571 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test148.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:56.688901 32571 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test148.prototxt
I0426 20:53:56.689294 32571 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:56.689322 32571 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:56.689432 32571 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:56.689498 32571 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:56.689580 32571 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:56.689599 32571 net.cpp:86] Creating Layer mnist
I0426 20:53:56.689607 32571 net.cpp:382] mnist -> data
I0426 20:53:56.689625 32571 net.cpp:382] mnist -> label
I0426 20:53:56.690508 32571 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:56.692536 32571 net.cpp:124] Setting up mnist
I0426 20:53:56.692549 32571 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:56.692554 32571 net.cpp:131] Top shape: 64 (64)
I0426 20:53:56.692558 32571 net.cpp:139] Memory required for data: 200960
I0426 20:53:56.692562 32571 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:56.692575 32571 net.cpp:86] Creating Layer conv0
I0426 20:53:56.692591 32571 net.cpp:408] conv0 <- data
I0426 20:53:56.692616 32571 net.cpp:382] conv0 -> conv0
I0426 20:53:56.965428 32571 net.cpp:124] Setting up conv0
I0426 20:53:56.965457 32571 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:53:56.965463 32571 net.cpp:139] Memory required for data: 7573760
I0426 20:53:56.965481 32571 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:56.965495 32571 net.cpp:86] Creating Layer pool0
I0426 20:53:56.965500 32571 net.cpp:408] pool0 <- conv0
I0426 20:53:56.965507 32571 net.cpp:382] pool0 -> pool0
I0426 20:53:56.965562 32571 net.cpp:124] Setting up pool0
I0426 20:53:56.965569 32571 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:53:56.965572 32571 net.cpp:139] Memory required for data: 9416960
I0426 20:53:56.965576 32571 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:56.965587 32571 net.cpp:86] Creating Layer conv1
I0426 20:53:56.965591 32571 net.cpp:408] conv1 <- pool0
I0426 20:53:56.965597 32571 net.cpp:382] conv1 -> conv1
I0426 20:53:56.968906 32571 net.cpp:124] Setting up conv1
I0426 20:53:56.968924 32571 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:53:56.968930 32571 net.cpp:139] Memory required for data: 9580800
I0426 20:53:56.968940 32571 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:56.968953 32571 net.cpp:86] Creating Layer pool1
I0426 20:53:56.968957 32571 net.cpp:408] pool1 <- conv1
I0426 20:53:56.968963 32571 net.cpp:382] pool1 -> pool1
I0426 20:53:56.969007 32571 net.cpp:124] Setting up pool1
I0426 20:53:56.969013 32571 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:53:56.969017 32571 net.cpp:139] Memory required for data: 9621760
I0426 20:53:56.969020 32571 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:56.969028 32571 net.cpp:86] Creating Layer ip1
I0426 20:53:56.969033 32571 net.cpp:408] ip1 <- pool1
I0426 20:53:56.969038 32571 net.cpp:382] ip1 -> ip1
I0426 20:53:56.969259 32571 net.cpp:124] Setting up ip1
I0426 20:53:56.969269 32571 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:56.969272 32571 net.cpp:139] Memory required for data: 9647360
I0426 20:53:56.969281 32571 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:56.969287 32571 net.cpp:86] Creating Layer relu1
I0426 20:53:56.969291 32571 net.cpp:408] relu1 <- ip1
I0426 20:53:56.969296 32571 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:56.969490 32571 net.cpp:124] Setting up relu1
I0426 20:53:56.969499 32571 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:56.969503 32571 net.cpp:139] Memory required for data: 9672960
I0426 20:53:56.969507 32571 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:56.969514 32571 net.cpp:86] Creating Layer ip2
I0426 20:53:56.969518 32571 net.cpp:408] ip2 <- ip1
I0426 20:53:56.969524 32571 net.cpp:382] ip2 -> ip2
I0426 20:53:56.969846 32571 net.cpp:124] Setting up ip2
I0426 20:53:56.969854 32571 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:56.969858 32571 net.cpp:139] Memory required for data: 9749760
I0426 20:53:56.969864 32571 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:56.969871 32571 net.cpp:86] Creating Layer relu2
I0426 20:53:56.969876 32571 net.cpp:408] relu2 <- ip2
I0426 20:53:56.969880 32571 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:56.970813 32571 net.cpp:124] Setting up relu2
I0426 20:53:56.970826 32571 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:56.970831 32571 net.cpp:139] Memory required for data: 9826560
I0426 20:53:56.970835 32571 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:56.970844 32571 net.cpp:86] Creating Layer ip3
I0426 20:53:56.970849 32571 net.cpp:408] ip3 <- ip2
I0426 20:53:56.970854 32571 net.cpp:382] ip3 -> ip3
I0426 20:53:56.971000 32571 net.cpp:124] Setting up ip3
I0426 20:53:56.971009 32571 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:56.971014 32571 net.cpp:139] Memory required for data: 9829120
I0426 20:53:56.971022 32571 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:56.971029 32571 net.cpp:86] Creating Layer relu3
I0426 20:53:56.971034 32571 net.cpp:408] relu3 <- ip3
I0426 20:53:56.971037 32571 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:56.971246 32571 net.cpp:124] Setting up relu3
I0426 20:53:56.971256 32571 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:56.971261 32571 net.cpp:139] Memory required for data: 9831680
I0426 20:53:56.971264 32571 layer_factory.hpp:77] Creating layer loss
I0426 20:53:56.971271 32571 net.cpp:86] Creating Layer loss
I0426 20:53:56.971274 32571 net.cpp:408] loss <- ip3
I0426 20:53:56.971278 32571 net.cpp:408] loss <- label
I0426 20:53:56.971287 32571 net.cpp:382] loss -> loss
I0426 20:53:56.971305 32571 layer_factory.hpp:77] Creating layer loss
I0426 20:53:56.971585 32571 net.cpp:124] Setting up loss
I0426 20:53:56.971596 32571 net.cpp:131] Top shape: (1)
I0426 20:53:56.971599 32571 net.cpp:134]     with loss weight 1
I0426 20:53:56.971616 32571 net.cpp:139] Memory required for data: 9831684
I0426 20:53:56.971619 32571 net.cpp:200] loss needs backward computation.
I0426 20:53:56.971623 32571 net.cpp:200] relu3 needs backward computation.
I0426 20:53:56.971627 32571 net.cpp:200] ip3 needs backward computation.
I0426 20:53:56.971631 32571 net.cpp:200] relu2 needs backward computation.
I0426 20:53:56.971633 32571 net.cpp:200] ip2 needs backward computation.
I0426 20:53:56.971637 32571 net.cpp:200] relu1 needs backward computation.
I0426 20:53:56.971639 32571 net.cpp:200] ip1 needs backward computation.
I0426 20:53:56.971643 32571 net.cpp:200] pool1 needs backward computation.
I0426 20:53:56.971647 32571 net.cpp:200] conv1 needs backward computation.
I0426 20:53:56.971650 32571 net.cpp:200] pool0 needs backward computation.
I0426 20:53:56.971653 32571 net.cpp:200] conv0 needs backward computation.
I0426 20:53:56.971657 32571 net.cpp:202] mnist does not need backward computation.
I0426 20:53:56.971660 32571 net.cpp:244] This network produces output loss
I0426 20:53:56.971673 32571 net.cpp:257] Network initialization done.
I0426 20:53:56.972050 32571 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test148.prototxt
I0426 20:53:56.972082 32571 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:56.972193 32571 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:56.972287 32571 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:56.972339 32571 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:56.972352 32571 net.cpp:86] Creating Layer mnist
I0426 20:53:56.972359 32571 net.cpp:382] mnist -> data
I0426 20:53:56.972368 32571 net.cpp:382] mnist -> label
I0426 20:53:56.972474 32571 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:56.974903 32571 net.cpp:124] Setting up mnist
I0426 20:53:56.974920 32571 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:56.974925 32571 net.cpp:131] Top shape: 100 (100)
I0426 20:53:56.974928 32571 net.cpp:139] Memory required for data: 314000
I0426 20:53:56.974933 32571 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:56.974966 32571 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:56.974970 32571 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:56.974977 32571 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:56.974984 32571 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:56.975038 32571 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:56.975046 32571 net.cpp:131] Top shape: 100 (100)
I0426 20:53:56.975051 32571 net.cpp:131] Top shape: 100 (100)
I0426 20:53:56.975055 32571 net.cpp:139] Memory required for data: 314800
I0426 20:53:56.975059 32571 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:56.975069 32571 net.cpp:86] Creating Layer conv0
I0426 20:53:56.975073 32571 net.cpp:408] conv0 <- data
I0426 20:53:56.975080 32571 net.cpp:382] conv0 -> conv0
I0426 20:53:56.977123 32571 net.cpp:124] Setting up conv0
I0426 20:53:56.977139 32571 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:53:56.977144 32571 net.cpp:139] Memory required for data: 11834800
I0426 20:53:56.977155 32571 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:56.977164 32571 net.cpp:86] Creating Layer pool0
I0426 20:53:56.977169 32571 net.cpp:408] pool0 <- conv0
I0426 20:53:56.977175 32571 net.cpp:382] pool0 -> pool0
I0426 20:53:56.977221 32571 net.cpp:124] Setting up pool0
I0426 20:53:56.977226 32571 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:53:56.977231 32571 net.cpp:139] Memory required for data: 14714800
I0426 20:53:56.977233 32571 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:56.977244 32571 net.cpp:86] Creating Layer conv1
I0426 20:53:56.977248 32571 net.cpp:408] conv1 <- pool0
I0426 20:53:56.977255 32571 net.cpp:382] conv1 -> conv1
I0426 20:53:56.979138 32571 net.cpp:124] Setting up conv1
I0426 20:53:56.979157 32571 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:53:56.979161 32571 net.cpp:139] Memory required for data: 14970800
I0426 20:53:56.979172 32571 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:56.979181 32571 net.cpp:86] Creating Layer pool1
I0426 20:53:56.979184 32571 net.cpp:408] pool1 <- conv1
I0426 20:53:56.979192 32571 net.cpp:382] pool1 -> pool1
I0426 20:53:56.979236 32571 net.cpp:124] Setting up pool1
I0426 20:53:56.979243 32571 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:53:56.979248 32571 net.cpp:139] Memory required for data: 15034800
I0426 20:53:56.979250 32571 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:56.979259 32571 net.cpp:86] Creating Layer ip1
I0426 20:53:56.979264 32571 net.cpp:408] ip1 <- pool1
I0426 20:53:56.979269 32571 net.cpp:382] ip1 -> ip1
I0426 20:53:56.979490 32571 net.cpp:124] Setting up ip1
I0426 20:53:56.979499 32571 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:56.979514 32571 net.cpp:139] Memory required for data: 15074800
I0426 20:53:56.979524 32571 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:56.979532 32571 net.cpp:86] Creating Layer relu1
I0426 20:53:56.979535 32571 net.cpp:408] relu1 <- ip1
I0426 20:53:56.979543 32571 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:56.979799 32571 net.cpp:124] Setting up relu1
I0426 20:53:56.979809 32571 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:56.979813 32571 net.cpp:139] Memory required for data: 15114800
I0426 20:53:56.979817 32571 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:56.979826 32571 net.cpp:86] Creating Layer ip2
I0426 20:53:56.979830 32571 net.cpp:408] ip2 <- ip1
I0426 20:53:56.979837 32571 net.cpp:382] ip2 -> ip2
I0426 20:53:56.980165 32571 net.cpp:124] Setting up ip2
I0426 20:53:56.980176 32571 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:56.980180 32571 net.cpp:139] Memory required for data: 15234800
I0426 20:53:56.980186 32571 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:56.980192 32571 net.cpp:86] Creating Layer relu2
I0426 20:53:56.980196 32571 net.cpp:408] relu2 <- ip2
I0426 20:53:56.980201 32571 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:56.980396 32571 net.cpp:124] Setting up relu2
I0426 20:53:56.980407 32571 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:56.980412 32571 net.cpp:139] Memory required for data: 15354800
I0426 20:53:56.980417 32571 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:56.980422 32571 net.cpp:86] Creating Layer ip3
I0426 20:53:56.980427 32571 net.cpp:408] ip3 <- ip2
I0426 20:53:56.980433 32571 net.cpp:382] ip3 -> ip3
I0426 20:53:56.980574 32571 net.cpp:124] Setting up ip3
I0426 20:53:56.980582 32571 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:56.980587 32571 net.cpp:139] Memory required for data: 15358800
I0426 20:53:56.980595 32571 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:56.980602 32571 net.cpp:86] Creating Layer relu3
I0426 20:53:56.980605 32571 net.cpp:408] relu3 <- ip3
I0426 20:53:56.980610 32571 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:56.981657 32571 net.cpp:124] Setting up relu3
I0426 20:53:56.981673 32571 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:56.981678 32571 net.cpp:139] Memory required for data: 15362800
I0426 20:53:56.981683 32571 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:53:56.981688 32571 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:53:56.981693 32571 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:53:56.981698 32571 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:53:56.981708 32571 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:53:56.981751 32571 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:53:56.981760 32571 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:56.981763 32571 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:56.981767 32571 net.cpp:139] Memory required for data: 15370800
I0426 20:53:56.981770 32571 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:56.981777 32571 net.cpp:86] Creating Layer accuracy
I0426 20:53:56.981781 32571 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:53:56.981786 32571 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:56.981791 32571 net.cpp:382] accuracy -> accuracy
I0426 20:53:56.981799 32571 net.cpp:124] Setting up accuracy
I0426 20:53:56.981804 32571 net.cpp:131] Top shape: (1)
I0426 20:53:56.981807 32571 net.cpp:139] Memory required for data: 15370804
I0426 20:53:56.981812 32571 layer_factory.hpp:77] Creating layer loss
I0426 20:53:56.981817 32571 net.cpp:86] Creating Layer loss
I0426 20:53:56.981822 32571 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:53:56.981827 32571 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:56.981830 32571 net.cpp:382] loss -> loss
I0426 20:53:56.981838 32571 layer_factory.hpp:77] Creating layer loss
I0426 20:53:56.982126 32571 net.cpp:124] Setting up loss
I0426 20:53:56.982137 32571 net.cpp:131] Top shape: (1)
I0426 20:53:56.982141 32571 net.cpp:134]     with loss weight 1
I0426 20:53:56.982159 32571 net.cpp:139] Memory required for data: 15370808
I0426 20:53:56.982163 32571 net.cpp:200] loss needs backward computation.
I0426 20:53:56.982168 32571 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:56.982173 32571 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:53:56.982177 32571 net.cpp:200] relu3 needs backward computation.
I0426 20:53:56.982180 32571 net.cpp:200] ip3 needs backward computation.
I0426 20:53:56.982184 32571 net.cpp:200] relu2 needs backward computation.
I0426 20:53:56.982187 32571 net.cpp:200] ip2 needs backward computation.
I0426 20:53:56.982192 32571 net.cpp:200] relu1 needs backward computation.
I0426 20:53:56.982194 32571 net.cpp:200] ip1 needs backward computation.
I0426 20:53:56.982198 32571 net.cpp:200] pool1 needs backward computation.
I0426 20:53:56.982203 32571 net.cpp:200] conv1 needs backward computation.
I0426 20:53:56.982206 32571 net.cpp:200] pool0 needs backward computation.
I0426 20:53:56.982209 32571 net.cpp:200] conv0 needs backward computation.
I0426 20:53:56.982216 32571 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:56.982220 32571 net.cpp:202] mnist does not need backward computation.
I0426 20:53:56.982223 32571 net.cpp:244] This network produces output accuracy
I0426 20:53:56.982228 32571 net.cpp:244] This network produces output loss
I0426 20:53:56.982240 32571 net.cpp:257] Network initialization done.
I0426 20:53:56.982290 32571 solver.cpp:56] Solver scaffolding done.
I0426 20:53:56.982724 32571 caffe.cpp:248] Starting Optimization
I0426 20:53:56.982731 32571 solver.cpp:273] Solving LeNet
I0426 20:53:56.982734 32571 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:56.983832 32571 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:56.992693 32571 blocking_queue.cpp:49] Waiting for data
I0426 20:53:57.061322 32578 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:57.062391 32571 solver.cpp:398]     Test net output #0: accuracy = 0.0841
I0426 20:53:57.062412 32571 solver.cpp:398]     Test net output #1: loss = 2.32691 (* 1 = 2.32691 loss)
I0426 20:53:57.067644 32571 solver.cpp:219] Iteration 0 (0 iter/s, 0.0848773s/100 iters), loss = 2.32661
I0426 20:53:57.067672 32571 solver.cpp:238]     Train net output #0: loss = 2.32661 (* 1 = 2.32661 loss)
I0426 20:53:57.067685 32571 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:53:57.205816 32571 solver.cpp:219] Iteration 100 (723.996 iter/s, 0.138122s/100 iters), loss = 0.18289
I0426 20:53:57.205854 32571 solver.cpp:238]     Train net output #0: loss = 0.18289 (* 1 = 0.18289 loss)
I0426 20:53:57.205862 32571 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:53:57.343751 32571 solver.cpp:219] Iteration 200 (725.238 iter/s, 0.137886s/100 iters), loss = 0.211521
I0426 20:53:57.343785 32571 solver.cpp:238]     Train net output #0: loss = 0.211521 (* 1 = 0.211521 loss)
I0426 20:53:57.343792 32571 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:53:57.481163 32571 solver.cpp:219] Iteration 300 (727.99 iter/s, 0.137364s/100 iters), loss = 0.209893
I0426 20:53:57.481197 32571 solver.cpp:238]     Train net output #0: loss = 0.209893 (* 1 = 0.209893 loss)
I0426 20:53:57.481206 32571 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:53:57.622963 32571 solver.cpp:219] Iteration 400 (705.466 iter/s, 0.14175s/100 iters), loss = 0.0764222
I0426 20:53:57.623011 32571 solver.cpp:238]     Train net output #0: loss = 0.0764221 (* 1 = 0.0764221 loss)
I0426 20:53:57.623024 32571 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:53:57.767885 32571 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:53:57.844858 32578 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:57.846899 32571 solver.cpp:398]     Test net output #0: accuracy = 0.9662
I0426 20:53:57.846925 32571 solver.cpp:398]     Test net output #1: loss = 0.103741 (* 1 = 0.103741 loss)
I0426 20:53:57.848217 32571 solver.cpp:219] Iteration 500 (444.064 iter/s, 0.225193s/100 iters), loss = 0.170765
I0426 20:53:57.848263 32571 solver.cpp:238]     Train net output #0: loss = 0.170764 (* 1 = 0.170764 loss)
I0426 20:53:57.848271 32571 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:53:57.985411 32571 solver.cpp:219] Iteration 600 (729.207 iter/s, 0.137135s/100 iters), loss = 0.104201
I0426 20:53:57.985446 32571 solver.cpp:238]     Train net output #0: loss = 0.104201 (* 1 = 0.104201 loss)
I0426 20:53:57.985455 32571 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:53:58.124217 32571 solver.cpp:219] Iteration 700 (720.678 iter/s, 0.138758s/100 iters), loss = 0.205785
I0426 20:53:58.124251 32571 solver.cpp:238]     Train net output #0: loss = 0.205785 (* 1 = 0.205785 loss)
I0426 20:53:58.124259 32571 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:53:58.260370 32571 solver.cpp:219] Iteration 800 (734.716 iter/s, 0.136107s/100 iters), loss = 0.298574
I0426 20:53:58.260403 32571 solver.cpp:238]     Train net output #0: loss = 0.298574 (* 1 = 0.298574 loss)
I0426 20:53:58.260412 32571 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:53:58.397783 32571 solver.cpp:219] Iteration 900 (727.979 iter/s, 0.137367s/100 iters), loss = 0.0809642
I0426 20:53:58.397817 32571 solver.cpp:238]     Train net output #0: loss = 0.0809643 (* 1 = 0.0809643 loss)
I0426 20:53:58.397825 32571 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:53:58.444046 32577 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:58.537101 32571 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:53:58.538993 32571 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:53:58.540210 32571 solver.cpp:311] Iteration 1000, loss = 0.0860041
I0426 20:53:58.540231 32571 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:53:58.618343 32578 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:58.619451 32571 solver.cpp:398]     Test net output #0: accuracy = 0.9799
I0426 20:53:58.619475 32571 solver.cpp:398]     Test net output #1: loss = 0.0617316 (* 1 = 0.0617316 loss)
I0426 20:53:58.619483 32571 solver.cpp:316] Optimization Done.
I0426 20:53:58.619488 32571 caffe.cpp:259] Optimization Done.
