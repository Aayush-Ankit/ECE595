I0426 20:54:37.510637 32705 caffe.cpp:218] Using GPUs 0
I0426 20:54:37.548545 32705 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:38.012764 32705 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test163.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:38.012960 32705 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test163.prototxt
I0426 20:54:38.013363 32705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:38.013378 32705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:38.013468 32705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:38.013548 32705 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:38.013659 32705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:38.013684 32705 net.cpp:86] Creating Layer mnist
I0426 20:54:38.013695 32705 net.cpp:382] mnist -> data
I0426 20:54:38.013718 32705 net.cpp:382] mnist -> label
I0426 20:54:38.014780 32705 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:38.016824 32705 net.cpp:124] Setting up mnist
I0426 20:54:38.016854 32705 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:38.016860 32705 net.cpp:131] Top shape: 64 (64)
I0426 20:54:38.016862 32705 net.cpp:139] Memory required for data: 200960
I0426 20:54:38.016868 32705 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:38.016880 32705 net.cpp:86] Creating Layer conv0
I0426 20:54:38.016902 32705 net.cpp:408] conv0 <- data
I0426 20:54:38.016916 32705 net.cpp:382] conv0 -> conv0
I0426 20:54:38.248430 32705 net.cpp:124] Setting up conv0
I0426 20:54:38.248471 32705 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:38.248476 32705 net.cpp:139] Memory required for data: 7573760
I0426 20:54:38.248491 32705 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:38.248503 32705 net.cpp:86] Creating Layer pool0
I0426 20:54:38.248507 32705 net.cpp:408] pool0 <- conv0
I0426 20:54:38.248514 32705 net.cpp:382] pool0 -> pool0
I0426 20:54:38.248571 32705 net.cpp:124] Setting up pool0
I0426 20:54:38.248594 32705 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:38.248598 32705 net.cpp:139] Memory required for data: 9416960
I0426 20:54:38.248601 32705 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:38.248612 32705 net.cpp:86] Creating Layer conv1
I0426 20:54:38.248615 32705 net.cpp:408] conv1 <- pool0
I0426 20:54:38.248622 32705 net.cpp:382] conv1 -> conv1
I0426 20:54:38.250823 32705 net.cpp:124] Setting up conv1
I0426 20:54:38.250836 32705 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:38.250839 32705 net.cpp:139] Memory required for data: 9826560
I0426 20:54:38.250847 32705 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:38.250854 32705 net.cpp:86] Creating Layer pool1
I0426 20:54:38.250857 32705 net.cpp:408] pool1 <- conv1
I0426 20:54:38.250861 32705 net.cpp:382] pool1 -> pool1
I0426 20:54:38.250901 32705 net.cpp:124] Setting up pool1
I0426 20:54:38.250911 32705 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:38.250916 32705 net.cpp:139] Memory required for data: 9928960
I0426 20:54:38.250921 32705 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:38.250931 32705 net.cpp:86] Creating Layer ip1
I0426 20:54:38.250936 32705 net.cpp:408] ip1 <- pool1
I0426 20:54:38.250942 32705 net.cpp:382] ip1 -> ip1
I0426 20:54:38.251281 32705 net.cpp:124] Setting up ip1
I0426 20:54:38.251294 32705 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:38.251298 32705 net.cpp:139] Memory required for data: 9954560
I0426 20:54:38.251308 32705 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:38.251317 32705 net.cpp:86] Creating Layer relu1
I0426 20:54:38.251322 32705 net.cpp:408] relu1 <- ip1
I0426 20:54:38.251329 32705 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:38.251498 32705 net.cpp:124] Setting up relu1
I0426 20:54:38.251507 32705 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:38.251512 32705 net.cpp:139] Memory required for data: 9980160
I0426 20:54:38.251515 32705 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:38.251524 32705 net.cpp:86] Creating Layer ip2
I0426 20:54:38.251529 32705 net.cpp:408] ip2 <- ip1
I0426 20:54:38.251538 32705 net.cpp:382] ip2 -> ip2
I0426 20:54:38.251817 32705 net.cpp:124] Setting up ip2
I0426 20:54:38.251827 32705 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:38.251829 32705 net.cpp:139] Memory required for data: 10056960
I0426 20:54:38.251837 32705 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:38.251847 32705 net.cpp:86] Creating Layer relu2
I0426 20:54:38.251852 32705 net.cpp:408] relu2 <- ip2
I0426 20:54:38.251859 32705 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:38.252610 32705 net.cpp:124] Setting up relu2
I0426 20:54:38.252624 32705 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:54:38.252626 32705 net.cpp:139] Memory required for data: 10133760
I0426 20:54:38.252631 32705 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:38.252640 32705 net.cpp:86] Creating Layer ip3
I0426 20:54:38.252645 32705 net.cpp:408] ip3 <- ip2
I0426 20:54:38.252653 32705 net.cpp:382] ip3 -> ip3
I0426 20:54:38.252791 32705 net.cpp:124] Setting up ip3
I0426 20:54:38.252800 32705 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:38.252804 32705 net.cpp:139] Memory required for data: 10136320
I0426 20:54:38.252835 32705 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:38.252845 32705 net.cpp:86] Creating Layer relu3
I0426 20:54:38.252849 32705 net.cpp:408] relu3 <- ip3
I0426 20:54:38.252856 32705 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:38.253042 32705 net.cpp:124] Setting up relu3
I0426 20:54:38.253052 32705 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:38.253056 32705 net.cpp:139] Memory required for data: 10138880
I0426 20:54:38.253060 32705 layer_factory.hpp:77] Creating layer loss
I0426 20:54:38.253067 32705 net.cpp:86] Creating Layer loss
I0426 20:54:38.253072 32705 net.cpp:408] loss <- ip3
I0426 20:54:38.253078 32705 net.cpp:408] loss <- label
I0426 20:54:38.253087 32705 net.cpp:382] loss -> loss
I0426 20:54:38.253105 32705 layer_factory.hpp:77] Creating layer loss
I0426 20:54:38.253335 32705 net.cpp:124] Setting up loss
I0426 20:54:38.253345 32705 net.cpp:131] Top shape: (1)
I0426 20:54:38.253348 32705 net.cpp:134]     with loss weight 1
I0426 20:54:38.253365 32705 net.cpp:139] Memory required for data: 10138884
I0426 20:54:38.253371 32705 net.cpp:200] loss needs backward computation.
I0426 20:54:38.253376 32705 net.cpp:200] relu3 needs backward computation.
I0426 20:54:38.253381 32705 net.cpp:200] ip3 needs backward computation.
I0426 20:54:38.253384 32705 net.cpp:200] relu2 needs backward computation.
I0426 20:54:38.253389 32705 net.cpp:200] ip2 needs backward computation.
I0426 20:54:38.253393 32705 net.cpp:200] relu1 needs backward computation.
I0426 20:54:38.253397 32705 net.cpp:200] ip1 needs backward computation.
I0426 20:54:38.253401 32705 net.cpp:200] pool1 needs backward computation.
I0426 20:54:38.253406 32705 net.cpp:200] conv1 needs backward computation.
I0426 20:54:38.253409 32705 net.cpp:200] pool0 needs backward computation.
I0426 20:54:38.253414 32705 net.cpp:200] conv0 needs backward computation.
I0426 20:54:38.253419 32705 net.cpp:202] mnist does not need backward computation.
I0426 20:54:38.253424 32705 net.cpp:244] This network produces output loss
I0426 20:54:38.253437 32705 net.cpp:257] Network initialization done.
I0426 20:54:38.253752 32705 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test163.prototxt
I0426 20:54:38.253785 32705 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:38.253901 32705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:38.254006 32705 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:38.254061 32705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:38.254079 32705 net.cpp:86] Creating Layer mnist
I0426 20:54:38.254087 32705 net.cpp:382] mnist -> data
I0426 20:54:38.254112 32705 net.cpp:382] mnist -> label
I0426 20:54:38.254216 32705 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:38.256312 32705 net.cpp:124] Setting up mnist
I0426 20:54:38.256325 32705 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:38.256330 32705 net.cpp:131] Top shape: 100 (100)
I0426 20:54:38.256332 32705 net.cpp:139] Memory required for data: 314000
I0426 20:54:38.256336 32705 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:38.256343 32705 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:38.256347 32705 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:38.256355 32705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:38.256363 32705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:38.256433 32705 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:38.256443 32705 net.cpp:131] Top shape: 100 (100)
I0426 20:54:38.256449 32705 net.cpp:131] Top shape: 100 (100)
I0426 20:54:38.256453 32705 net.cpp:139] Memory required for data: 314800
I0426 20:54:38.256458 32705 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:38.256469 32705 net.cpp:86] Creating Layer conv0
I0426 20:54:38.256474 32705 net.cpp:408] conv0 <- data
I0426 20:54:38.256481 32705 net.cpp:382] conv0 -> conv0
I0426 20:54:38.258265 32705 net.cpp:124] Setting up conv0
I0426 20:54:38.258278 32705 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:38.258282 32705 net.cpp:139] Memory required for data: 11834800
I0426 20:54:38.258291 32705 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:38.258297 32705 net.cpp:86] Creating Layer pool0
I0426 20:54:38.258302 32705 net.cpp:408] pool0 <- conv0
I0426 20:54:38.258309 32705 net.cpp:382] pool0 -> pool0
I0426 20:54:38.258357 32705 net.cpp:124] Setting up pool0
I0426 20:54:38.258366 32705 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:38.258370 32705 net.cpp:139] Memory required for data: 14714800
I0426 20:54:38.258375 32705 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:38.258388 32705 net.cpp:86] Creating Layer conv1
I0426 20:54:38.258393 32705 net.cpp:408] conv1 <- pool0
I0426 20:54:38.258400 32705 net.cpp:382] conv1 -> conv1
I0426 20:54:38.260013 32705 net.cpp:124] Setting up conv1
I0426 20:54:38.260026 32705 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:38.260030 32705 net.cpp:139] Memory required for data: 15354800
I0426 20:54:38.260038 32705 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:38.260053 32705 net.cpp:86] Creating Layer pool1
I0426 20:54:38.260058 32705 net.cpp:408] pool1 <- conv1
I0426 20:54:38.260066 32705 net.cpp:382] pool1 -> pool1
I0426 20:54:38.260118 32705 net.cpp:124] Setting up pool1
I0426 20:54:38.260128 32705 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:38.260133 32705 net.cpp:139] Memory required for data: 15514800
I0426 20:54:38.260138 32705 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:38.260145 32705 net.cpp:86] Creating Layer ip1
I0426 20:54:38.260157 32705 net.cpp:408] ip1 <- pool1
I0426 20:54:38.260165 32705 net.cpp:382] ip1 -> ip1
I0426 20:54:38.260521 32705 net.cpp:124] Setting up ip1
I0426 20:54:38.260531 32705 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:38.260546 32705 net.cpp:139] Memory required for data: 15554800
I0426 20:54:38.260572 32705 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:38.260581 32705 net.cpp:86] Creating Layer relu1
I0426 20:54:38.260586 32705 net.cpp:408] relu1 <- ip1
I0426 20:54:38.260593 32705 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:38.260799 32705 net.cpp:124] Setting up relu1
I0426 20:54:38.260833 32705 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:38.260838 32705 net.cpp:139] Memory required for data: 15594800
I0426 20:54:38.260843 32705 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:38.260862 32705 net.cpp:86] Creating Layer ip2
I0426 20:54:38.260876 32705 net.cpp:408] ip2 <- ip1
I0426 20:54:38.260885 32705 net.cpp:382] ip2 -> ip2
I0426 20:54:38.261270 32705 net.cpp:124] Setting up ip2
I0426 20:54:38.261279 32705 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:38.261283 32705 net.cpp:139] Memory required for data: 15714800
I0426 20:54:38.261288 32705 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:38.261294 32705 net.cpp:86] Creating Layer relu2
I0426 20:54:38.261307 32705 net.cpp:408] relu2 <- ip2
I0426 20:54:38.261314 32705 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:38.261502 32705 net.cpp:124] Setting up relu2
I0426 20:54:38.261513 32705 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:54:38.261517 32705 net.cpp:139] Memory required for data: 15834800
I0426 20:54:38.261519 32705 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:38.261526 32705 net.cpp:86] Creating Layer ip3
I0426 20:54:38.261531 32705 net.cpp:408] ip3 <- ip2
I0426 20:54:38.261539 32705 net.cpp:382] ip3 -> ip3
I0426 20:54:38.261698 32705 net.cpp:124] Setting up ip3
I0426 20:54:38.261708 32705 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:38.261728 32705 net.cpp:139] Memory required for data: 15838800
I0426 20:54:38.261739 32705 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:38.261745 32705 net.cpp:86] Creating Layer relu3
I0426 20:54:38.261750 32705 net.cpp:408] relu3 <- ip3
I0426 20:54:38.261756 32705 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:38.262545 32705 net.cpp:124] Setting up relu3
I0426 20:54:38.262557 32705 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:38.262560 32705 net.cpp:139] Memory required for data: 15842800
I0426 20:54:38.262564 32705 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:54:38.262569 32705 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:54:38.262574 32705 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:54:38.262581 32705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:54:38.262590 32705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:54:38.262645 32705 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:54:38.262655 32705 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:38.262660 32705 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:38.262665 32705 net.cpp:139] Memory required for data: 15850800
I0426 20:54:38.262670 32705 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:38.262676 32705 net.cpp:86] Creating Layer accuracy
I0426 20:54:38.262681 32705 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:54:38.262688 32705 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:38.262696 32705 net.cpp:382] accuracy -> accuracy
I0426 20:54:38.262706 32705 net.cpp:124] Setting up accuracy
I0426 20:54:38.262712 32705 net.cpp:131] Top shape: (1)
I0426 20:54:38.262724 32705 net.cpp:139] Memory required for data: 15850804
I0426 20:54:38.262729 32705 layer_factory.hpp:77] Creating layer loss
I0426 20:54:38.262737 32705 net.cpp:86] Creating Layer loss
I0426 20:54:38.262742 32705 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:54:38.262748 32705 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:38.262753 32705 net.cpp:382] loss -> loss
I0426 20:54:38.262763 32705 layer_factory.hpp:77] Creating layer loss
I0426 20:54:38.263020 32705 net.cpp:124] Setting up loss
I0426 20:54:38.263031 32705 net.cpp:131] Top shape: (1)
I0426 20:54:38.263033 32705 net.cpp:134]     with loss weight 1
I0426 20:54:38.263053 32705 net.cpp:139] Memory required for data: 15850808
I0426 20:54:38.263059 32705 net.cpp:200] loss needs backward computation.
I0426 20:54:38.263067 32705 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:38.263072 32705 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:54:38.263075 32705 net.cpp:200] relu3 needs backward computation.
I0426 20:54:38.263077 32705 net.cpp:200] ip3 needs backward computation.
I0426 20:54:38.263080 32705 net.cpp:200] relu2 needs backward computation.
I0426 20:54:38.263084 32705 net.cpp:200] ip2 needs backward computation.
I0426 20:54:38.263088 32705 net.cpp:200] relu1 needs backward computation.
I0426 20:54:38.263093 32705 net.cpp:200] ip1 needs backward computation.
I0426 20:54:38.263098 32705 net.cpp:200] pool1 needs backward computation.
I0426 20:54:38.263103 32705 net.cpp:200] conv1 needs backward computation.
I0426 20:54:38.263114 32705 net.cpp:200] pool0 needs backward computation.
I0426 20:54:38.263119 32705 net.cpp:200] conv0 needs backward computation.
I0426 20:54:38.263124 32705 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:38.263131 32705 net.cpp:202] mnist does not need backward computation.
I0426 20:54:38.263134 32705 net.cpp:244] This network produces output accuracy
I0426 20:54:38.263139 32705 net.cpp:244] This network produces output loss
I0426 20:54:38.263154 32705 net.cpp:257] Network initialization done.
I0426 20:54:38.263226 32705 solver.cpp:56] Solver scaffolding done.
I0426 20:54:38.263584 32705 caffe.cpp:248] Starting Optimization
I0426 20:54:38.263592 32705 solver.cpp:273] Solving LeNet
I0426 20:54:38.263594 32705 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:38.264436 32705 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:38.272058 32705 blocking_queue.cpp:49] Waiting for data
I0426 20:54:38.343490 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:38.344512 32705 solver.cpp:398]     Test net output #0: accuracy = 0.1201
I0426 20:54:38.344532 32705 solver.cpp:398]     Test net output #1: loss = 2.30566 (* 1 = 2.30566 loss)
I0426 20:54:38.349732 32705 solver.cpp:219] Iteration 0 (0 iter/s, 0.0861123s/100 iters), loss = 2.32318
I0426 20:54:38.349771 32705 solver.cpp:238]     Train net output #0: loss = 2.32318 (* 1 = 2.32318 loss)
I0426 20:54:38.349786 32705 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:38.495031 32705 solver.cpp:219] Iteration 100 (688.482 iter/s, 0.145247s/100 iters), loss = 1.20873
I0426 20:54:38.495056 32705 solver.cpp:238]     Train net output #0: loss = 1.20873 (* 1 = 1.20873 loss)
I0426 20:54:38.495064 32705 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:38.647986 32705 solver.cpp:219] Iteration 200 (653.95 iter/s, 0.152917s/100 iters), loss = 1.11671
I0426 20:54:38.648010 32705 solver.cpp:238]     Train net output #0: loss = 1.11671 (* 1 = 1.11671 loss)
I0426 20:54:38.648020 32705 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:38.795665 32705 solver.cpp:219] Iteration 300 (677.317 iter/s, 0.147641s/100 iters), loss = 0.637398
I0426 20:54:38.795691 32705 solver.cpp:238]     Train net output #0: loss = 0.637398 (* 1 = 0.637398 loss)
I0426 20:54:38.795701 32705 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:38.941601 32705 solver.cpp:219] Iteration 400 (685.413 iter/s, 0.145897s/100 iters), loss = 0.41785
I0426 20:54:38.941624 32705 solver.cpp:238]     Train net output #0: loss = 0.41785 (* 1 = 0.41785 loss)
I0426 20:54:38.941633 32705 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:39.085626 32705 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:39.163727 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:39.164743 32705 solver.cpp:398]     Test net output #0: accuracy = 0.7916
I0426 20:54:39.164767 32705 solver.cpp:398]     Test net output #1: loss = 0.53331 (* 1 = 0.53331 loss)
I0426 20:54:39.166201 32705 solver.cpp:219] Iteration 500 (445.327 iter/s, 0.224554s/100 iters), loss = 0.502412
I0426 20:54:39.166275 32705 solver.cpp:238]     Train net output #0: loss = 0.502412 (* 1 = 0.502412 loss)
I0426 20:54:39.166283 32705 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:39.316045 32705 solver.cpp:219] Iteration 600 (667.74 iter/s, 0.149759s/100 iters), loss = 0.43097
I0426 20:54:39.316072 32705 solver.cpp:238]     Train net output #0: loss = 0.43097 (* 1 = 0.43097 loss)
I0426 20:54:39.316082 32705 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:39.465013 32705 solver.cpp:219] Iteration 700 (671.472 iter/s, 0.148926s/100 iters), loss = 0.875824
I0426 20:54:39.465042 32705 solver.cpp:238]     Train net output #0: loss = 0.875824 (* 1 = 0.875824 loss)
I0426 20:54:39.465059 32705 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:39.618875 32705 solver.cpp:219] Iteration 800 (650.105 iter/s, 0.153821s/100 iters), loss = 0.569631
I0426 20:54:39.618901 32705 solver.cpp:238]     Train net output #0: loss = 0.569631 (* 1 = 0.569631 loss)
I0426 20:54:39.618911 32705 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:39.764325 32705 solver.cpp:219] Iteration 900 (687.701 iter/s, 0.145412s/100 iters), loss = 0.512389
I0426 20:54:39.764349 32705 solver.cpp:238]     Train net output #0: loss = 0.512389 (* 1 = 0.512389 loss)
I0426 20:54:39.764358 32705 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:39.811750 32711 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:39.910396 32705 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:39.912590 32705 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:39.914005 32705 solver.cpp:311] Iteration 1000, loss = 0.645713
I0426 20:54:39.914022 32705 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:39.984482 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:39.986958 32705 solver.cpp:398]     Test net output #0: accuracy = 0.7965
I0426 20:54:39.986994 32705 solver.cpp:398]     Test net output #1: loss = 0.499977 (* 1 = 0.499977 loss)
I0426 20:54:39.986999 32705 solver.cpp:316] Optimization Done.
I0426 20:54:39.987001 32705 caffe.cpp:259] Optimization Done.
