I0426 20:54:15.384666 32636 caffe.cpp:218] Using GPUs 0
I0426 20:54:15.420794 32636 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:15.937580 32636 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test155.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:15.937736 32636 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test155.prototxt
I0426 20:54:15.938117 32636 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:15.938140 32636 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:15.938238 32636 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:54:15.938336 32636 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:15.938473 32636 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:15.938508 32636 net.cpp:86] Creating Layer mnist
I0426 20:54:15.938522 32636 net.cpp:382] mnist -> data
I0426 20:54:15.938552 32636 net.cpp:382] mnist -> label
I0426 20:54:15.939801 32636 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:15.942363 32636 net.cpp:124] Setting up mnist
I0426 20:54:15.942381 32636 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:15.942387 32636 net.cpp:131] Top shape: 64 (64)
I0426 20:54:15.942390 32636 net.cpp:139] Memory required for data: 200960
I0426 20:54:15.942397 32636 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:15.942433 32636 net.cpp:86] Creating Layer conv0
I0426 20:54:15.942443 32636 net.cpp:408] conv0 <- data
I0426 20:54:15.942464 32636 net.cpp:382] conv0 -> conv0
I0426 20:54:16.220206 32636 net.cpp:124] Setting up conv0
I0426 20:54:16.220229 32636 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:16.220233 32636 net.cpp:139] Memory required for data: 7573760
I0426 20:54:16.220247 32636 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:16.220259 32636 net.cpp:86] Creating Layer pool0
I0426 20:54:16.220263 32636 net.cpp:408] pool0 <- conv0
I0426 20:54:16.220268 32636 net.cpp:382] pool0 -> pool0
I0426 20:54:16.220314 32636 net.cpp:124] Setting up pool0
I0426 20:54:16.220324 32636 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:16.220362 32636 net.cpp:139] Memory required for data: 9416960
I0426 20:54:16.220367 32636 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:16.220381 32636 net.cpp:86] Creating Layer conv1
I0426 20:54:16.220386 32636 net.cpp:408] conv1 <- pool0
I0426 20:54:16.220394 32636 net.cpp:382] conv1 -> conv1
I0426 20:54:16.222422 32636 net.cpp:124] Setting up conv1
I0426 20:54:16.222451 32636 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:16.222455 32636 net.cpp:139] Memory required for data: 9826560
I0426 20:54:16.222463 32636 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:16.222470 32636 net.cpp:86] Creating Layer pool1
I0426 20:54:16.222474 32636 net.cpp:408] pool1 <- conv1
I0426 20:54:16.222478 32636 net.cpp:382] pool1 -> pool1
I0426 20:54:16.222530 32636 net.cpp:124] Setting up pool1
I0426 20:54:16.222555 32636 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:16.222560 32636 net.cpp:139] Memory required for data: 9928960
I0426 20:54:16.222564 32636 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:16.222575 32636 net.cpp:86] Creating Layer ip1
I0426 20:54:16.222581 32636 net.cpp:408] ip1 <- pool1
I0426 20:54:16.222589 32636 net.cpp:382] ip1 -> ip1
I0426 20:54:16.222738 32636 net.cpp:124] Setting up ip1
I0426 20:54:16.222746 32636 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:16.222749 32636 net.cpp:139] Memory required for data: 9931520
I0426 20:54:16.222759 32636 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:16.222767 32636 net.cpp:86] Creating Layer relu1
I0426 20:54:16.222772 32636 net.cpp:408] relu1 <- ip1
I0426 20:54:16.222779 32636 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:16.222954 32636 net.cpp:124] Setting up relu1
I0426 20:54:16.222964 32636 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:16.222966 32636 net.cpp:139] Memory required for data: 9934080
I0426 20:54:16.222971 32636 layer_factory.hpp:77] Creating layer loss
I0426 20:54:16.222980 32636 net.cpp:86] Creating Layer loss
I0426 20:54:16.222985 32636 net.cpp:408] loss <- ip1
I0426 20:54:16.222990 32636 net.cpp:408] loss <- label
I0426 20:54:16.222998 32636 net.cpp:382] loss -> loss
I0426 20:54:16.223016 32636 layer_factory.hpp:77] Creating layer loss
I0426 20:54:16.223845 32636 net.cpp:124] Setting up loss
I0426 20:54:16.223857 32636 net.cpp:131] Top shape: (1)
I0426 20:54:16.223876 32636 net.cpp:134]     with loss weight 1
I0426 20:54:16.223892 32636 net.cpp:139] Memory required for data: 9934084
I0426 20:54:16.223896 32636 net.cpp:200] loss needs backward computation.
I0426 20:54:16.223901 32636 net.cpp:200] relu1 needs backward computation.
I0426 20:54:16.223902 32636 net.cpp:200] ip1 needs backward computation.
I0426 20:54:16.223906 32636 net.cpp:200] pool1 needs backward computation.
I0426 20:54:16.223909 32636 net.cpp:200] conv1 needs backward computation.
I0426 20:54:16.223913 32636 net.cpp:200] pool0 needs backward computation.
I0426 20:54:16.223917 32636 net.cpp:200] conv0 needs backward computation.
I0426 20:54:16.223922 32636 net.cpp:202] mnist does not need backward computation.
I0426 20:54:16.223927 32636 net.cpp:244] This network produces output loss
I0426 20:54:16.223937 32636 net.cpp:257] Network initialization done.
I0426 20:54:16.224202 32636 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test155.prototxt
I0426 20:54:16.224232 32636 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:16.224313 32636 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:54:16.224401 32636 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:16.224462 32636 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:16.224479 32636 net.cpp:86] Creating Layer mnist
I0426 20:54:16.224488 32636 net.cpp:382] mnist -> data
I0426 20:54:16.224498 32636 net.cpp:382] mnist -> label
I0426 20:54:16.224609 32636 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:16.226814 32636 net.cpp:124] Setting up mnist
I0426 20:54:16.226845 32636 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:16.226866 32636 net.cpp:131] Top shape: 100 (100)
I0426 20:54:16.226869 32636 net.cpp:139] Memory required for data: 314000
I0426 20:54:16.226873 32636 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:16.226879 32636 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:16.226882 32636 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:16.226887 32636 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:16.226893 32636 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:16.226950 32636 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:16.226961 32636 net.cpp:131] Top shape: 100 (100)
I0426 20:54:16.226968 32636 net.cpp:131] Top shape: 100 (100)
I0426 20:54:16.226972 32636 net.cpp:139] Memory required for data: 314800
I0426 20:54:16.226976 32636 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:16.226989 32636 net.cpp:86] Creating Layer conv0
I0426 20:54:16.226994 32636 net.cpp:408] conv0 <- data
I0426 20:54:16.227002 32636 net.cpp:382] conv0 -> conv0
I0426 20:54:16.227869 32636 net.cpp:124] Setting up conv0
I0426 20:54:16.227881 32636 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:16.227900 32636 net.cpp:139] Memory required for data: 11834800
I0426 20:54:16.227908 32636 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:16.227916 32636 net.cpp:86] Creating Layer pool0
I0426 20:54:16.227921 32636 net.cpp:408] pool0 <- conv0
I0426 20:54:16.227924 32636 net.cpp:382] pool0 -> pool0
I0426 20:54:16.227974 32636 net.cpp:124] Setting up pool0
I0426 20:54:16.227984 32636 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:16.227988 32636 net.cpp:139] Memory required for data: 14714800
I0426 20:54:16.227993 32636 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:16.228006 32636 net.cpp:86] Creating Layer conv1
I0426 20:54:16.228013 32636 net.cpp:408] conv1 <- pool0
I0426 20:54:16.228020 32636 net.cpp:382] conv1 -> conv1
I0426 20:54:16.229740 32636 net.cpp:124] Setting up conv1
I0426 20:54:16.229769 32636 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:16.229774 32636 net.cpp:139] Memory required for data: 15354800
I0426 20:54:16.229782 32636 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:16.229789 32636 net.cpp:86] Creating Layer pool1
I0426 20:54:16.229802 32636 net.cpp:408] pool1 <- conv1
I0426 20:54:16.229809 32636 net.cpp:382] pool1 -> pool1
I0426 20:54:16.229876 32636 net.cpp:124] Setting up pool1
I0426 20:54:16.229890 32636 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:16.229894 32636 net.cpp:139] Memory required for data: 15514800
I0426 20:54:16.229897 32636 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:16.229907 32636 net.cpp:86] Creating Layer ip1
I0426 20:54:16.229912 32636 net.cpp:408] ip1 <- pool1
I0426 20:54:16.229923 32636 net.cpp:382] ip1 -> ip1
I0426 20:54:16.230053 32636 net.cpp:124] Setting up ip1
I0426 20:54:16.230062 32636 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:16.230064 32636 net.cpp:139] Memory required for data: 15518800
I0426 20:54:16.230075 32636 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:16.230087 32636 net.cpp:86] Creating Layer relu1
I0426 20:54:16.230093 32636 net.cpp:408] relu1 <- ip1
I0426 20:54:16.230099 32636 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:16.230927 32636 net.cpp:124] Setting up relu1
I0426 20:54:16.230939 32636 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:16.230957 32636 net.cpp:139] Memory required for data: 15522800
I0426 20:54:16.230962 32636 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0426 20:54:16.230972 32636 net.cpp:86] Creating Layer ip1_relu1_0_split
I0426 20:54:16.230975 32636 net.cpp:408] ip1_relu1_0_split <- ip1
I0426 20:54:16.230980 32636 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0426 20:54:16.230986 32636 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0426 20:54:16.231065 32636 net.cpp:124] Setting up ip1_relu1_0_split
I0426 20:54:16.231073 32636 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:16.231076 32636 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:16.231081 32636 net.cpp:139] Memory required for data: 15530800
I0426 20:54:16.231084 32636 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:16.231092 32636 net.cpp:86] Creating Layer accuracy
I0426 20:54:16.231098 32636 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0426 20:54:16.231104 32636 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:16.231112 32636 net.cpp:382] accuracy -> accuracy
I0426 20:54:16.231123 32636 net.cpp:124] Setting up accuracy
I0426 20:54:16.231130 32636 net.cpp:131] Top shape: (1)
I0426 20:54:16.231139 32636 net.cpp:139] Memory required for data: 15530804
I0426 20:54:16.231144 32636 layer_factory.hpp:77] Creating layer loss
I0426 20:54:16.231150 32636 net.cpp:86] Creating Layer loss
I0426 20:54:16.231156 32636 net.cpp:408] loss <- ip1_relu1_0_split_1
I0426 20:54:16.231161 32636 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:16.231170 32636 net.cpp:382] loss -> loss
I0426 20:54:16.231179 32636 layer_factory.hpp:77] Creating layer loss
I0426 20:54:16.231423 32636 net.cpp:124] Setting up loss
I0426 20:54:16.231434 32636 net.cpp:131] Top shape: (1)
I0426 20:54:16.231437 32636 net.cpp:134]     with loss weight 1
I0426 20:54:16.231444 32636 net.cpp:139] Memory required for data: 15530808
I0426 20:54:16.231448 32636 net.cpp:200] loss needs backward computation.
I0426 20:54:16.231454 32636 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:16.231459 32636 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0426 20:54:16.231464 32636 net.cpp:200] relu1 needs backward computation.
I0426 20:54:16.231469 32636 net.cpp:200] ip1 needs backward computation.
I0426 20:54:16.231473 32636 net.cpp:200] pool1 needs backward computation.
I0426 20:54:16.231487 32636 net.cpp:200] conv1 needs backward computation.
I0426 20:54:16.231492 32636 net.cpp:200] pool0 needs backward computation.
I0426 20:54:16.231495 32636 net.cpp:200] conv0 needs backward computation.
I0426 20:54:16.231501 32636 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:16.231506 32636 net.cpp:202] mnist does not need backward computation.
I0426 20:54:16.231510 32636 net.cpp:244] This network produces output accuracy
I0426 20:54:16.231515 32636 net.cpp:244] This network produces output loss
I0426 20:54:16.231542 32636 net.cpp:257] Network initialization done.
I0426 20:54:16.231585 32636 solver.cpp:56] Solver scaffolding done.
I0426 20:54:16.231789 32636 caffe.cpp:248] Starting Optimization
I0426 20:54:16.231797 32636 solver.cpp:273] Solving LeNet
I0426 20:54:16.231801 32636 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:16.231945 32636 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:16.237960 32636 blocking_queue.cpp:49] Waiting for data
I0426 20:54:16.309993 32643 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:16.310703 32636 solver.cpp:398]     Test net output #0: accuracy = 0.1366
I0426 20:54:16.310737 32636 solver.cpp:398]     Test net output #1: loss = 2.30098 (* 1 = 2.30098 loss)
I0426 20:54:16.314959 32636 solver.cpp:219] Iteration 0 (0 iter/s, 0.0831304s/100 iters), loss = 2.23765
I0426 20:54:16.314998 32636 solver.cpp:238]     Train net output #0: loss = 2.23765 (* 1 = 2.23765 loss)
I0426 20:54:16.315009 32636 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:16.434201 32636 solver.cpp:219] Iteration 100 (839.007 iter/s, 0.119189s/100 iters), loss = 0.413942
I0426 20:54:16.434242 32636 solver.cpp:238]     Train net output #0: loss = 0.413942 (* 1 = 0.413942 loss)
I0426 20:54:16.434247 32636 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:16.552753 32636 solver.cpp:219] Iteration 200 (843.785 iter/s, 0.118514s/100 iters), loss = 0.381226
I0426 20:54:16.552793 32636 solver.cpp:238]     Train net output #0: loss = 0.381226 (* 1 = 0.381226 loss)
I0426 20:54:16.552799 32636 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:16.670656 32636 solver.cpp:219] Iteration 300 (848.515 iter/s, 0.117853s/100 iters), loss = 0.271312
I0426 20:54:16.670696 32636 solver.cpp:238]     Train net output #0: loss = 0.271312 (* 1 = 0.271312 loss)
I0426 20:54:16.670701 32636 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:16.788926 32636 solver.cpp:219] Iteration 400 (845.78 iter/s, 0.118234s/100 iters), loss = 0.313217
I0426 20:54:16.788965 32636 solver.cpp:238]     Train net output #0: loss = 0.313217 (* 1 = 0.313217 loss)
I0426 20:54:16.788970 32636 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:16.906668 32636 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:16.984117 32643 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:16.984835 32636 solver.cpp:398]     Test net output #0: accuracy = 0.8781
I0426 20:54:16.984869 32636 solver.cpp:398]     Test net output #1: loss = 0.324683 (* 1 = 0.324683 loss)
I0426 20:54:16.986122 32636 solver.cpp:219] Iteration 500 (507.208 iter/s, 0.197158s/100 iters), loss = 0.379235
I0426 20:54:16.986147 32636 solver.cpp:238]     Train net output #0: loss = 0.379235 (* 1 = 0.379235 loss)
I0426 20:54:16.986153 32636 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:17.104979 32636 solver.cpp:219] Iteration 600 (841.607 iter/s, 0.11882s/100 iters), loss = 0.402883
I0426 20:54:17.105005 32636 solver.cpp:238]     Train net output #0: loss = 0.402883 (* 1 = 0.402883 loss)
I0426 20:54:17.105010 32636 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:17.224882 32636 solver.cpp:219] Iteration 700 (834.262 iter/s, 0.119866s/100 iters), loss = 0.336819
I0426 20:54:17.224910 32636 solver.cpp:238]     Train net output #0: loss = 0.336819 (* 1 = 0.336819 loss)
I0426 20:54:17.224916 32636 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:17.350878 32636 solver.cpp:219] Iteration 800 (793.94 iter/s, 0.125954s/100 iters), loss = 0.400424
I0426 20:54:17.350916 32636 solver.cpp:238]     Train net output #0: loss = 0.400424 (* 1 = 0.400424 loss)
I0426 20:54:17.350924 32636 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:17.480314 32636 solver.cpp:219] Iteration 900 (772.853 iter/s, 0.129391s/100 iters), loss = 0.241884
I0426 20:54:17.480350 32636 solver.cpp:238]     Train net output #0: loss = 0.241884 (* 1 = 0.241884 loss)
I0426 20:54:17.480360 32636 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:17.522630 32642 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:17.604864 32636 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:17.606225 32636 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:17.607079 32636 solver.cpp:311] Iteration 1000, loss = 0.282448
I0426 20:54:17.607095 32636 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:17.683151 32643 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:17.683867 32636 solver.cpp:398]     Test net output #0: accuracy = 0.884
I0426 20:54:17.683902 32636 solver.cpp:398]     Test net output #1: loss = 0.297693 (* 1 = 0.297693 loss)
I0426 20:54:17.683907 32636 solver.cpp:316] Optimization Done.
I0426 20:54:17.683909 32636 caffe.cpp:259] Optimization Done.
