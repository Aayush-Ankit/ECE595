I0426 20:49:17.828802 31495 caffe.cpp:218] Using GPUs 0
I0426 20:49:17.867890 31495 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:49:18.389447 31495 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test32.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:49:18.389588 31495 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test32.prototxt
I0426 20:49:18.389920 31495 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:49:18.389938 31495 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:49:18.390014 31495 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:18.390085 31495 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:18.390179 31495 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:49:18.390202 31495 net.cpp:86] Creating Layer mnist
I0426 20:49:18.390211 31495 net.cpp:382] mnist -> data
I0426 20:49:18.390233 31495 net.cpp:382] mnist -> label
I0426 20:49:18.391327 31495 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:49:18.393860 31495 net.cpp:124] Setting up mnist
I0426 20:49:18.393879 31495 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:49:18.393885 31495 net.cpp:131] Top shape: 64 (64)
I0426 20:49:18.393888 31495 net.cpp:139] Memory required for data: 200960
I0426 20:49:18.393895 31495 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:18.393913 31495 net.cpp:86] Creating Layer conv0
I0426 20:49:18.393918 31495 net.cpp:408] conv0 <- data
I0426 20:49:18.393931 31495 net.cpp:382] conv0 -> conv0
I0426 20:49:18.645675 31495 net.cpp:124] Setting up conv0
I0426 20:49:18.645716 31495 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:49:18.645721 31495 net.cpp:139] Memory required for data: 3887360
I0426 20:49:18.645736 31495 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:18.645748 31495 net.cpp:86] Creating Layer pool0
I0426 20:49:18.645752 31495 net.cpp:408] pool0 <- conv0
I0426 20:49:18.645757 31495 net.cpp:382] pool0 -> pool0
I0426 20:49:18.645803 31495 net.cpp:124] Setting up pool0
I0426 20:49:18.645813 31495 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:49:18.645817 31495 net.cpp:139] Memory required for data: 4808960
I0426 20:49:18.645854 31495 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:18.645864 31495 net.cpp:86] Creating Layer ip1
I0426 20:49:18.645866 31495 net.cpp:408] ip1 <- pool0
I0426 20:49:18.645871 31495 net.cpp:382] ip1 -> ip1
I0426 20:49:18.652992 31495 net.cpp:124] Setting up ip1
I0426 20:49:18.653005 31495 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:18.653024 31495 net.cpp:139] Memory required for data: 4885760
I0426 20:49:18.653033 31495 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:18.653039 31495 net.cpp:86] Creating Layer relu1
I0426 20:49:18.653043 31495 net.cpp:408] relu1 <- ip1
I0426 20:49:18.653064 31495 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:18.653257 31495 net.cpp:124] Setting up relu1
I0426 20:49:18.653265 31495 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:49:18.653270 31495 net.cpp:139] Memory required for data: 4962560
I0426 20:49:18.653272 31495 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:18.653278 31495 net.cpp:86] Creating Layer ip2
I0426 20:49:18.653281 31495 net.cpp:408] ip2 <- ip1
I0426 20:49:18.653286 31495 net.cpp:382] ip2 -> ip2
I0426 20:49:18.654258 31495 net.cpp:124] Setting up ip2
I0426 20:49:18.654269 31495 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:18.654289 31495 net.cpp:139] Memory required for data: 4965120
I0426 20:49:18.654296 31495 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:18.654302 31495 net.cpp:86] Creating Layer relu2
I0426 20:49:18.654305 31495 net.cpp:408] relu2 <- ip2
I0426 20:49:18.654309 31495 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:18.655143 31495 net.cpp:124] Setting up relu2
I0426 20:49:18.655155 31495 net.cpp:131] Top shape: 64 10 (640)
I0426 20:49:18.655174 31495 net.cpp:139] Memory required for data: 4967680
I0426 20:49:18.655177 31495 layer_factory.hpp:77] Creating layer loss
I0426 20:49:18.655189 31495 net.cpp:86] Creating Layer loss
I0426 20:49:18.655191 31495 net.cpp:408] loss <- ip2
I0426 20:49:18.655196 31495 net.cpp:408] loss <- label
I0426 20:49:18.655201 31495 net.cpp:382] loss -> loss
I0426 20:49:18.655215 31495 layer_factory.hpp:77] Creating layer loss
I0426 20:49:18.655448 31495 net.cpp:124] Setting up loss
I0426 20:49:18.655457 31495 net.cpp:131] Top shape: (1)
I0426 20:49:18.655462 31495 net.cpp:134]     with loss weight 1
I0426 20:49:18.655475 31495 net.cpp:139] Memory required for data: 4967684
I0426 20:49:18.655478 31495 net.cpp:200] loss needs backward computation.
I0426 20:49:18.655483 31495 net.cpp:200] relu2 needs backward computation.
I0426 20:49:18.655485 31495 net.cpp:200] ip2 needs backward computation.
I0426 20:49:18.655488 31495 net.cpp:200] relu1 needs backward computation.
I0426 20:49:18.655491 31495 net.cpp:200] ip1 needs backward computation.
I0426 20:49:18.655494 31495 net.cpp:200] pool0 needs backward computation.
I0426 20:49:18.655498 31495 net.cpp:200] conv0 needs backward computation.
I0426 20:49:18.655501 31495 net.cpp:202] mnist does not need backward computation.
I0426 20:49:18.655504 31495 net.cpp:244] This network produces output loss
I0426 20:49:18.655511 31495 net.cpp:257] Network initialization done.
I0426 20:49:18.655756 31495 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test32.prototxt
I0426 20:49:18.655781 31495 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:49:18.655853 31495 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:49:18.655920 31495 layer_factory.hpp:77] Creating layer mnist
I0426 20:49:18.655962 31495 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:49:18.655974 31495 net.cpp:86] Creating Layer mnist
I0426 20:49:18.655979 31495 net.cpp:382] mnist -> data
I0426 20:49:18.655987 31495 net.cpp:382] mnist -> label
I0426 20:49:18.656065 31495 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:49:18.658197 31495 net.cpp:124] Setting up mnist
I0426 20:49:18.658226 31495 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:49:18.658231 31495 net.cpp:131] Top shape: 100 (100)
I0426 20:49:18.658236 31495 net.cpp:139] Memory required for data: 314000
I0426 20:49:18.658238 31495 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:49:18.658246 31495 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:49:18.658248 31495 net.cpp:408] label_mnist_1_split <- label
I0426 20:49:18.658253 31495 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:49:18.658259 31495 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:49:18.658299 31495 net.cpp:124] Setting up label_mnist_1_split
I0426 20:49:18.658305 31495 net.cpp:131] Top shape: 100 (100)
I0426 20:49:18.658308 31495 net.cpp:131] Top shape: 100 (100)
I0426 20:49:18.658311 31495 net.cpp:139] Memory required for data: 314800
I0426 20:49:18.658314 31495 layer_factory.hpp:77] Creating layer conv0
I0426 20:49:18.658323 31495 net.cpp:86] Creating Layer conv0
I0426 20:49:18.658325 31495 net.cpp:408] conv0 <- data
I0426 20:49:18.658330 31495 net.cpp:382] conv0 -> conv0
I0426 20:49:18.659981 31495 net.cpp:124] Setting up conv0
I0426 20:49:18.659997 31495 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:49:18.660001 31495 net.cpp:139] Memory required for data: 6074800
I0426 20:49:18.660010 31495 layer_factory.hpp:77] Creating layer pool0
I0426 20:49:18.660017 31495 net.cpp:86] Creating Layer pool0
I0426 20:49:18.660019 31495 net.cpp:408] pool0 <- conv0
I0426 20:49:18.660027 31495 net.cpp:382] pool0 -> pool0
I0426 20:49:18.660095 31495 net.cpp:124] Setting up pool0
I0426 20:49:18.660104 31495 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:49:18.660106 31495 net.cpp:139] Memory required for data: 7514800
I0426 20:49:18.660109 31495 layer_factory.hpp:77] Creating layer ip1
I0426 20:49:18.660116 31495 net.cpp:86] Creating Layer ip1
I0426 20:49:18.660123 31495 net.cpp:408] ip1 <- pool0
I0426 20:49:18.660128 31495 net.cpp:382] ip1 -> ip1
I0426 20:49:18.667469 31495 net.cpp:124] Setting up ip1
I0426 20:49:18.667481 31495 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:18.667485 31495 net.cpp:139] Memory required for data: 7634800
I0426 20:49:18.667493 31495 layer_factory.hpp:77] Creating layer relu1
I0426 20:49:18.667500 31495 net.cpp:86] Creating Layer relu1
I0426 20:49:18.667505 31495 net.cpp:408] relu1 <- ip1
I0426 20:49:18.667508 31495 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:49:18.667711 31495 net.cpp:124] Setting up relu1
I0426 20:49:18.667721 31495 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:49:18.667737 31495 net.cpp:139] Memory required for data: 7754800
I0426 20:49:18.667742 31495 layer_factory.hpp:77] Creating layer ip2
I0426 20:49:18.667747 31495 net.cpp:86] Creating Layer ip2
I0426 20:49:18.667750 31495 net.cpp:408] ip2 <- ip1
I0426 20:49:18.667757 31495 net.cpp:382] ip2 -> ip2
I0426 20:49:18.667876 31495 net.cpp:124] Setting up ip2
I0426 20:49:18.667884 31495 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:18.667886 31495 net.cpp:139] Memory required for data: 7758800
I0426 20:49:18.667894 31495 layer_factory.hpp:77] Creating layer relu2
I0426 20:49:18.667899 31495 net.cpp:86] Creating Layer relu2
I0426 20:49:18.667902 31495 net.cpp:408] relu2 <- ip2
I0426 20:49:18.667907 31495 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:49:18.668066 31495 net.cpp:124] Setting up relu2
I0426 20:49:18.668074 31495 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:18.668077 31495 net.cpp:139] Memory required for data: 7762800
I0426 20:49:18.668081 31495 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:49:18.668087 31495 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:49:18.668089 31495 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:49:18.668094 31495 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:49:18.668102 31495 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:49:18.668138 31495 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:49:18.668143 31495 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:18.668148 31495 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:49:18.668149 31495 net.cpp:139] Memory required for data: 7770800
I0426 20:49:18.668153 31495 layer_factory.hpp:77] Creating layer accuracy
I0426 20:49:18.668156 31495 net.cpp:86] Creating Layer accuracy
I0426 20:49:18.668159 31495 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:49:18.668164 31495 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:49:18.668169 31495 net.cpp:382] accuracy -> accuracy
I0426 20:49:18.668175 31495 net.cpp:124] Setting up accuracy
I0426 20:49:18.668179 31495 net.cpp:131] Top shape: (1)
I0426 20:49:18.668182 31495 net.cpp:139] Memory required for data: 7770804
I0426 20:49:18.668185 31495 layer_factory.hpp:77] Creating layer loss
I0426 20:49:18.668190 31495 net.cpp:86] Creating Layer loss
I0426 20:49:18.668192 31495 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:49:18.668195 31495 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:49:18.668200 31495 net.cpp:382] loss -> loss
I0426 20:49:18.668205 31495 layer_factory.hpp:77] Creating layer loss
I0426 20:49:18.669154 31495 net.cpp:124] Setting up loss
I0426 20:49:18.669167 31495 net.cpp:131] Top shape: (1)
I0426 20:49:18.669185 31495 net.cpp:134]     with loss weight 1
I0426 20:49:18.669191 31495 net.cpp:139] Memory required for data: 7770808
I0426 20:49:18.669195 31495 net.cpp:200] loss needs backward computation.
I0426 20:49:18.669198 31495 net.cpp:202] accuracy does not need backward computation.
I0426 20:49:18.669203 31495 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:49:18.669205 31495 net.cpp:200] relu2 needs backward computation.
I0426 20:49:18.669208 31495 net.cpp:200] ip2 needs backward computation.
I0426 20:49:18.669210 31495 net.cpp:200] relu1 needs backward computation.
I0426 20:49:18.669214 31495 net.cpp:200] ip1 needs backward computation.
I0426 20:49:18.669215 31495 net.cpp:200] pool0 needs backward computation.
I0426 20:49:18.669219 31495 net.cpp:200] conv0 needs backward computation.
I0426 20:49:18.669221 31495 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:49:18.669225 31495 net.cpp:202] mnist does not need backward computation.
I0426 20:49:18.669227 31495 net.cpp:244] This network produces output accuracy
I0426 20:49:18.669230 31495 net.cpp:244] This network produces output loss
I0426 20:49:18.669240 31495 net.cpp:257] Network initialization done.
I0426 20:49:18.669288 31495 solver.cpp:56] Solver scaffolding done.
I0426 20:49:18.669486 31495 caffe.cpp:248] Starting Optimization
I0426 20:49:18.669492 31495 solver.cpp:273] Solving LeNet
I0426 20:49:18.669505 31495 solver.cpp:274] Learning Rate Policy: inv
I0426 20:49:18.671449 31495 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:49:18.678244 31495 blocking_queue.cpp:49] Waiting for data
I0426 20:49:18.749840 31502 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:18.750440 31495 solver.cpp:398]     Test net output #0: accuracy = 0.094
I0426 20:49:18.750478 31495 solver.cpp:398]     Test net output #1: loss = 2.32537 (* 1 = 2.32537 loss)
I0426 20:49:18.753633 31495 solver.cpp:219] Iteration 0 (-5.19089e-31 iter/s, 0.0841009s/100 iters), loss = 2.33781
I0426 20:49:18.753657 31495 solver.cpp:238]     Train net output #0: loss = 2.33781 (* 1 = 2.33781 loss)
I0426 20:49:18.753684 31495 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:49:18.856959 31495 solver.cpp:219] Iteration 100 (968.226 iter/s, 0.103282s/100 iters), loss = 0.284873
I0426 20:49:18.857004 31495 solver.cpp:238]     Train net output #0: loss = 0.284873 (* 1 = 0.284873 loss)
I0426 20:49:18.857015 31495 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:49:18.960438 31495 solver.cpp:219] Iteration 200 (966.922 iter/s, 0.103421s/100 iters), loss = 0.205991
I0426 20:49:18.960480 31495 solver.cpp:238]     Train net output #0: loss = 0.205991 (* 1 = 0.205991 loss)
I0426 20:49:18.960491 31495 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:49:19.065165 31495 solver.cpp:219] Iteration 300 (955.354 iter/s, 0.104673s/100 iters), loss = 0.216182
I0426 20:49:19.065206 31495 solver.cpp:238]     Train net output #0: loss = 0.216182 (* 1 = 0.216182 loss)
I0426 20:49:19.065214 31495 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:49:19.163051 31495 solver.cpp:219] Iteration 400 (1022.12 iter/s, 0.0978361s/100 iters), loss = 0.105494
I0426 20:49:19.163084 31495 solver.cpp:238]     Train net output #0: loss = 0.105494 (* 1 = 0.105494 loss)
I0426 20:49:19.163091 31495 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:49:19.259239 31495 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:49:19.315006 31502 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:19.315639 31495 solver.cpp:398]     Test net output #0: accuracy = 0.9586
I0426 20:49:19.315662 31495 solver.cpp:398]     Test net output #1: loss = 0.140193 (* 1 = 0.140193 loss)
I0426 20:49:19.316530 31495 solver.cpp:219] Iteration 500 (651.741 iter/s, 0.153435s/100 iters), loss = 0.253179
I0426 20:49:19.316573 31495 solver.cpp:238]     Train net output #0: loss = 0.253179 (* 1 = 0.253179 loss)
I0426 20:49:19.316583 31495 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:49:19.419888 31495 solver.cpp:219] Iteration 600 (968.013 iter/s, 0.103304s/100 iters), loss = 0.0903437
I0426 20:49:19.419917 31495 solver.cpp:238]     Train net output #0: loss = 0.0903438 (* 1 = 0.0903438 loss)
I0426 20:49:19.419924 31495 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:49:19.516634 31495 solver.cpp:219] Iteration 700 (1034.04 iter/s, 0.0967085s/100 iters), loss = 0.245344
I0426 20:49:19.516664 31495 solver.cpp:238]     Train net output #0: loss = 0.245345 (* 1 = 0.245345 loss)
I0426 20:49:19.516672 31495 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:49:19.613162 31495 solver.cpp:219] Iteration 800 (1036.4 iter/s, 0.0964874s/100 iters), loss = 0.223557
I0426 20:49:19.613193 31495 solver.cpp:238]     Train net output #0: loss = 0.223557 (* 1 = 0.223557 loss)
I0426 20:49:19.613199 31495 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:49:19.714623 31495 solver.cpp:219] Iteration 900 (986.018 iter/s, 0.101418s/100 iters), loss = 0.23459
I0426 20:49:19.714668 31495 solver.cpp:238]     Train net output #0: loss = 0.23459 (* 1 = 0.23459 loss)
I0426 20:49:19.714681 31495 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:49:19.749341 31501 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:19.817615 31495 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:49:19.842209 31495 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:49:19.851779 31495 solver.cpp:311] Iteration 1000, loss = 0.119427
I0426 20:49:19.851815 31495 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:49:19.920539 31502 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:49:19.921151 31495 solver.cpp:398]     Test net output #0: accuracy = 0.9714
I0426 20:49:19.921182 31495 solver.cpp:398]     Test net output #1: loss = 0.0914681 (* 1 = 0.0914681 loss)
I0426 20:49:19.921188 31495 solver.cpp:316] Optimization Done.
I0426 20:49:19.921192 31495 caffe.cpp:259] Optimization Done.
