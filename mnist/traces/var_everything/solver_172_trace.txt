I0426 20:55:02.949548   330 caffe.cpp:218] Using GPUs 0
I0426 20:55:02.987292   330 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:03.512037   330 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test172.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:03.512189   330 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test172.prototxt
I0426 20:55:03.512557   330 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:03.512572   330 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:03.512660   330 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:55:03.512732   330 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:03.512845   330 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:03.512869   330 net.cpp:86] Creating Layer mnist
I0426 20:55:03.512876   330 net.cpp:382] mnist -> data
I0426 20:55:03.512900   330 net.cpp:382] mnist -> label
I0426 20:55:03.513994   330 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:03.516520   330 net.cpp:124] Setting up mnist
I0426 20:55:03.516536   330 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:03.516543   330 net.cpp:131] Top shape: 64 (64)
I0426 20:55:03.516546   330 net.cpp:139] Memory required for data: 200960
I0426 20:55:03.516554   330 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:03.516569   330 net.cpp:86] Creating Layer conv0
I0426 20:55:03.516575   330 net.cpp:408] conv0 <- data
I0426 20:55:03.516587   330 net.cpp:382] conv0 -> conv0
I0426 20:55:03.803632   330 net.cpp:124] Setting up conv0
I0426 20:55:03.803658   330 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:03.803663   330 net.cpp:139] Memory required for data: 7573760
I0426 20:55:03.803697   330 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:03.803710   330 net.cpp:86] Creating Layer pool0
I0426 20:55:03.803714   330 net.cpp:408] pool0 <- conv0
I0426 20:55:03.803720   330 net.cpp:382] pool0 -> pool0
I0426 20:55:03.803766   330 net.cpp:124] Setting up pool0
I0426 20:55:03.803772   330 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:03.803776   330 net.cpp:139] Memory required for data: 9416960
I0426 20:55:03.803778   330 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:03.803788   330 net.cpp:86] Creating Layer conv1
I0426 20:55:03.803792   330 net.cpp:408] conv1 <- pool0
I0426 20:55:03.803797   330 net.cpp:382] conv1 -> conv1
I0426 20:55:03.806040   330 net.cpp:124] Setting up conv1
I0426 20:55:03.806053   330 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:03.806057   330 net.cpp:139] Memory required for data: 10236160
I0426 20:55:03.806066   330 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:03.806073   330 net.cpp:86] Creating Layer pool1
I0426 20:55:03.806077   330 net.cpp:408] pool1 <- conv1
I0426 20:55:03.806082   330 net.cpp:382] pool1 -> pool1
I0426 20:55:03.806115   330 net.cpp:124] Setting up pool1
I0426 20:55:03.806120   330 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:03.806123   330 net.cpp:139] Memory required for data: 10440960
I0426 20:55:03.806125   330 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:03.806133   330 net.cpp:86] Creating Layer ip1
I0426 20:55:03.806135   330 net.cpp:408] ip1 <- pool1
I0426 20:55:03.806139   330 net.cpp:382] ip1 -> ip1
I0426 20:55:03.808400   330 net.cpp:124] Setting up ip1
I0426 20:55:03.808413   330 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:03.808416   330 net.cpp:139] Memory required for data: 10517760
I0426 20:55:03.808424   330 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:03.808430   330 net.cpp:86] Creating Layer relu1
I0426 20:55:03.808434   330 net.cpp:408] relu1 <- ip1
I0426 20:55:03.808439   330 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:03.808612   330 net.cpp:124] Setting up relu1
I0426 20:55:03.808620   330 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:03.808624   330 net.cpp:139] Memory required for data: 10594560
I0426 20:55:03.808626   330 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:03.808634   330 net.cpp:86] Creating Layer ip2
I0426 20:55:03.808636   330 net.cpp:408] ip2 <- ip1
I0426 20:55:03.808641   330 net.cpp:382] ip2 -> ip2
I0426 20:55:03.808750   330 net.cpp:124] Setting up ip2
I0426 20:55:03.808758   330 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:03.808760   330 net.cpp:139] Memory required for data: 10597120
I0426 20:55:03.808765   330 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:03.808771   330 net.cpp:86] Creating Layer relu2
I0426 20:55:03.808774   330 net.cpp:408] relu2 <- ip2
I0426 20:55:03.808779   330 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:03.809656   330 net.cpp:124] Setting up relu2
I0426 20:55:03.809669   330 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:03.809672   330 net.cpp:139] Memory required for data: 10599680
I0426 20:55:03.809675   330 layer_factory.hpp:77] Creating layer loss
I0426 20:55:03.809681   330 net.cpp:86] Creating Layer loss
I0426 20:55:03.809684   330 net.cpp:408] loss <- ip2
I0426 20:55:03.809689   330 net.cpp:408] loss <- label
I0426 20:55:03.809695   330 net.cpp:382] loss -> loss
I0426 20:55:03.809713   330 layer_factory.hpp:77] Creating layer loss
I0426 20:55:03.809968   330 net.cpp:124] Setting up loss
I0426 20:55:03.809978   330 net.cpp:131] Top shape: (1)
I0426 20:55:03.809981   330 net.cpp:134]     with loss weight 1
I0426 20:55:03.809995   330 net.cpp:139] Memory required for data: 10599684
I0426 20:55:03.809998   330 net.cpp:200] loss needs backward computation.
I0426 20:55:03.810003   330 net.cpp:200] relu2 needs backward computation.
I0426 20:55:03.810005   330 net.cpp:200] ip2 needs backward computation.
I0426 20:55:03.810009   330 net.cpp:200] relu1 needs backward computation.
I0426 20:55:03.810011   330 net.cpp:200] ip1 needs backward computation.
I0426 20:55:03.810024   330 net.cpp:200] pool1 needs backward computation.
I0426 20:55:03.810027   330 net.cpp:200] conv1 needs backward computation.
I0426 20:55:03.810031   330 net.cpp:200] pool0 needs backward computation.
I0426 20:55:03.810034   330 net.cpp:200] conv0 needs backward computation.
I0426 20:55:03.810037   330 net.cpp:202] mnist does not need backward computation.
I0426 20:55:03.810040   330 net.cpp:244] This network produces output loss
I0426 20:55:03.810063   330 net.cpp:257] Network initialization done.
I0426 20:55:03.810374   330 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test172.prototxt
I0426 20:55:03.810412   330 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:03.810508   330 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:55:03.810570   330 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:03.810616   330 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:03.810627   330 net.cpp:86] Creating Layer mnist
I0426 20:55:03.810631   330 net.cpp:382] mnist -> data
I0426 20:55:03.810639   330 net.cpp:382] mnist -> label
I0426 20:55:03.810720   330 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:03.812685   330 net.cpp:124] Setting up mnist
I0426 20:55:03.812697   330 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:03.812701   330 net.cpp:131] Top shape: 100 (100)
I0426 20:55:03.812705   330 net.cpp:139] Memory required for data: 314000
I0426 20:55:03.812708   330 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:03.812714   330 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:03.812717   330 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:03.812722   330 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:03.812728   330 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:03.812841   330 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:03.812865   330 net.cpp:131] Top shape: 100 (100)
I0426 20:55:03.812870   330 net.cpp:131] Top shape: 100 (100)
I0426 20:55:03.812872   330 net.cpp:139] Memory required for data: 314800
I0426 20:55:03.812875   330 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:03.812885   330 net.cpp:86] Creating Layer conv0
I0426 20:55:03.812887   330 net.cpp:408] conv0 <- data
I0426 20:55:03.812893   330 net.cpp:382] conv0 -> conv0
I0426 20:55:03.814529   330 net.cpp:124] Setting up conv0
I0426 20:55:03.814543   330 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:03.814546   330 net.cpp:139] Memory required for data: 11834800
I0426 20:55:03.814555   330 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:03.814561   330 net.cpp:86] Creating Layer pool0
I0426 20:55:03.814564   330 net.cpp:408] pool0 <- conv0
I0426 20:55:03.814569   330 net.cpp:382] pool0 -> pool0
I0426 20:55:03.814602   330 net.cpp:124] Setting up pool0
I0426 20:55:03.814606   330 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:03.814610   330 net.cpp:139] Memory required for data: 14714800
I0426 20:55:03.814612   330 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:03.814620   330 net.cpp:86] Creating Layer conv1
I0426 20:55:03.814623   330 net.cpp:408] conv1 <- pool0
I0426 20:55:03.814628   330 net.cpp:382] conv1 -> conv1
I0426 20:55:03.816478   330 net.cpp:124] Setting up conv1
I0426 20:55:03.816490   330 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:03.816494   330 net.cpp:139] Memory required for data: 15994800
I0426 20:55:03.816503   330 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:03.816509   330 net.cpp:86] Creating Layer pool1
I0426 20:55:03.816512   330 net.cpp:408] pool1 <- conv1
I0426 20:55:03.816519   330 net.cpp:382] pool1 -> pool1
I0426 20:55:03.816570   330 net.cpp:124] Setting up pool1
I0426 20:55:03.816576   330 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:03.816578   330 net.cpp:139] Memory required for data: 16314800
I0426 20:55:03.816581   330 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:03.816588   330 net.cpp:86] Creating Layer ip1
I0426 20:55:03.816591   330 net.cpp:408] ip1 <- pool1
I0426 20:55:03.816596   330 net.cpp:382] ip1 -> ip1
I0426 20:55:03.818053   330 net.cpp:124] Setting up ip1
I0426 20:55:03.818063   330 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:03.818064   330 net.cpp:139] Memory required for data: 16434800
I0426 20:55:03.818071   330 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:03.818078   330 net.cpp:86] Creating Layer relu1
I0426 20:55:03.818080   330 net.cpp:408] relu1 <- ip1
I0426 20:55:03.818085   330 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:03.818305   330 net.cpp:124] Setting up relu1
I0426 20:55:03.818312   330 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:03.818316   330 net.cpp:139] Memory required for data: 16554800
I0426 20:55:03.818320   330 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:03.818327   330 net.cpp:86] Creating Layer ip2
I0426 20:55:03.818331   330 net.cpp:408] ip2 <- ip1
I0426 20:55:03.818336   330 net.cpp:382] ip2 -> ip2
I0426 20:55:03.818473   330 net.cpp:124] Setting up ip2
I0426 20:55:03.818481   330 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:03.818485   330 net.cpp:139] Memory required for data: 16558800
I0426 20:55:03.818490   330 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:03.818495   330 net.cpp:86] Creating Layer relu2
I0426 20:55:03.818497   330 net.cpp:408] relu2 <- ip2
I0426 20:55:03.818502   330 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:03.818706   330 net.cpp:124] Setting up relu2
I0426 20:55:03.818717   330 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:03.818719   330 net.cpp:139] Memory required for data: 16562800
I0426 20:55:03.818722   330 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:55:03.818727   330 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:55:03.818730   330 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:55:03.818734   330 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:55:03.818752   330 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:55:03.818801   330 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:55:03.818806   330 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:03.818810   330 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:03.818814   330 net.cpp:139] Memory required for data: 16570800
I0426 20:55:03.818816   330 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:03.818821   330 net.cpp:86] Creating Layer accuracy
I0426 20:55:03.818825   330 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:55:03.818835   330 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:03.818841   330 net.cpp:382] accuracy -> accuracy
I0426 20:55:03.818848   330 net.cpp:124] Setting up accuracy
I0426 20:55:03.818852   330 net.cpp:131] Top shape: (1)
I0426 20:55:03.818859   330 net.cpp:139] Memory required for data: 16570804
I0426 20:55:03.818862   330 layer_factory.hpp:77] Creating layer loss
I0426 20:55:03.818872   330 net.cpp:86] Creating Layer loss
I0426 20:55:03.818876   330 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:55:03.818879   330 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:03.818887   330 net.cpp:382] loss -> loss
I0426 20:55:03.818893   330 layer_factory.hpp:77] Creating layer loss
I0426 20:55:03.819119   330 net.cpp:124] Setting up loss
I0426 20:55:03.819128   330 net.cpp:131] Top shape: (1)
I0426 20:55:03.819131   330 net.cpp:134]     with loss weight 1
I0426 20:55:03.819138   330 net.cpp:139] Memory required for data: 16570808
I0426 20:55:03.819140   330 net.cpp:200] loss needs backward computation.
I0426 20:55:03.819144   330 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:03.819149   330 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:55:03.819159   330 net.cpp:200] relu2 needs backward computation.
I0426 20:55:03.819160   330 net.cpp:200] ip2 needs backward computation.
I0426 20:55:03.819164   330 net.cpp:200] relu1 needs backward computation.
I0426 20:55:03.819166   330 net.cpp:200] ip1 needs backward computation.
I0426 20:55:03.819169   330 net.cpp:200] pool1 needs backward computation.
I0426 20:55:03.819172   330 net.cpp:200] conv1 needs backward computation.
I0426 20:55:03.819175   330 net.cpp:200] pool0 needs backward computation.
I0426 20:55:03.819178   330 net.cpp:200] conv0 needs backward computation.
I0426 20:55:03.819182   330 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:03.819186   330 net.cpp:202] mnist does not need backward computation.
I0426 20:55:03.819193   330 net.cpp:244] This network produces output accuracy
I0426 20:55:03.819196   330 net.cpp:244] This network produces output loss
I0426 20:55:03.819213   330 net.cpp:257] Network initialization done.
I0426 20:55:03.819249   330 solver.cpp:56] Solver scaffolding done.
I0426 20:55:03.819499   330 caffe.cpp:248] Starting Optimization
I0426 20:55:03.819506   330 solver.cpp:273] Solving LeNet
I0426 20:55:03.819509   330 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:03.821060   330 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:03.827822   330 blocking_queue.cpp:49] Waiting for data
I0426 20:55:03.902823   337 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:03.903852   330 solver.cpp:398]     Test net output #0: accuracy = 0.1335
I0426 20:55:03.903887   330 solver.cpp:398]     Test net output #1: loss = 2.27516 (* 1 = 2.27516 loss)
I0426 20:55:03.908985   330 solver.cpp:219] Iteration 0 (2.54514 iter/s, 0.0894444s/100 iters), loss = 2.27777
I0426 20:55:03.909025   330 solver.cpp:238]     Train net output #0: loss = 2.27777 (* 1 = 2.27777 loss)
I0426 20:55:03.909036   330 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:04.076138   330 solver.cpp:219] Iteration 100 (598.399 iter/s, 0.167113s/100 iters), loss = 0.755962
I0426 20:55:04.076162   330 solver.cpp:238]     Train net output #0: loss = 0.755962 (* 1 = 0.755962 loss)
I0426 20:55:04.076169   330 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:04.236212   330 solver.cpp:219] Iteration 200 (624.86 iter/s, 0.160036s/100 iters), loss = 0.245154
I0426 20:55:04.236251   330 solver.cpp:238]     Train net output #0: loss = 0.245154 (* 1 = 0.245154 loss)
I0426 20:55:04.236258   330 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:04.397434   330 solver.cpp:219] Iteration 300 (620.414 iter/s, 0.161183s/100 iters), loss = 0.473436
I0426 20:55:04.397475   330 solver.cpp:238]     Train net output #0: loss = 0.473436 (* 1 = 0.473436 loss)
I0426 20:55:04.397480   330 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:04.557384   330 solver.cpp:219] Iteration 400 (625.401 iter/s, 0.159898s/100 iters), loss = 0.186474
I0426 20:55:04.557407   330 solver.cpp:238]     Train net output #0: loss = 0.186474 (* 1 = 0.186474 loss)
I0426 20:55:04.557413   330 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:04.714712   330 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:04.792857   337 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:04.794009   330 solver.cpp:398]     Test net output #0: accuracy = 0.8777
I0426 20:55:04.794044   330 solver.cpp:398]     Test net output #1: loss = 0.311877 (* 1 = 0.311877 loss)
I0426 20:55:04.795631   330 solver.cpp:219] Iteration 500 (419.832 iter/s, 0.238191s/100 iters), loss = 0.252887
I0426 20:55:04.795655   330 solver.cpp:238]     Train net output #0: loss = 0.252887 (* 1 = 0.252887 loss)
I0426 20:55:04.795662   330 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:04.956974   330 solver.cpp:219] Iteration 600 (619.946 iter/s, 0.161304s/100 iters), loss = 0.321028
I0426 20:55:04.957015   330 solver.cpp:238]     Train net output #0: loss = 0.321028 (* 1 = 0.321028 loss)
I0426 20:55:04.957021   330 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:05.117007   330 solver.cpp:219] Iteration 700 (625.08 iter/s, 0.15998s/100 iters), loss = 0.430107
I0426 20:55:05.117034   330 solver.cpp:238]     Train net output #0: loss = 0.430107 (* 1 = 0.430107 loss)
I0426 20:55:05.117040   330 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:05.276101   330 solver.cpp:219] Iteration 800 (628.714 iter/s, 0.159055s/100 iters), loss = 0.402937
I0426 20:55:05.276142   330 solver.cpp:238]     Train net output #0: loss = 0.402937 (* 1 = 0.402937 loss)
I0426 20:55:05.276149   330 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:05.437177   330 solver.cpp:219] Iteration 900 (620.978 iter/s, 0.161036s/100 iters), loss = 0.158719
I0426 20:55:05.437218   330 solver.cpp:238]     Train net output #0: loss = 0.158719 (* 1 = 0.158719 loss)
I0426 20:55:05.437224   330 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:05.490681   336 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:05.597003   330 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:05.601920   330 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:05.604740   330 solver.cpp:311] Iteration 1000, loss = 0.0901475
I0426 20:55:05.604755   330 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:05.684604   337 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:05.685673   330 solver.cpp:398]     Test net output #0: accuracy = 0.9812
I0426 20:55:05.685709   330 solver.cpp:398]     Test net output #1: loss = 0.0608329 (* 1 = 0.0608329 loss)
I0426 20:55:05.685714   330 solver.cpp:316] Optimization Done.
I0426 20:55:05.685717   330 caffe.cpp:259] Optimization Done.
