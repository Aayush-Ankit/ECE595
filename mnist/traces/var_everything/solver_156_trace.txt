I0426 20:54:17.953702 32644 caffe.cpp:218] Using GPUs 0
I0426 20:54:17.989269 32644 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:18.523931 32644 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test156.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:18.524072 32644 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test156.prototxt
I0426 20:54:18.524443 32644 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:18.524461 32644 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:18.524549 32644 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:18.524621 32644 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:18.524715 32644 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:18.524737 32644 net.cpp:86] Creating Layer mnist
I0426 20:54:18.524746 32644 net.cpp:382] mnist -> data
I0426 20:54:18.524767 32644 net.cpp:382] mnist -> label
I0426 20:54:18.525843 32644 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:18.528350 32644 net.cpp:124] Setting up mnist
I0426 20:54:18.528367 32644 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:18.528373 32644 net.cpp:131] Top shape: 64 (64)
I0426 20:54:18.528376 32644 net.cpp:139] Memory required for data: 200960
I0426 20:54:18.528383 32644 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:18.528422 32644 net.cpp:86] Creating Layer conv0
I0426 20:54:18.528432 32644 net.cpp:408] conv0 <- data
I0426 20:54:18.528445 32644 net.cpp:382] conv0 -> conv0
I0426 20:54:18.823284 32644 net.cpp:124] Setting up conv0
I0426 20:54:18.823315 32644 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:18.823320 32644 net.cpp:139] Memory required for data: 7573760
I0426 20:54:18.823360 32644 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:18.823374 32644 net.cpp:86] Creating Layer pool0
I0426 20:54:18.823379 32644 net.cpp:408] pool0 <- conv0
I0426 20:54:18.823386 32644 net.cpp:382] pool0 -> pool0
I0426 20:54:18.823443 32644 net.cpp:124] Setting up pool0
I0426 20:54:18.823452 32644 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:18.823468 32644 net.cpp:139] Memory required for data: 9416960
I0426 20:54:18.823472 32644 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:18.823484 32644 net.cpp:86] Creating Layer conv1
I0426 20:54:18.823489 32644 net.cpp:408] conv1 <- pool0
I0426 20:54:18.823494 32644 net.cpp:382] conv1 -> conv1
I0426 20:54:18.826037 32644 net.cpp:124] Setting up conv1
I0426 20:54:18.826056 32644 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:18.826061 32644 net.cpp:139] Memory required for data: 9826560
I0426 20:54:18.826071 32644 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:18.826079 32644 net.cpp:86] Creating Layer pool1
I0426 20:54:18.826084 32644 net.cpp:408] pool1 <- conv1
I0426 20:54:18.826091 32644 net.cpp:382] pool1 -> pool1
I0426 20:54:18.826143 32644 net.cpp:124] Setting up pool1
I0426 20:54:18.826151 32644 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:18.826155 32644 net.cpp:139] Memory required for data: 9928960
I0426 20:54:18.826159 32644 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:18.826166 32644 net.cpp:86] Creating Layer ip1
I0426 20:54:18.826170 32644 net.cpp:408] ip1 <- pool1
I0426 20:54:18.826175 32644 net.cpp:382] ip1 -> ip1
I0426 20:54:18.826568 32644 net.cpp:124] Setting up ip1
I0426 20:54:18.826578 32644 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:18.826582 32644 net.cpp:139] Memory required for data: 9954560
I0426 20:54:18.826591 32644 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:18.826596 32644 net.cpp:86] Creating Layer relu1
I0426 20:54:18.826601 32644 net.cpp:408] relu1 <- ip1
I0426 20:54:18.826606 32644 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:18.826802 32644 net.cpp:124] Setting up relu1
I0426 20:54:18.826812 32644 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:18.826815 32644 net.cpp:139] Memory required for data: 9980160
I0426 20:54:18.826819 32644 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:18.826828 32644 net.cpp:86] Creating Layer ip2
I0426 20:54:18.826830 32644 net.cpp:408] ip2 <- ip1
I0426 20:54:18.826836 32644 net.cpp:382] ip2 -> ip2
I0426 20:54:18.826956 32644 net.cpp:124] Setting up ip2
I0426 20:54:18.826964 32644 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:18.826967 32644 net.cpp:139] Memory required for data: 9982720
I0426 20:54:18.826974 32644 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:18.826982 32644 net.cpp:86] Creating Layer relu2
I0426 20:54:18.826985 32644 net.cpp:408] relu2 <- ip2
I0426 20:54:18.826990 32644 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:18.827926 32644 net.cpp:124] Setting up relu2
I0426 20:54:18.827942 32644 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:18.827946 32644 net.cpp:139] Memory required for data: 9985280
I0426 20:54:18.827950 32644 layer_factory.hpp:77] Creating layer loss
I0426 20:54:18.827958 32644 net.cpp:86] Creating Layer loss
I0426 20:54:18.827961 32644 net.cpp:408] loss <- ip2
I0426 20:54:18.827967 32644 net.cpp:408] loss <- label
I0426 20:54:18.827973 32644 net.cpp:382] loss -> loss
I0426 20:54:18.827996 32644 layer_factory.hpp:77] Creating layer loss
I0426 20:54:18.828271 32644 net.cpp:124] Setting up loss
I0426 20:54:18.828284 32644 net.cpp:131] Top shape: (1)
I0426 20:54:18.828287 32644 net.cpp:134]     with loss weight 1
I0426 20:54:18.828305 32644 net.cpp:139] Memory required for data: 9985284
I0426 20:54:18.828310 32644 net.cpp:200] loss needs backward computation.
I0426 20:54:18.828315 32644 net.cpp:200] relu2 needs backward computation.
I0426 20:54:18.828317 32644 net.cpp:200] ip2 needs backward computation.
I0426 20:54:18.828321 32644 net.cpp:200] relu1 needs backward computation.
I0426 20:54:18.828325 32644 net.cpp:200] ip1 needs backward computation.
I0426 20:54:18.828342 32644 net.cpp:200] pool1 needs backward computation.
I0426 20:54:18.828347 32644 net.cpp:200] conv1 needs backward computation.
I0426 20:54:18.828351 32644 net.cpp:200] pool0 needs backward computation.
I0426 20:54:18.828354 32644 net.cpp:200] conv0 needs backward computation.
I0426 20:54:18.828359 32644 net.cpp:202] mnist does not need backward computation.
I0426 20:54:18.828362 32644 net.cpp:244] This network produces output loss
I0426 20:54:18.828373 32644 net.cpp:257] Network initialization done.
I0426 20:54:18.828716 32644 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test156.prototxt
I0426 20:54:18.828745 32644 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:18.828852 32644 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:54:18.828927 32644 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:18.828977 32644 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:18.828991 32644 net.cpp:86] Creating Layer mnist
I0426 20:54:18.828996 32644 net.cpp:382] mnist -> data
I0426 20:54:18.829005 32644 net.cpp:382] mnist -> label
I0426 20:54:18.829107 32644 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:18.831365 32644 net.cpp:124] Setting up mnist
I0426 20:54:18.831382 32644 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:18.831387 32644 net.cpp:131] Top shape: 100 (100)
I0426 20:54:18.831392 32644 net.cpp:139] Memory required for data: 314000
I0426 20:54:18.831395 32644 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:18.831408 32644 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:18.831413 32644 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:18.831418 32644 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:18.831426 32644 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:18.831547 32644 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:18.831557 32644 net.cpp:131] Top shape: 100 (100)
I0426 20:54:18.831562 32644 net.cpp:131] Top shape: 100 (100)
I0426 20:54:18.831564 32644 net.cpp:139] Memory required for data: 314800
I0426 20:54:18.831568 32644 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:18.831579 32644 net.cpp:86] Creating Layer conv0
I0426 20:54:18.831584 32644 net.cpp:408] conv0 <- data
I0426 20:54:18.831591 32644 net.cpp:382] conv0 -> conv0
I0426 20:54:18.833542 32644 net.cpp:124] Setting up conv0
I0426 20:54:18.833559 32644 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:18.833564 32644 net.cpp:139] Memory required for data: 11834800
I0426 20:54:18.833575 32644 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:18.833582 32644 net.cpp:86] Creating Layer pool0
I0426 20:54:18.833586 32644 net.cpp:408] pool0 <- conv0
I0426 20:54:18.833592 32644 net.cpp:382] pool0 -> pool0
I0426 20:54:18.833636 32644 net.cpp:124] Setting up pool0
I0426 20:54:18.833644 32644 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:18.833648 32644 net.cpp:139] Memory required for data: 14714800
I0426 20:54:18.833652 32644 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:18.833662 32644 net.cpp:86] Creating Layer conv1
I0426 20:54:18.833667 32644 net.cpp:408] conv1 <- pool0
I0426 20:54:18.833673 32644 net.cpp:382] conv1 -> conv1
I0426 20:54:18.835804 32644 net.cpp:124] Setting up conv1
I0426 20:54:18.835819 32644 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:18.835824 32644 net.cpp:139] Memory required for data: 15354800
I0426 20:54:18.835834 32644 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:18.835842 32644 net.cpp:86] Creating Layer pool1
I0426 20:54:18.835847 32644 net.cpp:408] pool1 <- conv1
I0426 20:54:18.835853 32644 net.cpp:382] pool1 -> pool1
I0426 20:54:18.835897 32644 net.cpp:124] Setting up pool1
I0426 20:54:18.835906 32644 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:18.835911 32644 net.cpp:139] Memory required for data: 15514800
I0426 20:54:18.835913 32644 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:18.835921 32644 net.cpp:86] Creating Layer ip1
I0426 20:54:18.835925 32644 net.cpp:408] ip1 <- pool1
I0426 20:54:18.835932 32644 net.cpp:382] ip1 -> ip1
I0426 20:54:18.836321 32644 net.cpp:124] Setting up ip1
I0426 20:54:18.836331 32644 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:18.836335 32644 net.cpp:139] Memory required for data: 15554800
I0426 20:54:18.836344 32644 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:18.836349 32644 net.cpp:86] Creating Layer relu1
I0426 20:54:18.836354 32644 net.cpp:408] relu1 <- ip1
I0426 20:54:18.836359 32644 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:18.836545 32644 net.cpp:124] Setting up relu1
I0426 20:54:18.836555 32644 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:18.836560 32644 net.cpp:139] Memory required for data: 15594800
I0426 20:54:18.836563 32644 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:18.836571 32644 net.cpp:86] Creating Layer ip2
I0426 20:54:18.836578 32644 net.cpp:408] ip2 <- ip1
I0426 20:54:18.836585 32644 net.cpp:382] ip2 -> ip2
I0426 20:54:18.836724 32644 net.cpp:124] Setting up ip2
I0426 20:54:18.836732 32644 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:18.836736 32644 net.cpp:139] Memory required for data: 15598800
I0426 20:54:18.836742 32644 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:18.836748 32644 net.cpp:86] Creating Layer relu2
I0426 20:54:18.836752 32644 net.cpp:408] relu2 <- ip2
I0426 20:54:18.836757 32644 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:18.837041 32644 net.cpp:124] Setting up relu2
I0426 20:54:18.837055 32644 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:18.837060 32644 net.cpp:139] Memory required for data: 15602800
I0426 20:54:18.837064 32644 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:54:18.837070 32644 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:54:18.837074 32644 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:54:18.837080 32644 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:54:18.837100 32644 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:54:18.837147 32644 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:54:18.837155 32644 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:18.837160 32644 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:18.837164 32644 net.cpp:139] Memory required for data: 15610800
I0426 20:54:18.837178 32644 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:18.837184 32644 net.cpp:86] Creating Layer accuracy
I0426 20:54:18.837188 32644 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:54:18.837193 32644 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:18.837198 32644 net.cpp:382] accuracy -> accuracy
I0426 20:54:18.837206 32644 net.cpp:124] Setting up accuracy
I0426 20:54:18.837210 32644 net.cpp:131] Top shape: (1)
I0426 20:54:18.837213 32644 net.cpp:139] Memory required for data: 15610804
I0426 20:54:18.837218 32644 layer_factory.hpp:77] Creating layer loss
I0426 20:54:18.837229 32644 net.cpp:86] Creating Layer loss
I0426 20:54:18.837234 32644 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:54:18.837239 32644 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:18.837244 32644 net.cpp:382] loss -> loss
I0426 20:54:18.837250 32644 layer_factory.hpp:77] Creating layer loss
I0426 20:54:18.837523 32644 net.cpp:124] Setting up loss
I0426 20:54:18.837533 32644 net.cpp:131] Top shape: (1)
I0426 20:54:18.837538 32644 net.cpp:134]     with loss weight 1
I0426 20:54:18.837544 32644 net.cpp:139] Memory required for data: 15610808
I0426 20:54:18.837548 32644 net.cpp:200] loss needs backward computation.
I0426 20:54:18.837553 32644 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:18.837558 32644 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:54:18.837560 32644 net.cpp:200] relu2 needs backward computation.
I0426 20:54:18.837563 32644 net.cpp:200] ip2 needs backward computation.
I0426 20:54:18.837568 32644 net.cpp:200] relu1 needs backward computation.
I0426 20:54:18.837571 32644 net.cpp:200] ip1 needs backward computation.
I0426 20:54:18.837575 32644 net.cpp:200] pool1 needs backward computation.
I0426 20:54:18.837579 32644 net.cpp:200] conv1 needs backward computation.
I0426 20:54:18.837584 32644 net.cpp:200] pool0 needs backward computation.
I0426 20:54:18.837586 32644 net.cpp:200] conv0 needs backward computation.
I0426 20:54:18.837591 32644 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:18.837595 32644 net.cpp:202] mnist does not need backward computation.
I0426 20:54:18.837599 32644 net.cpp:244] This network produces output accuracy
I0426 20:54:18.837602 32644 net.cpp:244] This network produces output loss
I0426 20:54:18.837615 32644 net.cpp:257] Network initialization done.
I0426 20:54:18.837659 32644 solver.cpp:56] Solver scaffolding done.
I0426 20:54:18.837985 32644 caffe.cpp:248] Starting Optimization
I0426 20:54:18.837991 32644 solver.cpp:273] Solving LeNet
I0426 20:54:18.837996 32644 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:18.839030 32644 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:18.845979 32644 blocking_queue.cpp:49] Waiting for data
I0426 20:54:18.919374 32651 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:18.920171 32644 solver.cpp:398]     Test net output #0: accuracy = 0.0985
I0426 20:54:18.920207 32644 solver.cpp:398]     Test net output #1: loss = 2.33629 (* 1 = 2.33629 loss)
I0426 20:54:18.924657 32644 solver.cpp:219] Iteration 0 (2.62803 iter/s, 0.0866232s/100 iters), loss = 2.3586
I0426 20:54:18.924680 32644 solver.cpp:238]     Train net output #0: loss = 2.3586 (* 1 = 2.3586 loss)
I0426 20:54:18.924692 32644 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:19.059460 32644 solver.cpp:219] Iteration 100 (742.063 iter/s, 0.134759s/100 iters), loss = 0.29121
I0426 20:54:19.059506 32644 solver.cpp:238]     Train net output #0: loss = 0.29121 (* 1 = 0.29121 loss)
I0426 20:54:19.059517 32644 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:19.201975 32644 solver.cpp:219] Iteration 200 (701.957 iter/s, 0.142459s/100 iters), loss = 0.154353
I0426 20:54:19.202014 32644 solver.cpp:238]     Train net output #0: loss = 0.154353 (* 1 = 0.154353 loss)
I0426 20:54:19.202024 32644 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:19.346868 32644 solver.cpp:219] Iteration 300 (690.419 iter/s, 0.14484s/100 iters), loss = 0.157161
I0426 20:54:19.346911 32644 solver.cpp:238]     Train net output #0: loss = 0.157161 (* 1 = 0.157161 loss)
I0426 20:54:19.346923 32644 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:19.494588 32644 solver.cpp:219] Iteration 400 (677.218 iter/s, 0.147663s/100 iters), loss = 0.0671387
I0426 20:54:19.494637 32644 solver.cpp:238]     Train net output #0: loss = 0.0671386 (* 1 = 0.0671386 loss)
I0426 20:54:19.494649 32644 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:19.642452 32644 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:19.717617 32651 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:19.720044 32644 solver.cpp:398]     Test net output #0: accuracy = 0.9685
I0426 20:54:19.720069 32644 solver.cpp:398]     Test net output #1: loss = 0.0966573 (* 1 = 0.0966573 loss)
I0426 20:54:19.721352 32644 solver.cpp:219] Iteration 500 (441.107 iter/s, 0.226702s/100 iters), loss = 0.0909844
I0426 20:54:19.721381 32644 solver.cpp:238]     Train net output #0: loss = 0.0909843 (* 1 = 0.0909843 loss)
I0426 20:54:19.721390 32644 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:19.855531 32644 solver.cpp:219] Iteration 600 (745.503 iter/s, 0.134138s/100 iters), loss = 0.102325
I0426 20:54:19.855563 32644 solver.cpp:238]     Train net output #0: loss = 0.102325 (* 1 = 0.102325 loss)
I0426 20:54:19.855571 32644 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:19.994952 32644 solver.cpp:219] Iteration 700 (717.501 iter/s, 0.139373s/100 iters), loss = 0.133887
I0426 20:54:19.995000 32644 solver.cpp:238]     Train net output #0: loss = 0.133887 (* 1 = 0.133887 loss)
I0426 20:54:19.995012 32644 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:20.141785 32644 solver.cpp:219] Iteration 800 (681.329 iter/s, 0.146772s/100 iters), loss = 0.221696
I0426 20:54:20.141829 32644 solver.cpp:238]     Train net output #0: loss = 0.221696 (* 1 = 0.221696 loss)
I0426 20:54:20.141840 32644 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:20.288653 32644 solver.cpp:219] Iteration 900 (681.148 iter/s, 0.146811s/100 iters), loss = 0.137539
I0426 20:54:20.288702 32644 solver.cpp:238]     Train net output #0: loss = 0.137538 (* 1 = 0.137538 loss)
I0426 20:54:20.288717 32644 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:20.339287 32650 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:20.436549 32644 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:20.439172 32644 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:20.440732 32644 solver.cpp:311] Iteration 1000, loss = 0.0873294
I0426 20:54:20.440757 32644 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:20.513480 32651 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:20.516026 32644 solver.cpp:398]     Test net output #0: accuracy = 0.9791
I0426 20:54:20.516048 32644 solver.cpp:398]     Test net output #1: loss = 0.0656144 (* 1 = 0.0656144 loss)
I0426 20:54:20.516065 32644 solver.cpp:316] Optimization Done.
I0426 20:54:20.516069 32644 caffe.cpp:259] Optimization Done.
