I0426 20:53:27.797242 32444 caffe.cpp:218] Using GPUs 0
I0426 20:53:27.835906 32444 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:28.361158 32444 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test137.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:28.361300 32444 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test137.prototxt
I0426 20:53:28.361713 32444 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:28.361732 32444 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:28.361831 32444 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:28.361912 32444 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:28.362010 32444 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:28.362033 32444 net.cpp:86] Creating Layer mnist
I0426 20:53:28.362042 32444 net.cpp:382] mnist -> data
I0426 20:53:28.362064 32444 net.cpp:382] mnist -> label
I0426 20:53:28.363168 32444 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:28.365912 32444 net.cpp:124] Setting up mnist
I0426 20:53:28.365931 32444 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:28.365938 32444 net.cpp:131] Top shape: 64 (64)
I0426 20:53:28.365942 32444 net.cpp:139] Memory required for data: 200960
I0426 20:53:28.365948 32444 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:28.365967 32444 net.cpp:86] Creating Layer conv0
I0426 20:53:28.365986 32444 net.cpp:408] conv0 <- data
I0426 20:53:28.365999 32444 net.cpp:382] conv0 -> conv0
I0426 20:53:28.619102 32444 net.cpp:124] Setting up conv0
I0426 20:53:28.619127 32444 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:53:28.619130 32444 net.cpp:139] Memory required for data: 3887360
I0426 20:53:28.619160 32444 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:28.619174 32444 net.cpp:86] Creating Layer pool0
I0426 20:53:28.619179 32444 net.cpp:408] pool0 <- conv0
I0426 20:53:28.619184 32444 net.cpp:382] pool0 -> pool0
I0426 20:53:28.619241 32444 net.cpp:124] Setting up pool0
I0426 20:53:28.619247 32444 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:53:28.619251 32444 net.cpp:139] Memory required for data: 4808960
I0426 20:53:28.619253 32444 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:28.619263 32444 net.cpp:86] Creating Layer conv1
I0426 20:53:28.619266 32444 net.cpp:408] conv1 <- pool0
I0426 20:53:28.619271 32444 net.cpp:382] conv1 -> conv1
I0426 20:53:28.621335 32444 net.cpp:124] Setting up conv1
I0426 20:53:28.621350 32444 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:53:28.621352 32444 net.cpp:139] Memory required for data: 5628160
I0426 20:53:28.621376 32444 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:28.621383 32444 net.cpp:86] Creating Layer pool1
I0426 20:53:28.621387 32444 net.cpp:408] pool1 <- conv1
I0426 20:53:28.621392 32444 net.cpp:382] pool1 -> pool1
I0426 20:53:28.621443 32444 net.cpp:124] Setting up pool1
I0426 20:53:28.621448 32444 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:53:28.621451 32444 net.cpp:139] Memory required for data: 5832960
I0426 20:53:28.621454 32444 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:28.621461 32444 net.cpp:86] Creating Layer ip1
I0426 20:53:28.621464 32444 net.cpp:408] ip1 <- pool1
I0426 20:53:28.621469 32444 net.cpp:382] ip1 -> ip1
I0426 20:53:28.623646 32444 net.cpp:124] Setting up ip1
I0426 20:53:28.623673 32444 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:28.623677 32444 net.cpp:139] Memory required for data: 5909760
I0426 20:53:28.623684 32444 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:28.623690 32444 net.cpp:86] Creating Layer relu1
I0426 20:53:28.623694 32444 net.cpp:408] relu1 <- ip1
I0426 20:53:28.623698 32444 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:28.623919 32444 net.cpp:124] Setting up relu1
I0426 20:53:28.623927 32444 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:28.623931 32444 net.cpp:139] Memory required for data: 5986560
I0426 20:53:28.623934 32444 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:28.623941 32444 net.cpp:86] Creating Layer ip2
I0426 20:53:28.623944 32444 net.cpp:408] ip2 <- ip1
I0426 20:53:28.623950 32444 net.cpp:382] ip2 -> ip2
I0426 20:53:28.624213 32444 net.cpp:124] Setting up ip2
I0426 20:53:28.624220 32444 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:28.624223 32444 net.cpp:139] Memory required for data: 6012160
I0426 20:53:28.624228 32444 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:28.624234 32444 net.cpp:86] Creating Layer relu2
I0426 20:53:28.624238 32444 net.cpp:408] relu2 <- ip2
I0426 20:53:28.624241 32444 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:28.625046 32444 net.cpp:124] Setting up relu2
I0426 20:53:28.625072 32444 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:28.625077 32444 net.cpp:139] Memory required for data: 6037760
I0426 20:53:28.625079 32444 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:28.625087 32444 net.cpp:86] Creating Layer ip3
I0426 20:53:28.625089 32444 net.cpp:408] ip3 <- ip2
I0426 20:53:28.625111 32444 net.cpp:382] ip3 -> ip3
I0426 20:53:28.625217 32444 net.cpp:124] Setting up ip3
I0426 20:53:28.625226 32444 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:28.625228 32444 net.cpp:139] Memory required for data: 6040320
I0426 20:53:28.625236 32444 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:28.625241 32444 net.cpp:86] Creating Layer relu3
I0426 20:53:28.625243 32444 net.cpp:408] relu3 <- ip3
I0426 20:53:28.625247 32444 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:28.625412 32444 net.cpp:124] Setting up relu3
I0426 20:53:28.625422 32444 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:28.625424 32444 net.cpp:139] Memory required for data: 6042880
I0426 20:53:28.625427 32444 layer_factory.hpp:77] Creating layer loss
I0426 20:53:28.625433 32444 net.cpp:86] Creating Layer loss
I0426 20:53:28.625437 32444 net.cpp:408] loss <- ip3
I0426 20:53:28.625440 32444 net.cpp:408] loss <- label
I0426 20:53:28.625445 32444 net.cpp:382] loss -> loss
I0426 20:53:28.625463 32444 layer_factory.hpp:77] Creating layer loss
I0426 20:53:28.625695 32444 net.cpp:124] Setting up loss
I0426 20:53:28.625705 32444 net.cpp:131] Top shape: (1)
I0426 20:53:28.625707 32444 net.cpp:134]     with loss weight 1
I0426 20:53:28.625736 32444 net.cpp:139] Memory required for data: 6042884
I0426 20:53:28.625741 32444 net.cpp:200] loss needs backward computation.
I0426 20:53:28.625743 32444 net.cpp:200] relu3 needs backward computation.
I0426 20:53:28.625746 32444 net.cpp:200] ip3 needs backward computation.
I0426 20:53:28.625749 32444 net.cpp:200] relu2 needs backward computation.
I0426 20:53:28.625752 32444 net.cpp:200] ip2 needs backward computation.
I0426 20:53:28.625754 32444 net.cpp:200] relu1 needs backward computation.
I0426 20:53:28.625757 32444 net.cpp:200] ip1 needs backward computation.
I0426 20:53:28.625761 32444 net.cpp:200] pool1 needs backward computation.
I0426 20:53:28.625762 32444 net.cpp:200] conv1 needs backward computation.
I0426 20:53:28.625766 32444 net.cpp:200] pool0 needs backward computation.
I0426 20:53:28.625768 32444 net.cpp:200] conv0 needs backward computation.
I0426 20:53:28.625771 32444 net.cpp:202] mnist does not need backward computation.
I0426 20:53:28.625774 32444 net.cpp:244] This network produces output loss
I0426 20:53:28.625784 32444 net.cpp:257] Network initialization done.
I0426 20:53:28.626113 32444 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test137.prototxt
I0426 20:53:28.626183 32444 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:28.626284 32444 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:28.626370 32444 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:28.626412 32444 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:28.626425 32444 net.cpp:86] Creating Layer mnist
I0426 20:53:28.626430 32444 net.cpp:382] mnist -> data
I0426 20:53:28.626437 32444 net.cpp:382] mnist -> label
I0426 20:53:28.626519 32444 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:28.628543 32444 net.cpp:124] Setting up mnist
I0426 20:53:28.628572 32444 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:28.628576 32444 net.cpp:131] Top shape: 100 (100)
I0426 20:53:28.628579 32444 net.cpp:139] Memory required for data: 314000
I0426 20:53:28.628582 32444 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:28.628617 32444 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:28.628620 32444 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:28.628624 32444 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:28.628641 32444 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:28.628684 32444 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:28.628689 32444 net.cpp:131] Top shape: 100 (100)
I0426 20:53:28.628691 32444 net.cpp:131] Top shape: 100 (100)
I0426 20:53:28.628695 32444 net.cpp:139] Memory required for data: 314800
I0426 20:53:28.628697 32444 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:28.628706 32444 net.cpp:86] Creating Layer conv0
I0426 20:53:28.628710 32444 net.cpp:408] conv0 <- data
I0426 20:53:28.628715 32444 net.cpp:382] conv0 -> conv0
I0426 20:53:28.630472 32444 net.cpp:124] Setting up conv0
I0426 20:53:28.630486 32444 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:53:28.630489 32444 net.cpp:139] Memory required for data: 6074800
I0426 20:53:28.630497 32444 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:28.630519 32444 net.cpp:86] Creating Layer pool0
I0426 20:53:28.630522 32444 net.cpp:408] pool0 <- conv0
I0426 20:53:28.630527 32444 net.cpp:382] pool0 -> pool0
I0426 20:53:28.630561 32444 net.cpp:124] Setting up pool0
I0426 20:53:28.630566 32444 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:53:28.630569 32444 net.cpp:139] Memory required for data: 7514800
I0426 20:53:28.630573 32444 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:28.630581 32444 net.cpp:86] Creating Layer conv1
I0426 20:53:28.630584 32444 net.cpp:408] conv1 <- pool0
I0426 20:53:28.630589 32444 net.cpp:382] conv1 -> conv1
I0426 20:53:28.632375 32444 net.cpp:124] Setting up conv1
I0426 20:53:28.632388 32444 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:53:28.632398 32444 net.cpp:139] Memory required for data: 8794800
I0426 20:53:28.632405 32444 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:28.632437 32444 net.cpp:86] Creating Layer pool1
I0426 20:53:28.632441 32444 net.cpp:408] pool1 <- conv1
I0426 20:53:28.632447 32444 net.cpp:382] pool1 -> pool1
I0426 20:53:28.632483 32444 net.cpp:124] Setting up pool1
I0426 20:53:28.632489 32444 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:53:28.632491 32444 net.cpp:139] Memory required for data: 9114800
I0426 20:53:28.632494 32444 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:28.632503 32444 net.cpp:86] Creating Layer ip1
I0426 20:53:28.632505 32444 net.cpp:408] ip1 <- pool1
I0426 20:53:28.632516 32444 net.cpp:382] ip1 -> ip1
I0426 20:53:28.634090 32444 net.cpp:124] Setting up ip1
I0426 20:53:28.634099 32444 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:28.634110 32444 net.cpp:139] Memory required for data: 9234800
I0426 20:53:28.634119 32444 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:28.634133 32444 net.cpp:86] Creating Layer relu1
I0426 20:53:28.634143 32444 net.cpp:408] relu1 <- ip1
I0426 20:53:28.634147 32444 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:28.634356 32444 net.cpp:124] Setting up relu1
I0426 20:53:28.634366 32444 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:28.634368 32444 net.cpp:139] Memory required for data: 9354800
I0426 20:53:28.634371 32444 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:28.634377 32444 net.cpp:86] Creating Layer ip2
I0426 20:53:28.634380 32444 net.cpp:408] ip2 <- ip1
I0426 20:53:28.634387 32444 net.cpp:382] ip2 -> ip2
I0426 20:53:28.634693 32444 net.cpp:124] Setting up ip2
I0426 20:53:28.634701 32444 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:28.634706 32444 net.cpp:139] Memory required for data: 9394800
I0426 20:53:28.634726 32444 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:28.634730 32444 net.cpp:86] Creating Layer relu2
I0426 20:53:28.634733 32444 net.cpp:408] relu2 <- ip2
I0426 20:53:28.634738 32444 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:28.634896 32444 net.cpp:124] Setting up relu2
I0426 20:53:28.634905 32444 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:28.634908 32444 net.cpp:139] Memory required for data: 9434800
I0426 20:53:28.634912 32444 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:28.634923 32444 net.cpp:86] Creating Layer ip3
I0426 20:53:28.634927 32444 net.cpp:408] ip3 <- ip2
I0426 20:53:28.634935 32444 net.cpp:382] ip3 -> ip3
I0426 20:53:28.635038 32444 net.cpp:124] Setting up ip3
I0426 20:53:28.635046 32444 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:28.635048 32444 net.cpp:139] Memory required for data: 9438800
I0426 20:53:28.635056 32444 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:28.635066 32444 net.cpp:86] Creating Layer relu3
I0426 20:53:28.635067 32444 net.cpp:408] relu3 <- ip3
I0426 20:53:28.635072 32444 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:28.635985 32444 net.cpp:124] Setting up relu3
I0426 20:53:28.635996 32444 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:28.636000 32444 net.cpp:139] Memory required for data: 9442800
I0426 20:53:28.636003 32444 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:53:28.636009 32444 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:53:28.636013 32444 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:53:28.636018 32444 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:53:28.636023 32444 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:53:28.636088 32444 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:53:28.636093 32444 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:28.636096 32444 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:28.636099 32444 net.cpp:139] Memory required for data: 9450800
I0426 20:53:28.636102 32444 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:28.636107 32444 net.cpp:86] Creating Layer accuracy
I0426 20:53:28.636109 32444 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:53:28.636113 32444 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:28.636118 32444 net.cpp:382] accuracy -> accuracy
I0426 20:53:28.636126 32444 net.cpp:124] Setting up accuracy
I0426 20:53:28.636128 32444 net.cpp:131] Top shape: (1)
I0426 20:53:28.636132 32444 net.cpp:139] Memory required for data: 9450804
I0426 20:53:28.636133 32444 layer_factory.hpp:77] Creating layer loss
I0426 20:53:28.636138 32444 net.cpp:86] Creating Layer loss
I0426 20:53:28.636152 32444 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:53:28.636157 32444 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:28.636162 32444 net.cpp:382] loss -> loss
I0426 20:53:28.636167 32444 layer_factory.hpp:77] Creating layer loss
I0426 20:53:28.636396 32444 net.cpp:124] Setting up loss
I0426 20:53:28.636405 32444 net.cpp:131] Top shape: (1)
I0426 20:53:28.636409 32444 net.cpp:134]     with loss weight 1
I0426 20:53:28.636430 32444 net.cpp:139] Memory required for data: 9450808
I0426 20:53:28.636432 32444 net.cpp:200] loss needs backward computation.
I0426 20:53:28.636437 32444 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:28.636446 32444 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:53:28.636448 32444 net.cpp:200] relu3 needs backward computation.
I0426 20:53:28.636451 32444 net.cpp:200] ip3 needs backward computation.
I0426 20:53:28.636454 32444 net.cpp:200] relu2 needs backward computation.
I0426 20:53:28.636456 32444 net.cpp:200] ip2 needs backward computation.
I0426 20:53:28.636459 32444 net.cpp:200] relu1 needs backward computation.
I0426 20:53:28.636462 32444 net.cpp:200] ip1 needs backward computation.
I0426 20:53:28.636466 32444 net.cpp:200] pool1 needs backward computation.
I0426 20:53:28.636468 32444 net.cpp:200] conv1 needs backward computation.
I0426 20:53:28.636471 32444 net.cpp:200] pool0 needs backward computation.
I0426 20:53:28.636473 32444 net.cpp:200] conv0 needs backward computation.
I0426 20:53:28.636476 32444 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:28.636481 32444 net.cpp:202] mnist does not need backward computation.
I0426 20:53:28.636482 32444 net.cpp:244] This network produces output accuracy
I0426 20:53:28.636485 32444 net.cpp:244] This network produces output loss
I0426 20:53:28.636497 32444 net.cpp:257] Network initialization done.
I0426 20:53:28.636535 32444 solver.cpp:56] Solver scaffolding done.
I0426 20:53:28.636924 32444 caffe.cpp:248] Starting Optimization
I0426 20:53:28.636932 32444 solver.cpp:273] Solving LeNet
I0426 20:53:28.636936 32444 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:28.638504 32444 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:28.645355 32444 blocking_queue.cpp:49] Waiting for data
I0426 20:53:28.715276 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:28.716001 32444 solver.cpp:398]     Test net output #0: accuracy = 0.1115
I0426 20:53:28.716020 32444 solver.cpp:398]     Test net output #1: loss = 2.31722 (* 1 = 2.31722 loss)
I0426 20:53:28.720603 32444 solver.cpp:219] Iteration 0 (-6.07417e-31 iter/s, 0.0836248s/100 iters), loss = 2.30682
I0426 20:53:28.720641 32444 solver.cpp:238]     Train net output #0: loss = 2.30682 (* 1 = 2.30682 loss)
I0426 20:53:28.720654 32444 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:53:28.862089 32444 solver.cpp:219] Iteration 100 (707.049 iter/s, 0.141433s/100 iters), loss = 0.309206
I0426 20:53:28.862113 32444 solver.cpp:238]     Train net output #0: loss = 0.309206 (* 1 = 0.309206 loss)
I0426 20:53:28.862119 32444 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:53:29.001173 32444 solver.cpp:219] Iteration 200 (719.198 iter/s, 0.139044s/100 iters), loss = 0.162529
I0426 20:53:29.001210 32444 solver.cpp:238]     Train net output #0: loss = 0.162529 (* 1 = 0.162529 loss)
I0426 20:53:29.001220 32444 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:53:29.141562 32444 solver.cpp:219] Iteration 300 (712.554 iter/s, 0.14034s/100 iters), loss = 0.14331
I0426 20:53:29.141595 32444 solver.cpp:238]     Train net output #0: loss = 0.14331 (* 1 = 0.14331 loss)
I0426 20:53:29.141605 32444 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:53:29.280292 32444 solver.cpp:219] Iteration 400 (721.062 iter/s, 0.138684s/100 iters), loss = 0.0613382
I0426 20:53:29.280328 32444 solver.cpp:238]     Train net output #0: loss = 0.0613383 (* 1 = 0.0613383 loss)
I0426 20:53:29.280336 32444 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:53:29.421144 32444 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:53:29.489778 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:29.492053 32444 solver.cpp:398]     Test net output #0: accuracy = 0.9684
I0426 20:53:29.492076 32444 solver.cpp:398]     Test net output #1: loss = 0.0978796 (* 1 = 0.0978796 loss)
I0426 20:53:29.493291 32444 solver.cpp:219] Iteration 500 (469.596 iter/s, 0.212949s/100 iters), loss = 0.0721932
I0426 20:53:29.493337 32444 solver.cpp:238]     Train net output #0: loss = 0.0721932 (* 1 = 0.0721932 loss)
I0426 20:53:29.493346 32444 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:53:29.633249 32444 solver.cpp:219] Iteration 600 (714.807 iter/s, 0.139898s/100 iters), loss = 0.075638
I0426 20:53:29.633280 32444 solver.cpp:238]     Train net output #0: loss = 0.075638 (* 1 = 0.075638 loss)
I0426 20:53:29.633299 32444 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:53:29.773496 32444 solver.cpp:219] Iteration 700 (713.246 iter/s, 0.140204s/100 iters), loss = 0.176442
I0426 20:53:29.773528 32444 solver.cpp:238]     Train net output #0: loss = 0.176442 (* 1 = 0.176442 loss)
I0426 20:53:29.773537 32444 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:53:29.914186 32444 solver.cpp:219] Iteration 800 (711.013 iter/s, 0.140644s/100 iters), loss = 0.241818
I0426 20:53:29.914230 32444 solver.cpp:238]     Train net output #0: loss = 0.241818 (* 1 = 0.241818 loss)
I0426 20:53:29.914250 32444 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:53:30.056541 32444 solver.cpp:219] Iteration 900 (702.75 iter/s, 0.142298s/100 iters), loss = 0.149957
I0426 20:53:30.056576 32444 solver.cpp:238]     Train net output #0: loss = 0.149957 (* 1 = 0.149957 loss)
I0426 20:53:30.056586 32444 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:53:30.104899 32450 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:30.202862 32444 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:53:30.209192 32444 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:53:30.212559 32444 solver.cpp:311] Iteration 1000, loss = 0.116856
I0426 20:53:30.212581 32444 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:53:30.278692 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:30.281021 32444 solver.cpp:398]     Test net output #0: accuracy = 0.9804
I0426 20:53:30.281044 32444 solver.cpp:398]     Test net output #1: loss = 0.0606851 (* 1 = 0.0606851 loss)
I0426 20:53:30.281050 32444 solver.cpp:316] Optimization Done.
I0426 20:53:30.281065 32444 caffe.cpp:259] Optimization Done.
