I0426 20:54:29.141283 32677 caffe.cpp:218] Using GPUs 0
I0426 20:54:29.170361 32677 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:54:29.621786 32677 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test160.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:54:29.621950 32677 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test160.prototxt
I0426 20:54:29.622274 32677 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:54:29.622288 32677 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:54:29.622366 32677 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:29.622449 32677 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:29.622535 32677 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:54:29.622555 32677 net.cpp:86] Creating Layer mnist
I0426 20:54:29.622560 32677 net.cpp:382] mnist -> data
I0426 20:54:29.622580 32677 net.cpp:382] mnist -> label
I0426 20:54:29.623541 32677 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:54:29.625704 32677 net.cpp:124] Setting up mnist
I0426 20:54:29.625733 32677 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:54:29.625737 32677 net.cpp:131] Top shape: 64 (64)
I0426 20:54:29.625741 32677 net.cpp:139] Memory required for data: 200960
I0426 20:54:29.625746 32677 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:29.625759 32677 net.cpp:86] Creating Layer conv0
I0426 20:54:29.625790 32677 net.cpp:408] conv0 <- data
I0426 20:54:29.625802 32677 net.cpp:382] conv0 -> conv0
I0426 20:54:29.854259 32677 net.cpp:124] Setting up conv0
I0426 20:54:29.854287 32677 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:54:29.854291 32677 net.cpp:139] Memory required for data: 7573760
I0426 20:54:29.854305 32677 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:29.854316 32677 net.cpp:86] Creating Layer pool0
I0426 20:54:29.854321 32677 net.cpp:408] pool0 <- conv0
I0426 20:54:29.854326 32677 net.cpp:382] pool0 -> pool0
I0426 20:54:29.854387 32677 net.cpp:124] Setting up pool0
I0426 20:54:29.854393 32677 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:54:29.854395 32677 net.cpp:139] Memory required for data: 9416960
I0426 20:54:29.854398 32677 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:29.854408 32677 net.cpp:86] Creating Layer conv1
I0426 20:54:29.854413 32677 net.cpp:408] conv1 <- pool0
I0426 20:54:29.854418 32677 net.cpp:382] conv1 -> conv1
I0426 20:54:29.856472 32677 net.cpp:124] Setting up conv1
I0426 20:54:29.856485 32677 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:54:29.856488 32677 net.cpp:139] Memory required for data: 9826560
I0426 20:54:29.856497 32677 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:29.856503 32677 net.cpp:86] Creating Layer pool1
I0426 20:54:29.856505 32677 net.cpp:408] pool1 <- conv1
I0426 20:54:29.856510 32677 net.cpp:382] pool1 -> pool1
I0426 20:54:29.856557 32677 net.cpp:124] Setting up pool1
I0426 20:54:29.856564 32677 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:54:29.856565 32677 net.cpp:139] Memory required for data: 9928960
I0426 20:54:29.856568 32677 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:29.856575 32677 net.cpp:86] Creating Layer ip1
I0426 20:54:29.856577 32677 net.cpp:408] ip1 <- pool1
I0426 20:54:29.856582 32677 net.cpp:382] ip1 -> ip1
I0426 20:54:29.856962 32677 net.cpp:124] Setting up ip1
I0426 20:54:29.856971 32677 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:29.856974 32677 net.cpp:139] Memory required for data: 9954560
I0426 20:54:29.856981 32677 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:29.857002 32677 net.cpp:86] Creating Layer relu1
I0426 20:54:29.857005 32677 net.cpp:408] relu1 <- ip1
I0426 20:54:29.857009 32677 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:29.857237 32677 net.cpp:124] Setting up relu1
I0426 20:54:29.857247 32677 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:29.857250 32677 net.cpp:139] Memory required for data: 9980160
I0426 20:54:29.857254 32677 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:29.857259 32677 net.cpp:86] Creating Layer ip2
I0426 20:54:29.857261 32677 net.cpp:408] ip2 <- ip1
I0426 20:54:29.857266 32677 net.cpp:382] ip2 -> ip2
I0426 20:54:29.858244 32677 net.cpp:124] Setting up ip2
I0426 20:54:29.858256 32677 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:29.858259 32677 net.cpp:139] Memory required for data: 10005760
I0426 20:54:29.858264 32677 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:29.858286 32677 net.cpp:86] Creating Layer relu2
I0426 20:54:29.858289 32677 net.cpp:408] relu2 <- ip2
I0426 20:54:29.858294 32677 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:29.859048 32677 net.cpp:124] Setting up relu2
I0426 20:54:29.859061 32677 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:54:29.859079 32677 net.cpp:139] Memory required for data: 10031360
I0426 20:54:29.859082 32677 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:29.859088 32677 net.cpp:86] Creating Layer ip3
I0426 20:54:29.859091 32677 net.cpp:408] ip3 <- ip2
I0426 20:54:29.859097 32677 net.cpp:382] ip3 -> ip3
I0426 20:54:29.859226 32677 net.cpp:124] Setting up ip3
I0426 20:54:29.859235 32677 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:29.859237 32677 net.cpp:139] Memory required for data: 10033920
I0426 20:54:29.859246 32677 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:29.859249 32677 net.cpp:86] Creating Layer relu3
I0426 20:54:29.859252 32677 net.cpp:408] relu3 <- ip3
I0426 20:54:29.859256 32677 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:29.859408 32677 net.cpp:124] Setting up relu3
I0426 20:54:29.859416 32677 net.cpp:131] Top shape: 64 10 (640)
I0426 20:54:29.859419 32677 net.cpp:139] Memory required for data: 10036480
I0426 20:54:29.859422 32677 layer_factory.hpp:77] Creating layer loss
I0426 20:54:29.859427 32677 net.cpp:86] Creating Layer loss
I0426 20:54:29.859431 32677 net.cpp:408] loss <- ip3
I0426 20:54:29.859433 32677 net.cpp:408] loss <- label
I0426 20:54:29.859438 32677 net.cpp:382] loss -> loss
I0426 20:54:29.859452 32677 layer_factory.hpp:77] Creating layer loss
I0426 20:54:29.859671 32677 net.cpp:124] Setting up loss
I0426 20:54:29.859681 32677 net.cpp:131] Top shape: (1)
I0426 20:54:29.859684 32677 net.cpp:134]     with loss weight 1
I0426 20:54:29.859697 32677 net.cpp:139] Memory required for data: 10036484
I0426 20:54:29.859701 32677 net.cpp:200] loss needs backward computation.
I0426 20:54:29.859704 32677 net.cpp:200] relu3 needs backward computation.
I0426 20:54:29.859707 32677 net.cpp:200] ip3 needs backward computation.
I0426 20:54:29.859709 32677 net.cpp:200] relu2 needs backward computation.
I0426 20:54:29.859712 32677 net.cpp:200] ip2 needs backward computation.
I0426 20:54:29.859714 32677 net.cpp:200] relu1 needs backward computation.
I0426 20:54:29.859717 32677 net.cpp:200] ip1 needs backward computation.
I0426 20:54:29.859719 32677 net.cpp:200] pool1 needs backward computation.
I0426 20:54:29.859722 32677 net.cpp:200] conv1 needs backward computation.
I0426 20:54:29.859725 32677 net.cpp:200] pool0 needs backward computation.
I0426 20:54:29.859729 32677 net.cpp:200] conv0 needs backward computation.
I0426 20:54:29.859731 32677 net.cpp:202] mnist does not need backward computation.
I0426 20:54:29.859733 32677 net.cpp:244] This network produces output loss
I0426 20:54:29.859742 32677 net.cpp:257] Network initialization done.
I0426 20:54:29.860074 32677 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test160.prototxt
I0426 20:54:29.860131 32677 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:54:29.860224 32677 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:54:29.860313 32677 layer_factory.hpp:77] Creating layer mnist
I0426 20:54:29.860357 32677 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:54:29.860368 32677 net.cpp:86] Creating Layer mnist
I0426 20:54:29.860373 32677 net.cpp:382] mnist -> data
I0426 20:54:29.860391 32677 net.cpp:382] mnist -> label
I0426 20:54:29.860471 32677 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:54:29.862481 32677 net.cpp:124] Setting up mnist
I0426 20:54:29.862520 32677 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:54:29.862524 32677 net.cpp:131] Top shape: 100 (100)
I0426 20:54:29.862527 32677 net.cpp:139] Memory required for data: 314000
I0426 20:54:29.862530 32677 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:54:29.862552 32677 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:54:29.862556 32677 net.cpp:408] label_mnist_1_split <- label
I0426 20:54:29.862560 32677 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:54:29.862566 32677 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:54:29.862622 32677 net.cpp:124] Setting up label_mnist_1_split
I0426 20:54:29.862627 32677 net.cpp:131] Top shape: 100 (100)
I0426 20:54:29.862630 32677 net.cpp:131] Top shape: 100 (100)
I0426 20:54:29.862633 32677 net.cpp:139] Memory required for data: 314800
I0426 20:54:29.862635 32677 layer_factory.hpp:77] Creating layer conv0
I0426 20:54:29.862643 32677 net.cpp:86] Creating Layer conv0
I0426 20:54:29.862645 32677 net.cpp:408] conv0 <- data
I0426 20:54:29.862650 32677 net.cpp:382] conv0 -> conv0
I0426 20:54:29.864223 32677 net.cpp:124] Setting up conv0
I0426 20:54:29.864235 32677 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:54:29.864238 32677 net.cpp:139] Memory required for data: 11834800
I0426 20:54:29.864246 32677 layer_factory.hpp:77] Creating layer pool0
I0426 20:54:29.864267 32677 net.cpp:86] Creating Layer pool0
I0426 20:54:29.864270 32677 net.cpp:408] pool0 <- conv0
I0426 20:54:29.864275 32677 net.cpp:382] pool0 -> pool0
I0426 20:54:29.864308 32677 net.cpp:124] Setting up pool0
I0426 20:54:29.864313 32677 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:54:29.864316 32677 net.cpp:139] Memory required for data: 14714800
I0426 20:54:29.864320 32677 layer_factory.hpp:77] Creating layer conv1
I0426 20:54:29.864326 32677 net.cpp:86] Creating Layer conv1
I0426 20:54:29.864329 32677 net.cpp:408] conv1 <- pool0
I0426 20:54:29.864333 32677 net.cpp:382] conv1 -> conv1
I0426 20:54:29.866106 32677 net.cpp:124] Setting up conv1
I0426 20:54:29.866118 32677 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:54:29.866122 32677 net.cpp:139] Memory required for data: 15354800
I0426 20:54:29.866130 32677 layer_factory.hpp:77] Creating layer pool1
I0426 20:54:29.866135 32677 net.cpp:86] Creating Layer pool1
I0426 20:54:29.866138 32677 net.cpp:408] pool1 <- conv1
I0426 20:54:29.866158 32677 net.cpp:382] pool1 -> pool1
I0426 20:54:29.866191 32677 net.cpp:124] Setting up pool1
I0426 20:54:29.866196 32677 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:54:29.866199 32677 net.cpp:139] Memory required for data: 15514800
I0426 20:54:29.866202 32677 layer_factory.hpp:77] Creating layer ip1
I0426 20:54:29.866207 32677 net.cpp:86] Creating Layer ip1
I0426 20:54:29.866210 32677 net.cpp:408] ip1 <- pool1
I0426 20:54:29.866214 32677 net.cpp:382] ip1 -> ip1
I0426 20:54:29.866513 32677 net.cpp:124] Setting up ip1
I0426 20:54:29.866520 32677 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:29.866533 32677 net.cpp:139] Memory required for data: 15554800
I0426 20:54:29.866556 32677 layer_factory.hpp:77] Creating layer relu1
I0426 20:54:29.866575 32677 net.cpp:86] Creating Layer relu1
I0426 20:54:29.866577 32677 net.cpp:408] relu1 <- ip1
I0426 20:54:29.866586 32677 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:54:29.866750 32677 net.cpp:124] Setting up relu1
I0426 20:54:29.866760 32677 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:29.866762 32677 net.cpp:139] Memory required for data: 15594800
I0426 20:54:29.866765 32677 layer_factory.hpp:77] Creating layer ip2
I0426 20:54:29.866772 32677 net.cpp:86] Creating Layer ip2
I0426 20:54:29.866775 32677 net.cpp:408] ip2 <- ip1
I0426 20:54:29.866780 32677 net.cpp:382] ip2 -> ip2
I0426 20:54:29.866937 32677 net.cpp:124] Setting up ip2
I0426 20:54:29.866945 32677 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:29.866947 32677 net.cpp:139] Memory required for data: 15634800
I0426 20:54:29.866952 32677 layer_factory.hpp:77] Creating layer relu2
I0426 20:54:29.866956 32677 net.cpp:86] Creating Layer relu2
I0426 20:54:29.866960 32677 net.cpp:408] relu2 <- ip2
I0426 20:54:29.866963 32677 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:54:29.867120 32677 net.cpp:124] Setting up relu2
I0426 20:54:29.867127 32677 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:54:29.867131 32677 net.cpp:139] Memory required for data: 15674800
I0426 20:54:29.867135 32677 layer_factory.hpp:77] Creating layer ip3
I0426 20:54:29.867139 32677 net.cpp:86] Creating Layer ip3
I0426 20:54:29.867142 32677 net.cpp:408] ip3 <- ip2
I0426 20:54:29.867147 32677 net.cpp:382] ip3 -> ip3
I0426 20:54:29.867267 32677 net.cpp:124] Setting up ip3
I0426 20:54:29.867275 32677 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:29.867285 32677 net.cpp:139] Memory required for data: 15678800
I0426 20:54:29.867292 32677 layer_factory.hpp:77] Creating layer relu3
I0426 20:54:29.867297 32677 net.cpp:86] Creating Layer relu3
I0426 20:54:29.867300 32677 net.cpp:408] relu3 <- ip3
I0426 20:54:29.867305 32677 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:54:29.868161 32677 net.cpp:124] Setting up relu3
I0426 20:54:29.868173 32677 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:29.868182 32677 net.cpp:139] Memory required for data: 15682800
I0426 20:54:29.868185 32677 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:54:29.868206 32677 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:54:29.868211 32677 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:54:29.868216 32677 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:54:29.868221 32677 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:54:29.868258 32677 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:54:29.868263 32677 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:29.868266 32677 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:54:29.868268 32677 net.cpp:139] Memory required for data: 15690800
I0426 20:54:29.868271 32677 layer_factory.hpp:77] Creating layer accuracy
I0426 20:54:29.868276 32677 net.cpp:86] Creating Layer accuracy
I0426 20:54:29.868278 32677 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:54:29.868283 32677 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:54:29.868286 32677 net.cpp:382] accuracy -> accuracy
I0426 20:54:29.868293 32677 net.cpp:124] Setting up accuracy
I0426 20:54:29.868295 32677 net.cpp:131] Top shape: (1)
I0426 20:54:29.868299 32677 net.cpp:139] Memory required for data: 15690804
I0426 20:54:29.868307 32677 layer_factory.hpp:77] Creating layer loss
I0426 20:54:29.868311 32677 net.cpp:86] Creating Layer loss
I0426 20:54:29.868314 32677 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:54:29.868319 32677 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:54:29.868321 32677 net.cpp:382] loss -> loss
I0426 20:54:29.868327 32677 layer_factory.hpp:77] Creating layer loss
I0426 20:54:29.868535 32677 net.cpp:124] Setting up loss
I0426 20:54:29.868544 32677 net.cpp:131] Top shape: (1)
I0426 20:54:29.868547 32677 net.cpp:134]     with loss weight 1
I0426 20:54:29.868562 32677 net.cpp:139] Memory required for data: 15690808
I0426 20:54:29.868566 32677 net.cpp:200] loss needs backward computation.
I0426 20:54:29.868569 32677 net.cpp:202] accuracy does not need backward computation.
I0426 20:54:29.868572 32677 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:54:29.868576 32677 net.cpp:200] relu3 needs backward computation.
I0426 20:54:29.868578 32677 net.cpp:200] ip3 needs backward computation.
I0426 20:54:29.868580 32677 net.cpp:200] relu2 needs backward computation.
I0426 20:54:29.868583 32677 net.cpp:200] ip2 needs backward computation.
I0426 20:54:29.868587 32677 net.cpp:200] relu1 needs backward computation.
I0426 20:54:29.868588 32677 net.cpp:200] ip1 needs backward computation.
I0426 20:54:29.868592 32677 net.cpp:200] pool1 needs backward computation.
I0426 20:54:29.868594 32677 net.cpp:200] conv1 needs backward computation.
I0426 20:54:29.868597 32677 net.cpp:200] pool0 needs backward computation.
I0426 20:54:29.868600 32677 net.cpp:200] conv0 needs backward computation.
I0426 20:54:29.868603 32677 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:54:29.868607 32677 net.cpp:202] mnist does not need backward computation.
I0426 20:54:29.868609 32677 net.cpp:244] This network produces output accuracy
I0426 20:54:29.868619 32677 net.cpp:244] This network produces output loss
I0426 20:54:29.868628 32677 net.cpp:257] Network initialization done.
I0426 20:54:29.868672 32677 solver.cpp:56] Solver scaffolding done.
I0426 20:54:29.869045 32677 caffe.cpp:248] Starting Optimization
I0426 20:54:29.869053 32677 solver.cpp:273] Solving LeNet
I0426 20:54:29.869057 32677 solver.cpp:274] Learning Rate Policy: inv
I0426 20:54:29.869943 32677 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:54:29.876785 32677 blocking_queue.cpp:49] Waiting for data
I0426 20:54:29.949671 32684 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:29.950618 32677 solver.cpp:398]     Test net output #0: accuracy = 0.1148
I0426 20:54:29.950634 32677 solver.cpp:398]     Test net output #1: loss = 2.30238 (* 1 = 2.30238 loss)
I0426 20:54:29.955014 32677 solver.cpp:219] Iteration 0 (-1.15998e-30 iter/s, 0.0859177s/100 iters), loss = 2.29603
I0426 20:54:29.955036 32677 solver.cpp:238]     Train net output #0: loss = 2.29603 (* 1 = 2.29603 loss)
I0426 20:54:29.955047 32677 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:30.106247 32677 solver.cpp:219] Iteration 100 (661.39 iter/s, 0.151197s/100 iters), loss = 0.600867
I0426 20:54:30.106292 32677 solver.cpp:238]     Train net output #0: loss = 0.600867 (* 1 = 0.600867 loss)
I0426 20:54:30.106298 32677 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:30.253463 32677 solver.cpp:219] Iteration 200 (679.456 iter/s, 0.147176s/100 iters), loss = 0.450114
I0426 20:54:30.253501 32677 solver.cpp:238]     Train net output #0: loss = 0.450114 (* 1 = 0.450114 loss)
I0426 20:54:30.253507 32677 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:30.396271 32677 solver.cpp:219] Iteration 300 (700.421 iter/s, 0.142771s/100 iters), loss = 0.673571
I0426 20:54:30.396297 32677 solver.cpp:238]     Train net output #0: loss = 0.673571 (* 1 = 0.673571 loss)
I0426 20:54:30.396304 32677 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:30.535778 32677 solver.cpp:219] Iteration 400 (717.006 iter/s, 0.139469s/100 iters), loss = 0.474566
I0426 20:54:30.535820 32677 solver.cpp:238]     Train net output #0: loss = 0.474566 (* 1 = 0.474566 loss)
I0426 20:54:30.535827 32677 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:30.673120 32677 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:30.749744 32684 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:30.750766 32677 solver.cpp:398]     Test net output #0: accuracy = 0.7807
I0426 20:54:30.750787 32677 solver.cpp:398]     Test net output #1: loss = 0.548888 (* 1 = 0.548888 loss)
I0426 20:54:30.752199 32677 solver.cpp:219] Iteration 500 (462.186 iter/s, 0.216363s/100 iters), loss = 0.558135
I0426 20:54:30.752238 32677 solver.cpp:238]     Train net output #0: loss = 0.558135 (* 1 = 0.558135 loss)
I0426 20:54:30.752260 32677 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:30.911803 32677 solver.cpp:219] Iteration 600 (626.757 iter/s, 0.159551s/100 iters), loss = 0.665034
I0426 20:54:30.911844 32677 solver.cpp:238]     Train net output #0: loss = 0.665034 (* 1 = 0.665034 loss)
I0426 20:54:30.911850 32677 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:31.057036 32677 solver.cpp:219] Iteration 700 (688.724 iter/s, 0.145196s/100 iters), loss = 0.573753
I0426 20:54:31.057075 32677 solver.cpp:238]     Train net output #0: loss = 0.573753 (* 1 = 0.573753 loss)
I0426 20:54:31.057082 32677 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:31.196980 32677 solver.cpp:219] Iteration 800 (714.755 iter/s, 0.139908s/100 iters), loss = 0.808938
I0426 20:54:31.197021 32677 solver.cpp:238]     Train net output #0: loss = 0.808938 (* 1 = 0.808938 loss)
I0426 20:54:31.197027 32677 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:31.344596 32677 solver.cpp:219] Iteration 900 (677.627 iter/s, 0.147574s/100 iters), loss = 0.498185
I0426 20:54:31.344641 32677 solver.cpp:238]     Train net output #0: loss = 0.498185 (* 1 = 0.498185 loss)
I0426 20:54:31.344652 32677 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:31.397797 32683 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:31.501135 32677 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:31.503847 32677 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:31.505602 32677 solver.cpp:311] Iteration 1000, loss = 0.557424
I0426 20:54:31.505630 32677 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:31.586277 32684 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:31.587354 32677 solver.cpp:398]     Test net output #0: accuracy = 0.7909
I0426 20:54:31.587380 32677 solver.cpp:398]     Test net output #1: loss = 0.510998 (* 1 = 0.510998 loss)
I0426 20:54:31.587388 32677 solver.cpp:316] Optimization Done.
I0426 20:54:31.587393 32677 caffe.cpp:259] Optimization Done.
