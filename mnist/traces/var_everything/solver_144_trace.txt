I0426 20:53:45.881623 32538 caffe.cpp:218] Using GPUs 0
I0426 20:53:45.909636 32538 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:46.363473 32538 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test144.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:46.363595 32538 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test144.prototxt
I0426 20:53:46.363932 32538 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:46.363955 32538 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:46.364044 32538 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:53:46.364122 32538 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:46.364205 32538 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:46.364225 32538 net.cpp:86] Creating Layer mnist
I0426 20:53:46.364233 32538 net.cpp:382] mnist -> data
I0426 20:53:46.364251 32538 net.cpp:382] mnist -> label
I0426 20:53:46.365315 32538 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:46.367756 32538 net.cpp:124] Setting up mnist
I0426 20:53:46.367805 32538 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:46.367810 32538 net.cpp:131] Top shape: 64 (64)
I0426 20:53:46.367812 32538 net.cpp:139] Memory required for data: 200960
I0426 20:53:46.367820 32538 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:46.367835 32538 net.cpp:86] Creating Layer conv0
I0426 20:53:46.367839 32538 net.cpp:408] conv0 <- data
I0426 20:53:46.367866 32538 net.cpp:382] conv0 -> conv0
I0426 20:53:46.605111 32538 net.cpp:124] Setting up conv0
I0426 20:53:46.605154 32538 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:53:46.605157 32538 net.cpp:139] Memory required for data: 7573760
I0426 20:53:46.605204 32538 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:46.605217 32538 net.cpp:86] Creating Layer pool0
I0426 20:53:46.605221 32538 net.cpp:408] pool0 <- conv0
I0426 20:53:46.605226 32538 net.cpp:382] pool0 -> pool0
I0426 20:53:46.605273 32538 net.cpp:124] Setting up pool0
I0426 20:53:46.605280 32538 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:53:46.605283 32538 net.cpp:139] Memory required for data: 9416960
I0426 20:53:46.605286 32538 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:46.605298 32538 net.cpp:86] Creating Layer conv1
I0426 20:53:46.605300 32538 net.cpp:408] conv1 <- pool0
I0426 20:53:46.605304 32538 net.cpp:382] conv1 -> conv1
I0426 20:53:46.607959 32538 net.cpp:124] Setting up conv1
I0426 20:53:46.607971 32538 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:53:46.607975 32538 net.cpp:139] Memory required for data: 9580800
I0426 20:53:46.607983 32538 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:46.607990 32538 net.cpp:86] Creating Layer pool1
I0426 20:53:46.607993 32538 net.cpp:408] pool1 <- conv1
I0426 20:53:46.607998 32538 net.cpp:382] pool1 -> pool1
I0426 20:53:46.608048 32538 net.cpp:124] Setting up pool1
I0426 20:53:46.608054 32538 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:53:46.608057 32538 net.cpp:139] Memory required for data: 9621760
I0426 20:53:46.608060 32538 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:46.608067 32538 net.cpp:86] Creating Layer ip1
I0426 20:53:46.608070 32538 net.cpp:408] ip1 <- pool1
I0426 20:53:46.608074 32538 net.cpp:382] ip1 -> ip1
I0426 20:53:46.608415 32538 net.cpp:124] Setting up ip1
I0426 20:53:46.608423 32538 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:46.608441 32538 net.cpp:139] Memory required for data: 9698560
I0426 20:53:46.608448 32538 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:46.608469 32538 net.cpp:86] Creating Layer relu1
I0426 20:53:46.608471 32538 net.cpp:408] relu1 <- ip1
I0426 20:53:46.608475 32538 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:46.608644 32538 net.cpp:124] Setting up relu1
I0426 20:53:46.608652 32538 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:46.608655 32538 net.cpp:139] Memory required for data: 9775360
I0426 20:53:46.608659 32538 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:46.608664 32538 net.cpp:86] Creating Layer ip2
I0426 20:53:46.608667 32538 net.cpp:408] ip2 <- ip1
I0426 20:53:46.608672 32538 net.cpp:382] ip2 -> ip2
I0426 20:53:46.608781 32538 net.cpp:124] Setting up ip2
I0426 20:53:46.608788 32538 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:46.608791 32538 net.cpp:139] Memory required for data: 9777920
I0426 20:53:46.608796 32538 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:46.608803 32538 net.cpp:86] Creating Layer relu2
I0426 20:53:46.608805 32538 net.cpp:408] relu2 <- ip2
I0426 20:53:46.608819 32538 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:46.609704 32538 net.cpp:124] Setting up relu2
I0426 20:53:46.609716 32538 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:46.609735 32538 net.cpp:139] Memory required for data: 9780480
I0426 20:53:46.609738 32538 layer_factory.hpp:77] Creating layer loss
I0426 20:53:46.609745 32538 net.cpp:86] Creating Layer loss
I0426 20:53:46.609747 32538 net.cpp:408] loss <- ip2
I0426 20:53:46.609752 32538 net.cpp:408] loss <- label
I0426 20:53:46.609758 32538 net.cpp:382] loss -> loss
I0426 20:53:46.609776 32538 layer_factory.hpp:77] Creating layer loss
I0426 20:53:46.609990 32538 net.cpp:124] Setting up loss
I0426 20:53:46.610000 32538 net.cpp:131] Top shape: (1)
I0426 20:53:46.610003 32538 net.cpp:134]     with loss weight 1
I0426 20:53:46.610018 32538 net.cpp:139] Memory required for data: 9780484
I0426 20:53:46.610020 32538 net.cpp:200] loss needs backward computation.
I0426 20:53:46.610024 32538 net.cpp:200] relu2 needs backward computation.
I0426 20:53:46.610028 32538 net.cpp:200] ip2 needs backward computation.
I0426 20:53:46.610030 32538 net.cpp:200] relu1 needs backward computation.
I0426 20:53:46.610033 32538 net.cpp:200] ip1 needs backward computation.
I0426 20:53:46.610045 32538 net.cpp:200] pool1 needs backward computation.
I0426 20:53:46.610049 32538 net.cpp:200] conv1 needs backward computation.
I0426 20:53:46.610052 32538 net.cpp:200] pool0 needs backward computation.
I0426 20:53:46.610054 32538 net.cpp:200] conv0 needs backward computation.
I0426 20:53:46.610059 32538 net.cpp:202] mnist does not need backward computation.
I0426 20:53:46.610061 32538 net.cpp:244] This network produces output loss
I0426 20:53:46.610069 32538 net.cpp:257] Network initialization done.
I0426 20:53:46.610366 32538 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test144.prototxt
I0426 20:53:46.610391 32538 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:46.610471 32538 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:53:46.610530 32538 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:46.610574 32538 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:46.610585 32538 net.cpp:86] Creating Layer mnist
I0426 20:53:46.610589 32538 net.cpp:382] mnist -> data
I0426 20:53:46.610596 32538 net.cpp:382] mnist -> label
I0426 20:53:46.610677 32538 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:46.612561 32538 net.cpp:124] Setting up mnist
I0426 20:53:46.612589 32538 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:46.612596 32538 net.cpp:131] Top shape: 100 (100)
I0426 20:53:46.612598 32538 net.cpp:139] Memory required for data: 314000
I0426 20:53:46.612602 32538 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:46.612643 32538 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:46.612646 32538 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:46.612651 32538 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:46.612658 32538 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:46.612710 32538 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:46.612718 32538 net.cpp:131] Top shape: 100 (100)
I0426 20:53:46.612722 32538 net.cpp:131] Top shape: 100 (100)
I0426 20:53:46.612725 32538 net.cpp:139] Memory required for data: 314800
I0426 20:53:46.612728 32538 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:46.612736 32538 net.cpp:86] Creating Layer conv0
I0426 20:53:46.612740 32538 net.cpp:408] conv0 <- data
I0426 20:53:46.612745 32538 net.cpp:382] conv0 -> conv0
I0426 20:53:46.614568 32538 net.cpp:124] Setting up conv0
I0426 20:53:46.614581 32538 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:53:46.614600 32538 net.cpp:139] Memory required for data: 11834800
I0426 20:53:46.614609 32538 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:46.614616 32538 net.cpp:86] Creating Layer pool0
I0426 20:53:46.614619 32538 net.cpp:408] pool0 <- conv0
I0426 20:53:46.614624 32538 net.cpp:382] pool0 -> pool0
I0426 20:53:46.614675 32538 net.cpp:124] Setting up pool0
I0426 20:53:46.614681 32538 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:53:46.614683 32538 net.cpp:139] Memory required for data: 14714800
I0426 20:53:46.614686 32538 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:46.614696 32538 net.cpp:86] Creating Layer conv1
I0426 20:53:46.614699 32538 net.cpp:408] conv1 <- pool0
I0426 20:53:46.614706 32538 net.cpp:382] conv1 -> conv1
I0426 20:53:46.616360 32538 net.cpp:124] Setting up conv1
I0426 20:53:46.616374 32538 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:53:46.616392 32538 net.cpp:139] Memory required for data: 14970800
I0426 20:53:46.616400 32538 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:46.616407 32538 net.cpp:86] Creating Layer pool1
I0426 20:53:46.616410 32538 net.cpp:408] pool1 <- conv1
I0426 20:53:46.616416 32538 net.cpp:382] pool1 -> pool1
I0426 20:53:46.616468 32538 net.cpp:124] Setting up pool1
I0426 20:53:46.616474 32538 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:53:46.616477 32538 net.cpp:139] Memory required for data: 15034800
I0426 20:53:46.616479 32538 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:46.616487 32538 net.cpp:86] Creating Layer ip1
I0426 20:53:46.616497 32538 net.cpp:408] ip1 <- pool1
I0426 20:53:46.616502 32538 net.cpp:382] ip1 -> ip1
I0426 20:53:46.616904 32538 net.cpp:124] Setting up ip1
I0426 20:53:46.616911 32538 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:46.616915 32538 net.cpp:139] Memory required for data: 15154800
I0426 20:53:46.616922 32538 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:46.616928 32538 net.cpp:86] Creating Layer relu1
I0426 20:53:46.616931 32538 net.cpp:408] relu1 <- ip1
I0426 20:53:46.616938 32538 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:46.617106 32538 net.cpp:124] Setting up relu1
I0426 20:53:46.617115 32538 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:46.617118 32538 net.cpp:139] Memory required for data: 15274800
I0426 20:53:46.617125 32538 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:46.617132 32538 net.cpp:86] Creating Layer ip2
I0426 20:53:46.617136 32538 net.cpp:408] ip2 <- ip1
I0426 20:53:46.617141 32538 net.cpp:382] ip2 -> ip2
I0426 20:53:46.617331 32538 net.cpp:124] Setting up ip2
I0426 20:53:46.617339 32538 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:46.617342 32538 net.cpp:139] Memory required for data: 15278800
I0426 20:53:46.617347 32538 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:46.617352 32538 net.cpp:86] Creating Layer relu2
I0426 20:53:46.617357 32538 net.cpp:408] relu2 <- ip2
I0426 20:53:46.617362 32538 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:46.617517 32538 net.cpp:124] Setting up relu2
I0426 20:53:46.617527 32538 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:46.617530 32538 net.cpp:139] Memory required for data: 15282800
I0426 20:53:46.617533 32538 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:53:46.617539 32538 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:53:46.617542 32538 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:53:46.617547 32538 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:53:46.617563 32538 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:53:46.617599 32538 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:53:46.617614 32538 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:46.617617 32538 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:46.617619 32538 net.cpp:139] Memory required for data: 15290800
I0426 20:53:46.617627 32538 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:46.617637 32538 net.cpp:86] Creating Layer accuracy
I0426 20:53:46.617640 32538 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:53:46.617645 32538 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:46.617650 32538 net.cpp:382] accuracy -> accuracy
I0426 20:53:46.617657 32538 net.cpp:124] Setting up accuracy
I0426 20:53:46.617661 32538 net.cpp:131] Top shape: (1)
I0426 20:53:46.617664 32538 net.cpp:139] Memory required for data: 15290804
I0426 20:53:46.617667 32538 layer_factory.hpp:77] Creating layer loss
I0426 20:53:46.617671 32538 net.cpp:86] Creating Layer loss
I0426 20:53:46.617674 32538 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:53:46.617678 32538 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:46.617684 32538 net.cpp:382] loss -> loss
I0426 20:53:46.617689 32538 layer_factory.hpp:77] Creating layer loss
I0426 20:53:46.617918 32538 net.cpp:124] Setting up loss
I0426 20:53:46.617928 32538 net.cpp:131] Top shape: (1)
I0426 20:53:46.617931 32538 net.cpp:134]     with loss weight 1
I0426 20:53:46.617938 32538 net.cpp:139] Memory required for data: 15290808
I0426 20:53:46.617940 32538 net.cpp:200] loss needs backward computation.
I0426 20:53:46.617944 32538 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:46.617949 32538 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:53:46.617951 32538 net.cpp:200] relu2 needs backward computation.
I0426 20:53:46.617954 32538 net.cpp:200] ip2 needs backward computation.
I0426 20:53:46.617957 32538 net.cpp:200] relu1 needs backward computation.
I0426 20:53:46.617960 32538 net.cpp:200] ip1 needs backward computation.
I0426 20:53:46.617962 32538 net.cpp:200] pool1 needs backward computation.
I0426 20:53:46.617965 32538 net.cpp:200] conv1 needs backward computation.
I0426 20:53:46.617969 32538 net.cpp:200] pool0 needs backward computation.
I0426 20:53:46.617971 32538 net.cpp:200] conv0 needs backward computation.
I0426 20:53:46.617975 32538 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:46.617985 32538 net.cpp:202] mnist does not need backward computation.
I0426 20:53:46.617987 32538 net.cpp:244] This network produces output accuracy
I0426 20:53:46.617990 32538 net.cpp:244] This network produces output loss
I0426 20:53:46.618001 32538 net.cpp:257] Network initialization done.
I0426 20:53:46.618036 32538 solver.cpp:56] Solver scaffolding done.
I0426 20:53:46.618338 32538 caffe.cpp:248] Starting Optimization
I0426 20:53:46.618360 32538 solver.cpp:273] Solving LeNet
I0426 20:53:46.618361 32538 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:46.619264 32538 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:46.625360 32538 blocking_queue.cpp:49] Waiting for data
I0426 20:53:46.700251 32545 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:46.701119 32538 solver.cpp:398]     Test net output #0: accuracy = 0.0598
I0426 20:53:46.701153 32538 solver.cpp:398]     Test net output #1: loss = 2.34249 (* 1 = 2.34249 loss)
I0426 20:53:46.705710 32538 solver.cpp:219] Iteration 0 (-1.15e-31 iter/s, 0.087294s/100 iters), loss = 2.34029
I0426 20:53:46.705750 32538 solver.cpp:238]     Train net output #0: loss = 2.34029 (* 1 = 2.34029 loss)
I0426 20:53:46.705761 32538 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:53:46.830879 32538 solver.cpp:219] Iteration 100 (799.262 iter/s, 0.125115s/100 iters), loss = 0.530744
I0426 20:53:46.830904 32538 solver.cpp:238]     Train net output #0: loss = 0.530744 (* 1 = 0.530744 loss)
I0426 20:53:46.830911 32538 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:53:46.954905 32538 solver.cpp:219] Iteration 200 (806.543 iter/s, 0.123986s/100 iters), loss = 0.362836
I0426 20:53:46.954946 32538 solver.cpp:238]     Train net output #0: loss = 0.362836 (* 1 = 0.362836 loss)
I0426 20:53:46.954953 32538 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:53:47.079047 32538 solver.cpp:219] Iteration 300 (805.871 iter/s, 0.124089s/100 iters), loss = 0.307772
I0426 20:53:47.079088 32538 solver.cpp:238]     Train net output #0: loss = 0.307772 (* 1 = 0.307772 loss)
I0426 20:53:47.079095 32538 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:53:47.202143 32538 solver.cpp:219] Iteration 400 (812.719 iter/s, 0.123044s/100 iters), loss = 0.304429
I0426 20:53:47.202185 32538 solver.cpp:238]     Train net output #0: loss = 0.304429 (* 1 = 0.304429 loss)
I0426 20:53:47.202191 32538 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:53:47.321888 32538 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:53:47.399940 32545 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:47.400800 32538 solver.cpp:398]     Test net output #0: accuracy = 0.8776
I0426 20:53:47.400840 32538 solver.cpp:398]     Test net output #1: loss = 0.317166 (* 1 = 0.317166 loss)
I0426 20:53:47.402025 32538 solver.cpp:219] Iteration 500 (500.437 iter/s, 0.199825s/100 iters), loss = 0.289569
I0426 20:53:47.402062 32538 solver.cpp:238]     Train net output #0: loss = 0.289569 (* 1 = 0.289569 loss)
I0426 20:53:47.402068 32538 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:53:47.527724 32538 solver.cpp:219] Iteration 600 (795.771 iter/s, 0.125664s/100 iters), loss = 0.0912598
I0426 20:53:47.527748 32538 solver.cpp:238]     Train net output #0: loss = 0.0912598 (* 1 = 0.0912598 loss)
I0426 20:53:47.527755 32538 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:53:47.648152 32538 solver.cpp:219] Iteration 700 (830.721 iter/s, 0.120377s/100 iters), loss = 0.156938
I0426 20:53:47.648180 32538 solver.cpp:238]     Train net output #0: loss = 0.156938 (* 1 = 0.156938 loss)
I0426 20:53:47.648186 32538 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:53:47.770762 32538 solver.cpp:219] Iteration 800 (815.849 iter/s, 0.122572s/100 iters), loss = 0.171086
I0426 20:53:47.770803 32538 solver.cpp:238]     Train net output #0: loss = 0.171086 (* 1 = 0.171086 loss)
I0426 20:53:47.770825 32538 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:53:47.892771 32538 solver.cpp:219] Iteration 900 (819.959 iter/s, 0.121957s/100 iters), loss = 0.201346
I0426 20:53:47.892817 32538 solver.cpp:238]     Train net output #0: loss = 0.201346 (* 1 = 0.201346 loss)
I0426 20:53:47.892823 32538 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:53:47.933040 32544 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:48.012902 32538 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:53:48.014588 32538 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:53:48.015763 32538 solver.cpp:311] Iteration 1000, loss = 0.131268
I0426 20:53:48.015777 32538 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:53:48.092744 32545 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:48.093531 32538 solver.cpp:398]     Test net output #0: accuracy = 0.9714
I0426 20:53:48.093582 32538 solver.cpp:398]     Test net output #1: loss = 0.0861849 (* 1 = 0.0861849 loss)
I0426 20:53:48.093588 32538 solver.cpp:316] Optimization Done.
I0426 20:53:48.093591 32538 caffe.cpp:259] Optimization Done.
