I0426 20:52:11.883047 32145 caffe.cpp:218] Using GPUs 0
I0426 20:52:11.912458 32145 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:12.368974 32145 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test106.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:12.369105 32145 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test106.prototxt
I0426 20:52:12.369483 32145 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:12.369511 32145 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:12.369588 32145 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:12.369678 32145 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:12.369761 32145 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:12.369782 32145 net.cpp:86] Creating Layer mnist
I0426 20:52:12.369789 32145 net.cpp:382] mnist -> data
I0426 20:52:12.369809 32145 net.cpp:382] mnist -> label
I0426 20:52:12.370776 32145 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:12.372910 32145 net.cpp:124] Setting up mnist
I0426 20:52:12.372938 32145 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:12.372943 32145 net.cpp:131] Top shape: 64 (64)
I0426 20:52:12.372946 32145 net.cpp:139] Memory required for data: 200960
I0426 20:52:12.372953 32145 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:12.372967 32145 net.cpp:86] Creating Layer conv0
I0426 20:52:12.372998 32145 net.cpp:408] conv0 <- data
I0426 20:52:12.373008 32145 net.cpp:382] conv0 -> conv0
I0426 20:52:12.602653 32145 net.cpp:124] Setting up conv0
I0426 20:52:12.602679 32145 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:12.602682 32145 net.cpp:139] Memory required for data: 3887360
I0426 20:52:12.602696 32145 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:12.602708 32145 net.cpp:86] Creating Layer pool0
I0426 20:52:12.602712 32145 net.cpp:408] pool0 <- conv0
I0426 20:52:12.602717 32145 net.cpp:382] pool0 -> pool0
I0426 20:52:12.602774 32145 net.cpp:124] Setting up pool0
I0426 20:52:12.602779 32145 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:12.602782 32145 net.cpp:139] Memory required for data: 4808960
I0426 20:52:12.602784 32145 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:12.602794 32145 net.cpp:86] Creating Layer conv1
I0426 20:52:12.602797 32145 net.cpp:408] conv1 <- pool0
I0426 20:52:12.602802 32145 net.cpp:382] conv1 -> conv1
I0426 20:52:12.605543 32145 net.cpp:124] Setting up conv1
I0426 20:52:12.605572 32145 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:52:12.605576 32145 net.cpp:139] Memory required for data: 4972800
I0426 20:52:12.605583 32145 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:12.605592 32145 net.cpp:86] Creating Layer pool1
I0426 20:52:12.605594 32145 net.cpp:408] pool1 <- conv1
I0426 20:52:12.605599 32145 net.cpp:382] pool1 -> pool1
I0426 20:52:12.605649 32145 net.cpp:124] Setting up pool1
I0426 20:52:12.605669 32145 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:52:12.605671 32145 net.cpp:139] Memory required for data: 5013760
I0426 20:52:12.605674 32145 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:12.605679 32145 net.cpp:86] Creating Layer ip1
I0426 20:52:12.605682 32145 net.cpp:408] ip1 <- pool1
I0426 20:52:12.605686 32145 net.cpp:382] ip1 -> ip1
I0426 20:52:12.605862 32145 net.cpp:124] Setting up ip1
I0426 20:52:12.605870 32145 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:12.605872 32145 net.cpp:139] Memory required for data: 5039360
I0426 20:52:12.605880 32145 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:12.605885 32145 net.cpp:86] Creating Layer relu1
I0426 20:52:12.605887 32145 net.cpp:408] relu1 <- ip1
I0426 20:52:12.605891 32145 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:12.606045 32145 net.cpp:124] Setting up relu1
I0426 20:52:12.606053 32145 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:12.606056 32145 net.cpp:139] Memory required for data: 5064960
I0426 20:52:12.606060 32145 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:12.606065 32145 net.cpp:86] Creating Layer ip2
I0426 20:52:12.606068 32145 net.cpp:408] ip2 <- ip1
I0426 20:52:12.606072 32145 net.cpp:382] ip2 -> ip2
I0426 20:52:12.606338 32145 net.cpp:124] Setting up ip2
I0426 20:52:12.606345 32145 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:12.606348 32145 net.cpp:139] Memory required for data: 5141760
I0426 20:52:12.606353 32145 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:12.606359 32145 net.cpp:86] Creating Layer relu2
I0426 20:52:12.606362 32145 net.cpp:408] relu2 <- ip2
I0426 20:52:12.606366 32145 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:12.607174 32145 net.cpp:124] Setting up relu2
I0426 20:52:12.607185 32145 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:52:12.607203 32145 net.cpp:139] Memory required for data: 5218560
I0426 20:52:12.607206 32145 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:12.607213 32145 net.cpp:86] Creating Layer ip3
I0426 20:52:12.607216 32145 net.cpp:408] ip3 <- ip2
I0426 20:52:12.607221 32145 net.cpp:382] ip3 -> ip3
I0426 20:52:12.608216 32145 net.cpp:124] Setting up ip3
I0426 20:52:12.608227 32145 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:12.608230 32145 net.cpp:139] Memory required for data: 5221120
I0426 20:52:12.608238 32145 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:12.608243 32145 net.cpp:86] Creating Layer relu3
I0426 20:52:12.608247 32145 net.cpp:408] relu3 <- ip3
I0426 20:52:12.608265 32145 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:12.608464 32145 net.cpp:124] Setting up relu3
I0426 20:52:12.608474 32145 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:12.608476 32145 net.cpp:139] Memory required for data: 5223680
I0426 20:52:12.608479 32145 layer_factory.hpp:77] Creating layer loss
I0426 20:52:12.608485 32145 net.cpp:86] Creating Layer loss
I0426 20:52:12.608489 32145 net.cpp:408] loss <- ip3
I0426 20:52:12.608492 32145 net.cpp:408] loss <- label
I0426 20:52:12.608497 32145 net.cpp:382] loss -> loss
I0426 20:52:12.608510 32145 layer_factory.hpp:77] Creating layer loss
I0426 20:52:12.608760 32145 net.cpp:124] Setting up loss
I0426 20:52:12.608770 32145 net.cpp:131] Top shape: (1)
I0426 20:52:12.608773 32145 net.cpp:134]     with loss weight 1
I0426 20:52:12.608788 32145 net.cpp:139] Memory required for data: 5223684
I0426 20:52:12.608806 32145 net.cpp:200] loss needs backward computation.
I0426 20:52:12.608815 32145 net.cpp:200] relu3 needs backward computation.
I0426 20:52:12.608819 32145 net.cpp:200] ip3 needs backward computation.
I0426 20:52:12.608824 32145 net.cpp:200] relu2 needs backward computation.
I0426 20:52:12.608827 32145 net.cpp:200] ip2 needs backward computation.
I0426 20:52:12.608846 32145 net.cpp:200] relu1 needs backward computation.
I0426 20:52:12.608850 32145 net.cpp:200] ip1 needs backward computation.
I0426 20:52:12.608852 32145 net.cpp:200] pool1 needs backward computation.
I0426 20:52:12.608855 32145 net.cpp:200] conv1 needs backward computation.
I0426 20:52:12.608858 32145 net.cpp:200] pool0 needs backward computation.
I0426 20:52:12.608861 32145 net.cpp:200] conv0 needs backward computation.
I0426 20:52:12.608865 32145 net.cpp:202] mnist does not need backward computation.
I0426 20:52:12.608868 32145 net.cpp:244] This network produces output loss
I0426 20:52:12.608877 32145 net.cpp:257] Network initialization done.
I0426 20:52:12.609273 32145 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test106.prototxt
I0426 20:52:12.609309 32145 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:12.609395 32145 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:12.609470 32145 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:12.609513 32145 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:12.609524 32145 net.cpp:86] Creating Layer mnist
I0426 20:52:12.609529 32145 net.cpp:382] mnist -> data
I0426 20:52:12.609535 32145 net.cpp:382] mnist -> label
I0426 20:52:12.609616 32145 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:12.611562 32145 net.cpp:124] Setting up mnist
I0426 20:52:12.611589 32145 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:12.611593 32145 net.cpp:131] Top shape: 100 (100)
I0426 20:52:12.611598 32145 net.cpp:139] Memory required for data: 314000
I0426 20:52:12.611601 32145 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:12.611608 32145 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:12.611610 32145 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:12.611615 32145 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:12.611621 32145 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:12.611687 32145 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:12.611692 32145 net.cpp:131] Top shape: 100 (100)
I0426 20:52:12.611696 32145 net.cpp:131] Top shape: 100 (100)
I0426 20:52:12.611698 32145 net.cpp:139] Memory required for data: 314800
I0426 20:52:12.611701 32145 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:12.611708 32145 net.cpp:86] Creating Layer conv0
I0426 20:52:12.611711 32145 net.cpp:408] conv0 <- data
I0426 20:52:12.611716 32145 net.cpp:382] conv0 -> conv0
I0426 20:52:12.613535 32145 net.cpp:124] Setting up conv0
I0426 20:52:12.613548 32145 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:12.613551 32145 net.cpp:139] Memory required for data: 6074800
I0426 20:52:12.613560 32145 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:12.613565 32145 net.cpp:86] Creating Layer pool0
I0426 20:52:12.613584 32145 net.cpp:408] pool0 <- conv0
I0426 20:52:12.613589 32145 net.cpp:382] pool0 -> pool0
I0426 20:52:12.613622 32145 net.cpp:124] Setting up pool0
I0426 20:52:12.613627 32145 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:12.613629 32145 net.cpp:139] Memory required for data: 7514800
I0426 20:52:12.613632 32145 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:12.613639 32145 net.cpp:86] Creating Layer conv1
I0426 20:52:12.613642 32145 net.cpp:408] conv1 <- pool0
I0426 20:52:12.613647 32145 net.cpp:382] conv1 -> conv1
I0426 20:52:12.615826 32145 net.cpp:124] Setting up conv1
I0426 20:52:12.615839 32145 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:52:12.615844 32145 net.cpp:139] Memory required for data: 7770800
I0426 20:52:12.615851 32145 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:12.615856 32145 net.cpp:86] Creating Layer pool1
I0426 20:52:12.615883 32145 net.cpp:408] pool1 <- conv1
I0426 20:52:12.615888 32145 net.cpp:382] pool1 -> pool1
I0426 20:52:12.615923 32145 net.cpp:124] Setting up pool1
I0426 20:52:12.615928 32145 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:52:12.615931 32145 net.cpp:139] Memory required for data: 7834800
I0426 20:52:12.615933 32145 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:12.615938 32145 net.cpp:86] Creating Layer ip1
I0426 20:52:12.615942 32145 net.cpp:408] ip1 <- pool1
I0426 20:52:12.615947 32145 net.cpp:382] ip1 -> ip1
I0426 20:52:12.616125 32145 net.cpp:124] Setting up ip1
I0426 20:52:12.616132 32145 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:12.616144 32145 net.cpp:139] Memory required for data: 7874800
I0426 20:52:12.616152 32145 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:12.616155 32145 net.cpp:86] Creating Layer relu1
I0426 20:52:12.616158 32145 net.cpp:408] relu1 <- ip1
I0426 20:52:12.616163 32145 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:12.616386 32145 net.cpp:124] Setting up relu1
I0426 20:52:12.616411 32145 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:12.616415 32145 net.cpp:139] Memory required for data: 7914800
I0426 20:52:12.616418 32145 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:12.616425 32145 net.cpp:86] Creating Layer ip2
I0426 20:52:12.616427 32145 net.cpp:408] ip2 <- ip1
I0426 20:52:12.616433 32145 net.cpp:382] ip2 -> ip2
I0426 20:52:12.616729 32145 net.cpp:124] Setting up ip2
I0426 20:52:12.616736 32145 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:12.616739 32145 net.cpp:139] Memory required for data: 8034800
I0426 20:52:12.616744 32145 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:12.616749 32145 net.cpp:86] Creating Layer relu2
I0426 20:52:12.616757 32145 net.cpp:408] relu2 <- ip2
I0426 20:52:12.616761 32145 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:12.616964 32145 net.cpp:124] Setting up relu2
I0426 20:52:12.616973 32145 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:52:12.616977 32145 net.cpp:139] Memory required for data: 8154800
I0426 20:52:12.616981 32145 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:12.616986 32145 net.cpp:86] Creating Layer ip3
I0426 20:52:12.616989 32145 net.cpp:408] ip3 <- ip2
I0426 20:52:12.616994 32145 net.cpp:382] ip3 -> ip3
I0426 20:52:12.617120 32145 net.cpp:124] Setting up ip3
I0426 20:52:12.617126 32145 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:12.617130 32145 net.cpp:139] Memory required for data: 8158800
I0426 20:52:12.617153 32145 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:12.617164 32145 net.cpp:86] Creating Layer relu3
I0426 20:52:12.617167 32145 net.cpp:408] relu3 <- ip3
I0426 20:52:12.617177 32145 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:12.618038 32145 net.cpp:124] Setting up relu3
I0426 20:52:12.618049 32145 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:12.618052 32145 net.cpp:139] Memory required for data: 8162800
I0426 20:52:12.618055 32145 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:52:12.618060 32145 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:52:12.618063 32145 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:52:12.618068 32145 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:52:12.618074 32145 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:52:12.618111 32145 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:52:12.618116 32145 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:12.618119 32145 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:12.618129 32145 net.cpp:139] Memory required for data: 8170800
I0426 20:52:12.618131 32145 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:12.618136 32145 net.cpp:86] Creating Layer accuracy
I0426 20:52:12.618139 32145 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:52:12.618142 32145 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:12.618146 32145 net.cpp:382] accuracy -> accuracy
I0426 20:52:12.618154 32145 net.cpp:124] Setting up accuracy
I0426 20:52:12.618157 32145 net.cpp:131] Top shape: (1)
I0426 20:52:12.618160 32145 net.cpp:139] Memory required for data: 8170804
I0426 20:52:12.618162 32145 layer_factory.hpp:77] Creating layer loss
I0426 20:52:12.618166 32145 net.cpp:86] Creating Layer loss
I0426 20:52:12.618170 32145 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:52:12.618172 32145 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:12.618176 32145 net.cpp:382] loss -> loss
I0426 20:52:12.618181 32145 layer_factory.hpp:77] Creating layer loss
I0426 20:52:12.618425 32145 net.cpp:124] Setting up loss
I0426 20:52:12.618435 32145 net.cpp:131] Top shape: (1)
I0426 20:52:12.618438 32145 net.cpp:134]     with loss weight 1
I0426 20:52:12.618454 32145 net.cpp:139] Memory required for data: 8170808
I0426 20:52:12.618458 32145 net.cpp:200] loss needs backward computation.
I0426 20:52:12.618461 32145 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:12.618465 32145 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:52:12.618468 32145 net.cpp:200] relu3 needs backward computation.
I0426 20:52:12.618471 32145 net.cpp:200] ip3 needs backward computation.
I0426 20:52:12.618474 32145 net.cpp:200] relu2 needs backward computation.
I0426 20:52:12.618476 32145 net.cpp:200] ip2 needs backward computation.
I0426 20:52:12.618479 32145 net.cpp:200] relu1 needs backward computation.
I0426 20:52:12.618482 32145 net.cpp:200] ip1 needs backward computation.
I0426 20:52:12.618485 32145 net.cpp:200] pool1 needs backward computation.
I0426 20:52:12.618510 32145 net.cpp:200] conv1 needs backward computation.
I0426 20:52:12.618515 32145 net.cpp:200] pool0 needs backward computation.
I0426 20:52:12.618517 32145 net.cpp:200] conv0 needs backward computation.
I0426 20:52:12.618520 32145 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:12.618525 32145 net.cpp:202] mnist does not need backward computation.
I0426 20:52:12.618527 32145 net.cpp:244] This network produces output accuracy
I0426 20:52:12.618530 32145 net.cpp:244] This network produces output loss
I0426 20:52:12.618551 32145 net.cpp:257] Network initialization done.
I0426 20:52:12.618592 32145 solver.cpp:56] Solver scaffolding done.
I0426 20:52:12.618927 32145 caffe.cpp:248] Starting Optimization
I0426 20:52:12.618933 32145 solver.cpp:273] Solving LeNet
I0426 20:52:12.618937 32145 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:12.619817 32145 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:12.625144 32145 blocking_queue.cpp:49] Waiting for data
I0426 20:52:12.697912 32152 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:12.698560 32145 solver.cpp:398]     Test net output #0: accuracy = 0.0533
I0426 20:52:12.698578 32145 solver.cpp:398]     Test net output #1: loss = 2.3189 (* 1 = 2.3189 loss)
I0426 20:52:12.702610 32145 solver.cpp:219] Iteration 0 (-3.29352e-31 iter/s, 0.0836506s/100 iters), loss = 2.32125
I0426 20:52:12.702636 32145 solver.cpp:238]     Train net output #0: loss = 2.32125 (* 1 = 2.32125 loss)
I0426 20:52:12.702662 32145 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:12.808307 32145 solver.cpp:219] Iteration 100 (946.447 iter/s, 0.105658s/100 iters), loss = 0.584152
I0426 20:52:12.808346 32145 solver.cpp:238]     Train net output #0: loss = 0.584152 (* 1 = 0.584152 loss)
I0426 20:52:12.808357 32145 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:12.911134 32145 solver.cpp:219] Iteration 200 (972.97 iter/s, 0.102778s/100 iters), loss = 0.18477
I0426 20:52:12.911160 32145 solver.cpp:238]     Train net output #0: loss = 0.18477 (* 1 = 0.18477 loss)
I0426 20:52:12.911166 32145 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:13.015949 32145 solver.cpp:219] Iteration 300 (954.394 iter/s, 0.104779s/100 iters), loss = 0.289554
I0426 20:52:13.015972 32145 solver.cpp:238]     Train net output #0: loss = 0.289554 (* 1 = 0.289554 loss)
I0426 20:52:13.015977 32145 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:13.121558 32145 solver.cpp:219] Iteration 400 (947.2 iter/s, 0.105574s/100 iters), loss = 0.0892404
I0426 20:52:13.121592 32145 solver.cpp:238]     Train net output #0: loss = 0.0892404 (* 1 = 0.0892404 loss)
I0426 20:52:13.121600 32145 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:13.222067 32145 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:13.298429 32152 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:13.299104 32145 solver.cpp:398]     Test net output #0: accuracy = 0.9669
I0426 20:52:13.299129 32145 solver.cpp:398]     Test net output #1: loss = 0.106469 (* 1 = 0.106469 loss)
I0426 20:52:13.300082 32145 solver.cpp:219] Iteration 500 (560.293 iter/s, 0.178478s/100 iters), loss = 0.0755047
I0426 20:52:13.300123 32145 solver.cpp:238]     Train net output #0: loss = 0.0755047 (* 1 = 0.0755047 loss)
I0426 20:52:13.300151 32145 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:13.407949 32145 solver.cpp:219] Iteration 600 (927.508 iter/s, 0.107816s/100 iters), loss = 0.131779
I0426 20:52:13.407975 32145 solver.cpp:238]     Train net output #0: loss = 0.131779 (* 1 = 0.131779 loss)
I0426 20:52:13.407982 32145 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:13.511031 32145 solver.cpp:219] Iteration 700 (970.449 iter/s, 0.103045s/100 iters), loss = 0.153589
I0426 20:52:13.511056 32145 solver.cpp:238]     Train net output #0: loss = 0.153589 (* 1 = 0.153589 loss)
I0426 20:52:13.511063 32145 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:13.612941 32145 solver.cpp:219] Iteration 800 (981.617 iter/s, 0.101873s/100 iters), loss = 0.24716
I0426 20:52:13.612965 32145 solver.cpp:238]     Train net output #0: loss = 0.24716 (* 1 = 0.24716 loss)
I0426 20:52:13.612972 32145 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:13.717808 32145 solver.cpp:219] Iteration 900 (953.917 iter/s, 0.104831s/100 iters), loss = 0.145821
I0426 20:52:13.717833 32145 solver.cpp:238]     Train net output #0: loss = 0.145821 (* 1 = 0.145821 loss)
I0426 20:52:13.717839 32145 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:13.752418 32151 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:13.819032 32145 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:13.820399 32145 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:13.821295 32145 solver.cpp:311] Iteration 1000, loss = 0.155471
I0426 20:52:13.821310 32145 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:13.897617 32152 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:13.898255 32145 solver.cpp:398]     Test net output #0: accuracy = 0.9753
I0426 20:52:13.898275 32145 solver.cpp:398]     Test net output #1: loss = 0.0785944 (* 1 = 0.0785944 loss)
I0426 20:52:13.898280 32145 solver.cpp:316] Optimization Done.
I0426 20:52:13.898283 32145 caffe.cpp:259] Optimization Done.
