I0426 20:50:04.003054 31679 caffe.cpp:218] Using GPUs 0
I0426 20:50:04.041996 31679 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:04.565729 31679 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test51.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:04.565872 31679 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test51.prototxt
I0426 20:50:04.566239 31679 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:04.566257 31679 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:04.566344 31679 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:04.566422 31679 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:04.566524 31679 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:04.566547 31679 net.cpp:86] Creating Layer mnist
I0426 20:50:04.566555 31679 net.cpp:382] mnist -> data
I0426 20:50:04.566577 31679 net.cpp:382] mnist -> label
I0426 20:50:04.567668 31679 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:04.570225 31679 net.cpp:124] Setting up mnist
I0426 20:50:04.570243 31679 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:04.570250 31679 net.cpp:131] Top shape: 64 (64)
I0426 20:50:04.570252 31679 net.cpp:139] Memory required for data: 200960
I0426 20:50:04.570260 31679 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:04.570302 31679 net.cpp:86] Creating Layer conv0
I0426 20:50:04.570307 31679 net.cpp:408] conv0 <- data
I0426 20:50:04.570318 31679 net.cpp:382] conv0 -> conv0
I0426 20:50:04.814251 31679 net.cpp:124] Setting up conv0
I0426 20:50:04.814280 31679 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:50:04.814283 31679 net.cpp:139] Memory required for data: 7573760
I0426 20:50:04.814298 31679 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:04.814311 31679 net.cpp:86] Creating Layer pool0
I0426 20:50:04.814333 31679 net.cpp:408] pool0 <- conv0
I0426 20:50:04.814354 31679 net.cpp:382] pool0 -> pool0
I0426 20:50:04.814405 31679 net.cpp:124] Setting up pool0
I0426 20:50:04.814412 31679 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:50:04.814415 31679 net.cpp:139] Memory required for data: 9416960
I0426 20:50:04.814419 31679 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:04.814425 31679 net.cpp:86] Creating Layer ip1
I0426 20:50:04.814429 31679 net.cpp:408] ip1 <- pool0
I0426 20:50:04.814434 31679 net.cpp:382] ip1 -> ip1
I0426 20:50:04.819344 31679 net.cpp:124] Setting up ip1
I0426 20:50:04.819356 31679 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:04.819375 31679 net.cpp:139] Memory required for data: 9442560
I0426 20:50:04.819383 31679 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:04.819389 31679 net.cpp:86] Creating Layer relu1
I0426 20:50:04.819392 31679 net.cpp:408] relu1 <- ip1
I0426 20:50:04.819397 31679 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:04.819591 31679 net.cpp:124] Setting up relu1
I0426 20:50:04.819599 31679 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:04.819602 31679 net.cpp:139] Memory required for data: 9468160
I0426 20:50:04.819605 31679 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:04.819612 31679 net.cpp:86] Creating Layer ip2
I0426 20:50:04.819614 31679 net.cpp:408] ip2 <- ip1
I0426 20:50:04.819620 31679 net.cpp:382] ip2 -> ip2
I0426 20:50:04.819872 31679 net.cpp:124] Setting up ip2
I0426 20:50:04.819880 31679 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:04.819883 31679 net.cpp:139] Memory required for data: 9544960
I0426 20:50:04.819890 31679 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:04.819896 31679 net.cpp:86] Creating Layer relu2
I0426 20:50:04.819900 31679 net.cpp:408] relu2 <- ip2
I0426 20:50:04.819905 31679 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:04.820744 31679 net.cpp:124] Setting up relu2
I0426 20:50:04.820756 31679 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:50:04.820775 31679 net.cpp:139] Memory required for data: 9621760
I0426 20:50:04.820778 31679 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:04.820785 31679 net.cpp:86] Creating Layer ip3
I0426 20:50:04.820787 31679 net.cpp:408] ip3 <- ip2
I0426 20:50:04.820793 31679 net.cpp:382] ip3 -> ip3
I0426 20:50:04.820969 31679 net.cpp:124] Setting up ip3
I0426 20:50:04.820978 31679 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:04.820981 31679 net.cpp:139] Memory required for data: 9624320
I0426 20:50:04.821002 31679 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:04.821009 31679 net.cpp:86] Creating Layer relu3
I0426 20:50:04.821012 31679 net.cpp:408] relu3 <- ip3
I0426 20:50:04.821017 31679 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:04.821187 31679 net.cpp:124] Setting up relu3
I0426 20:50:04.821194 31679 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:04.821197 31679 net.cpp:139] Memory required for data: 9626880
I0426 20:50:04.821199 31679 layer_factory.hpp:77] Creating layer loss
I0426 20:50:04.821207 31679 net.cpp:86] Creating Layer loss
I0426 20:50:04.821209 31679 net.cpp:408] loss <- ip3
I0426 20:50:04.821213 31679 net.cpp:408] loss <- label
I0426 20:50:04.821218 31679 net.cpp:382] loss -> loss
I0426 20:50:04.821250 31679 layer_factory.hpp:77] Creating layer loss
I0426 20:50:04.821501 31679 net.cpp:124] Setting up loss
I0426 20:50:04.821509 31679 net.cpp:131] Top shape: (1)
I0426 20:50:04.821513 31679 net.cpp:134]     with loss weight 1
I0426 20:50:04.821527 31679 net.cpp:139] Memory required for data: 9626884
I0426 20:50:04.821530 31679 net.cpp:200] loss needs backward computation.
I0426 20:50:04.821534 31679 net.cpp:200] relu3 needs backward computation.
I0426 20:50:04.821537 31679 net.cpp:200] ip3 needs backward computation.
I0426 20:50:04.821540 31679 net.cpp:200] relu2 needs backward computation.
I0426 20:50:04.821543 31679 net.cpp:200] ip2 needs backward computation.
I0426 20:50:04.821545 31679 net.cpp:200] relu1 needs backward computation.
I0426 20:50:04.821549 31679 net.cpp:200] ip1 needs backward computation.
I0426 20:50:04.821563 31679 net.cpp:200] pool0 needs backward computation.
I0426 20:50:04.821565 31679 net.cpp:200] conv0 needs backward computation.
I0426 20:50:04.821569 31679 net.cpp:202] mnist does not need backward computation.
I0426 20:50:04.821573 31679 net.cpp:244] This network produces output loss
I0426 20:50:04.821580 31679 net.cpp:257] Network initialization done.
I0426 20:50:04.821866 31679 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test51.prototxt
I0426 20:50:04.821892 31679 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:04.821969 31679 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:50:04.822029 31679 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:04.822074 31679 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:04.822087 31679 net.cpp:86] Creating Layer mnist
I0426 20:50:04.822090 31679 net.cpp:382] mnist -> data
I0426 20:50:04.822098 31679 net.cpp:382] mnist -> label
I0426 20:50:04.822175 31679 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:04.824291 31679 net.cpp:124] Setting up mnist
I0426 20:50:04.824303 31679 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:04.824308 31679 net.cpp:131] Top shape: 100 (100)
I0426 20:50:04.824311 31679 net.cpp:139] Memory required for data: 314000
I0426 20:50:04.824314 31679 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:04.824323 31679 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:04.824326 31679 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:04.824331 31679 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:04.824337 31679 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:04.824385 31679 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:04.824390 31679 net.cpp:131] Top shape: 100 (100)
I0426 20:50:04.824393 31679 net.cpp:131] Top shape: 100 (100)
I0426 20:50:04.824396 31679 net.cpp:139] Memory required for data: 314800
I0426 20:50:04.824407 31679 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:04.824415 31679 net.cpp:86] Creating Layer conv0
I0426 20:50:04.824419 31679 net.cpp:408] conv0 <- data
I0426 20:50:04.824424 31679 net.cpp:382] conv0 -> conv0
I0426 20:50:04.826210 31679 net.cpp:124] Setting up conv0
I0426 20:50:04.826225 31679 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:50:04.826227 31679 net.cpp:139] Memory required for data: 11834800
I0426 20:50:04.826236 31679 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:04.826241 31679 net.cpp:86] Creating Layer pool0
I0426 20:50:04.826261 31679 net.cpp:408] pool0 <- conv0
I0426 20:50:04.826266 31679 net.cpp:382] pool0 -> pool0
I0426 20:50:04.826298 31679 net.cpp:124] Setting up pool0
I0426 20:50:04.826303 31679 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:50:04.826305 31679 net.cpp:139] Memory required for data: 14714800
I0426 20:50:04.826308 31679 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:04.826314 31679 net.cpp:86] Creating Layer ip1
I0426 20:50:04.826318 31679 net.cpp:408] ip1 <- pool0
I0426 20:50:04.826323 31679 net.cpp:382] ip1 -> ip1
I0426 20:50:04.831208 31679 net.cpp:124] Setting up ip1
I0426 20:50:04.831221 31679 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:04.831224 31679 net.cpp:139] Memory required for data: 14754800
I0426 20:50:04.831248 31679 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:04.831254 31679 net.cpp:86] Creating Layer relu1
I0426 20:50:04.831257 31679 net.cpp:408] relu1 <- ip1
I0426 20:50:04.831277 31679 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:04.831442 31679 net.cpp:124] Setting up relu1
I0426 20:50:04.831452 31679 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:04.831455 31679 net.cpp:139] Memory required for data: 14794800
I0426 20:50:04.831465 31679 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:04.831471 31679 net.cpp:86] Creating Layer ip2
I0426 20:50:04.831475 31679 net.cpp:408] ip2 <- ip1
I0426 20:50:04.831480 31679 net.cpp:382] ip2 -> ip2
I0426 20:50:04.831758 31679 net.cpp:124] Setting up ip2
I0426 20:50:04.831765 31679 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:04.831768 31679 net.cpp:139] Memory required for data: 14914800
I0426 20:50:04.831774 31679 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:04.831779 31679 net.cpp:86] Creating Layer relu2
I0426 20:50:04.831782 31679 net.cpp:408] relu2 <- ip2
I0426 20:50:04.831785 31679 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:04.832640 31679 net.cpp:124] Setting up relu2
I0426 20:50:04.832667 31679 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:50:04.832670 31679 net.cpp:139] Memory required for data: 15034800
I0426 20:50:04.832674 31679 layer_factory.hpp:77] Creating layer ip3
I0426 20:50:04.832701 31679 net.cpp:86] Creating Layer ip3
I0426 20:50:04.832705 31679 net.cpp:408] ip3 <- ip2
I0426 20:50:04.832710 31679 net.cpp:382] ip3 -> ip3
I0426 20:50:04.832847 31679 net.cpp:124] Setting up ip3
I0426 20:50:04.832855 31679 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:04.832859 31679 net.cpp:139] Memory required for data: 15038800
I0426 20:50:04.832864 31679 layer_factory.hpp:77] Creating layer relu3
I0426 20:50:04.832870 31679 net.cpp:86] Creating Layer relu3
I0426 20:50:04.832872 31679 net.cpp:408] relu3 <- ip3
I0426 20:50:04.832892 31679 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:50:04.833045 31679 net.cpp:124] Setting up relu3
I0426 20:50:04.833053 31679 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:04.833056 31679 net.cpp:139] Memory required for data: 15042800
I0426 20:50:04.833060 31679 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:50:04.833065 31679 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:50:04.833067 31679 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:50:04.833071 31679 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:50:04.833077 31679 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:50:04.833112 31679 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:50:04.833117 31679 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:04.833132 31679 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:04.833134 31679 net.cpp:139] Memory required for data: 15050800
I0426 20:50:04.833153 31679 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:04.833158 31679 net.cpp:86] Creating Layer accuracy
I0426 20:50:04.833174 31679 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:50:04.833179 31679 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:04.833184 31679 net.cpp:382] accuracy -> accuracy
I0426 20:50:04.833204 31679 net.cpp:124] Setting up accuracy
I0426 20:50:04.833209 31679 net.cpp:131] Top shape: (1)
I0426 20:50:04.833226 31679 net.cpp:139] Memory required for data: 15050804
I0426 20:50:04.833230 31679 layer_factory.hpp:77] Creating layer loss
I0426 20:50:04.833233 31679 net.cpp:86] Creating Layer loss
I0426 20:50:04.833236 31679 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:50:04.833240 31679 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:04.833243 31679 net.cpp:382] loss -> loss
I0426 20:50:04.833250 31679 layer_factory.hpp:77] Creating layer loss
I0426 20:50:04.833482 31679 net.cpp:124] Setting up loss
I0426 20:50:04.833490 31679 net.cpp:131] Top shape: (1)
I0426 20:50:04.833494 31679 net.cpp:134]     with loss weight 1
I0426 20:50:04.833501 31679 net.cpp:139] Memory required for data: 15050808
I0426 20:50:04.833505 31679 net.cpp:200] loss needs backward computation.
I0426 20:50:04.833509 31679 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:04.833513 31679 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:50:04.833515 31679 net.cpp:200] relu3 needs backward computation.
I0426 20:50:04.833518 31679 net.cpp:200] ip3 needs backward computation.
I0426 20:50:04.833521 31679 net.cpp:200] relu2 needs backward computation.
I0426 20:50:04.833524 31679 net.cpp:200] ip2 needs backward computation.
I0426 20:50:04.833526 31679 net.cpp:200] relu1 needs backward computation.
I0426 20:50:04.833529 31679 net.cpp:200] ip1 needs backward computation.
I0426 20:50:04.833533 31679 net.cpp:200] pool0 needs backward computation.
I0426 20:50:04.833535 31679 net.cpp:200] conv0 needs backward computation.
I0426 20:50:04.833539 31679 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:04.833542 31679 net.cpp:202] mnist does not need backward computation.
I0426 20:50:04.833545 31679 net.cpp:244] This network produces output accuracy
I0426 20:50:04.833549 31679 net.cpp:244] This network produces output loss
I0426 20:50:04.833559 31679 net.cpp:257] Network initialization done.
I0426 20:50:04.833595 31679 solver.cpp:56] Solver scaffolding done.
I0426 20:50:04.833884 31679 caffe.cpp:248] Starting Optimization
I0426 20:50:04.833890 31679 solver.cpp:273] Solving LeNet
I0426 20:50:04.833894 31679 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:04.835955 31679 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:04.843533 31679 blocking_queue.cpp:49] Waiting for data
I0426 20:50:04.913941 31686 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:04.914799 31679 solver.cpp:398]     Test net output #0: accuracy = 0.0602
I0426 20:50:04.914834 31679 solver.cpp:398]     Test net output #1: loss = 2.30333 (* 1 = 2.30333 loss)
I0426 20:50:04.919455 31679 solver.cpp:219] Iteration 0 (0 iter/s, 0.0855357s/100 iters), loss = 2.2944
I0426 20:50:04.919481 31679 solver.cpp:238]     Train net output #0: loss = 2.2944 (* 1 = 2.2944 loss)
I0426 20:50:04.919507 31679 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:05.040479 31679 solver.cpp:219] Iteration 100 (826.524 iter/s, 0.120989s/100 iters), loss = 0.332659
I0426 20:50:05.040508 31679 solver.cpp:238]     Train net output #0: loss = 0.332659 (* 1 = 0.332659 loss)
I0426 20:50:05.040514 31679 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:05.160866 31679 solver.cpp:219] Iteration 200 (830.926 iter/s, 0.120348s/100 iters), loss = 0.227818
I0426 20:50:05.160892 31679 solver.cpp:238]     Train net output #0: loss = 0.227818 (* 1 = 0.227818 loss)
I0426 20:50:05.160915 31679 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:05.280261 31679 solver.cpp:219] Iteration 300 (837.82 iter/s, 0.119357s/100 iters), loss = 0.241245
I0426 20:50:05.280284 31679 solver.cpp:238]     Train net output #0: loss = 0.241245 (* 1 = 0.241245 loss)
I0426 20:50:05.280292 31679 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:05.400144 31679 solver.cpp:219] Iteration 400 (834.398 iter/s, 0.119847s/100 iters), loss = 0.104156
I0426 20:50:05.400214 31679 solver.cpp:238]     Train net output #0: loss = 0.104156 (* 1 = 0.104156 loss)
I0426 20:50:05.400238 31679 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:05.518318 31679 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:05.583453 31686 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:05.585042 31679 solver.cpp:398]     Test net output #0: accuracy = 0.9608
I0426 20:50:05.585062 31679 solver.cpp:398]     Test net output #1: loss = 0.12776 (* 1 = 0.12776 loss)
I0426 20:50:05.586151 31679 solver.cpp:219] Iteration 500 (537.858 iter/s, 0.185923s/100 iters), loss = 0.209643
I0426 20:50:05.586174 31679 solver.cpp:238]     Train net output #0: loss = 0.209643 (* 1 = 0.209643 loss)
I0426 20:50:05.586197 31679 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:05.714534 31679 solver.cpp:219] Iteration 600 (779.131 iter/s, 0.128348s/100 iters), loss = 0.0763693
I0426 20:50:05.714560 31679 solver.cpp:238]     Train net output #0: loss = 0.0763692 (* 1 = 0.0763692 loss)
I0426 20:50:05.714584 31679 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:05.838292 31679 solver.cpp:219] Iteration 700 (808.299 iter/s, 0.123717s/100 iters), loss = 0.23549
I0426 20:50:05.838342 31679 solver.cpp:238]     Train net output #0: loss = 0.23549 (* 1 = 0.23549 loss)
I0426 20:50:05.838354 31679 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:05.966657 31679 solver.cpp:219] Iteration 800 (779.379 iter/s, 0.128307s/100 iters), loss = 0.248337
I0426 20:50:05.966687 31679 solver.cpp:238]     Train net output #0: loss = 0.248337 (* 1 = 0.248337 loss)
I0426 20:50:05.966696 31679 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:06.091014 31679 solver.cpp:219] Iteration 900 (804.404 iter/s, 0.124316s/100 iters), loss = 0.14619
I0426 20:50:06.091058 31679 solver.cpp:238]     Train net output #0: loss = 0.14619 (* 1 = 0.14619 loss)
I0426 20:50:06.091064 31679 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:06.131616 31685 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:06.210187 31679 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:06.221222 31679 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:06.226621 31679 solver.cpp:311] Iteration 1000, loss = 0.0963818
I0426 20:50:06.226639 31679 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:06.298290 31686 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:06.299175 31679 solver.cpp:398]     Test net output #0: accuracy = 0.974
I0426 20:50:06.299198 31679 solver.cpp:398]     Test net output #1: loss = 0.08494 (* 1 = 0.08494 loss)
I0426 20:50:06.299203 31679 solver.cpp:316] Optimization Done.
I0426 20:50:06.299206 31679 caffe.cpp:259] Optimization Done.
