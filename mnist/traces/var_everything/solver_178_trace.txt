I0426 20:55:21.317322   384 caffe.cpp:218] Using GPUs 0
I0426 20:55:21.354818   384 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:55:21.879111   384 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test178.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:55:21.879266   384 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test178.prototxt
I0426 20:55:21.879694   384 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:55:21.879721   384 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:55:21.879842   384 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:21.879954   384 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:21.880065   384 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:55:21.880098   384 net.cpp:86] Creating Layer mnist
I0426 20:55:21.880115   384 net.cpp:382] mnist -> data
I0426 20:55:21.880143   384 net.cpp:382] mnist -> label
I0426 20:55:21.881278   384 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:55:21.883846   384 net.cpp:124] Setting up mnist
I0426 20:55:21.883867   384 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:55:21.883875   384 net.cpp:131] Top shape: 64 (64)
I0426 20:55:21.883885   384 net.cpp:139] Memory required for data: 200960
I0426 20:55:21.883896   384 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:21.883924   384 net.cpp:86] Creating Layer conv0
I0426 20:55:21.883954   384 net.cpp:408] conv0 <- data
I0426 20:55:21.883975   384 net.cpp:382] conv0 -> conv0
I0426 20:55:22.155267   384 net.cpp:124] Setting up conv0
I0426 20:55:22.155309   384 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:55:22.155313   384 net.cpp:139] Memory required for data: 7573760
I0426 20:55:22.155328   384 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:22.155340   384 net.cpp:86] Creating Layer pool0
I0426 20:55:22.155344   384 net.cpp:408] pool0 <- conv0
I0426 20:55:22.155351   384 net.cpp:382] pool0 -> pool0
I0426 20:55:22.155414   384 net.cpp:124] Setting up pool0
I0426 20:55:22.155444   384 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:55:22.155465   384 net.cpp:139] Memory required for data: 9416960
I0426 20:55:22.155470   384 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:22.155485   384 net.cpp:86] Creating Layer conv1
I0426 20:55:22.155491   384 net.cpp:408] conv1 <- pool0
I0426 20:55:22.155499   384 net.cpp:382] conv1 -> conv1
I0426 20:55:22.157892   384 net.cpp:124] Setting up conv1
I0426 20:55:22.157922   384 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:55:22.157927   384 net.cpp:139] Memory required for data: 10236160
I0426 20:55:22.157949   384 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:22.157956   384 net.cpp:86] Creating Layer pool1
I0426 20:55:22.157960   384 net.cpp:408] pool1 <- conv1
I0426 20:55:22.157965   384 net.cpp:382] pool1 -> pool1
I0426 20:55:22.158012   384 net.cpp:124] Setting up pool1
I0426 20:55:22.158051   384 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:55:22.158056   384 net.cpp:139] Memory required for data: 10440960
I0426 20:55:22.158061   384 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:22.158077   384 net.cpp:86] Creating Layer ip1
I0426 20:55:22.158083   384 net.cpp:408] ip1 <- pool1
I0426 20:55:22.158092   384 net.cpp:382] ip1 -> ip1
I0426 20:55:22.160331   384 net.cpp:124] Setting up ip1
I0426 20:55:22.160344   384 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:22.160363   384 net.cpp:139] Memory required for data: 10517760
I0426 20:55:22.160372   384 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:22.160377   384 net.cpp:86] Creating Layer relu1
I0426 20:55:22.160382   384 net.cpp:408] relu1 <- ip1
I0426 20:55:22.160385   384 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:22.160614   384 net.cpp:124] Setting up relu1
I0426 20:55:22.160624   384 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:55:22.160627   384 net.cpp:139] Memory required for data: 10594560
I0426 20:55:22.160631   384 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:22.160641   384 net.cpp:86] Creating Layer ip2
I0426 20:55:22.160647   384 net.cpp:408] ip2 <- ip1
I0426 20:55:22.160656   384 net.cpp:382] ip2 -> ip2
I0426 20:55:22.161033   384 net.cpp:124] Setting up ip2
I0426 20:55:22.161043   384 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:22.161063   384 net.cpp:139] Memory required for data: 10620160
I0426 20:55:22.161069   384 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:22.161077   384 net.cpp:86] Creating Layer relu2
I0426 20:55:22.161079   384 net.cpp:408] relu2 <- ip2
I0426 20:55:22.161084   384 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:22.161952   384 net.cpp:124] Setting up relu2
I0426 20:55:22.161981   384 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:55:22.161985   384 net.cpp:139] Memory required for data: 10645760
I0426 20:55:22.161988   384 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:22.161995   384 net.cpp:86] Creating Layer ip3
I0426 20:55:22.162014   384 net.cpp:408] ip3 <- ip2
I0426 20:55:22.162019   384 net.cpp:382] ip3 -> ip3
I0426 20:55:22.162147   384 net.cpp:124] Setting up ip3
I0426 20:55:22.162158   384 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:22.162161   384 net.cpp:139] Memory required for data: 10648320
I0426 20:55:22.162171   384 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:22.162179   384 net.cpp:86] Creating Layer relu3
I0426 20:55:22.162184   384 net.cpp:408] relu3 <- ip3
I0426 20:55:22.162191   384 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:22.162369   384 net.cpp:124] Setting up relu3
I0426 20:55:22.162379   384 net.cpp:131] Top shape: 64 10 (640)
I0426 20:55:22.162382   384 net.cpp:139] Memory required for data: 10650880
I0426 20:55:22.162386   384 layer_factory.hpp:77] Creating layer loss
I0426 20:55:22.162400   384 net.cpp:86] Creating Layer loss
I0426 20:55:22.162406   384 net.cpp:408] loss <- ip3
I0426 20:55:22.162413   384 net.cpp:408] loss <- label
I0426 20:55:22.162420   384 net.cpp:382] loss -> loss
I0426 20:55:22.162444   384 layer_factory.hpp:77] Creating layer loss
I0426 20:55:22.162695   384 net.cpp:124] Setting up loss
I0426 20:55:22.162706   384 net.cpp:131] Top shape: (1)
I0426 20:55:22.162710   384 net.cpp:134]     with loss weight 1
I0426 20:55:22.162729   384 net.cpp:139] Memory required for data: 10650884
I0426 20:55:22.162734   384 net.cpp:200] loss needs backward computation.
I0426 20:55:22.162739   384 net.cpp:200] relu3 needs backward computation.
I0426 20:55:22.162744   384 net.cpp:200] ip3 needs backward computation.
I0426 20:55:22.162748   384 net.cpp:200] relu2 needs backward computation.
I0426 20:55:22.162752   384 net.cpp:200] ip2 needs backward computation.
I0426 20:55:22.162756   384 net.cpp:200] relu1 needs backward computation.
I0426 20:55:22.162761   384 net.cpp:200] ip1 needs backward computation.
I0426 20:55:22.162765   384 net.cpp:200] pool1 needs backward computation.
I0426 20:55:22.162770   384 net.cpp:200] conv1 needs backward computation.
I0426 20:55:22.162775   384 net.cpp:200] pool0 needs backward computation.
I0426 20:55:22.162781   384 net.cpp:200] conv0 needs backward computation.
I0426 20:55:22.162801   384 net.cpp:202] mnist does not need backward computation.
I0426 20:55:22.162806   384 net.cpp:244] This network produces output loss
I0426 20:55:22.162822   384 net.cpp:257] Network initialization done.
I0426 20:55:22.163187   384 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test178.prototxt
I0426 20:55:22.163233   384 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:55:22.163337   384 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:55:22.163450   384 layer_factory.hpp:77] Creating layer mnist
I0426 20:55:22.163506   384 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:55:22.163525   384 net.cpp:86] Creating Layer mnist
I0426 20:55:22.163533   384 net.cpp:382] mnist -> data
I0426 20:55:22.163544   384 net.cpp:382] mnist -> label
I0426 20:55:22.163663   384 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:55:22.166082   384 net.cpp:124] Setting up mnist
I0426 20:55:22.166122   384 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:55:22.166127   384 net.cpp:131] Top shape: 100 (100)
I0426 20:55:22.166131   384 net.cpp:139] Memory required for data: 314000
I0426 20:55:22.166133   384 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:55:22.166157   384 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:55:22.166162   384 net.cpp:408] label_mnist_1_split <- label
I0426 20:55:22.166172   384 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:55:22.166182   384 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:55:22.166285   384 net.cpp:124] Setting up label_mnist_1_split
I0426 20:55:22.166295   384 net.cpp:131] Top shape: 100 (100)
I0426 20:55:22.166298   384 net.cpp:131] Top shape: 100 (100)
I0426 20:55:22.166302   384 net.cpp:139] Memory required for data: 314800
I0426 20:55:22.166307   384 layer_factory.hpp:77] Creating layer conv0
I0426 20:55:22.166321   384 net.cpp:86] Creating Layer conv0
I0426 20:55:22.166327   384 net.cpp:408] conv0 <- data
I0426 20:55:22.166335   384 net.cpp:382] conv0 -> conv0
I0426 20:55:22.168025   384 net.cpp:124] Setting up conv0
I0426 20:55:22.168056   384 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:55:22.168058   384 net.cpp:139] Memory required for data: 11834800
I0426 20:55:22.168067   384 layer_factory.hpp:77] Creating layer pool0
I0426 20:55:22.168076   384 net.cpp:86] Creating Layer pool0
I0426 20:55:22.168078   384 net.cpp:408] pool0 <- conv0
I0426 20:55:22.168082   384 net.cpp:382] pool0 -> pool0
I0426 20:55:22.168134   384 net.cpp:124] Setting up pool0
I0426 20:55:22.168145   384 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:55:22.168150   384 net.cpp:139] Memory required for data: 14714800
I0426 20:55:22.168154   384 layer_factory.hpp:77] Creating layer conv1
I0426 20:55:22.168169   384 net.cpp:86] Creating Layer conv1
I0426 20:55:22.168174   384 net.cpp:408] conv1 <- pool0
I0426 20:55:22.168185   384 net.cpp:382] conv1 -> conv1
I0426 20:55:22.170372   384 net.cpp:124] Setting up conv1
I0426 20:55:22.170400   384 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:55:22.170404   384 net.cpp:139] Memory required for data: 15994800
I0426 20:55:22.170415   384 layer_factory.hpp:77] Creating layer pool1
I0426 20:55:22.170423   384 net.cpp:86] Creating Layer pool1
I0426 20:55:22.170426   384 net.cpp:408] pool1 <- conv1
I0426 20:55:22.170433   384 net.cpp:382] pool1 -> pool1
I0426 20:55:22.170500   384 net.cpp:124] Setting up pool1
I0426 20:55:22.170511   384 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:55:22.170516   384 net.cpp:139] Memory required for data: 16314800
I0426 20:55:22.170521   384 layer_factory.hpp:77] Creating layer ip1
I0426 20:55:22.170532   384 net.cpp:86] Creating Layer ip1
I0426 20:55:22.170537   384 net.cpp:408] ip1 <- pool1
I0426 20:55:22.170547   384 net.cpp:382] ip1 -> ip1
I0426 20:55:22.171973   384 net.cpp:124] Setting up ip1
I0426 20:55:22.171994   384 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:22.172013   384 net.cpp:139] Memory required for data: 16434800
I0426 20:55:22.172020   384 layer_factory.hpp:77] Creating layer relu1
I0426 20:55:22.172027   384 net.cpp:86] Creating Layer relu1
I0426 20:55:22.172031   384 net.cpp:408] relu1 <- ip1
I0426 20:55:22.172036   384 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:55:22.172272   384 net.cpp:124] Setting up relu1
I0426 20:55:22.172283   384 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:55:22.172286   384 net.cpp:139] Memory required for data: 16554800
I0426 20:55:22.172289   384 layer_factory.hpp:77] Creating layer ip2
I0426 20:55:22.172300   384 net.cpp:86] Creating Layer ip2
I0426 20:55:22.172307   384 net.cpp:408] ip2 <- ip1
I0426 20:55:22.172315   384 net.cpp:382] ip2 -> ip2
I0426 20:55:22.172605   384 net.cpp:124] Setting up ip2
I0426 20:55:22.172613   384 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:22.172617   384 net.cpp:139] Memory required for data: 16594800
I0426 20:55:22.172622   384 layer_factory.hpp:77] Creating layer relu2
I0426 20:55:22.172628   384 net.cpp:86] Creating Layer relu2
I0426 20:55:22.172633   384 net.cpp:408] relu2 <- ip2
I0426 20:55:22.172641   384 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:55:22.172863   384 net.cpp:124] Setting up relu2
I0426 20:55:22.172875   384 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:55:22.172878   384 net.cpp:139] Memory required for data: 16634800
I0426 20:55:22.172883   384 layer_factory.hpp:77] Creating layer ip3
I0426 20:55:22.172891   384 net.cpp:86] Creating Layer ip3
I0426 20:55:22.172897   384 net.cpp:408] ip3 <- ip2
I0426 20:55:22.172909   384 net.cpp:382] ip3 -> ip3
I0426 20:55:22.173054   384 net.cpp:124] Setting up ip3
I0426 20:55:22.173063   384 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:22.173066   384 net.cpp:139] Memory required for data: 16638800
I0426 20:55:22.173076   384 layer_factory.hpp:77] Creating layer relu3
I0426 20:55:22.173087   384 net.cpp:86] Creating Layer relu3
I0426 20:55:22.173094   384 net.cpp:408] relu3 <- ip3
I0426 20:55:22.173101   384 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:55:22.173981   384 net.cpp:124] Setting up relu3
I0426 20:55:22.173993   384 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:22.174012   384 net.cpp:139] Memory required for data: 16642800
I0426 20:55:22.174015   384 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:55:22.174021   384 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:55:22.174024   384 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:55:22.174031   384 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:55:22.174037   384 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:55:22.174104   384 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:55:22.174114   384 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:22.174120   384 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:55:22.174125   384 net.cpp:139] Memory required for data: 16650800
I0426 20:55:22.174129   384 layer_factory.hpp:77] Creating layer accuracy
I0426 20:55:22.174136   384 net.cpp:86] Creating Layer accuracy
I0426 20:55:22.174142   384 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:55:22.174149   384 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:55:22.174157   384 net.cpp:382] accuracy -> accuracy
I0426 20:55:22.174167   384 net.cpp:124] Setting up accuracy
I0426 20:55:22.174175   384 net.cpp:131] Top shape: (1)
I0426 20:55:22.174180   384 net.cpp:139] Memory required for data: 16650804
I0426 20:55:22.174185   384 layer_factory.hpp:77] Creating layer loss
I0426 20:55:22.174190   384 net.cpp:86] Creating Layer loss
I0426 20:55:22.174196   384 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:55:22.174201   384 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:55:22.174208   384 net.cpp:382] loss -> loss
I0426 20:55:22.174217   384 layer_factory.hpp:77] Creating layer loss
I0426 20:55:22.174470   384 net.cpp:124] Setting up loss
I0426 20:55:22.174484   384 net.cpp:131] Top shape: (1)
I0426 20:55:22.174489   384 net.cpp:134]     with loss weight 1
I0426 20:55:22.174510   384 net.cpp:139] Memory required for data: 16650808
I0426 20:55:22.174516   384 net.cpp:200] loss needs backward computation.
I0426 20:55:22.174522   384 net.cpp:202] accuracy does not need backward computation.
I0426 20:55:22.174527   384 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:55:22.174532   384 net.cpp:200] relu3 needs backward computation.
I0426 20:55:22.174536   384 net.cpp:200] ip3 needs backward computation.
I0426 20:55:22.174541   384 net.cpp:200] relu2 needs backward computation.
I0426 20:55:22.174546   384 net.cpp:200] ip2 needs backward computation.
I0426 20:55:22.174551   384 net.cpp:200] relu1 needs backward computation.
I0426 20:55:22.174554   384 net.cpp:200] ip1 needs backward computation.
I0426 20:55:22.174558   384 net.cpp:200] pool1 needs backward computation.
I0426 20:55:22.174563   384 net.cpp:200] conv1 needs backward computation.
I0426 20:55:22.174568   384 net.cpp:200] pool0 needs backward computation.
I0426 20:55:22.174572   384 net.cpp:200] conv0 needs backward computation.
I0426 20:55:22.174578   384 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:55:22.174583   384 net.cpp:202] mnist does not need backward computation.
I0426 20:55:22.174588   384 net.cpp:244] This network produces output accuracy
I0426 20:55:22.174593   384 net.cpp:244] This network produces output loss
I0426 20:55:22.174609   384 net.cpp:257] Network initialization done.
I0426 20:55:22.174669   384 solver.cpp:56] Solver scaffolding done.
I0426 20:55:22.175048   384 caffe.cpp:248] Starting Optimization
I0426 20:55:22.175056   384 solver.cpp:273] Solving LeNet
I0426 20:55:22.175060   384 solver.cpp:274] Learning Rate Policy: inv
I0426 20:55:22.176554   384 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:55:22.186626   384 blocking_queue.cpp:49] Waiting for data
I0426 20:55:22.260828   391 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:22.262115   384 solver.cpp:398]     Test net output #0: accuracy = 0.1159
I0426 20:55:22.262135   384 solver.cpp:398]     Test net output #1: loss = 2.30848 (* 1 = 2.30848 loss)
I0426 20:55:22.267982   384 solver.cpp:219] Iteration 0 (0 iter/s, 0.0928797s/100 iters), loss = 2.2937
I0426 20:55:22.268005   384 solver.cpp:238]     Train net output #0: loss = 2.2937 (* 1 = 2.2937 loss)
I0426 20:55:22.268016   384 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:55:22.446388   384 solver.cpp:219] Iteration 100 (560.689 iter/s, 0.178352s/100 iters), loss = 0.163617
I0426 20:55:22.446429   384 solver.cpp:238]     Train net output #0: loss = 0.163617 (* 1 = 0.163617 loss)
I0426 20:55:22.446436   384 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:55:22.622016   384 solver.cpp:219] Iteration 200 (569.514 iter/s, 0.175588s/100 iters), loss = 0.149828
I0426 20:55:22.622041   384 solver.cpp:238]     Train net output #0: loss = 0.149828 (* 1 = 0.149828 loss)
I0426 20:55:22.622047   384 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:55:22.796985   384 solver.cpp:219] Iteration 300 (571.658 iter/s, 0.17493s/100 iters), loss = 0.205616
I0426 20:55:22.797013   384 solver.cpp:238]     Train net output #0: loss = 0.205616 (* 1 = 0.205616 loss)
I0426 20:55:22.797019   384 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:55:22.971992   384 solver.cpp:219] Iteration 400 (571.54 iter/s, 0.174966s/100 iters), loss = 0.0934995
I0426 20:55:22.972031   384 solver.cpp:238]     Train net output #0: loss = 0.0934995 (* 1 = 0.0934995 loss)
I0426 20:55:22.972038   384 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:55:23.145658   384 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:55:23.225756   391 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:23.228482   384 solver.cpp:398]     Test net output #0: accuracy = 0.9729
I0426 20:55:23.228518   384 solver.cpp:398]     Test net output #1: loss = 0.0848041 (* 1 = 0.0848041 loss)
I0426 20:55:23.230128   384 solver.cpp:219] Iteration 500 (387.457 iter/s, 0.258093s/100 iters), loss = 0.119995
I0426 20:55:23.230181   384 solver.cpp:238]     Train net output #0: loss = 0.119995 (* 1 = 0.119995 loss)
I0426 20:55:23.230188   384 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:55:23.403008   384 solver.cpp:219] Iteration 600 (578.608 iter/s, 0.172829s/100 iters), loss = 0.0868127
I0426 20:55:23.403034   384 solver.cpp:238]     Train net output #0: loss = 0.0868126 (* 1 = 0.0868126 loss)
I0426 20:55:23.403041   384 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:55:23.575331   384 solver.cpp:219] Iteration 700 (580.444 iter/s, 0.172282s/100 iters), loss = 0.121981
I0426 20:55:23.575372   384 solver.cpp:238]     Train net output #0: loss = 0.121981 (* 1 = 0.121981 loss)
I0426 20:55:23.575379   384 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:55:23.749074   384 solver.cpp:219] Iteration 800 (575.706 iter/s, 0.1737s/100 iters), loss = 0.14805
I0426 20:55:23.749104   384 solver.cpp:238]     Train net output #0: loss = 0.14805 (* 1 = 0.14805 loss)
I0426 20:55:23.749112   384 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:55:23.924784   384 solver.cpp:219] Iteration 900 (569.258 iter/s, 0.175667s/100 iters), loss = 0.143255
I0426 20:55:23.924814   384 solver.cpp:238]     Train net output #0: loss = 0.143255 (* 1 = 0.143255 loss)
I0426 20:55:23.924836   384 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:55:23.981422   390 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:24.093688   384 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:55:24.100096   384 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:55:24.102959   384 solver.cpp:311] Iteration 1000, loss = 0.0968637
I0426 20:55:24.102978   384 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:55:24.186743   391 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:55:24.187844   384 solver.cpp:398]     Test net output #0: accuracy = 0.9817
I0426 20:55:24.187865   384 solver.cpp:398]     Test net output #1: loss = 0.0568951 (* 1 = 0.0568951 loss)
I0426 20:55:24.187871   384 solver.cpp:316] Optimization Done.
I0426 20:55:24.187873   384 caffe.cpp:259] Optimization Done.
