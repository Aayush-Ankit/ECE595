I0426 20:50:21.954458 31737 caffe.cpp:218] Using GPUs 0
I0426 20:50:21.983767 31737 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:22.438472 31737 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test58.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:22.438635 31737 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test58.prototxt
I0426 20:50:22.438953 31737 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:22.438968 31737 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:22.439040 31737 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:22.439119 31737 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:22.439203 31737 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:22.439221 31737 net.cpp:86] Creating Layer mnist
I0426 20:50:22.439229 31737 net.cpp:382] mnist -> data
I0426 20:50:22.439247 31737 net.cpp:382] mnist -> label
I0426 20:50:22.440217 31737 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:22.442497 31737 net.cpp:124] Setting up mnist
I0426 20:50:22.442541 31737 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:22.442546 31737 net.cpp:131] Top shape: 64 (64)
I0426 20:50:22.442549 31737 net.cpp:139] Memory required for data: 200960
I0426 20:50:22.442554 31737 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:22.442569 31737 net.cpp:86] Creating Layer conv0
I0426 20:50:22.442574 31737 net.cpp:408] conv0 <- data
I0426 20:50:22.442586 31737 net.cpp:382] conv0 -> conv0
I0426 20:50:22.679147 31737 net.cpp:124] Setting up conv0
I0426 20:50:22.679189 31737 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:22.679193 31737 net.cpp:139] Memory required for data: 1675520
I0426 20:50:22.679226 31737 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:22.679239 31737 net.cpp:86] Creating Layer pool0
I0426 20:50:22.679244 31737 net.cpp:408] pool0 <- conv0
I0426 20:50:22.679249 31737 net.cpp:382] pool0 -> pool0
I0426 20:50:22.679293 31737 net.cpp:124] Setting up pool0
I0426 20:50:22.679298 31737 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:22.679301 31737 net.cpp:139] Memory required for data: 2044160
I0426 20:50:22.679304 31737 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:22.679314 31737 net.cpp:86] Creating Layer conv1
I0426 20:50:22.679317 31737 net.cpp:408] conv1 <- pool0
I0426 20:50:22.679322 31737 net.cpp:382] conv1 -> conv1
I0426 20:50:22.681977 31737 net.cpp:124] Setting up conv1
I0426 20:50:22.681990 31737 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:50:22.681994 31737 net.cpp:139] Memory required for data: 2208000
I0426 20:50:22.682003 31737 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:22.682009 31737 net.cpp:86] Creating Layer pool1
I0426 20:50:22.682013 31737 net.cpp:408] pool1 <- conv1
I0426 20:50:22.682018 31737 net.cpp:382] pool1 -> pool1
I0426 20:50:22.682066 31737 net.cpp:124] Setting up pool1
I0426 20:50:22.682072 31737 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:50:22.682075 31737 net.cpp:139] Memory required for data: 2248960
I0426 20:50:22.682077 31737 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:22.682083 31737 net.cpp:86] Creating Layer ip1
I0426 20:50:22.682086 31737 net.cpp:408] ip1 <- pool1
I0426 20:50:22.682091 31737 net.cpp:382] ip1 -> ip1
I0426 20:50:22.683056 31737 net.cpp:124] Setting up ip1
I0426 20:50:22.683068 31737 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:22.683071 31737 net.cpp:139] Memory required for data: 2274560
I0426 20:50:22.683079 31737 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:22.683085 31737 net.cpp:86] Creating Layer relu1
I0426 20:50:22.683089 31737 net.cpp:408] relu1 <- ip1
I0426 20:50:22.683092 31737 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:22.683249 31737 net.cpp:124] Setting up relu1
I0426 20:50:22.683259 31737 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:22.683261 31737 net.cpp:139] Memory required for data: 2300160
I0426 20:50:22.683264 31737 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:22.683270 31737 net.cpp:86] Creating Layer ip2
I0426 20:50:22.683274 31737 net.cpp:408] ip2 <- ip1
I0426 20:50:22.683279 31737 net.cpp:382] ip2 -> ip2
I0426 20:50:22.683370 31737 net.cpp:124] Setting up ip2
I0426 20:50:22.683377 31737 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:22.683380 31737 net.cpp:139] Memory required for data: 2302720
I0426 20:50:22.683384 31737 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:22.683390 31737 net.cpp:86] Creating Layer relu2
I0426 20:50:22.683393 31737 net.cpp:408] relu2 <- ip2
I0426 20:50:22.683398 31737 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:22.684175 31737 net.cpp:124] Setting up relu2
I0426 20:50:22.684187 31737 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:22.684190 31737 net.cpp:139] Memory required for data: 2305280
I0426 20:50:22.684195 31737 layer_factory.hpp:77] Creating layer loss
I0426 20:50:22.684201 31737 net.cpp:86] Creating Layer loss
I0426 20:50:22.684203 31737 net.cpp:408] loss <- ip2
I0426 20:50:22.684207 31737 net.cpp:408] loss <- label
I0426 20:50:22.684213 31737 net.cpp:382] loss -> loss
I0426 20:50:22.684231 31737 layer_factory.hpp:77] Creating layer loss
I0426 20:50:22.684451 31737 net.cpp:124] Setting up loss
I0426 20:50:22.684460 31737 net.cpp:131] Top shape: (1)
I0426 20:50:22.684464 31737 net.cpp:134]     with loss weight 1
I0426 20:50:22.684478 31737 net.cpp:139] Memory required for data: 2305284
I0426 20:50:22.684481 31737 net.cpp:200] loss needs backward computation.
I0426 20:50:22.684485 31737 net.cpp:200] relu2 needs backward computation.
I0426 20:50:22.684487 31737 net.cpp:200] ip2 needs backward computation.
I0426 20:50:22.684490 31737 net.cpp:200] relu1 needs backward computation.
I0426 20:50:22.684509 31737 net.cpp:200] ip1 needs backward computation.
I0426 20:50:22.684522 31737 net.cpp:200] pool1 needs backward computation.
I0426 20:50:22.684525 31737 net.cpp:200] conv1 needs backward computation.
I0426 20:50:22.684528 31737 net.cpp:200] pool0 needs backward computation.
I0426 20:50:22.684531 31737 net.cpp:200] conv0 needs backward computation.
I0426 20:50:22.684535 31737 net.cpp:202] mnist does not need backward computation.
I0426 20:50:22.684537 31737 net.cpp:244] This network produces output loss
I0426 20:50:22.684546 31737 net.cpp:257] Network initialization done.
I0426 20:50:22.684860 31737 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test58.prototxt
I0426 20:50:22.684901 31737 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:22.684983 31737 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:22.685044 31737 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:22.685086 31737 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:22.685098 31737 net.cpp:86] Creating Layer mnist
I0426 20:50:22.685102 31737 net.cpp:382] mnist -> data
I0426 20:50:22.685109 31737 net.cpp:382] mnist -> label
I0426 20:50:22.685222 31737 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:22.687369 31737 net.cpp:124] Setting up mnist
I0426 20:50:22.687412 31737 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:22.687417 31737 net.cpp:131] Top shape: 100 (100)
I0426 20:50:22.687420 31737 net.cpp:139] Memory required for data: 314000
I0426 20:50:22.687424 31737 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:22.687438 31737 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:22.687443 31737 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:22.687448 31737 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:22.687469 31737 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:22.687527 31737 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:22.687566 31737 net.cpp:131] Top shape: 100 (100)
I0426 20:50:22.687572 31737 net.cpp:131] Top shape: 100 (100)
I0426 20:50:22.687573 31737 net.cpp:139] Memory required for data: 314800
I0426 20:50:22.687577 31737 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:22.687585 31737 net.cpp:86] Creating Layer conv0
I0426 20:50:22.687588 31737 net.cpp:408] conv0 <- data
I0426 20:50:22.687593 31737 net.cpp:382] conv0 -> conv0
I0426 20:50:22.689386 31737 net.cpp:124] Setting up conv0
I0426 20:50:22.689411 31737 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:22.689414 31737 net.cpp:139] Memory required for data: 2618800
I0426 20:50:22.689424 31737 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:22.689429 31737 net.cpp:86] Creating Layer pool0
I0426 20:50:22.689434 31737 net.cpp:408] pool0 <- conv0
I0426 20:50:22.689437 31737 net.cpp:382] pool0 -> pool0
I0426 20:50:22.689487 31737 net.cpp:124] Setting up pool0
I0426 20:50:22.689492 31737 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:22.689496 31737 net.cpp:139] Memory required for data: 3194800
I0426 20:50:22.689498 31737 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:22.689507 31737 net.cpp:86] Creating Layer conv1
I0426 20:50:22.689509 31737 net.cpp:408] conv1 <- pool0
I0426 20:50:22.689514 31737 net.cpp:382] conv1 -> conv1
I0426 20:50:22.691627 31737 net.cpp:124] Setting up conv1
I0426 20:50:22.691639 31737 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:50:22.691658 31737 net.cpp:139] Memory required for data: 3450800
I0426 20:50:22.691666 31737 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:22.691673 31737 net.cpp:86] Creating Layer pool1
I0426 20:50:22.691676 31737 net.cpp:408] pool1 <- conv1
I0426 20:50:22.691681 31737 net.cpp:382] pool1 -> pool1
I0426 20:50:22.691735 31737 net.cpp:124] Setting up pool1
I0426 20:50:22.691740 31737 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:50:22.691742 31737 net.cpp:139] Memory required for data: 3514800
I0426 20:50:22.691745 31737 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:22.691751 31737 net.cpp:86] Creating Layer ip1
I0426 20:50:22.691754 31737 net.cpp:408] ip1 <- pool1
I0426 20:50:22.691759 31737 net.cpp:382] ip1 -> ip1
I0426 20:50:22.691969 31737 net.cpp:124] Setting up ip1
I0426 20:50:22.691977 31737 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:22.691982 31737 net.cpp:139] Memory required for data: 3554800
I0426 20:50:22.691989 31737 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:22.691995 31737 net.cpp:86] Creating Layer relu1
I0426 20:50:22.692008 31737 net.cpp:408] relu1 <- ip1
I0426 20:50:22.692013 31737 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:22.692222 31737 net.cpp:124] Setting up relu1
I0426 20:50:22.692230 31737 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:22.692234 31737 net.cpp:139] Memory required for data: 3594800
I0426 20:50:22.692237 31737 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:22.692245 31737 net.cpp:86] Creating Layer ip2
I0426 20:50:22.692247 31737 net.cpp:408] ip2 <- ip1
I0426 20:50:22.692252 31737 net.cpp:382] ip2 -> ip2
I0426 20:50:22.692353 31737 net.cpp:124] Setting up ip2
I0426 20:50:22.692360 31737 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:22.692363 31737 net.cpp:139] Memory required for data: 3598800
I0426 20:50:22.692368 31737 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:22.692373 31737 net.cpp:86] Creating Layer relu2
I0426 20:50:22.692376 31737 net.cpp:408] relu2 <- ip2
I0426 20:50:22.692381 31737 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:22.692580 31737 net.cpp:124] Setting up relu2
I0426 20:50:22.692589 31737 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:22.692591 31737 net.cpp:139] Memory required for data: 3602800
I0426 20:50:22.692595 31737 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:50:22.692600 31737 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:50:22.692603 31737 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:50:22.692607 31737 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:50:22.692625 31737 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:50:22.692663 31737 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:50:22.692669 31737 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:22.692672 31737 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:22.692675 31737 net.cpp:139] Memory required for data: 3610800
I0426 20:50:22.692678 31737 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:22.692684 31737 net.cpp:86] Creating Layer accuracy
I0426 20:50:22.692687 31737 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:50:22.692692 31737 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:22.692695 31737 net.cpp:382] accuracy -> accuracy
I0426 20:50:22.692703 31737 net.cpp:124] Setting up accuracy
I0426 20:50:22.692705 31737 net.cpp:131] Top shape: (1)
I0426 20:50:22.692708 31737 net.cpp:139] Memory required for data: 3610804
I0426 20:50:22.692711 31737 layer_factory.hpp:77] Creating layer loss
I0426 20:50:22.692715 31737 net.cpp:86] Creating Layer loss
I0426 20:50:22.692718 31737 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:50:22.692723 31737 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:22.692726 31737 net.cpp:382] loss -> loss
I0426 20:50:22.692733 31737 layer_factory.hpp:77] Creating layer loss
I0426 20:50:22.693017 31737 net.cpp:124] Setting up loss
I0426 20:50:22.693027 31737 net.cpp:131] Top shape: (1)
I0426 20:50:22.693030 31737 net.cpp:134]     with loss weight 1
I0426 20:50:22.693037 31737 net.cpp:139] Memory required for data: 3610808
I0426 20:50:22.693042 31737 net.cpp:200] loss needs backward computation.
I0426 20:50:22.693045 31737 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:22.693049 31737 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:50:22.693053 31737 net.cpp:200] relu2 needs backward computation.
I0426 20:50:22.693055 31737 net.cpp:200] ip2 needs backward computation.
I0426 20:50:22.693059 31737 net.cpp:200] relu1 needs backward computation.
I0426 20:50:22.693063 31737 net.cpp:200] ip1 needs backward computation.
I0426 20:50:22.693073 31737 net.cpp:200] pool1 needs backward computation.
I0426 20:50:22.693076 31737 net.cpp:200] conv1 needs backward computation.
I0426 20:50:22.693080 31737 net.cpp:200] pool0 needs backward computation.
I0426 20:50:22.693084 31737 net.cpp:200] conv0 needs backward computation.
I0426 20:50:22.693087 31737 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:22.693091 31737 net.cpp:202] mnist does not need backward computation.
I0426 20:50:22.693094 31737 net.cpp:244] This network produces output accuracy
I0426 20:50:22.693097 31737 net.cpp:244] This network produces output loss
I0426 20:50:22.693107 31737 net.cpp:257] Network initialization done.
I0426 20:50:22.693173 31737 solver.cpp:56] Solver scaffolding done.
I0426 20:50:22.693444 31737 caffe.cpp:248] Starting Optimization
I0426 20:50:22.693450 31737 solver.cpp:273] Solving LeNet
I0426 20:50:22.693454 31737 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:22.694237 31737 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:22.697433 31737 blocking_queue.cpp:49] Waiting for data
I0426 20:50:22.771697 31744 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:22.772265 31737 solver.cpp:398]     Test net output #0: accuracy = 0.1187
I0426 20:50:22.772300 31737 solver.cpp:398]     Test net output #1: loss = 2.32494 (* 1 = 2.32494 loss)
I0426 20:50:22.774651 31737 solver.cpp:219] Iteration 0 (-8.90237e-31 iter/s, 0.0811725s/100 iters), loss = 2.33816
I0426 20:50:22.774695 31737 solver.cpp:238]     Train net output #0: loss = 2.33816 (* 1 = 2.33816 loss)
I0426 20:50:22.774706 31737 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:22.867153 31737 solver.cpp:219] Iteration 100 (1081.75 iter/s, 0.0924425s/100 iters), loss = 1.60625
I0426 20:50:22.867208 31737 solver.cpp:238]     Train net output #0: loss = 1.60625 (* 1 = 1.60625 loss)
I0426 20:50:22.867234 31737 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:22.956214 31737 solver.cpp:219] Iteration 200 (1123.58 iter/s, 0.089001s/100 iters), loss = 1.0725
I0426 20:50:22.956248 31737 solver.cpp:238]     Train net output #0: loss = 1.0725 (* 1 = 1.0725 loss)
I0426 20:50:22.956255 31737 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:23.034104 31737 solver.cpp:219] Iteration 300 (1284.56 iter/s, 0.0778477s/100 iters), loss = 0.919633
I0426 20:50:23.034133 31737 solver.cpp:238]     Train net output #0: loss = 0.919633 (* 1 = 0.919633 loss)
I0426 20:50:23.034142 31737 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:23.111851 31737 solver.cpp:219] Iteration 400 (1286.88 iter/s, 0.0777074s/100 iters), loss = 1.34116
I0426 20:50:23.111881 31737 solver.cpp:238]     Train net output #0: loss = 1.34116 (* 1 = 1.34116 loss)
I0426 20:50:23.111889 31737 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:23.188412 31737 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:23.263792 31744 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:23.264333 31737 solver.cpp:398]     Test net output #0: accuracy = 0.6431
I0426 20:50:23.264358 31737 solver.cpp:398]     Test net output #1: loss = 1.08494 (* 1 = 1.08494 loss)
I0426 20:50:23.265238 31737 solver.cpp:219] Iteration 500 (652.133 iter/s, 0.153343s/100 iters), loss = 1.17236
I0426 20:50:23.265265 31737 solver.cpp:238]     Train net output #0: loss = 1.17236 (* 1 = 1.17236 loss)
I0426 20:50:23.265275 31737 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:23.351832 31737 solver.cpp:219] Iteration 600 (1155.37 iter/s, 0.0865527s/100 iters), loss = 1.07891
I0426 20:50:23.351881 31737 solver.cpp:238]     Train net output #0: loss = 1.07891 (* 1 = 1.07891 loss)
I0426 20:50:23.351893 31737 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:23.437237 31737 solver.cpp:219] Iteration 700 (1171.67 iter/s, 0.0853484s/100 iters), loss = 0.86959
I0426 20:50:23.437268 31737 solver.cpp:238]     Train net output #0: loss = 0.86959 (* 1 = 0.86959 loss)
I0426 20:50:23.437276 31737 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:23.530277 31737 solver.cpp:219] Iteration 800 (1075.31 iter/s, 0.0929966s/100 iters), loss = 0.774982
I0426 20:50:23.530316 31737 solver.cpp:238]     Train net output #0: loss = 0.774982 (* 1 = 0.774982 loss)
I0426 20:50:23.530326 31737 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:23.609467 31737 solver.cpp:219] Iteration 900 (1263.52 iter/s, 0.0791439s/100 iters), loss = 0.706748
I0426 20:50:23.609498 31737 solver.cpp:238]     Train net output #0: loss = 0.706748 (* 1 = 0.706748 loss)
I0426 20:50:23.609505 31737 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:23.635974 31743 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:23.690440 31737 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:23.691316 31737 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:23.691898 31737 solver.cpp:311] Iteration 1000, loss = 0.819366
I0426 20:50:23.691920 31737 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:23.768398 31744 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:23.768972 31737 solver.cpp:398]     Test net output #0: accuracy = 0.7618
I0426 20:50:23.769001 31737 solver.cpp:398]     Test net output #1: loss = 0.801844 (* 1 = 0.801844 loss)
I0426 20:50:23.769007 31737 solver.cpp:316] Optimization Done.
I0426 20:50:23.769013 31737 caffe.cpp:259] Optimization Done.
