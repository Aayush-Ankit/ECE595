I0426 20:51:36.165681 32015 caffe.cpp:218] Using GPUs 0
I0426 20:51:36.196650 32015 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:51:36.654402 32015 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test91.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:51:36.654558 32015 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test91.prototxt
I0426 20:51:36.654917 32015 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:51:36.654947 32015 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:51:36.655045 32015 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:51:36.655124 32015 layer_factory.hpp:77] Creating layer mnist
I0426 20:51:36.655206 32015 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:51:36.655225 32015 net.cpp:86] Creating Layer mnist
I0426 20:51:36.655232 32015 net.cpp:382] mnist -> data
I0426 20:51:36.655251 32015 net.cpp:382] mnist -> label
I0426 20:51:36.656184 32015 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:51:36.658363 32015 net.cpp:124] Setting up mnist
I0426 20:51:36.658376 32015 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:51:36.658382 32015 net.cpp:131] Top shape: 64 (64)
I0426 20:51:36.658385 32015 net.cpp:139] Memory required for data: 200960
I0426 20:51:36.658390 32015 layer_factory.hpp:77] Creating layer conv0
I0426 20:51:36.658418 32015 net.cpp:86] Creating Layer conv0
I0426 20:51:36.658433 32015 net.cpp:408] conv0 <- data
I0426 20:51:36.658444 32015 net.cpp:382] conv0 -> conv0
I0426 20:51:36.889456 32015 net.cpp:124] Setting up conv0
I0426 20:51:36.889498 32015 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:51:36.889503 32015 net.cpp:139] Memory required for data: 1675520
I0426 20:51:36.889516 32015 layer_factory.hpp:77] Creating layer pool0
I0426 20:51:36.889544 32015 net.cpp:86] Creating Layer pool0
I0426 20:51:36.889549 32015 net.cpp:408] pool0 <- conv0
I0426 20:51:36.889554 32015 net.cpp:382] pool0 -> pool0
I0426 20:51:36.889598 32015 net.cpp:124] Setting up pool0
I0426 20:51:36.889605 32015 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:51:36.889608 32015 net.cpp:139] Memory required for data: 2044160
I0426 20:51:36.889611 32015 layer_factory.hpp:77] Creating layer conv1
I0426 20:51:36.889621 32015 net.cpp:86] Creating Layer conv1
I0426 20:51:36.889626 32015 net.cpp:408] conv1 <- pool0
I0426 20:51:36.889631 32015 net.cpp:382] conv1 -> conv1
I0426 20:51:36.892364 32015 net.cpp:124] Setting up conv1
I0426 20:51:36.892379 32015 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0426 20:51:36.892381 32015 net.cpp:139] Memory required for data: 2863360
I0426 20:51:36.892390 32015 layer_factory.hpp:77] Creating layer pool1
I0426 20:51:36.892395 32015 net.cpp:86] Creating Layer pool1
I0426 20:51:36.892398 32015 net.cpp:408] pool1 <- conv1
I0426 20:51:36.892403 32015 net.cpp:382] pool1 -> pool1
I0426 20:51:36.892453 32015 net.cpp:124] Setting up pool1
I0426 20:51:36.892460 32015 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0426 20:51:36.892463 32015 net.cpp:139] Memory required for data: 3068160
I0426 20:51:36.892467 32015 layer_factory.hpp:77] Creating layer ip1
I0426 20:51:36.892472 32015 net.cpp:86] Creating Layer ip1
I0426 20:51:36.892475 32015 net.cpp:408] ip1 <- pool1
I0426 20:51:36.892479 32015 net.cpp:382] ip1 -> ip1
I0426 20:51:36.893848 32015 net.cpp:124] Setting up ip1
I0426 20:51:36.893860 32015 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:51:36.893879 32015 net.cpp:139] Memory required for data: 3093760
I0426 20:51:36.893887 32015 layer_factory.hpp:77] Creating layer relu1
I0426 20:51:36.893893 32015 net.cpp:86] Creating Layer relu1
I0426 20:51:36.893896 32015 net.cpp:408] relu1 <- ip1
I0426 20:51:36.893918 32015 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:51:36.894111 32015 net.cpp:124] Setting up relu1
I0426 20:51:36.894119 32015 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:51:36.894122 32015 net.cpp:139] Memory required for data: 3119360
I0426 20:51:36.894125 32015 layer_factory.hpp:77] Creating layer ip2
I0426 20:51:36.894131 32015 net.cpp:86] Creating Layer ip2
I0426 20:51:36.894135 32015 net.cpp:408] ip2 <- ip1
I0426 20:51:36.894140 32015 net.cpp:382] ip2 -> ip2
I0426 20:51:36.894286 32015 net.cpp:124] Setting up ip2
I0426 20:51:36.894294 32015 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:51:36.894296 32015 net.cpp:139] Memory required for data: 3144960
I0426 20:51:36.894301 32015 layer_factory.hpp:77] Creating layer relu2
I0426 20:51:36.894307 32015 net.cpp:86] Creating Layer relu2
I0426 20:51:36.894310 32015 net.cpp:408] relu2 <- ip2
I0426 20:51:36.894315 32015 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:51:36.895133 32015 net.cpp:124] Setting up relu2
I0426 20:51:36.895144 32015 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:51:36.895164 32015 net.cpp:139] Memory required for data: 3170560
I0426 20:51:36.895169 32015 layer_factory.hpp:77] Creating layer ip3
I0426 20:51:36.895190 32015 net.cpp:86] Creating Layer ip3
I0426 20:51:36.895192 32015 net.cpp:408] ip3 <- ip2
I0426 20:51:36.895197 32015 net.cpp:382] ip3 -> ip3
I0426 20:51:36.895344 32015 net.cpp:124] Setting up ip3
I0426 20:51:36.895352 32015 net.cpp:131] Top shape: 64 10 (640)
I0426 20:51:36.895355 32015 net.cpp:139] Memory required for data: 3173120
I0426 20:51:36.895362 32015 layer_factory.hpp:77] Creating layer relu3
I0426 20:51:36.895368 32015 net.cpp:86] Creating Layer relu3
I0426 20:51:36.895371 32015 net.cpp:408] relu3 <- ip3
I0426 20:51:36.895375 32015 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:51:36.895550 32015 net.cpp:124] Setting up relu3
I0426 20:51:36.895558 32015 net.cpp:131] Top shape: 64 10 (640)
I0426 20:51:36.895561 32015 net.cpp:139] Memory required for data: 3175680
I0426 20:51:36.895565 32015 layer_factory.hpp:77] Creating layer loss
I0426 20:51:36.895570 32015 net.cpp:86] Creating Layer loss
I0426 20:51:36.895572 32015 net.cpp:408] loss <- ip3
I0426 20:51:36.895576 32015 net.cpp:408] loss <- label
I0426 20:51:36.895581 32015 net.cpp:382] loss -> loss
I0426 20:51:36.895598 32015 layer_factory.hpp:77] Creating layer loss
I0426 20:51:36.895835 32015 net.cpp:124] Setting up loss
I0426 20:51:36.895844 32015 net.cpp:131] Top shape: (1)
I0426 20:51:36.895848 32015 net.cpp:134]     with loss weight 1
I0426 20:51:36.895862 32015 net.cpp:139] Memory required for data: 3175684
I0426 20:51:36.895866 32015 net.cpp:200] loss needs backward computation.
I0426 20:51:36.895869 32015 net.cpp:200] relu3 needs backward computation.
I0426 20:51:36.895872 32015 net.cpp:200] ip3 needs backward computation.
I0426 20:51:36.895875 32015 net.cpp:200] relu2 needs backward computation.
I0426 20:51:36.895879 32015 net.cpp:200] ip2 needs backward computation.
I0426 20:51:36.895880 32015 net.cpp:200] relu1 needs backward computation.
I0426 20:51:36.895884 32015 net.cpp:200] ip1 needs backward computation.
I0426 20:51:36.895886 32015 net.cpp:200] pool1 needs backward computation.
I0426 20:51:36.895889 32015 net.cpp:200] conv1 needs backward computation.
I0426 20:51:36.895892 32015 net.cpp:200] pool0 needs backward computation.
I0426 20:51:36.895895 32015 net.cpp:200] conv0 needs backward computation.
I0426 20:51:36.895900 32015 net.cpp:202] mnist does not need backward computation.
I0426 20:51:36.895901 32015 net.cpp:244] This network produces output loss
I0426 20:51:36.895910 32015 net.cpp:257] Network initialization done.
I0426 20:51:36.896293 32015 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test91.prototxt
I0426 20:51:36.896328 32015 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:51:36.896432 32015 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:51:36.896508 32015 layer_factory.hpp:77] Creating layer mnist
I0426 20:51:36.896551 32015 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:51:36.896564 32015 net.cpp:86] Creating Layer mnist
I0426 20:51:36.896569 32015 net.cpp:382] mnist -> data
I0426 20:51:36.896575 32015 net.cpp:382] mnist -> label
I0426 20:51:36.896656 32015 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:51:36.898125 32015 net.cpp:124] Setting up mnist
I0426 20:51:36.898149 32015 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:51:36.898154 32015 net.cpp:131] Top shape: 100 (100)
I0426 20:51:36.898157 32015 net.cpp:139] Memory required for data: 314000
I0426 20:51:36.898160 32015 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:51:36.898207 32015 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:51:36.898211 32015 net.cpp:408] label_mnist_1_split <- label
I0426 20:51:36.898216 32015 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:51:36.898223 32015 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:51:36.898290 32015 net.cpp:124] Setting up label_mnist_1_split
I0426 20:51:36.898298 32015 net.cpp:131] Top shape: 100 (100)
I0426 20:51:36.898303 32015 net.cpp:131] Top shape: 100 (100)
I0426 20:51:36.898306 32015 net.cpp:139] Memory required for data: 314800
I0426 20:51:36.898309 32015 layer_factory.hpp:77] Creating layer conv0
I0426 20:51:36.898317 32015 net.cpp:86] Creating Layer conv0
I0426 20:51:36.898320 32015 net.cpp:408] conv0 <- data
I0426 20:51:36.898325 32015 net.cpp:382] conv0 -> conv0
I0426 20:51:36.899945 32015 net.cpp:124] Setting up conv0
I0426 20:51:36.899957 32015 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:51:36.899960 32015 net.cpp:139] Memory required for data: 2618800
I0426 20:51:36.899968 32015 layer_factory.hpp:77] Creating layer pool0
I0426 20:51:36.899974 32015 net.cpp:86] Creating Layer pool0
I0426 20:51:36.899992 32015 net.cpp:408] pool0 <- conv0
I0426 20:51:36.899997 32015 net.cpp:382] pool0 -> pool0
I0426 20:51:36.900029 32015 net.cpp:124] Setting up pool0
I0426 20:51:36.900035 32015 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:51:36.900038 32015 net.cpp:139] Memory required for data: 3194800
I0426 20:51:36.900040 32015 layer_factory.hpp:77] Creating layer conv1
I0426 20:51:36.900048 32015 net.cpp:86] Creating Layer conv1
I0426 20:51:36.900050 32015 net.cpp:408] conv1 <- pool0
I0426 20:51:36.900055 32015 net.cpp:382] conv1 -> conv1
I0426 20:51:36.901753 32015 net.cpp:124] Setting up conv1
I0426 20:51:36.901765 32015 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0426 20:51:36.901770 32015 net.cpp:139] Memory required for data: 4474800
I0426 20:51:36.901777 32015 layer_factory.hpp:77] Creating layer pool1
I0426 20:51:36.901784 32015 net.cpp:86] Creating Layer pool1
I0426 20:51:36.901803 32015 net.cpp:408] pool1 <- conv1
I0426 20:51:36.901816 32015 net.cpp:382] pool1 -> pool1
I0426 20:51:36.901849 32015 net.cpp:124] Setting up pool1
I0426 20:51:36.901854 32015 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0426 20:51:36.901856 32015 net.cpp:139] Memory required for data: 4794800
I0426 20:51:36.901859 32015 layer_factory.hpp:77] Creating layer ip1
I0426 20:51:36.901865 32015 net.cpp:86] Creating Layer ip1
I0426 20:51:36.901867 32015 net.cpp:408] ip1 <- pool1
I0426 20:51:36.901871 32015 net.cpp:382] ip1 -> ip1
I0426 20:51:36.902423 32015 net.cpp:124] Setting up ip1
I0426 20:51:36.902432 32015 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:51:36.902444 32015 net.cpp:139] Memory required for data: 4834800
I0426 20:51:36.902451 32015 layer_factory.hpp:77] Creating layer relu1
I0426 20:51:36.902456 32015 net.cpp:86] Creating Layer relu1
I0426 20:51:36.902467 32015 net.cpp:408] relu1 <- ip1
I0426 20:51:36.902472 32015 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:51:36.902642 32015 net.cpp:124] Setting up relu1
I0426 20:51:36.902650 32015 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:51:36.902654 32015 net.cpp:139] Memory required for data: 4874800
I0426 20:51:36.902665 32015 layer_factory.hpp:77] Creating layer ip2
I0426 20:51:36.902673 32015 net.cpp:86] Creating Layer ip2
I0426 20:51:36.902675 32015 net.cpp:408] ip2 <- ip1
I0426 20:51:36.902680 32015 net.cpp:382] ip2 -> ip2
I0426 20:51:36.902869 32015 net.cpp:124] Setting up ip2
I0426 20:51:36.902878 32015 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:51:36.902880 32015 net.cpp:139] Memory required for data: 4914800
I0426 20:51:36.902886 32015 layer_factory.hpp:77] Creating layer relu2
I0426 20:51:36.902890 32015 net.cpp:86] Creating Layer relu2
I0426 20:51:36.902894 32015 net.cpp:408] relu2 <- ip2
I0426 20:51:36.902896 32015 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:51:36.903106 32015 net.cpp:124] Setting up relu2
I0426 20:51:36.903115 32015 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:51:36.903118 32015 net.cpp:139] Memory required for data: 4954800
I0426 20:51:36.903122 32015 layer_factory.hpp:77] Creating layer ip3
I0426 20:51:36.903127 32015 net.cpp:86] Creating Layer ip3
I0426 20:51:36.903129 32015 net.cpp:408] ip3 <- ip2
I0426 20:51:36.903134 32015 net.cpp:382] ip3 -> ip3
I0426 20:51:36.903231 32015 net.cpp:124] Setting up ip3
I0426 20:51:36.903239 32015 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:51:36.903242 32015 net.cpp:139] Memory required for data: 4958800
I0426 20:51:36.903256 32015 layer_factory.hpp:77] Creating layer relu3
I0426 20:51:36.903260 32015 net.cpp:86] Creating Layer relu3
I0426 20:51:36.903264 32015 net.cpp:408] relu3 <- ip3
I0426 20:51:36.903267 32015 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:51:36.904121 32015 net.cpp:124] Setting up relu3
I0426 20:51:36.904132 32015 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:51:36.904135 32015 net.cpp:139] Memory required for data: 4962800
I0426 20:51:36.904139 32015 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:51:36.904145 32015 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:51:36.904147 32015 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:51:36.904152 32015 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:51:36.904158 32015 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:51:36.904217 32015 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:51:36.904222 32015 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:51:36.904232 32015 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:51:36.904235 32015 net.cpp:139] Memory required for data: 4970800
I0426 20:51:36.904238 32015 layer_factory.hpp:77] Creating layer accuracy
I0426 20:51:36.904243 32015 net.cpp:86] Creating Layer accuracy
I0426 20:51:36.904247 32015 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:51:36.904250 32015 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:51:36.904255 32015 net.cpp:382] accuracy -> accuracy
I0426 20:51:36.904263 32015 net.cpp:124] Setting up accuracy
I0426 20:51:36.904265 32015 net.cpp:131] Top shape: (1)
I0426 20:51:36.904268 32015 net.cpp:139] Memory required for data: 4970804
I0426 20:51:36.904271 32015 layer_factory.hpp:77] Creating layer loss
I0426 20:51:36.904275 32015 net.cpp:86] Creating Layer loss
I0426 20:51:36.904278 32015 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:51:36.904281 32015 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:51:36.904285 32015 net.cpp:382] loss -> loss
I0426 20:51:36.904291 32015 layer_factory.hpp:77] Creating layer loss
I0426 20:51:36.904546 32015 net.cpp:124] Setting up loss
I0426 20:51:36.904561 32015 net.cpp:131] Top shape: (1)
I0426 20:51:36.904564 32015 net.cpp:134]     with loss weight 1
I0426 20:51:36.904578 32015 net.cpp:139] Memory required for data: 4970808
I0426 20:51:36.904583 32015 net.cpp:200] loss needs backward computation.
I0426 20:51:36.904595 32015 net.cpp:202] accuracy does not need backward computation.
I0426 20:51:36.904599 32015 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:51:36.904603 32015 net.cpp:200] relu3 needs backward computation.
I0426 20:51:36.904616 32015 net.cpp:200] ip3 needs backward computation.
I0426 20:51:36.904619 32015 net.cpp:200] relu2 needs backward computation.
I0426 20:51:36.904623 32015 net.cpp:200] ip2 needs backward computation.
I0426 20:51:36.904625 32015 net.cpp:200] relu1 needs backward computation.
I0426 20:51:36.904628 32015 net.cpp:200] ip1 needs backward computation.
I0426 20:51:36.904637 32015 net.cpp:200] pool1 needs backward computation.
I0426 20:51:36.904640 32015 net.cpp:200] conv1 needs backward computation.
I0426 20:51:36.904644 32015 net.cpp:200] pool0 needs backward computation.
I0426 20:51:36.904646 32015 net.cpp:200] conv0 needs backward computation.
I0426 20:51:36.904650 32015 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:51:36.904654 32015 net.cpp:202] mnist does not need backward computation.
I0426 20:51:36.904657 32015 net.cpp:244] This network produces output accuracy
I0426 20:51:36.904666 32015 net.cpp:244] This network produces output loss
I0426 20:51:36.904693 32015 net.cpp:257] Network initialization done.
I0426 20:51:36.904736 32015 solver.cpp:56] Solver scaffolding done.
I0426 20:51:36.905140 32015 caffe.cpp:248] Starting Optimization
I0426 20:51:36.905148 32015 solver.cpp:273] Solving LeNet
I0426 20:51:36.905153 32015 solver.cpp:274] Learning Rate Policy: inv
I0426 20:51:36.906039 32015 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:51:36.910671 32015 blocking_queue.cpp:49] Waiting for data
I0426 20:51:36.982821 32022 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:51:36.983456 32015 solver.cpp:398]     Test net output #0: accuracy = 0.11
I0426 20:51:36.983489 32015 solver.cpp:398]     Test net output #1: loss = 2.3191 (* 1 = 2.3191 loss)
I0426 20:51:36.986728 32015 solver.cpp:219] Iteration 0 (-6.19873e-31 iter/s, 0.0815514s/100 iters), loss = 2.31517
I0426 20:51:36.986768 32015 solver.cpp:238]     Train net output #0: loss = 2.31517 (* 1 = 2.31517 loss)
I0426 20:51:36.986794 32015 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:51:37.104446 32015 solver.cpp:219] Iteration 100 (849.85 iter/s, 0.117668s/100 iters), loss = 0.764947
I0426 20:51:37.104472 32015 solver.cpp:238]     Train net output #0: loss = 0.764947 (* 1 = 0.764947 loss)
I0426 20:51:37.104493 32015 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:51:37.219647 32015 solver.cpp:219] Iteration 200 (868.333 iter/s, 0.115163s/100 iters), loss = 1.00006
I0426 20:51:37.219672 32015 solver.cpp:238]     Train net output #0: loss = 1.00006 (* 1 = 1.00006 loss)
I0426 20:51:37.219696 32015 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:51:37.335366 32015 solver.cpp:219] Iteration 300 (864.438 iter/s, 0.115682s/100 iters), loss = 0.571359
I0426 20:51:37.335392 32015 solver.cpp:238]     Train net output #0: loss = 0.571359 (* 1 = 0.571359 loss)
I0426 20:51:37.335398 32015 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:51:37.448995 32015 solver.cpp:219] Iteration 400 (880.341 iter/s, 0.113592s/100 iters), loss = 0.304821
I0426 20:51:37.449020 32015 solver.cpp:238]     Train net output #0: loss = 0.304821 (* 1 = 0.304821 loss)
I0426 20:51:37.449043 32015 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:51:37.561522 32015 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:51:37.611423 32022 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:51:37.612800 32015 solver.cpp:398]     Test net output #0: accuracy = 0.8738
I0426 20:51:37.612823 32015 solver.cpp:398]     Test net output #1: loss = 0.336364 (* 1 = 0.336364 loss)
I0426 20:51:37.613955 32015 solver.cpp:219] Iteration 500 (606.35 iter/s, 0.164921s/100 iters), loss = 0.236559
I0426 20:51:37.613989 32015 solver.cpp:238]     Train net output #0: loss = 0.236559 (* 1 = 0.236559 loss)
I0426 20:51:37.614012 32015 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:51:37.735967 32015 solver.cpp:219] Iteration 600 (819.89 iter/s, 0.121968s/100 iters), loss = 0.234099
I0426 20:51:37.736009 32015 solver.cpp:238]     Train net output #0: loss = 0.234099 (* 1 = 0.234099 loss)
I0426 20:51:37.736016 32015 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:51:37.851676 32015 solver.cpp:219] Iteration 700 (864.513 iter/s, 0.115672s/100 iters), loss = 0.471925
I0426 20:51:37.851701 32015 solver.cpp:238]     Train net output #0: loss = 0.471925 (* 1 = 0.471925 loss)
I0426 20:51:37.851707 32015 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:51:37.967152 32015 solver.cpp:219] Iteration 800 (866.247 iter/s, 0.115441s/100 iters), loss = 0.40867
I0426 20:51:37.967195 32015 solver.cpp:238]     Train net output #0: loss = 0.40867 (* 1 = 0.40867 loss)
I0426 20:51:37.967200 32015 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:51:38.083324 32015 solver.cpp:219] Iteration 900 (861.068 iter/s, 0.116135s/100 iters), loss = 0.413592
I0426 20:51:38.083364 32015 solver.cpp:238]     Train net output #0: loss = 0.413592 (* 1 = 0.413592 loss)
I0426 20:51:38.083370 32015 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:51:38.121765 32021 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:51:38.197428 32015 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:51:38.199468 32015 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:51:38.200711 32015 solver.cpp:311] Iteration 1000, loss = 0.345425
I0426 20:51:38.200724 32015 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:51:38.276108 32022 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:51:38.276705 32015 solver.cpp:398]     Test net output #0: accuracy = 0.8811
I0426 20:51:38.276726 32015 solver.cpp:398]     Test net output #1: loss = 0.305263 (* 1 = 0.305263 loss)
I0426 20:51:38.276731 32015 solver.cpp:316] Optimization Done.
I0426 20:51:38.276736 32015 caffe.cpp:259] Optimization Done.
