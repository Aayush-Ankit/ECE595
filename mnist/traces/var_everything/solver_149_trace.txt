I0426 20:53:58.908131 32586 caffe.cpp:218] Using GPUs 0
I0426 20:53:58.950551 32586 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:53:59.514026 32586 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test149.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:53:59.514168 32586 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test149.prototxt
I0426 20:53:59.514585 32586 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:53:59.514602 32586 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:53:59.514704 32586 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:59.514785 32586 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:59.514883 32586 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:53:59.514907 32586 net.cpp:86] Creating Layer mnist
I0426 20:53:59.514916 32586 net.cpp:382] mnist -> data
I0426 20:53:59.514937 32586 net.cpp:382] mnist -> label
I0426 20:53:59.516026 32586 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:53:59.518581 32586 net.cpp:124] Setting up mnist
I0426 20:53:59.518599 32586 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:53:59.518605 32586 net.cpp:131] Top shape: 64 (64)
I0426 20:53:59.518610 32586 net.cpp:139] Memory required for data: 200960
I0426 20:53:59.518616 32586 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:59.518636 32586 net.cpp:86] Creating Layer conv0
I0426 20:53:59.518657 32586 net.cpp:408] conv0 <- data
I0426 20:53:59.518669 32586 net.cpp:382] conv0 -> conv0
I0426 20:53:59.798204 32586 net.cpp:124] Setting up conv0
I0426 20:53:59.798229 32586 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0426 20:53:59.798233 32586 net.cpp:139] Memory required for data: 7573760
I0426 20:53:59.798249 32586 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:59.798260 32586 net.cpp:86] Creating Layer pool0
I0426 20:53:59.798264 32586 net.cpp:408] pool0 <- conv0
I0426 20:53:59.798269 32586 net.cpp:382] pool0 -> pool0
I0426 20:53:59.798315 32586 net.cpp:124] Setting up pool0
I0426 20:53:59.798319 32586 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0426 20:53:59.798322 32586 net.cpp:139] Memory required for data: 9416960
I0426 20:53:59.798326 32586 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:59.798336 32586 net.cpp:86] Creating Layer conv1
I0426 20:53:59.798338 32586 net.cpp:408] conv1 <- pool0
I0426 20:53:59.798343 32586 net.cpp:382] conv1 -> conv1
I0426 20:53:59.801054 32586 net.cpp:124] Setting up conv1
I0426 20:53:59.801067 32586 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:53:59.801071 32586 net.cpp:139] Memory required for data: 9580800
I0426 20:53:59.801080 32586 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:59.801087 32586 net.cpp:86] Creating Layer pool1
I0426 20:53:59.801090 32586 net.cpp:408] pool1 <- conv1
I0426 20:53:59.801095 32586 net.cpp:382] pool1 -> pool1
I0426 20:53:59.801129 32586 net.cpp:124] Setting up pool1
I0426 20:53:59.801134 32586 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:53:59.801137 32586 net.cpp:139] Memory required for data: 9621760
I0426 20:53:59.801141 32586 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:59.801147 32586 net.cpp:86] Creating Layer ip1
I0426 20:53:59.801149 32586 net.cpp:408] ip1 <- pool1
I0426 20:53:59.801154 32586 net.cpp:382] ip1 -> ip1
I0426 20:53:59.801332 32586 net.cpp:124] Setting up ip1
I0426 20:53:59.801339 32586 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:59.801342 32586 net.cpp:139] Memory required for data: 9647360
I0426 20:53:59.801349 32586 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:59.801354 32586 net.cpp:86] Creating Layer relu1
I0426 20:53:59.801357 32586 net.cpp:408] relu1 <- ip1
I0426 20:53:59.801362 32586 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:59.801517 32586 net.cpp:124] Setting up relu1
I0426 20:53:59.801524 32586 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:53:59.801527 32586 net.cpp:139] Memory required for data: 9672960
I0426 20:53:59.801530 32586 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:59.801537 32586 net.cpp:86] Creating Layer ip2
I0426 20:53:59.801539 32586 net.cpp:408] ip2 <- ip1
I0426 20:53:59.801544 32586 net.cpp:382] ip2 -> ip2
I0426 20:53:59.801797 32586 net.cpp:124] Setting up ip2
I0426 20:53:59.801805 32586 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:59.801808 32586 net.cpp:139] Memory required for data: 9749760
I0426 20:53:59.801813 32586 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:59.801818 32586 net.cpp:86] Creating Layer relu2
I0426 20:53:59.801821 32586 net.cpp:408] relu2 <- ip2
I0426 20:53:59.801826 32586 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:59.802620 32586 net.cpp:124] Setting up relu2
I0426 20:53:59.802633 32586 net.cpp:131] Top shape: 64 300 (19200)
I0426 20:53:59.802635 32586 net.cpp:139] Memory required for data: 9826560
I0426 20:53:59.802639 32586 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:59.802645 32586 net.cpp:86] Creating Layer ip3
I0426 20:53:59.802649 32586 net.cpp:408] ip3 <- ip2
I0426 20:53:59.802654 32586 net.cpp:382] ip3 -> ip3
I0426 20:53:59.802767 32586 net.cpp:124] Setting up ip3
I0426 20:53:59.802773 32586 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:59.802776 32586 net.cpp:139] Memory required for data: 9829120
I0426 20:53:59.802784 32586 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:59.802789 32586 net.cpp:86] Creating Layer relu3
I0426 20:53:59.802793 32586 net.cpp:408] relu3 <- ip3
I0426 20:53:59.802796 32586 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:59.802953 32586 net.cpp:124] Setting up relu3
I0426 20:53:59.802961 32586 net.cpp:131] Top shape: 64 10 (640)
I0426 20:53:59.802964 32586 net.cpp:139] Memory required for data: 9831680
I0426 20:53:59.802968 32586 layer_factory.hpp:77] Creating layer loss
I0426 20:53:59.802973 32586 net.cpp:86] Creating Layer loss
I0426 20:53:59.802975 32586 net.cpp:408] loss <- ip3
I0426 20:53:59.802979 32586 net.cpp:408] loss <- label
I0426 20:53:59.802985 32586 net.cpp:382] loss -> loss
I0426 20:53:59.803002 32586 layer_factory.hpp:77] Creating layer loss
I0426 20:53:59.803226 32586 net.cpp:124] Setting up loss
I0426 20:53:59.803236 32586 net.cpp:131] Top shape: (1)
I0426 20:53:59.803238 32586 net.cpp:134]     with loss weight 1
I0426 20:53:59.803252 32586 net.cpp:139] Memory required for data: 9831684
I0426 20:53:59.803256 32586 net.cpp:200] loss needs backward computation.
I0426 20:53:59.803259 32586 net.cpp:200] relu3 needs backward computation.
I0426 20:53:59.803262 32586 net.cpp:200] ip3 needs backward computation.
I0426 20:53:59.803266 32586 net.cpp:200] relu2 needs backward computation.
I0426 20:53:59.803268 32586 net.cpp:200] ip2 needs backward computation.
I0426 20:53:59.803272 32586 net.cpp:200] relu1 needs backward computation.
I0426 20:53:59.803274 32586 net.cpp:200] ip1 needs backward computation.
I0426 20:53:59.803277 32586 net.cpp:200] pool1 needs backward computation.
I0426 20:53:59.803280 32586 net.cpp:200] conv1 needs backward computation.
I0426 20:53:59.803283 32586 net.cpp:200] pool0 needs backward computation.
I0426 20:53:59.803287 32586 net.cpp:200] conv0 needs backward computation.
I0426 20:53:59.803289 32586 net.cpp:202] mnist does not need backward computation.
I0426 20:53:59.803292 32586 net.cpp:244] This network produces output loss
I0426 20:53:59.803302 32586 net.cpp:257] Network initialization done.
I0426 20:53:59.803637 32586 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test149.prototxt
I0426 20:53:59.803663 32586 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:53:59.803750 32586 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 300
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:53:59.803825 32586 layer_factory.hpp:77] Creating layer mnist
I0426 20:53:59.803866 32586 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:53:59.803881 32586 net.cpp:86] Creating Layer mnist
I0426 20:53:59.803886 32586 net.cpp:382] mnist -> data
I0426 20:53:59.803894 32586 net.cpp:382] mnist -> label
I0426 20:53:59.803973 32586 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:53:59.805930 32586 net.cpp:124] Setting up mnist
I0426 20:53:59.805943 32586 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:53:59.805948 32586 net.cpp:131] Top shape: 100 (100)
I0426 20:53:59.805950 32586 net.cpp:139] Memory required for data: 314000
I0426 20:53:59.805954 32586 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:53:59.805964 32586 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:53:59.805968 32586 net.cpp:408] label_mnist_1_split <- label
I0426 20:53:59.805971 32586 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:53:59.805977 32586 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:53:59.806061 32586 net.cpp:124] Setting up label_mnist_1_split
I0426 20:53:59.806068 32586 net.cpp:131] Top shape: 100 (100)
I0426 20:53:59.806072 32586 net.cpp:131] Top shape: 100 (100)
I0426 20:53:59.806074 32586 net.cpp:139] Memory required for data: 314800
I0426 20:53:59.806077 32586 layer_factory.hpp:77] Creating layer conv0
I0426 20:53:59.806085 32586 net.cpp:86] Creating Layer conv0
I0426 20:53:59.806088 32586 net.cpp:408] conv0 <- data
I0426 20:53:59.806093 32586 net.cpp:382] conv0 -> conv0
I0426 20:53:59.807689 32586 net.cpp:124] Setting up conv0
I0426 20:53:59.807703 32586 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0426 20:53:59.807705 32586 net.cpp:139] Memory required for data: 11834800
I0426 20:53:59.807714 32586 layer_factory.hpp:77] Creating layer pool0
I0426 20:53:59.807721 32586 net.cpp:86] Creating Layer pool0
I0426 20:53:59.807724 32586 net.cpp:408] pool0 <- conv0
I0426 20:53:59.807729 32586 net.cpp:382] pool0 -> pool0
I0426 20:53:59.807780 32586 net.cpp:124] Setting up pool0
I0426 20:53:59.807786 32586 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0426 20:53:59.807790 32586 net.cpp:139] Memory required for data: 14714800
I0426 20:53:59.807792 32586 layer_factory.hpp:77] Creating layer conv1
I0426 20:53:59.807801 32586 net.cpp:86] Creating Layer conv1
I0426 20:53:59.807803 32586 net.cpp:408] conv1 <- pool0
I0426 20:53:59.807808 32586 net.cpp:382] conv1 -> conv1
I0426 20:53:59.809381 32586 net.cpp:124] Setting up conv1
I0426 20:53:59.809394 32586 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:53:59.809398 32586 net.cpp:139] Memory required for data: 14970800
I0426 20:53:59.809406 32586 layer_factory.hpp:77] Creating layer pool1
I0426 20:53:59.809412 32586 net.cpp:86] Creating Layer pool1
I0426 20:53:59.809415 32586 net.cpp:408] pool1 <- conv1
I0426 20:53:59.809422 32586 net.cpp:382] pool1 -> pool1
I0426 20:53:59.809455 32586 net.cpp:124] Setting up pool1
I0426 20:53:59.809468 32586 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:53:59.809470 32586 net.cpp:139] Memory required for data: 15034800
I0426 20:53:59.809473 32586 layer_factory.hpp:77] Creating layer ip1
I0426 20:53:59.809478 32586 net.cpp:86] Creating Layer ip1
I0426 20:53:59.809483 32586 net.cpp:408] ip1 <- pool1
I0426 20:53:59.809486 32586 net.cpp:382] ip1 -> ip1
I0426 20:53:59.809660 32586 net.cpp:124] Setting up ip1
I0426 20:53:59.809667 32586 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:59.809680 32586 net.cpp:139] Memory required for data: 15074800
I0426 20:53:59.809689 32586 layer_factory.hpp:77] Creating layer relu1
I0426 20:53:59.809693 32586 net.cpp:86] Creating Layer relu1
I0426 20:53:59.809696 32586 net.cpp:408] relu1 <- ip1
I0426 20:53:59.809701 32586 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:53:59.809865 32586 net.cpp:124] Setting up relu1
I0426 20:53:59.809875 32586 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:53:59.809878 32586 net.cpp:139] Memory required for data: 15114800
I0426 20:53:59.809881 32586 layer_factory.hpp:77] Creating layer ip2
I0426 20:53:59.809887 32586 net.cpp:86] Creating Layer ip2
I0426 20:53:59.809891 32586 net.cpp:408] ip2 <- ip1
I0426 20:53:59.809896 32586 net.cpp:382] ip2 -> ip2
I0426 20:53:59.810214 32586 net.cpp:124] Setting up ip2
I0426 20:53:59.810221 32586 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:59.810225 32586 net.cpp:139] Memory required for data: 15234800
I0426 20:53:59.810230 32586 layer_factory.hpp:77] Creating layer relu2
I0426 20:53:59.810235 32586 net.cpp:86] Creating Layer relu2
I0426 20:53:59.810237 32586 net.cpp:408] relu2 <- ip2
I0426 20:53:59.810241 32586 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:53:59.810382 32586 net.cpp:124] Setting up relu2
I0426 20:53:59.810389 32586 net.cpp:131] Top shape: 100 300 (30000)
I0426 20:53:59.810392 32586 net.cpp:139] Memory required for data: 15354800
I0426 20:53:59.810395 32586 layer_factory.hpp:77] Creating layer ip3
I0426 20:53:59.810400 32586 net.cpp:86] Creating Layer ip3
I0426 20:53:59.810403 32586 net.cpp:408] ip3 <- ip2
I0426 20:53:59.810407 32586 net.cpp:382] ip3 -> ip3
I0426 20:53:59.810515 32586 net.cpp:124] Setting up ip3
I0426 20:53:59.810521 32586 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:59.810524 32586 net.cpp:139] Memory required for data: 15358800
I0426 20:53:59.810533 32586 layer_factory.hpp:77] Creating layer relu3
I0426 20:53:59.810537 32586 net.cpp:86] Creating Layer relu3
I0426 20:53:59.810539 32586 net.cpp:408] relu3 <- ip3
I0426 20:53:59.810544 32586 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:53:59.811355 32586 net.cpp:124] Setting up relu3
I0426 20:53:59.811367 32586 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:59.811370 32586 net.cpp:139] Memory required for data: 15362800
I0426 20:53:59.811373 32586 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:53:59.811378 32586 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:53:59.811398 32586 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:53:59.811403 32586 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:53:59.811408 32586 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:53:59.811447 32586 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:53:59.811453 32586 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:59.811457 32586 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:53:59.811460 32586 net.cpp:139] Memory required for data: 15370800
I0426 20:53:59.811463 32586 layer_factory.hpp:77] Creating layer accuracy
I0426 20:53:59.811468 32586 net.cpp:86] Creating Layer accuracy
I0426 20:53:59.811471 32586 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:53:59.811475 32586 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:53:59.811480 32586 net.cpp:382] accuracy -> accuracy
I0426 20:53:59.811486 32586 net.cpp:124] Setting up accuracy
I0426 20:53:59.811491 32586 net.cpp:131] Top shape: (1)
I0426 20:53:59.811493 32586 net.cpp:139] Memory required for data: 15370804
I0426 20:53:59.811497 32586 layer_factory.hpp:77] Creating layer loss
I0426 20:53:59.811501 32586 net.cpp:86] Creating Layer loss
I0426 20:53:59.811504 32586 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:53:59.811507 32586 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:53:59.811512 32586 net.cpp:382] loss -> loss
I0426 20:53:59.811518 32586 layer_factory.hpp:77] Creating layer loss
I0426 20:53:59.811750 32586 net.cpp:124] Setting up loss
I0426 20:53:59.811759 32586 net.cpp:131] Top shape: (1)
I0426 20:53:59.811764 32586 net.cpp:134]     with loss weight 1
I0426 20:53:59.811779 32586 net.cpp:139] Memory required for data: 15370808
I0426 20:53:59.811782 32586 net.cpp:200] loss needs backward computation.
I0426 20:53:59.811787 32586 net.cpp:202] accuracy does not need backward computation.
I0426 20:53:59.811790 32586 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:53:59.811794 32586 net.cpp:200] relu3 needs backward computation.
I0426 20:53:59.811796 32586 net.cpp:200] ip3 needs backward computation.
I0426 20:53:59.811800 32586 net.cpp:200] relu2 needs backward computation.
I0426 20:53:59.811802 32586 net.cpp:200] ip2 needs backward computation.
I0426 20:53:59.811805 32586 net.cpp:200] relu1 needs backward computation.
I0426 20:53:59.811815 32586 net.cpp:200] ip1 needs backward computation.
I0426 20:53:59.811817 32586 net.cpp:200] pool1 needs backward computation.
I0426 20:53:59.811820 32586 net.cpp:200] conv1 needs backward computation.
I0426 20:53:59.811823 32586 net.cpp:200] pool0 needs backward computation.
I0426 20:53:59.811827 32586 net.cpp:200] conv0 needs backward computation.
I0426 20:53:59.811830 32586 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:53:59.811835 32586 net.cpp:202] mnist does not need backward computation.
I0426 20:53:59.811837 32586 net.cpp:244] This network produces output accuracy
I0426 20:53:59.811841 32586 net.cpp:244] This network produces output loss
I0426 20:53:59.811851 32586 net.cpp:257] Network initialization done.
I0426 20:53:59.811889 32586 solver.cpp:56] Solver scaffolding done.
I0426 20:53:59.812235 32586 caffe.cpp:248] Starting Optimization
I0426 20:53:59.812242 32586 solver.cpp:273] Solving LeNet
I0426 20:53:59.812245 32586 solver.cpp:274] Learning Rate Policy: inv
I0426 20:53:59.813197 32586 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:53:59.820495 32586 blocking_queue.cpp:49] Waiting for data
I0426 20:53:59.893126 32593 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:53:59.894389 32586 solver.cpp:398]     Test net output #0: accuracy = 0.1197
I0426 20:53:59.894430 32586 solver.cpp:398]     Test net output #1: loss = 2.29465 (* 1 = 2.29465 loss)
I0426 20:53:59.899997 32586 solver.cpp:219] Iteration 0 (-1.76735e-31 iter/s, 0.0877087s/100 iters), loss = 2.27795
I0426 20:53:59.900041 32586 solver.cpp:238]     Train net output #0: loss = 2.27795 (* 1 = 2.27795 loss)
I0426 20:53:59.900055 32586 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:54:00.034206 32586 solver.cpp:219] Iteration 100 (745.422 iter/s, 0.134152s/100 iters), loss = 1.12478
I0426 20:54:00.034250 32586 solver.cpp:238]     Train net output #0: loss = 1.12478 (* 1 = 1.12478 loss)
I0426 20:54:00.034260 32586 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:54:00.184025 32586 solver.cpp:219] Iteration 200 (667.744 iter/s, 0.149758s/100 iters), loss = 0.383912
I0426 20:54:00.184063 32586 solver.cpp:238]     Train net output #0: loss = 0.383912 (* 1 = 0.383912 loss)
I0426 20:54:00.184073 32586 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:54:00.317713 32586 solver.cpp:219] Iteration 300 (748.289 iter/s, 0.133638s/100 iters), loss = 0.158518
I0426 20:54:00.317756 32586 solver.cpp:238]     Train net output #0: loss = 0.158518 (* 1 = 0.158518 loss)
I0426 20:54:00.317764 32586 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:54:00.451340 32586 solver.cpp:219] Iteration 400 (748.57 iter/s, 0.133588s/100 iters), loss = 0.0873412
I0426 20:54:00.451383 32586 solver.cpp:238]     Train net output #0: loss = 0.0873413 (* 1 = 0.0873413 loss)
I0426 20:54:00.451391 32586 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:54:00.591676 32586 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:54:00.665894 32593 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:00.667877 32586 solver.cpp:398]     Test net output #0: accuracy = 0.9652
I0426 20:54:00.667913 32586 solver.cpp:398]     Test net output #1: loss = 0.108963 (* 1 = 0.108963 loss)
I0426 20:54:00.669180 32586 solver.cpp:219] Iteration 500 (459.196 iter/s, 0.217772s/100 iters), loss = 0.0801739
I0426 20:54:00.669235 32586 solver.cpp:238]     Train net output #0: loss = 0.0801739 (* 1 = 0.0801739 loss)
I0426 20:54:00.669245 32586 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:54:00.806584 32586 solver.cpp:219] Iteration 600 (728.11 iter/s, 0.137342s/100 iters), loss = 0.125983
I0426 20:54:00.806632 32586 solver.cpp:238]     Train net output #0: loss = 0.125983 (* 1 = 0.125983 loss)
I0426 20:54:00.806644 32586 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:54:00.946386 32586 solver.cpp:219] Iteration 700 (715.587 iter/s, 0.139745s/100 iters), loss = 0.144158
I0426 20:54:00.946416 32586 solver.cpp:238]     Train net output #0: loss = 0.144158 (* 1 = 0.144158 loss)
I0426 20:54:00.946424 32586 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:54:01.082834 32586 solver.cpp:219] Iteration 800 (733.111 iter/s, 0.136405s/100 iters), loss = 0.213895
I0426 20:54:01.082864 32586 solver.cpp:238]     Train net output #0: loss = 0.213895 (* 1 = 0.213895 loss)
I0426 20:54:01.082871 32586 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:54:01.218928 32586 solver.cpp:219] Iteration 900 (735.015 iter/s, 0.136052s/100 iters), loss = 0.181963
I0426 20:54:01.218960 32586 solver.cpp:238]     Train net output #0: loss = 0.181963 (* 1 = 0.181963 loss)
I0426 20:54:01.218967 32586 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:54:01.264053 32592 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:01.352447 32586 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:54:01.355092 32586 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:54:01.356834 32586 solver.cpp:311] Iteration 1000, loss = 0.13234
I0426 20:54:01.356863 32586 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:54:01.437906 32593 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:54:01.439155 32586 solver.cpp:398]     Test net output #0: accuracy = 0.9774
I0426 20:54:01.439180 32586 solver.cpp:398]     Test net output #1: loss = 0.070283 (* 1 = 0.070283 loss)
I0426 20:54:01.439196 32586 solver.cpp:316] Optimization Done.
I0426 20:54:01.439201 32586 caffe.cpp:259] Optimization Done.
