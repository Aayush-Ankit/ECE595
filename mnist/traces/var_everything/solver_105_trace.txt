I0426 20:52:09.484978 32137 caffe.cpp:218] Using GPUs 0
I0426 20:52:09.523622 32137 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:52:10.047606 32137 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test105.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:52:10.047744 32137 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test105.prototxt
I0426 20:52:10.048171 32137 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:52:10.048189 32137 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:52:10.048290 32137 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:10.048372 32137 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:10.048471 32137 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:52:10.048494 32137 net.cpp:86] Creating Layer mnist
I0426 20:52:10.048501 32137 net.cpp:382] mnist -> data
I0426 20:52:10.048526 32137 net.cpp:382] mnist -> label
I0426 20:52:10.049628 32137 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:52:10.052156 32137 net.cpp:124] Setting up mnist
I0426 20:52:10.052175 32137 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:52:10.052181 32137 net.cpp:131] Top shape: 64 (64)
I0426 20:52:10.052186 32137 net.cpp:139] Memory required for data: 200960
I0426 20:52:10.052192 32137 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:10.052209 32137 net.cpp:86] Creating Layer conv0
I0426 20:52:10.052230 32137 net.cpp:408] conv0 <- data
I0426 20:52:10.052242 32137 net.cpp:382] conv0 -> conv0
I0426 20:52:10.334286 32137 net.cpp:124] Setting up conv0
I0426 20:52:10.334311 32137 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0426 20:52:10.334316 32137 net.cpp:139] Memory required for data: 3887360
I0426 20:52:10.334331 32137 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:10.334343 32137 net.cpp:86] Creating Layer pool0
I0426 20:52:10.334347 32137 net.cpp:408] pool0 <- conv0
I0426 20:52:10.334352 32137 net.cpp:382] pool0 -> pool0
I0426 20:52:10.334394 32137 net.cpp:124] Setting up pool0
I0426 20:52:10.334399 32137 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0426 20:52:10.334401 32137 net.cpp:139] Memory required for data: 4808960
I0426 20:52:10.334404 32137 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:10.334415 32137 net.cpp:86] Creating Layer conv1
I0426 20:52:10.334419 32137 net.cpp:408] conv1 <- pool0
I0426 20:52:10.334422 32137 net.cpp:382] conv1 -> conv1
I0426 20:52:10.337136 32137 net.cpp:124] Setting up conv1
I0426 20:52:10.337149 32137 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0426 20:52:10.337153 32137 net.cpp:139] Memory required for data: 4972800
I0426 20:52:10.337162 32137 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:10.337168 32137 net.cpp:86] Creating Layer pool1
I0426 20:52:10.337172 32137 net.cpp:408] pool1 <- conv1
I0426 20:52:10.337177 32137 net.cpp:382] pool1 -> pool1
I0426 20:52:10.337209 32137 net.cpp:124] Setting up pool1
I0426 20:52:10.337214 32137 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0426 20:52:10.337218 32137 net.cpp:139] Memory required for data: 5013760
I0426 20:52:10.337220 32137 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:10.337226 32137 net.cpp:86] Creating Layer ip1
I0426 20:52:10.337229 32137 net.cpp:408] ip1 <- pool1
I0426 20:52:10.337234 32137 net.cpp:382] ip1 -> ip1
I0426 20:52:10.337445 32137 net.cpp:124] Setting up ip1
I0426 20:52:10.337453 32137 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:10.337456 32137 net.cpp:139] Memory required for data: 5039360
I0426 20:52:10.337463 32137 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:10.337469 32137 net.cpp:86] Creating Layer relu1
I0426 20:52:10.337472 32137 net.cpp:408] relu1 <- ip1
I0426 20:52:10.337477 32137 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:10.337646 32137 net.cpp:124] Setting up relu1
I0426 20:52:10.337654 32137 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:10.337657 32137 net.cpp:139] Memory required for data: 5064960
I0426 20:52:10.337661 32137 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:10.337666 32137 net.cpp:86] Creating Layer ip2
I0426 20:52:10.337669 32137 net.cpp:408] ip2 <- ip1
I0426 20:52:10.337673 32137 net.cpp:382] ip2 -> ip2
I0426 20:52:10.337810 32137 net.cpp:124] Setting up ip2
I0426 20:52:10.337815 32137 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:10.337818 32137 net.cpp:139] Memory required for data: 5090560
I0426 20:52:10.337824 32137 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:10.337829 32137 net.cpp:86] Creating Layer relu2
I0426 20:52:10.337832 32137 net.cpp:408] relu2 <- ip2
I0426 20:52:10.337836 32137 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:10.338608 32137 net.cpp:124] Setting up relu2
I0426 20:52:10.338620 32137 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:52:10.338639 32137 net.cpp:139] Memory required for data: 5116160
I0426 20:52:10.338642 32137 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:10.338649 32137 net.cpp:86] Creating Layer ip3
I0426 20:52:10.338652 32137 net.cpp:408] ip3 <- ip2
I0426 20:52:10.338659 32137 net.cpp:382] ip3 -> ip3
I0426 20:52:10.338773 32137 net.cpp:124] Setting up ip3
I0426 20:52:10.338780 32137 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:10.338783 32137 net.cpp:139] Memory required for data: 5118720
I0426 20:52:10.338791 32137 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:10.338796 32137 net.cpp:86] Creating Layer relu3
I0426 20:52:10.338799 32137 net.cpp:408] relu3 <- ip3
I0426 20:52:10.338804 32137 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:10.338969 32137 net.cpp:124] Setting up relu3
I0426 20:52:10.338977 32137 net.cpp:131] Top shape: 64 10 (640)
I0426 20:52:10.338981 32137 net.cpp:139] Memory required for data: 5121280
I0426 20:52:10.338985 32137 layer_factory.hpp:77] Creating layer loss
I0426 20:52:10.338990 32137 net.cpp:86] Creating Layer loss
I0426 20:52:10.338994 32137 net.cpp:408] loss <- ip3
I0426 20:52:10.338999 32137 net.cpp:408] loss <- label
I0426 20:52:10.339004 32137 net.cpp:382] loss -> loss
I0426 20:52:10.339018 32137 layer_factory.hpp:77] Creating layer loss
I0426 20:52:10.339232 32137 net.cpp:124] Setting up loss
I0426 20:52:10.339241 32137 net.cpp:131] Top shape: (1)
I0426 20:52:10.339244 32137 net.cpp:134]     with loss weight 1
I0426 20:52:10.339258 32137 net.cpp:139] Memory required for data: 5121284
I0426 20:52:10.339262 32137 net.cpp:200] loss needs backward computation.
I0426 20:52:10.339265 32137 net.cpp:200] relu3 needs backward computation.
I0426 20:52:10.339268 32137 net.cpp:200] ip3 needs backward computation.
I0426 20:52:10.339272 32137 net.cpp:200] relu2 needs backward computation.
I0426 20:52:10.339274 32137 net.cpp:200] ip2 needs backward computation.
I0426 20:52:10.339277 32137 net.cpp:200] relu1 needs backward computation.
I0426 20:52:10.339279 32137 net.cpp:200] ip1 needs backward computation.
I0426 20:52:10.339282 32137 net.cpp:200] pool1 needs backward computation.
I0426 20:52:10.339285 32137 net.cpp:200] conv1 needs backward computation.
I0426 20:52:10.339288 32137 net.cpp:200] pool0 needs backward computation.
I0426 20:52:10.339292 32137 net.cpp:200] conv0 needs backward computation.
I0426 20:52:10.339294 32137 net.cpp:202] mnist does not need backward computation.
I0426 20:52:10.339298 32137 net.cpp:244] This network produces output loss
I0426 20:52:10.339306 32137 net.cpp:257] Network initialization done.
I0426 20:52:10.339633 32137 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test105.prototxt
I0426 20:52:10.339689 32137 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:52:10.339790 32137 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0426 20:52:10.339881 32137 layer_factory.hpp:77] Creating layer mnist
I0426 20:52:10.339926 32137 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:52:10.339937 32137 net.cpp:86] Creating Layer mnist
I0426 20:52:10.339941 32137 net.cpp:382] mnist -> data
I0426 20:52:10.339949 32137 net.cpp:382] mnist -> label
I0426 20:52:10.340030 32137 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:52:10.342039 32137 net.cpp:124] Setting up mnist
I0426 20:52:10.342052 32137 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:52:10.342056 32137 net.cpp:131] Top shape: 100 (100)
I0426 20:52:10.342059 32137 net.cpp:139] Memory required for data: 314000
I0426 20:52:10.342063 32137 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:52:10.342069 32137 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:52:10.342072 32137 net.cpp:408] label_mnist_1_split <- label
I0426 20:52:10.342077 32137 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:52:10.342082 32137 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:52:10.342149 32137 net.cpp:124] Setting up label_mnist_1_split
I0426 20:52:10.342154 32137 net.cpp:131] Top shape: 100 (100)
I0426 20:52:10.342157 32137 net.cpp:131] Top shape: 100 (100)
I0426 20:52:10.342160 32137 net.cpp:139] Memory required for data: 314800
I0426 20:52:10.342162 32137 layer_factory.hpp:77] Creating layer conv0
I0426 20:52:10.342170 32137 net.cpp:86] Creating Layer conv0
I0426 20:52:10.342173 32137 net.cpp:408] conv0 <- data
I0426 20:52:10.342178 32137 net.cpp:382] conv0 -> conv0
I0426 20:52:10.343740 32137 net.cpp:124] Setting up conv0
I0426 20:52:10.343753 32137 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0426 20:52:10.343756 32137 net.cpp:139] Memory required for data: 6074800
I0426 20:52:10.343765 32137 layer_factory.hpp:77] Creating layer pool0
I0426 20:52:10.343771 32137 net.cpp:86] Creating Layer pool0
I0426 20:52:10.343775 32137 net.cpp:408] pool0 <- conv0
I0426 20:52:10.343778 32137 net.cpp:382] pool0 -> pool0
I0426 20:52:10.343811 32137 net.cpp:124] Setting up pool0
I0426 20:52:10.343816 32137 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0426 20:52:10.343819 32137 net.cpp:139] Memory required for data: 7514800
I0426 20:52:10.343822 32137 layer_factory.hpp:77] Creating layer conv1
I0426 20:52:10.343845 32137 net.cpp:86] Creating Layer conv1
I0426 20:52:10.343848 32137 net.cpp:408] conv1 <- pool0
I0426 20:52:10.343852 32137 net.cpp:382] conv1 -> conv1
I0426 20:52:10.346108 32137 net.cpp:124] Setting up conv1
I0426 20:52:10.346122 32137 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0426 20:52:10.346127 32137 net.cpp:139] Memory required for data: 7770800
I0426 20:52:10.346135 32137 layer_factory.hpp:77] Creating layer pool1
I0426 20:52:10.346141 32137 net.cpp:86] Creating Layer pool1
I0426 20:52:10.346166 32137 net.cpp:408] pool1 <- conv1
I0426 20:52:10.346171 32137 net.cpp:382] pool1 -> pool1
I0426 20:52:10.346207 32137 net.cpp:124] Setting up pool1
I0426 20:52:10.346212 32137 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0426 20:52:10.346215 32137 net.cpp:139] Memory required for data: 7834800
I0426 20:52:10.346218 32137 layer_factory.hpp:77] Creating layer ip1
I0426 20:52:10.346225 32137 net.cpp:86] Creating Layer ip1
I0426 20:52:10.346227 32137 net.cpp:408] ip1 <- pool1
I0426 20:52:10.346254 32137 net.cpp:382] ip1 -> ip1
I0426 20:52:10.346452 32137 net.cpp:124] Setting up ip1
I0426 20:52:10.346460 32137 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:10.346472 32137 net.cpp:139] Memory required for data: 7874800
I0426 20:52:10.346480 32137 layer_factory.hpp:77] Creating layer relu1
I0426 20:52:10.346485 32137 net.cpp:86] Creating Layer relu1
I0426 20:52:10.346488 32137 net.cpp:408] relu1 <- ip1
I0426 20:52:10.346493 32137 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:52:10.346696 32137 net.cpp:124] Setting up relu1
I0426 20:52:10.346704 32137 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:10.346709 32137 net.cpp:139] Memory required for data: 7914800
I0426 20:52:10.346711 32137 layer_factory.hpp:77] Creating layer ip2
I0426 20:52:10.346719 32137 net.cpp:86] Creating Layer ip2
I0426 20:52:10.346721 32137 net.cpp:408] ip2 <- ip1
I0426 20:52:10.346726 32137 net.cpp:382] ip2 -> ip2
I0426 20:52:10.346863 32137 net.cpp:124] Setting up ip2
I0426 20:52:10.346869 32137 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:10.346873 32137 net.cpp:139] Memory required for data: 7954800
I0426 20:52:10.346879 32137 layer_factory.hpp:77] Creating layer relu2
I0426 20:52:10.346882 32137 net.cpp:86] Creating Layer relu2
I0426 20:52:10.346892 32137 net.cpp:408] relu2 <- ip2
I0426 20:52:10.346896 32137 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:52:10.347033 32137 net.cpp:124] Setting up relu2
I0426 20:52:10.347040 32137 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:52:10.347050 32137 net.cpp:139] Memory required for data: 7994800
I0426 20:52:10.347054 32137 layer_factory.hpp:77] Creating layer ip3
I0426 20:52:10.347059 32137 net.cpp:86] Creating Layer ip3
I0426 20:52:10.347067 32137 net.cpp:408] ip3 <- ip2
I0426 20:52:10.347071 32137 net.cpp:382] ip3 -> ip3
I0426 20:52:10.347185 32137 net.cpp:124] Setting up ip3
I0426 20:52:10.347193 32137 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:10.347196 32137 net.cpp:139] Memory required for data: 7998800
I0426 20:52:10.347203 32137 layer_factory.hpp:77] Creating layer relu3
I0426 20:52:10.347208 32137 net.cpp:86] Creating Layer relu3
I0426 20:52:10.347211 32137 net.cpp:408] relu3 <- ip3
I0426 20:52:10.347215 32137 net.cpp:369] relu3 -> ip3 (in-place)
I0426 20:52:10.348078 32137 net.cpp:124] Setting up relu3
I0426 20:52:10.348089 32137 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:10.348099 32137 net.cpp:139] Memory required for data: 8002800
I0426 20:52:10.348104 32137 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0426 20:52:10.348109 32137 net.cpp:86] Creating Layer ip3_relu3_0_split
I0426 20:52:10.348111 32137 net.cpp:408] ip3_relu3_0_split <- ip3
I0426 20:52:10.348116 32137 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0426 20:52:10.348122 32137 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0426 20:52:10.348202 32137 net.cpp:124] Setting up ip3_relu3_0_split
I0426 20:52:10.348208 32137 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:10.348212 32137 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:52:10.348214 32137 net.cpp:139] Memory required for data: 8010800
I0426 20:52:10.348217 32137 layer_factory.hpp:77] Creating layer accuracy
I0426 20:52:10.348222 32137 net.cpp:86] Creating Layer accuracy
I0426 20:52:10.348227 32137 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0426 20:52:10.348232 32137 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:52:10.348235 32137 net.cpp:382] accuracy -> accuracy
I0426 20:52:10.348242 32137 net.cpp:124] Setting up accuracy
I0426 20:52:10.348247 32137 net.cpp:131] Top shape: (1)
I0426 20:52:10.348248 32137 net.cpp:139] Memory required for data: 8010804
I0426 20:52:10.348251 32137 layer_factory.hpp:77] Creating layer loss
I0426 20:52:10.348255 32137 net.cpp:86] Creating Layer loss
I0426 20:52:10.348258 32137 net.cpp:408] loss <- ip3_relu3_0_split_1
I0426 20:52:10.348263 32137 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:52:10.348266 32137 net.cpp:382] loss -> loss
I0426 20:52:10.348271 32137 layer_factory.hpp:77] Creating layer loss
I0426 20:52:10.348498 32137 net.cpp:124] Setting up loss
I0426 20:52:10.348507 32137 net.cpp:131] Top shape: (1)
I0426 20:52:10.348518 32137 net.cpp:134]     with loss weight 1
I0426 20:52:10.348532 32137 net.cpp:139] Memory required for data: 8010808
I0426 20:52:10.348536 32137 net.cpp:200] loss needs backward computation.
I0426 20:52:10.348546 32137 net.cpp:202] accuracy does not need backward computation.
I0426 20:52:10.348549 32137 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0426 20:52:10.348552 32137 net.cpp:200] relu3 needs backward computation.
I0426 20:52:10.348556 32137 net.cpp:200] ip3 needs backward computation.
I0426 20:52:10.348558 32137 net.cpp:200] relu2 needs backward computation.
I0426 20:52:10.348562 32137 net.cpp:200] ip2 needs backward computation.
I0426 20:52:10.348564 32137 net.cpp:200] relu1 needs backward computation.
I0426 20:52:10.348567 32137 net.cpp:200] ip1 needs backward computation.
I0426 20:52:10.348570 32137 net.cpp:200] pool1 needs backward computation.
I0426 20:52:10.348573 32137 net.cpp:200] conv1 needs backward computation.
I0426 20:52:10.348582 32137 net.cpp:200] pool0 needs backward computation.
I0426 20:52:10.348585 32137 net.cpp:200] conv0 needs backward computation.
I0426 20:52:10.348588 32137 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:52:10.348598 32137 net.cpp:202] mnist does not need backward computation.
I0426 20:52:10.348600 32137 net.cpp:244] This network produces output accuracy
I0426 20:52:10.348603 32137 net.cpp:244] This network produces output loss
I0426 20:52:10.348613 32137 net.cpp:257] Network initialization done.
I0426 20:52:10.348651 32137 solver.cpp:56] Solver scaffolding done.
I0426 20:52:10.348973 32137 caffe.cpp:248] Starting Optimization
I0426 20:52:10.348980 32137 solver.cpp:273] Solving LeNet
I0426 20:52:10.348984 32137 solver.cpp:274] Learning Rate Policy: inv
I0426 20:52:10.349887 32137 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:52:10.355181 32137 blocking_queue.cpp:49] Waiting for data
I0426 20:52:10.424468 32144 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:10.425135 32137 solver.cpp:398]     Test net output #0: accuracy = 0.1323
I0426 20:52:10.425154 32137 solver.cpp:398]     Test net output #1: loss = 2.30016 (* 1 = 2.30016 loss)
I0426 20:52:10.428882 32137 solver.cpp:219] Iteration 0 (2.85004 iter/s, 0.0798756s/100 iters), loss = 2.30477
I0426 20:52:10.428907 32137 solver.cpp:238]     Train net output #0: loss = 2.30477 (* 1 = 2.30477 loss)
I0426 20:52:10.428918 32137 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:52:10.539151 32137 solver.cpp:219] Iteration 100 (907.165 iter/s, 0.110233s/100 iters), loss = 0.517211
I0426 20:52:10.539192 32137 solver.cpp:238]     Train net output #0: loss = 0.517211 (* 1 = 0.517211 loss)
I0426 20:52:10.539198 32137 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:52:10.643784 32137 solver.cpp:219] Iteration 200 (956.044 iter/s, 0.104598s/100 iters), loss = 0.387303
I0426 20:52:10.643826 32137 solver.cpp:238]     Train net output #0: loss = 0.387303 (* 1 = 0.387303 loss)
I0426 20:52:10.643833 32137 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:52:10.752831 32137 solver.cpp:219] Iteration 300 (917.459 iter/s, 0.108997s/100 iters), loss = 0.138811
I0426 20:52:10.752872 32137 solver.cpp:238]     Train net output #0: loss = 0.138811 (* 1 = 0.138811 loss)
I0426 20:52:10.752878 32137 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:52:10.857131 32137 solver.cpp:219] Iteration 400 (959.248 iter/s, 0.104248s/100 iters), loss = 0.124095
I0426 20:52:10.857169 32137 solver.cpp:238]     Train net output #0: loss = 0.124095 (* 1 = 0.124095 loss)
I0426 20:52:10.857175 32137 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:52:10.958886 32137 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:52:11.034804 32144 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:11.035470 32137 solver.cpp:398]     Test net output #0: accuracy = 0.9653
I0426 20:52:11.035490 32137 solver.cpp:398]     Test net output #1: loss = 0.111908 (* 1 = 0.111908 loss)
I0426 20:52:11.036469 32137 solver.cpp:219] Iteration 500 (557.72 iter/s, 0.179301s/100 iters), loss = 0.089886
I0426 20:52:11.036559 32137 solver.cpp:238]     Train net output #0: loss = 0.0898861 (* 1 = 0.0898861 loss)
I0426 20:52:11.036571 32137 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:52:11.141319 32137 solver.cpp:219] Iteration 600 (954.261 iter/s, 0.104793s/100 iters), loss = 0.124787
I0426 20:52:11.141361 32137 solver.cpp:238]     Train net output #0: loss = 0.124787 (* 1 = 0.124787 loss)
I0426 20:52:11.141368 32137 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:52:11.244835 32137 solver.cpp:219] Iteration 700 (966.528 iter/s, 0.103463s/100 iters), loss = 0.129212
I0426 20:52:11.244877 32137 solver.cpp:238]     Train net output #0: loss = 0.129212 (* 1 = 0.129212 loss)
I0426 20:52:11.244884 32137 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:52:11.346382 32137 solver.cpp:219] Iteration 800 (985.281 iter/s, 0.101494s/100 iters), loss = 0.246146
I0426 20:52:11.346422 32137 solver.cpp:238]     Train net output #0: loss = 0.246146 (* 1 = 0.246146 loss)
I0426 20:52:11.346429 32137 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:52:11.448350 32137 solver.cpp:219] Iteration 900 (981.184 iter/s, 0.101918s/100 iters), loss = 0.161941
I0426 20:52:11.448388 32137 solver.cpp:238]     Train net output #0: loss = 0.161941 (* 1 = 0.161941 loss)
I0426 20:52:11.448395 32137 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:52:11.483127 32143 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:11.550663 32137 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:52:11.551874 32137 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:52:11.552696 32137 solver.cpp:311] Iteration 1000, loss = 0.0849998
I0426 20:52:11.552726 32137 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:52:11.627591 32144 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:52:11.628218 32137 solver.cpp:398]     Test net output #0: accuracy = 0.9765
I0426 20:52:11.628237 32137 solver.cpp:398]     Test net output #1: loss = 0.0734302 (* 1 = 0.0734302 loss)
I0426 20:52:11.628242 32137 solver.cpp:316] Optimization Done.
I0426 20:52:11.628243 32137 caffe.cpp:259] Optimization Done.
