I0426 20:50:52.095206 31854 caffe.cpp:218] Using GPUs 0
I0426 20:50:52.124542 31854 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:52.581964 31854 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test72.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:52.582082 31854 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test72.prototxt
I0426 20:50:52.582417 31854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:52.582432 31854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:52.582507 31854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:52.582573 31854 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:52.582662 31854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:52.582681 31854 net.cpp:86] Creating Layer mnist
I0426 20:50:52.582690 31854 net.cpp:382] mnist -> data
I0426 20:50:52.582707 31854 net.cpp:382] mnist -> label
I0426 20:50:52.583633 31854 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:52.585842 31854 net.cpp:124] Setting up mnist
I0426 20:50:52.585889 31854 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:52.585894 31854 net.cpp:131] Top shape: 64 (64)
I0426 20:50:52.585897 31854 net.cpp:139] Memory required for data: 200960
I0426 20:50:52.585902 31854 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:52.585917 31854 net.cpp:86] Creating Layer conv0
I0426 20:50:52.585922 31854 net.cpp:408] conv0 <- data
I0426 20:50:52.585932 31854 net.cpp:382] conv0 -> conv0
I0426 20:50:52.816186 31854 net.cpp:124] Setting up conv0
I0426 20:50:52.816228 31854 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:52.816231 31854 net.cpp:139] Memory required for data: 1675520
I0426 20:50:52.816264 31854 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:52.816293 31854 net.cpp:86] Creating Layer pool0
I0426 20:50:52.816296 31854 net.cpp:408] pool0 <- conv0
I0426 20:50:52.816301 31854 net.cpp:382] pool0 -> pool0
I0426 20:50:52.816347 31854 net.cpp:124] Setting up pool0
I0426 20:50:52.816361 31854 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:52.816365 31854 net.cpp:139] Memory required for data: 2044160
I0426 20:50:52.816367 31854 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:52.816377 31854 net.cpp:86] Creating Layer conv1
I0426 20:50:52.816380 31854 net.cpp:408] conv1 <- pool0
I0426 20:50:52.816385 31854 net.cpp:382] conv1 -> conv1
I0426 20:50:52.819130 31854 net.cpp:124] Setting up conv1
I0426 20:50:52.819175 31854 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:50:52.819178 31854 net.cpp:139] Memory required for data: 2453760
I0426 20:50:52.819186 31854 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:52.819193 31854 net.cpp:86] Creating Layer pool1
I0426 20:50:52.819196 31854 net.cpp:408] pool1 <- conv1
I0426 20:50:52.819201 31854 net.cpp:382] pool1 -> pool1
I0426 20:50:52.819252 31854 net.cpp:124] Setting up pool1
I0426 20:50:52.819258 31854 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:50:52.819260 31854 net.cpp:139] Memory required for data: 2556160
I0426 20:50:52.819263 31854 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:52.819272 31854 net.cpp:86] Creating Layer ip1
I0426 20:50:52.819273 31854 net.cpp:408] ip1 <- pool1
I0426 20:50:52.819278 31854 net.cpp:382] ip1 -> ip1
I0426 20:50:52.819603 31854 net.cpp:124] Setting up ip1
I0426 20:50:52.819612 31854 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:52.819624 31854 net.cpp:139] Memory required for data: 2581760
I0426 20:50:52.819631 31854 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:52.819638 31854 net.cpp:86] Creating Layer relu1
I0426 20:50:52.819640 31854 net.cpp:408] relu1 <- ip1
I0426 20:50:52.819644 31854 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:52.819803 31854 net.cpp:124] Setting up relu1
I0426 20:50:52.819813 31854 net.cpp:131] Top shape: 64 100 (6400)
I0426 20:50:52.819815 31854 net.cpp:139] Memory required for data: 2607360
I0426 20:50:52.819818 31854 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:52.819824 31854 net.cpp:86] Creating Layer ip2
I0426 20:50:52.819828 31854 net.cpp:408] ip2 <- ip1
I0426 20:50:52.819831 31854 net.cpp:382] ip2 -> ip2
I0426 20:50:52.819927 31854 net.cpp:124] Setting up ip2
I0426 20:50:52.819934 31854 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:52.819937 31854 net.cpp:139] Memory required for data: 2609920
I0426 20:50:52.819942 31854 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:52.819948 31854 net.cpp:86] Creating Layer relu2
I0426 20:50:52.819952 31854 net.cpp:408] relu2 <- ip2
I0426 20:50:52.819955 31854 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:52.820709 31854 net.cpp:124] Setting up relu2
I0426 20:50:52.820721 31854 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:52.820725 31854 net.cpp:139] Memory required for data: 2612480
I0426 20:50:52.820729 31854 layer_factory.hpp:77] Creating layer loss
I0426 20:50:52.820734 31854 net.cpp:86] Creating Layer loss
I0426 20:50:52.820737 31854 net.cpp:408] loss <- ip2
I0426 20:50:52.820741 31854 net.cpp:408] loss <- label
I0426 20:50:52.820746 31854 net.cpp:382] loss -> loss
I0426 20:50:52.820762 31854 layer_factory.hpp:77] Creating layer loss
I0426 20:50:52.821024 31854 net.cpp:124] Setting up loss
I0426 20:50:52.821035 31854 net.cpp:131] Top shape: (1)
I0426 20:50:52.821038 31854 net.cpp:134]     with loss weight 1
I0426 20:50:52.821053 31854 net.cpp:139] Memory required for data: 2612484
I0426 20:50:52.821056 31854 net.cpp:200] loss needs backward computation.
I0426 20:50:52.821059 31854 net.cpp:200] relu2 needs backward computation.
I0426 20:50:52.821063 31854 net.cpp:200] ip2 needs backward computation.
I0426 20:50:52.821065 31854 net.cpp:200] relu1 needs backward computation.
I0426 20:50:52.821069 31854 net.cpp:200] ip1 needs backward computation.
I0426 20:50:52.821080 31854 net.cpp:200] pool1 needs backward computation.
I0426 20:50:52.821084 31854 net.cpp:200] conv1 needs backward computation.
I0426 20:50:52.821086 31854 net.cpp:200] pool0 needs backward computation.
I0426 20:50:52.821089 31854 net.cpp:200] conv0 needs backward computation.
I0426 20:50:52.821092 31854 net.cpp:202] mnist does not need backward computation.
I0426 20:50:52.821095 31854 net.cpp:244] This network produces output loss
I0426 20:50:52.821105 31854 net.cpp:257] Network initialization done.
I0426 20:50:52.821395 31854 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test72.prototxt
I0426 20:50:52.821421 31854 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:52.821503 31854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0426 20:50:52.821566 31854 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:52.821610 31854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:52.821621 31854 net.cpp:86] Creating Layer mnist
I0426 20:50:52.821627 31854 net.cpp:382] mnist -> data
I0426 20:50:52.821635 31854 net.cpp:382] mnist -> label
I0426 20:50:52.821718 31854 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:52.823736 31854 net.cpp:124] Setting up mnist
I0426 20:50:52.823750 31854 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:52.823755 31854 net.cpp:131] Top shape: 100 (100)
I0426 20:50:52.823757 31854 net.cpp:139] Memory required for data: 314000
I0426 20:50:52.823760 31854 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:52.823782 31854 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:52.823786 31854 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:52.823791 31854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:52.823798 31854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:52.823845 31854 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:52.823863 31854 net.cpp:131] Top shape: 100 (100)
I0426 20:50:52.823866 31854 net.cpp:131] Top shape: 100 (100)
I0426 20:50:52.823869 31854 net.cpp:139] Memory required for data: 314800
I0426 20:50:52.823873 31854 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:52.823881 31854 net.cpp:86] Creating Layer conv0
I0426 20:50:52.823884 31854 net.cpp:408] conv0 <- data
I0426 20:50:52.823889 31854 net.cpp:382] conv0 -> conv0
I0426 20:50:52.825705 31854 net.cpp:124] Setting up conv0
I0426 20:50:52.825733 31854 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:52.825736 31854 net.cpp:139] Memory required for data: 2618800
I0426 20:50:52.825745 31854 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:52.825752 31854 net.cpp:86] Creating Layer pool0
I0426 20:50:52.825754 31854 net.cpp:408] pool0 <- conv0
I0426 20:50:52.825760 31854 net.cpp:382] pool0 -> pool0
I0426 20:50:52.825811 31854 net.cpp:124] Setting up pool0
I0426 20:50:52.825817 31854 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:52.825820 31854 net.cpp:139] Memory required for data: 3194800
I0426 20:50:52.825822 31854 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:52.825834 31854 net.cpp:86] Creating Layer conv1
I0426 20:50:52.825836 31854 net.cpp:408] conv1 <- pool0
I0426 20:50:52.825841 31854 net.cpp:382] conv1 -> conv1
I0426 20:50:52.828169 31854 net.cpp:124] Setting up conv1
I0426 20:50:52.828181 31854 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:50:52.828200 31854 net.cpp:139] Memory required for data: 3834800
I0426 20:50:52.828209 31854 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:52.828217 31854 net.cpp:86] Creating Layer pool1
I0426 20:50:52.828219 31854 net.cpp:408] pool1 <- conv1
I0426 20:50:52.828225 31854 net.cpp:382] pool1 -> pool1
I0426 20:50:52.828290 31854 net.cpp:124] Setting up pool1
I0426 20:50:52.828296 31854 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:50:52.828299 31854 net.cpp:139] Memory required for data: 3994800
I0426 20:50:52.828301 31854 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:52.828308 31854 net.cpp:86] Creating Layer ip1
I0426 20:50:52.828311 31854 net.cpp:408] ip1 <- pool1
I0426 20:50:52.828317 31854 net.cpp:382] ip1 -> ip1
I0426 20:50:52.828682 31854 net.cpp:124] Setting up ip1
I0426 20:50:52.828691 31854 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:52.828708 31854 net.cpp:139] Memory required for data: 4034800
I0426 20:50:52.828716 31854 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:52.828722 31854 net.cpp:86] Creating Layer relu1
I0426 20:50:52.828724 31854 net.cpp:408] relu1 <- ip1
I0426 20:50:52.828730 31854 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:52.828955 31854 net.cpp:124] Setting up relu1
I0426 20:50:52.828966 31854 net.cpp:131] Top shape: 100 100 (10000)
I0426 20:50:52.828970 31854 net.cpp:139] Memory required for data: 4074800
I0426 20:50:52.828974 31854 layer_factory.hpp:77] Creating layer ip2
I0426 20:50:52.828982 31854 net.cpp:86] Creating Layer ip2
I0426 20:50:52.828987 31854 net.cpp:408] ip2 <- ip1
I0426 20:50:52.828994 31854 net.cpp:382] ip2 -> ip2
I0426 20:50:52.829114 31854 net.cpp:124] Setting up ip2
I0426 20:50:52.829123 31854 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:52.829125 31854 net.cpp:139] Memory required for data: 4078800
I0426 20:50:52.829133 31854 layer_factory.hpp:77] Creating layer relu2
I0426 20:50:52.829138 31854 net.cpp:86] Creating Layer relu2
I0426 20:50:52.829143 31854 net.cpp:408] relu2 <- ip2
I0426 20:50:52.829147 31854 net.cpp:369] relu2 -> ip2 (in-place)
I0426 20:50:52.829397 31854 net.cpp:124] Setting up relu2
I0426 20:50:52.829406 31854 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:52.829409 31854 net.cpp:139] Memory required for data: 4082800
I0426 20:50:52.829413 31854 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0426 20:50:52.829419 31854 net.cpp:86] Creating Layer ip2_relu2_0_split
I0426 20:50:52.829423 31854 net.cpp:408] ip2_relu2_0_split <- ip2
I0426 20:50:52.829427 31854 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0426 20:50:52.829443 31854 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0426 20:50:52.829501 31854 net.cpp:124] Setting up ip2_relu2_0_split
I0426 20:50:52.829507 31854 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:52.829511 31854 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:52.829514 31854 net.cpp:139] Memory required for data: 4090800
I0426 20:50:52.829517 31854 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:52.829522 31854 net.cpp:86] Creating Layer accuracy
I0426 20:50:52.829525 31854 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0426 20:50:52.829530 31854 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:52.829535 31854 net.cpp:382] accuracy -> accuracy
I0426 20:50:52.829541 31854 net.cpp:124] Setting up accuracy
I0426 20:50:52.829545 31854 net.cpp:131] Top shape: (1)
I0426 20:50:52.829550 31854 net.cpp:139] Memory required for data: 4090804
I0426 20:50:52.829552 31854 layer_factory.hpp:77] Creating layer loss
I0426 20:50:52.829556 31854 net.cpp:86] Creating Layer loss
I0426 20:50:52.829560 31854 net.cpp:408] loss <- ip2_relu2_0_split_1
I0426 20:50:52.829563 31854 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:52.829568 31854 net.cpp:382] loss -> loss
I0426 20:50:52.829576 31854 layer_factory.hpp:77] Creating layer loss
I0426 20:50:52.829857 31854 net.cpp:124] Setting up loss
I0426 20:50:52.829869 31854 net.cpp:131] Top shape: (1)
I0426 20:50:52.829871 31854 net.cpp:134]     with loss weight 1
I0426 20:50:52.829877 31854 net.cpp:139] Memory required for data: 4090808
I0426 20:50:52.829881 31854 net.cpp:200] loss needs backward computation.
I0426 20:50:52.829885 31854 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:52.829890 31854 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0426 20:50:52.829892 31854 net.cpp:200] relu2 needs backward computation.
I0426 20:50:52.829895 31854 net.cpp:200] ip2 needs backward computation.
I0426 20:50:52.829898 31854 net.cpp:200] relu1 needs backward computation.
I0426 20:50:52.829901 31854 net.cpp:200] ip1 needs backward computation.
I0426 20:50:52.829905 31854 net.cpp:200] pool1 needs backward computation.
I0426 20:50:52.829907 31854 net.cpp:200] conv1 needs backward computation.
I0426 20:50:52.829911 31854 net.cpp:200] pool0 needs backward computation.
I0426 20:50:52.829915 31854 net.cpp:200] conv0 needs backward computation.
I0426 20:50:52.829918 31854 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:52.829922 31854 net.cpp:202] mnist does not need backward computation.
I0426 20:50:52.829926 31854 net.cpp:244] This network produces output accuracy
I0426 20:50:52.829928 31854 net.cpp:244] This network produces output loss
I0426 20:50:52.829939 31854 net.cpp:257] Network initialization done.
I0426 20:50:52.829978 31854 solver.cpp:56] Solver scaffolding done.
I0426 20:50:52.830283 31854 caffe.cpp:248] Starting Optimization
I0426 20:50:52.830291 31854 solver.cpp:273] Solving LeNet
I0426 20:50:52.830293 31854 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:52.831241 31854 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:52.835105 31854 blocking_queue.cpp:49] Waiting for data
I0426 20:50:52.906560 31861 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:52.907219 31854 solver.cpp:398]     Test net output #0: accuracy = 0.0721
I0426 20:50:52.907274 31854 solver.cpp:398]     Test net output #1: loss = 2.33249 (* 1 = 2.33249 loss)
I0426 20:50:52.909859 31854 solver.cpp:219] Iteration 0 (0 iter/s, 0.0795405s/100 iters), loss = 2.34625
I0426 20:50:52.909896 31854 solver.cpp:238]     Train net output #0: loss = 2.34625 (* 1 = 2.34625 loss)
I0426 20:50:52.909909 31854 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:53.010488 31854 solver.cpp:219] Iteration 100 (994.238 iter/s, 0.100579s/100 iters), loss = 0.15956
I0426 20:50:53.010529 31854 solver.cpp:238]     Train net output #0: loss = 0.15956 (* 1 = 0.15956 loss)
I0426 20:50:53.010550 31854 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:53.105649 31854 solver.cpp:219] Iteration 200 (1051.4 iter/s, 0.095111s/100 iters), loss = 0.17187
I0426 20:50:53.105706 31854 solver.cpp:238]     Train net output #0: loss = 0.17187 (* 1 = 0.17187 loss)
I0426 20:50:53.105715 31854 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:53.197980 31854 solver.cpp:219] Iteration 300 (1083.84 iter/s, 0.0922646s/100 iters), loss = 0.177685
I0426 20:50:53.198022 31854 solver.cpp:238]     Train net output #0: loss = 0.177685 (* 1 = 0.177685 loss)
I0426 20:50:53.198029 31854 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:53.285697 31854 solver.cpp:219] Iteration 400 (1140.7 iter/s, 0.0876658s/100 iters), loss = 0.123384
I0426 20:50:53.285738 31854 solver.cpp:238]     Train net output #0: loss = 0.123384 (* 1 = 0.123384 loss)
I0426 20:50:53.285744 31854 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:53.372200 31854 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:53.447684 31861 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:53.448300 31854 solver.cpp:398]     Test net output #0: accuracy = 0.9646
I0426 20:50:53.448336 31854 solver.cpp:398]     Test net output #1: loss = 0.112302 (* 1 = 0.112302 loss)
I0426 20:50:53.449326 31854 solver.cpp:219] Iteration 500 (611.28 iter/s, 0.163591s/100 iters), loss = 0.116616
I0426 20:50:53.449374 31854 solver.cpp:238]     Train net output #0: loss = 0.116616 (* 1 = 0.116616 loss)
I0426 20:50:53.449383 31854 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:53.547206 31854 solver.cpp:219] Iteration 600 (1022.27 iter/s, 0.0978217s/100 iters), loss = 0.136027
I0426 20:50:53.547233 31854 solver.cpp:238]     Train net output #0: loss = 0.136027 (* 1 = 0.136027 loss)
I0426 20:50:53.547240 31854 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:53.634802 31854 solver.cpp:219] Iteration 700 (1142.08 iter/s, 0.0875592s/100 iters), loss = 0.186156
I0426 20:50:53.634827 31854 solver.cpp:238]     Train net output #0: loss = 0.186156 (* 1 = 0.186156 loss)
I0426 20:50:53.634834 31854 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:53.722280 31854 solver.cpp:219] Iteration 800 (1143.61 iter/s, 0.0874424s/100 iters), loss = 0.203845
I0426 20:50:53.722321 31854 solver.cpp:238]     Train net output #0: loss = 0.203845 (* 1 = 0.203845 loss)
I0426 20:50:53.722326 31854 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:53.809919 31854 solver.cpp:219] Iteration 900 (1141.68 iter/s, 0.0875901s/100 iters), loss = 0.229894
I0426 20:50:53.809959 31854 solver.cpp:238]     Train net output #0: loss = 0.229895 (* 1 = 0.229895 loss)
I0426 20:50:53.809965 31854 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:53.839220 31860 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:53.896402 31854 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:53.897801 31854 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:53.898566 31854 solver.cpp:311] Iteration 1000, loss = 0.142459
I0426 20:50:53.898581 31854 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:53.974510 31861 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:53.975129 31854 solver.cpp:398]     Test net output #0: accuracy = 0.9778
I0426 20:50:53.975165 31854 solver.cpp:398]     Test net output #1: loss = 0.0668867 (* 1 = 0.0668867 loss)
I0426 20:50:53.975172 31854 solver.cpp:316] Optimization Done.
I0426 20:50:53.975174 31854 caffe.cpp:259] Optimization Done.
