I0426 20:50:48.130964 31836 caffe.cpp:218] Using GPUs 0
I0426 20:50:48.159906 31836 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0426 20:50:48.613229 31836 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything/lenet_train_test70.prototxt"
train_state {
  level: 0
  stage: ""
}
I0426 20:50:48.613394 31836 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything/lenet_train_test70.prototxt
I0426 20:50:48.613698 31836 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0426 20:50:48.613728 31836 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0426 20:50:48.613822 31836 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:50:48.613898 31836 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:48.613999 31836 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0426 20:50:48.614020 31836 net.cpp:86] Creating Layer mnist
I0426 20:50:48.614028 31836 net.cpp:382] mnist -> data
I0426 20:50:48.614048 31836 net.cpp:382] mnist -> label
I0426 20:50:48.615018 31836 data_layer.cpp:45] output data size: 64,1,28,28
I0426 20:50:48.617240 31836 net.cpp:124] Setting up mnist
I0426 20:50:48.617270 31836 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0426 20:50:48.617276 31836 net.cpp:131] Top shape: 64 (64)
I0426 20:50:48.617280 31836 net.cpp:139] Memory required for data: 200960
I0426 20:50:48.617285 31836 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:48.617317 31836 net.cpp:86] Creating Layer conv0
I0426 20:50:48.617322 31836 net.cpp:408] conv0 <- data
I0426 20:50:48.617334 31836 net.cpp:382] conv0 -> conv0
I0426 20:50:48.843967 31836 net.cpp:124] Setting up conv0
I0426 20:50:48.843997 31836 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0426 20:50:48.844000 31836 net.cpp:139] Memory required for data: 1675520
I0426 20:50:48.844015 31836 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:48.844043 31836 net.cpp:86] Creating Layer pool0
I0426 20:50:48.844048 31836 net.cpp:408] pool0 <- conv0
I0426 20:50:48.844054 31836 net.cpp:382] pool0 -> pool0
I0426 20:50:48.844117 31836 net.cpp:124] Setting up pool0
I0426 20:50:48.844125 31836 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0426 20:50:48.844147 31836 net.cpp:139] Memory required for data: 2044160
I0426 20:50:48.844152 31836 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:48.844182 31836 net.cpp:86] Creating Layer conv1
I0426 20:50:48.844188 31836 net.cpp:408] conv1 <- pool0
I0426 20:50:48.844194 31836 net.cpp:382] conv1 -> conv1
I0426 20:50:48.846927 31836 net.cpp:124] Setting up conv1
I0426 20:50:48.846956 31836 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0426 20:50:48.846961 31836 net.cpp:139] Memory required for data: 2453760
I0426 20:50:48.846984 31836 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:48.846992 31836 net.cpp:86] Creating Layer pool1
I0426 20:50:48.846995 31836 net.cpp:408] pool1 <- conv1
I0426 20:50:48.847017 31836 net.cpp:382] pool1 -> pool1
I0426 20:50:48.847053 31836 net.cpp:124] Setting up pool1
I0426 20:50:48.847059 31836 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0426 20:50:48.847064 31836 net.cpp:139] Memory required for data: 2556160
I0426 20:50:48.847066 31836 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:48.847074 31836 net.cpp:86] Creating Layer ip1
I0426 20:50:48.847077 31836 net.cpp:408] ip1 <- pool1
I0426 20:50:48.847082 31836 net.cpp:382] ip1 -> ip1
I0426 20:50:48.848063 31836 net.cpp:124] Setting up ip1
I0426 20:50:48.848091 31836 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:48.848095 31836 net.cpp:139] Memory required for data: 2558720
I0426 20:50:48.848104 31836 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:48.848110 31836 net.cpp:86] Creating Layer relu1
I0426 20:50:48.848114 31836 net.cpp:408] relu1 <- ip1
I0426 20:50:48.848135 31836 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:48.848315 31836 net.cpp:124] Setting up relu1
I0426 20:50:48.848325 31836 net.cpp:131] Top shape: 64 10 (640)
I0426 20:50:48.848330 31836 net.cpp:139] Memory required for data: 2561280
I0426 20:50:48.848333 31836 layer_factory.hpp:77] Creating layer loss
I0426 20:50:48.848340 31836 net.cpp:86] Creating Layer loss
I0426 20:50:48.848342 31836 net.cpp:408] loss <- ip1
I0426 20:50:48.848347 31836 net.cpp:408] loss <- label
I0426 20:50:48.848353 31836 net.cpp:382] loss -> loss
I0426 20:50:48.848371 31836 layer_factory.hpp:77] Creating layer loss
I0426 20:50:48.849294 31836 net.cpp:124] Setting up loss
I0426 20:50:48.849323 31836 net.cpp:131] Top shape: (1)
I0426 20:50:48.849326 31836 net.cpp:134]     with loss weight 1
I0426 20:50:48.849341 31836 net.cpp:139] Memory required for data: 2561284
I0426 20:50:48.849345 31836 net.cpp:200] loss needs backward computation.
I0426 20:50:48.849349 31836 net.cpp:200] relu1 needs backward computation.
I0426 20:50:48.849352 31836 net.cpp:200] ip1 needs backward computation.
I0426 20:50:48.849355 31836 net.cpp:200] pool1 needs backward computation.
I0426 20:50:48.849359 31836 net.cpp:200] conv1 needs backward computation.
I0426 20:50:48.849362 31836 net.cpp:200] pool0 needs backward computation.
I0426 20:50:48.849366 31836 net.cpp:200] conv0 needs backward computation.
I0426 20:50:48.849370 31836 net.cpp:202] mnist does not need backward computation.
I0426 20:50:48.849373 31836 net.cpp:244] This network produces output loss
I0426 20:50:48.849380 31836 net.cpp:257] Network initialization done.
I0426 20:50:48.849647 31836 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything/lenet_train_test70.prototxt
I0426 20:50:48.849670 31836 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0426 20:50:48.849742 31836 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0426 20:50:48.849810 31836 layer_factory.hpp:77] Creating layer mnist
I0426 20:50:48.849851 31836 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0426 20:50:48.849867 31836 net.cpp:86] Creating Layer mnist
I0426 20:50:48.849872 31836 net.cpp:382] mnist -> data
I0426 20:50:48.849880 31836 net.cpp:382] mnist -> label
I0426 20:50:48.849977 31836 data_layer.cpp:45] output data size: 100,1,28,28
I0426 20:50:48.851923 31836 net.cpp:124] Setting up mnist
I0426 20:50:48.851936 31836 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0426 20:50:48.851941 31836 net.cpp:131] Top shape: 100 (100)
I0426 20:50:48.851944 31836 net.cpp:139] Memory required for data: 314000
I0426 20:50:48.851948 31836 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0426 20:50:48.851955 31836 net.cpp:86] Creating Layer label_mnist_1_split
I0426 20:50:48.851969 31836 net.cpp:408] label_mnist_1_split <- label
I0426 20:50:48.851974 31836 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0426 20:50:48.851982 31836 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0426 20:50:48.852035 31836 net.cpp:124] Setting up label_mnist_1_split
I0426 20:50:48.852056 31836 net.cpp:131] Top shape: 100 (100)
I0426 20:50:48.852061 31836 net.cpp:131] Top shape: 100 (100)
I0426 20:50:48.852066 31836 net.cpp:139] Memory required for data: 314800
I0426 20:50:48.852068 31836 layer_factory.hpp:77] Creating layer conv0
I0426 20:50:48.852077 31836 net.cpp:86] Creating Layer conv0
I0426 20:50:48.852082 31836 net.cpp:408] conv0 <- data
I0426 20:50:48.852087 31836 net.cpp:382] conv0 -> conv0
I0426 20:50:48.853149 31836 net.cpp:124] Setting up conv0
I0426 20:50:48.853191 31836 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0426 20:50:48.853195 31836 net.cpp:139] Memory required for data: 2618800
I0426 20:50:48.853219 31836 layer_factory.hpp:77] Creating layer pool0
I0426 20:50:48.853241 31836 net.cpp:86] Creating Layer pool0
I0426 20:50:48.853245 31836 net.cpp:408] pool0 <- conv0
I0426 20:50:48.853250 31836 net.cpp:382] pool0 -> pool0
I0426 20:50:48.853284 31836 net.cpp:124] Setting up pool0
I0426 20:50:48.853292 31836 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0426 20:50:48.853296 31836 net.cpp:139] Memory required for data: 3194800
I0426 20:50:48.853299 31836 layer_factory.hpp:77] Creating layer conv1
I0426 20:50:48.853307 31836 net.cpp:86] Creating Layer conv1
I0426 20:50:48.853312 31836 net.cpp:408] conv1 <- pool0
I0426 20:50:48.853333 31836 net.cpp:382] conv1 -> conv1
I0426 20:50:48.855418 31836 net.cpp:124] Setting up conv1
I0426 20:50:48.855446 31836 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0426 20:50:48.855450 31836 net.cpp:139] Memory required for data: 3834800
I0426 20:50:48.855458 31836 layer_factory.hpp:77] Creating layer pool1
I0426 20:50:48.855481 31836 net.cpp:86] Creating Layer pool1
I0426 20:50:48.855495 31836 net.cpp:408] pool1 <- conv1
I0426 20:50:48.855502 31836 net.cpp:382] pool1 -> pool1
I0426 20:50:48.855597 31836 net.cpp:124] Setting up pool1
I0426 20:50:48.855607 31836 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0426 20:50:48.855610 31836 net.cpp:139] Memory required for data: 3994800
I0426 20:50:48.855623 31836 layer_factory.hpp:77] Creating layer ip1
I0426 20:50:48.855629 31836 net.cpp:86] Creating Layer ip1
I0426 20:50:48.855633 31836 net.cpp:408] ip1 <- pool1
I0426 20:50:48.855638 31836 net.cpp:382] ip1 -> ip1
I0426 20:50:48.855772 31836 net.cpp:124] Setting up ip1
I0426 20:50:48.855780 31836 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:48.855784 31836 net.cpp:139] Memory required for data: 3998800
I0426 20:50:48.855792 31836 layer_factory.hpp:77] Creating layer relu1
I0426 20:50:48.855798 31836 net.cpp:86] Creating Layer relu1
I0426 20:50:48.855803 31836 net.cpp:408] relu1 <- ip1
I0426 20:50:48.855813 31836 net.cpp:369] relu1 -> ip1 (in-place)
I0426 20:50:48.856690 31836 net.cpp:124] Setting up relu1
I0426 20:50:48.856703 31836 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:48.856706 31836 net.cpp:139] Memory required for data: 4002800
I0426 20:50:48.856710 31836 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0426 20:50:48.856717 31836 net.cpp:86] Creating Layer ip1_relu1_0_split
I0426 20:50:48.856721 31836 net.cpp:408] ip1_relu1_0_split <- ip1
I0426 20:50:48.856727 31836 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0426 20:50:48.856734 31836 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0426 20:50:48.856796 31836 net.cpp:124] Setting up ip1_relu1_0_split
I0426 20:50:48.856803 31836 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:48.856807 31836 net.cpp:131] Top shape: 100 10 (1000)
I0426 20:50:48.856833 31836 net.cpp:139] Memory required for data: 4010800
I0426 20:50:48.856837 31836 layer_factory.hpp:77] Creating layer accuracy
I0426 20:50:48.856848 31836 net.cpp:86] Creating Layer accuracy
I0426 20:50:48.856851 31836 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0426 20:50:48.856871 31836 net.cpp:408] accuracy <- label_mnist_1_split_0
I0426 20:50:48.856878 31836 net.cpp:382] accuracy -> accuracy
I0426 20:50:48.856885 31836 net.cpp:124] Setting up accuracy
I0426 20:50:48.856902 31836 net.cpp:131] Top shape: (1)
I0426 20:50:48.856912 31836 net.cpp:139] Memory required for data: 4010804
I0426 20:50:48.856915 31836 layer_factory.hpp:77] Creating layer loss
I0426 20:50:48.856921 31836 net.cpp:86] Creating Layer loss
I0426 20:50:48.856925 31836 net.cpp:408] loss <- ip1_relu1_0_split_1
I0426 20:50:48.856930 31836 net.cpp:408] loss <- label_mnist_1_split_1
I0426 20:50:48.856935 31836 net.cpp:382] loss -> loss
I0426 20:50:48.856941 31836 layer_factory.hpp:77] Creating layer loss
I0426 20:50:48.857168 31836 net.cpp:124] Setting up loss
I0426 20:50:48.857179 31836 net.cpp:131] Top shape: (1)
I0426 20:50:48.857184 31836 net.cpp:134]     with loss weight 1
I0426 20:50:48.857192 31836 net.cpp:139] Memory required for data: 4010808
I0426 20:50:48.857195 31836 net.cpp:200] loss needs backward computation.
I0426 20:50:48.857199 31836 net.cpp:202] accuracy does not need backward computation.
I0426 20:50:48.857218 31836 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0426 20:50:48.857228 31836 net.cpp:200] relu1 needs backward computation.
I0426 20:50:48.857233 31836 net.cpp:200] ip1 needs backward computation.
I0426 20:50:48.857235 31836 net.cpp:200] pool1 needs backward computation.
I0426 20:50:48.857239 31836 net.cpp:200] conv1 needs backward computation.
I0426 20:50:48.857244 31836 net.cpp:200] pool0 needs backward computation.
I0426 20:50:48.857246 31836 net.cpp:200] conv0 needs backward computation.
I0426 20:50:48.857250 31836 net.cpp:202] label_mnist_1_split does not need backward computation.
I0426 20:50:48.857255 31836 net.cpp:202] mnist does not need backward computation.
I0426 20:50:48.857259 31836 net.cpp:244] This network produces output accuracy
I0426 20:50:48.857262 31836 net.cpp:244] This network produces output loss
I0426 20:50:48.857281 31836 net.cpp:257] Network initialization done.
I0426 20:50:48.857313 31836 solver.cpp:56] Solver scaffolding done.
I0426 20:50:48.857516 31836 caffe.cpp:248] Starting Optimization
I0426 20:50:48.857523 31836 solver.cpp:273] Solving LeNet
I0426 20:50:48.857527 31836 solver.cpp:274] Learning Rate Policy: inv
I0426 20:50:48.857651 31836 solver.cpp:331] Iteration 0, Testing net (#0)
I0426 20:50:48.861826 31836 blocking_queue.cpp:49] Waiting for data
I0426 20:50:48.927114 31843 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:48.927628 31836 solver.cpp:398]     Test net output #0: accuracy = 0.1178
I0426 20:50:48.927664 31836 solver.cpp:398]     Test net output #1: loss = 2.34329 (* 1 = 2.34329 loss)
I0426 20:50:48.929994 31836 solver.cpp:219] Iteration 0 (-1.66005e-31 iter/s, 0.0724378s/100 iters), loss = 2.25861
I0426 20:50:48.930037 31836 solver.cpp:238]     Train net output #0: loss = 2.25861 (* 1 = 2.25861 loss)
I0426 20:50:48.930064 31836 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0426 20:50:49.017757 31836 solver.cpp:219] Iteration 100 (1140.08 iter/s, 0.0877132s/100 iters), loss = 1.29634
I0426 20:50:49.017783 31836 solver.cpp:238]     Train net output #0: loss = 1.29634 (* 1 = 1.29634 loss)
I0426 20:50:49.017791 31836 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0426 20:50:49.093793 31836 solver.cpp:219] Iteration 200 (1315.99 iter/s, 0.0759881s/100 iters), loss = 0.638753
I0426 20:50:49.093839 31836 solver.cpp:238]     Train net output #0: loss = 0.638753 (* 1 = 0.638753 loss)
I0426 20:50:49.093847 31836 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0426 20:50:49.172695 31836 solver.cpp:219] Iteration 300 (1268.24 iter/s, 0.0788492s/100 iters), loss = 0.614345
I0426 20:50:49.172735 31836 solver.cpp:238]     Train net output #0: loss = 0.614345 (* 1 = 0.614345 loss)
I0426 20:50:49.172742 31836 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0426 20:50:49.246449 31836 solver.cpp:219] Iteration 400 (1356.73 iter/s, 0.0737065s/100 iters), loss = 0.306843
I0426 20:50:49.246490 31836 solver.cpp:238]     Train net output #0: loss = 0.306843 (* 1 = 0.306843 loss)
I0426 20:50:49.246497 31836 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0426 20:50:49.319721 31836 solver.cpp:331] Iteration 500, Testing net (#0)
I0426 20:50:49.395086 31843 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:49.395588 31836 solver.cpp:398]     Test net output #0: accuracy = 0.8425
I0426 20:50:49.395624 31836 solver.cpp:398]     Test net output #1: loss = 0.41683 (* 1 = 0.41683 loss)
I0426 20:50:49.396514 31836 solver.cpp:219] Iteration 500 (666.609 iter/s, 0.150013s/100 iters), loss = 0.459141
I0426 20:50:49.396538 31836 solver.cpp:238]     Train net output #0: loss = 0.459141 (* 1 = 0.459141 loss)
I0426 20:50:49.396571 31836 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0426 20:50:49.470446 31836 solver.cpp:219] Iteration 600 (1353.16 iter/s, 0.0739011s/100 iters), loss = 0.528192
I0426 20:50:49.470489 31836 solver.cpp:238]     Train net output #0: loss = 0.528192 (* 1 = 0.528192 loss)
I0426 20:50:49.470495 31836 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0426 20:50:49.545025 31836 solver.cpp:219] Iteration 700 (1341.78 iter/s, 0.0745277s/100 iters), loss = 0.351797
I0426 20:50:49.545068 31836 solver.cpp:238]     Train net output #0: loss = 0.351797 (* 1 = 0.351797 loss)
I0426 20:50:49.545074 31836 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0426 20:50:49.618667 31836 solver.cpp:219] Iteration 800 (1358.83 iter/s, 0.0735928s/100 iters), loss = 0.470796
I0426 20:50:49.618710 31836 solver.cpp:238]     Train net output #0: loss = 0.470796 (* 1 = 0.470796 loss)
I0426 20:50:49.618717 31836 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0426 20:50:49.692826 31836 solver.cpp:219] Iteration 900 (1349.12 iter/s, 0.0741222s/100 iters), loss = 0.520301
I0426 20:50:49.692888 31836 solver.cpp:238]     Train net output #0: loss = 0.520301 (* 1 = 0.520301 loss)
I0426 20:50:49.692896 31836 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0426 20:50:49.717605 31842 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:49.770740 31836 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0426 20:50:49.771611 31836 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0426 20:50:49.772105 31836 solver.cpp:311] Iteration 1000, loss = 0.426579
I0426 20:50:49.772121 31836 solver.cpp:331] Iteration 1000, Testing net (#0)
I0426 20:50:49.846923 31843 data_layer.cpp:73] Restarting data prefetching from start.
I0426 20:50:49.847467 31836 solver.cpp:398]     Test net output #0: accuracy = 0.861
I0426 20:50:49.847488 31836 solver.cpp:398]     Test net output #1: loss = 0.349521 (* 1 = 0.349521 loss)
I0426 20:50:49.847496 31836 solver.cpp:316] Optimization Done.
I0426 20:50:49.847498 31836 caffe.cpp:259] Optimization Done.
