I0428 19:58:05.175859 28887 caffe.cpp:218] Using GPUs 0
I0428 19:58:05.208840 28887 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:05.699280 28887 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test808.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:05.699434 28887 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test808.prototxt
I0428 19:58:05.699839 28887 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:05.699857 28887 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:05.699966 28887 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:05.700045 28887 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:05.700141 28887 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:05.700163 28887 net.cpp:86] Creating Layer mnist
I0428 19:58:05.700171 28887 net.cpp:382] mnist -> data
I0428 19:58:05.700194 28887 net.cpp:382] mnist -> label
I0428 19:58:05.701287 28887 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:05.703722 28887 net.cpp:124] Setting up mnist
I0428 19:58:05.703743 28887 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:05.703749 28887 net.cpp:131] Top shape: 64 (64)
I0428 19:58:05.703752 28887 net.cpp:139] Memory required for data: 200960
I0428 19:58:05.703766 28887 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:05.703799 28887 net.cpp:86] Creating Layer conv0
I0428 19:58:05.703820 28887 net.cpp:408] conv0 <- data
I0428 19:58:05.703832 28887 net.cpp:382] conv0 -> conv0
I0428 19:58:05.989800 28887 net.cpp:124] Setting up conv0
I0428 19:58:05.989830 28887 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:05.989835 28887 net.cpp:139] Memory required for data: 1675520
I0428 19:58:05.989852 28887 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:05.989866 28887 net.cpp:86] Creating Layer pool0
I0428 19:58:05.989871 28887 net.cpp:408] pool0 <- conv0
I0428 19:58:05.989877 28887 net.cpp:382] pool0 -> pool0
I0428 19:58:05.989943 28887 net.cpp:124] Setting up pool0
I0428 19:58:05.989950 28887 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:05.989954 28887 net.cpp:139] Memory required for data: 2044160
I0428 19:58:05.989959 28887 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:05.989970 28887 net.cpp:86] Creating Layer conv1
I0428 19:58:05.989977 28887 net.cpp:408] conv1 <- pool0
I0428 19:58:05.989982 28887 net.cpp:382] conv1 -> conv1
I0428 19:58:05.993116 28887 net.cpp:124] Setting up conv1
I0428 19:58:05.993134 28887 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:05.993139 28887 net.cpp:139] Memory required for data: 2126080
I0428 19:58:05.993149 28887 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:05.993158 28887 net.cpp:86] Creating Layer pool1
I0428 19:58:05.993162 28887 net.cpp:408] pool1 <- conv1
I0428 19:58:05.993168 28887 net.cpp:382] pool1 -> pool1
I0428 19:58:05.993224 28887 net.cpp:124] Setting up pool1
I0428 19:58:05.993232 28887 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:05.993237 28887 net.cpp:139] Memory required for data: 2146560
I0428 19:58:05.993239 28887 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:05.993249 28887 net.cpp:86] Creating Layer ip1
I0428 19:58:05.993253 28887 net.cpp:408] ip1 <- pool1
I0428 19:58:05.993258 28887 net.cpp:382] ip1 -> ip1
I0428 19:58:05.993391 28887 net.cpp:124] Setting up ip1
I0428 19:58:05.993397 28887 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:05.993402 28887 net.cpp:139] Memory required for data: 2152960
I0428 19:58:05.993409 28887 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:05.993419 28887 net.cpp:86] Creating Layer relu1
I0428 19:58:05.993423 28887 net.cpp:408] relu1 <- ip1
I0428 19:58:05.993428 28887 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:05.993635 28887 net.cpp:124] Setting up relu1
I0428 19:58:05.993645 28887 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:05.993649 28887 net.cpp:139] Memory required for data: 2159360
I0428 19:58:05.993652 28887 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:05.993661 28887 net.cpp:86] Creating Layer ip2
I0428 19:58:05.993669 28887 net.cpp:408] ip2 <- ip1
I0428 19:58:05.993675 28887 net.cpp:382] ip2 -> ip2
I0428 19:58:05.993809 28887 net.cpp:124] Setting up ip2
I0428 19:58:05.993818 28887 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:05.993823 28887 net.cpp:139] Memory required for data: 2172160
I0428 19:58:05.993829 28887 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:05.993835 28887 net.cpp:86] Creating Layer relu2
I0428 19:58:05.993841 28887 net.cpp:408] relu2 <- ip2
I0428 19:58:05.993846 28887 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:05.994705 28887 net.cpp:124] Setting up relu2
I0428 19:58:05.994720 28887 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:05.994726 28887 net.cpp:139] Memory required for data: 2184960
I0428 19:58:05.994732 28887 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:05.994741 28887 net.cpp:86] Creating Layer ip3
I0428 19:58:05.994745 28887 net.cpp:408] ip3 <- ip2
I0428 19:58:05.994753 28887 net.cpp:382] ip3 -> ip3
I0428 19:58:05.994881 28887 net.cpp:124] Setting up ip3
I0428 19:58:05.994890 28887 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:05.994894 28887 net.cpp:139] Memory required for data: 2187520
I0428 19:58:05.994904 28887 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:05.994909 28887 net.cpp:86] Creating Layer relu3
I0428 19:58:05.994912 28887 net.cpp:408] relu3 <- ip3
I0428 19:58:05.994918 28887 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:05.995126 28887 net.cpp:124] Setting up relu3
I0428 19:58:05.995136 28887 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:05.995139 28887 net.cpp:139] Memory required for data: 2190080
I0428 19:58:05.995143 28887 layer_factory.hpp:77] Creating layer loss
I0428 19:58:05.995149 28887 net.cpp:86] Creating Layer loss
I0428 19:58:05.995153 28887 net.cpp:408] loss <- ip3
I0428 19:58:05.995157 28887 net.cpp:408] loss <- label
I0428 19:58:05.995167 28887 net.cpp:382] loss -> loss
I0428 19:58:05.995187 28887 layer_factory.hpp:77] Creating layer loss
I0428 19:58:05.995471 28887 net.cpp:124] Setting up loss
I0428 19:58:05.995479 28887 net.cpp:131] Top shape: (1)
I0428 19:58:05.995483 28887 net.cpp:134]     with loss weight 1
I0428 19:58:05.995497 28887 net.cpp:139] Memory required for data: 2190084
I0428 19:58:05.995501 28887 net.cpp:200] loss needs backward computation.
I0428 19:58:05.995506 28887 net.cpp:200] relu3 needs backward computation.
I0428 19:58:05.995508 28887 net.cpp:200] ip3 needs backward computation.
I0428 19:58:05.995512 28887 net.cpp:200] relu2 needs backward computation.
I0428 19:58:05.995515 28887 net.cpp:200] ip2 needs backward computation.
I0428 19:58:05.995518 28887 net.cpp:200] relu1 needs backward computation.
I0428 19:58:05.995522 28887 net.cpp:200] ip1 needs backward computation.
I0428 19:58:05.995525 28887 net.cpp:200] pool1 needs backward computation.
I0428 19:58:05.995529 28887 net.cpp:200] conv1 needs backward computation.
I0428 19:58:05.995532 28887 net.cpp:200] pool0 needs backward computation.
I0428 19:58:05.995537 28887 net.cpp:200] conv0 needs backward computation.
I0428 19:58:05.995540 28887 net.cpp:202] mnist does not need backward computation.
I0428 19:58:05.995543 28887 net.cpp:244] This network produces output loss
I0428 19:58:05.995558 28887 net.cpp:257] Network initialization done.
I0428 19:58:05.995941 28887 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test808.prototxt
I0428 19:58:05.995975 28887 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:05.996084 28887 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:05.996182 28887 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:05.996232 28887 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:05.996248 28887 net.cpp:86] Creating Layer mnist
I0428 19:58:05.996253 28887 net.cpp:382] mnist -> data
I0428 19:58:05.996263 28887 net.cpp:382] mnist -> label
I0428 19:58:05.996366 28887 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:05.998565 28887 net.cpp:124] Setting up mnist
I0428 19:58:05.998584 28887 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:05.998589 28887 net.cpp:131] Top shape: 100 (100)
I0428 19:58:05.998592 28887 net.cpp:139] Memory required for data: 314000
I0428 19:58:05.998596 28887 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:05.998618 28887 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:05.998622 28887 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:05.998628 28887 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:05.998636 28887 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:05.998742 28887 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:05.998751 28887 net.cpp:131] Top shape: 100 (100)
I0428 19:58:05.998756 28887 net.cpp:131] Top shape: 100 (100)
I0428 19:58:05.998759 28887 net.cpp:139] Memory required for data: 314800
I0428 19:58:05.998764 28887 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:05.998775 28887 net.cpp:86] Creating Layer conv0
I0428 19:58:05.998780 28887 net.cpp:408] conv0 <- data
I0428 19:58:05.998788 28887 net.cpp:382] conv0 -> conv0
I0428 19:58:06.000516 28887 net.cpp:124] Setting up conv0
I0428 19:58:06.000535 28887 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:06.000540 28887 net.cpp:139] Memory required for data: 2618800
I0428 19:58:06.000551 28887 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:06.000560 28887 net.cpp:86] Creating Layer pool0
I0428 19:58:06.000564 28887 net.cpp:408] pool0 <- conv0
I0428 19:58:06.000569 28887 net.cpp:382] pool0 -> pool0
I0428 19:58:06.000614 28887 net.cpp:124] Setting up pool0
I0428 19:58:06.000633 28887 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:06.000638 28887 net.cpp:139] Memory required for data: 3194800
I0428 19:58:06.000641 28887 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:06.000653 28887 net.cpp:86] Creating Layer conv1
I0428 19:58:06.000656 28887 net.cpp:408] conv1 <- pool0
I0428 19:58:06.000663 28887 net.cpp:382] conv1 -> conv1
I0428 19:58:06.003110 28887 net.cpp:124] Setting up conv1
I0428 19:58:06.003125 28887 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:06.003129 28887 net.cpp:139] Memory required for data: 3322800
I0428 19:58:06.003141 28887 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:06.003149 28887 net.cpp:86] Creating Layer pool1
I0428 19:58:06.003154 28887 net.cpp:408] pool1 <- conv1
I0428 19:58:06.003161 28887 net.cpp:382] pool1 -> pool1
I0428 19:58:06.003253 28887 net.cpp:124] Setting up pool1
I0428 19:58:06.003263 28887 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:06.003267 28887 net.cpp:139] Memory required for data: 3354800
I0428 19:58:06.003270 28887 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:06.003279 28887 net.cpp:86] Creating Layer ip1
I0428 19:58:06.003286 28887 net.cpp:408] ip1 <- pool1
I0428 19:58:06.003293 28887 net.cpp:382] ip1 -> ip1
I0428 19:58:06.003428 28887 net.cpp:124] Setting up ip1
I0428 19:58:06.003437 28887 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:06.003453 28887 net.cpp:139] Memory required for data: 3364800
I0428 19:58:06.003461 28887 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:06.003469 28887 net.cpp:86] Creating Layer relu1
I0428 19:58:06.003474 28887 net.cpp:408] relu1 <- ip1
I0428 19:58:06.003479 28887 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:06.003684 28887 net.cpp:124] Setting up relu1
I0428 19:58:06.003695 28887 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:06.003698 28887 net.cpp:139] Memory required for data: 3374800
I0428 19:58:06.003702 28887 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:06.003711 28887 net.cpp:86] Creating Layer ip2
I0428 19:58:06.003715 28887 net.cpp:408] ip2 <- ip1
I0428 19:58:06.003722 28887 net.cpp:382] ip2 -> ip2
I0428 19:58:06.003856 28887 net.cpp:124] Setting up ip2
I0428 19:58:06.003865 28887 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:06.003868 28887 net.cpp:139] Memory required for data: 3394800
I0428 19:58:06.003875 28887 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:06.003880 28887 net.cpp:86] Creating Layer relu2
I0428 19:58:06.003883 28887 net.cpp:408] relu2 <- ip2
I0428 19:58:06.003888 28887 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:06.004072 28887 net.cpp:124] Setting up relu2
I0428 19:58:06.004082 28887 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:06.004086 28887 net.cpp:139] Memory required for data: 3414800
I0428 19:58:06.004089 28887 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:06.004096 28887 net.cpp:86] Creating Layer ip3
I0428 19:58:06.004099 28887 net.cpp:408] ip3 <- ip2
I0428 19:58:06.004108 28887 net.cpp:382] ip3 -> ip3
I0428 19:58:06.004227 28887 net.cpp:124] Setting up ip3
I0428 19:58:06.004235 28887 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:06.004238 28887 net.cpp:139] Memory required for data: 3418800
I0428 19:58:06.004246 28887 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:06.004253 28887 net.cpp:86] Creating Layer relu3
I0428 19:58:06.004256 28887 net.cpp:408] relu3 <- ip3
I0428 19:58:06.004261 28887 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:06.005146 28887 net.cpp:124] Setting up relu3
I0428 19:58:06.005162 28887 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:06.005165 28887 net.cpp:139] Memory required for data: 3422800
I0428 19:58:06.005169 28887 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:06.005175 28887 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:06.005179 28887 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:06.005187 28887 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:06.005193 28887 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:06.005237 28887 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:06.005245 28887 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:06.005251 28887 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:06.005256 28887 net.cpp:139] Memory required for data: 3430800
I0428 19:58:06.005259 28887 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:06.005265 28887 net.cpp:86] Creating Layer accuracy
I0428 19:58:06.005269 28887 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:06.005273 28887 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:06.005280 28887 net.cpp:382] accuracy -> accuracy
I0428 19:58:06.005288 28887 net.cpp:124] Setting up accuracy
I0428 19:58:06.005295 28887 net.cpp:131] Top shape: (1)
I0428 19:58:06.005297 28887 net.cpp:139] Memory required for data: 3430804
I0428 19:58:06.005300 28887 layer_factory.hpp:77] Creating layer loss
I0428 19:58:06.005306 28887 net.cpp:86] Creating Layer loss
I0428 19:58:06.005309 28887 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:06.005314 28887 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:06.005318 28887 net.cpp:382] loss -> loss
I0428 19:58:06.005326 28887 layer_factory.hpp:77] Creating layer loss
I0428 19:58:06.005609 28887 net.cpp:124] Setting up loss
I0428 19:58:06.005619 28887 net.cpp:131] Top shape: (1)
I0428 19:58:06.005621 28887 net.cpp:134]     with loss weight 1
I0428 19:58:06.005628 28887 net.cpp:139] Memory required for data: 3430808
I0428 19:58:06.005643 28887 net.cpp:200] loss needs backward computation.
I0428 19:58:06.005648 28887 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:06.005652 28887 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:06.005656 28887 net.cpp:200] relu3 needs backward computation.
I0428 19:58:06.005659 28887 net.cpp:200] ip3 needs backward computation.
I0428 19:58:06.005662 28887 net.cpp:200] relu2 needs backward computation.
I0428 19:58:06.005666 28887 net.cpp:200] ip2 needs backward computation.
I0428 19:58:06.005671 28887 net.cpp:200] relu1 needs backward computation.
I0428 19:58:06.005674 28887 net.cpp:200] ip1 needs backward computation.
I0428 19:58:06.005678 28887 net.cpp:200] pool1 needs backward computation.
I0428 19:58:06.005681 28887 net.cpp:200] conv1 needs backward computation.
I0428 19:58:06.005686 28887 net.cpp:200] pool0 needs backward computation.
I0428 19:58:06.005689 28887 net.cpp:200] conv0 needs backward computation.
I0428 19:58:06.005693 28887 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:06.005698 28887 net.cpp:202] mnist does not need backward computation.
I0428 19:58:06.005702 28887 net.cpp:244] This network produces output accuracy
I0428 19:58:06.005704 28887 net.cpp:244] This network produces output loss
I0428 19:58:06.005718 28887 net.cpp:257] Network initialization done.
I0428 19:58:06.005767 28887 solver.cpp:56] Solver scaffolding done.
I0428 19:58:06.006161 28887 caffe.cpp:248] Starting Optimization
I0428 19:58:06.006168 28887 solver.cpp:273] Solving LeNet
I0428 19:58:06.006171 28887 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:06.007025 28887 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:06.011809 28887 blocking_queue.cpp:49] Waiting for data
I0428 19:58:06.068099 28894 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:06.068626 28887 solver.cpp:398]     Test net output #0: accuracy = 0.0951
I0428 19:58:06.068650 28887 solver.cpp:398]     Test net output #1: loss = 2.32638 (* 1 = 2.32638 loss)
I0428 19:58:06.071328 28887 solver.cpp:219] Iteration 0 (-4.66137e-31 iter/s, 0.0651254s/100 iters), loss = 2.3387
I0428 19:58:06.071357 28887 solver.cpp:238]     Train net output #0: loss = 2.3387 (* 1 = 2.3387 loss)
I0428 19:58:06.071368 28887 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:06.148783 28887 solver.cpp:219] Iteration 100 (1291.75 iter/s, 0.0774144s/100 iters), loss = 0.484055
I0428 19:58:06.148833 28887 solver.cpp:238]     Train net output #0: loss = 0.484055 (* 1 = 0.484055 loss)
I0428 19:58:06.148840 28887 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:06.226197 28887 solver.cpp:219] Iteration 200 (1292.42 iter/s, 0.0773745s/100 iters), loss = 0.241517
I0428 19:58:06.226228 28887 solver.cpp:238]     Train net output #0: loss = 0.241517 (* 1 = 0.241517 loss)
I0428 19:58:06.226235 28887 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:06.303498 28887 solver.cpp:219] Iteration 300 (1294.3 iter/s, 0.0772617s/100 iters), loss = 0.217405
I0428 19:58:06.303527 28887 solver.cpp:238]     Train net output #0: loss = 0.217405 (* 1 = 0.217405 loss)
I0428 19:58:06.303535 28887 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:06.381369 28887 solver.cpp:219] Iteration 400 (1284.83 iter/s, 0.0778312s/100 iters), loss = 0.23023
I0428 19:58:06.381397 28887 solver.cpp:238]     Train net output #0: loss = 0.23023 (* 1 = 0.23023 loss)
I0428 19:58:06.381405 28887 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:06.458103 28887 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:06.530670 28894 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:06.532439 28887 solver.cpp:398]     Test net output #0: accuracy = 0.9387
I0428 19:58:06.532474 28887 solver.cpp:398]     Test net output #1: loss = 0.196675 (* 1 = 0.196675 loss)
I0428 19:58:06.533413 28887 solver.cpp:219] Iteration 500 (657.897 iter/s, 0.151999s/100 iters), loss = 0.199979
I0428 19:58:06.533475 28887 solver.cpp:238]     Train net output #0: loss = 0.199979 (* 1 = 0.199979 loss)
I0428 19:58:06.533486 28887 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:06.620774 28887 solver.cpp:219] Iteration 600 (1145.57 iter/s, 0.0872929s/100 iters), loss = 0.218914
I0428 19:58:06.620805 28887 solver.cpp:238]     Train net output #0: loss = 0.218914 (* 1 = 0.218914 loss)
I0428 19:58:06.620820 28887 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:06.698175 28887 solver.cpp:219] Iteration 700 (1292.62 iter/s, 0.0773623s/100 iters), loss = 0.300822
I0428 19:58:06.698200 28887 solver.cpp:238]     Train net output #0: loss = 0.300822 (* 1 = 0.300822 loss)
I0428 19:58:06.698206 28887 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:06.774493 28887 solver.cpp:219] Iteration 800 (1310.89 iter/s, 0.0762839s/100 iters), loss = 0.276108
I0428 19:58:06.774531 28887 solver.cpp:238]     Train net output #0: loss = 0.276108 (* 1 = 0.276108 loss)
I0428 19:58:06.774538 28887 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:06.848601 28887 solver.cpp:219] Iteration 900 (1349.94 iter/s, 0.0740772s/100 iters), loss = 0.195862
I0428 19:58:06.848624 28887 solver.cpp:238]     Train net output #0: loss = 0.195862 (* 1 = 0.195862 loss)
I0428 19:58:06.848630 28887 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:06.873333 28893 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:06.921880 28887 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:06.922729 28887 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:06.923209 28887 solver.cpp:311] Iteration 1000, loss = 0.277443
I0428 19:58:06.923226 28887 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:06.976076 28894 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:06.976615 28887 solver.cpp:398]     Test net output #0: accuracy = 0.9627
I0428 19:58:06.976665 28887 solver.cpp:398]     Test net output #1: loss = 0.116391 (* 1 = 0.116391 loss)
I0428 19:58:06.976670 28887 solver.cpp:316] Optimization Done.
I0428 19:58:06.976672 28887 caffe.cpp:259] Optimization Done.
