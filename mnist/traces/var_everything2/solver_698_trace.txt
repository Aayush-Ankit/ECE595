I0428 19:53:51.688108 27885 caffe.cpp:218] Using GPUs 0
I0428 19:53:51.725674 27885 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:52.234031 27885 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test698.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:52.234174 27885 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test698.prototxt
I0428 19:53:52.234591 27885 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:52.234609 27885 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:52.234715 27885 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:52.234797 27885 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:52.234894 27885 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:52.234920 27885 net.cpp:86] Creating Layer mnist
I0428 19:53:52.234927 27885 net.cpp:382] mnist -> data
I0428 19:53:52.234949 27885 net.cpp:382] mnist -> label
I0428 19:53:52.236038 27885 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:52.238507 27885 net.cpp:124] Setting up mnist
I0428 19:53:52.238523 27885 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:52.238543 27885 net.cpp:131] Top shape: 64 (64)
I0428 19:53:52.238548 27885 net.cpp:139] Memory required for data: 200960
I0428 19:53:52.238554 27885 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:52.238569 27885 net.cpp:86] Creating Layer conv0
I0428 19:53:52.238590 27885 net.cpp:408] conv0 <- data
I0428 19:53:52.238603 27885 net.cpp:382] conv0 -> conv0
I0428 19:53:52.529594 27885 net.cpp:124] Setting up conv0
I0428 19:53:52.529626 27885 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:52.529631 27885 net.cpp:139] Memory required for data: 938240
I0428 19:53:52.529649 27885 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:52.529664 27885 net.cpp:86] Creating Layer pool0
I0428 19:53:52.529671 27885 net.cpp:408] pool0 <- conv0
I0428 19:53:52.529678 27885 net.cpp:382] pool0 -> pool0
I0428 19:53:52.529734 27885 net.cpp:124] Setting up pool0
I0428 19:53:52.529748 27885 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:52.529752 27885 net.cpp:139] Memory required for data: 1122560
I0428 19:53:52.529757 27885 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:52.529769 27885 net.cpp:86] Creating Layer conv1
I0428 19:53:52.529773 27885 net.cpp:408] conv1 <- pool0
I0428 19:53:52.529779 27885 net.cpp:382] conv1 -> conv1
I0428 19:53:52.532939 27885 net.cpp:124] Setting up conv1
I0428 19:53:52.532958 27885 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:52.532963 27885 net.cpp:139] Memory required for data: 1941760
I0428 19:53:52.532973 27885 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:52.532981 27885 net.cpp:86] Creating Layer pool1
I0428 19:53:52.532985 27885 net.cpp:408] pool1 <- conv1
I0428 19:53:52.532991 27885 net.cpp:382] pool1 -> pool1
I0428 19:53:52.533037 27885 net.cpp:124] Setting up pool1
I0428 19:53:52.533047 27885 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:52.533051 27885 net.cpp:139] Memory required for data: 2146560
I0428 19:53:52.533056 27885 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:52.533064 27885 net.cpp:86] Creating Layer ip1
I0428 19:53:52.533067 27885 net.cpp:408] ip1 <- pool1
I0428 19:53:52.533073 27885 net.cpp:382] ip1 -> ip1
I0428 19:53:52.533466 27885 net.cpp:124] Setting up ip1
I0428 19:53:52.533475 27885 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:52.533478 27885 net.cpp:139] Memory required for data: 2159360
I0428 19:53:52.533486 27885 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:52.533493 27885 net.cpp:86] Creating Layer relu1
I0428 19:53:52.533496 27885 net.cpp:408] relu1 <- ip1
I0428 19:53:52.533501 27885 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:52.533696 27885 net.cpp:124] Setting up relu1
I0428 19:53:52.533706 27885 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:52.533710 27885 net.cpp:139] Memory required for data: 2172160
I0428 19:53:52.533715 27885 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:52.533721 27885 net.cpp:86] Creating Layer ip2
I0428 19:53:52.533725 27885 net.cpp:408] ip2 <- ip1
I0428 19:53:52.533730 27885 net.cpp:382] ip2 -> ip2
I0428 19:53:52.534814 27885 net.cpp:124] Setting up ip2
I0428 19:53:52.534829 27885 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:52.534833 27885 net.cpp:139] Memory required for data: 2178560
I0428 19:53:52.534842 27885 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:52.534848 27885 net.cpp:86] Creating Layer relu2
I0428 19:53:52.534852 27885 net.cpp:408] relu2 <- ip2
I0428 19:53:52.534858 27885 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:52.535712 27885 net.cpp:124] Setting up relu2
I0428 19:53:52.535727 27885 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:52.535730 27885 net.cpp:139] Memory required for data: 2184960
I0428 19:53:52.535734 27885 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:52.535742 27885 net.cpp:86] Creating Layer ip3
I0428 19:53:52.535747 27885 net.cpp:408] ip3 <- ip2
I0428 19:53:52.535753 27885 net.cpp:382] ip3 -> ip3
I0428 19:53:52.535874 27885 net.cpp:124] Setting up ip3
I0428 19:53:52.535883 27885 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:52.535887 27885 net.cpp:139] Memory required for data: 2187520
I0428 19:53:52.535897 27885 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:52.535902 27885 net.cpp:86] Creating Layer relu3
I0428 19:53:52.535907 27885 net.cpp:408] relu3 <- ip3
I0428 19:53:52.535910 27885 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:52.536113 27885 net.cpp:124] Setting up relu3
I0428 19:53:52.536123 27885 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:52.536128 27885 net.cpp:139] Memory required for data: 2190080
I0428 19:53:52.536131 27885 layer_factory.hpp:77] Creating layer loss
I0428 19:53:52.536139 27885 net.cpp:86] Creating Layer loss
I0428 19:53:52.536142 27885 net.cpp:408] loss <- ip3
I0428 19:53:52.536146 27885 net.cpp:408] loss <- label
I0428 19:53:52.536152 27885 net.cpp:382] loss -> loss
I0428 19:53:52.536173 27885 layer_factory.hpp:77] Creating layer loss
I0428 19:53:52.536444 27885 net.cpp:124] Setting up loss
I0428 19:53:52.536454 27885 net.cpp:131] Top shape: (1)
I0428 19:53:52.536458 27885 net.cpp:134]     with loss weight 1
I0428 19:53:52.536475 27885 net.cpp:139] Memory required for data: 2190084
I0428 19:53:52.536479 27885 net.cpp:200] loss needs backward computation.
I0428 19:53:52.536484 27885 net.cpp:200] relu3 needs backward computation.
I0428 19:53:52.536487 27885 net.cpp:200] ip3 needs backward computation.
I0428 19:53:52.536490 27885 net.cpp:200] relu2 needs backward computation.
I0428 19:53:52.536494 27885 net.cpp:200] ip2 needs backward computation.
I0428 19:53:52.536497 27885 net.cpp:200] relu1 needs backward computation.
I0428 19:53:52.536500 27885 net.cpp:200] ip1 needs backward computation.
I0428 19:53:52.536504 27885 net.cpp:200] pool1 needs backward computation.
I0428 19:53:52.536507 27885 net.cpp:200] conv1 needs backward computation.
I0428 19:53:52.536511 27885 net.cpp:200] pool0 needs backward computation.
I0428 19:53:52.536515 27885 net.cpp:200] conv0 needs backward computation.
I0428 19:53:52.536520 27885 net.cpp:202] mnist does not need backward computation.
I0428 19:53:52.536522 27885 net.cpp:244] This network produces output loss
I0428 19:53:52.536533 27885 net.cpp:257] Network initialization done.
I0428 19:53:52.536927 27885 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test698.prototxt
I0428 19:53:52.536960 27885 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:52.537070 27885 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:52.537163 27885 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:52.537215 27885 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:52.537230 27885 net.cpp:86] Creating Layer mnist
I0428 19:53:52.537236 27885 net.cpp:382] mnist -> data
I0428 19:53:52.537245 27885 net.cpp:382] mnist -> label
I0428 19:53:52.537346 27885 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:52.539736 27885 net.cpp:124] Setting up mnist
I0428 19:53:52.539752 27885 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:52.539757 27885 net.cpp:131] Top shape: 100 (100)
I0428 19:53:52.539760 27885 net.cpp:139] Memory required for data: 314000
I0428 19:53:52.539765 27885 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:52.539782 27885 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:52.539786 27885 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:52.539791 27885 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:52.539799 27885 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:52.539852 27885 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:52.539861 27885 net.cpp:131] Top shape: 100 (100)
I0428 19:53:52.539865 27885 net.cpp:131] Top shape: 100 (100)
I0428 19:53:52.539868 27885 net.cpp:139] Memory required for data: 314800
I0428 19:53:52.539872 27885 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:52.539881 27885 net.cpp:86] Creating Layer conv0
I0428 19:53:52.539885 27885 net.cpp:408] conv0 <- data
I0428 19:53:52.539891 27885 net.cpp:382] conv0 -> conv0
I0428 19:53:52.541719 27885 net.cpp:124] Setting up conv0
I0428 19:53:52.541736 27885 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:52.541740 27885 net.cpp:139] Memory required for data: 1466800
I0428 19:53:52.541754 27885 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:52.541760 27885 net.cpp:86] Creating Layer pool0
I0428 19:53:52.541764 27885 net.cpp:408] pool0 <- conv0
I0428 19:53:52.541769 27885 net.cpp:382] pool0 -> pool0
I0428 19:53:52.541815 27885 net.cpp:124] Setting up pool0
I0428 19:53:52.541823 27885 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:52.541829 27885 net.cpp:139] Memory required for data: 1754800
I0428 19:53:52.541833 27885 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:52.541849 27885 net.cpp:86] Creating Layer conv1
I0428 19:53:52.541857 27885 net.cpp:408] conv1 <- pool0
I0428 19:53:52.541869 27885 net.cpp:382] conv1 -> conv1
I0428 19:53:52.543640 27885 net.cpp:124] Setting up conv1
I0428 19:53:52.543656 27885 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:52.543660 27885 net.cpp:139] Memory required for data: 3034800
I0428 19:53:52.543673 27885 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:52.543680 27885 net.cpp:86] Creating Layer pool1
I0428 19:53:52.543684 27885 net.cpp:408] pool1 <- conv1
I0428 19:53:52.543701 27885 net.cpp:382] pool1 -> pool1
I0428 19:53:52.543745 27885 net.cpp:124] Setting up pool1
I0428 19:53:52.543751 27885 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:52.543754 27885 net.cpp:139] Memory required for data: 3354800
I0428 19:53:52.543758 27885 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:52.543766 27885 net.cpp:86] Creating Layer ip1
I0428 19:53:52.543771 27885 net.cpp:408] ip1 <- pool1
I0428 19:53:52.543776 27885 net.cpp:382] ip1 -> ip1
I0428 19:53:52.544164 27885 net.cpp:124] Setting up ip1
I0428 19:53:52.544174 27885 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:52.544189 27885 net.cpp:139] Memory required for data: 3374800
I0428 19:53:52.544198 27885 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:52.544206 27885 net.cpp:86] Creating Layer relu1
I0428 19:53:52.544210 27885 net.cpp:408] relu1 <- ip1
I0428 19:53:52.544215 27885 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:52.544409 27885 net.cpp:124] Setting up relu1
I0428 19:53:52.544420 27885 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:52.544422 27885 net.cpp:139] Memory required for data: 3394800
I0428 19:53:52.544426 27885 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:52.544435 27885 net.cpp:86] Creating Layer ip2
I0428 19:53:52.544440 27885 net.cpp:408] ip2 <- ip1
I0428 19:53:52.544445 27885 net.cpp:382] ip2 -> ip2
I0428 19:53:52.544589 27885 net.cpp:124] Setting up ip2
I0428 19:53:52.544598 27885 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:52.544601 27885 net.cpp:139] Memory required for data: 3404800
I0428 19:53:52.544607 27885 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:52.544612 27885 net.cpp:86] Creating Layer relu2
I0428 19:53:52.544616 27885 net.cpp:408] relu2 <- ip2
I0428 19:53:52.544620 27885 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:52.544843 27885 net.cpp:124] Setting up relu2
I0428 19:53:52.544855 27885 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:52.544859 27885 net.cpp:139] Memory required for data: 3414800
I0428 19:53:52.544862 27885 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:52.544869 27885 net.cpp:86] Creating Layer ip3
I0428 19:53:52.544872 27885 net.cpp:408] ip3 <- ip2
I0428 19:53:52.544879 27885 net.cpp:382] ip3 -> ip3
I0428 19:53:52.544998 27885 net.cpp:124] Setting up ip3
I0428 19:53:52.545007 27885 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:52.545011 27885 net.cpp:139] Memory required for data: 3418800
I0428 19:53:52.545020 27885 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:52.545027 27885 net.cpp:86] Creating Layer relu3
I0428 19:53:52.545030 27885 net.cpp:408] relu3 <- ip3
I0428 19:53:52.545034 27885 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:52.546028 27885 net.cpp:124] Setting up relu3
I0428 19:53:52.546042 27885 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:52.546046 27885 net.cpp:139] Memory required for data: 3422800
I0428 19:53:52.546051 27885 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:52.546057 27885 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:52.546061 27885 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:52.546067 27885 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:52.546074 27885 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:52.546136 27885 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:52.546145 27885 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:52.546149 27885 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:52.546152 27885 net.cpp:139] Memory required for data: 3430800
I0428 19:53:52.546156 27885 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:52.546161 27885 net.cpp:86] Creating Layer accuracy
I0428 19:53:52.546165 27885 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:52.546169 27885 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:52.546176 27885 net.cpp:382] accuracy -> accuracy
I0428 19:53:52.546185 27885 net.cpp:124] Setting up accuracy
I0428 19:53:52.546190 27885 net.cpp:131] Top shape: (1)
I0428 19:53:52.546193 27885 net.cpp:139] Memory required for data: 3430804
I0428 19:53:52.546196 27885 layer_factory.hpp:77] Creating layer loss
I0428 19:53:52.546202 27885 net.cpp:86] Creating Layer loss
I0428 19:53:52.546205 27885 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:52.546210 27885 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:52.546214 27885 net.cpp:382] loss -> loss
I0428 19:53:52.546221 27885 layer_factory.hpp:77] Creating layer loss
I0428 19:53:52.546497 27885 net.cpp:124] Setting up loss
I0428 19:53:52.546507 27885 net.cpp:131] Top shape: (1)
I0428 19:53:52.546511 27885 net.cpp:134]     with loss weight 1
I0428 19:53:52.546519 27885 net.cpp:139] Memory required for data: 3430808
I0428 19:53:52.546535 27885 net.cpp:200] loss needs backward computation.
I0428 19:53:52.546540 27885 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:52.546543 27885 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:52.546555 27885 net.cpp:200] relu3 needs backward computation.
I0428 19:53:52.546558 27885 net.cpp:200] ip3 needs backward computation.
I0428 19:53:52.546562 27885 net.cpp:200] relu2 needs backward computation.
I0428 19:53:52.546566 27885 net.cpp:200] ip2 needs backward computation.
I0428 19:53:52.546574 27885 net.cpp:200] relu1 needs backward computation.
I0428 19:53:52.546577 27885 net.cpp:200] ip1 needs backward computation.
I0428 19:53:52.546581 27885 net.cpp:200] pool1 needs backward computation.
I0428 19:53:52.546583 27885 net.cpp:200] conv1 needs backward computation.
I0428 19:53:52.546587 27885 net.cpp:200] pool0 needs backward computation.
I0428 19:53:52.546591 27885 net.cpp:200] conv0 needs backward computation.
I0428 19:53:52.546596 27885 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:52.546599 27885 net.cpp:202] mnist does not need backward computation.
I0428 19:53:52.546603 27885 net.cpp:244] This network produces output accuracy
I0428 19:53:52.546607 27885 net.cpp:244] This network produces output loss
I0428 19:53:52.546620 27885 net.cpp:257] Network initialization done.
I0428 19:53:52.546669 27885 solver.cpp:56] Solver scaffolding done.
I0428 19:53:52.547076 27885 caffe.cpp:248] Starting Optimization
I0428 19:53:52.547083 27885 solver.cpp:273] Solving LeNet
I0428 19:53:52.547086 27885 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:52.547384 27885 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:52.552404 27885 blocking_queue.cpp:49] Waiting for data
I0428 19:53:52.623625 27892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:52.624121 27885 solver.cpp:398]     Test net output #0: accuracy = 0.1188
I0428 19:53:52.624145 27885 solver.cpp:398]     Test net output #1: loss = 2.30281 (* 1 = 2.30281 loss)
I0428 19:53:52.627285 27885 solver.cpp:219] Iteration 0 (0 iter/s, 0.080169s/100 iters), loss = 2.29958
I0428 19:53:52.627308 27885 solver.cpp:238]     Train net output #0: loss = 2.29958 (* 1 = 2.29958 loss)
I0428 19:53:52.627320 27885 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:52.736440 27885 solver.cpp:219] Iteration 100 (916.444 iter/s, 0.109117s/100 iters), loss = 1.39311
I0428 19:53:52.736484 27885 solver.cpp:238]     Train net output #0: loss = 1.39311 (* 1 = 1.39311 loss)
I0428 19:53:52.736490 27885 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:52.845975 27885 solver.cpp:219] Iteration 200 (913.385 iter/s, 0.109483s/100 iters), loss = 0.771423
I0428 19:53:52.846015 27885 solver.cpp:238]     Train net output #0: loss = 0.771423 (* 1 = 0.771423 loss)
I0428 19:53:52.846021 27885 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:52.961450 27885 solver.cpp:219] Iteration 300 (866.246 iter/s, 0.115441s/100 iters), loss = 1.09127
I0428 19:53:52.961475 27885 solver.cpp:238]     Train net output #0: loss = 1.09127 (* 1 = 1.09127 loss)
I0428 19:53:52.961482 27885 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:53.071190 27885 solver.cpp:219] Iteration 400 (911.542 iter/s, 0.109704s/100 iters), loss = 0.700354
I0428 19:53:53.071230 27885 solver.cpp:238]     Train net output #0: loss = 0.700354 (* 1 = 0.700354 loss)
I0428 19:53:53.071236 27885 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:53.179348 27885 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:53.254739 27892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:53.255249 27885 solver.cpp:398]     Test net output #0: accuracy = 0.6795
I0428 19:53:53.255285 27885 solver.cpp:398]     Test net output #1: loss = 0.796955 (* 1 = 0.796955 loss)
I0428 19:53:53.256333 27885 solver.cpp:219] Iteration 500 (540.281 iter/s, 0.185089s/100 iters), loss = 0.733381
I0428 19:53:53.256381 27885 solver.cpp:238]     Train net output #0: loss = 0.733381 (* 1 = 0.733381 loss)
I0428 19:53:53.256402 27885 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:53.370229 27885 solver.cpp:219] Iteration 600 (878.45 iter/s, 0.113837s/100 iters), loss = 0.768542
I0428 19:53:53.370270 27885 solver.cpp:238]     Train net output #0: loss = 0.768542 (* 1 = 0.768542 loss)
I0428 19:53:53.370275 27885 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:53.475147 27885 solver.cpp:219] Iteration 700 (953.469 iter/s, 0.10488s/100 iters), loss = 0.736588
I0428 19:53:53.475193 27885 solver.cpp:238]     Train net output #0: loss = 0.736588 (* 1 = 0.736588 loss)
I0428 19:53:53.475204 27885 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:53.588135 27885 solver.cpp:219] Iteration 800 (885.474 iter/s, 0.112934s/100 iters), loss = 0.919094
I0428 19:53:53.588165 27885 solver.cpp:238]     Train net output #0: loss = 0.919094 (* 1 = 0.919094 loss)
I0428 19:53:53.588172 27885 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:53.694802 27885 solver.cpp:219] Iteration 900 (937.839 iter/s, 0.106628s/100 iters), loss = 0.684698
I0428 19:53:53.694831 27885 solver.cpp:238]     Train net output #0: loss = 0.684698 (* 1 = 0.684698 loss)
I0428 19:53:53.694839 27885 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:53.730023 27891 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:53.802467 27885 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:53.804111 27885 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:53.804966 27885 solver.cpp:311] Iteration 1000, loss = 0.799055
I0428 19:53:53.804983 27885 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:53.880816 27892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:53.881357 27885 solver.cpp:398]     Test net output #0: accuracy = 0.6862
I0428 19:53:53.881377 27885 solver.cpp:398]     Test net output #1: loss = 0.767061 (* 1 = 0.767061 loss)
I0428 19:53:53.881382 27885 solver.cpp:316] Optimization Done.
I0428 19:53:53.881386 27885 caffe.cpp:259] Optimization Done.
