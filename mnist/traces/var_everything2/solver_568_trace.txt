I0428 19:49:13.144248 26705 caffe.cpp:218] Using GPUs 0
I0428 19:49:13.180799 26705 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:13.653486 26705 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test568.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:13.653695 26705 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test568.prototxt
I0428 19:49:13.654269 26705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:13.654299 26705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:13.654440 26705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:13.654548 26705 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:13.654673 26705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:13.654702 26705 net.cpp:86] Creating Layer mnist
I0428 19:49:13.654712 26705 net.cpp:382] mnist -> data
I0428 19:49:13.654742 26705 net.cpp:382] mnist -> label
I0428 19:49:13.656122 26705 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:13.659329 26705 net.cpp:124] Setting up mnist
I0428 19:49:13.659355 26705 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:13.659364 26705 net.cpp:131] Top shape: 64 (64)
I0428 19:49:13.659369 26705 net.cpp:139] Memory required for data: 200960
I0428 19:49:13.659379 26705 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:13.659402 26705 net.cpp:86] Creating Layer conv0
I0428 19:49:13.659430 26705 net.cpp:408] conv0 <- data
I0428 19:49:13.659451 26705 net.cpp:382] conv0 -> conv0
I0428 19:49:13.963346 26705 net.cpp:124] Setting up conv0
I0428 19:49:13.963377 26705 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:13.963382 26705 net.cpp:139] Memory required for data: 938240
I0428 19:49:13.963402 26705 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:13.963416 26705 net.cpp:86] Creating Layer pool0
I0428 19:49:13.963421 26705 net.cpp:408] pool0 <- conv0
I0428 19:49:13.963428 26705 net.cpp:382] pool0 -> pool0
I0428 19:49:13.963497 26705 net.cpp:124] Setting up pool0
I0428 19:49:13.963506 26705 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:13.963510 26705 net.cpp:139] Memory required for data: 1122560
I0428 19:49:13.963515 26705 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:13.963527 26705 net.cpp:86] Creating Layer conv1
I0428 19:49:13.963531 26705 net.cpp:408] conv1 <- pool0
I0428 19:49:13.963537 26705 net.cpp:382] conv1 -> conv1
I0428 19:49:13.965739 26705 net.cpp:124] Setting up conv1
I0428 19:49:13.965755 26705 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:13.965760 26705 net.cpp:139] Memory required for data: 1204480
I0428 19:49:13.965770 26705 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:13.965780 26705 net.cpp:86] Creating Layer pool1
I0428 19:49:13.965783 26705 net.cpp:408] pool1 <- conv1
I0428 19:49:13.965790 26705 net.cpp:382] pool1 -> pool1
I0428 19:49:13.965834 26705 net.cpp:124] Setting up pool1
I0428 19:49:13.965843 26705 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:13.965847 26705 net.cpp:139] Memory required for data: 1224960
I0428 19:49:13.965850 26705 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:13.965858 26705 net.cpp:86] Creating Layer ip1
I0428 19:49:13.965862 26705 net.cpp:408] ip1 <- pool1
I0428 19:49:13.965868 26705 net.cpp:382] ip1 -> ip1
I0428 19:49:13.966987 26705 net.cpp:124] Setting up ip1
I0428 19:49:13.967001 26705 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:13.967005 26705 net.cpp:139] Memory required for data: 1231360
I0428 19:49:13.967015 26705 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:13.967022 26705 net.cpp:86] Creating Layer relu1
I0428 19:49:13.967026 26705 net.cpp:408] relu1 <- ip1
I0428 19:49:13.967032 26705 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:13.967237 26705 net.cpp:124] Setting up relu1
I0428 19:49:13.967248 26705 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:13.967252 26705 net.cpp:139] Memory required for data: 1237760
I0428 19:49:13.967257 26705 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:13.967264 26705 net.cpp:86] Creating Layer ip2
I0428 19:49:13.967268 26705 net.cpp:408] ip2 <- ip1
I0428 19:49:13.967274 26705 net.cpp:382] ip2 -> ip2
I0428 19:49:13.967391 26705 net.cpp:124] Setting up ip2
I0428 19:49:13.967401 26705 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:13.967404 26705 net.cpp:139] Memory required for data: 1240320
I0428 19:49:13.967411 26705 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:13.967418 26705 net.cpp:86] Creating Layer relu2
I0428 19:49:13.967422 26705 net.cpp:408] relu2 <- ip2
I0428 19:49:13.967428 26705 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:13.968287 26705 net.cpp:124] Setting up relu2
I0428 19:49:13.968303 26705 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:13.968307 26705 net.cpp:139] Memory required for data: 1242880
I0428 19:49:13.968312 26705 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:13.968320 26705 net.cpp:86] Creating Layer ip3
I0428 19:49:13.968324 26705 net.cpp:408] ip3 <- ip2
I0428 19:49:13.968333 26705 net.cpp:382] ip3 -> ip3
I0428 19:49:13.968456 26705 net.cpp:124] Setting up ip3
I0428 19:49:13.968466 26705 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:13.968469 26705 net.cpp:139] Memory required for data: 1245440
I0428 19:49:13.968480 26705 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:13.968487 26705 net.cpp:86] Creating Layer relu3
I0428 19:49:13.968489 26705 net.cpp:408] relu3 <- ip3
I0428 19:49:13.968497 26705 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:13.968706 26705 net.cpp:124] Setting up relu3
I0428 19:49:13.968717 26705 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:13.968721 26705 net.cpp:139] Memory required for data: 1248000
I0428 19:49:13.968725 26705 layer_factory.hpp:77] Creating layer loss
I0428 19:49:13.968732 26705 net.cpp:86] Creating Layer loss
I0428 19:49:13.968736 26705 net.cpp:408] loss <- ip3
I0428 19:49:13.968740 26705 net.cpp:408] loss <- label
I0428 19:49:13.968749 26705 net.cpp:382] loss -> loss
I0428 19:49:13.968770 26705 layer_factory.hpp:77] Creating layer loss
I0428 19:49:13.969079 26705 net.cpp:124] Setting up loss
I0428 19:49:13.969090 26705 net.cpp:131] Top shape: (1)
I0428 19:49:13.969094 26705 net.cpp:134]     with loss weight 1
I0428 19:49:13.969110 26705 net.cpp:139] Memory required for data: 1248004
I0428 19:49:13.969115 26705 net.cpp:200] loss needs backward computation.
I0428 19:49:13.969120 26705 net.cpp:200] relu3 needs backward computation.
I0428 19:49:13.969123 26705 net.cpp:200] ip3 needs backward computation.
I0428 19:49:13.969126 26705 net.cpp:200] relu2 needs backward computation.
I0428 19:49:13.969130 26705 net.cpp:200] ip2 needs backward computation.
I0428 19:49:13.969133 26705 net.cpp:200] relu1 needs backward computation.
I0428 19:49:13.969137 26705 net.cpp:200] ip1 needs backward computation.
I0428 19:49:13.969141 26705 net.cpp:200] pool1 needs backward computation.
I0428 19:49:13.969144 26705 net.cpp:200] conv1 needs backward computation.
I0428 19:49:13.969148 26705 net.cpp:200] pool0 needs backward computation.
I0428 19:49:13.969152 26705 net.cpp:200] conv0 needs backward computation.
I0428 19:49:13.969156 26705 net.cpp:202] mnist does not need backward computation.
I0428 19:49:13.969159 26705 net.cpp:244] This network produces output loss
I0428 19:49:13.969173 26705 net.cpp:257] Network initialization done.
I0428 19:49:13.969555 26705 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test568.prototxt
I0428 19:49:13.969588 26705 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:13.969699 26705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:13.969797 26705 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:13.969848 26705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:13.969864 26705 net.cpp:86] Creating Layer mnist
I0428 19:49:13.969869 26705 net.cpp:382] mnist -> data
I0428 19:49:13.969879 26705 net.cpp:382] mnist -> label
I0428 19:49:13.969983 26705 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:13.972184 26705 net.cpp:124] Setting up mnist
I0428 19:49:13.972200 26705 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:13.972206 26705 net.cpp:131] Top shape: 100 (100)
I0428 19:49:13.972210 26705 net.cpp:139] Memory required for data: 314000
I0428 19:49:13.972215 26705 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:13.972226 26705 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:13.972231 26705 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:13.972237 26705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:13.972247 26705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:13.972326 26705 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:13.972333 26705 net.cpp:131] Top shape: 100 (100)
I0428 19:49:13.972338 26705 net.cpp:131] Top shape: 100 (100)
I0428 19:49:13.972342 26705 net.cpp:139] Memory required for data: 314800
I0428 19:49:13.972345 26705 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:13.972357 26705 net.cpp:86] Creating Layer conv0
I0428 19:49:13.972362 26705 net.cpp:408] conv0 <- data
I0428 19:49:13.972368 26705 net.cpp:382] conv0 -> conv0
I0428 19:49:13.974257 26705 net.cpp:124] Setting up conv0
I0428 19:49:13.974274 26705 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:13.974279 26705 net.cpp:139] Memory required for data: 1466800
I0428 19:49:13.974290 26705 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:13.974298 26705 net.cpp:86] Creating Layer pool0
I0428 19:49:13.974301 26705 net.cpp:408] pool0 <- conv0
I0428 19:49:13.974308 26705 net.cpp:382] pool0 -> pool0
I0428 19:49:13.974362 26705 net.cpp:124] Setting up pool0
I0428 19:49:13.974371 26705 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:13.974375 26705 net.cpp:139] Memory required for data: 1754800
I0428 19:49:13.974378 26705 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:13.974388 26705 net.cpp:86] Creating Layer conv1
I0428 19:49:13.974392 26705 net.cpp:408] conv1 <- pool0
I0428 19:49:13.974398 26705 net.cpp:382] conv1 -> conv1
I0428 19:49:13.976739 26705 net.cpp:124] Setting up conv1
I0428 19:49:13.976757 26705 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:13.976761 26705 net.cpp:139] Memory required for data: 1882800
I0428 19:49:13.976773 26705 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:13.976780 26705 net.cpp:86] Creating Layer pool1
I0428 19:49:13.976785 26705 net.cpp:408] pool1 <- conv1
I0428 19:49:13.976791 26705 net.cpp:382] pool1 -> pool1
I0428 19:49:13.976869 26705 net.cpp:124] Setting up pool1
I0428 19:49:13.976879 26705 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:13.976882 26705 net.cpp:139] Memory required for data: 1914800
I0428 19:49:13.976886 26705 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:13.976902 26705 net.cpp:86] Creating Layer ip1
I0428 19:49:13.976907 26705 net.cpp:408] ip1 <- pool1
I0428 19:49:13.976912 26705 net.cpp:382] ip1 -> ip1
I0428 19:49:13.977097 26705 net.cpp:124] Setting up ip1
I0428 19:49:13.977109 26705 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:13.977125 26705 net.cpp:139] Memory required for data: 1924800
I0428 19:49:13.977135 26705 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:13.977141 26705 net.cpp:86] Creating Layer relu1
I0428 19:49:13.977145 26705 net.cpp:408] relu1 <- ip1
I0428 19:49:13.977150 26705 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:13.977351 26705 net.cpp:124] Setting up relu1
I0428 19:49:13.977361 26705 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:13.977366 26705 net.cpp:139] Memory required for data: 1934800
I0428 19:49:13.977370 26705 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:13.977377 26705 net.cpp:86] Creating Layer ip2
I0428 19:49:13.977381 26705 net.cpp:408] ip2 <- ip1
I0428 19:49:13.977388 26705 net.cpp:382] ip2 -> ip2
I0428 19:49:13.977504 26705 net.cpp:124] Setting up ip2
I0428 19:49:13.977514 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.977517 26705 net.cpp:139] Memory required for data: 1938800
I0428 19:49:13.977524 26705 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:13.977530 26705 net.cpp:86] Creating Layer relu2
I0428 19:49:13.977533 26705 net.cpp:408] relu2 <- ip2
I0428 19:49:13.977538 26705 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:13.977716 26705 net.cpp:124] Setting up relu2
I0428 19:49:13.977726 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.977730 26705 net.cpp:139] Memory required for data: 1942800
I0428 19:49:13.977733 26705 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:13.977741 26705 net.cpp:86] Creating Layer ip3
I0428 19:49:13.977743 26705 net.cpp:408] ip3 <- ip2
I0428 19:49:13.977749 26705 net.cpp:382] ip3 -> ip3
I0428 19:49:13.977874 26705 net.cpp:124] Setting up ip3
I0428 19:49:13.977882 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.977886 26705 net.cpp:139] Memory required for data: 1946800
I0428 19:49:13.977895 26705 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:13.977900 26705 net.cpp:86] Creating Layer relu3
I0428 19:49:13.977905 26705 net.cpp:408] relu3 <- ip3
I0428 19:49:13.977910 26705 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:13.978811 26705 net.cpp:124] Setting up relu3
I0428 19:49:13.978824 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.978828 26705 net.cpp:139] Memory required for data: 1950800
I0428 19:49:13.978838 26705 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:13.978844 26705 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:13.978848 26705 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:13.978854 26705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:13.978863 26705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:13.978905 26705 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:13.978912 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.978919 26705 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:13.978921 26705 net.cpp:139] Memory required for data: 1958800
I0428 19:49:13.978932 26705 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:13.978938 26705 net.cpp:86] Creating Layer accuracy
I0428 19:49:13.978942 26705 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:13.978948 26705 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:13.978953 26705 net.cpp:382] accuracy -> accuracy
I0428 19:49:13.978961 26705 net.cpp:124] Setting up accuracy
I0428 19:49:13.978966 26705 net.cpp:131] Top shape: (1)
I0428 19:49:13.978970 26705 net.cpp:139] Memory required for data: 1958804
I0428 19:49:13.978973 26705 layer_factory.hpp:77] Creating layer loss
I0428 19:49:13.978978 26705 net.cpp:86] Creating Layer loss
I0428 19:49:13.978983 26705 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:13.978987 26705 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:13.978992 26705 net.cpp:382] loss -> loss
I0428 19:49:13.978999 26705 layer_factory.hpp:77] Creating layer loss
I0428 19:49:13.979271 26705 net.cpp:124] Setting up loss
I0428 19:49:13.979282 26705 net.cpp:131] Top shape: (1)
I0428 19:49:13.979286 26705 net.cpp:134]     with loss weight 1
I0428 19:49:13.979295 26705 net.cpp:139] Memory required for data: 1958808
I0428 19:49:13.979310 26705 net.cpp:200] loss needs backward computation.
I0428 19:49:13.979315 26705 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:13.979321 26705 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:13.979324 26705 net.cpp:200] relu3 needs backward computation.
I0428 19:49:13.979328 26705 net.cpp:200] ip3 needs backward computation.
I0428 19:49:13.979332 26705 net.cpp:200] relu2 needs backward computation.
I0428 19:49:13.979336 26705 net.cpp:200] ip2 needs backward computation.
I0428 19:49:13.979339 26705 net.cpp:200] relu1 needs backward computation.
I0428 19:49:13.979342 26705 net.cpp:200] ip1 needs backward computation.
I0428 19:49:13.979346 26705 net.cpp:200] pool1 needs backward computation.
I0428 19:49:13.979351 26705 net.cpp:200] conv1 needs backward computation.
I0428 19:49:13.979356 26705 net.cpp:200] pool0 needs backward computation.
I0428 19:49:13.979359 26705 net.cpp:200] conv0 needs backward computation.
I0428 19:49:13.979364 26705 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:13.979368 26705 net.cpp:202] mnist does not need backward computation.
I0428 19:49:13.979372 26705 net.cpp:244] This network produces output accuracy
I0428 19:49:13.979377 26705 net.cpp:244] This network produces output loss
I0428 19:49:13.979389 26705 net.cpp:257] Network initialization done.
I0428 19:49:13.979439 26705 solver.cpp:56] Solver scaffolding done.
I0428 19:49:13.979879 26705 caffe.cpp:248] Starting Optimization
I0428 19:49:13.979887 26705 solver.cpp:273] Solving LeNet
I0428 19:49:13.979890 26705 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:13.980849 26705 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:13.985222 26705 blocking_queue.cpp:49] Waiting for data
I0428 19:49:14.052455 26713 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:14.053150 26705 solver.cpp:398]     Test net output #0: accuracy = 0.1011
I0428 19:49:14.053189 26705 solver.cpp:398]     Test net output #1: loss = 2.30075 (* 1 = 2.30075 loss)
I0428 19:49:14.055824 26705 solver.cpp:219] Iteration 0 (2.99925 iter/s, 0.075902s/100 iters), loss = 2.28142
I0428 19:49:14.055866 26705 solver.cpp:238]     Train net output #0: loss = 2.28142 (* 1 = 2.28142 loss)
I0428 19:49:14.055883 26705 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:14.135218 26705 solver.cpp:219] Iteration 100 (1260.29 iter/s, 0.0793467s/100 iters), loss = 1.17415
I0428 19:49:14.135243 26705 solver.cpp:238]     Train net output #0: loss = 1.17415 (* 1 = 1.17415 loss)
I0428 19:49:14.135249 26705 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:14.205493 26705 solver.cpp:219] Iteration 200 (1423.66 iter/s, 0.0702413s/100 iters), loss = 0.732016
I0428 19:49:14.205518 26705 solver.cpp:238]     Train net output #0: loss = 0.732016 (* 1 = 0.732016 loss)
I0428 19:49:14.205524 26705 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:14.276836 26705 solver.cpp:219] Iteration 300 (1402.6 iter/s, 0.071296s/100 iters), loss = 0.432319
I0428 19:49:14.276861 26705 solver.cpp:238]     Train net output #0: loss = 0.432319 (* 1 = 0.432319 loss)
I0428 19:49:14.276886 26705 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:14.348835 26705 solver.cpp:219] Iteration 400 (1389.57 iter/s, 0.0719647s/100 iters), loss = 0.338903
I0428 19:49:14.348875 26705 solver.cpp:238]     Train net output #0: loss = 0.338903 (* 1 = 0.338903 loss)
I0428 19:49:14.348881 26705 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:14.420140 26705 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:14.472878 26713 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:14.473373 26705 solver.cpp:398]     Test net output #0: accuracy = 0.9112
I0428 19:49:14.473408 26705 solver.cpp:398]     Test net output #1: loss = 0.29209 (* 1 = 0.29209 loss)
I0428 19:49:14.474167 26705 solver.cpp:219] Iteration 500 (798.112 iter/s, 0.125296s/100 iters), loss = 0.215129
I0428 19:49:14.474206 26705 solver.cpp:238]     Train net output #0: loss = 0.215129 (* 1 = 0.215129 loss)
I0428 19:49:14.474228 26705 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:14.545380 26705 solver.cpp:219] Iteration 600 (1405.16 iter/s, 0.071166s/100 iters), loss = 0.289911
I0428 19:49:14.545403 26705 solver.cpp:238]     Train net output #0: loss = 0.289911 (* 1 = 0.289911 loss)
I0428 19:49:14.545409 26705 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:14.616760 26705 solver.cpp:219] Iteration 700 (1401.58 iter/s, 0.0713482s/100 iters), loss = 0.207595
I0428 19:49:14.616799 26705 solver.cpp:238]     Train net output #0: loss = 0.207594 (* 1 = 0.207594 loss)
I0428 19:49:14.616806 26705 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:14.705118 26705 solver.cpp:219] Iteration 800 (1132.47 iter/s, 0.0883026s/100 iters), loss = 0.117894
I0428 19:49:14.705165 26705 solver.cpp:238]     Train net output #0: loss = 0.117894 (* 1 = 0.117894 loss)
I0428 19:49:14.705181 26705 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:14.792176 26705 solver.cpp:219] Iteration 900 (1149.35 iter/s, 0.087006s/100 iters), loss = 0.389373
I0428 19:49:14.792207 26705 solver.cpp:238]     Train net output #0: loss = 0.389373 (* 1 = 0.389373 loss)
I0428 19:49:14.792215 26705 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:14.817207 26712 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:14.865979 26705 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:14.866731 26705 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:14.867220 26705 solver.cpp:311] Iteration 1000, loss = 0.158353
I0428 19:49:14.867247 26705 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:14.929085 26713 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:14.929597 26705 solver.cpp:398]     Test net output #0: accuracy = 0.9507
I0428 19:49:14.929620 26705 solver.cpp:398]     Test net output #1: loss = 0.162168 (* 1 = 0.162168 loss)
I0428 19:49:14.929625 26705 solver.cpp:316] Optimization Done.
I0428 19:49:14.929628 26705 caffe.cpp:259] Optimization Done.
