I0428 20:29:02.024937  3465 caffe.cpp:218] Using GPUs 0
I0428 20:29:02.058413  3465 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:29:02.500998  3465 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1515.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:29:02.501180  3465 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1515.prototxt
I0428 20:29:02.501519  3465 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:29:02.501539  3465 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:29:02.501644  3465 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:02.501732  3465 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:02.501837  3465 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:29:02.501863  3465 net.cpp:86] Creating Layer mnist
I0428 20:29:02.501873  3465 net.cpp:382] mnist -> data
I0428 20:29:02.501898  3465 net.cpp:382] mnist -> label
I0428 20:29:02.502915  3465 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:29:02.505098  3465 net.cpp:124] Setting up mnist
I0428 20:29:02.505115  3465 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:29:02.505122  3465 net.cpp:131] Top shape: 64 (64)
I0428 20:29:02.505127  3465 net.cpp:139] Memory required for data: 200960
I0428 20:29:02.505136  3465 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:02.505156  3465 net.cpp:86] Creating Layer conv0
I0428 20:29:02.505175  3465 net.cpp:408] conv0 <- data
I0428 20:29:02.505192  3465 net.cpp:382] conv0 -> conv0
I0428 20:29:02.739718  3465 net.cpp:124] Setting up conv0
I0428 20:29:02.739748  3465 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:29:02.739753  3465 net.cpp:139] Memory required for data: 14946560
I0428 20:29:02.739786  3465 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:02.739804  3465 net.cpp:86] Creating Layer pool0
I0428 20:29:02.739810  3465 net.cpp:408] pool0 <- conv0
I0428 20:29:02.739820  3465 net.cpp:382] pool0 -> pool0
I0428 20:29:02.739889  3465 net.cpp:124] Setting up pool0
I0428 20:29:02.739898  3465 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:29:02.739902  3465 net.cpp:139] Memory required for data: 18632960
I0428 20:29:02.739907  3465 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:02.739923  3465 net.cpp:86] Creating Layer conv1
I0428 20:29:02.739928  3465 net.cpp:408] conv1 <- pool0
I0428 20:29:02.739936  3465 net.cpp:382] conv1 -> conv1
I0428 20:29:02.742822  3465 net.cpp:124] Setting up conv1
I0428 20:29:02.742852  3465 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:29:02.742858  3465 net.cpp:139] Memory required for data: 18714880
I0428 20:29:02.742887  3465 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:02.742897  3465 net.cpp:86] Creating Layer pool1
I0428 20:29:02.742903  3465 net.cpp:408] pool1 <- conv1
I0428 20:29:02.742911  3465 net.cpp:382] pool1 -> pool1
I0428 20:29:02.742955  3465 net.cpp:124] Setting up pool1
I0428 20:29:02.742964  3465 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:29:02.742969  3465 net.cpp:139] Memory required for data: 18735360
I0428 20:29:02.742974  3465 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:02.742985  3465 net.cpp:86] Creating Layer ip1
I0428 20:29:02.742990  3465 net.cpp:408] ip1 <- pool1
I0428 20:29:02.742998  3465 net.cpp:382] ip1 -> ip1
I0428 20:29:02.743142  3465 net.cpp:124] Setting up ip1
I0428 20:29:02.743151  3465 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:02.743156  3465 net.cpp:139] Memory required for data: 18748160
I0428 20:29:02.743168  3465 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:02.743194  3465 net.cpp:86] Creating Layer relu1
I0428 20:29:02.743203  3465 net.cpp:408] relu1 <- ip1
I0428 20:29:02.743211  3465 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:02.743387  3465 net.cpp:124] Setting up relu1
I0428 20:29:02.743397  3465 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:02.743402  3465 net.cpp:139] Memory required for data: 18760960
I0428 20:29:02.743407  3465 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:02.743417  3465 net.cpp:86] Creating Layer ip2
I0428 20:29:02.743422  3465 net.cpp:408] ip2 <- ip1
I0428 20:29:02.743429  3465 net.cpp:382] ip2 -> ip2
I0428 20:29:02.743530  3465 net.cpp:124] Setting up ip2
I0428 20:29:02.743537  3465 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:02.743542  3465 net.cpp:139] Memory required for data: 18767360
I0428 20:29:02.743551  3465 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:02.743573  3465 net.cpp:86] Creating Layer relu2
I0428 20:29:02.743578  3465 net.cpp:408] relu2 <- ip2
I0428 20:29:02.743585  3465 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:02.744379  3465 net.cpp:124] Setting up relu2
I0428 20:29:02.744392  3465 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:02.744397  3465 net.cpp:139] Memory required for data: 18773760
I0428 20:29:02.744402  3465 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:02.744412  3465 net.cpp:86] Creating Layer ip3
I0428 20:29:02.744417  3465 net.cpp:408] ip3 <- ip2
I0428 20:29:02.744426  3465 net.cpp:382] ip3 -> ip3
I0428 20:29:02.744519  3465 net.cpp:124] Setting up ip3
I0428 20:29:02.744529  3465 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:02.744534  3465 net.cpp:139] Memory required for data: 18776320
I0428 20:29:02.744546  3465 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:02.744555  3465 net.cpp:86] Creating Layer relu3
I0428 20:29:02.744561  3465 net.cpp:408] relu3 <- ip3
I0428 20:29:02.744568  3465 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:02.744722  3465 net.cpp:124] Setting up relu3
I0428 20:29:02.744732  3465 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:02.744737  3465 net.cpp:139] Memory required for data: 18778880
I0428 20:29:02.744742  3465 layer_factory.hpp:77] Creating layer loss
I0428 20:29:02.744750  3465 net.cpp:86] Creating Layer loss
I0428 20:29:02.744755  3465 net.cpp:408] loss <- ip3
I0428 20:29:02.744761  3465 net.cpp:408] loss <- label
I0428 20:29:02.744786  3465 net.cpp:382] loss -> loss
I0428 20:29:02.744804  3465 layer_factory.hpp:77] Creating layer loss
I0428 20:29:02.745121  3465 net.cpp:124] Setting up loss
I0428 20:29:02.745133  3465 net.cpp:131] Top shape: (1)
I0428 20:29:02.745141  3465 net.cpp:134]     with loss weight 1
I0428 20:29:02.745188  3465 net.cpp:139] Memory required for data: 18778884
I0428 20:29:02.745194  3465 net.cpp:200] loss needs backward computation.
I0428 20:29:02.745200  3465 net.cpp:200] relu3 needs backward computation.
I0428 20:29:02.745205  3465 net.cpp:200] ip3 needs backward computation.
I0428 20:29:02.745211  3465 net.cpp:200] relu2 needs backward computation.
I0428 20:29:02.745215  3465 net.cpp:200] ip2 needs backward computation.
I0428 20:29:02.745221  3465 net.cpp:200] relu1 needs backward computation.
I0428 20:29:02.745225  3465 net.cpp:200] ip1 needs backward computation.
I0428 20:29:02.745230  3465 net.cpp:200] pool1 needs backward computation.
I0428 20:29:02.745236  3465 net.cpp:200] conv1 needs backward computation.
I0428 20:29:02.745241  3465 net.cpp:200] pool0 needs backward computation.
I0428 20:29:02.745246  3465 net.cpp:200] conv0 needs backward computation.
I0428 20:29:02.745252  3465 net.cpp:202] mnist does not need backward computation.
I0428 20:29:02.745257  3465 net.cpp:244] This network produces output loss
I0428 20:29:02.745271  3465 net.cpp:257] Network initialization done.
I0428 20:29:02.745652  3465 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1515.prototxt
I0428 20:29:02.745684  3465 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:29:02.745774  3465 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:02.745880  3465 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:02.745936  3465 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:29:02.745954  3465 net.cpp:86] Creating Layer mnist
I0428 20:29:02.745960  3465 net.cpp:382] mnist -> data
I0428 20:29:02.745971  3465 net.cpp:382] mnist -> label
I0428 20:29:02.746091  3465 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:29:02.748277  3465 net.cpp:124] Setting up mnist
I0428 20:29:02.748322  3465 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:29:02.748345  3465 net.cpp:131] Top shape: 100 (100)
I0428 20:29:02.748352  3465 net.cpp:139] Memory required for data: 314000
I0428 20:29:02.748358  3465 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:29:02.748368  3465 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:29:02.748373  3465 net.cpp:408] label_mnist_1_split <- label
I0428 20:29:02.748381  3465 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:29:02.748392  3465 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:29:02.748488  3465 net.cpp:124] Setting up label_mnist_1_split
I0428 20:29:02.748497  3465 net.cpp:131] Top shape: 100 (100)
I0428 20:29:02.748504  3465 net.cpp:131] Top shape: 100 (100)
I0428 20:29:02.748510  3465 net.cpp:139] Memory required for data: 314800
I0428 20:29:02.748515  3465 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:02.748529  3465 net.cpp:86] Creating Layer conv0
I0428 20:29:02.748536  3465 net.cpp:408] conv0 <- data
I0428 20:29:02.748546  3465 net.cpp:382] conv0 -> conv0
I0428 20:29:02.750203  3465 net.cpp:124] Setting up conv0
I0428 20:29:02.750219  3465 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:29:02.750226  3465 net.cpp:139] Memory required for data: 23354800
I0428 20:29:02.750238  3465 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:02.750248  3465 net.cpp:86] Creating Layer pool0
I0428 20:29:02.750254  3465 net.cpp:408] pool0 <- conv0
I0428 20:29:02.750262  3465 net.cpp:382] pool0 -> pool0
I0428 20:29:02.750300  3465 net.cpp:124] Setting up pool0
I0428 20:29:02.750308  3465 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:29:02.750313  3465 net.cpp:139] Memory required for data: 29114800
I0428 20:29:02.750319  3465 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:02.750330  3465 net.cpp:86] Creating Layer conv1
I0428 20:29:02.750336  3465 net.cpp:408] conv1 <- pool0
I0428 20:29:02.750344  3465 net.cpp:382] conv1 -> conv1
I0428 20:29:02.752025  3465 net.cpp:124] Setting up conv1
I0428 20:29:02.752058  3465 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:29:02.752064  3465 net.cpp:139] Memory required for data: 29242800
I0428 20:29:02.752109  3465 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:02.752118  3465 net.cpp:86] Creating Layer pool1
I0428 20:29:02.752125  3465 net.cpp:408] pool1 <- conv1
I0428 20:29:02.752133  3465 net.cpp:382] pool1 -> pool1
I0428 20:29:02.752174  3465 net.cpp:124] Setting up pool1
I0428 20:29:02.752183  3465 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:29:02.752189  3465 net.cpp:139] Memory required for data: 29274800
I0428 20:29:02.752194  3465 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:02.752203  3465 net.cpp:86] Creating Layer ip1
I0428 20:29:02.752209  3465 net.cpp:408] ip1 <- pool1
I0428 20:29:02.752218  3465 net.cpp:382] ip1 -> ip1
I0428 20:29:02.752341  3465 net.cpp:124] Setting up ip1
I0428 20:29:02.752351  3465 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:02.752367  3465 net.cpp:139] Memory required for data: 29294800
I0428 20:29:02.752393  3465 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:02.752403  3465 net.cpp:86] Creating Layer relu1
I0428 20:29:02.752408  3465 net.cpp:408] relu1 <- ip1
I0428 20:29:02.752414  3465 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:02.752564  3465 net.cpp:124] Setting up relu1
I0428 20:29:02.752574  3465 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:02.752580  3465 net.cpp:139] Memory required for data: 29314800
I0428 20:29:02.752585  3465 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:02.752596  3465 net.cpp:86] Creating Layer ip2
I0428 20:29:02.752601  3465 net.cpp:408] ip2 <- ip1
I0428 20:29:02.752610  3465 net.cpp:382] ip2 -> ip2
I0428 20:29:02.752748  3465 net.cpp:124] Setting up ip2
I0428 20:29:02.752756  3465 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:02.752761  3465 net.cpp:139] Memory required for data: 29324800
I0428 20:29:02.752770  3465 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:02.752777  3465 net.cpp:86] Creating Layer relu2
I0428 20:29:02.752782  3465 net.cpp:408] relu2 <- ip2
I0428 20:29:02.752790  3465 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:02.752995  3465 net.cpp:124] Setting up relu2
I0428 20:29:02.753005  3465 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:02.753011  3465 net.cpp:139] Memory required for data: 29334800
I0428 20:29:02.753017  3465 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:02.753041  3465 net.cpp:86] Creating Layer ip3
I0428 20:29:02.753046  3465 net.cpp:408] ip3 <- ip2
I0428 20:29:02.753056  3465 net.cpp:382] ip3 -> ip3
I0428 20:29:02.753190  3465 net.cpp:124] Setting up ip3
I0428 20:29:02.753199  3465 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:02.753206  3465 net.cpp:139] Memory required for data: 29338800
I0428 20:29:02.753218  3465 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:02.753227  3465 net.cpp:86] Creating Layer relu3
I0428 20:29:02.753233  3465 net.cpp:408] relu3 <- ip3
I0428 20:29:02.753242  3465 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:02.754067  3465 net.cpp:124] Setting up relu3
I0428 20:29:02.754081  3465 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:02.754086  3465 net.cpp:139] Memory required for data: 29342800
I0428 20:29:02.754092  3465 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:29:02.754101  3465 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:29:02.754106  3465 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:29:02.754113  3465 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:29:02.754137  3465 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:29:02.754201  3465 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:29:02.754210  3465 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:02.754216  3465 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:02.754221  3465 net.cpp:139] Memory required for data: 29350800
I0428 20:29:02.754226  3465 layer_factory.hpp:77] Creating layer accuracy
I0428 20:29:02.754235  3465 net.cpp:86] Creating Layer accuracy
I0428 20:29:02.754248  3465 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:29:02.754256  3465 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:29:02.754263  3465 net.cpp:382] accuracy -> accuracy
I0428 20:29:02.754281  3465 net.cpp:124] Setting up accuracy
I0428 20:29:02.754288  3465 net.cpp:131] Top shape: (1)
I0428 20:29:02.754293  3465 net.cpp:139] Memory required for data: 29350804
I0428 20:29:02.754298  3465 layer_factory.hpp:77] Creating layer loss
I0428 20:29:02.754305  3465 net.cpp:86] Creating Layer loss
I0428 20:29:02.754312  3465 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:29:02.754317  3465 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:29:02.754324  3465 net.cpp:382] loss -> loss
I0428 20:29:02.754333  3465 layer_factory.hpp:77] Creating layer loss
I0428 20:29:02.754554  3465 net.cpp:124] Setting up loss
I0428 20:29:02.754565  3465 net.cpp:131] Top shape: (1)
I0428 20:29:02.754570  3465 net.cpp:134]     with loss weight 1
I0428 20:29:02.754590  3465 net.cpp:139] Memory required for data: 29350808
I0428 20:29:02.754597  3465 net.cpp:200] loss needs backward computation.
I0428 20:29:02.754603  3465 net.cpp:202] accuracy does not need backward computation.
I0428 20:29:02.754609  3465 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:29:02.754614  3465 net.cpp:200] relu3 needs backward computation.
I0428 20:29:02.754619  3465 net.cpp:200] ip3 needs backward computation.
I0428 20:29:02.754626  3465 net.cpp:200] relu2 needs backward computation.
I0428 20:29:02.754629  3465 net.cpp:200] ip2 needs backward computation.
I0428 20:29:02.754636  3465 net.cpp:200] relu1 needs backward computation.
I0428 20:29:02.754640  3465 net.cpp:200] ip1 needs backward computation.
I0428 20:29:02.754647  3465 net.cpp:200] pool1 needs backward computation.
I0428 20:29:02.754652  3465 net.cpp:200] conv1 needs backward computation.
I0428 20:29:02.754657  3465 net.cpp:200] pool0 needs backward computation.
I0428 20:29:02.754673  3465 net.cpp:200] conv0 needs backward computation.
I0428 20:29:02.754678  3465 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:29:02.754684  3465 net.cpp:202] mnist does not need backward computation.
I0428 20:29:02.754689  3465 net.cpp:244] This network produces output accuracy
I0428 20:29:02.754694  3465 net.cpp:244] This network produces output loss
I0428 20:29:02.754709  3465 net.cpp:257] Network initialization done.
I0428 20:29:02.754755  3465 solver.cpp:56] Solver scaffolding done.
I0428 20:29:02.755146  3465 caffe.cpp:248] Starting Optimization
I0428 20:29:02.755163  3465 solver.cpp:273] Solving LeNet
I0428 20:29:02.755168  3465 solver.cpp:274] Learning Rate Policy: inv
I0428 20:29:02.755476  3465 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:29:02.851306  3472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:02.853749  3465 solver.cpp:398]     Test net output #0: accuracy = 0.0742
I0428 20:29:02.853782  3465 solver.cpp:398]     Test net output #1: loss = 2.32866 (* 1 = 2.32866 loss)
I0428 20:29:02.858474  3465 solver.cpp:219] Iteration 0 (-7.8753e-43 iter/s, 0.103269s/100 iters), loss = 2.33995
I0428 20:29:02.858500  3465 solver.cpp:238]     Train net output #0: loss = 2.33995 (* 1 = 2.33995 loss)
I0428 20:29:02.858533  3465 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:29:03.058979  3465 solver.cpp:219] Iteration 100 (498.839 iter/s, 0.200465s/100 iters), loss = 1.58458
I0428 20:29:03.059006  3465 solver.cpp:238]     Train net output #0: loss = 1.58458 (* 1 = 1.58458 loss)
I0428 20:29:03.059031  3465 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:29:03.282660  3465 solver.cpp:219] Iteration 200 (447.162 iter/s, 0.223632s/100 iters), loss = 1.34536
I0428 20:29:03.282717  3465 solver.cpp:238]     Train net output #0: loss = 1.34536 (* 1 = 1.34536 loss)
I0428 20:29:03.282738  3465 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:29:03.507939  3465 solver.cpp:219] Iteration 300 (444.031 iter/s, 0.225209s/100 iters), loss = 1.27616
I0428 20:29:03.507998  3465 solver.cpp:238]     Train net output #0: loss = 1.27616 (* 1 = 1.27616 loss)
I0428 20:29:03.508020  3465 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:29:03.732434  3465 solver.cpp:219] Iteration 400 (445.589 iter/s, 0.224422s/100 iters), loss = 0.865558
I0428 20:29:03.732496  3465 solver.cpp:238]     Train net output #0: loss = 0.865558 (* 1 = 0.865558 loss)
I0428 20:29:03.732516  3465 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:29:03.950026  3465 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:29:04.051379  3472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:04.054863  3465 solver.cpp:398]     Test net output #0: accuracy = 0.5674
I0428 20:29:04.054890  3465 solver.cpp:398]     Test net output #1: loss = 1.05984 (* 1 = 1.05984 loss)
I0428 20:29:04.056807  3465 solver.cpp:219] Iteration 500 (308.357 iter/s, 0.3243s/100 iters), loss = 0.995783
I0428 20:29:04.056845  3465 solver.cpp:238]     Train net output #0: loss = 0.995783 (* 1 = 0.995783 loss)
I0428 20:29:04.056877  3465 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:29:04.273066  3465 solver.cpp:219] Iteration 600 (462.532 iter/s, 0.216201s/100 iters), loss = 1.25908
I0428 20:29:04.273141  3465 solver.cpp:238]     Train net output #0: loss = 1.25908 (* 1 = 1.25908 loss)
I0428 20:29:04.273164  3465 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:29:04.498428  3465 solver.cpp:219] Iteration 700 (443.876 iter/s, 0.225288s/100 iters), loss = 0.993634
I0428 20:29:04.498488  3465 solver.cpp:238]     Train net output #0: loss = 0.993634 (* 1 = 0.993634 loss)
I0428 20:29:04.498509  3465 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:29:04.721601  3465 solver.cpp:219] Iteration 800 (448.226 iter/s, 0.223102s/100 iters), loss = 1.21724
I0428 20:29:04.721658  3465 solver.cpp:238]     Train net output #0: loss = 1.21724 (* 1 = 1.21724 loss)
I0428 20:29:04.721678  3465 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:29:04.944002  3465 solver.cpp:219] Iteration 900 (449.78 iter/s, 0.222331s/100 iters), loss = 1.21409
I0428 20:29:04.944057  3465 solver.cpp:238]     Train net output #0: loss = 1.21409 (* 1 = 1.21409 loss)
I0428 20:29:04.944077  3465 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:29:05.017678  3471 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:05.163141  3465 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:29:05.165119  3465 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:29:05.166456  3465 solver.cpp:311] Iteration 1000, loss = 1.07703
I0428 20:29:05.166486  3465 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:29:05.268630  3472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:05.271492  3465 solver.cpp:398]     Test net output #0: accuracy = 0.5759
I0428 20:29:05.271517  3465 solver.cpp:398]     Test net output #1: loss = 1.03021 (* 1 = 1.03021 loss)
I0428 20:29:05.271528  3465 solver.cpp:316] Optimization Done.
I0428 20:29:05.271534  3465 caffe.cpp:259] Optimization Done.
