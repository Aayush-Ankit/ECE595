I0428 20:28:04.137840  3288 caffe.cpp:218] Using GPUs 0
I0428 20:28:04.175055  3288 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:04.689159  3288 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1499.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:04.689301  3288 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1499.prototxt
I0428 20:28:04.689714  3288 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:04.689736  3288 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:04.689841  3288 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:04.689921  3288 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:04.690022  3288 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:04.690047  3288 net.cpp:86] Creating Layer mnist
I0428 20:28:04.690053  3288 net.cpp:382] mnist -> data
I0428 20:28:04.690078  3288 net.cpp:382] mnist -> label
I0428 20:28:04.691166  3288 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:04.693629  3288 net.cpp:124] Setting up mnist
I0428 20:28:04.693650  3288 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:04.693655  3288 net.cpp:131] Top shape: 64 (64)
I0428 20:28:04.693660  3288 net.cpp:139] Memory required for data: 200960
I0428 20:28:04.693666  3288 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:04.693683  3288 net.cpp:86] Creating Layer conv0
I0428 20:28:04.693704  3288 net.cpp:408] conv0 <- data
I0428 20:28:04.693717  3288 net.cpp:382] conv0 -> conv0
I0428 20:28:04.986209  3288 net.cpp:124] Setting up conv0
I0428 20:28:04.986238  3288 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:04.986243  3288 net.cpp:139] Memory required for data: 14946560
I0428 20:28:04.986258  3288 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:04.986271  3288 net.cpp:86] Creating Layer pool0
I0428 20:28:04.986276  3288 net.cpp:408] pool0 <- conv0
I0428 20:28:04.986282  3288 net.cpp:382] pool0 -> pool0
I0428 20:28:04.986332  3288 net.cpp:124] Setting up pool0
I0428 20:28:04.986340  3288 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:04.986343  3288 net.cpp:139] Memory required for data: 18632960
I0428 20:28:04.986346  3288 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:04.986358  3288 net.cpp:86] Creating Layer conv1
I0428 20:28:04.986361  3288 net.cpp:408] conv1 <- pool0
I0428 20:28:04.986366  3288 net.cpp:382] conv1 -> conv1
I0428 20:28:04.989213  3288 net.cpp:124] Setting up conv1
I0428 20:28:04.989229  3288 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:04.989233  3288 net.cpp:139] Memory required for data: 18714880
I0428 20:28:04.989243  3288 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:04.989251  3288 net.cpp:86] Creating Layer pool1
I0428 20:28:04.989254  3288 net.cpp:408] pool1 <- conv1
I0428 20:28:04.989260  3288 net.cpp:382] pool1 -> pool1
I0428 20:28:04.989300  3288 net.cpp:124] Setting up pool1
I0428 20:28:04.989307  3288 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:04.989310  3288 net.cpp:139] Memory required for data: 18735360
I0428 20:28:04.989315  3288 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:04.989321  3288 net.cpp:86] Creating Layer ip1
I0428 20:28:04.989325  3288 net.cpp:408] ip1 <- pool1
I0428 20:28:04.989329  3288 net.cpp:382] ip1 -> ip1
I0428 20:28:04.989433  3288 net.cpp:124] Setting up ip1
I0428 20:28:04.989440  3288 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:04.989444  3288 net.cpp:139] Memory required for data: 18737920
I0428 20:28:04.989450  3288 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:04.989456  3288 net.cpp:86] Creating Layer relu1
I0428 20:28:04.989460  3288 net.cpp:408] relu1 <- ip1
I0428 20:28:04.989464  3288 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:04.989640  3288 net.cpp:124] Setting up relu1
I0428 20:28:04.989650  3288 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:04.989653  3288 net.cpp:139] Memory required for data: 18740480
I0428 20:28:04.989657  3288 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:04.989665  3288 net.cpp:86] Creating Layer ip2
I0428 20:28:04.989667  3288 net.cpp:408] ip2 <- ip1
I0428 20:28:04.989672  3288 net.cpp:382] ip2 -> ip2
I0428 20:28:04.989770  3288 net.cpp:124] Setting up ip2
I0428 20:28:04.989778  3288 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:04.989783  3288 net.cpp:139] Memory required for data: 18746880
I0428 20:28:04.989787  3288 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:04.989796  3288 net.cpp:86] Creating Layer relu2
I0428 20:28:04.989800  3288 net.cpp:408] relu2 <- ip2
I0428 20:28:04.989804  3288 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:04.990561  3288 net.cpp:124] Setting up relu2
I0428 20:28:04.990574  3288 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:04.990578  3288 net.cpp:139] Memory required for data: 18753280
I0428 20:28:04.990581  3288 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:04.990591  3288 net.cpp:86] Creating Layer ip3
I0428 20:28:04.990593  3288 net.cpp:408] ip3 <- ip2
I0428 20:28:04.990598  3288 net.cpp:382] ip3 -> ip3
I0428 20:28:04.990710  3288 net.cpp:124] Setting up ip3
I0428 20:28:04.990718  3288 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:04.990722  3288 net.cpp:139] Memory required for data: 18755840
I0428 20:28:04.990731  3288 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:04.990739  3288 net.cpp:86] Creating Layer relu3
I0428 20:28:04.990742  3288 net.cpp:408] relu3 <- ip3
I0428 20:28:04.990746  3288 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:04.990947  3288 net.cpp:124] Setting up relu3
I0428 20:28:04.990954  3288 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:04.990958  3288 net.cpp:139] Memory required for data: 18758400
I0428 20:28:04.990962  3288 layer_factory.hpp:77] Creating layer loss
I0428 20:28:04.990968  3288 net.cpp:86] Creating Layer loss
I0428 20:28:04.990972  3288 net.cpp:408] loss <- ip3
I0428 20:28:04.990975  3288 net.cpp:408] loss <- label
I0428 20:28:04.990984  3288 net.cpp:382] loss -> loss
I0428 20:28:04.990998  3288 layer_factory.hpp:77] Creating layer loss
I0428 20:28:04.991250  3288 net.cpp:124] Setting up loss
I0428 20:28:04.991259  3288 net.cpp:131] Top shape: (1)
I0428 20:28:04.991264  3288 net.cpp:134]     with loss weight 1
I0428 20:28:04.991278  3288 net.cpp:139] Memory required for data: 18758404
I0428 20:28:04.991282  3288 net.cpp:200] loss needs backward computation.
I0428 20:28:04.991286  3288 net.cpp:200] relu3 needs backward computation.
I0428 20:28:04.991288  3288 net.cpp:200] ip3 needs backward computation.
I0428 20:28:04.991292  3288 net.cpp:200] relu2 needs backward computation.
I0428 20:28:04.991295  3288 net.cpp:200] ip2 needs backward computation.
I0428 20:28:04.991298  3288 net.cpp:200] relu1 needs backward computation.
I0428 20:28:04.991302  3288 net.cpp:200] ip1 needs backward computation.
I0428 20:28:04.991304  3288 net.cpp:200] pool1 needs backward computation.
I0428 20:28:04.991307  3288 net.cpp:200] conv1 needs backward computation.
I0428 20:28:04.991310  3288 net.cpp:200] pool0 needs backward computation.
I0428 20:28:04.991313  3288 net.cpp:200] conv0 needs backward computation.
I0428 20:28:04.991317  3288 net.cpp:202] mnist does not need backward computation.
I0428 20:28:04.991320  3288 net.cpp:244] This network produces output loss
I0428 20:28:04.991330  3288 net.cpp:257] Network initialization done.
I0428 20:28:04.991669  3288 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1499.prototxt
I0428 20:28:04.991698  3288 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:04.991796  3288 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:04.991883  3288 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:04.991930  3288 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:04.991942  3288 net.cpp:86] Creating Layer mnist
I0428 20:28:04.991948  3288 net.cpp:382] mnist -> data
I0428 20:28:04.991956  3288 net.cpp:382] mnist -> label
I0428 20:28:04.992048  3288 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:04.994173  3288 net.cpp:124] Setting up mnist
I0428 20:28:04.994185  3288 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:04.994190  3288 net.cpp:131] Top shape: 100 (100)
I0428 20:28:04.994194  3288 net.cpp:139] Memory required for data: 314000
I0428 20:28:04.994196  3288 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:04.994204  3288 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:04.994207  3288 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:04.994237  3288 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:04.994246  3288 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:04.994285  3288 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:04.994292  3288 net.cpp:131] Top shape: 100 (100)
I0428 20:28:04.994294  3288 net.cpp:131] Top shape: 100 (100)
I0428 20:28:04.994297  3288 net.cpp:139] Memory required for data: 314800
I0428 20:28:04.994300  3288 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:04.994309  3288 net.cpp:86] Creating Layer conv0
I0428 20:28:04.994313  3288 net.cpp:408] conv0 <- data
I0428 20:28:04.994319  3288 net.cpp:382] conv0 -> conv0
I0428 20:28:04.996032  3288 net.cpp:124] Setting up conv0
I0428 20:28:04.996047  3288 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:04.996050  3288 net.cpp:139] Memory required for data: 23354800
I0428 20:28:04.996060  3288 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:04.996068  3288 net.cpp:86] Creating Layer pool0
I0428 20:28:04.996071  3288 net.cpp:408] pool0 <- conv0
I0428 20:28:04.996076  3288 net.cpp:382] pool0 -> pool0
I0428 20:28:04.996114  3288 net.cpp:124] Setting up pool0
I0428 20:28:04.996119  3288 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:04.996122  3288 net.cpp:139] Memory required for data: 29114800
I0428 20:28:04.996129  3288 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:04.996139  3288 net.cpp:86] Creating Layer conv1
I0428 20:28:04.996142  3288 net.cpp:408] conv1 <- pool0
I0428 20:28:04.996148  3288 net.cpp:382] conv1 -> conv1
I0428 20:28:04.997869  3288 net.cpp:124] Setting up conv1
I0428 20:28:04.997882  3288 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:04.997887  3288 net.cpp:139] Memory required for data: 29242800
I0428 20:28:04.997896  3288 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:04.997906  3288 net.cpp:86] Creating Layer pool1
I0428 20:28:04.997910  3288 net.cpp:408] pool1 <- conv1
I0428 20:28:04.997915  3288 net.cpp:382] pool1 -> pool1
I0428 20:28:04.997953  3288 net.cpp:124] Setting up pool1
I0428 20:28:04.997958  3288 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:04.997962  3288 net.cpp:139] Memory required for data: 29274800
I0428 20:28:04.997966  3288 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:04.997972  3288 net.cpp:86] Creating Layer ip1
I0428 20:28:04.997982  3288 net.cpp:408] ip1 <- pool1
I0428 20:28:04.997985  3288 net.cpp:382] ip1 -> ip1
I0428 20:28:04.998093  3288 net.cpp:124] Setting up ip1
I0428 20:28:04.998101  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.998121  3288 net.cpp:139] Memory required for data: 29278800
I0428 20:28:04.998129  3288 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:04.998136  3288 net.cpp:86] Creating Layer relu1
I0428 20:28:04.998144  3288 net.cpp:408] relu1 <- ip1
I0428 20:28:04.998148  3288 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:04.998313  3288 net.cpp:124] Setting up relu1
I0428 20:28:04.998322  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.998327  3288 net.cpp:139] Memory required for data: 29282800
I0428 20:28:04.998329  3288 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:04.998337  3288 net.cpp:86] Creating Layer ip2
I0428 20:28:04.998342  3288 net.cpp:408] ip2 <- ip1
I0428 20:28:04.998347  3288 net.cpp:382] ip2 -> ip2
I0428 20:28:04.998448  3288 net.cpp:124] Setting up ip2
I0428 20:28:04.998456  3288 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:04.998458  3288 net.cpp:139] Memory required for data: 29292800
I0428 20:28:04.998463  3288 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:04.998468  3288 net.cpp:86] Creating Layer relu2
I0428 20:28:04.998471  3288 net.cpp:408] relu2 <- ip2
I0428 20:28:04.998476  3288 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:04.998636  3288 net.cpp:124] Setting up relu2
I0428 20:28:04.998643  3288 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:04.998646  3288 net.cpp:139] Memory required for data: 29302800
I0428 20:28:04.998649  3288 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:04.998654  3288 net.cpp:86] Creating Layer ip3
I0428 20:28:04.998673  3288 net.cpp:408] ip3 <- ip2
I0428 20:28:04.998680  3288 net.cpp:382] ip3 -> ip3
I0428 20:28:04.998798  3288 net.cpp:124] Setting up ip3
I0428 20:28:04.998805  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.998808  3288 net.cpp:139] Memory required for data: 29306800
I0428 20:28:04.998816  3288 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:04.998821  3288 net.cpp:86] Creating Layer relu3
I0428 20:28:04.998823  3288 net.cpp:408] relu3 <- ip3
I0428 20:28:04.998828  3288 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:04.999632  3288 net.cpp:124] Setting up relu3
I0428 20:28:04.999645  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.999649  3288 net.cpp:139] Memory required for data: 29310800
I0428 20:28:04.999652  3288 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:04.999657  3288 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:04.999660  3288 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:04.999666  3288 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:04.999673  3288 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:04.999714  3288 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:04.999721  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.999723  3288 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:04.999727  3288 net.cpp:139] Memory required for data: 29318800
I0428 20:28:04.999729  3288 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:04.999735  3288 net.cpp:86] Creating Layer accuracy
I0428 20:28:04.999738  3288 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:04.999743  3288 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:04.999748  3288 net.cpp:382] accuracy -> accuracy
I0428 20:28:04.999755  3288 net.cpp:124] Setting up accuracy
I0428 20:28:04.999759  3288 net.cpp:131] Top shape: (1)
I0428 20:28:04.999763  3288 net.cpp:139] Memory required for data: 29318804
I0428 20:28:04.999765  3288 layer_factory.hpp:77] Creating layer loss
I0428 20:28:04.999769  3288 net.cpp:86] Creating Layer loss
I0428 20:28:04.999773  3288 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:04.999776  3288 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:04.999780  3288 net.cpp:382] loss -> loss
I0428 20:28:04.999785  3288 layer_factory.hpp:77] Creating layer loss
I0428 20:28:05.000026  3288 net.cpp:124] Setting up loss
I0428 20:28:05.000037  3288 net.cpp:131] Top shape: (1)
I0428 20:28:05.000041  3288 net.cpp:134]     with loss weight 1
I0428 20:28:05.000056  3288 net.cpp:139] Memory required for data: 29318808
I0428 20:28:05.000061  3288 net.cpp:200] loss needs backward computation.
I0428 20:28:05.000063  3288 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:05.000067  3288 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:05.000071  3288 net.cpp:200] relu3 needs backward computation.
I0428 20:28:05.000073  3288 net.cpp:200] ip3 needs backward computation.
I0428 20:28:05.000077  3288 net.cpp:200] relu2 needs backward computation.
I0428 20:28:05.000080  3288 net.cpp:200] ip2 needs backward computation.
I0428 20:28:05.000083  3288 net.cpp:200] relu1 needs backward computation.
I0428 20:28:05.000085  3288 net.cpp:200] ip1 needs backward computation.
I0428 20:28:05.000088  3288 net.cpp:200] pool1 needs backward computation.
I0428 20:28:05.000092  3288 net.cpp:200] conv1 needs backward computation.
I0428 20:28:05.000094  3288 net.cpp:200] pool0 needs backward computation.
I0428 20:28:05.000098  3288 net.cpp:200] conv0 needs backward computation.
I0428 20:28:05.000102  3288 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:05.000105  3288 net.cpp:202] mnist does not need backward computation.
I0428 20:28:05.000115  3288 net.cpp:244] This network produces output accuracy
I0428 20:28:05.000119  3288 net.cpp:244] This network produces output loss
I0428 20:28:05.000130  3288 net.cpp:257] Network initialization done.
I0428 20:28:05.000174  3288 solver.cpp:56] Solver scaffolding done.
I0428 20:28:05.000502  3288 caffe.cpp:248] Starting Optimization
I0428 20:28:05.000509  3288 solver.cpp:273] Solving LeNet
I0428 20:28:05.000514  3288 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:05.001379  3288 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:05.096879  3295 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:05.099301  3288 solver.cpp:398]     Test net output #0: accuracy = 0.1072
I0428 20:28:05.099323  3288 solver.cpp:398]     Test net output #1: loss = 2.29348 (* 1 = 2.29348 loss)
I0428 20:28:05.103946  3288 solver.cpp:219] Iteration 0 (-1.01419e-31 iter/s, 0.103404s/100 iters), loss = 2.29405
I0428 20:28:05.103971  3288 solver.cpp:238]     Train net output #0: loss = 2.29405 (* 1 = 2.29405 loss)
I0428 20:28:05.103981  3288 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:05.304791  3288 solver.cpp:219] Iteration 100 (498.002 iter/s, 0.200802s/100 iters), loss = 1.11736
I0428 20:28:05.304826  3288 solver.cpp:238]     Train net output #0: loss = 1.11736 (* 1 = 1.11736 loss)
I0428 20:28:05.304833  3288 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:05.521337  3288 solver.cpp:219] Iteration 200 (461.908 iter/s, 0.216493s/100 iters), loss = 0.703571
I0428 20:28:05.521370  3288 solver.cpp:238]     Train net output #0: loss = 0.703571 (* 1 = 0.703571 loss)
I0428 20:28:05.521378  3288 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:05.730320  3288 solver.cpp:219] Iteration 300 (478.616 iter/s, 0.208936s/100 iters), loss = 0.834391
I0428 20:28:05.730350  3288 solver.cpp:238]     Train net output #0: loss = 0.834391 (* 1 = 0.834391 loss)
I0428 20:28:05.730356  3288 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:05.936282  3288 solver.cpp:219] Iteration 400 (485.647 iter/s, 0.205911s/100 iters), loss = 0.377784
I0428 20:28:05.936336  3288 solver.cpp:238]     Train net output #0: loss = 0.377784 (* 1 = 0.377784 loss)
I0428 20:28:05.936350  3288 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:06.144213  3288 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:06.242436  3295 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:06.245334  3288 solver.cpp:398]     Test net output #0: accuracy = 0.8153
I0428 20:28:06.245362  3288 solver.cpp:398]     Test net output #1: loss = 0.507887 (* 1 = 0.507887 loss)
I0428 20:28:06.247493  3288 solver.cpp:219] Iteration 500 (321.398 iter/s, 0.31114s/100 iters), loss = 0.731603
I0428 20:28:06.247524  3288 solver.cpp:238]     Train net output #0: loss = 0.731603 (* 1 = 0.731603 loss)
I0428 20:28:06.247558  3288 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:06.463346  3288 solver.cpp:219] Iteration 600 (463.379 iter/s, 0.215806s/100 iters), loss = 0.501559
I0428 20:28:06.463387  3288 solver.cpp:238]     Train net output #0: loss = 0.501559 (* 1 = 0.501559 loss)
I0428 20:28:06.463397  3288 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:06.679927  3288 solver.cpp:219] Iteration 700 (461.852 iter/s, 0.21652s/100 iters), loss = 0.417578
I0428 20:28:06.679988  3288 solver.cpp:238]     Train net output #0: loss = 0.417578 (* 1 = 0.417578 loss)
I0428 20:28:06.680001  3288 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:06.896569  3288 solver.cpp:219] Iteration 800 (461.745 iter/s, 0.21657s/100 iters), loss = 0.341032
I0428 20:28:06.896606  3288 solver.cpp:238]     Train net output #0: loss = 0.341032 (* 1 = 0.341032 loss)
I0428 20:28:06.896615  3288 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:07.106791  3288 solver.cpp:219] Iteration 900 (475.81 iter/s, 0.210168s/100 iters), loss = 0.542459
I0428 20:28:07.106829  3288 solver.cpp:238]     Train net output #0: loss = 0.542459 (* 1 = 0.542459 loss)
I0428 20:28:07.106838  3288 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:07.178609  3294 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:07.321943  3288 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:07.324160  3288 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:07.325637  3288 solver.cpp:311] Iteration 1000, loss = 0.346661
I0428 20:28:07.325673  3288 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:07.426878  3295 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:07.429669  3288 solver.cpp:398]     Test net output #0: accuracy = 0.856
I0428 20:28:07.429693  3288 solver.cpp:398]     Test net output #1: loss = 0.362719 (* 1 = 0.362719 loss)
I0428 20:28:07.429700  3288 solver.cpp:316] Optimization Done.
I0428 20:28:07.429705  3288 caffe.cpp:259] Optimization Done.
