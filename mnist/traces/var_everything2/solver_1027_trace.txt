I0428 20:06:24.747248 30866 caffe.cpp:218] Using GPUs 0
I0428 20:06:24.776015 30866 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:25.220692 30866 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1027.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:25.220887 30866 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1027.prototxt
I0428 20:06:25.221276 30866 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:25.221305 30866 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:25.221385 30866 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:06:25.221449 30866 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:25.221534 30866 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:25.221554 30866 net.cpp:86] Creating Layer mnist
I0428 20:06:25.221575 30866 net.cpp:382] mnist -> data
I0428 20:06:25.221595 30866 net.cpp:382] mnist -> label
I0428 20:06:25.222501 30866 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:25.224620 30866 net.cpp:124] Setting up mnist
I0428 20:06:25.224665 30866 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:25.224686 30866 net.cpp:131] Top shape: 64 (64)
I0428 20:06:25.224689 30866 net.cpp:139] Memory required for data: 200960
I0428 20:06:25.224694 30866 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:25.224709 30866 net.cpp:86] Creating Layer conv0
I0428 20:06:25.224726 30866 net.cpp:408] conv0 <- data
I0428 20:06:25.224735 30866 net.cpp:382] conv0 -> conv0
I0428 20:06:25.444562 30866 net.cpp:124] Setting up conv0
I0428 20:06:25.444602 30866 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:25.444607 30866 net.cpp:139] Memory required for data: 3887360
I0428 20:06:25.444636 30866 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:25.444649 30866 net.cpp:86] Creating Layer pool0
I0428 20:06:25.444653 30866 net.cpp:408] pool0 <- conv0
I0428 20:06:25.444674 30866 net.cpp:382] pool0 -> pool0
I0428 20:06:25.444717 30866 net.cpp:124] Setting up pool0
I0428 20:06:25.444723 30866 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:25.444726 30866 net.cpp:139] Memory required for data: 4808960
I0428 20:06:25.444730 30866 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:25.444741 30866 net.cpp:86] Creating Layer conv1
I0428 20:06:25.444743 30866 net.cpp:408] conv1 <- pool0
I0428 20:06:25.444748 30866 net.cpp:382] conv1 -> conv1
I0428 20:06:25.447489 30866 net.cpp:124] Setting up conv1
I0428 20:06:25.447502 30866 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:25.447506 30866 net.cpp:139] Memory required for data: 4890880
I0428 20:06:25.447515 30866 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:25.447520 30866 net.cpp:86] Creating Layer pool1
I0428 20:06:25.447523 30866 net.cpp:408] pool1 <- conv1
I0428 20:06:25.447528 30866 net.cpp:382] pool1 -> pool1
I0428 20:06:25.447577 30866 net.cpp:124] Setting up pool1
I0428 20:06:25.447582 30866 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:25.447584 30866 net.cpp:139] Memory required for data: 4911360
I0428 20:06:25.447587 30866 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:25.447594 30866 net.cpp:86] Creating Layer ip1
I0428 20:06:25.447597 30866 net.cpp:408] ip1 <- pool1
I0428 20:06:25.447602 30866 net.cpp:382] ip1 -> ip1
I0428 20:06:25.447695 30866 net.cpp:124] Setting up ip1
I0428 20:06:25.447702 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.447705 30866 net.cpp:139] Memory required for data: 4913920
I0428 20:06:25.447711 30866 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:25.447716 30866 net.cpp:86] Creating Layer relu1
I0428 20:06:25.447720 30866 net.cpp:408] relu1 <- ip1
I0428 20:06:25.447723 30866 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:25.447873 30866 net.cpp:124] Setting up relu1
I0428 20:06:25.447881 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.447885 30866 net.cpp:139] Memory required for data: 4916480
I0428 20:06:25.447886 30866 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:25.447892 30866 net.cpp:86] Creating Layer ip2
I0428 20:06:25.447911 30866 net.cpp:408] ip2 <- ip1
I0428 20:06:25.447916 30866 net.cpp:382] ip2 -> ip2
I0428 20:06:25.448004 30866 net.cpp:124] Setting up ip2
I0428 20:06:25.448010 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.448014 30866 net.cpp:139] Memory required for data: 4919040
I0428 20:06:25.448019 30866 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:25.448024 30866 net.cpp:86] Creating Layer relu2
I0428 20:06:25.448027 30866 net.cpp:408] relu2 <- ip2
I0428 20:06:25.448031 30866 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:25.448746 30866 net.cpp:124] Setting up relu2
I0428 20:06:25.448758 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.448761 30866 net.cpp:139] Memory required for data: 4921600
I0428 20:06:25.448765 30866 layer_factory.hpp:77] Creating layer ip3
I0428 20:06:25.448771 30866 net.cpp:86] Creating Layer ip3
I0428 20:06:25.448774 30866 net.cpp:408] ip3 <- ip2
I0428 20:06:25.448779 30866 net.cpp:382] ip3 -> ip3
I0428 20:06:25.448911 30866 net.cpp:124] Setting up ip3
I0428 20:06:25.448920 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.448923 30866 net.cpp:139] Memory required for data: 4924160
I0428 20:06:25.448931 30866 layer_factory.hpp:77] Creating layer relu3
I0428 20:06:25.448936 30866 net.cpp:86] Creating Layer relu3
I0428 20:06:25.448940 30866 net.cpp:408] relu3 <- ip3
I0428 20:06:25.448945 30866 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:06:25.449127 30866 net.cpp:124] Setting up relu3
I0428 20:06:25.449136 30866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:25.449139 30866 net.cpp:139] Memory required for data: 4926720
I0428 20:06:25.449142 30866 layer_factory.hpp:77] Creating layer loss
I0428 20:06:25.449162 30866 net.cpp:86] Creating Layer loss
I0428 20:06:25.449165 30866 net.cpp:408] loss <- ip3
I0428 20:06:25.449168 30866 net.cpp:408] loss <- label
I0428 20:06:25.449173 30866 net.cpp:382] loss -> loss
I0428 20:06:25.449203 30866 layer_factory.hpp:77] Creating layer loss
I0428 20:06:25.449442 30866 net.cpp:124] Setting up loss
I0428 20:06:25.449452 30866 net.cpp:131] Top shape: (1)
I0428 20:06:25.449455 30866 net.cpp:134]     with loss weight 1
I0428 20:06:25.449468 30866 net.cpp:139] Memory required for data: 4926724
I0428 20:06:25.449472 30866 net.cpp:200] loss needs backward computation.
I0428 20:06:25.449476 30866 net.cpp:200] relu3 needs backward computation.
I0428 20:06:25.449478 30866 net.cpp:200] ip3 needs backward computation.
I0428 20:06:25.449481 30866 net.cpp:200] relu2 needs backward computation.
I0428 20:06:25.449484 30866 net.cpp:200] ip2 needs backward computation.
I0428 20:06:25.449486 30866 net.cpp:200] relu1 needs backward computation.
I0428 20:06:25.449489 30866 net.cpp:200] ip1 needs backward computation.
I0428 20:06:25.449492 30866 net.cpp:200] pool1 needs backward computation.
I0428 20:06:25.449496 30866 net.cpp:200] conv1 needs backward computation.
I0428 20:06:25.449498 30866 net.cpp:200] pool0 needs backward computation.
I0428 20:06:25.449501 30866 net.cpp:200] conv0 needs backward computation.
I0428 20:06:25.449504 30866 net.cpp:202] mnist does not need backward computation.
I0428 20:06:25.449507 30866 net.cpp:244] This network produces output loss
I0428 20:06:25.449515 30866 net.cpp:257] Network initialization done.
I0428 20:06:25.449833 30866 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1027.prototxt
I0428 20:06:25.449862 30866 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:25.449950 30866 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:06:25.450023 30866 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:25.450065 30866 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:25.450078 30866 net.cpp:86] Creating Layer mnist
I0428 20:06:25.450081 30866 net.cpp:382] mnist -> data
I0428 20:06:25.450103 30866 net.cpp:382] mnist -> label
I0428 20:06:25.450187 30866 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:25.452244 30866 net.cpp:124] Setting up mnist
I0428 20:06:25.452272 30866 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:25.452277 30866 net.cpp:131] Top shape: 100 (100)
I0428 20:06:25.452280 30866 net.cpp:139] Memory required for data: 314000
I0428 20:06:25.452285 30866 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:25.452291 30866 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:25.452293 30866 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:25.452298 30866 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:25.452304 30866 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:25.452358 30866 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:25.452364 30866 net.cpp:131] Top shape: 100 (100)
I0428 20:06:25.452368 30866 net.cpp:131] Top shape: 100 (100)
I0428 20:06:25.452370 30866 net.cpp:139] Memory required for data: 314800
I0428 20:06:25.452373 30866 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:25.452381 30866 net.cpp:86] Creating Layer conv0
I0428 20:06:25.452384 30866 net.cpp:408] conv0 <- data
I0428 20:06:25.452389 30866 net.cpp:382] conv0 -> conv0
I0428 20:06:25.454042 30866 net.cpp:124] Setting up conv0
I0428 20:06:25.454056 30866 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:25.454059 30866 net.cpp:139] Memory required for data: 6074800
I0428 20:06:25.454068 30866 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:25.454074 30866 net.cpp:86] Creating Layer pool0
I0428 20:06:25.454077 30866 net.cpp:408] pool0 <- conv0
I0428 20:06:25.454097 30866 net.cpp:382] pool0 -> pool0
I0428 20:06:25.454131 30866 net.cpp:124] Setting up pool0
I0428 20:06:25.454136 30866 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:25.454139 30866 net.cpp:139] Memory required for data: 7514800
I0428 20:06:25.454141 30866 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:25.454150 30866 net.cpp:86] Creating Layer conv1
I0428 20:06:25.454154 30866 net.cpp:408] conv1 <- pool0
I0428 20:06:25.454157 30866 net.cpp:382] conv1 -> conv1
I0428 20:06:25.456190 30866 net.cpp:124] Setting up conv1
I0428 20:06:25.456203 30866 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:25.456208 30866 net.cpp:139] Memory required for data: 7642800
I0428 20:06:25.456218 30866 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:25.456223 30866 net.cpp:86] Creating Layer pool1
I0428 20:06:25.456226 30866 net.cpp:408] pool1 <- conv1
I0428 20:06:25.456231 30866 net.cpp:382] pool1 -> pool1
I0428 20:06:25.456269 30866 net.cpp:124] Setting up pool1
I0428 20:06:25.456274 30866 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:25.456284 30866 net.cpp:139] Memory required for data: 7674800
I0428 20:06:25.456290 30866 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:25.456296 30866 net.cpp:86] Creating Layer ip1
I0428 20:06:25.456300 30866 net.cpp:408] ip1 <- pool1
I0428 20:06:25.456305 30866 net.cpp:382] ip1 -> ip1
I0428 20:06:25.456413 30866 net.cpp:124] Setting up ip1
I0428 20:06:25.456419 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.456432 30866 net.cpp:139] Memory required for data: 7678800
I0428 20:06:25.456440 30866 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:25.456444 30866 net.cpp:86] Creating Layer relu1
I0428 20:06:25.456449 30866 net.cpp:408] relu1 <- ip1
I0428 20:06:25.456452 30866 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:25.456637 30866 net.cpp:124] Setting up relu1
I0428 20:06:25.456646 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.456650 30866 net.cpp:139] Memory required for data: 7682800
I0428 20:06:25.456652 30866 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:25.456658 30866 net.cpp:86] Creating Layer ip2
I0428 20:06:25.456661 30866 net.cpp:408] ip2 <- ip1
I0428 20:06:25.456666 30866 net.cpp:382] ip2 -> ip2
I0428 20:06:25.456787 30866 net.cpp:124] Setting up ip2
I0428 20:06:25.456795 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.456799 30866 net.cpp:139] Memory required for data: 7686800
I0428 20:06:25.456804 30866 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:25.456815 30866 net.cpp:86] Creating Layer relu2
I0428 20:06:25.456833 30866 net.cpp:408] relu2 <- ip2
I0428 20:06:25.456837 30866 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:25.457016 30866 net.cpp:124] Setting up relu2
I0428 20:06:25.457026 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.457028 30866 net.cpp:139] Memory required for data: 7690800
I0428 20:06:25.457032 30866 layer_factory.hpp:77] Creating layer ip3
I0428 20:06:25.457038 30866 net.cpp:86] Creating Layer ip3
I0428 20:06:25.457041 30866 net.cpp:408] ip3 <- ip2
I0428 20:06:25.457046 30866 net.cpp:382] ip3 -> ip3
I0428 20:06:25.457145 30866 net.cpp:124] Setting up ip3
I0428 20:06:25.457168 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.457172 30866 net.cpp:139] Memory required for data: 7694800
I0428 20:06:25.457200 30866 layer_factory.hpp:77] Creating layer relu3
I0428 20:06:25.457204 30866 net.cpp:86] Creating Layer relu3
I0428 20:06:25.457207 30866 net.cpp:408] relu3 <- ip3
I0428 20:06:25.457212 30866 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:06:25.458036 30866 net.cpp:124] Setting up relu3
I0428 20:06:25.458048 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.458051 30866 net.cpp:139] Memory required for data: 7698800
I0428 20:06:25.458055 30866 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:06:25.458060 30866 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:06:25.458063 30866 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:06:25.458070 30866 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:06:25.458075 30866 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:06:25.458119 30866 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:06:25.458124 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.458128 30866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:25.458132 30866 net.cpp:139] Memory required for data: 7706800
I0428 20:06:25.458134 30866 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:25.458142 30866 net.cpp:86] Creating Layer accuracy
I0428 20:06:25.458149 30866 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:06:25.458153 30866 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:25.458158 30866 net.cpp:382] accuracy -> accuracy
I0428 20:06:25.458165 30866 net.cpp:124] Setting up accuracy
I0428 20:06:25.458169 30866 net.cpp:131] Top shape: (1)
I0428 20:06:25.458176 30866 net.cpp:139] Memory required for data: 7706804
I0428 20:06:25.458178 30866 layer_factory.hpp:77] Creating layer loss
I0428 20:06:25.458184 30866 net.cpp:86] Creating Layer loss
I0428 20:06:25.458186 30866 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:06:25.458189 30866 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:25.458194 30866 net.cpp:382] loss -> loss
I0428 20:06:25.458199 30866 layer_factory.hpp:77] Creating layer loss
I0428 20:06:25.458425 30866 net.cpp:124] Setting up loss
I0428 20:06:25.458436 30866 net.cpp:131] Top shape: (1)
I0428 20:06:25.458439 30866 net.cpp:134]     with loss weight 1
I0428 20:06:25.458446 30866 net.cpp:139] Memory required for data: 7706808
I0428 20:06:25.458459 30866 net.cpp:200] loss needs backward computation.
I0428 20:06:25.458464 30866 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:25.458467 30866 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:06:25.458470 30866 net.cpp:200] relu3 needs backward computation.
I0428 20:06:25.458472 30866 net.cpp:200] ip3 needs backward computation.
I0428 20:06:25.458475 30866 net.cpp:200] relu2 needs backward computation.
I0428 20:06:25.458478 30866 net.cpp:200] ip2 needs backward computation.
I0428 20:06:25.458482 30866 net.cpp:200] relu1 needs backward computation.
I0428 20:06:25.458487 30866 net.cpp:200] ip1 needs backward computation.
I0428 20:06:25.458492 30866 net.cpp:200] pool1 needs backward computation.
I0428 20:06:25.458497 30866 net.cpp:200] conv1 needs backward computation.
I0428 20:06:25.458499 30866 net.cpp:200] pool0 needs backward computation.
I0428 20:06:25.458503 30866 net.cpp:200] conv0 needs backward computation.
I0428 20:06:25.458505 30866 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:25.458509 30866 net.cpp:202] mnist does not need backward computation.
I0428 20:06:25.458511 30866 net.cpp:244] This network produces output accuracy
I0428 20:06:25.458514 30866 net.cpp:244] This network produces output loss
I0428 20:06:25.458530 30866 net.cpp:257] Network initialization done.
I0428 20:06:25.458570 30866 solver.cpp:56] Solver scaffolding done.
I0428 20:06:25.458899 30866 caffe.cpp:248] Starting Optimization
I0428 20:06:25.458906 30866 solver.cpp:273] Solving LeNet
I0428 20:06:25.458909 30866 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:25.459723 30866 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:25.464603 30866 blocking_queue.cpp:49] Waiting for data
I0428 20:06:25.534606 30873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:25.535198 30866 solver.cpp:398]     Test net output #0: accuracy = 0.0808
I0428 20:06:25.535233 30866 solver.cpp:398]     Test net output #1: loss = 2.31 (* 1 = 2.31 loss)
I0428 20:06:25.538852 30866 solver.cpp:219] Iteration 0 (-1.40625e-31 iter/s, 0.0799037s/100 iters), loss = 2.32066
I0428 20:06:25.538892 30866 solver.cpp:238]     Train net output #0: loss = 2.32066 (* 1 = 2.32066 loss)
I0428 20:06:25.538902 30866 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:25.626453 30866 solver.cpp:219] Iteration 100 (1142.22 iter/s, 0.087549s/100 iters), loss = 1.12836
I0428 20:06:25.626479 30866 solver.cpp:238]     Train net output #0: loss = 1.12836 (* 1 = 1.12836 loss)
I0428 20:06:25.626485 30866 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:25.710875 30866 solver.cpp:219] Iteration 200 (1185.02 iter/s, 0.0843868s/100 iters), loss = 0.671004
I0428 20:06:25.710912 30866 solver.cpp:238]     Train net output #0: loss = 0.671004 (* 1 = 0.671004 loss)
I0428 20:06:25.710918 30866 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:25.795871 30866 solver.cpp:219] Iteration 300 (1176.98 iter/s, 0.0849633s/100 iters), loss = 0.588218
I0428 20:06:25.795910 30866 solver.cpp:238]     Train net output #0: loss = 0.588218 (* 1 = 0.588218 loss)
I0428 20:06:25.795917 30866 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:25.880574 30866 solver.cpp:219] Iteration 400 (1181.05 iter/s, 0.0846705s/100 iters), loss = 0.472093
I0428 20:06:25.880614 30866 solver.cpp:238]     Train net output #0: loss = 0.472093 (* 1 = 0.472093 loss)
I0428 20:06:25.880620 30866 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:25.963881 30866 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:26.015100 30873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:26.016580 30866 solver.cpp:398]     Test net output #0: accuracy = 0.9311
I0428 20:06:26.016630 30866 solver.cpp:398]     Test net output #1: loss = 0.227916 (* 1 = 0.227916 loss)
I0428 20:06:26.017540 30866 solver.cpp:219] Iteration 500 (730.299 iter/s, 0.13693s/100 iters), loss = 0.159038
I0428 20:06:26.017562 30866 solver.cpp:238]     Train net output #0: loss = 0.159038 (* 1 = 0.159038 loss)
I0428 20:06:26.017583 30866 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:26.116098 30866 solver.cpp:219] Iteration 600 (1014.96 iter/s, 0.0985262s/100 iters), loss = 0.177082
I0428 20:06:26.116139 30866 solver.cpp:238]     Train net output #0: loss = 0.177082 (* 1 = 0.177082 loss)
I0428 20:06:26.116147 30866 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:26.203755 30866 solver.cpp:219] Iteration 700 (1141.26 iter/s, 0.0876227s/100 iters), loss = 0.358086
I0428 20:06:26.203794 30866 solver.cpp:238]     Train net output #0: loss = 0.358086 (* 1 = 0.358086 loss)
I0428 20:06:26.203800 30866 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:26.289691 30866 solver.cpp:219] Iteration 800 (1164.11 iter/s, 0.0859024s/100 iters), loss = 0.199269
I0428 20:06:26.289731 30866 solver.cpp:238]     Train net output #0: loss = 0.199269 (* 1 = 0.199269 loss)
I0428 20:06:26.289737 30866 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:26.375202 30866 solver.cpp:219] Iteration 900 (1169.9 iter/s, 0.0854774s/100 iters), loss = 0.328553
I0428 20:06:26.375241 30866 solver.cpp:238]     Train net output #0: loss = 0.328553 (* 1 = 0.328553 loss)
I0428 20:06:26.375247 30866 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:26.403619 30872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:26.459758 30866 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:26.460602 30866 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:26.461233 30866 solver.cpp:311] Iteration 1000, loss = 0.159775
I0428 20:06:26.461247 30866 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:26.536587 30873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:26.537185 30866 solver.cpp:398]     Test net output #0: accuracy = 0.9569
I0428 20:06:26.537220 30866 solver.cpp:398]     Test net output #1: loss = 0.138658 (* 1 = 0.138658 loss)
I0428 20:06:26.537225 30866 solver.cpp:316] Optimization Done.
I0428 20:06:26.537228 30866 caffe.cpp:259] Optimization Done.
