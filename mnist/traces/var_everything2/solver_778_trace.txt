I0428 19:57:04.899911 28592 caffe.cpp:218] Using GPUs 0
I0428 19:57:04.937671 28592 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:05.452270 28592 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test778.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:05.452446 28592 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test778.prototxt
I0428 19:57:05.452890 28592 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:05.452917 28592 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:05.453035 28592 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:05.453151 28592 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:05.453284 28592 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:05.453321 28592 net.cpp:86] Creating Layer mnist
I0428 19:57:05.453335 28592 net.cpp:382] mnist -> data
I0428 19:57:05.453366 28592 net.cpp:382] mnist -> label
I0428 19:57:05.454638 28592 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:05.457118 28592 net.cpp:124] Setting up mnist
I0428 19:57:05.457139 28592 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:05.457151 28592 net.cpp:131] Top shape: 64 (64)
I0428 19:57:05.457157 28592 net.cpp:139] Memory required for data: 200960
I0428 19:57:05.457170 28592 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:05.457191 28592 net.cpp:86] Creating Layer conv0
I0428 19:57:05.457216 28592 net.cpp:408] conv0 <- data
I0428 19:57:05.457237 28592 net.cpp:382] conv0 -> conv0
I0428 19:57:05.742911 28592 net.cpp:124] Setting up conv0
I0428 19:57:05.742941 28592 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:05.742947 28592 net.cpp:139] Memory required for data: 1675520
I0428 19:57:05.742969 28592 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:05.742985 28592 net.cpp:86] Creating Layer pool0
I0428 19:57:05.742991 28592 net.cpp:408] pool0 <- conv0
I0428 19:57:05.743000 28592 net.cpp:382] pool0 -> pool0
I0428 19:57:05.743060 28592 net.cpp:124] Setting up pool0
I0428 19:57:05.743070 28592 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:05.743075 28592 net.cpp:139] Memory required for data: 2044160
I0428 19:57:05.743082 28592 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:05.743096 28592 net.cpp:86] Creating Layer conv1
I0428 19:57:05.743103 28592 net.cpp:408] conv1 <- pool0
I0428 19:57:05.743113 28592 net.cpp:382] conv1 -> conv1
I0428 19:57:05.744987 28592 net.cpp:124] Setting up conv1
I0428 19:57:05.745004 28592 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:57:05.745012 28592 net.cpp:139] Memory required for data: 2076928
I0428 19:57:05.745025 28592 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:05.745038 28592 net.cpp:86] Creating Layer pool1
I0428 19:57:05.745044 28592 net.cpp:408] pool1 <- conv1
I0428 19:57:05.745054 28592 net.cpp:382] pool1 -> pool1
I0428 19:57:05.745100 28592 net.cpp:124] Setting up pool1
I0428 19:57:05.745110 28592 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:57:05.745115 28592 net.cpp:139] Memory required for data: 2085120
I0428 19:57:05.745121 28592 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:05.745146 28592 net.cpp:86] Creating Layer ip1
I0428 19:57:05.745151 28592 net.cpp:408] ip1 <- pool1
I0428 19:57:05.745160 28592 net.cpp:382] ip1 -> ip1
I0428 19:57:05.746115 28592 net.cpp:124] Setting up ip1
I0428 19:57:05.746130 28592 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:05.746136 28592 net.cpp:139] Memory required for data: 2097920
I0428 19:57:05.746150 28592 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:05.746160 28592 net.cpp:86] Creating Layer relu1
I0428 19:57:05.746171 28592 net.cpp:408] relu1 <- ip1
I0428 19:57:05.746179 28592 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:05.746356 28592 net.cpp:124] Setting up relu1
I0428 19:57:05.746366 28592 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:05.746371 28592 net.cpp:139] Memory required for data: 2110720
I0428 19:57:05.746376 28592 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:05.746387 28592 net.cpp:86] Creating Layer ip2
I0428 19:57:05.746392 28592 net.cpp:408] ip2 <- ip1
I0428 19:57:05.746402 28592 net.cpp:382] ip2 -> ip2
I0428 19:57:05.746517 28592 net.cpp:124] Setting up ip2
I0428 19:57:05.746526 28592 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:05.746532 28592 net.cpp:139] Memory required for data: 2123520
I0428 19:57:05.746541 28592 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:05.746551 28592 net.cpp:86] Creating Layer relu2
I0428 19:57:05.746556 28592 net.cpp:408] relu2 <- ip2
I0428 19:57:05.746564 28592 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:05.747330 28592 net.cpp:124] Setting up relu2
I0428 19:57:05.747360 28592 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:05.747382 28592 net.cpp:139] Memory required for data: 2136320
I0428 19:57:05.747388 28592 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:05.747400 28592 net.cpp:86] Creating Layer ip3
I0428 19:57:05.747406 28592 net.cpp:408] ip3 <- ip2
I0428 19:57:05.747416 28592 net.cpp:382] ip3 -> ip3
I0428 19:57:05.747536 28592 net.cpp:124] Setting up ip3
I0428 19:57:05.747547 28592 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:05.747553 28592 net.cpp:139] Memory required for data: 2138880
I0428 19:57:05.747568 28592 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:05.747578 28592 net.cpp:86] Creating Layer relu3
I0428 19:57:05.747586 28592 net.cpp:408] relu3 <- ip3
I0428 19:57:05.747596 28592 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:05.747813 28592 net.cpp:124] Setting up relu3
I0428 19:57:05.747824 28592 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:05.747830 28592 net.cpp:139] Memory required for data: 2141440
I0428 19:57:05.747836 28592 layer_factory.hpp:77] Creating layer loss
I0428 19:57:05.747845 28592 net.cpp:86] Creating Layer loss
I0428 19:57:05.747851 28592 net.cpp:408] loss <- ip3
I0428 19:57:05.747859 28592 net.cpp:408] loss <- label
I0428 19:57:05.747867 28592 net.cpp:382] loss -> loss
I0428 19:57:05.747891 28592 layer_factory.hpp:77] Creating layer loss
I0428 19:57:05.748129 28592 net.cpp:124] Setting up loss
I0428 19:57:05.748142 28592 net.cpp:131] Top shape: (1)
I0428 19:57:05.748147 28592 net.cpp:134]     with loss weight 1
I0428 19:57:05.748183 28592 net.cpp:139] Memory required for data: 2141444
I0428 19:57:05.748188 28592 net.cpp:200] loss needs backward computation.
I0428 19:57:05.748195 28592 net.cpp:200] relu3 needs backward computation.
I0428 19:57:05.748200 28592 net.cpp:200] ip3 needs backward computation.
I0428 19:57:05.748206 28592 net.cpp:200] relu2 needs backward computation.
I0428 19:57:05.748211 28592 net.cpp:200] ip2 needs backward computation.
I0428 19:57:05.748216 28592 net.cpp:200] relu1 needs backward computation.
I0428 19:57:05.748221 28592 net.cpp:200] ip1 needs backward computation.
I0428 19:57:05.748226 28592 net.cpp:200] pool1 needs backward computation.
I0428 19:57:05.748232 28592 net.cpp:200] conv1 needs backward computation.
I0428 19:57:05.748239 28592 net.cpp:200] pool0 needs backward computation.
I0428 19:57:05.748244 28592 net.cpp:200] conv0 needs backward computation.
I0428 19:57:05.748250 28592 net.cpp:202] mnist does not need backward computation.
I0428 19:57:05.748255 28592 net.cpp:244] This network produces output loss
I0428 19:57:05.748270 28592 net.cpp:257] Network initialization done.
I0428 19:57:05.748610 28592 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test778.prototxt
I0428 19:57:05.748646 28592 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:05.748745 28592 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:05.748901 28592 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:05.748965 28592 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:05.748983 28592 net.cpp:86] Creating Layer mnist
I0428 19:57:05.748991 28592 net.cpp:382] mnist -> data
I0428 19:57:05.749004 28592 net.cpp:382] mnist -> label
I0428 19:57:05.749131 28592 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:05.751266 28592 net.cpp:124] Setting up mnist
I0428 19:57:05.751296 28592 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:05.751305 28592 net.cpp:131] Top shape: 100 (100)
I0428 19:57:05.751312 28592 net.cpp:139] Memory required for data: 314000
I0428 19:57:05.751317 28592 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:05.751341 28592 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:05.751348 28592 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:05.751356 28592 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:05.751368 28592 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:05.751471 28592 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:05.751482 28592 net.cpp:131] Top shape: 100 (100)
I0428 19:57:05.751488 28592 net.cpp:131] Top shape: 100 (100)
I0428 19:57:05.751493 28592 net.cpp:139] Memory required for data: 314800
I0428 19:57:05.751499 28592 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:05.751513 28592 net.cpp:86] Creating Layer conv0
I0428 19:57:05.751520 28592 net.cpp:408] conv0 <- data
I0428 19:57:05.751529 28592 net.cpp:382] conv0 -> conv0
I0428 19:57:05.753059 28592 net.cpp:124] Setting up conv0
I0428 19:57:05.753075 28592 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:05.753082 28592 net.cpp:139] Memory required for data: 2618800
I0428 19:57:05.753098 28592 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:05.753108 28592 net.cpp:86] Creating Layer pool0
I0428 19:57:05.753114 28592 net.cpp:408] pool0 <- conv0
I0428 19:57:05.753123 28592 net.cpp:382] pool0 -> pool0
I0428 19:57:05.753165 28592 net.cpp:124] Setting up pool0
I0428 19:57:05.753173 28592 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:05.753180 28592 net.cpp:139] Memory required for data: 3194800
I0428 19:57:05.753185 28592 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:05.753198 28592 net.cpp:86] Creating Layer conv1
I0428 19:57:05.753206 28592 net.cpp:408] conv1 <- pool0
I0428 19:57:05.753214 28592 net.cpp:382] conv1 -> conv1
I0428 19:57:05.755293 28592 net.cpp:124] Setting up conv1
I0428 19:57:05.755307 28592 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:57:05.755313 28592 net.cpp:139] Memory required for data: 3246000
I0428 19:57:05.755342 28592 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:05.755367 28592 net.cpp:86] Creating Layer pool1
I0428 19:57:05.755373 28592 net.cpp:408] pool1 <- conv1
I0428 19:57:05.755383 28592 net.cpp:382] pool1 -> pool1
I0428 19:57:05.755458 28592 net.cpp:124] Setting up pool1
I0428 19:57:05.755468 28592 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:57:05.755475 28592 net.cpp:139] Memory required for data: 3258800
I0428 19:57:05.755480 28592 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:05.755489 28592 net.cpp:86] Creating Layer ip1
I0428 19:57:05.755496 28592 net.cpp:408] ip1 <- pool1
I0428 19:57:05.755506 28592 net.cpp:382] ip1 -> ip1
I0428 19:57:05.755627 28592 net.cpp:124] Setting up ip1
I0428 19:57:05.755637 28592 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:05.755656 28592 net.cpp:139] Memory required for data: 3278800
I0428 19:57:05.755672 28592 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:05.755681 28592 net.cpp:86] Creating Layer relu1
I0428 19:57:05.755687 28592 net.cpp:408] relu1 <- ip1
I0428 19:57:05.755695 28592 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:05.755869 28592 net.cpp:124] Setting up relu1
I0428 19:57:05.755882 28592 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:05.755887 28592 net.cpp:139] Memory required for data: 3298800
I0428 19:57:05.755892 28592 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:05.755904 28592 net.cpp:86] Creating Layer ip2
I0428 19:57:05.755910 28592 net.cpp:408] ip2 <- ip1
I0428 19:57:05.755920 28592 net.cpp:382] ip2 -> ip2
I0428 19:57:05.756043 28592 net.cpp:124] Setting up ip2
I0428 19:57:05.756053 28592 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:05.756059 28592 net.cpp:139] Memory required for data: 3318800
I0428 19:57:05.756068 28592 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:05.756078 28592 net.cpp:86] Creating Layer relu2
I0428 19:57:05.756084 28592 net.cpp:408] relu2 <- ip2
I0428 19:57:05.756091 28592 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:05.756278 28592 net.cpp:124] Setting up relu2
I0428 19:57:05.756289 28592 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:05.756295 28592 net.cpp:139] Memory required for data: 3338800
I0428 19:57:05.756300 28592 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:05.756309 28592 net.cpp:86] Creating Layer ip3
I0428 19:57:05.756315 28592 net.cpp:408] ip3 <- ip2
I0428 19:57:05.756325 28592 net.cpp:382] ip3 -> ip3
I0428 19:57:05.756476 28592 net.cpp:124] Setting up ip3
I0428 19:57:05.756486 28592 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:05.756492 28592 net.cpp:139] Memory required for data: 3342800
I0428 19:57:05.756506 28592 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:05.756516 28592 net.cpp:86] Creating Layer relu3
I0428 19:57:05.756521 28592 net.cpp:408] relu3 <- ip3
I0428 19:57:05.756530 28592 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:05.757431 28592 net.cpp:124] Setting up relu3
I0428 19:57:05.757446 28592 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:05.757452 28592 net.cpp:139] Memory required for data: 3346800
I0428 19:57:05.757457 28592 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:05.757465 28592 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:05.757472 28592 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:05.757479 28592 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:05.757493 28592 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:05.757541 28592 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:05.757551 28592 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:05.757558 28592 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:05.757563 28592 net.cpp:139] Memory required for data: 3354800
I0428 19:57:05.757568 28592 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:05.757580 28592 net.cpp:86] Creating Layer accuracy
I0428 19:57:05.757586 28592 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:05.757593 28592 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:05.757601 28592 net.cpp:382] accuracy -> accuracy
I0428 19:57:05.757613 28592 net.cpp:124] Setting up accuracy
I0428 19:57:05.757622 28592 net.cpp:131] Top shape: (1)
I0428 19:57:05.757627 28592 net.cpp:139] Memory required for data: 3354804
I0428 19:57:05.757632 28592 layer_factory.hpp:77] Creating layer loss
I0428 19:57:05.757642 28592 net.cpp:86] Creating Layer loss
I0428 19:57:05.757648 28592 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:05.757655 28592 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:05.757663 28592 net.cpp:382] loss -> loss
I0428 19:57:05.757673 28592 layer_factory.hpp:77] Creating layer loss
I0428 19:57:05.757951 28592 net.cpp:124] Setting up loss
I0428 19:57:05.757962 28592 net.cpp:131] Top shape: (1)
I0428 19:57:05.757968 28592 net.cpp:134]     with loss weight 1
I0428 19:57:05.757977 28592 net.cpp:139] Memory required for data: 3354808
I0428 19:57:05.757995 28592 net.cpp:200] loss needs backward computation.
I0428 19:57:05.758002 28592 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:05.758008 28592 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:05.758013 28592 net.cpp:200] relu3 needs backward computation.
I0428 19:57:05.758018 28592 net.cpp:200] ip3 needs backward computation.
I0428 19:57:05.758024 28592 net.cpp:200] relu2 needs backward computation.
I0428 19:57:05.758029 28592 net.cpp:200] ip2 needs backward computation.
I0428 19:57:05.758034 28592 net.cpp:200] relu1 needs backward computation.
I0428 19:57:05.758044 28592 net.cpp:200] ip1 needs backward computation.
I0428 19:57:05.758049 28592 net.cpp:200] pool1 needs backward computation.
I0428 19:57:05.758054 28592 net.cpp:200] conv1 needs backward computation.
I0428 19:57:05.758060 28592 net.cpp:200] pool0 needs backward computation.
I0428 19:57:05.758066 28592 net.cpp:200] conv0 needs backward computation.
I0428 19:57:05.758074 28592 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:05.758081 28592 net.cpp:202] mnist does not need backward computation.
I0428 19:57:05.758085 28592 net.cpp:244] This network produces output accuracy
I0428 19:57:05.758095 28592 net.cpp:244] This network produces output loss
I0428 19:57:05.758111 28592 net.cpp:257] Network initialization done.
I0428 19:57:05.758162 28592 solver.cpp:56] Solver scaffolding done.
I0428 19:57:05.758576 28592 caffe.cpp:248] Starting Optimization
I0428 19:57:05.758584 28592 solver.cpp:273] Solving LeNet
I0428 19:57:05.758589 28592 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:05.759377 28592 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:05.763032 28592 blocking_queue.cpp:49] Waiting for data
I0428 19:57:05.829802 28599 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:05.830313 28592 solver.cpp:398]     Test net output #0: accuracy = 0.1276
I0428 19:57:05.830335 28592 solver.cpp:398]     Test net output #1: loss = 2.31229 (* 1 = 2.31229 loss)
I0428 19:57:05.832844 28592 solver.cpp:219] Iteration 0 (-5.13641e-31 iter/s, 0.0742175s/100 iters), loss = 2.33442
I0428 19:57:05.832871 28592 solver.cpp:238]     Train net output #0: loss = 2.33442 (* 1 = 2.33442 loss)
I0428 19:57:05.832904 28592 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:05.906965 28592 solver.cpp:219] Iteration 100 (1349.83 iter/s, 0.0740833s/100 iters), loss = 0.819388
I0428 19:57:05.906997 28592 solver.cpp:238]     Train net output #0: loss = 0.819388 (* 1 = 0.819388 loss)
I0428 19:57:05.907009 28592 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:05.980698 28592 solver.cpp:219] Iteration 200 (1356.98 iter/s, 0.0736932s/100 iters), loss = 0.5901
I0428 19:57:05.980727 28592 solver.cpp:238]     Train net output #0: loss = 0.5901 (* 1 = 0.5901 loss)
I0428 19:57:05.980753 28592 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:06.054647 28592 solver.cpp:219] Iteration 300 (1352.92 iter/s, 0.0739144s/100 iters), loss = 0.448636
I0428 19:57:06.054675 28592 solver.cpp:238]     Train net output #0: loss = 0.448636 (* 1 = 0.448636 loss)
I0428 19:57:06.054700 28592 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:06.128233 28592 solver.cpp:219] Iteration 400 (1359.6 iter/s, 0.0735511s/100 iters), loss = 0.496249
I0428 19:57:06.128262 28592 solver.cpp:238]     Train net output #0: loss = 0.496249 (* 1 = 0.496249 loss)
I0428 19:57:06.128286 28592 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:06.223285 28592 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:06.276485 28599 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:06.277016 28592 solver.cpp:398]     Test net output #0: accuracy = 0.8432
I0428 19:57:06.277040 28592 solver.cpp:398]     Test net output #1: loss = 0.449412 (* 1 = 0.449412 loss)
I0428 19:57:06.277818 28592 solver.cpp:219] Iteration 500 (668.686 iter/s, 0.149547s/100 iters), loss = 0.498679
I0428 19:57:06.277868 28592 solver.cpp:238]     Train net output #0: loss = 0.498679 (* 1 = 0.498679 loss)
I0428 19:57:06.277889 28592 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:06.355643 28592 solver.cpp:219] Iteration 600 (1285.88 iter/s, 0.0777677s/100 iters), loss = 0.410699
I0428 19:57:06.355671 28592 solver.cpp:238]     Train net output #0: loss = 0.410699 (* 1 = 0.410699 loss)
I0428 19:57:06.355679 28592 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:06.435457 28592 solver.cpp:219] Iteration 700 (1253.54 iter/s, 0.0797739s/100 iters), loss = 0.470848
I0428 19:57:06.435495 28592 solver.cpp:238]     Train net output #0: loss = 0.470848 (* 1 = 0.470848 loss)
I0428 19:57:06.435513 28592 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:06.516023 28592 solver.cpp:219] Iteration 800 (1241.96 iter/s, 0.0805181s/100 iters), loss = 0.393428
I0428 19:57:06.516073 28592 solver.cpp:238]     Train net output #0: loss = 0.393428 (* 1 = 0.393428 loss)
I0428 19:57:06.516086 28592 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:06.595109 28592 solver.cpp:219] Iteration 900 (1265.3 iter/s, 0.0790323s/100 iters), loss = 0.45609
I0428 19:57:06.595139 28592 solver.cpp:238]     Train net output #0: loss = 0.45609 (* 1 = 0.45609 loss)
I0428 19:57:06.595146 28592 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:06.621076 28598 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:06.672616 28592 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:06.673379 28592 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:06.673859 28592 solver.cpp:311] Iteration 1000, loss = 0.470776
I0428 19:57:06.673877 28592 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:06.747881 28599 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:06.748428 28592 solver.cpp:398]     Test net output #0: accuracy = 0.8639
I0428 19:57:06.748451 28592 solver.cpp:398]     Test net output #1: loss = 0.371724 (* 1 = 0.371724 loss)
I0428 19:57:06.748457 28592 solver.cpp:316] Optimization Done.
I0428 19:57:06.748461 28592 caffe.cpp:259] Optimization Done.
