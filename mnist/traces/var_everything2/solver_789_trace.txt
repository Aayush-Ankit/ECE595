I0428 19:57:27.026856 28685 caffe.cpp:218] Using GPUs 0
I0428 19:57:27.064316 28685 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:27.520097 28685 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test789.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:27.520244 28685 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test789.prototxt
I0428 19:57:27.520579 28685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:27.520593 28685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:27.520673 28685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:27.520732 28685 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:27.520817 28685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:27.520838 28685 net.cpp:86] Creating Layer mnist
I0428 19:57:27.520844 28685 net.cpp:382] mnist -> data
I0428 19:57:27.520862 28685 net.cpp:382] mnist -> label
I0428 19:57:27.521807 28685 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:27.524086 28685 net.cpp:124] Setting up mnist
I0428 19:57:27.524101 28685 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:27.524106 28685 net.cpp:131] Top shape: 64 (64)
I0428 19:57:27.524108 28685 net.cpp:139] Memory required for data: 200960
I0428 19:57:27.524114 28685 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:27.524152 28685 net.cpp:86] Creating Layer conv0
I0428 19:57:27.524157 28685 net.cpp:408] conv0 <- data
I0428 19:57:27.524181 28685 net.cpp:382] conv0 -> conv0
I0428 19:57:27.759205 28685 net.cpp:124] Setting up conv0
I0428 19:57:27.759232 28685 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:27.759237 28685 net.cpp:139] Memory required for data: 1675520
I0428 19:57:27.759268 28685 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:27.759280 28685 net.cpp:86] Creating Layer pool0
I0428 19:57:27.759284 28685 net.cpp:408] pool0 <- conv0
I0428 19:57:27.759289 28685 net.cpp:382] pool0 -> pool0
I0428 19:57:27.759348 28685 net.cpp:124] Setting up pool0
I0428 19:57:27.759353 28685 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:27.759356 28685 net.cpp:139] Memory required for data: 2044160
I0428 19:57:27.759359 28685 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:27.759369 28685 net.cpp:86] Creating Layer conv1
I0428 19:57:27.759372 28685 net.cpp:408] conv1 <- pool0
I0428 19:57:27.759377 28685 net.cpp:382] conv1 -> conv1
I0428 19:57:27.762253 28685 net.cpp:124] Setting up conv1
I0428 19:57:27.762284 28685 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:27.762287 28685 net.cpp:139] Memory required for data: 2126080
I0428 19:57:27.762295 28685 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:27.762302 28685 net.cpp:86] Creating Layer pool1
I0428 19:57:27.762306 28685 net.cpp:408] pool1 <- conv1
I0428 19:57:27.762311 28685 net.cpp:382] pool1 -> pool1
I0428 19:57:27.762347 28685 net.cpp:124] Setting up pool1
I0428 19:57:27.762353 28685 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:27.762356 28685 net.cpp:139] Memory required for data: 2146560
I0428 19:57:27.762358 28685 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:27.762365 28685 net.cpp:86] Creating Layer ip1
I0428 19:57:27.762368 28685 net.cpp:408] ip1 <- pool1
I0428 19:57:27.762372 28685 net.cpp:382] ip1 -> ip1
I0428 19:57:27.762485 28685 net.cpp:124] Setting up ip1
I0428 19:57:27.762493 28685 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:27.762496 28685 net.cpp:139] Memory required for data: 2159360
I0428 19:57:27.762502 28685 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:27.762508 28685 net.cpp:86] Creating Layer relu1
I0428 19:57:27.762511 28685 net.cpp:408] relu1 <- ip1
I0428 19:57:27.762516 28685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:27.762675 28685 net.cpp:124] Setting up relu1
I0428 19:57:27.762683 28685 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:27.762686 28685 net.cpp:139] Memory required for data: 2172160
I0428 19:57:27.762689 28685 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:27.762694 28685 net.cpp:86] Creating Layer ip2
I0428 19:57:27.762697 28685 net.cpp:408] ip2 <- ip1
I0428 19:57:27.762702 28685 net.cpp:382] ip2 -> ip2
I0428 19:57:27.762811 28685 net.cpp:124] Setting up ip2
I0428 19:57:27.762818 28685 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:27.762821 28685 net.cpp:139] Memory required for data: 2174720
I0428 19:57:27.762827 28685 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:27.762832 28685 net.cpp:86] Creating Layer relu2
I0428 19:57:27.762835 28685 net.cpp:408] relu2 <- ip2
I0428 19:57:27.762840 28685 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:27.763640 28685 net.cpp:124] Setting up relu2
I0428 19:57:27.763651 28685 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:27.763670 28685 net.cpp:139] Memory required for data: 2177280
I0428 19:57:27.763674 28685 layer_factory.hpp:77] Creating layer loss
I0428 19:57:27.763680 28685 net.cpp:86] Creating Layer loss
I0428 19:57:27.763684 28685 net.cpp:408] loss <- ip2
I0428 19:57:27.763687 28685 net.cpp:408] loss <- label
I0428 19:57:27.763694 28685 net.cpp:382] loss -> loss
I0428 19:57:27.763710 28685 layer_factory.hpp:77] Creating layer loss
I0428 19:57:27.763967 28685 net.cpp:124] Setting up loss
I0428 19:57:27.763977 28685 net.cpp:131] Top shape: (1)
I0428 19:57:27.763980 28685 net.cpp:134]     with loss weight 1
I0428 19:57:27.763994 28685 net.cpp:139] Memory required for data: 2177284
I0428 19:57:27.763998 28685 net.cpp:200] loss needs backward computation.
I0428 19:57:27.764001 28685 net.cpp:200] relu2 needs backward computation.
I0428 19:57:27.764004 28685 net.cpp:200] ip2 needs backward computation.
I0428 19:57:27.764006 28685 net.cpp:200] relu1 needs backward computation.
I0428 19:57:27.764009 28685 net.cpp:200] ip1 needs backward computation.
I0428 19:57:27.764024 28685 net.cpp:200] pool1 needs backward computation.
I0428 19:57:27.764027 28685 net.cpp:200] conv1 needs backward computation.
I0428 19:57:27.764030 28685 net.cpp:200] pool0 needs backward computation.
I0428 19:57:27.764034 28685 net.cpp:200] conv0 needs backward computation.
I0428 19:57:27.764036 28685 net.cpp:202] mnist does not need backward computation.
I0428 19:57:27.764039 28685 net.cpp:244] This network produces output loss
I0428 19:57:27.764047 28685 net.cpp:257] Network initialization done.
I0428 19:57:27.764353 28685 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test789.prototxt
I0428 19:57:27.764376 28685 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:27.764454 28685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:27.764511 28685 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:27.764550 28685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:27.764565 28685 net.cpp:86] Creating Layer mnist
I0428 19:57:27.764569 28685 net.cpp:382] mnist -> data
I0428 19:57:27.764576 28685 net.cpp:382] mnist -> label
I0428 19:57:27.764688 28685 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:27.766623 28685 net.cpp:124] Setting up mnist
I0428 19:57:27.766650 28685 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:27.766655 28685 net.cpp:131] Top shape: 100 (100)
I0428 19:57:27.766659 28685 net.cpp:139] Memory required for data: 314000
I0428 19:57:27.766664 28685 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:27.766669 28685 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:27.766672 28685 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:27.766676 28685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:27.766682 28685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:27.766757 28685 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:27.766772 28685 net.cpp:131] Top shape: 100 (100)
I0428 19:57:27.766777 28685 net.cpp:131] Top shape: 100 (100)
I0428 19:57:27.766779 28685 net.cpp:139] Memory required for data: 314800
I0428 19:57:27.766782 28685 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:27.766790 28685 net.cpp:86] Creating Layer conv0
I0428 19:57:27.766793 28685 net.cpp:408] conv0 <- data
I0428 19:57:27.766798 28685 net.cpp:382] conv0 -> conv0
I0428 19:57:27.768682 28685 net.cpp:124] Setting up conv0
I0428 19:57:27.768694 28685 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:27.768698 28685 net.cpp:139] Memory required for data: 2618800
I0428 19:57:27.768707 28685 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:27.768712 28685 net.cpp:86] Creating Layer pool0
I0428 19:57:27.768717 28685 net.cpp:408] pool0 <- conv0
I0428 19:57:27.768720 28685 net.cpp:382] pool0 -> pool0
I0428 19:57:27.768754 28685 net.cpp:124] Setting up pool0
I0428 19:57:27.768759 28685 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:27.768761 28685 net.cpp:139] Memory required for data: 3194800
I0428 19:57:27.768764 28685 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:27.768771 28685 net.cpp:86] Creating Layer conv1
I0428 19:57:27.768774 28685 net.cpp:408] conv1 <- pool0
I0428 19:57:27.768779 28685 net.cpp:382] conv1 -> conv1
I0428 19:57:27.770958 28685 net.cpp:124] Setting up conv1
I0428 19:57:27.770970 28685 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:27.770974 28685 net.cpp:139] Memory required for data: 3322800
I0428 19:57:27.770982 28685 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:27.770988 28685 net.cpp:86] Creating Layer pool1
I0428 19:57:27.770992 28685 net.cpp:408] pool1 <- conv1
I0428 19:57:27.770997 28685 net.cpp:382] pool1 -> pool1
I0428 19:57:27.771034 28685 net.cpp:124] Setting up pool1
I0428 19:57:27.771039 28685 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:27.771041 28685 net.cpp:139] Memory required for data: 3354800
I0428 19:57:27.771052 28685 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:27.771059 28685 net.cpp:86] Creating Layer ip1
I0428 19:57:27.771061 28685 net.cpp:408] ip1 <- pool1
I0428 19:57:27.771066 28685 net.cpp:382] ip1 -> ip1
I0428 19:57:27.771186 28685 net.cpp:124] Setting up ip1
I0428 19:57:27.771194 28685 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:27.771198 28685 net.cpp:139] Memory required for data: 3374800
I0428 19:57:27.771204 28685 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:27.771209 28685 net.cpp:86] Creating Layer relu1
I0428 19:57:27.771212 28685 net.cpp:408] relu1 <- ip1
I0428 19:57:27.771224 28685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:27.771422 28685 net.cpp:124] Setting up relu1
I0428 19:57:27.771432 28685 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:27.771436 28685 net.cpp:139] Memory required for data: 3394800
I0428 19:57:27.771440 28685 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:27.771448 28685 net.cpp:86] Creating Layer ip2
I0428 19:57:27.771451 28685 net.cpp:408] ip2 <- ip1
I0428 19:57:27.771456 28685 net.cpp:382] ip2 -> ip2
I0428 19:57:27.771564 28685 net.cpp:124] Setting up ip2
I0428 19:57:27.771571 28685 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:27.771574 28685 net.cpp:139] Memory required for data: 3398800
I0428 19:57:27.771579 28685 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:27.771585 28685 net.cpp:86] Creating Layer relu2
I0428 19:57:27.771589 28685 net.cpp:408] relu2 <- ip2
I0428 19:57:27.771592 28685 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:27.771795 28685 net.cpp:124] Setting up relu2
I0428 19:57:27.771802 28685 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:27.771806 28685 net.cpp:139] Memory required for data: 3402800
I0428 19:57:27.771811 28685 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:27.771816 28685 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:27.771818 28685 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:27.771844 28685 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:27.771860 28685 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:27.771898 28685 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:27.771915 28685 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:27.771919 28685 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:27.771929 28685 net.cpp:139] Memory required for data: 3410800
I0428 19:57:27.771931 28685 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:27.771937 28685 net.cpp:86] Creating Layer accuracy
I0428 19:57:27.771940 28685 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:27.771944 28685 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:27.771948 28685 net.cpp:382] accuracy -> accuracy
I0428 19:57:27.771955 28685 net.cpp:124] Setting up accuracy
I0428 19:57:27.771960 28685 net.cpp:131] Top shape: (1)
I0428 19:57:27.771962 28685 net.cpp:139] Memory required for data: 3410804
I0428 19:57:27.771965 28685 layer_factory.hpp:77] Creating layer loss
I0428 19:57:27.771970 28685 net.cpp:86] Creating Layer loss
I0428 19:57:27.771973 28685 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:27.771983 28685 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:27.771988 28685 net.cpp:382] loss -> loss
I0428 19:57:27.771994 28685 layer_factory.hpp:77] Creating layer loss
I0428 19:57:27.772269 28685 net.cpp:124] Setting up loss
I0428 19:57:27.772276 28685 net.cpp:131] Top shape: (1)
I0428 19:57:27.772279 28685 net.cpp:134]     with loss weight 1
I0428 19:57:27.772285 28685 net.cpp:139] Memory required for data: 3410808
I0428 19:57:27.772289 28685 net.cpp:200] loss needs backward computation.
I0428 19:57:27.772291 28685 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:27.772295 28685 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:27.772297 28685 net.cpp:200] relu2 needs backward computation.
I0428 19:57:27.772300 28685 net.cpp:200] ip2 needs backward computation.
I0428 19:57:27.772302 28685 net.cpp:200] relu1 needs backward computation.
I0428 19:57:27.772305 28685 net.cpp:200] ip1 needs backward computation.
I0428 19:57:27.772308 28685 net.cpp:200] pool1 needs backward computation.
I0428 19:57:27.772310 28685 net.cpp:200] conv1 needs backward computation.
I0428 19:57:27.772313 28685 net.cpp:200] pool0 needs backward computation.
I0428 19:57:27.772316 28685 net.cpp:200] conv0 needs backward computation.
I0428 19:57:27.772320 28685 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:27.772322 28685 net.cpp:202] mnist does not need backward computation.
I0428 19:57:27.772325 28685 net.cpp:244] This network produces output accuracy
I0428 19:57:27.772327 28685 net.cpp:244] This network produces output loss
I0428 19:57:27.772338 28685 net.cpp:257] Network initialization done.
I0428 19:57:27.772373 28685 solver.cpp:56] Solver scaffolding done.
I0428 19:57:27.772701 28685 caffe.cpp:248] Starting Optimization
I0428 19:57:27.772708 28685 solver.cpp:273] Solving LeNet
I0428 19:57:27.772711 28685 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:27.773501 28685 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:27.776151 28685 blocking_queue.cpp:49] Waiting for data
I0428 19:57:27.848690 28692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:27.849189 28685 solver.cpp:398]     Test net output #0: accuracy = 0.1114
I0428 19:57:27.849208 28685 solver.cpp:398]     Test net output #1: loss = 2.31413 (* 1 = 2.31413 loss)
I0428 19:57:27.851730 28685 solver.cpp:219] Iteration 0 (0 iter/s, 0.0789946s/100 iters), loss = 2.30011
I0428 19:57:27.851771 28685 solver.cpp:238]     Train net output #0: loss = 2.30011 (* 1 = 2.30011 loss)
I0428 19:57:27.851783 28685 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:27.936653 28685 solver.cpp:219] Iteration 100 (1178.27 iter/s, 0.0848701s/100 iters), loss = 0.946671
I0428 19:57:27.936693 28685 solver.cpp:238]     Train net output #0: loss = 0.946671 (* 1 = 0.946671 loss)
I0428 19:57:27.936700 28685 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:28.013972 28685 solver.cpp:219] Iteration 200 (1294.2 iter/s, 0.077268s/100 iters), loss = 0.736757
I0428 19:57:28.014024 28685 solver.cpp:238]     Train net output #0: loss = 0.736757 (* 1 = 0.736757 loss)
I0428 19:57:28.014031 28685 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:28.092279 28685 solver.cpp:219] Iteration 300 (1278.01 iter/s, 0.0782469s/100 iters), loss = 0.806933
I0428 19:57:28.092319 28685 solver.cpp:238]     Train net output #0: loss = 0.806933 (* 1 = 0.806933 loss)
I0428 19:57:28.092327 28685 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:28.165601 28685 solver.cpp:219] Iteration 400 (1364.5 iter/s, 0.0732867s/100 iters), loss = 0.936113
I0428 19:57:28.165640 28685 solver.cpp:238]     Train net output #0: loss = 0.936113 (* 1 = 0.936113 loss)
I0428 19:57:28.165647 28685 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:28.234748 28685 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:28.306779 28692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:28.307276 28685 solver.cpp:398]     Test net output #0: accuracy = 0.7333
I0428 19:57:28.307313 28685 solver.cpp:398]     Test net output #1: loss = 0.829455 (* 1 = 0.829455 loss)
I0428 19:57:28.308064 28685 solver.cpp:219] Iteration 500 (702.113 iter/s, 0.142427s/100 iters), loss = 0.834329
I0428 19:57:28.308105 28685 solver.cpp:238]     Train net output #0: loss = 0.834329 (* 1 = 0.834329 loss)
I0428 19:57:28.308112 28685 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:28.391203 28685 solver.cpp:219] Iteration 600 (1203.3 iter/s, 0.0831048s/100 iters), loss = 0.932432
I0428 19:57:28.391227 28685 solver.cpp:238]     Train net output #0: loss = 0.932432 (* 1 = 0.932432 loss)
I0428 19:57:28.391247 28685 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:28.463142 28685 solver.cpp:219] Iteration 700 (1390.68 iter/s, 0.0719073s/100 iters), loss = 0.873663
I0428 19:57:28.463166 28685 solver.cpp:238]     Train net output #0: loss = 0.873663 (* 1 = 0.873663 loss)
I0428 19:57:28.463189 28685 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:28.533259 28685 solver.cpp:219] Iteration 800 (1426.85 iter/s, 0.0700846s/100 iters), loss = 1.00081
I0428 19:57:28.533283 28685 solver.cpp:238]     Train net output #0: loss = 1.00081 (* 1 = 1.00081 loss)
I0428 19:57:28.533306 28685 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:28.603559 28685 solver.cpp:219] Iteration 900 (1423.15 iter/s, 0.0702669s/100 iters), loss = 0.744029
I0428 19:57:28.603582 28685 solver.cpp:238]     Train net output #0: loss = 0.744029 (* 1 = 0.744029 loss)
I0428 19:57:28.603591 28685 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:28.627058 28691 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:28.673259 28685 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:28.673920 28685 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:28.674351 28685 solver.cpp:311] Iteration 1000, loss = 0.888454
I0428 19:57:28.674366 28685 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:28.748989 28692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:28.749501 28685 solver.cpp:398]     Test net output #0: accuracy = 0.7763
I0428 19:57:28.749523 28685 solver.cpp:398]     Test net output #1: loss = 0.779194 (* 1 = 0.779194 loss)
I0428 19:57:28.749527 28685 solver.cpp:316] Optimization Done.
I0428 19:57:28.749531 28685 caffe.cpp:259] Optimization Done.
