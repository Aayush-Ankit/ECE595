I0428 20:12:56.953912 32377 caffe.cpp:218] Using GPUs 0
I0428 20:12:56.981437 32377 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:57.431270 32377 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1190.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:57.431428 32377 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1190.prototxt
I0428 20:12:57.431802 32377 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:57.431828 32377 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:57.431922 32377 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:12:57.432001 32377 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:57.432082 32377 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:57.432101 32377 net.cpp:86] Creating Layer mnist
I0428 20:12:57.432108 32377 net.cpp:382] mnist -> data
I0428 20:12:57.432126 32377 net.cpp:382] mnist -> label
I0428 20:12:57.433210 32377 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:57.435598 32377 net.cpp:124] Setting up mnist
I0428 20:12:57.435616 32377 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:57.435621 32377 net.cpp:131] Top shape: 64 (64)
I0428 20:12:57.435623 32377 net.cpp:139] Memory required for data: 200960
I0428 20:12:57.435631 32377 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:57.435660 32377 net.cpp:86] Creating Layer conv0
I0428 20:12:57.435693 32377 net.cpp:408] conv0 <- data
I0428 20:12:57.435703 32377 net.cpp:382] conv0 -> conv0
I0428 20:12:57.665419 32377 net.cpp:124] Setting up conv0
I0428 20:12:57.665444 32377 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:57.665448 32377 net.cpp:139] Memory required for data: 3887360
I0428 20:12:57.665462 32377 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:57.665473 32377 net.cpp:86] Creating Layer pool0
I0428 20:12:57.665477 32377 net.cpp:408] pool0 <- conv0
I0428 20:12:57.665482 32377 net.cpp:382] pool0 -> pool0
I0428 20:12:57.665539 32377 net.cpp:124] Setting up pool0
I0428 20:12:57.665544 32377 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:57.665547 32377 net.cpp:139] Memory required for data: 4808960
I0428 20:12:57.665549 32377 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:57.665560 32377 net.cpp:86] Creating Layer conv1
I0428 20:12:57.665563 32377 net.cpp:408] conv1 <- pool0
I0428 20:12:57.665567 32377 net.cpp:382] conv1 -> conv1
I0428 20:12:57.667742 32377 net.cpp:124] Setting up conv1
I0428 20:12:57.667769 32377 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:57.667773 32377 net.cpp:139] Memory required for data: 6447360
I0428 20:12:57.667781 32377 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:57.667788 32377 net.cpp:86] Creating Layer pool1
I0428 20:12:57.667791 32377 net.cpp:408] pool1 <- conv1
I0428 20:12:57.667796 32377 net.cpp:382] pool1 -> pool1
I0428 20:12:57.667846 32377 net.cpp:124] Setting up pool1
I0428 20:12:57.667851 32377 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:57.667855 32377 net.cpp:139] Memory required for data: 6856960
I0428 20:12:57.667857 32377 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:57.667865 32377 net.cpp:86] Creating Layer ip1
I0428 20:12:57.667866 32377 net.cpp:408] ip1 <- pool1
I0428 20:12:57.667871 32377 net.cpp:382] ip1 -> ip1
I0428 20:12:57.668962 32377 net.cpp:124] Setting up ip1
I0428 20:12:57.668975 32377 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:57.668980 32377 net.cpp:139] Memory required for data: 6859520
I0428 20:12:57.668988 32377 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:57.668995 32377 net.cpp:86] Creating Layer relu1
I0428 20:12:57.668998 32377 net.cpp:408] relu1 <- ip1
I0428 20:12:57.669003 32377 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:57.669222 32377 net.cpp:124] Setting up relu1
I0428 20:12:57.669232 32377 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:57.669235 32377 net.cpp:139] Memory required for data: 6862080
I0428 20:12:57.669239 32377 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:57.669245 32377 net.cpp:86] Creating Layer ip2
I0428 20:12:57.669248 32377 net.cpp:408] ip2 <- ip1
I0428 20:12:57.669253 32377 net.cpp:382] ip2 -> ip2
I0428 20:12:57.669373 32377 net.cpp:124] Setting up ip2
I0428 20:12:57.669379 32377 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:57.669383 32377 net.cpp:139] Memory required for data: 6874880
I0428 20:12:57.669387 32377 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:57.669394 32377 net.cpp:86] Creating Layer relu2
I0428 20:12:57.669396 32377 net.cpp:408] relu2 <- ip2
I0428 20:12:57.669400 32377 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:57.670114 32377 net.cpp:124] Setting up relu2
I0428 20:12:57.670126 32377 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:57.670145 32377 net.cpp:139] Memory required for data: 6887680
I0428 20:12:57.670148 32377 layer_factory.hpp:77] Creating layer ip3
I0428 20:12:57.670156 32377 net.cpp:86] Creating Layer ip3
I0428 20:12:57.670158 32377 net.cpp:408] ip3 <- ip2
I0428 20:12:57.670163 32377 net.cpp:382] ip3 -> ip3
I0428 20:12:57.670271 32377 net.cpp:124] Setting up ip3
I0428 20:12:57.670279 32377 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:57.670281 32377 net.cpp:139] Memory required for data: 6890240
I0428 20:12:57.670289 32377 layer_factory.hpp:77] Creating layer relu3
I0428 20:12:57.670294 32377 net.cpp:86] Creating Layer relu3
I0428 20:12:57.670296 32377 net.cpp:408] relu3 <- ip3
I0428 20:12:57.670300 32377 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:12:57.670470 32377 net.cpp:124] Setting up relu3
I0428 20:12:57.670478 32377 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:57.670482 32377 net.cpp:139] Memory required for data: 6892800
I0428 20:12:57.670485 32377 layer_factory.hpp:77] Creating layer loss
I0428 20:12:57.670490 32377 net.cpp:86] Creating Layer loss
I0428 20:12:57.670493 32377 net.cpp:408] loss <- ip3
I0428 20:12:57.670497 32377 net.cpp:408] loss <- label
I0428 20:12:57.670502 32377 net.cpp:382] loss -> loss
I0428 20:12:57.670519 32377 layer_factory.hpp:77] Creating layer loss
I0428 20:12:57.670737 32377 net.cpp:124] Setting up loss
I0428 20:12:57.670747 32377 net.cpp:131] Top shape: (1)
I0428 20:12:57.670749 32377 net.cpp:134]     with loss weight 1
I0428 20:12:57.670763 32377 net.cpp:139] Memory required for data: 6892804
I0428 20:12:57.670766 32377 net.cpp:200] loss needs backward computation.
I0428 20:12:57.670770 32377 net.cpp:200] relu3 needs backward computation.
I0428 20:12:57.670773 32377 net.cpp:200] ip3 needs backward computation.
I0428 20:12:57.670775 32377 net.cpp:200] relu2 needs backward computation.
I0428 20:12:57.670778 32377 net.cpp:200] ip2 needs backward computation.
I0428 20:12:57.670780 32377 net.cpp:200] relu1 needs backward computation.
I0428 20:12:57.670783 32377 net.cpp:200] ip1 needs backward computation.
I0428 20:12:57.670786 32377 net.cpp:200] pool1 needs backward computation.
I0428 20:12:57.670789 32377 net.cpp:200] conv1 needs backward computation.
I0428 20:12:57.670791 32377 net.cpp:200] pool0 needs backward computation.
I0428 20:12:57.670794 32377 net.cpp:200] conv0 needs backward computation.
I0428 20:12:57.670797 32377 net.cpp:202] mnist does not need backward computation.
I0428 20:12:57.670800 32377 net.cpp:244] This network produces output loss
I0428 20:12:57.670809 32377 net.cpp:257] Network initialization done.
I0428 20:12:57.671123 32377 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1190.prototxt
I0428 20:12:57.671147 32377 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:57.671238 32377 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:12:57.671329 32377 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:57.671372 32377 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:57.671385 32377 net.cpp:86] Creating Layer mnist
I0428 20:12:57.671389 32377 net.cpp:382] mnist -> data
I0428 20:12:57.671396 32377 net.cpp:382] mnist -> label
I0428 20:12:57.671489 32377 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:57.673598 32377 net.cpp:124] Setting up mnist
I0428 20:12:57.673625 32377 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:57.673630 32377 net.cpp:131] Top shape: 100 (100)
I0428 20:12:57.673633 32377 net.cpp:139] Memory required for data: 314000
I0428 20:12:57.673636 32377 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:57.673681 32377 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:57.673686 32377 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:57.673709 32377 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:57.673717 32377 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:57.673756 32377 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:57.673763 32377 net.cpp:131] Top shape: 100 (100)
I0428 20:12:57.673765 32377 net.cpp:131] Top shape: 100 (100)
I0428 20:12:57.673768 32377 net.cpp:139] Memory required for data: 314800
I0428 20:12:57.673771 32377 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:57.673780 32377 net.cpp:86] Creating Layer conv0
I0428 20:12:57.673784 32377 net.cpp:408] conv0 <- data
I0428 20:12:57.673789 32377 net.cpp:382] conv0 -> conv0
I0428 20:12:57.675619 32377 net.cpp:124] Setting up conv0
I0428 20:12:57.675633 32377 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:57.675637 32377 net.cpp:139] Memory required for data: 6074800
I0428 20:12:57.675645 32377 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:57.675652 32377 net.cpp:86] Creating Layer pool0
I0428 20:12:57.675654 32377 net.cpp:408] pool0 <- conv0
I0428 20:12:57.675659 32377 net.cpp:382] pool0 -> pool0
I0428 20:12:57.675694 32377 net.cpp:124] Setting up pool0
I0428 20:12:57.675699 32377 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:57.675703 32377 net.cpp:139] Memory required for data: 7514800
I0428 20:12:57.675704 32377 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:57.675714 32377 net.cpp:86] Creating Layer conv1
I0428 20:12:57.675716 32377 net.cpp:408] conv1 <- pool0
I0428 20:12:57.675721 32377 net.cpp:382] conv1 -> conv1
I0428 20:12:57.677742 32377 net.cpp:124] Setting up conv1
I0428 20:12:57.677758 32377 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:57.677784 32377 net.cpp:139] Memory required for data: 10074800
I0428 20:12:57.677835 32377 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:57.677842 32377 net.cpp:86] Creating Layer pool1
I0428 20:12:57.677860 32377 net.cpp:408] pool1 <- conv1
I0428 20:12:57.677865 32377 net.cpp:382] pool1 -> pool1
I0428 20:12:57.677901 32377 net.cpp:124] Setting up pool1
I0428 20:12:57.677907 32377 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:57.677916 32377 net.cpp:139] Memory required for data: 10714800
I0428 20:12:57.677918 32377 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:57.677924 32377 net.cpp:86] Creating Layer ip1
I0428 20:12:57.677927 32377 net.cpp:408] ip1 <- pool1
I0428 20:12:57.677932 32377 net.cpp:382] ip1 -> ip1
I0428 20:12:57.678124 32377 net.cpp:124] Setting up ip1
I0428 20:12:57.678133 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.678161 32377 net.cpp:139] Memory required for data: 10718800
I0428 20:12:57.678169 32377 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:57.678176 32377 net.cpp:86] Creating Layer relu1
I0428 20:12:57.678179 32377 net.cpp:408] relu1 <- ip1
I0428 20:12:57.678184 32377 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:57.678359 32377 net.cpp:124] Setting up relu1
I0428 20:12:57.678367 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.678371 32377 net.cpp:139] Memory required for data: 10722800
I0428 20:12:57.678373 32377 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:57.678381 32377 net.cpp:86] Creating Layer ip2
I0428 20:12:57.678385 32377 net.cpp:408] ip2 <- ip1
I0428 20:12:57.678391 32377 net.cpp:382] ip2 -> ip2
I0428 20:12:57.678493 32377 net.cpp:124] Setting up ip2
I0428 20:12:57.678500 32377 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:57.678503 32377 net.cpp:139] Memory required for data: 10742800
I0428 20:12:57.678508 32377 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:57.678513 32377 net.cpp:86] Creating Layer relu2
I0428 20:12:57.678522 32377 net.cpp:408] relu2 <- ip2
I0428 20:12:57.678526 32377 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:57.678726 32377 net.cpp:124] Setting up relu2
I0428 20:12:57.678735 32377 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:57.678737 32377 net.cpp:139] Memory required for data: 10762800
I0428 20:12:57.678740 32377 layer_factory.hpp:77] Creating layer ip3
I0428 20:12:57.678745 32377 net.cpp:86] Creating Layer ip3
I0428 20:12:57.678747 32377 net.cpp:408] ip3 <- ip2
I0428 20:12:57.678753 32377 net.cpp:382] ip3 -> ip3
I0428 20:12:57.678875 32377 net.cpp:124] Setting up ip3
I0428 20:12:57.678882 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.678885 32377 net.cpp:139] Memory required for data: 10766800
I0428 20:12:57.678892 32377 layer_factory.hpp:77] Creating layer relu3
I0428 20:12:57.678896 32377 net.cpp:86] Creating Layer relu3
I0428 20:12:57.678900 32377 net.cpp:408] relu3 <- ip3
I0428 20:12:57.678905 32377 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:12:57.679714 32377 net.cpp:124] Setting up relu3
I0428 20:12:57.679726 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.679729 32377 net.cpp:139] Memory required for data: 10770800
I0428 20:12:57.679733 32377 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:12:57.679738 32377 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:12:57.679740 32377 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:12:57.679746 32377 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:12:57.679759 32377 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:12:57.679795 32377 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:12:57.679806 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.679811 32377 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:57.679812 32377 net.cpp:139] Memory required for data: 10778800
I0428 20:12:57.679816 32377 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:57.679826 32377 net.cpp:86] Creating Layer accuracy
I0428 20:12:57.679829 32377 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:12:57.679832 32377 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:57.679838 32377 net.cpp:382] accuracy -> accuracy
I0428 20:12:57.679844 32377 net.cpp:124] Setting up accuracy
I0428 20:12:57.679848 32377 net.cpp:131] Top shape: (1)
I0428 20:12:57.679850 32377 net.cpp:139] Memory required for data: 10778804
I0428 20:12:57.679853 32377 layer_factory.hpp:77] Creating layer loss
I0428 20:12:57.679858 32377 net.cpp:86] Creating Layer loss
I0428 20:12:57.679862 32377 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:12:57.679864 32377 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:57.679868 32377 net.cpp:382] loss -> loss
I0428 20:12:57.679873 32377 layer_factory.hpp:77] Creating layer loss
I0428 20:12:57.680114 32377 net.cpp:124] Setting up loss
I0428 20:12:57.680124 32377 net.cpp:131] Top shape: (1)
I0428 20:12:57.680126 32377 net.cpp:134]     with loss weight 1
I0428 20:12:57.680161 32377 net.cpp:139] Memory required for data: 10778808
I0428 20:12:57.680166 32377 net.cpp:200] loss needs backward computation.
I0428 20:12:57.680186 32377 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:57.680191 32377 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:12:57.680193 32377 net.cpp:200] relu3 needs backward computation.
I0428 20:12:57.680196 32377 net.cpp:200] ip3 needs backward computation.
I0428 20:12:57.680213 32377 net.cpp:200] relu2 needs backward computation.
I0428 20:12:57.680217 32377 net.cpp:200] ip2 needs backward computation.
I0428 20:12:57.680224 32377 net.cpp:200] relu1 needs backward computation.
I0428 20:12:57.680227 32377 net.cpp:200] ip1 needs backward computation.
I0428 20:12:57.680229 32377 net.cpp:200] pool1 needs backward computation.
I0428 20:12:57.680238 32377 net.cpp:200] conv1 needs backward computation.
I0428 20:12:57.680241 32377 net.cpp:200] pool0 needs backward computation.
I0428 20:12:57.680244 32377 net.cpp:200] conv0 needs backward computation.
I0428 20:12:57.680248 32377 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:57.680258 32377 net.cpp:202] mnist does not need backward computation.
I0428 20:12:57.680259 32377 net.cpp:244] This network produces output accuracy
I0428 20:12:57.680263 32377 net.cpp:244] This network produces output loss
I0428 20:12:57.680274 32377 net.cpp:257] Network initialization done.
I0428 20:12:57.680318 32377 solver.cpp:56] Solver scaffolding done.
I0428 20:12:57.680691 32377 caffe.cpp:248] Starting Optimization
I0428 20:12:57.680697 32377 solver.cpp:273] Solving LeNet
I0428 20:12:57.680706 32377 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:57.681565 32377 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:57.688774 32377 blocking_queue.cpp:49] Waiting for data
I0428 20:12:57.761011 32384 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:57.761818 32377 solver.cpp:398]     Test net output #0: accuracy = 0.1027
I0428 20:12:57.761837 32377 solver.cpp:398]     Test net output #1: loss = 2.3174 (* 1 = 2.3174 loss)
I0428 20:12:57.766571 32377 solver.cpp:219] Iteration 0 (-1.61404e+06 iter/s, 0.0858378s/100 iters), loss = 2.30211
I0428 20:12:57.766609 32377 solver.cpp:238]     Train net output #0: loss = 2.30211 (* 1 = 2.30211 loss)
I0428 20:12:57.766620 32377 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:57.921393 32377 solver.cpp:219] Iteration 100 (646.127 iter/s, 0.154768s/100 iters), loss = 0.81375
I0428 20:12:57.921416 32377 solver.cpp:238]     Train net output #0: loss = 0.81375 (* 1 = 0.81375 loss)
I0428 20:12:57.921422 32377 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:58.080265 32377 solver.cpp:219] Iteration 200 (629.585 iter/s, 0.158835s/100 iters), loss = 0.351364
I0428 20:12:58.080291 32377 solver.cpp:238]     Train net output #0: loss = 0.351364 (* 1 = 0.351364 loss)
I0428 20:12:58.080312 32377 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:58.239480 32377 solver.cpp:219] Iteration 300 (628.245 iter/s, 0.159174s/100 iters), loss = 0.45382
I0428 20:12:58.239506 32377 solver.cpp:238]     Train net output #0: loss = 0.45382 (* 1 = 0.45382 loss)
I0428 20:12:58.239513 32377 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:58.406929 32377 solver.cpp:219] Iteration 400 (597.334 iter/s, 0.167411s/100 iters), loss = 0.29399
I0428 20:12:58.406956 32377 solver.cpp:238]     Train net output #0: loss = 0.29399 (* 1 = 0.29399 loss)
I0428 20:12:58.406963 32377 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:58.565201 32377 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:58.632021 32384 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:58.634394 32377 solver.cpp:398]     Test net output #0: accuracy = 0.8586
I0428 20:12:58.634414 32377 solver.cpp:398]     Test net output #1: loss = 0.368132 (* 1 = 0.368132 loss)
I0428 20:12:58.635814 32377 solver.cpp:219] Iteration 500 (436.985 iter/s, 0.228841s/100 iters), loss = 0.243109
I0428 20:12:58.635884 32377 solver.cpp:238]     Train net output #0: loss = 0.243109 (* 1 = 0.243109 loss)
I0428 20:12:58.635907 32377 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:58.834905 32377 solver.cpp:219] Iteration 600 (502.464 iter/s, 0.199019s/100 iters), loss = 0.32343
I0428 20:12:58.834949 32377 solver.cpp:238]     Train net output #0: loss = 0.32343 (* 1 = 0.32343 loss)
I0428 20:12:58.834977 32377 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:59.039726 32377 solver.cpp:219] Iteration 700 (488.369 iter/s, 0.204763s/100 iters), loss = 0.478363
I0428 20:12:59.039770 32377 solver.cpp:238]     Train net output #0: loss = 0.478363 (* 1 = 0.478363 loss)
I0428 20:12:59.039782 32377 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:59.252682 32377 solver.cpp:219] Iteration 800 (469.718 iter/s, 0.212894s/100 iters), loss = 0.537767
I0428 20:12:59.252735 32377 solver.cpp:238]     Train net output #0: loss = 0.537767 (* 1 = 0.537767 loss)
I0428 20:12:59.252749 32377 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:59.456639 32377 solver.cpp:219] Iteration 900 (490.458 iter/s, 0.203891s/100 iters), loss = 0.39257
I0428 20:12:59.456670 32377 solver.cpp:238]     Train net output #0: loss = 0.39257 (* 1 = 0.39257 loss)
I0428 20:12:59.456679 32377 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:59.528452 32383 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:59.658927 32377 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:59.661938 32377 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:59.663300 32377 solver.cpp:311] Iteration 1000, loss = 0.0787882
I0428 20:12:59.663319 32377 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:59.733055 32384 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:59.735563 32377 solver.cpp:398]     Test net output #0: accuracy = 0.9729
I0428 20:12:59.735584 32377 solver.cpp:398]     Test net output #1: loss = 0.0868061 (* 1 = 0.0868061 loss)
I0428 20:12:59.735590 32377 solver.cpp:316] Optimization Done.
I0428 20:12:59.735604 32377 caffe.cpp:259] Optimization Done.
