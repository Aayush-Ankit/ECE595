I0428 19:44:53.999660 25699 caffe.cpp:218] Using GPUs 0
I0428 19:44:54.040052 25699 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:54.566439 25699 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test459.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:54.566612 25699 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test459.prototxt
I0428 19:44:54.567036 25699 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:54.567064 25699 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:54.567180 25699 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:54.567296 25699 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:54.567430 25699 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:54.567461 25699 net.cpp:86] Creating Layer mnist
I0428 19:44:54.567476 25699 net.cpp:382] mnist -> data
I0428 19:44:54.567507 25699 net.cpp:382] mnist -> label
I0428 19:44:54.568769 25699 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:54.571256 25699 net.cpp:124] Setting up mnist
I0428 19:44:54.571276 25699 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:54.571286 25699 net.cpp:131] Top shape: 64 (64)
I0428 19:44:54.571292 25699 net.cpp:139] Memory required for data: 200960
I0428 19:44:54.571302 25699 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:54.571327 25699 net.cpp:86] Creating Layer conv0
I0428 19:44:54.571353 25699 net.cpp:408] conv0 <- data
I0428 19:44:54.571375 25699 net.cpp:382] conv0 -> conv0
I0428 19:44:54.859973 25699 net.cpp:124] Setting up conv0
I0428 19:44:54.860004 25699 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:54.860010 25699 net.cpp:139] Memory required for data: 495872
I0428 19:44:54.860033 25699 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:54.860050 25699 net.cpp:86] Creating Layer pool0
I0428 19:44:54.860057 25699 net.cpp:408] pool0 <- conv0
I0428 19:44:54.860067 25699 net.cpp:382] pool0 -> pool0
I0428 19:44:54.860136 25699 net.cpp:124] Setting up pool0
I0428 19:44:54.860146 25699 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:54.860152 25699 net.cpp:139] Memory required for data: 569600
I0428 19:44:54.860157 25699 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:54.860174 25699 net.cpp:86] Creating Layer conv1
I0428 19:44:54.860182 25699 net.cpp:408] conv1 <- pool0
I0428 19:44:54.860191 25699 net.cpp:382] conv1 -> conv1
I0428 19:44:54.862994 25699 net.cpp:124] Setting up conv1
I0428 19:44:54.863013 25699 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:54.863019 25699 net.cpp:139] Memory required for data: 1388800
I0428 19:44:54.863034 25699 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:54.863046 25699 net.cpp:86] Creating Layer pool1
I0428 19:44:54.863052 25699 net.cpp:408] pool1 <- conv1
I0428 19:44:54.863061 25699 net.cpp:382] pool1 -> pool1
I0428 19:44:54.863111 25699 net.cpp:124] Setting up pool1
I0428 19:44:54.863121 25699 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:54.863126 25699 net.cpp:139] Memory required for data: 1593600
I0428 19:44:54.863131 25699 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:54.863147 25699 net.cpp:86] Creating Layer ip1
I0428 19:44:54.863155 25699 net.cpp:408] ip1 <- pool1
I0428 19:44:54.863164 25699 net.cpp:382] ip1 -> ip1
I0428 19:44:54.863514 25699 net.cpp:124] Setting up ip1
I0428 19:44:54.863525 25699 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:54.863530 25699 net.cpp:139] Memory required for data: 1606400
I0428 19:44:54.863543 25699 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:54.863554 25699 net.cpp:86] Creating Layer relu1
I0428 19:44:54.863564 25699 net.cpp:408] relu1 <- ip1
I0428 19:44:54.863571 25699 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:54.863754 25699 net.cpp:124] Setting up relu1
I0428 19:44:54.863765 25699 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:54.863770 25699 net.cpp:139] Memory required for data: 1619200
I0428 19:44:54.863776 25699 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:54.863786 25699 net.cpp:86] Creating Layer ip2
I0428 19:44:54.863792 25699 net.cpp:408] ip2 <- ip1
I0428 19:44:54.863801 25699 net.cpp:382] ip2 -> ip2
I0428 19:44:54.863909 25699 net.cpp:124] Setting up ip2
I0428 19:44:54.863919 25699 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:54.863924 25699 net.cpp:139] Memory required for data: 1621760
I0428 19:44:54.863934 25699 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:54.863945 25699 net.cpp:86] Creating Layer relu2
I0428 19:44:54.863950 25699 net.cpp:408] relu2 <- ip2
I0428 19:44:54.863958 25699 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:54.864748 25699 net.cpp:124] Setting up relu2
I0428 19:44:54.864763 25699 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:54.864768 25699 net.cpp:139] Memory required for data: 1624320
I0428 19:44:54.864773 25699 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:54.864784 25699 net.cpp:86] Creating Layer ip3
I0428 19:44:54.864790 25699 net.cpp:408] ip3 <- ip2
I0428 19:44:54.864801 25699 net.cpp:382] ip3 -> ip3
I0428 19:44:54.864925 25699 net.cpp:124] Setting up ip3
I0428 19:44:54.864938 25699 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:54.864943 25699 net.cpp:139] Memory required for data: 1626880
I0428 19:44:54.864956 25699 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:54.864969 25699 net.cpp:86] Creating Layer relu3
I0428 19:44:54.864975 25699 net.cpp:408] relu3 <- ip3
I0428 19:44:54.864984 25699 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:54.865182 25699 net.cpp:124] Setting up relu3
I0428 19:44:54.865193 25699 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:54.865198 25699 net.cpp:139] Memory required for data: 1629440
I0428 19:44:54.865203 25699 layer_factory.hpp:77] Creating layer loss
I0428 19:44:54.865212 25699 net.cpp:86] Creating Layer loss
I0428 19:44:54.865218 25699 net.cpp:408] loss <- ip3
I0428 19:44:54.865226 25699 net.cpp:408] loss <- label
I0428 19:44:54.865234 25699 net.cpp:382] loss -> loss
I0428 19:44:54.865257 25699 layer_factory.hpp:77] Creating layer loss
I0428 19:44:54.865494 25699 net.cpp:124] Setting up loss
I0428 19:44:54.865505 25699 net.cpp:131] Top shape: (1)
I0428 19:44:54.865511 25699 net.cpp:134]     with loss weight 1
I0428 19:44:54.865531 25699 net.cpp:139] Memory required for data: 1629444
I0428 19:44:54.865537 25699 net.cpp:200] loss needs backward computation.
I0428 19:44:54.865543 25699 net.cpp:200] relu3 needs backward computation.
I0428 19:44:54.865548 25699 net.cpp:200] ip3 needs backward computation.
I0428 19:44:54.865555 25699 net.cpp:200] relu2 needs backward computation.
I0428 19:44:54.865559 25699 net.cpp:200] ip2 needs backward computation.
I0428 19:44:54.865564 25699 net.cpp:200] relu1 needs backward computation.
I0428 19:44:54.865569 25699 net.cpp:200] ip1 needs backward computation.
I0428 19:44:54.865574 25699 net.cpp:200] pool1 needs backward computation.
I0428 19:44:54.865581 25699 net.cpp:200] conv1 needs backward computation.
I0428 19:44:54.865586 25699 net.cpp:200] pool0 needs backward computation.
I0428 19:44:54.865592 25699 net.cpp:200] conv0 needs backward computation.
I0428 19:44:54.865598 25699 net.cpp:202] mnist does not need backward computation.
I0428 19:44:54.865603 25699 net.cpp:244] This network produces output loss
I0428 19:44:54.865618 25699 net.cpp:257] Network initialization done.
I0428 19:44:54.865952 25699 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test459.prototxt
I0428 19:44:54.865988 25699 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:54.866086 25699 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:54.866200 25699 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:54.866258 25699 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:54.866281 25699 net.cpp:86] Creating Layer mnist
I0428 19:44:54.866288 25699 net.cpp:382] mnist -> data
I0428 19:44:54.866302 25699 net.cpp:382] mnist -> label
I0428 19:44:54.866420 25699 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:54.868484 25699 net.cpp:124] Setting up mnist
I0428 19:44:54.868499 25699 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:54.868507 25699 net.cpp:131] Top shape: 100 (100)
I0428 19:44:54.868512 25699 net.cpp:139] Memory required for data: 314000
I0428 19:44:54.868518 25699 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:54.868548 25699 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:54.868554 25699 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:54.868562 25699 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:54.868573 25699 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:54.868664 25699 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:54.868672 25699 net.cpp:131] Top shape: 100 (100)
I0428 19:44:54.868680 25699 net.cpp:131] Top shape: 100 (100)
I0428 19:44:54.868685 25699 net.cpp:139] Memory required for data: 314800
I0428 19:44:54.868690 25699 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:54.868702 25699 net.cpp:86] Creating Layer conv0
I0428 19:44:54.868710 25699 net.cpp:408] conv0 <- data
I0428 19:44:54.868718 25699 net.cpp:382] conv0 -> conv0
I0428 19:44:54.870466 25699 net.cpp:124] Setting up conv0
I0428 19:44:54.870483 25699 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:54.870489 25699 net.cpp:139] Memory required for data: 775600
I0428 19:44:54.870503 25699 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:54.870513 25699 net.cpp:86] Creating Layer pool0
I0428 19:44:54.870519 25699 net.cpp:408] pool0 <- conv0
I0428 19:44:54.870528 25699 net.cpp:382] pool0 -> pool0
I0428 19:44:54.870571 25699 net.cpp:124] Setting up pool0
I0428 19:44:54.870580 25699 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:54.870585 25699 net.cpp:139] Memory required for data: 890800
I0428 19:44:54.870591 25699 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:54.870604 25699 net.cpp:86] Creating Layer conv1
I0428 19:44:54.870610 25699 net.cpp:408] conv1 <- pool0
I0428 19:44:54.870620 25699 net.cpp:382] conv1 -> conv1
I0428 19:44:54.872252 25699 net.cpp:124] Setting up conv1
I0428 19:44:54.872269 25699 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:54.872277 25699 net.cpp:139] Memory required for data: 2170800
I0428 19:44:54.872290 25699 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:54.872301 25699 net.cpp:86] Creating Layer pool1
I0428 19:44:54.872308 25699 net.cpp:408] pool1 <- conv1
I0428 19:44:54.872318 25699 net.cpp:382] pool1 -> pool1
I0428 19:44:54.872369 25699 net.cpp:124] Setting up pool1
I0428 19:44:54.872378 25699 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:54.872383 25699 net.cpp:139] Memory required for data: 2490800
I0428 19:44:54.872390 25699 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:54.872400 25699 net.cpp:86] Creating Layer ip1
I0428 19:44:54.872406 25699 net.cpp:408] ip1 <- pool1
I0428 19:44:54.872416 25699 net.cpp:382] ip1 -> ip1
I0428 19:44:54.872790 25699 net.cpp:124] Setting up ip1
I0428 19:44:54.872800 25699 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:54.872824 25699 net.cpp:139] Memory required for data: 2510800
I0428 19:44:54.872856 25699 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:54.872866 25699 net.cpp:86] Creating Layer relu1
I0428 19:44:54.872872 25699 net.cpp:408] relu1 <- ip1
I0428 19:44:54.872880 25699 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:54.873111 25699 net.cpp:124] Setting up relu1
I0428 19:44:54.873122 25699 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:54.873127 25699 net.cpp:139] Memory required for data: 2530800
I0428 19:44:54.873133 25699 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:54.873145 25699 net.cpp:86] Creating Layer ip2
I0428 19:44:54.873152 25699 net.cpp:408] ip2 <- ip1
I0428 19:44:54.873175 25699 net.cpp:382] ip2 -> ip2
I0428 19:44:54.873340 25699 net.cpp:124] Setting up ip2
I0428 19:44:54.873352 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.873358 25699 net.cpp:139] Memory required for data: 2534800
I0428 19:44:54.873368 25699 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:54.873375 25699 net.cpp:86] Creating Layer relu2
I0428 19:44:54.873381 25699 net.cpp:408] relu2 <- ip2
I0428 19:44:54.873389 25699 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:54.873577 25699 net.cpp:124] Setting up relu2
I0428 19:44:54.873589 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.873594 25699 net.cpp:139] Memory required for data: 2538800
I0428 19:44:54.873598 25699 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:54.873607 25699 net.cpp:86] Creating Layer ip3
I0428 19:44:54.873613 25699 net.cpp:408] ip3 <- ip2
I0428 19:44:54.873621 25699 net.cpp:382] ip3 -> ip3
I0428 19:44:54.873724 25699 net.cpp:124] Setting up ip3
I0428 19:44:54.873734 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.873740 25699 net.cpp:139] Memory required for data: 2542800
I0428 19:44:54.873754 25699 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:54.873762 25699 net.cpp:86] Creating Layer relu3
I0428 19:44:54.873769 25699 net.cpp:408] relu3 <- ip3
I0428 19:44:54.873776 25699 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:54.874639 25699 net.cpp:124] Setting up relu3
I0428 19:44:54.874652 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.874658 25699 net.cpp:139] Memory required for data: 2546800
I0428 19:44:54.874663 25699 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:54.874671 25699 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:54.874677 25699 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:54.874686 25699 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:54.874697 25699 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:54.874768 25699 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:54.874775 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.874783 25699 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:54.874788 25699 net.cpp:139] Memory required for data: 2554800
I0428 19:44:54.874792 25699 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:54.874801 25699 net.cpp:86] Creating Layer accuracy
I0428 19:44:54.874806 25699 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:54.874814 25699 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:54.874822 25699 net.cpp:382] accuracy -> accuracy
I0428 19:44:54.874836 25699 net.cpp:124] Setting up accuracy
I0428 19:44:54.874845 25699 net.cpp:131] Top shape: (1)
I0428 19:44:54.874850 25699 net.cpp:139] Memory required for data: 2554804
I0428 19:44:54.874855 25699 layer_factory.hpp:77] Creating layer loss
I0428 19:44:54.874863 25699 net.cpp:86] Creating Layer loss
I0428 19:44:54.874869 25699 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:54.874876 25699 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:54.874883 25699 net.cpp:382] loss -> loss
I0428 19:44:54.874892 25699 layer_factory.hpp:77] Creating layer loss
I0428 19:44:54.875149 25699 net.cpp:124] Setting up loss
I0428 19:44:54.875160 25699 net.cpp:131] Top shape: (1)
I0428 19:44:54.875177 25699 net.cpp:134]     with loss weight 1
I0428 19:44:54.875186 25699 net.cpp:139] Memory required for data: 2554808
I0428 19:44:54.875205 25699 net.cpp:200] loss needs backward computation.
I0428 19:44:54.875212 25699 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:54.875219 25699 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:54.875224 25699 net.cpp:200] relu3 needs backward computation.
I0428 19:44:54.875231 25699 net.cpp:200] ip3 needs backward computation.
I0428 19:44:54.875236 25699 net.cpp:200] relu2 needs backward computation.
I0428 19:44:54.875241 25699 net.cpp:200] ip2 needs backward computation.
I0428 19:44:54.875247 25699 net.cpp:200] relu1 needs backward computation.
I0428 19:44:54.875252 25699 net.cpp:200] ip1 needs backward computation.
I0428 19:44:54.875258 25699 net.cpp:200] pool1 needs backward computation.
I0428 19:44:54.875263 25699 net.cpp:200] conv1 needs backward computation.
I0428 19:44:54.875269 25699 net.cpp:200] pool0 needs backward computation.
I0428 19:44:54.875274 25699 net.cpp:200] conv0 needs backward computation.
I0428 19:44:54.875282 25699 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:54.875288 25699 net.cpp:202] mnist does not need backward computation.
I0428 19:44:54.875293 25699 net.cpp:244] This network produces output accuracy
I0428 19:44:54.875299 25699 net.cpp:244] This network produces output loss
I0428 19:44:54.875316 25699 net.cpp:257] Network initialization done.
I0428 19:44:54.875365 25699 solver.cpp:56] Solver scaffolding done.
I0428 19:44:54.875809 25699 caffe.cpp:248] Starting Optimization
I0428 19:44:54.875816 25699 solver.cpp:273] Solving LeNet
I0428 19:44:54.875821 25699 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:54.876739 25699 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:54.880247 25699 blocking_queue.cpp:49] Waiting for data
I0428 19:44:54.951221 25706 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:54.951692 25699 solver.cpp:398]     Test net output #0: accuracy = 0.1162
I0428 19:44:54.951719 25699 solver.cpp:398]     Test net output #1: loss = 2.30308 (* 1 = 2.30308 loss)
I0428 19:44:54.954491 25699 solver.cpp:219] Iteration 0 (-4.63937e-31 iter/s, 0.078636s/100 iters), loss = 2.3041
I0428 19:44:54.954520 25699 solver.cpp:238]     Train net output #0: loss = 2.3041 (* 1 = 2.3041 loss)
I0428 19:44:54.954552 25699 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:55.067471 25699 solver.cpp:219] Iteration 100 (885.442 iter/s, 0.112938s/100 iters), loss = 1.18853
I0428 19:44:55.067517 25699 solver.cpp:238]     Train net output #0: loss = 1.18853 (* 1 = 1.18853 loss)
I0428 19:44:55.067533 25699 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:55.177386 25699 solver.cpp:219] Iteration 200 (910.209 iter/s, 0.109865s/100 iters), loss = 1.22974
I0428 19:44:55.177420 25699 solver.cpp:238]     Train net output #0: loss = 1.22974 (* 1 = 1.22974 loss)
I0428 19:44:55.177433 25699 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:55.285622 25699 solver.cpp:219] Iteration 300 (924.303 iter/s, 0.10819s/100 iters), loss = 0.956959
I0428 19:44:55.285650 25699 solver.cpp:238]     Train net output #0: loss = 0.956959 (* 1 = 0.956959 loss)
I0428 19:44:55.285676 25699 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:55.394372 25699 solver.cpp:219] Iteration 400 (919.878 iter/s, 0.10871s/100 iters), loss = 0.822783
I0428 19:44:55.394400 25699 solver.cpp:238]     Train net output #0: loss = 0.822783 (* 1 = 0.822783 loss)
I0428 19:44:55.394424 25699 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:55.494572 25699 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:55.570854 25706 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:55.571326 25699 solver.cpp:398]     Test net output #0: accuracy = 0.6788
I0428 19:44:55.571346 25699 solver.cpp:398]     Test net output #1: loss = 0.809875 (* 1 = 0.809875 loss)
I0428 19:44:55.572441 25699 solver.cpp:219] Iteration 500 (561.708 iter/s, 0.178029s/100 iters), loss = 0.826828
I0428 19:44:55.572497 25699 solver.cpp:238]     Train net output #0: loss = 0.826828 (* 1 = 0.826828 loss)
I0428 19:44:55.572516 25699 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:55.682452 25699 solver.cpp:219] Iteration 600 (909.539 iter/s, 0.109946s/100 iters), loss = 0.757466
I0428 19:44:55.682485 25699 solver.cpp:238]     Train net output #0: loss = 0.757466 (* 1 = 0.757466 loss)
I0428 19:44:55.682497 25699 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:55.789788 25699 solver.cpp:219] Iteration 700 (932.039 iter/s, 0.107292s/100 iters), loss = 0.77006
I0428 19:44:55.789815 25699 solver.cpp:238]     Train net output #0: loss = 0.77006 (* 1 = 0.77006 loss)
I0428 19:44:55.789825 25699 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:55.903334 25699 solver.cpp:219] Iteration 800 (881.056 iter/s, 0.1135s/100 iters), loss = 1.05127
I0428 19:44:55.903383 25699 solver.cpp:238]     Train net output #0: loss = 1.05127 (* 1 = 1.05127 loss)
I0428 19:44:55.903414 25699 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:56.017426 25699 solver.cpp:219] Iteration 900 (876.958 iter/s, 0.114031s/100 iters), loss = 0.978599
I0428 19:44:56.017459 25699 solver.cpp:238]     Train net output #0: loss = 0.978599 (* 1 = 0.978599 loss)
I0428 19:44:56.017467 25699 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:56.052784 25705 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:56.122581 25699 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:56.124243 25699 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:56.125349 25699 solver.cpp:311] Iteration 1000, loss = 0.802031
I0428 19:44:56.125386 25699 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:56.195264 25706 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:56.195853 25699 solver.cpp:398]     Test net output #0: accuracy = 0.6913
I0428 19:44:56.195885 25699 solver.cpp:398]     Test net output #1: loss = 0.751251 (* 1 = 0.751251 loss)
I0428 19:44:56.195896 25699 solver.cpp:316] Optimization Done.
I0428 19:44:56.195901 25699 caffe.cpp:259] Optimization Done.
