I0428 20:28:07.716753  3296 caffe.cpp:218] Using GPUs 0
I0428 20:28:07.753531  3296 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:08.265801  3296 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1500.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:08.265944  3296 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1500.prototxt
I0428 20:28:08.266350  3296 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:08.266367  3296 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:08.266465  3296 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:08.266538  3296 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:08.266644  3296 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:08.266667  3296 net.cpp:86] Creating Layer mnist
I0428 20:28:08.266674  3296 net.cpp:382] mnist -> data
I0428 20:28:08.266696  3296 net.cpp:382] mnist -> label
I0428 20:28:08.267809  3296 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:08.270336  3296 net.cpp:124] Setting up mnist
I0428 20:28:08.270355  3296 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:08.270362  3296 net.cpp:131] Top shape: 64 (64)
I0428 20:28:08.270366  3296 net.cpp:139] Memory required for data: 200960
I0428 20:28:08.270373  3296 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:08.270390  3296 net.cpp:86] Creating Layer conv0
I0428 20:28:08.270412  3296 net.cpp:408] conv0 <- data
I0428 20:28:08.270426  3296 net.cpp:382] conv0 -> conv0
I0428 20:28:08.552708  3296 net.cpp:124] Setting up conv0
I0428 20:28:08.552736  3296 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:08.552741  3296 net.cpp:139] Memory required for data: 14946560
I0428 20:28:08.552754  3296 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:08.552767  3296 net.cpp:86] Creating Layer pool0
I0428 20:28:08.552770  3296 net.cpp:408] pool0 <- conv0
I0428 20:28:08.552775  3296 net.cpp:382] pool0 -> pool0
I0428 20:28:08.552860  3296 net.cpp:124] Setting up pool0
I0428 20:28:08.552870  3296 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:08.552875  3296 net.cpp:139] Memory required for data: 18632960
I0428 20:28:08.552894  3296 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:08.552927  3296 net.cpp:86] Creating Layer conv1
I0428 20:28:08.552933  3296 net.cpp:408] conv1 <- pool0
I0428 20:28:08.552938  3296 net.cpp:382] conv1 -> conv1
I0428 20:28:08.555687  3296 net.cpp:124] Setting up conv1
I0428 20:28:08.555702  3296 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:08.555706  3296 net.cpp:139] Memory required for data: 18714880
I0428 20:28:08.555714  3296 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:08.555721  3296 net.cpp:86] Creating Layer pool1
I0428 20:28:08.555724  3296 net.cpp:408] pool1 <- conv1
I0428 20:28:08.555729  3296 net.cpp:382] pool1 -> pool1
I0428 20:28:08.555765  3296 net.cpp:124] Setting up pool1
I0428 20:28:08.555770  3296 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:08.555773  3296 net.cpp:139] Memory required for data: 18735360
I0428 20:28:08.555776  3296 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:08.555783  3296 net.cpp:86] Creating Layer ip1
I0428 20:28:08.555785  3296 net.cpp:408] ip1 <- pool1
I0428 20:28:08.555790  3296 net.cpp:382] ip1 -> ip1
I0428 20:28:08.555891  3296 net.cpp:124] Setting up ip1
I0428 20:28:08.555901  3296 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:08.555903  3296 net.cpp:139] Memory required for data: 18737920
I0428 20:28:08.555909  3296 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:08.555915  3296 net.cpp:86] Creating Layer relu1
I0428 20:28:08.555918  3296 net.cpp:408] relu1 <- ip1
I0428 20:28:08.555922  3296 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:08.556089  3296 net.cpp:124] Setting up relu1
I0428 20:28:08.556098  3296 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:08.556102  3296 net.cpp:139] Memory required for data: 18740480
I0428 20:28:08.556104  3296 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:08.556110  3296 net.cpp:86] Creating Layer ip2
I0428 20:28:08.556113  3296 net.cpp:408] ip2 <- ip1
I0428 20:28:08.556120  3296 net.cpp:382] ip2 -> ip2
I0428 20:28:08.556221  3296 net.cpp:124] Setting up ip2
I0428 20:28:08.556227  3296 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:28:08.556231  3296 net.cpp:139] Memory required for data: 18753280
I0428 20:28:08.556234  3296 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:08.556241  3296 net.cpp:86] Creating Layer relu2
I0428 20:28:08.556243  3296 net.cpp:408] relu2 <- ip2
I0428 20:28:08.556248  3296 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:08.557078  3296 net.cpp:124] Setting up relu2
I0428 20:28:08.557092  3296 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:28:08.557111  3296 net.cpp:139] Memory required for data: 18766080
I0428 20:28:08.557114  3296 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:08.557124  3296 net.cpp:86] Creating Layer ip3
I0428 20:28:08.557127  3296 net.cpp:408] ip3 <- ip2
I0428 20:28:08.557133  3296 net.cpp:382] ip3 -> ip3
I0428 20:28:08.557250  3296 net.cpp:124] Setting up ip3
I0428 20:28:08.557258  3296 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:08.557260  3296 net.cpp:139] Memory required for data: 18768640
I0428 20:28:08.557268  3296 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:08.557274  3296 net.cpp:86] Creating Layer relu3
I0428 20:28:08.557277  3296 net.cpp:408] relu3 <- ip3
I0428 20:28:08.557281  3296 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:08.557448  3296 net.cpp:124] Setting up relu3
I0428 20:28:08.557457  3296 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:08.557459  3296 net.cpp:139] Memory required for data: 18771200
I0428 20:28:08.557462  3296 layer_factory.hpp:77] Creating layer loss
I0428 20:28:08.557469  3296 net.cpp:86] Creating Layer loss
I0428 20:28:08.557472  3296 net.cpp:408] loss <- ip3
I0428 20:28:08.557476  3296 net.cpp:408] loss <- label
I0428 20:28:08.557482  3296 net.cpp:382] loss -> loss
I0428 20:28:08.557493  3296 layer_factory.hpp:77] Creating layer loss
I0428 20:28:08.557730  3296 net.cpp:124] Setting up loss
I0428 20:28:08.557742  3296 net.cpp:131] Top shape: (1)
I0428 20:28:08.557745  3296 net.cpp:134]     with loss weight 1
I0428 20:28:08.557759  3296 net.cpp:139] Memory required for data: 18771204
I0428 20:28:08.557762  3296 net.cpp:200] loss needs backward computation.
I0428 20:28:08.557768  3296 net.cpp:200] relu3 needs backward computation.
I0428 20:28:08.557772  3296 net.cpp:200] ip3 needs backward computation.
I0428 20:28:08.557775  3296 net.cpp:200] relu2 needs backward computation.
I0428 20:28:08.557777  3296 net.cpp:200] ip2 needs backward computation.
I0428 20:28:08.557780  3296 net.cpp:200] relu1 needs backward computation.
I0428 20:28:08.557782  3296 net.cpp:200] ip1 needs backward computation.
I0428 20:28:08.557786  3296 net.cpp:200] pool1 needs backward computation.
I0428 20:28:08.557790  3296 net.cpp:200] conv1 needs backward computation.
I0428 20:28:08.557791  3296 net.cpp:200] pool0 needs backward computation.
I0428 20:28:08.557795  3296 net.cpp:200] conv0 needs backward computation.
I0428 20:28:08.557797  3296 net.cpp:202] mnist does not need backward computation.
I0428 20:28:08.557799  3296 net.cpp:244] This network produces output loss
I0428 20:28:08.557808  3296 net.cpp:257] Network initialization done.
I0428 20:28:08.558116  3296 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1500.prototxt
I0428 20:28:08.558156  3296 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:08.558256  3296 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:08.558338  3296 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:08.558382  3296 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:08.558394  3296 net.cpp:86] Creating Layer mnist
I0428 20:28:08.558399  3296 net.cpp:382] mnist -> data
I0428 20:28:08.558406  3296 net.cpp:382] mnist -> label
I0428 20:28:08.558490  3296 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:08.560444  3296 net.cpp:124] Setting up mnist
I0428 20:28:08.560458  3296 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:08.560462  3296 net.cpp:131] Top shape: 100 (100)
I0428 20:28:08.560466  3296 net.cpp:139] Memory required for data: 314000
I0428 20:28:08.560468  3296 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:08.560474  3296 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:08.560478  3296 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:08.560513  3296 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:08.560519  3296 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:08.560569  3296 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:08.560575  3296 net.cpp:131] Top shape: 100 (100)
I0428 20:28:08.560578  3296 net.cpp:131] Top shape: 100 (100)
I0428 20:28:08.560581  3296 net.cpp:139] Memory required for data: 314800
I0428 20:28:08.560585  3296 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:08.560597  3296 net.cpp:86] Creating Layer conv0
I0428 20:28:08.560600  3296 net.cpp:408] conv0 <- data
I0428 20:28:08.560606  3296 net.cpp:382] conv0 -> conv0
I0428 20:28:08.562335  3296 net.cpp:124] Setting up conv0
I0428 20:28:08.562350  3296 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:08.562353  3296 net.cpp:139] Memory required for data: 23354800
I0428 20:28:08.562362  3296 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:08.562368  3296 net.cpp:86] Creating Layer pool0
I0428 20:28:08.562371  3296 net.cpp:408] pool0 <- conv0
I0428 20:28:08.562376  3296 net.cpp:382] pool0 -> pool0
I0428 20:28:08.562412  3296 net.cpp:124] Setting up pool0
I0428 20:28:08.562417  3296 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:08.562420  3296 net.cpp:139] Memory required for data: 29114800
I0428 20:28:08.562422  3296 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:08.562434  3296 net.cpp:86] Creating Layer conv1
I0428 20:28:08.562438  3296 net.cpp:408] conv1 <- pool0
I0428 20:28:08.562443  3296 net.cpp:382] conv1 -> conv1
I0428 20:28:08.564088  3296 net.cpp:124] Setting up conv1
I0428 20:28:08.564101  3296 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:08.564105  3296 net.cpp:139] Memory required for data: 29242800
I0428 20:28:08.564117  3296 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:08.564127  3296 net.cpp:86] Creating Layer pool1
I0428 20:28:08.564131  3296 net.cpp:408] pool1 <- conv1
I0428 20:28:08.564152  3296 net.cpp:382] pool1 -> pool1
I0428 20:28:08.564189  3296 net.cpp:124] Setting up pool1
I0428 20:28:08.564194  3296 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:08.564205  3296 net.cpp:139] Memory required for data: 29274800
I0428 20:28:08.564208  3296 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:08.564213  3296 net.cpp:86] Creating Layer ip1
I0428 20:28:08.564216  3296 net.cpp:408] ip1 <- pool1
I0428 20:28:08.564223  3296 net.cpp:382] ip1 -> ip1
I0428 20:28:08.564353  3296 net.cpp:124] Setting up ip1
I0428 20:28:08.564368  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.564388  3296 net.cpp:139] Memory required for data: 29278800
I0428 20:28:08.564399  3296 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:08.564404  3296 net.cpp:86] Creating Layer relu1
I0428 20:28:08.564407  3296 net.cpp:408] relu1 <- ip1
I0428 20:28:08.564414  3296 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:08.564604  3296 net.cpp:124] Setting up relu1
I0428 20:28:08.564615  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.564617  3296 net.cpp:139] Memory required for data: 29282800
I0428 20:28:08.564620  3296 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:08.564628  3296 net.cpp:86] Creating Layer ip2
I0428 20:28:08.564631  3296 net.cpp:408] ip2 <- ip1
I0428 20:28:08.564636  3296 net.cpp:382] ip2 -> ip2
I0428 20:28:08.564736  3296 net.cpp:124] Setting up ip2
I0428 20:28:08.564743  3296 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:28:08.564746  3296 net.cpp:139] Memory required for data: 29302800
I0428 20:28:08.564751  3296 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:08.564756  3296 net.cpp:86] Creating Layer relu2
I0428 20:28:08.564759  3296 net.cpp:408] relu2 <- ip2
I0428 20:28:08.564764  3296 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:08.564947  3296 net.cpp:124] Setting up relu2
I0428 20:28:08.564955  3296 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:28:08.564960  3296 net.cpp:139] Memory required for data: 29322800
I0428 20:28:08.564962  3296 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:08.564970  3296 net.cpp:86] Creating Layer ip3
I0428 20:28:08.564972  3296 net.cpp:408] ip3 <- ip2
I0428 20:28:08.564978  3296 net.cpp:382] ip3 -> ip3
I0428 20:28:08.565083  3296 net.cpp:124] Setting up ip3
I0428 20:28:08.565090  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.565093  3296 net.cpp:139] Memory required for data: 29326800
I0428 20:28:08.565101  3296 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:08.565106  3296 net.cpp:86] Creating Layer relu3
I0428 20:28:08.565116  3296 net.cpp:408] relu3 <- ip3
I0428 20:28:08.565121  3296 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:08.565997  3296 net.cpp:124] Setting up relu3
I0428 20:28:08.566015  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.566017  3296 net.cpp:139] Memory required for data: 29330800
I0428 20:28:08.566021  3296 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:08.566027  3296 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:08.566031  3296 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:08.566035  3296 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:08.566042  3296 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:08.566125  3296 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:08.566131  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.566135  3296 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:08.566138  3296 net.cpp:139] Memory required for data: 29338800
I0428 20:28:08.566146  3296 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:08.566153  3296 net.cpp:86] Creating Layer accuracy
I0428 20:28:08.566155  3296 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:08.566159  3296 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:08.566164  3296 net.cpp:382] accuracy -> accuracy
I0428 20:28:08.566176  3296 net.cpp:124] Setting up accuracy
I0428 20:28:08.566185  3296 net.cpp:131] Top shape: (1)
I0428 20:28:08.566189  3296 net.cpp:139] Memory required for data: 29338804
I0428 20:28:08.566191  3296 layer_factory.hpp:77] Creating layer loss
I0428 20:28:08.566195  3296 net.cpp:86] Creating Layer loss
I0428 20:28:08.566198  3296 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:08.566201  3296 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:08.566206  3296 net.cpp:382] loss -> loss
I0428 20:28:08.566212  3296 layer_factory.hpp:77] Creating layer loss
I0428 20:28:08.566464  3296 net.cpp:124] Setting up loss
I0428 20:28:08.566474  3296 net.cpp:131] Top shape: (1)
I0428 20:28:08.566478  3296 net.cpp:134]     with loss weight 1
I0428 20:28:08.566498  3296 net.cpp:139] Memory required for data: 29338808
I0428 20:28:08.566509  3296 net.cpp:200] loss needs backward computation.
I0428 20:28:08.566512  3296 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:08.566516  3296 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:08.566524  3296 net.cpp:200] relu3 needs backward computation.
I0428 20:28:08.566526  3296 net.cpp:200] ip3 needs backward computation.
I0428 20:28:08.566529  3296 net.cpp:200] relu2 needs backward computation.
I0428 20:28:08.566532  3296 net.cpp:200] ip2 needs backward computation.
I0428 20:28:08.566534  3296 net.cpp:200] relu1 needs backward computation.
I0428 20:28:08.566537  3296 net.cpp:200] ip1 needs backward computation.
I0428 20:28:08.566540  3296 net.cpp:200] pool1 needs backward computation.
I0428 20:28:08.566543  3296 net.cpp:200] conv1 needs backward computation.
I0428 20:28:08.566546  3296 net.cpp:200] pool0 needs backward computation.
I0428 20:28:08.566555  3296 net.cpp:200] conv0 needs backward computation.
I0428 20:28:08.566558  3296 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:08.566561  3296 net.cpp:202] mnist does not need backward computation.
I0428 20:28:08.566565  3296 net.cpp:244] This network produces output accuracy
I0428 20:28:08.566572  3296 net.cpp:244] This network produces output loss
I0428 20:28:08.566584  3296 net.cpp:257] Network initialization done.
I0428 20:28:08.566624  3296 solver.cpp:56] Solver scaffolding done.
I0428 20:28:08.566951  3296 caffe.cpp:248] Starting Optimization
I0428 20:28:08.566956  3296 solver.cpp:273] Solving LeNet
I0428 20:28:08.566959  3296 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:08.567797  3296 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:08.663511  3305 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:08.666111  3296 solver.cpp:398]     Test net output #0: accuracy = 0.0654
I0428 20:28:08.666132  3296 solver.cpp:398]     Test net output #1: loss = 2.31131 (* 1 = 2.31131 loss)
I0428 20:28:08.670511  3296 solver.cpp:219] Iteration 0 (-7.9874e-43 iter/s, 0.103522s/100 iters), loss = 2.31152
I0428 20:28:08.670536  3296 solver.cpp:238]     Train net output #0: loss = 2.31152 (* 1 = 2.31152 loss)
I0428 20:28:08.670563  3296 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:08.874328  3296 solver.cpp:219] Iteration 100 (490.738 iter/s, 0.203775s/100 iters), loss = 0.878563
I0428 20:28:08.874357  3296 solver.cpp:238]     Train net output #0: loss = 0.878563 (* 1 = 0.878563 loss)
I0428 20:28:08.874364  3296 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:09.079555  3296 solver.cpp:219] Iteration 200 (487.372 iter/s, 0.205182s/100 iters), loss = 1.00304
I0428 20:28:09.079589  3296 solver.cpp:238]     Train net output #0: loss = 1.00304 (* 1 = 1.00304 loss)
I0428 20:28:09.079597  3296 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:09.290910  3296 solver.cpp:219] Iteration 300 (473.258 iter/s, 0.211301s/100 iters), loss = 0.848985
I0428 20:28:09.290958  3296 solver.cpp:238]     Train net output #0: loss = 0.848985 (* 1 = 0.848985 loss)
I0428 20:28:09.290971  3296 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:09.502998  3296 solver.cpp:219] Iteration 400 (471.644 iter/s, 0.212024s/100 iters), loss = 0.827285
I0428 20:28:09.503043  3296 solver.cpp:238]     Train net output #0: loss = 0.827285 (* 1 = 0.827285 loss)
I0428 20:28:09.503053  3296 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:09.715631  3296 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:09.820960  3305 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:09.823693  3296 solver.cpp:398]     Test net output #0: accuracy = 0.8345
I0428 20:28:09.823724  3296 solver.cpp:398]     Test net output #1: loss = 0.471271 (* 1 = 0.471271 loss)
I0428 20:28:09.825677  3296 solver.cpp:219] Iteration 500 (309.967 iter/s, 0.322615s/100 iters), loss = 0.417659
I0428 20:28:09.825707  3296 solver.cpp:238]     Train net output #0: loss = 0.417659 (* 1 = 0.417659 loss)
I0428 20:28:09.825736  3296 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:10.042870  3296 solver.cpp:219] Iteration 600 (460.534 iter/s, 0.217139s/100 iters), loss = 0.443106
I0428 20:28:10.042927  3296 solver.cpp:238]     Train net output #0: loss = 0.443106 (* 1 = 0.443106 loss)
I0428 20:28:10.042939  3296 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:10.263514  3296 solver.cpp:219] Iteration 700 (453.367 iter/s, 0.220572s/100 iters), loss = 0.359544
I0428 20:28:10.263561  3296 solver.cpp:238]     Train net output #0: loss = 0.359544 (* 1 = 0.359544 loss)
I0428 20:28:10.263571  3296 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:10.477133  3296 solver.cpp:219] Iteration 800 (468.265 iter/s, 0.213554s/100 iters), loss = 0.589147
I0428 20:28:10.477169  3296 solver.cpp:238]     Train net output #0: loss = 0.589147 (* 1 = 0.589147 loss)
I0428 20:28:10.477180  3296 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:10.686141  3296 solver.cpp:219] Iteration 900 (478.58 iter/s, 0.208951s/100 iters), loss = 0.258917
I0428 20:28:10.686182  3296 solver.cpp:238]     Train net output #0: loss = 0.258917 (* 1 = 0.258917 loss)
I0428 20:28:10.686190  3296 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:10.756831  3302 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:10.895061  3296 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:10.896931  3296 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:10.898033  3296 solver.cpp:311] Iteration 1000, loss = 0.334401
I0428 20:28:10.898056  3296 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:10.910500  3296 blocking_queue.cpp:49] Waiting for data
I0428 20:28:10.998009  3305 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:10.999649  3296 solver.cpp:398]     Test net output #0: accuracy = 0.874
I0428 20:28:10.999675  3296 solver.cpp:398]     Test net output #1: loss = 0.325234 (* 1 = 0.325234 loss)
I0428 20:28:10.999681  3296 solver.cpp:316] Optimization Done.
I0428 20:28:10.999685  3296 caffe.cpp:259] Optimization Done.
