I0428 20:38:04.914151  5075 caffe.cpp:218] Using GPUs 0
I0428 20:38:04.943464  5075 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:38:05.391113  5075 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1660.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:38:05.391263  5075 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1660.prototxt
I0428 20:38:05.391615  5075 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:38:05.391645  5075 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:38:05.391726  5075 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:38:05.391789  5075 layer_factory.hpp:77] Creating layer mnist
I0428 20:38:05.391868  5075 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:38:05.391887  5075 net.cpp:86] Creating Layer mnist
I0428 20:38:05.391896  5075 net.cpp:382] mnist -> data
I0428 20:38:05.391914  5075 net.cpp:382] mnist -> label
I0428 20:38:05.392909  5075 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:38:05.395148  5075 net.cpp:124] Setting up mnist
I0428 20:38:05.395179  5075 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:38:05.395184  5075 net.cpp:131] Top shape: 64 (64)
I0428 20:38:05.395186  5075 net.cpp:139] Memory required for data: 200960
I0428 20:38:05.395192  5075 layer_factory.hpp:77] Creating layer conv0
I0428 20:38:05.395207  5075 net.cpp:86] Creating Layer conv0
I0428 20:38:05.395225  5075 net.cpp:408] conv0 <- data
I0428 20:38:05.395236  5075 net.cpp:382] conv0 -> conv0
I0428 20:38:05.624442  5075 net.cpp:124] Setting up conv0
I0428 20:38:05.624469  5075 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:38:05.624472  5075 net.cpp:139] Memory required for data: 14946560
I0428 20:38:05.624488  5075 layer_factory.hpp:77] Creating layer pool0
I0428 20:38:05.624516  5075 net.cpp:86] Creating Layer pool0
I0428 20:38:05.624521  5075 net.cpp:408] pool0 <- conv0
I0428 20:38:05.624526  5075 net.cpp:382] pool0 -> pool0
I0428 20:38:05.624572  5075 net.cpp:124] Setting up pool0
I0428 20:38:05.624579  5075 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:38:05.624583  5075 net.cpp:139] Memory required for data: 18632960
I0428 20:38:05.624585  5075 layer_factory.hpp:77] Creating layer conv1
I0428 20:38:05.624595  5075 net.cpp:86] Creating Layer conv1
I0428 20:38:05.624598  5075 net.cpp:408] conv1 <- pool0
I0428 20:38:05.624603  5075 net.cpp:382] conv1 -> conv1
I0428 20:38:05.628641  5075 net.cpp:124] Setting up conv1
I0428 20:38:05.628655  5075 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:38:05.628659  5075 net.cpp:139] Memory required for data: 20271360
I0428 20:38:05.628666  5075 layer_factory.hpp:77] Creating layer pool1
I0428 20:38:05.628674  5075 net.cpp:86] Creating Layer pool1
I0428 20:38:05.628676  5075 net.cpp:408] pool1 <- conv1
I0428 20:38:05.628681  5075 net.cpp:382] pool1 -> pool1
I0428 20:38:05.628729  5075 net.cpp:124] Setting up pool1
I0428 20:38:05.628734  5075 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:38:05.628737  5075 net.cpp:139] Memory required for data: 20680960
I0428 20:38:05.628739  5075 layer_factory.hpp:77] Creating layer ip1
I0428 20:38:05.628746  5075 net.cpp:86] Creating Layer ip1
I0428 20:38:05.628749  5075 net.cpp:408] ip1 <- pool1
I0428 20:38:05.628753  5075 net.cpp:382] ip1 -> ip1
I0428 20:38:05.629122  5075 net.cpp:124] Setting up ip1
I0428 20:38:05.629132  5075 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:05.629149  5075 net.cpp:139] Memory required for data: 20687360
I0428 20:38:05.629158  5075 layer_factory.hpp:77] Creating layer relu1
I0428 20:38:05.629178  5075 net.cpp:86] Creating Layer relu1
I0428 20:38:05.629181  5075 net.cpp:408] relu1 <- ip1
I0428 20:38:05.629185  5075 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:38:05.629336  5075 net.cpp:124] Setting up relu1
I0428 20:38:05.629344  5075 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:05.629348  5075 net.cpp:139] Memory required for data: 20693760
I0428 20:38:05.629350  5075 layer_factory.hpp:77] Creating layer ip2
I0428 20:38:05.629356  5075 net.cpp:86] Creating Layer ip2
I0428 20:38:05.629359  5075 net.cpp:408] ip2 <- ip1
I0428 20:38:05.629364  5075 net.cpp:382] ip2 -> ip2
I0428 20:38:05.629464  5075 net.cpp:124] Setting up ip2
I0428 20:38:05.629470  5075 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:05.629473  5075 net.cpp:139] Memory required for data: 20696320
I0428 20:38:05.629478  5075 layer_factory.hpp:77] Creating layer relu2
I0428 20:38:05.629484  5075 net.cpp:86] Creating Layer relu2
I0428 20:38:05.629487  5075 net.cpp:408] relu2 <- ip2
I0428 20:38:05.629490  5075 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:38:05.630276  5075 net.cpp:124] Setting up relu2
I0428 20:38:05.630288  5075 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:05.630307  5075 net.cpp:139] Memory required for data: 20698880
I0428 20:38:05.630311  5075 layer_factory.hpp:77] Creating layer ip3
I0428 20:38:05.630317  5075 net.cpp:86] Creating Layer ip3
I0428 20:38:05.630322  5075 net.cpp:408] ip3 <- ip2
I0428 20:38:05.630327  5075 net.cpp:382] ip3 -> ip3
I0428 20:38:05.630419  5075 net.cpp:124] Setting up ip3
I0428 20:38:05.630427  5075 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:05.630430  5075 net.cpp:139] Memory required for data: 20701440
I0428 20:38:05.630439  5075 layer_factory.hpp:77] Creating layer relu3
I0428 20:38:05.630444  5075 net.cpp:86] Creating Layer relu3
I0428 20:38:05.630446  5075 net.cpp:408] relu3 <- ip3
I0428 20:38:05.630463  5075 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:38:05.630627  5075 net.cpp:124] Setting up relu3
I0428 20:38:05.630636  5075 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:05.630640  5075 net.cpp:139] Memory required for data: 20704000
I0428 20:38:05.630641  5075 layer_factory.hpp:77] Creating layer loss
I0428 20:38:05.630647  5075 net.cpp:86] Creating Layer loss
I0428 20:38:05.630650  5075 net.cpp:408] loss <- ip3
I0428 20:38:05.630653  5075 net.cpp:408] loss <- label
I0428 20:38:05.630658  5075 net.cpp:382] loss -> loss
I0428 20:38:05.630672  5075 layer_factory.hpp:77] Creating layer loss
I0428 20:38:05.630928  5075 net.cpp:124] Setting up loss
I0428 20:38:05.630937  5075 net.cpp:131] Top shape: (1)
I0428 20:38:05.630940  5075 net.cpp:134]     with loss weight 1
I0428 20:38:05.630954  5075 net.cpp:139] Memory required for data: 20704004
I0428 20:38:05.630956  5075 net.cpp:200] loss needs backward computation.
I0428 20:38:05.630960  5075 net.cpp:200] relu3 needs backward computation.
I0428 20:38:05.630962  5075 net.cpp:200] ip3 needs backward computation.
I0428 20:38:05.630965  5075 net.cpp:200] relu2 needs backward computation.
I0428 20:38:05.630969  5075 net.cpp:200] ip2 needs backward computation.
I0428 20:38:05.630970  5075 net.cpp:200] relu1 needs backward computation.
I0428 20:38:05.630973  5075 net.cpp:200] ip1 needs backward computation.
I0428 20:38:05.630976  5075 net.cpp:200] pool1 needs backward computation.
I0428 20:38:05.630978  5075 net.cpp:200] conv1 needs backward computation.
I0428 20:38:05.630981  5075 net.cpp:200] pool0 needs backward computation.
I0428 20:38:05.630985  5075 net.cpp:200] conv0 needs backward computation.
I0428 20:38:05.630987  5075 net.cpp:202] mnist does not need backward computation.
I0428 20:38:05.630990  5075 net.cpp:244] This network produces output loss
I0428 20:38:05.631000  5075 net.cpp:257] Network initialization done.
I0428 20:38:05.631381  5075 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1660.prototxt
I0428 20:38:05.631423  5075 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:38:05.631536  5075 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:38:05.631633  5075 layer_factory.hpp:77] Creating layer mnist
I0428 20:38:05.631675  5075 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:38:05.631690  5075 net.cpp:86] Creating Layer mnist
I0428 20:38:05.631695  5075 net.cpp:382] mnist -> data
I0428 20:38:05.631701  5075 net.cpp:382] mnist -> label
I0428 20:38:05.631783  5075 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:38:05.633834  5075 net.cpp:124] Setting up mnist
I0428 20:38:05.633862  5075 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:38:05.633867  5075 net.cpp:131] Top shape: 100 (100)
I0428 20:38:05.633870  5075 net.cpp:139] Memory required for data: 314000
I0428 20:38:05.633873  5075 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:38:05.633882  5075 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:38:05.633884  5075 net.cpp:408] label_mnist_1_split <- label
I0428 20:38:05.633889  5075 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:38:05.633895  5075 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:38:05.633991  5075 net.cpp:124] Setting up label_mnist_1_split
I0428 20:38:05.633998  5075 net.cpp:131] Top shape: 100 (100)
I0428 20:38:05.634001  5075 net.cpp:131] Top shape: 100 (100)
I0428 20:38:05.634004  5075 net.cpp:139] Memory required for data: 314800
I0428 20:38:05.634007  5075 layer_factory.hpp:77] Creating layer conv0
I0428 20:38:05.634017  5075 net.cpp:86] Creating Layer conv0
I0428 20:38:05.634021  5075 net.cpp:408] conv0 <- data
I0428 20:38:05.634026  5075 net.cpp:382] conv0 -> conv0
I0428 20:38:05.635720  5075 net.cpp:124] Setting up conv0
I0428 20:38:05.635733  5075 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:38:05.635753  5075 net.cpp:139] Memory required for data: 23354800
I0428 20:38:05.635763  5075 layer_factory.hpp:77] Creating layer pool0
I0428 20:38:05.635769  5075 net.cpp:86] Creating Layer pool0
I0428 20:38:05.635772  5075 net.cpp:408] pool0 <- conv0
I0428 20:38:05.635777  5075 net.cpp:382] pool0 -> pool0
I0428 20:38:05.635828  5075 net.cpp:124] Setting up pool0
I0428 20:38:05.635834  5075 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:38:05.635838  5075 net.cpp:139] Memory required for data: 29114800
I0428 20:38:05.635839  5075 layer_factory.hpp:77] Creating layer conv1
I0428 20:38:05.635859  5075 net.cpp:86] Creating Layer conv1
I0428 20:38:05.635864  5075 net.cpp:408] conv1 <- pool0
I0428 20:38:05.635869  5075 net.cpp:382] conv1 -> conv1
I0428 20:38:05.638977  5075 net.cpp:124] Setting up conv1
I0428 20:38:05.638989  5075 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:38:05.639008  5075 net.cpp:139] Memory required for data: 31674800
I0428 20:38:05.639017  5075 layer_factory.hpp:77] Creating layer pool1
I0428 20:38:05.639024  5075 net.cpp:86] Creating Layer pool1
I0428 20:38:05.639029  5075 net.cpp:408] pool1 <- conv1
I0428 20:38:05.639032  5075 net.cpp:382] pool1 -> pool1
I0428 20:38:05.639084  5075 net.cpp:124] Setting up pool1
I0428 20:38:05.639091  5075 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:38:05.639104  5075 net.cpp:139] Memory required for data: 32314800
I0428 20:38:05.639107  5075 layer_factory.hpp:77] Creating layer ip1
I0428 20:38:05.639113  5075 net.cpp:86] Creating Layer ip1
I0428 20:38:05.639117  5075 net.cpp:408] ip1 <- pool1
I0428 20:38:05.639122  5075 net.cpp:382] ip1 -> ip1
I0428 20:38:05.639487  5075 net.cpp:124] Setting up ip1
I0428 20:38:05.639503  5075 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:05.639523  5075 net.cpp:139] Memory required for data: 32324800
I0428 20:38:05.639529  5075 layer_factory.hpp:77] Creating layer relu1
I0428 20:38:05.639534  5075 net.cpp:86] Creating Layer relu1
I0428 20:38:05.639539  5075 net.cpp:408] relu1 <- ip1
I0428 20:38:05.639545  5075 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:38:05.639724  5075 net.cpp:124] Setting up relu1
I0428 20:38:05.639731  5075 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:05.639734  5075 net.cpp:139] Memory required for data: 32334800
I0428 20:38:05.639737  5075 layer_factory.hpp:77] Creating layer ip2
I0428 20:38:05.639745  5075 net.cpp:86] Creating Layer ip2
I0428 20:38:05.639749  5075 net.cpp:408] ip2 <- ip1
I0428 20:38:05.639752  5075 net.cpp:382] ip2 -> ip2
I0428 20:38:05.639870  5075 net.cpp:124] Setting up ip2
I0428 20:38:05.639878  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.639881  5075 net.cpp:139] Memory required for data: 32338800
I0428 20:38:05.639886  5075 layer_factory.hpp:77] Creating layer relu2
I0428 20:38:05.639891  5075 net.cpp:86] Creating Layer relu2
I0428 20:38:05.639894  5075 net.cpp:408] relu2 <- ip2
I0428 20:38:05.639899  5075 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:38:05.640146  5075 net.cpp:124] Setting up relu2
I0428 20:38:05.640156  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.640159  5075 net.cpp:139] Memory required for data: 32342800
I0428 20:38:05.640163  5075 layer_factory.hpp:77] Creating layer ip3
I0428 20:38:05.640171  5075 net.cpp:86] Creating Layer ip3
I0428 20:38:05.640174  5075 net.cpp:408] ip3 <- ip2
I0428 20:38:05.640180  5075 net.cpp:382] ip3 -> ip3
I0428 20:38:05.640280  5075 net.cpp:124] Setting up ip3
I0428 20:38:05.640287  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.640291  5075 net.cpp:139] Memory required for data: 32346800
I0428 20:38:05.640300  5075 layer_factory.hpp:77] Creating layer relu3
I0428 20:38:05.640305  5075 net.cpp:86] Creating Layer relu3
I0428 20:38:05.640308  5075 net.cpp:408] relu3 <- ip3
I0428 20:38:05.640312  5075 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:38:05.641172  5075 net.cpp:124] Setting up relu3
I0428 20:38:05.641201  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.641204  5075 net.cpp:139] Memory required for data: 32350800
I0428 20:38:05.641207  5075 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:38:05.641214  5075 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:38:05.641217  5075 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:38:05.641222  5075 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:38:05.641230  5075 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:38:05.641285  5075 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:38:05.641306  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.641319  5075 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:05.641322  5075 net.cpp:139] Memory required for data: 32358800
I0428 20:38:05.641325  5075 layer_factory.hpp:77] Creating layer accuracy
I0428 20:38:05.641333  5075 net.cpp:86] Creating Layer accuracy
I0428 20:38:05.641337  5075 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:38:05.641341  5075 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:38:05.641346  5075 net.cpp:382] accuracy -> accuracy
I0428 20:38:05.641353  5075 net.cpp:124] Setting up accuracy
I0428 20:38:05.641358  5075 net.cpp:131] Top shape: (1)
I0428 20:38:05.641361  5075 net.cpp:139] Memory required for data: 32358804
I0428 20:38:05.641365  5075 layer_factory.hpp:77] Creating layer loss
I0428 20:38:05.641369  5075 net.cpp:86] Creating Layer loss
I0428 20:38:05.641372  5075 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:38:05.641376  5075 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:38:05.641381  5075 net.cpp:382] loss -> loss
I0428 20:38:05.641388  5075 layer_factory.hpp:77] Creating layer loss
I0428 20:38:05.641680  5075 net.cpp:124] Setting up loss
I0428 20:38:05.641690  5075 net.cpp:131] Top shape: (1)
I0428 20:38:05.641692  5075 net.cpp:134]     with loss weight 1
I0428 20:38:05.641708  5075 net.cpp:139] Memory required for data: 32358808
I0428 20:38:05.641711  5075 net.cpp:200] loss needs backward computation.
I0428 20:38:05.641716  5075 net.cpp:202] accuracy does not need backward computation.
I0428 20:38:05.641719  5075 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:38:05.641722  5075 net.cpp:200] relu3 needs backward computation.
I0428 20:38:05.641724  5075 net.cpp:200] ip3 needs backward computation.
I0428 20:38:05.641727  5075 net.cpp:200] relu2 needs backward computation.
I0428 20:38:05.641731  5075 net.cpp:200] ip2 needs backward computation.
I0428 20:38:05.641733  5075 net.cpp:200] relu1 needs backward computation.
I0428 20:38:05.641736  5075 net.cpp:200] ip1 needs backward computation.
I0428 20:38:05.641738  5075 net.cpp:200] pool1 needs backward computation.
I0428 20:38:05.641741  5075 net.cpp:200] conv1 needs backward computation.
I0428 20:38:05.641744  5075 net.cpp:200] pool0 needs backward computation.
I0428 20:38:05.641747  5075 net.cpp:200] conv0 needs backward computation.
I0428 20:38:05.641752  5075 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:38:05.641755  5075 net.cpp:202] mnist does not need backward computation.
I0428 20:38:05.641757  5075 net.cpp:244] This network produces output accuracy
I0428 20:38:05.641760  5075 net.cpp:244] This network produces output loss
I0428 20:38:05.641772  5075 net.cpp:257] Network initialization done.
I0428 20:38:05.641813  5075 solver.cpp:56] Solver scaffolding done.
I0428 20:38:05.642150  5075 caffe.cpp:248] Starting Optimization
I0428 20:38:05.642156  5075 solver.cpp:273] Solving LeNet
I0428 20:38:05.642158  5075 solver.cpp:274] Learning Rate Policy: inv
I0428 20:38:05.643050  5075 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:38:05.768694  5082 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:05.772186  5075 solver.cpp:398]     Test net output #0: accuracy = 0.1573
I0428 20:38:05.772220  5075 solver.cpp:398]     Test net output #1: loss = 2.28652 (* 1 = 2.28652 loss)
I0428 20:38:05.777451  5075 solver.cpp:219] Iteration 0 (0 iter/s, 0.135245s/100 iters), loss = 2.25978
I0428 20:38:05.777477  5075 solver.cpp:238]     Train net output #0: loss = 2.25978 (* 1 = 2.25978 loss)
I0428 20:38:05.777488  5075 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:38:06.048948  5075 solver.cpp:219] Iteration 100 (368.392 iter/s, 0.27145s/100 iters), loss = 0.661837
I0428 20:38:06.048975  5075 solver.cpp:238]     Train net output #0: loss = 0.661837 (* 1 = 0.661837 loss)
I0428 20:38:06.048984  5075 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:38:06.319349  5075 solver.cpp:219] Iteration 200 (369.883 iter/s, 0.270355s/100 iters), loss = 0.821445
I0428 20:38:06.319377  5075 solver.cpp:238]     Train net output #0: loss = 0.821445 (* 1 = 0.821445 loss)
I0428 20:38:06.319401  5075 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:38:06.591447  5075 solver.cpp:219] Iteration 300 (367.576 iter/s, 0.272052s/100 iters), loss = 0.614527
I0428 20:38:06.591478  5075 solver.cpp:238]     Train net output #0: loss = 0.614527 (* 1 = 0.614527 loss)
I0428 20:38:06.591486  5075 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:38:06.865156  5075 solver.cpp:219] Iteration 400 (365.418 iter/s, 0.273659s/100 iters), loss = 0.592435
I0428 20:38:06.865183  5075 solver.cpp:238]     Train net output #0: loss = 0.592435 (* 1 = 0.592435 loss)
I0428 20:38:06.865190  5075 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:38:07.136435  5075 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:38:07.263538  5082 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:07.268151  5075 solver.cpp:398]     Test net output #0: accuracy = 0.7763
I0428 20:38:07.268187  5075 solver.cpp:398]     Test net output #1: loss = 0.576293 (* 1 = 0.576293 loss)
I0428 20:38:07.270843  5075 solver.cpp:219] Iteration 500 (246.526 iter/s, 0.405637s/100 iters), loss = 0.568615
I0428 20:38:07.270882  5075 solver.cpp:238]     Train net output #0: loss = 0.568615 (* 1 = 0.568615 loss)
I0428 20:38:07.270903  5075 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:38:07.549825  5075 solver.cpp:219] Iteration 600 (358.501 iter/s, 0.27894s/100 iters), loss = 0.717347
I0428 20:38:07.549852  5075 solver.cpp:238]     Train net output #0: loss = 0.717347 (* 1 = 0.717347 loss)
I0428 20:38:07.549859  5075 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:38:07.835157  5075 solver.cpp:219] Iteration 700 (350.53 iter/s, 0.285282s/100 iters), loss = 0.368575
I0428 20:38:07.835211  5075 solver.cpp:238]     Train net output #0: loss = 0.368575 (* 1 = 0.368575 loss)
I0428 20:38:07.835219  5075 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:38:08.125350  5075 solver.cpp:219] Iteration 800 (344.684 iter/s, 0.290121s/100 iters), loss = 0.458139
I0428 20:38:08.125396  5075 solver.cpp:238]     Train net output #0: loss = 0.458139 (* 1 = 0.458139 loss)
I0428 20:38:08.125404  5075 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:38:08.415194  5075 solver.cpp:219] Iteration 900 (345.075 iter/s, 0.289792s/100 iters), loss = 0.255443
I0428 20:38:08.415220  5075 solver.cpp:238]     Train net output #0: loss = 0.255443 (* 1 = 0.255443 loss)
I0428 20:38:08.415225  5075 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:38:08.512965  5081 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:08.704226  5075 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:38:08.709656  5075 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:38:08.712919  5075 solver.cpp:311] Iteration 1000, loss = 0.291181
I0428 20:38:08.712936  5075 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:38:08.844033  5082 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:08.847548  5075 solver.cpp:398]     Test net output #0: accuracy = 0.8817
I0428 20:38:08.847585  5075 solver.cpp:398]     Test net output #1: loss = 0.299505 (* 1 = 0.299505 loss)
I0428 20:38:08.847590  5075 solver.cpp:316] Optimization Done.
I0428 20:38:08.847594  5075 caffe.cpp:259] Optimization Done.
