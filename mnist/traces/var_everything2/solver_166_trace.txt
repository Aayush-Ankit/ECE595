I0428 19:32:55.268869 22988 caffe.cpp:218] Using GPUs 0
I0428 19:32:55.306696 22988 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:32:55.813832 22988 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test166.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:32:55.813974 22988 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test166.prototxt
I0428 19:32:55.814309 22988 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:32:55.814326 22988 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:32:55.814404 22988 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:55.814472 22988 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:55.814570 22988 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:32:55.814594 22988 net.cpp:86] Creating Layer mnist
I0428 19:32:55.814601 22988 net.cpp:382] mnist -> data
I0428 19:32:55.814623 22988 net.cpp:382] mnist -> label
I0428 19:32:55.815718 22988 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:32:55.818207 22988 net.cpp:124] Setting up mnist
I0428 19:32:55.818224 22988 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:32:55.818233 22988 net.cpp:131] Top shape: 64 (64)
I0428 19:32:55.818235 22988 net.cpp:139] Memory required for data: 200960
I0428 19:32:55.818243 22988 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:55.818259 22988 net.cpp:86] Creating Layer conv0
I0428 19:32:55.818264 22988 net.cpp:408] conv0 <- data
I0428 19:32:55.818276 22988 net.cpp:382] conv0 -> conv0
I0428 19:32:56.106094 22988 net.cpp:124] Setting up conv0
I0428 19:32:56.106122 22988 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 19:32:56.106125 22988 net.cpp:139] Memory required for data: 3887360
I0428 19:32:56.106142 22988 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:56.106156 22988 net.cpp:86] Creating Layer pool0
I0428 19:32:56.106160 22988 net.cpp:408] pool0 <- conv0
I0428 19:32:56.106165 22988 net.cpp:382] pool0 -> pool0
I0428 19:32:56.106214 22988 net.cpp:124] Setting up pool0
I0428 19:32:56.106220 22988 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 19:32:56.106222 22988 net.cpp:139] Memory required for data: 4808960
I0428 19:32:56.106240 22988 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:56.106251 22988 net.cpp:86] Creating Layer ip1
I0428 19:32:56.106253 22988 net.cpp:408] ip1 <- pool0
I0428 19:32:56.106258 22988 net.cpp:382] ip1 -> ip1
I0428 19:32:56.108244 22988 net.cpp:124] Setting up ip1
I0428 19:32:56.108258 22988 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:32:56.108261 22988 net.cpp:139] Memory required for data: 4821760
I0428 19:32:56.108269 22988 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:56.108278 22988 net.cpp:86] Creating Layer relu1
I0428 19:32:56.108281 22988 net.cpp:408] relu1 <- ip1
I0428 19:32:56.108286 22988 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:56.108469 22988 net.cpp:124] Setting up relu1
I0428 19:32:56.108480 22988 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:32:56.108484 22988 net.cpp:139] Memory required for data: 4834560
I0428 19:32:56.108486 22988 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:56.108494 22988 net.cpp:86] Creating Layer ip2
I0428 19:32:56.108496 22988 net.cpp:408] ip2 <- ip1
I0428 19:32:56.108502 22988 net.cpp:382] ip2 -> ip2
I0428 19:32:56.108608 22988 net.cpp:124] Setting up ip2
I0428 19:32:56.108614 22988 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:56.108618 22988 net.cpp:139] Memory required for data: 4837120
I0428 19:32:56.108625 22988 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:56.108631 22988 net.cpp:86] Creating Layer relu2
I0428 19:32:56.108635 22988 net.cpp:408] relu2 <- ip2
I0428 19:32:56.108639 22988 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:56.109452 22988 net.cpp:124] Setting up relu2
I0428 19:32:56.109465 22988 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:56.109485 22988 net.cpp:139] Memory required for data: 4839680
I0428 19:32:56.109488 22988 layer_factory.hpp:77] Creating layer loss
I0428 19:32:56.109495 22988 net.cpp:86] Creating Layer loss
I0428 19:32:56.109500 22988 net.cpp:408] loss <- ip2
I0428 19:32:56.109504 22988 net.cpp:408] loss <- label
I0428 19:32:56.109510 22988 net.cpp:382] loss -> loss
I0428 19:32:56.109526 22988 layer_factory.hpp:77] Creating layer loss
I0428 19:32:56.109807 22988 net.cpp:124] Setting up loss
I0428 19:32:56.109817 22988 net.cpp:131] Top shape: (1)
I0428 19:32:56.109819 22988 net.cpp:134]     with loss weight 1
I0428 19:32:56.109833 22988 net.cpp:139] Memory required for data: 4839684
I0428 19:32:56.109838 22988 net.cpp:200] loss needs backward computation.
I0428 19:32:56.109840 22988 net.cpp:200] relu2 needs backward computation.
I0428 19:32:56.109843 22988 net.cpp:200] ip2 needs backward computation.
I0428 19:32:56.109846 22988 net.cpp:200] relu1 needs backward computation.
I0428 19:32:56.109849 22988 net.cpp:200] ip1 needs backward computation.
I0428 19:32:56.109853 22988 net.cpp:200] pool0 needs backward computation.
I0428 19:32:56.109855 22988 net.cpp:200] conv0 needs backward computation.
I0428 19:32:56.109858 22988 net.cpp:202] mnist does not need backward computation.
I0428 19:32:56.109861 22988 net.cpp:244] This network produces output loss
I0428 19:32:56.109869 22988 net.cpp:257] Network initialization done.
I0428 19:32:56.110121 22988 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test166.prototxt
I0428 19:32:56.110146 22988 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:32:56.110221 22988 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:56.110297 22988 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:56.110342 22988 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:32:56.110354 22988 net.cpp:86] Creating Layer mnist
I0428 19:32:56.110359 22988 net.cpp:382] mnist -> data
I0428 19:32:56.110366 22988 net.cpp:382] mnist -> label
I0428 19:32:56.110452 22988 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:32:56.111718 22988 net.cpp:124] Setting up mnist
I0428 19:32:56.111732 22988 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:32:56.111737 22988 net.cpp:131] Top shape: 100 (100)
I0428 19:32:56.111739 22988 net.cpp:139] Memory required for data: 314000
I0428 19:32:56.111742 22988 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:32:56.111750 22988 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:32:56.111754 22988 net.cpp:408] label_mnist_1_split <- label
I0428 19:32:56.111758 22988 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:32:56.111800 22988 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:32:56.111842 22988 net.cpp:124] Setting up label_mnist_1_split
I0428 19:32:56.111848 22988 net.cpp:131] Top shape: 100 (100)
I0428 19:32:56.111852 22988 net.cpp:131] Top shape: 100 (100)
I0428 19:32:56.111855 22988 net.cpp:139] Memory required for data: 314800
I0428 19:32:56.111858 22988 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:56.111868 22988 net.cpp:86] Creating Layer conv0
I0428 19:32:56.111871 22988 net.cpp:408] conv0 <- data
I0428 19:32:56.111877 22988 net.cpp:382] conv0 -> conv0
I0428 19:32:56.113678 22988 net.cpp:124] Setting up conv0
I0428 19:32:56.113708 22988 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 19:32:56.113713 22988 net.cpp:139] Memory required for data: 6074800
I0428 19:32:56.113721 22988 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:56.113731 22988 net.cpp:86] Creating Layer pool0
I0428 19:32:56.113734 22988 net.cpp:408] pool0 <- conv0
I0428 19:32:56.113755 22988 net.cpp:382] pool0 -> pool0
I0428 19:32:56.113829 22988 net.cpp:124] Setting up pool0
I0428 19:32:56.113837 22988 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 19:32:56.113840 22988 net.cpp:139] Memory required for data: 7514800
I0428 19:32:56.113843 22988 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:56.113852 22988 net.cpp:86] Creating Layer ip1
I0428 19:32:56.113855 22988 net.cpp:408] ip1 <- pool0
I0428 19:32:56.113859 22988 net.cpp:382] ip1 -> ip1
I0428 19:32:56.115952 22988 net.cpp:124] Setting up ip1
I0428 19:32:56.115964 22988 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:32:56.115967 22988 net.cpp:139] Memory required for data: 7534800
I0428 19:32:56.115975 22988 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:56.115983 22988 net.cpp:86] Creating Layer relu1
I0428 19:32:56.115986 22988 net.cpp:408] relu1 <- ip1
I0428 19:32:56.115991 22988 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:56.116176 22988 net.cpp:124] Setting up relu1
I0428 19:32:56.116186 22988 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:32:56.116199 22988 net.cpp:139] Memory required for data: 7554800
I0428 19:32:56.116204 22988 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:56.116210 22988 net.cpp:86] Creating Layer ip2
I0428 19:32:56.116214 22988 net.cpp:408] ip2 <- ip1
I0428 19:32:56.116219 22988 net.cpp:382] ip2 -> ip2
I0428 19:32:56.116327 22988 net.cpp:124] Setting up ip2
I0428 19:32:56.116334 22988 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:56.116338 22988 net.cpp:139] Memory required for data: 7558800
I0428 19:32:56.116346 22988 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:56.116351 22988 net.cpp:86] Creating Layer relu2
I0428 19:32:56.116354 22988 net.cpp:408] relu2 <- ip2
I0428 19:32:56.116359 22988 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:56.116521 22988 net.cpp:124] Setting up relu2
I0428 19:32:56.116530 22988 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:56.116533 22988 net.cpp:139] Memory required for data: 7562800
I0428 19:32:56.116536 22988 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:32:56.116542 22988 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:32:56.116545 22988 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:32:56.116551 22988 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:32:56.116557 22988 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:32:56.116591 22988 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:32:56.116614 22988 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:56.116618 22988 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:56.116621 22988 net.cpp:139] Memory required for data: 7570800
I0428 19:32:56.116624 22988 layer_factory.hpp:77] Creating layer accuracy
I0428 19:32:56.116629 22988 net.cpp:86] Creating Layer accuracy
I0428 19:32:56.116632 22988 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:32:56.116637 22988 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:32:56.116641 22988 net.cpp:382] accuracy -> accuracy
I0428 19:32:56.116648 22988 net.cpp:124] Setting up accuracy
I0428 19:32:56.116652 22988 net.cpp:131] Top shape: (1)
I0428 19:32:56.116657 22988 net.cpp:139] Memory required for data: 7570804
I0428 19:32:56.116659 22988 layer_factory.hpp:77] Creating layer loss
I0428 19:32:56.116664 22988 net.cpp:86] Creating Layer loss
I0428 19:32:56.116668 22988 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:32:56.116672 22988 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:32:56.116677 22988 net.cpp:382] loss -> loss
I0428 19:32:56.116683 22988 layer_factory.hpp:77] Creating layer loss
I0428 19:32:56.117696 22988 net.cpp:124] Setting up loss
I0428 19:32:56.117708 22988 net.cpp:131] Top shape: (1)
I0428 19:32:56.117712 22988 net.cpp:134]     with loss weight 1
I0428 19:32:56.117718 22988 net.cpp:139] Memory required for data: 7570808
I0428 19:32:56.117722 22988 net.cpp:200] loss needs backward computation.
I0428 19:32:56.117725 22988 net.cpp:202] accuracy does not need backward computation.
I0428 19:32:56.117729 22988 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:32:56.117733 22988 net.cpp:200] relu2 needs backward computation.
I0428 19:32:56.117735 22988 net.cpp:200] ip2 needs backward computation.
I0428 19:32:56.117738 22988 net.cpp:200] relu1 needs backward computation.
I0428 19:32:56.117741 22988 net.cpp:200] ip1 needs backward computation.
I0428 19:32:56.117744 22988 net.cpp:200] pool0 needs backward computation.
I0428 19:32:56.117763 22988 net.cpp:200] conv0 needs backward computation.
I0428 19:32:56.117766 22988 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:32:56.117770 22988 net.cpp:202] mnist does not need backward computation.
I0428 19:32:56.117774 22988 net.cpp:244] This network produces output accuracy
I0428 19:32:56.117776 22988 net.cpp:244] This network produces output loss
I0428 19:32:56.117786 22988 net.cpp:257] Network initialization done.
I0428 19:32:56.117820 22988 solver.cpp:56] Solver scaffolding done.
I0428 19:32:56.118026 22988 caffe.cpp:248] Starting Optimization
I0428 19:32:56.118032 22988 solver.cpp:273] Solving LeNet
I0428 19:32:56.118046 22988 solver.cpp:274] Learning Rate Policy: inv
I0428 19:32:56.118849 22988 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:32:56.125401 22988 blocking_queue.cpp:49] Waiting for data
I0428 19:32:56.198222 22995 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:56.199060 22988 solver.cpp:398]     Test net output #0: accuracy = 0.0881
I0428 19:32:56.199079 22988 solver.cpp:398]     Test net output #1: loss = 2.34688 (* 1 = 2.34688 loss)
I0428 19:32:56.202702 22988 solver.cpp:219] Iteration 0 (2.68997 iter/s, 0.0846286s/100 iters), loss = 2.34779
I0428 19:32:56.202739 22988 solver.cpp:238]     Train net output #0: loss = 2.34779 (* 1 = 2.34779 loss)
I0428 19:32:56.202749 22988 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:32:56.303848 22988 solver.cpp:219] Iteration 100 (989.236 iter/s, 0.101088s/100 iters), loss = 0.773263
I0428 19:32:56.303899 22988 solver.cpp:238]     Train net output #0: loss = 0.773263 (* 1 = 0.773263 loss)
I0428 19:32:56.303911 22988 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:32:56.404355 22988 solver.cpp:219] Iteration 200 (995.537 iter/s, 0.100448s/100 iters), loss = 0.726443
I0428 19:32:56.404387 22988 solver.cpp:238]     Train net output #0: loss = 0.726443 (* 1 = 0.726443 loss)
I0428 19:32:56.404395 22988 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:32:56.499475 22988 solver.cpp:219] Iteration 300 (1051.77 iter/s, 0.0950782s/100 iters), loss = 0.461831
I0428 19:32:56.499508 22988 solver.cpp:238]     Train net output #0: loss = 0.461831 (* 1 = 0.461831 loss)
I0428 19:32:56.499516 22988 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:32:56.594323 22988 solver.cpp:219] Iteration 400 (1054.8 iter/s, 0.094805s/100 iters), loss = 0.765311
I0428 19:32:56.594355 22988 solver.cpp:238]     Train net output #0: loss = 0.765311 (* 1 = 0.765311 loss)
I0428 19:32:56.594362 22988 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:32:56.688531 22988 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:32:56.754726 22995 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:56.756460 22988 solver.cpp:398]     Test net output #0: accuracy = 0.8486
I0428 19:32:56.756491 22988 solver.cpp:398]     Test net output #1: loss = 0.44237 (* 1 = 0.44237 loss)
I0428 19:32:56.757431 22988 solver.cpp:219] Iteration 500 (613.265 iter/s, 0.163062s/100 iters), loss = 0.617661
I0428 19:32:56.757458 22988 solver.cpp:238]     Train net output #0: loss = 0.617661 (* 1 = 0.617661 loss)
I0428 19:32:56.757465 22988 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:32:56.856710 22988 solver.cpp:219] Iteration 600 (1007.66 iter/s, 0.0992399s/100 iters), loss = 0.19615
I0428 19:32:56.856742 22988 solver.cpp:238]     Train net output #0: loss = 0.19615 (* 1 = 0.19615 loss)
I0428 19:32:56.856750 22988 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:32:56.957263 22988 solver.cpp:219] Iteration 700 (994.919 iter/s, 0.100511s/100 iters), loss = 0.426787
I0428 19:32:56.957294 22988 solver.cpp:238]     Train net output #0: loss = 0.426787 (* 1 = 0.426787 loss)
I0428 19:32:56.957303 22988 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:32:57.052659 22988 solver.cpp:219] Iteration 800 (1048.71 iter/s, 0.0953549s/100 iters), loss = 0.456332
I0428 19:32:57.052688 22988 solver.cpp:238]     Train net output #0: loss = 0.456332 (* 1 = 0.456332 loss)
I0428 19:32:57.052695 22988 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:32:57.151010 22988 solver.cpp:219] Iteration 900 (1017.16 iter/s, 0.0983132s/100 iters), loss = 0.302861
I0428 19:32:57.151052 22988 solver.cpp:238]     Train net output #0: loss = 0.302861 (* 1 = 0.302861 loss)
I0428 19:32:57.151059 22988 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:32:57.184334 22994 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:57.245992 22988 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:32:57.250005 22988 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:32:57.251864 22988 solver.cpp:311] Iteration 1000, loss = 0.299281
I0428 19:32:57.251881 22988 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:32:57.312670 22995 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:57.314204 22988 solver.cpp:398]     Test net output #0: accuracy = 0.8676
I0428 19:32:57.314244 22988 solver.cpp:398]     Test net output #1: loss = 0.355049 (* 1 = 0.355049 loss)
I0428 19:32:57.314249 22988 solver.cpp:316] Optimization Done.
I0428 19:32:57.314254 22988 caffe.cpp:259] Optimization Done.
