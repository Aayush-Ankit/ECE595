I0428 19:45:39.088964 25842 caffe.cpp:218] Using GPUs 0
I0428 19:45:39.130216 25842 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:39.650403 25842 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test476.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:39.650564 25842 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test476.prototxt
I0428 19:45:39.650948 25842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:39.650971 25842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:39.651075 25842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:39.651186 25842 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:39.651319 25842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:39.651351 25842 net.cpp:86] Creating Layer mnist
I0428 19:45:39.651365 25842 net.cpp:382] mnist -> data
I0428 19:45:39.651396 25842 net.cpp:382] mnist -> label
I0428 19:45:39.652628 25842 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:39.655338 25842 net.cpp:124] Setting up mnist
I0428 19:45:39.655359 25842 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:39.655369 25842 net.cpp:131] Top shape: 64 (64)
I0428 19:45:39.655375 25842 net.cpp:139] Memory required for data: 200960
I0428 19:45:39.655385 25842 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:39.655427 25842 net.cpp:86] Creating Layer conv0
I0428 19:45:39.655436 25842 net.cpp:408] conv0 <- data
I0428 19:45:39.655457 25842 net.cpp:382] conv0 -> conv0
I0428 19:45:39.945224 25842 net.cpp:124] Setting up conv0
I0428 19:45:39.945257 25842 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:39.945264 25842 net.cpp:139] Memory required for data: 495872
I0428 19:45:39.945315 25842 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:39.945338 25842 net.cpp:86] Creating Layer pool0
I0428 19:45:39.945348 25842 net.cpp:408] pool0 <- conv0
I0428 19:45:39.945359 25842 net.cpp:382] pool0 -> pool0
I0428 19:45:39.945425 25842 net.cpp:124] Setting up pool0
I0428 19:45:39.945436 25842 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:39.945442 25842 net.cpp:139] Memory required for data: 569600
I0428 19:45:39.945449 25842 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:39.945468 25842 net.cpp:86] Creating Layer conv1
I0428 19:45:39.945477 25842 net.cpp:408] conv1 <- pool0
I0428 19:45:39.945487 25842 net.cpp:382] conv1 -> conv1
I0428 19:45:39.948632 25842 net.cpp:124] Setting up conv1
I0428 19:45:39.948652 25842 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:39.948659 25842 net.cpp:139] Memory required for data: 2208000
I0428 19:45:39.948675 25842 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:39.948689 25842 net.cpp:86] Creating Layer pool1
I0428 19:45:39.948696 25842 net.cpp:408] pool1 <- conv1
I0428 19:45:39.948706 25842 net.cpp:382] pool1 -> pool1
I0428 19:45:39.948760 25842 net.cpp:124] Setting up pool1
I0428 19:45:39.948771 25842 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:39.948777 25842 net.cpp:139] Memory required for data: 2617600
I0428 19:45:39.948783 25842 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:39.948796 25842 net.cpp:86] Creating Layer ip1
I0428 19:45:39.948803 25842 net.cpp:408] ip1 <- pool1
I0428 19:45:39.948822 25842 net.cpp:382] ip1 -> ip1
I0428 19:45:39.949223 25842 net.cpp:124] Setting up ip1
I0428 19:45:39.949234 25842 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:39.949240 25842 net.cpp:139] Memory required for data: 2624000
I0428 19:45:39.949256 25842 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:39.949266 25842 net.cpp:86] Creating Layer relu1
I0428 19:45:39.949278 25842 net.cpp:408] relu1 <- ip1
I0428 19:45:39.949287 25842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:39.949492 25842 net.cpp:124] Setting up relu1
I0428 19:45:39.949504 25842 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:39.949511 25842 net.cpp:139] Memory required for data: 2630400
I0428 19:45:39.949517 25842 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:39.949527 25842 net.cpp:86] Creating Layer ip2
I0428 19:45:39.949534 25842 net.cpp:408] ip2 <- ip1
I0428 19:45:39.949544 25842 net.cpp:382] ip2 -> ip2
I0428 19:45:39.949667 25842 net.cpp:124] Setting up ip2
I0428 19:45:39.949678 25842 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:39.949684 25842 net.cpp:139] Memory required for data: 2632960
I0428 19:45:39.949695 25842 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:39.949707 25842 net.cpp:86] Creating Layer relu2
I0428 19:45:39.949713 25842 net.cpp:408] relu2 <- ip2
I0428 19:45:39.949723 25842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:39.950573 25842 net.cpp:124] Setting up relu2
I0428 19:45:39.950592 25842 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:39.950599 25842 net.cpp:139] Memory required for data: 2635520
I0428 19:45:39.950605 25842 layer_factory.hpp:77] Creating layer loss
I0428 19:45:39.950624 25842 net.cpp:86] Creating Layer loss
I0428 19:45:39.950639 25842 net.cpp:408] loss <- ip2
I0428 19:45:39.950647 25842 net.cpp:408] loss <- label
I0428 19:45:39.950659 25842 net.cpp:382] loss -> loss
I0428 19:45:39.950687 25842 layer_factory.hpp:77] Creating layer loss
I0428 19:45:39.950974 25842 net.cpp:124] Setting up loss
I0428 19:45:39.950989 25842 net.cpp:131] Top shape: (1)
I0428 19:45:39.950994 25842 net.cpp:134]     with loss weight 1
I0428 19:45:39.951019 25842 net.cpp:139] Memory required for data: 2635524
I0428 19:45:39.951026 25842 net.cpp:200] loss needs backward computation.
I0428 19:45:39.951033 25842 net.cpp:200] relu2 needs backward computation.
I0428 19:45:39.951040 25842 net.cpp:200] ip2 needs backward computation.
I0428 19:45:39.951046 25842 net.cpp:200] relu1 needs backward computation.
I0428 19:45:39.951052 25842 net.cpp:200] ip1 needs backward computation.
I0428 19:45:39.951073 25842 net.cpp:200] pool1 needs backward computation.
I0428 19:45:39.951081 25842 net.cpp:200] conv1 needs backward computation.
I0428 19:45:39.951088 25842 net.cpp:200] pool0 needs backward computation.
I0428 19:45:39.951095 25842 net.cpp:200] conv0 needs backward computation.
I0428 19:45:39.951102 25842 net.cpp:202] mnist does not need backward computation.
I0428 19:45:39.951108 25842 net.cpp:244] This network produces output loss
I0428 19:45:39.951124 25842 net.cpp:257] Network initialization done.
I0428 19:45:39.951478 25842 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test476.prototxt
I0428 19:45:39.951516 25842 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:39.951628 25842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:39.951743 25842 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:39.951815 25842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:39.951835 25842 net.cpp:86] Creating Layer mnist
I0428 19:45:39.951844 25842 net.cpp:382] mnist -> data
I0428 19:45:39.951859 25842 net.cpp:382] mnist -> label
I0428 19:45:39.952002 25842 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:39.954344 25842 net.cpp:124] Setting up mnist
I0428 19:45:39.954362 25842 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:39.954372 25842 net.cpp:131] Top shape: 100 (100)
I0428 19:45:39.954378 25842 net.cpp:139] Memory required for data: 314000
I0428 19:45:39.954385 25842 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:39.954397 25842 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:39.954403 25842 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:39.954413 25842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:39.954427 25842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:39.954547 25842 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:39.954571 25842 net.cpp:131] Top shape: 100 (100)
I0428 19:45:39.954578 25842 net.cpp:131] Top shape: 100 (100)
I0428 19:45:39.954584 25842 net.cpp:139] Memory required for data: 314800
I0428 19:45:39.954591 25842 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:39.954607 25842 net.cpp:86] Creating Layer conv0
I0428 19:45:39.954614 25842 net.cpp:408] conv0 <- data
I0428 19:45:39.954625 25842 net.cpp:382] conv0 -> conv0
I0428 19:45:39.956336 25842 net.cpp:124] Setting up conv0
I0428 19:45:39.956356 25842 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:39.956363 25842 net.cpp:139] Memory required for data: 775600
I0428 19:45:39.956380 25842 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:39.956393 25842 net.cpp:86] Creating Layer pool0
I0428 19:45:39.956404 25842 net.cpp:408] pool0 <- conv0
I0428 19:45:39.956416 25842 net.cpp:382] pool0 -> pool0
I0428 19:45:39.956468 25842 net.cpp:124] Setting up pool0
I0428 19:45:39.956478 25842 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:39.956485 25842 net.cpp:139] Memory required for data: 890800
I0428 19:45:39.956491 25842 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:39.956507 25842 net.cpp:86] Creating Layer conv1
I0428 19:45:39.956516 25842 net.cpp:408] conv1 <- pool0
I0428 19:45:39.956526 25842 net.cpp:382] conv1 -> conv1
I0428 19:45:39.958238 25842 net.cpp:124] Setting up conv1
I0428 19:45:39.958257 25842 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:39.958264 25842 net.cpp:139] Memory required for data: 3450800
I0428 19:45:39.958281 25842 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:39.958293 25842 net.cpp:86] Creating Layer pool1
I0428 19:45:39.958300 25842 net.cpp:408] pool1 <- conv1
I0428 19:45:39.958310 25842 net.cpp:382] pool1 -> pool1
I0428 19:45:39.958364 25842 net.cpp:124] Setting up pool1
I0428 19:45:39.958374 25842 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:39.958380 25842 net.cpp:139] Memory required for data: 4090800
I0428 19:45:39.958387 25842 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:39.958398 25842 net.cpp:86] Creating Layer ip1
I0428 19:45:39.958405 25842 net.cpp:408] ip1 <- pool1
I0428 19:45:39.958420 25842 net.cpp:382] ip1 -> ip1
I0428 19:45:39.958825 25842 net.cpp:124] Setting up ip1
I0428 19:45:39.958837 25842 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:39.958843 25842 net.cpp:139] Memory required for data: 4100800
I0428 19:45:39.958858 25842 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:39.958868 25842 net.cpp:86] Creating Layer relu1
I0428 19:45:39.958878 25842 net.cpp:408] relu1 <- ip1
I0428 19:45:39.958886 25842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:39.959182 25842 net.cpp:124] Setting up relu1
I0428 19:45:39.959193 25842 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:39.959200 25842 net.cpp:139] Memory required for data: 4110800
I0428 19:45:39.959208 25842 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:39.959223 25842 net.cpp:86] Creating Layer ip2
I0428 19:45:39.959230 25842 net.cpp:408] ip2 <- ip1
I0428 19:45:39.959241 25842 net.cpp:382] ip2 -> ip2
I0428 19:45:39.959367 25842 net.cpp:124] Setting up ip2
I0428 19:45:39.959377 25842 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:39.959383 25842 net.cpp:139] Memory required for data: 4114800
I0428 19:45:39.959396 25842 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:39.959405 25842 net.cpp:86] Creating Layer relu2
I0428 19:45:39.959411 25842 net.cpp:408] relu2 <- ip2
I0428 19:45:39.959420 25842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:39.959607 25842 net.cpp:124] Setting up relu2
I0428 19:45:39.959620 25842 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:39.959626 25842 net.cpp:139] Memory required for data: 4118800
I0428 19:45:39.959632 25842 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:45:39.959641 25842 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:45:39.959647 25842 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:45:39.959656 25842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:45:39.959682 25842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:45:39.959733 25842 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:45:39.959743 25842 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:39.959751 25842 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:39.959758 25842 net.cpp:139] Memory required for data: 4126800
I0428 19:45:39.959764 25842 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:39.959774 25842 net.cpp:86] Creating Layer accuracy
I0428 19:45:39.959780 25842 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:45:39.959789 25842 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:39.959797 25842 net.cpp:382] accuracy -> accuracy
I0428 19:45:39.959810 25842 net.cpp:124] Setting up accuracy
I0428 19:45:39.959820 25842 net.cpp:131] Top shape: (1)
I0428 19:45:39.959826 25842 net.cpp:139] Memory required for data: 4126804
I0428 19:45:39.959832 25842 layer_factory.hpp:77] Creating layer loss
I0428 19:45:39.959841 25842 net.cpp:86] Creating Layer loss
I0428 19:45:39.959847 25842 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:45:39.959856 25842 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:39.959864 25842 net.cpp:382] loss -> loss
I0428 19:45:39.959880 25842 layer_factory.hpp:77] Creating layer loss
I0428 19:45:39.960278 25842 net.cpp:124] Setting up loss
I0428 19:45:39.960290 25842 net.cpp:131] Top shape: (1)
I0428 19:45:39.960296 25842 net.cpp:134]     with loss weight 1
I0428 19:45:39.960307 25842 net.cpp:139] Memory required for data: 4126808
I0428 19:45:39.960315 25842 net.cpp:200] loss needs backward computation.
I0428 19:45:39.960324 25842 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:39.960331 25842 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:45:39.960338 25842 net.cpp:200] relu2 needs backward computation.
I0428 19:45:39.960345 25842 net.cpp:200] ip2 needs backward computation.
I0428 19:45:39.960350 25842 net.cpp:200] relu1 needs backward computation.
I0428 19:45:39.960356 25842 net.cpp:200] ip1 needs backward computation.
I0428 19:45:39.960362 25842 net.cpp:200] pool1 needs backward computation.
I0428 19:45:39.960369 25842 net.cpp:200] conv1 needs backward computation.
I0428 19:45:39.960376 25842 net.cpp:200] pool0 needs backward computation.
I0428 19:45:39.960382 25842 net.cpp:200] conv0 needs backward computation.
I0428 19:45:39.960391 25842 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:39.960398 25842 net.cpp:202] mnist does not need backward computation.
I0428 19:45:39.960404 25842 net.cpp:244] This network produces output accuracy
I0428 19:45:39.960412 25842 net.cpp:244] This network produces output loss
I0428 19:45:39.960429 25842 net.cpp:257] Network initialization done.
I0428 19:45:39.960484 25842 solver.cpp:56] Solver scaffolding done.
I0428 19:45:39.960819 25842 caffe.cpp:248] Starting Optimization
I0428 19:45:39.960827 25842 solver.cpp:273] Solving LeNet
I0428 19:45:39.960832 25842 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:39.961012 25842 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:39.966258 25842 blocking_queue.cpp:49] Waiting for data
I0428 19:45:40.033146 25849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:40.033746 25842 solver.cpp:398]     Test net output #0: accuracy = 0.0532
I0428 19:45:40.033774 25842 solver.cpp:398]     Test net output #1: loss = 2.32556 (* 1 = 2.32556 loss)
I0428 19:45:40.037735 25842 solver.cpp:219] Iteration 0 (0 iter/s, 0.0768665s/100 iters), loss = 2.3162
I0428 19:45:40.037771 25842 solver.cpp:238]     Train net output #0: loss = 2.3162 (* 1 = 2.3162 loss)
I0428 19:45:40.037793 25842 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:40.197163 25842 solver.cpp:219] Iteration 100 (627.45 iter/s, 0.159375s/100 iters), loss = 0.331441
I0428 19:45:40.197211 25842 solver.cpp:238]     Train net output #0: loss = 0.331441 (* 1 = 0.331441 loss)
I0428 19:45:40.197227 25842 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:40.366574 25842 solver.cpp:219] Iteration 200 (590.489 iter/s, 0.169351s/100 iters), loss = 0.284361
I0428 19:45:40.366646 25842 solver.cpp:238]     Train net output #0: loss = 0.284361 (* 1 = 0.284361 loss)
I0428 19:45:40.366664 25842 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:40.540410 25842 solver.cpp:219] Iteration 300 (575.535 iter/s, 0.173751s/100 iters), loss = 0.187746
I0428 19:45:40.540464 25842 solver.cpp:238]     Train net output #0: loss = 0.187746 (* 1 = 0.187746 loss)
I0428 19:45:40.540478 25842 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:40.722061 25842 solver.cpp:219] Iteration 400 (550.716 iter/s, 0.181582s/100 iters), loss = 0.0738416
I0428 19:45:40.722115 25842 solver.cpp:238]     Train net output #0: loss = 0.0738417 (* 1 = 0.0738417 loss)
I0428 19:45:40.722129 25842 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:40.901670 25842 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:40.961225 25849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:40.963140 25842 solver.cpp:398]     Test net output #0: accuracy = 0.9621
I0428 19:45:40.963194 25842 solver.cpp:398]     Test net output #1: loss = 0.120392 (* 1 = 0.120392 loss)
I0428 19:45:40.964702 25842 solver.cpp:219] Iteration 500 (412.25 iter/s, 0.242571s/100 iters), loss = 0.0742981
I0428 19:45:40.964745 25842 solver.cpp:238]     Train net output #0: loss = 0.0742983 (* 1 = 0.0742983 loss)
I0428 19:45:40.964754 25842 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:41.131474 25842 solver.cpp:219] Iteration 600 (599.799 iter/s, 0.166723s/100 iters), loss = 0.083262
I0428 19:45:41.131526 25842 solver.cpp:238]     Train net output #0: loss = 0.0832622 (* 1 = 0.0832622 loss)
I0428 19:45:41.131538 25842 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:41.303508 25842 solver.cpp:219] Iteration 700 (581.478 iter/s, 0.171976s/100 iters), loss = 0.251047
I0428 19:45:41.303555 25842 solver.cpp:238]     Train net output #0: loss = 0.251048 (* 1 = 0.251048 loss)
I0428 19:45:41.303566 25842 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:41.475625 25842 solver.cpp:219] Iteration 800 (581.204 iter/s, 0.172057s/100 iters), loss = 0.222118
I0428 19:45:41.475669 25842 solver.cpp:238]     Train net output #0: loss = 0.222118 (* 1 = 0.222118 loss)
I0428 19:45:41.475680 25842 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:41.644506 25842 solver.cpp:219] Iteration 900 (592.337 iter/s, 0.168823s/100 iters), loss = 0.133639
I0428 19:45:41.644548 25842 solver.cpp:238]     Train net output #0: loss = 0.133639 (* 1 = 0.133639 loss)
I0428 19:45:41.644559 25842 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:41.701243 25848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:41.815280 25842 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:41.817736 25842 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:41.818938 25842 solver.cpp:311] Iteration 1000, loss = 0.123529
I0428 19:45:41.818964 25842 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:41.874186 25849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:41.876003 25842 solver.cpp:398]     Test net output #0: accuracy = 0.9743
I0428 19:45:41.876025 25842 solver.cpp:398]     Test net output #1: loss = 0.0834359 (* 1 = 0.0834359 loss)
I0428 19:45:41.876040 25842 solver.cpp:316] Optimization Done.
I0428 19:45:41.876044 25842 caffe.cpp:259] Optimization Done.
