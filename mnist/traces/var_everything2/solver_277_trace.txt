I0428 19:38:33.200148 24047 caffe.cpp:218] Using GPUs 0
I0428 19:38:33.241158 24047 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:38:33.761975 24047 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test277.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:38:33.762116 24047 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test277.prototxt
I0428 19:38:33.762495 24047 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:38:33.762512 24047 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:38:33.762603 24047 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:33.762681 24047 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:33.762778 24047 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:38:33.762800 24047 net.cpp:86] Creating Layer mnist
I0428 19:38:33.762809 24047 net.cpp:382] mnist -> data
I0428 19:38:33.762831 24047 net.cpp:382] mnist -> label
I0428 19:38:33.763927 24047 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:38:33.766396 24047 net.cpp:124] Setting up mnist
I0428 19:38:33.766413 24047 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:38:33.766422 24047 net.cpp:131] Top shape: 64 (64)
I0428 19:38:33.766425 24047 net.cpp:139] Memory required for data: 200960
I0428 19:38:33.766433 24047 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:33.766448 24047 net.cpp:86] Creating Layer conv0
I0428 19:38:33.766453 24047 net.cpp:408] conv0 <- data
I0428 19:38:33.766465 24047 net.cpp:382] conv0 -> conv0
I0428 19:38:34.055188 24047 net.cpp:124] Setting up conv0
I0428 19:38:34.055219 24047 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:38:34.055224 24047 net.cpp:139] Memory required for data: 495872
I0428 19:38:34.055261 24047 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:34.055276 24047 net.cpp:86] Creating Layer pool0
I0428 19:38:34.055280 24047 net.cpp:408] pool0 <- conv0
I0428 19:38:34.055287 24047 net.cpp:382] pool0 -> pool0
I0428 19:38:34.055341 24047 net.cpp:124] Setting up pool0
I0428 19:38:34.055351 24047 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:38:34.055354 24047 net.cpp:139] Memory required for data: 569600
I0428 19:38:34.055357 24047 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:34.055369 24047 net.cpp:86] Creating Layer conv1
I0428 19:38:34.055373 24047 net.cpp:408] conv1 <- pool0
I0428 19:38:34.055379 24047 net.cpp:382] conv1 -> conv1
I0428 19:38:34.057426 24047 net.cpp:124] Setting up conv1
I0428 19:38:34.057445 24047 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:38:34.057449 24047 net.cpp:139] Memory required for data: 602368
I0428 19:38:34.057458 24047 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:34.057466 24047 net.cpp:86] Creating Layer pool1
I0428 19:38:34.057471 24047 net.cpp:408] pool1 <- conv1
I0428 19:38:34.057476 24047 net.cpp:382] pool1 -> pool1
I0428 19:38:34.057516 24047 net.cpp:124] Setting up pool1
I0428 19:38:34.057523 24047 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:38:34.057525 24047 net.cpp:139] Memory required for data: 610560
I0428 19:38:34.057529 24047 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:34.057538 24047 net.cpp:86] Creating Layer ip1
I0428 19:38:34.057540 24047 net.cpp:408] ip1 <- pool1
I0428 19:38:34.057545 24047 net.cpp:382] ip1 -> ip1
I0428 19:38:34.057649 24047 net.cpp:124] Setting up ip1
I0428 19:38:34.057657 24047 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:34.057662 24047 net.cpp:139] Memory required for data: 613120
I0428 19:38:34.057668 24047 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:34.057674 24047 net.cpp:86] Creating Layer relu1
I0428 19:38:34.057678 24047 net.cpp:408] relu1 <- ip1
I0428 19:38:34.057682 24047 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:34.057863 24047 net.cpp:124] Setting up relu1
I0428 19:38:34.057873 24047 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:34.057878 24047 net.cpp:139] Memory required for data: 615680
I0428 19:38:34.057880 24047 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:34.057888 24047 net.cpp:86] Creating Layer ip2
I0428 19:38:34.057891 24047 net.cpp:408] ip2 <- ip1
I0428 19:38:34.057896 24047 net.cpp:382] ip2 -> ip2
I0428 19:38:34.057996 24047 net.cpp:124] Setting up ip2
I0428 19:38:34.058004 24047 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:34.058007 24047 net.cpp:139] Memory required for data: 618240
I0428 19:38:34.058013 24047 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:34.058020 24047 net.cpp:86] Creating Layer relu2
I0428 19:38:34.058023 24047 net.cpp:408] relu2 <- ip2
I0428 19:38:34.058028 24047 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:34.058811 24047 net.cpp:124] Setting up relu2
I0428 19:38:34.058825 24047 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:34.058828 24047 net.cpp:139] Memory required for data: 620800
I0428 19:38:34.058832 24047 layer_factory.hpp:77] Creating layer loss
I0428 19:38:34.058840 24047 net.cpp:86] Creating Layer loss
I0428 19:38:34.058843 24047 net.cpp:408] loss <- ip2
I0428 19:38:34.058848 24047 net.cpp:408] loss <- label
I0428 19:38:34.058856 24047 net.cpp:382] loss -> loss
I0428 19:38:34.058876 24047 layer_factory.hpp:77] Creating layer loss
I0428 19:38:34.059144 24047 net.cpp:124] Setting up loss
I0428 19:38:34.059155 24047 net.cpp:131] Top shape: (1)
I0428 19:38:34.059159 24047 net.cpp:134]     with loss weight 1
I0428 19:38:34.059180 24047 net.cpp:139] Memory required for data: 620804
I0428 19:38:34.059185 24047 net.cpp:200] loss needs backward computation.
I0428 19:38:34.059188 24047 net.cpp:200] relu2 needs backward computation.
I0428 19:38:34.059192 24047 net.cpp:200] ip2 needs backward computation.
I0428 19:38:34.059195 24047 net.cpp:200] relu1 needs backward computation.
I0428 19:38:34.059198 24047 net.cpp:200] ip1 needs backward computation.
I0428 19:38:34.059201 24047 net.cpp:200] pool1 needs backward computation.
I0428 19:38:34.059216 24047 net.cpp:200] conv1 needs backward computation.
I0428 19:38:34.059221 24047 net.cpp:200] pool0 needs backward computation.
I0428 19:38:34.059223 24047 net.cpp:200] conv0 needs backward computation.
I0428 19:38:34.059227 24047 net.cpp:202] mnist does not need backward computation.
I0428 19:38:34.059231 24047 net.cpp:244] This network produces output loss
I0428 19:38:34.059239 24047 net.cpp:257] Network initialization done.
I0428 19:38:34.059551 24047 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test277.prototxt
I0428 19:38:34.059578 24047 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:38:34.059669 24047 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:34.059736 24047 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:34.059784 24047 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:38:34.059798 24047 net.cpp:86] Creating Layer mnist
I0428 19:38:34.059803 24047 net.cpp:382] mnist -> data
I0428 19:38:34.059811 24047 net.cpp:382] mnist -> label
I0428 19:38:34.059903 24047 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:38:34.061938 24047 net.cpp:124] Setting up mnist
I0428 19:38:34.061952 24047 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:38:34.061959 24047 net.cpp:131] Top shape: 100 (100)
I0428 19:38:34.061962 24047 net.cpp:139] Memory required for data: 314000
I0428 19:38:34.061966 24047 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:38:34.061977 24047 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:38:34.061981 24047 net.cpp:408] label_mnist_1_split <- label
I0428 19:38:34.061986 24047 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:38:34.061995 24047 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:38:34.062041 24047 net.cpp:124] Setting up label_mnist_1_split
I0428 19:38:34.062058 24047 net.cpp:131] Top shape: 100 (100)
I0428 19:38:34.062063 24047 net.cpp:131] Top shape: 100 (100)
I0428 19:38:34.062067 24047 net.cpp:139] Memory required for data: 314800
I0428 19:38:34.062070 24047 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:34.062079 24047 net.cpp:86] Creating Layer conv0
I0428 19:38:34.062083 24047 net.cpp:408] conv0 <- data
I0428 19:38:34.062088 24047 net.cpp:382] conv0 -> conv0
I0428 19:38:34.063863 24047 net.cpp:124] Setting up conv0
I0428 19:38:34.063879 24047 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:38:34.063884 24047 net.cpp:139] Memory required for data: 775600
I0428 19:38:34.063894 24047 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:34.063901 24047 net.cpp:86] Creating Layer pool0
I0428 19:38:34.063905 24047 net.cpp:408] pool0 <- conv0
I0428 19:38:34.063910 24047 net.cpp:382] pool0 -> pool0
I0428 19:38:34.063952 24047 net.cpp:124] Setting up pool0
I0428 19:38:34.063958 24047 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:38:34.063961 24047 net.cpp:139] Memory required for data: 890800
I0428 19:38:34.063964 24047 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:34.063976 24047 net.cpp:86] Creating Layer conv1
I0428 19:38:34.063979 24047 net.cpp:408] conv1 <- pool0
I0428 19:38:34.063985 24047 net.cpp:382] conv1 -> conv1
I0428 19:38:34.065606 24047 net.cpp:124] Setting up conv1
I0428 19:38:34.065623 24047 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:38:34.065627 24047 net.cpp:139] Memory required for data: 942000
I0428 19:38:34.065637 24047 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:34.065646 24047 net.cpp:86] Creating Layer pool1
I0428 19:38:34.065650 24047 net.cpp:408] pool1 <- conv1
I0428 19:38:34.065657 24047 net.cpp:382] pool1 -> pool1
I0428 19:38:34.065698 24047 net.cpp:124] Setting up pool1
I0428 19:38:34.065706 24047 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:38:34.065708 24047 net.cpp:139] Memory required for data: 954800
I0428 19:38:34.065711 24047 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:34.065719 24047 net.cpp:86] Creating Layer ip1
I0428 19:38:34.065722 24047 net.cpp:408] ip1 <- pool1
I0428 19:38:34.065727 24047 net.cpp:382] ip1 -> ip1
I0428 19:38:34.065840 24047 net.cpp:124] Setting up ip1
I0428 19:38:34.065848 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.065851 24047 net.cpp:139] Memory required for data: 958800
I0428 19:38:34.065860 24047 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:34.065866 24047 net.cpp:86] Creating Layer relu1
I0428 19:38:34.065870 24047 net.cpp:408] relu1 <- ip1
I0428 19:38:34.065874 24047 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:34.066051 24047 net.cpp:124] Setting up relu1
I0428 19:38:34.066061 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.066064 24047 net.cpp:139] Memory required for data: 962800
I0428 19:38:34.066068 24047 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:34.066077 24047 net.cpp:86] Creating Layer ip2
I0428 19:38:34.066082 24047 net.cpp:408] ip2 <- ip1
I0428 19:38:34.066087 24047 net.cpp:382] ip2 -> ip2
I0428 19:38:34.066200 24047 net.cpp:124] Setting up ip2
I0428 19:38:34.066210 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.066220 24047 net.cpp:139] Memory required for data: 966800
I0428 19:38:34.066226 24047 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:34.066231 24047 net.cpp:86] Creating Layer relu2
I0428 19:38:34.066234 24047 net.cpp:408] relu2 <- ip2
I0428 19:38:34.066238 24047 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:34.066421 24047 net.cpp:124] Setting up relu2
I0428 19:38:34.066431 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.066434 24047 net.cpp:139] Memory required for data: 970800
I0428 19:38:34.066437 24047 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:38:34.066442 24047 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:38:34.066445 24047 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:38:34.066450 24047 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:38:34.066457 24047 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:38:34.066514 24047 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:38:34.066520 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.066525 24047 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:34.066529 24047 net.cpp:139] Memory required for data: 978800
I0428 19:38:34.066531 24047 layer_factory.hpp:77] Creating layer accuracy
I0428 19:38:34.066537 24047 net.cpp:86] Creating Layer accuracy
I0428 19:38:34.066541 24047 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:38:34.066546 24047 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:38:34.066550 24047 net.cpp:382] accuracy -> accuracy
I0428 19:38:34.066557 24047 net.cpp:124] Setting up accuracy
I0428 19:38:34.066561 24047 net.cpp:131] Top shape: (1)
I0428 19:38:34.066565 24047 net.cpp:139] Memory required for data: 978804
I0428 19:38:34.066567 24047 layer_factory.hpp:77] Creating layer loss
I0428 19:38:34.066573 24047 net.cpp:86] Creating Layer loss
I0428 19:38:34.066578 24047 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:38:34.066582 24047 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:38:34.066586 24047 net.cpp:382] loss -> loss
I0428 19:38:34.066592 24047 layer_factory.hpp:77] Creating layer loss
I0428 19:38:34.066856 24047 net.cpp:124] Setting up loss
I0428 19:38:34.066865 24047 net.cpp:131] Top shape: (1)
I0428 19:38:34.066869 24047 net.cpp:134]     with loss weight 1
I0428 19:38:34.066876 24047 net.cpp:139] Memory required for data: 978808
I0428 19:38:34.066880 24047 net.cpp:200] loss needs backward computation.
I0428 19:38:34.066884 24047 net.cpp:202] accuracy does not need backward computation.
I0428 19:38:34.066897 24047 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:38:34.066900 24047 net.cpp:200] relu2 needs backward computation.
I0428 19:38:34.066903 24047 net.cpp:200] ip2 needs backward computation.
I0428 19:38:34.066912 24047 net.cpp:200] relu1 needs backward computation.
I0428 19:38:34.066915 24047 net.cpp:200] ip1 needs backward computation.
I0428 19:38:34.066918 24047 net.cpp:200] pool1 needs backward computation.
I0428 19:38:34.066921 24047 net.cpp:200] conv1 needs backward computation.
I0428 19:38:34.066936 24047 net.cpp:200] pool0 needs backward computation.
I0428 19:38:34.066938 24047 net.cpp:200] conv0 needs backward computation.
I0428 19:38:34.066942 24047 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:38:34.066946 24047 net.cpp:202] mnist does not need backward computation.
I0428 19:38:34.066949 24047 net.cpp:244] This network produces output accuracy
I0428 19:38:34.066952 24047 net.cpp:244] This network produces output loss
I0428 19:38:34.066964 24047 net.cpp:257] Network initialization done.
I0428 19:38:34.067004 24047 solver.cpp:56] Solver scaffolding done.
I0428 19:38:34.067296 24047 caffe.cpp:248] Starting Optimization
I0428 19:38:34.067303 24047 solver.cpp:273] Solving LeNet
I0428 19:38:34.067306 24047 solver.cpp:274] Learning Rate Policy: inv
I0428 19:38:34.068125 24047 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:38:34.069957 24047 blocking_queue.cpp:49] Waiting for data
I0428 19:38:34.140501 24054 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:34.141065 24047 solver.cpp:398]     Test net output #0: accuracy = 0.1041
I0428 19:38:34.141098 24047 solver.cpp:398]     Test net output #1: loss = 2.3288 (* 1 = 2.3288 loss)
I0428 19:38:34.143481 24047 solver.cpp:219] Iteration 0 (-1.08601e-42 iter/s, 0.0761395s/100 iters), loss = 2.34079
I0428 19:38:34.143519 24047 solver.cpp:238]     Train net output #0: loss = 2.34079 (* 1 = 2.34079 loss)
I0428 19:38:34.143538 24047 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:38:34.218354 24047 solver.cpp:219] Iteration 100 (1336.46 iter/s, 0.0748247s/100 iters), loss = 1.14707
I0428 19:38:34.218384 24047 solver.cpp:238]     Train net output #0: loss = 1.14707 (* 1 = 1.14707 loss)
I0428 19:38:34.218403 24047 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:38:34.282797 24047 solver.cpp:219] Iteration 200 (1552.74 iter/s, 0.0644024s/100 iters), loss = 0.596643
I0428 19:38:34.282836 24047 solver.cpp:238]     Train net output #0: loss = 0.596643 (* 1 = 0.596643 loss)
I0428 19:38:34.282855 24047 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:38:34.342690 24047 solver.cpp:219] Iteration 300 (1670.88 iter/s, 0.0598486s/100 iters), loss = 0.432114
I0428 19:38:34.342715 24047 solver.cpp:238]     Train net output #0: loss = 0.432114 (* 1 = 0.432114 loss)
I0428 19:38:34.342736 24047 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:38:34.401592 24047 solver.cpp:219] Iteration 400 (1698.64 iter/s, 0.0588707s/100 iters), loss = 0.401465
I0428 19:38:34.401617 24047 solver.cpp:238]     Train net output #0: loss = 0.401465 (* 1 = 0.401465 loss)
I0428 19:38:34.401638 24047 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:38:34.460494 24047 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:38:34.504842 24054 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:34.505234 24047 solver.cpp:398]     Test net output #0: accuracy = 0.9082
I0428 19:38:34.505252 24047 solver.cpp:398]     Test net output #1: loss = 0.317074 (* 1 = 0.317074 loss)
I0428 19:38:34.505955 24047 solver.cpp:219] Iteration 500 (958.514 iter/s, 0.104328s/100 iters), loss = 0.292765
I0428 19:38:34.505977 24047 solver.cpp:238]     Train net output #0: loss = 0.292765 (* 1 = 0.292765 loss)
I0428 19:38:34.505983 24047 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:38:34.568104 24047 solver.cpp:219] Iteration 600 (1609.82 iter/s, 0.0621189s/100 iters), loss = 0.208303
I0428 19:38:34.568130 24047 solver.cpp:238]     Train net output #0: loss = 0.208303 (* 1 = 0.208303 loss)
I0428 19:38:34.568156 24047 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:38:34.630005 24047 solver.cpp:219] Iteration 700 (1616.35 iter/s, 0.0618679s/100 iters), loss = 0.320301
I0428 19:38:34.630028 24047 solver.cpp:238]     Train net output #0: loss = 0.320301 (* 1 = 0.320301 loss)
I0428 19:38:34.630053 24047 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:38:34.692159 24047 solver.cpp:219] Iteration 800 (1609.74 iter/s, 0.062122s/100 iters), loss = 0.477644
I0428 19:38:34.692184 24047 solver.cpp:238]     Train net output #0: loss = 0.477644 (* 1 = 0.477644 loss)
I0428 19:38:34.692209 24047 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:38:34.754271 24047 solver.cpp:219] Iteration 900 (1610.88 iter/s, 0.062078s/100 iters), loss = 0.462481
I0428 19:38:34.754295 24047 solver.cpp:238]     Train net output #0: loss = 0.462481 (* 1 = 0.462481 loss)
I0428 19:38:34.754319 24047 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:38:34.775096 24053 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:34.815851 24047 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:38:34.816402 24047 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:38:34.816762 24047 solver.cpp:311] Iteration 1000, loss = 0.385791
I0428 19:38:34.816778 24047 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:38:34.863812 24054 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:34.864259 24047 solver.cpp:398]     Test net output #0: accuracy = 0.9117
I0428 19:38:34.864277 24047 solver.cpp:398]     Test net output #1: loss = 0.287598 (* 1 = 0.287598 loss)
I0428 19:38:34.864282 24047 solver.cpp:316] Optimization Done.
I0428 19:38:34.864286 24047 caffe.cpp:259] Optimization Done.
