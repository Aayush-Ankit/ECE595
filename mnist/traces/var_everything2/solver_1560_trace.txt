I0428 20:31:44.145344  3998 caffe.cpp:218] Using GPUs 0
I0428 20:31:44.186005  3998 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:31:44.708083  3998 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1560.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:31:44.708222  3998 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1560.prototxt
I0428 20:31:44.708564  3998 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:31:44.708581  3998 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:31:44.708663  3998 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:31:44.708735  3998 layer_factory.hpp:77] Creating layer mnist
I0428 20:31:44.708843  3998 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:31:44.708869  3998 net.cpp:86] Creating Layer mnist
I0428 20:31:44.708878  3998 net.cpp:382] mnist -> data
I0428 20:31:44.708900  3998 net.cpp:382] mnist -> label
I0428 20:31:44.710001  3998 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:31:44.712452  3998 net.cpp:124] Setting up mnist
I0428 20:31:44.712471  3998 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:31:44.712478  3998 net.cpp:131] Top shape: 64 (64)
I0428 20:31:44.712483  3998 net.cpp:139] Memory required for data: 200960
I0428 20:31:44.712491  3998 layer_factory.hpp:77] Creating layer conv0
I0428 20:31:44.712507  3998 net.cpp:86] Creating Layer conv0
I0428 20:31:44.712512  3998 net.cpp:408] conv0 <- data
I0428 20:31:44.712525  3998 net.cpp:382] conv0 -> conv0
I0428 20:31:45.003497  3998 net.cpp:124] Setting up conv0
I0428 20:31:45.003530  3998 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:31:45.003535  3998 net.cpp:139] Memory required for data: 14946560
I0428 20:31:45.003552  3998 layer_factory.hpp:77] Creating layer pool0
I0428 20:31:45.003567  3998 net.cpp:86] Creating Layer pool0
I0428 20:31:45.003571  3998 net.cpp:408] pool0 <- conv0
I0428 20:31:45.003578  3998 net.cpp:382] pool0 -> pool0
I0428 20:31:45.003631  3998 net.cpp:124] Setting up pool0
I0428 20:31:45.003638  3998 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:31:45.003659  3998 net.cpp:139] Memory required for data: 18632960
I0428 20:31:45.003664  3998 layer_factory.hpp:77] Creating layer conv1
I0428 20:31:45.003676  3998 net.cpp:86] Creating Layer conv1
I0428 20:31:45.003680  3998 net.cpp:408] conv1 <- pool0
I0428 20:31:45.003686  3998 net.cpp:382] conv1 -> conv1
I0428 20:31:45.006150  3998 net.cpp:124] Setting up conv1
I0428 20:31:45.006167  3998 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:31:45.006172  3998 net.cpp:139] Memory required for data: 19042560
I0428 20:31:45.006181  3998 layer_factory.hpp:77] Creating layer pool1
I0428 20:31:45.006191  3998 net.cpp:86] Creating Layer pool1
I0428 20:31:45.006193  3998 net.cpp:408] pool1 <- conv1
I0428 20:31:45.006201  3998 net.cpp:382] pool1 -> pool1
I0428 20:31:45.006240  3998 net.cpp:124] Setting up pool1
I0428 20:31:45.006247  3998 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:31:45.006250  3998 net.cpp:139] Memory required for data: 19144960
I0428 20:31:45.006253  3998 layer_factory.hpp:77] Creating layer ip1
I0428 20:31:45.006261  3998 net.cpp:86] Creating Layer ip1
I0428 20:31:45.006264  3998 net.cpp:408] ip1 <- pool1
I0428 20:31:45.006269  3998 net.cpp:382] ip1 -> ip1
I0428 20:31:45.006407  3998 net.cpp:124] Setting up ip1
I0428 20:31:45.006417  3998 net.cpp:131] Top shape: 64 10 (640)
I0428 20:31:45.006422  3998 net.cpp:139] Memory required for data: 19147520
I0428 20:31:45.006429  3998 layer_factory.hpp:77] Creating layer relu1
I0428 20:31:45.006435  3998 net.cpp:86] Creating Layer relu1
I0428 20:31:45.006439  3998 net.cpp:408] relu1 <- ip1
I0428 20:31:45.006443  3998 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:31:45.006624  3998 net.cpp:124] Setting up relu1
I0428 20:31:45.006634  3998 net.cpp:131] Top shape: 64 10 (640)
I0428 20:31:45.006639  3998 net.cpp:139] Memory required for data: 19150080
I0428 20:31:45.006641  3998 layer_factory.hpp:77] Creating layer loss
I0428 20:31:45.006647  3998 net.cpp:86] Creating Layer loss
I0428 20:31:45.006651  3998 net.cpp:408] loss <- ip1
I0428 20:31:45.006655  3998 net.cpp:408] loss <- label
I0428 20:31:45.006661  3998 net.cpp:382] loss -> loss
I0428 20:31:45.006680  3998 layer_factory.hpp:77] Creating layer loss
I0428 20:31:45.007552  3998 net.cpp:124] Setting up loss
I0428 20:31:45.007566  3998 net.cpp:131] Top shape: (1)
I0428 20:31:45.007570  3998 net.cpp:134]     with loss weight 1
I0428 20:31:45.007586  3998 net.cpp:139] Memory required for data: 19150084
I0428 20:31:45.007591  3998 net.cpp:200] loss needs backward computation.
I0428 20:31:45.007594  3998 net.cpp:200] relu1 needs backward computation.
I0428 20:31:45.007599  3998 net.cpp:200] ip1 needs backward computation.
I0428 20:31:45.007602  3998 net.cpp:200] pool1 needs backward computation.
I0428 20:31:45.007606  3998 net.cpp:200] conv1 needs backward computation.
I0428 20:31:45.007609  3998 net.cpp:200] pool0 needs backward computation.
I0428 20:31:45.007612  3998 net.cpp:200] conv0 needs backward computation.
I0428 20:31:45.007616  3998 net.cpp:202] mnist does not need backward computation.
I0428 20:31:45.007619  3998 net.cpp:244] This network produces output loss
I0428 20:31:45.007628  3998 net.cpp:257] Network initialization done.
I0428 20:31:45.007905  3998 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1560.prototxt
I0428 20:31:45.007932  3998 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:31:45.008014  3998 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:31:45.008092  3998 layer_factory.hpp:77] Creating layer mnist
I0428 20:31:45.008141  3998 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:31:45.008154  3998 net.cpp:86] Creating Layer mnist
I0428 20:31:45.008159  3998 net.cpp:382] mnist -> data
I0428 20:31:45.008167  3998 net.cpp:382] mnist -> label
I0428 20:31:45.008260  3998 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:31:45.010494  3998 net.cpp:124] Setting up mnist
I0428 20:31:45.010509  3998 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:31:45.010515  3998 net.cpp:131] Top shape: 100 (100)
I0428 20:31:45.010519  3998 net.cpp:139] Memory required for data: 314000
I0428 20:31:45.010524  3998 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:31:45.010535  3998 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:31:45.010538  3998 net.cpp:408] label_mnist_1_split <- label
I0428 20:31:45.010543  3998 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:31:45.010551  3998 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:31:45.010592  3998 net.cpp:124] Setting up label_mnist_1_split
I0428 20:31:45.010598  3998 net.cpp:131] Top shape: 100 (100)
I0428 20:31:45.010602  3998 net.cpp:131] Top shape: 100 (100)
I0428 20:31:45.010606  3998 net.cpp:139] Memory required for data: 314800
I0428 20:31:45.010608  3998 layer_factory.hpp:77] Creating layer conv0
I0428 20:31:45.010617  3998 net.cpp:86] Creating Layer conv0
I0428 20:31:45.010620  3998 net.cpp:408] conv0 <- data
I0428 20:31:45.010627  3998 net.cpp:382] conv0 -> conv0
I0428 20:31:45.011641  3998 net.cpp:124] Setting up conv0
I0428 20:31:45.011656  3998 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:31:45.011659  3998 net.cpp:139] Memory required for data: 23354800
I0428 20:31:45.011669  3998 layer_factory.hpp:77] Creating layer pool0
I0428 20:31:45.011677  3998 net.cpp:86] Creating Layer pool0
I0428 20:31:45.011679  3998 net.cpp:408] pool0 <- conv0
I0428 20:31:45.011687  3998 net.cpp:382] pool0 -> pool0
I0428 20:31:45.011728  3998 net.cpp:124] Setting up pool0
I0428 20:31:45.011734  3998 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:31:45.011737  3998 net.cpp:139] Memory required for data: 29114800
I0428 20:31:45.011740  3998 layer_factory.hpp:77] Creating layer conv1
I0428 20:31:45.011750  3998 net.cpp:86] Creating Layer conv1
I0428 20:31:45.011754  3998 net.cpp:408] conv1 <- pool0
I0428 20:31:45.011760  3998 net.cpp:382] conv1 -> conv1
I0428 20:31:45.013833  3998 net.cpp:124] Setting up conv1
I0428 20:31:45.013847  3998 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:31:45.013852  3998 net.cpp:139] Memory required for data: 29754800
I0428 20:31:45.013862  3998 layer_factory.hpp:77] Creating layer pool1
I0428 20:31:45.013877  3998 net.cpp:86] Creating Layer pool1
I0428 20:31:45.013892  3998 net.cpp:408] pool1 <- conv1
I0428 20:31:45.013900  3998 net.cpp:382] pool1 -> pool1
I0428 20:31:45.013942  3998 net.cpp:124] Setting up pool1
I0428 20:31:45.013949  3998 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:31:45.013952  3998 net.cpp:139] Memory required for data: 29914800
I0428 20:31:45.013955  3998 layer_factory.hpp:77] Creating layer ip1
I0428 20:31:45.013962  3998 net.cpp:86] Creating Layer ip1
I0428 20:31:45.013965  3998 net.cpp:408] ip1 <- pool1
I0428 20:31:45.013972  3998 net.cpp:382] ip1 -> ip1
I0428 20:31:45.014103  3998 net.cpp:124] Setting up ip1
I0428 20:31:45.014112  3998 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:45.014117  3998 net.cpp:139] Memory required for data: 29918800
I0428 20:31:45.014125  3998 layer_factory.hpp:77] Creating layer relu1
I0428 20:31:45.014130  3998 net.cpp:86] Creating Layer relu1
I0428 20:31:45.014135  3998 net.cpp:408] relu1 <- ip1
I0428 20:31:45.014142  3998 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:31:45.015022  3998 net.cpp:124] Setting up relu1
I0428 20:31:45.015035  3998 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:45.015039  3998 net.cpp:139] Memory required for data: 29922800
I0428 20:31:45.015043  3998 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:31:45.015051  3998 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:31:45.015055  3998 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:31:45.015061  3998 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:31:45.015069  3998 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:31:45.015111  3998 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:31:45.015118  3998 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:45.015122  3998 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:45.015125  3998 net.cpp:139] Memory required for data: 29930800
I0428 20:31:45.015136  3998 layer_factory.hpp:77] Creating layer accuracy
I0428 20:31:45.015141  3998 net.cpp:86] Creating Layer accuracy
I0428 20:31:45.015144  3998 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:31:45.015149  3998 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:31:45.015156  3998 net.cpp:382] accuracy -> accuracy
I0428 20:31:45.015163  3998 net.cpp:124] Setting up accuracy
I0428 20:31:45.015167  3998 net.cpp:131] Top shape: (1)
I0428 20:31:45.015171  3998 net.cpp:139] Memory required for data: 29930804
I0428 20:31:45.015173  3998 layer_factory.hpp:77] Creating layer loss
I0428 20:31:45.015185  3998 net.cpp:86] Creating Layer loss
I0428 20:31:45.015188  3998 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:31:45.015192  3998 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:31:45.015198  3998 net.cpp:382] loss -> loss
I0428 20:31:45.015204  3998 layer_factory.hpp:77] Creating layer loss
I0428 20:31:45.015468  3998 net.cpp:124] Setting up loss
I0428 20:31:45.015480  3998 net.cpp:131] Top shape: (1)
I0428 20:31:45.015483  3998 net.cpp:134]     with loss weight 1
I0428 20:31:45.015491  3998 net.cpp:139] Memory required for data: 29930808
I0428 20:31:45.015494  3998 net.cpp:200] loss needs backward computation.
I0428 20:31:45.015501  3998 net.cpp:202] accuracy does not need backward computation.
I0428 20:31:45.015504  3998 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:31:45.015508  3998 net.cpp:200] relu1 needs backward computation.
I0428 20:31:45.015511  3998 net.cpp:200] ip1 needs backward computation.
I0428 20:31:45.015516  3998 net.cpp:200] pool1 needs backward computation.
I0428 20:31:45.015518  3998 net.cpp:200] conv1 needs backward computation.
I0428 20:31:45.015533  3998 net.cpp:200] pool0 needs backward computation.
I0428 20:31:45.015537  3998 net.cpp:200] conv0 needs backward computation.
I0428 20:31:45.015542  3998 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:31:45.015545  3998 net.cpp:202] mnist does not need backward computation.
I0428 20:31:45.015548  3998 net.cpp:244] This network produces output accuracy
I0428 20:31:45.015552  3998 net.cpp:244] This network produces output loss
I0428 20:31:45.015574  3998 net.cpp:257] Network initialization done.
I0428 20:31:45.015611  3998 solver.cpp:56] Solver scaffolding done.
I0428 20:31:45.015838  3998 caffe.cpp:248] Starting Optimization
I0428 20:31:45.015846  3998 solver.cpp:273] Solving LeNet
I0428 20:31:45.015849  3998 solver.cpp:274] Learning Rate Policy: inv
I0428 20:31:45.016032  3998 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:31:45.109205  4005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:45.111497  3998 solver.cpp:398]     Test net output #0: accuracy = 0.1066
I0428 20:31:45.111532  3998 solver.cpp:398]     Test net output #1: loss = 2.37638 (* 1 = 2.37638 loss)
I0428 20:31:45.115762  3998 solver.cpp:219] Iteration 0 (-2.22859e-31 iter/s, 0.0998861s/100 iters), loss = 2.38811
I0428 20:31:45.115785  3998 solver.cpp:238]     Train net output #0: loss = 2.38811 (* 1 = 2.38811 loss)
I0428 20:31:45.115797  3998 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:31:45.321508  3998 solver.cpp:219] Iteration 100 (486.169 iter/s, 0.20569s/100 iters), loss = 0.258779
I0428 20:31:45.321561  3998 solver.cpp:238]     Train net output #0: loss = 0.258779 (* 1 = 0.258779 loss)
I0428 20:31:45.321575  3998 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:31:45.533360  3998 solver.cpp:219] Iteration 200 (472.198 iter/s, 0.211775s/100 iters), loss = 0.134074
I0428 20:31:45.533409  3998 solver.cpp:238]     Train net output #0: loss = 0.134074 (* 1 = 0.134074 loss)
I0428 20:31:45.533422  3998 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:31:45.742944  3998 solver.cpp:219] Iteration 300 (477.287 iter/s, 0.209518s/100 iters), loss = 0.158202
I0428 20:31:45.742998  3998 solver.cpp:238]     Train net output #0: loss = 0.158202 (* 1 = 0.158202 loss)
I0428 20:31:45.743010  3998 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:31:45.954144  3998 solver.cpp:219] Iteration 400 (473.65 iter/s, 0.211126s/100 iters), loss = 0.0599848
I0428 20:31:45.954201  3998 solver.cpp:238]     Train net output #0: loss = 0.0599849 (* 1 = 0.0599849 loss)
I0428 20:31:45.954216  3998 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:31:46.165910  3998 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:31:46.265609  4005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:46.268997  3998 solver.cpp:398]     Test net output #0: accuracy = 0.9682
I0428 20:31:46.269026  3998 solver.cpp:398]     Test net output #1: loss = 0.0963606 (* 1 = 0.0963606 loss)
I0428 20:31:46.270941  3998 solver.cpp:219] Iteration 500 (315.731 iter/s, 0.316725s/100 iters), loss = 0.136602
I0428 20:31:46.270970  3998 solver.cpp:238]     Train net output #0: loss = 0.136602 (* 1 = 0.136602 loss)
I0428 20:31:46.270983  3998 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:31:46.473471  3998 solver.cpp:219] Iteration 600 (493.877 iter/s, 0.20248s/100 iters), loss = 0.0829738
I0428 20:31:46.473525  3998 solver.cpp:238]     Train net output #0: loss = 0.082974 (* 1 = 0.082974 loss)
I0428 20:31:46.473538  3998 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:31:46.688653  3998 solver.cpp:219] Iteration 700 (464.872 iter/s, 0.215113s/100 iters), loss = 0.168473
I0428 20:31:46.688706  3998 solver.cpp:238]     Train net output #0: loss = 0.168473 (* 1 = 0.168473 loss)
I0428 20:31:46.688720  3998 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:31:46.904624  3998 solver.cpp:219] Iteration 800 (463.175 iter/s, 0.215901s/100 iters), loss = 0.155643
I0428 20:31:46.904678  3998 solver.cpp:238]     Train net output #0: loss = 0.155643 (* 1 = 0.155643 loss)
I0428 20:31:46.904692  3998 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:31:47.119681  3998 solver.cpp:219] Iteration 900 (465.148 iter/s, 0.214986s/100 iters), loss = 0.163803
I0428 20:31:47.119731  3998 solver.cpp:238]     Train net output #0: loss = 0.163803 (* 1 = 0.163803 loss)
I0428 20:31:47.119743  3998 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:31:47.191493  4004 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:47.332747  3998 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:31:47.335764  3998 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:31:47.337625  3998 solver.cpp:311] Iteration 1000, loss = 0.163454
I0428 20:31:47.337653  3998 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:31:47.435771  4005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:47.439196  3998 solver.cpp:398]     Test net output #0: accuracy = 0.9744
I0428 20:31:47.439220  3998 solver.cpp:398]     Test net output #1: loss = 0.0824724 (* 1 = 0.0824724 loss)
I0428 20:31:47.439227  3998 solver.cpp:316] Optimization Done.
I0428 20:31:47.439230  3998 caffe.cpp:259] Optimization Done.
