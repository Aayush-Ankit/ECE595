I0428 20:11:52.996570 32160 caffe.cpp:218] Using GPUs 0
I0428 20:11:53.033334 32160 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:11:53.547209 32160 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1169.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:11:53.547336 32160 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1169.prototxt
I0428 20:11:53.547745 32160 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:11:53.547765 32160 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:11:53.547865 32160 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:11:53.547940 32160 layer_factory.hpp:77] Creating layer mnist
I0428 20:11:53.548038 32160 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:11:53.548059 32160 net.cpp:86] Creating Layer mnist
I0428 20:11:53.548069 32160 net.cpp:382] mnist -> data
I0428 20:11:53.548089 32160 net.cpp:382] mnist -> label
I0428 20:11:53.549171 32160 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:11:53.551554 32160 net.cpp:124] Setting up mnist
I0428 20:11:53.551570 32160 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:11:53.551576 32160 net.cpp:131] Top shape: 64 (64)
I0428 20:11:53.551580 32160 net.cpp:139] Memory required for data: 200960
I0428 20:11:53.551586 32160 layer_factory.hpp:77] Creating layer conv0
I0428 20:11:53.551610 32160 net.cpp:86] Creating Layer conv0
I0428 20:11:53.551630 32160 net.cpp:408] conv0 <- data
I0428 20:11:53.551645 32160 net.cpp:382] conv0 -> conv0
I0428 20:11:53.835764 32160 net.cpp:124] Setting up conv0
I0428 20:11:53.835796 32160 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:11:53.835801 32160 net.cpp:139] Memory required for data: 3887360
I0428 20:11:53.835820 32160 layer_factory.hpp:77] Creating layer pool0
I0428 20:11:53.835834 32160 net.cpp:86] Creating Layer pool0
I0428 20:11:53.835839 32160 net.cpp:408] pool0 <- conv0
I0428 20:11:53.835846 32160 net.cpp:382] pool0 -> pool0
I0428 20:11:53.835901 32160 net.cpp:124] Setting up pool0
I0428 20:11:53.835909 32160 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:11:53.835913 32160 net.cpp:139] Memory required for data: 4808960
I0428 20:11:53.835917 32160 layer_factory.hpp:77] Creating layer conv1
I0428 20:11:53.835929 32160 net.cpp:86] Creating Layer conv1
I0428 20:11:53.835932 32160 net.cpp:408] conv1 <- pool0
I0428 20:11:53.835938 32160 net.cpp:382] conv1 -> conv1
I0428 20:11:53.838312 32160 net.cpp:124] Setting up conv1
I0428 20:11:53.838330 32160 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:11:53.838335 32160 net.cpp:139] Memory required for data: 5628160
I0428 20:11:53.838345 32160 layer_factory.hpp:77] Creating layer pool1
I0428 20:11:53.838353 32160 net.cpp:86] Creating Layer pool1
I0428 20:11:53.838358 32160 net.cpp:408] pool1 <- conv1
I0428 20:11:53.838364 32160 net.cpp:382] pool1 -> pool1
I0428 20:11:53.838408 32160 net.cpp:124] Setting up pool1
I0428 20:11:53.838415 32160 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:11:53.838419 32160 net.cpp:139] Memory required for data: 5832960
I0428 20:11:53.838423 32160 layer_factory.hpp:77] Creating layer ip1
I0428 20:11:53.838431 32160 net.cpp:86] Creating Layer ip1
I0428 20:11:53.838435 32160 net.cpp:408] ip1 <- pool1
I0428 20:11:53.838440 32160 net.cpp:382] ip1 -> ip1
I0428 20:11:53.838836 32160 net.cpp:124] Setting up ip1
I0428 20:11:53.838846 32160 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:11:53.838850 32160 net.cpp:139] Memory required for data: 5845760
I0428 20:11:53.838860 32160 layer_factory.hpp:77] Creating layer relu1
I0428 20:11:53.838866 32160 net.cpp:86] Creating Layer relu1
I0428 20:11:53.838871 32160 net.cpp:408] relu1 <- ip1
I0428 20:11:53.838876 32160 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:11:53.839074 32160 net.cpp:124] Setting up relu1
I0428 20:11:53.839085 32160 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:11:53.839088 32160 net.cpp:139] Memory required for data: 5858560
I0428 20:11:53.839092 32160 layer_factory.hpp:77] Creating layer ip2
I0428 20:11:53.839100 32160 net.cpp:86] Creating Layer ip2
I0428 20:11:53.839104 32160 net.cpp:408] ip2 <- ip1
I0428 20:11:53.839109 32160 net.cpp:382] ip2 -> ip2
I0428 20:11:53.840236 32160 net.cpp:124] Setting up ip2
I0428 20:11:53.840251 32160 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:11:53.840255 32160 net.cpp:139] Memory required for data: 5871360
I0428 20:11:53.840263 32160 layer_factory.hpp:77] Creating layer relu2
I0428 20:11:53.840271 32160 net.cpp:86] Creating Layer relu2
I0428 20:11:53.840276 32160 net.cpp:408] relu2 <- ip2
I0428 20:11:53.840281 32160 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:11:53.841142 32160 net.cpp:124] Setting up relu2
I0428 20:11:53.841158 32160 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:11:53.841162 32160 net.cpp:139] Memory required for data: 5884160
I0428 20:11:53.841167 32160 layer_factory.hpp:77] Creating layer ip3
I0428 20:11:53.841176 32160 net.cpp:86] Creating Layer ip3
I0428 20:11:53.841179 32160 net.cpp:408] ip3 <- ip2
I0428 20:11:53.841187 32160 net.cpp:382] ip3 -> ip3
I0428 20:11:53.841306 32160 net.cpp:124] Setting up ip3
I0428 20:11:53.841316 32160 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:53.841320 32160 net.cpp:139] Memory required for data: 5886720
I0428 20:11:53.841330 32160 layer_factory.hpp:77] Creating layer relu3
I0428 20:11:53.841336 32160 net.cpp:86] Creating Layer relu3
I0428 20:11:53.841339 32160 net.cpp:408] relu3 <- ip3
I0428 20:11:53.841346 32160 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:11:53.841552 32160 net.cpp:124] Setting up relu3
I0428 20:11:53.841562 32160 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:53.841567 32160 net.cpp:139] Memory required for data: 5889280
I0428 20:11:53.841570 32160 layer_factory.hpp:77] Creating layer loss
I0428 20:11:53.841578 32160 net.cpp:86] Creating Layer loss
I0428 20:11:53.841583 32160 net.cpp:408] loss <- ip3
I0428 20:11:53.841586 32160 net.cpp:408] loss <- label
I0428 20:11:53.841593 32160 net.cpp:382] loss -> loss
I0428 20:11:53.841609 32160 layer_factory.hpp:77] Creating layer loss
I0428 20:11:53.841905 32160 net.cpp:124] Setting up loss
I0428 20:11:53.841917 32160 net.cpp:131] Top shape: (1)
I0428 20:11:53.841919 32160 net.cpp:134]     with loss weight 1
I0428 20:11:53.841935 32160 net.cpp:139] Memory required for data: 5889284
I0428 20:11:53.841939 32160 net.cpp:200] loss needs backward computation.
I0428 20:11:53.841943 32160 net.cpp:200] relu3 needs backward computation.
I0428 20:11:53.841948 32160 net.cpp:200] ip3 needs backward computation.
I0428 20:11:53.841951 32160 net.cpp:200] relu2 needs backward computation.
I0428 20:11:53.841954 32160 net.cpp:200] ip2 needs backward computation.
I0428 20:11:53.841958 32160 net.cpp:200] relu1 needs backward computation.
I0428 20:11:53.841961 32160 net.cpp:200] ip1 needs backward computation.
I0428 20:11:53.841964 32160 net.cpp:200] pool1 needs backward computation.
I0428 20:11:53.841969 32160 net.cpp:200] conv1 needs backward computation.
I0428 20:11:53.841971 32160 net.cpp:200] pool0 needs backward computation.
I0428 20:11:53.841975 32160 net.cpp:200] conv0 needs backward computation.
I0428 20:11:53.841979 32160 net.cpp:202] mnist does not need backward computation.
I0428 20:11:53.841982 32160 net.cpp:244] This network produces output loss
I0428 20:11:53.841995 32160 net.cpp:257] Network initialization done.
I0428 20:11:53.842380 32160 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1169.prototxt
I0428 20:11:53.842411 32160 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:11:53.842522 32160 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:11:53.842620 32160 layer_factory.hpp:77] Creating layer mnist
I0428 20:11:53.842674 32160 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:11:53.842689 32160 net.cpp:86] Creating Layer mnist
I0428 20:11:53.842694 32160 net.cpp:382] mnist -> data
I0428 20:11:53.842702 32160 net.cpp:382] mnist -> label
I0428 20:11:53.842808 32160 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:11:53.845034 32160 net.cpp:124] Setting up mnist
I0428 20:11:53.845052 32160 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:11:53.845057 32160 net.cpp:131] Top shape: 100 (100)
I0428 20:11:53.845060 32160 net.cpp:139] Memory required for data: 314000
I0428 20:11:53.845064 32160 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:11:53.845072 32160 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:11:53.845077 32160 net.cpp:408] label_mnist_1_split <- label
I0428 20:11:53.845082 32160 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:11:53.845091 32160 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:11:53.845206 32160 net.cpp:124] Setting up label_mnist_1_split
I0428 20:11:53.845216 32160 net.cpp:131] Top shape: 100 (100)
I0428 20:11:53.845219 32160 net.cpp:131] Top shape: 100 (100)
I0428 20:11:53.845222 32160 net.cpp:139] Memory required for data: 314800
I0428 20:11:53.845227 32160 layer_factory.hpp:77] Creating layer conv0
I0428 20:11:53.845238 32160 net.cpp:86] Creating Layer conv0
I0428 20:11:53.845242 32160 net.cpp:408] conv0 <- data
I0428 20:11:53.845248 32160 net.cpp:382] conv0 -> conv0
I0428 20:11:53.847172 32160 net.cpp:124] Setting up conv0
I0428 20:11:53.847188 32160 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:11:53.847193 32160 net.cpp:139] Memory required for data: 6074800
I0428 20:11:53.847204 32160 layer_factory.hpp:77] Creating layer pool0
I0428 20:11:53.847213 32160 net.cpp:86] Creating Layer pool0
I0428 20:11:53.847216 32160 net.cpp:408] pool0 <- conv0
I0428 20:11:53.847223 32160 net.cpp:382] pool0 -> pool0
I0428 20:11:53.847267 32160 net.cpp:124] Setting up pool0
I0428 20:11:53.847275 32160 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:11:53.847277 32160 net.cpp:139] Memory required for data: 7514800
I0428 20:11:53.847281 32160 layer_factory.hpp:77] Creating layer conv1
I0428 20:11:53.847292 32160 net.cpp:86] Creating Layer conv1
I0428 20:11:53.847296 32160 net.cpp:408] conv1 <- pool0
I0428 20:11:53.847303 32160 net.cpp:382] conv1 -> conv1
I0428 20:11:53.849364 32160 net.cpp:124] Setting up conv1
I0428 20:11:53.849380 32160 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:11:53.849385 32160 net.cpp:139] Memory required for data: 8794800
I0428 20:11:53.849396 32160 layer_factory.hpp:77] Creating layer pool1
I0428 20:11:53.849406 32160 net.cpp:86] Creating Layer pool1
I0428 20:11:53.849409 32160 net.cpp:408] pool1 <- conv1
I0428 20:11:53.849416 32160 net.cpp:382] pool1 -> pool1
I0428 20:11:53.849462 32160 net.cpp:124] Setting up pool1
I0428 20:11:53.849467 32160 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:11:53.849472 32160 net.cpp:139] Memory required for data: 9114800
I0428 20:11:53.849475 32160 layer_factory.hpp:77] Creating layer ip1
I0428 20:11:53.849483 32160 net.cpp:86] Creating Layer ip1
I0428 20:11:53.849488 32160 net.cpp:408] ip1 <- pool1
I0428 20:11:53.849493 32160 net.cpp:382] ip1 -> ip1
I0428 20:11:53.849894 32160 net.cpp:124] Setting up ip1
I0428 20:11:53.849905 32160 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:11:53.849920 32160 net.cpp:139] Memory required for data: 9134800
I0428 20:11:53.849928 32160 layer_factory.hpp:77] Creating layer relu1
I0428 20:11:53.849934 32160 net.cpp:86] Creating Layer relu1
I0428 20:11:53.849938 32160 net.cpp:408] relu1 <- ip1
I0428 20:11:53.849946 32160 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:11:53.850153 32160 net.cpp:124] Setting up relu1
I0428 20:11:53.850164 32160 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:11:53.850167 32160 net.cpp:139] Memory required for data: 9154800
I0428 20:11:53.850172 32160 layer_factory.hpp:77] Creating layer ip2
I0428 20:11:53.850180 32160 net.cpp:86] Creating Layer ip2
I0428 20:11:53.850184 32160 net.cpp:408] ip2 <- ip1
I0428 20:11:53.850196 32160 net.cpp:382] ip2 -> ip2
I0428 20:11:53.850390 32160 net.cpp:124] Setting up ip2
I0428 20:11:53.850402 32160 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:11:53.850406 32160 net.cpp:139] Memory required for data: 9174800
I0428 20:11:53.850414 32160 layer_factory.hpp:77] Creating layer relu2
I0428 20:11:53.850425 32160 net.cpp:86] Creating Layer relu2
I0428 20:11:53.850430 32160 net.cpp:408] relu2 <- ip2
I0428 20:11:53.850435 32160 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:11:53.850628 32160 net.cpp:124] Setting up relu2
I0428 20:11:53.850639 32160 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:11:53.850643 32160 net.cpp:139] Memory required for data: 9194800
I0428 20:11:53.850647 32160 layer_factory.hpp:77] Creating layer ip3
I0428 20:11:53.850661 32160 net.cpp:86] Creating Layer ip3
I0428 20:11:53.850664 32160 net.cpp:408] ip3 <- ip2
I0428 20:11:53.850672 32160 net.cpp:382] ip3 -> ip3
I0428 20:11:53.850795 32160 net.cpp:124] Setting up ip3
I0428 20:11:53.850805 32160 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:53.850807 32160 net.cpp:139] Memory required for data: 9198800
I0428 20:11:53.850817 32160 layer_factory.hpp:77] Creating layer relu3
I0428 20:11:53.850824 32160 net.cpp:86] Creating Layer relu3
I0428 20:11:53.850833 32160 net.cpp:408] relu3 <- ip3
I0428 20:11:53.850838 32160 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:11:53.851773 32160 net.cpp:124] Setting up relu3
I0428 20:11:53.851788 32160 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:53.851790 32160 net.cpp:139] Memory required for data: 9202800
I0428 20:11:53.851794 32160 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:11:53.851800 32160 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:11:53.851804 32160 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:11:53.851810 32160 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:11:53.851819 32160 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:11:53.851866 32160 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:11:53.851872 32160 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:53.851876 32160 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:53.851879 32160 net.cpp:139] Memory required for data: 9210800
I0428 20:11:53.851883 32160 layer_factory.hpp:77] Creating layer accuracy
I0428 20:11:53.851891 32160 net.cpp:86] Creating Layer accuracy
I0428 20:11:53.851896 32160 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:11:53.851900 32160 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:11:53.851907 32160 net.cpp:382] accuracy -> accuracy
I0428 20:11:53.851922 32160 net.cpp:124] Setting up accuracy
I0428 20:11:53.851927 32160 net.cpp:131] Top shape: (1)
I0428 20:11:53.851932 32160 net.cpp:139] Memory required for data: 9210804
I0428 20:11:53.851934 32160 layer_factory.hpp:77] Creating layer loss
I0428 20:11:53.851943 32160 net.cpp:86] Creating Layer loss
I0428 20:11:53.851946 32160 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:11:53.851950 32160 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:11:53.851956 32160 net.cpp:382] loss -> loss
I0428 20:11:53.851963 32160 layer_factory.hpp:77] Creating layer loss
I0428 20:11:53.852265 32160 net.cpp:124] Setting up loss
I0428 20:11:53.852277 32160 net.cpp:131] Top shape: (1)
I0428 20:11:53.852282 32160 net.cpp:134]     with loss weight 1
I0428 20:11:53.852299 32160 net.cpp:139] Memory required for data: 9210808
I0428 20:11:53.852304 32160 net.cpp:200] loss needs backward computation.
I0428 20:11:53.852308 32160 net.cpp:202] accuracy does not need backward computation.
I0428 20:11:53.852313 32160 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:11:53.852318 32160 net.cpp:200] relu3 needs backward computation.
I0428 20:11:53.852321 32160 net.cpp:200] ip3 needs backward computation.
I0428 20:11:53.852325 32160 net.cpp:200] relu2 needs backward computation.
I0428 20:11:53.852329 32160 net.cpp:200] ip2 needs backward computation.
I0428 20:11:53.852332 32160 net.cpp:200] relu1 needs backward computation.
I0428 20:11:53.852335 32160 net.cpp:200] ip1 needs backward computation.
I0428 20:11:53.852339 32160 net.cpp:200] pool1 needs backward computation.
I0428 20:11:53.852344 32160 net.cpp:200] conv1 needs backward computation.
I0428 20:11:53.852347 32160 net.cpp:200] pool0 needs backward computation.
I0428 20:11:53.852350 32160 net.cpp:200] conv0 needs backward computation.
I0428 20:11:53.852365 32160 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:11:53.852370 32160 net.cpp:202] mnist does not need backward computation.
I0428 20:11:53.852373 32160 net.cpp:244] This network produces output accuracy
I0428 20:11:53.852377 32160 net.cpp:244] This network produces output loss
I0428 20:11:53.852391 32160 net.cpp:257] Network initialization done.
I0428 20:11:53.852438 32160 solver.cpp:56] Solver scaffolding done.
I0428 20:11:53.852872 32160 caffe.cpp:248] Starting Optimization
I0428 20:11:53.852880 32160 solver.cpp:273] Solving LeNet
I0428 20:11:53.852883 32160 solver.cpp:274] Learning Rate Policy: inv
I0428 20:11:53.853770 32160 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:11:53.860687 32160 blocking_queue.cpp:49] Waiting for data
I0428 20:11:53.933542 32167 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:53.934211 32160 solver.cpp:398]     Test net output #0: accuracy = 0.1259
I0428 20:11:53.934233 32160 solver.cpp:398]     Test net output #1: loss = 2.30613 (* 1 = 2.30613 loss)
I0428 20:11:53.938318 32160 solver.cpp:219] Iteration 0 (0 iter/s, 0.0853975s/100 iters), loss = 2.29201
I0428 20:11:53.938349 32160 solver.cpp:238]     Train net output #0: loss = 2.29201 (* 1 = 2.29201 loss)
I0428 20:11:53.938364 32160 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:11:54.066536 32160 solver.cpp:219] Iteration 100 (780.214 iter/s, 0.12817s/100 iters), loss = 0.931701
I0428 20:11:54.066572 32160 solver.cpp:238]     Train net output #0: loss = 0.931701 (* 1 = 0.931701 loss)
I0428 20:11:54.066581 32160 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:11:54.194603 32160 solver.cpp:219] Iteration 200 (781.162 iter/s, 0.128014s/100 iters), loss = 0.943145
I0428 20:11:54.194660 32160 solver.cpp:238]     Train net output #0: loss = 0.943145 (* 1 = 0.943145 loss)
I0428 20:11:54.194674 32160 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:11:54.337767 32160 solver.cpp:219] Iteration 300 (698.822 iter/s, 0.143098s/100 iters), loss = 0.813932
I0428 20:11:54.337808 32160 solver.cpp:238]     Train net output #0: loss = 0.813932 (* 1 = 0.813932 loss)
I0428 20:11:54.337818 32160 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:11:54.477494 32160 solver.cpp:219] Iteration 400 (715.986 iter/s, 0.139667s/100 iters), loss = 0.672332
I0428 20:11:54.477555 32160 solver.cpp:238]     Train net output #0: loss = 0.672332 (* 1 = 0.672332 loss)
I0428 20:11:54.477571 32160 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:11:54.621913 32160 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:11:54.689774 32167 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:54.691516 32160 solver.cpp:398]     Test net output #0: accuracy = 0.6959
I0428 20:11:54.691545 32160 solver.cpp:398]     Test net output #1: loss = 0.759592 (* 1 = 0.759592 loss)
I0428 20:11:54.692781 32160 solver.cpp:219] Iteration 500 (464.651 iter/s, 0.215215s/100 iters), loss = 0.725004
I0428 20:11:54.692842 32160 solver.cpp:238]     Train net output #0: loss = 0.725004 (* 1 = 0.725004 loss)
I0428 20:11:54.692852 32160 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:11:54.827173 32160 solver.cpp:219] Iteration 600 (744.49 iter/s, 0.13432s/100 iters), loss = 0.497415
I0428 20:11:54.827205 32160 solver.cpp:238]     Train net output #0: loss = 0.497415 (* 1 = 0.497415 loss)
I0428 20:11:54.827214 32160 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:11:54.954550 32160 solver.cpp:219] Iteration 700 (785.353 iter/s, 0.127331s/100 iters), loss = 0.764808
I0428 20:11:54.954581 32160 solver.cpp:238]     Train net output #0: loss = 0.764808 (* 1 = 0.764808 loss)
I0428 20:11:54.954588 32160 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:11:55.080765 32160 solver.cpp:219] Iteration 800 (792.574 iter/s, 0.126171s/100 iters), loss = 0.695942
I0428 20:11:55.080796 32160 solver.cpp:238]     Train net output #0: loss = 0.695942 (* 1 = 0.695942 loss)
I0428 20:11:55.080804 32160 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:11:55.207712 32160 solver.cpp:219] Iteration 900 (787.995 iter/s, 0.126904s/100 iters), loss = 0.596688
I0428 20:11:55.207746 32160 solver.cpp:238]     Train net output #0: loss = 0.596688 (* 1 = 0.596688 loss)
I0428 20:11:55.207754 32160 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:11:55.251073 32166 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:55.341169 32160 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:11:55.344291 32160 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:11:55.345984 32160 solver.cpp:311] Iteration 1000, loss = 0.676667
I0428 20:11:55.346014 32160 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:11:55.423207 32167 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:55.423904 32160 solver.cpp:398]     Test net output #0: accuracy = 0.7943
I0428 20:11:55.423931 32160 solver.cpp:398]     Test net output #1: loss = 0.510466 (* 1 = 0.510466 loss)
I0428 20:11:55.423938 32160 solver.cpp:316] Optimization Done.
I0428 20:11:55.423943 32160 caffe.cpp:259] Optimization Done.
