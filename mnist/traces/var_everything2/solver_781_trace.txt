I0428 19:57:11.301806 28616 caffe.cpp:218] Using GPUs 0
I0428 19:57:11.339030 28616 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:11.846379 28616 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test781.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:11.846525 28616 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test781.prototxt
I0428 19:57:11.846869 28616 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:11.846884 28616 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:11.846966 28616 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:11.847040 28616 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:11.847141 28616 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:11.847165 28616 net.cpp:86] Creating Layer mnist
I0428 19:57:11.847174 28616 net.cpp:382] mnist -> data
I0428 19:57:11.847196 28616 net.cpp:382] mnist -> label
I0428 19:57:11.848291 28616 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:11.850762 28616 net.cpp:124] Setting up mnist
I0428 19:57:11.850782 28616 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:11.850790 28616 net.cpp:131] Top shape: 64 (64)
I0428 19:57:11.850792 28616 net.cpp:139] Memory required for data: 200960
I0428 19:57:11.850800 28616 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:11.850816 28616 net.cpp:86] Creating Layer conv0
I0428 19:57:11.850822 28616 net.cpp:408] conv0 <- data
I0428 19:57:11.850833 28616 net.cpp:382] conv0 -> conv0
I0428 19:57:12.099025 28616 net.cpp:124] Setting up conv0
I0428 19:57:12.099051 28616 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:12.099056 28616 net.cpp:139] Memory required for data: 1675520
I0428 19:57:12.099071 28616 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:12.099098 28616 net.cpp:86] Creating Layer pool0
I0428 19:57:12.099102 28616 net.cpp:408] pool0 <- conv0
I0428 19:57:12.099107 28616 net.cpp:382] pool0 -> pool0
I0428 19:57:12.099153 28616 net.cpp:124] Setting up pool0
I0428 19:57:12.099164 28616 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:12.099180 28616 net.cpp:139] Memory required for data: 2044160
I0428 19:57:12.099184 28616 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:12.099195 28616 net.cpp:86] Creating Layer conv1
I0428 19:57:12.099198 28616 net.cpp:408] conv1 <- pool0
I0428 19:57:12.099203 28616 net.cpp:382] conv1 -> conv1
I0428 19:57:12.102044 28616 net.cpp:124] Setting up conv1
I0428 19:57:12.102068 28616 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:12.102072 28616 net.cpp:139] Memory required for data: 2126080
I0428 19:57:12.102080 28616 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:12.102089 28616 net.cpp:86] Creating Layer pool1
I0428 19:57:12.102108 28616 net.cpp:408] pool1 <- conv1
I0428 19:57:12.102113 28616 net.cpp:382] pool1 -> pool1
I0428 19:57:12.102151 28616 net.cpp:124] Setting up pool1
I0428 19:57:12.102167 28616 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:12.102170 28616 net.cpp:139] Memory required for data: 2146560
I0428 19:57:12.102174 28616 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:12.102181 28616 net.cpp:86] Creating Layer ip1
I0428 19:57:12.102185 28616 net.cpp:408] ip1 <- pool1
I0428 19:57:12.102190 28616 net.cpp:382] ip1 -> ip1
I0428 19:57:12.102318 28616 net.cpp:124] Setting up ip1
I0428 19:57:12.102324 28616 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:12.102327 28616 net.cpp:139] Memory required for data: 2149120
I0428 19:57:12.102335 28616 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:12.102340 28616 net.cpp:86] Creating Layer relu1
I0428 19:57:12.102344 28616 net.cpp:408] relu1 <- ip1
I0428 19:57:12.102349 28616 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:12.102562 28616 net.cpp:124] Setting up relu1
I0428 19:57:12.102571 28616 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:12.102574 28616 net.cpp:139] Memory required for data: 2151680
I0428 19:57:12.102577 28616 layer_factory.hpp:77] Creating layer loss
I0428 19:57:12.102583 28616 net.cpp:86] Creating Layer loss
I0428 19:57:12.102587 28616 net.cpp:408] loss <- ip1
I0428 19:57:12.102591 28616 net.cpp:408] loss <- label
I0428 19:57:12.102596 28616 net.cpp:382] loss -> loss
I0428 19:57:12.102613 28616 layer_factory.hpp:77] Creating layer loss
I0428 19:57:12.103487 28616 net.cpp:124] Setting up loss
I0428 19:57:12.103499 28616 net.cpp:131] Top shape: (1)
I0428 19:57:12.103518 28616 net.cpp:134]     with loss weight 1
I0428 19:57:12.103533 28616 net.cpp:139] Memory required for data: 2151684
I0428 19:57:12.103535 28616 net.cpp:200] loss needs backward computation.
I0428 19:57:12.103539 28616 net.cpp:200] relu1 needs backward computation.
I0428 19:57:12.103543 28616 net.cpp:200] ip1 needs backward computation.
I0428 19:57:12.103545 28616 net.cpp:200] pool1 needs backward computation.
I0428 19:57:12.103549 28616 net.cpp:200] conv1 needs backward computation.
I0428 19:57:12.103551 28616 net.cpp:200] pool0 needs backward computation.
I0428 19:57:12.103554 28616 net.cpp:200] conv0 needs backward computation.
I0428 19:57:12.103557 28616 net.cpp:202] mnist does not need backward computation.
I0428 19:57:12.103560 28616 net.cpp:244] This network produces output loss
I0428 19:57:12.103569 28616 net.cpp:257] Network initialization done.
I0428 19:57:12.103863 28616 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test781.prototxt
I0428 19:57:12.103886 28616 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:12.103960 28616 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:12.104037 28616 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:12.104095 28616 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:12.104107 28616 net.cpp:86] Creating Layer mnist
I0428 19:57:12.104115 28616 net.cpp:382] mnist -> data
I0428 19:57:12.104121 28616 net.cpp:382] mnist -> label
I0428 19:57:12.104226 28616 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:12.106254 28616 net.cpp:124] Setting up mnist
I0428 19:57:12.106299 28616 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:12.106305 28616 net.cpp:131] Top shape: 100 (100)
I0428 19:57:12.106307 28616 net.cpp:139] Memory required for data: 314000
I0428 19:57:12.106312 28616 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:12.106322 28616 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:12.106325 28616 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:12.106331 28616 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:12.106338 28616 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:12.106420 28616 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:12.106428 28616 net.cpp:131] Top shape: 100 (100)
I0428 19:57:12.106432 28616 net.cpp:131] Top shape: 100 (100)
I0428 19:57:12.106436 28616 net.cpp:139] Memory required for data: 314800
I0428 19:57:12.106438 28616 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:12.106449 28616 net.cpp:86] Creating Layer conv0
I0428 19:57:12.106453 28616 net.cpp:408] conv0 <- data
I0428 19:57:12.106458 28616 net.cpp:382] conv0 -> conv0
I0428 19:57:12.107249 28616 net.cpp:124] Setting up conv0
I0428 19:57:12.107275 28616 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:12.107280 28616 net.cpp:139] Memory required for data: 2618800
I0428 19:57:12.107287 28616 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:12.107295 28616 net.cpp:86] Creating Layer pool0
I0428 19:57:12.107300 28616 net.cpp:408] pool0 <- conv0
I0428 19:57:12.107303 28616 net.cpp:382] pool0 -> pool0
I0428 19:57:12.107357 28616 net.cpp:124] Setting up pool0
I0428 19:57:12.107362 28616 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:12.107365 28616 net.cpp:139] Memory required for data: 3194800
I0428 19:57:12.107368 28616 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:12.107378 28616 net.cpp:86] Creating Layer conv1
I0428 19:57:12.107380 28616 net.cpp:408] conv1 <- pool0
I0428 19:57:12.107385 28616 net.cpp:382] conv1 -> conv1
I0428 19:57:12.109513 28616 net.cpp:124] Setting up conv1
I0428 19:57:12.109541 28616 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:12.109545 28616 net.cpp:139] Memory required for data: 3322800
I0428 19:57:12.109555 28616 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:12.109563 28616 net.cpp:86] Creating Layer pool1
I0428 19:57:12.109576 28616 net.cpp:408] pool1 <- conv1
I0428 19:57:12.109597 28616 net.cpp:382] pool1 -> pool1
I0428 19:57:12.109642 28616 net.cpp:124] Setting up pool1
I0428 19:57:12.109647 28616 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:12.109650 28616 net.cpp:139] Memory required for data: 3354800
I0428 19:57:12.109653 28616 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:12.109661 28616 net.cpp:86] Creating Layer ip1
I0428 19:57:12.109664 28616 net.cpp:408] ip1 <- pool1
I0428 19:57:12.109669 28616 net.cpp:382] ip1 -> ip1
I0428 19:57:12.109789 28616 net.cpp:124] Setting up ip1
I0428 19:57:12.109797 28616 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:12.109800 28616 net.cpp:139] Memory required for data: 3358800
I0428 19:57:12.109808 28616 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:12.109829 28616 net.cpp:86] Creating Layer relu1
I0428 19:57:12.109833 28616 net.cpp:408] relu1 <- ip1
I0428 19:57:12.109838 28616 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:12.110646 28616 net.cpp:124] Setting up relu1
I0428 19:57:12.110674 28616 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:12.110677 28616 net.cpp:139] Memory required for data: 3362800
I0428 19:57:12.110682 28616 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:57:12.110702 28616 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:57:12.110707 28616 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:57:12.110712 28616 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:57:12.110719 28616 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:57:12.110759 28616 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:57:12.110764 28616 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:12.110767 28616 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:12.110770 28616 net.cpp:139] Memory required for data: 3370800
I0428 19:57:12.110774 28616 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:12.110780 28616 net.cpp:86] Creating Layer accuracy
I0428 19:57:12.110785 28616 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:57:12.110788 28616 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:12.110793 28616 net.cpp:382] accuracy -> accuracy
I0428 19:57:12.110800 28616 net.cpp:124] Setting up accuracy
I0428 19:57:12.110805 28616 net.cpp:131] Top shape: (1)
I0428 19:57:12.110807 28616 net.cpp:139] Memory required for data: 3370804
I0428 19:57:12.110810 28616 layer_factory.hpp:77] Creating layer loss
I0428 19:57:12.110816 28616 net.cpp:86] Creating Layer loss
I0428 19:57:12.110819 28616 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:57:12.110822 28616 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:12.110827 28616 net.cpp:382] loss -> loss
I0428 19:57:12.110833 28616 layer_factory.hpp:77] Creating layer loss
I0428 19:57:12.111089 28616 net.cpp:124] Setting up loss
I0428 19:57:12.111099 28616 net.cpp:131] Top shape: (1)
I0428 19:57:12.111102 28616 net.cpp:134]     with loss weight 1
I0428 19:57:12.111109 28616 net.cpp:139] Memory required for data: 3370808
I0428 19:57:12.111111 28616 net.cpp:200] loss needs backward computation.
I0428 19:57:12.111115 28616 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:12.111119 28616 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:57:12.111129 28616 net.cpp:200] relu1 needs backward computation.
I0428 19:57:12.111132 28616 net.cpp:200] ip1 needs backward computation.
I0428 19:57:12.111135 28616 net.cpp:200] pool1 needs backward computation.
I0428 19:57:12.111138 28616 net.cpp:200] conv1 needs backward computation.
I0428 19:57:12.111141 28616 net.cpp:200] pool0 needs backward computation.
I0428 19:57:12.111145 28616 net.cpp:200] conv0 needs backward computation.
I0428 19:57:12.111148 28616 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:12.111153 28616 net.cpp:202] mnist does not need backward computation.
I0428 19:57:12.111155 28616 net.cpp:244] This network produces output accuracy
I0428 19:57:12.111165 28616 net.cpp:244] This network produces output loss
I0428 19:57:12.111183 28616 net.cpp:257] Network initialization done.
I0428 19:57:12.111222 28616 solver.cpp:56] Solver scaffolding done.
I0428 19:57:12.111444 28616 caffe.cpp:248] Starting Optimization
I0428 19:57:12.111450 28616 solver.cpp:273] Solving LeNet
I0428 19:57:12.111454 28616 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:12.112200 28616 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:12.115430 28616 blocking_queue.cpp:49] Waiting for data
I0428 19:57:12.187824 28623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:12.188310 28616 solver.cpp:398]     Test net output #0: accuracy = 0.0711
I0428 19:57:12.188328 28616 solver.cpp:398]     Test net output #1: loss = 2.32373 (* 1 = 2.32373 loss)
I0428 19:57:12.190582 28616 solver.cpp:219] Iteration 0 (-4.65167e-31 iter/s, 0.0790999s/100 iters), loss = 2.32524
I0428 19:57:12.190640 28616 solver.cpp:238]     Train net output #0: loss = 2.32524 (* 1 = 2.32524 loss)
I0428 19:57:12.190652 28616 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:12.253234 28616 solver.cpp:219] Iteration 100 (1597.85 iter/s, 0.0625842s/100 iters), loss = 0.749338
I0428 19:57:12.253274 28616 solver.cpp:238]     Train net output #0: loss = 0.749338 (* 1 = 0.749338 loss)
I0428 19:57:12.253280 28616 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:12.313344 28616 solver.cpp:219] Iteration 200 (1664.98 iter/s, 0.0600607s/100 iters), loss = 0.535879
I0428 19:57:12.313381 28616 solver.cpp:238]     Train net output #0: loss = 0.535879 (* 1 = 0.535879 loss)
I0428 19:57:12.313387 28616 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:12.373275 28616 solver.cpp:219] Iteration 300 (1669.54 iter/s, 0.0598968s/100 iters), loss = 0.546078
I0428 19:57:12.373312 28616 solver.cpp:238]     Train net output #0: loss = 0.546078 (* 1 = 0.546078 loss)
I0428 19:57:12.373318 28616 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:12.440976 28616 solver.cpp:219] Iteration 400 (1478.16 iter/s, 0.0676517s/100 iters), loss = 0.452363
I0428 19:57:12.441009 28616 solver.cpp:238]     Train net output #0: loss = 0.452363 (* 1 = 0.452363 loss)
I0428 19:57:12.441015 28616 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:12.511546 28616 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:12.586211 28623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:12.586709 28616 solver.cpp:398]     Test net output #0: accuracy = 0.8567
I0428 19:57:12.586730 28616 solver.cpp:398]     Test net output #1: loss = 0.405912 (* 1 = 0.405912 loss)
I0428 19:57:12.587445 28616 solver.cpp:219] Iteration 500 (682.949 iter/s, 0.146424s/100 iters), loss = 0.257385
I0428 19:57:12.587468 28616 solver.cpp:238]     Train net output #0: loss = 0.257385 (* 1 = 0.257385 loss)
I0428 19:57:12.587476 28616 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:12.661511 28616 solver.cpp:219] Iteration 600 (1350.75 iter/s, 0.0740331s/100 iters), loss = 0.387468
I0428 19:57:12.661535 28616 solver.cpp:238]     Train net output #0: loss = 0.387468 (* 1 = 0.387468 loss)
I0428 19:57:12.661557 28616 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:12.734939 28616 solver.cpp:219] Iteration 700 (1362.49 iter/s, 0.0733952s/100 iters), loss = 0.563906
I0428 19:57:12.734962 28616 solver.cpp:238]     Train net output #0: loss = 0.563906 (* 1 = 0.563906 loss)
I0428 19:57:12.734985 28616 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:12.798714 28616 solver.cpp:219] Iteration 800 (1568.78 iter/s, 0.0637438s/100 iters), loss = 0.367068
I0428 19:57:12.798738 28616 solver.cpp:238]     Train net output #0: loss = 0.367068 (* 1 = 0.367068 loss)
I0428 19:57:12.798759 28616 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:12.857866 28616 solver.cpp:219] Iteration 900 (1691.48 iter/s, 0.0591198s/100 iters), loss = 0.525071
I0428 19:57:12.857887 28616 solver.cpp:238]     Train net output #0: loss = 0.525071 (* 1 = 0.525071 loss)
I0428 19:57:12.857910 28616 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:12.877738 28622 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:12.917101 28616 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:12.917645 28616 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:12.918005 28616 solver.cpp:311] Iteration 1000, loss = 0.449815
I0428 19:57:12.918020 28616 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:12.970547 28623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:12.970993 28616 solver.cpp:398]     Test net output #0: accuracy = 0.8665
I0428 19:57:12.971009 28616 solver.cpp:398]     Test net output #1: loss = 0.36084 (* 1 = 0.36084 loss)
I0428 19:57:12.971014 28616 solver.cpp:316] Optimization Done.
I0428 19:57:12.971017 28616 caffe.cpp:259] Optimization Done.
