I0428 20:16:21.954408   644 caffe.cpp:218] Using GPUs 0
I0428 20:16:21.995343   644 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:22.506099   644 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1269.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:22.506263   644 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1269.prototxt
I0428 20:16:22.506674   644 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:22.506697   644 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:22.506809   644 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:22.506917   644 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:22.507050   644 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:22.507082   644 net.cpp:86] Creating Layer mnist
I0428 20:16:22.507095   644 net.cpp:382] mnist -> data
I0428 20:16:22.507127   644 net.cpp:382] mnist -> label
I0428 20:16:22.508404   644 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:22.511086   644 net.cpp:124] Setting up mnist
I0428 20:16:22.511107   644 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:22.511118   644 net.cpp:131] Top shape: 64 (64)
I0428 20:16:22.511124   644 net.cpp:139] Memory required for data: 200960
I0428 20:16:22.511137   644 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:22.511159   644 net.cpp:86] Creating Layer conv0
I0428 20:16:22.511183   644 net.cpp:408] conv0 <- data
I0428 20:16:22.511200   644 net.cpp:382] conv0 -> conv0
I0428 20:16:22.798707   644 net.cpp:124] Setting up conv0
I0428 20:16:22.798738   644 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:22.798743   644 net.cpp:139] Memory required for data: 7573760
I0428 20:16:22.798765   644 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:22.798784   644 net.cpp:86] Creating Layer pool0
I0428 20:16:22.798797   644 net.cpp:408] pool0 <- conv0
I0428 20:16:22.798809   644 net.cpp:382] pool0 -> pool0
I0428 20:16:22.798872   644 net.cpp:124] Setting up pool0
I0428 20:16:22.798882   644 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:22.798887   644 net.cpp:139] Memory required for data: 9416960
I0428 20:16:22.798893   644 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:22.798910   644 net.cpp:86] Creating Layer conv1
I0428 20:16:22.798918   644 net.cpp:408] conv1 <- pool0
I0428 20:16:22.798926   644 net.cpp:382] conv1 -> conv1
I0428 20:16:22.801746   644 net.cpp:124] Setting up conv1
I0428 20:16:22.801764   644 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:22.801771   644 net.cpp:139] Memory required for data: 9498880
I0428 20:16:22.801785   644 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:22.801798   644 net.cpp:86] Creating Layer pool1
I0428 20:16:22.801805   644 net.cpp:408] pool1 <- conv1
I0428 20:16:22.801813   644 net.cpp:382] pool1 -> pool1
I0428 20:16:22.801859   644 net.cpp:124] Setting up pool1
I0428 20:16:22.801869   644 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:22.801874   644 net.cpp:139] Memory required for data: 9519360
I0428 20:16:22.801880   644 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:22.801897   644 net.cpp:86] Creating Layer ip1
I0428 20:16:22.801904   644 net.cpp:408] ip1 <- pool1
I0428 20:16:22.801913   644 net.cpp:382] ip1 -> ip1
I0428 20:16:22.802037   644 net.cpp:124] Setting up ip1
I0428 20:16:22.802047   644 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:22.802052   644 net.cpp:139] Memory required for data: 9525760
I0428 20:16:22.802064   644 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:22.802073   644 net.cpp:86] Creating Layer relu1
I0428 20:16:22.802084   644 net.cpp:408] relu1 <- ip1
I0428 20:16:22.802093   644 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:22.802271   644 net.cpp:124] Setting up relu1
I0428 20:16:22.802283   644 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:22.802287   644 net.cpp:139] Memory required for data: 9532160
I0428 20:16:22.802294   644 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:22.802304   644 net.cpp:86] Creating Layer ip2
I0428 20:16:22.802309   644 net.cpp:408] ip2 <- ip1
I0428 20:16:22.802319   644 net.cpp:382] ip2 -> ip2
I0428 20:16:22.802424   644 net.cpp:124] Setting up ip2
I0428 20:16:22.802433   644 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:22.802439   644 net.cpp:139] Memory required for data: 9534720
I0428 20:16:22.802449   644 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:22.802459   644 net.cpp:86] Creating Layer relu2
I0428 20:16:22.802465   644 net.cpp:408] relu2 <- ip2
I0428 20:16:22.802472   644 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:22.803236   644 net.cpp:124] Setting up relu2
I0428 20:16:22.803251   644 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:22.803256   644 net.cpp:139] Memory required for data: 9537280
I0428 20:16:22.803262   644 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:22.803273   644 net.cpp:86] Creating Layer ip3
I0428 20:16:22.803279   644 net.cpp:408] ip3 <- ip2
I0428 20:16:22.803288   644 net.cpp:382] ip3 -> ip3
I0428 20:16:22.803401   644 net.cpp:124] Setting up ip3
I0428 20:16:22.803411   644 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:22.803416   644 net.cpp:139] Memory required for data: 9539840
I0428 20:16:22.803431   644 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:22.803441   644 net.cpp:86] Creating Layer relu3
I0428 20:16:22.803447   644 net.cpp:408] relu3 <- ip3
I0428 20:16:22.803454   644 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:22.803632   644 net.cpp:124] Setting up relu3
I0428 20:16:22.803643   644 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:22.803648   644 net.cpp:139] Memory required for data: 9542400
I0428 20:16:22.803654   644 layer_factory.hpp:77] Creating layer loss
I0428 20:16:22.803663   644 net.cpp:86] Creating Layer loss
I0428 20:16:22.803669   644 net.cpp:408] loss <- ip3
I0428 20:16:22.803676   644 net.cpp:408] loss <- label
I0428 20:16:22.803685   644 net.cpp:382] loss -> loss
I0428 20:16:22.803709   644 layer_factory.hpp:77] Creating layer loss
I0428 20:16:22.803946   644 net.cpp:124] Setting up loss
I0428 20:16:22.803957   644 net.cpp:131] Top shape: (1)
I0428 20:16:22.803963   644 net.cpp:134]     with loss weight 1
I0428 20:16:22.803984   644 net.cpp:139] Memory required for data: 9542404
I0428 20:16:22.803990   644 net.cpp:200] loss needs backward computation.
I0428 20:16:22.803997   644 net.cpp:200] relu3 needs backward computation.
I0428 20:16:22.804003   644 net.cpp:200] ip3 needs backward computation.
I0428 20:16:22.804008   644 net.cpp:200] relu2 needs backward computation.
I0428 20:16:22.804013   644 net.cpp:200] ip2 needs backward computation.
I0428 20:16:22.804019   644 net.cpp:200] relu1 needs backward computation.
I0428 20:16:22.804024   644 net.cpp:200] ip1 needs backward computation.
I0428 20:16:22.804029   644 net.cpp:200] pool1 needs backward computation.
I0428 20:16:22.804035   644 net.cpp:200] conv1 needs backward computation.
I0428 20:16:22.804041   644 net.cpp:200] pool0 needs backward computation.
I0428 20:16:22.804046   644 net.cpp:200] conv0 needs backward computation.
I0428 20:16:22.804054   644 net.cpp:202] mnist does not need backward computation.
I0428 20:16:22.804059   644 net.cpp:244] This network produces output loss
I0428 20:16:22.804074   644 net.cpp:257] Network initialization done.
I0428 20:16:22.804419   644 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1269.prototxt
I0428 20:16:22.804456   644 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:22.804559   644 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:22.804682   644 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:22.804744   644 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:22.804762   644 net.cpp:86] Creating Layer mnist
I0428 20:16:22.804770   644 net.cpp:382] mnist -> data
I0428 20:16:22.804783   644 net.cpp:382] mnist -> label
I0428 20:16:22.804914   644 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:22.807052   644 net.cpp:124] Setting up mnist
I0428 20:16:22.807068   644 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:22.807077   644 net.cpp:131] Top shape: 100 (100)
I0428 20:16:22.807083   644 net.cpp:139] Memory required for data: 314000
I0428 20:16:22.807090   644 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:22.807121   644 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:22.807128   644 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:22.807137   644 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:22.807148   644 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:22.807240   644 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:22.807250   644 net.cpp:131] Top shape: 100 (100)
I0428 20:16:22.807256   644 net.cpp:131] Top shape: 100 (100)
I0428 20:16:22.807261   644 net.cpp:139] Memory required for data: 314800
I0428 20:16:22.807267   644 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:22.807281   644 net.cpp:86] Creating Layer conv0
I0428 20:16:22.807287   644 net.cpp:408] conv0 <- data
I0428 20:16:22.807296   644 net.cpp:382] conv0 -> conv0
I0428 20:16:22.808948   644 net.cpp:124] Setting up conv0
I0428 20:16:22.808965   644 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:22.808971   644 net.cpp:139] Memory required for data: 11834800
I0428 20:16:22.808986   644 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:22.808996   644 net.cpp:86] Creating Layer pool0
I0428 20:16:22.809002   644 net.cpp:408] pool0 <- conv0
I0428 20:16:22.809011   644 net.cpp:382] pool0 -> pool0
I0428 20:16:22.809056   644 net.cpp:124] Setting up pool0
I0428 20:16:22.809065   644 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:22.809070   644 net.cpp:139] Memory required for data: 14714800
I0428 20:16:22.809075   644 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:22.809089   644 net.cpp:86] Creating Layer conv1
I0428 20:16:22.809095   644 net.cpp:408] conv1 <- pool0
I0428 20:16:22.809105   644 net.cpp:382] conv1 -> conv1
I0428 20:16:22.810642   644 net.cpp:124] Setting up conv1
I0428 20:16:22.810657   644 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:22.810663   644 net.cpp:139] Memory required for data: 14842800
I0428 20:16:22.810677   644 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:22.810691   644 net.cpp:86] Creating Layer pool1
I0428 20:16:22.810699   644 net.cpp:408] pool1 <- conv1
I0428 20:16:22.810709   644 net.cpp:382] pool1 -> pool1
I0428 20:16:22.810753   644 net.cpp:124] Setting up pool1
I0428 20:16:22.810762   644 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:22.810767   644 net.cpp:139] Memory required for data: 14874800
I0428 20:16:22.810772   644 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:22.810786   644 net.cpp:86] Creating Layer ip1
I0428 20:16:22.810791   644 net.cpp:408] ip1 <- pool1
I0428 20:16:22.810801   644 net.cpp:382] ip1 -> ip1
I0428 20:16:22.810926   644 net.cpp:124] Setting up ip1
I0428 20:16:22.810935   644 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:22.810952   644 net.cpp:139] Memory required for data: 14884800
I0428 20:16:22.810966   644 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:22.810977   644 net.cpp:86] Creating Layer relu1
I0428 20:16:22.810984   644 net.cpp:408] relu1 <- ip1
I0428 20:16:22.811000   644 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:22.811172   644 net.cpp:124] Setting up relu1
I0428 20:16:22.811183   644 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:22.811193   644 net.cpp:139] Memory required for data: 14894800
I0428 20:16:22.811199   644 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:22.811213   644 net.cpp:86] Creating Layer ip2
I0428 20:16:22.811219   644 net.cpp:408] ip2 <- ip1
I0428 20:16:22.811229   644 net.cpp:382] ip2 -> ip2
I0428 20:16:22.811347   644 net.cpp:124] Setting up ip2
I0428 20:16:22.811355   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.811360   644 net.cpp:139] Memory required for data: 14898800
I0428 20:16:22.811369   644 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:22.811378   644 net.cpp:86] Creating Layer relu2
I0428 20:16:22.811383   644 net.cpp:408] relu2 <- ip2
I0428 20:16:22.811390   644 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:22.811645   644 net.cpp:124] Setting up relu2
I0428 20:16:22.811656   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.811662   644 net.cpp:139] Memory required for data: 14902800
I0428 20:16:22.811667   644 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:22.811676   644 net.cpp:86] Creating Layer ip3
I0428 20:16:22.811681   644 net.cpp:408] ip3 <- ip2
I0428 20:16:22.811693   644 net.cpp:382] ip3 -> ip3
I0428 20:16:22.811802   644 net.cpp:124] Setting up ip3
I0428 20:16:22.811811   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.811816   644 net.cpp:139] Memory required for data: 14906800
I0428 20:16:22.811831   644 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:22.811841   644 net.cpp:86] Creating Layer relu3
I0428 20:16:22.811846   644 net.cpp:408] relu3 <- ip3
I0428 20:16:22.811854   644 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:22.812692   644 net.cpp:124] Setting up relu3
I0428 20:16:22.812705   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.812711   644 net.cpp:139] Memory required for data: 14910800
I0428 20:16:22.812716   644 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:22.812726   644 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:22.812731   644 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:22.812741   644 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:22.812752   644 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:22.812842   644 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:22.812852   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.812860   644 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:22.812865   644 net.cpp:139] Memory required for data: 14918800
I0428 20:16:22.812870   644 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:22.812880   644 net.cpp:86] Creating Layer accuracy
I0428 20:16:22.812886   644 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:22.812893   644 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:22.812901   644 net.cpp:382] accuracy -> accuracy
I0428 20:16:22.812914   644 net.cpp:124] Setting up accuracy
I0428 20:16:22.812924   644 net.cpp:131] Top shape: (1)
I0428 20:16:22.812929   644 net.cpp:139] Memory required for data: 14918804
I0428 20:16:22.812934   644 layer_factory.hpp:77] Creating layer loss
I0428 20:16:22.812943   644 net.cpp:86] Creating Layer loss
I0428 20:16:22.812948   644 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:22.812954   644 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:22.812961   644 net.cpp:382] loss -> loss
I0428 20:16:22.812971   644 layer_factory.hpp:77] Creating layer loss
I0428 20:16:22.813257   644 net.cpp:124] Setting up loss
I0428 20:16:22.813268   644 net.cpp:131] Top shape: (1)
I0428 20:16:22.813273   644 net.cpp:134]     with loss weight 1
I0428 20:16:22.813295   644 net.cpp:139] Memory required for data: 14918808
I0428 20:16:22.813302   644 net.cpp:200] loss needs backward computation.
I0428 20:16:22.813308   644 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:22.813314   644 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:22.813319   644 net.cpp:200] relu3 needs backward computation.
I0428 20:16:22.813324   644 net.cpp:200] ip3 needs backward computation.
I0428 20:16:22.813329   644 net.cpp:200] relu2 needs backward computation.
I0428 20:16:22.813338   644 net.cpp:200] ip2 needs backward computation.
I0428 20:16:22.813344   644 net.cpp:200] relu1 needs backward computation.
I0428 20:16:22.813351   644 net.cpp:200] ip1 needs backward computation.
I0428 20:16:22.813357   644 net.cpp:200] pool1 needs backward computation.
I0428 20:16:22.813362   644 net.cpp:200] conv1 needs backward computation.
I0428 20:16:22.813369   644 net.cpp:200] pool0 needs backward computation.
I0428 20:16:22.813374   644 net.cpp:200] conv0 needs backward computation.
I0428 20:16:22.813380   644 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:22.813386   644 net.cpp:202] mnist does not need backward computation.
I0428 20:16:22.813393   644 net.cpp:244] This network produces output accuracy
I0428 20:16:22.813400   644 net.cpp:244] This network produces output loss
I0428 20:16:22.813416   644 net.cpp:257] Network initialization done.
I0428 20:16:22.813465   644 solver.cpp:56] Solver scaffolding done.
I0428 20:16:22.813849   644 caffe.cpp:248] Starting Optimization
I0428 20:16:22.813856   644 solver.cpp:273] Solving LeNet
I0428 20:16:22.813860   644 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:22.814070   644 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:22.820843   644 blocking_queue.cpp:49] Waiting for data
I0428 20:16:22.894923   652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:22.896184   644 solver.cpp:398]     Test net output #0: accuracy = 0.1038
I0428 20:16:22.896216   644 solver.cpp:398]     Test net output #1: loss = 2.3186 (* 1 = 2.3186 loss)
I0428 20:16:22.902022   644 solver.cpp:219] Iteration 0 (0 iter/s, 0.0881172s/100 iters), loss = 2.30841
I0428 20:16:22.902070   644 solver.cpp:238]     Train net output #0: loss = 2.30841 (* 1 = 2.30841 loss)
I0428 20:16:22.902098   644 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:23.027529   644 solver.cpp:219] Iteration 100 (797.077 iter/s, 0.125458s/100 iters), loss = 0.729869
I0428 20:16:23.027560   644 solver.cpp:238]     Train net output #0: loss = 0.729869 (* 1 = 0.729869 loss)
I0428 20:16:23.027568   644 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:23.146690   644 solver.cpp:219] Iteration 200 (839.499 iter/s, 0.119119s/100 iters), loss = 0.386692
I0428 20:16:23.146723   644 solver.cpp:238]     Train net output #0: loss = 0.386692 (* 1 = 0.386692 loss)
I0428 20:16:23.146731   644 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:23.266660   644 solver.cpp:219] Iteration 300 (833.842 iter/s, 0.119927s/100 iters), loss = 0.403661
I0428 20:16:23.266692   644 solver.cpp:238]     Train net output #0: loss = 0.403661 (* 1 = 0.403661 loss)
I0428 20:16:23.266700   644 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:23.392634   644 solver.cpp:219] Iteration 400 (794.082 iter/s, 0.125932s/100 iters), loss = 0.126179
I0428 20:16:23.392663   644 solver.cpp:238]     Train net output #0: loss = 0.126179 (* 1 = 0.126179 loss)
I0428 20:16:23.392671   644 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:23.509783   644 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:23.586304   652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:23.587491   644 solver.cpp:398]     Test net output #0: accuracy = 0.9493
I0428 20:16:23.587515   644 solver.cpp:398]     Test net output #1: loss = 0.171541 (* 1 = 0.171541 loss)
I0428 20:16:23.588739   644 solver.cpp:219] Iteration 500 (510.045 iter/s, 0.196061s/100 iters), loss = 0.269393
I0428 20:16:23.588786   644 solver.cpp:238]     Train net output #0: loss = 0.269393 (* 1 = 0.269393 loss)
I0428 20:16:23.588794   644 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:23.714390   644 solver.cpp:219] Iteration 600 (796.213 iter/s, 0.125595s/100 iters), loss = 0.0901497
I0428 20:16:23.714432   644 solver.cpp:238]     Train net output #0: loss = 0.0901496 (* 1 = 0.0901496 loss)
I0428 20:16:23.714439   644 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:23.835242   644 solver.cpp:219] Iteration 700 (827.708 iter/s, 0.120816s/100 iters), loss = 0.309655
I0428 20:16:23.835283   644 solver.cpp:238]     Train net output #0: loss = 0.309655 (* 1 = 0.309655 loss)
I0428 20:16:23.835289   644 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:23.949900   644 solver.cpp:219] Iteration 800 (872.422 iter/s, 0.114623s/100 iters), loss = 0.280331
I0428 20:16:23.949942   644 solver.cpp:238]     Train net output #0: loss = 0.280331 (* 1 = 0.280331 loss)
I0428 20:16:23.949949   644 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:24.067085   644 solver.cpp:219] Iteration 900 (853.736 iter/s, 0.117132s/100 iters), loss = 0.227759
I0428 20:16:24.067113   644 solver.cpp:238]     Train net output #0: loss = 0.227759 (* 1 = 0.227759 loss)
I0428 20:16:24.067121   644 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:24.104863   651 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:24.179682   644 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:24.180672   644 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:24.181419   644 solver.cpp:311] Iteration 1000, loss = 0.177257
I0428 20:16:24.181435   644 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:24.246511   652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:24.248131   644 solver.cpp:398]     Test net output #0: accuracy = 0.9653
I0428 20:16:24.248164   644 solver.cpp:398]     Test net output #1: loss = 0.116925 (* 1 = 0.116925 loss)
I0428 20:16:24.248169   644 solver.cpp:316] Optimization Done.
I0428 20:16:24.248175   644 caffe.cpp:259] Optimization Done.
