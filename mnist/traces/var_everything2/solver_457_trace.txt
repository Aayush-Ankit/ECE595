I0428 19:44:49.151475 25683 caffe.cpp:218] Using GPUs 0
I0428 19:44:49.191831 25683 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:49.709046 25683 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test457.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:49.709221 25683 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test457.prototxt
I0428 19:44:49.709646 25683 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:49.709671 25683 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:49.709786 25683 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:49.709906 25683 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:49.710037 25683 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:49.710072 25683 net.cpp:86] Creating Layer mnist
I0428 19:44:49.710083 25683 net.cpp:382] mnist -> data
I0428 19:44:49.710116 25683 net.cpp:382] mnist -> label
I0428 19:44:49.711395 25683 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:49.713868 25683 net.cpp:124] Setting up mnist
I0428 19:44:49.713888 25683 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:49.713898 25683 net.cpp:131] Top shape: 64 (64)
I0428 19:44:49.713904 25683 net.cpp:139] Memory required for data: 200960
I0428 19:44:49.713915 25683 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:49.713943 25683 net.cpp:86] Creating Layer conv0
I0428 19:44:49.713966 25683 net.cpp:408] conv0 <- data
I0428 19:44:49.713985 25683 net.cpp:382] conv0 -> conv0
I0428 19:44:50.005758 25683 net.cpp:124] Setting up conv0
I0428 19:44:50.005791 25683 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:50.005798 25683 net.cpp:139] Memory required for data: 495872
I0428 19:44:50.005822 25683 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:50.005843 25683 net.cpp:86] Creating Layer pool0
I0428 19:44:50.005861 25683 net.cpp:408] pool0 <- conv0
I0428 19:44:50.005872 25683 net.cpp:382] pool0 -> pool0
I0428 19:44:50.005940 25683 net.cpp:124] Setting up pool0
I0428 19:44:50.005952 25683 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:50.005959 25683 net.cpp:139] Memory required for data: 569600
I0428 19:44:50.005965 25683 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:50.005985 25683 net.cpp:86] Creating Layer conv1
I0428 19:44:50.005992 25683 net.cpp:408] conv1 <- pool0
I0428 19:44:50.006003 25683 net.cpp:382] conv1 -> conv1
I0428 19:44:50.009135 25683 net.cpp:124] Setting up conv1
I0428 19:44:50.009156 25683 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:50.009163 25683 net.cpp:139] Memory required for data: 1388800
I0428 19:44:50.009181 25683 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:50.009196 25683 net.cpp:86] Creating Layer pool1
I0428 19:44:50.009202 25683 net.cpp:408] pool1 <- conv1
I0428 19:44:50.009212 25683 net.cpp:382] pool1 -> pool1
I0428 19:44:50.009265 25683 net.cpp:124] Setting up pool1
I0428 19:44:50.009277 25683 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:50.009284 25683 net.cpp:139] Memory required for data: 1593600
I0428 19:44:50.009290 25683 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:50.009304 25683 net.cpp:86] Creating Layer ip1
I0428 19:44:50.009310 25683 net.cpp:408] ip1 <- pool1
I0428 19:44:50.009320 25683 net.cpp:382] ip1 -> ip1
I0428 19:44:50.009588 25683 net.cpp:124] Setting up ip1
I0428 19:44:50.009599 25683 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:50.009605 25683 net.cpp:139] Memory required for data: 1600000
I0428 19:44:50.009620 25683 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:50.009634 25683 net.cpp:86] Creating Layer relu1
I0428 19:44:50.009645 25683 net.cpp:408] relu1 <- ip1
I0428 19:44:50.009654 25683 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:50.009855 25683 net.cpp:124] Setting up relu1
I0428 19:44:50.009867 25683 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:50.009873 25683 net.cpp:139] Memory required for data: 1606400
I0428 19:44:50.009879 25683 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:50.009891 25683 net.cpp:86] Creating Layer ip2
I0428 19:44:50.009898 25683 net.cpp:408] ip2 <- ip1
I0428 19:44:50.009908 25683 net.cpp:382] ip2 -> ip2
I0428 19:44:50.010043 25683 net.cpp:124] Setting up ip2
I0428 19:44:50.010054 25683 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:50.010061 25683 net.cpp:139] Memory required for data: 1619200
I0428 19:44:50.010072 25683 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:50.010083 25683 net.cpp:86] Creating Layer relu2
I0428 19:44:50.010090 25683 net.cpp:408] relu2 <- ip2
I0428 19:44:50.010099 25683 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:50.010952 25683 net.cpp:124] Setting up relu2
I0428 19:44:50.010969 25683 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:50.010977 25683 net.cpp:139] Memory required for data: 1632000
I0428 19:44:50.010983 25683 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:50.010996 25683 net.cpp:86] Creating Layer ip3
I0428 19:44:50.011003 25683 net.cpp:408] ip3 <- ip2
I0428 19:44:50.011014 25683 net.cpp:382] ip3 -> ip3
I0428 19:44:50.011147 25683 net.cpp:124] Setting up ip3
I0428 19:44:50.011159 25683 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:50.011165 25683 net.cpp:139] Memory required for data: 1634560
I0428 19:44:50.011181 25683 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:50.011196 25683 net.cpp:86] Creating Layer relu3
I0428 19:44:50.011204 25683 net.cpp:408] relu3 <- ip3
I0428 19:44:50.011214 25683 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:50.011412 25683 net.cpp:124] Setting up relu3
I0428 19:44:50.011425 25683 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:50.011431 25683 net.cpp:139] Memory required for data: 1637120
I0428 19:44:50.011437 25683 layer_factory.hpp:77] Creating layer loss
I0428 19:44:50.011448 25683 net.cpp:86] Creating Layer loss
I0428 19:44:50.011456 25683 net.cpp:408] loss <- ip3
I0428 19:44:50.011463 25683 net.cpp:408] loss <- label
I0428 19:44:50.011473 25683 net.cpp:382] loss -> loss
I0428 19:44:50.011500 25683 layer_factory.hpp:77] Creating layer loss
I0428 19:44:50.011770 25683 net.cpp:124] Setting up loss
I0428 19:44:50.011783 25683 net.cpp:131] Top shape: (1)
I0428 19:44:50.011790 25683 net.cpp:134]     with loss weight 1
I0428 19:44:50.011813 25683 net.cpp:139] Memory required for data: 1637124
I0428 19:44:50.011821 25683 net.cpp:200] loss needs backward computation.
I0428 19:44:50.011828 25683 net.cpp:200] relu3 needs backward computation.
I0428 19:44:50.011835 25683 net.cpp:200] ip3 needs backward computation.
I0428 19:44:50.011842 25683 net.cpp:200] relu2 needs backward computation.
I0428 19:44:50.011847 25683 net.cpp:200] ip2 needs backward computation.
I0428 19:44:50.011853 25683 net.cpp:200] relu1 needs backward computation.
I0428 19:44:50.011859 25683 net.cpp:200] ip1 needs backward computation.
I0428 19:44:50.011867 25683 net.cpp:200] pool1 needs backward computation.
I0428 19:44:50.011873 25683 net.cpp:200] conv1 needs backward computation.
I0428 19:44:50.011879 25683 net.cpp:200] pool0 needs backward computation.
I0428 19:44:50.011886 25683 net.cpp:200] conv0 needs backward computation.
I0428 19:44:50.011893 25683 net.cpp:202] mnist does not need backward computation.
I0428 19:44:50.011899 25683 net.cpp:244] This network produces output loss
I0428 19:44:50.011916 25683 net.cpp:257] Network initialization done.
I0428 19:44:50.012310 25683 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test457.prototxt
I0428 19:44:50.012351 25683 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:50.012468 25683 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:50.012605 25683 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:50.012676 25683 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:50.012698 25683 net.cpp:86] Creating Layer mnist
I0428 19:44:50.012708 25683 net.cpp:382] mnist -> data
I0428 19:44:50.012722 25683 net.cpp:382] mnist -> label
I0428 19:44:50.012874 25683 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:50.015254 25683 net.cpp:124] Setting up mnist
I0428 19:44:50.015271 25683 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:50.015281 25683 net.cpp:131] Top shape: 100 (100)
I0428 19:44:50.015288 25683 net.cpp:139] Memory required for data: 314000
I0428 19:44:50.015295 25683 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:50.015331 25683 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:50.015337 25683 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:50.015347 25683 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:50.015360 25683 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:50.015455 25683 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:50.015465 25683 net.cpp:131] Top shape: 100 (100)
I0428 19:44:50.015473 25683 net.cpp:131] Top shape: 100 (100)
I0428 19:44:50.015480 25683 net.cpp:139] Memory required for data: 314800
I0428 19:44:50.015486 25683 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:50.015501 25683 net.cpp:86] Creating Layer conv0
I0428 19:44:50.015509 25683 net.cpp:408] conv0 <- data
I0428 19:44:50.015521 25683 net.cpp:382] conv0 -> conv0
I0428 19:44:50.017307 25683 net.cpp:124] Setting up conv0
I0428 19:44:50.017326 25683 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:50.017333 25683 net.cpp:139] Memory required for data: 775600
I0428 19:44:50.017351 25683 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:50.017364 25683 net.cpp:86] Creating Layer pool0
I0428 19:44:50.017370 25683 net.cpp:408] pool0 <- conv0
I0428 19:44:50.017379 25683 net.cpp:382] pool0 -> pool0
I0428 19:44:50.017431 25683 net.cpp:124] Setting up pool0
I0428 19:44:50.017442 25683 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:50.017448 25683 net.cpp:139] Memory required for data: 890800
I0428 19:44:50.017454 25683 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:50.017470 25683 net.cpp:86] Creating Layer conv1
I0428 19:44:50.017478 25683 net.cpp:408] conv1 <- pool0
I0428 19:44:50.017489 25683 net.cpp:382] conv1 -> conv1
I0428 19:44:50.019194 25683 net.cpp:124] Setting up conv1
I0428 19:44:50.019213 25683 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:50.019222 25683 net.cpp:139] Memory required for data: 2170800
I0428 19:44:50.019238 25683 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:50.019250 25683 net.cpp:86] Creating Layer pool1
I0428 19:44:50.019258 25683 net.cpp:408] pool1 <- conv1
I0428 19:44:50.019268 25683 net.cpp:382] pool1 -> pool1
I0428 19:44:50.019322 25683 net.cpp:124] Setting up pool1
I0428 19:44:50.019332 25683 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:50.019340 25683 net.cpp:139] Memory required for data: 2490800
I0428 19:44:50.019351 25683 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:50.019362 25683 net.cpp:86] Creating Layer ip1
I0428 19:44:50.019371 25683 net.cpp:408] ip1 <- pool1
I0428 19:44:50.019381 25683 net.cpp:382] ip1 -> ip1
I0428 19:44:50.019644 25683 net.cpp:124] Setting up ip1
I0428 19:44:50.019655 25683 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:50.019675 25683 net.cpp:139] Memory required for data: 2500800
I0428 19:44:50.019696 25683 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:50.019707 25683 net.cpp:86] Creating Layer relu1
I0428 19:44:50.019714 25683 net.cpp:408] relu1 <- ip1
I0428 19:44:50.019723 25683 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:50.020009 25683 net.cpp:124] Setting up relu1
I0428 19:44:50.020020 25683 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:50.020027 25683 net.cpp:139] Memory required for data: 2510800
I0428 19:44:50.020033 25683 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:50.020046 25683 net.cpp:86] Creating Layer ip2
I0428 19:44:50.020054 25683 net.cpp:408] ip2 <- ip1
I0428 19:44:50.020066 25683 net.cpp:382] ip2 -> ip2
I0428 19:44:50.020201 25683 net.cpp:124] Setting up ip2
I0428 19:44:50.020213 25683 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:50.020220 25683 net.cpp:139] Memory required for data: 2530800
I0428 19:44:50.020236 25683 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:50.020246 25683 net.cpp:86] Creating Layer relu2
I0428 19:44:50.020253 25683 net.cpp:408] relu2 <- ip2
I0428 19:44:50.020262 25683 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:50.020443 25683 net.cpp:124] Setting up relu2
I0428 19:44:50.020455 25683 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:50.020462 25683 net.cpp:139] Memory required for data: 2550800
I0428 19:44:50.020472 25683 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:50.020483 25683 net.cpp:86] Creating Layer ip3
I0428 19:44:50.020489 25683 net.cpp:408] ip3 <- ip2
I0428 19:44:50.020499 25683 net.cpp:382] ip3 -> ip3
I0428 19:44:50.020622 25683 net.cpp:124] Setting up ip3
I0428 19:44:50.020633 25683 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:50.020642 25683 net.cpp:139] Memory required for data: 2554800
I0428 19:44:50.020656 25683 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:50.020668 25683 net.cpp:86] Creating Layer relu3
I0428 19:44:50.020674 25683 net.cpp:408] relu3 <- ip3
I0428 19:44:50.020683 25683 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:50.021584 25683 net.cpp:124] Setting up relu3
I0428 19:44:50.021600 25683 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:50.021606 25683 net.cpp:139] Memory required for data: 2558800
I0428 19:44:50.021613 25683 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:50.021623 25683 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:50.021631 25683 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:50.021641 25683 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:50.021652 25683 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:50.021718 25683 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:50.021728 25683 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:50.021736 25683 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:50.021742 25683 net.cpp:139] Memory required for data: 2566800
I0428 19:44:50.021749 25683 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:50.021759 25683 net.cpp:86] Creating Layer accuracy
I0428 19:44:50.021766 25683 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:50.021776 25683 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:50.021786 25683 net.cpp:382] accuracy -> accuracy
I0428 19:44:50.021800 25683 net.cpp:124] Setting up accuracy
I0428 19:44:50.021809 25683 net.cpp:131] Top shape: (1)
I0428 19:44:50.021824 25683 net.cpp:139] Memory required for data: 2566804
I0428 19:44:50.021839 25683 layer_factory.hpp:77] Creating layer loss
I0428 19:44:50.021848 25683 net.cpp:86] Creating Layer loss
I0428 19:44:50.021855 25683 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:50.021863 25683 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:50.021872 25683 net.cpp:382] loss -> loss
I0428 19:44:50.021883 25683 layer_factory.hpp:77] Creating layer loss
I0428 19:44:50.022155 25683 net.cpp:124] Setting up loss
I0428 19:44:50.022167 25683 net.cpp:131] Top shape: (1)
I0428 19:44:50.022176 25683 net.cpp:134]     with loss weight 1
I0428 19:44:50.022186 25683 net.cpp:139] Memory required for data: 2566808
I0428 19:44:50.022209 25683 net.cpp:200] loss needs backward computation.
I0428 19:44:50.022223 25683 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:50.022233 25683 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:50.022239 25683 net.cpp:200] relu3 needs backward computation.
I0428 19:44:50.022250 25683 net.cpp:200] ip3 needs backward computation.
I0428 19:44:50.022256 25683 net.cpp:200] relu2 needs backward computation.
I0428 19:44:50.022264 25683 net.cpp:200] ip2 needs backward computation.
I0428 19:44:50.022269 25683 net.cpp:200] relu1 needs backward computation.
I0428 19:44:50.022276 25683 net.cpp:200] ip1 needs backward computation.
I0428 19:44:50.022284 25683 net.cpp:200] pool1 needs backward computation.
I0428 19:44:50.022290 25683 net.cpp:200] conv1 needs backward computation.
I0428 19:44:50.022297 25683 net.cpp:200] pool0 needs backward computation.
I0428 19:44:50.022303 25683 net.cpp:200] conv0 needs backward computation.
I0428 19:44:50.022311 25683 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:50.022320 25683 net.cpp:202] mnist does not need backward computation.
I0428 19:44:50.022325 25683 net.cpp:244] This network produces output accuracy
I0428 19:44:50.022332 25683 net.cpp:244] This network produces output loss
I0428 19:44:50.022352 25683 net.cpp:257] Network initialization done.
I0428 19:44:50.022409 25683 solver.cpp:56] Solver scaffolding done.
I0428 19:44:50.022840 25683 caffe.cpp:248] Starting Optimization
I0428 19:44:50.022850 25683 solver.cpp:273] Solving LeNet
I0428 19:44:50.022855 25683 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:50.023857 25683 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:50.027596 25683 blocking_queue.cpp:49] Waiting for data
I0428 19:44:50.098062 25690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:50.098584 25683 solver.cpp:398]     Test net output #0: accuracy = 0.0889
I0428 19:44:50.098611 25683 solver.cpp:398]     Test net output #1: loss = 2.36926 (* 1 = 2.36926 loss)
I0428 19:44:50.100929 25683 solver.cpp:219] Iteration 0 (0 iter/s, 0.0780319s/100 iters), loss = 2.37182
I0428 19:44:50.100965 25683 solver.cpp:238]     Train net output #0: loss = 2.37182 (* 1 = 2.37182 loss)
I0428 19:44:50.100986 25683 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:50.203992 25683 solver.cpp:219] Iteration 100 (970.67 iter/s, 0.103022s/100 iters), loss = 0.635004
I0428 19:44:50.204037 25683 solver.cpp:238]     Train net output #0: loss = 0.635004 (* 1 = 0.635004 loss)
I0428 19:44:50.204063 25683 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:50.308678 25683 solver.cpp:219] Iteration 200 (955.615 iter/s, 0.104645s/100 iters), loss = 0.331947
I0428 19:44:50.308724 25683 solver.cpp:238]     Train net output #0: loss = 0.331947 (* 1 = 0.331947 loss)
I0428 19:44:50.308743 25683 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:50.419076 25683 solver.cpp:219] Iteration 300 (906.238 iter/s, 0.110346s/100 iters), loss = 0.499969
I0428 19:44:50.419113 25683 solver.cpp:238]     Train net output #0: loss = 0.499969 (* 1 = 0.499969 loss)
I0428 19:44:50.419127 25683 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:50.525178 25683 solver.cpp:219] Iteration 400 (942.883 iter/s, 0.106058s/100 iters), loss = 0.532333
I0428 19:44:50.525209 25683 solver.cpp:238]     Train net output #0: loss = 0.532333 (* 1 = 0.532333 loss)
I0428 19:44:50.525220 25683 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:50.628777 25683 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:50.685106 25690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:50.685580 25683 solver.cpp:398]     Test net output #0: accuracy = 0.8663
I0428 19:44:50.685600 25683 solver.cpp:398]     Test net output #1: loss = 0.351962 (* 1 = 0.351962 loss)
I0428 19:44:50.686658 25683 solver.cpp:219] Iteration 500 (619.43 iter/s, 0.161439s/100 iters), loss = 0.420501
I0428 19:44:50.686715 25683 solver.cpp:238]     Train net output #0: loss = 0.420501 (* 1 = 0.420501 loss)
I0428 19:44:50.686735 25683 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:50.789400 25683 solver.cpp:219] Iteration 600 (973.908 iter/s, 0.102679s/100 iters), loss = 0.182201
I0428 19:44:50.789427 25683 solver.cpp:238]     Train net output #0: loss = 0.182201 (* 1 = 0.182201 loss)
I0428 19:44:50.789453 25683 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:50.897938 25683 solver.cpp:219] Iteration 700 (921.651 iter/s, 0.108501s/100 iters), loss = 0.349628
I0428 19:44:50.897974 25683 solver.cpp:238]     Train net output #0: loss = 0.349628 (* 1 = 0.349628 loss)
I0428 19:44:50.897986 25683 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:51.001636 25683 solver.cpp:219] Iteration 800 (964.734 iter/s, 0.103656s/100 iters), loss = 0.516123
I0428 19:44:51.001662 25683 solver.cpp:238]     Train net output #0: loss = 0.516123 (* 1 = 0.516123 loss)
I0428 19:44:51.001688 25683 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:51.107869 25683 solver.cpp:219] Iteration 900 (941.638 iter/s, 0.106198s/100 iters), loss = 0.267805
I0428 19:44:51.107900 25683 solver.cpp:238]     Train net output #0: loss = 0.267805 (* 1 = 0.267805 loss)
I0428 19:44:51.107925 25683 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:51.141019 25689 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:51.218292 25683 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:51.219835 25683 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:51.220839 25683 solver.cpp:311] Iteration 1000, loss = 0.288005
I0428 19:44:51.220872 25683 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:51.278565 25690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:51.279137 25683 solver.cpp:398]     Test net output #0: accuracy = 0.8756
I0428 19:44:51.279165 25683 solver.cpp:398]     Test net output #1: loss = 0.318237 (* 1 = 0.318237 loss)
I0428 19:44:51.279172 25683 solver.cpp:316] Optimization Done.
I0428 19:44:51.279177 25683 caffe.cpp:259] Optimization Done.
