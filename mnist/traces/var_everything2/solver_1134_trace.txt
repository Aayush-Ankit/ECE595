I0428 20:10:24.898545 31833 caffe.cpp:218] Using GPUs 0
I0428 20:10:24.929217 31833 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:25.442050 31833 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1134.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:25.442184 31833 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1134.prototxt
I0428 20:10:25.442550 31833 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:25.442566 31833 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:25.442654 31833 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:25.442723 31833 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:25.442826 31833 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:25.442848 31833 net.cpp:86] Creating Layer mnist
I0428 20:10:25.442855 31833 net.cpp:382] mnist -> data
I0428 20:10:25.442878 31833 net.cpp:382] mnist -> label
I0428 20:10:25.443933 31833 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:25.446321 31833 net.cpp:124] Setting up mnist
I0428 20:10:25.446339 31833 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:25.446346 31833 net.cpp:131] Top shape: 64 (64)
I0428 20:10:25.446349 31833 net.cpp:139] Memory required for data: 200960
I0428 20:10:25.446357 31833 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:25.446372 31833 net.cpp:86] Creating Layer conv0
I0428 20:10:25.446377 31833 net.cpp:408] conv0 <- data
I0428 20:10:25.446388 31833 net.cpp:382] conv0 -> conv0
I0428 20:10:25.729897 31833 net.cpp:124] Setting up conv0
I0428 20:10:25.729926 31833 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:25.729931 31833 net.cpp:139] Memory required for data: 3887360
I0428 20:10:25.729971 31833 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:25.729988 31833 net.cpp:86] Creating Layer pool0
I0428 20:10:25.729993 31833 net.cpp:408] pool0 <- conv0
I0428 20:10:25.730002 31833 net.cpp:382] pool0 -> pool0
I0428 20:10:25.730060 31833 net.cpp:124] Setting up pool0
I0428 20:10:25.730069 31833 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:25.730072 31833 net.cpp:139] Memory required for data: 4808960
I0428 20:10:25.730077 31833 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:25.730090 31833 net.cpp:86] Creating Layer conv1
I0428 20:10:25.730095 31833 net.cpp:408] conv1 <- pool0
I0428 20:10:25.730103 31833 net.cpp:382] conv1 -> conv1
I0428 20:10:25.732491 31833 net.cpp:124] Setting up conv1
I0428 20:10:25.732508 31833 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:10:25.732530 31833 net.cpp:139] Memory required for data: 5628160
I0428 20:10:25.732542 31833 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:25.732553 31833 net.cpp:86] Creating Layer pool1
I0428 20:10:25.732558 31833 net.cpp:408] pool1 <- conv1
I0428 20:10:25.732568 31833 net.cpp:382] pool1 -> pool1
I0428 20:10:25.732612 31833 net.cpp:124] Setting up pool1
I0428 20:10:25.732620 31833 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:10:25.732623 31833 net.cpp:139] Memory required for data: 5832960
I0428 20:10:25.732627 31833 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:25.732635 31833 net.cpp:86] Creating Layer ip1
I0428 20:10:25.732640 31833 net.cpp:408] ip1 <- pool1
I0428 20:10:25.732646 31833 net.cpp:382] ip1 -> ip1
I0428 20:10:25.733798 31833 net.cpp:124] Setting up ip1
I0428 20:10:25.733813 31833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:25.733817 31833 net.cpp:139] Memory required for data: 5835520
I0428 20:10:25.733829 31833 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:25.733836 31833 net.cpp:86] Creating Layer relu1
I0428 20:10:25.733841 31833 net.cpp:408] relu1 <- ip1
I0428 20:10:25.733847 31833 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:25.734064 31833 net.cpp:124] Setting up relu1
I0428 20:10:25.734074 31833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:25.734077 31833 net.cpp:139] Memory required for data: 5838080
I0428 20:10:25.734081 31833 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:25.734091 31833 net.cpp:86] Creating Layer ip2
I0428 20:10:25.734096 31833 net.cpp:408] ip2 <- ip1
I0428 20:10:25.734102 31833 net.cpp:382] ip2 -> ip2
I0428 20:10:25.734220 31833 net.cpp:124] Setting up ip2
I0428 20:10:25.734228 31833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:25.734231 31833 net.cpp:139] Memory required for data: 5840640
I0428 20:10:25.734238 31833 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:25.734247 31833 net.cpp:86] Creating Layer relu2
I0428 20:10:25.734251 31833 net.cpp:408] relu2 <- ip2
I0428 20:10:25.734258 31833 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:25.735116 31833 net.cpp:124] Setting up relu2
I0428 20:10:25.735131 31833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:25.735134 31833 net.cpp:139] Memory required for data: 5843200
I0428 20:10:25.735138 31833 layer_factory.hpp:77] Creating layer loss
I0428 20:10:25.735146 31833 net.cpp:86] Creating Layer loss
I0428 20:10:25.735150 31833 net.cpp:408] loss <- ip2
I0428 20:10:25.735155 31833 net.cpp:408] loss <- label
I0428 20:10:25.735162 31833 net.cpp:382] loss -> loss
I0428 20:10:25.735179 31833 layer_factory.hpp:77] Creating layer loss
I0428 20:10:25.735476 31833 net.cpp:124] Setting up loss
I0428 20:10:25.735486 31833 net.cpp:131] Top shape: (1)
I0428 20:10:25.735491 31833 net.cpp:134]     with loss weight 1
I0428 20:10:25.735505 31833 net.cpp:139] Memory required for data: 5843204
I0428 20:10:25.735509 31833 net.cpp:200] loss needs backward computation.
I0428 20:10:25.735513 31833 net.cpp:200] relu2 needs backward computation.
I0428 20:10:25.735517 31833 net.cpp:200] ip2 needs backward computation.
I0428 20:10:25.735520 31833 net.cpp:200] relu1 needs backward computation.
I0428 20:10:25.735523 31833 net.cpp:200] ip1 needs backward computation.
I0428 20:10:25.735540 31833 net.cpp:200] pool1 needs backward computation.
I0428 20:10:25.735544 31833 net.cpp:200] conv1 needs backward computation.
I0428 20:10:25.735548 31833 net.cpp:200] pool0 needs backward computation.
I0428 20:10:25.735551 31833 net.cpp:200] conv0 needs backward computation.
I0428 20:10:25.735555 31833 net.cpp:202] mnist does not need backward computation.
I0428 20:10:25.735558 31833 net.cpp:244] This network produces output loss
I0428 20:10:25.735569 31833 net.cpp:257] Network initialization done.
I0428 20:10:25.735920 31833 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1134.prototxt
I0428 20:10:25.735950 31833 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:25.736052 31833 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:25.736130 31833 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:25.736181 31833 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:25.736194 31833 net.cpp:86] Creating Layer mnist
I0428 20:10:25.736202 31833 net.cpp:382] mnist -> data
I0428 20:10:25.736210 31833 net.cpp:382] mnist -> label
I0428 20:10:25.736313 31833 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:25.738672 31833 net.cpp:124] Setting up mnist
I0428 20:10:25.738687 31833 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:25.738693 31833 net.cpp:131] Top shape: 100 (100)
I0428 20:10:25.738696 31833 net.cpp:139] Memory required for data: 314000
I0428 20:10:25.738701 31833 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:25.738708 31833 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:25.738723 31833 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:25.738731 31833 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:25.738751 31833 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:25.738860 31833 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:25.738869 31833 net.cpp:131] Top shape: 100 (100)
I0428 20:10:25.738874 31833 net.cpp:131] Top shape: 100 (100)
I0428 20:10:25.738878 31833 net.cpp:139] Memory required for data: 314800
I0428 20:10:25.738881 31833 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:25.738893 31833 net.cpp:86] Creating Layer conv0
I0428 20:10:25.738899 31833 net.cpp:408] conv0 <- data
I0428 20:10:25.738905 31833 net.cpp:382] conv0 -> conv0
I0428 20:10:25.740612 31833 net.cpp:124] Setting up conv0
I0428 20:10:25.740627 31833 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:25.740631 31833 net.cpp:139] Memory required for data: 6074800
I0428 20:10:25.740643 31833 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:25.740651 31833 net.cpp:86] Creating Layer pool0
I0428 20:10:25.740656 31833 net.cpp:408] pool0 <- conv0
I0428 20:10:25.740661 31833 net.cpp:382] pool0 -> pool0
I0428 20:10:25.740707 31833 net.cpp:124] Setting up pool0
I0428 20:10:25.740723 31833 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:25.740727 31833 net.cpp:139] Memory required for data: 7514800
I0428 20:10:25.740731 31833 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:25.740741 31833 net.cpp:86] Creating Layer conv1
I0428 20:10:25.740746 31833 net.cpp:408] conv1 <- pool0
I0428 20:10:25.740751 31833 net.cpp:382] conv1 -> conv1
I0428 20:10:25.742722 31833 net.cpp:124] Setting up conv1
I0428 20:10:25.742738 31833 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:10:25.742743 31833 net.cpp:139] Memory required for data: 8794800
I0428 20:10:25.742754 31833 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:25.742764 31833 net.cpp:86] Creating Layer pool1
I0428 20:10:25.742769 31833 net.cpp:408] pool1 <- conv1
I0428 20:10:25.742775 31833 net.cpp:382] pool1 -> pool1
I0428 20:10:25.742820 31833 net.cpp:124] Setting up pool1
I0428 20:10:25.742828 31833 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:10:25.742832 31833 net.cpp:139] Memory required for data: 9114800
I0428 20:10:25.742835 31833 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:25.742843 31833 net.cpp:86] Creating Layer ip1
I0428 20:10:25.742847 31833 net.cpp:408] ip1 <- pool1
I0428 20:10:25.742853 31833 net.cpp:382] ip1 -> ip1
I0428 20:10:25.743026 31833 net.cpp:124] Setting up ip1
I0428 20:10:25.743034 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743038 31833 net.cpp:139] Memory required for data: 9118800
I0428 20:10:25.743046 31833 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:25.743053 31833 net.cpp:86] Creating Layer relu1
I0428 20:10:25.743057 31833 net.cpp:408] relu1 <- ip1
I0428 20:10:25.743062 31833 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:25.743257 31833 net.cpp:124] Setting up relu1
I0428 20:10:25.743266 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743270 31833 net.cpp:139] Memory required for data: 9122800
I0428 20:10:25.743274 31833 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:25.743283 31833 net.cpp:86] Creating Layer ip2
I0428 20:10:25.743288 31833 net.cpp:408] ip2 <- ip1
I0428 20:10:25.743294 31833 net.cpp:382] ip2 -> ip2
I0428 20:10:25.743414 31833 net.cpp:124] Setting up ip2
I0428 20:10:25.743422 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743425 31833 net.cpp:139] Memory required for data: 9126800
I0428 20:10:25.743432 31833 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:25.743438 31833 net.cpp:86] Creating Layer relu2
I0428 20:10:25.743443 31833 net.cpp:408] relu2 <- ip2
I0428 20:10:25.743446 31833 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:25.743633 31833 net.cpp:124] Setting up relu2
I0428 20:10:25.743641 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743644 31833 net.cpp:139] Memory required for data: 9130800
I0428 20:10:25.743649 31833 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:10:25.743654 31833 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:10:25.743656 31833 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:10:25.743661 31833 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:10:25.743683 31833 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:10:25.743727 31833 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:10:25.743734 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743738 31833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:25.743741 31833 net.cpp:139] Memory required for data: 9138800
I0428 20:10:25.743746 31833 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:25.743752 31833 net.cpp:86] Creating Layer accuracy
I0428 20:10:25.743757 31833 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:10:25.743760 31833 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:25.743765 31833 net.cpp:382] accuracy -> accuracy
I0428 20:10:25.743773 31833 net.cpp:124] Setting up accuracy
I0428 20:10:25.743779 31833 net.cpp:131] Top shape: (1)
I0428 20:10:25.743782 31833 net.cpp:139] Memory required for data: 9138804
I0428 20:10:25.743785 31833 layer_factory.hpp:77] Creating layer loss
I0428 20:10:25.743793 31833 net.cpp:86] Creating Layer loss
I0428 20:10:25.743796 31833 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:10:25.743800 31833 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:25.743805 31833 net.cpp:382] loss -> loss
I0428 20:10:25.743811 31833 layer_factory.hpp:77] Creating layer loss
I0428 20:10:25.744098 31833 net.cpp:124] Setting up loss
I0428 20:10:25.744108 31833 net.cpp:131] Top shape: (1)
I0428 20:10:25.744112 31833 net.cpp:134]     with loss weight 1
I0428 20:10:25.744120 31833 net.cpp:139] Memory required for data: 9138808
I0428 20:10:25.744124 31833 net.cpp:200] loss needs backward computation.
I0428 20:10:25.744129 31833 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:25.744133 31833 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:10:25.744138 31833 net.cpp:200] relu2 needs backward computation.
I0428 20:10:25.744140 31833 net.cpp:200] ip2 needs backward computation.
I0428 20:10:25.744144 31833 net.cpp:200] relu1 needs backward computation.
I0428 20:10:25.744148 31833 net.cpp:200] ip1 needs backward computation.
I0428 20:10:25.744150 31833 net.cpp:200] pool1 needs backward computation.
I0428 20:10:25.744154 31833 net.cpp:200] conv1 needs backward computation.
I0428 20:10:25.744158 31833 net.cpp:200] pool0 needs backward computation.
I0428 20:10:25.744163 31833 net.cpp:200] conv0 needs backward computation.
I0428 20:10:25.744166 31833 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:25.744170 31833 net.cpp:202] mnist does not need backward computation.
I0428 20:10:25.744175 31833 net.cpp:244] This network produces output accuracy
I0428 20:10:25.744179 31833 net.cpp:244] This network produces output loss
I0428 20:10:25.744190 31833 net.cpp:257] Network initialization done.
I0428 20:10:25.744235 31833 solver.cpp:56] Solver scaffolding done.
I0428 20:10:25.744547 31833 caffe.cpp:248] Starting Optimization
I0428 20:10:25.744554 31833 solver.cpp:273] Solving LeNet
I0428 20:10:25.744557 31833 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:25.745403 31833 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:25.803789 31840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:25.805586 31833 solver.cpp:398]     Test net output #0: accuracy = 0.0688
I0428 20:10:25.805609 31833 solver.cpp:398]     Test net output #1: loss = 2.3143 (* 1 = 2.3143 loss)
I0428 20:10:25.809260 31833 solver.cpp:219] Iteration 0 (0 iter/s, 0.0646769s/100 iters), loss = 2.30257
I0428 20:10:25.809293 31833 solver.cpp:238]     Train net output #0: loss = 2.30257 (* 1 = 2.30257 loss)
I0428 20:10:25.809305 31833 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:25.924857 31833 solver.cpp:219] Iteration 100 (865.44 iter/s, 0.115548s/100 iters), loss = 0.740329
I0428 20:10:25.924899 31833 solver.cpp:238]     Train net output #0: loss = 0.740329 (* 1 = 0.740329 loss)
I0428 20:10:25.924907 31833 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:26.040058 31833 solver.cpp:219] Iteration 200 (868.357 iter/s, 0.11516s/100 iters), loss = 0.439201
I0428 20:10:26.040112 31833 solver.cpp:238]     Train net output #0: loss = 0.439201 (* 1 = 0.439201 loss)
I0428 20:10:26.040120 31833 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:26.154886 31833 solver.cpp:219] Iteration 300 (871.285 iter/s, 0.114773s/100 iters), loss = 0.344059
I0428 20:10:26.154940 31833 solver.cpp:238]     Train net output #0: loss = 0.344059 (* 1 = 0.344059 loss)
I0428 20:10:26.154948 31833 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:26.267704 31833 solver.cpp:219] Iteration 400 (886.801 iter/s, 0.112765s/100 iters), loss = 0.322874
I0428 20:10:26.267738 31833 solver.cpp:238]     Train net output #0: loss = 0.322874 (* 1 = 0.322874 loss)
I0428 20:10:26.267745 31833 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:26.377964 31833 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:26.429939 31840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:26.431751 31833 solver.cpp:398]     Test net output #0: accuracy = 0.8673
I0428 20:10:26.431787 31833 solver.cpp:398]     Test net output #1: loss = 0.361902 (* 1 = 0.361902 loss)
I0428 20:10:26.432888 31833 solver.cpp:219] Iteration 500 (605.523 iter/s, 0.165147s/100 iters), loss = 0.384988
I0428 20:10:26.432940 31833 solver.cpp:238]     Train net output #0: loss = 0.384988 (* 1 = 0.384988 loss)
I0428 20:10:26.432965 31833 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:26.545378 31833 solver.cpp:219] Iteration 600 (889.466 iter/s, 0.112427s/100 iters), loss = 0.373867
I0428 20:10:26.545418 31833 solver.cpp:238]     Train net output #0: loss = 0.373867 (* 1 = 0.373867 loss)
I0428 20:10:26.545424 31833 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:26.656711 31833 solver.cpp:219] Iteration 700 (898.484 iter/s, 0.111299s/100 iters), loss = 0.42792
I0428 20:10:26.656769 31833 solver.cpp:238]     Train net output #0: loss = 0.42792 (* 1 = 0.42792 loss)
I0428 20:10:26.656775 31833 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:26.768363 31833 solver.cpp:219] Iteration 800 (896.044 iter/s, 0.111602s/100 iters), loss = 0.593564
I0428 20:10:26.768400 31833 solver.cpp:238]     Train net output #0: loss = 0.593564 (* 1 = 0.593564 loss)
I0428 20:10:26.768405 31833 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:26.879987 31833 solver.cpp:219] Iteration 900 (896.151 iter/s, 0.111588s/100 iters), loss = 0.23934
I0428 20:10:26.880010 31833 solver.cpp:238]     Train net output #0: loss = 0.23934 (* 1 = 0.23934 loss)
I0428 20:10:26.880017 31833 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:26.917296 31839 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:26.990053 31833 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:26.991514 31833 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:26.992420 31833 solver.cpp:311] Iteration 1000, loss = 0.307486
I0428 20:10:26.992435 31833 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:27.045778 31840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:27.047248 31833 solver.cpp:398]     Test net output #0: accuracy = 0.8793
I0428 20:10:27.047269 31833 solver.cpp:398]     Test net output #1: loss = 0.30794 (* 1 = 0.30794 loss)
I0428 20:10:27.047276 31833 solver.cpp:316] Optimization Done.
I0428 20:10:27.047278 31833 caffe.cpp:259] Optimization Done.
