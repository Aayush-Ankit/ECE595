I0428 19:39:43.928834 24371 caffe.cpp:218] Using GPUs 0
I0428 19:39:43.966619 24371 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:44.456734 24371 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test313.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:44.456918 24371 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test313.prototxt
I0428 19:39:44.457242 24371 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:44.457257 24371 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:44.457327 24371 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:44.457402 24371 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:44.457506 24371 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:44.457533 24371 net.cpp:86] Creating Layer mnist
I0428 19:39:44.457542 24371 net.cpp:382] mnist -> data
I0428 19:39:44.457566 24371 net.cpp:382] mnist -> label
I0428 19:39:44.458539 24371 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:44.460755 24371 net.cpp:124] Setting up mnist
I0428 19:39:44.460803 24371 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:44.460831 24371 net.cpp:131] Top shape: 64 (64)
I0428 19:39:44.460837 24371 net.cpp:139] Memory required for data: 200960
I0428 19:39:44.460846 24371 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:44.460882 24371 net.cpp:86] Creating Layer conv0
I0428 19:39:44.460891 24371 net.cpp:408] conv0 <- data
I0428 19:39:44.460924 24371 net.cpp:382] conv0 -> conv0
I0428 19:39:44.693408 24371 net.cpp:124] Setting up conv0
I0428 19:39:44.693437 24371 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:44.693442 24371 net.cpp:139] Memory required for data: 495872
I0428 19:39:44.693477 24371 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:44.693495 24371 net.cpp:86] Creating Layer pool0
I0428 19:39:44.693507 24371 net.cpp:408] pool0 <- conv0
I0428 19:39:44.693516 24371 net.cpp:382] pool0 -> pool0
I0428 19:39:44.693567 24371 net.cpp:124] Setting up pool0
I0428 19:39:44.693575 24371 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:44.693598 24371 net.cpp:139] Memory required for data: 569600
I0428 19:39:44.693603 24371 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:44.693619 24371 net.cpp:86] Creating Layer conv1
I0428 19:39:44.693625 24371 net.cpp:408] conv1 <- pool0
I0428 19:39:44.693634 24371 net.cpp:382] conv1 -> conv1
I0428 19:39:44.695524 24371 net.cpp:124] Setting up conv1
I0428 19:39:44.695539 24371 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:39:44.695545 24371 net.cpp:139] Memory required for data: 651520
I0428 19:39:44.695574 24371 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:44.695585 24371 net.cpp:86] Creating Layer pool1
I0428 19:39:44.695591 24371 net.cpp:408] pool1 <- conv1
I0428 19:39:44.695600 24371 net.cpp:382] pool1 -> pool1
I0428 19:39:44.695643 24371 net.cpp:124] Setting up pool1
I0428 19:39:44.695652 24371 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:39:44.695658 24371 net.cpp:139] Memory required for data: 672000
I0428 19:39:44.695663 24371 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:44.695674 24371 net.cpp:86] Creating Layer ip1
I0428 19:39:44.695679 24371 net.cpp:408] ip1 <- pool1
I0428 19:39:44.695688 24371 net.cpp:382] ip1 -> ip1
I0428 19:39:44.695794 24371 net.cpp:124] Setting up ip1
I0428 19:39:44.695803 24371 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:44.695808 24371 net.cpp:139] Memory required for data: 674560
I0428 19:39:44.695821 24371 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:44.695832 24371 net.cpp:86] Creating Layer relu1
I0428 19:39:44.695838 24371 net.cpp:408] relu1 <- ip1
I0428 19:39:44.695845 24371 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:44.696012 24371 net.cpp:124] Setting up relu1
I0428 19:39:44.696022 24371 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:44.696027 24371 net.cpp:139] Memory required for data: 677120
I0428 19:39:44.696033 24371 layer_factory.hpp:77] Creating layer loss
I0428 19:39:44.696040 24371 net.cpp:86] Creating Layer loss
I0428 19:39:44.696046 24371 net.cpp:408] loss <- ip1
I0428 19:39:44.696053 24371 net.cpp:408] loss <- label
I0428 19:39:44.696061 24371 net.cpp:382] loss -> loss
I0428 19:39:44.696084 24371 layer_factory.hpp:77] Creating layer loss
I0428 19:39:44.696945 24371 net.cpp:124] Setting up loss
I0428 19:39:44.696961 24371 net.cpp:131] Top shape: (1)
I0428 19:39:44.696967 24371 net.cpp:134]     with loss weight 1
I0428 19:39:44.696990 24371 net.cpp:139] Memory required for data: 677124
I0428 19:39:44.696996 24371 net.cpp:200] loss needs backward computation.
I0428 19:39:44.697003 24371 net.cpp:200] relu1 needs backward computation.
I0428 19:39:44.697010 24371 net.cpp:200] ip1 needs backward computation.
I0428 19:39:44.697016 24371 net.cpp:200] pool1 needs backward computation.
I0428 19:39:44.697021 24371 net.cpp:200] conv1 needs backward computation.
I0428 19:39:44.697027 24371 net.cpp:200] pool0 needs backward computation.
I0428 19:39:44.697033 24371 net.cpp:200] conv0 needs backward computation.
I0428 19:39:44.697041 24371 net.cpp:202] mnist does not need backward computation.
I0428 19:39:44.697046 24371 net.cpp:244] This network produces output loss
I0428 19:39:44.697060 24371 net.cpp:257] Network initialization done.
I0428 19:39:44.697388 24371 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test313.prototxt
I0428 19:39:44.697418 24371 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:44.697509 24371 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:44.697636 24371 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:44.697700 24371 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:44.697717 24371 net.cpp:86] Creating Layer mnist
I0428 19:39:44.697726 24371 net.cpp:382] mnist -> data
I0428 19:39:44.697737 24371 net.cpp:382] mnist -> label
I0428 19:39:44.697854 24371 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:44.699928 24371 net.cpp:124] Setting up mnist
I0428 19:39:44.699957 24371 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:44.699965 24371 net.cpp:131] Top shape: 100 (100)
I0428 19:39:44.699970 24371 net.cpp:139] Memory required for data: 314000
I0428 19:39:44.699976 24371 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:44.700000 24371 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:44.700006 24371 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:44.700013 24371 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:44.700024 24371 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:44.700135 24371 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:44.700145 24371 net.cpp:131] Top shape: 100 (100)
I0428 19:39:44.700152 24371 net.cpp:131] Top shape: 100 (100)
I0428 19:39:44.700157 24371 net.cpp:139] Memory required for data: 314800
I0428 19:39:44.700162 24371 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:44.700176 24371 net.cpp:86] Creating Layer conv0
I0428 19:39:44.700182 24371 net.cpp:408] conv0 <- data
I0428 19:39:44.700191 24371 net.cpp:382] conv0 -> conv0
I0428 19:39:44.700981 24371 net.cpp:124] Setting up conv0
I0428 19:39:44.700995 24371 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:44.701000 24371 net.cpp:139] Memory required for data: 775600
I0428 19:39:44.701030 24371 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:44.701040 24371 net.cpp:86] Creating Layer pool0
I0428 19:39:44.701045 24371 net.cpp:408] pool0 <- conv0
I0428 19:39:44.701052 24371 net.cpp:382] pool0 -> pool0
I0428 19:39:44.701094 24371 net.cpp:124] Setting up pool0
I0428 19:39:44.701103 24371 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:44.701108 24371 net.cpp:139] Memory required for data: 890800
I0428 19:39:44.701113 24371 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:44.701125 24371 net.cpp:86] Creating Layer conv1
I0428 19:39:44.701133 24371 net.cpp:408] conv1 <- pool0
I0428 19:39:44.701141 24371 net.cpp:382] conv1 -> conv1
I0428 19:39:44.702739 24371 net.cpp:124] Setting up conv1
I0428 19:39:44.702770 24371 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:39:44.702776 24371 net.cpp:139] Memory required for data: 1018800
I0428 19:39:44.702790 24371 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:44.702800 24371 net.cpp:86] Creating Layer pool1
I0428 19:39:44.702818 24371 net.cpp:408] pool1 <- conv1
I0428 19:39:44.702843 24371 net.cpp:382] pool1 -> pool1
I0428 19:39:44.702888 24371 net.cpp:124] Setting up pool1
I0428 19:39:44.702896 24371 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:39:44.702916 24371 net.cpp:139] Memory required for data: 1050800
I0428 19:39:44.702922 24371 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:44.702932 24371 net.cpp:86] Creating Layer ip1
I0428 19:39:44.702939 24371 net.cpp:408] ip1 <- pool1
I0428 19:39:44.702947 24371 net.cpp:382] ip1 -> ip1
I0428 19:39:44.703058 24371 net.cpp:124] Setting up ip1
I0428 19:39:44.703068 24371 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:44.703089 24371 net.cpp:139] Memory required for data: 1054800
I0428 19:39:44.703101 24371 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:44.703110 24371 net.cpp:86] Creating Layer relu1
I0428 19:39:44.703116 24371 net.cpp:408] relu1 <- ip1
I0428 19:39:44.703125 24371 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:44.703995 24371 net.cpp:124] Setting up relu1
I0428 19:39:44.704016 24371 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:44.704022 24371 net.cpp:139] Memory required for data: 1058800
I0428 19:39:44.704028 24371 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:39:44.704040 24371 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:39:44.704046 24371 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:39:44.704054 24371 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:39:44.704064 24371 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:39:44.704113 24371 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:39:44.704123 24371 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:44.704129 24371 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:44.704135 24371 net.cpp:139] Memory required for data: 1066800
I0428 19:39:44.704140 24371 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:44.704149 24371 net.cpp:86] Creating Layer accuracy
I0428 19:39:44.704155 24371 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:39:44.704164 24371 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:44.704172 24371 net.cpp:382] accuracy -> accuracy
I0428 19:39:44.704213 24371 net.cpp:124] Setting up accuracy
I0428 19:39:44.704223 24371 net.cpp:131] Top shape: (1)
I0428 19:39:44.704228 24371 net.cpp:139] Memory required for data: 1066804
I0428 19:39:44.704248 24371 layer_factory.hpp:77] Creating layer loss
I0428 19:39:44.704263 24371 net.cpp:86] Creating Layer loss
I0428 19:39:44.704269 24371 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:39:44.704282 24371 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:44.704300 24371 net.cpp:382] loss -> loss
I0428 19:39:44.704309 24371 layer_factory.hpp:77] Creating layer loss
I0428 19:39:44.704555 24371 net.cpp:124] Setting up loss
I0428 19:39:44.704567 24371 net.cpp:131] Top shape: (1)
I0428 19:39:44.704572 24371 net.cpp:134]     with loss weight 1
I0428 19:39:44.704582 24371 net.cpp:139] Memory required for data: 1066808
I0428 19:39:44.704588 24371 net.cpp:200] loss needs backward computation.
I0428 19:39:44.704594 24371 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:44.704601 24371 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:39:44.704605 24371 net.cpp:200] relu1 needs backward computation.
I0428 19:39:44.704612 24371 net.cpp:200] ip1 needs backward computation.
I0428 19:39:44.704617 24371 net.cpp:200] pool1 needs backward computation.
I0428 19:39:44.704622 24371 net.cpp:200] conv1 needs backward computation.
I0428 19:39:44.704628 24371 net.cpp:200] pool0 needs backward computation.
I0428 19:39:44.704633 24371 net.cpp:200] conv0 needs backward computation.
I0428 19:39:44.704639 24371 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:44.704646 24371 net.cpp:202] mnist does not need backward computation.
I0428 19:39:44.704650 24371 net.cpp:244] This network produces output accuracy
I0428 19:39:44.704656 24371 net.cpp:244] This network produces output loss
I0428 19:39:44.704671 24371 net.cpp:257] Network initialization done.
I0428 19:39:44.704720 24371 solver.cpp:56] Solver scaffolding done.
I0428 19:39:44.704998 24371 caffe.cpp:248] Starting Optimization
I0428 19:39:44.705006 24371 solver.cpp:273] Solving LeNet
I0428 19:39:44.705011 24371 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:44.705847 24371 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:44.707782 24371 blocking_queue.cpp:49] Waiting for data
I0428 19:39:44.776355 24378 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:44.776823 24371 solver.cpp:398]     Test net output #0: accuracy = 0.0781
I0428 19:39:44.776852 24371 solver.cpp:398]     Test net output #1: loss = 2.34334 (* 1 = 2.34334 loss)
I0428 19:39:44.778883 24371 solver.cpp:219] Iteration 0 (3.08311 iter/s, 0.0738374s/100 iters), loss = 2.32376
I0428 19:39:44.778920 24371 solver.cpp:238]     Train net output #0: loss = 2.32376 (* 1 = 2.32376 loss)
I0428 19:39:44.778944 24371 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:44.841831 24371 solver.cpp:219] Iteration 100 (1589.66 iter/s, 0.0629064s/100 iters), loss = 1.04236
I0428 19:39:44.841864 24371 solver.cpp:238]     Train net output #0: loss = 1.04236 (* 1 = 1.04236 loss)
I0428 19:39:44.841876 24371 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:44.902736 24371 solver.cpp:219] Iteration 200 (1642.94 iter/s, 0.0608664s/100 iters), loss = 0.411153
I0428 19:39:44.902765 24371 solver.cpp:238]     Train net output #0: loss = 0.411153 (* 1 = 0.411153 loss)
I0428 19:39:44.902792 24371 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:44.967759 24371 solver.cpp:219] Iteration 300 (1538.74 iter/s, 0.0649882s/100 iters), loss = 0.522326
I0428 19:39:44.967787 24371 solver.cpp:238]     Train net output #0: loss = 0.522326 (* 1 = 0.522326 loss)
I0428 19:39:44.967798 24371 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:45.024580 24371 solver.cpp:219] Iteration 400 (1761 iter/s, 0.0567859s/100 iters), loss = 0.275419
I0428 19:39:45.024605 24371 solver.cpp:238]     Train net output #0: loss = 0.275419 (* 1 = 0.275419 loss)
I0428 19:39:45.024631 24371 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:45.079839 24371 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:45.132203 24378 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:45.132575 24371 solver.cpp:398]     Test net output #0: accuracy = 0.9415
I0428 19:39:45.132596 24371 solver.cpp:398]     Test net output #1: loss = 0.201388 (* 1 = 0.201388 loss)
I0428 19:39:45.133283 24371 solver.cpp:219] Iteration 500 (920.226 iter/s, 0.108669s/100 iters), loss = 0.187134
I0428 19:39:45.133311 24371 solver.cpp:238]     Train net output #0: loss = 0.187134 (* 1 = 0.187134 loss)
I0428 19:39:45.133344 24371 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:45.200273 24371 solver.cpp:219] Iteration 600 (1493.49 iter/s, 0.0669573s/100 iters), loss = 0.193676
I0428 19:39:45.200304 24371 solver.cpp:238]     Train net output #0: loss = 0.193676 (* 1 = 0.193676 loss)
I0428 19:39:45.200330 24371 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:45.258105 24371 solver.cpp:219] Iteration 700 (1730.22 iter/s, 0.0577962s/100 iters), loss = 0.226653
I0428 19:39:45.258137 24371 solver.cpp:238]     Train net output #0: loss = 0.226653 (* 1 = 0.226653 loss)
I0428 19:39:45.258149 24371 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:45.314467 24371 solver.cpp:219] Iteration 800 (1775.41 iter/s, 0.0563251s/100 iters), loss = 0.289546
I0428 19:39:45.314501 24371 solver.cpp:238]     Train net output #0: loss = 0.289546 (* 1 = 0.289546 loss)
I0428 19:39:45.314527 24371 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:45.369352 24371 solver.cpp:219] Iteration 900 (1823.27 iter/s, 0.0548465s/100 iters), loss = 0.303103
I0428 19:39:45.369382 24371 solver.cpp:238]     Train net output #0: loss = 0.303103 (* 1 = 0.303103 loss)
I0428 19:39:45.369410 24371 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:45.390535 24377 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:45.427870 24371 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:45.428432 24371 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:45.428746 24371 solver.cpp:311] Iteration 1000, loss = 0.221209
I0428 19:39:45.428766 24371 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:45.481175 24378 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:45.481554 24371 solver.cpp:398]     Test net output #0: accuracy = 0.9503
I0428 19:39:45.481578 24371 solver.cpp:398]     Test net output #1: loss = 0.16667 (* 1 = 0.16667 loss)
I0428 19:39:45.481586 24371 solver.cpp:316] Optimization Done.
I0428 19:39:45.481592 24371 caffe.cpp:259] Optimization Done.
