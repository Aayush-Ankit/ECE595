I0428 19:49:27.135846 26766 caffe.cpp:218] Using GPUs 0
I0428 19:49:27.168182 26766 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:27.652351 26766 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test575.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:27.652523 26766 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test575.prototxt
I0428 19:49:27.652982 26766 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:27.653000 26766 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:27.653095 26766 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:27.653167 26766 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:27.653312 26766 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:27.653333 26766 net.cpp:86] Creating Layer mnist
I0428 19:49:27.653339 26766 net.cpp:382] mnist -> data
I0428 19:49:27.653359 26766 net.cpp:382] mnist -> label
I0428 19:49:27.654372 26766 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:27.656522 26766 net.cpp:124] Setting up mnist
I0428 19:49:27.656553 26766 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:27.656566 26766 net.cpp:131] Top shape: 64 (64)
I0428 19:49:27.656569 26766 net.cpp:139] Memory required for data: 200960
I0428 19:49:27.656575 26766 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:27.656605 26766 net.cpp:86] Creating Layer conv0
I0428 19:49:27.656622 26766 net.cpp:408] conv0 <- data
I0428 19:49:27.656633 26766 net.cpp:382] conv0 -> conv0
I0428 19:49:27.885315 26766 net.cpp:124] Setting up conv0
I0428 19:49:27.885340 26766 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:27.885344 26766 net.cpp:139] Memory required for data: 938240
I0428 19:49:27.885359 26766 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:27.885371 26766 net.cpp:86] Creating Layer pool0
I0428 19:49:27.885375 26766 net.cpp:408] pool0 <- conv0
I0428 19:49:27.885380 26766 net.cpp:382] pool0 -> pool0
I0428 19:49:27.885438 26766 net.cpp:124] Setting up pool0
I0428 19:49:27.885443 26766 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:27.885445 26766 net.cpp:139] Memory required for data: 1122560
I0428 19:49:27.885448 26766 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:27.885458 26766 net.cpp:86] Creating Layer conv1
I0428 19:49:27.885462 26766 net.cpp:408] conv1 <- pool0
I0428 19:49:27.885466 26766 net.cpp:382] conv1 -> conv1
I0428 19:49:27.887320 26766 net.cpp:124] Setting up conv1
I0428 19:49:27.887348 26766 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:27.887352 26766 net.cpp:139] Memory required for data: 1204480
I0428 19:49:27.887362 26766 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:27.887368 26766 net.cpp:86] Creating Layer pool1
I0428 19:49:27.887372 26766 net.cpp:408] pool1 <- conv1
I0428 19:49:27.887377 26766 net.cpp:382] pool1 -> pool1
I0428 19:49:27.887414 26766 net.cpp:124] Setting up pool1
I0428 19:49:27.887419 26766 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:27.887423 26766 net.cpp:139] Memory required for data: 1224960
I0428 19:49:27.887425 26766 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:27.887432 26766 net.cpp:86] Creating Layer ip1
I0428 19:49:27.887435 26766 net.cpp:408] ip1 <- pool1
I0428 19:49:27.887439 26766 net.cpp:382] ip1 -> ip1
I0428 19:49:27.888399 26766 net.cpp:124] Setting up ip1
I0428 19:49:27.888411 26766 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:27.888430 26766 net.cpp:139] Memory required for data: 1231360
I0428 19:49:27.888438 26766 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:27.888444 26766 net.cpp:86] Creating Layer relu1
I0428 19:49:27.888447 26766 net.cpp:408] relu1 <- ip1
I0428 19:49:27.888453 26766 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:27.888612 26766 net.cpp:124] Setting up relu1
I0428 19:49:27.888619 26766 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:27.888622 26766 net.cpp:139] Memory required for data: 1237760
I0428 19:49:27.888625 26766 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:27.888633 26766 net.cpp:86] Creating Layer ip2
I0428 19:49:27.888635 26766 net.cpp:408] ip2 <- ip1
I0428 19:49:27.888639 26766 net.cpp:382] ip2 -> ip2
I0428 19:49:27.888741 26766 net.cpp:124] Setting up ip2
I0428 19:49:27.888746 26766 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:27.888749 26766 net.cpp:139] Memory required for data: 1250560
I0428 19:49:27.888756 26766 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:27.888761 26766 net.cpp:86] Creating Layer relu2
I0428 19:49:27.888763 26766 net.cpp:408] relu2 <- ip2
I0428 19:49:27.888767 26766 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:27.889669 26766 net.cpp:124] Setting up relu2
I0428 19:49:27.889683 26766 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:27.889703 26766 net.cpp:139] Memory required for data: 1263360
I0428 19:49:27.889705 26766 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:27.889713 26766 net.cpp:86] Creating Layer ip3
I0428 19:49:27.889715 26766 net.cpp:408] ip3 <- ip2
I0428 19:49:27.889721 26766 net.cpp:382] ip3 -> ip3
I0428 19:49:27.889824 26766 net.cpp:124] Setting up ip3
I0428 19:49:27.889832 26766 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:27.889834 26766 net.cpp:139] Memory required for data: 1265920
I0428 19:49:27.889842 26766 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:27.889847 26766 net.cpp:86] Creating Layer relu3
I0428 19:49:27.889850 26766 net.cpp:408] relu3 <- ip3
I0428 19:49:27.889854 26766 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:27.890017 26766 net.cpp:124] Setting up relu3
I0428 19:49:27.890027 26766 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:27.890029 26766 net.cpp:139] Memory required for data: 1268480
I0428 19:49:27.890031 26766 layer_factory.hpp:77] Creating layer loss
I0428 19:49:27.890038 26766 net.cpp:86] Creating Layer loss
I0428 19:49:27.890041 26766 net.cpp:408] loss <- ip3
I0428 19:49:27.890045 26766 net.cpp:408] loss <- label
I0428 19:49:27.890049 26766 net.cpp:382] loss -> loss
I0428 19:49:27.890066 26766 layer_factory.hpp:77] Creating layer loss
I0428 19:49:27.890316 26766 net.cpp:124] Setting up loss
I0428 19:49:27.890324 26766 net.cpp:131] Top shape: (1)
I0428 19:49:27.890327 26766 net.cpp:134]     with loss weight 1
I0428 19:49:27.890341 26766 net.cpp:139] Memory required for data: 1268484
I0428 19:49:27.890344 26766 net.cpp:200] loss needs backward computation.
I0428 19:49:27.890348 26766 net.cpp:200] relu3 needs backward computation.
I0428 19:49:27.890350 26766 net.cpp:200] ip3 needs backward computation.
I0428 19:49:27.890353 26766 net.cpp:200] relu2 needs backward computation.
I0428 19:49:27.890357 26766 net.cpp:200] ip2 needs backward computation.
I0428 19:49:27.890358 26766 net.cpp:200] relu1 needs backward computation.
I0428 19:49:27.890362 26766 net.cpp:200] ip1 needs backward computation.
I0428 19:49:27.890364 26766 net.cpp:200] pool1 needs backward computation.
I0428 19:49:27.890367 26766 net.cpp:200] conv1 needs backward computation.
I0428 19:49:27.890370 26766 net.cpp:200] pool0 needs backward computation.
I0428 19:49:27.890373 26766 net.cpp:200] conv0 needs backward computation.
I0428 19:49:27.890377 26766 net.cpp:202] mnist does not need backward computation.
I0428 19:49:27.890378 26766 net.cpp:244] This network produces output loss
I0428 19:49:27.890389 26766 net.cpp:257] Network initialization done.
I0428 19:49:27.890780 26766 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test575.prototxt
I0428 19:49:27.890820 26766 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:27.890905 26766 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:27.890982 26766 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:27.891026 26766 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:27.891049 26766 net.cpp:86] Creating Layer mnist
I0428 19:49:27.891054 26766 net.cpp:382] mnist -> data
I0428 19:49:27.891062 26766 net.cpp:382] mnist -> label
I0428 19:49:27.891147 26766 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:27.893079 26766 net.cpp:124] Setting up mnist
I0428 19:49:27.893091 26766 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:27.893097 26766 net.cpp:131] Top shape: 100 (100)
I0428 19:49:27.893100 26766 net.cpp:139] Memory required for data: 314000
I0428 19:49:27.893103 26766 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:27.893111 26766 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:27.893115 26766 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:27.893120 26766 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:27.893126 26766 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:27.893227 26766 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:27.893235 26766 net.cpp:131] Top shape: 100 (100)
I0428 19:49:27.893239 26766 net.cpp:131] Top shape: 100 (100)
I0428 19:49:27.893241 26766 net.cpp:139] Memory required for data: 314800
I0428 19:49:27.893244 26766 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:27.893254 26766 net.cpp:86] Creating Layer conv0
I0428 19:49:27.893257 26766 net.cpp:408] conv0 <- data
I0428 19:49:27.893278 26766 net.cpp:382] conv0 -> conv0
I0428 19:49:27.894840 26766 net.cpp:124] Setting up conv0
I0428 19:49:27.894855 26766 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:27.894873 26766 net.cpp:139] Memory required for data: 1466800
I0428 19:49:27.894893 26766 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:27.894915 26766 net.cpp:86] Creating Layer pool0
I0428 19:49:27.894918 26766 net.cpp:408] pool0 <- conv0
I0428 19:49:27.894923 26766 net.cpp:382] pool0 -> pool0
I0428 19:49:27.894973 26766 net.cpp:124] Setting up pool0
I0428 19:49:27.894990 26766 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:27.894994 26766 net.cpp:139] Memory required for data: 1754800
I0428 19:49:27.894996 26766 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:27.895005 26766 net.cpp:86] Creating Layer conv1
I0428 19:49:27.895016 26766 net.cpp:408] conv1 <- pool0
I0428 19:49:27.895023 26766 net.cpp:382] conv1 -> conv1
I0428 19:49:27.897104 26766 net.cpp:124] Setting up conv1
I0428 19:49:27.897117 26766 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:27.897121 26766 net.cpp:139] Memory required for data: 1882800
I0428 19:49:27.897130 26766 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:27.897137 26766 net.cpp:86] Creating Layer pool1
I0428 19:49:27.897140 26766 net.cpp:408] pool1 <- conv1
I0428 19:49:27.897147 26766 net.cpp:382] pool1 -> pool1
I0428 19:49:27.897254 26766 net.cpp:124] Setting up pool1
I0428 19:49:27.897263 26766 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:27.897266 26766 net.cpp:139] Memory required for data: 1914800
I0428 19:49:27.897269 26766 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:27.897277 26766 net.cpp:86] Creating Layer ip1
I0428 19:49:27.897281 26766 net.cpp:408] ip1 <- pool1
I0428 19:49:27.897287 26766 net.cpp:382] ip1 -> ip1
I0428 19:49:27.897413 26766 net.cpp:124] Setting up ip1
I0428 19:49:27.897420 26766 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:27.897433 26766 net.cpp:139] Memory required for data: 1924800
I0428 19:49:27.897441 26766 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:27.897446 26766 net.cpp:86] Creating Layer relu1
I0428 19:49:27.897450 26766 net.cpp:408] relu1 <- ip1
I0428 19:49:27.897455 26766 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:27.897624 26766 net.cpp:124] Setting up relu1
I0428 19:49:27.897632 26766 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:27.897635 26766 net.cpp:139] Memory required for data: 1934800
I0428 19:49:27.897639 26766 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:27.897644 26766 net.cpp:86] Creating Layer ip2
I0428 19:49:27.897647 26766 net.cpp:408] ip2 <- ip1
I0428 19:49:27.897652 26766 net.cpp:382] ip2 -> ip2
I0428 19:49:27.897776 26766 net.cpp:124] Setting up ip2
I0428 19:49:27.897783 26766 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:27.897785 26766 net.cpp:139] Memory required for data: 1954800
I0428 19:49:27.897791 26766 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:27.897795 26766 net.cpp:86] Creating Layer relu2
I0428 19:49:27.897799 26766 net.cpp:408] relu2 <- ip2
I0428 19:49:27.897804 26766 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:27.897974 26766 net.cpp:124] Setting up relu2
I0428 19:49:27.897981 26766 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:27.897984 26766 net.cpp:139] Memory required for data: 1974800
I0428 19:49:27.897987 26766 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:27.897994 26766 net.cpp:86] Creating Layer ip3
I0428 19:49:27.897997 26766 net.cpp:408] ip3 <- ip2
I0428 19:49:27.898001 26766 net.cpp:382] ip3 -> ip3
I0428 19:49:27.898106 26766 net.cpp:124] Setting up ip3
I0428 19:49:27.898113 26766 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:27.898116 26766 net.cpp:139] Memory required for data: 1978800
I0428 19:49:27.898124 26766 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:27.898128 26766 net.cpp:86] Creating Layer relu3
I0428 19:49:27.898131 26766 net.cpp:408] relu3 <- ip3
I0428 19:49:27.898136 26766 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:27.898892 26766 net.cpp:124] Setting up relu3
I0428 19:49:27.898905 26766 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:27.898923 26766 net.cpp:139] Memory required for data: 1982800
I0428 19:49:27.898926 26766 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:27.898949 26766 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:27.898952 26766 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:27.898957 26766 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:27.898963 26766 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:27.899003 26766 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:27.899022 26766 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:27.899026 26766 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:27.899029 26766 net.cpp:139] Memory required for data: 1990800
I0428 19:49:27.899032 26766 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:27.899037 26766 net.cpp:86] Creating Layer accuracy
I0428 19:49:27.899040 26766 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:27.899044 26766 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:27.899049 26766 net.cpp:382] accuracy -> accuracy
I0428 19:49:27.899055 26766 net.cpp:124] Setting up accuracy
I0428 19:49:27.899060 26766 net.cpp:131] Top shape: (1)
I0428 19:49:27.899062 26766 net.cpp:139] Memory required for data: 1990804
I0428 19:49:27.899065 26766 layer_factory.hpp:77] Creating layer loss
I0428 19:49:27.899070 26766 net.cpp:86] Creating Layer loss
I0428 19:49:27.899072 26766 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:27.899075 26766 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:27.899080 26766 net.cpp:382] loss -> loss
I0428 19:49:27.899086 26766 layer_factory.hpp:77] Creating layer loss
I0428 19:49:27.899351 26766 net.cpp:124] Setting up loss
I0428 19:49:27.899360 26766 net.cpp:131] Top shape: (1)
I0428 19:49:27.899379 26766 net.cpp:134]     with loss weight 1
I0428 19:49:27.899385 26766 net.cpp:139] Memory required for data: 1990808
I0428 19:49:27.899397 26766 net.cpp:200] loss needs backward computation.
I0428 19:49:27.899401 26766 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:27.899405 26766 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:27.899408 26766 net.cpp:200] relu3 needs backward computation.
I0428 19:49:27.899411 26766 net.cpp:200] ip3 needs backward computation.
I0428 19:49:27.899413 26766 net.cpp:200] relu2 needs backward computation.
I0428 19:49:27.899416 26766 net.cpp:200] ip2 needs backward computation.
I0428 19:49:27.899437 26766 net.cpp:200] relu1 needs backward computation.
I0428 19:49:27.899440 26766 net.cpp:200] ip1 needs backward computation.
I0428 19:49:27.899442 26766 net.cpp:200] pool1 needs backward computation.
I0428 19:49:27.899446 26766 net.cpp:200] conv1 needs backward computation.
I0428 19:49:27.899449 26766 net.cpp:200] pool0 needs backward computation.
I0428 19:49:27.899452 26766 net.cpp:200] conv0 needs backward computation.
I0428 19:49:27.899456 26766 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:27.899459 26766 net.cpp:202] mnist does not need backward computation.
I0428 19:49:27.899462 26766 net.cpp:244] This network produces output accuracy
I0428 19:49:27.899477 26766 net.cpp:244] This network produces output loss
I0428 19:49:27.899489 26766 net.cpp:257] Network initialization done.
I0428 19:49:27.899533 26766 solver.cpp:56] Solver scaffolding done.
I0428 19:49:27.899916 26766 caffe.cpp:248] Starting Optimization
I0428 19:49:27.899921 26766 solver.cpp:273] Solving LeNet
I0428 19:49:27.899924 26766 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:27.900728 26766 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:27.910867 26766 blocking_queue.cpp:49] Waiting for data
I0428 19:49:27.947059 26773 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:27.947592 26766 solver.cpp:398]     Test net output #0: accuracy = 0.1799
I0428 19:49:27.947608 26766 solver.cpp:398]     Test net output #1: loss = 2.2961 (* 1 = 2.2961 loss)
I0428 19:49:27.949501 26766 solver.cpp:219] Iteration 0 (4.59505 iter/s, 0.0495421s/100 iters), loss = 2.28003
I0428 19:49:27.949540 26766 solver.cpp:238]     Train net output #0: loss = 2.28003 (* 1 = 2.28003 loss)
I0428 19:49:27.949553 26766 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:28.019778 26766 solver.cpp:219] Iteration 100 (1423.64 iter/s, 0.0702423s/100 iters), loss = 1.12483
I0428 19:49:28.019816 26766 solver.cpp:238]     Train net output #0: loss = 1.12483 (* 1 = 1.12483 loss)
I0428 19:49:28.019822 26766 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:28.089735 26766 solver.cpp:219] Iteration 200 (1430.15 iter/s, 0.0699228s/100 iters), loss = 0.566554
I0428 19:49:28.089757 26766 solver.cpp:238]     Train net output #0: loss = 0.566554 (* 1 = 0.566554 loss)
I0428 19:49:28.089763 26766 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:28.159451 26766 solver.cpp:219] Iteration 300 (1435.04 iter/s, 0.0696842s/100 iters), loss = 0.411193
I0428 19:49:28.159487 26766 solver.cpp:238]     Train net output #0: loss = 0.411193 (* 1 = 0.411193 loss)
I0428 19:49:28.159493 26766 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:28.229553 26766 solver.cpp:219] Iteration 400 (1427.1 iter/s, 0.0700723s/100 iters), loss = 0.42504
I0428 19:49:28.229578 26766 solver.cpp:238]     Train net output #0: loss = 0.42504 (* 1 = 0.42504 loss)
I0428 19:49:28.229583 26766 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:28.298568 26766 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:28.343684 26773 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:28.344240 26766 solver.cpp:398]     Test net output #0: accuracy = 0.8276
I0428 19:49:28.344275 26766 solver.cpp:398]     Test net output #1: loss = 0.462978 (* 1 = 0.462978 loss)
I0428 19:49:28.345075 26766 solver.cpp:219] Iteration 500 (865.915 iter/s, 0.115485s/100 iters), loss = 0.401511
I0428 19:49:28.345134 26766 solver.cpp:238]     Train net output #0: loss = 0.401511 (* 1 = 0.401511 loss)
I0428 19:49:28.345167 26766 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:28.420650 26766 solver.cpp:219] Iteration 600 (1324.31 iter/s, 0.0755107s/100 iters), loss = 0.501331
I0428 19:49:28.420691 26766 solver.cpp:238]     Train net output #0: loss = 0.501331 (* 1 = 0.501331 loss)
I0428 19:49:28.420696 26766 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:28.494504 26766 solver.cpp:219] Iteration 700 (1354.63 iter/s, 0.0738211s/100 iters), loss = 0.349647
I0428 19:49:28.494544 26766 solver.cpp:238]     Train net output #0: loss = 0.349647 (* 1 = 0.349647 loss)
I0428 19:49:28.494550 26766 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:28.569839 26766 solver.cpp:219] Iteration 800 (1327.97 iter/s, 0.0753029s/100 iters), loss = 0.343487
I0428 19:49:28.569878 26766 solver.cpp:238]     Train net output #0: loss = 0.343487 (* 1 = 0.343487 loss)
I0428 19:49:28.569885 26766 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:28.647171 26766 solver.cpp:219] Iteration 900 (1293.65 iter/s, 0.0773007s/100 iters), loss = 0.120828
I0428 19:49:28.647197 26766 solver.cpp:238]     Train net output #0: loss = 0.120828 (* 1 = 0.120828 loss)
I0428 19:49:28.647202 26766 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:28.672808 26772 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:28.719190 26766 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:28.719882 26766 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:28.720346 26766 solver.cpp:311] Iteration 1000, loss = 0.131315
I0428 19:49:28.720377 26766 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:28.796130 26773 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:28.796636 26766 solver.cpp:398]     Test net output #0: accuracy = 0.9642
I0428 19:49:28.796674 26766 solver.cpp:398]     Test net output #1: loss = 0.11243 (* 1 = 0.11243 loss)
I0428 19:49:28.796679 26766 solver.cpp:316] Optimization Done.
I0428 19:49:28.796695 26766 caffe.cpp:259] Optimization Done.
