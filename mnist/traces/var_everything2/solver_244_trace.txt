I0428 19:36:30.685339 23694 caffe.cpp:218] Using GPUs 0
I0428 19:36:30.722533 23694 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:36:31.234820 23694 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test244.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:36:31.234961 23694 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test244.prototxt
I0428 19:36:31.235303 23694 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:36:31.235319 23694 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:36:31.235399 23694 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:31.235466 23694 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:31.235570 23694 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:36:31.235594 23694 net.cpp:86] Creating Layer mnist
I0428 19:36:31.235604 23694 net.cpp:382] mnist -> data
I0428 19:36:31.235626 23694 net.cpp:382] mnist -> label
I0428 19:36:31.236711 23694 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:36:31.239163 23694 net.cpp:124] Setting up mnist
I0428 19:36:31.239189 23694 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:36:31.239195 23694 net.cpp:131] Top shape: 64 (64)
I0428 19:36:31.239199 23694 net.cpp:139] Memory required for data: 200960
I0428 19:36:31.239207 23694 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:31.239225 23694 net.cpp:86] Creating Layer conv0
I0428 19:36:31.239231 23694 net.cpp:408] conv0 <- data
I0428 19:36:31.239243 23694 net.cpp:382] conv0 -> conv0
I0428 19:36:31.531545 23694 net.cpp:124] Setting up conv0
I0428 19:36:31.531575 23694 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:36:31.531580 23694 net.cpp:139] Memory required for data: 14946560
I0428 19:36:31.531597 23694 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:31.531611 23694 net.cpp:86] Creating Layer pool0
I0428 19:36:31.531616 23694 net.cpp:408] pool0 <- conv0
I0428 19:36:31.531622 23694 net.cpp:382] pool0 -> pool0
I0428 19:36:31.531677 23694 net.cpp:124] Setting up pool0
I0428 19:36:31.531685 23694 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:36:31.531689 23694 net.cpp:139] Memory required for data: 18632960
I0428 19:36:31.531710 23694 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:31.531719 23694 net.cpp:86] Creating Layer ip1
I0428 19:36:31.531723 23694 net.cpp:408] ip1 <- pool0
I0428 19:36:31.531728 23694 net.cpp:382] ip1 -> ip1
I0428 19:36:31.537636 23694 net.cpp:124] Setting up ip1
I0428 19:36:31.537652 23694 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:36:31.537657 23694 net.cpp:139] Memory required for data: 18645760
I0428 19:36:31.537667 23694 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:31.537674 23694 net.cpp:86] Creating Layer relu1
I0428 19:36:31.537678 23694 net.cpp:408] relu1 <- ip1
I0428 19:36:31.537683 23694 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:31.537878 23694 net.cpp:124] Setting up relu1
I0428 19:36:31.537889 23694 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:36:31.537892 23694 net.cpp:139] Memory required for data: 18658560
I0428 19:36:31.537896 23694 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:31.537904 23694 net.cpp:86] Creating Layer ip2
I0428 19:36:31.537909 23694 net.cpp:408] ip2 <- ip1
I0428 19:36:31.537914 23694 net.cpp:382] ip2 -> ip2
I0428 19:36:31.538024 23694 net.cpp:124] Setting up ip2
I0428 19:36:31.538033 23694 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:31.538036 23694 net.cpp:139] Memory required for data: 18661120
I0428 19:36:31.538044 23694 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:31.538050 23694 net.cpp:86] Creating Layer relu2
I0428 19:36:31.538054 23694 net.cpp:408] relu2 <- ip2
I0428 19:36:31.538059 23694 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:31.538890 23694 net.cpp:124] Setting up relu2
I0428 19:36:31.538905 23694 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:31.538909 23694 net.cpp:139] Memory required for data: 18663680
I0428 19:36:31.538913 23694 layer_factory.hpp:77] Creating layer loss
I0428 19:36:31.538920 23694 net.cpp:86] Creating Layer loss
I0428 19:36:31.538924 23694 net.cpp:408] loss <- ip2
I0428 19:36:31.538929 23694 net.cpp:408] loss <- label
I0428 19:36:31.538936 23694 net.cpp:382] loss -> loss
I0428 19:36:31.538956 23694 layer_factory.hpp:77] Creating layer loss
I0428 19:36:31.539217 23694 net.cpp:124] Setting up loss
I0428 19:36:31.539228 23694 net.cpp:131] Top shape: (1)
I0428 19:36:31.539232 23694 net.cpp:134]     with loss weight 1
I0428 19:36:31.539249 23694 net.cpp:139] Memory required for data: 18663684
I0428 19:36:31.539254 23694 net.cpp:200] loss needs backward computation.
I0428 19:36:31.539258 23694 net.cpp:200] relu2 needs backward computation.
I0428 19:36:31.539261 23694 net.cpp:200] ip2 needs backward computation.
I0428 19:36:31.539265 23694 net.cpp:200] relu1 needs backward computation.
I0428 19:36:31.539268 23694 net.cpp:200] ip1 needs backward computation.
I0428 19:36:31.539273 23694 net.cpp:200] pool0 needs backward computation.
I0428 19:36:31.539276 23694 net.cpp:200] conv0 needs backward computation.
I0428 19:36:31.539280 23694 net.cpp:202] mnist does not need backward computation.
I0428 19:36:31.539283 23694 net.cpp:244] This network produces output loss
I0428 19:36:31.539293 23694 net.cpp:257] Network initialization done.
I0428 19:36:31.539573 23694 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test244.prototxt
I0428 19:36:31.539623 23694 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:36:31.539705 23694 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:31.539782 23694 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:31.539831 23694 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:36:31.539845 23694 net.cpp:86] Creating Layer mnist
I0428 19:36:31.539851 23694 net.cpp:382] mnist -> data
I0428 19:36:31.539860 23694 net.cpp:382] mnist -> label
I0428 19:36:31.539954 23694 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:36:31.542279 23694 net.cpp:124] Setting up mnist
I0428 19:36:31.542295 23694 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:36:31.542301 23694 net.cpp:131] Top shape: 100 (100)
I0428 19:36:31.542305 23694 net.cpp:139] Memory required for data: 314000
I0428 19:36:31.542309 23694 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:36:31.542332 23694 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:36:31.542337 23694 net.cpp:408] label_mnist_1_split <- label
I0428 19:36:31.542342 23694 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:36:31.542351 23694 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:36:31.542397 23694 net.cpp:124] Setting up label_mnist_1_split
I0428 19:36:31.542403 23694 net.cpp:131] Top shape: 100 (100)
I0428 19:36:31.542408 23694 net.cpp:131] Top shape: 100 (100)
I0428 19:36:31.542412 23694 net.cpp:139] Memory required for data: 314800
I0428 19:36:31.542415 23694 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:31.542424 23694 net.cpp:86] Creating Layer conv0
I0428 19:36:31.542428 23694 net.cpp:408] conv0 <- data
I0428 19:36:31.542434 23694 net.cpp:382] conv0 -> conv0
I0428 19:36:31.544209 23694 net.cpp:124] Setting up conv0
I0428 19:36:31.544226 23694 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:36:31.544230 23694 net.cpp:139] Memory required for data: 23354800
I0428 19:36:31.544241 23694 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:31.544248 23694 net.cpp:86] Creating Layer pool0
I0428 19:36:31.544252 23694 net.cpp:408] pool0 <- conv0
I0428 19:36:31.544258 23694 net.cpp:382] pool0 -> pool0
I0428 19:36:31.544301 23694 net.cpp:124] Setting up pool0
I0428 19:36:31.544306 23694 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:36:31.544311 23694 net.cpp:139] Memory required for data: 29114800
I0428 19:36:31.544313 23694 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:31.544322 23694 net.cpp:86] Creating Layer ip1
I0428 19:36:31.544324 23694 net.cpp:408] ip1 <- pool0
I0428 19:36:31.544330 23694 net.cpp:382] ip1 -> ip1
I0428 19:36:31.550254 23694 net.cpp:124] Setting up ip1
I0428 19:36:31.550269 23694 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:36:31.550273 23694 net.cpp:139] Memory required for data: 29134800
I0428 19:36:31.550283 23694 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:31.550289 23694 net.cpp:86] Creating Layer relu1
I0428 19:36:31.550293 23694 net.cpp:408] relu1 <- ip1
I0428 19:36:31.550298 23694 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:31.550492 23694 net.cpp:124] Setting up relu1
I0428 19:36:31.550501 23694 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:36:31.550518 23694 net.cpp:139] Memory required for data: 29154800
I0428 19:36:31.550523 23694 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:31.550529 23694 net.cpp:86] Creating Layer ip2
I0428 19:36:31.550534 23694 net.cpp:408] ip2 <- ip1
I0428 19:36:31.550539 23694 net.cpp:382] ip2 -> ip2
I0428 19:36:31.550655 23694 net.cpp:124] Setting up ip2
I0428 19:36:31.550663 23694 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:31.550668 23694 net.cpp:139] Memory required for data: 29158800
I0428 19:36:31.550676 23694 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:31.550681 23694 net.cpp:86] Creating Layer relu2
I0428 19:36:31.550685 23694 net.cpp:408] relu2 <- ip2
I0428 19:36:31.550690 23694 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:31.550865 23694 net.cpp:124] Setting up relu2
I0428 19:36:31.550874 23694 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:31.550879 23694 net.cpp:139] Memory required for data: 29162800
I0428 19:36:31.550882 23694 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:36:31.550889 23694 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:36:31.550894 23694 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:36:31.550899 23694 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:36:31.550905 23694 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:36:31.550943 23694 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:36:31.550951 23694 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:31.550956 23694 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:31.550958 23694 net.cpp:139] Memory required for data: 29170800
I0428 19:36:31.550961 23694 layer_factory.hpp:77] Creating layer accuracy
I0428 19:36:31.550967 23694 net.cpp:86] Creating Layer accuracy
I0428 19:36:31.550971 23694 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:36:31.550976 23694 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:36:31.550981 23694 net.cpp:382] accuracy -> accuracy
I0428 19:36:31.550988 23694 net.cpp:124] Setting up accuracy
I0428 19:36:31.550992 23694 net.cpp:131] Top shape: (1)
I0428 19:36:31.550997 23694 net.cpp:139] Memory required for data: 29170804
I0428 19:36:31.550999 23694 layer_factory.hpp:77] Creating layer loss
I0428 19:36:31.551003 23694 net.cpp:86] Creating Layer loss
I0428 19:36:31.551007 23694 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:36:31.551012 23694 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:36:31.551017 23694 net.cpp:382] loss -> loss
I0428 19:36:31.551023 23694 layer_factory.hpp:77] Creating layer loss
I0428 19:36:31.551941 23694 net.cpp:124] Setting up loss
I0428 19:36:31.551956 23694 net.cpp:131] Top shape: (1)
I0428 19:36:31.551960 23694 net.cpp:134]     with loss weight 1
I0428 19:36:31.551967 23694 net.cpp:139] Memory required for data: 29170808
I0428 19:36:31.551971 23694 net.cpp:200] loss needs backward computation.
I0428 19:36:31.551976 23694 net.cpp:202] accuracy does not need backward computation.
I0428 19:36:31.551980 23694 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:36:31.551985 23694 net.cpp:200] relu2 needs backward computation.
I0428 19:36:31.551988 23694 net.cpp:200] ip2 needs backward computation.
I0428 19:36:31.551991 23694 net.cpp:200] relu1 needs backward computation.
I0428 19:36:31.551995 23694 net.cpp:200] ip1 needs backward computation.
I0428 19:36:31.551998 23694 net.cpp:200] pool0 needs backward computation.
I0428 19:36:31.552001 23694 net.cpp:200] conv0 needs backward computation.
I0428 19:36:31.552006 23694 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:36:31.552011 23694 net.cpp:202] mnist does not need backward computation.
I0428 19:36:31.552013 23694 net.cpp:244] This network produces output accuracy
I0428 19:36:31.552017 23694 net.cpp:244] This network produces output loss
I0428 19:36:31.552027 23694 net.cpp:257] Network initialization done.
I0428 19:36:31.552064 23694 solver.cpp:56] Solver scaffolding done.
I0428 19:36:31.552297 23694 caffe.cpp:248] Starting Optimization
I0428 19:36:31.552305 23694 solver.cpp:273] Solving LeNet
I0428 19:36:31.552320 23694 solver.cpp:274] Learning Rate Policy: inv
I0428 19:36:31.554286 23694 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:36:31.712056 23701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:31.716341 23694 solver.cpp:398]     Test net output #0: accuracy = 0.0663
I0428 19:36:31.716375 23694 solver.cpp:398]     Test net output #1: loss = 2.30929 (* 1 = 2.30929 loss)
I0428 19:36:31.721240 23694 solver.cpp:219] Iteration 0 (-1.60152e-31 iter/s, 0.16889s/100 iters), loss = 2.30041
I0428 19:36:31.721273 23694 solver.cpp:238]     Train net output #0: loss = 2.30041 (* 1 = 2.30041 loss)
I0428 19:36:31.721284 23694 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:36:31.953161 23694 solver.cpp:219] Iteration 100 (431.279 iter/s, 0.231868s/100 iters), loss = 0.592051
I0428 19:36:31.953187 23694 solver.cpp:238]     Train net output #0: loss = 0.592051 (* 1 = 0.592051 loss)
I0428 19:36:31.953194 23694 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:36:32.182646 23694 solver.cpp:219] Iteration 200 (435.839 iter/s, 0.229442s/100 iters), loss = 0.578037
I0428 19:36:32.182674 23694 solver.cpp:238]     Train net output #0: loss = 0.578037 (* 1 = 0.578037 loss)
I0428 19:36:32.182682 23694 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:36:32.415114 23694 solver.cpp:219] Iteration 300 (430.247 iter/s, 0.232424s/100 iters), loss = 0.220367
I0428 19:36:32.415141 23694 solver.cpp:238]     Train net output #0: loss = 0.220367 (* 1 = 0.220367 loss)
I0428 19:36:32.415163 23694 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:36:32.647629 23694 solver.cpp:219] Iteration 400 (430.162 iter/s, 0.232471s/100 iters), loss = 0.311196
I0428 19:36:32.647658 23694 solver.cpp:238]     Train net output #0: loss = 0.311196 (* 1 = 0.311196 loss)
I0428 19:36:32.647666 23694 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:36:32.877777 23694 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:36:33.032150 23701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:33.036620 23694 solver.cpp:398]     Test net output #0: accuracy = 0.932
I0428 19:36:33.036643 23694 solver.cpp:398]     Test net output #1: loss = 0.241266 (* 1 = 0.241266 loss)
I0428 19:36:33.038888 23694 solver.cpp:219] Iteration 500 (255.629 iter/s, 0.391193s/100 iters), loss = 0.333186
I0428 19:36:33.038926 23694 solver.cpp:238]     Train net output #0: loss = 0.333186 (* 1 = 0.333186 loss)
I0428 19:36:33.038933 23694 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:36:33.271932 23694 solver.cpp:219] Iteration 600 (429.182 iter/s, 0.233001s/100 iters), loss = 0.115971
I0428 19:36:33.271997 23694 solver.cpp:238]     Train net output #0: loss = 0.115971 (* 1 = 0.115971 loss)
I0428 19:36:33.272004 23694 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:36:33.504112 23694 solver.cpp:219] Iteration 700 (430.855 iter/s, 0.232097s/100 iters), loss = 0.26639
I0428 19:36:33.504142 23694 solver.cpp:238]     Train net output #0: loss = 0.26639 (* 1 = 0.26639 loss)
I0428 19:36:33.504150 23694 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:36:33.742751 23694 solver.cpp:219] Iteration 800 (419.127 iter/s, 0.238591s/100 iters), loss = 0.282216
I0428 19:36:33.742784 23694 solver.cpp:238]     Train net output #0: loss = 0.282216 (* 1 = 0.282216 loss)
I0428 19:36:33.742792 23694 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:36:33.976500 23694 solver.cpp:219] Iteration 900 (427.9 iter/s, 0.233699s/100 iters), loss = 0.180571
I0428 19:36:33.976533 23694 solver.cpp:238]     Train net output #0: loss = 0.180572 (* 1 = 0.180572 loss)
I0428 19:36:33.976542 23694 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:36:34.054600 23700 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:34.207947 23694 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:36:34.221258 23694 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:36:34.228219 23694 solver.cpp:311] Iteration 1000, loss = 0.130104
I0428 19:36:34.228241 23694 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:36:34.388579 23701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:34.395117 23694 solver.cpp:398]     Test net output #0: accuracy = 0.9709
I0428 19:36:34.395169 23694 solver.cpp:398]     Test net output #1: loss = 0.0958342 (* 1 = 0.0958342 loss)
I0428 19:36:34.395179 23694 solver.cpp:316] Optimization Done.
I0428 19:36:34.395185 23694 caffe.cpp:259] Optimization Done.
