I0428 19:46:08.900954 25950 caffe.cpp:218] Using GPUs 0
I0428 19:46:08.936317 25950 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:46:09.445107 25950 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test486.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:46:09.445273 25950 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test486.prototxt
I0428 19:46:09.445691 25950 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:46:09.445710 25950 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:46:09.445812 25950 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:09.445889 25950 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:09.445986 25950 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:46:09.446010 25950 net.cpp:86] Creating Layer mnist
I0428 19:46:09.446018 25950 net.cpp:382] mnist -> data
I0428 19:46:09.446039 25950 net.cpp:382] mnist -> label
I0428 19:46:09.447129 25950 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:46:09.449595 25950 net.cpp:124] Setting up mnist
I0428 19:46:09.449628 25950 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:46:09.449635 25950 net.cpp:131] Top shape: 64 (64)
I0428 19:46:09.449638 25950 net.cpp:139] Memory required for data: 200960
I0428 19:46:09.449645 25950 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:09.449662 25950 net.cpp:86] Creating Layer conv0
I0428 19:46:09.449684 25950 net.cpp:408] conv0 <- data
I0428 19:46:09.449698 25950 net.cpp:382] conv0 -> conv0
I0428 19:46:09.739810 25950 net.cpp:124] Setting up conv0
I0428 19:46:09.739840 25950 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:46:09.739845 25950 net.cpp:139] Memory required for data: 495872
I0428 19:46:09.739862 25950 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:09.739878 25950 net.cpp:86] Creating Layer pool0
I0428 19:46:09.739882 25950 net.cpp:408] pool0 <- conv0
I0428 19:46:09.739889 25950 net.cpp:382] pool0 -> pool0
I0428 19:46:09.739943 25950 net.cpp:124] Setting up pool0
I0428 19:46:09.739953 25950 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:46:09.739956 25950 net.cpp:139] Memory required for data: 569600
I0428 19:46:09.739960 25950 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:09.739974 25950 net.cpp:86] Creating Layer conv1
I0428 19:46:09.739977 25950 net.cpp:408] conv1 <- pool0
I0428 19:46:09.739984 25950 net.cpp:382] conv1 -> conv1
I0428 19:46:09.743113 25950 net.cpp:124] Setting up conv1
I0428 19:46:09.743132 25950 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:46:09.743136 25950 net.cpp:139] Memory required for data: 2208000
I0428 19:46:09.743147 25950 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:09.743156 25950 net.cpp:86] Creating Layer pool1
I0428 19:46:09.743161 25950 net.cpp:408] pool1 <- conv1
I0428 19:46:09.743167 25950 net.cpp:382] pool1 -> pool1
I0428 19:46:09.743211 25950 net.cpp:124] Setting up pool1
I0428 19:46:09.743218 25950 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:46:09.743221 25950 net.cpp:139] Memory required for data: 2617600
I0428 19:46:09.743226 25950 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:09.743234 25950 net.cpp:86] Creating Layer ip1
I0428 19:46:09.743238 25950 net.cpp:408] ip1 <- pool1
I0428 19:46:09.743244 25950 net.cpp:382] ip1 -> ip1
I0428 19:46:09.743460 25950 net.cpp:124] Setting up ip1
I0428 19:46:09.743481 25950 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:09.743486 25950 net.cpp:139] Memory required for data: 2620160
I0428 19:46:09.743494 25950 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:09.743500 25950 net.cpp:86] Creating Layer relu1
I0428 19:46:09.743505 25950 net.cpp:408] relu1 <- ip1
I0428 19:46:09.743510 25950 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:09.743710 25950 net.cpp:124] Setting up relu1
I0428 19:46:09.743719 25950 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:09.743723 25950 net.cpp:139] Memory required for data: 2622720
I0428 19:46:09.743727 25950 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:09.743736 25950 net.cpp:86] Creating Layer ip2
I0428 19:46:09.743738 25950 net.cpp:408] ip2 <- ip1
I0428 19:46:09.743744 25950 net.cpp:382] ip2 -> ip2
I0428 19:46:09.743862 25950 net.cpp:124] Setting up ip2
I0428 19:46:09.743871 25950 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:09.743875 25950 net.cpp:139] Memory required for data: 2635520
I0428 19:46:09.743882 25950 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:09.743890 25950 net.cpp:86] Creating Layer relu2
I0428 19:46:09.743892 25950 net.cpp:408] relu2 <- ip2
I0428 19:46:09.743897 25950 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:09.744738 25950 net.cpp:124] Setting up relu2
I0428 19:46:09.744753 25950 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:09.744758 25950 net.cpp:139] Memory required for data: 2648320
I0428 19:46:09.744762 25950 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:09.744771 25950 net.cpp:86] Creating Layer ip3
I0428 19:46:09.744774 25950 net.cpp:408] ip3 <- ip2
I0428 19:46:09.744781 25950 net.cpp:382] ip3 -> ip3
I0428 19:46:09.744910 25950 net.cpp:124] Setting up ip3
I0428 19:46:09.744920 25950 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:09.744925 25950 net.cpp:139] Memory required for data: 2650880
I0428 19:46:09.744935 25950 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:09.744940 25950 net.cpp:86] Creating Layer relu3
I0428 19:46:09.744943 25950 net.cpp:408] relu3 <- ip3
I0428 19:46:09.744949 25950 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:09.745151 25950 net.cpp:124] Setting up relu3
I0428 19:46:09.745162 25950 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:09.745165 25950 net.cpp:139] Memory required for data: 2653440
I0428 19:46:09.745169 25950 layer_factory.hpp:77] Creating layer loss
I0428 19:46:09.745177 25950 net.cpp:86] Creating Layer loss
I0428 19:46:09.745180 25950 net.cpp:408] loss <- ip3
I0428 19:46:09.745185 25950 net.cpp:408] loss <- label
I0428 19:46:09.745192 25950 net.cpp:382] loss -> loss
I0428 19:46:09.745213 25950 layer_factory.hpp:77] Creating layer loss
I0428 19:46:09.745477 25950 net.cpp:124] Setting up loss
I0428 19:46:09.745488 25950 net.cpp:131] Top shape: (1)
I0428 19:46:09.745492 25950 net.cpp:134]     with loss weight 1
I0428 19:46:09.745509 25950 net.cpp:139] Memory required for data: 2653444
I0428 19:46:09.745513 25950 net.cpp:200] loss needs backward computation.
I0428 19:46:09.745518 25950 net.cpp:200] relu3 needs backward computation.
I0428 19:46:09.745522 25950 net.cpp:200] ip3 needs backward computation.
I0428 19:46:09.745525 25950 net.cpp:200] relu2 needs backward computation.
I0428 19:46:09.745528 25950 net.cpp:200] ip2 needs backward computation.
I0428 19:46:09.745532 25950 net.cpp:200] relu1 needs backward computation.
I0428 19:46:09.745535 25950 net.cpp:200] ip1 needs backward computation.
I0428 19:46:09.745539 25950 net.cpp:200] pool1 needs backward computation.
I0428 19:46:09.745543 25950 net.cpp:200] conv1 needs backward computation.
I0428 19:46:09.745546 25950 net.cpp:200] pool0 needs backward computation.
I0428 19:46:09.745550 25950 net.cpp:200] conv0 needs backward computation.
I0428 19:46:09.745554 25950 net.cpp:202] mnist does not need backward computation.
I0428 19:46:09.745558 25950 net.cpp:244] This network produces output loss
I0428 19:46:09.745570 25950 net.cpp:257] Network initialization done.
I0428 19:46:09.745952 25950 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test486.prototxt
I0428 19:46:09.745985 25950 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:46:09.746091 25950 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:09.746193 25950 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:09.746244 25950 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:46:09.746258 25950 net.cpp:86] Creating Layer mnist
I0428 19:46:09.746263 25950 net.cpp:382] mnist -> data
I0428 19:46:09.746273 25950 net.cpp:382] mnist -> label
I0428 19:46:09.746373 25950 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:46:09.748567 25950 net.cpp:124] Setting up mnist
I0428 19:46:09.748584 25950 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:46:09.748589 25950 net.cpp:131] Top shape: 100 (100)
I0428 19:46:09.748592 25950 net.cpp:139] Memory required for data: 314000
I0428 19:46:09.748596 25950 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:46:09.748608 25950 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:46:09.748612 25950 net.cpp:408] label_mnist_1_split <- label
I0428 19:46:09.748625 25950 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:46:09.748633 25950 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:46:09.748689 25950 net.cpp:124] Setting up label_mnist_1_split
I0428 19:46:09.748697 25950 net.cpp:131] Top shape: 100 (100)
I0428 19:46:09.748700 25950 net.cpp:131] Top shape: 100 (100)
I0428 19:46:09.748703 25950 net.cpp:139] Memory required for data: 314800
I0428 19:46:09.748708 25950 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:09.748719 25950 net.cpp:86] Creating Layer conv0
I0428 19:46:09.748723 25950 net.cpp:408] conv0 <- data
I0428 19:46:09.748729 25950 net.cpp:382] conv0 -> conv0
I0428 19:46:09.750720 25950 net.cpp:124] Setting up conv0
I0428 19:46:09.750740 25950 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:46:09.750743 25950 net.cpp:139] Memory required for data: 775600
I0428 19:46:09.750754 25950 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:09.750761 25950 net.cpp:86] Creating Layer pool0
I0428 19:46:09.750767 25950 net.cpp:408] pool0 <- conv0
I0428 19:46:09.750774 25950 net.cpp:382] pool0 -> pool0
I0428 19:46:09.750819 25950 net.cpp:124] Setting up pool0
I0428 19:46:09.750826 25950 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:46:09.750830 25950 net.cpp:139] Memory required for data: 890800
I0428 19:46:09.750833 25950 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:09.750844 25950 net.cpp:86] Creating Layer conv1
I0428 19:46:09.750849 25950 net.cpp:408] conv1 <- pool0
I0428 19:46:09.750854 25950 net.cpp:382] conv1 -> conv1
I0428 19:46:09.752615 25950 net.cpp:124] Setting up conv1
I0428 19:46:09.752631 25950 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:46:09.752635 25950 net.cpp:139] Memory required for data: 3450800
I0428 19:46:09.752646 25950 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:09.752655 25950 net.cpp:86] Creating Layer pool1
I0428 19:46:09.752661 25950 net.cpp:408] pool1 <- conv1
I0428 19:46:09.752670 25950 net.cpp:382] pool1 -> pool1
I0428 19:46:09.752712 25950 net.cpp:124] Setting up pool1
I0428 19:46:09.752718 25950 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:46:09.752722 25950 net.cpp:139] Memory required for data: 4090800
I0428 19:46:09.752725 25950 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:09.752734 25950 net.cpp:86] Creating Layer ip1
I0428 19:46:09.752738 25950 net.cpp:408] ip1 <- pool1
I0428 19:46:09.752745 25950 net.cpp:382] ip1 -> ip1
I0428 19:46:09.752979 25950 net.cpp:124] Setting up ip1
I0428 19:46:09.752990 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.753006 25950 net.cpp:139] Memory required for data: 4094800
I0428 19:46:09.753015 25950 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:09.753022 25950 net.cpp:86] Creating Layer relu1
I0428 19:46:09.753026 25950 net.cpp:408] relu1 <- ip1
I0428 19:46:09.753031 25950 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:09.753293 25950 net.cpp:124] Setting up relu1
I0428 19:46:09.753304 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.753309 25950 net.cpp:139] Memory required for data: 4098800
I0428 19:46:09.753312 25950 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:09.753321 25950 net.cpp:86] Creating Layer ip2
I0428 19:46:09.753325 25950 net.cpp:408] ip2 <- ip1
I0428 19:46:09.753332 25950 net.cpp:382] ip2 -> ip2
I0428 19:46:09.753474 25950 net.cpp:124] Setting up ip2
I0428 19:46:09.753484 25950 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:09.753487 25950 net.cpp:139] Memory required for data: 4118800
I0428 19:46:09.753494 25950 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:09.753500 25950 net.cpp:86] Creating Layer relu2
I0428 19:46:09.753504 25950 net.cpp:408] relu2 <- ip2
I0428 19:46:09.753509 25950 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:09.753700 25950 net.cpp:124] Setting up relu2
I0428 19:46:09.753710 25950 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:09.753715 25950 net.cpp:139] Memory required for data: 4138800
I0428 19:46:09.753718 25950 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:09.753733 25950 net.cpp:86] Creating Layer ip3
I0428 19:46:09.753737 25950 net.cpp:408] ip3 <- ip2
I0428 19:46:09.753743 25950 net.cpp:382] ip3 -> ip3
I0428 19:46:09.753867 25950 net.cpp:124] Setting up ip3
I0428 19:46:09.753877 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.753881 25950 net.cpp:139] Memory required for data: 4142800
I0428 19:46:09.753890 25950 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:09.753897 25950 net.cpp:86] Creating Layer relu3
I0428 19:46:09.753901 25950 net.cpp:408] relu3 <- ip3
I0428 19:46:09.753906 25950 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:09.754876 25950 net.cpp:124] Setting up relu3
I0428 19:46:09.754891 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.754895 25950 net.cpp:139] Memory required for data: 4146800
I0428 19:46:09.754900 25950 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:46:09.754906 25950 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:46:09.754910 25950 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:46:09.754922 25950 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:46:09.754931 25950 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:46:09.754981 25950 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:46:09.754987 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.754992 25950 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:09.754995 25950 net.cpp:139] Memory required for data: 4154800
I0428 19:46:09.754998 25950 layer_factory.hpp:77] Creating layer accuracy
I0428 19:46:09.755004 25950 net.cpp:86] Creating Layer accuracy
I0428 19:46:09.755007 25950 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:46:09.755012 25950 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:46:09.755018 25950 net.cpp:382] accuracy -> accuracy
I0428 19:46:09.755028 25950 net.cpp:124] Setting up accuracy
I0428 19:46:09.755033 25950 net.cpp:131] Top shape: (1)
I0428 19:46:09.755035 25950 net.cpp:139] Memory required for data: 4154804
I0428 19:46:09.755039 25950 layer_factory.hpp:77] Creating layer loss
I0428 19:46:09.755044 25950 net.cpp:86] Creating Layer loss
I0428 19:46:09.755049 25950 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:46:09.755054 25950 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:46:09.755059 25950 net.cpp:382] loss -> loss
I0428 19:46:09.755066 25950 layer_factory.hpp:77] Creating layer loss
I0428 19:46:09.755364 25950 net.cpp:124] Setting up loss
I0428 19:46:09.755375 25950 net.cpp:131] Top shape: (1)
I0428 19:46:09.755380 25950 net.cpp:134]     with loss weight 1
I0428 19:46:09.755388 25950 net.cpp:139] Memory required for data: 4154808
I0428 19:46:09.755401 25950 net.cpp:200] loss needs backward computation.
I0428 19:46:09.755406 25950 net.cpp:202] accuracy does not need backward computation.
I0428 19:46:09.755411 25950 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:46:09.755415 25950 net.cpp:200] relu3 needs backward computation.
I0428 19:46:09.755426 25950 net.cpp:200] ip3 needs backward computation.
I0428 19:46:09.755429 25950 net.cpp:200] relu2 needs backward computation.
I0428 19:46:09.755434 25950 net.cpp:200] ip2 needs backward computation.
I0428 19:46:09.755437 25950 net.cpp:200] relu1 needs backward computation.
I0428 19:46:09.755440 25950 net.cpp:200] ip1 needs backward computation.
I0428 19:46:09.755445 25950 net.cpp:200] pool1 needs backward computation.
I0428 19:46:09.755447 25950 net.cpp:200] conv1 needs backward computation.
I0428 19:46:09.755451 25950 net.cpp:200] pool0 needs backward computation.
I0428 19:46:09.755461 25950 net.cpp:200] conv0 needs backward computation.
I0428 19:46:09.755466 25950 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:46:09.755471 25950 net.cpp:202] mnist does not need backward computation.
I0428 19:46:09.755475 25950 net.cpp:244] This network produces output accuracy
I0428 19:46:09.755478 25950 net.cpp:244] This network produces output loss
I0428 19:46:09.755493 25950 net.cpp:257] Network initialization done.
I0428 19:46:09.755543 25950 solver.cpp:56] Solver scaffolding done.
I0428 19:46:09.755980 25950 caffe.cpp:248] Starting Optimization
I0428 19:46:09.755986 25950 solver.cpp:273] Solving LeNet
I0428 19:46:09.755990 25950 solver.cpp:274] Learning Rate Policy: inv
I0428 19:46:09.756973 25950 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:46:09.761871 25950 blocking_queue.cpp:49] Waiting for data
I0428 19:46:09.830333 25957 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:09.830935 25950 solver.cpp:398]     Test net output #0: accuracy = 0.107
I0428 19:46:09.830957 25950 solver.cpp:398]     Test net output #1: loss = 2.29808 (* 1 = 2.29808 loss)
I0428 19:46:09.834743 25950 solver.cpp:219] Iteration 0 (-1.56154e-31 iter/s, 0.0787179s/100 iters), loss = 2.29287
I0428 19:46:09.834770 25950 solver.cpp:238]     Train net output #0: loss = 2.29287 (* 1 = 2.29287 loss)
I0428 19:46:09.834784 25950 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:46:09.998180 25950 solver.cpp:219] Iteration 100 (612.046 iter/s, 0.163386s/100 iters), loss = 0.584883
I0428 19:46:09.998232 25950 solver.cpp:238]     Train net output #0: loss = 0.584883 (* 1 = 0.584883 loss)
I0428 19:46:09.998246 25950 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:46:10.172065 25950 solver.cpp:219] Iteration 200 (575.308 iter/s, 0.17382s/100 iters), loss = 0.446778
I0428 19:46:10.172116 25950 solver.cpp:238]     Train net output #0: loss = 0.446778 (* 1 = 0.446778 loss)
I0428 19:46:10.172127 25950 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:46:10.341950 25950 solver.cpp:219] Iteration 300 (588.83 iter/s, 0.169828s/100 iters), loss = 0.392575
I0428 19:46:10.341997 25950 solver.cpp:238]     Train net output #0: loss = 0.392575 (* 1 = 0.392575 loss)
I0428 19:46:10.342021 25950 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:46:10.512656 25950 solver.cpp:219] Iteration 400 (586.003 iter/s, 0.170648s/100 iters), loss = 0.624092
I0428 19:46:10.512706 25950 solver.cpp:238]     Train net output #0: loss = 0.624092 (* 1 = 0.624092 loss)
I0428 19:46:10.512718 25950 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:46:10.678419 25950 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:46:10.736021 25957 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:10.737998 25950 solver.cpp:398]     Test net output #0: accuracy = 0.8562
I0428 19:46:10.738049 25950 solver.cpp:398]     Test net output #1: loss = 0.395127 (* 1 = 0.395127 loss)
I0428 19:46:10.739540 25950 solver.cpp:219] Iteration 500 (440.866 iter/s, 0.226826s/100 iters), loss = 0.458746
I0428 19:46:10.739598 25950 solver.cpp:238]     Train net output #0: loss = 0.458746 (* 1 = 0.458746 loss)
I0428 19:46:10.739608 25950 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:46:10.904903 25950 solver.cpp:219] Iteration 600 (604.997 iter/s, 0.16529s/100 iters), loss = 0.18837
I0428 19:46:10.904954 25950 solver.cpp:238]     Train net output #0: loss = 0.18837 (* 1 = 0.18837 loss)
I0428 19:46:10.904965 25950 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:46:11.076807 25950 solver.cpp:219] Iteration 700 (581.918 iter/s, 0.171846s/100 iters), loss = 0.366679
I0428 19:46:11.076872 25950 solver.cpp:238]     Train net output #0: loss = 0.366679 (* 1 = 0.366679 loss)
I0428 19:46:11.076885 25950 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:46:11.247910 25950 solver.cpp:219] Iteration 800 (584.691 iter/s, 0.171031s/100 iters), loss = 0.34489
I0428 19:46:11.247954 25950 solver.cpp:238]     Train net output #0: loss = 0.34489 (* 1 = 0.34489 loss)
I0428 19:46:11.247967 25950 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:46:11.415437 25950 solver.cpp:219] Iteration 900 (597.125 iter/s, 0.167469s/100 iters), loss = 0.150521
I0428 19:46:11.415487 25950 solver.cpp:238]     Train net output #0: loss = 0.150521 (* 1 = 0.150521 loss)
I0428 19:46:11.415496 25950 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:46:11.470597 25956 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:11.580325 25950 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:46:11.582198 25950 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:46:11.583219 25950 solver.cpp:311] Iteration 1000, loss = 0.240453
I0428 19:46:11.583252 25950 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:46:11.648684 25957 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:11.650123 25950 solver.cpp:398]     Test net output #0: accuracy = 0.8758
I0428 19:46:11.650152 25950 solver.cpp:398]     Test net output #1: loss = 0.326564 (* 1 = 0.326564 loss)
I0428 19:46:11.650159 25950 solver.cpp:316] Optimization Done.
I0428 19:46:11.650164 25950 caffe.cpp:259] Optimization Done.
