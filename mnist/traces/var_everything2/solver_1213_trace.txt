I0428 20:14:05.840627 32602 caffe.cpp:218] Using GPUs 0
I0428 20:14:05.878134 32602 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:06.389214 32602 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1213.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:06.389351 32602 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1213.prototxt
I0428 20:14:06.389729 32602 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:06.389744 32602 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:06.389837 32602 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:06.389909 32602 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:06.390009 32602 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:06.390033 32602 net.cpp:86] Creating Layer mnist
I0428 20:14:06.390043 32602 net.cpp:382] mnist -> data
I0428 20:14:06.390064 32602 net.cpp:382] mnist -> label
I0428 20:14:06.391134 32602 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:06.393620 32602 net.cpp:124] Setting up mnist
I0428 20:14:06.393641 32602 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:06.393647 32602 net.cpp:131] Top shape: 64 (64)
I0428 20:14:06.393651 32602 net.cpp:139] Memory required for data: 200960
I0428 20:14:06.393657 32602 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:06.393674 32602 net.cpp:86] Creating Layer conv0
I0428 20:14:06.393682 32602 net.cpp:408] conv0 <- data
I0428 20:14:06.393693 32602 net.cpp:382] conv0 -> conv0
I0428 20:14:06.681100 32602 net.cpp:124] Setting up conv0
I0428 20:14:06.681128 32602 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:06.681133 32602 net.cpp:139] Memory required for data: 7573760
I0428 20:14:06.681169 32602 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:06.681183 32602 net.cpp:86] Creating Layer pool0
I0428 20:14:06.681191 32602 net.cpp:408] pool0 <- conv0
I0428 20:14:06.681197 32602 net.cpp:382] pool0 -> pool0
I0428 20:14:06.681272 32602 net.cpp:124] Setting up pool0
I0428 20:14:06.681283 32602 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:06.681288 32602 net.cpp:139] Memory required for data: 9416960
I0428 20:14:06.681300 32602 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:06.681311 32602 net.cpp:86] Creating Layer conv1
I0428 20:14:06.681315 32602 net.cpp:408] conv1 <- pool0
I0428 20:14:06.681320 32602 net.cpp:382] conv1 -> conv1
I0428 20:14:06.683269 32602 net.cpp:124] Setting up conv1
I0428 20:14:06.683284 32602 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:06.683289 32602 net.cpp:139] Memory required for data: 9449728
I0428 20:14:06.683298 32602 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:06.683305 32602 net.cpp:86] Creating Layer pool1
I0428 20:14:06.683310 32602 net.cpp:408] pool1 <- conv1
I0428 20:14:06.683315 32602 net.cpp:382] pool1 -> pool1
I0428 20:14:06.683364 32602 net.cpp:124] Setting up pool1
I0428 20:14:06.683377 32602 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:06.683392 32602 net.cpp:139] Memory required for data: 9457920
I0428 20:14:06.683395 32602 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:06.683403 32602 net.cpp:86] Creating Layer ip1
I0428 20:14:06.683406 32602 net.cpp:408] ip1 <- pool1
I0428 20:14:06.683411 32602 net.cpp:382] ip1 -> ip1
I0428 20:14:06.683516 32602 net.cpp:124] Setting up ip1
I0428 20:14:06.683524 32602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:06.683528 32602 net.cpp:139] Memory required for data: 9460480
I0428 20:14:06.683535 32602 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:06.683542 32602 net.cpp:86] Creating Layer relu1
I0428 20:14:06.683548 32602 net.cpp:408] relu1 <- ip1
I0428 20:14:06.683552 32602 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:06.683732 32602 net.cpp:124] Setting up relu1
I0428 20:14:06.683742 32602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:06.683744 32602 net.cpp:139] Memory required for data: 9463040
I0428 20:14:06.683748 32602 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:06.683754 32602 net.cpp:86] Creating Layer ip2
I0428 20:14:06.683758 32602 net.cpp:408] ip2 <- ip1
I0428 20:14:06.683763 32602 net.cpp:382] ip2 -> ip2
I0428 20:14:06.683867 32602 net.cpp:124] Setting up ip2
I0428 20:14:06.683876 32602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:06.683879 32602 net.cpp:139] Memory required for data: 9465600
I0428 20:14:06.683886 32602 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:06.683892 32602 net.cpp:86] Creating Layer relu2
I0428 20:14:06.683895 32602 net.cpp:408] relu2 <- ip2
I0428 20:14:06.683899 32602 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:06.684661 32602 net.cpp:124] Setting up relu2
I0428 20:14:06.684674 32602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:06.684679 32602 net.cpp:139] Memory required for data: 9468160
I0428 20:14:06.684682 32602 layer_factory.hpp:77] Creating layer loss
I0428 20:14:06.684689 32602 net.cpp:86] Creating Layer loss
I0428 20:14:06.684691 32602 net.cpp:408] loss <- ip2
I0428 20:14:06.684696 32602 net.cpp:408] loss <- label
I0428 20:14:06.684703 32602 net.cpp:382] loss -> loss
I0428 20:14:06.684720 32602 layer_factory.hpp:77] Creating layer loss
I0428 20:14:06.684986 32602 net.cpp:124] Setting up loss
I0428 20:14:06.684998 32602 net.cpp:131] Top shape: (1)
I0428 20:14:06.685000 32602 net.cpp:134]     with loss weight 1
I0428 20:14:06.685014 32602 net.cpp:139] Memory required for data: 9468164
I0428 20:14:06.685019 32602 net.cpp:200] loss needs backward computation.
I0428 20:14:06.685021 32602 net.cpp:200] relu2 needs backward computation.
I0428 20:14:06.685025 32602 net.cpp:200] ip2 needs backward computation.
I0428 20:14:06.685029 32602 net.cpp:200] relu1 needs backward computation.
I0428 20:14:06.685031 32602 net.cpp:200] ip1 needs backward computation.
I0428 20:14:06.685045 32602 net.cpp:200] pool1 needs backward computation.
I0428 20:14:06.685047 32602 net.cpp:200] conv1 needs backward computation.
I0428 20:14:06.685050 32602 net.cpp:200] pool0 needs backward computation.
I0428 20:14:06.685053 32602 net.cpp:200] conv0 needs backward computation.
I0428 20:14:06.685057 32602 net.cpp:202] mnist does not need backward computation.
I0428 20:14:06.685060 32602 net.cpp:244] This network produces output loss
I0428 20:14:06.685070 32602 net.cpp:257] Network initialization done.
I0428 20:14:06.685371 32602 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1213.prototxt
I0428 20:14:06.685398 32602 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:06.685489 32602 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:06.685560 32602 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:06.685606 32602 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:06.685619 32602 net.cpp:86] Creating Layer mnist
I0428 20:14:06.685624 32602 net.cpp:382] mnist -> data
I0428 20:14:06.685633 32602 net.cpp:382] mnist -> label
I0428 20:14:06.685726 32602 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:06.687690 32602 net.cpp:124] Setting up mnist
I0428 20:14:06.687705 32602 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:06.687710 32602 net.cpp:131] Top shape: 100 (100)
I0428 20:14:06.687712 32602 net.cpp:139] Memory required for data: 314000
I0428 20:14:06.687716 32602 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:06.687722 32602 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:06.687726 32602 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:06.687731 32602 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:06.687739 32602 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:06.687844 32602 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:06.687860 32602 net.cpp:131] Top shape: 100 (100)
I0428 20:14:06.687865 32602 net.cpp:131] Top shape: 100 (100)
I0428 20:14:06.687868 32602 net.cpp:139] Memory required for data: 314800
I0428 20:14:06.687871 32602 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:06.687882 32602 net.cpp:86] Creating Layer conv0
I0428 20:14:06.687886 32602 net.cpp:408] conv0 <- data
I0428 20:14:06.687892 32602 net.cpp:382] conv0 -> conv0
I0428 20:14:06.689499 32602 net.cpp:124] Setting up conv0
I0428 20:14:06.689513 32602 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:06.689517 32602 net.cpp:139] Memory required for data: 11834800
I0428 20:14:06.689528 32602 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:06.689537 32602 net.cpp:86] Creating Layer pool0
I0428 20:14:06.689544 32602 net.cpp:408] pool0 <- conv0
I0428 20:14:06.689550 32602 net.cpp:382] pool0 -> pool0
I0428 20:14:06.689589 32602 net.cpp:124] Setting up pool0
I0428 20:14:06.689599 32602 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:06.689601 32602 net.cpp:139] Memory required for data: 14714800
I0428 20:14:06.689604 32602 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:06.689615 32602 net.cpp:86] Creating Layer conv1
I0428 20:14:06.689620 32602 net.cpp:408] conv1 <- pool0
I0428 20:14:06.689640 32602 net.cpp:382] conv1 -> conv1
I0428 20:14:06.691100 32602 net.cpp:124] Setting up conv1
I0428 20:14:06.691115 32602 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:06.691119 32602 net.cpp:139] Memory required for data: 14766000
I0428 20:14:06.691128 32602 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:06.691138 32602 net.cpp:86] Creating Layer pool1
I0428 20:14:06.691143 32602 net.cpp:408] pool1 <- conv1
I0428 20:14:06.691148 32602 net.cpp:382] pool1 -> pool1
I0428 20:14:06.691191 32602 net.cpp:124] Setting up pool1
I0428 20:14:06.691198 32602 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:06.691201 32602 net.cpp:139] Memory required for data: 14778800
I0428 20:14:06.691205 32602 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:06.691212 32602 net.cpp:86] Creating Layer ip1
I0428 20:14:06.691215 32602 net.cpp:408] ip1 <- pool1
I0428 20:14:06.691221 32602 net.cpp:382] ip1 -> ip1
I0428 20:14:06.691329 32602 net.cpp:124] Setting up ip1
I0428 20:14:06.691336 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.691339 32602 net.cpp:139] Memory required for data: 14782800
I0428 20:14:06.691347 32602 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:06.691356 32602 net.cpp:86] Creating Layer relu1
I0428 20:14:06.691361 32602 net.cpp:408] relu1 <- ip1
I0428 20:14:06.691366 32602 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:06.691548 32602 net.cpp:124] Setting up relu1
I0428 20:14:06.691558 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.691565 32602 net.cpp:139] Memory required for data: 14786800
I0428 20:14:06.691568 32602 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:06.691577 32602 net.cpp:86] Creating Layer ip2
I0428 20:14:06.691582 32602 net.cpp:408] ip2 <- ip1
I0428 20:14:06.691597 32602 net.cpp:382] ip2 -> ip2
I0428 20:14:06.691704 32602 net.cpp:124] Setting up ip2
I0428 20:14:06.691712 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.691715 32602 net.cpp:139] Memory required for data: 14790800
I0428 20:14:06.691721 32602 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:06.691726 32602 net.cpp:86] Creating Layer relu2
I0428 20:14:06.691738 32602 net.cpp:408] relu2 <- ip2
I0428 20:14:06.691748 32602 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:06.691923 32602 net.cpp:124] Setting up relu2
I0428 20:14:06.691934 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.691938 32602 net.cpp:139] Memory required for data: 14794800
I0428 20:14:06.691942 32602 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:14:06.691947 32602 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:14:06.691951 32602 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:14:06.691956 32602 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:14:06.691974 32602 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:14:06.692015 32602 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:14:06.692023 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.692026 32602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:06.692029 32602 net.cpp:139] Memory required for data: 14802800
I0428 20:14:06.692032 32602 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:06.692039 32602 net.cpp:86] Creating Layer accuracy
I0428 20:14:06.692042 32602 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:14:06.692047 32602 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:06.692054 32602 net.cpp:382] accuracy -> accuracy
I0428 20:14:06.692060 32602 net.cpp:124] Setting up accuracy
I0428 20:14:06.692065 32602 net.cpp:131] Top shape: (1)
I0428 20:14:06.692068 32602 net.cpp:139] Memory required for data: 14802804
I0428 20:14:06.692071 32602 layer_factory.hpp:77] Creating layer loss
I0428 20:14:06.692077 32602 net.cpp:86] Creating Layer loss
I0428 20:14:06.692080 32602 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:14:06.692085 32602 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:06.692090 32602 net.cpp:382] loss -> loss
I0428 20:14:06.692095 32602 layer_factory.hpp:77] Creating layer loss
I0428 20:14:06.692402 32602 net.cpp:124] Setting up loss
I0428 20:14:06.692411 32602 net.cpp:131] Top shape: (1)
I0428 20:14:06.692415 32602 net.cpp:134]     with loss weight 1
I0428 20:14:06.692422 32602 net.cpp:139] Memory required for data: 14802808
I0428 20:14:06.692426 32602 net.cpp:200] loss needs backward computation.
I0428 20:14:06.692430 32602 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:06.692433 32602 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:14:06.692437 32602 net.cpp:200] relu2 needs backward computation.
I0428 20:14:06.692440 32602 net.cpp:200] ip2 needs backward computation.
I0428 20:14:06.692443 32602 net.cpp:200] relu1 needs backward computation.
I0428 20:14:06.692446 32602 net.cpp:200] ip1 needs backward computation.
I0428 20:14:06.692450 32602 net.cpp:200] pool1 needs backward computation.
I0428 20:14:06.692452 32602 net.cpp:200] conv1 needs backward computation.
I0428 20:14:06.692456 32602 net.cpp:200] pool0 needs backward computation.
I0428 20:14:06.692459 32602 net.cpp:200] conv0 needs backward computation.
I0428 20:14:06.692462 32602 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:06.692466 32602 net.cpp:202] mnist does not need backward computation.
I0428 20:14:06.692469 32602 net.cpp:244] This network produces output accuracy
I0428 20:14:06.692473 32602 net.cpp:244] This network produces output loss
I0428 20:14:06.692484 32602 net.cpp:257] Network initialization done.
I0428 20:14:06.692524 32602 solver.cpp:56] Solver scaffolding done.
I0428 20:14:06.692803 32602 caffe.cpp:248] Starting Optimization
I0428 20:14:06.692817 32602 solver.cpp:273] Solving LeNet
I0428 20:14:06.692833 32602 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:06.693609 32602 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:06.699789 32602 blocking_queue.cpp:49] Waiting for data
I0428 20:14:06.758952 32609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:06.759922 32602 solver.cpp:398]     Test net output #0: accuracy = 0.0744
I0428 20:14:06.759943 32602 solver.cpp:398]     Test net output #1: loss = 2.3262 (* 1 = 2.3262 loss)
I0428 20:14:06.764214 32602 solver.cpp:219] Iteration 0 (0 iter/s, 0.0713362s/100 iters), loss = 2.33762
I0428 20:14:06.764236 32602 solver.cpp:238]     Train net output #0: loss = 2.33762 (* 1 = 2.33762 loss)
I0428 20:14:06.764264 32602 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:06.882131 32602 solver.cpp:219] Iteration 100 (848.314 iter/s, 0.117881s/100 iters), loss = 0.620537
I0428 20:14:06.882158 32602 solver.cpp:238]     Train net output #0: loss = 0.620537 (* 1 = 0.620537 loss)
I0428 20:14:06.882179 32602 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:06.989279 32602 solver.cpp:219] Iteration 200 (933.598 iter/s, 0.107112s/100 iters), loss = 0.347566
I0428 20:14:06.989316 32602 solver.cpp:238]     Train net output #0: loss = 0.347566 (* 1 = 0.347566 loss)
I0428 20:14:06.989338 32602 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:07.093819 32602 solver.cpp:219] Iteration 300 (957.001 iter/s, 0.104493s/100 iters), loss = 0.359021
I0428 20:14:07.093843 32602 solver.cpp:238]     Train net output #0: loss = 0.359021 (* 1 = 0.359021 loss)
I0428 20:14:07.093850 32602 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:07.199100 32602 solver.cpp:219] Iteration 400 (950.158 iter/s, 0.105246s/100 iters), loss = 0.302537
I0428 20:14:07.199123 32602 solver.cpp:238]     Train net output #0: loss = 0.302537 (* 1 = 0.302537 loss)
I0428 20:14:07.199129 32602 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:07.303119 32602 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:07.382104 32609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:07.382803 32602 solver.cpp:398]     Test net output #0: accuracy = 0.9277
I0428 20:14:07.382824 32602 solver.cpp:398]     Test net output #1: loss = 0.244566 (* 1 = 0.244566 loss)
I0428 20:14:07.383908 32602 solver.cpp:219] Iteration 500 (541.214 iter/s, 0.18477s/100 iters), loss = 0.222536
I0428 20:14:07.383941 32602 solver.cpp:238]     Train net output #0: loss = 0.222536 (* 1 = 0.222536 loss)
I0428 20:14:07.383949 32602 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:07.500784 32602 solver.cpp:219] Iteration 600 (855.917 iter/s, 0.116834s/100 iters), loss = 0.266534
I0428 20:14:07.500808 32602 solver.cpp:238]     Train net output #0: loss = 0.266534 (* 1 = 0.266534 loss)
I0428 20:14:07.500835 32602 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:07.606890 32602 solver.cpp:219] Iteration 700 (942.754 iter/s, 0.106072s/100 iters), loss = 0.345609
I0428 20:14:07.606914 32602 solver.cpp:238]     Train net output #0: loss = 0.345609 (* 1 = 0.345609 loss)
I0428 20:14:07.606935 32602 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:07.712182 32602 solver.cpp:219] Iteration 800 (950.047 iter/s, 0.105258s/100 iters), loss = 0.338748
I0428 20:14:07.712222 32602 solver.cpp:238]     Train net output #0: loss = 0.338748 (* 1 = 0.338748 loss)
I0428 20:14:07.712244 32602 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:07.816843 32602 solver.cpp:219] Iteration 900 (956.065 iter/s, 0.104595s/100 iters), loss = 0.323789
I0428 20:14:07.816880 32602 solver.cpp:238]     Train net output #0: loss = 0.323789 (* 1 = 0.323789 loss)
I0428 20:14:07.816901 32602 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:07.851737 32608 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:07.920648 32602 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:07.921531 32602 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:07.922222 32602 solver.cpp:311] Iteration 1000, loss = 0.300996
I0428 20:14:07.922236 32602 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:08.000174 32609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:08.000882 32602 solver.cpp:398]     Test net output #0: accuracy = 0.9518
I0428 20:14:08.000902 32602 solver.cpp:398]     Test net output #1: loss = 0.155652 (* 1 = 0.155652 loss)
I0428 20:14:08.000910 32602 solver.cpp:316] Optimization Done.
I0428 20:14:08.000912 32602 caffe.cpp:259] Optimization Done.
