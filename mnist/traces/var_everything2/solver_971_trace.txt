I0428 20:04:23.230448 30375 caffe.cpp:218] Using GPUs 0
I0428 20:04:23.267432 30375 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:04:23.777961 30375 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test971.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:04:23.778103 30375 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test971.prototxt
I0428 20:04:23.778520 30375 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:04:23.778542 30375 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:04:23.778643 30375 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:04:23.778724 30375 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:23.778825 30375 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:04:23.778847 30375 net.cpp:86] Creating Layer mnist
I0428 20:04:23.778856 30375 net.cpp:382] mnist -> data
I0428 20:04:23.778879 30375 net.cpp:382] mnist -> label
I0428 20:04:23.779971 30375 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:04:23.782418 30375 net.cpp:124] Setting up mnist
I0428 20:04:23.782459 30375 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:04:23.782465 30375 net.cpp:131] Top shape: 64 (64)
I0428 20:04:23.782469 30375 net.cpp:139] Memory required for data: 200960
I0428 20:04:23.782476 30375 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:23.782493 30375 net.cpp:86] Creating Layer conv0
I0428 20:04:23.782519 30375 net.cpp:408] conv0 <- data
I0428 20:04:23.782533 30375 net.cpp:382] conv0 -> conv0
I0428 20:04:24.036519 30375 net.cpp:124] Setting up conv0
I0428 20:04:24.036561 30375 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:04:24.036566 30375 net.cpp:139] Memory required for data: 1675520
I0428 20:04:24.036581 30375 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:24.036592 30375 net.cpp:86] Creating Layer pool0
I0428 20:04:24.036597 30375 net.cpp:408] pool0 <- conv0
I0428 20:04:24.036617 30375 net.cpp:382] pool0 -> pool0
I0428 20:04:24.036662 30375 net.cpp:124] Setting up pool0
I0428 20:04:24.036677 30375 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:04:24.036680 30375 net.cpp:139] Memory required for data: 2044160
I0428 20:04:24.036684 30375 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:24.036694 30375 net.cpp:86] Creating Layer conv1
I0428 20:04:24.036696 30375 net.cpp:408] conv1 <- pool0
I0428 20:04:24.036701 30375 net.cpp:382] conv1 -> conv1
I0428 20:04:24.038756 30375 net.cpp:124] Setting up conv1
I0428 20:04:24.038771 30375 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:04:24.038775 30375 net.cpp:139] Memory required for data: 3682560
I0428 20:04:24.038784 30375 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:24.038791 30375 net.cpp:86] Creating Layer pool1
I0428 20:04:24.038794 30375 net.cpp:408] pool1 <- conv1
I0428 20:04:24.038800 30375 net.cpp:382] pool1 -> pool1
I0428 20:04:24.038836 30375 net.cpp:124] Setting up pool1
I0428 20:04:24.038847 30375 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:04:24.038851 30375 net.cpp:139] Memory required for data: 4092160
I0428 20:04:24.038853 30375 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:24.038861 30375 net.cpp:86] Creating Layer ip1
I0428 20:04:24.038863 30375 net.cpp:408] ip1 <- pool1
I0428 20:04:24.038868 30375 net.cpp:382] ip1 -> ip1
I0428 20:04:24.040271 30375 net.cpp:124] Setting up ip1
I0428 20:04:24.040282 30375 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:04:24.040302 30375 net.cpp:139] Memory required for data: 4104960
I0428 20:04:24.040309 30375 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:24.040316 30375 net.cpp:86] Creating Layer relu1
I0428 20:04:24.040319 30375 net.cpp:408] relu1 <- ip1
I0428 20:04:24.040324 30375 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:24.040482 30375 net.cpp:124] Setting up relu1
I0428 20:04:24.040491 30375 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:04:24.040494 30375 net.cpp:139] Memory required for data: 4117760
I0428 20:04:24.040498 30375 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:24.040503 30375 net.cpp:86] Creating Layer ip2
I0428 20:04:24.040506 30375 net.cpp:408] ip2 <- ip1
I0428 20:04:24.040511 30375 net.cpp:382] ip2 -> ip2
I0428 20:04:24.041522 30375 net.cpp:124] Setting up ip2
I0428 20:04:24.041532 30375 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:04:24.041550 30375 net.cpp:139] Memory required for data: 4124160
I0428 20:04:24.041556 30375 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:24.041563 30375 net.cpp:86] Creating Layer relu2
I0428 20:04:24.041566 30375 net.cpp:408] relu2 <- ip2
I0428 20:04:24.041570 30375 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:24.042265 30375 net.cpp:124] Setting up relu2
I0428 20:04:24.042276 30375 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:04:24.042295 30375 net.cpp:139] Memory required for data: 4130560
I0428 20:04:24.042299 30375 layer_factory.hpp:77] Creating layer ip3
I0428 20:04:24.042320 30375 net.cpp:86] Creating Layer ip3
I0428 20:04:24.042323 30375 net.cpp:408] ip3 <- ip2
I0428 20:04:24.042328 30375 net.cpp:382] ip3 -> ip3
I0428 20:04:24.042418 30375 net.cpp:124] Setting up ip3
I0428 20:04:24.042425 30375 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:24.042428 30375 net.cpp:139] Memory required for data: 4133120
I0428 20:04:24.042435 30375 layer_factory.hpp:77] Creating layer relu3
I0428 20:04:24.042440 30375 net.cpp:86] Creating Layer relu3
I0428 20:04:24.042443 30375 net.cpp:408] relu3 <- ip3
I0428 20:04:24.042446 30375 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:04:24.042601 30375 net.cpp:124] Setting up relu3
I0428 20:04:24.042609 30375 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:24.042613 30375 net.cpp:139] Memory required for data: 4135680
I0428 20:04:24.042615 30375 layer_factory.hpp:77] Creating layer loss
I0428 20:04:24.042620 30375 net.cpp:86] Creating Layer loss
I0428 20:04:24.042623 30375 net.cpp:408] loss <- ip3
I0428 20:04:24.042628 30375 net.cpp:408] loss <- label
I0428 20:04:24.042632 30375 net.cpp:382] loss -> loss
I0428 20:04:24.042645 30375 layer_factory.hpp:77] Creating layer loss
I0428 20:04:24.042848 30375 net.cpp:124] Setting up loss
I0428 20:04:24.042856 30375 net.cpp:131] Top shape: (1)
I0428 20:04:24.042860 30375 net.cpp:134]     with loss weight 1
I0428 20:04:24.042873 30375 net.cpp:139] Memory required for data: 4135684
I0428 20:04:24.042876 30375 net.cpp:200] loss needs backward computation.
I0428 20:04:24.042879 30375 net.cpp:200] relu3 needs backward computation.
I0428 20:04:24.042882 30375 net.cpp:200] ip3 needs backward computation.
I0428 20:04:24.042886 30375 net.cpp:200] relu2 needs backward computation.
I0428 20:04:24.042887 30375 net.cpp:200] ip2 needs backward computation.
I0428 20:04:24.042891 30375 net.cpp:200] relu1 needs backward computation.
I0428 20:04:24.042892 30375 net.cpp:200] ip1 needs backward computation.
I0428 20:04:24.042896 30375 net.cpp:200] pool1 needs backward computation.
I0428 20:04:24.042898 30375 net.cpp:200] conv1 needs backward computation.
I0428 20:04:24.042901 30375 net.cpp:200] pool0 needs backward computation.
I0428 20:04:24.042904 30375 net.cpp:200] conv0 needs backward computation.
I0428 20:04:24.042907 30375 net.cpp:202] mnist does not need backward computation.
I0428 20:04:24.042910 30375 net.cpp:244] This network produces output loss
I0428 20:04:24.042918 30375 net.cpp:257] Network initialization done.
I0428 20:04:24.043251 30375 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test971.prototxt
I0428 20:04:24.043292 30375 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:04:24.043376 30375 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:04:24.043465 30375 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:24.043522 30375 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:04:24.043534 30375 net.cpp:86] Creating Layer mnist
I0428 20:04:24.043539 30375 net.cpp:382] mnist -> data
I0428 20:04:24.043546 30375 net.cpp:382] mnist -> label
I0428 20:04:24.043627 30375 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:04:24.044886 30375 net.cpp:124] Setting up mnist
I0428 20:04:24.044915 30375 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:04:24.044920 30375 net.cpp:131] Top shape: 100 (100)
I0428 20:04:24.044924 30375 net.cpp:139] Memory required for data: 314000
I0428 20:04:24.044927 30375 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:04:24.044934 30375 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:04:24.044937 30375 net.cpp:408] label_mnist_1_split <- label
I0428 20:04:24.044942 30375 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:04:24.044948 30375 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:04:24.044994 30375 net.cpp:124] Setting up label_mnist_1_split
I0428 20:04:24.045001 30375 net.cpp:131] Top shape: 100 (100)
I0428 20:04:24.045006 30375 net.cpp:131] Top shape: 100 (100)
I0428 20:04:24.045007 30375 net.cpp:139] Memory required for data: 314800
I0428 20:04:24.045011 30375 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:24.045019 30375 net.cpp:86] Creating Layer conv0
I0428 20:04:24.045022 30375 net.cpp:408] conv0 <- data
I0428 20:04:24.045027 30375 net.cpp:382] conv0 -> conv0
I0428 20:04:24.046751 30375 net.cpp:124] Setting up conv0
I0428 20:04:24.046767 30375 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:04:24.046771 30375 net.cpp:139] Memory required for data: 2618800
I0428 20:04:24.046779 30375 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:24.046785 30375 net.cpp:86] Creating Layer pool0
I0428 20:04:24.046788 30375 net.cpp:408] pool0 <- conv0
I0428 20:04:24.046792 30375 net.cpp:382] pool0 -> pool0
I0428 20:04:24.046828 30375 net.cpp:124] Setting up pool0
I0428 20:04:24.046839 30375 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:04:24.046842 30375 net.cpp:139] Memory required for data: 3194800
I0428 20:04:24.046844 30375 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:24.046854 30375 net.cpp:86] Creating Layer conv1
I0428 20:04:24.046857 30375 net.cpp:408] conv1 <- pool0
I0428 20:04:24.046862 30375 net.cpp:382] conv1 -> conv1
I0428 20:04:24.048645 30375 net.cpp:124] Setting up conv1
I0428 20:04:24.048660 30375 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:04:24.048663 30375 net.cpp:139] Memory required for data: 5754800
I0428 20:04:24.048673 30375 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:24.048681 30375 net.cpp:86] Creating Layer pool1
I0428 20:04:24.048686 30375 net.cpp:408] pool1 <- conv1
I0428 20:04:24.048691 30375 net.cpp:382] pool1 -> pool1
I0428 20:04:24.048729 30375 net.cpp:124] Setting up pool1
I0428 20:04:24.048737 30375 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:04:24.048739 30375 net.cpp:139] Memory required for data: 6394800
I0428 20:04:24.048743 30375 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:24.048749 30375 net.cpp:86] Creating Layer ip1
I0428 20:04:24.048758 30375 net.cpp:408] ip1 <- pool1
I0428 20:04:24.048764 30375 net.cpp:382] ip1 -> ip1
I0428 20:04:24.049362 30375 net.cpp:124] Setting up ip1
I0428 20:04:24.049371 30375 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:04:24.049384 30375 net.cpp:139] Memory required for data: 6414800
I0428 20:04:24.049392 30375 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:24.049398 30375 net.cpp:86] Creating Layer relu1
I0428 20:04:24.049402 30375 net.cpp:408] relu1 <- ip1
I0428 20:04:24.049407 30375 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:24.049567 30375 net.cpp:124] Setting up relu1
I0428 20:04:24.049576 30375 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:04:24.049579 30375 net.cpp:139] Memory required for data: 6434800
I0428 20:04:24.049582 30375 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:24.049590 30375 net.cpp:86] Creating Layer ip2
I0428 20:04:24.049593 30375 net.cpp:408] ip2 <- ip1
I0428 20:04:24.049598 30375 net.cpp:382] ip2 -> ip2
I0428 20:04:24.049722 30375 net.cpp:124] Setting up ip2
I0428 20:04:24.049729 30375 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:04:24.049733 30375 net.cpp:139] Memory required for data: 6444800
I0428 20:04:24.049738 30375 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:24.049743 30375 net.cpp:86] Creating Layer relu2
I0428 20:04:24.049746 30375 net.cpp:408] relu2 <- ip2
I0428 20:04:24.049759 30375 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:24.049919 30375 net.cpp:124] Setting up relu2
I0428 20:04:24.049927 30375 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:04:24.049932 30375 net.cpp:139] Memory required for data: 6454800
I0428 20:04:24.049934 30375 layer_factory.hpp:77] Creating layer ip3
I0428 20:04:24.049942 30375 net.cpp:86] Creating Layer ip3
I0428 20:04:24.049949 30375 net.cpp:408] ip3 <- ip2
I0428 20:04:24.049955 30375 net.cpp:382] ip3 -> ip3
I0428 20:04:24.050076 30375 net.cpp:124] Setting up ip3
I0428 20:04:24.050084 30375 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:24.050087 30375 net.cpp:139] Memory required for data: 6458800
I0428 20:04:24.050094 30375 layer_factory.hpp:77] Creating layer relu3
I0428 20:04:24.050099 30375 net.cpp:86] Creating Layer relu3
I0428 20:04:24.050102 30375 net.cpp:408] relu3 <- ip3
I0428 20:04:24.050107 30375 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:04:24.050935 30375 net.cpp:124] Setting up relu3
I0428 20:04:24.050948 30375 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:24.050952 30375 net.cpp:139] Memory required for data: 6462800
I0428 20:04:24.050961 30375 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:04:24.050966 30375 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:04:24.050971 30375 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:04:24.050976 30375 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:04:24.050983 30375 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:04:24.051021 30375 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:04:24.051028 30375 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:24.051033 30375 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:24.051035 30375 net.cpp:139] Memory required for data: 6470800
I0428 20:04:24.051038 30375 layer_factory.hpp:77] Creating layer accuracy
I0428 20:04:24.051044 30375 net.cpp:86] Creating Layer accuracy
I0428 20:04:24.051048 30375 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:04:24.051053 30375 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:04:24.051056 30375 net.cpp:382] accuracy -> accuracy
I0428 20:04:24.051064 30375 net.cpp:124] Setting up accuracy
I0428 20:04:24.051067 30375 net.cpp:131] Top shape: (1)
I0428 20:04:24.051070 30375 net.cpp:139] Memory required for data: 6470804
I0428 20:04:24.051087 30375 layer_factory.hpp:77] Creating layer loss
I0428 20:04:24.051093 30375 net.cpp:86] Creating Layer loss
I0428 20:04:24.051096 30375 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:04:24.051100 30375 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:04:24.051105 30375 net.cpp:382] loss -> loss
I0428 20:04:24.051110 30375 layer_factory.hpp:77] Creating layer loss
I0428 20:04:24.051342 30375 net.cpp:124] Setting up loss
I0428 20:04:24.051350 30375 net.cpp:131] Top shape: (1)
I0428 20:04:24.051353 30375 net.cpp:134]     with loss weight 1
I0428 20:04:24.051368 30375 net.cpp:139] Memory required for data: 6470808
I0428 20:04:24.051373 30375 net.cpp:200] loss needs backward computation.
I0428 20:04:24.051378 30375 net.cpp:202] accuracy does not need backward computation.
I0428 20:04:24.051381 30375 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:04:24.051383 30375 net.cpp:200] relu3 needs backward computation.
I0428 20:04:24.051386 30375 net.cpp:200] ip3 needs backward computation.
I0428 20:04:24.051389 30375 net.cpp:200] relu2 needs backward computation.
I0428 20:04:24.051393 30375 net.cpp:200] ip2 needs backward computation.
I0428 20:04:24.051395 30375 net.cpp:200] relu1 needs backward computation.
I0428 20:04:24.051398 30375 net.cpp:200] ip1 needs backward computation.
I0428 20:04:24.051400 30375 net.cpp:200] pool1 needs backward computation.
I0428 20:04:24.051403 30375 net.cpp:200] conv1 needs backward computation.
I0428 20:04:24.051407 30375 net.cpp:200] pool0 needs backward computation.
I0428 20:04:24.051409 30375 net.cpp:200] conv0 needs backward computation.
I0428 20:04:24.051414 30375 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:04:24.051417 30375 net.cpp:202] mnist does not need backward computation.
I0428 20:04:24.051425 30375 net.cpp:244] This network produces output accuracy
I0428 20:04:24.051429 30375 net.cpp:244] This network produces output loss
I0428 20:04:24.051440 30375 net.cpp:257] Network initialization done.
I0428 20:04:24.051481 30375 solver.cpp:56] Solver scaffolding done.
I0428 20:04:24.051836 30375 caffe.cpp:248] Starting Optimization
I0428 20:04:24.051842 30375 solver.cpp:273] Solving LeNet
I0428 20:04:24.051861 30375 solver.cpp:274] Learning Rate Policy: inv
I0428 20:04:24.052150 30375 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:04:24.058217 30375 blocking_queue.cpp:49] Waiting for data
I0428 20:04:24.128321 30382 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:24.128991 30375 solver.cpp:398]     Test net output #0: accuracy = 0.1436
I0428 20:04:24.129029 30375 solver.cpp:398]     Test net output #1: loss = 2.29058 (* 1 = 2.29058 loss)
I0428 20:04:24.132848 30375 solver.cpp:219] Iteration 0 (0 iter/s, 0.080938s/100 iters), loss = 2.30451
I0428 20:04:24.132872 30375 solver.cpp:238]     Train net output #0: loss = 2.30451 (* 1 = 2.30451 loss)
I0428 20:04:24.132899 30375 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:04:24.291971 30375 solver.cpp:219] Iteration 100 (628.605 iter/s, 0.159082s/100 iters), loss = 1.15491
I0428 20:04:24.291998 30375 solver.cpp:238]     Train net output #0: loss = 1.15491 (* 1 = 1.15491 loss)
I0428 20:04:24.292006 30375 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:04:24.448421 30375 solver.cpp:219] Iteration 200 (639.363 iter/s, 0.156406s/100 iters), loss = 0.660691
I0428 20:04:24.448454 30375 solver.cpp:238]     Train net output #0: loss = 0.660691 (* 1 = 0.660691 loss)
I0428 20:04:24.448477 30375 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:04:24.604342 30375 solver.cpp:219] Iteration 300 (641.547 iter/s, 0.155873s/100 iters), loss = 0.933923
I0428 20:04:24.604372 30375 solver.cpp:238]     Train net output #0: loss = 0.933923 (* 1 = 0.933923 loss)
I0428 20:04:24.604378 30375 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:04:24.760283 30375 solver.cpp:219] Iteration 400 (641.437 iter/s, 0.1559s/100 iters), loss = 0.429706
I0428 20:04:24.760310 30375 solver.cpp:238]     Train net output #0: loss = 0.429706 (* 1 = 0.429706 loss)
I0428 20:04:24.760318 30375 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:04:24.916749 30375 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:04:24.993623 30382 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:24.994251 30375 solver.cpp:398]     Test net output #0: accuracy = 0.7754
I0428 20:04:24.994273 30375 solver.cpp:398]     Test net output #1: loss = 0.567175 (* 1 = 0.567175 loss)
I0428 20:04:24.995713 30375 solver.cpp:219] Iteration 500 (424.832 iter/s, 0.235387s/100 iters), loss = 0.489674
I0428 20:04:24.995766 30375 solver.cpp:238]     Train net output #0: loss = 0.489674 (* 1 = 0.489674 loss)
I0428 20:04:24.995775 30375 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:04:25.152602 30375 solver.cpp:219] Iteration 600 (637.651 iter/s, 0.156826s/100 iters), loss = 0.477377
I0428 20:04:25.152628 30375 solver.cpp:238]     Train net output #0: loss = 0.477377 (* 1 = 0.477377 loss)
I0428 20:04:25.152649 30375 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:04:25.308120 30375 solver.cpp:219] Iteration 700 (643.178 iter/s, 0.155478s/100 iters), loss = 0.496685
I0428 20:04:25.308145 30375 solver.cpp:238]     Train net output #0: loss = 0.496685 (* 1 = 0.496685 loss)
I0428 20:04:25.308152 30375 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:04:25.462218 30375 solver.cpp:219] Iteration 800 (649.099 iter/s, 0.15406s/100 iters), loss = 0.774786
I0428 20:04:25.462244 30375 solver.cpp:238]     Train net output #0: loss = 0.774786 (* 1 = 0.774786 loss)
I0428 20:04:25.462266 30375 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:04:25.613353 30375 solver.cpp:219] Iteration 900 (661.829 iter/s, 0.151096s/100 iters), loss = 0.675183
I0428 20:04:25.613379 30375 solver.cpp:238]     Train net output #0: loss = 0.675183 (* 1 = 0.675183 loss)
I0428 20:04:25.613385 30375 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:04:25.665072 30381 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:25.772037 30375 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:04:25.774860 30375 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:04:25.776248 30375 solver.cpp:311] Iteration 1000, loss = 0.555691
I0428 20:04:25.776263 30375 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:04:25.852248 30382 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:25.852917 30375 solver.cpp:398]     Test net output #0: accuracy = 0.7828
I0428 20:04:25.852937 30375 solver.cpp:398]     Test net output #1: loss = 0.531435 (* 1 = 0.531435 loss)
I0428 20:04:25.852943 30375 solver.cpp:316] Optimization Done.
I0428 20:04:25.852947 30375 caffe.cpp:259] Optimization Done.
