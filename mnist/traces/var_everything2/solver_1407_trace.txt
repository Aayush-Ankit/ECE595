I0428 20:22:34.965502  2024 caffe.cpp:218] Using GPUs 0
I0428 20:22:35.001932  2024 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:22:35.512259  2024 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1407.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:22:35.512397  2024 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1407.prototxt
I0428 20:22:35.512781  2024 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:22:35.512799  2024 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:22:35.512898  2024 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:22:35.512975  2024 layer_factory.hpp:77] Creating layer mnist
I0428 20:22:35.513077  2024 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:22:35.513103  2024 net.cpp:86] Creating Layer mnist
I0428 20:22:35.513111  2024 net.cpp:382] mnist -> data
I0428 20:22:35.513134  2024 net.cpp:382] mnist -> label
I0428 20:22:35.514230  2024 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:22:35.516824  2024 net.cpp:124] Setting up mnist
I0428 20:22:35.516847  2024 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:22:35.516856  2024 net.cpp:131] Top shape: 64 (64)
I0428 20:22:35.516860  2024 net.cpp:139] Memory required for data: 200960
I0428 20:22:35.516867  2024 layer_factory.hpp:77] Creating layer conv0
I0428 20:22:35.516882  2024 net.cpp:86] Creating Layer conv0
I0428 20:22:35.516891  2024 net.cpp:408] conv0 <- data
I0428 20:22:35.516906  2024 net.cpp:382] conv0 -> conv0
I0428 20:22:35.808672  2024 net.cpp:124] Setting up conv0
I0428 20:22:35.808703  2024 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:22:35.808708  2024 net.cpp:139] Memory required for data: 7573760
I0428 20:22:35.808746  2024 layer_factory.hpp:77] Creating layer pool0
I0428 20:22:35.808760  2024 net.cpp:86] Creating Layer pool0
I0428 20:22:35.808764  2024 net.cpp:408] pool0 <- conv0
I0428 20:22:35.808771  2024 net.cpp:382] pool0 -> pool0
I0428 20:22:35.808832  2024 net.cpp:124] Setting up pool0
I0428 20:22:35.808840  2024 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:22:35.808843  2024 net.cpp:139] Memory required for data: 9416960
I0428 20:22:35.808847  2024 layer_factory.hpp:77] Creating layer conv1
I0428 20:22:35.808861  2024 net.cpp:86] Creating Layer conv1
I0428 20:22:35.808864  2024 net.cpp:408] conv1 <- pool0
I0428 20:22:35.808869  2024 net.cpp:382] conv1 -> conv1
I0428 20:22:35.812830  2024 net.cpp:124] Setting up conv1
I0428 20:22:35.812847  2024 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:22:35.812852  2024 net.cpp:139] Memory required for data: 11055360
I0428 20:22:35.812862  2024 layer_factory.hpp:77] Creating layer pool1
I0428 20:22:35.812871  2024 net.cpp:86] Creating Layer pool1
I0428 20:22:35.812876  2024 net.cpp:408] pool1 <- conv1
I0428 20:22:35.812882  2024 net.cpp:382] pool1 -> pool1
I0428 20:22:35.812925  2024 net.cpp:124] Setting up pool1
I0428 20:22:35.812932  2024 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:22:35.812935  2024 net.cpp:139] Memory required for data: 11464960
I0428 20:22:35.812938  2024 layer_factory.hpp:77] Creating layer ip1
I0428 20:22:35.812947  2024 net.cpp:86] Creating Layer ip1
I0428 20:22:35.812950  2024 net.cpp:408] ip1 <- pool1
I0428 20:22:35.812955  2024 net.cpp:382] ip1 -> ip1
I0428 20:22:35.814132  2024 net.cpp:124] Setting up ip1
I0428 20:22:35.814148  2024 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:35.814152  2024 net.cpp:139] Memory required for data: 11467520
I0428 20:22:35.814162  2024 layer_factory.hpp:77] Creating layer relu1
I0428 20:22:35.814168  2024 net.cpp:86] Creating Layer relu1
I0428 20:22:35.814172  2024 net.cpp:408] relu1 <- ip1
I0428 20:22:35.814178  2024 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:22:35.814375  2024 net.cpp:124] Setting up relu1
I0428 20:22:35.814385  2024 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:35.814389  2024 net.cpp:139] Memory required for data: 11470080
I0428 20:22:35.814393  2024 layer_factory.hpp:77] Creating layer ip2
I0428 20:22:35.814400  2024 net.cpp:86] Creating Layer ip2
I0428 20:22:35.814404  2024 net.cpp:408] ip2 <- ip1
I0428 20:22:35.814410  2024 net.cpp:382] ip2 -> ip2
I0428 20:22:35.814520  2024 net.cpp:124] Setting up ip2
I0428 20:22:35.814528  2024 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:35.814532  2024 net.cpp:139] Memory required for data: 11472640
I0428 20:22:35.814538  2024 layer_factory.hpp:77] Creating layer relu2
I0428 20:22:35.814544  2024 net.cpp:86] Creating Layer relu2
I0428 20:22:35.814548  2024 net.cpp:408] relu2 <- ip2
I0428 20:22:35.814553  2024 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:22:35.815428  2024 net.cpp:124] Setting up relu2
I0428 20:22:35.815443  2024 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:35.815446  2024 net.cpp:139] Memory required for data: 11475200
I0428 20:22:35.815450  2024 layer_factory.hpp:77] Creating layer loss
I0428 20:22:35.815459  2024 net.cpp:86] Creating Layer loss
I0428 20:22:35.815462  2024 net.cpp:408] loss <- ip2
I0428 20:22:35.815467  2024 net.cpp:408] loss <- label
I0428 20:22:35.815474  2024 net.cpp:382] loss -> loss
I0428 20:22:35.815493  2024 layer_factory.hpp:77] Creating layer loss
I0428 20:22:35.815767  2024 net.cpp:124] Setting up loss
I0428 20:22:35.815778  2024 net.cpp:131] Top shape: (1)
I0428 20:22:35.815783  2024 net.cpp:134]     with loss weight 1
I0428 20:22:35.815798  2024 net.cpp:139] Memory required for data: 11475204
I0428 20:22:35.815803  2024 net.cpp:200] loss needs backward computation.
I0428 20:22:35.815806  2024 net.cpp:200] relu2 needs backward computation.
I0428 20:22:35.815810  2024 net.cpp:200] ip2 needs backward computation.
I0428 20:22:35.815814  2024 net.cpp:200] relu1 needs backward computation.
I0428 20:22:35.815816  2024 net.cpp:200] ip1 needs backward computation.
I0428 20:22:35.815832  2024 net.cpp:200] pool1 needs backward computation.
I0428 20:22:35.815836  2024 net.cpp:200] conv1 needs backward computation.
I0428 20:22:35.815840  2024 net.cpp:200] pool0 needs backward computation.
I0428 20:22:35.815845  2024 net.cpp:200] conv0 needs backward computation.
I0428 20:22:35.815848  2024 net.cpp:202] mnist does not need backward computation.
I0428 20:22:35.815851  2024 net.cpp:244] This network produces output loss
I0428 20:22:35.815861  2024 net.cpp:257] Network initialization done.
I0428 20:22:35.816238  2024 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1407.prototxt
I0428 20:22:35.816270  2024 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:22:35.816365  2024 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:22:35.816437  2024 layer_factory.hpp:77] Creating layer mnist
I0428 20:22:35.816485  2024 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:22:35.816503  2024 net.cpp:86] Creating Layer mnist
I0428 20:22:35.816507  2024 net.cpp:382] mnist -> data
I0428 20:22:35.816516  2024 net.cpp:382] mnist -> label
I0428 20:22:35.816615  2024 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:22:35.817869  2024 net.cpp:124] Setting up mnist
I0428 20:22:35.817885  2024 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:22:35.817891  2024 net.cpp:131] Top shape: 100 (100)
I0428 20:22:35.817894  2024 net.cpp:139] Memory required for data: 314000
I0428 20:22:35.817899  2024 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:22:35.817906  2024 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:22:35.817910  2024 net.cpp:408] label_mnist_1_split <- label
I0428 20:22:35.817916  2024 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:22:35.817924  2024 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:22:35.817987  2024 net.cpp:124] Setting up label_mnist_1_split
I0428 20:22:35.817994  2024 net.cpp:131] Top shape: 100 (100)
I0428 20:22:35.817998  2024 net.cpp:131] Top shape: 100 (100)
I0428 20:22:35.818002  2024 net.cpp:139] Memory required for data: 314800
I0428 20:22:35.818006  2024 layer_factory.hpp:77] Creating layer conv0
I0428 20:22:35.818015  2024 net.cpp:86] Creating Layer conv0
I0428 20:22:35.818019  2024 net.cpp:408] conv0 <- data
I0428 20:22:35.818024  2024 net.cpp:382] conv0 -> conv0
I0428 20:22:35.819972  2024 net.cpp:124] Setting up conv0
I0428 20:22:35.819988  2024 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:22:35.819993  2024 net.cpp:139] Memory required for data: 11834800
I0428 20:22:35.820003  2024 layer_factory.hpp:77] Creating layer pool0
I0428 20:22:35.820010  2024 net.cpp:86] Creating Layer pool0
I0428 20:22:35.820014  2024 net.cpp:408] pool0 <- conv0
I0428 20:22:35.820020  2024 net.cpp:382] pool0 -> pool0
I0428 20:22:35.820062  2024 net.cpp:124] Setting up pool0
I0428 20:22:35.820070  2024 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:22:35.820076  2024 net.cpp:139] Memory required for data: 14714800
I0428 20:22:35.820082  2024 layer_factory.hpp:77] Creating layer conv1
I0428 20:22:35.820092  2024 net.cpp:86] Creating Layer conv1
I0428 20:22:35.820096  2024 net.cpp:408] conv1 <- pool0
I0428 20:22:35.820102  2024 net.cpp:382] conv1 -> conv1
I0428 20:22:35.823711  2024 net.cpp:124] Setting up conv1
I0428 20:22:35.823729  2024 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:22:35.823732  2024 net.cpp:139] Memory required for data: 17274800
I0428 20:22:35.823743  2024 layer_factory.hpp:77] Creating layer pool1
I0428 20:22:35.823750  2024 net.cpp:86] Creating Layer pool1
I0428 20:22:35.823755  2024 net.cpp:408] pool1 <- conv1
I0428 20:22:35.823762  2024 net.cpp:382] pool1 -> pool1
I0428 20:22:35.823803  2024 net.cpp:124] Setting up pool1
I0428 20:22:35.823809  2024 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:22:35.823814  2024 net.cpp:139] Memory required for data: 17914800
I0428 20:22:35.823817  2024 layer_factory.hpp:77] Creating layer ip1
I0428 20:22:35.823824  2024 net.cpp:86] Creating Layer ip1
I0428 20:22:35.823828  2024 net.cpp:408] ip1 <- pool1
I0428 20:22:35.823834  2024 net.cpp:382] ip1 -> ip1
I0428 20:22:35.824040  2024 net.cpp:124] Setting up ip1
I0428 20:22:35.824048  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824053  2024 net.cpp:139] Memory required for data: 17918800
I0428 20:22:35.824060  2024 layer_factory.hpp:77] Creating layer relu1
I0428 20:22:35.824065  2024 net.cpp:86] Creating Layer relu1
I0428 20:22:35.824069  2024 net.cpp:408] relu1 <- ip1
I0428 20:22:35.824075  2024 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:22:35.824264  2024 net.cpp:124] Setting up relu1
I0428 20:22:35.824277  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824281  2024 net.cpp:139] Memory required for data: 17922800
I0428 20:22:35.824285  2024 layer_factory.hpp:77] Creating layer ip2
I0428 20:22:35.824300  2024 net.cpp:86] Creating Layer ip2
I0428 20:22:35.824303  2024 net.cpp:408] ip2 <- ip1
I0428 20:22:35.824311  2024 net.cpp:382] ip2 -> ip2
I0428 20:22:35.824421  2024 net.cpp:124] Setting up ip2
I0428 20:22:35.824429  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824434  2024 net.cpp:139] Memory required for data: 17926800
I0428 20:22:35.824440  2024 layer_factory.hpp:77] Creating layer relu2
I0428 20:22:35.824446  2024 net.cpp:86] Creating Layer relu2
I0428 20:22:35.824451  2024 net.cpp:408] relu2 <- ip2
I0428 20:22:35.824455  2024 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:22:35.824692  2024 net.cpp:124] Setting up relu2
I0428 20:22:35.824703  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824707  2024 net.cpp:139] Memory required for data: 17930800
I0428 20:22:35.824710  2024 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:22:35.824717  2024 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:22:35.824722  2024 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:22:35.824726  2024 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:22:35.824751  2024 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:22:35.824826  2024 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:22:35.824837  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824841  2024 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:35.824844  2024 net.cpp:139] Memory required for data: 17938800
I0428 20:22:35.824848  2024 layer_factory.hpp:77] Creating layer accuracy
I0428 20:22:35.824856  2024 net.cpp:86] Creating Layer accuracy
I0428 20:22:35.824862  2024 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:22:35.824867  2024 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:22:35.824872  2024 net.cpp:382] accuracy -> accuracy
I0428 20:22:35.824879  2024 net.cpp:124] Setting up accuracy
I0428 20:22:35.824884  2024 net.cpp:131] Top shape: (1)
I0428 20:22:35.824887  2024 net.cpp:139] Memory required for data: 17938804
I0428 20:22:35.824890  2024 layer_factory.hpp:77] Creating layer loss
I0428 20:22:35.824895  2024 net.cpp:86] Creating Layer loss
I0428 20:22:35.824900  2024 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:22:35.824904  2024 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:22:35.824910  2024 net.cpp:382] loss -> loss
I0428 20:22:35.824918  2024 layer_factory.hpp:77] Creating layer loss
I0428 20:22:35.825198  2024 net.cpp:124] Setting up loss
I0428 20:22:35.825212  2024 net.cpp:131] Top shape: (1)
I0428 20:22:35.825215  2024 net.cpp:134]     with loss weight 1
I0428 20:22:35.825228  2024 net.cpp:139] Memory required for data: 17938808
I0428 20:22:35.825232  2024 net.cpp:200] loss needs backward computation.
I0428 20:22:35.825251  2024 net.cpp:202] accuracy does not need backward computation.
I0428 20:22:35.825255  2024 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:22:35.825259  2024 net.cpp:200] relu2 needs backward computation.
I0428 20:22:35.825261  2024 net.cpp:200] ip2 needs backward computation.
I0428 20:22:35.825265  2024 net.cpp:200] relu1 needs backward computation.
I0428 20:22:35.825268  2024 net.cpp:200] ip1 needs backward computation.
I0428 20:22:35.825271  2024 net.cpp:200] pool1 needs backward computation.
I0428 20:22:35.825274  2024 net.cpp:200] conv1 needs backward computation.
I0428 20:22:35.825278  2024 net.cpp:200] pool0 needs backward computation.
I0428 20:22:35.825281  2024 net.cpp:200] conv0 needs backward computation.
I0428 20:22:35.825290  2024 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:22:35.825295  2024 net.cpp:202] mnist does not need backward computation.
I0428 20:22:35.825299  2024 net.cpp:244] This network produces output accuracy
I0428 20:22:35.825302  2024 net.cpp:244] This network produces output loss
I0428 20:22:35.825314  2024 net.cpp:257] Network initialization done.
I0428 20:22:35.825356  2024 solver.cpp:56] Solver scaffolding done.
I0428 20:22:35.825675  2024 caffe.cpp:248] Starting Optimization
I0428 20:22:35.825681  2024 solver.cpp:273] Solving LeNet
I0428 20:22:35.825685  2024 solver.cpp:274] Learning Rate Policy: inv
I0428 20:22:35.825863  2024 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:22:35.835904  2024 blocking_queue.cpp:49] Waiting for data
I0428 20:22:35.915251  2033 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:35.916481  2024 solver.cpp:398]     Test net output #0: accuracy = 0.1397
I0428 20:22:35.916513  2024 solver.cpp:398]     Test net output #1: loss = 2.28836 (* 1 = 2.28836 loss)
I0428 20:22:35.922020  2024 solver.cpp:219] Iteration 0 (0 iter/s, 0.0963s/100 iters), loss = 2.28113
I0428 20:22:35.922044  2024 solver.cpp:238]     Train net output #0: loss = 2.28113 (* 1 = 2.28113 loss)
I0428 20:22:35.922055  2024 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:22:36.118691  2024 solver.cpp:219] Iteration 100 (508.565 iter/s, 0.196632s/100 iters), loss = 1.08532
I0428 20:22:36.118732  2024 solver.cpp:238]     Train net output #0: loss = 1.08532 (* 1 = 1.08532 loss)
I0428 20:22:36.118738  2024 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:22:36.316970  2024 solver.cpp:219] Iteration 200 (504.451 iter/s, 0.198235s/100 iters), loss = 0.956419
I0428 20:22:36.317010  2024 solver.cpp:238]     Train net output #0: loss = 0.956419 (* 1 = 0.956419 loss)
I0428 20:22:36.317020  2024 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:22:36.529500  2024 solver.cpp:219] Iteration 300 (470.644 iter/s, 0.212475s/100 iters), loss = 0.671895
I0428 20:22:36.529527  2024 solver.cpp:238]     Train net output #0: loss = 0.671895 (* 1 = 0.671895 loss)
I0428 20:22:36.529534  2024 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:22:36.734632  2024 solver.cpp:219] Iteration 400 (487.601 iter/s, 0.205086s/100 iters), loss = 0.65746
I0428 20:22:36.734680  2024 solver.cpp:238]     Train net output #0: loss = 0.65746 (* 1 = 0.65746 loss)
I0428 20:22:36.734694  2024 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:22:36.953606  2024 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:22:37.040971  2033 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:37.043377  2024 solver.cpp:398]     Test net output #0: accuracy = 0.6716
I0428 20:22:37.043406  2024 solver.cpp:398]     Test net output #1: loss = 0.819203 (* 1 = 0.819203 loss)
I0428 20:22:37.045483  2024 solver.cpp:219] Iteration 500 (321.768 iter/s, 0.310783s/100 iters), loss = 0.908065
I0428 20:22:37.045521  2024 solver.cpp:238]     Train net output #0: loss = 0.908065 (* 1 = 0.908065 loss)
I0428 20:22:37.045534  2024 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:22:37.263322  2024 solver.cpp:219] Iteration 600 (459.168 iter/s, 0.217785s/100 iters), loss = 0.91025
I0428 20:22:37.263356  2024 solver.cpp:238]     Train net output #0: loss = 0.91025 (* 1 = 0.91025 loss)
I0428 20:22:37.263365  2024 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:22:37.483677  2024 solver.cpp:219] Iteration 700 (453.918 iter/s, 0.220304s/100 iters), loss = 0.936135
I0428 20:22:37.483712  2024 solver.cpp:238]     Train net output #0: loss = 0.936135 (* 1 = 0.936135 loss)
I0428 20:22:37.483721  2024 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:22:37.701545  2024 solver.cpp:219] Iteration 800 (459.106 iter/s, 0.217815s/100 iters), loss = 0.886846
I0428 20:22:37.701578  2024 solver.cpp:238]     Train net output #0: loss = 0.886846 (* 1 = 0.886846 loss)
I0428 20:22:37.701587  2024 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:22:37.921787  2024 solver.cpp:219] Iteration 900 (454.15 iter/s, 0.220192s/100 iters), loss = 0.822684
I0428 20:22:37.921820  2024 solver.cpp:238]     Train net output #0: loss = 0.822684 (* 1 = 0.822684 loss)
I0428 20:22:37.921829  2024 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:22:37.994990  2032 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:38.139032  2024 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:22:38.143765  2024 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:22:38.145678  2024 solver.cpp:311] Iteration 1000, loss = 0.926939
I0428 20:22:38.145697  2024 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:22:38.231848  2033 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:38.233116  2024 solver.cpp:398]     Test net output #0: accuracy = 0.6803
I0428 20:22:38.233141  2024 solver.cpp:398]     Test net output #1: loss = 0.783584 (* 1 = 0.783584 loss)
I0428 20:22:38.233147  2024 solver.cpp:316] Optimization Done.
I0428 20:22:38.233150  2024 caffe.cpp:259] Optimization Done.
