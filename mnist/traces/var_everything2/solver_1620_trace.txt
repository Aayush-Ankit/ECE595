I0428 20:35:23.718788  4616 caffe.cpp:218] Using GPUs 0
I0428 20:35:23.756759  4616 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:35:24.271633  4616 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1620.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:35:24.271778  4616 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1620.prototxt
I0428 20:35:24.272199  4616 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:35:24.272220  4616 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:35:24.272323  4616 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:24.272403  4616 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:24.272502  4616 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:35:24.272527  4616 net.cpp:86] Creating Layer mnist
I0428 20:35:24.272534  4616 net.cpp:382] mnist -> data
I0428 20:35:24.272558  4616 net.cpp:382] mnist -> label
I0428 20:35:24.273666  4616 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:35:24.276121  4616 net.cpp:124] Setting up mnist
I0428 20:35:24.276139  4616 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:35:24.276147  4616 net.cpp:131] Top shape: 64 (64)
I0428 20:35:24.276152  4616 net.cpp:139] Memory required for data: 200960
I0428 20:35:24.276160  4616 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:24.276176  4616 net.cpp:86] Creating Layer conv0
I0428 20:35:24.276201  4616 net.cpp:408] conv0 <- data
I0428 20:35:24.276216  4616 net.cpp:382] conv0 -> conv0
I0428 20:35:24.567927  4616 net.cpp:124] Setting up conv0
I0428 20:35:24.567956  4616 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:35:24.567960  4616 net.cpp:139] Memory required for data: 14946560
I0428 20:35:24.567978  4616 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:24.567992  4616 net.cpp:86] Creating Layer pool0
I0428 20:35:24.567996  4616 net.cpp:408] pool0 <- conv0
I0428 20:35:24.568002  4616 net.cpp:382] pool0 -> pool0
I0428 20:35:24.568053  4616 net.cpp:124] Setting up pool0
I0428 20:35:24.568059  4616 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:35:24.568063  4616 net.cpp:139] Memory required for data: 18632960
I0428 20:35:24.568065  4616 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:24.568078  4616 net.cpp:86] Creating Layer conv1
I0428 20:35:24.568080  4616 net.cpp:408] conv1 <- pool0
I0428 20:35:24.568086  4616 net.cpp:382] conv1 -> conv1
I0428 20:35:24.571763  4616 net.cpp:124] Setting up conv1
I0428 20:35:24.571781  4616 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:35:24.571785  4616 net.cpp:139] Memory required for data: 19452160
I0428 20:35:24.571795  4616 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:24.571806  4616 net.cpp:86] Creating Layer pool1
I0428 20:35:24.571810  4616 net.cpp:408] pool1 <- conv1
I0428 20:35:24.571816  4616 net.cpp:382] pool1 -> pool1
I0428 20:35:24.571862  4616 net.cpp:124] Setting up pool1
I0428 20:35:24.571868  4616 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:35:24.571871  4616 net.cpp:139] Memory required for data: 19656960
I0428 20:35:24.571874  4616 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:24.571882  4616 net.cpp:86] Creating Layer ip1
I0428 20:35:24.571885  4616 net.cpp:408] ip1 <- pool1
I0428 20:35:24.571892  4616 net.cpp:382] ip1 -> ip1
I0428 20:35:24.572126  4616 net.cpp:124] Setting up ip1
I0428 20:35:24.572135  4616 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:24.572139  4616 net.cpp:139] Memory required for data: 19663360
I0428 20:35:24.572146  4616 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:24.572154  4616 net.cpp:86] Creating Layer relu1
I0428 20:35:24.572158  4616 net.cpp:408] relu1 <- ip1
I0428 20:35:24.572162  4616 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:24.572350  4616 net.cpp:124] Setting up relu1
I0428 20:35:24.572362  4616 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:24.572365  4616 net.cpp:139] Memory required for data: 19669760
I0428 20:35:24.572369  4616 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:24.572376  4616 net.cpp:86] Creating Layer ip2
I0428 20:35:24.572379  4616 net.cpp:408] ip2 <- ip1
I0428 20:35:24.572386  4616 net.cpp:382] ip2 -> ip2
I0428 20:35:24.572494  4616 net.cpp:124] Setting up ip2
I0428 20:35:24.572501  4616 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:24.572505  4616 net.cpp:139] Memory required for data: 19672320
I0428 20:35:24.572511  4616 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:24.572520  4616 net.cpp:86] Creating Layer relu2
I0428 20:35:24.572522  4616 net.cpp:408] relu2 <- ip2
I0428 20:35:24.572530  4616 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:24.573344  4616 net.cpp:124] Setting up relu2
I0428 20:35:24.573359  4616 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:24.573361  4616 net.cpp:139] Memory required for data: 19674880
I0428 20:35:24.573365  4616 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:24.573374  4616 net.cpp:86] Creating Layer ip3
I0428 20:35:24.573376  4616 net.cpp:408] ip3 <- ip2
I0428 20:35:24.573384  4616 net.cpp:382] ip3 -> ip3
I0428 20:35:24.573498  4616 net.cpp:124] Setting up ip3
I0428 20:35:24.573505  4616 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:24.573509  4616 net.cpp:139] Memory required for data: 19677440
I0428 20:35:24.573518  4616 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:24.573524  4616 net.cpp:86] Creating Layer relu3
I0428 20:35:24.573529  4616 net.cpp:408] relu3 <- ip3
I0428 20:35:24.573532  4616 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:24.573730  4616 net.cpp:124] Setting up relu3
I0428 20:35:24.573740  4616 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:24.573743  4616 net.cpp:139] Memory required for data: 19680000
I0428 20:35:24.573747  4616 layer_factory.hpp:77] Creating layer loss
I0428 20:35:24.573755  4616 net.cpp:86] Creating Layer loss
I0428 20:35:24.573757  4616 net.cpp:408] loss <- ip3
I0428 20:35:24.573761  4616 net.cpp:408] loss <- label
I0428 20:35:24.573767  4616 net.cpp:382] loss -> loss
I0428 20:35:24.573786  4616 layer_factory.hpp:77] Creating layer loss
I0428 20:35:24.574048  4616 net.cpp:124] Setting up loss
I0428 20:35:24.574059  4616 net.cpp:131] Top shape: (1)
I0428 20:35:24.574062  4616 net.cpp:134]     with loss weight 1
I0428 20:35:24.574076  4616 net.cpp:139] Memory required for data: 19680004
I0428 20:35:24.574080  4616 net.cpp:200] loss needs backward computation.
I0428 20:35:24.574084  4616 net.cpp:200] relu3 needs backward computation.
I0428 20:35:24.574086  4616 net.cpp:200] ip3 needs backward computation.
I0428 20:35:24.574090  4616 net.cpp:200] relu2 needs backward computation.
I0428 20:35:24.574092  4616 net.cpp:200] ip2 needs backward computation.
I0428 20:35:24.574095  4616 net.cpp:200] relu1 needs backward computation.
I0428 20:35:24.574097  4616 net.cpp:200] ip1 needs backward computation.
I0428 20:35:24.574100  4616 net.cpp:200] pool1 needs backward computation.
I0428 20:35:24.574103  4616 net.cpp:200] conv1 needs backward computation.
I0428 20:35:24.574107  4616 net.cpp:200] pool0 needs backward computation.
I0428 20:35:24.574110  4616 net.cpp:200] conv0 needs backward computation.
I0428 20:35:24.574113  4616 net.cpp:202] mnist does not need backward computation.
I0428 20:35:24.574118  4616 net.cpp:244] This network produces output loss
I0428 20:35:24.574128  4616 net.cpp:257] Network initialization done.
I0428 20:35:24.574468  4616 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1620.prototxt
I0428 20:35:24.574497  4616 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:35:24.574599  4616 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:24.574687  4616 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:24.574736  4616 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:35:24.574749  4616 net.cpp:86] Creating Layer mnist
I0428 20:35:24.574756  4616 net.cpp:382] mnist -> data
I0428 20:35:24.574764  4616 net.cpp:382] mnist -> label
I0428 20:35:24.574862  4616 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:35:24.576181  4616 net.cpp:124] Setting up mnist
I0428 20:35:24.576210  4616 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:35:24.576215  4616 net.cpp:131] Top shape: 100 (100)
I0428 20:35:24.576217  4616 net.cpp:139] Memory required for data: 314000
I0428 20:35:24.576221  4616 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:35:24.576228  4616 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:35:24.576232  4616 net.cpp:408] label_mnist_1_split <- label
I0428 20:35:24.576237  4616 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:35:24.576246  4616 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:35:24.576299  4616 net.cpp:124] Setting up label_mnist_1_split
I0428 20:35:24.576305  4616 net.cpp:131] Top shape: 100 (100)
I0428 20:35:24.576309  4616 net.cpp:131] Top shape: 100 (100)
I0428 20:35:24.576313  4616 net.cpp:139] Memory required for data: 314800
I0428 20:35:24.576315  4616 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:24.576328  4616 net.cpp:86] Creating Layer conv0
I0428 20:35:24.576331  4616 net.cpp:408] conv0 <- data
I0428 20:35:24.576336  4616 net.cpp:382] conv0 -> conv0
I0428 20:35:24.578204  4616 net.cpp:124] Setting up conv0
I0428 20:35:24.578219  4616 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:35:24.578223  4616 net.cpp:139] Memory required for data: 23354800
I0428 20:35:24.578234  4616 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:24.578241  4616 net.cpp:86] Creating Layer pool0
I0428 20:35:24.578244  4616 net.cpp:408] pool0 <- conv0
I0428 20:35:24.578251  4616 net.cpp:382] pool0 -> pool0
I0428 20:35:24.578294  4616 net.cpp:124] Setting up pool0
I0428 20:35:24.578302  4616 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:35:24.578305  4616 net.cpp:139] Memory required for data: 29114800
I0428 20:35:24.578308  4616 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:24.578320  4616 net.cpp:86] Creating Layer conv1
I0428 20:35:24.578322  4616 net.cpp:408] conv1 <- pool0
I0428 20:35:24.578328  4616 net.cpp:382] conv1 -> conv1
I0428 20:35:24.581616  4616 net.cpp:124] Setting up conv1
I0428 20:35:24.581631  4616 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:35:24.581635  4616 net.cpp:139] Memory required for data: 30394800
I0428 20:35:24.581647  4616 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:24.581655  4616 net.cpp:86] Creating Layer pool1
I0428 20:35:24.581657  4616 net.cpp:408] pool1 <- conv1
I0428 20:35:24.581665  4616 net.cpp:382] pool1 -> pool1
I0428 20:35:24.581707  4616 net.cpp:124] Setting up pool1
I0428 20:35:24.581712  4616 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:35:24.581715  4616 net.cpp:139] Memory required for data: 30714800
I0428 20:35:24.581718  4616 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:24.581725  4616 net.cpp:86] Creating Layer ip1
I0428 20:35:24.581728  4616 net.cpp:408] ip1 <- pool1
I0428 20:35:24.581734  4616 net.cpp:382] ip1 -> ip1
I0428 20:35:24.581962  4616 net.cpp:124] Setting up ip1
I0428 20:35:24.581986  4616 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:24.581990  4616 net.cpp:139] Memory required for data: 30724800
I0428 20:35:24.581997  4616 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:24.582005  4616 net.cpp:86] Creating Layer relu1
I0428 20:35:24.582008  4616 net.cpp:408] relu1 <- ip1
I0428 20:35:24.582015  4616 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:24.582257  4616 net.cpp:124] Setting up relu1
I0428 20:35:24.582267  4616 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:24.582270  4616 net.cpp:139] Memory required for data: 30734800
I0428 20:35:24.582273  4616 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:24.582283  4616 net.cpp:86] Creating Layer ip2
I0428 20:35:24.582286  4616 net.cpp:408] ip2 <- ip1
I0428 20:35:24.582293  4616 net.cpp:382] ip2 -> ip2
I0428 20:35:24.582417  4616 net.cpp:124] Setting up ip2
I0428 20:35:24.582425  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.582429  4616 net.cpp:139] Memory required for data: 30738800
I0428 20:35:24.582435  4616 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:24.582442  4616 net.cpp:86] Creating Layer relu2
I0428 20:35:24.582445  4616 net.cpp:408] relu2 <- ip2
I0428 20:35:24.582450  4616 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:24.582620  4616 net.cpp:124] Setting up relu2
I0428 20:35:24.582630  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.582633  4616 net.cpp:139] Memory required for data: 30742800
I0428 20:35:24.582638  4616 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:24.582644  4616 net.cpp:86] Creating Layer ip3
I0428 20:35:24.582648  4616 net.cpp:408] ip3 <- ip2
I0428 20:35:24.582654  4616 net.cpp:382] ip3 -> ip3
I0428 20:35:24.582764  4616 net.cpp:124] Setting up ip3
I0428 20:35:24.582773  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.582777  4616 net.cpp:139] Memory required for data: 30746800
I0428 20:35:24.582785  4616 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:24.582792  4616 net.cpp:86] Creating Layer relu3
I0428 20:35:24.582794  4616 net.cpp:408] relu3 <- ip3
I0428 20:35:24.582799  4616 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:24.583623  4616 net.cpp:124] Setting up relu3
I0428 20:35:24.583636  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.583639  4616 net.cpp:139] Memory required for data: 30750800
I0428 20:35:24.583643  4616 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:35:24.583648  4616 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:35:24.583652  4616 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:35:24.583658  4616 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:35:24.583664  4616 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:35:24.583747  4616 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:35:24.583757  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.583761  4616 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:24.583765  4616 net.cpp:139] Memory required for data: 30758800
I0428 20:35:24.583767  4616 layer_factory.hpp:77] Creating layer accuracy
I0428 20:35:24.583778  4616 net.cpp:86] Creating Layer accuracy
I0428 20:35:24.583781  4616 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:35:24.583786  4616 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:35:24.583791  4616 net.cpp:382] accuracy -> accuracy
I0428 20:35:24.583799  4616 net.cpp:124] Setting up accuracy
I0428 20:35:24.583808  4616 net.cpp:131] Top shape: (1)
I0428 20:35:24.583812  4616 net.cpp:139] Memory required for data: 30758804
I0428 20:35:24.583816  4616 layer_factory.hpp:77] Creating layer loss
I0428 20:35:24.583822  4616 net.cpp:86] Creating Layer loss
I0428 20:35:24.583824  4616 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:35:24.583828  4616 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:35:24.583833  4616 net.cpp:382] loss -> loss
I0428 20:35:24.583839  4616 layer_factory.hpp:77] Creating layer loss
I0428 20:35:24.584095  4616 net.cpp:124] Setting up loss
I0428 20:35:24.584105  4616 net.cpp:131] Top shape: (1)
I0428 20:35:24.584110  4616 net.cpp:134]     with loss weight 1
I0428 20:35:24.584125  4616 net.cpp:139] Memory required for data: 30758808
I0428 20:35:24.584128  4616 net.cpp:200] loss needs backward computation.
I0428 20:35:24.584132  4616 net.cpp:202] accuracy does not need backward computation.
I0428 20:35:24.584136  4616 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:35:24.584141  4616 net.cpp:200] relu3 needs backward computation.
I0428 20:35:24.584143  4616 net.cpp:200] ip3 needs backward computation.
I0428 20:35:24.584146  4616 net.cpp:200] relu2 needs backward computation.
I0428 20:35:24.584149  4616 net.cpp:200] ip2 needs backward computation.
I0428 20:35:24.584152  4616 net.cpp:200] relu1 needs backward computation.
I0428 20:35:24.584156  4616 net.cpp:200] ip1 needs backward computation.
I0428 20:35:24.584158  4616 net.cpp:200] pool1 needs backward computation.
I0428 20:35:24.584162  4616 net.cpp:200] conv1 needs backward computation.
I0428 20:35:24.584166  4616 net.cpp:200] pool0 needs backward computation.
I0428 20:35:24.584168  4616 net.cpp:200] conv0 needs backward computation.
I0428 20:35:24.584172  4616 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:35:24.584177  4616 net.cpp:202] mnist does not need backward computation.
I0428 20:35:24.584179  4616 net.cpp:244] This network produces output accuracy
I0428 20:35:24.584182  4616 net.cpp:244] This network produces output loss
I0428 20:35:24.584197  4616 net.cpp:257] Network initialization done.
I0428 20:35:24.584246  4616 solver.cpp:56] Solver scaffolding done.
I0428 20:35:24.584614  4616 caffe.cpp:248] Starting Optimization
I0428 20:35:24.584621  4616 solver.cpp:273] Solving LeNet
I0428 20:35:24.584625  4616 solver.cpp:274] Learning Rate Policy: inv
I0428 20:35:24.584839  4616 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:35:24.695567  4623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:24.698673  4616 solver.cpp:398]     Test net output #0: accuracy = 0.0912
I0428 20:35:24.698712  4616 solver.cpp:398]     Test net output #1: loss = 2.31359 (* 1 = 2.31359 loss)
I0428 20:35:24.704718  4616 solver.cpp:219] Iteration 0 (-6.76827e-43 iter/s, 0.12006s/100 iters), loss = 2.31263
I0428 20:35:24.704759  4616 solver.cpp:238]     Train net output #0: loss = 2.31263 (* 1 = 2.31263 loss)
I0428 20:35:24.704771  4616 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:35:24.936117  4616 solver.cpp:219] Iteration 100 (432.268 iter/s, 0.231338s/100 iters), loss = 0.670316
I0428 20:35:24.936159  4616 solver.cpp:238]     Train net output #0: loss = 0.670316 (* 1 = 0.670316 loss)
I0428 20:35:24.936167  4616 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:35:25.168987  4616 solver.cpp:219] Iteration 200 (429.532 iter/s, 0.232812s/100 iters), loss = 0.675343
I0428 20:35:25.169015  4616 solver.cpp:238]     Train net output #0: loss = 0.675343 (* 1 = 0.675343 loss)
I0428 20:35:25.169021  4616 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:35:25.399056  4616 solver.cpp:219] Iteration 300 (434.735 iter/s, 0.230025s/100 iters), loss = 0.628159
I0428 20:35:25.399098  4616 solver.cpp:238]     Train net output #0: loss = 0.628159 (* 1 = 0.628159 loss)
I0428 20:35:25.399106  4616 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:35:25.632752  4616 solver.cpp:219] Iteration 400 (428.009 iter/s, 0.23364s/100 iters), loss = 0.789282
I0428 20:35:25.632779  4616 solver.cpp:238]     Train net output #0: loss = 0.789282 (* 1 = 0.789282 loss)
I0428 20:35:25.632786  4616 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:35:25.863023  4616 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:35:25.970746  4623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:25.974580  4616 solver.cpp:398]     Test net output #0: accuracy = 0.8561
I0428 20:35:25.974616  4616 solver.cpp:398]     Test net output #1: loss = 0.58098 (* 1 = 0.58098 loss)
I0428 20:35:25.976799  4616 solver.cpp:219] Iteration 500 (290.699 iter/s, 0.343998s/100 iters), loss = 0.530381
I0428 20:35:25.976845  4616 solver.cpp:238]     Train net output #0: loss = 0.530382 (* 1 = 0.530382 loss)
I0428 20:35:25.976866  4616 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:35:26.214439  4616 solver.cpp:219] Iteration 600 (420.883 iter/s, 0.237596s/100 iters), loss = 0.538125
I0428 20:35:26.214467  4616 solver.cpp:238]     Train net output #0: loss = 0.538125 (* 1 = 0.538125 loss)
I0428 20:35:26.214473  4616 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:35:26.453353  4616 solver.cpp:219] Iteration 700 (418.637 iter/s, 0.238871s/100 iters), loss = 0.57777
I0428 20:35:26.453395  4616 solver.cpp:238]     Train net output #0: loss = 0.57777 (* 1 = 0.57777 loss)
I0428 20:35:26.453402  4616 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:35:26.691678  4616 solver.cpp:219] Iteration 800 (419.7 iter/s, 0.238265s/100 iters), loss = 0.737961
I0428 20:35:26.691720  4616 solver.cpp:238]     Train net output #0: loss = 0.737961 (* 1 = 0.737961 loss)
I0428 20:35:26.691741  4616 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:35:26.932534  4616 solver.cpp:219] Iteration 900 (415.286 iter/s, 0.240798s/100 iters), loss = 0.487609
I0428 20:35:26.932559  4616 solver.cpp:238]     Train net output #0: loss = 0.487609 (* 1 = 0.487609 loss)
I0428 20:35:26.932566  4616 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:35:27.012908  4622 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:27.169350  4616 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:35:27.173631  4616 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:35:27.175597  4616 solver.cpp:311] Iteration 1000, loss = 0.631055
I0428 20:35:27.175612  4616 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:35:27.283556  4623 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:27.286598  4616 solver.cpp:398]     Test net output #0: accuracy = 0.8781
I0428 20:35:27.286617  4616 solver.cpp:398]     Test net output #1: loss = 0.520961 (* 1 = 0.520961 loss)
I0428 20:35:27.286622  4616 solver.cpp:316] Optimization Done.
I0428 20:35:27.286624  4616 caffe.cpp:259] Optimization Done.
