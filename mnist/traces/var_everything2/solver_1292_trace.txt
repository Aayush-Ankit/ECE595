I0428 20:17:20.116559   848 caffe.cpp:218] Using GPUs 0
I0428 20:17:20.153925   848 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:20.663972   848 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1292.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:20.664118   848 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1292.prototxt
I0428 20:17:20.664496   848 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:20.664515   848 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:20.664604   848 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:20.664680   848 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:20.664779   848 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:20.664804   848 net.cpp:86] Creating Layer mnist
I0428 20:17:20.664820   848 net.cpp:382] mnist -> data
I0428 20:17:20.664844   848 net.cpp:382] mnist -> label
I0428 20:17:20.665938   848 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:20.668392   848 net.cpp:124] Setting up mnist
I0428 20:17:20.668431   848 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:20.668438   848 net.cpp:131] Top shape: 64 (64)
I0428 20:17:20.668442   848 net.cpp:139] Memory required for data: 200960
I0428 20:17:20.668449   848 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:20.668467   848 net.cpp:86] Creating Layer conv0
I0428 20:17:20.668473   848 net.cpp:408] conv0 <- data
I0428 20:17:20.668483   848 net.cpp:382] conv0 -> conv0
I0428 20:17:20.949924   848 net.cpp:124] Setting up conv0
I0428 20:17:20.949967   848 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:20.949972   848 net.cpp:139] Memory required for data: 7573760
I0428 20:17:20.950018   848 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:20.950032   848 net.cpp:86] Creating Layer pool0
I0428 20:17:20.950037   848 net.cpp:408] pool0 <- conv0
I0428 20:17:20.950042   848 net.cpp:382] pool0 -> pool0
I0428 20:17:20.950094   848 net.cpp:124] Setting up pool0
I0428 20:17:20.950101   848 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:20.950104   848 net.cpp:139] Memory required for data: 9416960
I0428 20:17:20.950108   848 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:20.950119   848 net.cpp:86] Creating Layer conv1
I0428 20:17:20.950124   848 net.cpp:408] conv1 <- pool0
I0428 20:17:20.950146   848 net.cpp:382] conv1 -> conv1
I0428 20:17:20.953182   848 net.cpp:124] Setting up conv1
I0428 20:17:20.953199   848 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:20.953202   848 net.cpp:139] Memory required for data: 9580800
I0428 20:17:20.953212   848 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:20.953219   848 net.cpp:86] Creating Layer pool1
I0428 20:17:20.953222   848 net.cpp:408] pool1 <- conv1
I0428 20:17:20.953228   848 net.cpp:382] pool1 -> pool1
I0428 20:17:20.953280   848 net.cpp:124] Setting up pool1
I0428 20:17:20.953285   848 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:20.953289   848 net.cpp:139] Memory required for data: 9621760
I0428 20:17:20.953291   848 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:20.953303   848 net.cpp:86] Creating Layer ip1
I0428 20:17:20.953306   848 net.cpp:408] ip1 <- pool1
I0428 20:17:20.953310   848 net.cpp:382] ip1 -> ip1
I0428 20:17:20.953418   848 net.cpp:124] Setting up ip1
I0428 20:17:20.953443   848 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:20.953446   848 net.cpp:139] Memory required for data: 9624320
I0428 20:17:20.953454   848 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:20.953460   848 net.cpp:86] Creating Layer relu1
I0428 20:17:20.953464   848 net.cpp:408] relu1 <- ip1
I0428 20:17:20.953469   848 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:20.953642   848 net.cpp:124] Setting up relu1
I0428 20:17:20.953654   848 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:20.953656   848 net.cpp:139] Memory required for data: 9626880
I0428 20:17:20.953660   848 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:20.953665   848 net.cpp:86] Creating Layer ip2
I0428 20:17:20.953668   848 net.cpp:408] ip2 <- ip1
I0428 20:17:20.953675   848 net.cpp:382] ip2 -> ip2
I0428 20:17:20.953788   848 net.cpp:124] Setting up ip2
I0428 20:17:20.953795   848 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:20.953797   848 net.cpp:139] Memory required for data: 9629440
I0428 20:17:20.953804   848 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:20.953809   848 net.cpp:86] Creating Layer relu2
I0428 20:17:20.953814   848 net.cpp:408] relu2 <- ip2
I0428 20:17:20.953819   848 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:20.954569   848 net.cpp:124] Setting up relu2
I0428 20:17:20.954582   848 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:20.954602   848 net.cpp:139] Memory required for data: 9632000
I0428 20:17:20.954605   848 layer_factory.hpp:77] Creating layer loss
I0428 20:17:20.954612   848 net.cpp:86] Creating Layer loss
I0428 20:17:20.954617   848 net.cpp:408] loss <- ip2
I0428 20:17:20.954622   848 net.cpp:408] loss <- label
I0428 20:17:20.954628   848 net.cpp:382] loss -> loss
I0428 20:17:20.954648   848 layer_factory.hpp:77] Creating layer loss
I0428 20:17:20.954912   848 net.cpp:124] Setting up loss
I0428 20:17:20.954922   848 net.cpp:131] Top shape: (1)
I0428 20:17:20.954926   848 net.cpp:134]     with loss weight 1
I0428 20:17:20.954939   848 net.cpp:139] Memory required for data: 9632004
I0428 20:17:20.954943   848 net.cpp:200] loss needs backward computation.
I0428 20:17:20.954946   848 net.cpp:200] relu2 needs backward computation.
I0428 20:17:20.954951   848 net.cpp:200] ip2 needs backward computation.
I0428 20:17:20.954953   848 net.cpp:200] relu1 needs backward computation.
I0428 20:17:20.954957   848 net.cpp:200] ip1 needs backward computation.
I0428 20:17:20.954969   848 net.cpp:200] pool1 needs backward computation.
I0428 20:17:20.954972   848 net.cpp:200] conv1 needs backward computation.
I0428 20:17:20.954977   848 net.cpp:200] pool0 needs backward computation.
I0428 20:17:20.954978   848 net.cpp:200] conv0 needs backward computation.
I0428 20:17:20.954982   848 net.cpp:202] mnist does not need backward computation.
I0428 20:17:20.954985   848 net.cpp:244] This network produces output loss
I0428 20:17:20.954995   848 net.cpp:257] Network initialization done.
I0428 20:17:20.955299   848 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1292.prototxt
I0428 20:17:20.955325   848 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:20.955407   848 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:20.955487   848 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:20.955531   848 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:20.955543   848 net.cpp:86] Creating Layer mnist
I0428 20:17:20.955549   848 net.cpp:382] mnist -> data
I0428 20:17:20.955574   848 net.cpp:382] mnist -> label
I0428 20:17:20.955689   848 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:20.957795   848 net.cpp:124] Setting up mnist
I0428 20:17:20.957823   848 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:20.957828   848 net.cpp:131] Top shape: 100 (100)
I0428 20:17:20.957846   848 net.cpp:139] Memory required for data: 314000
I0428 20:17:20.957849   848 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:20.957861   848 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:20.957865   848 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:20.957870   848 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:20.957878   848 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:20.957991   848 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:20.958000   848 net.cpp:131] Top shape: 100 (100)
I0428 20:17:20.958020   848 net.cpp:131] Top shape: 100 (100)
I0428 20:17:20.958024   848 net.cpp:139] Memory required for data: 314800
I0428 20:17:20.958026   848 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:20.958036   848 net.cpp:86] Creating Layer conv0
I0428 20:17:20.958041   848 net.cpp:408] conv0 <- data
I0428 20:17:20.958048   848 net.cpp:382] conv0 -> conv0
I0428 20:17:20.959808   848 net.cpp:124] Setting up conv0
I0428 20:17:20.959838   848 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:20.959842   848 net.cpp:139] Memory required for data: 11834800
I0428 20:17:20.959866   848 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:20.959872   848 net.cpp:86] Creating Layer pool0
I0428 20:17:20.959875   848 net.cpp:408] pool0 <- conv0
I0428 20:17:20.959879   848 net.cpp:382] pool0 -> pool0
I0428 20:17:20.959915   848 net.cpp:124] Setting up pool0
I0428 20:17:20.959920   848 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:20.959923   848 net.cpp:139] Memory required for data: 14714800
I0428 20:17:20.959925   848 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:20.959936   848 net.cpp:86] Creating Layer conv1
I0428 20:17:20.959939   848 net.cpp:408] conv1 <- pool0
I0428 20:17:20.959944   848 net.cpp:382] conv1 -> conv1
I0428 20:17:20.961604   848 net.cpp:124] Setting up conv1
I0428 20:17:20.961632   848 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:20.961652   848 net.cpp:139] Memory required for data: 14970800
I0428 20:17:20.961663   848 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:20.961670   848 net.cpp:86] Creating Layer pool1
I0428 20:17:20.961673   848 net.cpp:408] pool1 <- conv1
I0428 20:17:20.961680   848 net.cpp:382] pool1 -> pool1
I0428 20:17:20.961719   848 net.cpp:124] Setting up pool1
I0428 20:17:20.961725   848 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:20.961729   848 net.cpp:139] Memory required for data: 15034800
I0428 20:17:20.961731   848 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:20.961737   848 net.cpp:86] Creating Layer ip1
I0428 20:17:20.961740   848 net.cpp:408] ip1 <- pool1
I0428 20:17:20.961746   848 net.cpp:382] ip1 -> ip1
I0428 20:17:20.961885   848 net.cpp:124] Setting up ip1
I0428 20:17:20.961894   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.961896   848 net.cpp:139] Memory required for data: 15038800
I0428 20:17:20.961905   848 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:20.961910   848 net.cpp:86] Creating Layer relu1
I0428 20:17:20.961912   848 net.cpp:408] relu1 <- ip1
I0428 20:17:20.961923   848 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:20.962096   848 net.cpp:124] Setting up relu1
I0428 20:17:20.962106   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.962110   848 net.cpp:139] Memory required for data: 15042800
I0428 20:17:20.962112   848 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:20.962121   848 net.cpp:86] Creating Layer ip2
I0428 20:17:20.962123   848 net.cpp:408] ip2 <- ip1
I0428 20:17:20.962139   848 net.cpp:382] ip2 -> ip2
I0428 20:17:20.962260   848 net.cpp:124] Setting up ip2
I0428 20:17:20.962266   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.962270   848 net.cpp:139] Memory required for data: 15046800
I0428 20:17:20.962275   848 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:20.962280   848 net.cpp:86] Creating Layer relu2
I0428 20:17:20.962285   848 net.cpp:408] relu2 <- ip2
I0428 20:17:20.962290   848 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:20.962471   848 net.cpp:124] Setting up relu2
I0428 20:17:20.962481   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.962483   848 net.cpp:139] Memory required for data: 15050800
I0428 20:17:20.962486   848 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:20.962491   848 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:20.962494   848 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:20.962502   848 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:20.962532   848 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:20.962599   848 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:20.962628   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.962632   848 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:20.962635   848 net.cpp:139] Memory required for data: 15058800
I0428 20:17:20.962648   848 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:20.962656   848 net.cpp:86] Creating Layer accuracy
I0428 20:17:20.962663   848 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:20.962668   848 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:20.962680   848 net.cpp:382] accuracy -> accuracy
I0428 20:17:20.962687   848 net.cpp:124] Setting up accuracy
I0428 20:17:20.962692   848 net.cpp:131] Top shape: (1)
I0428 20:17:20.962695   848 net.cpp:139] Memory required for data: 15058804
I0428 20:17:20.962698   848 layer_factory.hpp:77] Creating layer loss
I0428 20:17:20.962703   848 net.cpp:86] Creating Layer loss
I0428 20:17:20.962707   848 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:20.962710   848 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:20.962715   848 net.cpp:382] loss -> loss
I0428 20:17:20.962721   848 layer_factory.hpp:77] Creating layer loss
I0428 20:17:20.963018   848 net.cpp:124] Setting up loss
I0428 20:17:20.963042   848 net.cpp:131] Top shape: (1)
I0428 20:17:20.963045   848 net.cpp:134]     with loss weight 1
I0428 20:17:20.963068   848 net.cpp:139] Memory required for data: 15058808
I0428 20:17:20.963070   848 net.cpp:200] loss needs backward computation.
I0428 20:17:20.963073   848 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:20.963078   848 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:20.963080   848 net.cpp:200] relu2 needs backward computation.
I0428 20:17:20.963083   848 net.cpp:200] ip2 needs backward computation.
I0428 20:17:20.963085   848 net.cpp:200] relu1 needs backward computation.
I0428 20:17:20.963088   848 net.cpp:200] ip1 needs backward computation.
I0428 20:17:20.963091   848 net.cpp:200] pool1 needs backward computation.
I0428 20:17:20.963094   848 net.cpp:200] conv1 needs backward computation.
I0428 20:17:20.963098   848 net.cpp:200] pool0 needs backward computation.
I0428 20:17:20.963099   848 net.cpp:200] conv0 needs backward computation.
I0428 20:17:20.963104   848 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:20.963106   848 net.cpp:202] mnist does not need backward computation.
I0428 20:17:20.963109   848 net.cpp:244] This network produces output accuracy
I0428 20:17:20.963112   848 net.cpp:244] This network produces output loss
I0428 20:17:20.963122   848 net.cpp:257] Network initialization done.
I0428 20:17:20.963158   848 solver.cpp:56] Solver scaffolding done.
I0428 20:17:20.963541   848 caffe.cpp:248] Starting Optimization
I0428 20:17:20.963546   848 solver.cpp:273] Solving LeNet
I0428 20:17:20.963548   848 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:20.963717   848 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:20.968634   848 blocking_queue.cpp:49] Waiting for data
I0428 20:17:21.074681   857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:21.075465   848 solver.cpp:398]     Test net output #0: accuracy = 0.0894
I0428 20:17:21.075497   848 solver.cpp:398]     Test net output #1: loss = 2.35077 (* 1 = 2.35077 loss)
I0428 20:17:21.081019   848 solver.cpp:219] Iteration 0 (0 iter/s, 0.117424s/100 iters), loss = 2.33656
I0428 20:17:21.081054   848 solver.cpp:238]     Train net output #0: loss = 2.33656 (* 1 = 2.33656 loss)
I0428 20:17:21.081069   848 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:21.201398   848 solver.cpp:219] Iteration 100 (831.032 iter/s, 0.120332s/100 iters), loss = 0.567584
I0428 20:17:21.201424   848 solver.cpp:238]     Train net output #0: loss = 0.567584 (* 1 = 0.567584 loss)
I0428 20:17:21.201431   848 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:21.324898   848 solver.cpp:219] Iteration 200 (809.956 iter/s, 0.123464s/100 iters), loss = 0.50545
I0428 20:17:21.324937   848 solver.cpp:238]     Train net output #0: loss = 0.50545 (* 1 = 0.50545 loss)
I0428 20:17:21.324944   848 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:21.442184   848 solver.cpp:219] Iteration 300 (852.871 iter/s, 0.117251s/100 iters), loss = 0.449764
I0428 20:17:21.442222   848 solver.cpp:238]     Train net output #0: loss = 0.449764 (* 1 = 0.449764 loss)
I0428 20:17:21.442229   848 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:21.560083   848 solver.cpp:219] Iteration 400 (848.44 iter/s, 0.117863s/100 iters), loss = 0.570347
I0428 20:17:21.560127   848 solver.cpp:238]     Train net output #0: loss = 0.570347 (* 1 = 0.570347 loss)
I0428 20:17:21.560133   848 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:21.676131   848 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:21.756235   857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:21.756966   848 solver.cpp:398]     Test net output #0: accuracy = 0.9344
I0428 20:17:21.757001   848 solver.cpp:398]     Test net output #1: loss = 0.401292 (* 1 = 0.401292 loss)
I0428 20:17:21.758198   848 solver.cpp:219] Iteration 500 (504.869 iter/s, 0.198071s/100 iters), loss = 0.361563
I0428 20:17:21.758234   848 solver.cpp:238]     Train net output #0: loss = 0.361563 (* 1 = 0.361563 loss)
I0428 20:17:21.758256   848 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:21.886818   848 solver.cpp:219] Iteration 600 (777.772 iter/s, 0.128572s/100 iters), loss = 0.262268
I0428 20:17:21.886862   848 solver.cpp:238]     Train net output #0: loss = 0.262268 (* 1 = 0.262268 loss)
I0428 20:17:21.886868   848 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:22.002017   848 solver.cpp:219] Iteration 700 (868.472 iter/s, 0.115145s/100 iters), loss = 0.4236
I0428 20:17:22.002060   848 solver.cpp:238]     Train net output #0: loss = 0.4236 (* 1 = 0.4236 loss)
I0428 20:17:22.002068   848 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:22.117355   848 solver.cpp:219] Iteration 800 (867.416 iter/s, 0.115285s/100 iters), loss = 0.489619
I0428 20:17:22.117383   848 solver.cpp:238]     Train net output #0: loss = 0.489619 (* 1 = 0.489619 loss)
I0428 20:17:22.117388   848 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:22.232466   848 solver.cpp:219] Iteration 900 (869.006 iter/s, 0.115074s/100 iters), loss = 0.407474
I0428 20:17:22.232509   848 solver.cpp:238]     Train net output #0: loss = 0.407474 (* 1 = 0.407474 loss)
I0428 20:17:22.232516   848 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:22.270746   856 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:22.346745   848 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:22.347795   848 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:22.348516   848 solver.cpp:311] Iteration 1000, loss = 0.48277
I0428 20:17:22.348532   848 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:22.445662   857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:22.446364   848 solver.cpp:398]     Test net output #0: accuracy = 0.9597
I0428 20:17:22.446388   848 solver.cpp:398]     Test net output #1: loss = 0.323014 (* 1 = 0.323014 loss)
I0428 20:17:22.446395   848 solver.cpp:316] Optimization Done.
I0428 20:17:22.446399   848 caffe.cpp:259] Optimization Done.
