I0428 20:37:05.410810  4888 caffe.cpp:218] Using GPUs 0
I0428 20:37:05.447125  4888 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:37:05.901494  4888 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1646.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:37:05.901707  4888 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1646.prototxt
I0428 20:37:05.902714  4888 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:37:05.902757  4888 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:37:05.902942  4888 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:37:05.903041  4888 layer_factory.hpp:77] Creating layer mnist
I0428 20:37:05.903182  4888 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:37:05.903226  4888 net.cpp:86] Creating Layer mnist
I0428 20:37:05.903237  4888 net.cpp:382] mnist -> data
I0428 20:37:05.903273  4888 net.cpp:382] mnist -> label
I0428 20:37:05.904759  4888 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:37:05.908617  4888 net.cpp:124] Setting up mnist
I0428 20:37:05.908645  4888 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:37:05.908658  4888 net.cpp:131] Top shape: 64 (64)
I0428 20:37:05.908664  4888 net.cpp:139] Memory required for data: 200960
I0428 20:37:05.908676  4888 layer_factory.hpp:77] Creating layer conv0
I0428 20:37:05.908701  4888 net.cpp:86] Creating Layer conv0
I0428 20:37:05.908713  4888 net.cpp:408] conv0 <- data
I0428 20:37:05.908732  4888 net.cpp:382] conv0 -> conv0
I0428 20:37:06.229207  4888 net.cpp:124] Setting up conv0
I0428 20:37:06.229238  4888 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:37:06.229244  4888 net.cpp:139] Memory required for data: 14946560
I0428 20:37:06.229286  4888 layer_factory.hpp:77] Creating layer pool0
I0428 20:37:06.229301  4888 net.cpp:86] Creating Layer pool0
I0428 20:37:06.229306  4888 net.cpp:408] pool0 <- conv0
I0428 20:37:06.229313  4888 net.cpp:382] pool0 -> pool0
I0428 20:37:06.229369  4888 net.cpp:124] Setting up pool0
I0428 20:37:06.229383  4888 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:37:06.229387  4888 net.cpp:139] Memory required for data: 18632960
I0428 20:37:06.229391  4888 layer_factory.hpp:77] Creating layer conv1
I0428 20:37:06.229404  4888 net.cpp:86] Creating Layer conv1
I0428 20:37:06.229408  4888 net.cpp:408] conv1 <- pool0
I0428 20:37:06.229413  4888 net.cpp:382] conv1 -> conv1
I0428 20:37:06.234230  4888 net.cpp:124] Setting up conv1
I0428 20:37:06.234247  4888 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:37:06.234252  4888 net.cpp:139] Memory required for data: 20271360
I0428 20:37:06.234262  4888 layer_factory.hpp:77] Creating layer pool1
I0428 20:37:06.234272  4888 net.cpp:86] Creating Layer pool1
I0428 20:37:06.234277  4888 net.cpp:408] pool1 <- conv1
I0428 20:37:06.234283  4888 net.cpp:382] pool1 -> pool1
I0428 20:37:06.234329  4888 net.cpp:124] Setting up pool1
I0428 20:37:06.234338  4888 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:37:06.234341  4888 net.cpp:139] Memory required for data: 20680960
I0428 20:37:06.234345  4888 layer_factory.hpp:77] Creating layer ip1
I0428 20:37:06.234355  4888 net.cpp:86] Creating Layer ip1
I0428 20:37:06.234364  4888 net.cpp:408] ip1 <- pool1
I0428 20:37:06.234369  4888 net.cpp:382] ip1 -> ip1
I0428 20:37:06.234760  4888 net.cpp:124] Setting up ip1
I0428 20:37:06.234769  4888 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:37:06.234772  4888 net.cpp:139] Memory required for data: 20687360
I0428 20:37:06.234781  4888 layer_factory.hpp:77] Creating layer relu1
I0428 20:37:06.234788  4888 net.cpp:86] Creating Layer relu1
I0428 20:37:06.234792  4888 net.cpp:408] relu1 <- ip1
I0428 20:37:06.234798  4888 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:37:06.235002  4888 net.cpp:124] Setting up relu1
I0428 20:37:06.235013  4888 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:37:06.235016  4888 net.cpp:139] Memory required for data: 20693760
I0428 20:37:06.235020  4888 layer_factory.hpp:77] Creating layer ip2
I0428 20:37:06.235029  4888 net.cpp:86] Creating Layer ip2
I0428 20:37:06.235033  4888 net.cpp:408] ip2 <- ip1
I0428 20:37:06.235039  4888 net.cpp:382] ip2 -> ip2
I0428 20:37:06.235159  4888 net.cpp:124] Setting up ip2
I0428 20:37:06.235167  4888 net.cpp:131] Top shape: 64 10 (640)
I0428 20:37:06.235172  4888 net.cpp:139] Memory required for data: 20696320
I0428 20:37:06.235177  4888 layer_factory.hpp:77] Creating layer relu2
I0428 20:37:06.235184  4888 net.cpp:86] Creating Layer relu2
I0428 20:37:06.235188  4888 net.cpp:408] relu2 <- ip2
I0428 20:37:06.235194  4888 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:37:06.236043  4888 net.cpp:124] Setting up relu2
I0428 20:37:06.236058  4888 net.cpp:131] Top shape: 64 10 (640)
I0428 20:37:06.236063  4888 net.cpp:139] Memory required for data: 20698880
I0428 20:37:06.236066  4888 layer_factory.hpp:77] Creating layer loss
I0428 20:37:06.236075  4888 net.cpp:86] Creating Layer loss
I0428 20:37:06.236079  4888 net.cpp:408] loss <- ip2
I0428 20:37:06.236085  4888 net.cpp:408] loss <- label
I0428 20:37:06.236091  4888 net.cpp:382] loss -> loss
I0428 20:37:06.236114  4888 layer_factory.hpp:77] Creating layer loss
I0428 20:37:06.236409  4888 net.cpp:124] Setting up loss
I0428 20:37:06.236423  4888 net.cpp:131] Top shape: (1)
I0428 20:37:06.236426  4888 net.cpp:134]     with loss weight 1
I0428 20:37:06.236448  4888 net.cpp:139] Memory required for data: 20698884
I0428 20:37:06.236451  4888 net.cpp:200] loss needs backward computation.
I0428 20:37:06.236455  4888 net.cpp:200] relu2 needs backward computation.
I0428 20:37:06.236459  4888 net.cpp:200] ip2 needs backward computation.
I0428 20:37:06.236462  4888 net.cpp:200] relu1 needs backward computation.
I0428 20:37:06.236465  4888 net.cpp:200] ip1 needs backward computation.
I0428 20:37:06.236481  4888 net.cpp:200] pool1 needs backward computation.
I0428 20:37:06.236485  4888 net.cpp:200] conv1 needs backward computation.
I0428 20:37:06.236488  4888 net.cpp:200] pool0 needs backward computation.
I0428 20:37:06.236492  4888 net.cpp:200] conv0 needs backward computation.
I0428 20:37:06.236500  4888 net.cpp:202] mnist does not need backward computation.
I0428 20:37:06.236502  4888 net.cpp:244] This network produces output loss
I0428 20:37:06.236512  4888 net.cpp:257] Network initialization done.
I0428 20:37:06.236876  4888 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1646.prototxt
I0428 20:37:06.236905  4888 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:37:06.237017  4888 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:37:06.237095  4888 layer_factory.hpp:77] Creating layer mnist
I0428 20:37:06.237146  4888 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:37:06.237161  4888 net.cpp:86] Creating Layer mnist
I0428 20:37:06.237169  4888 net.cpp:382] mnist -> data
I0428 20:37:06.237179  4888 net.cpp:382] mnist -> label
I0428 20:37:06.237284  4888 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:37:06.239480  4888 net.cpp:124] Setting up mnist
I0428 20:37:06.239497  4888 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:37:06.239503  4888 net.cpp:131] Top shape: 100 (100)
I0428 20:37:06.239506  4888 net.cpp:139] Memory required for data: 314000
I0428 20:37:06.239511  4888 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:37:06.239522  4888 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:37:06.239526  4888 net.cpp:408] label_mnist_1_split <- label
I0428 20:37:06.239538  4888 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:37:06.239547  4888 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:37:06.239611  4888 net.cpp:124] Setting up label_mnist_1_split
I0428 20:37:06.239619  4888 net.cpp:131] Top shape: 100 (100)
I0428 20:37:06.239622  4888 net.cpp:131] Top shape: 100 (100)
I0428 20:37:06.239626  4888 net.cpp:139] Memory required for data: 314800
I0428 20:37:06.239629  4888 layer_factory.hpp:77] Creating layer conv0
I0428 20:37:06.239642  4888 net.cpp:86] Creating Layer conv0
I0428 20:37:06.239646  4888 net.cpp:408] conv0 <- data
I0428 20:37:06.239652  4888 net.cpp:382] conv0 -> conv0
I0428 20:37:06.241611  4888 net.cpp:124] Setting up conv0
I0428 20:37:06.241628  4888 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:37:06.241633  4888 net.cpp:139] Memory required for data: 23354800
I0428 20:37:06.241644  4888 layer_factory.hpp:77] Creating layer pool0
I0428 20:37:06.241653  4888 net.cpp:86] Creating Layer pool0
I0428 20:37:06.241657  4888 net.cpp:408] pool0 <- conv0
I0428 20:37:06.241663  4888 net.cpp:382] pool0 -> pool0
I0428 20:37:06.241708  4888 net.cpp:124] Setting up pool0
I0428 20:37:06.241715  4888 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:37:06.241719  4888 net.cpp:139] Memory required for data: 29114800
I0428 20:37:06.241722  4888 layer_factory.hpp:77] Creating layer conv1
I0428 20:37:06.241735  4888 net.cpp:86] Creating Layer conv1
I0428 20:37:06.241740  4888 net.cpp:408] conv1 <- pool0
I0428 20:37:06.241749  4888 net.cpp:382] conv1 -> conv1
I0428 20:37:06.245090  4888 net.cpp:124] Setting up conv1
I0428 20:37:06.245106  4888 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:37:06.245110  4888 net.cpp:139] Memory required for data: 31674800
I0428 20:37:06.245126  4888 layer_factory.hpp:77] Creating layer pool1
I0428 20:37:06.245133  4888 net.cpp:86] Creating Layer pool1
I0428 20:37:06.245137  4888 net.cpp:408] pool1 <- conv1
I0428 20:37:06.245146  4888 net.cpp:382] pool1 -> pool1
I0428 20:37:06.245187  4888 net.cpp:124] Setting up pool1
I0428 20:37:06.245196  4888 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:37:06.245200  4888 net.cpp:139] Memory required for data: 32314800
I0428 20:37:06.245204  4888 layer_factory.hpp:77] Creating layer ip1
I0428 20:37:06.245213  4888 net.cpp:86] Creating Layer ip1
I0428 20:37:06.245216  4888 net.cpp:408] ip1 <- pool1
I0428 20:37:06.245223  4888 net.cpp:382] ip1 -> ip1
I0428 20:37:06.245625  4888 net.cpp:124] Setting up ip1
I0428 20:37:06.245635  4888 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:37:06.245640  4888 net.cpp:139] Memory required for data: 32324800
I0428 20:37:06.245647  4888 layer_factory.hpp:77] Creating layer relu1
I0428 20:37:06.245656  4888 net.cpp:86] Creating Layer relu1
I0428 20:37:06.245661  4888 net.cpp:408] relu1 <- ip1
I0428 20:37:06.245666  4888 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:37:06.245862  4888 net.cpp:124] Setting up relu1
I0428 20:37:06.245872  4888 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:37:06.245877  4888 net.cpp:139] Memory required for data: 32334800
I0428 20:37:06.245879  4888 layer_factory.hpp:77] Creating layer ip2
I0428 20:37:06.245889  4888 net.cpp:86] Creating Layer ip2
I0428 20:37:06.245896  4888 net.cpp:408] ip2 <- ip1
I0428 20:37:06.245903  4888 net.cpp:382] ip2 -> ip2
I0428 20:37:06.246047  4888 net.cpp:124] Setting up ip2
I0428 20:37:06.246057  4888 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:06.246059  4888 net.cpp:139] Memory required for data: 32338800
I0428 20:37:06.246067  4888 layer_factory.hpp:77] Creating layer relu2
I0428 20:37:06.246071  4888 net.cpp:86] Creating Layer relu2
I0428 20:37:06.246075  4888 net.cpp:408] relu2 <- ip2
I0428 20:37:06.246080  4888 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:37:06.246310  4888 net.cpp:124] Setting up relu2
I0428 20:37:06.246335  4888 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:06.246340  4888 net.cpp:139] Memory required for data: 32342800
I0428 20:37:06.246343  4888 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:37:06.246351  4888 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:37:06.246353  4888 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:37:06.246361  4888 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:37:06.246379  4888 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:37:06.246423  4888 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:37:06.246430  4888 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:06.246434  4888 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:37:06.246438  4888 net.cpp:139] Memory required for data: 32350800
I0428 20:37:06.246441  4888 layer_factory.hpp:77] Creating layer accuracy
I0428 20:37:06.246448  4888 net.cpp:86] Creating Layer accuracy
I0428 20:37:06.246453  4888 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:37:06.246457  4888 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:37:06.246462  4888 net.cpp:382] accuracy -> accuracy
I0428 20:37:06.246470  4888 net.cpp:124] Setting up accuracy
I0428 20:37:06.246477  4888 net.cpp:131] Top shape: (1)
I0428 20:37:06.246481  4888 net.cpp:139] Memory required for data: 32350804
I0428 20:37:06.246484  4888 layer_factory.hpp:77] Creating layer loss
I0428 20:37:06.246490  4888 net.cpp:86] Creating Layer loss
I0428 20:37:06.246495  4888 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:37:06.246500  4888 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:37:06.246503  4888 net.cpp:382] loss -> loss
I0428 20:37:06.246510  4888 layer_factory.hpp:77] Creating layer loss
I0428 20:37:06.246798  4888 net.cpp:124] Setting up loss
I0428 20:37:06.246809  4888 net.cpp:131] Top shape: (1)
I0428 20:37:06.246812  4888 net.cpp:134]     with loss weight 1
I0428 20:37:06.246819  4888 net.cpp:139] Memory required for data: 32350808
I0428 20:37:06.246824  4888 net.cpp:200] loss needs backward computation.
I0428 20:37:06.246827  4888 net.cpp:202] accuracy does not need backward computation.
I0428 20:37:06.246834  4888 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:37:06.246836  4888 net.cpp:200] relu2 needs backward computation.
I0428 20:37:06.246840  4888 net.cpp:200] ip2 needs backward computation.
I0428 20:37:06.246843  4888 net.cpp:200] relu1 needs backward computation.
I0428 20:37:06.246848  4888 net.cpp:200] ip1 needs backward computation.
I0428 20:37:06.246851  4888 net.cpp:200] pool1 needs backward computation.
I0428 20:37:06.246855  4888 net.cpp:200] conv1 needs backward computation.
I0428 20:37:06.246861  4888 net.cpp:200] pool0 needs backward computation.
I0428 20:37:06.246865  4888 net.cpp:200] conv0 needs backward computation.
I0428 20:37:06.246870  4888 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:37:06.246873  4888 net.cpp:202] mnist does not need backward computation.
I0428 20:37:06.246877  4888 net.cpp:244] This network produces output accuracy
I0428 20:37:06.246881  4888 net.cpp:244] This network produces output loss
I0428 20:37:06.246892  4888 net.cpp:257] Network initialization done.
I0428 20:37:06.246937  4888 solver.cpp:56] Solver scaffolding done.
I0428 20:37:06.247289  4888 caffe.cpp:248] Starting Optimization
I0428 20:37:06.247297  4888 solver.cpp:273] Solving LeNet
I0428 20:37:06.247299  4888 solver.cpp:274] Learning Rate Policy: inv
I0428 20:37:06.248157  4888 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:37:06.380321  4895 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:06.385087  4888 solver.cpp:398]     Test net output #0: accuracy = 0.1141
I0428 20:37:06.385114  4888 solver.cpp:398]     Test net output #1: loss = 2.307 (* 1 = 2.307 loss)
I0428 20:37:06.392385  4888 solver.cpp:219] Iteration 0 (-6.5426e-31 iter/s, 0.145049s/100 iters), loss = 2.32776
I0428 20:37:06.392417  4888 solver.cpp:238]     Train net output #0: loss = 2.32776 (* 1 = 2.32776 loss)
I0428 20:37:06.392432  4888 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:37:06.667554  4888 solver.cpp:219] Iteration 100 (363.487 iter/s, 0.275113s/100 iters), loss = 0.728659
I0428 20:37:06.667601  4888 solver.cpp:238]     Train net output #0: loss = 0.728659 (* 1 = 0.728659 loss)
I0428 20:37:06.667618  4888 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:37:06.941793  4888 solver.cpp:219] Iteration 200 (364.735 iter/s, 0.274172s/100 iters), loss = 0.628502
I0428 20:37:06.941864  4888 solver.cpp:238]     Train net output #0: loss = 0.628502 (* 1 = 0.628502 loss)
I0428 20:37:06.941877  4888 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:37:07.227022  4888 solver.cpp:219] Iteration 300 (350.702 iter/s, 0.285142s/100 iters), loss = 0.175411
I0428 20:37:07.227072  4888 solver.cpp:238]     Train net output #0: loss = 0.175411 (* 1 = 0.175411 loss)
I0428 20:37:07.227084  4888 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:37:07.510957  4888 solver.cpp:219] Iteration 400 (352.277 iter/s, 0.283867s/100 iters), loss = 0.123163
I0428 20:37:07.511003  4888 solver.cpp:238]     Train net output #0: loss = 0.123163 (* 1 = 0.123163 loss)
I0428 20:37:07.511014  4888 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:37:07.791587  4888 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:37:07.921887  4895 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:07.925101  4888 solver.cpp:398]     Test net output #0: accuracy = 0.9719
I0428 20:37:07.925130  4888 solver.cpp:398]     Test net output #1: loss = 0.0904705 (* 1 = 0.0904705 loss)
I0428 20:37:07.927821  4888 solver.cpp:219] Iteration 500 (239.926 iter/s, 0.416796s/100 iters), loss = 0.0602597
I0428 20:37:07.927850  4888 solver.cpp:238]     Train net output #0: loss = 0.0602597 (* 1 = 0.0602597 loss)
I0428 20:37:07.927861  4888 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:37:08.211788  4888 solver.cpp:219] Iteration 600 (352.215 iter/s, 0.283917s/100 iters), loss = 0.102899
I0428 20:37:08.211827  4888 solver.cpp:238]     Train net output #0: loss = 0.102899 (* 1 = 0.102899 loss)
I0428 20:37:08.211838  4888 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:37:08.502315  4888 solver.cpp:219] Iteration 700 (344.272 iter/s, 0.290468s/100 iters), loss = 0.152205
I0428 20:37:08.502372  4888 solver.cpp:238]     Train net output #0: loss = 0.152205 (* 1 = 0.152205 loss)
I0428 20:37:08.502385  4888 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:37:08.789541  4888 solver.cpp:219] Iteration 800 (348.244 iter/s, 0.287155s/100 iters), loss = 0.226633
I0428 20:37:08.789589  4888 solver.cpp:238]     Train net output #0: loss = 0.226634 (* 1 = 0.226634 loss)
I0428 20:37:08.789602  4888 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:37:09.065438  4888 solver.cpp:219] Iteration 900 (362.538 iter/s, 0.275833s/100 iters), loss = 0.134111
I0428 20:37:09.065482  4888 solver.cpp:238]     Train net output #0: loss = 0.134111 (* 1 = 0.134111 loss)
I0428 20:37:09.065490  4888 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:37:09.157068  4894 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:09.339844  4888 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:37:09.346179  4888 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:37:09.349762  4888 solver.cpp:311] Iteration 1000, loss = 0.0869457
I0428 20:37:09.349783  4888 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:37:09.476291  4895 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:09.479897  4888 solver.cpp:398]     Test net output #0: accuracy = 0.9792
I0428 20:37:09.479923  4888 solver.cpp:398]     Test net output #1: loss = 0.0665839 (* 1 = 0.0665839 loss)
I0428 20:37:09.479929  4888 solver.cpp:316] Optimization Done.
I0428 20:37:09.479933  4888 caffe.cpp:259] Optimization Done.
