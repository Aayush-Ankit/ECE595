I0428 20:36:36.289855  4822 caffe.cpp:218] Using GPUs 0
I0428 20:36:36.327342  4822 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:36.835597  4822 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1639.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:36.835722  4822 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1639.prototxt
I0428 20:36:36.836020  4822 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:36.836035  4822 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:36.836104  4822 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:36.836163  4822 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:36.836251  4822 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:36.836271  4822 net.cpp:86] Creating Layer mnist
I0428 20:36:36.836277  4822 net.cpp:382] mnist -> data
I0428 20:36:36.836295  4822 net.cpp:382] mnist -> label
I0428 20:36:36.837247  4822 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:36.839370  4822 net.cpp:124] Setting up mnist
I0428 20:36:36.839385  4822 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:36.839390  4822 net.cpp:131] Top shape: 64 (64)
I0428 20:36:36.839393  4822 net.cpp:139] Memory required for data: 200960
I0428 20:36:36.839399  4822 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:36.839413  4822 net.cpp:86] Creating Layer conv0
I0428 20:36:36.839418  4822 net.cpp:408] conv0 <- data
I0428 20:36:36.839429  4822 net.cpp:382] conv0 -> conv0
I0428 20:36:37.074913  4822 net.cpp:124] Setting up conv0
I0428 20:36:37.074955  4822 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:37.074959  4822 net.cpp:139] Memory required for data: 14946560
I0428 20:36:37.074973  4822 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:37.074986  4822 net.cpp:86] Creating Layer pool0
I0428 20:36:37.074990  4822 net.cpp:408] pool0 <- conv0
I0428 20:36:37.074995  4822 net.cpp:382] pool0 -> pool0
I0428 20:36:37.075054  4822 net.cpp:124] Setting up pool0
I0428 20:36:37.075059  4822 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:37.075080  4822 net.cpp:139] Memory required for data: 18632960
I0428 20:36:37.075083  4822 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:37.075094  4822 net.cpp:86] Creating Layer conv1
I0428 20:36:37.075098  4822 net.cpp:408] conv1 <- pool0
I0428 20:36:37.075103  4822 net.cpp:382] conv1 -> conv1
I0428 20:36:37.079246  4822 net.cpp:124] Setting up conv1
I0428 20:36:37.079277  4822 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:37.079280  4822 net.cpp:139] Memory required for data: 20271360
I0428 20:36:37.079288  4822 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:37.079298  4822 net.cpp:86] Creating Layer pool1
I0428 20:36:37.079300  4822 net.cpp:408] pool1 <- conv1
I0428 20:36:37.079305  4822 net.cpp:382] pool1 -> pool1
I0428 20:36:37.079355  4822 net.cpp:124] Setting up pool1
I0428 20:36:37.079361  4822 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:37.079365  4822 net.cpp:139] Memory required for data: 20680960
I0428 20:36:37.079367  4822 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:37.079373  4822 net.cpp:86] Creating Layer ip1
I0428 20:36:37.079377  4822 net.cpp:408] ip1 <- pool1
I0428 20:36:37.079381  4822 net.cpp:382] ip1 -> ip1
I0428 20:36:37.080402  4822 net.cpp:124] Setting up ip1
I0428 20:36:37.080415  4822 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:37.080435  4822 net.cpp:139] Memory required for data: 20683520
I0428 20:36:37.080443  4822 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:37.080449  4822 net.cpp:86] Creating Layer relu1
I0428 20:36:37.080453  4822 net.cpp:408] relu1 <- ip1
I0428 20:36:37.080458  4822 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:37.080631  4822 net.cpp:124] Setting up relu1
I0428 20:36:37.080641  4822 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:37.080659  4822 net.cpp:139] Memory required for data: 20686080
I0428 20:36:37.080662  4822 layer_factory.hpp:77] Creating layer loss
I0428 20:36:37.080668  4822 net.cpp:86] Creating Layer loss
I0428 20:36:37.080672  4822 net.cpp:408] loss <- ip1
I0428 20:36:37.080675  4822 net.cpp:408] loss <- label
I0428 20:36:37.080680  4822 net.cpp:382] loss -> loss
I0428 20:36:37.080713  4822 layer_factory.hpp:77] Creating layer loss
I0428 20:36:37.081600  4822 net.cpp:124] Setting up loss
I0428 20:36:37.081629  4822 net.cpp:131] Top shape: (1)
I0428 20:36:37.081634  4822 net.cpp:134]     with loss weight 1
I0428 20:36:37.081663  4822 net.cpp:139] Memory required for data: 20686084
I0428 20:36:37.081667  4822 net.cpp:200] loss needs backward computation.
I0428 20:36:37.081671  4822 net.cpp:200] relu1 needs backward computation.
I0428 20:36:37.081674  4822 net.cpp:200] ip1 needs backward computation.
I0428 20:36:37.081677  4822 net.cpp:200] pool1 needs backward computation.
I0428 20:36:37.081681  4822 net.cpp:200] conv1 needs backward computation.
I0428 20:36:37.081683  4822 net.cpp:200] pool0 needs backward computation.
I0428 20:36:37.081686  4822 net.cpp:200] conv0 needs backward computation.
I0428 20:36:37.081689  4822 net.cpp:202] mnist does not need backward computation.
I0428 20:36:37.081692  4822 net.cpp:244] This network produces output loss
I0428 20:36:37.081701  4822 net.cpp:257] Network initialization done.
I0428 20:36:37.081969  4822 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1639.prototxt
I0428 20:36:37.081992  4822 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:37.082065  4822 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:37.082134  4822 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:37.082190  4822 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:37.082203  4822 net.cpp:86] Creating Layer mnist
I0428 20:36:37.082207  4822 net.cpp:382] mnist -> data
I0428 20:36:37.082216  4822 net.cpp:382] mnist -> label
I0428 20:36:37.082310  4822 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:37.084316  4822 net.cpp:124] Setting up mnist
I0428 20:36:37.084344  4822 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:37.084349  4822 net.cpp:131] Top shape: 100 (100)
I0428 20:36:37.084353  4822 net.cpp:139] Memory required for data: 314000
I0428 20:36:37.084357  4822 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:37.084396  4822 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:37.084400  4822 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:37.084406  4822 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:37.084413  4822 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:37.084480  4822 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:37.084484  4822 net.cpp:131] Top shape: 100 (100)
I0428 20:36:37.084489  4822 net.cpp:131] Top shape: 100 (100)
I0428 20:36:37.084491  4822 net.cpp:139] Memory required for data: 314800
I0428 20:36:37.084494  4822 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:37.084502  4822 net.cpp:86] Creating Layer conv0
I0428 20:36:37.084506  4822 net.cpp:408] conv0 <- data
I0428 20:36:37.084511  4822 net.cpp:382] conv0 -> conv0
I0428 20:36:37.085481  4822 net.cpp:124] Setting up conv0
I0428 20:36:37.085494  4822 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:37.085497  4822 net.cpp:139] Memory required for data: 23354800
I0428 20:36:37.085505  4822 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:37.085530  4822 net.cpp:86] Creating Layer pool0
I0428 20:36:37.085535  4822 net.cpp:408] pool0 <- conv0
I0428 20:36:37.085538  4822 net.cpp:382] pool0 -> pool0
I0428 20:36:37.085577  4822 net.cpp:124] Setting up pool0
I0428 20:36:37.085582  4822 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:37.085584  4822 net.cpp:139] Memory required for data: 29114800
I0428 20:36:37.085587  4822 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:37.085595  4822 net.cpp:86] Creating Layer conv1
I0428 20:36:37.085598  4822 net.cpp:408] conv1 <- pool0
I0428 20:36:37.085615  4822 net.cpp:382] conv1 -> conv1
I0428 20:36:37.088753  4822 net.cpp:124] Setting up conv1
I0428 20:36:37.088766  4822 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:37.088771  4822 net.cpp:139] Memory required for data: 31674800
I0428 20:36:37.088779  4822 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:37.088835  4822 net.cpp:86] Creating Layer pool1
I0428 20:36:37.088840  4822 net.cpp:408] pool1 <- conv1
I0428 20:36:37.088847  4822 net.cpp:382] pool1 -> pool1
I0428 20:36:37.088933  4822 net.cpp:124] Setting up pool1
I0428 20:36:37.088939  4822 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:37.088943  4822 net.cpp:139] Memory required for data: 32314800
I0428 20:36:37.088945  4822 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:37.088953  4822 net.cpp:86] Creating Layer ip1
I0428 20:36:37.088956  4822 net.cpp:408] ip1 <- pool1
I0428 20:36:37.088963  4822 net.cpp:382] ip1 -> ip1
I0428 20:36:37.089164  4822 net.cpp:124] Setting up ip1
I0428 20:36:37.089172  4822 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:37.089176  4822 net.cpp:139] Memory required for data: 32318800
I0428 20:36:37.089191  4822 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:37.089198  4822 net.cpp:86] Creating Layer relu1
I0428 20:36:37.089222  4822 net.cpp:408] relu1 <- ip1
I0428 20:36:37.089242  4822 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:37.090047  4822 net.cpp:124] Setting up relu1
I0428 20:36:37.090065  4822 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:37.090068  4822 net.cpp:139] Memory required for data: 32322800
I0428 20:36:37.090071  4822 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:36:37.090080  4822 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:36:37.090083  4822 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:36:37.090088  4822 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:36:37.090095  4822 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:36:37.090155  4822 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:36:37.090180  4822 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:37.090184  4822 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:37.090186  4822 net.cpp:139] Memory required for data: 32330800
I0428 20:36:37.090189  4822 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:37.090195  4822 net.cpp:86] Creating Layer accuracy
I0428 20:36:37.090198  4822 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:36:37.090203  4822 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:37.090206  4822 net.cpp:382] accuracy -> accuracy
I0428 20:36:37.090214  4822 net.cpp:124] Setting up accuracy
I0428 20:36:37.090216  4822 net.cpp:131] Top shape: (1)
I0428 20:36:37.090219  4822 net.cpp:139] Memory required for data: 32330804
I0428 20:36:37.090222  4822 layer_factory.hpp:77] Creating layer loss
I0428 20:36:37.090226  4822 net.cpp:86] Creating Layer loss
I0428 20:36:37.090229  4822 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:36:37.090232  4822 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:37.090237  4822 net.cpp:382] loss -> loss
I0428 20:36:37.090243  4822 layer_factory.hpp:77] Creating layer loss
I0428 20:36:37.090474  4822 net.cpp:124] Setting up loss
I0428 20:36:37.090484  4822 net.cpp:131] Top shape: (1)
I0428 20:36:37.090487  4822 net.cpp:134]     with loss weight 1
I0428 20:36:37.090492  4822 net.cpp:139] Memory required for data: 32330808
I0428 20:36:37.090497  4822 net.cpp:200] loss needs backward computation.
I0428 20:36:37.090499  4822 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:37.090503  4822 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:36:37.090514  4822 net.cpp:200] relu1 needs backward computation.
I0428 20:36:37.090517  4822 net.cpp:200] ip1 needs backward computation.
I0428 20:36:37.090520  4822 net.cpp:200] pool1 needs backward computation.
I0428 20:36:37.090523  4822 net.cpp:200] conv1 needs backward computation.
I0428 20:36:37.090526  4822 net.cpp:200] pool0 needs backward computation.
I0428 20:36:37.090529  4822 net.cpp:200] conv0 needs backward computation.
I0428 20:36:37.090533  4822 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:37.090536  4822 net.cpp:202] mnist does not need backward computation.
I0428 20:36:37.090538  4822 net.cpp:244] This network produces output accuracy
I0428 20:36:37.090543  4822 net.cpp:244] This network produces output loss
I0428 20:36:37.090561  4822 net.cpp:257] Network initialization done.
I0428 20:36:37.090595  4822 solver.cpp:56] Solver scaffolding done.
I0428 20:36:37.090803  4822 caffe.cpp:248] Starting Optimization
I0428 20:36:37.090811  4822 solver.cpp:273] Solving LeNet
I0428 20:36:37.090813  4822 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:37.091620  4822 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:37.212651  4829 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:37.215677  4822 solver.cpp:398]     Test net output #0: accuracy = 0.1054
I0428 20:36:37.215695  4822 solver.cpp:398]     Test net output #1: loss = 2.34955 (* 1 = 2.34955 loss)
I0428 20:36:37.220805  4822 solver.cpp:219] Iteration 0 (0 iter/s, 0.129957s/100 iters), loss = 2.41152
I0428 20:36:37.220852  4822 solver.cpp:238]     Train net output #0: loss = 2.41152 (* 1 = 2.41152 loss)
I0428 20:36:37.220896  4822 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:37.467545  4822 solver.cpp:219] Iteration 100 (405.396 iter/s, 0.246672s/100 iters), loss = 0.340581
I0428 20:36:37.467576  4822 solver.cpp:238]     Train net output #0: loss = 0.340581 (* 1 = 0.340581 loss)
I0428 20:36:37.467583  4822 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:37.719364  4822 solver.cpp:219] Iteration 200 (397.193 iter/s, 0.251767s/100 iters), loss = 0.11489
I0428 20:36:37.719424  4822 solver.cpp:238]     Train net output #0: loss = 0.11489 (* 1 = 0.11489 loss)
I0428 20:36:37.719445  4822 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:37.975863  4822 solver.cpp:219] Iteration 300 (389.976 iter/s, 0.256426s/100 iters), loss = 0.139425
I0428 20:36:37.975913  4822 solver.cpp:238]     Train net output #0: loss = 0.139425 (* 1 = 0.139425 loss)
I0428 20:36:37.975922  4822 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:38.220666  4822 solver.cpp:219] Iteration 400 (408.598 iter/s, 0.244739s/100 iters), loss = 0.0460057
I0428 20:36:38.220698  4822 solver.cpp:238]     Train net output #0: loss = 0.0460058 (* 1 = 0.0460058 loss)
I0428 20:36:38.220707  4822 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:38.467133  4822 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:38.585790  4829 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:38.590040  4822 solver.cpp:398]     Test net output #0: accuracy = 0.9708
I0428 20:36:38.590067  4822 solver.cpp:398]     Test net output #1: loss = 0.0913509 (* 1 = 0.0913509 loss)
I0428 20:36:38.592387  4822 solver.cpp:219] Iteration 500 (269.059 iter/s, 0.371666s/100 iters), loss = 0.131673
I0428 20:36:38.592414  4822 solver.cpp:238]     Train net output #0: loss = 0.131674 (* 1 = 0.131674 loss)
I0428 20:36:38.592422  4822 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:38.845347  4822 solver.cpp:219] Iteration 600 (395.393 iter/s, 0.252913s/100 iters), loss = 0.0927801
I0428 20:36:38.845386  4822 solver.cpp:238]     Train net output #0: loss = 0.0927801 (* 1 = 0.0927801 loss)
I0428 20:36:38.845396  4822 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:39.100774  4822 solver.cpp:219] Iteration 700 (391.588 iter/s, 0.25537s/100 iters), loss = 0.10759
I0428 20:36:39.100823  4822 solver.cpp:238]     Train net output #0: loss = 0.10759 (* 1 = 0.10759 loss)
I0428 20:36:39.100836  4822 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:39.356955  4822 solver.cpp:219] Iteration 800 (390.441 iter/s, 0.256121s/100 iters), loss = 0.167793
I0428 20:36:39.357000  4822 solver.cpp:238]     Train net output #0: loss = 0.167793 (* 1 = 0.167793 loss)
I0428 20:36:39.357012  4822 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:39.615052  4822 solver.cpp:219] Iteration 900 (387.548 iter/s, 0.258033s/100 iters), loss = 0.176643
I0428 20:36:39.615105  4822 solver.cpp:238]     Train net output #0: loss = 0.176643 (* 1 = 0.176643 loss)
I0428 20:36:39.615118  4822 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:39.699831  4828 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:39.867763  4822 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:39.874603  4822 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:39.878430  4822 solver.cpp:311] Iteration 1000, loss = 0.102528
I0428 20:36:39.878456  4822 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:39.998487  4829 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:40.001682  4822 solver.cpp:398]     Test net output #0: accuracy = 0.9761
I0428 20:36:40.001706  4822 solver.cpp:398]     Test net output #1: loss = 0.0684683 (* 1 = 0.0684683 loss)
I0428 20:36:40.001713  4822 solver.cpp:316] Optimization Done.
I0428 20:36:40.001716  4822 caffe.cpp:259] Optimization Done.
