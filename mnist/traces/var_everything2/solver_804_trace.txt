I0428 19:57:57.192544 28853 caffe.cpp:218] Using GPUs 0
I0428 19:57:57.229521 28853 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:57.680728 28853 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test804.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:57.680896 28853 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test804.prototxt
I0428 19:57:57.681288 28853 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:57.681329 28853 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:57.681419 28853 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:57.681478 28853 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:57.681558 28853 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:57.681576 28853 net.cpp:86] Creating Layer mnist
I0428 19:57:57.681583 28853 net.cpp:382] mnist -> data
I0428 19:57:57.681601 28853 net.cpp:382] mnist -> label
I0428 19:57:57.682615 28853 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:57.684942 28853 net.cpp:124] Setting up mnist
I0428 19:57:57.684957 28853 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:57.684962 28853 net.cpp:131] Top shape: 64 (64)
I0428 19:57:57.684967 28853 net.cpp:139] Memory required for data: 200960
I0428 19:57:57.684973 28853 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:57.684984 28853 net.cpp:86] Creating Layer conv0
I0428 19:57:57.685003 28853 net.cpp:408] conv0 <- data
I0428 19:57:57.685012 28853 net.cpp:382] conv0 -> conv0
I0428 19:57:57.917096 28853 net.cpp:124] Setting up conv0
I0428 19:57:57.917137 28853 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:57.917142 28853 net.cpp:139] Memory required for data: 1675520
I0428 19:57:57.917171 28853 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:57.917183 28853 net.cpp:86] Creating Layer pool0
I0428 19:57:57.917188 28853 net.cpp:408] pool0 <- conv0
I0428 19:57:57.917208 28853 net.cpp:382] pool0 -> pool0
I0428 19:57:57.917253 28853 net.cpp:124] Setting up pool0
I0428 19:57:57.917258 28853 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:57.917261 28853 net.cpp:139] Memory required for data: 2044160
I0428 19:57:57.917264 28853 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:57.917274 28853 net.cpp:86] Creating Layer conv1
I0428 19:57:57.917276 28853 net.cpp:408] conv1 <- pool0
I0428 19:57:57.917281 28853 net.cpp:382] conv1 -> conv1
I0428 19:57:57.920025 28853 net.cpp:124] Setting up conv1
I0428 19:57:57.920039 28853 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:57.920043 28853 net.cpp:139] Memory required for data: 2126080
I0428 19:57:57.920052 28853 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:57.920058 28853 net.cpp:86] Creating Layer pool1
I0428 19:57:57.920061 28853 net.cpp:408] pool1 <- conv1
I0428 19:57:57.920083 28853 net.cpp:382] pool1 -> pool1
I0428 19:57:57.920119 28853 net.cpp:124] Setting up pool1
I0428 19:57:57.920123 28853 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:57.920126 28853 net.cpp:139] Memory required for data: 2146560
I0428 19:57:57.920130 28853 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:57.920136 28853 net.cpp:86] Creating Layer ip1
I0428 19:57:57.920140 28853 net.cpp:408] ip1 <- pool1
I0428 19:57:57.920145 28853 net.cpp:382] ip1 -> ip1
I0428 19:57:57.920260 28853 net.cpp:124] Setting up ip1
I0428 19:57:57.920269 28853 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:57.920271 28853 net.cpp:139] Memory required for data: 2152960
I0428 19:57:57.920277 28853 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:57.920282 28853 net.cpp:86] Creating Layer relu1
I0428 19:57:57.920285 28853 net.cpp:408] relu1 <- ip1
I0428 19:57:57.920289 28853 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:57.920445 28853 net.cpp:124] Setting up relu1
I0428 19:57:57.920454 28853 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:57.920457 28853 net.cpp:139] Memory required for data: 2159360
I0428 19:57:57.920460 28853 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:57.920466 28853 net.cpp:86] Creating Layer ip2
I0428 19:57:57.920469 28853 net.cpp:408] ip2 <- ip1
I0428 19:57:57.920473 28853 net.cpp:382] ip2 -> ip2
I0428 19:57:57.920562 28853 net.cpp:124] Setting up ip2
I0428 19:57:57.920569 28853 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:57.920572 28853 net.cpp:139] Memory required for data: 2165760
I0428 19:57:57.920578 28853 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:57.920583 28853 net.cpp:86] Creating Layer relu2
I0428 19:57:57.920585 28853 net.cpp:408] relu2 <- ip2
I0428 19:57:57.920589 28853 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:57.921500 28853 net.cpp:124] Setting up relu2
I0428 19:57:57.921512 28853 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:57.921516 28853 net.cpp:139] Memory required for data: 2172160
I0428 19:57:57.921520 28853 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:57.921526 28853 net.cpp:86] Creating Layer ip3
I0428 19:57:57.921530 28853 net.cpp:408] ip3 <- ip2
I0428 19:57:57.921535 28853 net.cpp:382] ip3 -> ip3
I0428 19:57:57.921623 28853 net.cpp:124] Setting up ip3
I0428 19:57:57.921630 28853 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:57.921633 28853 net.cpp:139] Memory required for data: 2174720
I0428 19:57:57.921640 28853 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:57.921645 28853 net.cpp:86] Creating Layer relu3
I0428 19:57:57.921648 28853 net.cpp:408] relu3 <- ip3
I0428 19:57:57.921653 28853 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:57.921818 28853 net.cpp:124] Setting up relu3
I0428 19:57:57.921825 28853 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:57.921829 28853 net.cpp:139] Memory required for data: 2177280
I0428 19:57:57.921833 28853 layer_factory.hpp:77] Creating layer loss
I0428 19:57:57.921838 28853 net.cpp:86] Creating Layer loss
I0428 19:57:57.921840 28853 net.cpp:408] loss <- ip3
I0428 19:57:57.921844 28853 net.cpp:408] loss <- label
I0428 19:57:57.921849 28853 net.cpp:382] loss -> loss
I0428 19:57:57.921864 28853 layer_factory.hpp:77] Creating layer loss
I0428 19:57:57.922086 28853 net.cpp:124] Setting up loss
I0428 19:57:57.922096 28853 net.cpp:131] Top shape: (1)
I0428 19:57:57.922098 28853 net.cpp:134]     with loss weight 1
I0428 19:57:57.922112 28853 net.cpp:139] Memory required for data: 2177284
I0428 19:57:57.922116 28853 net.cpp:200] loss needs backward computation.
I0428 19:57:57.922119 28853 net.cpp:200] relu3 needs backward computation.
I0428 19:57:57.922122 28853 net.cpp:200] ip3 needs backward computation.
I0428 19:57:57.922125 28853 net.cpp:200] relu2 needs backward computation.
I0428 19:57:57.922128 28853 net.cpp:200] ip2 needs backward computation.
I0428 19:57:57.922130 28853 net.cpp:200] relu1 needs backward computation.
I0428 19:57:57.922133 28853 net.cpp:200] ip1 needs backward computation.
I0428 19:57:57.922137 28853 net.cpp:200] pool1 needs backward computation.
I0428 19:57:57.922139 28853 net.cpp:200] conv1 needs backward computation.
I0428 19:57:57.922142 28853 net.cpp:200] pool0 needs backward computation.
I0428 19:57:57.922145 28853 net.cpp:200] conv0 needs backward computation.
I0428 19:57:57.922149 28853 net.cpp:202] mnist does not need backward computation.
I0428 19:57:57.922152 28853 net.cpp:244] This network produces output loss
I0428 19:57:57.922160 28853 net.cpp:257] Network initialization done.
I0428 19:57:57.922544 28853 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test804.prototxt
I0428 19:57:57.922572 28853 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:57.922662 28853 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:57.922740 28853 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:57.922813 28853 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:57.922840 28853 net.cpp:86] Creating Layer mnist
I0428 19:57:57.922844 28853 net.cpp:382] mnist -> data
I0428 19:57:57.922852 28853 net.cpp:382] mnist -> label
I0428 19:57:57.922926 28853 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:57.924892 28853 net.cpp:124] Setting up mnist
I0428 19:57:57.924937 28853 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:57.924942 28853 net.cpp:131] Top shape: 100 (100)
I0428 19:57:57.924945 28853 net.cpp:139] Memory required for data: 314000
I0428 19:57:57.924949 28853 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:57.924957 28853 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:57.924959 28853 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:57.924964 28853 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:57.924971 28853 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:57.925020 28853 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:57.925029 28853 net.cpp:131] Top shape: 100 (100)
I0428 19:57:57.925032 28853 net.cpp:131] Top shape: 100 (100)
I0428 19:57:57.925034 28853 net.cpp:139] Memory required for data: 314800
I0428 19:57:57.925037 28853 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:57.925046 28853 net.cpp:86] Creating Layer conv0
I0428 19:57:57.925050 28853 net.cpp:408] conv0 <- data
I0428 19:57:57.925055 28853 net.cpp:382] conv0 -> conv0
I0428 19:57:57.926793 28853 net.cpp:124] Setting up conv0
I0428 19:57:57.926806 28853 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:57.926826 28853 net.cpp:139] Memory required for data: 2618800
I0428 19:57:57.926834 28853 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:57.926841 28853 net.cpp:86] Creating Layer pool0
I0428 19:57:57.926843 28853 net.cpp:408] pool0 <- conv0
I0428 19:57:57.926848 28853 net.cpp:382] pool0 -> pool0
I0428 19:57:57.926898 28853 net.cpp:124] Setting up pool0
I0428 19:57:57.926903 28853 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:57.926905 28853 net.cpp:139] Memory required for data: 3194800
I0428 19:57:57.926908 28853 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:57.926916 28853 net.cpp:86] Creating Layer conv1
I0428 19:57:57.926919 28853 net.cpp:408] conv1 <- pool0
I0428 19:57:57.926924 28853 net.cpp:382] conv1 -> conv1
I0428 19:57:57.928997 28853 net.cpp:124] Setting up conv1
I0428 19:57:57.929025 28853 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:57.929029 28853 net.cpp:139] Memory required for data: 3322800
I0428 19:57:57.929039 28853 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:57.929046 28853 net.cpp:86] Creating Layer pool1
I0428 19:57:57.929065 28853 net.cpp:408] pool1 <- conv1
I0428 19:57:57.929070 28853 net.cpp:382] pool1 -> pool1
I0428 19:57:57.929111 28853 net.cpp:124] Setting up pool1
I0428 19:57:57.929116 28853 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:57.929119 28853 net.cpp:139] Memory required for data: 3354800
I0428 19:57:57.929122 28853 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:57.929128 28853 net.cpp:86] Creating Layer ip1
I0428 19:57:57.929132 28853 net.cpp:408] ip1 <- pool1
I0428 19:57:57.929137 28853 net.cpp:382] ip1 -> ip1
I0428 19:57:57.929308 28853 net.cpp:124] Setting up ip1
I0428 19:57:57.929316 28853 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:57.929330 28853 net.cpp:139] Memory required for data: 3364800
I0428 19:57:57.929349 28853 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:57.929354 28853 net.cpp:86] Creating Layer relu1
I0428 19:57:57.929363 28853 net.cpp:408] relu1 <- ip1
I0428 19:57:57.929368 28853 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:57.929555 28853 net.cpp:124] Setting up relu1
I0428 19:57:57.929564 28853 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:57.929569 28853 net.cpp:139] Memory required for data: 3374800
I0428 19:57:57.929571 28853 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:57.929577 28853 net.cpp:86] Creating Layer ip2
I0428 19:57:57.929581 28853 net.cpp:408] ip2 <- ip1
I0428 19:57:57.929586 28853 net.cpp:382] ip2 -> ip2
I0428 19:57:57.929702 28853 net.cpp:124] Setting up ip2
I0428 19:57:57.929708 28853 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:57.929726 28853 net.cpp:139] Memory required for data: 3384800
I0428 19:57:57.929733 28853 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:57.929738 28853 net.cpp:86] Creating Layer relu2
I0428 19:57:57.929741 28853 net.cpp:408] relu2 <- ip2
I0428 19:57:57.929745 28853 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:57.929924 28853 net.cpp:124] Setting up relu2
I0428 19:57:57.929934 28853 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:57.929936 28853 net.cpp:139] Memory required for data: 3394800
I0428 19:57:57.929940 28853 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:57.929946 28853 net.cpp:86] Creating Layer ip3
I0428 19:57:57.929949 28853 net.cpp:408] ip3 <- ip2
I0428 19:57:57.929955 28853 net.cpp:382] ip3 -> ip3
I0428 19:57:57.930066 28853 net.cpp:124] Setting up ip3
I0428 19:57:57.930073 28853 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:57.930076 28853 net.cpp:139] Memory required for data: 3398800
I0428 19:57:57.930099 28853 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:57.930104 28853 net.cpp:86] Creating Layer relu3
I0428 19:57:57.930106 28853 net.cpp:408] relu3 <- ip3
I0428 19:57:57.930110 28853 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:57.930922 28853 net.cpp:124] Setting up relu3
I0428 19:57:57.930933 28853 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:57.930948 28853 net.cpp:139] Memory required for data: 3402800
I0428 19:57:57.930951 28853 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:57.930968 28853 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:57.930971 28853 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:57.930977 28853 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:57.930984 28853 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:57.931049 28853 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:57.931056 28853 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:57.931061 28853 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:57.931062 28853 net.cpp:139] Memory required for data: 3410800
I0428 19:57:57.931066 28853 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:57.931071 28853 net.cpp:86] Creating Layer accuracy
I0428 19:57:57.931074 28853 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:57.931078 28853 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:57.931083 28853 net.cpp:382] accuracy -> accuracy
I0428 19:57:57.931089 28853 net.cpp:124] Setting up accuracy
I0428 19:57:57.931094 28853 net.cpp:131] Top shape: (1)
I0428 19:57:57.931097 28853 net.cpp:139] Memory required for data: 3410804
I0428 19:57:57.931100 28853 layer_factory.hpp:77] Creating layer loss
I0428 19:57:57.931104 28853 net.cpp:86] Creating Layer loss
I0428 19:57:57.931107 28853 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:57.931112 28853 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:57.931115 28853 net.cpp:382] loss -> loss
I0428 19:57:57.931121 28853 layer_factory.hpp:77] Creating layer loss
I0428 19:57:57.931346 28853 net.cpp:124] Setting up loss
I0428 19:57:57.931355 28853 net.cpp:131] Top shape: (1)
I0428 19:57:57.931358 28853 net.cpp:134]     with loss weight 1
I0428 19:57:57.931365 28853 net.cpp:139] Memory required for data: 3410808
I0428 19:57:57.931376 28853 net.cpp:200] loss needs backward computation.
I0428 19:57:57.931380 28853 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:57.931385 28853 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:57.931387 28853 net.cpp:200] relu3 needs backward computation.
I0428 19:57:57.931390 28853 net.cpp:200] ip3 needs backward computation.
I0428 19:57:57.931398 28853 net.cpp:200] relu2 needs backward computation.
I0428 19:57:57.931401 28853 net.cpp:200] ip2 needs backward computation.
I0428 19:57:57.931403 28853 net.cpp:200] relu1 needs backward computation.
I0428 19:57:57.931406 28853 net.cpp:200] ip1 needs backward computation.
I0428 19:57:57.931409 28853 net.cpp:200] pool1 needs backward computation.
I0428 19:57:57.931412 28853 net.cpp:200] conv1 needs backward computation.
I0428 19:57:57.931416 28853 net.cpp:200] pool0 needs backward computation.
I0428 19:57:57.931418 28853 net.cpp:200] conv0 needs backward computation.
I0428 19:57:57.931422 28853 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:57.931426 28853 net.cpp:202] mnist does not need backward computation.
I0428 19:57:57.931428 28853 net.cpp:244] This network produces output accuracy
I0428 19:57:57.931432 28853 net.cpp:244] This network produces output loss
I0428 19:57:57.931442 28853 net.cpp:257] Network initialization done.
I0428 19:57:57.931481 28853 solver.cpp:56] Solver scaffolding done.
I0428 19:57:57.931848 28853 caffe.cpp:248] Starting Optimization
I0428 19:57:57.931854 28853 solver.cpp:273] Solving LeNet
I0428 19:57:57.931856 28853 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:57.932708 28853 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:57.936878 28853 blocking_queue.cpp:49] Waiting for data
I0428 19:57:58.001644 28860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:58.002173 28853 solver.cpp:398]     Test net output #0: accuracy = 0.076
I0428 19:57:58.002207 28853 solver.cpp:398]     Test net output #1: loss = 2.31285 (* 1 = 2.31285 loss)
I0428 19:57:58.004726 28853 solver.cpp:219] Iteration 0 (0 iter/s, 0.0728197s/100 iters), loss = 2.30973
I0428 19:57:58.004750 28853 solver.cpp:238]     Train net output #0: loss = 2.30973 (* 1 = 2.30973 loss)
I0428 19:57:58.004760 28853 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:58.080533 28853 solver.cpp:219] Iteration 100 (1319.7 iter/s, 0.075775s/100 iters), loss = 0.87189
I0428 19:57:58.080570 28853 solver.cpp:238]     Train net output #0: loss = 0.87189 (* 1 = 0.87189 loss)
I0428 19:57:58.080576 28853 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:58.154835 28853 solver.cpp:219] Iteration 200 (1346.42 iter/s, 0.0742708s/100 iters), loss = 0.533575
I0428 19:57:58.154873 28853 solver.cpp:238]     Train net output #0: loss = 0.533575 (* 1 = 0.533575 loss)
I0428 19:57:58.154878 28853 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:58.228904 28853 solver.cpp:219] Iteration 300 (1350.67 iter/s, 0.0740371s/100 iters), loss = 0.715762
I0428 19:57:58.228943 28853 solver.cpp:238]     Train net output #0: loss = 0.715762 (* 1 = 0.715762 loss)
I0428 19:57:58.228950 28853 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:58.302490 28853 solver.cpp:219] Iteration 400 (1359.55 iter/s, 0.0735539s/100 iters), loss = 0.895359
I0428 19:57:58.302527 28853 solver.cpp:238]     Train net output #0: loss = 0.895359 (* 1 = 0.895359 loss)
I0428 19:57:58.302533 28853 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:58.374486 28853 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:58.419023 28860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:58.419562 28853 solver.cpp:398]     Test net output #0: accuracy = 0.7649
I0428 19:57:58.419595 28853 solver.cpp:398]     Test net output #1: loss = 0.627048 (* 1 = 0.627048 loss)
I0428 19:57:58.420397 28853 solver.cpp:219] Iteration 500 (848.366 iter/s, 0.117874s/100 iters), loss = 0.74301
I0428 19:57:58.420434 28853 solver.cpp:238]     Train net output #0: loss = 0.74301 (* 1 = 0.74301 loss)
I0428 19:57:58.420456 28853 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:58.512178 28853 solver.cpp:219] Iteration 600 (1090.07 iter/s, 0.0917369s/100 iters), loss = 0.482043
I0428 19:57:58.512203 28853 solver.cpp:238]     Train net output #0: loss = 0.482043 (* 1 = 0.482043 loss)
I0428 19:57:58.512214 28853 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:58.589843 28853 solver.cpp:219] Iteration 700 (1288.15 iter/s, 0.0776305s/100 iters), loss = 0.600665
I0428 19:57:58.589880 28853 solver.cpp:238]     Train net output #0: loss = 0.600665 (* 1 = 0.600665 loss)
I0428 19:57:58.589886 28853 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:58.667127 28853 solver.cpp:219] Iteration 800 (1294.44 iter/s, 0.0772536s/100 iters), loss = 0.738274
I0428 19:57:58.667150 28853 solver.cpp:238]     Train net output #0: loss = 0.738274 (* 1 = 0.738274 loss)
I0428 19:57:58.667156 28853 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:58.741489 28853 solver.cpp:219] Iteration 900 (1345.35 iter/s, 0.0743303s/100 iters), loss = 0.558042
I0428 19:57:58.741528 28853 solver.cpp:238]     Train net output #0: loss = 0.558042 (* 1 = 0.558042 loss)
I0428 19:57:58.741534 28853 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:58.766685 28859 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:58.815925 28853 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:58.816674 28853 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:58.817147 28853 solver.cpp:311] Iteration 1000, loss = 0.501731
I0428 19:57:58.817178 28853 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:58.882052 28860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:58.882577 28853 solver.cpp:398]     Test net output #0: accuracy = 0.7793
I0428 19:57:58.882611 28853 solver.cpp:398]     Test net output #1: loss = 0.571592 (* 1 = 0.571592 loss)
I0428 19:57:58.882616 28853 solver.cpp:316] Optimization Done.
I0428 19:57:58.882618 28853 caffe.cpp:259] Optimization Done.
