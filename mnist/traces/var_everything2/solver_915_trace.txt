I0428 20:01:54.411206 29832 caffe.cpp:218] Using GPUs 0
I0428 20:01:54.441196 29832 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:54.888250 29832 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test915.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:54.888381 29832 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test915.prototxt
I0428 20:01:54.888725 29832 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:54.888754 29832 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:54.888875 29832 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:54.888942 29832 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:54.889040 29832 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:54.889065 29832 net.cpp:86] Creating Layer mnist
I0428 20:01:54.889075 29832 net.cpp:382] mnist -> data
I0428 20:01:54.889096 29832 net.cpp:382] mnist -> label
I0428 20:01:54.890028 29832 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:54.892241 29832 net.cpp:124] Setting up mnist
I0428 20:01:54.892287 29832 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:54.892292 29832 net.cpp:131] Top shape: 64 (64)
I0428 20:01:54.892294 29832 net.cpp:139] Memory required for data: 200960
I0428 20:01:54.892316 29832 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:54.892338 29832 net.cpp:86] Creating Layer conv0
I0428 20:01:54.892355 29832 net.cpp:408] conv0 <- data
I0428 20:01:54.892366 29832 net.cpp:382] conv0 -> conv0
I0428 20:01:55.125798 29832 net.cpp:124] Setting up conv0
I0428 20:01:55.125843 29832 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:55.125846 29832 net.cpp:139] Memory required for data: 1675520
I0428 20:01:55.125861 29832 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:55.125888 29832 net.cpp:86] Creating Layer pool0
I0428 20:01:55.125892 29832 net.cpp:408] pool0 <- conv0
I0428 20:01:55.125913 29832 net.cpp:382] pool0 -> pool0
I0428 20:01:55.125957 29832 net.cpp:124] Setting up pool0
I0428 20:01:55.125969 29832 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:55.125973 29832 net.cpp:139] Memory required for data: 2044160
I0428 20:01:55.125977 29832 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:55.125986 29832 net.cpp:86] Creating Layer conv1
I0428 20:01:55.125989 29832 net.cpp:408] conv1 <- pool0
I0428 20:01:55.125994 29832 net.cpp:382] conv1 -> conv1
I0428 20:01:55.128789 29832 net.cpp:124] Setting up conv1
I0428 20:01:55.128824 29832 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:55.128829 29832 net.cpp:139] Memory required for data: 2863360
I0428 20:01:55.128854 29832 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:55.128861 29832 net.cpp:86] Creating Layer pool1
I0428 20:01:55.128865 29832 net.cpp:408] pool1 <- conv1
I0428 20:01:55.128870 29832 net.cpp:382] pool1 -> pool1
I0428 20:01:55.128940 29832 net.cpp:124] Setting up pool1
I0428 20:01:55.128947 29832 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:55.128949 29832 net.cpp:139] Memory required for data: 3068160
I0428 20:01:55.128952 29832 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:55.128960 29832 net.cpp:86] Creating Layer ip1
I0428 20:01:55.128963 29832 net.cpp:408] ip1 <- pool1
I0428 20:01:55.128968 29832 net.cpp:382] ip1 -> ip1
I0428 20:01:55.129127 29832 net.cpp:124] Setting up ip1
I0428 20:01:55.129135 29832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:55.129138 29832 net.cpp:139] Memory required for data: 3070720
I0428 20:01:55.129145 29832 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:55.129151 29832 net.cpp:86] Creating Layer relu1
I0428 20:01:55.129154 29832 net.cpp:408] relu1 <- ip1
I0428 20:01:55.129159 29832 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:55.129359 29832 net.cpp:124] Setting up relu1
I0428 20:01:55.129369 29832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:55.129371 29832 net.cpp:139] Memory required for data: 3073280
I0428 20:01:55.129374 29832 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:55.129380 29832 net.cpp:86] Creating Layer ip2
I0428 20:01:55.129384 29832 net.cpp:408] ip2 <- ip1
I0428 20:01:55.129389 29832 net.cpp:382] ip2 -> ip2
I0428 20:01:55.129482 29832 net.cpp:124] Setting up ip2
I0428 20:01:55.129489 29832 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:55.129493 29832 net.cpp:139] Memory required for data: 3086080
I0428 20:01:55.129498 29832 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:55.129504 29832 net.cpp:86] Creating Layer relu2
I0428 20:01:55.129508 29832 net.cpp:408] relu2 <- ip2
I0428 20:01:55.129513 29832 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:55.130343 29832 net.cpp:124] Setting up relu2
I0428 20:01:55.130355 29832 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:55.130375 29832 net.cpp:139] Memory required for data: 3098880
I0428 20:01:55.130378 29832 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:55.130385 29832 net.cpp:86] Creating Layer ip3
I0428 20:01:55.130388 29832 net.cpp:408] ip3 <- ip2
I0428 20:01:55.130393 29832 net.cpp:382] ip3 -> ip3
I0428 20:01:55.130488 29832 net.cpp:124] Setting up ip3
I0428 20:01:55.130496 29832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:55.130509 29832 net.cpp:139] Memory required for data: 3101440
I0428 20:01:55.130517 29832 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:55.130523 29832 net.cpp:86] Creating Layer relu3
I0428 20:01:55.130527 29832 net.cpp:408] relu3 <- ip3
I0428 20:01:55.130530 29832 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:55.130698 29832 net.cpp:124] Setting up relu3
I0428 20:01:55.130707 29832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:55.130710 29832 net.cpp:139] Memory required for data: 3104000
I0428 20:01:55.130713 29832 layer_factory.hpp:77] Creating layer loss
I0428 20:01:55.130718 29832 net.cpp:86] Creating Layer loss
I0428 20:01:55.130722 29832 net.cpp:408] loss <- ip3
I0428 20:01:55.130725 29832 net.cpp:408] loss <- label
I0428 20:01:55.130730 29832 net.cpp:382] loss -> loss
I0428 20:01:55.130748 29832 layer_factory.hpp:77] Creating layer loss
I0428 20:01:55.130971 29832 net.cpp:124] Setting up loss
I0428 20:01:55.130980 29832 net.cpp:131] Top shape: (1)
I0428 20:01:55.130985 29832 net.cpp:134]     with loss weight 1
I0428 20:01:55.130998 29832 net.cpp:139] Memory required for data: 3104004
I0428 20:01:55.131002 29832 net.cpp:200] loss needs backward computation.
I0428 20:01:55.131006 29832 net.cpp:200] relu3 needs backward computation.
I0428 20:01:55.131009 29832 net.cpp:200] ip3 needs backward computation.
I0428 20:01:55.131012 29832 net.cpp:200] relu2 needs backward computation.
I0428 20:01:55.131016 29832 net.cpp:200] ip2 needs backward computation.
I0428 20:01:55.131017 29832 net.cpp:200] relu1 needs backward computation.
I0428 20:01:55.131021 29832 net.cpp:200] ip1 needs backward computation.
I0428 20:01:55.131023 29832 net.cpp:200] pool1 needs backward computation.
I0428 20:01:55.131026 29832 net.cpp:200] conv1 needs backward computation.
I0428 20:01:55.131029 29832 net.cpp:200] pool0 needs backward computation.
I0428 20:01:55.131032 29832 net.cpp:200] conv0 needs backward computation.
I0428 20:01:55.131036 29832 net.cpp:202] mnist does not need backward computation.
I0428 20:01:55.131039 29832 net.cpp:244] This network produces output loss
I0428 20:01:55.131048 29832 net.cpp:257] Network initialization done.
I0428 20:01:55.131389 29832 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test915.prototxt
I0428 20:01:55.131431 29832 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:55.131526 29832 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:55.131598 29832 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:55.131639 29832 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:55.131654 29832 net.cpp:86] Creating Layer mnist
I0428 20:01:55.131659 29832 net.cpp:382] mnist -> data
I0428 20:01:55.131666 29832 net.cpp:382] mnist -> label
I0428 20:01:55.131744 29832 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:55.133822 29832 net.cpp:124] Setting up mnist
I0428 20:01:55.133852 29832 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:55.133857 29832 net.cpp:131] Top shape: 100 (100)
I0428 20:01:55.133859 29832 net.cpp:139] Memory required for data: 314000
I0428 20:01:55.133863 29832 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:55.133898 29832 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:55.133901 29832 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:55.133906 29832 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:55.133913 29832 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:55.133952 29832 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:55.133957 29832 net.cpp:131] Top shape: 100 (100)
I0428 20:01:55.133961 29832 net.cpp:131] Top shape: 100 (100)
I0428 20:01:55.133965 29832 net.cpp:139] Memory required for data: 314800
I0428 20:01:55.133967 29832 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:55.133975 29832 net.cpp:86] Creating Layer conv0
I0428 20:01:55.133978 29832 net.cpp:408] conv0 <- data
I0428 20:01:55.133983 29832 net.cpp:382] conv0 -> conv0
I0428 20:01:55.135787 29832 net.cpp:124] Setting up conv0
I0428 20:01:55.135800 29832 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:55.135804 29832 net.cpp:139] Memory required for data: 2618800
I0428 20:01:55.135812 29832 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:55.135819 29832 net.cpp:86] Creating Layer pool0
I0428 20:01:55.135823 29832 net.cpp:408] pool0 <- conv0
I0428 20:01:55.135828 29832 net.cpp:382] pool0 -> pool0
I0428 20:01:55.135861 29832 net.cpp:124] Setting up pool0
I0428 20:01:55.135867 29832 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:55.135869 29832 net.cpp:139] Memory required for data: 3194800
I0428 20:01:55.135872 29832 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:55.135880 29832 net.cpp:86] Creating Layer conv1
I0428 20:01:55.135884 29832 net.cpp:408] conv1 <- pool0
I0428 20:01:55.135888 29832 net.cpp:382] conv1 -> conv1
I0428 20:01:55.137650 29832 net.cpp:124] Setting up conv1
I0428 20:01:55.137663 29832 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:55.137667 29832 net.cpp:139] Memory required for data: 4474800
I0428 20:01:55.137676 29832 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:55.137683 29832 net.cpp:86] Creating Layer pool1
I0428 20:01:55.137687 29832 net.cpp:408] pool1 <- conv1
I0428 20:01:55.137693 29832 net.cpp:382] pool1 -> pool1
I0428 20:01:55.137744 29832 net.cpp:124] Setting up pool1
I0428 20:01:55.137749 29832 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:55.137753 29832 net.cpp:139] Memory required for data: 4794800
I0428 20:01:55.137756 29832 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:55.137763 29832 net.cpp:86] Creating Layer ip1
I0428 20:01:55.137765 29832 net.cpp:408] ip1 <- pool1
I0428 20:01:55.137771 29832 net.cpp:382] ip1 -> ip1
I0428 20:01:55.137955 29832 net.cpp:124] Setting up ip1
I0428 20:01:55.137964 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.137976 29832 net.cpp:139] Memory required for data: 4798800
I0428 20:01:55.137984 29832 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:55.138000 29832 net.cpp:86] Creating Layer relu1
I0428 20:01:55.138005 29832 net.cpp:408] relu1 <- ip1
I0428 20:01:55.138008 29832 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:55.138154 29832 net.cpp:124] Setting up relu1
I0428 20:01:55.138162 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.138165 29832 net.cpp:139] Memory required for data: 4802800
I0428 20:01:55.138169 29832 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:55.138175 29832 net.cpp:86] Creating Layer ip2
I0428 20:01:55.138178 29832 net.cpp:408] ip2 <- ip1
I0428 20:01:55.138182 29832 net.cpp:382] ip2 -> ip2
I0428 20:01:55.138275 29832 net.cpp:124] Setting up ip2
I0428 20:01:55.138283 29832 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:55.138301 29832 net.cpp:139] Memory required for data: 4822800
I0428 20:01:55.138306 29832 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:55.138310 29832 net.cpp:86] Creating Layer relu2
I0428 20:01:55.138314 29832 net.cpp:408] relu2 <- ip2
I0428 20:01:55.138319 29832 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:55.138461 29832 net.cpp:124] Setting up relu2
I0428 20:01:55.138469 29832 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:55.138473 29832 net.cpp:139] Memory required for data: 4842800
I0428 20:01:55.138475 29832 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:55.138480 29832 net.cpp:86] Creating Layer ip3
I0428 20:01:55.138484 29832 net.cpp:408] ip3 <- ip2
I0428 20:01:55.138489 29832 net.cpp:382] ip3 -> ip3
I0428 20:01:55.138592 29832 net.cpp:124] Setting up ip3
I0428 20:01:55.138597 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.138602 29832 net.cpp:139] Memory required for data: 4846800
I0428 20:01:55.138622 29832 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:55.138626 29832 net.cpp:86] Creating Layer relu3
I0428 20:01:55.138629 29832 net.cpp:408] relu3 <- ip3
I0428 20:01:55.138633 29832 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:55.139459 29832 net.cpp:124] Setting up relu3
I0428 20:01:55.139470 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.139474 29832 net.cpp:139] Memory required for data: 4850800
I0428 20:01:55.139477 29832 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:55.139482 29832 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:55.139485 29832 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:55.139490 29832 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:55.139497 29832 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:55.139536 29832 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:55.139541 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.139545 29832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:55.139547 29832 net.cpp:139] Memory required for data: 4858800
I0428 20:01:55.139550 29832 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:55.139555 29832 net.cpp:86] Creating Layer accuracy
I0428 20:01:55.139559 29832 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:55.139562 29832 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:55.139566 29832 net.cpp:382] accuracy -> accuracy
I0428 20:01:55.139572 29832 net.cpp:124] Setting up accuracy
I0428 20:01:55.139576 29832 net.cpp:131] Top shape: (1)
I0428 20:01:55.139580 29832 net.cpp:139] Memory required for data: 4858804
I0428 20:01:55.139581 29832 layer_factory.hpp:77] Creating layer loss
I0428 20:01:55.139585 29832 net.cpp:86] Creating Layer loss
I0428 20:01:55.139588 29832 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:55.139592 29832 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:55.139595 29832 net.cpp:382] loss -> loss
I0428 20:01:55.139601 29832 layer_factory.hpp:77] Creating layer loss
I0428 20:01:55.139837 29832 net.cpp:124] Setting up loss
I0428 20:01:55.139847 29832 net.cpp:131] Top shape: (1)
I0428 20:01:55.139858 29832 net.cpp:134]     with loss weight 1
I0428 20:01:55.139873 29832 net.cpp:139] Memory required for data: 4858808
I0428 20:01:55.139876 29832 net.cpp:200] loss needs backward computation.
I0428 20:01:55.139879 29832 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:55.139883 29832 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:55.139886 29832 net.cpp:200] relu3 needs backward computation.
I0428 20:01:55.139889 29832 net.cpp:200] ip3 needs backward computation.
I0428 20:01:55.139892 29832 net.cpp:200] relu2 needs backward computation.
I0428 20:01:55.139894 29832 net.cpp:200] ip2 needs backward computation.
I0428 20:01:55.139897 29832 net.cpp:200] relu1 needs backward computation.
I0428 20:01:55.139900 29832 net.cpp:200] ip1 needs backward computation.
I0428 20:01:55.139904 29832 net.cpp:200] pool1 needs backward computation.
I0428 20:01:55.139906 29832 net.cpp:200] conv1 needs backward computation.
I0428 20:01:55.139909 29832 net.cpp:200] pool0 needs backward computation.
I0428 20:01:55.139919 29832 net.cpp:200] conv0 needs backward computation.
I0428 20:01:55.139921 29832 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:55.139925 29832 net.cpp:202] mnist does not need backward computation.
I0428 20:01:55.139928 29832 net.cpp:244] This network produces output accuracy
I0428 20:01:55.139931 29832 net.cpp:244] This network produces output loss
I0428 20:01:55.139941 29832 net.cpp:257] Network initialization done.
I0428 20:01:55.139987 29832 solver.cpp:56] Solver scaffolding done.
I0428 20:01:55.140383 29832 caffe.cpp:248] Starting Optimization
I0428 20:01:55.140401 29832 solver.cpp:273] Solving LeNet
I0428 20:01:55.140404 29832 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:55.141294 29832 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:55.145109 29832 blocking_queue.cpp:49] Waiting for data
I0428 20:01:55.220850 29840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:55.221359 29832 solver.cpp:398]     Test net output #0: accuracy = 0.1015
I0428 20:01:55.221377 29832 solver.cpp:398]     Test net output #1: loss = 2.29753 (* 1 = 2.29753 loss)
I0428 20:01:55.224603 29832 solver.cpp:219] Iteration 0 (0 iter/s, 0.0841748s/100 iters), loss = 2.27999
I0428 20:01:55.224625 29832 solver.cpp:238]     Train net output #0: loss = 2.27999 (* 1 = 2.27999 loss)
I0428 20:01:55.224637 29832 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:55.329905 29832 solver.cpp:219] Iteration 100 (949.963 iter/s, 0.105267s/100 iters), loss = 0.536534
I0428 20:01:55.329929 29832 solver.cpp:238]     Train net output #0: loss = 0.536534 (* 1 = 0.536534 loss)
I0428 20:01:55.329936 29832 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:55.434082 29832 solver.cpp:219] Iteration 200 (960.239 iter/s, 0.104141s/100 iters), loss = 0.736543
I0428 20:01:55.434104 29832 solver.cpp:238]     Train net output #0: loss = 0.736543 (* 1 = 0.736543 loss)
I0428 20:01:55.434111 29832 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:55.538429 29832 solver.cpp:219] Iteration 300 (958.655 iter/s, 0.104313s/100 iters), loss = 0.492985
I0428 20:01:55.538450 29832 solver.cpp:238]     Train net output #0: loss = 0.492985 (* 1 = 0.492985 loss)
I0428 20:01:55.538457 29832 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:55.653560 29832 solver.cpp:219] Iteration 400 (868.82 iter/s, 0.115099s/100 iters), loss = 0.364996
I0428 20:01:55.653595 29832 solver.cpp:238]     Train net output #0: loss = 0.364996 (* 1 = 0.364996 loss)
I0428 20:01:55.653602 29832 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:55.770344 29832 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:55.846644 29840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:55.847239 29832 solver.cpp:398]     Test net output #0: accuracy = 0.8607
I0428 20:01:55.847266 29832 solver.cpp:398]     Test net output #1: loss = 0.381047 (* 1 = 0.381047 loss)
I0428 20:01:55.848506 29832 solver.cpp:219] Iteration 500 (513.073 iter/s, 0.194904s/100 iters), loss = 0.313351
I0428 20:01:55.848563 29832 solver.cpp:238]     Train net output #0: loss = 0.313351 (* 1 = 0.313351 loss)
I0428 20:01:55.848577 29832 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:55.975044 29832 solver.cpp:219] Iteration 600 (790.704 iter/s, 0.12647s/100 iters), loss = 0.43585
I0428 20:01:55.975081 29832 solver.cpp:238]     Train net output #0: loss = 0.435851 (* 1 = 0.435851 loss)
I0428 20:01:55.975090 29832 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:56.091202 29832 solver.cpp:219] Iteration 700 (861.242 iter/s, 0.116111s/100 iters), loss = 0.290674
I0428 20:01:56.091236 29832 solver.cpp:238]     Train net output #0: loss = 0.290674 (* 1 = 0.290674 loss)
I0428 20:01:56.091244 29832 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:56.201484 29832 solver.cpp:219] Iteration 800 (907.138 iter/s, 0.110237s/100 iters), loss = 0.52155
I0428 20:01:56.201516 29832 solver.cpp:238]     Train net output #0: loss = 0.52155 (* 1 = 0.52155 loss)
I0428 20:01:56.201524 29832 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:56.319000 29832 solver.cpp:219] Iteration 900 (851.28 iter/s, 0.11747s/100 iters), loss = 0.634508
I0428 20:01:56.319032 29832 solver.cpp:238]     Train net output #0: loss = 0.634508 (* 1 = 0.634508 loss)
I0428 20:01:56.319041 29832 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:56.358580 29839 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:56.431438 29832 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:56.432679 29832 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:56.433408 29832 solver.cpp:311] Iteration 1000, loss = 0.29874
I0428 20:01:56.433428 29832 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:56.506757 29840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:56.507325 29832 solver.cpp:398]     Test net output #0: accuracy = 0.8756
I0428 20:01:56.507351 29832 solver.cpp:398]     Test net output #1: loss = 0.319266 (* 1 = 0.319266 loss)
I0428 20:01:56.507357 29832 solver.cpp:316] Optimization Done.
I0428 20:01:56.507361 29832 caffe.cpp:259] Optimization Done.
