I0428 20:16:32.219934   680 caffe.cpp:218] Using GPUs 0
I0428 20:16:32.259461   680 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:32.778192   680 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1273.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:32.778364   680 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1273.prototxt
I0428 20:16:32.778792   680 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:32.778818   680 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:32.778934   680 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:32.779049   680 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:32.779181   680 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:32.779216   680 net.cpp:86] Creating Layer mnist
I0428 20:16:32.779227   680 net.cpp:382] mnist -> data
I0428 20:16:32.779258   680 net.cpp:382] mnist -> label
I0428 20:16:32.780545   680 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:32.783021   680 net.cpp:124] Setting up mnist
I0428 20:16:32.783041   680 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:32.783053   680 net.cpp:131] Top shape: 64 (64)
I0428 20:16:32.783061   680 net.cpp:139] Memory required for data: 200960
I0428 20:16:32.783071   680 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:32.783093   680 net.cpp:86] Creating Layer conv0
I0428 20:16:32.783116   680 net.cpp:408] conv0 <- data
I0428 20:16:32.783138   680 net.cpp:382] conv0 -> conv0
I0428 20:16:33.062916   680 net.cpp:124] Setting up conv0
I0428 20:16:33.062944   680 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:33.062949   680 net.cpp:139] Memory required for data: 7573760
I0428 20:16:33.062968   680 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:33.062988   680 net.cpp:86] Creating Layer pool0
I0428 20:16:33.062999   680 net.cpp:408] pool0 <- conv0
I0428 20:16:33.063010   680 net.cpp:382] pool0 -> pool0
I0428 20:16:33.063064   680 net.cpp:124] Setting up pool0
I0428 20:16:33.063073   680 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:33.063077   680 net.cpp:139] Memory required for data: 9416960
I0428 20:16:33.063081   680 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:33.063098   680 net.cpp:86] Creating Layer conv1
I0428 20:16:33.063104   680 net.cpp:408] conv1 <- pool0
I0428 20:16:33.063114   680 net.cpp:382] conv1 -> conv1
I0428 20:16:33.065954   680 net.cpp:124] Setting up conv1
I0428 20:16:33.065970   680 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:33.065975   680 net.cpp:139] Memory required for data: 9498880
I0428 20:16:33.065989   680 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:33.066001   680 net.cpp:86] Creating Layer pool1
I0428 20:16:33.066006   680 net.cpp:408] pool1 <- conv1
I0428 20:16:33.066015   680 net.cpp:382] pool1 -> pool1
I0428 20:16:33.066058   680 net.cpp:124] Setting up pool1
I0428 20:16:33.066066   680 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:33.066071   680 net.cpp:139] Memory required for data: 9519360
I0428 20:16:33.066076   680 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:33.066087   680 net.cpp:86] Creating Layer ip1
I0428 20:16:33.066092   680 net.cpp:408] ip1 <- pool1
I0428 20:16:33.066100   680 net.cpp:382] ip1 -> ip1
I0428 20:16:33.066220   680 net.cpp:124] Setting up ip1
I0428 20:16:33.066228   680 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:33.066232   680 net.cpp:139] Memory required for data: 9525760
I0428 20:16:33.066244   680 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:33.066256   680 net.cpp:86] Creating Layer relu1
I0428 20:16:33.066262   680 net.cpp:408] relu1 <- ip1
I0428 20:16:33.066270   680 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:33.066438   680 net.cpp:124] Setting up relu1
I0428 20:16:33.066448   680 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:33.066453   680 net.cpp:139] Memory required for data: 9532160
I0428 20:16:33.066457   680 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:33.066468   680 net.cpp:86] Creating Layer ip2
I0428 20:16:33.066473   680 net.cpp:408] ip2 <- ip1
I0428 20:16:33.066481   680 net.cpp:382] ip2 -> ip2
I0428 20:16:33.066583   680 net.cpp:124] Setting up ip2
I0428 20:16:33.066592   680 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:33.066596   680 net.cpp:139] Memory required for data: 9538560
I0428 20:16:33.066604   680 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:33.066614   680 net.cpp:86] Creating Layer relu2
I0428 20:16:33.066619   680 net.cpp:408] relu2 <- ip2
I0428 20:16:33.066627   680 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:33.067345   680 net.cpp:124] Setting up relu2
I0428 20:16:33.067359   680 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:33.067364   680 net.cpp:139] Memory required for data: 9544960
I0428 20:16:33.067370   680 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:33.067383   680 net.cpp:86] Creating Layer ip3
I0428 20:16:33.067389   680 net.cpp:408] ip3 <- ip2
I0428 20:16:33.067397   680 net.cpp:382] ip3 -> ip3
I0428 20:16:33.067525   680 net.cpp:124] Setting up ip3
I0428 20:16:33.067535   680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:33.067539   680 net.cpp:139] Memory required for data: 9547520
I0428 20:16:33.067553   680 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:33.067564   680 net.cpp:86] Creating Layer relu3
I0428 20:16:33.067570   680 net.cpp:408] relu3 <- ip3
I0428 20:16:33.067577   680 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:33.067795   680 net.cpp:124] Setting up relu3
I0428 20:16:33.067804   680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:33.067809   680 net.cpp:139] Memory required for data: 9550080
I0428 20:16:33.067814   680 layer_factory.hpp:77] Creating layer loss
I0428 20:16:33.067822   680 net.cpp:86] Creating Layer loss
I0428 20:16:33.067827   680 net.cpp:408] loss <- ip3
I0428 20:16:33.067833   680 net.cpp:408] loss <- label
I0428 20:16:33.067842   680 net.cpp:382] loss -> loss
I0428 20:16:33.067860   680 layer_factory.hpp:77] Creating layer loss
I0428 20:16:33.068125   680 net.cpp:124] Setting up loss
I0428 20:16:33.068135   680 net.cpp:131] Top shape: (1)
I0428 20:16:33.068140   680 net.cpp:134]     with loss weight 1
I0428 20:16:33.068158   680 net.cpp:139] Memory required for data: 9550084
I0428 20:16:33.068164   680 net.cpp:200] loss needs backward computation.
I0428 20:16:33.068171   680 net.cpp:200] relu3 needs backward computation.
I0428 20:16:33.068176   680 net.cpp:200] ip3 needs backward computation.
I0428 20:16:33.068181   680 net.cpp:200] relu2 needs backward computation.
I0428 20:16:33.068186   680 net.cpp:200] ip2 needs backward computation.
I0428 20:16:33.068191   680 net.cpp:200] relu1 needs backward computation.
I0428 20:16:33.068194   680 net.cpp:200] ip1 needs backward computation.
I0428 20:16:33.068199   680 net.cpp:200] pool1 needs backward computation.
I0428 20:16:33.068204   680 net.cpp:200] conv1 needs backward computation.
I0428 20:16:33.068210   680 net.cpp:200] pool0 needs backward computation.
I0428 20:16:33.068215   680 net.cpp:200] conv0 needs backward computation.
I0428 20:16:33.068220   680 net.cpp:202] mnist does not need backward computation.
I0428 20:16:33.068225   680 net.cpp:244] This network produces output loss
I0428 20:16:33.068241   680 net.cpp:257] Network initialization done.
I0428 20:16:33.068606   680 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1273.prototxt
I0428 20:16:33.068639   680 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:33.068748   680 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:33.068900   680 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:33.068958   680 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:33.068975   680 net.cpp:86] Creating Layer mnist
I0428 20:16:33.068985   680 net.cpp:382] mnist -> data
I0428 20:16:33.068997   680 net.cpp:382] mnist -> label
I0428 20:16:33.069120   680 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:33.071478   680 net.cpp:124] Setting up mnist
I0428 20:16:33.071509   680 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:33.071516   680 net.cpp:131] Top shape: 100 (100)
I0428 20:16:33.071521   680 net.cpp:139] Memory required for data: 314000
I0428 20:16:33.071527   680 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:33.071552   680 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:33.071557   680 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:33.071564   680 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:33.071574   680 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:33.071686   680 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:33.071694   680 net.cpp:131] Top shape: 100 (100)
I0428 20:16:33.071701   680 net.cpp:131] Top shape: 100 (100)
I0428 20:16:33.071705   680 net.cpp:139] Memory required for data: 314800
I0428 20:16:33.071710   680 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:33.071724   680 net.cpp:86] Creating Layer conv0
I0428 20:16:33.071732   680 net.cpp:408] conv0 <- data
I0428 20:16:33.071741   680 net.cpp:382] conv0 -> conv0
I0428 20:16:33.073349   680 net.cpp:124] Setting up conv0
I0428 20:16:33.073364   680 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:33.073369   680 net.cpp:139] Memory required for data: 11834800
I0428 20:16:33.073382   680 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:33.073395   680 net.cpp:86] Creating Layer pool0
I0428 20:16:33.073400   680 net.cpp:408] pool0 <- conv0
I0428 20:16:33.073407   680 net.cpp:382] pool0 -> pool0
I0428 20:16:33.073449   680 net.cpp:124] Setting up pool0
I0428 20:16:33.073457   680 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:33.073462   680 net.cpp:139] Memory required for data: 14714800
I0428 20:16:33.073467   680 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:33.073479   680 net.cpp:86] Creating Layer conv1
I0428 20:16:33.073485   680 net.cpp:408] conv1 <- pool0
I0428 20:16:33.073494   680 net.cpp:382] conv1 -> conv1
I0428 20:16:33.075229   680 net.cpp:124] Setting up conv1
I0428 20:16:33.075259   680 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:33.075265   680 net.cpp:139] Memory required for data: 14842800
I0428 20:16:33.075278   680 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:33.075292   680 net.cpp:86] Creating Layer pool1
I0428 20:16:33.075300   680 net.cpp:408] pool1 <- conv1
I0428 20:16:33.075327   680 net.cpp:382] pool1 -> pool1
I0428 20:16:33.075384   680 net.cpp:124] Setting up pool1
I0428 20:16:33.075392   680 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:33.075397   680 net.cpp:139] Memory required for data: 14874800
I0428 20:16:33.075402   680 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:33.075412   680 net.cpp:86] Creating Layer ip1
I0428 20:16:33.075419   680 net.cpp:408] ip1 <- pool1
I0428 20:16:33.075428   680 net.cpp:382] ip1 -> ip1
I0428 20:16:33.075539   680 net.cpp:124] Setting up ip1
I0428 20:16:33.075547   680 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:33.075563   680 net.cpp:139] Memory required for data: 14884800
I0428 20:16:33.075577   680 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:33.075587   680 net.cpp:86] Creating Layer relu1
I0428 20:16:33.075593   680 net.cpp:408] relu1 <- ip1
I0428 20:16:33.075600   680 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:33.075786   680 net.cpp:124] Setting up relu1
I0428 20:16:33.075798   680 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:33.075801   680 net.cpp:139] Memory required for data: 14894800
I0428 20:16:33.075806   680 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:33.075830   680 net.cpp:86] Creating Layer ip2
I0428 20:16:33.075836   680 net.cpp:408] ip2 <- ip1
I0428 20:16:33.075845   680 net.cpp:382] ip2 -> ip2
I0428 20:16:33.075997   680 net.cpp:124] Setting up ip2
I0428 20:16:33.076006   680 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:33.076010   680 net.cpp:139] Memory required for data: 14904800
I0428 20:16:33.076020   680 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:33.076045   680 net.cpp:86] Creating Layer relu2
I0428 20:16:33.076050   680 net.cpp:408] relu2 <- ip2
I0428 20:16:33.076058   680 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:33.076257   680 net.cpp:124] Setting up relu2
I0428 20:16:33.076267   680 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:33.076272   680 net.cpp:139] Memory required for data: 14914800
I0428 20:16:33.076277   680 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:33.076297   680 net.cpp:86] Creating Layer ip3
I0428 20:16:33.076303   680 net.cpp:408] ip3 <- ip2
I0428 20:16:33.076313   680 net.cpp:382] ip3 -> ip3
I0428 20:16:33.076442   680 net.cpp:124] Setting up ip3
I0428 20:16:33.076452   680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:33.076465   680 net.cpp:139] Memory required for data: 14918800
I0428 20:16:33.076483   680 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:33.076490   680 net.cpp:86] Creating Layer relu3
I0428 20:16:33.076496   680 net.cpp:408] relu3 <- ip3
I0428 20:16:33.076504   680 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:33.077452   680 net.cpp:124] Setting up relu3
I0428 20:16:33.077466   680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:33.077471   680 net.cpp:139] Memory required for data: 14922800
I0428 20:16:33.077476   680 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:33.077483   680 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:33.077488   680 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:33.077497   680 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:33.077507   680 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:33.077556   680 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:33.077565   680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:33.077571   680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:33.077590   680 net.cpp:139] Memory required for data: 14930800
I0428 20:16:33.077596   680 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:33.077606   680 net.cpp:86] Creating Layer accuracy
I0428 20:16:33.077617   680 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:33.077625   680 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:33.077648   680 net.cpp:382] accuracy -> accuracy
I0428 20:16:33.077661   680 net.cpp:124] Setting up accuracy
I0428 20:16:33.077669   680 net.cpp:131] Top shape: (1)
I0428 20:16:33.077674   680 net.cpp:139] Memory required for data: 14930804
I0428 20:16:33.077679   680 layer_factory.hpp:77] Creating layer loss
I0428 20:16:33.077687   680 net.cpp:86] Creating Layer loss
I0428 20:16:33.077692   680 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:33.077698   680 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:33.077705   680 net.cpp:382] loss -> loss
I0428 20:16:33.077730   680 layer_factory.hpp:77] Creating layer loss
I0428 20:16:33.077997   680 net.cpp:124] Setting up loss
I0428 20:16:33.078023   680 net.cpp:131] Top shape: (1)
I0428 20:16:33.078029   680 net.cpp:134]     with loss weight 1
I0428 20:16:33.078047   680 net.cpp:139] Memory required for data: 14930808
I0428 20:16:33.078052   680 net.cpp:200] loss needs backward computation.
I0428 20:16:33.078058   680 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:33.078064   680 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:33.078069   680 net.cpp:200] relu3 needs backward computation.
I0428 20:16:33.078074   680 net.cpp:200] ip3 needs backward computation.
I0428 20:16:33.078079   680 net.cpp:200] relu2 needs backward computation.
I0428 20:16:33.078084   680 net.cpp:200] ip2 needs backward computation.
I0428 20:16:33.078089   680 net.cpp:200] relu1 needs backward computation.
I0428 20:16:33.078094   680 net.cpp:200] ip1 needs backward computation.
I0428 20:16:33.078099   680 net.cpp:200] pool1 needs backward computation.
I0428 20:16:33.078104   680 net.cpp:200] conv1 needs backward computation.
I0428 20:16:33.078110   680 net.cpp:200] pool0 needs backward computation.
I0428 20:16:33.078115   680 net.cpp:200] conv0 needs backward computation.
I0428 20:16:33.078122   680 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:33.078128   680 net.cpp:202] mnist does not need backward computation.
I0428 20:16:33.078132   680 net.cpp:244] This network produces output accuracy
I0428 20:16:33.078138   680 net.cpp:244] This network produces output loss
I0428 20:16:33.078155   680 net.cpp:257] Network initialization done.
I0428 20:16:33.078205   680 solver.cpp:56] Solver scaffolding done.
I0428 20:16:33.078604   680 caffe.cpp:248] Starting Optimization
I0428 20:16:33.078611   680 solver.cpp:273] Solving LeNet
I0428 20:16:33.078615   680 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:33.079474   680 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:33.085835   680 blocking_queue.cpp:49] Waiting for data
I0428 20:16:33.157212   687 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:33.157997   680 solver.cpp:398]     Test net output #0: accuracy = 0.0838
I0428 20:16:33.158018   680 solver.cpp:398]     Test net output #1: loss = 2.31554 (* 1 = 2.31554 loss)
I0428 20:16:33.162410   680 solver.cpp:219] Iteration 0 (-6.4721e-31 iter/s, 0.0837632s/100 iters), loss = 2.31227
I0428 20:16:33.162437   680 solver.cpp:238]     Train net output #0: loss = 2.31227 (* 1 = 2.31227 loss)
I0428 20:16:33.162483   680 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:33.280653   680 solver.cpp:219] Iteration 100 (845.985 iter/s, 0.118205s/100 iters), loss = 0.313091
I0428 20:16:33.280681   680 solver.cpp:238]     Train net output #0: loss = 0.313091 (* 1 = 0.313091 loss)
I0428 20:16:33.280706   680 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:33.399706   680 solver.cpp:219] Iteration 200 (840.271 iter/s, 0.119009s/100 iters), loss = 0.235059
I0428 20:16:33.399760   680 solver.cpp:238]     Train net output #0: loss = 0.235059 (* 1 = 0.235059 loss)
I0428 20:16:33.399775   680 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:33.527285   680 solver.cpp:219] Iteration 300 (784.205 iter/s, 0.127518s/100 iters), loss = 0.190444
I0428 20:16:33.527323   680 solver.cpp:238]     Train net output #0: loss = 0.190444 (* 1 = 0.190444 loss)
I0428 20:16:33.527330   680 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:33.646548   680 solver.cpp:219] Iteration 400 (838.827 iter/s, 0.119214s/100 iters), loss = 0.180769
I0428 20:16:33.646582   680 solver.cpp:238]     Train net output #0: loss = 0.180769 (* 1 = 0.180769 loss)
I0428 20:16:33.646590   680 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:33.768549   680 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:33.837023   687 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:33.839350   680 solver.cpp:398]     Test net output #0: accuracy = 0.9544
I0428 20:16:33.839377   680 solver.cpp:398]     Test net output #1: loss = 0.14972 (* 1 = 0.14972 loss)
I0428 20:16:33.840512   680 solver.cpp:219] Iteration 500 (515.687 iter/s, 0.193916s/100 iters), loss = 0.107888
I0428 20:16:33.840559   680 solver.cpp:238]     Train net output #0: loss = 0.107888 (* 1 = 0.107888 loss)
I0428 20:16:33.840567   680 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:33.961293   680 solver.cpp:219] Iteration 600 (828.339 iter/s, 0.120724s/100 iters), loss = 0.122269
I0428 20:16:33.961325   680 solver.cpp:238]     Train net output #0: loss = 0.122269 (* 1 = 0.122269 loss)
I0428 20:16:33.961333   680 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:34.083904   680 solver.cpp:219] Iteration 700 (815.883 iter/s, 0.122567s/100 iters), loss = 0.23178
I0428 20:16:34.083940   680 solver.cpp:238]     Train net output #0: loss = 0.23178 (* 1 = 0.23178 loss)
I0428 20:16:34.083948   680 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:34.206117   680 solver.cpp:219] Iteration 800 (818.557 iter/s, 0.122166s/100 iters), loss = 0.253831
I0428 20:16:34.206149   680 solver.cpp:238]     Train net output #0: loss = 0.253831 (* 1 = 0.253831 loss)
I0428 20:16:34.206157   680 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:34.325116   680 solver.cpp:219] Iteration 900 (840.646 iter/s, 0.118956s/100 iters), loss = 0.20838
I0428 20:16:34.325143   680 solver.cpp:238]     Train net output #0: loss = 0.20838 (* 1 = 0.20838 loss)
I0428 20:16:34.325150   680 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:34.363961   686 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:34.440062   680 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:34.441109   680 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:34.441853   680 solver.cpp:311] Iteration 1000, loss = 0.127335
I0428 20:16:34.441869   680 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:34.506366   687 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:34.508800   680 solver.cpp:398]     Test net output #0: accuracy = 0.9644
I0428 20:16:34.508843   680 solver.cpp:398]     Test net output #1: loss = 0.111082 (* 1 = 0.111082 loss)
I0428 20:16:34.508849   680 solver.cpp:316] Optimization Done.
I0428 20:16:34.508852   680 caffe.cpp:259] Optimization Done.
