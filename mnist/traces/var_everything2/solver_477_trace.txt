I0428 19:45:42.157603 25850 caffe.cpp:218] Using GPUs 0
I0428 19:45:42.198292 25850 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:42.717761 25850 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test477.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:42.717931 25850 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test477.prototxt
I0428 19:45:42.718312 25850 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:42.718335 25850 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:42.718435 25850 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:42.718542 25850 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:42.718672 25850 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:42.718703 25850 net.cpp:86] Creating Layer mnist
I0428 19:45:42.718717 25850 net.cpp:382] mnist -> data
I0428 19:45:42.718746 25850 net.cpp:382] mnist -> label
I0428 19:45:42.719965 25850 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:42.722460 25850 net.cpp:124] Setting up mnist
I0428 19:45:42.722479 25850 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:42.722491 25850 net.cpp:131] Top shape: 64 (64)
I0428 19:45:42.722497 25850 net.cpp:139] Memory required for data: 200960
I0428 19:45:42.722507 25850 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:42.722532 25850 net.cpp:86] Creating Layer conv0
I0428 19:45:42.722543 25850 net.cpp:408] conv0 <- data
I0428 19:45:42.722563 25850 net.cpp:382] conv0 -> conv0
I0428 19:45:43.007999 25850 net.cpp:124] Setting up conv0
I0428 19:45:43.008029 25850 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:43.008036 25850 net.cpp:139] Memory required for data: 495872
I0428 19:45:43.008081 25850 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:43.008102 25850 net.cpp:86] Creating Layer pool0
I0428 19:45:43.008111 25850 net.cpp:408] pool0 <- conv0
I0428 19:45:43.008121 25850 net.cpp:382] pool0 -> pool0
I0428 19:45:43.008175 25850 net.cpp:124] Setting up pool0
I0428 19:45:43.008184 25850 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:43.008190 25850 net.cpp:139] Memory required for data: 569600
I0428 19:45:43.008195 25850 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:43.008211 25850 net.cpp:86] Creating Layer conv1
I0428 19:45:43.008219 25850 net.cpp:408] conv1 <- pool0
I0428 19:45:43.008229 25850 net.cpp:382] conv1 -> conv1
I0428 19:45:43.010987 25850 net.cpp:124] Setting up conv1
I0428 19:45:43.011003 25850 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:43.011010 25850 net.cpp:139] Memory required for data: 2208000
I0428 19:45:43.011024 25850 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:43.011036 25850 net.cpp:86] Creating Layer pool1
I0428 19:45:43.011042 25850 net.cpp:408] pool1 <- conv1
I0428 19:45:43.011051 25850 net.cpp:382] pool1 -> pool1
I0428 19:45:43.011096 25850 net.cpp:124] Setting up pool1
I0428 19:45:43.011106 25850 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:43.011111 25850 net.cpp:139] Memory required for data: 2617600
I0428 19:45:43.011116 25850 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:43.011127 25850 net.cpp:86] Creating Layer ip1
I0428 19:45:43.011133 25850 net.cpp:408] ip1 <- pool1
I0428 19:45:43.011142 25850 net.cpp:382] ip1 -> ip1
I0428 19:45:43.012562 25850 net.cpp:124] Setting up ip1
I0428 19:45:43.012576 25850 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:43.012583 25850 net.cpp:139] Memory required for data: 2630400
I0428 19:45:43.012596 25850 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:43.012606 25850 net.cpp:86] Creating Layer relu1
I0428 19:45:43.012612 25850 net.cpp:408] relu1 <- ip1
I0428 19:45:43.012620 25850 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:43.012809 25850 net.cpp:124] Setting up relu1
I0428 19:45:43.012827 25850 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:43.012833 25850 net.cpp:139] Memory required for data: 2643200
I0428 19:45:43.012838 25850 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:43.012850 25850 net.cpp:86] Creating Layer ip2
I0428 19:45:43.012856 25850 net.cpp:408] ip2 <- ip1
I0428 19:45:43.012863 25850 net.cpp:382] ip2 -> ip2
I0428 19:45:43.013022 25850 net.cpp:124] Setting up ip2
I0428 19:45:43.013032 25850 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:43.013038 25850 net.cpp:139] Memory required for data: 2645760
I0428 19:45:43.013049 25850 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:43.013061 25850 net.cpp:86] Creating Layer relu2
I0428 19:45:43.013070 25850 net.cpp:408] relu2 <- ip2
I0428 19:45:43.013079 25850 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:43.013841 25850 net.cpp:124] Setting up relu2
I0428 19:45:43.013855 25850 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:43.013861 25850 net.cpp:139] Memory required for data: 2648320
I0428 19:45:43.013867 25850 layer_factory.hpp:77] Creating layer loss
I0428 19:45:43.013876 25850 net.cpp:86] Creating Layer loss
I0428 19:45:43.013882 25850 net.cpp:408] loss <- ip2
I0428 19:45:43.013890 25850 net.cpp:408] loss <- label
I0428 19:45:43.013898 25850 net.cpp:382] loss -> loss
I0428 19:45:43.013924 25850 layer_factory.hpp:77] Creating layer loss
I0428 19:45:43.014164 25850 net.cpp:124] Setting up loss
I0428 19:45:43.014175 25850 net.cpp:131] Top shape: (1)
I0428 19:45:43.014181 25850 net.cpp:134]     with loss weight 1
I0428 19:45:43.014201 25850 net.cpp:139] Memory required for data: 2648324
I0428 19:45:43.014207 25850 net.cpp:200] loss needs backward computation.
I0428 19:45:43.014214 25850 net.cpp:200] relu2 needs backward computation.
I0428 19:45:43.014219 25850 net.cpp:200] ip2 needs backward computation.
I0428 19:45:43.014225 25850 net.cpp:200] relu1 needs backward computation.
I0428 19:45:43.014230 25850 net.cpp:200] ip1 needs backward computation.
I0428 19:45:43.014248 25850 net.cpp:200] pool1 needs backward computation.
I0428 19:45:43.014253 25850 net.cpp:200] conv1 needs backward computation.
I0428 19:45:43.014259 25850 net.cpp:200] pool0 needs backward computation.
I0428 19:45:43.014264 25850 net.cpp:200] conv0 needs backward computation.
I0428 19:45:43.014271 25850 net.cpp:202] mnist does not need backward computation.
I0428 19:45:43.014276 25850 net.cpp:244] This network produces output loss
I0428 19:45:43.014288 25850 net.cpp:257] Network initialization done.
I0428 19:45:43.014581 25850 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test477.prototxt
I0428 19:45:43.014613 25850 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:43.014701 25850 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:43.014797 25850 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:43.014853 25850 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:43.014875 25850 net.cpp:86] Creating Layer mnist
I0428 19:45:43.014883 25850 net.cpp:382] mnist -> data
I0428 19:45:43.014894 25850 net.cpp:382] mnist -> label
I0428 19:45:43.015012 25850 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:43.016172 25850 net.cpp:124] Setting up mnist
I0428 19:45:43.016187 25850 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:43.016196 25850 net.cpp:131] Top shape: 100 (100)
I0428 19:45:43.016201 25850 net.cpp:139] Memory required for data: 314000
I0428 19:45:43.016206 25850 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:43.016221 25850 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:43.016227 25850 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:43.016235 25850 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:43.016247 25850 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:43.016332 25850 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:43.016350 25850 net.cpp:131] Top shape: 100 (100)
I0428 19:45:43.016357 25850 net.cpp:131] Top shape: 100 (100)
I0428 19:45:43.016362 25850 net.cpp:139] Memory required for data: 314800
I0428 19:45:43.016367 25850 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:43.016381 25850 net.cpp:86] Creating Layer conv0
I0428 19:45:43.016388 25850 net.cpp:408] conv0 <- data
I0428 19:45:43.016397 25850 net.cpp:382] conv0 -> conv0
I0428 19:45:43.017880 25850 net.cpp:124] Setting up conv0
I0428 19:45:43.017895 25850 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:43.017902 25850 net.cpp:139] Memory required for data: 775600
I0428 19:45:43.017917 25850 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:43.017926 25850 net.cpp:86] Creating Layer pool0
I0428 19:45:43.017932 25850 net.cpp:408] pool0 <- conv0
I0428 19:45:43.017940 25850 net.cpp:382] pool0 -> pool0
I0428 19:45:43.017992 25850 net.cpp:124] Setting up pool0
I0428 19:45:43.018002 25850 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:43.018007 25850 net.cpp:139] Memory required for data: 890800
I0428 19:45:43.018012 25850 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:43.018024 25850 net.cpp:86] Creating Layer conv1
I0428 19:45:43.018033 25850 net.cpp:408] conv1 <- pool0
I0428 19:45:43.018043 25850 net.cpp:382] conv1 -> conv1
I0428 19:45:43.019433 25850 net.cpp:124] Setting up conv1
I0428 19:45:43.019448 25850 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:43.019454 25850 net.cpp:139] Memory required for data: 3450800
I0428 19:45:43.019467 25850 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:43.019476 25850 net.cpp:86] Creating Layer pool1
I0428 19:45:43.019484 25850 net.cpp:408] pool1 <- conv1
I0428 19:45:43.019492 25850 net.cpp:382] pool1 -> pool1
I0428 19:45:43.019533 25850 net.cpp:124] Setting up pool1
I0428 19:45:43.019542 25850 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:43.019547 25850 net.cpp:139] Memory required for data: 4090800
I0428 19:45:43.019553 25850 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:43.019563 25850 net.cpp:86] Creating Layer ip1
I0428 19:45:43.019568 25850 net.cpp:408] ip1 <- pool1
I0428 19:45:43.019577 25850 net.cpp:382] ip1 -> ip1
I0428 19:45:43.020161 25850 net.cpp:124] Setting up ip1
I0428 19:45:43.020171 25850 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:43.020176 25850 net.cpp:139] Memory required for data: 4110800
I0428 19:45:43.020189 25850 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:43.020196 25850 net.cpp:86] Creating Layer relu1
I0428 19:45:43.020201 25850 net.cpp:408] relu1 <- ip1
I0428 19:45:43.020210 25850 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:43.020419 25850 net.cpp:124] Setting up relu1
I0428 19:45:43.020434 25850 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:43.020440 25850 net.cpp:139] Memory required for data: 4130800
I0428 19:45:43.020445 25850 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:43.020457 25850 net.cpp:86] Creating Layer ip2
I0428 19:45:43.020462 25850 net.cpp:408] ip2 <- ip1
I0428 19:45:43.020478 25850 net.cpp:382] ip2 -> ip2
I0428 19:45:43.020587 25850 net.cpp:124] Setting up ip2
I0428 19:45:43.020597 25850 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:43.020602 25850 net.cpp:139] Memory required for data: 4134800
I0428 19:45:43.020612 25850 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:43.020618 25850 net.cpp:86] Creating Layer relu2
I0428 19:45:43.020624 25850 net.cpp:408] relu2 <- ip2
I0428 19:45:43.020632 25850 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:43.020800 25850 net.cpp:124] Setting up relu2
I0428 19:45:43.020836 25850 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:43.020841 25850 net.cpp:139] Memory required for data: 4138800
I0428 19:45:43.020848 25850 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:45:43.020858 25850 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:45:43.020882 25850 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:45:43.020891 25850 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:45:43.020912 25850 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:45:43.020980 25850 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:45:43.020989 25850 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:43.020997 25850 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:43.021003 25850 net.cpp:139] Memory required for data: 4146800
I0428 19:45:43.021008 25850 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:43.021016 25850 net.cpp:86] Creating Layer accuracy
I0428 19:45:43.021026 25850 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:45:43.021034 25850 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:43.021042 25850 net.cpp:382] accuracy -> accuracy
I0428 19:45:43.021054 25850 net.cpp:124] Setting up accuracy
I0428 19:45:43.021062 25850 net.cpp:131] Top shape: (1)
I0428 19:45:43.021069 25850 net.cpp:139] Memory required for data: 4146804
I0428 19:45:43.021075 25850 layer_factory.hpp:77] Creating layer loss
I0428 19:45:43.021083 25850 net.cpp:86] Creating Layer loss
I0428 19:45:43.021090 25850 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:45:43.021096 25850 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:43.021106 25850 net.cpp:382] loss -> loss
I0428 19:45:43.021117 25850 layer_factory.hpp:77] Creating layer loss
I0428 19:45:43.021428 25850 net.cpp:124] Setting up loss
I0428 19:45:43.021438 25850 net.cpp:131] Top shape: (1)
I0428 19:45:43.021445 25850 net.cpp:134]     with loss weight 1
I0428 19:45:43.021453 25850 net.cpp:139] Memory required for data: 4146808
I0428 19:45:43.021458 25850 net.cpp:200] loss needs backward computation.
I0428 19:45:43.021466 25850 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:43.021471 25850 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:45:43.021476 25850 net.cpp:200] relu2 needs backward computation.
I0428 19:45:43.021481 25850 net.cpp:200] ip2 needs backward computation.
I0428 19:45:43.021486 25850 net.cpp:200] relu1 needs backward computation.
I0428 19:45:43.021492 25850 net.cpp:200] ip1 needs backward computation.
I0428 19:45:43.021497 25850 net.cpp:200] pool1 needs backward computation.
I0428 19:45:43.021502 25850 net.cpp:200] conv1 needs backward computation.
I0428 19:45:43.021507 25850 net.cpp:200] pool0 needs backward computation.
I0428 19:45:43.021512 25850 net.cpp:200] conv0 needs backward computation.
I0428 19:45:43.021517 25850 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:43.021522 25850 net.cpp:202] mnist does not need backward computation.
I0428 19:45:43.021528 25850 net.cpp:244] This network produces output accuracy
I0428 19:45:43.021533 25850 net.cpp:244] This network produces output loss
I0428 19:45:43.021549 25850 net.cpp:257] Network initialization done.
I0428 19:45:43.021592 25850 solver.cpp:56] Solver scaffolding done.
I0428 19:45:43.021863 25850 caffe.cpp:248] Starting Optimization
I0428 19:45:43.021870 25850 solver.cpp:273] Solving LeNet
I0428 19:45:43.021875 25850 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:43.022621 25850 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:43.026932 25850 blocking_queue.cpp:49] Waiting for data
I0428 19:45:43.097307 25857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:43.097879 25850 solver.cpp:398]     Test net output #0: accuracy = 0.0951
I0428 19:45:43.097900 25850 solver.cpp:398]     Test net output #1: loss = 2.30027 (* 1 = 2.30027 loss)
I0428 19:45:43.101546 25850 solver.cpp:219] Iteration 0 (0 iter/s, 0.0796372s/100 iters), loss = 2.29861
I0428 19:45:43.101572 25850 solver.cpp:238]     Train net output #0: loss = 2.29861 (* 1 = 2.29861 loss)
I0428 19:45:43.101603 25850 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:43.244911 25850 solver.cpp:219] Iteration 100 (697.709 iter/s, 0.143326s/100 iters), loss = 1.10086
I0428 19:45:43.244941 25850 solver.cpp:238]     Train net output #0: loss = 1.10086 (* 1 = 1.10086 loss)
I0428 19:45:43.244967 25850 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:43.386791 25850 solver.cpp:219] Iteration 200 (705.033 iter/s, 0.141837s/100 iters), loss = 1.00642
I0428 19:45:43.386831 25850 solver.cpp:238]     Train net output #0: loss = 1.00642 (* 1 = 1.00642 loss)
I0428 19:45:43.386855 25850 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:43.528167 25850 solver.cpp:219] Iteration 300 (707.577 iter/s, 0.141327s/100 iters), loss = 0.45314
I0428 19:45:43.528194 25850 solver.cpp:238]     Train net output #0: loss = 0.45314 (* 1 = 0.45314 loss)
I0428 19:45:43.528219 25850 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:43.669646 25850 solver.cpp:219] Iteration 400 (707.008 iter/s, 0.141441s/100 iters), loss = 0.300801
I0428 19:45:43.669677 25850 solver.cpp:238]     Train net output #0: loss = 0.300801 (* 1 = 0.300801 loss)
I0428 19:45:43.669687 25850 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:43.832103 25850 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:43.889233 25857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:43.891113 25850 solver.cpp:398]     Test net output #0: accuracy = 0.8734
I0428 19:45:43.891145 25850 solver.cpp:398]     Test net output #1: loss = 0.361481 (* 1 = 0.361481 loss)
I0428 19:45:43.892647 25850 solver.cpp:219] Iteration 500 (448.518 iter/s, 0.222957s/100 iters), loss = 0.43033
I0428 19:45:43.892685 25850 solver.cpp:238]     Train net output #0: loss = 0.43033 (* 1 = 0.43033 loss)
I0428 19:45:43.892700 25850 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:44.061864 25850 solver.cpp:219] Iteration 600 (591.132 iter/s, 0.169167s/100 iters), loss = 0.239069
I0428 19:45:44.061916 25850 solver.cpp:238]     Train net output #0: loss = 0.239069 (* 1 = 0.239069 loss)
I0428 19:45:44.061934 25850 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:44.236806 25850 solver.cpp:219] Iteration 700 (571.821 iter/s, 0.17488s/100 iters), loss = 0.603794
I0428 19:45:44.236868 25850 solver.cpp:238]     Train net output #0: loss = 0.603794 (* 1 = 0.603794 loss)
I0428 19:45:44.236887 25850 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:44.405676 25850 solver.cpp:219] Iteration 800 (592.42 iter/s, 0.168799s/100 iters), loss = 0.419008
I0428 19:45:44.405726 25850 solver.cpp:238]     Train net output #0: loss = 0.419008 (* 1 = 0.419008 loss)
I0428 19:45:44.405743 25850 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:44.573473 25850 solver.cpp:219] Iteration 900 (596.17 iter/s, 0.167737s/100 iters), loss = 0.311045
I0428 19:45:44.573518 25850 solver.cpp:238]     Train net output #0: loss = 0.311045 (* 1 = 0.311045 loss)
I0428 19:45:44.573535 25850 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:44.629886 25856 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:44.744102 25850 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:44.747354 25850 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:44.749019 25850 solver.cpp:311] Iteration 1000, loss = 0.519397
I0428 19:45:44.749047 25850 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:44.805022 25857 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:44.806843 25850 solver.cpp:398]     Test net output #0: accuracy = 0.8891
I0428 19:45:44.806870 25850 solver.cpp:398]     Test net output #1: loss = 0.292507 (* 1 = 0.292507 loss)
I0428 19:45:44.806881 25850 solver.cpp:316] Optimization Done.
I0428 19:45:44.806887 25850 caffe.cpp:259] Optimization Done.
