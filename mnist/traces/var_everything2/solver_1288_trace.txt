I0428 20:17:10.150578   812 caffe.cpp:218] Using GPUs 0
I0428 20:17:10.180670   812 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:10.626041   812 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1288.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:10.626168   812 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1288.prototxt
I0428 20:17:10.626466   812 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:10.626480   812 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:10.626546   812 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:17:10.626600   812 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:10.626683   812 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:10.626734   812 net.cpp:86] Creating Layer mnist
I0428 20:17:10.626740   812 net.cpp:382] mnist -> data
I0428 20:17:10.626758   812 net.cpp:382] mnist -> label
I0428 20:17:10.627768   812 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:10.630168   812 net.cpp:124] Setting up mnist
I0428 20:17:10.630198   812 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:10.630203   812 net.cpp:131] Top shape: 64 (64)
I0428 20:17:10.630208   812 net.cpp:139] Memory required for data: 200960
I0428 20:17:10.630213   812 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:10.630225   812 net.cpp:86] Creating Layer conv0
I0428 20:17:10.630230   812 net.cpp:408] conv0 <- data
I0428 20:17:10.630239   812 net.cpp:382] conv0 -> conv0
I0428 20:17:10.859302   812 net.cpp:124] Setting up conv0
I0428 20:17:10.859344   812 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:10.859349   812 net.cpp:139] Memory required for data: 7573760
I0428 20:17:10.859362   812 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:10.859376   812 net.cpp:86] Creating Layer pool0
I0428 20:17:10.859380   812 net.cpp:408] pool0 <- conv0
I0428 20:17:10.859385   812 net.cpp:382] pool0 -> pool0
I0428 20:17:10.859447   812 net.cpp:124] Setting up pool0
I0428 20:17:10.859453   812 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:10.859472   812 net.cpp:139] Memory required for data: 9416960
I0428 20:17:10.859474   812 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:10.859486   812 net.cpp:86] Creating Layer conv1
I0428 20:17:10.859489   812 net.cpp:408] conv1 <- pool0
I0428 20:17:10.859495   812 net.cpp:382] conv1 -> conv1
I0428 20:17:10.862380   812 net.cpp:124] Setting up conv1
I0428 20:17:10.862408   812 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:10.862412   812 net.cpp:139] Memory required for data: 9580800
I0428 20:17:10.862421   812 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:10.862431   812 net.cpp:86] Creating Layer pool1
I0428 20:17:10.862433   812 net.cpp:408] pool1 <- conv1
I0428 20:17:10.862439   812 net.cpp:382] pool1 -> pool1
I0428 20:17:10.862501   812 net.cpp:124] Setting up pool1
I0428 20:17:10.862507   812 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:10.862509   812 net.cpp:139] Memory required for data: 9621760
I0428 20:17:10.862512   812 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:10.862520   812 net.cpp:86] Creating Layer ip1
I0428 20:17:10.862522   812 net.cpp:408] ip1 <- pool1
I0428 20:17:10.862526   812 net.cpp:382] ip1 -> ip1
I0428 20:17:10.862644   812 net.cpp:124] Setting up ip1
I0428 20:17:10.862653   812 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:10.862655   812 net.cpp:139] Memory required for data: 9624320
I0428 20:17:10.862663   812 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:10.862668   812 net.cpp:86] Creating Layer relu1
I0428 20:17:10.862673   812 net.cpp:408] relu1 <- ip1
I0428 20:17:10.862676   812 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:10.862875   812 net.cpp:124] Setting up relu1
I0428 20:17:10.862885   812 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:10.862889   812 net.cpp:139] Memory required for data: 9626880
I0428 20:17:10.862891   812 layer_factory.hpp:77] Creating layer loss
I0428 20:17:10.862901   812 net.cpp:86] Creating Layer loss
I0428 20:17:10.862905   812 net.cpp:408] loss <- ip1
I0428 20:17:10.862908   812 net.cpp:408] loss <- label
I0428 20:17:10.862912   812 net.cpp:382] loss -> loss
I0428 20:17:10.862926   812 layer_factory.hpp:77] Creating layer loss
I0428 20:17:10.863747   812 net.cpp:124] Setting up loss
I0428 20:17:10.863759   812 net.cpp:131] Top shape: (1)
I0428 20:17:10.863780   812 net.cpp:134]     with loss weight 1
I0428 20:17:10.863795   812 net.cpp:139] Memory required for data: 9626884
I0428 20:17:10.863797   812 net.cpp:200] loss needs backward computation.
I0428 20:17:10.863801   812 net.cpp:200] relu1 needs backward computation.
I0428 20:17:10.863803   812 net.cpp:200] ip1 needs backward computation.
I0428 20:17:10.863806   812 net.cpp:200] pool1 needs backward computation.
I0428 20:17:10.863809   812 net.cpp:200] conv1 needs backward computation.
I0428 20:17:10.863812   812 net.cpp:200] pool0 needs backward computation.
I0428 20:17:10.863816   812 net.cpp:200] conv0 needs backward computation.
I0428 20:17:10.863819   812 net.cpp:202] mnist does not need backward computation.
I0428 20:17:10.863822   812 net.cpp:244] This network produces output loss
I0428 20:17:10.863829   812 net.cpp:257] Network initialization done.
I0428 20:17:10.864102   812 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1288.prototxt
I0428 20:17:10.864127   812 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:10.864217   812 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:17:10.864293   812 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:10.864334   812 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:10.864348   812 net.cpp:86] Creating Layer mnist
I0428 20:17:10.864352   812 net.cpp:382] mnist -> data
I0428 20:17:10.864359   812 net.cpp:382] mnist -> label
I0428 20:17:10.864464   812 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:10.866439   812 net.cpp:124] Setting up mnist
I0428 20:17:10.866468   812 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:10.866473   812 net.cpp:131] Top shape: 100 (100)
I0428 20:17:10.866477   812 net.cpp:139] Memory required for data: 314000
I0428 20:17:10.866480   812 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:10.866513   812 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:10.866518   812 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:10.866523   812 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:10.866530   812 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:10.866580   812 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:10.866585   812 net.cpp:131] Top shape: 100 (100)
I0428 20:17:10.866588   812 net.cpp:131] Top shape: 100 (100)
I0428 20:17:10.866591   812 net.cpp:139] Memory required for data: 314800
I0428 20:17:10.866595   812 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:10.866602   812 net.cpp:86] Creating Layer conv0
I0428 20:17:10.866605   812 net.cpp:408] conv0 <- data
I0428 20:17:10.866611   812 net.cpp:382] conv0 -> conv0
I0428 20:17:10.867620   812 net.cpp:124] Setting up conv0
I0428 20:17:10.867632   812 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:10.867636   812 net.cpp:139] Memory required for data: 11834800
I0428 20:17:10.867645   812 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:10.867667   812 net.cpp:86] Creating Layer pool0
I0428 20:17:10.867671   812 net.cpp:408] pool0 <- conv0
I0428 20:17:10.867676   812 net.cpp:382] pool0 -> pool0
I0428 20:17:10.867710   812 net.cpp:124] Setting up pool0
I0428 20:17:10.867715   812 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:10.867717   812 net.cpp:139] Memory required for data: 14714800
I0428 20:17:10.867720   812 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:10.867729   812 net.cpp:86] Creating Layer conv1
I0428 20:17:10.867733   812 net.cpp:408] conv1 <- pool0
I0428 20:17:10.867738   812 net.cpp:382] conv1 -> conv1
I0428 20:17:10.869491   812 net.cpp:124] Setting up conv1
I0428 20:17:10.869505   812 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:10.869509   812 net.cpp:139] Memory required for data: 14970800
I0428 20:17:10.869518   812 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:10.869524   812 net.cpp:86] Creating Layer pool1
I0428 20:17:10.869551   812 net.cpp:408] pool1 <- conv1
I0428 20:17:10.869559   812 net.cpp:382] pool1 -> pool1
I0428 20:17:10.869611   812 net.cpp:124] Setting up pool1
I0428 20:17:10.869617   812 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:10.869621   812 net.cpp:139] Memory required for data: 15034800
I0428 20:17:10.869623   812 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:10.869632   812 net.cpp:86] Creating Layer ip1
I0428 20:17:10.869635   812 net.cpp:408] ip1 <- pool1
I0428 20:17:10.869642   812 net.cpp:382] ip1 -> ip1
I0428 20:17:10.869765   812 net.cpp:124] Setting up ip1
I0428 20:17:10.869772   812 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:10.869776   812 net.cpp:139] Memory required for data: 15038800
I0428 20:17:10.869782   812 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:10.869787   812 net.cpp:86] Creating Layer relu1
I0428 20:17:10.869791   812 net.cpp:408] relu1 <- ip1
I0428 20:17:10.869796   812 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:10.870571   812 net.cpp:124] Setting up relu1
I0428 20:17:10.870584   812 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:10.870586   812 net.cpp:139] Memory required for data: 15042800
I0428 20:17:10.870590   812 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:17:10.870597   812 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:17:10.870600   812 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:17:10.870606   812 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:17:10.870612   812 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:17:10.870662   812 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:17:10.870668   812 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:10.870674   812 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:10.870677   812 net.cpp:139] Memory required for data: 15050800
I0428 20:17:10.870681   812 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:10.870685   812 net.cpp:86] Creating Layer accuracy
I0428 20:17:10.870689   812 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:17:10.870693   812 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:10.870697   812 net.cpp:382] accuracy -> accuracy
I0428 20:17:10.870704   812 net.cpp:124] Setting up accuracy
I0428 20:17:10.870708   812 net.cpp:131] Top shape: (1)
I0428 20:17:10.870712   812 net.cpp:139] Memory required for data: 15050804
I0428 20:17:10.870713   812 layer_factory.hpp:77] Creating layer loss
I0428 20:17:10.870719   812 net.cpp:86] Creating Layer loss
I0428 20:17:10.870723   812 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:17:10.870726   812 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:10.870730   812 net.cpp:382] loss -> loss
I0428 20:17:10.870735   812 layer_factory.hpp:77] Creating layer loss
I0428 20:17:10.870998   812 net.cpp:124] Setting up loss
I0428 20:17:10.871008   812 net.cpp:131] Top shape: (1)
I0428 20:17:10.871012   812 net.cpp:134]     with loss weight 1
I0428 20:17:10.871018   812 net.cpp:139] Memory required for data: 15050808
I0428 20:17:10.871021   812 net.cpp:200] loss needs backward computation.
I0428 20:17:10.871026   812 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:10.871029   812 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:17:10.871044   812 net.cpp:200] relu1 needs backward computation.
I0428 20:17:10.871047   812 net.cpp:200] ip1 needs backward computation.
I0428 20:17:10.871050   812 net.cpp:200] pool1 needs backward computation.
I0428 20:17:10.871058   812 net.cpp:200] conv1 needs backward computation.
I0428 20:17:10.871062   812 net.cpp:200] pool0 needs backward computation.
I0428 20:17:10.871064   812 net.cpp:200] conv0 needs backward computation.
I0428 20:17:10.871068   812 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:10.871076   812 net.cpp:202] mnist does not need backward computation.
I0428 20:17:10.871079   812 net.cpp:244] This network produces output accuracy
I0428 20:17:10.871083   812 net.cpp:244] This network produces output loss
I0428 20:17:10.871101   812 net.cpp:257] Network initialization done.
I0428 20:17:10.871134   812 solver.cpp:56] Solver scaffolding done.
I0428 20:17:10.871346   812 caffe.cpp:248] Starting Optimization
I0428 20:17:10.871353   812 solver.cpp:273] Solving LeNet
I0428 20:17:10.871356   812 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:10.871457   812 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:10.877421   812 blocking_queue.cpp:49] Waiting for data
I0428 20:17:10.950911   820 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:10.951611   812 solver.cpp:398]     Test net output #0: accuracy = 0.1301
I0428 20:17:10.951632   812 solver.cpp:398]     Test net output #1: loss = 2.32482 (* 1 = 2.32482 loss)
I0428 20:17:10.955771   812 solver.cpp:219] Iteration 0 (0 iter/s, 0.084389s/100 iters), loss = 2.38265
I0428 20:17:10.955804   812 solver.cpp:238]     Train net output #0: loss = 2.38265 (* 1 = 2.38265 loss)
I0428 20:17:10.955816   812 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:11.074407   812 solver.cpp:219] Iteration 100 (843.268 iter/s, 0.118586s/100 iters), loss = 0.348109
I0428 20:17:11.074434   812 solver.cpp:238]     Train net output #0: loss = 0.348109 (* 1 = 0.348109 loss)
I0428 20:17:11.074455   812 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:11.183743   812 solver.cpp:219] Iteration 200 (914.941 iter/s, 0.109297s/100 iters), loss = 0.234484
I0428 20:17:11.183784   812 solver.cpp:238]     Train net output #0: loss = 0.234484 (* 1 = 0.234484 loss)
I0428 20:17:11.183791   812 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:11.291615   812 solver.cpp:219] Iteration 300 (927.471 iter/s, 0.10782s/100 iters), loss = 0.177985
I0428 20:17:11.291656   812 solver.cpp:238]     Train net output #0: loss = 0.177985 (* 1 = 0.177985 loss)
I0428 20:17:11.291662   812 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:11.399770   812 solver.cpp:219] Iteration 400 (925.054 iter/s, 0.108102s/100 iters), loss = 0.108316
I0428 20:17:11.399796   812 solver.cpp:238]     Train net output #0: loss = 0.108316 (* 1 = 0.108316 loss)
I0428 20:17:11.399802   812 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:11.506584   812 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:11.582492   820 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:11.583184   812 solver.cpp:398]     Test net output #0: accuracy = 0.9635
I0428 20:17:11.583206   812 solver.cpp:398]     Test net output #1: loss = 0.121357 (* 1 = 0.121357 loss)
I0428 20:17:11.584328   812 solver.cpp:219] Iteration 500 (541.954 iter/s, 0.184518s/100 iters), loss = 0.153036
I0428 20:17:11.584384   812 solver.cpp:238]     Train net output #0: loss = 0.153036 (* 1 = 0.153036 loss)
I0428 20:17:11.584393   812 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:11.701010   812 solver.cpp:219] Iteration 600 (857.411 iter/s, 0.11663s/100 iters), loss = 0.111582
I0428 20:17:11.701052   812 solver.cpp:238]     Train net output #0: loss = 0.111582 (* 1 = 0.111582 loss)
I0428 20:17:11.701059   812 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:11.810348   812 solver.cpp:219] Iteration 700 (915.044 iter/s, 0.109284s/100 iters), loss = 0.172982
I0428 20:17:11.810390   812 solver.cpp:238]     Train net output #0: loss = 0.172982 (* 1 = 0.172982 loss)
I0428 20:17:11.810396   812 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:11.919366   812 solver.cpp:219] Iteration 800 (917.719 iter/s, 0.108966s/100 iters), loss = 0.208357
I0428 20:17:11.919407   812 solver.cpp:238]     Train net output #0: loss = 0.208357 (* 1 = 0.208357 loss)
I0428 20:17:11.919414   812 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:12.028633   812 solver.cpp:219] Iteration 900 (915.49 iter/s, 0.109231s/100 iters), loss = 0.181883
I0428 20:17:12.028674   812 solver.cpp:238]     Train net output #0: loss = 0.181883 (* 1 = 0.181883 loss)
I0428 20:17:12.028681   812 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:12.064990   818 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:12.136667   812 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:12.137657   812 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:12.138341   812 solver.cpp:311] Iteration 1000, loss = 0.0821517
I0428 20:17:12.138357   812 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:12.215131   820 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:12.216083   812 solver.cpp:398]     Test net output #0: accuracy = 0.9737
I0428 20:17:12.216116   812 solver.cpp:398]     Test net output #1: loss = 0.0815865 (* 1 = 0.0815865 loss)
I0428 20:17:12.216126   812 solver.cpp:316] Optimization Done.
I0428 20:17:12.216131   812 caffe.cpp:259] Optimization Done.
