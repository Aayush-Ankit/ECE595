I0428 20:14:58.970717   339 caffe.cpp:218] Using GPUs 0
I0428 20:14:58.999487   339 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:59.453969   339 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1235.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:59.454119   339 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1235.prototxt
I0428 20:14:59.454505   339 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:59.454537   339 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:59.454622   339 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:59.454689   339 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:59.454784   339 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:59.454804   339 net.cpp:86] Creating Layer mnist
I0428 20:14:59.454812   339 net.cpp:382] mnist -> data
I0428 20:14:59.454830   339 net.cpp:382] mnist -> label
I0428 20:14:59.455919   339 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:59.458158   339 net.cpp:124] Setting up mnist
I0428 20:14:59.458189   339 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:59.458214   339 net.cpp:131] Top shape: 64 (64)
I0428 20:14:59.458217   339 net.cpp:139] Memory required for data: 200960
I0428 20:14:59.458223   339 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:59.458235   339 net.cpp:86] Creating Layer conv0
I0428 20:14:59.458252   339 net.cpp:408] conv0 <- data
I0428 20:14:59.458263   339 net.cpp:382] conv0 -> conv0
I0428 20:14:59.691628   339 net.cpp:124] Setting up conv0
I0428 20:14:59.691653   339 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:59.691658   339 net.cpp:139] Memory required for data: 7573760
I0428 20:14:59.691687   339 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:59.691699   339 net.cpp:86] Creating Layer pool0
I0428 20:14:59.691704   339 net.cpp:408] pool0 <- conv0
I0428 20:14:59.691709   339 net.cpp:382] pool0 -> pool0
I0428 20:14:59.691752   339 net.cpp:124] Setting up pool0
I0428 20:14:59.691759   339 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:59.691762   339 net.cpp:139] Memory required for data: 9416960
I0428 20:14:59.691766   339 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:59.691776   339 net.cpp:86] Creating Layer conv1
I0428 20:14:59.691779   339 net.cpp:408] conv1 <- pool0
I0428 20:14:59.691784   339 net.cpp:382] conv1 -> conv1
I0428 20:14:59.693717   339 net.cpp:124] Setting up conv1
I0428 20:14:59.693732   339 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:59.693735   339 net.cpp:139] Memory required for data: 9449728
I0428 20:14:59.693743   339 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:59.693752   339 net.cpp:86] Creating Layer pool1
I0428 20:14:59.693755   339 net.cpp:408] pool1 <- conv1
I0428 20:14:59.693760   339 net.cpp:382] pool1 -> pool1
I0428 20:14:59.693796   339 net.cpp:124] Setting up pool1
I0428 20:14:59.693804   339 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:59.693806   339 net.cpp:139] Memory required for data: 9457920
I0428 20:14:59.693809   339 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:59.693816   339 net.cpp:86] Creating Layer ip1
I0428 20:14:59.693819   339 net.cpp:408] ip1 <- pool1
I0428 20:14:59.693825   339 net.cpp:382] ip1 -> ip1
I0428 20:14:59.693927   339 net.cpp:124] Setting up ip1
I0428 20:14:59.693934   339 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:59.693938   339 net.cpp:139] Memory required for data: 9464320
I0428 20:14:59.693944   339 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:59.693949   339 net.cpp:86] Creating Layer relu1
I0428 20:14:59.693953   339 net.cpp:408] relu1 <- ip1
I0428 20:14:59.693958   339 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:59.694129   339 net.cpp:124] Setting up relu1
I0428 20:14:59.694139   339 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:59.694141   339 net.cpp:139] Memory required for data: 9470720
I0428 20:14:59.694145   339 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:59.694151   339 net.cpp:86] Creating Layer ip2
I0428 20:14:59.694154   339 net.cpp:408] ip2 <- ip1
I0428 20:14:59.694159   339 net.cpp:382] ip2 -> ip2
I0428 20:14:59.694283   339 net.cpp:124] Setting up ip2
I0428 20:14:59.694289   339 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:59.694293   339 net.cpp:139] Memory required for data: 9477120
I0428 20:14:59.694298   339 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:59.694303   339 net.cpp:86] Creating Layer relu2
I0428 20:14:59.694306   339 net.cpp:408] relu2 <- ip2
I0428 20:14:59.694310   339 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:59.695149   339 net.cpp:124] Setting up relu2
I0428 20:14:59.695163   339 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:59.695166   339 net.cpp:139] Memory required for data: 9483520
I0428 20:14:59.695170   339 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:59.695178   339 net.cpp:86] Creating Layer ip3
I0428 20:14:59.695183   339 net.cpp:408] ip3 <- ip2
I0428 20:14:59.695188   339 net.cpp:382] ip3 -> ip3
I0428 20:14:59.695286   339 net.cpp:124] Setting up ip3
I0428 20:14:59.695293   339 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:59.695297   339 net.cpp:139] Memory required for data: 9486080
I0428 20:14:59.695304   339 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:59.695310   339 net.cpp:86] Creating Layer relu3
I0428 20:14:59.695313   339 net.cpp:408] relu3 <- ip3
I0428 20:14:59.695319   339 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:59.695515   339 net.cpp:124] Setting up relu3
I0428 20:14:59.695524   339 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:59.695528   339 net.cpp:139] Memory required for data: 9488640
I0428 20:14:59.695530   339 layer_factory.hpp:77] Creating layer loss
I0428 20:14:59.695536   339 net.cpp:86] Creating Layer loss
I0428 20:14:59.695538   339 net.cpp:408] loss <- ip3
I0428 20:14:59.695544   339 net.cpp:408] loss <- label
I0428 20:14:59.695549   339 net.cpp:382] loss -> loss
I0428 20:14:59.695564   339 layer_factory.hpp:77] Creating layer loss
I0428 20:14:59.695821   339 net.cpp:124] Setting up loss
I0428 20:14:59.695830   339 net.cpp:131] Top shape: (1)
I0428 20:14:59.695833   339 net.cpp:134]     with loss weight 1
I0428 20:14:59.695848   339 net.cpp:139] Memory required for data: 9488644
I0428 20:14:59.695852   339 net.cpp:200] loss needs backward computation.
I0428 20:14:59.695855   339 net.cpp:200] relu3 needs backward computation.
I0428 20:14:59.695858   339 net.cpp:200] ip3 needs backward computation.
I0428 20:14:59.695860   339 net.cpp:200] relu2 needs backward computation.
I0428 20:14:59.695863   339 net.cpp:200] ip2 needs backward computation.
I0428 20:14:59.695865   339 net.cpp:200] relu1 needs backward computation.
I0428 20:14:59.695868   339 net.cpp:200] ip1 needs backward computation.
I0428 20:14:59.695871   339 net.cpp:200] pool1 needs backward computation.
I0428 20:14:59.695874   339 net.cpp:200] conv1 needs backward computation.
I0428 20:14:59.695876   339 net.cpp:200] pool0 needs backward computation.
I0428 20:14:59.695879   339 net.cpp:200] conv0 needs backward computation.
I0428 20:14:59.695883   339 net.cpp:202] mnist does not need backward computation.
I0428 20:14:59.695885   339 net.cpp:244] This network produces output loss
I0428 20:14:59.695894   339 net.cpp:257] Network initialization done.
I0428 20:14:59.696238   339 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1235.prototxt
I0428 20:14:59.696265   339 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:59.696352   339 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:59.696427   339 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:59.696488   339 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:59.696501   339 net.cpp:86] Creating Layer mnist
I0428 20:14:59.696506   339 net.cpp:382] mnist -> data
I0428 20:14:59.696514   339 net.cpp:382] mnist -> label
I0428 20:14:59.696597   339 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:59.698612   339 net.cpp:124] Setting up mnist
I0428 20:14:59.698631   339 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:59.698637   339 net.cpp:131] Top shape: 100 (100)
I0428 20:14:59.698640   339 net.cpp:139] Memory required for data: 314000
I0428 20:14:59.698644   339 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:59.698652   339 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:59.698654   339 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:59.698659   339 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:59.698667   339 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:59.698801   339 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:59.698808   339 net.cpp:131] Top shape: 100 (100)
I0428 20:14:59.698812   339 net.cpp:131] Top shape: 100 (100)
I0428 20:14:59.698815   339 net.cpp:139] Memory required for data: 314800
I0428 20:14:59.698818   339 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:59.698827   339 net.cpp:86] Creating Layer conv0
I0428 20:14:59.698829   339 net.cpp:408] conv0 <- data
I0428 20:14:59.698834   339 net.cpp:382] conv0 -> conv0
I0428 20:14:59.700423   339 net.cpp:124] Setting up conv0
I0428 20:14:59.700435   339 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:59.700439   339 net.cpp:139] Memory required for data: 11834800
I0428 20:14:59.700448   339 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:59.700469   339 net.cpp:86] Creating Layer pool0
I0428 20:14:59.700471   339 net.cpp:408] pool0 <- conv0
I0428 20:14:59.700476   339 net.cpp:382] pool0 -> pool0
I0428 20:14:59.700510   339 net.cpp:124] Setting up pool0
I0428 20:14:59.700513   339 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:59.700516   339 net.cpp:139] Memory required for data: 14714800
I0428 20:14:59.700520   339 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:59.700526   339 net.cpp:86] Creating Layer conv1
I0428 20:14:59.700529   339 net.cpp:408] conv1 <- pool0
I0428 20:14:59.700534   339 net.cpp:382] conv1 -> conv1
I0428 20:14:59.702096   339 net.cpp:124] Setting up conv1
I0428 20:14:59.702109   339 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:59.702114   339 net.cpp:139] Memory required for data: 14766000
I0428 20:14:59.702122   339 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:59.702128   339 net.cpp:86] Creating Layer pool1
I0428 20:14:59.702132   339 net.cpp:408] pool1 <- conv1
I0428 20:14:59.702137   339 net.cpp:382] pool1 -> pool1
I0428 20:14:59.702178   339 net.cpp:124] Setting up pool1
I0428 20:14:59.702183   339 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:59.702186   339 net.cpp:139] Memory required for data: 14778800
I0428 20:14:59.702189   339 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:59.702200   339 net.cpp:86] Creating Layer ip1
I0428 20:14:59.702203   339 net.cpp:408] ip1 <- pool1
I0428 20:14:59.702208   339 net.cpp:382] ip1 -> ip1
I0428 20:14:59.702306   339 net.cpp:124] Setting up ip1
I0428 20:14:59.702313   339 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:59.702328   339 net.cpp:139] Memory required for data: 14788800
I0428 20:14:59.702340   339 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:59.702348   339 net.cpp:86] Creating Layer relu1
I0428 20:14:59.702354   339 net.cpp:408] relu1 <- ip1
I0428 20:14:59.702361   339 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:59.702527   339 net.cpp:124] Setting up relu1
I0428 20:14:59.702536   339 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:59.702539   339 net.cpp:139] Memory required for data: 14798800
I0428 20:14:59.702543   339 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:59.702549   339 net.cpp:86] Creating Layer ip2
I0428 20:14:59.702553   339 net.cpp:408] ip2 <- ip1
I0428 20:14:59.702564   339 net.cpp:382] ip2 -> ip2
I0428 20:14:59.702659   339 net.cpp:124] Setting up ip2
I0428 20:14:59.702666   339 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:59.702669   339 net.cpp:139] Memory required for data: 14808800
I0428 20:14:59.702674   339 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:59.702678   339 net.cpp:86] Creating Layer relu2
I0428 20:14:59.702682   339 net.cpp:408] relu2 <- ip2
I0428 20:14:59.702687   339 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:59.702826   339 net.cpp:124] Setting up relu2
I0428 20:14:59.702834   339 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:59.702837   339 net.cpp:139] Memory required for data: 14818800
I0428 20:14:59.702841   339 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:59.702847   339 net.cpp:86] Creating Layer ip3
I0428 20:14:59.702849   339 net.cpp:408] ip3 <- ip2
I0428 20:14:59.702853   339 net.cpp:382] ip3 -> ip3
I0428 20:14:59.702941   339 net.cpp:124] Setting up ip3
I0428 20:14:59.702947   339 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:59.702951   339 net.cpp:139] Memory required for data: 14822800
I0428 20:14:59.702970   339 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:59.702975   339 net.cpp:86] Creating Layer relu3
I0428 20:14:59.702982   339 net.cpp:408] relu3 <- ip3
I0428 20:14:59.702986   339 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:59.703744   339 net.cpp:124] Setting up relu3
I0428 20:14:59.703757   339 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:59.703760   339 net.cpp:139] Memory required for data: 14826800
I0428 20:14:59.703763   339 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:59.703768   339 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:59.703771   339 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:59.703776   339 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:59.703783   339 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:59.703820   339 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:59.703825   339 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:59.703829   339 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:59.703831   339 net.cpp:139] Memory required for data: 14834800
I0428 20:14:59.703835   339 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:59.703838   339 net.cpp:86] Creating Layer accuracy
I0428 20:14:59.703841   339 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:59.703845   339 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:59.703850   339 net.cpp:382] accuracy -> accuracy
I0428 20:14:59.703855   339 net.cpp:124] Setting up accuracy
I0428 20:14:59.703866   339 net.cpp:131] Top shape: (1)
I0428 20:14:59.703868   339 net.cpp:139] Memory required for data: 14834804
I0428 20:14:59.703871   339 layer_factory.hpp:77] Creating layer loss
I0428 20:14:59.703874   339 net.cpp:86] Creating Layer loss
I0428 20:14:59.703882   339 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:59.703886   339 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:59.703891   339 net.cpp:382] loss -> loss
I0428 20:14:59.703896   339 layer_factory.hpp:77] Creating layer loss
I0428 20:14:59.704187   339 net.cpp:124] Setting up loss
I0428 20:14:59.704207   339 net.cpp:131] Top shape: (1)
I0428 20:14:59.704213   339 net.cpp:134]     with loss weight 1
I0428 20:14:59.704231   339 net.cpp:139] Memory required for data: 14834808
I0428 20:14:59.704234   339 net.cpp:200] loss needs backward computation.
I0428 20:14:59.704238   339 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:59.704243   339 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:59.704246   339 net.cpp:200] relu3 needs backward computation.
I0428 20:14:59.704257   339 net.cpp:200] ip3 needs backward computation.
I0428 20:14:59.704260   339 net.cpp:200] relu2 needs backward computation.
I0428 20:14:59.704262   339 net.cpp:200] ip2 needs backward computation.
I0428 20:14:59.704267   339 net.cpp:200] relu1 needs backward computation.
I0428 20:14:59.704274   339 net.cpp:200] ip1 needs backward computation.
I0428 20:14:59.704278   339 net.cpp:200] pool1 needs backward computation.
I0428 20:14:59.704282   339 net.cpp:200] conv1 needs backward computation.
I0428 20:14:59.704284   339 net.cpp:200] pool0 needs backward computation.
I0428 20:14:59.704288   339 net.cpp:200] conv0 needs backward computation.
I0428 20:14:59.704298   339 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:59.704301   339 net.cpp:202] mnist does not need backward computation.
I0428 20:14:59.704304   339 net.cpp:244] This network produces output accuracy
I0428 20:14:59.704308   339 net.cpp:244] This network produces output loss
I0428 20:14:59.704319   339 net.cpp:257] Network initialization done.
I0428 20:14:59.704363   339 solver.cpp:56] Solver scaffolding done.
I0428 20:14:59.704725   339 caffe.cpp:248] Starting Optimization
I0428 20:14:59.704732   339 solver.cpp:273] Solving LeNet
I0428 20:14:59.704735   339 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:59.705655   339 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:59.711925   339 blocking_queue.cpp:49] Waiting for data
I0428 20:14:59.782470   347 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:59.783200   339 solver.cpp:398]     Test net output #0: accuracy = 0.078
I0428 20:14:59.783218   339 solver.cpp:398]     Test net output #1: loss = 2.31833 (* 1 = 2.31833 loss)
I0428 20:14:59.787516   339 solver.cpp:219] Iteration 0 (-2.03252e-31 iter/s, 0.0827587s/100 iters), loss = 2.3251
I0428 20:14:59.787539   339 solver.cpp:238]     Train net output #0: loss = 2.3251 (* 1 = 2.3251 loss)
I0428 20:14:59.787565   339 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:59.912187   339 solver.cpp:219] Iteration 100 (802.335 iter/s, 0.124636s/100 iters), loss = 0.756424
I0428 20:14:59.912211   339 solver.cpp:238]     Train net output #0: loss = 0.756424 (* 1 = 0.756424 loss)
I0428 20:14:59.912217   339 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:00.028590   339 solver.cpp:219] Iteration 200 (859.347 iter/s, 0.116367s/100 iters), loss = 0.389397
I0428 20:15:00.028630   339 solver.cpp:238]     Train net output #0: loss = 0.389397 (* 1 = 0.389397 loss)
I0428 20:15:00.028636   339 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:00.141641   339 solver.cpp:219] Iteration 300 (884.952 iter/s, 0.113s/100 iters), loss = 0.507693
I0428 20:15:00.141680   339 solver.cpp:238]     Train net output #0: loss = 0.507693 (* 1 = 0.507693 loss)
I0428 20:15:00.141686   339 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:00.255949   339 solver.cpp:219] Iteration 400 (875.095 iter/s, 0.114273s/100 iters), loss = 0.724638
I0428 20:15:00.255988   339 solver.cpp:238]     Train net output #0: loss = 0.724638 (* 1 = 0.724638 loss)
I0428 20:15:00.255995   339 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:00.370889   339 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:00.447369   347 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:00.448128   339 solver.cpp:398]     Test net output #0: accuracy = 0.8385
I0428 20:15:00.448149   339 solver.cpp:398]     Test net output #1: loss = 0.451837 (* 1 = 0.451837 loss)
I0428 20:15:00.449318   339 solver.cpp:219] Iteration 500 (517.253 iter/s, 0.193329s/100 iters), loss = 0.607977
I0428 20:15:00.449360   339 solver.cpp:238]     Train net output #0: loss = 0.607977 (* 1 = 0.607977 loss)
I0428 20:15:00.449368   339 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:00.583400   339 solver.cpp:219] Iteration 600 (746.106 iter/s, 0.134029s/100 iters), loss = 0.267048
I0428 20:15:00.583446   339 solver.cpp:238]     Train net output #0: loss = 0.267048 (* 1 = 0.267048 loss)
I0428 20:15:00.583451   339 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:00.704560   339 solver.cpp:219] Iteration 700 (825.734 iter/s, 0.121104s/100 iters), loss = 0.444118
I0428 20:15:00.704602   339 solver.cpp:238]     Train net output #0: loss = 0.444118 (* 1 = 0.444118 loss)
I0428 20:15:00.704608   339 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:00.824611   339 solver.cpp:219] Iteration 800 (833.23 iter/s, 0.120015s/100 iters), loss = 0.21681
I0428 20:15:00.824651   339 solver.cpp:238]     Train net output #0: loss = 0.21681 (* 1 = 0.21681 loss)
I0428 20:15:00.824657   339 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:00.944419   339 solver.cpp:219] Iteration 900 (835.027 iter/s, 0.119757s/100 iters), loss = 0.222568
I0428 20:15:00.944458   339 solver.cpp:238]     Train net output #0: loss = 0.222568 (* 1 = 0.222568 loss)
I0428 20:15:00.944464   339 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:00.983266   346 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:01.056803   339 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:01.057745   339 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:01.058436   339 solver.cpp:311] Iteration 1000, loss = 0.266521
I0428 20:15:01.058451   339 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:01.135449   347 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:01.136174   339 solver.cpp:398]     Test net output #0: accuracy = 0.9414
I0428 20:15:01.136193   339 solver.cpp:398]     Test net output #1: loss = 0.177884 (* 1 = 0.177884 loss)
I0428 20:15:01.136198   339 solver.cpp:316] Optimization Done.
I0428 20:15:01.136206   339 caffe.cpp:259] Optimization Done.
