I0428 20:14:51.542531 32764 caffe.cpp:218] Using GPUs 0
I0428 20:14:51.584158 32764 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:52.105252 32764 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1232.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:52.105403 32764 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1232.prototxt
I0428 20:14:52.105813 32764 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:52.105837 32764 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:52.105942 32764 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:52.106014 32764 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:52.106115 32764 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:52.106138 32764 net.cpp:86] Creating Layer mnist
I0428 20:14:52.106145 32764 net.cpp:382] mnist -> data
I0428 20:14:52.106168 32764 net.cpp:382] mnist -> label
I0428 20:14:52.107251 32764 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:52.109701 32764 net.cpp:124] Setting up mnist
I0428 20:14:52.109719 32764 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:52.109725 32764 net.cpp:131] Top shape: 64 (64)
I0428 20:14:52.109730 32764 net.cpp:139] Memory required for data: 200960
I0428 20:14:52.109737 32764 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:52.109753 32764 net.cpp:86] Creating Layer conv0
I0428 20:14:52.109774 32764 net.cpp:408] conv0 <- data
I0428 20:14:52.109786 32764 net.cpp:382] conv0 -> conv0
I0428 20:14:52.404897 32764 net.cpp:124] Setting up conv0
I0428 20:14:52.404928 32764 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:52.404933 32764 net.cpp:139] Memory required for data: 7573760
I0428 20:14:52.404953 32764 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:52.404968 32764 net.cpp:86] Creating Layer pool0
I0428 20:14:52.404973 32764 net.cpp:408] pool0 <- conv0
I0428 20:14:52.404978 32764 net.cpp:382] pool0 -> pool0
I0428 20:14:52.405040 32764 net.cpp:124] Setting up pool0
I0428 20:14:52.405046 32764 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:52.405050 32764 net.cpp:139] Memory required for data: 9416960
I0428 20:14:52.405055 32764 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:52.405066 32764 net.cpp:86] Creating Layer conv1
I0428 20:14:52.405071 32764 net.cpp:408] conv1 <- pool0
I0428 20:14:52.405076 32764 net.cpp:382] conv1 -> conv1
I0428 20:14:52.407245 32764 net.cpp:124] Setting up conv1
I0428 20:14:52.407263 32764 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:52.407268 32764 net.cpp:139] Memory required for data: 9449728
I0428 20:14:52.407277 32764 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:52.407286 32764 net.cpp:86] Creating Layer pool1
I0428 20:14:52.407290 32764 net.cpp:408] pool1 <- conv1
I0428 20:14:52.407297 32764 net.cpp:382] pool1 -> pool1
I0428 20:14:52.407342 32764 net.cpp:124] Setting up pool1
I0428 20:14:52.407348 32764 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:52.407352 32764 net.cpp:139] Memory required for data: 9457920
I0428 20:14:52.407356 32764 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:52.407368 32764 net.cpp:86] Creating Layer ip1
I0428 20:14:52.407372 32764 net.cpp:408] ip1 <- pool1
I0428 20:14:52.407378 32764 net.cpp:382] ip1 -> ip1
I0428 20:14:52.407496 32764 net.cpp:124] Setting up ip1
I0428 20:14:52.407505 32764 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:52.407510 32764 net.cpp:139] Memory required for data: 9464320
I0428 20:14:52.407517 32764 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:52.407524 32764 net.cpp:86] Creating Layer relu1
I0428 20:14:52.407528 32764 net.cpp:408] relu1 <- ip1
I0428 20:14:52.407533 32764 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:52.407732 32764 net.cpp:124] Setting up relu1
I0428 20:14:52.407743 32764 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:52.407747 32764 net.cpp:139] Memory required for data: 9470720
I0428 20:14:52.407752 32764 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:52.407759 32764 net.cpp:86] Creating Layer ip2
I0428 20:14:52.407763 32764 net.cpp:408] ip2 <- ip1
I0428 20:14:52.407768 32764 net.cpp:382] ip2 -> ip2
I0428 20:14:52.407884 32764 net.cpp:124] Setting up ip2
I0428 20:14:52.407893 32764 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:52.407897 32764 net.cpp:139] Memory required for data: 9473280
I0428 20:14:52.407904 32764 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:52.407912 32764 net.cpp:86] Creating Layer relu2
I0428 20:14:52.407914 32764 net.cpp:408] relu2 <- ip2
I0428 20:14:52.407919 32764 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:52.408759 32764 net.cpp:124] Setting up relu2
I0428 20:14:52.408774 32764 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:52.408778 32764 net.cpp:139] Memory required for data: 9475840
I0428 20:14:52.408782 32764 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:52.408792 32764 net.cpp:86] Creating Layer ip3
I0428 20:14:52.408795 32764 net.cpp:408] ip3 <- ip2
I0428 20:14:52.408802 32764 net.cpp:382] ip3 -> ip3
I0428 20:14:52.408927 32764 net.cpp:124] Setting up ip3
I0428 20:14:52.408938 32764 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:52.408942 32764 net.cpp:139] Memory required for data: 9478400
I0428 20:14:52.408952 32764 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:52.408958 32764 net.cpp:86] Creating Layer relu3
I0428 20:14:52.408962 32764 net.cpp:408] relu3 <- ip3
I0428 20:14:52.408968 32764 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:52.409168 32764 net.cpp:124] Setting up relu3
I0428 20:14:52.409178 32764 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:52.409183 32764 net.cpp:139] Memory required for data: 9480960
I0428 20:14:52.409186 32764 layer_factory.hpp:77] Creating layer loss
I0428 20:14:52.409194 32764 net.cpp:86] Creating Layer loss
I0428 20:14:52.409198 32764 net.cpp:408] loss <- ip3
I0428 20:14:52.409202 32764 net.cpp:408] loss <- label
I0428 20:14:52.409209 32764 net.cpp:382] loss -> loss
I0428 20:14:52.409230 32764 layer_factory.hpp:77] Creating layer loss
I0428 20:14:52.409494 32764 net.cpp:124] Setting up loss
I0428 20:14:52.409504 32764 net.cpp:131] Top shape: (1)
I0428 20:14:52.409509 32764 net.cpp:134]     with loss weight 1
I0428 20:14:52.409524 32764 net.cpp:139] Memory required for data: 9480964
I0428 20:14:52.409528 32764 net.cpp:200] loss needs backward computation.
I0428 20:14:52.409533 32764 net.cpp:200] relu3 needs backward computation.
I0428 20:14:52.409538 32764 net.cpp:200] ip3 needs backward computation.
I0428 20:14:52.409541 32764 net.cpp:200] relu2 needs backward computation.
I0428 20:14:52.409544 32764 net.cpp:200] ip2 needs backward computation.
I0428 20:14:52.409548 32764 net.cpp:200] relu1 needs backward computation.
I0428 20:14:52.409551 32764 net.cpp:200] ip1 needs backward computation.
I0428 20:14:52.409555 32764 net.cpp:200] pool1 needs backward computation.
I0428 20:14:52.409559 32764 net.cpp:200] conv1 needs backward computation.
I0428 20:14:52.409562 32764 net.cpp:200] pool0 needs backward computation.
I0428 20:14:52.409566 32764 net.cpp:200] conv0 needs backward computation.
I0428 20:14:52.409570 32764 net.cpp:202] mnist does not need backward computation.
I0428 20:14:52.409574 32764 net.cpp:244] This network produces output loss
I0428 20:14:52.409584 32764 net.cpp:257] Network initialization done.
I0428 20:14:52.409970 32764 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1232.prototxt
I0428 20:14:52.410002 32764 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:52.410110 32764 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:52.410202 32764 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:52.410254 32764 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:52.410267 32764 net.cpp:86] Creating Layer mnist
I0428 20:14:52.410272 32764 net.cpp:382] mnist -> data
I0428 20:14:52.410282 32764 net.cpp:382] mnist -> label
I0428 20:14:52.410383 32764 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:52.412798 32764 net.cpp:124] Setting up mnist
I0428 20:14:52.412822 32764 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:52.412828 32764 net.cpp:131] Top shape: 100 (100)
I0428 20:14:52.412832 32764 net.cpp:139] Memory required for data: 314000
I0428 20:14:52.412837 32764 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:52.412873 32764 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:52.412878 32764 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:52.412883 32764 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:52.412891 32764 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:52.413008 32764 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:52.413017 32764 net.cpp:131] Top shape: 100 (100)
I0428 20:14:52.413022 32764 net.cpp:131] Top shape: 100 (100)
I0428 20:14:52.413025 32764 net.cpp:139] Memory required for data: 314800
I0428 20:14:52.413028 32764 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:52.413038 32764 net.cpp:86] Creating Layer conv0
I0428 20:14:52.413043 32764 net.cpp:408] conv0 <- data
I0428 20:14:52.413048 32764 net.cpp:382] conv0 -> conv0
I0428 20:14:52.414870 32764 net.cpp:124] Setting up conv0
I0428 20:14:52.414887 32764 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:52.414891 32764 net.cpp:139] Memory required for data: 11834800
I0428 20:14:52.414902 32764 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:52.414911 32764 net.cpp:86] Creating Layer pool0
I0428 20:14:52.414914 32764 net.cpp:408] pool0 <- conv0
I0428 20:14:52.414921 32764 net.cpp:382] pool0 -> pool0
I0428 20:14:52.414963 32764 net.cpp:124] Setting up pool0
I0428 20:14:52.414970 32764 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:52.414973 32764 net.cpp:139] Memory required for data: 14714800
I0428 20:14:52.414978 32764 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:52.414988 32764 net.cpp:86] Creating Layer conv1
I0428 20:14:52.414991 32764 net.cpp:408] conv1 <- pool0
I0428 20:14:52.414997 32764 net.cpp:382] conv1 -> conv1
I0428 20:14:52.416687 32764 net.cpp:124] Setting up conv1
I0428 20:14:52.416703 32764 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:52.416707 32764 net.cpp:139] Memory required for data: 14766000
I0428 20:14:52.416718 32764 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:52.416725 32764 net.cpp:86] Creating Layer pool1
I0428 20:14:52.416730 32764 net.cpp:408] pool1 <- conv1
I0428 20:14:52.416744 32764 net.cpp:382] pool1 -> pool1
I0428 20:14:52.416795 32764 net.cpp:124] Setting up pool1
I0428 20:14:52.416801 32764 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:52.416805 32764 net.cpp:139] Memory required for data: 14778800
I0428 20:14:52.416817 32764 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:52.416838 32764 net.cpp:86] Creating Layer ip1
I0428 20:14:52.416842 32764 net.cpp:408] ip1 <- pool1
I0428 20:14:52.416854 32764 net.cpp:382] ip1 -> ip1
I0428 20:14:52.416975 32764 net.cpp:124] Setting up ip1
I0428 20:14:52.416985 32764 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:52.417001 32764 net.cpp:139] Memory required for data: 14788800
I0428 20:14:52.417011 32764 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:52.417016 32764 net.cpp:86] Creating Layer relu1
I0428 20:14:52.417021 32764 net.cpp:408] relu1 <- ip1
I0428 20:14:52.417026 32764 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:52.417227 32764 net.cpp:124] Setting up relu1
I0428 20:14:52.417237 32764 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:52.417240 32764 net.cpp:139] Memory required for data: 14798800
I0428 20:14:52.417245 32764 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:52.417255 32764 net.cpp:86] Creating Layer ip2
I0428 20:14:52.417259 32764 net.cpp:408] ip2 <- ip1
I0428 20:14:52.417265 32764 net.cpp:382] ip2 -> ip2
I0428 20:14:52.417388 32764 net.cpp:124] Setting up ip2
I0428 20:14:52.417397 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.417402 32764 net.cpp:139] Memory required for data: 14802800
I0428 20:14:52.417407 32764 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:52.417415 32764 net.cpp:86] Creating Layer relu2
I0428 20:14:52.417420 32764 net.cpp:408] relu2 <- ip2
I0428 20:14:52.417425 32764 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:52.417615 32764 net.cpp:124] Setting up relu2
I0428 20:14:52.417625 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.417629 32764 net.cpp:139] Memory required for data: 14806800
I0428 20:14:52.417632 32764 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:52.417639 32764 net.cpp:86] Creating Layer ip3
I0428 20:14:52.417644 32764 net.cpp:408] ip3 <- ip2
I0428 20:14:52.417650 32764 net.cpp:382] ip3 -> ip3
I0428 20:14:52.417779 32764 net.cpp:124] Setting up ip3
I0428 20:14:52.417788 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.417793 32764 net.cpp:139] Memory required for data: 14810800
I0428 20:14:52.417804 32764 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:52.417809 32764 net.cpp:86] Creating Layer relu3
I0428 20:14:52.417812 32764 net.cpp:408] relu3 <- ip3
I0428 20:14:52.417817 32764 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:52.418756 32764 net.cpp:124] Setting up relu3
I0428 20:14:52.418772 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.418777 32764 net.cpp:139] Memory required for data: 14814800
I0428 20:14:52.418781 32764 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:52.418797 32764 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:52.418800 32764 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:52.418813 32764 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:52.418822 32764 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:52.418867 32764 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:52.418875 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.418887 32764 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:52.418890 32764 net.cpp:139] Memory required for data: 14822800
I0428 20:14:52.418895 32764 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:52.418908 32764 net.cpp:86] Creating Layer accuracy
I0428 20:14:52.418912 32764 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:52.418917 32764 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:52.418929 32764 net.cpp:382] accuracy -> accuracy
I0428 20:14:52.418937 32764 net.cpp:124] Setting up accuracy
I0428 20:14:52.418942 32764 net.cpp:131] Top shape: (1)
I0428 20:14:52.418946 32764 net.cpp:139] Memory required for data: 14822804
I0428 20:14:52.418948 32764 layer_factory.hpp:77] Creating layer loss
I0428 20:14:52.418956 32764 net.cpp:86] Creating Layer loss
I0428 20:14:52.418959 32764 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:52.418964 32764 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:52.418974 32764 net.cpp:382] loss -> loss
I0428 20:14:52.418982 32764 layer_factory.hpp:77] Creating layer loss
I0428 20:14:52.419266 32764 net.cpp:124] Setting up loss
I0428 20:14:52.419278 32764 net.cpp:131] Top shape: (1)
I0428 20:14:52.419282 32764 net.cpp:134]     with loss weight 1
I0428 20:14:52.419301 32764 net.cpp:139] Memory required for data: 14822808
I0428 20:14:52.419306 32764 net.cpp:200] loss needs backward computation.
I0428 20:14:52.419309 32764 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:52.419314 32764 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:52.419317 32764 net.cpp:200] relu3 needs backward computation.
I0428 20:14:52.419322 32764 net.cpp:200] ip3 needs backward computation.
I0428 20:14:52.419334 32764 net.cpp:200] relu2 needs backward computation.
I0428 20:14:52.419337 32764 net.cpp:200] ip2 needs backward computation.
I0428 20:14:52.419342 32764 net.cpp:200] relu1 needs backward computation.
I0428 20:14:52.419344 32764 net.cpp:200] ip1 needs backward computation.
I0428 20:14:52.419348 32764 net.cpp:200] pool1 needs backward computation.
I0428 20:14:52.419351 32764 net.cpp:200] conv1 needs backward computation.
I0428 20:14:52.419355 32764 net.cpp:200] pool0 needs backward computation.
I0428 20:14:52.419358 32764 net.cpp:200] conv0 needs backward computation.
I0428 20:14:52.419363 32764 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:52.419368 32764 net.cpp:202] mnist does not need backward computation.
I0428 20:14:52.419371 32764 net.cpp:244] This network produces output accuracy
I0428 20:14:52.419375 32764 net.cpp:244] This network produces output loss
I0428 20:14:52.419389 32764 net.cpp:257] Network initialization done.
I0428 20:14:52.419451 32764 solver.cpp:56] Solver scaffolding done.
I0428 20:14:52.419862 32764 caffe.cpp:248] Starting Optimization
I0428 20:14:52.419869 32764 solver.cpp:273] Solving LeNet
I0428 20:14:52.419872 32764 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:52.420862 32764 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:52.427770 32764 blocking_queue.cpp:49] Waiting for data
I0428 20:14:52.498455   314 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:52.499248 32764 solver.cpp:398]     Test net output #0: accuracy = 0.0766
I0428 20:14:52.499266 32764 solver.cpp:398]     Test net output #1: loss = 2.30966 (* 1 = 2.30966 loss)
I0428 20:14:52.503649 32764 solver.cpp:219] Iteration 0 (0 iter/s, 0.0837335s/100 iters), loss = 2.30127
I0428 20:14:52.503675 32764 solver.cpp:238]     Train net output #0: loss = 2.30127 (* 1 = 2.30127 loss)
I0428 20:14:52.503686 32764 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:52.618542 32764 solver.cpp:219] Iteration 100 (870.664 iter/s, 0.114855s/100 iters), loss = 0.7546
I0428 20:14:52.618566 32764 solver.cpp:238]     Train net output #0: loss = 0.7546 (* 1 = 0.7546 loss)
I0428 20:14:52.618572 32764 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:52.732807 32764 solver.cpp:219] Iteration 200 (875.425 iter/s, 0.11423s/100 iters), loss = 0.45718
I0428 20:14:52.732834 32764 solver.cpp:238]     Train net output #0: loss = 0.45718 (* 1 = 0.45718 loss)
I0428 20:14:52.732841 32764 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:52.848578 32764 solver.cpp:219] Iteration 300 (864.062 iter/s, 0.115732s/100 iters), loss = 0.311152
I0428 20:14:52.848601 32764 solver.cpp:238]     Train net output #0: loss = 0.311152 (* 1 = 0.311152 loss)
I0428 20:14:52.848608 32764 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:52.965016 32764 solver.cpp:219] Iteration 400 (859.076 iter/s, 0.116404s/100 iters), loss = 0.212985
I0428 20:14:52.965040 32764 solver.cpp:238]     Train net output #0: loss = 0.212985 (* 1 = 0.212985 loss)
I0428 20:14:52.965046 32764 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:53.076858 32764 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:53.141238   314 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:53.142966 32764 solver.cpp:398]     Test net output #0: accuracy = 0.9293
I0428 20:14:53.142985 32764 solver.cpp:398]     Test net output #1: loss = 0.227678 (* 1 = 0.227678 loss)
I0428 20:14:53.144099 32764 solver.cpp:219] Iteration 500 (558.518 iter/s, 0.179045s/100 iters), loss = 0.244775
I0428 20:14:53.144139 32764 solver.cpp:238]     Train net output #0: loss = 0.244775 (* 1 = 0.244775 loss)
I0428 20:14:53.144174 32764 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:53.264794 32764 solver.cpp:219] Iteration 600 (828.875 iter/s, 0.120645s/100 iters), loss = 0.151826
I0428 20:14:53.264827 32764 solver.cpp:238]     Train net output #0: loss = 0.151826 (* 1 = 0.151826 loss)
I0428 20:14:53.264849 32764 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:53.376008 32764 solver.cpp:219] Iteration 700 (899.511 iter/s, 0.111171s/100 iters), loss = 0.436644
I0428 20:14:53.376031 32764 solver.cpp:238]     Train net output #0: loss = 0.436644 (* 1 = 0.436644 loss)
I0428 20:14:53.376054 32764 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:53.488026 32764 solver.cpp:219] Iteration 800 (892.98 iter/s, 0.111985s/100 iters), loss = 0.375828
I0428 20:14:53.488050 32764 solver.cpp:238]     Train net output #0: loss = 0.375828 (* 1 = 0.375828 loss)
I0428 20:14:53.488072 32764 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:53.599774 32764 solver.cpp:219] Iteration 900 (895.15 iter/s, 0.111713s/100 iters), loss = 0.181116
I0428 20:14:53.599798 32764 solver.cpp:238]     Train net output #0: loss = 0.181116 (* 1 = 0.181116 loss)
I0428 20:14:53.599819 32764 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:53.636242   313 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:53.710150 32764 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:53.711125 32764 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:53.711822 32764 solver.cpp:311] Iteration 1000, loss = 0.262825
I0428 20:14:53.711839 32764 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:53.787488   314 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:53.788365 32764 solver.cpp:398]     Test net output #0: accuracy = 0.9525
I0428 20:14:53.788384 32764 solver.cpp:398]     Test net output #1: loss = 0.147028 (* 1 = 0.147028 loss)
I0428 20:14:53.788389 32764 solver.cpp:316] Optimization Done.
I0428 20:14:53.788393 32764 caffe.cpp:259] Optimization Done.
