I0428 19:48:59.606495 26645 caffe.cpp:218] Using GPUs 0
I0428 19:48:59.636741 26645 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:00.080066 26645 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test561.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:00.080201 26645 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test561.prototxt
I0428 19:49:00.080569 26645 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:00.080600 26645 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:00.080705 26645 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:00.080767 26645 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:00.080886 26645 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:00.080906 26645 net.cpp:86] Creating Layer mnist
I0428 19:49:00.080914 26645 net.cpp:382] mnist -> data
I0428 19:49:00.080932 26645 net.cpp:382] mnist -> label
I0428 19:49:00.081965 26645 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:00.084194 26645 net.cpp:124] Setting up mnist
I0428 19:49:00.084224 26645 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:00.084229 26645 net.cpp:131] Top shape: 64 (64)
I0428 19:49:00.084233 26645 net.cpp:139] Memory required for data: 200960
I0428 19:49:00.084239 26645 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:00.084265 26645 net.cpp:86] Creating Layer conv0
I0428 19:49:00.084283 26645 net.cpp:408] conv0 <- data
I0428 19:49:00.084293 26645 net.cpp:382] conv0 -> conv0
I0428 19:49:00.318313 26645 net.cpp:124] Setting up conv0
I0428 19:49:00.318339 26645 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:00.318343 26645 net.cpp:139] Memory required for data: 938240
I0428 19:49:00.318357 26645 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:00.318387 26645 net.cpp:86] Creating Layer pool0
I0428 19:49:00.318392 26645 net.cpp:408] pool0 <- conv0
I0428 19:49:00.318397 26645 net.cpp:382] pool0 -> pool0
I0428 19:49:00.318440 26645 net.cpp:124] Setting up pool0
I0428 19:49:00.318449 26645 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:00.318452 26645 net.cpp:139] Memory required for data: 1122560
I0428 19:49:00.318455 26645 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:00.318465 26645 net.cpp:86] Creating Layer conv1
I0428 19:49:00.318469 26645 net.cpp:408] conv1 <- pool0
I0428 19:49:00.318473 26645 net.cpp:382] conv1 -> conv1
I0428 19:49:00.320493 26645 net.cpp:124] Setting up conv1
I0428 19:49:00.320508 26645 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:00.320513 26645 net.cpp:139] Memory required for data: 1204480
I0428 19:49:00.320536 26645 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:00.320544 26645 net.cpp:86] Creating Layer pool1
I0428 19:49:00.320549 26645 net.cpp:408] pool1 <- conv1
I0428 19:49:00.320554 26645 net.cpp:382] pool1 -> pool1
I0428 19:49:00.320590 26645 net.cpp:124] Setting up pool1
I0428 19:49:00.320597 26645 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:00.320600 26645 net.cpp:139] Memory required for data: 1224960
I0428 19:49:00.320603 26645 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:00.320611 26645 net.cpp:86] Creating Layer ip1
I0428 19:49:00.320613 26645 net.cpp:408] ip1 <- pool1
I0428 19:49:00.320618 26645 net.cpp:382] ip1 -> ip1
I0428 19:49:00.320719 26645 net.cpp:124] Setting up ip1
I0428 19:49:00.320725 26645 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:00.320729 26645 net.cpp:139] Memory required for data: 1227520
I0428 19:49:00.320736 26645 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:00.320741 26645 net.cpp:86] Creating Layer relu1
I0428 19:49:00.320745 26645 net.cpp:408] relu1 <- ip1
I0428 19:49:00.320749 26645 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:00.320938 26645 net.cpp:124] Setting up relu1
I0428 19:49:00.320948 26645 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:00.320951 26645 net.cpp:139] Memory required for data: 1230080
I0428 19:49:00.320955 26645 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:00.320961 26645 net.cpp:86] Creating Layer ip2
I0428 19:49:00.320964 26645 net.cpp:408] ip2 <- ip1
I0428 19:49:00.320971 26645 net.cpp:382] ip2 -> ip2
I0428 19:49:00.321064 26645 net.cpp:124] Setting up ip2
I0428 19:49:00.321071 26645 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:00.321075 26645 net.cpp:139] Memory required for data: 1236480
I0428 19:49:00.321080 26645 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:00.321087 26645 net.cpp:86] Creating Layer relu2
I0428 19:49:00.321090 26645 net.cpp:408] relu2 <- ip2
I0428 19:49:00.321094 26645 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:00.321857 26645 net.cpp:124] Setting up relu2
I0428 19:49:00.321871 26645 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:00.321874 26645 net.cpp:139] Memory required for data: 1242880
I0428 19:49:00.321878 26645 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:00.321885 26645 net.cpp:86] Creating Layer ip3
I0428 19:49:00.321903 26645 net.cpp:408] ip3 <- ip2
I0428 19:49:00.321909 26645 net.cpp:382] ip3 -> ip3
I0428 19:49:00.322001 26645 net.cpp:124] Setting up ip3
I0428 19:49:00.322010 26645 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:00.322012 26645 net.cpp:139] Memory required for data: 1245440
I0428 19:49:00.322019 26645 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:00.322039 26645 net.cpp:86] Creating Layer relu3
I0428 19:49:00.322043 26645 net.cpp:408] relu3 <- ip3
I0428 19:49:00.322047 26645 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:00.322244 26645 net.cpp:124] Setting up relu3
I0428 19:49:00.322253 26645 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:00.322257 26645 net.cpp:139] Memory required for data: 1248000
I0428 19:49:00.322260 26645 layer_factory.hpp:77] Creating layer loss
I0428 19:49:00.322266 26645 net.cpp:86] Creating Layer loss
I0428 19:49:00.322269 26645 net.cpp:408] loss <- ip3
I0428 19:49:00.322274 26645 net.cpp:408] loss <- label
I0428 19:49:00.322279 26645 net.cpp:382] loss -> loss
I0428 19:49:00.322298 26645 layer_factory.hpp:77] Creating layer loss
I0428 19:49:00.322531 26645 net.cpp:124] Setting up loss
I0428 19:49:00.322540 26645 net.cpp:131] Top shape: (1)
I0428 19:49:00.322545 26645 net.cpp:134]     with loss weight 1
I0428 19:49:00.322559 26645 net.cpp:139] Memory required for data: 1248004
I0428 19:49:00.322563 26645 net.cpp:200] loss needs backward computation.
I0428 19:49:00.322567 26645 net.cpp:200] relu3 needs backward computation.
I0428 19:49:00.322571 26645 net.cpp:200] ip3 needs backward computation.
I0428 19:49:00.322573 26645 net.cpp:200] relu2 needs backward computation.
I0428 19:49:00.322576 26645 net.cpp:200] ip2 needs backward computation.
I0428 19:49:00.322579 26645 net.cpp:200] relu1 needs backward computation.
I0428 19:49:00.322582 26645 net.cpp:200] ip1 needs backward computation.
I0428 19:49:00.322584 26645 net.cpp:200] pool1 needs backward computation.
I0428 19:49:00.322587 26645 net.cpp:200] conv1 needs backward computation.
I0428 19:49:00.322590 26645 net.cpp:200] pool0 needs backward computation.
I0428 19:49:00.322594 26645 net.cpp:200] conv0 needs backward computation.
I0428 19:49:00.322597 26645 net.cpp:202] mnist does not need backward computation.
I0428 19:49:00.322600 26645 net.cpp:244] This network produces output loss
I0428 19:49:00.322609 26645 net.cpp:257] Network initialization done.
I0428 19:49:00.322942 26645 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test561.prototxt
I0428 19:49:00.322970 26645 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:00.323063 26645 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:00.323158 26645 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:00.323204 26645 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:00.323230 26645 net.cpp:86] Creating Layer mnist
I0428 19:49:00.323235 26645 net.cpp:382] mnist -> data
I0428 19:49:00.323243 26645 net.cpp:382] mnist -> label
I0428 19:49:00.323325 26645 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:00.325642 26645 net.cpp:124] Setting up mnist
I0428 19:49:00.325673 26645 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:00.325680 26645 net.cpp:131] Top shape: 100 (100)
I0428 19:49:00.325683 26645 net.cpp:139] Memory required for data: 314000
I0428 19:49:00.325687 26645 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:00.325700 26645 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:00.325705 26645 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:00.325709 26645 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:00.325731 26645 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:00.325855 26645 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:00.325861 26645 net.cpp:131] Top shape: 100 (100)
I0428 19:49:00.325865 26645 net.cpp:131] Top shape: 100 (100)
I0428 19:49:00.325868 26645 net.cpp:139] Memory required for data: 314800
I0428 19:49:00.325871 26645 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:00.325881 26645 net.cpp:86] Creating Layer conv0
I0428 19:49:00.325883 26645 net.cpp:408] conv0 <- data
I0428 19:49:00.325888 26645 net.cpp:382] conv0 -> conv0
I0428 19:49:00.327589 26645 net.cpp:124] Setting up conv0
I0428 19:49:00.327633 26645 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:00.327637 26645 net.cpp:139] Memory required for data: 1466800
I0428 19:49:00.327646 26645 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:00.327653 26645 net.cpp:86] Creating Layer pool0
I0428 19:49:00.327656 26645 net.cpp:408] pool0 <- conv0
I0428 19:49:00.327661 26645 net.cpp:382] pool0 -> pool0
I0428 19:49:00.327697 26645 net.cpp:124] Setting up pool0
I0428 19:49:00.327702 26645 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:00.327705 26645 net.cpp:139] Memory required for data: 1754800
I0428 19:49:00.327708 26645 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:00.327718 26645 net.cpp:86] Creating Layer conv1
I0428 19:49:00.327720 26645 net.cpp:408] conv1 <- pool0
I0428 19:49:00.327725 26645 net.cpp:382] conv1 -> conv1
I0428 19:49:00.329933 26645 net.cpp:124] Setting up conv1
I0428 19:49:00.329963 26645 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:00.329968 26645 net.cpp:139] Memory required for data: 1882800
I0428 19:49:00.329993 26645 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:00.329998 26645 net.cpp:86] Creating Layer pool1
I0428 19:49:00.330003 26645 net.cpp:408] pool1 <- conv1
I0428 19:49:00.330008 26645 net.cpp:382] pool1 -> pool1
I0428 19:49:00.330065 26645 net.cpp:124] Setting up pool1
I0428 19:49:00.330070 26645 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:00.330073 26645 net.cpp:139] Memory required for data: 1914800
I0428 19:49:00.330076 26645 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:00.330082 26645 net.cpp:86] Creating Layer ip1
I0428 19:49:00.330085 26645 net.cpp:408] ip1 <- pool1
I0428 19:49:00.330090 26645 net.cpp:382] ip1 -> ip1
I0428 19:49:00.330238 26645 net.cpp:124] Setting up ip1
I0428 19:49:00.330247 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.330263 26645 net.cpp:139] Memory required for data: 1918800
I0428 19:49:00.330271 26645 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:00.330276 26645 net.cpp:86] Creating Layer relu1
I0428 19:49:00.330281 26645 net.cpp:408] relu1 <- ip1
I0428 19:49:00.330284 26645 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:00.330492 26645 net.cpp:124] Setting up relu1
I0428 19:49:00.330502 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.330505 26645 net.cpp:139] Memory required for data: 1922800
I0428 19:49:00.330508 26645 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:00.330515 26645 net.cpp:86] Creating Layer ip2
I0428 19:49:00.330530 26645 net.cpp:408] ip2 <- ip1
I0428 19:49:00.330536 26645 net.cpp:382] ip2 -> ip2
I0428 19:49:00.330633 26645 net.cpp:124] Setting up ip2
I0428 19:49:00.330641 26645 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:00.330643 26645 net.cpp:139] Memory required for data: 1932800
I0428 19:49:00.330649 26645 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:00.330654 26645 net.cpp:86] Creating Layer relu2
I0428 19:49:00.330657 26645 net.cpp:408] relu2 <- ip2
I0428 19:49:00.330662 26645 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:00.330811 26645 net.cpp:124] Setting up relu2
I0428 19:49:00.330819 26645 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:00.330823 26645 net.cpp:139] Memory required for data: 1942800
I0428 19:49:00.330827 26645 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:00.330832 26645 net.cpp:86] Creating Layer ip3
I0428 19:49:00.330837 26645 net.cpp:408] ip3 <- ip2
I0428 19:49:00.330840 26645 net.cpp:382] ip3 -> ip3
I0428 19:49:00.330962 26645 net.cpp:124] Setting up ip3
I0428 19:49:00.330970 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.330973 26645 net.cpp:139] Memory required for data: 1946800
I0428 19:49:00.330981 26645 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:00.330986 26645 net.cpp:86] Creating Layer relu3
I0428 19:49:00.330988 26645 net.cpp:408] relu3 <- ip3
I0428 19:49:00.330992 26645 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:00.331923 26645 net.cpp:124] Setting up relu3
I0428 19:49:00.331936 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.331956 26645 net.cpp:139] Memory required for data: 1950800
I0428 19:49:00.331959 26645 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:00.331965 26645 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:00.331969 26645 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:00.331975 26645 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:00.331981 26645 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:00.332028 26645 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:00.332036 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.332039 26645 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:00.332042 26645 net.cpp:139] Memory required for data: 1958800
I0428 19:49:00.332046 26645 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:00.332051 26645 net.cpp:86] Creating Layer accuracy
I0428 19:49:00.332056 26645 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:00.332060 26645 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:00.332065 26645 net.cpp:382] accuracy -> accuracy
I0428 19:49:00.332073 26645 net.cpp:124] Setting up accuracy
I0428 19:49:00.332077 26645 net.cpp:131] Top shape: (1)
I0428 19:49:00.332080 26645 net.cpp:139] Memory required for data: 1958804
I0428 19:49:00.332083 26645 layer_factory.hpp:77] Creating layer loss
I0428 19:49:00.332088 26645 net.cpp:86] Creating Layer loss
I0428 19:49:00.332093 26645 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:00.332096 26645 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:00.332100 26645 net.cpp:382] loss -> loss
I0428 19:49:00.332113 26645 layer_factory.hpp:77] Creating layer loss
I0428 19:49:00.332381 26645 net.cpp:124] Setting up loss
I0428 19:49:00.332391 26645 net.cpp:131] Top shape: (1)
I0428 19:49:00.332394 26645 net.cpp:134]     with loss weight 1
I0428 19:49:00.332401 26645 net.cpp:139] Memory required for data: 1958808
I0428 19:49:00.332415 26645 net.cpp:200] loss needs backward computation.
I0428 19:49:00.332419 26645 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:00.332423 26645 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:00.332427 26645 net.cpp:200] relu3 needs backward computation.
I0428 19:49:00.332430 26645 net.cpp:200] ip3 needs backward computation.
I0428 19:49:00.332433 26645 net.cpp:200] relu2 needs backward computation.
I0428 19:49:00.332437 26645 net.cpp:200] ip2 needs backward computation.
I0428 19:49:00.332439 26645 net.cpp:200] relu1 needs backward computation.
I0428 19:49:00.332443 26645 net.cpp:200] ip1 needs backward computation.
I0428 19:49:00.332446 26645 net.cpp:200] pool1 needs backward computation.
I0428 19:49:00.332450 26645 net.cpp:200] conv1 needs backward computation.
I0428 19:49:00.332453 26645 net.cpp:200] pool0 needs backward computation.
I0428 19:49:00.332458 26645 net.cpp:200] conv0 needs backward computation.
I0428 19:49:00.332461 26645 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:00.332464 26645 net.cpp:202] mnist does not need backward computation.
I0428 19:49:00.332468 26645 net.cpp:244] This network produces output accuracy
I0428 19:49:00.332476 26645 net.cpp:244] This network produces output loss
I0428 19:49:00.332487 26645 net.cpp:257] Network initialization done.
I0428 19:49:00.332530 26645 solver.cpp:56] Solver scaffolding done.
I0428 19:49:00.332928 26645 caffe.cpp:248] Starting Optimization
I0428 19:49:00.332937 26645 solver.cpp:273] Solving LeNet
I0428 19:49:00.332939 26645 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:00.333851 26645 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:00.337576 26645 blocking_queue.cpp:49] Waiting for data
I0428 19:49:00.408156 26652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:00.408656 26645 solver.cpp:398]     Test net output #0: accuracy = 0.1328
I0428 19:49:00.408694 26645 solver.cpp:398]     Test net output #1: loss = 2.29719 (* 1 = 2.29719 loss)
I0428 19:49:00.410703 26645 solver.cpp:219] Iteration 0 (0 iter/s, 0.0777339s/100 iters), loss = 2.30142
I0428 19:49:00.410742 26645 solver.cpp:238]     Train net output #0: loss = 2.30142 (* 1 = 2.30142 loss)
I0428 19:49:00.410754 26645 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:00.483063 26645 solver.cpp:219] Iteration 100 (1382.9 iter/s, 0.0723118s/100 iters), loss = 1.05565
I0428 19:49:00.483089 26645 solver.cpp:238]     Train net output #0: loss = 1.05565 (* 1 = 1.05565 loss)
I0428 19:49:00.483098 26645 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:00.555894 26645 solver.cpp:219] Iteration 200 (1373.7 iter/s, 0.0727962s/100 iters), loss = 0.654449
I0428 19:49:00.555918 26645 solver.cpp:238]     Train net output #0: loss = 0.654449 (* 1 = 0.654449 loss)
I0428 19:49:00.555940 26645 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:00.630172 26645 solver.cpp:219] Iteration 300 (1346.87 iter/s, 0.0742461s/100 iters), loss = 0.357844
I0428 19:49:00.630197 26645 solver.cpp:238]     Train net output #0: loss = 0.357844 (* 1 = 0.357844 loss)
I0428 19:49:00.630203 26645 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:00.704656 26645 solver.cpp:219] Iteration 400 (1343.15 iter/s, 0.0744519s/100 iters), loss = 0.364554
I0428 19:49:00.704695 26645 solver.cpp:238]     Train net output #0: loss = 0.364554 (* 1 = 0.364554 loss)
I0428 19:49:00.704701 26645 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:00.778944 26645 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:00.832196 26652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:00.832732 26645 solver.cpp:398]     Test net output #0: accuracy = 0.9101
I0428 19:49:00.832767 26645 solver.cpp:398]     Test net output #1: loss = 0.301386 (* 1 = 0.301386 loss)
I0428 19:49:00.833575 26645 solver.cpp:219] Iteration 500 (775.893 iter/s, 0.128884s/100 iters), loss = 0.37674
I0428 19:49:00.833616 26645 solver.cpp:238]     Train net output #0: loss = 0.37674 (* 1 = 0.37674 loss)
I0428 19:49:00.833640 26645 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:00.908545 26645 solver.cpp:219] Iteration 600 (1334.43 iter/s, 0.0749384s/100 iters), loss = 0.249437
I0428 19:49:00.908584 26645 solver.cpp:238]     Train net output #0: loss = 0.249437 (* 1 = 0.249437 loss)
I0428 19:49:00.908591 26645 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:00.983572 26645 solver.cpp:219] Iteration 700 (1333.7 iter/s, 0.0749793s/100 iters), loss = 0.36222
I0428 19:49:00.983610 26645 solver.cpp:238]     Train net output #0: loss = 0.36222 (* 1 = 0.36222 loss)
I0428 19:49:00.983618 26645 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:01.055757 26645 solver.cpp:219] Iteration 800 (1385.94 iter/s, 0.0721531s/100 iters), loss = 0.449195
I0428 19:49:01.055794 26645 solver.cpp:238]     Train net output #0: loss = 0.449195 (* 1 = 0.449195 loss)
I0428 19:49:01.055801 26645 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:01.124717 26645 solver.cpp:219] Iteration 900 (1450.74 iter/s, 0.0689306s/100 iters), loss = 0.23863
I0428 19:49:01.124757 26645 solver.cpp:238]     Train net output #0: loss = 0.23863 (* 1 = 0.23863 loss)
I0428 19:49:01.124763 26645 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:01.147987 26651 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:01.194131 26645 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:01.194763 26645 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:01.195194 26645 solver.cpp:311] Iteration 1000, loss = 0.295069
I0428 19:49:01.195206 26645 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:01.240149 26652 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:01.240675 26645 solver.cpp:398]     Test net output #0: accuracy = 0.9486
I0428 19:49:01.240694 26645 solver.cpp:398]     Test net output #1: loss = 0.169998 (* 1 = 0.169998 loss)
I0428 19:49:01.240716 26645 solver.cpp:316] Optimization Done.
I0428 19:49:01.240720 26645 caffe.cpp:259] Optimization Done.
