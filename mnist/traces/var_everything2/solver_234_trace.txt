I0428 19:35:53.078753 23609 caffe.cpp:218] Using GPUs 0
I0428 19:35:53.120326 23609 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:35:53.583660 23609 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test234.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:35:53.583806 23609 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test234.prototxt
I0428 19:35:53.584043 23609 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:35:53.584054 23609 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:35:53.584110 23609 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:35:53.584157 23609 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:53.584240 23609 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:35:53.584259 23609 net.cpp:86] Creating Layer mnist
I0428 19:35:53.584266 23609 net.cpp:382] mnist -> data
I0428 19:35:53.584285 23609 net.cpp:382] mnist -> label
I0428 19:35:53.585273 23609 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:35:53.587448 23609 net.cpp:124] Setting up mnist
I0428 19:35:53.587478 23609 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:35:53.587482 23609 net.cpp:131] Top shape: 64 (64)
I0428 19:35:53.587486 23609 net.cpp:139] Memory required for data: 200960
I0428 19:35:53.587491 23609 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:53.587532 23609 net.cpp:86] Creating Layer conv0
I0428 19:35:53.587538 23609 net.cpp:408] conv0 <- data
I0428 19:35:53.587550 23609 net.cpp:382] conv0 -> conv0
I0428 19:35:53.821497 23609 net.cpp:124] Setting up conv0
I0428 19:35:53.821538 23609 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:35:53.821543 23609 net.cpp:139] Memory required for data: 14946560
I0428 19:35:53.821558 23609 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:53.821571 23609 net.cpp:86] Creating Layer pool0
I0428 19:35:53.821574 23609 net.cpp:408] pool0 <- conv0
I0428 19:35:53.821596 23609 net.cpp:382] pool0 -> pool0
I0428 19:35:53.821643 23609 net.cpp:124] Setting up pool0
I0428 19:35:53.821650 23609 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:35:53.821653 23609 net.cpp:139] Memory required for data: 18632960
I0428 19:35:53.821656 23609 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:53.821663 23609 net.cpp:86] Creating Layer ip1
I0428 19:35:53.821666 23609 net.cpp:408] ip1 <- pool0
I0428 19:35:53.821671 23609 net.cpp:382] ip1 -> ip1
I0428 19:35:53.823463 23609 net.cpp:124] Setting up ip1
I0428 19:35:53.823477 23609 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:53.823513 23609 net.cpp:139] Memory required for data: 18635520
I0428 19:35:53.823523 23609 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:53.823535 23609 net.cpp:86] Creating Layer relu1
I0428 19:35:53.823541 23609 net.cpp:408] relu1 <- ip1
I0428 19:35:53.823546 23609 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:53.823726 23609 net.cpp:124] Setting up relu1
I0428 19:35:53.823735 23609 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:53.823738 23609 net.cpp:139] Memory required for data: 18638080
I0428 19:35:53.823741 23609 layer_factory.hpp:77] Creating layer loss
I0428 19:35:53.823748 23609 net.cpp:86] Creating Layer loss
I0428 19:35:53.823751 23609 net.cpp:408] loss <- ip1
I0428 19:35:53.823755 23609 net.cpp:408] loss <- label
I0428 19:35:53.823760 23609 net.cpp:382] loss -> loss
I0428 19:35:53.823793 23609 layer_factory.hpp:77] Creating layer loss
I0428 19:35:53.824640 23609 net.cpp:124] Setting up loss
I0428 19:35:53.824652 23609 net.cpp:131] Top shape: (1)
I0428 19:35:53.824656 23609 net.cpp:134]     with loss weight 1
I0428 19:35:53.824671 23609 net.cpp:139] Memory required for data: 18638084
I0428 19:35:53.824676 23609 net.cpp:200] loss needs backward computation.
I0428 19:35:53.824681 23609 net.cpp:200] relu1 needs backward computation.
I0428 19:35:53.824683 23609 net.cpp:200] ip1 needs backward computation.
I0428 19:35:53.824687 23609 net.cpp:200] pool0 needs backward computation.
I0428 19:35:53.824689 23609 net.cpp:200] conv0 needs backward computation.
I0428 19:35:53.824693 23609 net.cpp:202] mnist does not need backward computation.
I0428 19:35:53.824697 23609 net.cpp:244] This network produces output loss
I0428 19:35:53.824703 23609 net.cpp:257] Network initialization done.
I0428 19:35:53.824995 23609 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test234.prototxt
I0428 19:35:53.825018 23609 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:35:53.825083 23609 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:35:53.825136 23609 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:53.825207 23609 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:35:53.825220 23609 net.cpp:86] Creating Layer mnist
I0428 19:35:53.825224 23609 net.cpp:382] mnist -> data
I0428 19:35:53.825232 23609 net.cpp:382] mnist -> label
I0428 19:35:53.825311 23609 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:35:53.826535 23609 net.cpp:124] Setting up mnist
I0428 19:35:53.826565 23609 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:35:53.826571 23609 net.cpp:131] Top shape: 100 (100)
I0428 19:35:53.826575 23609 net.cpp:139] Memory required for data: 314000
I0428 19:35:53.826591 23609 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:35:53.826611 23609 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:35:53.826617 23609 net.cpp:408] label_mnist_1_split <- label
I0428 19:35:53.826622 23609 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:35:53.826644 23609 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:35:53.826726 23609 net.cpp:124] Setting up label_mnist_1_split
I0428 19:35:53.826735 23609 net.cpp:131] Top shape: 100 (100)
I0428 19:35:53.826738 23609 net.cpp:131] Top shape: 100 (100)
I0428 19:35:53.826741 23609 net.cpp:139] Memory required for data: 314800
I0428 19:35:53.826745 23609 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:53.826753 23609 net.cpp:86] Creating Layer conv0
I0428 19:35:53.826757 23609 net.cpp:408] conv0 <- data
I0428 19:35:53.826762 23609 net.cpp:382] conv0 -> conv0
I0428 19:35:53.828387 23609 net.cpp:124] Setting up conv0
I0428 19:35:53.828402 23609 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:35:53.828408 23609 net.cpp:139] Memory required for data: 23354800
I0428 19:35:53.828416 23609 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:53.828424 23609 net.cpp:86] Creating Layer pool0
I0428 19:35:53.828428 23609 net.cpp:408] pool0 <- conv0
I0428 19:35:53.828433 23609 net.cpp:382] pool0 -> pool0
I0428 19:35:53.828469 23609 net.cpp:124] Setting up pool0
I0428 19:35:53.828476 23609 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:35:53.828480 23609 net.cpp:139] Memory required for data: 29114800
I0428 19:35:53.828497 23609 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:53.828505 23609 net.cpp:86] Creating Layer ip1
I0428 19:35:53.828507 23609 net.cpp:408] ip1 <- pool0
I0428 19:35:53.828511 23609 net.cpp:382] ip1 -> ip1
I0428 19:35:53.830482 23609 net.cpp:124] Setting up ip1
I0428 19:35:53.830495 23609 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:53.830499 23609 net.cpp:139] Memory required for data: 29118800
I0428 19:35:53.830523 23609 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:53.830530 23609 net.cpp:86] Creating Layer relu1
I0428 19:35:53.830534 23609 net.cpp:408] relu1 <- ip1
I0428 19:35:53.830539 23609 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:53.830845 23609 net.cpp:124] Setting up relu1
I0428 19:35:53.830855 23609 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:53.830858 23609 net.cpp:139] Memory required for data: 29122800
I0428 19:35:53.830869 23609 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:35:53.830875 23609 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:35:53.830878 23609 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:35:53.830900 23609 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:35:53.830906 23609 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:35:53.830948 23609 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:35:53.830956 23609 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:53.830960 23609 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:53.830963 23609 net.cpp:139] Memory required for data: 29130800
I0428 19:35:53.830966 23609 layer_factory.hpp:77] Creating layer accuracy
I0428 19:35:53.830972 23609 net.cpp:86] Creating Layer accuracy
I0428 19:35:53.830976 23609 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:35:53.830981 23609 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:35:53.830986 23609 net.cpp:382] accuracy -> accuracy
I0428 19:35:53.830992 23609 net.cpp:124] Setting up accuracy
I0428 19:35:53.831012 23609 net.cpp:131] Top shape: (1)
I0428 19:35:53.831014 23609 net.cpp:139] Memory required for data: 29130804
I0428 19:35:53.831017 23609 layer_factory.hpp:77] Creating layer loss
I0428 19:35:53.831030 23609 net.cpp:86] Creating Layer loss
I0428 19:35:53.831035 23609 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:35:53.831039 23609 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:35:53.831043 23609 net.cpp:382] loss -> loss
I0428 19:35:53.831049 23609 layer_factory.hpp:77] Creating layer loss
I0428 19:35:53.831295 23609 net.cpp:124] Setting up loss
I0428 19:35:53.831315 23609 net.cpp:131] Top shape: (1)
I0428 19:35:53.831318 23609 net.cpp:134]     with loss weight 1
I0428 19:35:53.831326 23609 net.cpp:139] Memory required for data: 29130808
I0428 19:35:53.831329 23609 net.cpp:200] loss needs backward computation.
I0428 19:35:53.831333 23609 net.cpp:202] accuracy does not need backward computation.
I0428 19:35:53.831338 23609 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:35:53.831341 23609 net.cpp:200] relu1 needs backward computation.
I0428 19:35:53.831344 23609 net.cpp:200] ip1 needs backward computation.
I0428 19:35:53.831348 23609 net.cpp:200] pool0 needs backward computation.
I0428 19:35:53.831351 23609 net.cpp:200] conv0 needs backward computation.
I0428 19:35:53.831362 23609 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:35:53.831367 23609 net.cpp:202] mnist does not need backward computation.
I0428 19:35:53.831369 23609 net.cpp:244] This network produces output accuracy
I0428 19:35:53.831372 23609 net.cpp:244] This network produces output loss
I0428 19:35:53.831384 23609 net.cpp:257] Network initialization done.
I0428 19:35:53.831429 23609 solver.cpp:56] Solver scaffolding done.
I0428 19:35:53.831607 23609 caffe.cpp:248] Starting Optimization
I0428 19:35:53.831614 23609 solver.cpp:273] Solving LeNet
I0428 19:35:53.831617 23609 solver.cpp:274] Learning Rate Policy: inv
I0428 19:35:53.832362 23609 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:35:53.987195 23616 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:53.991463 23609 solver.cpp:398]     Test net output #0: accuracy = 0.1117
I0428 19:35:53.991483 23609 solver.cpp:398]     Test net output #1: loss = 2.29504 (* 1 = 2.29504 loss)
I0428 19:35:53.996287 23609 solver.cpp:219] Iteration 0 (-9.94917e-32 iter/s, 0.164641s/100 iters), loss = 2.29525
I0428 19:35:53.996311 23609 solver.cpp:238]     Train net output #0: loss = 2.29525 (* 1 = 2.29525 loss)
I0428 19:35:53.996340 23609 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:35:54.209772 23609 solver.cpp:219] Iteration 100 (468.515 iter/s, 0.213441s/100 iters), loss = 0.99513
I0428 19:35:54.209816 23609 solver.cpp:238]     Train net output #0: loss = 0.99513 (* 1 = 0.99513 loss)
I0428 19:35:54.209823 23609 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:35:54.421488 23609 solver.cpp:219] Iteration 200 (472.472 iter/s, 0.211653s/100 iters), loss = 0.854245
I0428 19:35:54.421538 23609 solver.cpp:238]     Train net output #0: loss = 0.854245 (* 1 = 0.854245 loss)
I0428 19:35:54.421545 23609 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:35:54.634218 23609 solver.cpp:219] Iteration 300 (470.224 iter/s, 0.212664s/100 iters), loss = 0.982314
I0428 19:35:54.634261 23609 solver.cpp:238]     Train net output #0: loss = 0.982314 (* 1 = 0.982314 loss)
I0428 19:35:54.634268 23609 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:35:54.846199 23609 solver.cpp:219] Iteration 400 (471.835 iter/s, 0.211938s/100 iters), loss = 0.584981
I0428 19:35:54.846225 23609 solver.cpp:238]     Train net output #0: loss = 0.584981 (* 1 = 0.584981 loss)
I0428 19:35:54.846231 23609 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:35:55.057498 23609 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:35:55.209429 23616 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:55.213740 23609 solver.cpp:398]     Test net output #0: accuracy = 0.8538
I0428 19:35:55.213778 23609 solver.cpp:398]     Test net output #1: loss = 0.440275 (* 1 = 0.440275 loss)
I0428 19:35:55.215906 23609 solver.cpp:219] Iteration 500 (270.521 iter/s, 0.369657s/100 iters), loss = 0.544479
I0428 19:35:55.215945 23609 solver.cpp:238]     Train net output #0: loss = 0.544479 (* 1 = 0.544479 loss)
I0428 19:35:55.215950 23609 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:35:55.427845 23609 solver.cpp:219] Iteration 600 (471.918 iter/s, 0.211901s/100 iters), loss = 0.128892
I0428 19:35:55.427886 23609 solver.cpp:238]     Train net output #0: loss = 0.128892 (* 1 = 0.128892 loss)
I0428 19:35:55.427908 23609 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:35:55.640766 23609 solver.cpp:219] Iteration 700 (469.748 iter/s, 0.21288s/100 iters), loss = 0.271453
I0428 19:35:55.640792 23609 solver.cpp:238]     Train net output #0: loss = 0.271453 (* 1 = 0.271453 loss)
I0428 19:35:55.640799 23609 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:35:55.852313 23609 solver.cpp:219] Iteration 800 (472.804 iter/s, 0.211504s/100 iters), loss = 0.356604
I0428 19:35:55.852356 23609 solver.cpp:238]     Train net output #0: loss = 0.356604 (* 1 = 0.356604 loss)
I0428 19:35:55.852377 23609 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:35:56.063408 23609 solver.cpp:219] Iteration 900 (473.85 iter/s, 0.211037s/100 iters), loss = 0.229627
I0428 19:35:56.063450 23609 solver.cpp:238]     Train net output #0: loss = 0.229627 (* 1 = 0.229627 loss)
I0428 19:35:56.063457 23609 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:35:56.135558 23615 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:56.274044 23609 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:35:56.278095 23609 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:35:56.280622 23609 solver.cpp:311] Iteration 1000, loss = 0.196556
I0428 19:35:56.280639 23609 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:35:56.433138 23616 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:56.437081 23609 solver.cpp:398]     Test net output #0: accuracy = 0.9639
I0428 19:35:56.437120 23609 solver.cpp:398]     Test net output #1: loss = 0.124612 (* 1 = 0.124612 loss)
I0428 19:35:56.437126 23609 solver.cpp:316] Optimization Done.
I0428 19:35:56.437129 23609 caffe.cpp:259] Optimization Done.
