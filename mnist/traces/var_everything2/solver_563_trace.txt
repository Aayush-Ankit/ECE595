I0428 19:49:03.345541 26661 caffe.cpp:218] Using GPUs 0
I0428 19:49:03.374384 26661 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:03.824208 26661 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test563.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:03.824352 26661 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test563.prototxt
I0428 19:49:03.824692 26661 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:03.824705 26661 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:03.824779 26661 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:03.824857 26661 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:03.824944 26661 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:03.824980 26661 net.cpp:86] Creating Layer mnist
I0428 19:49:03.824985 26661 net.cpp:382] mnist -> data
I0428 19:49:03.825004 26661 net.cpp:382] mnist -> label
I0428 19:49:03.826020 26661 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:03.828184 26661 net.cpp:124] Setting up mnist
I0428 19:49:03.828214 26661 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:03.828218 26661 net.cpp:131] Top shape: 64 (64)
I0428 19:49:03.828222 26661 net.cpp:139] Memory required for data: 200960
I0428 19:49:03.828227 26661 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:03.828240 26661 net.cpp:86] Creating Layer conv0
I0428 19:49:03.828272 26661 net.cpp:408] conv0 <- data
I0428 19:49:03.828282 26661 net.cpp:382] conv0 -> conv0
I0428 19:49:04.060986 26661 net.cpp:124] Setting up conv0
I0428 19:49:04.061028 26661 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:04.061031 26661 net.cpp:139] Memory required for data: 938240
I0428 19:49:04.061046 26661 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:04.061059 26661 net.cpp:86] Creating Layer pool0
I0428 19:49:04.061064 26661 net.cpp:408] pool0 <- conv0
I0428 19:49:04.061069 26661 net.cpp:382] pool0 -> pool0
I0428 19:49:04.061113 26661 net.cpp:124] Setting up pool0
I0428 19:49:04.061120 26661 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:04.061121 26661 net.cpp:139] Memory required for data: 1122560
I0428 19:49:04.061125 26661 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:04.061151 26661 net.cpp:86] Creating Layer conv1
I0428 19:49:04.061153 26661 net.cpp:408] conv1 <- pool0
I0428 19:49:04.061157 26661 net.cpp:382] conv1 -> conv1
I0428 19:49:04.062927 26661 net.cpp:124] Setting up conv1
I0428 19:49:04.062955 26661 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:04.062959 26661 net.cpp:139] Memory required for data: 1204480
I0428 19:49:04.062983 26661 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:04.062990 26661 net.cpp:86] Creating Layer pool1
I0428 19:49:04.062994 26661 net.cpp:408] pool1 <- conv1
I0428 19:49:04.062999 26661 net.cpp:382] pool1 -> pool1
I0428 19:49:04.063041 26661 net.cpp:124] Setting up pool1
I0428 19:49:04.063047 26661 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:04.063050 26661 net.cpp:139] Memory required for data: 1224960
I0428 19:49:04.063053 26661 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:04.063060 26661 net.cpp:86] Creating Layer ip1
I0428 19:49:04.063063 26661 net.cpp:408] ip1 <- pool1
I0428 19:49:04.063068 26661 net.cpp:382] ip1 -> ip1
I0428 19:49:04.063163 26661 net.cpp:124] Setting up ip1
I0428 19:49:04.063171 26661 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:04.063174 26661 net.cpp:139] Memory required for data: 1227520
I0428 19:49:04.063181 26661 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:04.063186 26661 net.cpp:86] Creating Layer relu1
I0428 19:49:04.063189 26661 net.cpp:408] relu1 <- ip1
I0428 19:49:04.063194 26661 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:04.063356 26661 net.cpp:124] Setting up relu1
I0428 19:49:04.063365 26661 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:04.063369 26661 net.cpp:139] Memory required for data: 1230080
I0428 19:49:04.063371 26661 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:04.063377 26661 net.cpp:86] Creating Layer ip2
I0428 19:49:04.063380 26661 net.cpp:408] ip2 <- ip1
I0428 19:49:04.063385 26661 net.cpp:382] ip2 -> ip2
I0428 19:49:04.063477 26661 net.cpp:124] Setting up ip2
I0428 19:49:04.063484 26661 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:04.063488 26661 net.cpp:139] Memory required for data: 1236480
I0428 19:49:04.063493 26661 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:04.063498 26661 net.cpp:86] Creating Layer relu2
I0428 19:49:04.063501 26661 net.cpp:408] relu2 <- ip2
I0428 19:49:04.063504 26661 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:04.064251 26661 net.cpp:124] Setting up relu2
I0428 19:49:04.064263 26661 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:04.064282 26661 net.cpp:139] Memory required for data: 1242880
I0428 19:49:04.064285 26661 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:04.064292 26661 net.cpp:86] Creating Layer ip3
I0428 19:49:04.064296 26661 net.cpp:408] ip3 <- ip2
I0428 19:49:04.064301 26661 net.cpp:382] ip3 -> ip3
I0428 19:49:04.064393 26661 net.cpp:124] Setting up ip3
I0428 19:49:04.064400 26661 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:04.064402 26661 net.cpp:139] Memory required for data: 1245440
I0428 19:49:04.064410 26661 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:04.064415 26661 net.cpp:86] Creating Layer relu3
I0428 19:49:04.064419 26661 net.cpp:408] relu3 <- ip3
I0428 19:49:04.064422 26661 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:04.064605 26661 net.cpp:124] Setting up relu3
I0428 19:49:04.064615 26661 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:04.064618 26661 net.cpp:139] Memory required for data: 1248000
I0428 19:49:04.064621 26661 layer_factory.hpp:77] Creating layer loss
I0428 19:49:04.064626 26661 net.cpp:86] Creating Layer loss
I0428 19:49:04.064630 26661 net.cpp:408] loss <- ip3
I0428 19:49:04.064635 26661 net.cpp:408] loss <- label
I0428 19:49:04.064640 26661 net.cpp:382] loss -> loss
I0428 19:49:04.064657 26661 layer_factory.hpp:77] Creating layer loss
I0428 19:49:04.064944 26661 net.cpp:124] Setting up loss
I0428 19:49:04.064968 26661 net.cpp:131] Top shape: (1)
I0428 19:49:04.064972 26661 net.cpp:134]     with loss weight 1
I0428 19:49:04.065001 26661 net.cpp:139] Memory required for data: 1248004
I0428 19:49:04.065004 26661 net.cpp:200] loss needs backward computation.
I0428 19:49:04.065009 26661 net.cpp:200] relu3 needs backward computation.
I0428 19:49:04.065012 26661 net.cpp:200] ip3 needs backward computation.
I0428 19:49:04.065016 26661 net.cpp:200] relu2 needs backward computation.
I0428 19:49:04.065017 26661 net.cpp:200] ip2 needs backward computation.
I0428 19:49:04.065021 26661 net.cpp:200] relu1 needs backward computation.
I0428 19:49:04.065023 26661 net.cpp:200] ip1 needs backward computation.
I0428 19:49:04.065026 26661 net.cpp:200] pool1 needs backward computation.
I0428 19:49:04.065029 26661 net.cpp:200] conv1 needs backward computation.
I0428 19:49:04.065032 26661 net.cpp:200] pool0 needs backward computation.
I0428 19:49:04.065034 26661 net.cpp:200] conv0 needs backward computation.
I0428 19:49:04.065039 26661 net.cpp:202] mnist does not need backward computation.
I0428 19:49:04.065042 26661 net.cpp:244] This network produces output loss
I0428 19:49:04.065052 26661 net.cpp:257] Network initialization done.
I0428 19:49:04.065435 26661 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test563.prototxt
I0428 19:49:04.065477 26661 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:04.065570 26661 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:04.065655 26661 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:04.065699 26661 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:04.065712 26661 net.cpp:86] Creating Layer mnist
I0428 19:49:04.065718 26661 net.cpp:382] mnist -> data
I0428 19:49:04.065726 26661 net.cpp:382] mnist -> label
I0428 19:49:04.065822 26661 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:04.067983 26661 net.cpp:124] Setting up mnist
I0428 19:49:04.068023 26661 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:04.068028 26661 net.cpp:131] Top shape: 100 (100)
I0428 19:49:04.068032 26661 net.cpp:139] Memory required for data: 314000
I0428 19:49:04.068034 26661 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:04.068042 26661 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:04.068044 26661 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:04.068068 26661 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:04.068074 26661 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:04.068111 26661 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:04.068115 26661 net.cpp:131] Top shape: 100 (100)
I0428 19:49:04.068120 26661 net.cpp:131] Top shape: 100 (100)
I0428 19:49:04.068122 26661 net.cpp:139] Memory required for data: 314800
I0428 19:49:04.068125 26661 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:04.068145 26661 net.cpp:86] Creating Layer conv0
I0428 19:49:04.068148 26661 net.cpp:408] conv0 <- data
I0428 19:49:04.068153 26661 net.cpp:382] conv0 -> conv0
I0428 19:49:04.070000 26661 net.cpp:124] Setting up conv0
I0428 19:49:04.070014 26661 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:04.070019 26661 net.cpp:139] Memory required for data: 1466800
I0428 19:49:04.070027 26661 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:04.070034 26661 net.cpp:86] Creating Layer pool0
I0428 19:49:04.070037 26661 net.cpp:408] pool0 <- conv0
I0428 19:49:04.070042 26661 net.cpp:382] pool0 -> pool0
I0428 19:49:04.070078 26661 net.cpp:124] Setting up pool0
I0428 19:49:04.070083 26661 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:04.070086 26661 net.cpp:139] Memory required for data: 1754800
I0428 19:49:04.070088 26661 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:04.070097 26661 net.cpp:86] Creating Layer conv1
I0428 19:49:04.070101 26661 net.cpp:408] conv1 <- pool0
I0428 19:49:04.070104 26661 net.cpp:382] conv1 -> conv1
I0428 19:49:04.072260 26661 net.cpp:124] Setting up conv1
I0428 19:49:04.072273 26661 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:04.072276 26661 net.cpp:139] Memory required for data: 1882800
I0428 19:49:04.072286 26661 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:04.072309 26661 net.cpp:86] Creating Layer pool1
I0428 19:49:04.072319 26661 net.cpp:408] pool1 <- conv1
I0428 19:49:04.072325 26661 net.cpp:382] pool1 -> pool1
I0428 19:49:04.072365 26661 net.cpp:124] Setting up pool1
I0428 19:49:04.072369 26661 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:04.072372 26661 net.cpp:139] Memory required for data: 1914800
I0428 19:49:04.072374 26661 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:04.072386 26661 net.cpp:86] Creating Layer ip1
I0428 19:49:04.072389 26661 net.cpp:408] ip1 <- pool1
I0428 19:49:04.072394 26661 net.cpp:382] ip1 -> ip1
I0428 19:49:04.072531 26661 net.cpp:124] Setting up ip1
I0428 19:49:04.072540 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.072551 26661 net.cpp:139] Memory required for data: 1918800
I0428 19:49:04.072559 26661 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:04.072566 26661 net.cpp:86] Creating Layer relu1
I0428 19:49:04.072569 26661 net.cpp:408] relu1 <- ip1
I0428 19:49:04.072573 26661 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:04.072887 26661 net.cpp:124] Setting up relu1
I0428 19:49:04.072897 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.072906 26661 net.cpp:139] Memory required for data: 1922800
I0428 19:49:04.072909 26661 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:04.072917 26661 net.cpp:86] Creating Layer ip2
I0428 19:49:04.072921 26661 net.cpp:408] ip2 <- ip1
I0428 19:49:04.072926 26661 net.cpp:382] ip2 -> ip2
I0428 19:49:04.073026 26661 net.cpp:124] Setting up ip2
I0428 19:49:04.073035 26661 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:04.073037 26661 net.cpp:139] Memory required for data: 1932800
I0428 19:49:04.073042 26661 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:04.073048 26661 net.cpp:86] Creating Layer relu2
I0428 19:49:04.073051 26661 net.cpp:408] relu2 <- ip2
I0428 19:49:04.073055 26661 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:04.073236 26661 net.cpp:124] Setting up relu2
I0428 19:49:04.073245 26661 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:04.073247 26661 net.cpp:139] Memory required for data: 1942800
I0428 19:49:04.073251 26661 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:04.073256 26661 net.cpp:86] Creating Layer ip3
I0428 19:49:04.073258 26661 net.cpp:408] ip3 <- ip2
I0428 19:49:04.073264 26661 net.cpp:382] ip3 -> ip3
I0428 19:49:04.073385 26661 net.cpp:124] Setting up ip3
I0428 19:49:04.073410 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.073412 26661 net.cpp:139] Memory required for data: 1946800
I0428 19:49:04.073420 26661 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:04.073424 26661 net.cpp:86] Creating Layer relu3
I0428 19:49:04.073427 26661 net.cpp:408] relu3 <- ip3
I0428 19:49:04.073431 26661 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:04.074280 26661 net.cpp:124] Setting up relu3
I0428 19:49:04.074292 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.074295 26661 net.cpp:139] Memory required for data: 1950800
I0428 19:49:04.074300 26661 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:04.074306 26661 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:04.074308 26661 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:04.074314 26661 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:04.074321 26661 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:04.074373 26661 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:04.074378 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.074383 26661 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:04.074385 26661 net.cpp:139] Memory required for data: 1958800
I0428 19:49:04.074403 26661 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:04.074414 26661 net.cpp:86] Creating Layer accuracy
I0428 19:49:04.074417 26661 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:04.074420 26661 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:04.074424 26661 net.cpp:382] accuracy -> accuracy
I0428 19:49:04.074431 26661 net.cpp:124] Setting up accuracy
I0428 19:49:04.074435 26661 net.cpp:131] Top shape: (1)
I0428 19:49:04.074439 26661 net.cpp:139] Memory required for data: 1958804
I0428 19:49:04.074446 26661 layer_factory.hpp:77] Creating layer loss
I0428 19:49:04.074451 26661 net.cpp:86] Creating Layer loss
I0428 19:49:04.074455 26661 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:04.074465 26661 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:04.074468 26661 net.cpp:382] loss -> loss
I0428 19:49:04.074475 26661 layer_factory.hpp:77] Creating layer loss
I0428 19:49:04.074755 26661 net.cpp:124] Setting up loss
I0428 19:49:04.074764 26661 net.cpp:131] Top shape: (1)
I0428 19:49:04.074769 26661 net.cpp:134]     with loss weight 1
I0428 19:49:04.074776 26661 net.cpp:139] Memory required for data: 1958808
I0428 19:49:04.074792 26661 net.cpp:200] loss needs backward computation.
I0428 19:49:04.074796 26661 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:04.074806 26661 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:04.074808 26661 net.cpp:200] relu3 needs backward computation.
I0428 19:49:04.074811 26661 net.cpp:200] ip3 needs backward computation.
I0428 19:49:04.074815 26661 net.cpp:200] relu2 needs backward computation.
I0428 19:49:04.074822 26661 net.cpp:200] ip2 needs backward computation.
I0428 19:49:04.074826 26661 net.cpp:200] relu1 needs backward computation.
I0428 19:49:04.074827 26661 net.cpp:200] ip1 needs backward computation.
I0428 19:49:04.074831 26661 net.cpp:200] pool1 needs backward computation.
I0428 19:49:04.074833 26661 net.cpp:200] conv1 needs backward computation.
I0428 19:49:04.074836 26661 net.cpp:200] pool0 needs backward computation.
I0428 19:49:04.074839 26661 net.cpp:200] conv0 needs backward computation.
I0428 19:49:04.074858 26661 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:04.074862 26661 net.cpp:202] mnist does not need backward computation.
I0428 19:49:04.074865 26661 net.cpp:244] This network produces output accuracy
I0428 19:49:04.074868 26661 net.cpp:244] This network produces output loss
I0428 19:49:04.074880 26661 net.cpp:257] Network initialization done.
I0428 19:49:04.074923 26661 solver.cpp:56] Solver scaffolding done.
I0428 19:49:04.075274 26661 caffe.cpp:248] Starting Optimization
I0428 19:49:04.075281 26661 solver.cpp:273] Solving LeNet
I0428 19:49:04.075284 26661 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:04.076146 26661 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:04.079907 26661 blocking_queue.cpp:49] Waiting for data
I0428 19:49:04.149617 26668 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:04.150115 26661 solver.cpp:398]     Test net output #0: accuracy = 0.0983
I0428 19:49:04.150133 26661 solver.cpp:398]     Test net output #1: loss = 2.304 (* 1 = 2.304 loss)
I0428 19:49:04.151916 26661 solver.cpp:219] Iteration 0 (-1.05042e-30 iter/s, 0.0766075s/100 iters), loss = 2.30929
I0428 19:49:04.151943 26661 solver.cpp:238]     Train net output #0: loss = 2.30929 (* 1 = 2.30929 loss)
I0428 19:49:04.151973 26661 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:04.225375 26661 solver.cpp:219] Iteration 100 (1361.99 iter/s, 0.0734218s/100 iters), loss = 1.56893
I0428 19:49:04.225399 26661 solver.cpp:238]     Train net output #0: loss = 1.56893 (* 1 = 1.56893 loss)
I0428 19:49:04.225405 26661 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:04.295307 26661 solver.cpp:219] Iteration 200 (1430.63 iter/s, 0.069899s/100 iters), loss = 0.770646
I0428 19:49:04.295331 26661 solver.cpp:238]     Train net output #0: loss = 0.770646 (* 1 = 0.770646 loss)
I0428 19:49:04.295336 26661 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:04.365743 26661 solver.cpp:219] Iteration 300 (1420.37 iter/s, 0.0704041s/100 iters), loss = 0.449403
I0428 19:49:04.365783 26661 solver.cpp:238]     Train net output #0: loss = 0.449403 (* 1 = 0.449403 loss)
I0428 19:49:04.365789 26661 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:04.436614 26661 solver.cpp:219] Iteration 400 (1411.97 iter/s, 0.0708229s/100 iters), loss = 0.289772
I0428 19:49:04.436652 26661 solver.cpp:238]     Train net output #0: loss = 0.289772 (* 1 = 0.289772 loss)
I0428 19:49:04.436658 26661 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:04.507624 26661 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:04.582675 26668 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:04.583164 26661 solver.cpp:398]     Test net output #0: accuracy = 0.9143
I0428 19:49:04.583187 26661 solver.cpp:398]     Test net output #1: loss = 0.283185 (* 1 = 0.283185 loss)
I0428 19:49:04.584014 26661 solver.cpp:219] Iteration 500 (678.593 iter/s, 0.147364s/100 iters), loss = 0.487565
I0428 19:49:04.584055 26661 solver.cpp:238]     Train net output #0: loss = 0.487565 (* 1 = 0.487565 loss)
I0428 19:49:04.584096 26661 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:04.660428 26661 solver.cpp:219] Iteration 600 (1309.57 iter/s, 0.0763607s/100 iters), loss = 0.229906
I0428 19:49:04.660475 26661 solver.cpp:238]     Train net output #0: loss = 0.229906 (* 1 = 0.229906 loss)
I0428 19:49:04.660482 26661 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:04.733032 26661 solver.cpp:219] Iteration 700 (1378.35 iter/s, 0.0725504s/100 iters), loss = 0.357058
I0428 19:49:04.733055 26661 solver.cpp:238]     Train net output #0: loss = 0.357058 (* 1 = 0.357058 loss)
I0428 19:49:04.733078 26661 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:04.802968 26661 solver.cpp:219] Iteration 800 (1430.57 iter/s, 0.0699023s/100 iters), loss = 0.485127
I0428 19:49:04.803007 26661 solver.cpp:238]     Train net output #0: loss = 0.485128 (* 1 = 0.485128 loss)
I0428 19:49:04.803014 26661 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:04.875495 26661 solver.cpp:219] Iteration 900 (1379.4 iter/s, 0.0724951s/100 iters), loss = 0.235399
I0428 19:49:04.875536 26661 solver.cpp:238]     Train net output #0: loss = 0.2354 (* 1 = 0.2354 loss)
I0428 19:49:04.875542 26661 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:04.899621 26667 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:04.946557 26661 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:04.947249 26661 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:04.947679 26661 solver.cpp:311] Iteration 1000, loss = 0.172617
I0428 19:49:04.947707 26661 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:05.021899 26668 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:05.022410 26661 solver.cpp:398]     Test net output #0: accuracy = 0.9481
I0428 19:49:05.022430 26661 solver.cpp:398]     Test net output #1: loss = 0.161768 (* 1 = 0.161768 loss)
I0428 19:49:05.022435 26661 solver.cpp:316] Optimization Done.
I0428 19:49:05.022439 26661 caffe.cpp:259] Optimization Done.
