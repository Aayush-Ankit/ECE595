I0428 20:01:49.858376 29814 caffe.cpp:218] Using GPUs 0
I0428 20:01:49.888268 29814 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:50.342368 29814 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test913.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:50.342514 29814 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test913.prototxt
I0428 20:01:50.342845 29814 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:50.342861 29814 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:50.342943 29814 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:50.343009 29814 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:50.343091 29814 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:50.343127 29814 net.cpp:86] Creating Layer mnist
I0428 20:01:50.343132 29814 net.cpp:382] mnist -> data
I0428 20:01:50.343152 29814 net.cpp:382] mnist -> label
I0428 20:01:50.344063 29814 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:50.346284 29814 net.cpp:124] Setting up mnist
I0428 20:01:50.346330 29814 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:50.346335 29814 net.cpp:131] Top shape: 64 (64)
I0428 20:01:50.346338 29814 net.cpp:139] Memory required for data: 200960
I0428 20:01:50.346344 29814 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:50.346359 29814 net.cpp:86] Creating Layer conv0
I0428 20:01:50.346390 29814 net.cpp:408] conv0 <- data
I0428 20:01:50.346401 29814 net.cpp:382] conv0 -> conv0
I0428 20:01:50.577452 29814 net.cpp:124] Setting up conv0
I0428 20:01:50.577493 29814 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:50.577497 29814 net.cpp:139] Memory required for data: 1675520
I0428 20:01:50.577512 29814 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:50.577538 29814 net.cpp:86] Creating Layer pool0
I0428 20:01:50.577543 29814 net.cpp:408] pool0 <- conv0
I0428 20:01:50.577548 29814 net.cpp:382] pool0 -> pool0
I0428 20:01:50.577592 29814 net.cpp:124] Setting up pool0
I0428 20:01:50.577603 29814 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:50.577606 29814 net.cpp:139] Memory required for data: 2044160
I0428 20:01:50.577610 29814 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:50.577620 29814 net.cpp:86] Creating Layer conv1
I0428 20:01:50.577622 29814 net.cpp:408] conv1 <- pool0
I0428 20:01:50.577627 29814 net.cpp:382] conv1 -> conv1
I0428 20:01:50.580404 29814 net.cpp:124] Setting up conv1
I0428 20:01:50.580418 29814 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:50.580422 29814 net.cpp:139] Memory required for data: 2863360
I0428 20:01:50.580431 29814 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:50.580440 29814 net.cpp:86] Creating Layer pool1
I0428 20:01:50.580443 29814 net.cpp:408] pool1 <- conv1
I0428 20:01:50.580448 29814 net.cpp:382] pool1 -> pool1
I0428 20:01:50.580487 29814 net.cpp:124] Setting up pool1
I0428 20:01:50.580504 29814 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:50.580507 29814 net.cpp:139] Memory required for data: 3068160
I0428 20:01:50.580510 29814 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:50.580518 29814 net.cpp:86] Creating Layer ip1
I0428 20:01:50.580520 29814 net.cpp:408] ip1 <- pool1
I0428 20:01:50.580524 29814 net.cpp:382] ip1 -> ip1
I0428 20:01:50.580677 29814 net.cpp:124] Setting up ip1
I0428 20:01:50.580684 29814 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:50.580687 29814 net.cpp:139] Memory required for data: 3070720
I0428 20:01:50.580694 29814 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:50.580700 29814 net.cpp:86] Creating Layer relu1
I0428 20:01:50.580703 29814 net.cpp:408] relu1 <- ip1
I0428 20:01:50.580708 29814 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:50.580945 29814 net.cpp:124] Setting up relu1
I0428 20:01:50.580956 29814 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:50.580960 29814 net.cpp:139] Memory required for data: 3073280
I0428 20:01:50.580963 29814 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:50.580971 29814 net.cpp:86] Creating Layer ip2
I0428 20:01:50.580973 29814 net.cpp:408] ip2 <- ip1
I0428 20:01:50.580979 29814 net.cpp:382] ip2 -> ip2
I0428 20:01:50.581079 29814 net.cpp:124] Setting up ip2
I0428 20:01:50.581087 29814 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:50.581090 29814 net.cpp:139] Memory required for data: 3079680
I0428 20:01:50.581096 29814 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:50.581102 29814 net.cpp:86] Creating Layer relu2
I0428 20:01:50.581106 29814 net.cpp:408] relu2 <- ip2
I0428 20:01:50.581110 29814 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:50.582008 29814 net.cpp:124] Setting up relu2
I0428 20:01:50.582020 29814 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:50.582025 29814 net.cpp:139] Memory required for data: 3086080
I0428 20:01:50.582027 29814 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:50.582034 29814 net.cpp:86] Creating Layer ip3
I0428 20:01:50.582037 29814 net.cpp:408] ip3 <- ip2
I0428 20:01:50.582042 29814 net.cpp:382] ip3 -> ip3
I0428 20:01:50.582134 29814 net.cpp:124] Setting up ip3
I0428 20:01:50.582140 29814 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:50.582144 29814 net.cpp:139] Memory required for data: 3088640
I0428 20:01:50.582150 29814 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:50.582155 29814 net.cpp:86] Creating Layer relu3
I0428 20:01:50.582159 29814 net.cpp:408] relu3 <- ip3
I0428 20:01:50.582162 29814 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:50.582335 29814 net.cpp:124] Setting up relu3
I0428 20:01:50.582345 29814 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:50.582348 29814 net.cpp:139] Memory required for data: 3091200
I0428 20:01:50.582351 29814 layer_factory.hpp:77] Creating layer loss
I0428 20:01:50.582357 29814 net.cpp:86] Creating Layer loss
I0428 20:01:50.582360 29814 net.cpp:408] loss <- ip3
I0428 20:01:50.582363 29814 net.cpp:408] loss <- label
I0428 20:01:50.582370 29814 net.cpp:382] loss -> loss
I0428 20:01:50.582386 29814 layer_factory.hpp:77] Creating layer loss
I0428 20:01:50.582623 29814 net.cpp:124] Setting up loss
I0428 20:01:50.582633 29814 net.cpp:131] Top shape: (1)
I0428 20:01:50.582638 29814 net.cpp:134]     with loss weight 1
I0428 20:01:50.582651 29814 net.cpp:139] Memory required for data: 3091204
I0428 20:01:50.582654 29814 net.cpp:200] loss needs backward computation.
I0428 20:01:50.582659 29814 net.cpp:200] relu3 needs backward computation.
I0428 20:01:50.582661 29814 net.cpp:200] ip3 needs backward computation.
I0428 20:01:50.582664 29814 net.cpp:200] relu2 needs backward computation.
I0428 20:01:50.582667 29814 net.cpp:200] ip2 needs backward computation.
I0428 20:01:50.582670 29814 net.cpp:200] relu1 needs backward computation.
I0428 20:01:50.582674 29814 net.cpp:200] ip1 needs backward computation.
I0428 20:01:50.582676 29814 net.cpp:200] pool1 needs backward computation.
I0428 20:01:50.582679 29814 net.cpp:200] conv1 needs backward computation.
I0428 20:01:50.582682 29814 net.cpp:200] pool0 needs backward computation.
I0428 20:01:50.582685 29814 net.cpp:200] conv0 needs backward computation.
I0428 20:01:50.582690 29814 net.cpp:202] mnist does not need backward computation.
I0428 20:01:50.582692 29814 net.cpp:244] This network produces output loss
I0428 20:01:50.582701 29814 net.cpp:257] Network initialization done.
I0428 20:01:50.583086 29814 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test913.prototxt
I0428 20:01:50.583113 29814 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:50.583231 29814 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:50.583307 29814 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:50.583350 29814 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:50.583362 29814 net.cpp:86] Creating Layer mnist
I0428 20:01:50.583367 29814 net.cpp:382] mnist -> data
I0428 20:01:50.583374 29814 net.cpp:382] mnist -> label
I0428 20:01:50.583452 29814 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:50.585625 29814 net.cpp:124] Setting up mnist
I0428 20:01:50.585641 29814 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:50.585646 29814 net.cpp:131] Top shape: 100 (100)
I0428 20:01:50.585649 29814 net.cpp:139] Memory required for data: 314000
I0428 20:01:50.585654 29814 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:50.585660 29814 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:50.585664 29814 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:50.585669 29814 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:50.585675 29814 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:50.585784 29814 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:50.585791 29814 net.cpp:131] Top shape: 100 (100)
I0428 20:01:50.585795 29814 net.cpp:131] Top shape: 100 (100)
I0428 20:01:50.585798 29814 net.cpp:139] Memory required for data: 314800
I0428 20:01:50.585800 29814 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:50.585808 29814 net.cpp:86] Creating Layer conv0
I0428 20:01:50.585811 29814 net.cpp:408] conv0 <- data
I0428 20:01:50.585816 29814 net.cpp:382] conv0 -> conv0
I0428 20:01:50.587543 29814 net.cpp:124] Setting up conv0
I0428 20:01:50.587556 29814 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:50.587559 29814 net.cpp:139] Memory required for data: 2618800
I0428 20:01:50.587568 29814 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:50.587574 29814 net.cpp:86] Creating Layer pool0
I0428 20:01:50.587579 29814 net.cpp:408] pool0 <- conv0
I0428 20:01:50.587582 29814 net.cpp:382] pool0 -> pool0
I0428 20:01:50.587615 29814 net.cpp:124] Setting up pool0
I0428 20:01:50.587622 29814 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:50.587625 29814 net.cpp:139] Memory required for data: 3194800
I0428 20:01:50.587627 29814 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:50.587635 29814 net.cpp:86] Creating Layer conv1
I0428 20:01:50.587638 29814 net.cpp:408] conv1 <- pool0
I0428 20:01:50.587643 29814 net.cpp:382] conv1 -> conv1
I0428 20:01:50.589375 29814 net.cpp:124] Setting up conv1
I0428 20:01:50.589390 29814 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:50.589395 29814 net.cpp:139] Memory required for data: 4474800
I0428 20:01:50.589402 29814 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:50.589424 29814 net.cpp:86] Creating Layer pool1
I0428 20:01:50.589428 29814 net.cpp:408] pool1 <- conv1
I0428 20:01:50.589433 29814 net.cpp:382] pool1 -> pool1
I0428 20:01:50.589469 29814 net.cpp:124] Setting up pool1
I0428 20:01:50.589475 29814 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:50.589478 29814 net.cpp:139] Memory required for data: 4794800
I0428 20:01:50.589488 29814 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:50.589493 29814 net.cpp:86] Creating Layer ip1
I0428 20:01:50.589498 29814 net.cpp:408] ip1 <- pool1
I0428 20:01:50.589503 29814 net.cpp:382] ip1 -> ip1
I0428 20:01:50.589655 29814 net.cpp:124] Setting up ip1
I0428 20:01:50.589663 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.589678 29814 net.cpp:139] Memory required for data: 4798800
I0428 20:01:50.589684 29814 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:50.589689 29814 net.cpp:86] Creating Layer relu1
I0428 20:01:50.589692 29814 net.cpp:408] relu1 <- ip1
I0428 20:01:50.589697 29814 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:50.589851 29814 net.cpp:124] Setting up relu1
I0428 20:01:50.589860 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.589864 29814 net.cpp:139] Memory required for data: 4802800
I0428 20:01:50.589866 29814 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:50.589872 29814 net.cpp:86] Creating Layer ip2
I0428 20:01:50.589875 29814 net.cpp:408] ip2 <- ip1
I0428 20:01:50.589880 29814 net.cpp:382] ip2 -> ip2
I0428 20:01:50.589967 29814 net.cpp:124] Setting up ip2
I0428 20:01:50.589973 29814 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:50.589977 29814 net.cpp:139] Memory required for data: 4812800
I0428 20:01:50.589982 29814 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:50.589985 29814 net.cpp:86] Creating Layer relu2
I0428 20:01:50.589988 29814 net.cpp:408] relu2 <- ip2
I0428 20:01:50.589993 29814 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:50.590214 29814 net.cpp:124] Setting up relu2
I0428 20:01:50.590224 29814 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:50.590226 29814 net.cpp:139] Memory required for data: 4822800
I0428 20:01:50.590229 29814 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:50.590235 29814 net.cpp:86] Creating Layer ip3
I0428 20:01:50.590239 29814 net.cpp:408] ip3 <- ip2
I0428 20:01:50.590245 29814 net.cpp:382] ip3 -> ip3
I0428 20:01:50.590415 29814 net.cpp:124] Setting up ip3
I0428 20:01:50.590423 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.590426 29814 net.cpp:139] Memory required for data: 4826800
I0428 20:01:50.590435 29814 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:50.590440 29814 net.cpp:86] Creating Layer relu3
I0428 20:01:50.590443 29814 net.cpp:408] relu3 <- ip3
I0428 20:01:50.590448 29814 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:50.591223 29814 net.cpp:124] Setting up relu3
I0428 20:01:50.591250 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.591254 29814 net.cpp:139] Memory required for data: 4830800
I0428 20:01:50.591259 29814 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:50.591264 29814 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:50.591266 29814 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:50.591271 29814 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:50.591277 29814 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:50.591331 29814 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:50.591338 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.591342 29814 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:50.591346 29814 net.cpp:139] Memory required for data: 4838800
I0428 20:01:50.591348 29814 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:50.591353 29814 net.cpp:86] Creating Layer accuracy
I0428 20:01:50.591356 29814 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:50.591361 29814 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:50.591365 29814 net.cpp:382] accuracy -> accuracy
I0428 20:01:50.591372 29814 net.cpp:124] Setting up accuracy
I0428 20:01:50.591375 29814 net.cpp:131] Top shape: (1)
I0428 20:01:50.591378 29814 net.cpp:139] Memory required for data: 4838804
I0428 20:01:50.591382 29814 layer_factory.hpp:77] Creating layer loss
I0428 20:01:50.591385 29814 net.cpp:86] Creating Layer loss
I0428 20:01:50.591388 29814 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:50.591392 29814 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:50.591397 29814 net.cpp:382] loss -> loss
I0428 20:01:50.591403 29814 layer_factory.hpp:77] Creating layer loss
I0428 20:01:50.591640 29814 net.cpp:124] Setting up loss
I0428 20:01:50.591650 29814 net.cpp:131] Top shape: (1)
I0428 20:01:50.591653 29814 net.cpp:134]     with loss weight 1
I0428 20:01:50.591670 29814 net.cpp:139] Memory required for data: 4838808
I0428 20:01:50.591673 29814 net.cpp:200] loss needs backward computation.
I0428 20:01:50.591678 29814 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:50.591681 29814 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:50.591686 29814 net.cpp:200] relu3 needs backward computation.
I0428 20:01:50.591687 29814 net.cpp:200] ip3 needs backward computation.
I0428 20:01:50.591691 29814 net.cpp:200] relu2 needs backward computation.
I0428 20:01:50.591693 29814 net.cpp:200] ip2 needs backward computation.
I0428 20:01:50.591696 29814 net.cpp:200] relu1 needs backward computation.
I0428 20:01:50.591699 29814 net.cpp:200] ip1 needs backward computation.
I0428 20:01:50.591702 29814 net.cpp:200] pool1 needs backward computation.
I0428 20:01:50.591706 29814 net.cpp:200] conv1 needs backward computation.
I0428 20:01:50.591708 29814 net.cpp:200] pool0 needs backward computation.
I0428 20:01:50.591711 29814 net.cpp:200] conv0 needs backward computation.
I0428 20:01:50.591716 29814 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:50.591719 29814 net.cpp:202] mnist does not need backward computation.
I0428 20:01:50.591722 29814 net.cpp:244] This network produces output accuracy
I0428 20:01:50.591732 29814 net.cpp:244] This network produces output loss
I0428 20:01:50.591742 29814 net.cpp:257] Network initialization done.
I0428 20:01:50.591794 29814 solver.cpp:56] Solver scaffolding done.
I0428 20:01:50.592156 29814 caffe.cpp:248] Starting Optimization
I0428 20:01:50.592164 29814 solver.cpp:273] Solving LeNet
I0428 20:01:50.592166 29814 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:50.592413 29814 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:50.597376 29814 blocking_queue.cpp:49] Waiting for data
I0428 20:01:50.670249 29821 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:50.670773 29814 solver.cpp:398]     Test net output #0: accuracy = 0.0982
I0428 20:01:50.670807 29814 solver.cpp:398]     Test net output #1: loss = 2.31164 (* 1 = 2.31164 loss)
I0428 20:01:50.674031 29814 solver.cpp:219] Iteration 0 (-2.98399e-31 iter/s, 0.0818074s/100 iters), loss = 2.29522
I0428 20:01:50.674068 29814 solver.cpp:238]     Train net output #0: loss = 2.29522 (* 1 = 2.29522 loss)
I0428 20:01:50.674079 29814 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:50.781750 29814 solver.cpp:219] Iteration 100 (928.75 iter/s, 0.107672s/100 iters), loss = 0.916715
I0428 20:01:50.781790 29814 solver.cpp:238]     Train net output #0: loss = 0.916715 (* 1 = 0.916715 loss)
I0428 20:01:50.781796 29814 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:50.888547 29814 solver.cpp:219] Iteration 200 (936.661 iter/s, 0.106762s/100 iters), loss = 0.696004
I0428 20:01:50.888589 29814 solver.cpp:238]     Train net output #0: loss = 0.696004 (* 1 = 0.696004 loss)
I0428 20:01:50.888595 29814 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:50.991726 29814 solver.cpp:219] Iteration 300 (969.668 iter/s, 0.103128s/100 iters), loss = 0.676925
I0428 20:01:50.991765 29814 solver.cpp:238]     Train net output #0: loss = 0.676925 (* 1 = 0.676925 loss)
I0428 20:01:50.991772 29814 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:51.094861 29814 solver.cpp:219] Iteration 400 (969.927 iter/s, 0.103101s/100 iters), loss = 0.529311
I0428 20:01:51.094903 29814 solver.cpp:238]     Train net output #0: loss = 0.529311 (* 1 = 0.529311 loss)
I0428 20:01:51.094910 29814 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:51.197770 29814 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:51.245335 29821 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:51.245867 29814 solver.cpp:398]     Test net output #0: accuracy = 0.7675
I0428 20:01:51.245901 29814 solver.cpp:398]     Test net output #1: loss = 0.617949 (* 1 = 0.617949 loss)
I0428 20:01:51.246951 29814 solver.cpp:219] Iteration 500 (657.742 iter/s, 0.152035s/100 iters), loss = 0.554181
I0428 20:01:51.247014 29814 solver.cpp:238]     Train net output #0: loss = 0.554181 (* 1 = 0.554181 loss)
I0428 20:01:51.247025 29814 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:51.351323 29814 solver.cpp:219] Iteration 600 (958.774 iter/s, 0.1043s/100 iters), loss = 0.653162
I0428 20:01:51.351366 29814 solver.cpp:238]     Train net output #0: loss = 0.653162 (* 1 = 0.653162 loss)
I0428 20:01:51.351373 29814 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:51.460877 29814 solver.cpp:219] Iteration 700 (913.127 iter/s, 0.109514s/100 iters), loss = 0.531951
I0428 20:01:51.460927 29814 solver.cpp:238]     Train net output #0: loss = 0.531952 (* 1 = 0.531952 loss)
I0428 20:01:51.460934 29814 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:51.571738 29814 solver.cpp:219] Iteration 800 (902.512 iter/s, 0.110802s/100 iters), loss = 0.871123
I0428 20:01:51.571781 29814 solver.cpp:238]     Train net output #0: loss = 0.871123 (* 1 = 0.871123 loss)
I0428 20:01:51.571804 29814 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:51.685946 29814 solver.cpp:219] Iteration 900 (875.888 iter/s, 0.11417s/100 iters), loss = 0.511002
I0428 20:01:51.685973 29814 solver.cpp:238]     Train net output #0: loss = 0.511002 (* 1 = 0.511002 loss)
I0428 20:01:51.685981 29814 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:51.720872 29820 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:51.788398 29814 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:51.789691 29814 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:51.790472 29814 solver.cpp:311] Iteration 1000, loss = 0.608145
I0428 20:01:51.790498 29814 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:51.892791 29821 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:51.893504 29814 solver.cpp:398]     Test net output #0: accuracy = 0.7872
I0428 20:01:51.893534 29814 solver.cpp:398]     Test net output #1: loss = 0.534422 (* 1 = 0.534422 loss)
I0428 20:01:51.893545 29814 solver.cpp:316] Optimization Done.
I0428 20:01:51.893551 29814 caffe.cpp:259] Optimization Done.
