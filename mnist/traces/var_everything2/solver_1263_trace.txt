I0428 20:16:07.026373   589 caffe.cpp:218] Using GPUs 0
I0428 20:16:07.061241   589 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:07.514997   589 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1263.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:07.515121   589 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1263.prototxt
I0428 20:16:07.515441   589 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:07.515457   589 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:07.515555   589 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:07.515619   589 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:07.515700   589 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:07.515720   589 net.cpp:86] Creating Layer mnist
I0428 20:16:07.515727   589 net.cpp:382] mnist -> data
I0428 20:16:07.515746   589 net.cpp:382] mnist -> label
I0428 20:16:07.516665   589 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:07.518921   589 net.cpp:124] Setting up mnist
I0428 20:16:07.518965   589 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:07.518971   589 net.cpp:131] Top shape: 64 (64)
I0428 20:16:07.518975   589 net.cpp:139] Memory required for data: 200960
I0428 20:16:07.518981   589 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:07.518996   589 net.cpp:86] Creating Layer conv0
I0428 20:16:07.519014   589 net.cpp:408] conv0 <- data
I0428 20:16:07.519026   589 net.cpp:382] conv0 -> conv0
I0428 20:16:07.750280   589 net.cpp:124] Setting up conv0
I0428 20:16:07.750321   589 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:07.750325   589 net.cpp:139] Memory required for data: 7573760
I0428 20:16:07.750340   589 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:07.750354   589 net.cpp:86] Creating Layer pool0
I0428 20:16:07.750357   589 net.cpp:408] pool0 <- conv0
I0428 20:16:07.750376   589 net.cpp:382] pool0 -> pool0
I0428 20:16:07.750437   589 net.cpp:124] Setting up pool0
I0428 20:16:07.750442   589 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:07.750444   589 net.cpp:139] Memory required for data: 9416960
I0428 20:16:07.750447   589 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:07.750458   589 net.cpp:86] Creating Layer conv1
I0428 20:16:07.750460   589 net.cpp:408] conv1 <- pool0
I0428 20:16:07.750465   589 net.cpp:382] conv1 -> conv1
I0428 20:16:07.753231   589 net.cpp:124] Setting up conv1
I0428 20:16:07.753260   589 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:07.753264   589 net.cpp:139] Memory required for data: 9498880
I0428 20:16:07.753273   589 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:07.753279   589 net.cpp:86] Creating Layer pool1
I0428 20:16:07.753283   589 net.cpp:408] pool1 <- conv1
I0428 20:16:07.753288   589 net.cpp:382] pool1 -> pool1
I0428 20:16:07.753355   589 net.cpp:124] Setting up pool1
I0428 20:16:07.753360   589 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:07.753362   589 net.cpp:139] Memory required for data: 9519360
I0428 20:16:07.753365   589 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:07.753372   589 net.cpp:86] Creating Layer ip1
I0428 20:16:07.753376   589 net.cpp:408] ip1 <- pool1
I0428 20:16:07.753379   589 net.cpp:382] ip1 -> ip1
I0428 20:16:07.753480   589 net.cpp:124] Setting up ip1
I0428 20:16:07.753491   589 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:07.753495   589 net.cpp:139] Memory required for data: 9521920
I0428 20:16:07.753501   589 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:07.753507   589 net.cpp:86] Creating Layer relu1
I0428 20:16:07.753510   589 net.cpp:408] relu1 <- ip1
I0428 20:16:07.753515   589 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:07.753686   589 net.cpp:124] Setting up relu1
I0428 20:16:07.753710   589 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:07.753712   589 net.cpp:139] Memory required for data: 9524480
I0428 20:16:07.753715   589 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:07.753721   589 net.cpp:86] Creating Layer ip2
I0428 20:16:07.753724   589 net.cpp:408] ip2 <- ip1
I0428 20:16:07.753728   589 net.cpp:382] ip2 -> ip2
I0428 20:16:07.753813   589 net.cpp:124] Setting up ip2
I0428 20:16:07.753819   589 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:07.753823   589 net.cpp:139] Memory required for data: 9530880
I0428 20:16:07.753828   589 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:07.753832   589 net.cpp:86] Creating Layer relu2
I0428 20:16:07.753835   589 net.cpp:408] relu2 <- ip2
I0428 20:16:07.753839   589 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:07.754567   589 net.cpp:124] Setting up relu2
I0428 20:16:07.754580   589 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:07.754583   589 net.cpp:139] Memory required for data: 9537280
I0428 20:16:07.754587   589 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:07.754611   589 net.cpp:86] Creating Layer ip3
I0428 20:16:07.754613   589 net.cpp:408] ip3 <- ip2
I0428 20:16:07.754618   589 net.cpp:382] ip3 -> ip3
I0428 20:16:07.754730   589 net.cpp:124] Setting up ip3
I0428 20:16:07.754739   589 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:07.754741   589 net.cpp:139] Memory required for data: 9539840
I0428 20:16:07.754763   589 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:07.754768   589 net.cpp:86] Creating Layer relu3
I0428 20:16:07.754771   589 net.cpp:408] relu3 <- ip3
I0428 20:16:07.754776   589 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:07.754930   589 net.cpp:124] Setting up relu3
I0428 20:16:07.754940   589 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:07.754942   589 net.cpp:139] Memory required for data: 9542400
I0428 20:16:07.754945   589 layer_factory.hpp:77] Creating layer loss
I0428 20:16:07.754956   589 net.cpp:86] Creating Layer loss
I0428 20:16:07.754959   589 net.cpp:408] loss <- ip3
I0428 20:16:07.754963   589 net.cpp:408] loss <- label
I0428 20:16:07.754968   589 net.cpp:382] loss -> loss
I0428 20:16:07.754982   589 layer_factory.hpp:77] Creating layer loss
I0428 20:16:07.755221   589 net.cpp:124] Setting up loss
I0428 20:16:07.755231   589 net.cpp:131] Top shape: (1)
I0428 20:16:07.755234   589 net.cpp:134]     with loss weight 1
I0428 20:16:07.755247   589 net.cpp:139] Memory required for data: 9542404
I0428 20:16:07.755251   589 net.cpp:200] loss needs backward computation.
I0428 20:16:07.755254   589 net.cpp:200] relu3 needs backward computation.
I0428 20:16:07.755257   589 net.cpp:200] ip3 needs backward computation.
I0428 20:16:07.755260   589 net.cpp:200] relu2 needs backward computation.
I0428 20:16:07.755262   589 net.cpp:200] ip2 needs backward computation.
I0428 20:16:07.755265   589 net.cpp:200] relu1 needs backward computation.
I0428 20:16:07.755269   589 net.cpp:200] ip1 needs backward computation.
I0428 20:16:07.755270   589 net.cpp:200] pool1 needs backward computation.
I0428 20:16:07.755273   589 net.cpp:200] conv1 needs backward computation.
I0428 20:16:07.755276   589 net.cpp:200] pool0 needs backward computation.
I0428 20:16:07.755280   589 net.cpp:200] conv0 needs backward computation.
I0428 20:16:07.755282   589 net.cpp:202] mnist does not need backward computation.
I0428 20:16:07.755285   589 net.cpp:244] This network produces output loss
I0428 20:16:07.755295   589 net.cpp:257] Network initialization done.
I0428 20:16:07.755667   589 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1263.prototxt
I0428 20:16:07.755707   589 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:07.755820   589 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:07.755928   589 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:07.755970   589 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:07.755985   589 net.cpp:86] Creating Layer mnist
I0428 20:16:07.755990   589 net.cpp:382] mnist -> data
I0428 20:16:07.756000   589 net.cpp:382] mnist -> label
I0428 20:16:07.756083   589 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:07.758049   589 net.cpp:124] Setting up mnist
I0428 20:16:07.758075   589 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:07.758095   589 net.cpp:131] Top shape: 100 (100)
I0428 20:16:07.758098   589 net.cpp:139] Memory required for data: 314000
I0428 20:16:07.758101   589 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:07.758108   589 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:07.758111   589 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:07.758116   589 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:07.758123   589 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:07.758169   589 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:07.758174   589 net.cpp:131] Top shape: 100 (100)
I0428 20:16:07.758178   589 net.cpp:131] Top shape: 100 (100)
I0428 20:16:07.758180   589 net.cpp:139] Memory required for data: 314800
I0428 20:16:07.758183   589 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:07.758193   589 net.cpp:86] Creating Layer conv0
I0428 20:16:07.758196   589 net.cpp:408] conv0 <- data
I0428 20:16:07.758201   589 net.cpp:382] conv0 -> conv0
I0428 20:16:07.760026   589 net.cpp:124] Setting up conv0
I0428 20:16:07.760040   589 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:07.760059   589 net.cpp:139] Memory required for data: 11834800
I0428 20:16:07.760077   589 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:07.760083   589 net.cpp:86] Creating Layer pool0
I0428 20:16:07.760087   589 net.cpp:408] pool0 <- conv0
I0428 20:16:07.760093   589 net.cpp:382] pool0 -> pool0
I0428 20:16:07.760149   589 net.cpp:124] Setting up pool0
I0428 20:16:07.760154   589 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:07.760157   589 net.cpp:139] Memory required for data: 14714800
I0428 20:16:07.760160   589 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:07.760169   589 net.cpp:86] Creating Layer conv1
I0428 20:16:07.760174   589 net.cpp:408] conv1 <- pool0
I0428 20:16:07.760179   589 net.cpp:382] conv1 -> conv1
I0428 20:16:07.761850   589 net.cpp:124] Setting up conv1
I0428 20:16:07.761894   589 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:07.761898   589 net.cpp:139] Memory required for data: 14842800
I0428 20:16:07.761907   589 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:07.761914   589 net.cpp:86] Creating Layer pool1
I0428 20:16:07.761917   589 net.cpp:408] pool1 <- conv1
I0428 20:16:07.761924   589 net.cpp:382] pool1 -> pool1
I0428 20:16:07.761970   589 net.cpp:124] Setting up pool1
I0428 20:16:07.761976   589 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:07.761978   589 net.cpp:139] Memory required for data: 14874800
I0428 20:16:07.761981   589 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:07.761988   589 net.cpp:86] Creating Layer ip1
I0428 20:16:07.761992   589 net.cpp:408] ip1 <- pool1
I0428 20:16:07.761998   589 net.cpp:382] ip1 -> ip1
I0428 20:16:07.762125   589 net.cpp:124] Setting up ip1
I0428 20:16:07.762135   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.762150   589 net.cpp:139] Memory required for data: 14878800
I0428 20:16:07.762156   589 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:07.762162   589 net.cpp:86] Creating Layer relu1
I0428 20:16:07.762166   589 net.cpp:408] relu1 <- ip1
I0428 20:16:07.762173   589 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:07.762346   589 net.cpp:124] Setting up relu1
I0428 20:16:07.762356   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.762359   589 net.cpp:139] Memory required for data: 14882800
I0428 20:16:07.762362   589 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:07.762372   589 net.cpp:86] Creating Layer ip2
I0428 20:16:07.762389   589 net.cpp:408] ip2 <- ip1
I0428 20:16:07.762395   589 net.cpp:382] ip2 -> ip2
I0428 20:16:07.762497   589 net.cpp:124] Setting up ip2
I0428 20:16:07.762506   589 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:07.762508   589 net.cpp:139] Memory required for data: 14892800
I0428 20:16:07.762513   589 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:07.762518   589 net.cpp:86] Creating Layer relu2
I0428 20:16:07.762521   589 net.cpp:408] relu2 <- ip2
I0428 20:16:07.762527   589 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:07.762688   589 net.cpp:124] Setting up relu2
I0428 20:16:07.762697   589 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:07.762717   589 net.cpp:139] Memory required for data: 14902800
I0428 20:16:07.762719   589 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:07.762725   589 net.cpp:86] Creating Layer ip3
I0428 20:16:07.762729   589 net.cpp:408] ip3 <- ip2
I0428 20:16:07.762734   589 net.cpp:382] ip3 -> ip3
I0428 20:16:07.762862   589 net.cpp:124] Setting up ip3
I0428 20:16:07.762869   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.762873   589 net.cpp:139] Memory required for data: 14906800
I0428 20:16:07.762881   589 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:07.762887   589 net.cpp:86] Creating Layer relu3
I0428 20:16:07.762890   589 net.cpp:408] relu3 <- ip3
I0428 20:16:07.762894   589 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:07.763870   589 net.cpp:124] Setting up relu3
I0428 20:16:07.763896   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.763900   589 net.cpp:139] Memory required for data: 14910800
I0428 20:16:07.763905   589 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:07.763926   589 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:07.763936   589 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:07.763942   589 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:07.763947   589 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:07.763990   589 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:07.763998   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.764003   589 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:07.764005   589 net.cpp:139] Memory required for data: 14918800
I0428 20:16:07.764008   589 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:07.764014   589 net.cpp:86] Creating Layer accuracy
I0428 20:16:07.764016   589 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:07.764020   589 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:07.764029   589 net.cpp:382] accuracy -> accuracy
I0428 20:16:07.764036   589 net.cpp:124] Setting up accuracy
I0428 20:16:07.764040   589 net.cpp:131] Top shape: (1)
I0428 20:16:07.764044   589 net.cpp:139] Memory required for data: 14918804
I0428 20:16:07.764046   589 layer_factory.hpp:77] Creating layer loss
I0428 20:16:07.764052   589 net.cpp:86] Creating Layer loss
I0428 20:16:07.764055   589 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:07.764060   589 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:07.764063   589 net.cpp:382] loss -> loss
I0428 20:16:07.764070   589 layer_factory.hpp:77] Creating layer loss
I0428 20:16:07.764310   589 net.cpp:124] Setting up loss
I0428 20:16:07.764323   589 net.cpp:131] Top shape: (1)
I0428 20:16:07.764333   589 net.cpp:134]     with loss weight 1
I0428 20:16:07.764348   589 net.cpp:139] Memory required for data: 14918808
I0428 20:16:07.764353   589 net.cpp:200] loss needs backward computation.
I0428 20:16:07.764355   589 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:07.764365   589 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:07.764369   589 net.cpp:200] relu3 needs backward computation.
I0428 20:16:07.764371   589 net.cpp:200] ip3 needs backward computation.
I0428 20:16:07.764387   589 net.cpp:200] relu2 needs backward computation.
I0428 20:16:07.764394   589 net.cpp:200] ip2 needs backward computation.
I0428 20:16:07.764397   589 net.cpp:200] relu1 needs backward computation.
I0428 20:16:07.764400   589 net.cpp:200] ip1 needs backward computation.
I0428 20:16:07.764403   589 net.cpp:200] pool1 needs backward computation.
I0428 20:16:07.764406   589 net.cpp:200] conv1 needs backward computation.
I0428 20:16:07.764410   589 net.cpp:200] pool0 needs backward computation.
I0428 20:16:07.764412   589 net.cpp:200] conv0 needs backward computation.
I0428 20:16:07.764415   589 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:07.764420   589 net.cpp:202] mnist does not need backward computation.
I0428 20:16:07.764422   589 net.cpp:244] This network produces output accuracy
I0428 20:16:07.764425   589 net.cpp:244] This network produces output loss
I0428 20:16:07.764437   589 net.cpp:257] Network initialization done.
I0428 20:16:07.764478   589 solver.cpp:56] Solver scaffolding done.
I0428 20:16:07.764894   589 caffe.cpp:248] Starting Optimization
I0428 20:16:07.764905   589 solver.cpp:273] Solving LeNet
I0428 20:16:07.764909   589 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:07.765832   589 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:07.772277   589 blocking_queue.cpp:49] Waiting for data
I0428 20:16:07.844564   596 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:07.845311   589 solver.cpp:398]     Test net output #0: accuracy = 0.105
I0428 20:16:07.845336   589 solver.cpp:398]     Test net output #1: loss = 2.30329 (* 1 = 2.30329 loss)
I0428 20:16:07.849750   589 solver.cpp:219] Iteration 0 (-2.43897e-31 iter/s, 0.0847872s/100 iters), loss = 2.28832
I0428 20:16:07.849791   589 solver.cpp:238]     Train net output #0: loss = 2.28832 (* 1 = 2.28832 loss)
I0428 20:16:07.849802   589 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:07.966770   589 solver.cpp:219] Iteration 100 (854.827 iter/s, 0.116983s/100 iters), loss = 0.952883
I0428 20:16:07.966811   589 solver.cpp:238]     Train net output #0: loss = 0.952883 (* 1 = 0.952883 loss)
I0428 20:16:07.966819   589 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:08.083791   589 solver.cpp:219] Iteration 200 (854.954 iter/s, 0.116965s/100 iters), loss = 0.747768
I0428 20:16:08.083832   589 solver.cpp:238]     Train net output #0: loss = 0.747768 (* 1 = 0.747768 loss)
I0428 20:16:08.083854   589 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:08.199570   589 solver.cpp:219] Iteration 300 (864.086 iter/s, 0.115729s/100 iters), loss = 0.487037
I0428 20:16:08.199609   589 solver.cpp:238]     Train net output #0: loss = 0.487037 (* 1 = 0.487037 loss)
I0428 20:16:08.199616   589 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:08.316884   589 solver.cpp:219] Iteration 400 (852.782 iter/s, 0.117263s/100 iters), loss = 0.449027
I0428 20:16:08.316941   589 solver.cpp:238]     Train net output #0: loss = 0.449027 (* 1 = 0.449027 loss)
I0428 20:16:08.316947   589 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:08.431615   589 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:08.495554   596 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:08.497259   589 solver.cpp:398]     Test net output #0: accuracy = 0.8556
I0428 20:16:08.497297   589 solver.cpp:398]     Test net output #1: loss = 0.412004 (* 1 = 0.412004 loss)
I0428 20:16:08.498453   589 solver.cpp:219] Iteration 500 (550.924 iter/s, 0.181513s/100 iters), loss = 0.404155
I0428 20:16:08.498510   589 solver.cpp:238]     Train net output #0: loss = 0.404155 (* 1 = 0.404155 loss)
I0428 20:16:08.498517   589 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:08.621327   589 solver.cpp:219] Iteration 600 (814.284 iter/s, 0.122807s/100 iters), loss = 0.445078
I0428 20:16:08.621367   589 solver.cpp:238]     Train net output #0: loss = 0.445078 (* 1 = 0.445078 loss)
I0428 20:16:08.621373   589 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:08.736672   589 solver.cpp:219] Iteration 700 (867.346 iter/s, 0.115294s/100 iters), loss = 0.284771
I0428 20:16:08.736714   589 solver.cpp:238]     Train net output #0: loss = 0.284771 (* 1 = 0.284771 loss)
I0428 20:16:08.736721   589 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:08.853132   589 solver.cpp:219] Iteration 800 (859.06 iter/s, 0.116406s/100 iters), loss = 0.312692
I0428 20:16:08.853158   589 solver.cpp:238]     Train net output #0: loss = 0.312692 (* 1 = 0.312692 loss)
I0428 20:16:08.853165   589 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:08.966639   589 solver.cpp:219] Iteration 900 (881.295 iter/s, 0.113469s/100 iters), loss = 0.200465
I0428 20:16:08.966678   589 solver.cpp:238]     Train net output #0: loss = 0.200465 (* 1 = 0.200465 loss)
I0428 20:16:08.966684   589 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:09.005584   595 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:09.080402   589 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:09.081485   589 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:09.082216   589 solver.cpp:311] Iteration 1000, loss = 0.235122
I0428 20:16:09.082231   589 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:09.146451   596 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:09.148188   589 solver.cpp:398]     Test net output #0: accuracy = 0.9632
I0428 20:16:09.148223   589 solver.cpp:398]     Test net output #1: loss = 0.129157 (* 1 = 0.129157 loss)
I0428 20:16:09.148229   589 solver.cpp:316] Optimization Done.
I0428 20:16:09.148233   589 caffe.cpp:259] Optimization Done.
