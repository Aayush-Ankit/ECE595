I0428 19:54:23.444972 27986 caffe.cpp:218] Using GPUs 0
I0428 19:54:23.484246 27986 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:23.999388 27986 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test710.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:23.999532 27986 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test710.prototxt
I0428 19:54:23.999913 27986 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:23.999930 27986 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:24.000022 27986 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:24.000097 27986 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:24.000201 27986 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:24.000226 27986 net.cpp:86] Creating Layer mnist
I0428 19:54:24.000236 27986 net.cpp:382] mnist -> data
I0428 19:54:24.000259 27986 net.cpp:382] mnist -> label
I0428 19:54:24.001374 27986 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:24.003819 27986 net.cpp:124] Setting up mnist
I0428 19:54:24.003837 27986 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:24.003844 27986 net.cpp:131] Top shape: 64 (64)
I0428 19:54:24.003846 27986 net.cpp:139] Memory required for data: 200960
I0428 19:54:24.003855 27986 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:24.003872 27986 net.cpp:86] Creating Layer conv0
I0428 19:54:24.003880 27986 net.cpp:408] conv0 <- data
I0428 19:54:24.003892 27986 net.cpp:382] conv0 -> conv0
I0428 19:54:24.292271 27986 net.cpp:124] Setting up conv0
I0428 19:54:24.292301 27986 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:24.292306 27986 net.cpp:139] Memory required for data: 938240
I0428 19:54:24.292345 27986 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:24.292358 27986 net.cpp:86] Creating Layer pool0
I0428 19:54:24.292362 27986 net.cpp:408] pool0 <- conv0
I0428 19:54:24.292368 27986 net.cpp:382] pool0 -> pool0
I0428 19:54:24.292420 27986 net.cpp:124] Setting up pool0
I0428 19:54:24.292429 27986 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:24.292433 27986 net.cpp:139] Memory required for data: 1122560
I0428 19:54:24.292436 27986 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:24.292448 27986 net.cpp:86] Creating Layer conv1
I0428 19:54:24.292454 27986 net.cpp:408] conv1 <- pool0
I0428 19:54:24.292459 27986 net.cpp:382] conv1 -> conv1
I0428 19:54:24.295341 27986 net.cpp:124] Setting up conv1
I0428 19:54:24.295357 27986 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:24.295361 27986 net.cpp:139] Memory required for data: 2760960
I0428 19:54:24.295370 27986 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:24.295378 27986 net.cpp:86] Creating Layer pool1
I0428 19:54:24.295382 27986 net.cpp:408] pool1 <- conv1
I0428 19:54:24.295388 27986 net.cpp:382] pool1 -> pool1
I0428 19:54:24.295428 27986 net.cpp:124] Setting up pool1
I0428 19:54:24.295433 27986 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:24.295436 27986 net.cpp:139] Memory required for data: 3170560
I0428 19:54:24.295439 27986 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:24.295447 27986 net.cpp:86] Creating Layer ip1
I0428 19:54:24.295450 27986 net.cpp:408] ip1 <- pool1
I0428 19:54:24.295455 27986 net.cpp:382] ip1 -> ip1
I0428 19:54:24.295796 27986 net.cpp:124] Setting up ip1
I0428 19:54:24.295804 27986 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:54:24.295809 27986 net.cpp:139] Memory required for data: 3176960
I0428 19:54:24.295815 27986 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:24.295821 27986 net.cpp:86] Creating Layer relu1
I0428 19:54:24.295825 27986 net.cpp:408] relu1 <- ip1
I0428 19:54:24.295828 27986 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:24.296000 27986 net.cpp:124] Setting up relu1
I0428 19:54:24.296010 27986 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:54:24.296013 27986 net.cpp:139] Memory required for data: 3183360
I0428 19:54:24.296016 27986 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:24.296023 27986 net.cpp:86] Creating Layer ip2
I0428 19:54:24.296026 27986 net.cpp:408] ip2 <- ip1
I0428 19:54:24.296031 27986 net.cpp:382] ip2 -> ip2
I0428 19:54:24.296130 27986 net.cpp:124] Setting up ip2
I0428 19:54:24.296138 27986 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:24.296141 27986 net.cpp:139] Memory required for data: 3185920
I0428 19:54:24.296146 27986 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:24.296152 27986 net.cpp:86] Creating Layer relu2
I0428 19:54:24.296155 27986 net.cpp:408] relu2 <- ip2
I0428 19:54:24.296160 27986 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:24.296932 27986 net.cpp:124] Setting up relu2
I0428 19:54:24.296947 27986 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:24.296949 27986 net.cpp:139] Memory required for data: 3188480
I0428 19:54:24.296953 27986 layer_factory.hpp:77] Creating layer loss
I0428 19:54:24.296960 27986 net.cpp:86] Creating Layer loss
I0428 19:54:24.296963 27986 net.cpp:408] loss <- ip2
I0428 19:54:24.296968 27986 net.cpp:408] loss <- label
I0428 19:54:24.296974 27986 net.cpp:382] loss -> loss
I0428 19:54:24.296994 27986 layer_factory.hpp:77] Creating layer loss
I0428 19:54:24.297246 27986 net.cpp:124] Setting up loss
I0428 19:54:24.297257 27986 net.cpp:131] Top shape: (1)
I0428 19:54:24.297260 27986 net.cpp:134]     with loss weight 1
I0428 19:54:24.297274 27986 net.cpp:139] Memory required for data: 3188484
I0428 19:54:24.297278 27986 net.cpp:200] loss needs backward computation.
I0428 19:54:24.297282 27986 net.cpp:200] relu2 needs backward computation.
I0428 19:54:24.297286 27986 net.cpp:200] ip2 needs backward computation.
I0428 19:54:24.297288 27986 net.cpp:200] relu1 needs backward computation.
I0428 19:54:24.297291 27986 net.cpp:200] ip1 needs backward computation.
I0428 19:54:24.297304 27986 net.cpp:200] pool1 needs backward computation.
I0428 19:54:24.297307 27986 net.cpp:200] conv1 needs backward computation.
I0428 19:54:24.297312 27986 net.cpp:200] pool0 needs backward computation.
I0428 19:54:24.297313 27986 net.cpp:200] conv0 needs backward computation.
I0428 19:54:24.297318 27986 net.cpp:202] mnist does not need backward computation.
I0428 19:54:24.297322 27986 net.cpp:244] This network produces output loss
I0428 19:54:24.297330 27986 net.cpp:257] Network initialization done.
I0428 19:54:24.297634 27986 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test710.prototxt
I0428 19:54:24.297662 27986 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:24.297750 27986 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:24.297821 27986 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:24.297873 27986 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:24.297886 27986 net.cpp:86] Creating Layer mnist
I0428 19:54:24.297893 27986 net.cpp:382] mnist -> data
I0428 19:54:24.297899 27986 net.cpp:382] mnist -> label
I0428 19:54:24.297991 27986 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:24.299985 27986 net.cpp:124] Setting up mnist
I0428 19:54:24.299999 27986 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:24.300005 27986 net.cpp:131] Top shape: 100 (100)
I0428 19:54:24.300009 27986 net.cpp:139] Memory required for data: 314000
I0428 19:54:24.300012 27986 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:24.300019 27986 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:24.300024 27986 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:24.300029 27986 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:24.300035 27986 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:24.300106 27986 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:24.300112 27986 net.cpp:131] Top shape: 100 (100)
I0428 19:54:24.300115 27986 net.cpp:131] Top shape: 100 (100)
I0428 19:54:24.300118 27986 net.cpp:139] Memory required for data: 314800
I0428 19:54:24.300122 27986 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:24.300132 27986 net.cpp:86] Creating Layer conv0
I0428 19:54:24.300134 27986 net.cpp:408] conv0 <- data
I0428 19:54:24.300142 27986 net.cpp:382] conv0 -> conv0
I0428 19:54:24.301961 27986 net.cpp:124] Setting up conv0
I0428 19:54:24.301977 27986 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:24.301981 27986 net.cpp:139] Memory required for data: 1466800
I0428 19:54:24.301990 27986 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:24.301998 27986 net.cpp:86] Creating Layer pool0
I0428 19:54:24.302002 27986 net.cpp:408] pool0 <- conv0
I0428 19:54:24.302007 27986 net.cpp:382] pool0 -> pool0
I0428 19:54:24.302047 27986 net.cpp:124] Setting up pool0
I0428 19:54:24.302052 27986 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:24.302055 27986 net.cpp:139] Memory required for data: 1754800
I0428 19:54:24.302058 27986 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:24.302069 27986 net.cpp:86] Creating Layer conv1
I0428 19:54:24.302073 27986 net.cpp:408] conv1 <- pool0
I0428 19:54:24.302079 27986 net.cpp:382] conv1 -> conv1
I0428 19:54:24.303710 27986 net.cpp:124] Setting up conv1
I0428 19:54:24.303730 27986 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:24.303733 27986 net.cpp:139] Memory required for data: 4314800
I0428 19:54:24.303742 27986 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:24.303750 27986 net.cpp:86] Creating Layer pool1
I0428 19:54:24.303752 27986 net.cpp:408] pool1 <- conv1
I0428 19:54:24.303757 27986 net.cpp:382] pool1 -> pool1
I0428 19:54:24.303797 27986 net.cpp:124] Setting up pool1
I0428 19:54:24.303803 27986 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:24.303807 27986 net.cpp:139] Memory required for data: 4954800
I0428 19:54:24.303809 27986 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:24.303817 27986 net.cpp:86] Creating Layer ip1
I0428 19:54:24.303819 27986 net.cpp:408] ip1 <- pool1
I0428 19:54:24.303824 27986 net.cpp:382] ip1 -> ip1
I0428 19:54:24.304186 27986 net.cpp:124] Setting up ip1
I0428 19:54:24.304195 27986 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:54:24.304198 27986 net.cpp:139] Memory required for data: 4964800
I0428 19:54:24.304206 27986 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:24.304214 27986 net.cpp:86] Creating Layer relu1
I0428 19:54:24.304217 27986 net.cpp:408] relu1 <- ip1
I0428 19:54:24.304221 27986 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:24.304391 27986 net.cpp:124] Setting up relu1
I0428 19:54:24.304401 27986 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:54:24.304406 27986 net.cpp:139] Memory required for data: 4974800
I0428 19:54:24.304409 27986 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:24.304416 27986 net.cpp:86] Creating Layer ip2
I0428 19:54:24.304419 27986 net.cpp:408] ip2 <- ip1
I0428 19:54:24.304425 27986 net.cpp:382] ip2 -> ip2
I0428 19:54:24.304532 27986 net.cpp:124] Setting up ip2
I0428 19:54:24.304540 27986 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:24.304551 27986 net.cpp:139] Memory required for data: 4978800
I0428 19:54:24.304558 27986 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:24.304563 27986 net.cpp:86] Creating Layer relu2
I0428 19:54:24.304567 27986 net.cpp:408] relu2 <- ip2
I0428 19:54:24.304571 27986 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:24.304785 27986 net.cpp:124] Setting up relu2
I0428 19:54:24.304795 27986 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:24.304798 27986 net.cpp:139] Memory required for data: 4982800
I0428 19:54:24.304802 27986 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:54:24.304808 27986 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:54:24.304819 27986 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:54:24.304824 27986 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:54:24.304842 27986 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:54:24.304888 27986 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:54:24.304894 27986 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:24.304898 27986 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:24.304900 27986 net.cpp:139] Memory required for data: 4990800
I0428 19:54:24.304903 27986 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:24.304921 27986 net.cpp:86] Creating Layer accuracy
I0428 19:54:24.304925 27986 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:54:24.304934 27986 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:24.304939 27986 net.cpp:382] accuracy -> accuracy
I0428 19:54:24.304947 27986 net.cpp:124] Setting up accuracy
I0428 19:54:24.304951 27986 net.cpp:131] Top shape: (1)
I0428 19:54:24.304955 27986 net.cpp:139] Memory required for data: 4990804
I0428 19:54:24.304957 27986 layer_factory.hpp:77] Creating layer loss
I0428 19:54:24.304963 27986 net.cpp:86] Creating Layer loss
I0428 19:54:24.304967 27986 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:54:24.304970 27986 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:24.304975 27986 net.cpp:382] loss -> loss
I0428 19:54:24.304981 27986 layer_factory.hpp:77] Creating layer loss
I0428 19:54:24.305245 27986 net.cpp:124] Setting up loss
I0428 19:54:24.305254 27986 net.cpp:131] Top shape: (1)
I0428 19:54:24.305258 27986 net.cpp:134]     with loss weight 1
I0428 19:54:24.305263 27986 net.cpp:139] Memory required for data: 4990808
I0428 19:54:24.305268 27986 net.cpp:200] loss needs backward computation.
I0428 19:54:24.305270 27986 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:24.305274 27986 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:54:24.305277 27986 net.cpp:200] relu2 needs backward computation.
I0428 19:54:24.305280 27986 net.cpp:200] ip2 needs backward computation.
I0428 19:54:24.305291 27986 net.cpp:200] relu1 needs backward computation.
I0428 19:54:24.305294 27986 net.cpp:200] ip1 needs backward computation.
I0428 19:54:24.305296 27986 net.cpp:200] pool1 needs backward computation.
I0428 19:54:24.305300 27986 net.cpp:200] conv1 needs backward computation.
I0428 19:54:24.305310 27986 net.cpp:200] pool0 needs backward computation.
I0428 19:54:24.305312 27986 net.cpp:200] conv0 needs backward computation.
I0428 19:54:24.305315 27986 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:24.305320 27986 net.cpp:202] mnist does not need backward computation.
I0428 19:54:24.305322 27986 net.cpp:244] This network produces output accuracy
I0428 19:54:24.305325 27986 net.cpp:244] This network produces output loss
I0428 19:54:24.305336 27986 net.cpp:257] Network initialization done.
I0428 19:54:24.305374 27986 solver.cpp:56] Solver scaffolding done.
I0428 19:54:24.305646 27986 caffe.cpp:248] Starting Optimization
I0428 19:54:24.305654 27986 solver.cpp:273] Solving LeNet
I0428 19:54:24.305656 27986 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:24.305810 27986 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:24.310994 27986 blocking_queue.cpp:49] Waiting for data
I0428 19:54:24.383993 27993 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:24.384966 27986 solver.cpp:398]     Test net output #0: accuracy = 0.068
I0428 19:54:24.385010 27986 solver.cpp:398]     Test net output #1: loss = 2.37748 (* 1 = 2.37748 loss)
I0428 19:54:24.390528 27986 solver.cpp:219] Iteration 0 (0 iter/s, 0.0848376s/100 iters), loss = 2.42696
I0428 19:54:24.390571 27986 solver.cpp:238]     Train net output #0: loss = 2.42696 (* 1 = 2.42696 loss)
I0428 19:54:24.390589 27986 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:24.565143 27986 solver.cpp:219] Iteration 100 (572.895 iter/s, 0.174552s/100 iters), loss = 0.719475
I0428 19:54:24.565191 27986 solver.cpp:238]     Train net output #0: loss = 0.719475 (* 1 = 0.719475 loss)
I0428 19:54:24.565207 27986 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:24.740326 27986 solver.cpp:219] Iteration 200 (571.032 iter/s, 0.175121s/100 iters), loss = 0.348179
I0428 19:54:24.740398 27986 solver.cpp:238]     Train net output #0: loss = 0.348179 (* 1 = 0.348179 loss)
I0428 19:54:24.740417 27986 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:24.915822 27986 solver.cpp:219] Iteration 300 (570.093 iter/s, 0.17541s/100 iters), loss = 0.576015
I0428 19:54:24.915874 27986 solver.cpp:238]     Train net output #0: loss = 0.576015 (* 1 = 0.576015 loss)
I0428 19:54:24.915886 27986 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:25.090507 27986 solver.cpp:219] Iteration 400 (572.674 iter/s, 0.174619s/100 iters), loss = 0.354005
I0428 19:54:25.090553 27986 solver.cpp:238]     Train net output #0: loss = 0.354005 (* 1 = 0.354005 loss)
I0428 19:54:25.090565 27986 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:25.263038 27986 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:25.321888 27993 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:25.323765 27986 solver.cpp:398]     Test net output #0: accuracy = 0.8717
I0428 19:54:25.323807 27986 solver.cpp:398]     Test net output #1: loss = 0.339254 (* 1 = 0.339254 loss)
I0428 19:54:25.325306 27986 solver.cpp:219] Iteration 500 (426.015 iter/s, 0.234734s/100 iters), loss = 0.336592
I0428 19:54:25.325361 27986 solver.cpp:238]     Train net output #0: loss = 0.336592 (* 1 = 0.336592 loss)
I0428 19:54:25.325383 27986 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:25.493612 27986 solver.cpp:219] Iteration 600 (594.407 iter/s, 0.168235s/100 iters), loss = 0.139334
I0428 19:54:25.493652 27986 solver.cpp:238]     Train net output #0: loss = 0.139334 (* 1 = 0.139334 loss)
I0428 19:54:25.493672 27986 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:25.667026 27986 solver.cpp:219] Iteration 700 (576.834 iter/s, 0.17336s/100 iters), loss = 0.133436
I0428 19:54:25.667069 27986 solver.cpp:238]     Train net output #0: loss = 0.133436 (* 1 = 0.133436 loss)
I0428 19:54:25.667080 27986 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:25.838579 27986 solver.cpp:219] Iteration 800 (583.106 iter/s, 0.171495s/100 iters), loss = 0.276339
I0428 19:54:25.838634 27986 solver.cpp:238]     Train net output #0: loss = 0.276339 (* 1 = 0.276339 loss)
I0428 19:54:25.838651 27986 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:26.008947 27986 solver.cpp:219] Iteration 900 (587.162 iter/s, 0.170311s/100 iters), loss = 0.11022
I0428 19:54:26.008988 27986 solver.cpp:238]     Train net output #0: loss = 0.11022 (* 1 = 0.11022 loss)
I0428 19:54:26.009011 27986 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:26.059772 27992 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:26.162322 27986 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:26.165074 27986 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:26.166518 27986 solver.cpp:311] Iteration 1000, loss = 0.124905
I0428 19:54:26.166548 27986 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:26.226141 27993 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:26.228041 27986 solver.cpp:398]     Test net output #0: accuracy = 0.9735
I0428 19:54:26.228081 27986 solver.cpp:398]     Test net output #1: loss = 0.0855501 (* 1 = 0.0855501 loss)
I0428 19:54:26.228090 27986 solver.cpp:316] Optimization Done.
I0428 19:54:26.228094 27986 caffe.cpp:259] Optimization Done.
