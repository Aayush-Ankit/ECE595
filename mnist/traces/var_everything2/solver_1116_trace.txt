I0428 20:09:42.599295 31685 caffe.cpp:218] Using GPUs 0
I0428 20:09:42.627733 31685 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:09:43.064378 31685 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1116.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:09:43.064522 31685 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1116.prototxt
I0428 20:09:43.064911 31685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:09:43.064956 31685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:09:43.065037 31685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:43.065100 31685 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:43.065214 31685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:09:43.065244 31685 net.cpp:86] Creating Layer mnist
I0428 20:09:43.065250 31685 net.cpp:382] mnist -> data
I0428 20:09:43.065268 31685 net.cpp:382] mnist -> label
I0428 20:09:43.066229 31685 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:09:43.068393 31685 net.cpp:124] Setting up mnist
I0428 20:09:43.068439 31685 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:09:43.068445 31685 net.cpp:131] Top shape: 64 (64)
I0428 20:09:43.068447 31685 net.cpp:139] Memory required for data: 200960
I0428 20:09:43.068454 31685 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:43.068466 31685 net.cpp:86] Creating Layer conv0
I0428 20:09:43.068482 31685 net.cpp:408] conv0 <- data
I0428 20:09:43.068495 31685 net.cpp:382] conv0 -> conv0
I0428 20:09:43.293722 31685 net.cpp:124] Setting up conv0
I0428 20:09:43.293751 31685 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:09:43.293754 31685 net.cpp:139] Memory required for data: 3887360
I0428 20:09:43.293769 31685 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:43.293781 31685 net.cpp:86] Creating Layer pool0
I0428 20:09:43.293800 31685 net.cpp:408] pool0 <- conv0
I0428 20:09:43.293807 31685 net.cpp:382] pool0 -> pool0
I0428 20:09:43.293854 31685 net.cpp:124] Setting up pool0
I0428 20:09:43.293860 31685 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:09:43.293864 31685 net.cpp:139] Memory required for data: 4808960
I0428 20:09:43.293866 31685 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:43.293876 31685 net.cpp:86] Creating Layer conv1
I0428 20:09:43.293879 31685 net.cpp:408] conv1 <- pool0
I0428 20:09:43.293884 31685 net.cpp:382] conv1 -> conv1
I0428 20:09:43.296833 31685 net.cpp:124] Setting up conv1
I0428 20:09:43.296862 31685 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:09:43.296866 31685 net.cpp:139] Memory required for data: 5218560
I0428 20:09:43.296890 31685 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:43.296898 31685 net.cpp:86] Creating Layer pool1
I0428 20:09:43.296902 31685 net.cpp:408] pool1 <- conv1
I0428 20:09:43.296907 31685 net.cpp:382] pool1 -> pool1
I0428 20:09:43.296979 31685 net.cpp:124] Setting up pool1
I0428 20:09:43.296986 31685 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:09:43.296989 31685 net.cpp:139] Memory required for data: 5320960
I0428 20:09:43.296993 31685 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:43.297005 31685 net.cpp:86] Creating Layer ip1
I0428 20:09:43.297008 31685 net.cpp:408] ip1 <- pool1
I0428 20:09:43.297013 31685 net.cpp:382] ip1 -> ip1
I0428 20:09:43.297175 31685 net.cpp:124] Setting up ip1
I0428 20:09:43.297184 31685 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:09:43.297188 31685 net.cpp:139] Memory required for data: 5327360
I0428 20:09:43.297195 31685 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:43.297220 31685 net.cpp:86] Creating Layer relu1
I0428 20:09:43.297243 31685 net.cpp:408] relu1 <- ip1
I0428 20:09:43.297262 31685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:43.297417 31685 net.cpp:124] Setting up relu1
I0428 20:09:43.297426 31685 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:09:43.297430 31685 net.cpp:139] Memory required for data: 5333760
I0428 20:09:43.297432 31685 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:43.297437 31685 net.cpp:86] Creating Layer ip2
I0428 20:09:43.297441 31685 net.cpp:408] ip2 <- ip1
I0428 20:09:43.297444 31685 net.cpp:382] ip2 -> ip2
I0428 20:09:43.297536 31685 net.cpp:124] Setting up ip2
I0428 20:09:43.297544 31685 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:09:43.297546 31685 net.cpp:139] Memory required for data: 5340160
I0428 20:09:43.297551 31685 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:43.297557 31685 net.cpp:86] Creating Layer relu2
I0428 20:09:43.297560 31685 net.cpp:408] relu2 <- ip2
I0428 20:09:43.297564 31685 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:43.298276 31685 net.cpp:124] Setting up relu2
I0428 20:09:43.298288 31685 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:09:43.298291 31685 net.cpp:139] Memory required for data: 5346560
I0428 20:09:43.298310 31685 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:43.298316 31685 net.cpp:86] Creating Layer ip3
I0428 20:09:43.298336 31685 net.cpp:408] ip3 <- ip2
I0428 20:09:43.298341 31685 net.cpp:382] ip3 -> ip3
I0428 20:09:43.298449 31685 net.cpp:124] Setting up ip3
I0428 20:09:43.298460 31685 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:43.298465 31685 net.cpp:139] Memory required for data: 5349120
I0428 20:09:43.298475 31685 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:43.298481 31685 net.cpp:86] Creating Layer relu3
I0428 20:09:43.298485 31685 net.cpp:408] relu3 <- ip3
I0428 20:09:43.298488 31685 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:43.298672 31685 net.cpp:124] Setting up relu3
I0428 20:09:43.298681 31685 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:43.298684 31685 net.cpp:139] Memory required for data: 5351680
I0428 20:09:43.298687 31685 layer_factory.hpp:77] Creating layer loss
I0428 20:09:43.298693 31685 net.cpp:86] Creating Layer loss
I0428 20:09:43.298696 31685 net.cpp:408] loss <- ip3
I0428 20:09:43.298701 31685 net.cpp:408] loss <- label
I0428 20:09:43.298705 31685 net.cpp:382] loss -> loss
I0428 20:09:43.298722 31685 layer_factory.hpp:77] Creating layer loss
I0428 20:09:43.298959 31685 net.cpp:124] Setting up loss
I0428 20:09:43.298967 31685 net.cpp:131] Top shape: (1)
I0428 20:09:43.298971 31685 net.cpp:134]     with loss weight 1
I0428 20:09:43.298985 31685 net.cpp:139] Memory required for data: 5351684
I0428 20:09:43.298988 31685 net.cpp:200] loss needs backward computation.
I0428 20:09:43.298991 31685 net.cpp:200] relu3 needs backward computation.
I0428 20:09:43.298995 31685 net.cpp:200] ip3 needs backward computation.
I0428 20:09:43.298997 31685 net.cpp:200] relu2 needs backward computation.
I0428 20:09:43.299000 31685 net.cpp:200] ip2 needs backward computation.
I0428 20:09:43.299003 31685 net.cpp:200] relu1 needs backward computation.
I0428 20:09:43.299006 31685 net.cpp:200] ip1 needs backward computation.
I0428 20:09:43.299010 31685 net.cpp:200] pool1 needs backward computation.
I0428 20:09:43.299012 31685 net.cpp:200] conv1 needs backward computation.
I0428 20:09:43.299015 31685 net.cpp:200] pool0 needs backward computation.
I0428 20:09:43.299018 31685 net.cpp:200] conv0 needs backward computation.
I0428 20:09:43.299021 31685 net.cpp:202] mnist does not need backward computation.
I0428 20:09:43.299024 31685 net.cpp:244] This network produces output loss
I0428 20:09:43.299033 31685 net.cpp:257] Network initialization done.
I0428 20:09:43.299432 31685 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1116.prototxt
I0428 20:09:43.299474 31685 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:09:43.299561 31685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:43.299638 31685 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:43.299682 31685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:09:43.299695 31685 net.cpp:86] Creating Layer mnist
I0428 20:09:43.299700 31685 net.cpp:382] mnist -> data
I0428 20:09:43.299707 31685 net.cpp:382] mnist -> label
I0428 20:09:43.299803 31685 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:09:43.301944 31685 net.cpp:124] Setting up mnist
I0428 20:09:43.301990 31685 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:09:43.301995 31685 net.cpp:131] Top shape: 100 (100)
I0428 20:09:43.301998 31685 net.cpp:139] Memory required for data: 314000
I0428 20:09:43.302002 31685 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:09:43.302028 31685 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:09:43.302032 31685 net.cpp:408] label_mnist_1_split <- label
I0428 20:09:43.302037 31685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:09:43.302044 31685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:09:43.302091 31685 net.cpp:124] Setting up label_mnist_1_split
I0428 20:09:43.302099 31685 net.cpp:131] Top shape: 100 (100)
I0428 20:09:43.302103 31685 net.cpp:131] Top shape: 100 (100)
I0428 20:09:43.302106 31685 net.cpp:139] Memory required for data: 314800
I0428 20:09:43.302109 31685 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:43.302117 31685 net.cpp:86] Creating Layer conv0
I0428 20:09:43.302121 31685 net.cpp:408] conv0 <- data
I0428 20:09:43.302126 31685 net.cpp:382] conv0 -> conv0
I0428 20:09:43.303957 31685 net.cpp:124] Setting up conv0
I0428 20:09:43.303989 31685 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:09:43.303993 31685 net.cpp:139] Memory required for data: 6074800
I0428 20:09:43.304018 31685 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:43.304024 31685 net.cpp:86] Creating Layer pool0
I0428 20:09:43.304039 31685 net.cpp:408] pool0 <- conv0
I0428 20:09:43.304044 31685 net.cpp:382] pool0 -> pool0
I0428 20:09:43.304080 31685 net.cpp:124] Setting up pool0
I0428 20:09:43.304085 31685 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:09:43.304087 31685 net.cpp:139] Memory required for data: 7514800
I0428 20:09:43.304090 31685 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:43.304098 31685 net.cpp:86] Creating Layer conv1
I0428 20:09:43.304101 31685 net.cpp:408] conv1 <- pool0
I0428 20:09:43.304105 31685 net.cpp:382] conv1 -> conv1
I0428 20:09:43.306499 31685 net.cpp:124] Setting up conv1
I0428 20:09:43.306529 31685 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:09:43.306532 31685 net.cpp:139] Memory required for data: 8154800
I0428 20:09:43.306541 31685 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:43.306548 31685 net.cpp:86] Creating Layer pool1
I0428 20:09:43.306552 31685 net.cpp:408] pool1 <- conv1
I0428 20:09:43.306572 31685 net.cpp:382] pool1 -> pool1
I0428 20:09:43.306632 31685 net.cpp:124] Setting up pool1
I0428 20:09:43.306639 31685 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:09:43.306643 31685 net.cpp:139] Memory required for data: 8314800
I0428 20:09:43.306645 31685 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:43.306651 31685 net.cpp:86] Creating Layer ip1
I0428 20:09:43.306654 31685 net.cpp:408] ip1 <- pool1
I0428 20:09:43.306660 31685 net.cpp:382] ip1 -> ip1
I0428 20:09:43.306870 31685 net.cpp:124] Setting up ip1
I0428 20:09:43.306879 31685 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:09:43.306893 31685 net.cpp:139] Memory required for data: 8324800
I0428 20:09:43.306901 31685 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:43.306913 31685 net.cpp:86] Creating Layer relu1
I0428 20:09:43.306917 31685 net.cpp:408] relu1 <- ip1
I0428 20:09:43.306923 31685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:43.307121 31685 net.cpp:124] Setting up relu1
I0428 20:09:43.307130 31685 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:09:43.307134 31685 net.cpp:139] Memory required for data: 8334800
I0428 20:09:43.307137 31685 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:43.307145 31685 net.cpp:86] Creating Layer ip2
I0428 20:09:43.307149 31685 net.cpp:408] ip2 <- ip1
I0428 20:09:43.307154 31685 net.cpp:382] ip2 -> ip2
I0428 20:09:43.307266 31685 net.cpp:124] Setting up ip2
I0428 20:09:43.307273 31685 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:09:43.307276 31685 net.cpp:139] Memory required for data: 8344800
I0428 20:09:43.307282 31685 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:43.307287 31685 net.cpp:86] Creating Layer relu2
I0428 20:09:43.307291 31685 net.cpp:408] relu2 <- ip2
I0428 20:09:43.307296 31685 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:43.307466 31685 net.cpp:124] Setting up relu2
I0428 20:09:43.307473 31685 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:09:43.307476 31685 net.cpp:139] Memory required for data: 8354800
I0428 20:09:43.307479 31685 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:43.307487 31685 net.cpp:86] Creating Layer ip3
I0428 20:09:43.307490 31685 net.cpp:408] ip3 <- ip2
I0428 20:09:43.307494 31685 net.cpp:382] ip3 -> ip3
I0428 20:09:43.307597 31685 net.cpp:124] Setting up ip3
I0428 20:09:43.307605 31685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:43.307607 31685 net.cpp:139] Memory required for data: 8358800
I0428 20:09:43.307616 31685 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:43.307621 31685 net.cpp:86] Creating Layer relu3
I0428 20:09:43.307623 31685 net.cpp:408] relu3 <- ip3
I0428 20:09:43.307627 31685 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:43.308521 31685 net.cpp:124] Setting up relu3
I0428 20:09:43.308533 31685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:43.308537 31685 net.cpp:139] Memory required for data: 8362800
I0428 20:09:43.308545 31685 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:09:43.308553 31685 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:09:43.308562 31685 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:09:43.308567 31685 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:09:43.308578 31685 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:09:43.308619 31685 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:09:43.308625 31685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:43.308629 31685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:43.308632 31685 net.cpp:139] Memory required for data: 8370800
I0428 20:09:43.308635 31685 layer_factory.hpp:77] Creating layer accuracy
I0428 20:09:43.308646 31685 net.cpp:86] Creating Layer accuracy
I0428 20:09:43.308650 31685 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:09:43.308655 31685 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:09:43.308658 31685 net.cpp:382] accuracy -> accuracy
I0428 20:09:43.308665 31685 net.cpp:124] Setting up accuracy
I0428 20:09:43.308670 31685 net.cpp:131] Top shape: (1)
I0428 20:09:43.308677 31685 net.cpp:139] Memory required for data: 8370804
I0428 20:09:43.308681 31685 layer_factory.hpp:77] Creating layer loss
I0428 20:09:43.308686 31685 net.cpp:86] Creating Layer loss
I0428 20:09:43.308688 31685 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:09:43.308692 31685 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:09:43.308698 31685 net.cpp:382] loss -> loss
I0428 20:09:43.308703 31685 layer_factory.hpp:77] Creating layer loss
I0428 20:09:43.308995 31685 net.cpp:124] Setting up loss
I0428 20:09:43.309006 31685 net.cpp:131] Top shape: (1)
I0428 20:09:43.309010 31685 net.cpp:134]     with loss weight 1
I0428 20:09:43.309027 31685 net.cpp:139] Memory required for data: 8370808
I0428 20:09:43.309031 31685 net.cpp:200] loss needs backward computation.
I0428 20:09:43.309036 31685 net.cpp:202] accuracy does not need backward computation.
I0428 20:09:43.309039 31685 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:09:43.309042 31685 net.cpp:200] relu3 needs backward computation.
I0428 20:09:43.309046 31685 net.cpp:200] ip3 needs backward computation.
I0428 20:09:43.309049 31685 net.cpp:200] relu2 needs backward computation.
I0428 20:09:43.309054 31685 net.cpp:200] ip2 needs backward computation.
I0428 20:09:43.309057 31685 net.cpp:200] relu1 needs backward computation.
I0428 20:09:43.309061 31685 net.cpp:200] ip1 needs backward computation.
I0428 20:09:43.309063 31685 net.cpp:200] pool1 needs backward computation.
I0428 20:09:43.309067 31685 net.cpp:200] conv1 needs backward computation.
I0428 20:09:43.309070 31685 net.cpp:200] pool0 needs backward computation.
I0428 20:09:43.309074 31685 net.cpp:200] conv0 needs backward computation.
I0428 20:09:43.309078 31685 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:09:43.309085 31685 net.cpp:202] mnist does not need backward computation.
I0428 20:09:43.309092 31685 net.cpp:244] This network produces output accuracy
I0428 20:09:43.309097 31685 net.cpp:244] This network produces output loss
I0428 20:09:43.309109 31685 net.cpp:257] Network initialization done.
I0428 20:09:43.309155 31685 solver.cpp:56] Solver scaffolding done.
I0428 20:09:43.309577 31685 caffe.cpp:248] Starting Optimization
I0428 20:09:43.309583 31685 solver.cpp:273] Solving LeNet
I0428 20:09:43.309587 31685 solver.cpp:274] Learning Rate Policy: inv
I0428 20:09:43.310513 31685 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:09:43.315860 31685 blocking_queue.cpp:49] Waiting for data
I0428 20:09:43.384516 31692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:43.385176 31685 solver.cpp:398]     Test net output #0: accuracy = 0.13
I0428 20:09:43.385210 31685 solver.cpp:398]     Test net output #1: loss = 2.31431 (* 1 = 2.31431 loss)
I0428 20:09:43.388804 31685 solver.cpp:219] Iteration 0 (-1.66467e-31 iter/s, 0.0791738s/100 iters), loss = 2.32634
I0428 20:09:43.388864 31685 solver.cpp:238]     Train net output #0: loss = 2.32634 (* 1 = 2.32634 loss)
I0428 20:09:43.388893 31685 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:09:43.489629 31685 solver.cpp:219] Iteration 100 (992.563 iter/s, 0.100749s/100 iters), loss = 0.282988
I0428 20:09:43.489668 31685 solver.cpp:238]     Train net output #0: loss = 0.282988 (* 1 = 0.282988 loss)
I0428 20:09:43.489675 31685 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:09:43.597494 31685 solver.cpp:219] Iteration 200 (927.375 iter/s, 0.107831s/100 iters), loss = 0.232607
I0428 20:09:43.597532 31685 solver.cpp:238]     Train net output #0: loss = 0.232607 (* 1 = 0.232607 loss)
I0428 20:09:43.597538 31685 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:09:43.701671 31685 solver.cpp:219] Iteration 300 (960.22 iter/s, 0.104143s/100 iters), loss = 0.24694
I0428 20:09:43.701709 31685 solver.cpp:238]     Train net output #0: loss = 0.24694 (* 1 = 0.24694 loss)
I0428 20:09:43.701715 31685 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:09:43.806639 31685 solver.cpp:219] Iteration 400 (953.107 iter/s, 0.10492s/100 iters), loss = 0.170167
I0428 20:09:43.806679 31685 solver.cpp:238]     Train net output #0: loss = 0.170167 (* 1 = 0.170167 loss)
I0428 20:09:43.806684 31685 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:09:43.907120 31685 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:09:43.964139 31692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:43.964756 31685 solver.cpp:398]     Test net output #0: accuracy = 0.9558
I0428 20:09:43.964787 31685 solver.cpp:398]     Test net output #1: loss = 0.135618 (* 1 = 0.135618 loss)
I0428 20:09:43.965878 31685 solver.cpp:219] Iteration 500 (628.204 iter/s, 0.159184s/100 iters), loss = 0.118536
I0428 20:09:43.965956 31685 solver.cpp:238]     Train net output #0: loss = 0.118536 (* 1 = 0.118536 loss)
I0428 20:09:43.965965 31685 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:09:44.074365 31685 solver.cpp:219] Iteration 600 (922.502 iter/s, 0.108401s/100 iters), loss = 0.0952696
I0428 20:09:44.074393 31685 solver.cpp:238]     Train net output #0: loss = 0.0952696 (* 1 = 0.0952696 loss)
I0428 20:09:44.074400 31685 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:09:44.180714 31685 solver.cpp:219] Iteration 700 (940.64 iter/s, 0.106311s/100 iters), loss = 0.119628
I0428 20:09:44.180755 31685 solver.cpp:238]     Train net output #0: loss = 0.119628 (* 1 = 0.119628 loss)
I0428 20:09:44.180763 31685 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:09:44.286980 31685 solver.cpp:219] Iteration 800 (941.492 iter/s, 0.106214s/100 iters), loss = 0.269704
I0428 20:09:44.287020 31685 solver.cpp:238]     Train net output #0: loss = 0.269704 (* 1 = 0.269704 loss)
I0428 20:09:44.287026 31685 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:09:44.385884 31685 solver.cpp:219] Iteration 900 (1011.61 iter/s, 0.098852s/100 iters), loss = 0.180828
I0428 20:09:44.385924 31685 solver.cpp:238]     Train net output #0: loss = 0.180828 (* 1 = 0.180828 loss)
I0428 20:09:44.385931 31685 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:09:44.422521 31691 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:44.493008 31685 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:09:44.494165 31685 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:09:44.494938 31685 solver.cpp:311] Iteration 1000, loss = 0.113971
I0428 20:09:44.494954 31685 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:09:44.560619 31692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:44.561219 31685 solver.cpp:398]     Test net output #0: accuracy = 0.9749
I0428 20:09:44.561254 31685 solver.cpp:398]     Test net output #1: loss = 0.0741833 (* 1 = 0.0741833 loss)
I0428 20:09:44.561259 31685 solver.cpp:316] Optimization Done.
I0428 20:09:44.561261 31685 caffe.cpp:259] Optimization Done.
