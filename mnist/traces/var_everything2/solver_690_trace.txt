I0428 19:53:32.796887 27795 caffe.cpp:218] Using GPUs 0
I0428 19:53:32.833380 27795 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:33.345715 27795 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test690.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:33.345851 27795 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test690.prototxt
I0428 19:53:33.346253 27795 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:33.346271 27795 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:33.346367 27795 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:33.346443 27795 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:33.346544 27795 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:33.346567 27795 net.cpp:86] Creating Layer mnist
I0428 19:53:33.346575 27795 net.cpp:382] mnist -> data
I0428 19:53:33.346597 27795 net.cpp:382] mnist -> label
I0428 19:53:33.347685 27795 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:33.350145 27795 net.cpp:124] Setting up mnist
I0428 19:53:33.350162 27795 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:33.350169 27795 net.cpp:131] Top shape: 64 (64)
I0428 19:53:33.350173 27795 net.cpp:139] Memory required for data: 200960
I0428 19:53:33.350180 27795 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:33.350195 27795 net.cpp:86] Creating Layer conv0
I0428 19:53:33.350215 27795 net.cpp:408] conv0 <- data
I0428 19:53:33.350227 27795 net.cpp:382] conv0 -> conv0
I0428 19:53:33.636430 27795 net.cpp:124] Setting up conv0
I0428 19:53:33.636456 27795 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:33.636461 27795 net.cpp:139] Memory required for data: 938240
I0428 19:53:33.636476 27795 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:33.636490 27795 net.cpp:86] Creating Layer pool0
I0428 19:53:33.636493 27795 net.cpp:408] pool0 <- conv0
I0428 19:53:33.636499 27795 net.cpp:382] pool0 -> pool0
I0428 19:53:33.636549 27795 net.cpp:124] Setting up pool0
I0428 19:53:33.636556 27795 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:33.636560 27795 net.cpp:139] Memory required for data: 1122560
I0428 19:53:33.636564 27795 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:33.636576 27795 net.cpp:86] Creating Layer conv1
I0428 19:53:33.636579 27795 net.cpp:408] conv1 <- pool0
I0428 19:53:33.636584 27795 net.cpp:382] conv1 -> conv1
I0428 19:53:33.639344 27795 net.cpp:124] Setting up conv1
I0428 19:53:33.639359 27795 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:33.639364 27795 net.cpp:139] Memory required for data: 1941760
I0428 19:53:33.639372 27795 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:33.639379 27795 net.cpp:86] Creating Layer pool1
I0428 19:53:33.639384 27795 net.cpp:408] pool1 <- conv1
I0428 19:53:33.639389 27795 net.cpp:382] pool1 -> pool1
I0428 19:53:33.639426 27795 net.cpp:124] Setting up pool1
I0428 19:53:33.639431 27795 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:33.639434 27795 net.cpp:139] Memory required for data: 2146560
I0428 19:53:33.639437 27795 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:33.639444 27795 net.cpp:86] Creating Layer ip1
I0428 19:53:33.639447 27795 net.cpp:408] ip1 <- pool1
I0428 19:53:33.639451 27795 net.cpp:382] ip1 -> ip1
I0428 19:53:33.639659 27795 net.cpp:124] Setting up ip1
I0428 19:53:33.639667 27795 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:33.639672 27795 net.cpp:139] Memory required for data: 2152960
I0428 19:53:33.639678 27795 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:33.639683 27795 net.cpp:86] Creating Layer relu1
I0428 19:53:33.639686 27795 net.cpp:408] relu1 <- ip1
I0428 19:53:33.639691 27795 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:33.639854 27795 net.cpp:124] Setting up relu1
I0428 19:53:33.639863 27795 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:33.639866 27795 net.cpp:139] Memory required for data: 2159360
I0428 19:53:33.639870 27795 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:33.639876 27795 net.cpp:86] Creating Layer ip2
I0428 19:53:33.639879 27795 net.cpp:408] ip2 <- ip1
I0428 19:53:33.639883 27795 net.cpp:382] ip2 -> ip2
I0428 19:53:33.640851 27795 net.cpp:124] Setting up ip2
I0428 19:53:33.640863 27795 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:33.640866 27795 net.cpp:139] Memory required for data: 2172160
I0428 19:53:33.640873 27795 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:33.640880 27795 net.cpp:86] Creating Layer relu2
I0428 19:53:33.640883 27795 net.cpp:408] relu2 <- ip2
I0428 19:53:33.640888 27795 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:33.641618 27795 net.cpp:124] Setting up relu2
I0428 19:53:33.641631 27795 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:33.641634 27795 net.cpp:139] Memory required for data: 2184960
I0428 19:53:33.641638 27795 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:33.641646 27795 net.cpp:86] Creating Layer ip3
I0428 19:53:33.641651 27795 net.cpp:408] ip3 <- ip2
I0428 19:53:33.641660 27795 net.cpp:382] ip3 -> ip3
I0428 19:53:33.641767 27795 net.cpp:124] Setting up ip3
I0428 19:53:33.641774 27795 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:33.641777 27795 net.cpp:139] Memory required for data: 2187520
I0428 19:53:33.641785 27795 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:33.641791 27795 net.cpp:86] Creating Layer relu3
I0428 19:53:33.641794 27795 net.cpp:408] relu3 <- ip3
I0428 19:53:33.641798 27795 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:33.641968 27795 net.cpp:124] Setting up relu3
I0428 19:53:33.641978 27795 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:33.641980 27795 net.cpp:139] Memory required for data: 2190080
I0428 19:53:33.641983 27795 layer_factory.hpp:77] Creating layer loss
I0428 19:53:33.641989 27795 net.cpp:86] Creating Layer loss
I0428 19:53:33.641993 27795 net.cpp:408] loss <- ip3
I0428 19:53:33.641996 27795 net.cpp:408] loss <- label
I0428 19:53:33.642002 27795 net.cpp:382] loss -> loss
I0428 19:53:33.642019 27795 layer_factory.hpp:77] Creating layer loss
I0428 19:53:33.642246 27795 net.cpp:124] Setting up loss
I0428 19:53:33.642256 27795 net.cpp:131] Top shape: (1)
I0428 19:53:33.642259 27795 net.cpp:134]     with loss weight 1
I0428 19:53:33.642273 27795 net.cpp:139] Memory required for data: 2190084
I0428 19:53:33.642277 27795 net.cpp:200] loss needs backward computation.
I0428 19:53:33.642280 27795 net.cpp:200] relu3 needs backward computation.
I0428 19:53:33.642283 27795 net.cpp:200] ip3 needs backward computation.
I0428 19:53:33.642287 27795 net.cpp:200] relu2 needs backward computation.
I0428 19:53:33.642289 27795 net.cpp:200] ip2 needs backward computation.
I0428 19:53:33.642292 27795 net.cpp:200] relu1 needs backward computation.
I0428 19:53:33.642295 27795 net.cpp:200] ip1 needs backward computation.
I0428 19:53:33.642298 27795 net.cpp:200] pool1 needs backward computation.
I0428 19:53:33.642302 27795 net.cpp:200] conv1 needs backward computation.
I0428 19:53:33.642304 27795 net.cpp:200] pool0 needs backward computation.
I0428 19:53:33.642307 27795 net.cpp:200] conv0 needs backward computation.
I0428 19:53:33.642312 27795 net.cpp:202] mnist does not need backward computation.
I0428 19:53:33.642313 27795 net.cpp:244] This network produces output loss
I0428 19:53:33.642323 27795 net.cpp:257] Network initialization done.
I0428 19:53:33.642649 27795 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test690.prototxt
I0428 19:53:33.642678 27795 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:33.642767 27795 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:33.642848 27795 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:33.642894 27795 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:33.642906 27795 net.cpp:86] Creating Layer mnist
I0428 19:53:33.642911 27795 net.cpp:382] mnist -> data
I0428 19:53:33.642920 27795 net.cpp:382] mnist -> label
I0428 19:53:33.643004 27795 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:33.645114 27795 net.cpp:124] Setting up mnist
I0428 19:53:33.645143 27795 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:33.645149 27795 net.cpp:131] Top shape: 100 (100)
I0428 19:53:33.645153 27795 net.cpp:139] Memory required for data: 314000
I0428 19:53:33.645156 27795 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:33.645169 27795 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:33.645174 27795 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:33.645177 27795 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:33.645184 27795 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:33.645227 27795 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:33.645234 27795 net.cpp:131] Top shape: 100 (100)
I0428 19:53:33.645238 27795 net.cpp:131] Top shape: 100 (100)
I0428 19:53:33.645241 27795 net.cpp:139] Memory required for data: 314800
I0428 19:53:33.645244 27795 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:33.645252 27795 net.cpp:86] Creating Layer conv0
I0428 19:53:33.645257 27795 net.cpp:408] conv0 <- data
I0428 19:53:33.645278 27795 net.cpp:382] conv0 -> conv0
I0428 19:53:33.646919 27795 net.cpp:124] Setting up conv0
I0428 19:53:33.646932 27795 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:33.646936 27795 net.cpp:139] Memory required for data: 1466800
I0428 19:53:33.646945 27795 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:33.646951 27795 net.cpp:86] Creating Layer pool0
I0428 19:53:33.646955 27795 net.cpp:408] pool0 <- conv0
I0428 19:53:33.646960 27795 net.cpp:382] pool0 -> pool0
I0428 19:53:33.646996 27795 net.cpp:124] Setting up pool0
I0428 19:53:33.647019 27795 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:33.647022 27795 net.cpp:139] Memory required for data: 1754800
I0428 19:53:33.647025 27795 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:33.647050 27795 net.cpp:86] Creating Layer conv1
I0428 19:53:33.647053 27795 net.cpp:408] conv1 <- pool0
I0428 19:53:33.647074 27795 net.cpp:382] conv1 -> conv1
I0428 19:53:33.648560 27795 net.cpp:124] Setting up conv1
I0428 19:53:33.648576 27795 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:33.648579 27795 net.cpp:139] Memory required for data: 3034800
I0428 19:53:33.648587 27795 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:33.648593 27795 net.cpp:86] Creating Layer pool1
I0428 19:53:33.648597 27795 net.cpp:408] pool1 <- conv1
I0428 19:53:33.648602 27795 net.cpp:382] pool1 -> pool1
I0428 19:53:33.648635 27795 net.cpp:124] Setting up pool1
I0428 19:53:33.648641 27795 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:33.648644 27795 net.cpp:139] Memory required for data: 3354800
I0428 19:53:33.648648 27795 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:33.648653 27795 net.cpp:86] Creating Layer ip1
I0428 19:53:33.648658 27795 net.cpp:408] ip1 <- pool1
I0428 19:53:33.648661 27795 net.cpp:382] ip1 -> ip1
I0428 19:53:33.648905 27795 net.cpp:124] Setting up ip1
I0428 19:53:33.648914 27795 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:33.648931 27795 net.cpp:139] Memory required for data: 3364800
I0428 19:53:33.648955 27795 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:33.648963 27795 net.cpp:86] Creating Layer relu1
I0428 19:53:33.648967 27795 net.cpp:408] relu1 <- ip1
I0428 19:53:33.648972 27795 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:33.649132 27795 net.cpp:124] Setting up relu1
I0428 19:53:33.649142 27795 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:33.649144 27795 net.cpp:139] Memory required for data: 3374800
I0428 19:53:33.649148 27795 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:33.649155 27795 net.cpp:86] Creating Layer ip2
I0428 19:53:33.649159 27795 net.cpp:408] ip2 <- ip1
I0428 19:53:33.649165 27795 net.cpp:382] ip2 -> ip2
I0428 19:53:33.649302 27795 net.cpp:124] Setting up ip2
I0428 19:53:33.649308 27795 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:33.649312 27795 net.cpp:139] Memory required for data: 3394800
I0428 19:53:33.649317 27795 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:33.649322 27795 net.cpp:86] Creating Layer relu2
I0428 19:53:33.649324 27795 net.cpp:408] relu2 <- ip2
I0428 19:53:33.649329 27795 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:33.649570 27795 net.cpp:124] Setting up relu2
I0428 19:53:33.649579 27795 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:33.649581 27795 net.cpp:139] Memory required for data: 3414800
I0428 19:53:33.649585 27795 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:33.649590 27795 net.cpp:86] Creating Layer ip3
I0428 19:53:33.649595 27795 net.cpp:408] ip3 <- ip2
I0428 19:53:33.649600 27795 net.cpp:382] ip3 -> ip3
I0428 19:53:33.649693 27795 net.cpp:124] Setting up ip3
I0428 19:53:33.649700 27795 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:33.649703 27795 net.cpp:139] Memory required for data: 3418800
I0428 19:53:33.649711 27795 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:33.649718 27795 net.cpp:86] Creating Layer relu3
I0428 19:53:33.649720 27795 net.cpp:408] relu3 <- ip3
I0428 19:53:33.649725 27795 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:33.650553 27795 net.cpp:124] Setting up relu3
I0428 19:53:33.650564 27795 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:33.650568 27795 net.cpp:139] Memory required for data: 3422800
I0428 19:53:33.650571 27795 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:33.650576 27795 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:33.650579 27795 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:33.650584 27795 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:33.650591 27795 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:33.650629 27795 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:33.650651 27795 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:33.650655 27795 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:33.650657 27795 net.cpp:139] Memory required for data: 3430800
I0428 19:53:33.650660 27795 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:33.650665 27795 net.cpp:86] Creating Layer accuracy
I0428 19:53:33.650668 27795 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:33.650673 27795 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:33.650677 27795 net.cpp:382] accuracy -> accuracy
I0428 19:53:33.650684 27795 net.cpp:124] Setting up accuracy
I0428 19:53:33.650688 27795 net.cpp:131] Top shape: (1)
I0428 19:53:33.650691 27795 net.cpp:139] Memory required for data: 3430804
I0428 19:53:33.650693 27795 layer_factory.hpp:77] Creating layer loss
I0428 19:53:33.650698 27795 net.cpp:86] Creating Layer loss
I0428 19:53:33.650702 27795 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:33.650705 27795 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:33.650710 27795 net.cpp:382] loss -> loss
I0428 19:53:33.650717 27795 layer_factory.hpp:77] Creating layer loss
I0428 19:53:33.650936 27795 net.cpp:124] Setting up loss
I0428 19:53:33.650945 27795 net.cpp:131] Top shape: (1)
I0428 19:53:33.650949 27795 net.cpp:134]     with loss weight 1
I0428 19:53:33.650964 27795 net.cpp:139] Memory required for data: 3430808
I0428 19:53:33.650979 27795 net.cpp:200] loss needs backward computation.
I0428 19:53:33.650984 27795 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:33.650987 27795 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:33.650990 27795 net.cpp:200] relu3 needs backward computation.
I0428 19:53:33.650993 27795 net.cpp:200] ip3 needs backward computation.
I0428 19:53:33.650996 27795 net.cpp:200] relu2 needs backward computation.
I0428 19:53:33.651000 27795 net.cpp:200] ip2 needs backward computation.
I0428 19:53:33.651002 27795 net.cpp:200] relu1 needs backward computation.
I0428 19:53:33.651005 27795 net.cpp:200] ip1 needs backward computation.
I0428 19:53:33.651010 27795 net.cpp:200] pool1 needs backward computation.
I0428 19:53:33.651012 27795 net.cpp:200] conv1 needs backward computation.
I0428 19:53:33.651015 27795 net.cpp:200] pool0 needs backward computation.
I0428 19:53:33.651028 27795 net.cpp:200] conv0 needs backward computation.
I0428 19:53:33.651032 27795 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:33.651036 27795 net.cpp:202] mnist does not need backward computation.
I0428 19:53:33.651039 27795 net.cpp:244] This network produces output accuracy
I0428 19:53:33.651043 27795 net.cpp:244] This network produces output loss
I0428 19:53:33.651065 27795 net.cpp:257] Network initialization done.
I0428 19:53:33.651106 27795 solver.cpp:56] Solver scaffolding done.
I0428 19:53:33.651460 27795 caffe.cpp:248] Starting Optimization
I0428 19:53:33.651466 27795 solver.cpp:273] Solving LeNet
I0428 19:53:33.651469 27795 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:33.652318 27795 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:33.656375 27795 blocking_queue.cpp:49] Waiting for data
I0428 19:53:33.723734 27802 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:33.724243 27795 solver.cpp:398]     Test net output #0: accuracy = 0.1254
I0428 19:53:33.724278 27795 solver.cpp:398]     Test net output #1: loss = 2.31063 (* 1 = 2.31063 loss)
I0428 19:53:33.727425 27795 solver.cpp:219] Iteration 0 (0 iter/s, 0.0759286s/100 iters), loss = 2.29103
I0428 19:53:33.727464 27795 solver.cpp:238]     Train net output #0: loss = 2.29103 (* 1 = 2.29103 loss)
I0428 19:53:33.727490 27795 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:33.838778 27795 solver.cpp:219] Iteration 100 (898.32 iter/s, 0.111319s/100 iters), loss = 1.35888
I0428 19:53:33.838804 27795 solver.cpp:238]     Train net output #0: loss = 1.35888 (* 1 = 1.35888 loss)
I0428 19:53:33.838809 27795 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:33.949486 27795 solver.cpp:219] Iteration 200 (903.615 iter/s, 0.110667s/100 iters), loss = 0.598479
I0428 19:53:33.949527 27795 solver.cpp:238]     Train net output #0: loss = 0.598479 (* 1 = 0.598479 loss)
I0428 19:53:33.949537 27795 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:34.064594 27795 solver.cpp:219] Iteration 300 (869.136 iter/s, 0.115057s/100 iters), loss = 0.212813
I0428 19:53:34.064622 27795 solver.cpp:238]     Train net output #0: loss = 0.212813 (* 1 = 0.212813 loss)
I0428 19:53:34.064630 27795 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:34.169049 27795 solver.cpp:219] Iteration 400 (957.706 iter/s, 0.104416s/100 iters), loss = 0.170393
I0428 19:53:34.169076 27795 solver.cpp:238]     Train net output #0: loss = 0.170393 (* 1 = 0.170393 loss)
I0428 19:53:34.169100 27795 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:34.273360 27795 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:34.349735 27802 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:34.350244 27795 solver.cpp:398]     Test net output #0: accuracy = 0.9616
I0428 19:53:34.350263 27795 solver.cpp:398]     Test net output #1: loss = 0.124363 (* 1 = 0.124363 loss)
I0428 19:53:34.351343 27795 solver.cpp:219] Iteration 500 (548.686 iter/s, 0.182253s/100 iters), loss = 0.0946579
I0428 19:53:34.351384 27795 solver.cpp:238]     Train net output #0: loss = 0.094658 (* 1 = 0.094658 loss)
I0428 19:53:34.351407 27795 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:34.460289 27795 solver.cpp:219] Iteration 600 (918.311 iter/s, 0.108896s/100 iters), loss = 0.0782048
I0428 19:53:34.460315 27795 solver.cpp:238]     Train net output #0: loss = 0.0782049 (* 1 = 0.0782049 loss)
I0428 19:53:34.460340 27795 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:34.565594 27795 solver.cpp:219] Iteration 700 (949.954 iter/s, 0.105268s/100 iters), loss = 0.143361
I0428 19:53:34.565634 27795 solver.cpp:238]     Train net output #0: loss = 0.143361 (* 1 = 0.143361 loss)
I0428 19:53:34.565640 27795 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:34.669020 27795 solver.cpp:219] Iteration 800 (967.209 iter/s, 0.10339s/100 iters), loss = 0.183341
I0428 19:53:34.669049 27795 solver.cpp:238]     Train net output #0: loss = 0.183341 (* 1 = 0.183341 loss)
I0428 19:53:34.669055 27795 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:34.774039 27795 solver.cpp:219] Iteration 900 (952.567 iter/s, 0.104979s/100 iters), loss = 0.166846
I0428 19:53:34.774065 27795 solver.cpp:238]     Train net output #0: loss = 0.166846 (* 1 = 0.166846 loss)
I0428 19:53:34.774070 27795 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:34.808559 27801 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:34.877797 27795 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:34.879060 27795 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:34.880053 27795 solver.cpp:311] Iteration 1000, loss = 0.171557
I0428 19:53:34.880086 27795 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:34.954838 27802 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:34.955356 27795 solver.cpp:398]     Test net output #0: accuracy = 0.9728
I0428 19:53:34.955381 27795 solver.cpp:398]     Test net output #1: loss = 0.0784659 (* 1 = 0.0784659 loss)
I0428 19:53:34.955387 27795 solver.cpp:316] Optimization Done.
I0428 19:53:34.955391 27795 caffe.cpp:259] Optimization Done.
