I0428 20:02:13.165019 29897 caffe.cpp:218] Using GPUs 0
I0428 20:02:13.196046 29897 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:13.645273 29897 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test923.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:13.645406 29897 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test923.prototxt
I0428 20:02:13.645752 29897 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:13.645769 29897 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:13.645854 29897 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:13.645920 29897 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:13.646003 29897 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:13.646024 29897 net.cpp:86] Creating Layer mnist
I0428 20:02:13.646031 29897 net.cpp:382] mnist -> data
I0428 20:02:13.646051 29897 net.cpp:382] mnist -> label
I0428 20:02:13.647053 29897 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:13.649494 29897 net.cpp:124] Setting up mnist
I0428 20:02:13.649509 29897 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:13.649524 29897 net.cpp:131] Top shape: 64 (64)
I0428 20:02:13.649528 29897 net.cpp:139] Memory required for data: 200960
I0428 20:02:13.649534 29897 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:13.649547 29897 net.cpp:86] Creating Layer conv0
I0428 20:02:13.649564 29897 net.cpp:408] conv0 <- data
I0428 20:02:13.649576 29897 net.cpp:382] conv0 -> conv0
I0428 20:02:13.882290 29897 net.cpp:124] Setting up conv0
I0428 20:02:13.882318 29897 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:13.882323 29897 net.cpp:139] Memory required for data: 1675520
I0428 20:02:13.882352 29897 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:13.882364 29897 net.cpp:86] Creating Layer pool0
I0428 20:02:13.882369 29897 net.cpp:408] pool0 <- conv0
I0428 20:02:13.882375 29897 net.cpp:382] pool0 -> pool0
I0428 20:02:13.882419 29897 net.cpp:124] Setting up pool0
I0428 20:02:13.882427 29897 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:13.882431 29897 net.cpp:139] Memory required for data: 2044160
I0428 20:02:13.882433 29897 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:13.882443 29897 net.cpp:86] Creating Layer conv1
I0428 20:02:13.882447 29897 net.cpp:408] conv1 <- pool0
I0428 20:02:13.882452 29897 net.cpp:382] conv1 -> conv1
I0428 20:02:13.885282 29897 net.cpp:124] Setting up conv1
I0428 20:02:13.885298 29897 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:13.885316 29897 net.cpp:139] Memory required for data: 2863360
I0428 20:02:13.885334 29897 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:13.885341 29897 net.cpp:86] Creating Layer pool1
I0428 20:02:13.885346 29897 net.cpp:408] pool1 <- conv1
I0428 20:02:13.885351 29897 net.cpp:382] pool1 -> pool1
I0428 20:02:13.885390 29897 net.cpp:124] Setting up pool1
I0428 20:02:13.885397 29897 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:13.885401 29897 net.cpp:139] Memory required for data: 3068160
I0428 20:02:13.885403 29897 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:13.885411 29897 net.cpp:86] Creating Layer ip1
I0428 20:02:13.885414 29897 net.cpp:408] ip1 <- pool1
I0428 20:02:13.885419 29897 net.cpp:382] ip1 -> ip1
I0428 20:02:13.885651 29897 net.cpp:124] Setting up ip1
I0428 20:02:13.885659 29897 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:13.885663 29897 net.cpp:139] Memory required for data: 3074560
I0428 20:02:13.885670 29897 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:13.885676 29897 net.cpp:86] Creating Layer relu1
I0428 20:02:13.885679 29897 net.cpp:408] relu1 <- ip1
I0428 20:02:13.885699 29897 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:13.885869 29897 net.cpp:124] Setting up relu1
I0428 20:02:13.885877 29897 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:13.885880 29897 net.cpp:139] Memory required for data: 3080960
I0428 20:02:13.885884 29897 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:13.885905 29897 net.cpp:86] Creating Layer ip2
I0428 20:02:13.885910 29897 net.cpp:408] ip2 <- ip1
I0428 20:02:13.885915 29897 net.cpp:382] ip2 -> ip2
I0428 20:02:13.886049 29897 net.cpp:124] Setting up ip2
I0428 20:02:13.886057 29897 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:13.886060 29897 net.cpp:139] Memory required for data: 3087360
I0428 20:02:13.886066 29897 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:13.886072 29897 net.cpp:86] Creating Layer relu2
I0428 20:02:13.886076 29897 net.cpp:408] relu2 <- ip2
I0428 20:02:13.886080 29897 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:13.886863 29897 net.cpp:124] Setting up relu2
I0428 20:02:13.886876 29897 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:13.886880 29897 net.cpp:139] Memory required for data: 3093760
I0428 20:02:13.886884 29897 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:13.886890 29897 net.cpp:86] Creating Layer ip3
I0428 20:02:13.886894 29897 net.cpp:408] ip3 <- ip2
I0428 20:02:13.886899 29897 net.cpp:382] ip3 -> ip3
I0428 20:02:13.887012 29897 net.cpp:124] Setting up ip3
I0428 20:02:13.887020 29897 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:13.887023 29897 net.cpp:139] Memory required for data: 3096320
I0428 20:02:13.887032 29897 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:13.887037 29897 net.cpp:86] Creating Layer relu3
I0428 20:02:13.887042 29897 net.cpp:408] relu3 <- ip3
I0428 20:02:13.887045 29897 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:13.887230 29897 net.cpp:124] Setting up relu3
I0428 20:02:13.887240 29897 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:13.887243 29897 net.cpp:139] Memory required for data: 3098880
I0428 20:02:13.887248 29897 layer_factory.hpp:77] Creating layer loss
I0428 20:02:13.887253 29897 net.cpp:86] Creating Layer loss
I0428 20:02:13.887256 29897 net.cpp:408] loss <- ip3
I0428 20:02:13.887261 29897 net.cpp:408] loss <- label
I0428 20:02:13.887267 29897 net.cpp:382] loss -> loss
I0428 20:02:13.887282 29897 layer_factory.hpp:77] Creating layer loss
I0428 20:02:13.887547 29897 net.cpp:124] Setting up loss
I0428 20:02:13.887555 29897 net.cpp:131] Top shape: (1)
I0428 20:02:13.887559 29897 net.cpp:134]     with loss weight 1
I0428 20:02:13.887574 29897 net.cpp:139] Memory required for data: 3098884
I0428 20:02:13.887578 29897 net.cpp:200] loss needs backward computation.
I0428 20:02:13.887581 29897 net.cpp:200] relu3 needs backward computation.
I0428 20:02:13.887585 29897 net.cpp:200] ip3 needs backward computation.
I0428 20:02:13.887588 29897 net.cpp:200] relu2 needs backward computation.
I0428 20:02:13.887590 29897 net.cpp:200] ip2 needs backward computation.
I0428 20:02:13.887593 29897 net.cpp:200] relu1 needs backward computation.
I0428 20:02:13.887596 29897 net.cpp:200] ip1 needs backward computation.
I0428 20:02:13.887599 29897 net.cpp:200] pool1 needs backward computation.
I0428 20:02:13.887603 29897 net.cpp:200] conv1 needs backward computation.
I0428 20:02:13.887605 29897 net.cpp:200] pool0 needs backward computation.
I0428 20:02:13.887609 29897 net.cpp:200] conv0 needs backward computation.
I0428 20:02:13.887612 29897 net.cpp:202] mnist does not need backward computation.
I0428 20:02:13.887615 29897 net.cpp:244] This network produces output loss
I0428 20:02:13.887624 29897 net.cpp:257] Network initialization done.
I0428 20:02:13.887989 29897 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test923.prototxt
I0428 20:02:13.888015 29897 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:13.888108 29897 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:13.888190 29897 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:13.888236 29897 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:13.888247 29897 net.cpp:86] Creating Layer mnist
I0428 20:02:13.888252 29897 net.cpp:382] mnist -> data
I0428 20:02:13.888260 29897 net.cpp:382] mnist -> label
I0428 20:02:13.888362 29897 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:13.890429 29897 net.cpp:124] Setting up mnist
I0428 20:02:13.890441 29897 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:13.890446 29897 net.cpp:131] Top shape: 100 (100)
I0428 20:02:13.890450 29897 net.cpp:139] Memory required for data: 314000
I0428 20:02:13.890455 29897 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:13.890461 29897 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:13.890465 29897 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:13.890470 29897 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:13.890476 29897 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:13.890597 29897 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:13.890605 29897 net.cpp:131] Top shape: 100 (100)
I0428 20:02:13.890609 29897 net.cpp:131] Top shape: 100 (100)
I0428 20:02:13.890614 29897 net.cpp:139] Memory required for data: 314800
I0428 20:02:13.890616 29897 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:13.890625 29897 net.cpp:86] Creating Layer conv0
I0428 20:02:13.890630 29897 net.cpp:408] conv0 <- data
I0428 20:02:13.890635 29897 net.cpp:382] conv0 -> conv0
I0428 20:02:13.892236 29897 net.cpp:124] Setting up conv0
I0428 20:02:13.892251 29897 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:13.892254 29897 net.cpp:139] Memory required for data: 2618800
I0428 20:02:13.892273 29897 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:13.892294 29897 net.cpp:86] Creating Layer pool0
I0428 20:02:13.892297 29897 net.cpp:408] pool0 <- conv0
I0428 20:02:13.892302 29897 net.cpp:382] pool0 -> pool0
I0428 20:02:13.892338 29897 net.cpp:124] Setting up pool0
I0428 20:02:13.892344 29897 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:13.892348 29897 net.cpp:139] Memory required for data: 3194800
I0428 20:02:13.892350 29897 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:13.892359 29897 net.cpp:86] Creating Layer conv1
I0428 20:02:13.892362 29897 net.cpp:408] conv1 <- pool0
I0428 20:02:13.892366 29897 net.cpp:382] conv1 -> conv1
I0428 20:02:13.894014 29897 net.cpp:124] Setting up conv1
I0428 20:02:13.894028 29897 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:13.894032 29897 net.cpp:139] Memory required for data: 4474800
I0428 20:02:13.894040 29897 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:13.894047 29897 net.cpp:86] Creating Layer pool1
I0428 20:02:13.894052 29897 net.cpp:408] pool1 <- conv1
I0428 20:02:13.894057 29897 net.cpp:382] pool1 -> pool1
I0428 20:02:13.894093 29897 net.cpp:124] Setting up pool1
I0428 20:02:13.894110 29897 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:13.894114 29897 net.cpp:139] Memory required for data: 4794800
I0428 20:02:13.894117 29897 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:13.894124 29897 net.cpp:86] Creating Layer ip1
I0428 20:02:13.894127 29897 net.cpp:408] ip1 <- pool1
I0428 20:02:13.894132 29897 net.cpp:382] ip1 -> ip1
I0428 20:02:13.894399 29897 net.cpp:124] Setting up ip1
I0428 20:02:13.894408 29897 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:13.894426 29897 net.cpp:139] Memory required for data: 4804800
I0428 20:02:13.894435 29897 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:13.894440 29897 net.cpp:86] Creating Layer relu1
I0428 20:02:13.894444 29897 net.cpp:408] relu1 <- ip1
I0428 20:02:13.894448 29897 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:13.894667 29897 net.cpp:124] Setting up relu1
I0428 20:02:13.894677 29897 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:13.894681 29897 net.cpp:139] Memory required for data: 4814800
I0428 20:02:13.894685 29897 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:13.894692 29897 net.cpp:86] Creating Layer ip2
I0428 20:02:13.894695 29897 net.cpp:408] ip2 <- ip1
I0428 20:02:13.894701 29897 net.cpp:382] ip2 -> ip2
I0428 20:02:13.894804 29897 net.cpp:124] Setting up ip2
I0428 20:02:13.894811 29897 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:13.894814 29897 net.cpp:139] Memory required for data: 4824800
I0428 20:02:13.894820 29897 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:13.894825 29897 net.cpp:86] Creating Layer relu2
I0428 20:02:13.894829 29897 net.cpp:408] relu2 <- ip2
I0428 20:02:13.894832 29897 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:13.895010 29897 net.cpp:124] Setting up relu2
I0428 20:02:13.895020 29897 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:13.895022 29897 net.cpp:139] Memory required for data: 4834800
I0428 20:02:13.895025 29897 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:13.895035 29897 net.cpp:86] Creating Layer ip3
I0428 20:02:13.895037 29897 net.cpp:408] ip3 <- ip2
I0428 20:02:13.895043 29897 net.cpp:382] ip3 -> ip3
I0428 20:02:13.895165 29897 net.cpp:124] Setting up ip3
I0428 20:02:13.895172 29897 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:13.895175 29897 net.cpp:139] Memory required for data: 4838800
I0428 20:02:13.895182 29897 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:13.895187 29897 net.cpp:86] Creating Layer relu3
I0428 20:02:13.895190 29897 net.cpp:408] relu3 <- ip3
I0428 20:02:13.895193 29897 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:13.896009 29897 net.cpp:124] Setting up relu3
I0428 20:02:13.896021 29897 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:13.896025 29897 net.cpp:139] Memory required for data: 4842800
I0428 20:02:13.896028 29897 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:13.896035 29897 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:13.896039 29897 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:13.896044 29897 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:13.896050 29897 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:13.896088 29897 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:13.896095 29897 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:13.896100 29897 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:13.896101 29897 net.cpp:139] Memory required for data: 4850800
I0428 20:02:13.896105 29897 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:13.896109 29897 net.cpp:86] Creating Layer accuracy
I0428 20:02:13.896112 29897 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:13.896116 29897 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:13.896121 29897 net.cpp:382] accuracy -> accuracy
I0428 20:02:13.896128 29897 net.cpp:124] Setting up accuracy
I0428 20:02:13.896131 29897 net.cpp:131] Top shape: (1)
I0428 20:02:13.896134 29897 net.cpp:139] Memory required for data: 4850804
I0428 20:02:13.896137 29897 layer_factory.hpp:77] Creating layer loss
I0428 20:02:13.896143 29897 net.cpp:86] Creating Layer loss
I0428 20:02:13.896147 29897 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:13.896150 29897 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:13.896154 29897 net.cpp:382] loss -> loss
I0428 20:02:13.896159 29897 layer_factory.hpp:77] Creating layer loss
I0428 20:02:13.896414 29897 net.cpp:124] Setting up loss
I0428 20:02:13.896423 29897 net.cpp:131] Top shape: (1)
I0428 20:02:13.896426 29897 net.cpp:134]     with loss weight 1
I0428 20:02:13.896446 29897 net.cpp:139] Memory required for data: 4850808
I0428 20:02:13.896450 29897 net.cpp:200] loss needs backward computation.
I0428 20:02:13.896453 29897 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:13.896457 29897 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:13.896461 29897 net.cpp:200] relu3 needs backward computation.
I0428 20:02:13.896462 29897 net.cpp:200] ip3 needs backward computation.
I0428 20:02:13.896466 29897 net.cpp:200] relu2 needs backward computation.
I0428 20:02:13.896468 29897 net.cpp:200] ip2 needs backward computation.
I0428 20:02:13.896471 29897 net.cpp:200] relu1 needs backward computation.
I0428 20:02:13.896473 29897 net.cpp:200] ip1 needs backward computation.
I0428 20:02:13.896476 29897 net.cpp:200] pool1 needs backward computation.
I0428 20:02:13.896478 29897 net.cpp:200] conv1 needs backward computation.
I0428 20:02:13.896481 29897 net.cpp:200] pool0 needs backward computation.
I0428 20:02:13.896484 29897 net.cpp:200] conv0 needs backward computation.
I0428 20:02:13.896487 29897 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:13.896492 29897 net.cpp:202] mnist does not need backward computation.
I0428 20:02:13.896493 29897 net.cpp:244] This network produces output accuracy
I0428 20:02:13.896497 29897 net.cpp:244] This network produces output loss
I0428 20:02:13.896508 29897 net.cpp:257] Network initialization done.
I0428 20:02:13.896548 29897 solver.cpp:56] Solver scaffolding done.
I0428 20:02:13.896976 29897 caffe.cpp:248] Starting Optimization
I0428 20:02:13.896984 29897 solver.cpp:273] Solving LeNet
I0428 20:02:13.896987 29897 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:13.897802 29897 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:13.903434 29897 blocking_queue.cpp:49] Waiting for data
I0428 20:02:13.953445 29904 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:13.953995 29897 solver.cpp:398]     Test net output #0: accuracy = 0.0634
I0428 20:02:13.954020 29897 solver.cpp:398]     Test net output #1: loss = 2.33141 (* 1 = 2.33141 loss)
I0428 20:02:13.957345 29897 solver.cpp:219] Iteration 0 (0 iter/s, 0.0603319s/100 iters), loss = 2.30862
I0428 20:02:13.957370 29897 solver.cpp:238]     Train net output #0: loss = 2.30862 (* 1 = 2.30862 loss)
I0428 20:02:13.957382 29897 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:14.064278 29897 solver.cpp:219] Iteration 100 (935.512 iter/s, 0.106893s/100 iters), loss = 1.02448
I0428 20:02:14.064306 29897 solver.cpp:238]     Train net output #0: loss = 1.02448 (* 1 = 1.02448 loss)
I0428 20:02:14.064313 29897 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:14.171629 29897 solver.cpp:219] Iteration 200 (931.879 iter/s, 0.10731s/100 iters), loss = 0.697684
I0428 20:02:14.171658 29897 solver.cpp:238]     Train net output #0: loss = 0.697684 (* 1 = 0.697684 loss)
I0428 20:02:14.171664 29897 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:14.282202 29897 solver.cpp:219] Iteration 300 (904.702 iter/s, 0.110534s/100 iters), loss = 0.638686
I0428 20:02:14.282230 29897 solver.cpp:238]     Train net output #0: loss = 0.638686 (* 1 = 0.638686 loss)
I0428 20:02:14.282238 29897 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:14.391010 29897 solver.cpp:219] Iteration 400 (919.378 iter/s, 0.108769s/100 iters), loss = 0.526207
I0428 20:02:14.391039 29897 solver.cpp:238]     Train net output #0: loss = 0.526207 (* 1 = 0.526207 loss)
I0428 20:02:14.391047 29897 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:14.497624 29897 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:14.545660 29904 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:14.546207 29897 solver.cpp:398]     Test net output #0: accuracy = 0.7862
I0428 20:02:14.546241 29897 solver.cpp:398]     Test net output #1: loss = 0.548444 (* 1 = 0.548444 loss)
I0428 20:02:14.547323 29897 solver.cpp:219] Iteration 500 (639.911 iter/s, 0.156272s/100 iters), loss = 0.674675
I0428 20:02:14.547381 29897 solver.cpp:238]     Train net output #0: loss = 0.674675 (* 1 = 0.674675 loss)
I0428 20:02:14.547405 29897 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:14.660356 29897 solver.cpp:219] Iteration 600 (885.218 iter/s, 0.112967s/100 iters), loss = 0.405684
I0428 20:02:14.660400 29897 solver.cpp:238]     Train net output #0: loss = 0.405684 (* 1 = 0.405684 loss)
I0428 20:02:14.660408 29897 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:14.766047 29897 solver.cpp:219] Iteration 700 (946.63 iter/s, 0.105638s/100 iters), loss = 0.647233
I0428 20:02:14.766090 29897 solver.cpp:238]     Train net output #0: loss = 0.647233 (* 1 = 0.647233 loss)
I0428 20:02:14.766098 29897 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:14.872627 29897 solver.cpp:219] Iteration 800 (938.724 iter/s, 0.106528s/100 iters), loss = 0.765911
I0428 20:02:14.872670 29897 solver.cpp:238]     Train net output #0: loss = 0.765911 (* 1 = 0.765911 loss)
I0428 20:02:14.872678 29897 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:14.981516 29897 solver.cpp:219] Iteration 900 (918.808 iter/s, 0.108837s/100 iters), loss = 0.48507
I0428 20:02:14.981561 29897 solver.cpp:238]     Train net output #0: loss = 0.48507 (* 1 = 0.48507 loss)
I0428 20:02:14.981570 29897 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:15.017410 29903 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:15.088690 29897 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:15.090112 29897 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:15.090852 29897 solver.cpp:311] Iteration 1000, loss = 0.616217
I0428 20:02:15.090867 29897 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:15.139154 29904 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:15.139700 29897 solver.cpp:398]     Test net output #0: accuracy = 0.791
I0428 20:02:15.139734 29897 solver.cpp:398]     Test net output #1: loss = 0.51028 (* 1 = 0.51028 loss)
I0428 20:02:15.139739 29897 solver.cpp:316] Optimization Done.
I0428 20:02:15.139742 29897 caffe.cpp:259] Optimization Done.
