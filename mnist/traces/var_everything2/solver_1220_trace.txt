I0428 20:14:22.203665 32662 caffe.cpp:218] Using GPUs 0
I0428 20:14:22.231884 32662 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:22.677315 32662 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1220.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:22.677443 32662 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1220.prototxt
I0428 20:14:22.677742 32662 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:22.677755 32662 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:22.677829 32662 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:22.677888 32662 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:22.677973 32662 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:22.677992 32662 net.cpp:86] Creating Layer mnist
I0428 20:14:22.677999 32662 net.cpp:382] mnist -> data
I0428 20:14:22.678017 32662 net.cpp:382] mnist -> label
I0428 20:14:22.678920 32662 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:22.681146 32662 net.cpp:124] Setting up mnist
I0428 20:14:22.681161 32662 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:22.681167 32662 net.cpp:131] Top shape: 64 (64)
I0428 20:14:22.681170 32662 net.cpp:139] Memory required for data: 200960
I0428 20:14:22.681176 32662 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:22.681190 32662 net.cpp:86] Creating Layer conv0
I0428 20:14:22.681195 32662 net.cpp:408] conv0 <- data
I0428 20:14:22.681206 32662 net.cpp:382] conv0 -> conv0
I0428 20:14:22.912693 32662 net.cpp:124] Setting up conv0
I0428 20:14:22.912719 32662 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:22.912724 32662 net.cpp:139] Memory required for data: 7573760
I0428 20:14:22.912756 32662 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:22.912784 32662 net.cpp:86] Creating Layer pool0
I0428 20:14:22.912787 32662 net.cpp:408] pool0 <- conv0
I0428 20:14:22.912792 32662 net.cpp:382] pool0 -> pool0
I0428 20:14:22.912859 32662 net.cpp:124] Setting up pool0
I0428 20:14:22.912868 32662 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:22.912871 32662 net.cpp:139] Memory required for data: 9416960
I0428 20:14:22.912874 32662 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:22.912885 32662 net.cpp:86] Creating Layer conv1
I0428 20:14:22.912889 32662 net.cpp:408] conv1 <- pool0
I0428 20:14:22.912894 32662 net.cpp:382] conv1 -> conv1
I0428 20:14:22.914867 32662 net.cpp:124] Setting up conv1
I0428 20:14:22.914882 32662 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:22.914902 32662 net.cpp:139] Memory required for data: 9449728
I0428 20:14:22.914911 32662 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:22.914919 32662 net.cpp:86] Creating Layer pool1
I0428 20:14:22.914923 32662 net.cpp:408] pool1 <- conv1
I0428 20:14:22.914928 32662 net.cpp:382] pool1 -> pool1
I0428 20:14:22.914965 32662 net.cpp:124] Setting up pool1
I0428 20:14:22.914988 32662 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:22.914991 32662 net.cpp:139] Memory required for data: 9457920
I0428 20:14:22.914994 32662 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:22.915001 32662 net.cpp:86] Creating Layer ip1
I0428 20:14:22.915004 32662 net.cpp:408] ip1 <- pool1
I0428 20:14:22.915009 32662 net.cpp:382] ip1 -> ip1
I0428 20:14:22.915117 32662 net.cpp:124] Setting up ip1
I0428 20:14:22.915123 32662 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:14:22.915127 32662 net.cpp:139] Memory required for data: 9470720
I0428 20:14:22.915133 32662 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:22.915139 32662 net.cpp:86] Creating Layer relu1
I0428 20:14:22.915143 32662 net.cpp:408] relu1 <- ip1
I0428 20:14:22.915148 32662 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:22.915333 32662 net.cpp:124] Setting up relu1
I0428 20:14:22.915341 32662 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:14:22.915344 32662 net.cpp:139] Memory required for data: 9483520
I0428 20:14:22.915349 32662 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:22.915354 32662 net.cpp:86] Creating Layer ip2
I0428 20:14:22.915357 32662 net.cpp:408] ip2 <- ip1
I0428 20:14:22.915362 32662 net.cpp:382] ip2 -> ip2
I0428 20:14:22.915459 32662 net.cpp:124] Setting up ip2
I0428 20:14:22.915467 32662 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:22.915484 32662 net.cpp:139] Memory required for data: 9486080
I0428 20:14:22.915490 32662 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:22.915496 32662 net.cpp:86] Creating Layer relu2
I0428 20:14:22.915499 32662 net.cpp:408] relu2 <- ip2
I0428 20:14:22.915503 32662 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:22.916209 32662 net.cpp:124] Setting up relu2
I0428 20:14:22.916221 32662 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:22.916241 32662 net.cpp:139] Memory required for data: 9488640
I0428 20:14:22.916244 32662 layer_factory.hpp:77] Creating layer loss
I0428 20:14:22.916266 32662 net.cpp:86] Creating Layer loss
I0428 20:14:22.916270 32662 net.cpp:408] loss <- ip2
I0428 20:14:22.916275 32662 net.cpp:408] loss <- label
I0428 20:14:22.916280 32662 net.cpp:382] loss -> loss
I0428 20:14:22.916301 32662 layer_factory.hpp:77] Creating layer loss
I0428 20:14:22.916538 32662 net.cpp:124] Setting up loss
I0428 20:14:22.916548 32662 net.cpp:131] Top shape: (1)
I0428 20:14:22.916551 32662 net.cpp:134]     with loss weight 1
I0428 20:14:22.916565 32662 net.cpp:139] Memory required for data: 9488644
I0428 20:14:22.916570 32662 net.cpp:200] loss needs backward computation.
I0428 20:14:22.916589 32662 net.cpp:200] relu2 needs backward computation.
I0428 20:14:22.916592 32662 net.cpp:200] ip2 needs backward computation.
I0428 20:14:22.916595 32662 net.cpp:200] relu1 needs backward computation.
I0428 20:14:22.916599 32662 net.cpp:200] ip1 needs backward computation.
I0428 20:14:22.916612 32662 net.cpp:200] pool1 needs backward computation.
I0428 20:14:22.916615 32662 net.cpp:200] conv1 needs backward computation.
I0428 20:14:22.916618 32662 net.cpp:200] pool0 needs backward computation.
I0428 20:14:22.916622 32662 net.cpp:200] conv0 needs backward computation.
I0428 20:14:22.916625 32662 net.cpp:202] mnist does not need backward computation.
I0428 20:14:22.916628 32662 net.cpp:244] This network produces output loss
I0428 20:14:22.916637 32662 net.cpp:257] Network initialization done.
I0428 20:14:22.916975 32662 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1220.prototxt
I0428 20:14:22.917002 32662 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:22.917088 32662 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:22.917152 32662 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:22.917223 32662 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:22.917238 32662 net.cpp:86] Creating Layer mnist
I0428 20:14:22.917243 32662 net.cpp:382] mnist -> data
I0428 20:14:22.917250 32662 net.cpp:382] mnist -> label
I0428 20:14:22.917362 32662 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:22.919435 32662 net.cpp:124] Setting up mnist
I0428 20:14:22.919447 32662 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:22.919468 32662 net.cpp:131] Top shape: 100 (100)
I0428 20:14:22.919471 32662 net.cpp:139] Memory required for data: 314000
I0428 20:14:22.919476 32662 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:22.919482 32662 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:22.919486 32662 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:22.919490 32662 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:22.919497 32662 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:22.919634 32662 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:22.919669 32662 net.cpp:131] Top shape: 100 (100)
I0428 20:14:22.919674 32662 net.cpp:131] Top shape: 100 (100)
I0428 20:14:22.919677 32662 net.cpp:139] Memory required for data: 314800
I0428 20:14:22.919682 32662 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:22.919694 32662 net.cpp:86] Creating Layer conv0
I0428 20:14:22.919703 32662 net.cpp:408] conv0 <- data
I0428 20:14:22.919713 32662 net.cpp:382] conv0 -> conv0
I0428 20:14:22.921339 32662 net.cpp:124] Setting up conv0
I0428 20:14:22.921370 32662 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:22.921375 32662 net.cpp:139] Memory required for data: 11834800
I0428 20:14:22.921383 32662 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:22.921389 32662 net.cpp:86] Creating Layer pool0
I0428 20:14:22.921392 32662 net.cpp:408] pool0 <- conv0
I0428 20:14:22.921397 32662 net.cpp:382] pool0 -> pool0
I0428 20:14:22.921447 32662 net.cpp:124] Setting up pool0
I0428 20:14:22.921453 32662 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:22.921458 32662 net.cpp:139] Memory required for data: 14714800
I0428 20:14:22.921460 32662 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:22.921468 32662 net.cpp:86] Creating Layer conv1
I0428 20:14:22.921473 32662 net.cpp:408] conv1 <- pool0
I0428 20:14:22.921478 32662 net.cpp:382] conv1 -> conv1
I0428 20:14:22.923045 32662 net.cpp:124] Setting up conv1
I0428 20:14:22.923058 32662 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:22.923079 32662 net.cpp:139] Memory required for data: 14766000
I0428 20:14:22.923089 32662 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:22.923097 32662 net.cpp:86] Creating Layer pool1
I0428 20:14:22.923101 32662 net.cpp:408] pool1 <- conv1
I0428 20:14:22.923110 32662 net.cpp:382] pool1 -> pool1
I0428 20:14:22.923163 32662 net.cpp:124] Setting up pool1
I0428 20:14:22.923171 32662 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:22.923174 32662 net.cpp:139] Memory required for data: 14778800
I0428 20:14:22.923192 32662 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:22.923199 32662 net.cpp:86] Creating Layer ip1
I0428 20:14:22.923202 32662 net.cpp:408] ip1 <- pool1
I0428 20:14:22.923207 32662 net.cpp:382] ip1 -> ip1
I0428 20:14:22.923346 32662 net.cpp:124] Setting up ip1
I0428 20:14:22.923353 32662 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:14:22.923357 32662 net.cpp:139] Memory required for data: 14798800
I0428 20:14:22.923364 32662 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:22.923370 32662 net.cpp:86] Creating Layer relu1
I0428 20:14:22.923373 32662 net.cpp:408] relu1 <- ip1
I0428 20:14:22.923377 32662 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:22.923590 32662 net.cpp:124] Setting up relu1
I0428 20:14:22.923600 32662 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:14:22.923604 32662 net.cpp:139] Memory required for data: 14818800
I0428 20:14:22.923607 32662 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:22.923630 32662 net.cpp:86] Creating Layer ip2
I0428 20:14:22.923633 32662 net.cpp:408] ip2 <- ip1
I0428 20:14:22.923640 32662 net.cpp:382] ip2 -> ip2
I0428 20:14:22.923755 32662 net.cpp:124] Setting up ip2
I0428 20:14:22.923763 32662 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:22.923766 32662 net.cpp:139] Memory required for data: 14822800
I0428 20:14:22.923773 32662 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:22.923777 32662 net.cpp:86] Creating Layer relu2
I0428 20:14:22.923780 32662 net.cpp:408] relu2 <- ip2
I0428 20:14:22.923785 32662 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:22.923959 32662 net.cpp:124] Setting up relu2
I0428 20:14:22.923969 32662 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:22.923972 32662 net.cpp:139] Memory required for data: 14826800
I0428 20:14:22.923975 32662 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:14:22.923980 32662 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:14:22.923984 32662 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:14:22.923988 32662 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:14:22.924005 32662 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:14:22.924041 32662 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:14:22.924048 32662 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:22.924052 32662 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:22.924055 32662 net.cpp:139] Memory required for data: 14834800
I0428 20:14:22.924058 32662 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:22.924065 32662 net.cpp:86] Creating Layer accuracy
I0428 20:14:22.924068 32662 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:14:22.924072 32662 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:22.924077 32662 net.cpp:382] accuracy -> accuracy
I0428 20:14:22.924084 32662 net.cpp:124] Setting up accuracy
I0428 20:14:22.924088 32662 net.cpp:131] Top shape: (1)
I0428 20:14:22.924091 32662 net.cpp:139] Memory required for data: 14834804
I0428 20:14:22.924093 32662 layer_factory.hpp:77] Creating layer loss
I0428 20:14:22.924099 32662 net.cpp:86] Creating Layer loss
I0428 20:14:22.924103 32662 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:14:22.924106 32662 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:22.924110 32662 net.cpp:382] loss -> loss
I0428 20:14:22.924116 32662 layer_factory.hpp:77] Creating layer loss
I0428 20:14:22.924365 32662 net.cpp:124] Setting up loss
I0428 20:14:22.924374 32662 net.cpp:131] Top shape: (1)
I0428 20:14:22.924391 32662 net.cpp:134]     with loss weight 1
I0428 20:14:22.924398 32662 net.cpp:139] Memory required for data: 14834808
I0428 20:14:22.924401 32662 net.cpp:200] loss needs backward computation.
I0428 20:14:22.924405 32662 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:22.924408 32662 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:14:22.924412 32662 net.cpp:200] relu2 needs backward computation.
I0428 20:14:22.924413 32662 net.cpp:200] ip2 needs backward computation.
I0428 20:14:22.924417 32662 net.cpp:200] relu1 needs backward computation.
I0428 20:14:22.924419 32662 net.cpp:200] ip1 needs backward computation.
I0428 20:14:22.924422 32662 net.cpp:200] pool1 needs backward computation.
I0428 20:14:22.924424 32662 net.cpp:200] conv1 needs backward computation.
I0428 20:14:22.924427 32662 net.cpp:200] pool0 needs backward computation.
I0428 20:14:22.924430 32662 net.cpp:200] conv0 needs backward computation.
I0428 20:14:22.924433 32662 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:22.924441 32662 net.cpp:202] mnist does not need backward computation.
I0428 20:14:22.924444 32662 net.cpp:244] This network produces output accuracy
I0428 20:14:22.924448 32662 net.cpp:244] This network produces output loss
I0428 20:14:22.924473 32662 net.cpp:257] Network initialization done.
I0428 20:14:22.924509 32662 solver.cpp:56] Solver scaffolding done.
I0428 20:14:22.924762 32662 caffe.cpp:248] Starting Optimization
I0428 20:14:22.924769 32662 solver.cpp:273] Solving LeNet
I0428 20:14:22.924772 32662 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:22.925611 32662 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:22.990804 32671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:22.992575 32662 solver.cpp:398]     Test net output #0: accuracy = 0.0875
I0428 20:14:22.992609 32662 solver.cpp:398]     Test net output #1: loss = 2.31869 (* 1 = 2.31869 loss)
I0428 20:14:22.996526 32662 solver.cpp:219] Iteration 0 (3.17373 iter/s, 0.0717291s/100 iters), loss = 2.30813
I0428 20:14:22.996579 32662 solver.cpp:238]     Train net output #0: loss = 2.30813 (* 1 = 2.30813 loss)
I0428 20:14:22.996590 32662 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:23.104199 32662 solver.cpp:219] Iteration 100 (929.167 iter/s, 0.107623s/100 iters), loss = 0.330699
I0428 20:14:23.104243 32662 solver.cpp:238]     Train net output #0: loss = 0.330699 (* 1 = 0.330699 loss)
I0428 20:14:23.104250 32662 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:23.210327 32662 solver.cpp:219] Iteration 200 (942.574 iter/s, 0.106092s/100 iters), loss = 0.27508
I0428 20:14:23.210382 32662 solver.cpp:238]     Train net output #0: loss = 0.27508 (* 1 = 0.27508 loss)
I0428 20:14:23.210389 32662 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:23.317119 32662 solver.cpp:219] Iteration 300 (936.823 iter/s, 0.106744s/100 iters), loss = 0.292358
I0428 20:14:23.317157 32662 solver.cpp:238]     Train net output #0: loss = 0.292358 (* 1 = 0.292358 loss)
I0428 20:14:23.317162 32662 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:23.422603 32662 solver.cpp:219] Iteration 400 (948.329 iter/s, 0.105449s/100 iters), loss = 0.234195
I0428 20:14:23.422644 32662 solver.cpp:238]     Train net output #0: loss = 0.234195 (* 1 = 0.234195 loss)
I0428 20:14:23.422662 32662 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:23.524922 32662 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:23.586966 32671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:23.589186 32662 solver.cpp:398]     Test net output #0: accuracy = 0.9419
I0428 20:14:23.589221 32662 solver.cpp:398]     Test net output #1: loss = 0.185701 (* 1 = 0.185701 loss)
I0428 20:14:23.590251 32662 solver.cpp:219] Iteration 500 (596.618 iter/s, 0.167611s/100 iters), loss = 0.162389
I0428 20:14:23.590289 32662 solver.cpp:238]     Train net output #0: loss = 0.162389 (* 1 = 0.162389 loss)
I0428 20:14:23.590296 32662 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:23.695684 32662 solver.cpp:219] Iteration 600 (948.755 iter/s, 0.105401s/100 iters), loss = 0.0803865
I0428 20:14:23.695708 32662 solver.cpp:238]     Train net output #0: loss = 0.0803865 (* 1 = 0.0803865 loss)
I0428 20:14:23.695714 32662 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:23.803786 32662 solver.cpp:219] Iteration 700 (925.345 iter/s, 0.108068s/100 iters), loss = 0.25941
I0428 20:14:23.803828 32662 solver.cpp:238]     Train net output #0: loss = 0.25941 (* 1 = 0.25941 loss)
I0428 20:14:23.803835 32662 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:23.914461 32662 solver.cpp:219] Iteration 800 (903.841 iter/s, 0.110639s/100 iters), loss = 0.366847
I0428 20:14:23.914504 32662 solver.cpp:238]     Train net output #0: loss = 0.366847 (* 1 = 0.366847 loss)
I0428 20:14:23.914510 32662 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:24.020396 32662 solver.cpp:219] Iteration 900 (944.303 iter/s, 0.105898s/100 iters), loss = 0.298339
I0428 20:14:24.020423 32662 solver.cpp:238]     Train net output #0: loss = 0.298339 (* 1 = 0.298339 loss)
I0428 20:14:24.020431 32662 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:24.056766 32668 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:24.127599 32662 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:24.128409 32662 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:24.129062 32662 solver.cpp:311] Iteration 1000, loss = 0.151343
I0428 20:14:24.129077 32662 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:24.191356 32671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:24.193528 32662 solver.cpp:398]     Test net output #0: accuracy = 0.9559
I0428 20:14:24.193562 32662 solver.cpp:398]     Test net output #1: loss = 0.136642 (* 1 = 0.136642 loss)
I0428 20:14:24.193567 32662 solver.cpp:316] Optimization Done.
I0428 20:14:24.193569 32662 caffe.cpp:259] Optimization Done.
