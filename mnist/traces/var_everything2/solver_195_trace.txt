I0428 19:34:02.694504 23259 caffe.cpp:218] Using GPUs 0
I0428 19:34:02.732542 23259 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:03.245632 23259 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test195.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:03.245781 23259 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test195.prototxt
I0428 19:34:03.246084 23259 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:03.246100 23259 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:03.246170 23259 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:03.246232 23259 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:03.246335 23259 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:03.246361 23259 net.cpp:86] Creating Layer mnist
I0428 19:34:03.246368 23259 net.cpp:382] mnist -> data
I0428 19:34:03.246392 23259 net.cpp:382] mnist -> label
I0428 19:34:03.247519 23259 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:03.250005 23259 net.cpp:124] Setting up mnist
I0428 19:34:03.250025 23259 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:03.250030 23259 net.cpp:131] Top shape: 64 (64)
I0428 19:34:03.250035 23259 net.cpp:139] Memory required for data: 200960
I0428 19:34:03.250041 23259 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:03.250088 23259 net.cpp:86] Creating Layer conv0
I0428 19:34:03.250095 23259 net.cpp:408] conv0 <- data
I0428 19:34:03.250108 23259 net.cpp:382] conv0 -> conv0
I0428 19:34:03.528681 23259 net.cpp:124] Setting up conv0
I0428 19:34:03.528708 23259 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:03.528712 23259 net.cpp:139] Memory required for data: 7573760
I0428 19:34:03.528726 23259 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:03.528754 23259 net.cpp:86] Creating Layer pool0
I0428 19:34:03.528774 23259 net.cpp:408] pool0 <- conv0
I0428 19:34:03.528779 23259 net.cpp:382] pool0 -> pool0
I0428 19:34:03.528836 23259 net.cpp:124] Setting up pool0
I0428 19:34:03.528848 23259 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:03.528851 23259 net.cpp:139] Memory required for data: 9416960
I0428 19:34:03.528856 23259 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:03.528867 23259 net.cpp:86] Creating Layer ip1
I0428 19:34:03.528869 23259 net.cpp:408] ip1 <- pool0
I0428 19:34:03.528874 23259 net.cpp:382] ip1 -> ip1
I0428 19:34:03.530164 23259 net.cpp:124] Setting up ip1
I0428 19:34:03.530190 23259 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:03.530210 23259 net.cpp:139] Memory required for data: 9419520
I0428 19:34:03.530217 23259 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:03.530223 23259 net.cpp:86] Creating Layer relu1
I0428 19:34:03.530227 23259 net.cpp:408] relu1 <- ip1
I0428 19:34:03.530231 23259 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:03.530387 23259 net.cpp:124] Setting up relu1
I0428 19:34:03.530395 23259 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:03.530398 23259 net.cpp:139] Memory required for data: 9422080
I0428 19:34:03.530402 23259 layer_factory.hpp:77] Creating layer loss
I0428 19:34:03.530407 23259 net.cpp:86] Creating Layer loss
I0428 19:34:03.530411 23259 net.cpp:408] loss <- ip1
I0428 19:34:03.530414 23259 net.cpp:408] loss <- label
I0428 19:34:03.530419 23259 net.cpp:382] loss -> loss
I0428 19:34:03.530436 23259 layer_factory.hpp:77] Creating layer loss
I0428 19:34:03.531184 23259 net.cpp:124] Setting up loss
I0428 19:34:03.531195 23259 net.cpp:131] Top shape: (1)
I0428 19:34:03.531214 23259 net.cpp:134]     with loss weight 1
I0428 19:34:03.531229 23259 net.cpp:139] Memory required for data: 9422084
I0428 19:34:03.531232 23259 net.cpp:200] loss needs backward computation.
I0428 19:34:03.531235 23259 net.cpp:200] relu1 needs backward computation.
I0428 19:34:03.531239 23259 net.cpp:200] ip1 needs backward computation.
I0428 19:34:03.531241 23259 net.cpp:200] pool0 needs backward computation.
I0428 19:34:03.531244 23259 net.cpp:200] conv0 needs backward computation.
I0428 19:34:03.531247 23259 net.cpp:202] mnist does not need backward computation.
I0428 19:34:03.531250 23259 net.cpp:244] This network produces output loss
I0428 19:34:03.531256 23259 net.cpp:257] Network initialization done.
I0428 19:34:03.531455 23259 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test195.prototxt
I0428 19:34:03.531476 23259 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:03.531538 23259 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:03.531587 23259 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:03.531627 23259 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:03.531641 23259 net.cpp:86] Creating Layer mnist
I0428 19:34:03.531646 23259 net.cpp:382] mnist -> data
I0428 19:34:03.531652 23259 net.cpp:382] mnist -> label
I0428 19:34:03.531729 23259 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:03.532732 23259 net.cpp:124] Setting up mnist
I0428 19:34:03.532759 23259 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:03.532763 23259 net.cpp:131] Top shape: 100 (100)
I0428 19:34:03.532766 23259 net.cpp:139] Memory required for data: 314000
I0428 19:34:03.532794 23259 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:03.532840 23259 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:03.532845 23259 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:03.532848 23259 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:03.532855 23259 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:03.532919 23259 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:03.532925 23259 net.cpp:131] Top shape: 100 (100)
I0428 19:34:03.532929 23259 net.cpp:131] Top shape: 100 (100)
I0428 19:34:03.532932 23259 net.cpp:139] Memory required for data: 314800
I0428 19:34:03.532935 23259 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:03.532943 23259 net.cpp:86] Creating Layer conv0
I0428 19:34:03.532948 23259 net.cpp:408] conv0 <- data
I0428 19:34:03.532953 23259 net.cpp:382] conv0 -> conv0
I0428 19:34:03.534665 23259 net.cpp:124] Setting up conv0
I0428 19:34:03.534678 23259 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:03.534682 23259 net.cpp:139] Memory required for data: 11834800
I0428 19:34:03.534690 23259 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:03.534696 23259 net.cpp:86] Creating Layer pool0
I0428 19:34:03.534700 23259 net.cpp:408] pool0 <- conv0
I0428 19:34:03.534705 23259 net.cpp:382] pool0 -> pool0
I0428 19:34:03.534737 23259 net.cpp:124] Setting up pool0
I0428 19:34:03.534741 23259 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:03.534744 23259 net.cpp:139] Memory required for data: 14714800
I0428 19:34:03.534747 23259 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:03.534754 23259 net.cpp:86] Creating Layer ip1
I0428 19:34:03.534756 23259 net.cpp:408] ip1 <- pool0
I0428 19:34:03.534760 23259 net.cpp:382] ip1 -> ip1
I0428 19:34:03.535236 23259 net.cpp:124] Setting up ip1
I0428 19:34:03.535244 23259 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:03.535248 23259 net.cpp:139] Memory required for data: 14718800
I0428 19:34:03.535254 23259 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:03.535259 23259 net.cpp:86] Creating Layer relu1
I0428 19:34:03.535261 23259 net.cpp:408] relu1 <- ip1
I0428 19:34:03.535265 23259 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:03.535430 23259 net.cpp:124] Setting up relu1
I0428 19:34:03.535439 23259 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:03.535442 23259 net.cpp:139] Memory required for data: 14722800
I0428 19:34:03.535444 23259 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:34:03.535449 23259 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:34:03.535451 23259 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:34:03.535456 23259 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:34:03.535461 23259 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:34:03.535495 23259 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:34:03.535498 23259 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:03.535501 23259 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:03.535504 23259 net.cpp:139] Memory required for data: 14730800
I0428 19:34:03.535507 23259 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:03.535512 23259 net.cpp:86] Creating Layer accuracy
I0428 19:34:03.535516 23259 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:34:03.535519 23259 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:03.535523 23259 net.cpp:382] accuracy -> accuracy
I0428 19:34:03.535529 23259 net.cpp:124] Setting up accuracy
I0428 19:34:03.535532 23259 net.cpp:131] Top shape: (1)
I0428 19:34:03.535536 23259 net.cpp:139] Memory required for data: 14730804
I0428 19:34:03.535537 23259 layer_factory.hpp:77] Creating layer loss
I0428 19:34:03.535542 23259 net.cpp:86] Creating Layer loss
I0428 19:34:03.535545 23259 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:34:03.535548 23259 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:03.535552 23259 net.cpp:382] loss -> loss
I0428 19:34:03.535557 23259 layer_factory.hpp:77] Creating layer loss
I0428 19:34:03.535949 23259 net.cpp:124] Setting up loss
I0428 19:34:03.535967 23259 net.cpp:131] Top shape: (1)
I0428 19:34:03.535971 23259 net.cpp:134]     with loss weight 1
I0428 19:34:03.535976 23259 net.cpp:139] Memory required for data: 14730808
I0428 19:34:03.535979 23259 net.cpp:200] loss needs backward computation.
I0428 19:34:03.535989 23259 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:03.535993 23259 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:34:03.535996 23259 net.cpp:200] relu1 needs backward computation.
I0428 19:34:03.535998 23259 net.cpp:200] ip1 needs backward computation.
I0428 19:34:03.536002 23259 net.cpp:200] pool0 needs backward computation.
I0428 19:34:03.536005 23259 net.cpp:200] conv0 needs backward computation.
I0428 19:34:03.536007 23259 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:03.536011 23259 net.cpp:202] mnist does not need backward computation.
I0428 19:34:03.536013 23259 net.cpp:244] This network produces output accuracy
I0428 19:34:03.536016 23259 net.cpp:244] This network produces output loss
I0428 19:34:03.536031 23259 net.cpp:257] Network initialization done.
I0428 19:34:03.536072 23259 solver.cpp:56] Solver scaffolding done.
I0428 19:34:03.536209 23259 caffe.cpp:248] Starting Optimization
I0428 19:34:03.536216 23259 solver.cpp:273] Solving LeNet
I0428 19:34:03.536218 23259 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:03.536948 23259 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:03.545482 23259 blocking_queue.cpp:49] Waiting for data
I0428 19:34:03.634708 23266 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:03.636018 23259 solver.cpp:398]     Test net output #0: accuracy = 0.1658
I0428 19:34:03.636066 23259 solver.cpp:398]     Test net output #1: loss = 2.28476 (* 1 = 2.28476 loss)
I0428 19:34:03.640453 23259 solver.cpp:219] Iteration 0 (-3.94035e-31 iter/s, 0.104197s/100 iters), loss = 2.29539
I0428 19:34:03.640494 23259 solver.cpp:238]     Train net output #0: loss = 2.29539 (* 1 = 2.29539 loss)
I0428 19:34:03.640506 23259 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:03.769373 23259 solver.cpp:219] Iteration 100 (775.912 iter/s, 0.128881s/100 iters), loss = 0.923768
I0428 19:34:03.769397 23259 solver.cpp:238]     Train net output #0: loss = 0.923768 (* 1 = 0.923768 loss)
I0428 19:34:03.769403 23259 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:03.896059 23259 solver.cpp:219] Iteration 200 (789.577 iter/s, 0.12665s/100 iters), loss = 0.604455
I0428 19:34:03.896085 23259 solver.cpp:238]     Train net output #0: loss = 0.604455 (* 1 = 0.604455 loss)
I0428 19:34:03.896092 23259 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:04.024245 23259 solver.cpp:219] Iteration 300 (780.351 iter/s, 0.128147s/100 iters), loss = 0.950173
I0428 19:34:04.024284 23259 solver.cpp:238]     Train net output #0: loss = 0.950173 (* 1 = 0.950173 loss)
I0428 19:34:04.024291 23259 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:04.150187 23259 solver.cpp:219] Iteration 400 (794.243 iter/s, 0.125906s/100 iters), loss = 0.637672
I0428 19:34:04.150226 23259 solver.cpp:238]     Train net output #0: loss = 0.637672 (* 1 = 0.637672 loss)
I0428 19:34:04.150233 23259 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:04.274039 23259 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:04.367874 23266 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:04.369220 23259 solver.cpp:398]     Test net output #0: accuracy = 0.67
I0428 19:34:04.369254 23259 solver.cpp:398]     Test net output #1: loss = 0.848191 (* 1 = 0.848191 loss)
I0428 19:34:04.370656 23259 solver.cpp:219] Iteration 500 (453.662 iter/s, 0.220428s/100 iters), loss = 0.898598
I0428 19:34:04.370679 23259 solver.cpp:238]     Train net output #0: loss = 0.898598 (* 1 = 0.898598 loss)
I0428 19:34:04.370713 23259 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:04.497221 23259 solver.cpp:219] Iteration 600 (790.323 iter/s, 0.126531s/100 iters), loss = 0.702651
I0428 19:34:04.497259 23259 solver.cpp:238]     Train net output #0: loss = 0.702651 (* 1 = 0.702651 loss)
I0428 19:34:04.497267 23259 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:04.625685 23259 solver.cpp:219] Iteration 700 (778.721 iter/s, 0.128416s/100 iters), loss = 0.303841
I0428 19:34:04.625727 23259 solver.cpp:238]     Train net output #0: loss = 0.303841 (* 1 = 0.303841 loss)
I0428 19:34:04.625744 23259 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:04.752698 23259 solver.cpp:219] Iteration 800 (787.634 iter/s, 0.126963s/100 iters), loss = 0.357017
I0428 19:34:04.752739 23259 solver.cpp:238]     Train net output #0: loss = 0.357017 (* 1 = 0.357017 loss)
I0428 19:34:04.752746 23259 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:04.879392 23259 solver.cpp:219] Iteration 900 (789.575 iter/s, 0.12665s/100 iters), loss = 0.236754
I0428 19:34:04.879457 23259 solver.cpp:238]     Train net output #0: loss = 0.236754 (* 1 = 0.236754 loss)
I0428 19:34:04.879492 23259 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:04.925626 23265 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:05.014950 23259 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:05.017681 23259 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:05.019752 23259 solver.cpp:311] Iteration 1000, loss = 0.194447
I0428 19:34:05.019783 23259 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:05.118652 23266 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:05.122045 23259 solver.cpp:398]     Test net output #0: accuracy = 0.9612
I0428 19:34:05.122072 23259 solver.cpp:398]     Test net output #1: loss = 0.135594 (* 1 = 0.135594 loss)
I0428 19:34:05.122082 23259 solver.cpp:316] Optimization Done.
I0428 19:34:05.122088 23259 caffe.cpp:259] Optimization Done.
