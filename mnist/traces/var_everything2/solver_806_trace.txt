I0428 19:58:01.196619 28869 caffe.cpp:218] Using GPUs 0
I0428 19:58:01.234251 28869 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:01.746100 28869 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test806.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:01.746242 28869 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test806.prototxt
I0428 19:58:01.746644 28869 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:01.746662 28869 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:01.746759 28869 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:01.746834 28869 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:01.746935 28869 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:01.746959 28869 net.cpp:86] Creating Layer mnist
I0428 19:58:01.746968 28869 net.cpp:382] mnist -> data
I0428 19:58:01.746990 28869 net.cpp:382] mnist -> label
I0428 19:58:01.748080 28869 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:01.750530 28869 net.cpp:124] Setting up mnist
I0428 19:58:01.750547 28869 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:01.750555 28869 net.cpp:131] Top shape: 64 (64)
I0428 19:58:01.750558 28869 net.cpp:139] Memory required for data: 200960
I0428 19:58:01.750566 28869 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:01.750581 28869 net.cpp:86] Creating Layer conv0
I0428 19:58:01.750602 28869 net.cpp:408] conv0 <- data
I0428 19:58:01.750613 28869 net.cpp:382] conv0 -> conv0
I0428 19:58:02.015879 28869 net.cpp:124] Setting up conv0
I0428 19:58:02.015903 28869 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:02.015908 28869 net.cpp:139] Memory required for data: 1675520
I0428 19:58:02.015923 28869 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:02.015934 28869 net.cpp:86] Creating Layer pool0
I0428 19:58:02.015938 28869 net.cpp:408] pool0 <- conv0
I0428 19:58:02.015944 28869 net.cpp:382] pool0 -> pool0
I0428 19:58:02.016003 28869 net.cpp:124] Setting up pool0
I0428 19:58:02.016010 28869 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:02.016011 28869 net.cpp:139] Memory required for data: 2044160
I0428 19:58:02.016014 28869 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:02.016039 28869 net.cpp:86] Creating Layer conv1
I0428 19:58:02.016042 28869 net.cpp:408] conv1 <- pool0
I0428 19:58:02.016047 28869 net.cpp:382] conv1 -> conv1
I0428 19:58:02.018769 28869 net.cpp:124] Setting up conv1
I0428 19:58:02.018797 28869 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:02.018801 28869 net.cpp:139] Memory required for data: 2126080
I0428 19:58:02.018810 28869 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:02.018817 28869 net.cpp:86] Creating Layer pool1
I0428 19:58:02.018821 28869 net.cpp:408] pool1 <- conv1
I0428 19:58:02.018836 28869 net.cpp:382] pool1 -> pool1
I0428 19:58:02.018887 28869 net.cpp:124] Setting up pool1
I0428 19:58:02.018893 28869 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:02.018896 28869 net.cpp:139] Memory required for data: 2146560
I0428 19:58:02.018899 28869 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:02.018906 28869 net.cpp:86] Creating Layer ip1
I0428 19:58:02.018909 28869 net.cpp:408] ip1 <- pool1
I0428 19:58:02.018913 28869 net.cpp:382] ip1 -> ip1
I0428 19:58:02.019022 28869 net.cpp:124] Setting up ip1
I0428 19:58:02.019029 28869 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:02.019032 28869 net.cpp:139] Memory required for data: 2152960
I0428 19:58:02.019039 28869 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:02.019044 28869 net.cpp:86] Creating Layer relu1
I0428 19:58:02.019047 28869 net.cpp:408] relu1 <- ip1
I0428 19:58:02.019052 28869 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:02.019207 28869 net.cpp:124] Setting up relu1
I0428 19:58:02.019214 28869 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:02.019218 28869 net.cpp:139] Memory required for data: 2159360
I0428 19:58:02.019222 28869 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:02.019227 28869 net.cpp:86] Creating Layer ip2
I0428 19:58:02.019229 28869 net.cpp:408] ip2 <- ip1
I0428 19:58:02.019234 28869 net.cpp:382] ip2 -> ip2
I0428 19:58:02.019338 28869 net.cpp:124] Setting up ip2
I0428 19:58:02.019345 28869 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:02.019348 28869 net.cpp:139] Memory required for data: 2165760
I0428 19:58:02.019353 28869 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:02.019359 28869 net.cpp:86] Creating Layer relu2
I0428 19:58:02.019362 28869 net.cpp:408] relu2 <- ip2
I0428 19:58:02.019366 28869 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:02.020139 28869 net.cpp:124] Setting up relu2
I0428 19:58:02.020153 28869 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:02.020171 28869 net.cpp:139] Memory required for data: 2172160
I0428 19:58:02.020175 28869 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:02.020196 28869 net.cpp:86] Creating Layer ip3
I0428 19:58:02.020200 28869 net.cpp:408] ip3 <- ip2
I0428 19:58:02.020205 28869 net.cpp:382] ip3 -> ip3
I0428 19:58:02.020315 28869 net.cpp:124] Setting up ip3
I0428 19:58:02.020323 28869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:02.020325 28869 net.cpp:139] Memory required for data: 2174720
I0428 19:58:02.020332 28869 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:02.020337 28869 net.cpp:86] Creating Layer relu3
I0428 19:58:02.020340 28869 net.cpp:408] relu3 <- ip3
I0428 19:58:02.020344 28869 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:02.020503 28869 net.cpp:124] Setting up relu3
I0428 19:58:02.020510 28869 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:02.020514 28869 net.cpp:139] Memory required for data: 2177280
I0428 19:58:02.020516 28869 layer_factory.hpp:77] Creating layer loss
I0428 19:58:02.020522 28869 net.cpp:86] Creating Layer loss
I0428 19:58:02.020525 28869 net.cpp:408] loss <- ip3
I0428 19:58:02.020529 28869 net.cpp:408] loss <- label
I0428 19:58:02.020534 28869 net.cpp:382] loss -> loss
I0428 19:58:02.020550 28869 layer_factory.hpp:77] Creating layer loss
I0428 19:58:02.020787 28869 net.cpp:124] Setting up loss
I0428 19:58:02.020795 28869 net.cpp:131] Top shape: (1)
I0428 19:58:02.020799 28869 net.cpp:134]     with loss weight 1
I0428 19:58:02.020838 28869 net.cpp:139] Memory required for data: 2177284
I0428 19:58:02.020859 28869 net.cpp:200] loss needs backward computation.
I0428 19:58:02.020862 28869 net.cpp:200] relu3 needs backward computation.
I0428 19:58:02.020865 28869 net.cpp:200] ip3 needs backward computation.
I0428 19:58:02.020869 28869 net.cpp:200] relu2 needs backward computation.
I0428 19:58:02.020871 28869 net.cpp:200] ip2 needs backward computation.
I0428 19:58:02.020875 28869 net.cpp:200] relu1 needs backward computation.
I0428 19:58:02.020877 28869 net.cpp:200] ip1 needs backward computation.
I0428 19:58:02.020881 28869 net.cpp:200] pool1 needs backward computation.
I0428 19:58:02.020900 28869 net.cpp:200] conv1 needs backward computation.
I0428 19:58:02.020903 28869 net.cpp:200] pool0 needs backward computation.
I0428 19:58:02.020906 28869 net.cpp:200] conv0 needs backward computation.
I0428 19:58:02.020910 28869 net.cpp:202] mnist does not need backward computation.
I0428 19:58:02.020915 28869 net.cpp:244] This network produces output loss
I0428 19:58:02.020925 28869 net.cpp:257] Network initialization done.
I0428 19:58:02.021328 28869 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test806.prototxt
I0428 19:58:02.021370 28869 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:02.021473 28869 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:02.021564 28869 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:02.021606 28869 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:02.021618 28869 net.cpp:86] Creating Layer mnist
I0428 19:58:02.021623 28869 net.cpp:382] mnist -> data
I0428 19:58:02.021631 28869 net.cpp:382] mnist -> label
I0428 19:58:02.021710 28869 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:02.023700 28869 net.cpp:124] Setting up mnist
I0428 19:58:02.023730 28869 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:02.023735 28869 net.cpp:131] Top shape: 100 (100)
I0428 19:58:02.023737 28869 net.cpp:139] Memory required for data: 314000
I0428 19:58:02.023741 28869 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:02.023772 28869 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:02.023777 28869 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:02.023782 28869 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:02.023788 28869 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:02.023831 28869 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:02.023836 28869 net.cpp:131] Top shape: 100 (100)
I0428 19:58:02.023840 28869 net.cpp:131] Top shape: 100 (100)
I0428 19:58:02.023843 28869 net.cpp:139] Memory required for data: 314800
I0428 19:58:02.023846 28869 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:02.023869 28869 net.cpp:86] Creating Layer conv0
I0428 19:58:02.023871 28869 net.cpp:408] conv0 <- data
I0428 19:58:02.023876 28869 net.cpp:382] conv0 -> conv0
I0428 19:58:02.025552 28869 net.cpp:124] Setting up conv0
I0428 19:58:02.025565 28869 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:02.025568 28869 net.cpp:139] Memory required for data: 2618800
I0428 19:58:02.025576 28869 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:02.025599 28869 net.cpp:86] Creating Layer pool0
I0428 19:58:02.025601 28869 net.cpp:408] pool0 <- conv0
I0428 19:58:02.025606 28869 net.cpp:382] pool0 -> pool0
I0428 19:58:02.025641 28869 net.cpp:124] Setting up pool0
I0428 19:58:02.025646 28869 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:02.025650 28869 net.cpp:139] Memory required for data: 3194800
I0428 19:58:02.025652 28869 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:02.025660 28869 net.cpp:86] Creating Layer conv1
I0428 19:58:02.025663 28869 net.cpp:408] conv1 <- pool0
I0428 19:58:02.025667 28869 net.cpp:382] conv1 -> conv1
I0428 19:58:02.027693 28869 net.cpp:124] Setting up conv1
I0428 19:58:02.027707 28869 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:02.027711 28869 net.cpp:139] Memory required for data: 3322800
I0428 19:58:02.027720 28869 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:02.027729 28869 net.cpp:86] Creating Layer pool1
I0428 19:58:02.027731 28869 net.cpp:408] pool1 <- conv1
I0428 19:58:02.027736 28869 net.cpp:382] pool1 -> pool1
I0428 19:58:02.027776 28869 net.cpp:124] Setting up pool1
I0428 19:58:02.027804 28869 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:02.027807 28869 net.cpp:139] Memory required for data: 3354800
I0428 19:58:02.027811 28869 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:02.027817 28869 net.cpp:86] Creating Layer ip1
I0428 19:58:02.027820 28869 net.cpp:408] ip1 <- pool1
I0428 19:58:02.027825 28869 net.cpp:382] ip1 -> ip1
I0428 19:58:02.027940 28869 net.cpp:124] Setting up ip1
I0428 19:58:02.027947 28869 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:02.027961 28869 net.cpp:139] Memory required for data: 3364800
I0428 19:58:02.027968 28869 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:02.027973 28869 net.cpp:86] Creating Layer relu1
I0428 19:58:02.027976 28869 net.cpp:408] relu1 <- ip1
I0428 19:58:02.027981 28869 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:02.028254 28869 net.cpp:124] Setting up relu1
I0428 19:58:02.028261 28869 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:02.028265 28869 net.cpp:139] Memory required for data: 3374800
I0428 19:58:02.028268 28869 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:02.028275 28869 net.cpp:86] Creating Layer ip2
I0428 19:58:02.028278 28869 net.cpp:408] ip2 <- ip1
I0428 19:58:02.028283 28869 net.cpp:382] ip2 -> ip2
I0428 19:58:02.028388 28869 net.cpp:124] Setting up ip2
I0428 19:58:02.028394 28869 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:02.028403 28869 net.cpp:139] Memory required for data: 3384800
I0428 19:58:02.028409 28869 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:02.028414 28869 net.cpp:86] Creating Layer relu2
I0428 19:58:02.028416 28869 net.cpp:408] relu2 <- ip2
I0428 19:58:02.028420 28869 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:02.028575 28869 net.cpp:124] Setting up relu2
I0428 19:58:02.028583 28869 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:02.028585 28869 net.cpp:139] Memory required for data: 3394800
I0428 19:58:02.028589 28869 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:02.028594 28869 net.cpp:86] Creating Layer ip3
I0428 19:58:02.028596 28869 net.cpp:408] ip3 <- ip2
I0428 19:58:02.028600 28869 net.cpp:382] ip3 -> ip3
I0428 19:58:02.028720 28869 net.cpp:124] Setting up ip3
I0428 19:58:02.028728 28869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:02.028730 28869 net.cpp:139] Memory required for data: 3398800
I0428 19:58:02.028738 28869 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:02.028743 28869 net.cpp:86] Creating Layer relu3
I0428 19:58:02.028751 28869 net.cpp:408] relu3 <- ip3
I0428 19:58:02.028756 28869 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:02.029706 28869 net.cpp:124] Setting up relu3
I0428 19:58:02.029717 28869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:02.029721 28869 net.cpp:139] Memory required for data: 3402800
I0428 19:58:02.029724 28869 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:02.029729 28869 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:02.029733 28869 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:02.029737 28869 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:02.029743 28869 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:02.029783 28869 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:02.029788 28869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:02.029791 28869 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:02.029793 28869 net.cpp:139] Memory required for data: 3410800
I0428 19:58:02.029796 28869 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:02.029801 28869 net.cpp:86] Creating Layer accuracy
I0428 19:58:02.029804 28869 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:02.029814 28869 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:02.029819 28869 net.cpp:382] accuracy -> accuracy
I0428 19:58:02.029825 28869 net.cpp:124] Setting up accuracy
I0428 19:58:02.029829 28869 net.cpp:131] Top shape: (1)
I0428 19:58:02.029832 28869 net.cpp:139] Memory required for data: 3410804
I0428 19:58:02.029834 28869 layer_factory.hpp:77] Creating layer loss
I0428 19:58:02.029839 28869 net.cpp:86] Creating Layer loss
I0428 19:58:02.029842 28869 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:02.029845 28869 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:02.029850 28869 net.cpp:382] loss -> loss
I0428 19:58:02.029855 28869 layer_factory.hpp:77] Creating layer loss
I0428 19:58:02.030131 28869 net.cpp:124] Setting up loss
I0428 19:58:02.030140 28869 net.cpp:131] Top shape: (1)
I0428 19:58:02.030144 28869 net.cpp:134]     with loss weight 1
I0428 19:58:02.030150 28869 net.cpp:139] Memory required for data: 3410808
I0428 19:58:02.030164 28869 net.cpp:200] loss needs backward computation.
I0428 19:58:02.030169 28869 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:02.030172 28869 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:02.030176 28869 net.cpp:200] relu3 needs backward computation.
I0428 19:58:02.030179 28869 net.cpp:200] ip3 needs backward computation.
I0428 19:58:02.030182 28869 net.cpp:200] relu2 needs backward computation.
I0428 19:58:02.030184 28869 net.cpp:200] ip2 needs backward computation.
I0428 19:58:02.030200 28869 net.cpp:200] relu1 needs backward computation.
I0428 19:58:02.030203 28869 net.cpp:200] ip1 needs backward computation.
I0428 19:58:02.030206 28869 net.cpp:200] pool1 needs backward computation.
I0428 19:58:02.030210 28869 net.cpp:200] conv1 needs backward computation.
I0428 19:58:02.030213 28869 net.cpp:200] pool0 needs backward computation.
I0428 19:58:02.030216 28869 net.cpp:200] conv0 needs backward computation.
I0428 19:58:02.030220 28869 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:02.030236 28869 net.cpp:202] mnist does not need backward computation.
I0428 19:58:02.030237 28869 net.cpp:244] This network produces output accuracy
I0428 19:58:02.030241 28869 net.cpp:244] This network produces output loss
I0428 19:58:02.030252 28869 net.cpp:257] Network initialization done.
I0428 19:58:02.030294 28869 solver.cpp:56] Solver scaffolding done.
I0428 19:58:02.030635 28869 caffe.cpp:248] Starting Optimization
I0428 19:58:02.030642 28869 solver.cpp:273] Solving LeNet
I0428 19:58:02.030644 28869 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:02.031425 28869 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:02.035037 28869 blocking_queue.cpp:49] Waiting for data
I0428 19:58:02.103462 28876 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:02.103974 28869 solver.cpp:398]     Test net output #0: accuracy = 0.1182
I0428 19:58:02.103992 28869 solver.cpp:398]     Test net output #1: loss = 2.30161 (* 1 = 2.30161 loss)
I0428 19:58:02.106544 28869 solver.cpp:219] Iteration 0 (0 iter/s, 0.0758742s/100 iters), loss = 2.3095
I0428 19:58:02.106566 28869 solver.cpp:238]     Train net output #0: loss = 2.3095 (* 1 = 2.3095 loss)
I0428 19:58:02.106593 28869 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:02.182489 28869 solver.cpp:219] Iteration 100 (1317.28 iter/s, 0.0759142s/100 iters), loss = 0.924613
I0428 19:58:02.182512 28869 solver.cpp:238]     Train net output #0: loss = 0.924613 (* 1 = 0.924613 loss)
I0428 19:58:02.182519 28869 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:02.257410 28869 solver.cpp:219] Iteration 200 (1335.34 iter/s, 0.0748873s/100 iters), loss = 0.758677
I0428 19:58:02.257432 28869 solver.cpp:238]     Train net output #0: loss = 0.758677 (* 1 = 0.758677 loss)
I0428 19:58:02.257454 28869 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:02.333714 28869 solver.cpp:219] Iteration 300 (1311.09 iter/s, 0.0762726s/100 iters), loss = 0.621585
I0428 19:58:02.333737 28869 solver.cpp:238]     Train net output #0: loss = 0.621585 (* 1 = 0.621585 loss)
I0428 19:58:02.333744 28869 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:02.408468 28869 solver.cpp:219] Iteration 400 (1338.29 iter/s, 0.0747223s/100 iters), loss = 0.507602
I0428 19:58:02.408491 28869 solver.cpp:238]     Train net output #0: loss = 0.507602 (* 1 = 0.507602 loss)
I0428 19:58:02.408498 28869 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:02.482851 28869 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:02.536164 28876 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:02.536679 28869 solver.cpp:398]     Test net output #0: accuracy = 0.8505
I0428 19:58:02.536697 28869 solver.cpp:398]     Test net output #1: loss = 0.421505 (* 1 = 0.421505 loss)
I0428 19:58:02.537474 28869 solver.cpp:219] Iteration 500 (775.37 iter/s, 0.128971s/100 iters), loss = 0.464262
I0428 19:58:02.537503 28869 solver.cpp:238]     Train net output #0: loss = 0.464262 (* 1 = 0.464262 loss)
I0428 19:58:02.537524 28869 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:02.618046 28869 solver.cpp:219] Iteration 600 (1241.72 iter/s, 0.0805335s/100 iters), loss = 0.489838
I0428 19:58:02.618069 28869 solver.cpp:238]     Train net output #0: loss = 0.489838 (* 1 = 0.489838 loss)
I0428 19:58:02.618091 28869 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:02.700681 28869 solver.cpp:219] Iteration 700 (1210.61 iter/s, 0.0826028s/100 iters), loss = 0.508879
I0428 19:58:02.700706 28869 solver.cpp:238]     Train net output #0: loss = 0.508879 (* 1 = 0.508879 loss)
I0428 19:58:02.700729 28869 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:02.778102 28869 solver.cpp:219] Iteration 800 (1292.19 iter/s, 0.0773877s/100 iters), loss = 0.546961
I0428 19:58:02.778126 28869 solver.cpp:238]     Train net output #0: loss = 0.546961 (* 1 = 0.546961 loss)
I0428 19:58:02.778149 28869 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:02.853590 28869 solver.cpp:219] Iteration 900 (1325.3 iter/s, 0.0754547s/100 iters), loss = 0.504069
I0428 19:58:02.853615 28869 solver.cpp:238]     Train net output #0: loss = 0.504069 (* 1 = 0.504069 loss)
I0428 19:58:02.853621 28869 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:02.878660 28875 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:02.928349 28869 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:02.929069 28869 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:02.929548 28869 solver.cpp:311] Iteration 1000, loss = 0.429823
I0428 19:58:02.929577 28869 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:03.003970 28876 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:03.004487 28869 solver.cpp:398]     Test net output #0: accuracy = 0.8724
I0428 19:58:03.004504 28869 solver.cpp:398]     Test net output #1: loss = 0.342732 (* 1 = 0.342732 loss)
I0428 19:58:03.004509 28869 solver.cpp:316] Optimization Done.
I0428 19:58:03.004513 28869 caffe.cpp:259] Optimization Done.
