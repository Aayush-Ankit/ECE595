I0428 19:30:13.786296 22233 caffe.cpp:218] Using GPUs 0
I0428 19:30:13.823004 22233 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:30:14.343315 22233 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test84.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:30:14.343480 22233 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test84.prototxt
I0428 19:30:14.343816 22233 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:30:14.343834 22233 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:30:14.343920 22233 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:30:14.344019 22233 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:14.344144 22233 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:30:14.344178 22233 net.cpp:86] Creating Layer mnist
I0428 19:30:14.344190 22233 net.cpp:382] mnist -> data
I0428 19:30:14.344221 22233 net.cpp:382] mnist -> label
I0428 19:30:14.345419 22233 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:30:14.347882 22233 net.cpp:124] Setting up mnist
I0428 19:30:14.347903 22233 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:30:14.347913 22233 net.cpp:131] Top shape: 64 (64)
I0428 19:30:14.347919 22233 net.cpp:139] Memory required for data: 200960
I0428 19:30:14.347930 22233 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:14.347954 22233 net.cpp:86] Creating Layer conv0
I0428 19:30:14.347966 22233 net.cpp:408] conv0 <- data
I0428 19:30:14.347983 22233 net.cpp:382] conv0 -> conv0
I0428 19:30:14.640051 22233 net.cpp:124] Setting up conv0
I0428 19:30:14.640085 22233 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:30:14.640091 22233 net.cpp:139] Memory required for data: 938240
I0428 19:30:14.640115 22233 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:14.640136 22233 net.cpp:86] Creating Layer pool0
I0428 19:30:14.640153 22233 net.cpp:408] pool0 <- conv0
I0428 19:30:14.640164 22233 net.cpp:382] pool0 -> pool0
I0428 19:30:14.640233 22233 net.cpp:124] Setting up pool0
I0428 19:30:14.640244 22233 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:30:14.640249 22233 net.cpp:139] Memory required for data: 1122560
I0428 19:30:14.640681 22233 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:14.640714 22233 net.cpp:86] Creating Layer ip1
I0428 19:30:14.640724 22233 net.cpp:408] ip1 <- pool0
I0428 19:30:14.640736 22233 net.cpp:382] ip1 -> ip1
I0428 19:30:14.641278 22233 net.cpp:124] Setting up ip1
I0428 19:30:14.641300 22233 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:30:14.641309 22233 net.cpp:139] Memory required for data: 1128960
I0428 19:30:14.641326 22233 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:14.641341 22233 net.cpp:86] Creating Layer relu1
I0428 19:30:14.641350 22233 net.cpp:408] relu1 <- ip1
I0428 19:30:14.641360 22233 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:14.641731 22233 net.cpp:124] Setting up relu1
I0428 19:30:14.641748 22233 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:30:14.641757 22233 net.cpp:139] Memory required for data: 1135360
I0428 19:30:14.641763 22233 layer_factory.hpp:77] Creating layer ip2
I0428 19:30:14.641779 22233 net.cpp:86] Creating Layer ip2
I0428 19:30:14.641788 22233 net.cpp:408] ip2 <- ip1
I0428 19:30:14.641798 22233 net.cpp:382] ip2 -> ip2
I0428 19:30:14.642007 22233 net.cpp:124] Setting up ip2
I0428 19:30:14.642020 22233 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:14.642029 22233 net.cpp:139] Memory required for data: 1137920
I0428 19:30:14.642043 22233 layer_factory.hpp:77] Creating layer relu2
I0428 19:30:14.642057 22233 net.cpp:86] Creating Layer relu2
I0428 19:30:14.642066 22233 net.cpp:408] relu2 <- ip2
I0428 19:30:14.642076 22233 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:30:14.643591 22233 net.cpp:124] Setting up relu2
I0428 19:30:14.643617 22233 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:14.643626 22233 net.cpp:139] Memory required for data: 1140480
I0428 19:30:14.643635 22233 layer_factory.hpp:77] Creating layer loss
I0428 19:30:14.643651 22233 net.cpp:86] Creating Layer loss
I0428 19:30:14.643661 22233 net.cpp:408] loss <- ip2
I0428 19:30:14.643671 22233 net.cpp:408] loss <- label
I0428 19:30:14.643683 22233 net.cpp:382] loss -> loss
I0428 19:30:14.643718 22233 layer_factory.hpp:77] Creating layer loss
I0428 19:30:14.644239 22233 net.cpp:124] Setting up loss
I0428 19:30:14.644256 22233 net.cpp:131] Top shape: (1)
I0428 19:30:14.644264 22233 net.cpp:134]     with loss weight 1
I0428 19:30:14.644289 22233 net.cpp:139] Memory required for data: 1140484
I0428 19:30:14.644296 22233 net.cpp:200] loss needs backward computation.
I0428 19:30:14.644305 22233 net.cpp:200] relu2 needs backward computation.
I0428 19:30:14.644312 22233 net.cpp:200] ip2 needs backward computation.
I0428 19:30:14.644320 22233 net.cpp:200] relu1 needs backward computation.
I0428 19:30:14.644325 22233 net.cpp:200] ip1 needs backward computation.
I0428 19:30:14.644332 22233 net.cpp:200] pool0 needs backward computation.
I0428 19:30:14.644340 22233 net.cpp:200] conv0 needs backward computation.
I0428 19:30:14.644347 22233 net.cpp:202] mnist does not need backward computation.
I0428 19:30:14.644356 22233 net.cpp:244] This network produces output loss
I0428 19:30:14.644372 22233 net.cpp:257] Network initialization done.
I0428 19:30:14.644886 22233 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test84.prototxt
I0428 19:30:14.644934 22233 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:30:14.645079 22233 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:30:14.645223 22233 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:14.645308 22233 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:30:14.645332 22233 net.cpp:86] Creating Layer mnist
I0428 19:30:14.645345 22233 net.cpp:382] mnist -> data
I0428 19:30:14.645361 22233 net.cpp:382] mnist -> label
I0428 19:30:14.645541 22233 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:30:14.649052 22233 net.cpp:124] Setting up mnist
I0428 19:30:14.649078 22233 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:30:14.649089 22233 net.cpp:131] Top shape: 100 (100)
I0428 19:30:14.649096 22233 net.cpp:139] Memory required for data: 314000
I0428 19:30:14.649103 22233 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:30:14.649124 22233 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:30:14.649133 22233 net.cpp:408] label_mnist_1_split <- label
I0428 19:30:14.649145 22233 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:30:14.649159 22233 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:30:14.649323 22233 net.cpp:124] Setting up label_mnist_1_split
I0428 19:30:14.649339 22233 net.cpp:131] Top shape: 100 (100)
I0428 19:30:14.649348 22233 net.cpp:131] Top shape: 100 (100)
I0428 19:30:14.649356 22233 net.cpp:139] Memory required for data: 314800
I0428 19:30:14.649363 22233 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:14.649384 22233 net.cpp:86] Creating Layer conv0
I0428 19:30:14.649391 22233 net.cpp:408] conv0 <- data
I0428 19:30:14.649404 22233 net.cpp:382] conv0 -> conv0
I0428 19:30:14.652112 22233 net.cpp:124] Setting up conv0
I0428 19:30:14.652142 22233 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:30:14.652150 22233 net.cpp:139] Memory required for data: 1466800
I0428 19:30:14.652168 22233 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:14.652186 22233 net.cpp:86] Creating Layer pool0
I0428 19:30:14.652194 22233 net.cpp:408] pool0 <- conv0
I0428 19:30:14.652207 22233 net.cpp:382] pool0 -> pool0
I0428 19:30:14.652281 22233 net.cpp:124] Setting up pool0
I0428 19:30:14.652297 22233 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:30:14.652304 22233 net.cpp:139] Memory required for data: 1754800
I0428 19:30:14.652310 22233 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:14.652325 22233 net.cpp:86] Creating Layer ip1
I0428 19:30:14.652333 22233 net.cpp:408] ip1 <- pool0
I0428 19:30:14.652343 22233 net.cpp:382] ip1 -> ip1
I0428 19:30:14.652747 22233 net.cpp:124] Setting up ip1
I0428 19:30:14.652760 22233 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:30:14.652768 22233 net.cpp:139] Memory required for data: 1764800
I0428 19:30:14.652782 22233 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:14.652792 22233 net.cpp:86] Creating Layer relu1
I0428 19:30:14.652801 22233 net.cpp:408] relu1 <- ip1
I0428 19:30:14.652822 22233 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:14.653240 22233 net.cpp:124] Setting up relu1
I0428 19:30:14.653259 22233 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:30:14.653286 22233 net.cpp:139] Memory required for data: 1774800
I0428 19:30:14.653293 22233 layer_factory.hpp:77] Creating layer ip2
I0428 19:30:14.653307 22233 net.cpp:86] Creating Layer ip2
I0428 19:30:14.653316 22233 net.cpp:408] ip2 <- ip1
I0428 19:30:14.653327 22233 net.cpp:382] ip2 -> ip2
I0428 19:30:14.653523 22233 net.cpp:124] Setting up ip2
I0428 19:30:14.653537 22233 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:14.653545 22233 net.cpp:139] Memory required for data: 1778800
I0428 19:30:14.653560 22233 layer_factory.hpp:77] Creating layer relu2
I0428 19:30:14.653570 22233 net.cpp:86] Creating Layer relu2
I0428 19:30:14.653580 22233 net.cpp:408] relu2 <- ip2
I0428 19:30:14.653589 22233 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:30:14.653900 22233 net.cpp:124] Setting up relu2
I0428 19:30:14.653921 22233 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:14.653929 22233 net.cpp:139] Memory required for data: 1782800
I0428 19:30:14.653934 22233 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:30:14.653946 22233 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:30:14.653954 22233 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:30:14.653962 22233 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:30:14.653980 22233 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:30:14.654127 22233 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:30:14.654141 22233 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:14.654150 22233 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:14.654155 22233 net.cpp:139] Memory required for data: 1790800
I0428 19:30:14.654163 22233 layer_factory.hpp:77] Creating layer accuracy
I0428 19:30:14.654180 22233 net.cpp:86] Creating Layer accuracy
I0428 19:30:14.654188 22233 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:30:14.654197 22233 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:30:14.654209 22233 net.cpp:382] accuracy -> accuracy
I0428 19:30:14.654224 22233 net.cpp:124] Setting up accuracy
I0428 19:30:14.654233 22233 net.cpp:131] Top shape: (1)
I0428 19:30:14.654240 22233 net.cpp:139] Memory required for data: 1790804
I0428 19:30:14.654247 22233 layer_factory.hpp:77] Creating layer loss
I0428 19:30:14.654258 22233 net.cpp:86] Creating Layer loss
I0428 19:30:14.654264 22233 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:30:14.654273 22233 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:30:14.654281 22233 net.cpp:382] loss -> loss
I0428 19:30:14.654294 22233 layer_factory.hpp:77] Creating layer loss
I0428 19:30:14.655972 22233 net.cpp:124] Setting up loss
I0428 19:30:14.655998 22233 net.cpp:131] Top shape: (1)
I0428 19:30:14.656007 22233 net.cpp:134]     with loss weight 1
I0428 19:30:14.656019 22233 net.cpp:139] Memory required for data: 1790808
I0428 19:30:14.656028 22233 net.cpp:200] loss needs backward computation.
I0428 19:30:14.656038 22233 net.cpp:202] accuracy does not need backward computation.
I0428 19:30:14.656046 22233 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:30:14.656054 22233 net.cpp:200] relu2 needs backward computation.
I0428 19:30:14.656061 22233 net.cpp:200] ip2 needs backward computation.
I0428 19:30:14.656069 22233 net.cpp:200] relu1 needs backward computation.
I0428 19:30:14.656075 22233 net.cpp:200] ip1 needs backward computation.
I0428 19:30:14.656081 22233 net.cpp:200] pool0 needs backward computation.
I0428 19:30:14.656090 22233 net.cpp:200] conv0 needs backward computation.
I0428 19:30:14.656096 22233 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:30:14.656105 22233 net.cpp:202] mnist does not need backward computation.
I0428 19:30:14.656113 22233 net.cpp:244] This network produces output accuracy
I0428 19:30:14.656121 22233 net.cpp:244] This network produces output loss
I0428 19:30:14.656142 22233 net.cpp:257] Network initialization done.
I0428 19:30:14.656208 22233 solver.cpp:56] Solver scaffolding done.
I0428 19:30:14.656613 22233 caffe.cpp:248] Starting Optimization
I0428 19:30:14.656625 22233 solver.cpp:273] Solving LeNet
I0428 19:30:14.656649 22233 solver.cpp:274] Learning Rate Policy: inv
I0428 19:30:14.656888 22233 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:30:14.663347 22233 blocking_queue.cpp:49] Waiting for data
I0428 19:30:14.736414 22242 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:14.736927 22233 solver.cpp:398]     Test net output #0: accuracy = 0.1137
I0428 19:30:14.736964 22233 solver.cpp:398]     Test net output #1: loss = 2.30583 (* 1 = 2.30583 loss)
I0428 19:30:14.739110 22233 solver.cpp:219] Iteration 0 (-2.23664e-31 iter/s, 0.0824219s/100 iters), loss = 2.29821
I0428 19:30:14.739156 22233 solver.cpp:238]     Train net output #0: loss = 2.29821 (* 1 = 2.29821 loss)
I0428 19:30:14.739184 22233 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:30:14.800034 22233 solver.cpp:219] Iteration 100 (1642.97 iter/s, 0.0608654s/100 iters), loss = 0.406925
I0428 19:30:14.800072 22233 solver.cpp:238]     Train net output #0: loss = 0.406925 (* 1 = 0.406925 loss)
I0428 19:30:14.800086 22233 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:30:14.854425 22233 solver.cpp:219] Iteration 200 (1839.93 iter/s, 0.0543498s/100 iters), loss = 0.329985
I0428 19:30:14.854456 22233 solver.cpp:238]     Train net output #0: loss = 0.329985 (* 1 = 0.329985 loss)
I0428 19:30:14.854467 22233 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:30:14.907006 22233 solver.cpp:219] Iteration 300 (1903.11 iter/s, 0.0525455s/100 iters), loss = 0.245723
I0428 19:30:14.907033 22233 solver.cpp:238]     Train net output #0: loss = 0.245723 (* 1 = 0.245723 loss)
I0428 19:30:14.907043 22233 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:30:14.960391 22233 solver.cpp:219] Iteration 400 (1874.29 iter/s, 0.0533535s/100 iters), loss = 0.207497
I0428 19:30:14.960418 22233 solver.cpp:238]     Train net output #0: loss = 0.207497 (* 1 = 0.207497 loss)
I0428 19:30:14.960443 22233 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:30:15.013954 22233 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:30:15.088768 22242 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:15.089197 22233 solver.cpp:398]     Test net output #0: accuracy = 0.9326
I0428 19:30:15.089221 22233 solver.cpp:398]     Test net output #1: loss = 0.23227 (* 1 = 0.23227 loss)
I0428 19:30:15.089820 22233 solver.cpp:219] Iteration 500 (772.841 iter/s, 0.129393s/100 iters), loss = 0.301044
I0428 19:30:15.089862 22233 solver.cpp:238]     Train net output #0: loss = 0.301044 (* 1 = 0.301044 loss)
I0428 19:30:15.089895 22233 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:30:15.143710 22233 solver.cpp:219] Iteration 600 (1857.26 iter/s, 0.0538428s/100 iters), loss = 0.168327
I0428 19:30:15.143757 22233 solver.cpp:238]     Train net output #0: loss = 0.168327 (* 1 = 0.168327 loss)
I0428 19:30:15.143772 22233 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:30:15.195655 22233 solver.cpp:219] Iteration 700 (1926.54 iter/s, 0.0519066s/100 iters), loss = 0.380727
I0428 19:30:15.195708 22233 solver.cpp:238]     Train net output #0: loss = 0.380727 (* 1 = 0.380727 loss)
I0428 19:30:15.195719 22233 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:30:15.250155 22233 solver.cpp:219] Iteration 800 (1836.19 iter/s, 0.0544605s/100 iters), loss = 0.392498
I0428 19:30:15.250186 22233 solver.cpp:238]     Train net output #0: loss = 0.392498 (* 1 = 0.392498 loss)
I0428 19:30:15.250195 22233 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:30:15.303889 22233 solver.cpp:219] Iteration 900 (1862.32 iter/s, 0.0536965s/100 iters), loss = 0.241668
I0428 19:30:15.303917 22233 solver.cpp:238]     Train net output #0: loss = 0.241668 (* 1 = 0.241668 loss)
I0428 19:30:15.303942 22233 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:30:15.322371 22241 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:15.357656 22233 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:30:15.358413 22233 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:30:15.358924 22233 solver.cpp:311] Iteration 1000, loss = 0.255911
I0428 19:30:15.358942 22233 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:30:15.426962 22242 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:15.427361 22233 solver.cpp:398]     Test net output #0: accuracy = 0.9564
I0428 19:30:15.427381 22233 solver.cpp:398]     Test net output #1: loss = 0.148058 (* 1 = 0.148058 loss)
I0428 19:30:15.427387 22233 solver.cpp:316] Optimization Done.
I0428 19:30:15.427393 22233 caffe.cpp:259] Optimization Done.
