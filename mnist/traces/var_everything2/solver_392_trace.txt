I0428 19:42:23.002645 25054 caffe.cpp:218] Using GPUs 0
I0428 19:42:23.043632 25054 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:23.562516 25054 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test392.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:23.562687 25054 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test392.prototxt
I0428 19:42:23.563027 25054 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:23.563048 25054 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:23.563135 25054 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:42:23.563225 25054 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:23.563354 25054 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:23.563387 25054 net.cpp:86] Creating Layer mnist
I0428 19:42:23.563400 25054 net.cpp:382] mnist -> data
I0428 19:42:23.563431 25054 net.cpp:382] mnist -> label
I0428 19:42:23.564635 25054 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:23.567128 25054 net.cpp:124] Setting up mnist
I0428 19:42:23.567149 25054 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:23.567160 25054 net.cpp:131] Top shape: 64 (64)
I0428 19:42:23.567167 25054 net.cpp:139] Memory required for data: 200960
I0428 19:42:23.567178 25054 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:23.567200 25054 net.cpp:86] Creating Layer conv0
I0428 19:42:23.567211 25054 net.cpp:408] conv0 <- data
I0428 19:42:23.567229 25054 net.cpp:382] conv0 -> conv0
I0428 19:42:23.833469 25054 net.cpp:124] Setting up conv0
I0428 19:42:23.833498 25054 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:23.833504 25054 net.cpp:139] Memory required for data: 495872
I0428 19:42:23.833524 25054 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:23.833540 25054 net.cpp:86] Creating Layer pool0
I0428 19:42:23.833547 25054 net.cpp:408] pool0 <- conv0
I0428 19:42:23.833556 25054 net.cpp:382] pool0 -> pool0
I0428 19:42:23.833616 25054 net.cpp:124] Setting up pool0
I0428 19:42:23.833626 25054 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:23.833648 25054 net.cpp:139] Memory required for data: 569600
I0428 19:42:23.833654 25054 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:23.833669 25054 net.cpp:86] Creating Layer conv1
I0428 19:42:23.833676 25054 net.cpp:408] conv1 <- pool0
I0428 19:42:23.833684 25054 net.cpp:382] conv1 -> conv1
I0428 19:42:23.836328 25054 net.cpp:124] Setting up conv1
I0428 19:42:23.836343 25054 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:42:23.836349 25054 net.cpp:139] Memory required for data: 979200
I0428 19:42:23.836361 25054 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:23.836374 25054 net.cpp:86] Creating Layer pool1
I0428 19:42:23.836385 25054 net.cpp:408] pool1 <- conv1
I0428 19:42:23.836393 25054 net.cpp:382] pool1 -> pool1
I0428 19:42:23.836433 25054 net.cpp:124] Setting up pool1
I0428 19:42:23.836441 25054 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:42:23.836447 25054 net.cpp:139] Memory required for data: 1081600
I0428 19:42:23.836452 25054 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:23.836467 25054 net.cpp:86] Creating Layer ip1
I0428 19:42:23.836472 25054 net.cpp:408] ip1 <- pool1
I0428 19:42:23.836480 25054 net.cpp:382] ip1 -> ip1
I0428 19:42:23.836616 25054 net.cpp:124] Setting up ip1
I0428 19:42:23.836625 25054 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:23.836630 25054 net.cpp:139] Memory required for data: 1084160
I0428 19:42:23.836642 25054 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:23.836650 25054 net.cpp:86] Creating Layer relu1
I0428 19:42:23.836659 25054 net.cpp:408] relu1 <- ip1
I0428 19:42:23.836666 25054 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:23.836884 25054 net.cpp:124] Setting up relu1
I0428 19:42:23.836911 25054 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:23.836917 25054 net.cpp:139] Memory required for data: 1086720
I0428 19:42:23.836923 25054 layer_factory.hpp:77] Creating layer loss
I0428 19:42:23.836932 25054 net.cpp:86] Creating Layer loss
I0428 19:42:23.836938 25054 net.cpp:408] loss <- ip1
I0428 19:42:23.836946 25054 net.cpp:408] loss <- label
I0428 19:42:23.836954 25054 net.cpp:382] loss -> loss
I0428 19:42:23.836979 25054 layer_factory.hpp:77] Creating layer loss
I0428 19:42:23.837816 25054 net.cpp:124] Setting up loss
I0428 19:42:23.837831 25054 net.cpp:131] Top shape: (1)
I0428 19:42:23.837836 25054 net.cpp:134]     with loss weight 1
I0428 19:42:23.837855 25054 net.cpp:139] Memory required for data: 1086724
I0428 19:42:23.837862 25054 net.cpp:200] loss needs backward computation.
I0428 19:42:23.837867 25054 net.cpp:200] relu1 needs backward computation.
I0428 19:42:23.837872 25054 net.cpp:200] ip1 needs backward computation.
I0428 19:42:23.837877 25054 net.cpp:200] pool1 needs backward computation.
I0428 19:42:23.837882 25054 net.cpp:200] conv1 needs backward computation.
I0428 19:42:23.837888 25054 net.cpp:200] pool0 needs backward computation.
I0428 19:42:23.837893 25054 net.cpp:200] conv0 needs backward computation.
I0428 19:42:23.837898 25054 net.cpp:202] mnist does not need backward computation.
I0428 19:42:23.837903 25054 net.cpp:244] This network produces output loss
I0428 19:42:23.837914 25054 net.cpp:257] Network initialization done.
I0428 19:42:23.838160 25054 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test392.prototxt
I0428 19:42:23.838188 25054 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:23.838263 25054 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:42:23.838354 25054 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:23.838412 25054 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:23.838428 25054 net.cpp:86] Creating Layer mnist
I0428 19:42:23.838434 25054 net.cpp:382] mnist -> data
I0428 19:42:23.838446 25054 net.cpp:382] mnist -> label
I0428 19:42:23.838553 25054 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:23.840445 25054 net.cpp:124] Setting up mnist
I0428 19:42:23.840476 25054 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:23.840483 25054 net.cpp:131] Top shape: 100 (100)
I0428 19:42:23.840488 25054 net.cpp:139] Memory required for data: 314000
I0428 19:42:23.840494 25054 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:23.840524 25054 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:23.840530 25054 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:23.840538 25054 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:23.840548 25054 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:23.840651 25054 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:23.840661 25054 net.cpp:131] Top shape: 100 (100)
I0428 19:42:23.840680 25054 net.cpp:131] Top shape: 100 (100)
I0428 19:42:23.840684 25054 net.cpp:139] Memory required for data: 314800
I0428 19:42:23.840689 25054 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:23.840703 25054 net.cpp:86] Creating Layer conv0
I0428 19:42:23.840708 25054 net.cpp:408] conv0 <- data
I0428 19:42:23.840716 25054 net.cpp:382] conv0 -> conv0
I0428 19:42:23.841558 25054 net.cpp:124] Setting up conv0
I0428 19:42:23.841572 25054 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:23.841578 25054 net.cpp:139] Memory required for data: 775600
I0428 19:42:23.841591 25054 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:23.841599 25054 net.cpp:86] Creating Layer pool0
I0428 19:42:23.841606 25054 net.cpp:408] pool0 <- conv0
I0428 19:42:23.841614 25054 net.cpp:382] pool0 -> pool0
I0428 19:42:23.841670 25054 net.cpp:124] Setting up pool0
I0428 19:42:23.841678 25054 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:23.841683 25054 net.cpp:139] Memory required for data: 890800
I0428 19:42:23.841688 25054 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:23.841701 25054 net.cpp:86] Creating Layer conv1
I0428 19:42:23.841707 25054 net.cpp:408] conv1 <- pool0
I0428 19:42:23.841717 25054 net.cpp:382] conv1 -> conv1
I0428 19:42:23.843228 25054 net.cpp:124] Setting up conv1
I0428 19:42:23.843245 25054 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:42:23.843251 25054 net.cpp:139] Memory required for data: 1530800
I0428 19:42:23.843266 25054 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:23.843276 25054 net.cpp:86] Creating Layer pool1
I0428 19:42:23.843291 25054 net.cpp:408] pool1 <- conv1
I0428 19:42:23.843302 25054 net.cpp:382] pool1 -> pool1
I0428 19:42:23.843344 25054 net.cpp:124] Setting up pool1
I0428 19:42:23.843353 25054 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:42:23.843358 25054 net.cpp:139] Memory required for data: 1690800
I0428 19:42:23.843364 25054 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:23.843374 25054 net.cpp:86] Creating Layer ip1
I0428 19:42:23.843379 25054 net.cpp:408] ip1 <- pool1
I0428 19:42:23.843389 25054 net.cpp:382] ip1 -> ip1
I0428 19:42:23.843523 25054 net.cpp:124] Setting up ip1
I0428 19:42:23.843533 25054 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:23.843538 25054 net.cpp:139] Memory required for data: 1694800
I0428 19:42:23.843549 25054 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:23.843557 25054 net.cpp:86] Creating Layer relu1
I0428 19:42:23.843564 25054 net.cpp:408] relu1 <- ip1
I0428 19:42:23.843571 25054 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:23.844321 25054 net.cpp:124] Setting up relu1
I0428 19:42:23.844334 25054 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:23.844341 25054 net.cpp:139] Memory required for data: 1698800
I0428 19:42:23.844347 25054 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:42:23.844357 25054 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:42:23.844362 25054 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:42:23.844370 25054 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:42:23.844382 25054 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:42:23.844455 25054 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:42:23.844463 25054 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:23.844470 25054 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:23.844476 25054 net.cpp:139] Memory required for data: 1706800
I0428 19:42:23.844481 25054 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:23.844490 25054 net.cpp:86] Creating Layer accuracy
I0428 19:42:23.844494 25054 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:42:23.844502 25054 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:23.844511 25054 net.cpp:382] accuracy -> accuracy
I0428 19:42:23.844522 25054 net.cpp:124] Setting up accuracy
I0428 19:42:23.844529 25054 net.cpp:131] Top shape: (1)
I0428 19:42:23.844534 25054 net.cpp:139] Memory required for data: 1706804
I0428 19:42:23.844540 25054 layer_factory.hpp:77] Creating layer loss
I0428 19:42:23.844547 25054 net.cpp:86] Creating Layer loss
I0428 19:42:23.844553 25054 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:42:23.844560 25054 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:23.844568 25054 net.cpp:382] loss -> loss
I0428 19:42:23.844600 25054 layer_factory.hpp:77] Creating layer loss
I0428 19:42:23.844847 25054 net.cpp:124] Setting up loss
I0428 19:42:23.844859 25054 net.cpp:131] Top shape: (1)
I0428 19:42:23.844866 25054 net.cpp:134]     with loss weight 1
I0428 19:42:23.844890 25054 net.cpp:139] Memory required for data: 1706808
I0428 19:42:23.844913 25054 net.cpp:200] loss needs backward computation.
I0428 19:42:23.844935 25054 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:23.844943 25054 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:42:23.844949 25054 net.cpp:200] relu1 needs backward computation.
I0428 19:42:23.844954 25054 net.cpp:200] ip1 needs backward computation.
I0428 19:42:23.844960 25054 net.cpp:200] pool1 needs backward computation.
I0428 19:42:23.844966 25054 net.cpp:200] conv1 needs backward computation.
I0428 19:42:23.844974 25054 net.cpp:200] pool0 needs backward computation.
I0428 19:42:23.844980 25054 net.cpp:200] conv0 needs backward computation.
I0428 19:42:23.844987 25054 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:23.844995 25054 net.cpp:202] mnist does not need backward computation.
I0428 19:42:23.845000 25054 net.cpp:244] This network produces output accuracy
I0428 19:42:23.845006 25054 net.cpp:244] This network produces output loss
I0428 19:42:23.845036 25054 net.cpp:257] Network initialization done.
I0428 19:42:23.845082 25054 solver.cpp:56] Solver scaffolding done.
I0428 19:42:23.845358 25054 caffe.cpp:248] Starting Optimization
I0428 19:42:23.845366 25054 solver.cpp:273] Solving LeNet
I0428 19:42:23.845369 25054 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:23.845502 25054 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:23.848748 25054 blocking_queue.cpp:49] Waiting for data
I0428 19:42:23.920341 25062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:23.920737 25054 solver.cpp:398]     Test net output #0: accuracy = 0.0526
I0428 19:42:23.920756 25054 solver.cpp:398]     Test net output #1: loss = 2.38571 (* 1 = 2.38571 loss)
I0428 19:42:23.921767 25054 solver.cpp:219] Iteration 0 (0 iter/s, 0.0763577s/100 iters), loss = 2.42357
I0428 19:42:23.921797 25054 solver.cpp:238]     Train net output #0: loss = 2.42357 (* 1 = 2.42357 loss)
I0428 19:42:23.921816 25054 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:24.004575 25054 solver.cpp:219] Iteration 100 (1208.26 iter/s, 0.0827638s/100 iters), loss = 1.559
I0428 19:42:24.004603 25054 solver.cpp:238]     Train net output #0: loss = 1.559 (* 1 = 1.559 loss)
I0428 19:42:24.004628 25054 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:24.075276 25054 solver.cpp:219] Iteration 200 (1415.12 iter/s, 0.0706652s/100 iters), loss = 1.02375
I0428 19:42:24.075305 25054 solver.cpp:238]     Train net output #0: loss = 1.02375 (* 1 = 1.02375 loss)
I0428 19:42:24.075331 25054 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:24.141592 25054 solver.cpp:219] Iteration 300 (1508.81 iter/s, 0.0662773s/100 iters), loss = 1.27606
I0428 19:42:24.141619 25054 solver.cpp:238]     Train net output #0: loss = 1.27606 (* 1 = 1.27606 loss)
I0428 19:42:24.141644 25054 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:24.208350 25054 solver.cpp:219] Iteration 400 (1498.78 iter/s, 0.0667208s/100 iters), loss = 0.758013
I0428 19:42:24.208382 25054 solver.cpp:238]     Train net output #0: loss = 0.758013 (* 1 = 0.758013 loss)
I0428 19:42:24.208415 25054 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:24.275040 25054 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:24.342157 25062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:24.342533 25054 solver.cpp:398]     Test net output #0: accuracy = 0.8244
I0428 19:42:24.342558 25054 solver.cpp:398]     Test net output #1: loss = 0.611391 (* 1 = 0.611391 loss)
I0428 19:42:24.343305 25054 solver.cpp:219] Iteration 500 (741.201 iter/s, 0.134916s/100 iters), loss = 0.545602
I0428 19:42:24.343335 25054 solver.cpp:238]     Train net output #0: loss = 0.545602 (* 1 = 0.545602 loss)
I0428 19:42:24.343353 25054 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:24.424368 25054 solver.cpp:219] Iteration 600 (1234.25 iter/s, 0.0810209s/100 iters), loss = 0.62122
I0428 19:42:24.424398 25054 solver.cpp:238]     Train net output #0: loss = 0.62122 (* 1 = 0.62122 loss)
I0428 19:42:24.424424 25054 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:24.494681 25054 solver.cpp:219] Iteration 700 (1422.96 iter/s, 0.0702761s/100 iters), loss = 0.313203
I0428 19:42:24.494711 25054 solver.cpp:238]     Train net output #0: loss = 0.313203 (* 1 = 0.313203 loss)
I0428 19:42:24.494736 25054 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:24.568140 25054 solver.cpp:219] Iteration 800 (1362.24 iter/s, 0.0734085s/100 iters), loss = 0.345936
I0428 19:42:24.568188 25054 solver.cpp:238]     Train net output #0: loss = 0.345936 (* 1 = 0.345936 loss)
I0428 19:42:24.568207 25054 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:24.645606 25054 solver.cpp:219] Iteration 900 (1291.8 iter/s, 0.0774114s/100 iters), loss = 0.254583
I0428 19:42:24.645642 25054 solver.cpp:238]     Train net output #0: loss = 0.254583 (* 1 = 0.254583 loss)
I0428 19:42:24.645653 25054 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:24.669515 25061 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:24.714097 25054 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:24.714731 25054 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:24.715109 25054 solver.cpp:311] Iteration 1000, loss = 0.187275
I0428 19:42:24.715126 25054 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:24.786808 25062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:24.787291 25054 solver.cpp:398]     Test net output #0: accuracy = 0.9691
I0428 19:42:24.787322 25054 solver.cpp:398]     Test net output #1: loss = 0.104307 (* 1 = 0.104307 loss)
I0428 19:42:24.787335 25054 solver.cpp:316] Optimization Done.
I0428 19:42:24.787346 25054 caffe.cpp:259] Optimization Done.
