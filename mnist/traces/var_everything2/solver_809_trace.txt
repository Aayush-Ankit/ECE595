I0428 19:58:07.216773 28895 caffe.cpp:218] Using GPUs 0
I0428 19:58:07.252558 28895 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:07.753399 28895 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test809.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:07.753536 28895 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test809.prototxt
I0428 19:58:07.753949 28895 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:07.753968 28895 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:07.754068 28895 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:07.754144 28895 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:07.754236 28895 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:07.754261 28895 net.cpp:86] Creating Layer mnist
I0428 19:58:07.754267 28895 net.cpp:382] mnist -> data
I0428 19:58:07.754289 28895 net.cpp:382] mnist -> label
I0428 19:58:07.755342 28895 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:07.757895 28895 net.cpp:124] Setting up mnist
I0428 19:58:07.757912 28895 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:07.757920 28895 net.cpp:131] Top shape: 64 (64)
I0428 19:58:07.757923 28895 net.cpp:139] Memory required for data: 200960
I0428 19:58:07.757930 28895 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:07.757946 28895 net.cpp:86] Creating Layer conv0
I0428 19:58:07.757964 28895 net.cpp:408] conv0 <- data
I0428 19:58:07.757977 28895 net.cpp:382] conv0 -> conv0
I0428 19:58:08.028951 28895 net.cpp:124] Setting up conv0
I0428 19:58:08.028993 28895 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:08.028997 28895 net.cpp:139] Memory required for data: 1675520
I0428 19:58:08.029026 28895 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:08.029039 28895 net.cpp:86] Creating Layer pool0
I0428 19:58:08.029043 28895 net.cpp:408] pool0 <- conv0
I0428 19:58:08.029049 28895 net.cpp:382] pool0 -> pool0
I0428 19:58:08.029098 28895 net.cpp:124] Setting up pool0
I0428 19:58:08.029104 28895 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:08.029108 28895 net.cpp:139] Memory required for data: 2044160
I0428 19:58:08.029110 28895 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:08.029122 28895 net.cpp:86] Creating Layer conv1
I0428 19:58:08.029125 28895 net.cpp:408] conv1 <- pool0
I0428 19:58:08.029145 28895 net.cpp:382] conv1 -> conv1
I0428 19:58:08.032148 28895 net.cpp:124] Setting up conv1
I0428 19:58:08.032162 28895 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:08.032166 28895 net.cpp:139] Memory required for data: 2126080
I0428 19:58:08.032191 28895 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:08.032198 28895 net.cpp:86] Creating Layer pool1
I0428 19:58:08.032202 28895 net.cpp:408] pool1 <- conv1
I0428 19:58:08.032205 28895 net.cpp:382] pool1 -> pool1
I0428 19:58:08.032243 28895 net.cpp:124] Setting up pool1
I0428 19:58:08.032249 28895 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:08.032253 28895 net.cpp:139] Memory required for data: 2146560
I0428 19:58:08.032255 28895 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:08.032263 28895 net.cpp:86] Creating Layer ip1
I0428 19:58:08.032265 28895 net.cpp:408] ip1 <- pool1
I0428 19:58:08.032270 28895 net.cpp:382] ip1 -> ip1
I0428 19:58:08.032392 28895 net.cpp:124] Setting up ip1
I0428 19:58:08.032397 28895 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:08.032400 28895 net.cpp:139] Memory required for data: 2152960
I0428 19:58:08.032407 28895 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:08.032413 28895 net.cpp:86] Creating Layer relu1
I0428 19:58:08.032416 28895 net.cpp:408] relu1 <- ip1
I0428 19:58:08.032420 28895 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:08.032582 28895 net.cpp:124] Setting up relu1
I0428 19:58:08.032591 28895 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:08.032594 28895 net.cpp:139] Memory required for data: 2159360
I0428 19:58:08.032596 28895 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:08.032603 28895 net.cpp:86] Creating Layer ip2
I0428 19:58:08.032606 28895 net.cpp:408] ip2 <- ip1
I0428 19:58:08.032610 28895 net.cpp:382] ip2 -> ip2
I0428 19:58:08.032713 28895 net.cpp:124] Setting up ip2
I0428 19:58:08.032719 28895 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:08.032722 28895 net.cpp:139] Memory required for data: 2172160
I0428 19:58:08.032727 28895 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:08.032733 28895 net.cpp:86] Creating Layer relu2
I0428 19:58:08.032737 28895 net.cpp:408] relu2 <- ip2
I0428 19:58:08.032740 28895 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:08.033568 28895 net.cpp:124] Setting up relu2
I0428 19:58:08.033579 28895 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:08.033598 28895 net.cpp:139] Memory required for data: 2184960
I0428 19:58:08.033601 28895 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:08.033608 28895 net.cpp:86] Creating Layer ip3
I0428 19:58:08.033612 28895 net.cpp:408] ip3 <- ip2
I0428 19:58:08.033619 28895 net.cpp:382] ip3 -> ip3
I0428 19:58:08.033735 28895 net.cpp:124] Setting up ip3
I0428 19:58:08.033741 28895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:08.033745 28895 net.cpp:139] Memory required for data: 2187520
I0428 19:58:08.033751 28895 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:08.033756 28895 net.cpp:86] Creating Layer relu3
I0428 19:58:08.033759 28895 net.cpp:408] relu3 <- ip3
I0428 19:58:08.033779 28895 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:08.033993 28895 net.cpp:124] Setting up relu3
I0428 19:58:08.034003 28895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:08.034005 28895 net.cpp:139] Memory required for data: 2190080
I0428 19:58:08.034008 28895 layer_factory.hpp:77] Creating layer loss
I0428 19:58:08.034014 28895 net.cpp:86] Creating Layer loss
I0428 19:58:08.034018 28895 net.cpp:408] loss <- ip3
I0428 19:58:08.034021 28895 net.cpp:408] loss <- label
I0428 19:58:08.034029 28895 net.cpp:382] loss -> loss
I0428 19:58:08.034045 28895 layer_factory.hpp:77] Creating layer loss
I0428 19:58:08.034324 28895 net.cpp:124] Setting up loss
I0428 19:58:08.034332 28895 net.cpp:131] Top shape: (1)
I0428 19:58:08.034335 28895 net.cpp:134]     with loss weight 1
I0428 19:58:08.034349 28895 net.cpp:139] Memory required for data: 2190084
I0428 19:58:08.034353 28895 net.cpp:200] loss needs backward computation.
I0428 19:58:08.034355 28895 net.cpp:200] relu3 needs backward computation.
I0428 19:58:08.034358 28895 net.cpp:200] ip3 needs backward computation.
I0428 19:58:08.034361 28895 net.cpp:200] relu2 needs backward computation.
I0428 19:58:08.034364 28895 net.cpp:200] ip2 needs backward computation.
I0428 19:58:08.034366 28895 net.cpp:200] relu1 needs backward computation.
I0428 19:58:08.034369 28895 net.cpp:200] ip1 needs backward computation.
I0428 19:58:08.034373 28895 net.cpp:200] pool1 needs backward computation.
I0428 19:58:08.034374 28895 net.cpp:200] conv1 needs backward computation.
I0428 19:58:08.034377 28895 net.cpp:200] pool0 needs backward computation.
I0428 19:58:08.034380 28895 net.cpp:200] conv0 needs backward computation.
I0428 19:58:08.034384 28895 net.cpp:202] mnist does not need backward computation.
I0428 19:58:08.034386 28895 net.cpp:244] This network produces output loss
I0428 19:58:08.034395 28895 net.cpp:257] Network initialization done.
I0428 19:58:08.034785 28895 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test809.prototxt
I0428 19:58:08.034827 28895 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:08.034920 28895 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:08.035017 28895 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:08.035091 28895 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:08.035104 28895 net.cpp:86] Creating Layer mnist
I0428 19:58:08.035109 28895 net.cpp:382] mnist -> data
I0428 19:58:08.035116 28895 net.cpp:382] mnist -> label
I0428 19:58:08.035200 28895 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:08.037248 28895 net.cpp:124] Setting up mnist
I0428 19:58:08.037276 28895 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:08.037282 28895 net.cpp:131] Top shape: 100 (100)
I0428 19:58:08.037286 28895 net.cpp:139] Memory required for data: 314000
I0428 19:58:08.037289 28895 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:08.037325 28895 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:08.037329 28895 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:08.037334 28895 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:08.037340 28895 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:08.037389 28895 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:08.037394 28895 net.cpp:131] Top shape: 100 (100)
I0428 19:58:08.037397 28895 net.cpp:131] Top shape: 100 (100)
I0428 19:58:08.037400 28895 net.cpp:139] Memory required for data: 314800
I0428 19:58:08.037402 28895 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:08.037411 28895 net.cpp:86] Creating Layer conv0
I0428 19:58:08.037415 28895 net.cpp:408] conv0 <- data
I0428 19:58:08.037420 28895 net.cpp:382] conv0 -> conv0
I0428 19:58:08.039096 28895 net.cpp:124] Setting up conv0
I0428 19:58:08.039109 28895 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:08.039113 28895 net.cpp:139] Memory required for data: 2618800
I0428 19:58:08.039121 28895 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:08.039144 28895 net.cpp:86] Creating Layer pool0
I0428 19:58:08.039147 28895 net.cpp:408] pool0 <- conv0
I0428 19:58:08.039152 28895 net.cpp:382] pool0 -> pool0
I0428 19:58:08.039187 28895 net.cpp:124] Setting up pool0
I0428 19:58:08.039192 28895 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:08.039196 28895 net.cpp:139] Memory required for data: 3194800
I0428 19:58:08.039198 28895 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:08.039206 28895 net.cpp:86] Creating Layer conv1
I0428 19:58:08.039211 28895 net.cpp:408] conv1 <- pool0
I0428 19:58:08.039216 28895 net.cpp:382] conv1 -> conv1
I0428 19:58:08.041415 28895 net.cpp:124] Setting up conv1
I0428 19:58:08.041429 28895 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:08.041432 28895 net.cpp:139] Memory required for data: 3322800
I0428 19:58:08.041440 28895 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:08.041447 28895 net.cpp:86] Creating Layer pool1
I0428 19:58:08.041450 28895 net.cpp:408] pool1 <- conv1
I0428 19:58:08.041471 28895 net.cpp:382] pool1 -> pool1
I0428 19:58:08.041508 28895 net.cpp:124] Setting up pool1
I0428 19:58:08.041513 28895 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:08.041517 28895 net.cpp:139] Memory required for data: 3354800
I0428 19:58:08.041519 28895 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:08.041527 28895 net.cpp:86] Creating Layer ip1
I0428 19:58:08.041537 28895 net.cpp:408] ip1 <- pool1
I0428 19:58:08.041546 28895 net.cpp:382] ip1 -> ip1
I0428 19:58:08.041684 28895 net.cpp:124] Setting up ip1
I0428 19:58:08.041692 28895 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:08.041704 28895 net.cpp:139] Memory required for data: 3364800
I0428 19:58:08.041712 28895 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:08.041718 28895 net.cpp:86] Creating Layer relu1
I0428 19:58:08.041721 28895 net.cpp:408] relu1 <- ip1
I0428 19:58:08.041725 28895 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:08.041997 28895 net.cpp:124] Setting up relu1
I0428 19:58:08.042006 28895 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:08.042016 28895 net.cpp:139] Memory required for data: 3374800
I0428 19:58:08.042019 28895 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:08.042028 28895 net.cpp:86] Creating Layer ip2
I0428 19:58:08.042032 28895 net.cpp:408] ip2 <- ip1
I0428 19:58:08.042044 28895 net.cpp:382] ip2 -> ip2
I0428 19:58:08.042167 28895 net.cpp:124] Setting up ip2
I0428 19:58:08.042174 28895 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:08.042176 28895 net.cpp:139] Memory required for data: 3394800
I0428 19:58:08.042182 28895 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:08.042186 28895 net.cpp:86] Creating Layer relu2
I0428 19:58:08.042194 28895 net.cpp:408] relu2 <- ip2
I0428 19:58:08.042198 28895 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:08.042348 28895 net.cpp:124] Setting up relu2
I0428 19:58:08.042356 28895 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:08.042359 28895 net.cpp:139] Memory required for data: 3414800
I0428 19:58:08.042362 28895 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:08.042368 28895 net.cpp:86] Creating Layer ip3
I0428 19:58:08.042371 28895 net.cpp:408] ip3 <- ip2
I0428 19:58:08.042376 28895 net.cpp:382] ip3 -> ip3
I0428 19:58:08.042474 28895 net.cpp:124] Setting up ip3
I0428 19:58:08.042481 28895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:08.042498 28895 net.cpp:139] Memory required for data: 3418800
I0428 19:58:08.042505 28895 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:08.042510 28895 net.cpp:86] Creating Layer relu3
I0428 19:58:08.042512 28895 net.cpp:408] relu3 <- ip3
I0428 19:58:08.042516 28895 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:08.043349 28895 net.cpp:124] Setting up relu3
I0428 19:58:08.043361 28895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:08.043365 28895 net.cpp:139] Memory required for data: 3422800
I0428 19:58:08.043370 28895 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:08.043375 28895 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:08.043378 28895 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:08.043385 28895 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:08.043391 28895 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:08.043499 28895 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:08.043506 28895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:08.043515 28895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:08.043517 28895 net.cpp:139] Memory required for data: 3430800
I0428 19:58:08.043520 28895 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:08.043531 28895 net.cpp:86] Creating Layer accuracy
I0428 19:58:08.043534 28895 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:08.043539 28895 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:08.043550 28895 net.cpp:382] accuracy -> accuracy
I0428 19:58:08.043556 28895 net.cpp:124] Setting up accuracy
I0428 19:58:08.043565 28895 net.cpp:131] Top shape: (1)
I0428 19:58:08.043568 28895 net.cpp:139] Memory required for data: 3430804
I0428 19:58:08.043570 28895 layer_factory.hpp:77] Creating layer loss
I0428 19:58:08.043576 28895 net.cpp:86] Creating Layer loss
I0428 19:58:08.043578 28895 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:08.043587 28895 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:08.043591 28895 net.cpp:382] loss -> loss
I0428 19:58:08.043596 28895 layer_factory.hpp:77] Creating layer loss
I0428 19:58:08.043843 28895 net.cpp:124] Setting up loss
I0428 19:58:08.043853 28895 net.cpp:131] Top shape: (1)
I0428 19:58:08.043856 28895 net.cpp:134]     with loss weight 1
I0428 19:58:08.043877 28895 net.cpp:139] Memory required for data: 3430808
I0428 19:58:08.043890 28895 net.cpp:200] loss needs backward computation.
I0428 19:58:08.043895 28895 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:08.043898 28895 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:08.043901 28895 net.cpp:200] relu3 needs backward computation.
I0428 19:58:08.043905 28895 net.cpp:200] ip3 needs backward computation.
I0428 19:58:08.043907 28895 net.cpp:200] relu2 needs backward computation.
I0428 19:58:08.043933 28895 net.cpp:200] ip2 needs backward computation.
I0428 19:58:08.043936 28895 net.cpp:200] relu1 needs backward computation.
I0428 19:58:08.043939 28895 net.cpp:200] ip1 needs backward computation.
I0428 19:58:08.043956 28895 net.cpp:200] pool1 needs backward computation.
I0428 19:58:08.043959 28895 net.cpp:200] conv1 needs backward computation.
I0428 19:58:08.043963 28895 net.cpp:200] pool0 needs backward computation.
I0428 19:58:08.043967 28895 net.cpp:200] conv0 needs backward computation.
I0428 19:58:08.043969 28895 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:08.043973 28895 net.cpp:202] mnist does not need backward computation.
I0428 19:58:08.043982 28895 net.cpp:244] This network produces output accuracy
I0428 19:58:08.043985 28895 net.cpp:244] This network produces output loss
I0428 19:58:08.043998 28895 net.cpp:257] Network initialization done.
I0428 19:58:08.044055 28895 solver.cpp:56] Solver scaffolding done.
I0428 19:58:08.044420 28895 caffe.cpp:248] Starting Optimization
I0428 19:58:08.044426 28895 solver.cpp:273] Solving LeNet
I0428 19:58:08.044430 28895 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:08.045290 28895 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:08.048982 28895 blocking_queue.cpp:49] Waiting for data
I0428 19:58:08.121089 28902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:08.121611 28895 solver.cpp:398]     Test net output #0: accuracy = 0.1118
I0428 19:58:08.121631 28895 solver.cpp:398]     Test net output #1: loss = 2.30778 (* 1 = 2.30778 loss)
I0428 19:58:08.124217 28895 solver.cpp:219] Iteration 0 (-1.01874e-42 iter/s, 0.0797603s/100 iters), loss = 2.28604
I0428 19:58:08.124246 28895 solver.cpp:238]     Train net output #0: loss = 2.28604 (* 1 = 2.28604 loss)
I0428 19:58:08.124272 28895 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:08.201905 28895 solver.cpp:219] Iteration 100 (1287.77 iter/s, 0.0776539s/100 iters), loss = 0.395099
I0428 19:58:08.201930 28895 solver.cpp:238]     Train net output #0: loss = 0.395099 (* 1 = 0.395099 loss)
I0428 19:58:08.201936 28895 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:08.280062 28895 solver.cpp:219] Iteration 200 (1280.02 iter/s, 0.078124s/100 iters), loss = 0.254406
I0428 19:58:08.280084 28895 solver.cpp:238]     Train net output #0: loss = 0.254406 (* 1 = 0.254406 loss)
I0428 19:58:08.280105 28895 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:08.356428 28895 solver.cpp:219] Iteration 300 (1310.01 iter/s, 0.0763351s/100 iters), loss = 0.300475
I0428 19:58:08.356451 28895 solver.cpp:238]     Train net output #0: loss = 0.300475 (* 1 = 0.300475 loss)
I0428 19:58:08.356457 28895 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:08.433653 28895 solver.cpp:219] Iteration 400 (1295.47 iter/s, 0.0771922s/100 iters), loss = 0.160508
I0428 19:58:08.433676 28895 solver.cpp:238]     Train net output #0: loss = 0.160508 (* 1 = 0.160508 loss)
I0428 19:58:08.433698 28895 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:08.509618 28895 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:08.563305 28902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:08.563841 28895 solver.cpp:398]     Test net output #0: accuracy = 0.9501
I0428 19:58:08.563861 28895 solver.cpp:398]     Test net output #1: loss = 0.168527 (* 1 = 0.168527 loss)
I0428 19:58:08.564676 28895 solver.cpp:219] Iteration 500 (763.429 iter/s, 0.130988s/100 iters), loss = 0.170908
I0428 19:58:08.564716 28895 solver.cpp:238]     Train net output #0: loss = 0.170908 (* 1 = 0.170908 loss)
I0428 19:58:08.564749 28895 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:08.639789 28895 solver.cpp:219] Iteration 600 (1332.17 iter/s, 0.0750653s/100 iters), loss = 0.0640011
I0428 19:58:08.639812 28895 solver.cpp:238]     Train net output #0: loss = 0.0640011 (* 1 = 0.0640011 loss)
I0428 19:58:08.639834 28895 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:08.714855 28895 solver.cpp:219] Iteration 700 (1332.74 iter/s, 0.0750336s/100 iters), loss = 0.17335
I0428 19:58:08.714880 28895 solver.cpp:238]     Train net output #0: loss = 0.17335 (* 1 = 0.17335 loss)
I0428 19:58:08.714903 28895 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:08.789562 28895 solver.cpp:219] Iteration 800 (1339.18 iter/s, 0.0746723s/100 iters), loss = 0.321661
I0428 19:58:08.789589 28895 solver.cpp:238]     Train net output #0: loss = 0.321661 (* 1 = 0.321661 loss)
I0428 19:58:08.789597 28895 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:08.862557 28895 solver.cpp:219] Iteration 900 (1370.59 iter/s, 0.072961s/100 iters), loss = 0.150944
I0428 19:58:08.862581 28895 solver.cpp:238]     Train net output #0: loss = 0.150944 (* 1 = 0.150944 loss)
I0428 19:58:08.862602 28895 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:08.887063 28901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:08.935426 28895 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:08.936170 28895 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:08.936687 28895 solver.cpp:311] Iteration 1000, loss = 0.143101
I0428 19:58:08.936703 28895 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:09.011646 28902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:09.012168 28895 solver.cpp:398]     Test net output #0: accuracy = 0.9633
I0428 19:58:09.012190 28895 solver.cpp:398]     Test net output #1: loss = 0.11279 (* 1 = 0.11279 loss)
I0428 19:58:09.012197 28895 solver.cpp:316] Optimization Done.
I0428 19:58:09.012199 28895 caffe.cpp:259] Optimization Done.
