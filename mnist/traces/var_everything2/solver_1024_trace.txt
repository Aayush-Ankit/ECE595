I0428 20:06:18.345399 30842 caffe.cpp:218] Using GPUs 0
I0428 20:06:18.373618 30842 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:18.823163 30842 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1024.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:18.823300 30842 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1024.prototxt
I0428 20:06:18.823617 30842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:18.823647 30842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:18.823717 30842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:18.823776 30842 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:18.823858 30842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:18.823879 30842 net.cpp:86] Creating Layer mnist
I0428 20:06:18.823884 30842 net.cpp:382] mnist -> data
I0428 20:06:18.823904 30842 net.cpp:382] mnist -> label
I0428 20:06:18.824959 30842 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:18.827374 30842 net.cpp:124] Setting up mnist
I0428 20:06:18.827420 30842 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:18.827426 30842 net.cpp:131] Top shape: 64 (64)
I0428 20:06:18.827445 30842 net.cpp:139] Memory required for data: 200960
I0428 20:06:18.827452 30842 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:18.827466 30842 net.cpp:86] Creating Layer conv0
I0428 20:06:18.827471 30842 net.cpp:408] conv0 <- data
I0428 20:06:18.827481 30842 net.cpp:382] conv0 -> conv0
I0428 20:06:19.064872 30842 net.cpp:124] Setting up conv0
I0428 20:06:19.064913 30842 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:19.064918 30842 net.cpp:139] Memory required for data: 3887360
I0428 20:06:19.064951 30842 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:19.064980 30842 net.cpp:86] Creating Layer pool0
I0428 20:06:19.064985 30842 net.cpp:408] pool0 <- conv0
I0428 20:06:19.064990 30842 net.cpp:382] pool0 -> pool0
I0428 20:06:19.065038 30842 net.cpp:124] Setting up pool0
I0428 20:06:19.065047 30842 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:19.065050 30842 net.cpp:139] Memory required for data: 4808960
I0428 20:06:19.065053 30842 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:19.065063 30842 net.cpp:86] Creating Layer conv1
I0428 20:06:19.065066 30842 net.cpp:408] conv1 <- pool0
I0428 20:06:19.065071 30842 net.cpp:382] conv1 -> conv1
I0428 20:06:19.067754 30842 net.cpp:124] Setting up conv1
I0428 20:06:19.067782 30842 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:19.067786 30842 net.cpp:139] Memory required for data: 4890880
I0428 20:06:19.067795 30842 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:19.067802 30842 net.cpp:86] Creating Layer pool1
I0428 20:06:19.067806 30842 net.cpp:408] pool1 <- conv1
I0428 20:06:19.067811 30842 net.cpp:382] pool1 -> pool1
I0428 20:06:19.067862 30842 net.cpp:124] Setting up pool1
I0428 20:06:19.067867 30842 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:19.067870 30842 net.cpp:139] Memory required for data: 4911360
I0428 20:06:19.067873 30842 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:19.067880 30842 net.cpp:86] Creating Layer ip1
I0428 20:06:19.067883 30842 net.cpp:408] ip1 <- pool1
I0428 20:06:19.067888 30842 net.cpp:382] ip1 -> ip1
I0428 20:06:19.068003 30842 net.cpp:124] Setting up ip1
I0428 20:06:19.068011 30842 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:06:19.068029 30842 net.cpp:139] Memory required for data: 4924160
I0428 20:06:19.068037 30842 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:19.068042 30842 net.cpp:86] Creating Layer relu1
I0428 20:06:19.068044 30842 net.cpp:408] relu1 <- ip1
I0428 20:06:19.068048 30842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:19.068202 30842 net.cpp:124] Setting up relu1
I0428 20:06:19.068210 30842 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:06:19.068213 30842 net.cpp:139] Memory required for data: 4936960
I0428 20:06:19.068217 30842 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:19.068222 30842 net.cpp:86] Creating Layer ip2
I0428 20:06:19.068225 30842 net.cpp:408] ip2 <- ip1
I0428 20:06:19.068229 30842 net.cpp:382] ip2 -> ip2
I0428 20:06:19.068318 30842 net.cpp:124] Setting up ip2
I0428 20:06:19.068325 30842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:19.068328 30842 net.cpp:139] Memory required for data: 4939520
I0428 20:06:19.068333 30842 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:19.068339 30842 net.cpp:86] Creating Layer relu2
I0428 20:06:19.068342 30842 net.cpp:408] relu2 <- ip2
I0428 20:06:19.068346 30842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:19.069106 30842 net.cpp:124] Setting up relu2
I0428 20:06:19.069120 30842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:19.069139 30842 net.cpp:139] Memory required for data: 4942080
I0428 20:06:19.069142 30842 layer_factory.hpp:77] Creating layer loss
I0428 20:06:19.069160 30842 net.cpp:86] Creating Layer loss
I0428 20:06:19.069164 30842 net.cpp:408] loss <- ip2
I0428 20:06:19.069169 30842 net.cpp:408] loss <- label
I0428 20:06:19.069175 30842 net.cpp:382] loss -> loss
I0428 20:06:19.069195 30842 layer_factory.hpp:77] Creating layer loss
I0428 20:06:19.069427 30842 net.cpp:124] Setting up loss
I0428 20:06:19.069437 30842 net.cpp:131] Top shape: (1)
I0428 20:06:19.069440 30842 net.cpp:134]     with loss weight 1
I0428 20:06:19.069471 30842 net.cpp:139] Memory required for data: 4942084
I0428 20:06:19.069475 30842 net.cpp:200] loss needs backward computation.
I0428 20:06:19.069479 30842 net.cpp:200] relu2 needs backward computation.
I0428 20:06:19.069483 30842 net.cpp:200] ip2 needs backward computation.
I0428 20:06:19.069486 30842 net.cpp:200] relu1 needs backward computation.
I0428 20:06:19.069489 30842 net.cpp:200] ip1 needs backward computation.
I0428 20:06:19.069504 30842 net.cpp:200] pool1 needs backward computation.
I0428 20:06:19.069507 30842 net.cpp:200] conv1 needs backward computation.
I0428 20:06:19.069510 30842 net.cpp:200] pool0 needs backward computation.
I0428 20:06:19.069514 30842 net.cpp:200] conv0 needs backward computation.
I0428 20:06:19.069519 30842 net.cpp:202] mnist does not need backward computation.
I0428 20:06:19.069521 30842 net.cpp:244] This network produces output loss
I0428 20:06:19.069530 30842 net.cpp:257] Network initialization done.
I0428 20:06:19.069871 30842 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1024.prototxt
I0428 20:06:19.069927 30842 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:19.070005 30842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:19.070066 30842 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:19.070112 30842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:19.070149 30842 net.cpp:86] Creating Layer mnist
I0428 20:06:19.070158 30842 net.cpp:382] mnist -> data
I0428 20:06:19.070169 30842 net.cpp:382] mnist -> label
I0428 20:06:19.070273 30842 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:19.072243 30842 net.cpp:124] Setting up mnist
I0428 20:06:19.072273 30842 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:19.072293 30842 net.cpp:131] Top shape: 100 (100)
I0428 20:06:19.072298 30842 net.cpp:139] Memory required for data: 314000
I0428 20:06:19.072300 30842 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:19.072334 30842 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:19.072338 30842 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:19.072345 30842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:19.072355 30842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:19.072454 30842 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:19.072473 30842 net.cpp:131] Top shape: 100 (100)
I0428 20:06:19.072476 30842 net.cpp:131] Top shape: 100 (100)
I0428 20:06:19.072479 30842 net.cpp:139] Memory required for data: 314800
I0428 20:06:19.072482 30842 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:19.072491 30842 net.cpp:86] Creating Layer conv0
I0428 20:06:19.072494 30842 net.cpp:408] conv0 <- data
I0428 20:06:19.072500 30842 net.cpp:382] conv0 -> conv0
I0428 20:06:19.074213 30842 net.cpp:124] Setting up conv0
I0428 20:06:19.074241 30842 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:19.074244 30842 net.cpp:139] Memory required for data: 6074800
I0428 20:06:19.074254 30842 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:19.074277 30842 net.cpp:86] Creating Layer pool0
I0428 20:06:19.074280 30842 net.cpp:408] pool0 <- conv0
I0428 20:06:19.074285 30842 net.cpp:382] pool0 -> pool0
I0428 20:06:19.074319 30842 net.cpp:124] Setting up pool0
I0428 20:06:19.074324 30842 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:19.074327 30842 net.cpp:139] Memory required for data: 7514800
I0428 20:06:19.074331 30842 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:19.074338 30842 net.cpp:86] Creating Layer conv1
I0428 20:06:19.074342 30842 net.cpp:408] conv1 <- pool0
I0428 20:06:19.074347 30842 net.cpp:382] conv1 -> conv1
I0428 20:06:19.076385 30842 net.cpp:124] Setting up conv1
I0428 20:06:19.076412 30842 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:19.076416 30842 net.cpp:139] Memory required for data: 7642800
I0428 20:06:19.076426 30842 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:19.076447 30842 net.cpp:86] Creating Layer pool1
I0428 20:06:19.076450 30842 net.cpp:408] pool1 <- conv1
I0428 20:06:19.076457 30842 net.cpp:382] pool1 -> pool1
I0428 20:06:19.076510 30842 net.cpp:124] Setting up pool1
I0428 20:06:19.076515 30842 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:19.076519 30842 net.cpp:139] Memory required for data: 7674800
I0428 20:06:19.076521 30842 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:19.076529 30842 net.cpp:86] Creating Layer ip1
I0428 20:06:19.076539 30842 net.cpp:408] ip1 <- pool1
I0428 20:06:19.076544 30842 net.cpp:382] ip1 -> ip1
I0428 20:06:19.076660 30842 net.cpp:124] Setting up ip1
I0428 20:06:19.076668 30842 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:06:19.076671 30842 net.cpp:139] Memory required for data: 7694800
I0428 20:06:19.076679 30842 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:19.076690 30842 net.cpp:86] Creating Layer relu1
I0428 20:06:19.076694 30842 net.cpp:408] relu1 <- ip1
I0428 20:06:19.076699 30842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:19.076889 30842 net.cpp:124] Setting up relu1
I0428 20:06:19.076902 30842 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:06:19.076907 30842 net.cpp:139] Memory required for data: 7714800
I0428 20:06:19.076910 30842 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:19.076918 30842 net.cpp:86] Creating Layer ip2
I0428 20:06:19.076930 30842 net.cpp:408] ip2 <- ip1
I0428 20:06:19.076934 30842 net.cpp:382] ip2 -> ip2
I0428 20:06:19.077046 30842 net.cpp:124] Setting up ip2
I0428 20:06:19.077055 30842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:19.077059 30842 net.cpp:139] Memory required for data: 7718800
I0428 20:06:19.077064 30842 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:19.077070 30842 net.cpp:86] Creating Layer relu2
I0428 20:06:19.077074 30842 net.cpp:408] relu2 <- ip2
I0428 20:06:19.077078 30842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:19.077255 30842 net.cpp:124] Setting up relu2
I0428 20:06:19.077267 30842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:19.077270 30842 net.cpp:139] Memory required for data: 7722800
I0428 20:06:19.077273 30842 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:06:19.077278 30842 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:06:19.077281 30842 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:06:19.077286 30842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:06:19.077302 30842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:06:19.077338 30842 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:06:19.077345 30842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:19.077349 30842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:19.077359 30842 net.cpp:139] Memory required for data: 7730800
I0428 20:06:19.077363 30842 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:19.077366 30842 net.cpp:86] Creating Layer accuracy
I0428 20:06:19.077370 30842 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:06:19.077374 30842 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:19.077378 30842 net.cpp:382] accuracy -> accuracy
I0428 20:06:19.077384 30842 net.cpp:124] Setting up accuracy
I0428 20:06:19.077389 30842 net.cpp:131] Top shape: (1)
I0428 20:06:19.077391 30842 net.cpp:139] Memory required for data: 7730804
I0428 20:06:19.077394 30842 layer_factory.hpp:77] Creating layer loss
I0428 20:06:19.077399 30842 net.cpp:86] Creating Layer loss
I0428 20:06:19.077400 30842 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:06:19.077404 30842 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:19.077409 30842 net.cpp:382] loss -> loss
I0428 20:06:19.077414 30842 layer_factory.hpp:77] Creating layer loss
I0428 20:06:19.077674 30842 net.cpp:124] Setting up loss
I0428 20:06:19.077685 30842 net.cpp:131] Top shape: (1)
I0428 20:06:19.077688 30842 net.cpp:134]     with loss weight 1
I0428 20:06:19.077697 30842 net.cpp:139] Memory required for data: 7730808
I0428 20:06:19.077700 30842 net.cpp:200] loss needs backward computation.
I0428 20:06:19.077704 30842 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:19.077708 30842 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:06:19.077713 30842 net.cpp:200] relu2 needs backward computation.
I0428 20:06:19.077715 30842 net.cpp:200] ip2 needs backward computation.
I0428 20:06:19.077718 30842 net.cpp:200] relu1 needs backward computation.
I0428 20:06:19.077721 30842 net.cpp:200] ip1 needs backward computation.
I0428 20:06:19.077724 30842 net.cpp:200] pool1 needs backward computation.
I0428 20:06:19.077728 30842 net.cpp:200] conv1 needs backward computation.
I0428 20:06:19.077733 30842 net.cpp:200] pool0 needs backward computation.
I0428 20:06:19.077735 30842 net.cpp:200] conv0 needs backward computation.
I0428 20:06:19.077746 30842 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:19.077750 30842 net.cpp:202] mnist does not need backward computation.
I0428 20:06:19.077754 30842 net.cpp:244] This network produces output accuracy
I0428 20:06:19.077757 30842 net.cpp:244] This network produces output loss
I0428 20:06:19.077767 30842 net.cpp:257] Network initialization done.
I0428 20:06:19.077805 30842 solver.cpp:56] Solver scaffolding done.
I0428 20:06:19.078063 30842 caffe.cpp:248] Starting Optimization
I0428 20:06:19.078069 30842 solver.cpp:273] Solving LeNet
I0428 20:06:19.078073 30842 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:19.078872 30842 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:19.083849 30842 blocking_queue.cpp:49] Waiting for data
I0428 20:06:19.154945 30849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:19.155503 30842 solver.cpp:398]     Test net output #0: accuracy = 0.1461
I0428 20:06:19.155539 30842 solver.cpp:398]     Test net output #1: loss = 2.39756 (* 1 = 2.39756 loss)
I0428 20:06:19.159037 30842 solver.cpp:219] Iteration 0 (0 iter/s, 0.0809411s/100 iters), loss = 2.41261
I0428 20:06:19.159075 30842 solver.cpp:238]     Train net output #0: loss = 2.41261 (* 1 = 2.41261 loss)
I0428 20:06:19.159086 30842 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:19.253689 30842 solver.cpp:219] Iteration 100 (1057.04 iter/s, 0.0946036s/100 iters), loss = 0.840811
I0428 20:06:19.253715 30842 solver.cpp:238]     Train net output #0: loss = 0.840811 (* 1 = 0.840811 loss)
I0428 20:06:19.253734 30842 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:19.336895 30842 solver.cpp:219] Iteration 200 (1202.32 iter/s, 0.0831724s/100 iters), loss = 0.290193
I0428 20:06:19.336932 30842 solver.cpp:238]     Train net output #0: loss = 0.290193 (* 1 = 0.290193 loss)
I0428 20:06:19.336940 30842 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:19.428046 30842 solver.cpp:219] Iteration 300 (1097.62 iter/s, 0.0911063s/100 iters), loss = 0.245194
I0428 20:06:19.428072 30842 solver.cpp:238]     Train net output #0: loss = 0.245194 (* 1 = 0.245194 loss)
I0428 20:06:19.428078 30842 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:19.515835 30842 solver.cpp:219] Iteration 400 (1139.57 iter/s, 0.0877527s/100 iters), loss = 0.142437
I0428 20:06:19.515858 30842 solver.cpp:238]     Train net output #0: loss = 0.142437 (* 1 = 0.142437 loss)
I0428 20:06:19.515882 30842 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:19.594954 30842 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:19.671378 30849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:19.671963 30842 solver.cpp:398]     Test net output #0: accuracy = 0.9564
I0428 20:06:19.671998 30842 solver.cpp:398]     Test net output #1: loss = 0.146809 (* 1 = 0.146809 loss)
I0428 20:06:19.672899 30842 solver.cpp:219] Iteration 500 (636.832 iter/s, 0.157027s/100 iters), loss = 0.199065
I0428 20:06:19.672937 30842 solver.cpp:238]     Train net output #0: loss = 0.199065 (* 1 = 0.199065 loss)
I0428 20:06:19.672943 30842 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:19.765792 30842 solver.cpp:219] Iteration 600 (1076.9 iter/s, 0.0928594s/100 iters), loss = 0.120484
I0428 20:06:19.765832 30842 solver.cpp:238]     Train net output #0: loss = 0.120484 (* 1 = 0.120484 loss)
I0428 20:06:19.765839 30842 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:19.848702 30842 solver.cpp:219] Iteration 700 (1206.62 iter/s, 0.0828764s/100 iters), loss = 0.241111
I0428 20:06:19.848742 30842 solver.cpp:238]     Train net output #0: loss = 0.241111 (* 1 = 0.241111 loss)
I0428 20:06:19.848748 30842 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:19.931361 30842 solver.cpp:219] Iteration 800 (1210.5 iter/s, 0.0826103s/100 iters), loss = 0.286221
I0428 20:06:19.931385 30842 solver.cpp:238]     Train net output #0: loss = 0.286222 (* 1 = 0.286222 loss)
I0428 20:06:19.931391 30842 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:20.012769 30842 solver.cpp:219] Iteration 900 (1228.89 iter/s, 0.0813742s/100 iters), loss = 0.0883752
I0428 20:06:20.012807 30842 solver.cpp:238]     Train net output #0: loss = 0.0883752 (* 1 = 0.0883752 loss)
I0428 20:06:20.012820 30842 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:20.040268 30848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:20.093796 30842 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:20.094516 30842 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:20.095023 30842 solver.cpp:311] Iteration 1000, loss = 0.0667802
I0428 20:06:20.095037 30842 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:20.170559 30849 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:20.171142 30842 solver.cpp:398]     Test net output #0: accuracy = 0.9721
I0428 20:06:20.171176 30842 solver.cpp:398]     Test net output #1: loss = 0.0911138 (* 1 = 0.0911138 loss)
I0428 20:06:20.171181 30842 solver.cpp:316] Optimization Done.
I0428 20:06:20.171185 30842 caffe.cpp:259] Optimization Done.
