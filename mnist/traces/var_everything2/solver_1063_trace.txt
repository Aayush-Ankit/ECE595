I0428 20:07:42.333555 31166 caffe.cpp:218] Using GPUs 0
I0428 20:07:42.370347 31166 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:07:42.828287 31166 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1063.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:07:42.828450 31166 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1063.prototxt
I0428 20:07:42.828758 31166 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:07:42.828773 31166 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:07:42.828881 31166 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:07:42.828963 31166 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:42.829051 31166 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:07:42.829071 31166 net.cpp:86] Creating Layer mnist
I0428 20:07:42.829078 31166 net.cpp:382] mnist -> data
I0428 20:07:42.829097 31166 net.cpp:382] mnist -> label
I0428 20:07:42.830032 31166 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:07:42.832226 31166 net.cpp:124] Setting up mnist
I0428 20:07:42.832254 31166 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:07:42.832259 31166 net.cpp:131] Top shape: 64 (64)
I0428 20:07:42.832262 31166 net.cpp:139] Memory required for data: 200960
I0428 20:07:42.832268 31166 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:42.832306 31166 net.cpp:86] Creating Layer conv0
I0428 20:07:42.832312 31166 net.cpp:408] conv0 <- data
I0428 20:07:42.832324 31166 net.cpp:382] conv0 -> conv0
I0428 20:07:43.059377 31166 net.cpp:124] Setting up conv0
I0428 20:07:43.059403 31166 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:07:43.059407 31166 net.cpp:139] Memory required for data: 3887360
I0428 20:07:43.059440 31166 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:43.059453 31166 net.cpp:86] Creating Layer pool0
I0428 20:07:43.059456 31166 net.cpp:408] pool0 <- conv0
I0428 20:07:43.059478 31166 net.cpp:382] pool0 -> pool0
I0428 20:07:43.059535 31166 net.cpp:124] Setting up pool0
I0428 20:07:43.059541 31166 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:07:43.059545 31166 net.cpp:139] Memory required for data: 4808960
I0428 20:07:43.059547 31166 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:43.059557 31166 net.cpp:86] Creating Layer conv1
I0428 20:07:43.059561 31166 net.cpp:408] conv1 <- pool0
I0428 20:07:43.059566 31166 net.cpp:382] conv1 -> conv1
I0428 20:07:43.062479 31166 net.cpp:124] Setting up conv1
I0428 20:07:43.062507 31166 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:07:43.062511 31166 net.cpp:139] Memory required for data: 4972800
I0428 20:07:43.062520 31166 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:43.062526 31166 net.cpp:86] Creating Layer pool1
I0428 20:07:43.062530 31166 net.cpp:408] pool1 <- conv1
I0428 20:07:43.062535 31166 net.cpp:382] pool1 -> pool1
I0428 20:07:43.062584 31166 net.cpp:124] Setting up pool1
I0428 20:07:43.062590 31166 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:07:43.062592 31166 net.cpp:139] Memory required for data: 5013760
I0428 20:07:43.062595 31166 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:43.062602 31166 net.cpp:86] Creating Layer ip1
I0428 20:07:43.062605 31166 net.cpp:408] ip1 <- pool1
I0428 20:07:43.062609 31166 net.cpp:382] ip1 -> ip1
I0428 20:07:43.062746 31166 net.cpp:124] Setting up ip1
I0428 20:07:43.062753 31166 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:07:43.062757 31166 net.cpp:139] Memory required for data: 5026560
I0428 20:07:43.062763 31166 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:43.062769 31166 net.cpp:86] Creating Layer relu1
I0428 20:07:43.062788 31166 net.cpp:408] relu1 <- ip1
I0428 20:07:43.062793 31166 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:43.062948 31166 net.cpp:124] Setting up relu1
I0428 20:07:43.062957 31166 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:07:43.062960 31166 net.cpp:139] Memory required for data: 5039360
I0428 20:07:43.062963 31166 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:43.062969 31166 net.cpp:86] Creating Layer ip2
I0428 20:07:43.062973 31166 net.cpp:408] ip2 <- ip1
I0428 20:07:43.062978 31166 net.cpp:382] ip2 -> ip2
I0428 20:07:43.063066 31166 net.cpp:124] Setting up ip2
I0428 20:07:43.063073 31166 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:43.063076 31166 net.cpp:139] Memory required for data: 5041920
I0428 20:07:43.063081 31166 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:43.063087 31166 net.cpp:86] Creating Layer relu2
I0428 20:07:43.063091 31166 net.cpp:408] relu2 <- ip2
I0428 20:07:43.063109 31166 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:43.063812 31166 net.cpp:124] Setting up relu2
I0428 20:07:43.063824 31166 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:43.063843 31166 net.cpp:139] Memory required for data: 5044480
I0428 20:07:43.063846 31166 layer_factory.hpp:77] Creating layer loss
I0428 20:07:43.063853 31166 net.cpp:86] Creating Layer loss
I0428 20:07:43.063855 31166 net.cpp:408] loss <- ip2
I0428 20:07:43.063860 31166 net.cpp:408] loss <- label
I0428 20:07:43.063881 31166 net.cpp:382] loss -> loss
I0428 20:07:43.063901 31166 layer_factory.hpp:77] Creating layer loss
I0428 20:07:43.064133 31166 net.cpp:124] Setting up loss
I0428 20:07:43.064142 31166 net.cpp:131] Top shape: (1)
I0428 20:07:43.064146 31166 net.cpp:134]     with loss weight 1
I0428 20:07:43.064160 31166 net.cpp:139] Memory required for data: 5044484
I0428 20:07:43.064163 31166 net.cpp:200] loss needs backward computation.
I0428 20:07:43.064167 31166 net.cpp:200] relu2 needs backward computation.
I0428 20:07:43.064170 31166 net.cpp:200] ip2 needs backward computation.
I0428 20:07:43.064173 31166 net.cpp:200] relu1 needs backward computation.
I0428 20:07:43.064177 31166 net.cpp:200] ip1 needs backward computation.
I0428 20:07:43.064211 31166 net.cpp:200] pool1 needs backward computation.
I0428 20:07:43.064214 31166 net.cpp:200] conv1 needs backward computation.
I0428 20:07:43.064218 31166 net.cpp:200] pool0 needs backward computation.
I0428 20:07:43.064221 31166 net.cpp:200] conv0 needs backward computation.
I0428 20:07:43.064224 31166 net.cpp:202] mnist does not need backward computation.
I0428 20:07:43.064227 31166 net.cpp:244] This network produces output loss
I0428 20:07:43.064235 31166 net.cpp:257] Network initialization done.
I0428 20:07:43.064519 31166 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1063.prototxt
I0428 20:07:43.064553 31166 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:07:43.064633 31166 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:07:43.064692 31166 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:43.064735 31166 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:07:43.064748 31166 net.cpp:86] Creating Layer mnist
I0428 20:07:43.064752 31166 net.cpp:382] mnist -> data
I0428 20:07:43.064759 31166 net.cpp:382] mnist -> label
I0428 20:07:43.064853 31166 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:07:43.066916 31166 net.cpp:124] Setting up mnist
I0428 20:07:43.066961 31166 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:07:43.066965 31166 net.cpp:131] Top shape: 100 (100)
I0428 20:07:43.066968 31166 net.cpp:139] Memory required for data: 314000
I0428 20:07:43.066972 31166 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:07:43.066998 31166 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:07:43.067003 31166 net.cpp:408] label_mnist_1_split <- label
I0428 20:07:43.067008 31166 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:07:43.067014 31166 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:07:43.067111 31166 net.cpp:124] Setting up label_mnist_1_split
I0428 20:07:43.067119 31166 net.cpp:131] Top shape: 100 (100)
I0428 20:07:43.067123 31166 net.cpp:131] Top shape: 100 (100)
I0428 20:07:43.067126 31166 net.cpp:139] Memory required for data: 314800
I0428 20:07:43.067145 31166 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:43.067170 31166 net.cpp:86] Creating Layer conv0
I0428 20:07:43.067173 31166 net.cpp:408] conv0 <- data
I0428 20:07:43.067178 31166 net.cpp:382] conv0 -> conv0
I0428 20:07:43.068948 31166 net.cpp:124] Setting up conv0
I0428 20:07:43.068961 31166 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:07:43.068965 31166 net.cpp:139] Memory required for data: 6074800
I0428 20:07:43.068974 31166 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:43.068981 31166 net.cpp:86] Creating Layer pool0
I0428 20:07:43.069000 31166 net.cpp:408] pool0 <- conv0
I0428 20:07:43.069005 31166 net.cpp:382] pool0 -> pool0
I0428 20:07:43.069041 31166 net.cpp:124] Setting up pool0
I0428 20:07:43.069046 31166 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:07:43.069051 31166 net.cpp:139] Memory required for data: 7514800
I0428 20:07:43.069053 31166 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:43.069061 31166 net.cpp:86] Creating Layer conv1
I0428 20:07:43.069064 31166 net.cpp:408] conv1 <- pool0
I0428 20:07:43.069069 31166 net.cpp:382] conv1 -> conv1
I0428 20:07:43.071173 31166 net.cpp:124] Setting up conv1
I0428 20:07:43.071202 31166 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:07:43.071207 31166 net.cpp:139] Memory required for data: 7770800
I0428 20:07:43.071230 31166 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:43.071236 31166 net.cpp:86] Creating Layer pool1
I0428 20:07:43.071240 31166 net.cpp:408] pool1 <- conv1
I0428 20:07:43.071245 31166 net.cpp:382] pool1 -> pool1
I0428 20:07:43.071300 31166 net.cpp:124] Setting up pool1
I0428 20:07:43.071305 31166 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:07:43.071307 31166 net.cpp:139] Memory required for data: 7834800
I0428 20:07:43.071310 31166 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:43.071317 31166 net.cpp:86] Creating Layer ip1
I0428 20:07:43.071321 31166 net.cpp:408] ip1 <- pool1
I0428 20:07:43.071326 31166 net.cpp:382] ip1 -> ip1
I0428 20:07:43.071470 31166 net.cpp:124] Setting up ip1
I0428 20:07:43.071477 31166 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:07:43.071480 31166 net.cpp:139] Memory required for data: 7854800
I0428 20:07:43.071487 31166 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:43.071492 31166 net.cpp:86] Creating Layer relu1
I0428 20:07:43.071496 31166 net.cpp:408] relu1 <- ip1
I0428 20:07:43.071499 31166 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:43.071770 31166 net.cpp:124] Setting up relu1
I0428 20:07:43.071796 31166 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:07:43.071800 31166 net.cpp:139] Memory required for data: 7874800
I0428 20:07:43.071805 31166 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:43.071812 31166 net.cpp:86] Creating Layer ip2
I0428 20:07:43.071816 31166 net.cpp:408] ip2 <- ip1
I0428 20:07:43.071822 31166 net.cpp:382] ip2 -> ip2
I0428 20:07:43.071933 31166 net.cpp:124] Setting up ip2
I0428 20:07:43.071940 31166 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:43.071944 31166 net.cpp:139] Memory required for data: 7878800
I0428 20:07:43.071949 31166 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:43.071954 31166 net.cpp:86] Creating Layer relu2
I0428 20:07:43.071959 31166 net.cpp:408] relu2 <- ip2
I0428 20:07:43.071964 31166 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:43.072150 31166 net.cpp:124] Setting up relu2
I0428 20:07:43.072172 31166 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:43.072175 31166 net.cpp:139] Memory required for data: 7882800
I0428 20:07:43.072178 31166 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:07:43.072182 31166 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:07:43.072185 31166 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:07:43.072190 31166 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:07:43.072206 31166 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:07:43.072240 31166 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:07:43.072249 31166 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:43.072254 31166 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:43.072257 31166 net.cpp:139] Memory required for data: 7890800
I0428 20:07:43.072260 31166 layer_factory.hpp:77] Creating layer accuracy
I0428 20:07:43.072271 31166 net.cpp:86] Creating Layer accuracy
I0428 20:07:43.072274 31166 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:07:43.072279 31166 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:07:43.072284 31166 net.cpp:382] accuracy -> accuracy
I0428 20:07:43.072301 31166 net.cpp:124] Setting up accuracy
I0428 20:07:43.072311 31166 net.cpp:131] Top shape: (1)
I0428 20:07:43.072314 31166 net.cpp:139] Memory required for data: 7890804
I0428 20:07:43.072319 31166 layer_factory.hpp:77] Creating layer loss
I0428 20:07:43.072329 31166 net.cpp:86] Creating Layer loss
I0428 20:07:43.072331 31166 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:07:43.072336 31166 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:07:43.072345 31166 net.cpp:382] loss -> loss
I0428 20:07:43.072351 31166 layer_factory.hpp:77] Creating layer loss
I0428 20:07:43.072594 31166 net.cpp:124] Setting up loss
I0428 20:07:43.072603 31166 net.cpp:131] Top shape: (1)
I0428 20:07:43.072613 31166 net.cpp:134]     with loss weight 1
I0428 20:07:43.072618 31166 net.cpp:139] Memory required for data: 7890808
I0428 20:07:43.072623 31166 net.cpp:200] loss needs backward computation.
I0428 20:07:43.072626 31166 net.cpp:202] accuracy does not need backward computation.
I0428 20:07:43.072630 31166 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:07:43.072649 31166 net.cpp:200] relu2 needs backward computation.
I0428 20:07:43.072652 31166 net.cpp:200] ip2 needs backward computation.
I0428 20:07:43.072655 31166 net.cpp:200] relu1 needs backward computation.
I0428 20:07:43.072659 31166 net.cpp:200] ip1 needs backward computation.
I0428 20:07:43.072662 31166 net.cpp:200] pool1 needs backward computation.
I0428 20:07:43.072666 31166 net.cpp:200] conv1 needs backward computation.
I0428 20:07:43.072669 31166 net.cpp:200] pool0 needs backward computation.
I0428 20:07:43.072672 31166 net.cpp:200] conv0 needs backward computation.
I0428 20:07:43.072676 31166 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:07:43.072679 31166 net.cpp:202] mnist does not need backward computation.
I0428 20:07:43.072682 31166 net.cpp:244] This network produces output accuracy
I0428 20:07:43.072685 31166 net.cpp:244] This network produces output loss
I0428 20:07:43.072695 31166 net.cpp:257] Network initialization done.
I0428 20:07:43.072733 31166 solver.cpp:56] Solver scaffolding done.
I0428 20:07:43.073132 31166 caffe.cpp:248] Starting Optimization
I0428 20:07:43.073137 31166 solver.cpp:273] Solving LeNet
I0428 20:07:43.073140 31166 solver.cpp:274] Learning Rate Policy: inv
I0428 20:07:43.073902 31166 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:07:43.078865 31166 blocking_queue.cpp:49] Waiting for data
I0428 20:07:43.149132 31173 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:43.149746 31166 solver.cpp:398]     Test net output #0: accuracy = 0.099
I0428 20:07:43.149781 31166 solver.cpp:398]     Test net output #1: loss = 2.32106 (* 1 = 2.32106 loss)
I0428 20:07:43.153404 31166 solver.cpp:219] Iteration 0 (0 iter/s, 0.0802246s/100 iters), loss = 2.32408
I0428 20:07:43.153441 31166 solver.cpp:238]     Train net output #0: loss = 2.32408 (* 1 = 2.32408 loss)
I0428 20:07:43.153452 31166 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:07:43.239426 31166 solver.cpp:219] Iteration 100 (1163.1 iter/s, 0.0859771s/100 iters), loss = 0.788593
I0428 20:07:43.239465 31166 solver.cpp:238]     Train net output #0: loss = 0.788593 (* 1 = 0.788593 loss)
I0428 20:07:43.239471 31166 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:07:43.324400 31166 solver.cpp:219] Iteration 200 (1177.29 iter/s, 0.0849408s/100 iters), loss = 0.416926
I0428 20:07:43.324450 31166 solver.cpp:238]     Train net output #0: loss = 0.416926 (* 1 = 0.416926 loss)
I0428 20:07:43.324457 31166 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:07:43.409886 31166 solver.cpp:219] Iteration 300 (1170.36 iter/s, 0.0854435s/100 iters), loss = 0.267075
I0428 20:07:43.409924 31166 solver.cpp:238]     Train net output #0: loss = 0.267075 (* 1 = 0.267075 loss)
I0428 20:07:43.409930 31166 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:07:43.494818 31166 solver.cpp:219] Iteration 400 (1178.07 iter/s, 0.0848846s/100 iters), loss = 0.233955
I0428 20:07:43.494843 31166 solver.cpp:238]     Train net output #0: loss = 0.233955 (* 1 = 0.233955 loss)
I0428 20:07:43.494848 31166 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:07:43.578686 31166 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:07:43.628623 31173 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:43.629453 31166 solver.cpp:398]     Test net output #0: accuracy = 0.8501
I0428 20:07:43.629489 31166 solver.cpp:398]     Test net output #1: loss = 0.387723 (* 1 = 0.387723 loss)
I0428 20:07:43.630345 31166 solver.cpp:219] Iteration 500 (738.052 iter/s, 0.135492s/100 iters), loss = 0.441638
I0428 20:07:43.630398 31166 solver.cpp:238]     Train net output #0: loss = 0.441638 (* 1 = 0.441638 loss)
I0428 20:07:43.630405 31166 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:07:43.714448 31166 solver.cpp:219] Iteration 600 (1189.86 iter/s, 0.0840435s/100 iters), loss = 0.503619
I0428 20:07:43.714488 31166 solver.cpp:238]     Train net output #0: loss = 0.503619 (* 1 = 0.503619 loss)
I0428 20:07:43.714493 31166 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:07:43.798643 31166 solver.cpp:219] Iteration 700 (1188.18 iter/s, 0.0841626s/100 iters), loss = 0.417829
I0428 20:07:43.798682 31166 solver.cpp:238]     Train net output #0: loss = 0.417829 (* 1 = 0.417829 loss)
I0428 20:07:43.798688 31166 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:07:43.882573 31166 solver.cpp:219] Iteration 800 (1191.93 iter/s, 0.0838974s/100 iters), loss = 0.470654
I0428 20:07:43.882612 31166 solver.cpp:238]     Train net output #0: loss = 0.470654 (* 1 = 0.470654 loss)
I0428 20:07:43.882617 31166 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:07:43.967042 31166 solver.cpp:219] Iteration 900 (1184.32 iter/s, 0.0844368s/100 iters), loss = 0.476872
I0428 20:07:43.967080 31166 solver.cpp:238]     Train net output #0: loss = 0.476872 (* 1 = 0.476872 loss)
I0428 20:07:43.967085 31166 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:07:43.995319 31172 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:44.049568 31166 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:07:44.050422 31166 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:07:44.051018 31166 solver.cpp:311] Iteration 1000, loss = 0.431293
I0428 20:07:44.051034 31166 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:07:44.099406 31173 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:44.100126 31166 solver.cpp:398]     Test net output #0: accuracy = 0.865
I0428 20:07:44.100142 31166 solver.cpp:398]     Test net output #1: loss = 0.337092 (* 1 = 0.337092 loss)
I0428 20:07:44.100163 31166 solver.cpp:316] Optimization Done.
I0428 20:07:44.100167 31166 caffe.cpp:259] Optimization Done.
