I0428 19:39:20.207456 24272 caffe.cpp:218] Using GPUs 0
I0428 19:39:20.246279 24272 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:20.757259 24272 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test301.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:20.757392 24272 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test301.prototxt
I0428 19:39:20.757804 24272 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:20.757825 24272 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:20.757925 24272 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:39:20.758007 24272 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:20.758101 24272 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:20.758124 24272 net.cpp:86] Creating Layer mnist
I0428 19:39:20.758133 24272 net.cpp:382] mnist -> data
I0428 19:39:20.758157 24272 net.cpp:382] mnist -> label
I0428 19:39:20.759253 24272 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:20.761729 24272 net.cpp:124] Setting up mnist
I0428 19:39:20.761749 24272 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:20.761754 24272 net.cpp:131] Top shape: 64 (64)
I0428 19:39:20.761757 24272 net.cpp:139] Memory required for data: 200960
I0428 19:39:20.761765 24272 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:20.761793 24272 net.cpp:86] Creating Layer conv0
I0428 19:39:20.761816 24272 net.cpp:408] conv0 <- data
I0428 19:39:20.761828 24272 net.cpp:382] conv0 -> conv0
I0428 19:39:21.052182 24272 net.cpp:124] Setting up conv0
I0428 19:39:21.052211 24272 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:21.052217 24272 net.cpp:139] Memory required for data: 495872
I0428 19:39:21.052232 24272 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:21.052248 24272 net.cpp:86] Creating Layer pool0
I0428 19:39:21.052251 24272 net.cpp:408] pool0 <- conv0
I0428 19:39:21.052258 24272 net.cpp:382] pool0 -> pool0
I0428 19:39:21.052307 24272 net.cpp:124] Setting up pool0
I0428 19:39:21.052312 24272 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:21.052316 24272 net.cpp:139] Memory required for data: 569600
I0428 19:39:21.052320 24272 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:21.052330 24272 net.cpp:86] Creating Layer conv1
I0428 19:39:21.052335 24272 net.cpp:408] conv1 <- pool0
I0428 19:39:21.052340 24272 net.cpp:382] conv1 -> conv1
I0428 19:39:21.054296 24272 net.cpp:124] Setting up conv1
I0428 19:39:21.054313 24272 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:39:21.054317 24272 net.cpp:139] Memory required for data: 602368
I0428 19:39:21.054327 24272 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:21.054334 24272 net.cpp:86] Creating Layer pool1
I0428 19:39:21.054338 24272 net.cpp:408] pool1 <- conv1
I0428 19:39:21.054344 24272 net.cpp:382] pool1 -> pool1
I0428 19:39:21.054385 24272 net.cpp:124] Setting up pool1
I0428 19:39:21.054391 24272 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:39:21.054394 24272 net.cpp:139] Memory required for data: 610560
I0428 19:39:21.054397 24272 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:21.054405 24272 net.cpp:86] Creating Layer ip1
I0428 19:39:21.054409 24272 net.cpp:408] ip1 <- pool1
I0428 19:39:21.054414 24272 net.cpp:382] ip1 -> ip1
I0428 19:39:21.054522 24272 net.cpp:124] Setting up ip1
I0428 19:39:21.054530 24272 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:39:21.054534 24272 net.cpp:139] Memory required for data: 616960
I0428 19:39:21.054541 24272 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:21.054548 24272 net.cpp:86] Creating Layer relu1
I0428 19:39:21.054551 24272 net.cpp:408] relu1 <- ip1
I0428 19:39:21.054555 24272 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:21.054728 24272 net.cpp:124] Setting up relu1
I0428 19:39:21.054738 24272 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:39:21.054740 24272 net.cpp:139] Memory required for data: 623360
I0428 19:39:21.054744 24272 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:21.054750 24272 net.cpp:86] Creating Layer ip2
I0428 19:39:21.054754 24272 net.cpp:408] ip2 <- ip1
I0428 19:39:21.054759 24272 net.cpp:382] ip2 -> ip2
I0428 19:39:21.055748 24272 net.cpp:124] Setting up ip2
I0428 19:39:21.055763 24272 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:39:21.055766 24272 net.cpp:139] Memory required for data: 636160
I0428 19:39:21.055773 24272 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:21.055780 24272 net.cpp:86] Creating Layer relu2
I0428 19:39:21.055783 24272 net.cpp:408] relu2 <- ip2
I0428 19:39:21.055788 24272 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:21.056557 24272 net.cpp:124] Setting up relu2
I0428 19:39:21.056571 24272 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:39:21.056574 24272 net.cpp:139] Memory required for data: 648960
I0428 19:39:21.056578 24272 layer_factory.hpp:77] Creating layer ip3
I0428 19:39:21.056586 24272 net.cpp:86] Creating Layer ip3
I0428 19:39:21.056589 24272 net.cpp:408] ip3 <- ip2
I0428 19:39:21.056596 24272 net.cpp:382] ip3 -> ip3
I0428 19:39:21.056704 24272 net.cpp:124] Setting up ip3
I0428 19:39:21.056711 24272 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:21.056715 24272 net.cpp:139] Memory required for data: 651520
I0428 19:39:21.056723 24272 layer_factory.hpp:77] Creating layer relu3
I0428 19:39:21.056728 24272 net.cpp:86] Creating Layer relu3
I0428 19:39:21.056732 24272 net.cpp:408] relu3 <- ip3
I0428 19:39:21.056736 24272 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:39:21.056928 24272 net.cpp:124] Setting up relu3
I0428 19:39:21.056939 24272 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:21.056942 24272 net.cpp:139] Memory required for data: 654080
I0428 19:39:21.056946 24272 layer_factory.hpp:77] Creating layer loss
I0428 19:39:21.056951 24272 net.cpp:86] Creating Layer loss
I0428 19:39:21.056955 24272 net.cpp:408] loss <- ip3
I0428 19:39:21.056959 24272 net.cpp:408] loss <- label
I0428 19:39:21.056965 24272 net.cpp:382] loss -> loss
I0428 19:39:21.056982 24272 layer_factory.hpp:77] Creating layer loss
I0428 19:39:21.057245 24272 net.cpp:124] Setting up loss
I0428 19:39:21.057255 24272 net.cpp:131] Top shape: (1)
I0428 19:39:21.057258 24272 net.cpp:134]     with loss weight 1
I0428 19:39:21.057273 24272 net.cpp:139] Memory required for data: 654084
I0428 19:39:21.057277 24272 net.cpp:200] loss needs backward computation.
I0428 19:39:21.057281 24272 net.cpp:200] relu3 needs backward computation.
I0428 19:39:21.057284 24272 net.cpp:200] ip3 needs backward computation.
I0428 19:39:21.057287 24272 net.cpp:200] relu2 needs backward computation.
I0428 19:39:21.057291 24272 net.cpp:200] ip2 needs backward computation.
I0428 19:39:21.057292 24272 net.cpp:200] relu1 needs backward computation.
I0428 19:39:21.057296 24272 net.cpp:200] ip1 needs backward computation.
I0428 19:39:21.057298 24272 net.cpp:200] pool1 needs backward computation.
I0428 19:39:21.057301 24272 net.cpp:200] conv1 needs backward computation.
I0428 19:39:21.057306 24272 net.cpp:200] pool0 needs backward computation.
I0428 19:39:21.057308 24272 net.cpp:200] conv0 needs backward computation.
I0428 19:39:21.057312 24272 net.cpp:202] mnist does not need backward computation.
I0428 19:39:21.057315 24272 net.cpp:244] This network produces output loss
I0428 19:39:21.057324 24272 net.cpp:257] Network initialization done.
I0428 19:39:21.057689 24272 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test301.prototxt
I0428 19:39:21.057746 24272 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:21.057837 24272 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:39:21.057919 24272 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:21.057981 24272 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:21.057996 24272 net.cpp:86] Creating Layer mnist
I0428 19:39:21.057999 24272 net.cpp:382] mnist -> data
I0428 19:39:21.058007 24272 net.cpp:382] mnist -> label
I0428 19:39:21.058092 24272 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:21.060011 24272 net.cpp:124] Setting up mnist
I0428 19:39:21.060025 24272 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:21.060030 24272 net.cpp:131] Top shape: 100 (100)
I0428 19:39:21.060034 24272 net.cpp:139] Memory required for data: 314000
I0428 19:39:21.060037 24272 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:21.060048 24272 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:21.060052 24272 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:21.060057 24272 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:21.060065 24272 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:21.060101 24272 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:21.060106 24272 net.cpp:131] Top shape: 100 (100)
I0428 19:39:21.060111 24272 net.cpp:131] Top shape: 100 (100)
I0428 19:39:21.060113 24272 net.cpp:139] Memory required for data: 314800
I0428 19:39:21.060117 24272 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:21.060124 24272 net.cpp:86] Creating Layer conv0
I0428 19:39:21.060127 24272 net.cpp:408] conv0 <- data
I0428 19:39:21.060132 24272 net.cpp:382] conv0 -> conv0
I0428 19:39:21.061931 24272 net.cpp:124] Setting up conv0
I0428 19:39:21.061945 24272 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:21.061949 24272 net.cpp:139] Memory required for data: 775600
I0428 19:39:21.061959 24272 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:21.061965 24272 net.cpp:86] Creating Layer pool0
I0428 19:39:21.061969 24272 net.cpp:408] pool0 <- conv0
I0428 19:39:21.061975 24272 net.cpp:382] pool0 -> pool0
I0428 19:39:21.062011 24272 net.cpp:124] Setting up pool0
I0428 19:39:21.062016 24272 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:21.062019 24272 net.cpp:139] Memory required for data: 890800
I0428 19:39:21.062022 24272 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:21.062031 24272 net.cpp:86] Creating Layer conv1
I0428 19:39:21.062034 24272 net.cpp:408] conv1 <- pool0
I0428 19:39:21.062039 24272 net.cpp:382] conv1 -> conv1
I0428 19:39:21.063555 24272 net.cpp:124] Setting up conv1
I0428 19:39:21.063570 24272 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:39:21.063575 24272 net.cpp:139] Memory required for data: 942000
I0428 19:39:21.063583 24272 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:21.063590 24272 net.cpp:86] Creating Layer pool1
I0428 19:39:21.063593 24272 net.cpp:408] pool1 <- conv1
I0428 19:39:21.063599 24272 net.cpp:382] pool1 -> pool1
I0428 19:39:21.063637 24272 net.cpp:124] Setting up pool1
I0428 19:39:21.063642 24272 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:39:21.063645 24272 net.cpp:139] Memory required for data: 954800
I0428 19:39:21.063648 24272 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:21.063653 24272 net.cpp:86] Creating Layer ip1
I0428 19:39:21.063657 24272 net.cpp:408] ip1 <- pool1
I0428 19:39:21.063661 24272 net.cpp:382] ip1 -> ip1
I0428 19:39:21.063761 24272 net.cpp:124] Setting up ip1
I0428 19:39:21.063771 24272 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:39:21.063783 24272 net.cpp:139] Memory required for data: 964800
I0428 19:39:21.063791 24272 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:21.063796 24272 net.cpp:86] Creating Layer relu1
I0428 19:39:21.063801 24272 net.cpp:408] relu1 <- ip1
I0428 19:39:21.063805 24272 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:21.063962 24272 net.cpp:124] Setting up relu1
I0428 19:39:21.063971 24272 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:39:21.063976 24272 net.cpp:139] Memory required for data: 974800
I0428 19:39:21.063978 24272 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:21.064002 24272 net.cpp:86] Creating Layer ip2
I0428 19:39:21.064004 24272 net.cpp:408] ip2 <- ip1
I0428 19:39:21.064010 24272 net.cpp:382] ip2 -> ip2
I0428 19:39:21.064121 24272 net.cpp:124] Setting up ip2
I0428 19:39:21.064129 24272 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:39:21.064132 24272 net.cpp:139] Memory required for data: 994800
I0428 19:39:21.064138 24272 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:21.064158 24272 net.cpp:86] Creating Layer relu2
I0428 19:39:21.064162 24272 net.cpp:408] relu2 <- ip2
I0428 19:39:21.064165 24272 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:21.064316 24272 net.cpp:124] Setting up relu2
I0428 19:39:21.064324 24272 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:39:21.064328 24272 net.cpp:139] Memory required for data: 1014800
I0428 19:39:21.064332 24272 layer_factory.hpp:77] Creating layer ip3
I0428 19:39:21.064337 24272 net.cpp:86] Creating Layer ip3
I0428 19:39:21.064340 24272 net.cpp:408] ip3 <- ip2
I0428 19:39:21.064353 24272 net.cpp:382] ip3 -> ip3
I0428 19:39:21.064455 24272 net.cpp:124] Setting up ip3
I0428 19:39:21.064462 24272 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:21.064466 24272 net.cpp:139] Memory required for data: 1018800
I0428 19:39:21.064481 24272 layer_factory.hpp:77] Creating layer relu3
I0428 19:39:21.064486 24272 net.cpp:86] Creating Layer relu3
I0428 19:39:21.064496 24272 net.cpp:408] relu3 <- ip3
I0428 19:39:21.064499 24272 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:39:21.065326 24272 net.cpp:124] Setting up relu3
I0428 19:39:21.065343 24272 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:21.065347 24272 net.cpp:139] Memory required for data: 1022800
I0428 19:39:21.065351 24272 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:39:21.065356 24272 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:39:21.065361 24272 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:39:21.065366 24272 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:39:21.065371 24272 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:39:21.065413 24272 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:39:21.065419 24272 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:21.065423 24272 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:21.065425 24272 net.cpp:139] Memory required for data: 1030800
I0428 19:39:21.065428 24272 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:21.065433 24272 net.cpp:86] Creating Layer accuracy
I0428 19:39:21.065438 24272 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:39:21.065441 24272 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:21.065446 24272 net.cpp:382] accuracy -> accuracy
I0428 19:39:21.065452 24272 net.cpp:124] Setting up accuracy
I0428 19:39:21.065456 24272 net.cpp:131] Top shape: (1)
I0428 19:39:21.065459 24272 net.cpp:139] Memory required for data: 1030804
I0428 19:39:21.065462 24272 layer_factory.hpp:77] Creating layer loss
I0428 19:39:21.065466 24272 net.cpp:86] Creating Layer loss
I0428 19:39:21.065470 24272 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:39:21.065480 24272 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:21.065485 24272 net.cpp:382] loss -> loss
I0428 19:39:21.065496 24272 layer_factory.hpp:77] Creating layer loss
I0428 19:39:21.065726 24272 net.cpp:124] Setting up loss
I0428 19:39:21.065734 24272 net.cpp:131] Top shape: (1)
I0428 19:39:21.065738 24272 net.cpp:134]     with loss weight 1
I0428 19:39:21.065744 24272 net.cpp:139] Memory required for data: 1030808
I0428 19:39:21.065759 24272 net.cpp:200] loss needs backward computation.
I0428 19:39:21.065763 24272 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:21.065768 24272 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:39:21.065770 24272 net.cpp:200] relu3 needs backward computation.
I0428 19:39:21.065773 24272 net.cpp:200] ip3 needs backward computation.
I0428 19:39:21.065776 24272 net.cpp:200] relu2 needs backward computation.
I0428 19:39:21.065779 24272 net.cpp:200] ip2 needs backward computation.
I0428 19:39:21.065783 24272 net.cpp:200] relu1 needs backward computation.
I0428 19:39:21.065785 24272 net.cpp:200] ip1 needs backward computation.
I0428 19:39:21.065788 24272 net.cpp:200] pool1 needs backward computation.
I0428 19:39:21.065793 24272 net.cpp:200] conv1 needs backward computation.
I0428 19:39:21.065803 24272 net.cpp:200] pool0 needs backward computation.
I0428 19:39:21.065805 24272 net.cpp:200] conv0 needs backward computation.
I0428 19:39:21.065809 24272 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:21.065814 24272 net.cpp:202] mnist does not need backward computation.
I0428 19:39:21.065815 24272 net.cpp:244] This network produces output accuracy
I0428 19:39:21.065819 24272 net.cpp:244] This network produces output loss
I0428 19:39:21.065829 24272 net.cpp:257] Network initialization done.
I0428 19:39:21.065871 24272 solver.cpp:56] Solver scaffolding done.
I0428 19:39:21.066206 24272 caffe.cpp:248] Starting Optimization
I0428 19:39:21.066215 24272 solver.cpp:273] Solving LeNet
I0428 19:39:21.066217 24272 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:21.067047 24272 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:21.069001 24272 blocking_queue.cpp:49] Waiting for data
I0428 19:39:21.140897 24279 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:21.141360 24272 solver.cpp:398]     Test net output #0: accuracy = 0.1124
I0428 19:39:21.141378 24272 solver.cpp:398]     Test net output #1: loss = 2.32145 (* 1 = 2.32145 loss)
I0428 19:39:21.143120 24272 solver.cpp:219] Iteration 0 (0 iter/s, 0.0768778s/100 iters), loss = 2.29164
I0428 19:39:21.143182 24272 solver.cpp:238]     Train net output #0: loss = 2.29164 (* 1 = 2.29164 loss)
I0428 19:39:21.143194 24272 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:21.210878 24272 solver.cpp:219] Iteration 100 (1477.21 iter/s, 0.0676952s/100 iters), loss = 1.52996
I0428 19:39:21.210902 24272 solver.cpp:238]     Train net output #0: loss = 1.52996 (* 1 = 1.52996 loss)
I0428 19:39:21.210924 24272 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:21.282356 24272 solver.cpp:219] Iteration 200 (1399.75 iter/s, 0.0714414s/100 iters), loss = 1.07278
I0428 19:39:21.282387 24272 solver.cpp:238]     Train net output #0: loss = 1.07278 (* 1 = 1.07278 loss)
I0428 19:39:21.282392 24272 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:21.351218 24272 solver.cpp:219] Iteration 300 (1452.98 iter/s, 0.0688241s/100 iters), loss = 0.490023
I0428 19:39:21.351243 24272 solver.cpp:238]     Train net output #0: loss = 0.490023 (* 1 = 0.490023 loss)
I0428 19:39:21.351264 24272 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:21.417623 24272 solver.cpp:219] Iteration 400 (1506.65 iter/s, 0.0663726s/100 iters), loss = 0.587235
I0428 19:39:21.417662 24272 solver.cpp:238]     Train net output #0: loss = 0.587235 (* 1 = 0.587235 loss)
I0428 19:39:21.417668 24272 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:21.483299 24272 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:21.537919 24279 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:21.538357 24272 solver.cpp:398]     Test net output #0: accuracy = 0.8044
I0428 19:39:21.538375 24272 solver.cpp:398]     Test net output #1: loss = 0.551878 (* 1 = 0.551878 loss)
I0428 19:39:21.539115 24272 solver.cpp:219] Iteration 500 (823.338 iter/s, 0.121457s/100 iters), loss = 0.589819
I0428 19:39:21.539139 24272 solver.cpp:238]     Train net output #0: loss = 0.589819 (* 1 = 0.589819 loss)
I0428 19:39:21.539161 24272 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:21.609406 24272 solver.cpp:219] Iteration 600 (1423.27 iter/s, 0.0702607s/100 iters), loss = 0.615442
I0428 19:39:21.609431 24272 solver.cpp:238]     Train net output #0: loss = 0.615442 (* 1 = 0.615442 loss)
I0428 19:39:21.609452 24272 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:21.679265 24272 solver.cpp:219] Iteration 700 (1432.14 iter/s, 0.0698256s/100 iters), loss = 0.502522
I0428 19:39:21.679287 24272 solver.cpp:238]     Train net output #0: loss = 0.502522 (* 1 = 0.502522 loss)
I0428 19:39:21.679311 24272 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:21.747301 24272 solver.cpp:219] Iteration 800 (1470.48 iter/s, 0.0680051s/100 iters), loss = 0.490837
I0428 19:39:21.747324 24272 solver.cpp:238]     Train net output #0: loss = 0.490837 (* 1 = 0.490837 loss)
I0428 19:39:21.747347 24272 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:21.815474 24272 solver.cpp:219] Iteration 900 (1467.57 iter/s, 0.0681401s/100 iters), loss = 0.502805
I0428 19:39:21.815512 24272 solver.cpp:238]     Train net output #0: loss = 0.502805 (* 1 = 0.502805 loss)
I0428 19:39:21.815520 24272 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:21.837972 24278 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:21.882385 24272 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:21.883083 24272 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:21.883580 24272 solver.cpp:311] Iteration 1000, loss = 0.554336
I0428 19:39:21.883595 24272 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:21.936285 24279 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:21.936741 24272 solver.cpp:398]     Test net output #0: accuracy = 0.8299
I0428 19:39:21.936774 24272 solver.cpp:398]     Test net output #1: loss = 0.45675 (* 1 = 0.45675 loss)
I0428 19:39:21.936779 24272 solver.cpp:316] Optimization Done.
I0428 19:39:21.936782 24272 caffe.cpp:259] Optimization Done.
