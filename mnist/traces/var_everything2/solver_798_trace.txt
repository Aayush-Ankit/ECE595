I0428 19:57:44.955569 28798 caffe.cpp:218] Using GPUs 0
I0428 19:57:44.992705 28798 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:45.516659 28798 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test798.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:45.516804 28798 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test798.prototxt
I0428 19:57:45.517236 28798 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:45.517256 28798 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:45.517361 28798 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:45.517442 28798 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:45.517540 28798 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:45.517565 28798 net.cpp:86] Creating Layer mnist
I0428 19:57:45.517573 28798 net.cpp:382] mnist -> data
I0428 19:57:45.517596 28798 net.cpp:382] mnist -> label
I0428 19:57:45.518693 28798 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:45.521159 28798 net.cpp:124] Setting up mnist
I0428 19:57:45.521176 28798 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:45.521183 28798 net.cpp:131] Top shape: 64 (64)
I0428 19:57:45.521186 28798 net.cpp:139] Memory required for data: 200960
I0428 19:57:45.521193 28798 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:45.521234 28798 net.cpp:86] Creating Layer conv0
I0428 19:57:45.521261 28798 net.cpp:408] conv0 <- data
I0428 19:57:45.521275 28798 net.cpp:382] conv0 -> conv0
I0428 19:57:45.812914 28798 net.cpp:124] Setting up conv0
I0428 19:57:45.812945 28798 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:45.812952 28798 net.cpp:139] Memory required for data: 1675520
I0428 19:57:45.812970 28798 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:45.812984 28798 net.cpp:86] Creating Layer pool0
I0428 19:57:45.812989 28798 net.cpp:408] pool0 <- conv0
I0428 19:57:45.812996 28798 net.cpp:382] pool0 -> pool0
I0428 19:57:45.813053 28798 net.cpp:124] Setting up pool0
I0428 19:57:45.813063 28798 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:45.813067 28798 net.cpp:139] Memory required for data: 2044160
I0428 19:57:45.813071 28798 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:45.813084 28798 net.cpp:86] Creating Layer conv1
I0428 19:57:45.813088 28798 net.cpp:408] conv1 <- pool0
I0428 19:57:45.813094 28798 net.cpp:382] conv1 -> conv1
I0428 19:57:45.816231 28798 net.cpp:124] Setting up conv1
I0428 19:57:45.816248 28798 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:45.816252 28798 net.cpp:139] Memory required for data: 2126080
I0428 19:57:45.816263 28798 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:45.816272 28798 net.cpp:86] Creating Layer pool1
I0428 19:57:45.816278 28798 net.cpp:408] pool1 <- conv1
I0428 19:57:45.816284 28798 net.cpp:382] pool1 -> pool1
I0428 19:57:45.816329 28798 net.cpp:124] Setting up pool1
I0428 19:57:45.816335 28798 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:45.816339 28798 net.cpp:139] Memory required for data: 2146560
I0428 19:57:45.816344 28798 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:45.816351 28798 net.cpp:86] Creating Layer ip1
I0428 19:57:45.816355 28798 net.cpp:408] ip1 <- pool1
I0428 19:57:45.816364 28798 net.cpp:382] ip1 -> ip1
I0428 19:57:45.816488 28798 net.cpp:124] Setting up ip1
I0428 19:57:45.816498 28798 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:45.816501 28798 net.cpp:139] Memory required for data: 2149120
I0428 19:57:45.816510 28798 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:45.816517 28798 net.cpp:86] Creating Layer relu1
I0428 19:57:45.816524 28798 net.cpp:408] relu1 <- ip1
I0428 19:57:45.816529 28798 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:45.816740 28798 net.cpp:124] Setting up relu1
I0428 19:57:45.816751 28798 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:45.816754 28798 net.cpp:139] Memory required for data: 2151680
I0428 19:57:45.816758 28798 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:45.816768 28798 net.cpp:86] Creating Layer ip2
I0428 19:57:45.816772 28798 net.cpp:408] ip2 <- ip1
I0428 19:57:45.816777 28798 net.cpp:382] ip2 -> ip2
I0428 19:57:45.816915 28798 net.cpp:124] Setting up ip2
I0428 19:57:45.816926 28798 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:45.816929 28798 net.cpp:139] Memory required for data: 2164480
I0428 19:57:45.816936 28798 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:45.816946 28798 net.cpp:86] Creating Layer relu2
I0428 19:57:45.816949 28798 net.cpp:408] relu2 <- ip2
I0428 19:57:45.816954 28798 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:45.817814 28798 net.cpp:124] Setting up relu2
I0428 19:57:45.817829 28798 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:45.817834 28798 net.cpp:139] Memory required for data: 2177280
I0428 19:57:45.817837 28798 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:45.817847 28798 net.cpp:86] Creating Layer ip3
I0428 19:57:45.817852 28798 net.cpp:408] ip3 <- ip2
I0428 19:57:45.817859 28798 net.cpp:382] ip3 -> ip3
I0428 19:57:45.817988 28798 net.cpp:124] Setting up ip3
I0428 19:57:45.817999 28798 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:45.818003 28798 net.cpp:139] Memory required for data: 2179840
I0428 19:57:45.818012 28798 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:45.818019 28798 net.cpp:86] Creating Layer relu3
I0428 19:57:45.818022 28798 net.cpp:408] relu3 <- ip3
I0428 19:57:45.818027 28798 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:45.818238 28798 net.cpp:124] Setting up relu3
I0428 19:57:45.818249 28798 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:45.818253 28798 net.cpp:139] Memory required for data: 2182400
I0428 19:57:45.818256 28798 layer_factory.hpp:77] Creating layer loss
I0428 19:57:45.818264 28798 net.cpp:86] Creating Layer loss
I0428 19:57:45.818267 28798 net.cpp:408] loss <- ip3
I0428 19:57:45.818271 28798 net.cpp:408] loss <- label
I0428 19:57:45.818281 28798 net.cpp:382] loss -> loss
I0428 19:57:45.818300 28798 layer_factory.hpp:77] Creating layer loss
I0428 19:57:45.818586 28798 net.cpp:124] Setting up loss
I0428 19:57:45.818598 28798 net.cpp:131] Top shape: (1)
I0428 19:57:45.818600 28798 net.cpp:134]     with loss weight 1
I0428 19:57:45.818617 28798 net.cpp:139] Memory required for data: 2182404
I0428 19:57:45.818621 28798 net.cpp:200] loss needs backward computation.
I0428 19:57:45.818625 28798 net.cpp:200] relu3 needs backward computation.
I0428 19:57:45.818629 28798 net.cpp:200] ip3 needs backward computation.
I0428 19:57:45.818632 28798 net.cpp:200] relu2 needs backward computation.
I0428 19:57:45.818636 28798 net.cpp:200] ip2 needs backward computation.
I0428 19:57:45.818639 28798 net.cpp:200] relu1 needs backward computation.
I0428 19:57:45.818642 28798 net.cpp:200] ip1 needs backward computation.
I0428 19:57:45.818646 28798 net.cpp:200] pool1 needs backward computation.
I0428 19:57:45.818650 28798 net.cpp:200] conv1 needs backward computation.
I0428 19:57:45.818653 28798 net.cpp:200] pool0 needs backward computation.
I0428 19:57:45.818657 28798 net.cpp:200] conv0 needs backward computation.
I0428 19:57:45.818661 28798 net.cpp:202] mnist does not need backward computation.
I0428 19:57:45.818665 28798 net.cpp:244] This network produces output loss
I0428 19:57:45.818682 28798 net.cpp:257] Network initialization done.
I0428 19:57:45.819073 28798 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test798.prototxt
I0428 19:57:45.819106 28798 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:45.819217 28798 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:45.819315 28798 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:45.819368 28798 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:45.819382 28798 net.cpp:86] Creating Layer mnist
I0428 19:57:45.819389 28798 net.cpp:382] mnist -> data
I0428 19:57:45.819398 28798 net.cpp:382] mnist -> label
I0428 19:57:45.819504 28798 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:45.821946 28798 net.cpp:124] Setting up mnist
I0428 19:57:45.821964 28798 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:45.821983 28798 net.cpp:131] Top shape: 100 (100)
I0428 19:57:45.821987 28798 net.cpp:139] Memory required for data: 314000
I0428 19:57:45.821992 28798 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:45.822000 28798 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:45.822005 28798 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:45.822010 28798 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:45.822017 28798 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:45.822109 28798 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:45.822119 28798 net.cpp:131] Top shape: 100 (100)
I0428 19:57:45.822124 28798 net.cpp:131] Top shape: 100 (100)
I0428 19:57:45.822127 28798 net.cpp:139] Memory required for data: 314800
I0428 19:57:45.822131 28798 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:45.822142 28798 net.cpp:86] Creating Layer conv0
I0428 19:57:45.822146 28798 net.cpp:408] conv0 <- data
I0428 19:57:45.822154 28798 net.cpp:382] conv0 -> conv0
I0428 19:57:45.824066 28798 net.cpp:124] Setting up conv0
I0428 19:57:45.824084 28798 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:45.824087 28798 net.cpp:139] Memory required for data: 2618800
I0428 19:57:45.824098 28798 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:45.824108 28798 net.cpp:86] Creating Layer pool0
I0428 19:57:45.824113 28798 net.cpp:408] pool0 <- conv0
I0428 19:57:45.824118 28798 net.cpp:382] pool0 -> pool0
I0428 19:57:45.824163 28798 net.cpp:124] Setting up pool0
I0428 19:57:45.824170 28798 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:45.824174 28798 net.cpp:139] Memory required for data: 3194800
I0428 19:57:45.824177 28798 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:45.824188 28798 net.cpp:86] Creating Layer conv1
I0428 19:57:45.824193 28798 net.cpp:408] conv1 <- pool0
I0428 19:57:45.824200 28798 net.cpp:382] conv1 -> conv1
I0428 19:57:45.826581 28798 net.cpp:124] Setting up conv1
I0428 19:57:45.826596 28798 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:45.826601 28798 net.cpp:139] Memory required for data: 3322800
I0428 19:57:45.826611 28798 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:45.826620 28798 net.cpp:86] Creating Layer pool1
I0428 19:57:45.826625 28798 net.cpp:408] pool1 <- conv1
I0428 19:57:45.826632 28798 net.cpp:382] pool1 -> pool1
I0428 19:57:45.826685 28798 net.cpp:124] Setting up pool1
I0428 19:57:45.826692 28798 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:45.826695 28798 net.cpp:139] Memory required for data: 3354800
I0428 19:57:45.826699 28798 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:45.826707 28798 net.cpp:86] Creating Layer ip1
I0428 19:57:45.826711 28798 net.cpp:408] ip1 <- pool1
I0428 19:57:45.826717 28798 net.cpp:382] ip1 -> ip1
I0428 19:57:45.826864 28798 net.cpp:124] Setting up ip1
I0428 19:57:45.826874 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.826890 28798 net.cpp:139] Memory required for data: 3358800
I0428 19:57:45.826901 28798 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:45.826910 28798 net.cpp:86] Creating Layer relu1
I0428 19:57:45.826915 28798 net.cpp:408] relu1 <- ip1
I0428 19:57:45.826920 28798 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:45.827126 28798 net.cpp:124] Setting up relu1
I0428 19:57:45.827137 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.827142 28798 net.cpp:139] Memory required for data: 3362800
I0428 19:57:45.827145 28798 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:45.827157 28798 net.cpp:86] Creating Layer ip2
I0428 19:57:45.827160 28798 net.cpp:408] ip2 <- ip1
I0428 19:57:45.827167 28798 net.cpp:382] ip2 -> ip2
I0428 19:57:45.827294 28798 net.cpp:124] Setting up ip2
I0428 19:57:45.827303 28798 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:45.827307 28798 net.cpp:139] Memory required for data: 3382800
I0428 19:57:45.827313 28798 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:45.827320 28798 net.cpp:86] Creating Layer relu2
I0428 19:57:45.827324 28798 net.cpp:408] relu2 <- ip2
I0428 19:57:45.827328 28798 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:45.827513 28798 net.cpp:124] Setting up relu2
I0428 19:57:45.827523 28798 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:45.827527 28798 net.cpp:139] Memory required for data: 3402800
I0428 19:57:45.827530 28798 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:45.827536 28798 net.cpp:86] Creating Layer ip3
I0428 19:57:45.827540 28798 net.cpp:408] ip3 <- ip2
I0428 19:57:45.827546 28798 net.cpp:382] ip3 -> ip3
I0428 19:57:45.827700 28798 net.cpp:124] Setting up ip3
I0428 19:57:45.827711 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.827715 28798 net.cpp:139] Memory required for data: 3406800
I0428 19:57:45.827724 28798 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:45.827730 28798 net.cpp:86] Creating Layer relu3
I0428 19:57:45.827734 28798 net.cpp:408] relu3 <- ip3
I0428 19:57:45.827740 28798 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:45.828644 28798 net.cpp:124] Setting up relu3
I0428 19:57:45.828658 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.828663 28798 net.cpp:139] Memory required for data: 3410800
I0428 19:57:45.828668 28798 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:45.828675 28798 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:45.828678 28798 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:45.828686 28798 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:45.828694 28798 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:45.828740 28798 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:45.828747 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.828752 28798 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:45.828755 28798 net.cpp:139] Memory required for data: 3418800
I0428 19:57:45.828759 28798 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:45.828766 28798 net.cpp:86] Creating Layer accuracy
I0428 19:57:45.828774 28798 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:45.828779 28798 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:45.828786 28798 net.cpp:382] accuracy -> accuracy
I0428 19:57:45.828794 28798 net.cpp:124] Setting up accuracy
I0428 19:57:45.828799 28798 net.cpp:131] Top shape: (1)
I0428 19:57:45.828802 28798 net.cpp:139] Memory required for data: 3418804
I0428 19:57:45.828805 28798 layer_factory.hpp:77] Creating layer loss
I0428 19:57:45.828819 28798 net.cpp:86] Creating Layer loss
I0428 19:57:45.828822 28798 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:45.828827 28798 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:45.828846 28798 net.cpp:382] loss -> loss
I0428 19:57:45.828855 28798 layer_factory.hpp:77] Creating layer loss
I0428 19:57:45.829141 28798 net.cpp:124] Setting up loss
I0428 19:57:45.829154 28798 net.cpp:131] Top shape: (1)
I0428 19:57:45.829159 28798 net.cpp:134]     with loss weight 1
I0428 19:57:45.829166 28798 net.cpp:139] Memory required for data: 3418808
I0428 19:57:45.829181 28798 net.cpp:200] loss needs backward computation.
I0428 19:57:45.829186 28798 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:45.829191 28798 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:45.829195 28798 net.cpp:200] relu3 needs backward computation.
I0428 19:57:45.829200 28798 net.cpp:200] ip3 needs backward computation.
I0428 19:57:45.829203 28798 net.cpp:200] relu2 needs backward computation.
I0428 19:57:45.829206 28798 net.cpp:200] ip2 needs backward computation.
I0428 19:57:45.829210 28798 net.cpp:200] relu1 needs backward computation.
I0428 19:57:45.829215 28798 net.cpp:200] ip1 needs backward computation.
I0428 19:57:45.829218 28798 net.cpp:200] pool1 needs backward computation.
I0428 19:57:45.829222 28798 net.cpp:200] conv1 needs backward computation.
I0428 19:57:45.829226 28798 net.cpp:200] pool0 needs backward computation.
I0428 19:57:45.829229 28798 net.cpp:200] conv0 needs backward computation.
I0428 19:57:45.829233 28798 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:45.829238 28798 net.cpp:202] mnist does not need backward computation.
I0428 19:57:45.829241 28798 net.cpp:244] This network produces output accuracy
I0428 19:57:45.829246 28798 net.cpp:244] This network produces output loss
I0428 19:57:45.829259 28798 net.cpp:257] Network initialization done.
I0428 19:57:45.829315 28798 solver.cpp:56] Solver scaffolding done.
I0428 19:57:45.829767 28798 caffe.cpp:248] Starting Optimization
I0428 19:57:45.829779 28798 solver.cpp:273] Solving LeNet
I0428 19:57:45.829783 28798 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:45.830768 28798 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:45.834609 28798 blocking_queue.cpp:49] Waiting for data
I0428 19:57:45.902017 28810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:45.902570 28798 solver.cpp:398]     Test net output #0: accuracy = 0.119
I0428 19:57:45.902595 28798 solver.cpp:398]     Test net output #1: loss = 2.30714 (* 1 = 2.30714 loss)
I0428 19:57:45.905362 28798 solver.cpp:219] Iteration 0 (0 iter/s, 0.0755415s/100 iters), loss = 2.32206
I0428 19:57:45.905392 28798 solver.cpp:238]     Train net output #0: loss = 2.32206 (* 1 = 2.32206 loss)
I0428 19:57:45.905407 28798 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:45.986654 28798 solver.cpp:219] Iteration 100 (1230.83 iter/s, 0.0812462s/100 iters), loss = 1.292
I0428 19:57:45.986686 28798 solver.cpp:238]     Train net output #0: loss = 1.292 (* 1 = 1.292 loss)
I0428 19:57:45.986695 28798 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:46.067143 28798 solver.cpp:219] Iteration 200 (1243.03 iter/s, 0.0804485s/100 iters), loss = 0.717825
I0428 19:57:46.067170 28798 solver.cpp:238]     Train net output #0: loss = 0.717825 (* 1 = 0.717825 loss)
I0428 19:57:46.067176 28798 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:46.147064 28798 solver.cpp:219] Iteration 300 (1251.79 iter/s, 0.0798853s/100 iters), loss = 0.377361
I0428 19:57:46.147104 28798 solver.cpp:238]     Train net output #0: loss = 0.377361 (* 1 = 0.377361 loss)
I0428 19:57:46.147110 28798 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:46.228462 28798 solver.cpp:219] Iteration 400 (1229.03 iter/s, 0.0813648s/100 iters), loss = 0.294102
I0428 19:57:46.228502 28798 solver.cpp:238]     Train net output #0: loss = 0.294102 (* 1 = 0.294102 loss)
I0428 19:57:46.228508 28798 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:46.305392 28798 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:46.381009 28810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:46.381568 28798 solver.cpp:398]     Test net output #0: accuracy = 0.9317
I0428 19:57:46.381595 28798 solver.cpp:398]     Test net output #1: loss = 0.234519 (* 1 = 0.234519 loss)
I0428 19:57:46.382516 28798 solver.cpp:219] Iteration 500 (649.354 iter/s, 0.153999s/100 iters), loss = 0.265139
I0428 19:57:46.382577 28798 solver.cpp:238]     Train net output #0: loss = 0.265139 (* 1 = 0.265139 loss)
I0428 19:57:46.382609 28798 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:46.461947 28798 solver.cpp:219] Iteration 600 (1260.07 iter/s, 0.0793608s/100 iters), loss = 0.145079
I0428 19:57:46.461977 28798 solver.cpp:238]     Train net output #0: loss = 0.145079 (* 1 = 0.145079 loss)
I0428 19:57:46.461983 28798 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:46.541141 28798 solver.cpp:219] Iteration 700 (1263.34 iter/s, 0.0791552s/100 iters), loss = 0.442998
I0428 19:57:46.541180 28798 solver.cpp:238]     Train net output #0: loss = 0.442998 (* 1 = 0.442998 loss)
I0428 19:57:46.541188 28798 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:46.620640 28798 solver.cpp:219] Iteration 800 (1258.39 iter/s, 0.0794665s/100 iters), loss = 0.281441
I0428 19:57:46.620664 28798 solver.cpp:238]     Train net output #0: loss = 0.281441 (* 1 = 0.281441 loss)
I0428 19:57:46.620671 28798 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:46.702353 28798 solver.cpp:219] Iteration 900 (1224.3 iter/s, 0.0816792s/100 iters), loss = 0.194573
I0428 19:57:46.702392 28798 solver.cpp:238]     Train net output #0: loss = 0.194573 (* 1 = 0.194573 loss)
I0428 19:57:46.702399 28798 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:46.728927 28809 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:46.781412 28798 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:46.782193 28798 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:46.782709 28798 solver.cpp:311] Iteration 1000, loss = 0.253128
I0428 19:57:46.782723 28798 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:46.851060 28810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:46.851603 28798 solver.cpp:398]     Test net output #0: accuracy = 0.9528
I0428 19:57:46.851639 28798 solver.cpp:398]     Test net output #1: loss = 0.154349 (* 1 = 0.154349 loss)
I0428 19:57:46.851644 28798 solver.cpp:316] Optimization Done.
I0428 19:57:46.851647 28798 caffe.cpp:259] Optimization Done.
