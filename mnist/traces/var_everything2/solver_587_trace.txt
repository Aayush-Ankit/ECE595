I0428 19:49:51.057862 26870 caffe.cpp:218] Using GPUs 0
I0428 19:49:51.101284 26870 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:51.694059 26870 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test587.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:51.694207 26870 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test587.prototxt
I0428 19:49:51.694553 26870 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:51.694571 26870 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:51.694653 26870 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:51.694721 26870 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:51.694818 26870 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:51.694842 26870 net.cpp:86] Creating Layer mnist
I0428 19:49:51.694850 26870 net.cpp:382] mnist -> data
I0428 19:49:51.694871 26870 net.cpp:382] mnist -> label
I0428 19:49:51.695974 26870 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:51.698441 26870 net.cpp:124] Setting up mnist
I0428 19:49:51.698459 26870 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:51.698465 26870 net.cpp:131] Top shape: 64 (64)
I0428 19:49:51.698469 26870 net.cpp:139] Memory required for data: 200960
I0428 19:49:51.698477 26870 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:51.698529 26870 net.cpp:86] Creating Layer conv0
I0428 19:49:51.698536 26870 net.cpp:408] conv0 <- data
I0428 19:49:51.698549 26870 net.cpp:382] conv0 -> conv0
I0428 19:49:51.958781 26870 net.cpp:124] Setting up conv0
I0428 19:49:51.958808 26870 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:51.958812 26870 net.cpp:139] Memory required for data: 938240
I0428 19:49:51.958825 26870 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:51.958838 26870 net.cpp:86] Creating Layer pool0
I0428 19:49:51.958842 26870 net.cpp:408] pool0 <- conv0
I0428 19:49:51.958847 26870 net.cpp:382] pool0 -> pool0
I0428 19:49:51.958921 26870 net.cpp:124] Setting up pool0
I0428 19:49:51.958927 26870 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:51.958945 26870 net.cpp:139] Memory required for data: 1122560
I0428 19:49:51.958948 26870 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:51.958959 26870 net.cpp:86] Creating Layer conv1
I0428 19:49:51.958962 26870 net.cpp:408] conv1 <- pool0
I0428 19:49:51.958967 26870 net.cpp:382] conv1 -> conv1
I0428 19:49:51.961733 26870 net.cpp:124] Setting up conv1
I0428 19:49:51.961762 26870 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:49:51.961766 26870 net.cpp:139] Memory required for data: 1286400
I0428 19:49:51.961789 26870 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:51.961796 26870 net.cpp:86] Creating Layer pool1
I0428 19:49:51.961802 26870 net.cpp:408] pool1 <- conv1
I0428 19:49:51.961807 26870 net.cpp:382] pool1 -> pool1
I0428 19:49:51.961841 26870 net.cpp:124] Setting up pool1
I0428 19:49:51.961848 26870 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:49:51.961849 26870 net.cpp:139] Memory required for data: 1327360
I0428 19:49:51.961853 26870 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:51.961858 26870 net.cpp:86] Creating Layer ip1
I0428 19:49:51.961861 26870 net.cpp:408] ip1 <- pool1
I0428 19:49:51.961866 26870 net.cpp:382] ip1 -> ip1
I0428 19:49:51.961964 26870 net.cpp:124] Setting up ip1
I0428 19:49:51.961971 26870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:51.961976 26870 net.cpp:139] Memory required for data: 1329920
I0428 19:49:51.961982 26870 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:51.961987 26870 net.cpp:86] Creating Layer relu1
I0428 19:49:51.961989 26870 net.cpp:408] relu1 <- ip1
I0428 19:49:51.961993 26870 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:51.962155 26870 net.cpp:124] Setting up relu1
I0428 19:49:51.962164 26870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:51.962167 26870 net.cpp:139] Memory required for data: 1332480
I0428 19:49:51.962169 26870 layer_factory.hpp:77] Creating layer loss
I0428 19:49:51.962175 26870 net.cpp:86] Creating Layer loss
I0428 19:49:51.962178 26870 net.cpp:408] loss <- ip1
I0428 19:49:51.962182 26870 net.cpp:408] loss <- label
I0428 19:49:51.962186 26870 net.cpp:382] loss -> loss
I0428 19:49:51.962215 26870 layer_factory.hpp:77] Creating layer loss
I0428 19:49:51.963052 26870 net.cpp:124] Setting up loss
I0428 19:49:51.963063 26870 net.cpp:131] Top shape: (1)
I0428 19:49:51.963083 26870 net.cpp:134]     with loss weight 1
I0428 19:49:51.963095 26870 net.cpp:139] Memory required for data: 1332484
I0428 19:49:51.963099 26870 net.cpp:200] loss needs backward computation.
I0428 19:49:51.963102 26870 net.cpp:200] relu1 needs backward computation.
I0428 19:49:51.963105 26870 net.cpp:200] ip1 needs backward computation.
I0428 19:49:51.963109 26870 net.cpp:200] pool1 needs backward computation.
I0428 19:49:51.963110 26870 net.cpp:200] conv1 needs backward computation.
I0428 19:49:51.963114 26870 net.cpp:200] pool0 needs backward computation.
I0428 19:49:51.963115 26870 net.cpp:200] conv0 needs backward computation.
I0428 19:49:51.963119 26870 net.cpp:202] mnist does not need backward computation.
I0428 19:49:51.963121 26870 net.cpp:244] This network produces output loss
I0428 19:49:51.963129 26870 net.cpp:257] Network initialization done.
I0428 19:49:51.963405 26870 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test587.prototxt
I0428 19:49:51.963428 26870 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:51.963501 26870 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:51.963570 26870 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:51.963629 26870 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:51.963641 26870 net.cpp:86] Creating Layer mnist
I0428 19:49:51.963645 26870 net.cpp:382] mnist -> data
I0428 19:49:51.963654 26870 net.cpp:382] mnist -> label
I0428 19:49:51.963748 26870 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:51.965880 26870 net.cpp:124] Setting up mnist
I0428 19:49:51.965909 26870 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:51.965914 26870 net.cpp:131] Top shape: 100 (100)
I0428 19:49:51.965917 26870 net.cpp:139] Memory required for data: 314000
I0428 19:49:51.965921 26870 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:51.965927 26870 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:51.965931 26870 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:51.965935 26870 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:51.965942 26870 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:51.965991 26870 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:51.965996 26870 net.cpp:131] Top shape: 100 (100)
I0428 19:49:51.965999 26870 net.cpp:131] Top shape: 100 (100)
I0428 19:49:51.966002 26870 net.cpp:139] Memory required for data: 314800
I0428 19:49:51.966006 26870 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:51.966012 26870 net.cpp:86] Creating Layer conv0
I0428 19:49:51.966015 26870 net.cpp:408] conv0 <- data
I0428 19:49:51.966020 26870 net.cpp:382] conv0 -> conv0
I0428 19:49:51.966962 26870 net.cpp:124] Setting up conv0
I0428 19:49:51.966974 26870 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:51.966977 26870 net.cpp:139] Memory required for data: 1466800
I0428 19:49:51.966985 26870 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:51.967002 26870 net.cpp:86] Creating Layer pool0
I0428 19:49:51.967005 26870 net.cpp:408] pool0 <- conv0
I0428 19:49:51.967010 26870 net.cpp:382] pool0 -> pool0
I0428 19:49:51.967042 26870 net.cpp:124] Setting up pool0
I0428 19:49:51.967047 26870 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:51.967051 26870 net.cpp:139] Memory required for data: 1754800
I0428 19:49:51.967052 26870 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:51.967061 26870 net.cpp:86] Creating Layer conv1
I0428 19:49:51.967063 26870 net.cpp:408] conv1 <- pool0
I0428 19:49:51.967068 26870 net.cpp:382] conv1 -> conv1
I0428 19:49:51.969179 26870 net.cpp:124] Setting up conv1
I0428 19:49:51.969207 26870 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:49:51.969210 26870 net.cpp:139] Memory required for data: 2010800
I0428 19:49:51.969218 26870 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:51.969224 26870 net.cpp:86] Creating Layer pool1
I0428 19:49:51.969236 26870 net.cpp:408] pool1 <- conv1
I0428 19:49:51.969241 26870 net.cpp:382] pool1 -> pool1
I0428 19:49:51.969290 26870 net.cpp:124] Setting up pool1
I0428 19:49:51.969295 26870 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:49:51.969305 26870 net.cpp:139] Memory required for data: 2074800
I0428 19:49:51.969307 26870 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:51.969312 26870 net.cpp:86] Creating Layer ip1
I0428 19:49:51.969316 26870 net.cpp:408] ip1 <- pool1
I0428 19:49:51.969319 26870 net.cpp:382] ip1 -> ip1
I0428 19:49:51.969475 26870 net.cpp:124] Setting up ip1
I0428 19:49:51.969485 26870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:51.969487 26870 net.cpp:139] Memory required for data: 2078800
I0428 19:49:51.969494 26870 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:51.969499 26870 net.cpp:86] Creating Layer relu1
I0428 19:49:51.969503 26870 net.cpp:408] relu1 <- ip1
I0428 19:49:51.969507 26870 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:51.970394 26870 net.cpp:124] Setting up relu1
I0428 19:49:51.970405 26870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:51.970409 26870 net.cpp:139] Memory required for data: 2082800
I0428 19:49:51.970412 26870 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:49:51.970422 26870 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:49:51.970424 26870 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:49:51.970429 26870 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:49:51.970434 26870 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:49:51.970489 26870 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:49:51.970497 26870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:51.970502 26870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:51.970504 26870 net.cpp:139] Memory required for data: 2090800
I0428 19:49:51.970507 26870 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:51.970513 26870 net.cpp:86] Creating Layer accuracy
I0428 19:49:51.970521 26870 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:49:51.970525 26870 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:51.970530 26870 net.cpp:382] accuracy -> accuracy
I0428 19:49:51.970536 26870 net.cpp:124] Setting up accuracy
I0428 19:49:51.970541 26870 net.cpp:131] Top shape: (1)
I0428 19:49:51.970543 26870 net.cpp:139] Memory required for data: 2090804
I0428 19:49:51.970546 26870 layer_factory.hpp:77] Creating layer loss
I0428 19:49:51.970551 26870 net.cpp:86] Creating Layer loss
I0428 19:49:51.970553 26870 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:49:51.970557 26870 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:51.970561 26870 net.cpp:382] loss -> loss
I0428 19:49:51.970566 26870 layer_factory.hpp:77] Creating layer loss
I0428 19:49:51.970824 26870 net.cpp:124] Setting up loss
I0428 19:49:51.970832 26870 net.cpp:131] Top shape: (1)
I0428 19:49:51.970835 26870 net.cpp:134]     with loss weight 1
I0428 19:49:51.970841 26870 net.cpp:139] Memory required for data: 2090808
I0428 19:49:51.970844 26870 net.cpp:200] loss needs backward computation.
I0428 19:49:51.970847 26870 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:51.970859 26870 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:49:51.970860 26870 net.cpp:200] relu1 needs backward computation.
I0428 19:49:51.970863 26870 net.cpp:200] ip1 needs backward computation.
I0428 19:49:51.970866 26870 net.cpp:200] pool1 needs backward computation.
I0428 19:49:51.970868 26870 net.cpp:200] conv1 needs backward computation.
I0428 19:49:51.970871 26870 net.cpp:200] pool0 needs backward computation.
I0428 19:49:51.970875 26870 net.cpp:200] conv0 needs backward computation.
I0428 19:49:51.970877 26870 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:51.970881 26870 net.cpp:202] mnist does not need backward computation.
I0428 19:49:51.970883 26870 net.cpp:244] This network produces output accuracy
I0428 19:49:51.970886 26870 net.cpp:244] This network produces output loss
I0428 19:49:51.970906 26870 net.cpp:257] Network initialization done.
I0428 19:49:51.970937 26870 solver.cpp:56] Solver scaffolding done.
I0428 19:49:51.971153 26870 caffe.cpp:248] Starting Optimization
I0428 19:49:51.971160 26870 solver.cpp:273] Solving LeNet
I0428 19:49:51.971163 26870 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:51.971266 26870 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:51.974578 26870 blocking_queue.cpp:49] Waiting for data
I0428 19:49:52.038147 26878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:52.038584 26870 solver.cpp:398]     Test net output #0: accuracy = 0.0795
I0428 19:49:52.038601 26870 solver.cpp:398]     Test net output #1: loss = 2.37541 (* 1 = 2.37541 loss)
I0428 19:49:52.040231 26870 solver.cpp:219] Iteration 0 (-5.73634e-31 iter/s, 0.0690401s/100 iters), loss = 2.3926
I0428 19:49:52.040256 26870 solver.cpp:238]     Train net output #0: loss = 2.3926 (* 1 = 2.3926 loss)
I0428 19:49:52.040266 26870 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:52.114097 26870 solver.cpp:219] Iteration 100 (1354.44 iter/s, 0.0738314s/100 iters), loss = 0.90619
I0428 19:49:52.114122 26870 solver.cpp:238]     Train net output #0: loss = 0.90619 (* 1 = 0.90619 loss)
I0428 19:49:52.114128 26870 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:52.181547 26870 solver.cpp:219] Iteration 200 (1483.35 iter/s, 0.067415s/100 iters), loss = 0.259842
I0428 19:49:52.181572 26870 solver.cpp:238]     Train net output #0: loss = 0.259842 (* 1 = 0.259842 loss)
I0428 19:49:52.181593 26870 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:52.254688 26870 solver.cpp:219] Iteration 300 (1367.87 iter/s, 0.0731064s/100 iters), loss = 0.218995
I0428 19:49:52.254712 26870 solver.cpp:238]     Train net output #0: loss = 0.218995 (* 1 = 0.218995 loss)
I0428 19:49:52.254735 26870 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:52.316994 26870 solver.cpp:219] Iteration 400 (1605.79 iter/s, 0.0622745s/100 iters), loss = 0.196454
I0428 19:49:52.317034 26870 solver.cpp:238]     Train net output #0: loss = 0.196454 (* 1 = 0.196454 loss)
I0428 19:49:52.317040 26870 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:52.376860 26870 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:52.443089 26878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:52.443606 26870 solver.cpp:398]     Test net output #0: accuracy = 0.9594
I0428 19:49:52.443635 26870 solver.cpp:398]     Test net output #1: loss = 0.144634 (* 1 = 0.144634 loss)
I0428 19:49:52.444406 26870 solver.cpp:219] Iteration 500 (785.094 iter/s, 0.127373s/100 iters), loss = 0.13225
I0428 19:49:52.444437 26870 solver.cpp:238]     Train net output #0: loss = 0.13225 (* 1 = 0.13225 loss)
I0428 19:49:52.444447 26870 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:52.517487 26870 solver.cpp:219] Iteration 600 (1369.11 iter/s, 0.07304s/100 iters), loss = 0.148291
I0428 19:49:52.517514 26870 solver.cpp:238]     Train net output #0: loss = 0.148291 (* 1 = 0.148291 loss)
I0428 19:49:52.517523 26870 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:52.581405 26870 solver.cpp:219] Iteration 700 (1565.38 iter/s, 0.0638822s/100 iters), loss = 0.261533
I0428 19:49:52.581429 26870 solver.cpp:238]     Train net output #0: loss = 0.261533 (* 1 = 0.261533 loss)
I0428 19:49:52.581439 26870 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:52.639641 26870 solver.cpp:219] Iteration 800 (1718.09 iter/s, 0.0582042s/100 iters), loss = 0.319323
I0428 19:49:52.639664 26870 solver.cpp:238]     Train net output #0: loss = 0.319323 (* 1 = 0.319323 loss)
I0428 19:49:52.639670 26870 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:52.700108 26870 solver.cpp:219] Iteration 900 (1654.66 iter/s, 0.0604355s/100 iters), loss = 0.167684
I0428 19:49:52.700146 26870 solver.cpp:238]     Train net output #0: loss = 0.167684 (* 1 = 0.167684 loss)
I0428 19:49:52.700151 26870 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:52.720443 26876 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:52.759765 26870 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:52.760337 26870 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:52.760717 26870 solver.cpp:311] Iteration 1000, loss = 0.122476
I0428 19:49:52.760732 26870 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:52.835887 26878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:52.836335 26870 solver.cpp:398]     Test net output #0: accuracy = 0.9702
I0428 19:49:52.836355 26870 solver.cpp:398]     Test net output #1: loss = 0.0970301 (* 1 = 0.0970301 loss)
I0428 19:49:52.836360 26870 solver.cpp:316] Optimization Done.
I0428 19:49:52.836364 26870 caffe.cpp:259] Optimization Done.
