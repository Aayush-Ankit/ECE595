I0428 20:17:25.099915   866 caffe.cpp:218] Using GPUs 0
I0428 20:17:25.133975   866 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:25.647358   866 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1294.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:25.647503   866 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1294.prototxt
I0428 20:17:25.647882   866 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:25.647903   866 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:25.647994   866 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:25.648069   866 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:25.648170   866 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:25.648193   866 net.cpp:86] Creating Layer mnist
I0428 20:17:25.648205   866 net.cpp:382] mnist -> data
I0428 20:17:25.648226   866 net.cpp:382] mnist -> label
I0428 20:17:25.649325   866 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:25.651999   866 net.cpp:124] Setting up mnist
I0428 20:17:25.652019   866 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:25.652024   866 net.cpp:131] Top shape: 64 (64)
I0428 20:17:25.652027   866 net.cpp:139] Memory required for data: 200960
I0428 20:17:25.652034   866 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:25.652052   866 net.cpp:86] Creating Layer conv0
I0428 20:17:25.652058   866 net.cpp:408] conv0 <- data
I0428 20:17:25.652086   866 net.cpp:382] conv0 -> conv0
I0428 20:17:25.945204   866 net.cpp:124] Setting up conv0
I0428 20:17:25.945233   866 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:25.945238   866 net.cpp:139] Memory required for data: 7573760
I0428 20:17:25.945277   866 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:25.945292   866 net.cpp:86] Creating Layer pool0
I0428 20:17:25.945297   866 net.cpp:408] pool0 <- conv0
I0428 20:17:25.945302   866 net.cpp:382] pool0 -> pool0
I0428 20:17:25.945358   866 net.cpp:124] Setting up pool0
I0428 20:17:25.945366   866 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:25.945369   866 net.cpp:139] Memory required for data: 9416960
I0428 20:17:25.945374   866 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:25.945385   866 net.cpp:86] Creating Layer conv1
I0428 20:17:25.945389   866 net.cpp:408] conv1 <- pool0
I0428 20:17:25.945394   866 net.cpp:382] conv1 -> conv1
I0428 20:17:25.948501   866 net.cpp:124] Setting up conv1
I0428 20:17:25.948518   866 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:25.948523   866 net.cpp:139] Memory required for data: 9580800
I0428 20:17:25.948532   866 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:25.948541   866 net.cpp:86] Creating Layer pool1
I0428 20:17:25.948545   866 net.cpp:408] pool1 <- conv1
I0428 20:17:25.948551   866 net.cpp:382] pool1 -> pool1
I0428 20:17:25.948595   866 net.cpp:124] Setting up pool1
I0428 20:17:25.948606   866 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:25.948609   866 net.cpp:139] Memory required for data: 9621760
I0428 20:17:25.948612   866 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:25.948621   866 net.cpp:86] Creating Layer ip1
I0428 20:17:25.948623   866 net.cpp:408] ip1 <- pool1
I0428 20:17:25.948629   866 net.cpp:382] ip1 -> ip1
I0428 20:17:25.948768   866 net.cpp:124] Setting up ip1
I0428 20:17:25.948776   866 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:25.948779   866 net.cpp:139] Memory required for data: 9628160
I0428 20:17:25.948787   866 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:25.948793   866 net.cpp:86] Creating Layer relu1
I0428 20:17:25.948797   866 net.cpp:408] relu1 <- ip1
I0428 20:17:25.948802   866 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:25.949000   866 net.cpp:124] Setting up relu1
I0428 20:17:25.949012   866 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:25.949014   866 net.cpp:139] Memory required for data: 9634560
I0428 20:17:25.949019   866 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:25.949026   866 net.cpp:86] Creating Layer ip2
I0428 20:17:25.949030   866 net.cpp:408] ip2 <- ip1
I0428 20:17:25.949036   866 net.cpp:382] ip2 -> ip2
I0428 20:17:25.949143   866 net.cpp:124] Setting up ip2
I0428 20:17:25.949151   866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:25.949154   866 net.cpp:139] Memory required for data: 9637120
I0428 20:17:25.949160   866 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:25.949167   866 net.cpp:86] Creating Layer relu2
I0428 20:17:25.949170   866 net.cpp:408] relu2 <- ip2
I0428 20:17:25.949175   866 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:25.949977   866 net.cpp:124] Setting up relu2
I0428 20:17:25.949995   866 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:25.950001   866 net.cpp:139] Memory required for data: 9639680
I0428 20:17:25.950006   866 layer_factory.hpp:77] Creating layer loss
I0428 20:17:25.950012   866 net.cpp:86] Creating Layer loss
I0428 20:17:25.950016   866 net.cpp:408] loss <- ip2
I0428 20:17:25.950021   866 net.cpp:408] loss <- label
I0428 20:17:25.950027   866 net.cpp:382] loss -> loss
I0428 20:17:25.950048   866 layer_factory.hpp:77] Creating layer loss
I0428 20:17:25.950300   866 net.cpp:124] Setting up loss
I0428 20:17:25.950311   866 net.cpp:131] Top shape: (1)
I0428 20:17:25.950315   866 net.cpp:134]     with loss weight 1
I0428 20:17:25.950330   866 net.cpp:139] Memory required for data: 9639684
I0428 20:17:25.950335   866 net.cpp:200] loss needs backward computation.
I0428 20:17:25.950338   866 net.cpp:200] relu2 needs backward computation.
I0428 20:17:25.950341   866 net.cpp:200] ip2 needs backward computation.
I0428 20:17:25.950345   866 net.cpp:200] relu1 needs backward computation.
I0428 20:17:25.950348   866 net.cpp:200] ip1 needs backward computation.
I0428 20:17:25.950363   866 net.cpp:200] pool1 needs backward computation.
I0428 20:17:25.950367   866 net.cpp:200] conv1 needs backward computation.
I0428 20:17:25.950371   866 net.cpp:200] pool0 needs backward computation.
I0428 20:17:25.950374   866 net.cpp:200] conv0 needs backward computation.
I0428 20:17:25.950378   866 net.cpp:202] mnist does not need backward computation.
I0428 20:17:25.950381   866 net.cpp:244] This network produces output loss
I0428 20:17:25.950390   866 net.cpp:257] Network initialization done.
I0428 20:17:25.950707   866 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1294.prototxt
I0428 20:17:25.950736   866 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:25.950832   866 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:25.950903   866 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:25.950954   866 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:25.950968   866 net.cpp:86] Creating Layer mnist
I0428 20:17:25.950973   866 net.cpp:382] mnist -> data
I0428 20:17:25.950981   866 net.cpp:382] mnist -> label
I0428 20:17:25.951073   866 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:25.953138   866 net.cpp:124] Setting up mnist
I0428 20:17:25.953152   866 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:25.953158   866 net.cpp:131] Top shape: 100 (100)
I0428 20:17:25.953161   866 net.cpp:139] Memory required for data: 314000
I0428 20:17:25.953166   866 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:25.953176   866 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:25.953181   866 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:25.953186   866 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:25.953193   866 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:25.953263   866 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:25.953269   866 net.cpp:131] Top shape: 100 (100)
I0428 20:17:25.953274   866 net.cpp:131] Top shape: 100 (100)
I0428 20:17:25.953276   866 net.cpp:139] Memory required for data: 314800
I0428 20:17:25.953279   866 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:25.953289   866 net.cpp:86] Creating Layer conv0
I0428 20:17:25.953292   866 net.cpp:408] conv0 <- data
I0428 20:17:25.953297   866 net.cpp:382] conv0 -> conv0
I0428 20:17:25.955132   866 net.cpp:124] Setting up conv0
I0428 20:17:25.955147   866 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:25.955150   866 net.cpp:139] Memory required for data: 11834800
I0428 20:17:25.955160   866 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:25.955168   866 net.cpp:86] Creating Layer pool0
I0428 20:17:25.955171   866 net.cpp:408] pool0 <- conv0
I0428 20:17:25.955176   866 net.cpp:382] pool0 -> pool0
I0428 20:17:25.955215   866 net.cpp:124] Setting up pool0
I0428 20:17:25.955220   866 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:25.955224   866 net.cpp:139] Memory required for data: 14714800
I0428 20:17:25.955227   866 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:25.955236   866 net.cpp:86] Creating Layer conv1
I0428 20:17:25.955240   866 net.cpp:408] conv1 <- pool0
I0428 20:17:25.955245   866 net.cpp:382] conv1 -> conv1
I0428 20:17:25.956907   866 net.cpp:124] Setting up conv1
I0428 20:17:25.956923   866 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:25.956928   866 net.cpp:139] Memory required for data: 14970800
I0428 20:17:25.956940   866 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:25.956948   866 net.cpp:86] Creating Layer pool1
I0428 20:17:25.956953   866 net.cpp:408] pool1 <- conv1
I0428 20:17:25.956959   866 net.cpp:382] pool1 -> pool1
I0428 20:17:25.956997   866 net.cpp:124] Setting up pool1
I0428 20:17:25.957003   866 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:25.957007   866 net.cpp:139] Memory required for data: 15034800
I0428 20:17:25.957010   866 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:25.957018   866 net.cpp:86] Creating Layer ip1
I0428 20:17:25.957022   866 net.cpp:408] ip1 <- pool1
I0428 20:17:25.957029   866 net.cpp:382] ip1 -> ip1
I0428 20:17:25.957167   866 net.cpp:124] Setting up ip1
I0428 20:17:25.957176   866 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:25.957180   866 net.cpp:139] Memory required for data: 15044800
I0428 20:17:25.957187   866 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:25.957193   866 net.cpp:86] Creating Layer relu1
I0428 20:17:25.957197   866 net.cpp:408] relu1 <- ip1
I0428 20:17:25.957203   866 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:25.957384   866 net.cpp:124] Setting up relu1
I0428 20:17:25.957393   866 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:25.957397   866 net.cpp:139] Memory required for data: 15054800
I0428 20:17:25.957401   866 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:25.957409   866 net.cpp:86] Creating Layer ip2
I0428 20:17:25.957414   866 net.cpp:408] ip2 <- ip1
I0428 20:17:25.957419   866 net.cpp:382] ip2 -> ip2
I0428 20:17:25.957527   866 net.cpp:124] Setting up ip2
I0428 20:17:25.957536   866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:25.957540   866 net.cpp:139] Memory required for data: 15058800
I0428 20:17:25.957545   866 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:25.957552   866 net.cpp:86] Creating Layer relu2
I0428 20:17:25.957556   866 net.cpp:408] relu2 <- ip2
I0428 20:17:25.957561   866 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:25.957800   866 net.cpp:124] Setting up relu2
I0428 20:17:25.957810   866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:25.957813   866 net.cpp:139] Memory required for data: 15062800
I0428 20:17:25.957818   866 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:25.957823   866 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:25.957826   866 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:25.957831   866 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:25.957849   866 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:25.957903   866 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:25.957911   866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:25.957916   866 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:25.957918   866 net.cpp:139] Memory required for data: 15070800
I0428 20:17:25.957921   866 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:25.957927   866 net.cpp:86] Creating Layer accuracy
I0428 20:17:25.957931   866 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:25.957936   866 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:25.957942   866 net.cpp:382] accuracy -> accuracy
I0428 20:17:25.957949   866 net.cpp:124] Setting up accuracy
I0428 20:17:25.957959   866 net.cpp:131] Top shape: (1)
I0428 20:17:25.957962   866 net.cpp:139] Memory required for data: 15070804
I0428 20:17:25.957965   866 layer_factory.hpp:77] Creating layer loss
I0428 20:17:25.957970   866 net.cpp:86] Creating Layer loss
I0428 20:17:25.957973   866 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:25.957978   866 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:25.957984   866 net.cpp:382] loss -> loss
I0428 20:17:25.957991   866 layer_factory.hpp:77] Creating layer loss
I0428 20:17:25.958261   866 net.cpp:124] Setting up loss
I0428 20:17:25.958271   866 net.cpp:131] Top shape: (1)
I0428 20:17:25.958273   866 net.cpp:134]     with loss weight 1
I0428 20:17:25.958281   866 net.cpp:139] Memory required for data: 15070808
I0428 20:17:25.958286   866 net.cpp:200] loss needs backward computation.
I0428 20:17:25.958289   866 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:25.958293   866 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:25.958297   866 net.cpp:200] relu2 needs backward computation.
I0428 20:17:25.958300   866 net.cpp:200] ip2 needs backward computation.
I0428 20:17:25.958303   866 net.cpp:200] relu1 needs backward computation.
I0428 20:17:25.958307   866 net.cpp:200] ip1 needs backward computation.
I0428 20:17:25.958309   866 net.cpp:200] pool1 needs backward computation.
I0428 20:17:25.958312   866 net.cpp:200] conv1 needs backward computation.
I0428 20:17:25.958315   866 net.cpp:200] pool0 needs backward computation.
I0428 20:17:25.958318   866 net.cpp:200] conv0 needs backward computation.
I0428 20:17:25.958323   866 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:25.958326   866 net.cpp:202] mnist does not need backward computation.
I0428 20:17:25.958329   866 net.cpp:244] This network produces output accuracy
I0428 20:17:25.958333   866 net.cpp:244] This network produces output loss
I0428 20:17:25.958346   866 net.cpp:257] Network initialization done.
I0428 20:17:25.958386   866 solver.cpp:56] Solver scaffolding done.
I0428 20:17:25.958676   866 caffe.cpp:248] Starting Optimization
I0428 20:17:25.958683   866 solver.cpp:273] Solving LeNet
I0428 20:17:25.958685   866 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:25.958899   866 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:25.965873   866 blocking_queue.cpp:49] Waiting for data
I0428 20:17:26.035706   873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:26.036430   866 solver.cpp:398]     Test net output #0: accuracy = 0.0733
I0428 20:17:26.036464   866 solver.cpp:398]     Test net output #1: loss = 2.34568 (* 1 = 2.34568 loss)
I0428 20:17:26.040900   866 solver.cpp:219] Iteration 0 (-4.81889e-31 iter/s, 0.0821844s/100 iters), loss = 2.32238
I0428 20:17:26.040943   866 solver.cpp:238]     Train net output #0: loss = 2.32238 (* 1 = 2.32238 loss)
I0428 20:17:26.040956   866 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:26.152166   866 solver.cpp:219] Iteration 100 (899.196 iter/s, 0.11121s/100 iters), loss = 1.45871
I0428 20:17:26.152225   866 solver.cpp:238]     Train net output #0: loss = 1.45871 (* 1 = 1.45871 loss)
I0428 20:17:26.152230   866 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:26.264570   866 solver.cpp:219] Iteration 200 (890.058 iter/s, 0.112352s/100 iters), loss = 1.37877
I0428 20:17:26.264609   866 solver.cpp:238]     Train net output #0: loss = 1.37877 (* 1 = 1.37877 loss)
I0428 20:17:26.264614   866 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:26.379807   866 solver.cpp:219] Iteration 300 (868.032 iter/s, 0.115203s/100 iters), loss = 0.623799
I0428 20:17:26.379849   866 solver.cpp:238]     Train net output #0: loss = 0.623799 (* 1 = 0.623799 loss)
I0428 20:17:26.379855   866 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:26.490474   866 solver.cpp:219] Iteration 400 (903.908 iter/s, 0.110631s/100 iters), loss = 0.728258
I0428 20:17:26.490514   866 solver.cpp:238]     Train net output #0: loss = 0.728258 (* 1 = 0.728258 loss)
I0428 20:17:26.490520   866 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:26.612335   866 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:26.687824   873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:26.688529   866 solver.cpp:398]     Test net output #0: accuracy = 0.9284
I0428 20:17:26.688565   866 solver.cpp:398]     Test net output #1: loss = 0.413318 (* 1 = 0.413318 loss)
I0428 20:17:26.689795   866 solver.cpp:219] Iteration 500 (501.802 iter/s, 0.199282s/100 iters), loss = 0.430194
I0428 20:17:26.689833   866 solver.cpp:238]     Train net output #0: loss = 0.430194 (* 1 = 0.430194 loss)
I0428 20:17:26.689854   866 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:26.816233   866 solver.cpp:219] Iteration 600 (791.109 iter/s, 0.126405s/100 iters), loss = 0.339967
I0428 20:17:26.816273   866 solver.cpp:238]     Train net output #0: loss = 0.339967 (* 1 = 0.339967 loss)
I0428 20:17:26.816279   866 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:26.929196   866 solver.cpp:219] Iteration 700 (885.642 iter/s, 0.112912s/100 iters), loss = 0.448624
I0428 20:17:26.929236   866 solver.cpp:238]     Train net output #0: loss = 0.448624 (* 1 = 0.448624 loss)
I0428 20:17:26.929241   866 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:27.050930   866 solver.cpp:219] Iteration 800 (821.711 iter/s, 0.121697s/100 iters), loss = 0.444505
I0428 20:17:27.050969   866 solver.cpp:238]     Train net output #0: loss = 0.444505 (* 1 = 0.444505 loss)
I0428 20:17:27.050976   866 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:27.168344   866 solver.cpp:219] Iteration 900 (851.941 iter/s, 0.117379s/100 iters), loss = 0.353427
I0428 20:17:27.168386   866 solver.cpp:238]     Train net output #0: loss = 0.353427 (* 1 = 0.353427 loss)
I0428 20:17:27.168393   866 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:27.211525   872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:27.293037   866 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:27.294126   866 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:27.294910   866 solver.cpp:311] Iteration 1000, loss = 0.142584
I0428 20:17:27.294924   866 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:27.371134   873 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:27.371852   866 solver.cpp:398]     Test net output #0: accuracy = 0.9663
I0428 20:17:27.371881   866 solver.cpp:398]     Test net output #1: loss = 0.117546 (* 1 = 0.117546 loss)
I0428 20:17:27.371886   866 solver.cpp:316] Optimization Done.
I0428 20:17:27.371889   866 caffe.cpp:259] Optimization Done.
