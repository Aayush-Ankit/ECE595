I0428 20:25:25.428316  2592 caffe.cpp:218] Using GPUs 0
I0428 20:25:25.464889  2592 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:25:25.987970  2592 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1454.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:25:25.988116  2592 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1454.prototxt
I0428 20:25:25.988481  2592 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:25:25.988498  2592 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:25:25.988590  2592 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:25.988656  2592 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:25.988754  2592 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:25:25.988777  2592 net.cpp:86] Creating Layer mnist
I0428 20:25:25.988785  2592 net.cpp:382] mnist -> data
I0428 20:25:25.988807  2592 net.cpp:382] mnist -> label
I0428 20:25:25.989928  2592 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:25:25.992382  2592 net.cpp:124] Setting up mnist
I0428 20:25:25.992399  2592 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:25:25.992406  2592 net.cpp:131] Top shape: 64 (64)
I0428 20:25:25.992410  2592 net.cpp:139] Memory required for data: 200960
I0428 20:25:25.992418  2592 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:25.992432  2592 net.cpp:86] Creating Layer conv0
I0428 20:25:25.992439  2592 net.cpp:408] conv0 <- data
I0428 20:25:25.992449  2592 net.cpp:382] conv0 -> conv0
I0428 20:25:26.288367  2592 net.cpp:124] Setting up conv0
I0428 20:25:26.288398  2592 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:25:26.288403  2592 net.cpp:139] Memory required for data: 14946560
I0428 20:25:26.288439  2592 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:26.288455  2592 net.cpp:86] Creating Layer pool0
I0428 20:25:26.288460  2592 net.cpp:408] pool0 <- conv0
I0428 20:25:26.288466  2592 net.cpp:382] pool0 -> pool0
I0428 20:25:26.288524  2592 net.cpp:124] Setting up pool0
I0428 20:25:26.288533  2592 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:25:26.288537  2592 net.cpp:139] Memory required for data: 18632960
I0428 20:25:26.288542  2592 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:26.288553  2592 net.cpp:86] Creating Layer conv1
I0428 20:25:26.288558  2592 net.cpp:408] conv1 <- pool0
I0428 20:25:26.288563  2592 net.cpp:382] conv1 -> conv1
I0428 20:25:26.291724  2592 net.cpp:124] Setting up conv1
I0428 20:25:26.291743  2592 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:25:26.291748  2592 net.cpp:139] Memory required for data: 18665728
I0428 20:25:26.291759  2592 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:26.291767  2592 net.cpp:86] Creating Layer pool1
I0428 20:25:26.291771  2592 net.cpp:408] pool1 <- conv1
I0428 20:25:26.291777  2592 net.cpp:382] pool1 -> pool1
I0428 20:25:26.291821  2592 net.cpp:124] Setting up pool1
I0428 20:25:26.291832  2592 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:25:26.291836  2592 net.cpp:139] Memory required for data: 18673920
I0428 20:25:26.291839  2592 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:26.291848  2592 net.cpp:86] Creating Layer ip1
I0428 20:25:26.291851  2592 net.cpp:408] ip1 <- pool1
I0428 20:25:26.291857  2592 net.cpp:382] ip1 -> ip1
I0428 20:25:26.291991  2592 net.cpp:124] Setting up ip1
I0428 20:25:26.292001  2592 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:25:26.292003  2592 net.cpp:139] Memory required for data: 18686720
I0428 20:25:26.292012  2592 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:26.292018  2592 net.cpp:86] Creating Layer relu1
I0428 20:25:26.292022  2592 net.cpp:408] relu1 <- ip1
I0428 20:25:26.292027  2592 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:26.292227  2592 net.cpp:124] Setting up relu1
I0428 20:25:26.292238  2592 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:25:26.292243  2592 net.cpp:139] Memory required for data: 18699520
I0428 20:25:26.292246  2592 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:26.292254  2592 net.cpp:86] Creating Layer ip2
I0428 20:25:26.292258  2592 net.cpp:408] ip2 <- ip1
I0428 20:25:26.292263  2592 net.cpp:382] ip2 -> ip2
I0428 20:25:26.292382  2592 net.cpp:124] Setting up ip2
I0428 20:25:26.292389  2592 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:26.292393  2592 net.cpp:139] Memory required for data: 18702080
I0428 20:25:26.292400  2592 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:26.292407  2592 net.cpp:86] Creating Layer relu2
I0428 20:25:26.292410  2592 net.cpp:408] relu2 <- ip2
I0428 20:25:26.292415  2592 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:26.293269  2592 net.cpp:124] Setting up relu2
I0428 20:25:26.293285  2592 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:26.293290  2592 net.cpp:139] Memory required for data: 18704640
I0428 20:25:26.293294  2592 layer_factory.hpp:77] Creating layer loss
I0428 20:25:26.293303  2592 net.cpp:86] Creating Layer loss
I0428 20:25:26.293306  2592 net.cpp:408] loss <- ip2
I0428 20:25:26.293311  2592 net.cpp:408] loss <- label
I0428 20:25:26.293318  2592 net.cpp:382] loss -> loss
I0428 20:25:26.293341  2592 layer_factory.hpp:77] Creating layer loss
I0428 20:25:26.293614  2592 net.cpp:124] Setting up loss
I0428 20:25:26.293627  2592 net.cpp:131] Top shape: (1)
I0428 20:25:26.293632  2592 net.cpp:134]     with loss weight 1
I0428 20:25:26.293648  2592 net.cpp:139] Memory required for data: 18704644
I0428 20:25:26.293651  2592 net.cpp:200] loss needs backward computation.
I0428 20:25:26.293656  2592 net.cpp:200] relu2 needs backward computation.
I0428 20:25:26.293660  2592 net.cpp:200] ip2 needs backward computation.
I0428 20:25:26.293663  2592 net.cpp:200] relu1 needs backward computation.
I0428 20:25:26.293668  2592 net.cpp:200] ip1 needs backward computation.
I0428 20:25:26.293684  2592 net.cpp:200] pool1 needs backward computation.
I0428 20:25:26.293687  2592 net.cpp:200] conv1 needs backward computation.
I0428 20:25:26.293691  2592 net.cpp:200] pool0 needs backward computation.
I0428 20:25:26.293695  2592 net.cpp:200] conv0 needs backward computation.
I0428 20:25:26.293699  2592 net.cpp:202] mnist does not need backward computation.
I0428 20:25:26.293704  2592 net.cpp:244] This network produces output loss
I0428 20:25:26.293714  2592 net.cpp:257] Network initialization done.
I0428 20:25:26.294054  2592 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1454.prototxt
I0428 20:25:26.294085  2592 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:25:26.294183  2592 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:26.294260  2592 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:26.294308  2592 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:25:26.294322  2592 net.cpp:86] Creating Layer mnist
I0428 20:25:26.294328  2592 net.cpp:382] mnist -> data
I0428 20:25:26.294337  2592 net.cpp:382] mnist -> label
I0428 20:25:26.294435  2592 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:25:26.296833  2592 net.cpp:124] Setting up mnist
I0428 20:25:26.296849  2592 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:25:26.296855  2592 net.cpp:131] Top shape: 100 (100)
I0428 20:25:26.296859  2592 net.cpp:139] Memory required for data: 314000
I0428 20:25:26.296864  2592 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:25:26.296877  2592 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:25:26.296881  2592 net.cpp:408] label_mnist_1_split <- label
I0428 20:25:26.296887  2592 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:25:26.296895  2592 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:25:26.296958  2592 net.cpp:124] Setting up label_mnist_1_split
I0428 20:25:26.296967  2592 net.cpp:131] Top shape: 100 (100)
I0428 20:25:26.296970  2592 net.cpp:131] Top shape: 100 (100)
I0428 20:25:26.296974  2592 net.cpp:139] Memory required for data: 314800
I0428 20:25:26.296977  2592 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:26.296988  2592 net.cpp:86] Creating Layer conv0
I0428 20:25:26.296991  2592 net.cpp:408] conv0 <- data
I0428 20:25:26.296998  2592 net.cpp:382] conv0 -> conv0
I0428 20:25:26.298895  2592 net.cpp:124] Setting up conv0
I0428 20:25:26.298913  2592 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:25:26.298918  2592 net.cpp:139] Memory required for data: 23354800
I0428 20:25:26.298928  2592 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:26.298936  2592 net.cpp:86] Creating Layer pool0
I0428 20:25:26.298940  2592 net.cpp:408] pool0 <- conv0
I0428 20:25:26.298946  2592 net.cpp:382] pool0 -> pool0
I0428 20:25:26.298988  2592 net.cpp:124] Setting up pool0
I0428 20:25:26.298995  2592 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:25:26.298998  2592 net.cpp:139] Memory required for data: 29114800
I0428 20:25:26.299002  2592 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:26.299012  2592 net.cpp:86] Creating Layer conv1
I0428 20:25:26.299016  2592 net.cpp:408] conv1 <- pool0
I0428 20:25:26.299022  2592 net.cpp:382] conv1 -> conv1
I0428 20:25:26.300742  2592 net.cpp:124] Setting up conv1
I0428 20:25:26.300760  2592 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:25:26.300765  2592 net.cpp:139] Memory required for data: 29166000
I0428 20:25:26.300776  2592 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:26.300782  2592 net.cpp:86] Creating Layer pool1
I0428 20:25:26.300786  2592 net.cpp:408] pool1 <- conv1
I0428 20:25:26.300793  2592 net.cpp:382] pool1 -> pool1
I0428 20:25:26.300845  2592 net.cpp:124] Setting up pool1
I0428 20:25:26.300853  2592 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:25:26.300856  2592 net.cpp:139] Memory required for data: 29178800
I0428 20:25:26.300860  2592 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:26.300874  2592 net.cpp:86] Creating Layer ip1
I0428 20:25:26.300879  2592 net.cpp:408] ip1 <- pool1
I0428 20:25:26.300884  2592 net.cpp:382] ip1 -> ip1
I0428 20:25:26.301007  2592 net.cpp:124] Setting up ip1
I0428 20:25:26.301017  2592 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:25:26.301021  2592 net.cpp:139] Memory required for data: 29198800
I0428 20:25:26.301030  2592 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:26.301038  2592 net.cpp:86] Creating Layer relu1
I0428 20:25:26.301041  2592 net.cpp:408] relu1 <- ip1
I0428 20:25:26.301048  2592 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:26.301229  2592 net.cpp:124] Setting up relu1
I0428 20:25:26.301242  2592 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:25:26.301247  2592 net.cpp:139] Memory required for data: 29218800
I0428 20:25:26.301250  2592 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:26.301259  2592 net.cpp:86] Creating Layer ip2
I0428 20:25:26.301262  2592 net.cpp:408] ip2 <- ip1
I0428 20:25:26.301268  2592 net.cpp:382] ip2 -> ip2
I0428 20:25:26.301385  2592 net.cpp:124] Setting up ip2
I0428 20:25:26.301395  2592 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:26.301399  2592 net.cpp:139] Memory required for data: 29222800
I0428 20:25:26.301406  2592 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:26.301411  2592 net.cpp:86] Creating Layer relu2
I0428 20:25:26.301415  2592 net.cpp:408] relu2 <- ip2
I0428 20:25:26.301420  2592 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:26.301690  2592 net.cpp:124] Setting up relu2
I0428 20:25:26.301702  2592 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:26.301704  2592 net.cpp:139] Memory required for data: 29226800
I0428 20:25:26.301708  2592 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:25:26.301714  2592 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:25:26.301718  2592 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:25:26.301724  2592 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:25:26.301743  2592 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:25:26.301786  2592 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:25:26.301795  2592 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:26.301800  2592 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:26.301803  2592 net.cpp:139] Memory required for data: 29234800
I0428 20:25:26.301806  2592 layer_factory.hpp:77] Creating layer accuracy
I0428 20:25:26.301812  2592 net.cpp:86] Creating Layer accuracy
I0428 20:25:26.301816  2592 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:25:26.301822  2592 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:25:26.301827  2592 net.cpp:382] accuracy -> accuracy
I0428 20:25:26.301836  2592 net.cpp:124] Setting up accuracy
I0428 20:25:26.301839  2592 net.cpp:131] Top shape: (1)
I0428 20:25:26.301842  2592 net.cpp:139] Memory required for data: 29234804
I0428 20:25:26.301846  2592 layer_factory.hpp:77] Creating layer loss
I0428 20:25:26.301851  2592 net.cpp:86] Creating Layer loss
I0428 20:25:26.301856  2592 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:25:26.301859  2592 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:25:26.301864  2592 net.cpp:382] loss -> loss
I0428 20:25:26.301872  2592 layer_factory.hpp:77] Creating layer loss
I0428 20:25:26.302134  2592 net.cpp:124] Setting up loss
I0428 20:25:26.302145  2592 net.cpp:131] Top shape: (1)
I0428 20:25:26.302150  2592 net.cpp:134]     with loss weight 1
I0428 20:25:26.302158  2592 net.cpp:139] Memory required for data: 29234808
I0428 20:25:26.302163  2592 net.cpp:200] loss needs backward computation.
I0428 20:25:26.302168  2592 net.cpp:202] accuracy does not need backward computation.
I0428 20:25:26.302173  2592 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:25:26.302176  2592 net.cpp:200] relu2 needs backward computation.
I0428 20:25:26.302181  2592 net.cpp:200] ip2 needs backward computation.
I0428 20:25:26.302184  2592 net.cpp:200] relu1 needs backward computation.
I0428 20:25:26.302187  2592 net.cpp:200] ip1 needs backward computation.
I0428 20:25:26.302191  2592 net.cpp:200] pool1 needs backward computation.
I0428 20:25:26.302196  2592 net.cpp:200] conv1 needs backward computation.
I0428 20:25:26.302199  2592 net.cpp:200] pool0 needs backward computation.
I0428 20:25:26.302203  2592 net.cpp:200] conv0 needs backward computation.
I0428 20:25:26.302208  2592 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:25:26.302212  2592 net.cpp:202] mnist does not need backward computation.
I0428 20:25:26.302215  2592 net.cpp:244] This network produces output accuracy
I0428 20:25:26.302219  2592 net.cpp:244] This network produces output loss
I0428 20:25:26.302232  2592 net.cpp:257] Network initialization done.
I0428 20:25:26.302275  2592 solver.cpp:56] Solver scaffolding done.
I0428 20:25:26.302603  2592 caffe.cpp:248] Starting Optimization
I0428 20:25:26.302608  2592 solver.cpp:273] Solving LeNet
I0428 20:25:26.302611  2592 solver.cpp:274] Learning Rate Policy: inv
I0428 20:25:26.303544  2592 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:25:26.398099  2600 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:26.400532  2592 solver.cpp:398]     Test net output #0: accuracy = 0.1018
I0428 20:25:26.400557  2592 solver.cpp:398]     Test net output #1: loss = 2.31701 (* 1 = 2.31701 loss)
I0428 20:25:26.405297  2592 solver.cpp:219] Iteration 0 (-3.028e-31 iter/s, 0.102645s/100 iters), loss = 2.30787
I0428 20:25:26.405326  2592 solver.cpp:238]     Train net output #0: loss = 2.30787 (* 1 = 2.30787 loss)
I0428 20:25:26.405340  2592 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:25:26.610119  2592 solver.cpp:219] Iteration 100 (488.352 iter/s, 0.20477s/100 iters), loss = 0.447527
I0428 20:25:26.610159  2592 solver.cpp:238]     Train net output #0: loss = 0.447527 (* 1 = 0.447527 loss)
I0428 20:25:26.610169  2592 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:25:26.809051  2592 solver.cpp:219] Iteration 200 (502.831 iter/s, 0.198874s/100 iters), loss = 0.561775
I0428 20:25:26.809123  2592 solver.cpp:238]     Train net output #0: loss = 0.561775 (* 1 = 0.561775 loss)
I0428 20:25:26.809136  2592 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:25:27.016499  2592 solver.cpp:219] Iteration 300 (482.255 iter/s, 0.207359s/100 iters), loss = 0.490757
I0428 20:25:27.016553  2592 solver.cpp:238]     Train net output #0: loss = 0.490757 (* 1 = 0.490757 loss)
I0428 20:25:27.016567  2592 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:25:27.226840  2592 solver.cpp:219] Iteration 400 (475.574 iter/s, 0.210272s/100 iters), loss = 0.61026
I0428 20:25:27.226886  2592 solver.cpp:238]     Train net output #0: loss = 0.61026 (* 1 = 0.61026 loss)
I0428 20:25:27.226898  2592 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:25:27.428851  2592 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:25:27.524405  2600 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:27.525841  2592 solver.cpp:398]     Test net output #0: accuracy = 0.9075
I0428 20:25:27.525876  2592 solver.cpp:398]     Test net output #1: loss = 0.413282 (* 1 = 0.413282 loss)
I0428 20:25:27.527835  2592 solver.cpp:219] Iteration 500 (332.301 iter/s, 0.300932s/100 iters), loss = 0.417193
I0428 20:25:27.527863  2592 solver.cpp:238]     Train net output #0: loss = 0.417194 (* 1 = 0.417194 loss)
I0428 20:25:27.527871  2592 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:25:27.730890  2592 solver.cpp:219] Iteration 600 (492.596 iter/s, 0.203006s/100 iters), loss = 0.277084
I0428 20:25:27.730947  2592 solver.cpp:238]     Train net output #0: loss = 0.277084 (* 1 = 0.277084 loss)
I0428 20:25:27.730959  2592 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:25:27.941897  2592 solver.cpp:219] Iteration 700 (474.083 iter/s, 0.210934s/100 iters), loss = 0.46797
I0428 20:25:27.941954  2592 solver.cpp:238]     Train net output #0: loss = 0.467971 (* 1 = 0.467971 loss)
I0428 20:25:27.941968  2592 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:25:28.157874  2592 solver.cpp:219] Iteration 800 (463.168 iter/s, 0.215904s/100 iters), loss = 0.431762
I0428 20:25:28.157928  2592 solver.cpp:238]     Train net output #0: loss = 0.431762 (* 1 = 0.431762 loss)
I0428 20:25:28.157941  2592 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:25:28.373963  2592 solver.cpp:219] Iteration 900 (462.927 iter/s, 0.216017s/100 iters), loss = 0.447597
I0428 20:25:28.374016  2592 solver.cpp:238]     Train net output #0: loss = 0.447597 (* 1 = 0.447597 loss)
I0428 20:25:28.374028  2592 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:25:28.446373  2599 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:28.589599  2592 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:25:28.591346  2592 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:25:28.592566  2592 solver.cpp:311] Iteration 1000, loss = 0.238194
I0428 20:25:28.592598  2592 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:25:28.693127  2600 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:28.695650  2592 solver.cpp:398]     Test net output #0: accuracy = 0.9486
I0428 20:25:28.695688  2592 solver.cpp:398]     Test net output #1: loss = 0.160368 (* 1 = 0.160368 loss)
I0428 20:25:28.695703  2592 solver.cpp:316] Optimization Done.
I0428 20:25:28.695709  2592 caffe.cpp:259] Optimization Done.
