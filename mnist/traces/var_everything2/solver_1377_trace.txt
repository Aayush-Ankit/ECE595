I0428 20:21:05.959749  1692 caffe.cpp:218] Using GPUs 0
I0428 20:21:05.997339  1692 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:21:06.454500  1692 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1377.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:21:06.454635  1692 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1377.prototxt
I0428 20:21:06.454975  1692 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:21:06.454991  1692 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:21:06.455072  1692 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:21:06.455137  1692 layer_factory.hpp:77] Creating layer mnist
I0428 20:21:06.455221  1692 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:21:06.455257  1692 net.cpp:86] Creating Layer mnist
I0428 20:21:06.455263  1692 net.cpp:382] mnist -> data
I0428 20:21:06.455281  1692 net.cpp:382] mnist -> label
I0428 20:21:06.456176  1692 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:21:06.458427  1692 net.cpp:124] Setting up mnist
I0428 20:21:06.458442  1692 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:21:06.458459  1692 net.cpp:131] Top shape: 64 (64)
I0428 20:21:06.458462  1692 net.cpp:139] Memory required for data: 200960
I0428 20:21:06.458468  1692 layer_factory.hpp:77] Creating layer conv0
I0428 20:21:06.458498  1692 net.cpp:86] Creating Layer conv0
I0428 20:21:06.458515  1692 net.cpp:408] conv0 <- data
I0428 20:21:06.458541  1692 net.cpp:382] conv0 -> conv0
I0428 20:21:06.690768  1692 net.cpp:124] Setting up conv0
I0428 20:21:06.690793  1692 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:21:06.690798  1692 net.cpp:139] Memory required for data: 7573760
I0428 20:21:06.690810  1692 layer_factory.hpp:77] Creating layer pool0
I0428 20:21:06.690822  1692 net.cpp:86] Creating Layer pool0
I0428 20:21:06.690826  1692 net.cpp:408] pool0 <- conv0
I0428 20:21:06.690831  1692 net.cpp:382] pool0 -> pool0
I0428 20:21:06.690891  1692 net.cpp:124] Setting up pool0
I0428 20:21:06.690896  1692 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:21:06.690899  1692 net.cpp:139] Memory required for data: 9416960
I0428 20:21:06.690902  1692 layer_factory.hpp:77] Creating layer conv1
I0428 20:21:06.690912  1692 net.cpp:86] Creating Layer conv1
I0428 20:21:06.690915  1692 net.cpp:408] conv1 <- pool0
I0428 20:21:06.690919  1692 net.cpp:382] conv1 -> conv1
I0428 20:21:06.693199  1692 net.cpp:124] Setting up conv1
I0428 20:21:06.693213  1692 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:21:06.693217  1692 net.cpp:139] Memory required for data: 10236160
I0428 20:21:06.693225  1692 layer_factory.hpp:77] Creating layer pool1
I0428 20:21:06.693233  1692 net.cpp:86] Creating Layer pool1
I0428 20:21:06.693235  1692 net.cpp:408] pool1 <- conv1
I0428 20:21:06.693256  1692 net.cpp:382] pool1 -> pool1
I0428 20:21:06.693290  1692 net.cpp:124] Setting up pool1
I0428 20:21:06.693295  1692 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:21:06.693297  1692 net.cpp:139] Memory required for data: 10440960
I0428 20:21:06.693300  1692 layer_factory.hpp:77] Creating layer ip1
I0428 20:21:06.693307  1692 net.cpp:86] Creating Layer ip1
I0428 20:21:06.693310  1692 net.cpp:408] ip1 <- pool1
I0428 20:21:06.693315  1692 net.cpp:382] ip1 -> ip1
I0428 20:21:06.694319  1692 net.cpp:124] Setting up ip1
I0428 20:21:06.694331  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.694334  1692 net.cpp:139] Memory required for data: 10443520
I0428 20:21:06.694342  1692 layer_factory.hpp:77] Creating layer relu1
I0428 20:21:06.694349  1692 net.cpp:86] Creating Layer relu1
I0428 20:21:06.694352  1692 net.cpp:408] relu1 <- ip1
I0428 20:21:06.694356  1692 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:21:06.694515  1692 net.cpp:124] Setting up relu1
I0428 20:21:06.694524  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.694526  1692 net.cpp:139] Memory required for data: 10446080
I0428 20:21:06.694530  1692 layer_factory.hpp:77] Creating layer ip2
I0428 20:21:06.694536  1692 net.cpp:86] Creating Layer ip2
I0428 20:21:06.694555  1692 net.cpp:408] ip2 <- ip1
I0428 20:21:06.694561  1692 net.cpp:382] ip2 -> ip2
I0428 20:21:06.694653  1692 net.cpp:124] Setting up ip2
I0428 20:21:06.694660  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.694664  1692 net.cpp:139] Memory required for data: 10448640
I0428 20:21:06.694684  1692 layer_factory.hpp:77] Creating layer relu2
I0428 20:21:06.694689  1692 net.cpp:86] Creating Layer relu2
I0428 20:21:06.694692  1692 net.cpp:408] relu2 <- ip2
I0428 20:21:06.694696  1692 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:21:06.695493  1692 net.cpp:124] Setting up relu2
I0428 20:21:06.695507  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.695509  1692 net.cpp:139] Memory required for data: 10451200
I0428 20:21:06.695513  1692 layer_factory.hpp:77] Creating layer ip3
I0428 20:21:06.695519  1692 net.cpp:86] Creating Layer ip3
I0428 20:21:06.695523  1692 net.cpp:408] ip3 <- ip2
I0428 20:21:06.695528  1692 net.cpp:382] ip3 -> ip3
I0428 20:21:06.695650  1692 net.cpp:124] Setting up ip3
I0428 20:21:06.695657  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.695660  1692 net.cpp:139] Memory required for data: 10453760
I0428 20:21:06.695668  1692 layer_factory.hpp:77] Creating layer relu3
I0428 20:21:06.695672  1692 net.cpp:86] Creating Layer relu3
I0428 20:21:06.695675  1692 net.cpp:408] relu3 <- ip3
I0428 20:21:06.695679  1692 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:21:06.695842  1692 net.cpp:124] Setting up relu3
I0428 20:21:06.695850  1692 net.cpp:131] Top shape: 64 10 (640)
I0428 20:21:06.695853  1692 net.cpp:139] Memory required for data: 10456320
I0428 20:21:06.695857  1692 layer_factory.hpp:77] Creating layer loss
I0428 20:21:06.695861  1692 net.cpp:86] Creating Layer loss
I0428 20:21:06.695864  1692 net.cpp:408] loss <- ip3
I0428 20:21:06.695868  1692 net.cpp:408] loss <- label
I0428 20:21:06.695874  1692 net.cpp:382] loss -> loss
I0428 20:21:06.695893  1692 layer_factory.hpp:77] Creating layer loss
I0428 20:21:06.696157  1692 net.cpp:124] Setting up loss
I0428 20:21:06.696167  1692 net.cpp:131] Top shape: (1)
I0428 20:21:06.696171  1692 net.cpp:134]     with loss weight 1
I0428 20:21:06.696185  1692 net.cpp:139] Memory required for data: 10456324
I0428 20:21:06.696188  1692 net.cpp:200] loss needs backward computation.
I0428 20:21:06.696192  1692 net.cpp:200] relu3 needs backward computation.
I0428 20:21:06.696195  1692 net.cpp:200] ip3 needs backward computation.
I0428 20:21:06.696198  1692 net.cpp:200] relu2 needs backward computation.
I0428 20:21:06.696202  1692 net.cpp:200] ip2 needs backward computation.
I0428 20:21:06.696204  1692 net.cpp:200] relu1 needs backward computation.
I0428 20:21:06.696207  1692 net.cpp:200] ip1 needs backward computation.
I0428 20:21:06.696209  1692 net.cpp:200] pool1 needs backward computation.
I0428 20:21:06.696213  1692 net.cpp:200] conv1 needs backward computation.
I0428 20:21:06.696216  1692 net.cpp:200] pool0 needs backward computation.
I0428 20:21:06.696219  1692 net.cpp:200] conv0 needs backward computation.
I0428 20:21:06.696223  1692 net.cpp:202] mnist does not need backward computation.
I0428 20:21:06.696225  1692 net.cpp:244] This network produces output loss
I0428 20:21:06.696234  1692 net.cpp:257] Network initialization done.
I0428 20:21:06.696599  1692 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1377.prototxt
I0428 20:21:06.696625  1692 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:21:06.696715  1692 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:21:06.696841  1692 layer_factory.hpp:77] Creating layer mnist
I0428 20:21:06.696888  1692 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:21:06.696900  1692 net.cpp:86] Creating Layer mnist
I0428 20:21:06.696907  1692 net.cpp:382] mnist -> data
I0428 20:21:06.696913  1692 net.cpp:382] mnist -> label
I0428 20:21:06.697019  1692 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:21:06.699160  1692 net.cpp:124] Setting up mnist
I0428 20:21:06.699174  1692 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:21:06.699209  1692 net.cpp:131] Top shape: 100 (100)
I0428 20:21:06.699214  1692 net.cpp:139] Memory required for data: 314000
I0428 20:21:06.699218  1692 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:21:06.699239  1692 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:21:06.699242  1692 net.cpp:408] label_mnist_1_split <- label
I0428 20:21:06.699246  1692 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:21:06.699252  1692 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:21:06.699362  1692 net.cpp:124] Setting up label_mnist_1_split
I0428 20:21:06.699370  1692 net.cpp:131] Top shape: 100 (100)
I0428 20:21:06.699374  1692 net.cpp:131] Top shape: 100 (100)
I0428 20:21:06.699376  1692 net.cpp:139] Memory required for data: 314800
I0428 20:21:06.699379  1692 layer_factory.hpp:77] Creating layer conv0
I0428 20:21:06.699388  1692 net.cpp:86] Creating Layer conv0
I0428 20:21:06.699393  1692 net.cpp:408] conv0 <- data
I0428 20:21:06.699398  1692 net.cpp:382] conv0 -> conv0
I0428 20:21:06.700984  1692 net.cpp:124] Setting up conv0
I0428 20:21:06.700997  1692 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:21:06.701001  1692 net.cpp:139] Memory required for data: 11834800
I0428 20:21:06.701017  1692 layer_factory.hpp:77] Creating layer pool0
I0428 20:21:06.701040  1692 net.cpp:86] Creating Layer pool0
I0428 20:21:06.701043  1692 net.cpp:408] pool0 <- conv0
I0428 20:21:06.701050  1692 net.cpp:382] pool0 -> pool0
I0428 20:21:06.701086  1692 net.cpp:124] Setting up pool0
I0428 20:21:06.701092  1692 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:21:06.701094  1692 net.cpp:139] Memory required for data: 14714800
I0428 20:21:06.701097  1692 layer_factory.hpp:77] Creating layer conv1
I0428 20:21:06.701122  1692 net.cpp:86] Creating Layer conv1
I0428 20:21:06.701125  1692 net.cpp:408] conv1 <- pool0
I0428 20:21:06.701131  1692 net.cpp:382] conv1 -> conv1
I0428 20:21:06.703073  1692 net.cpp:124] Setting up conv1
I0428 20:21:06.703088  1692 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:21:06.703097  1692 net.cpp:139] Memory required for data: 15994800
I0428 20:21:06.703106  1692 layer_factory.hpp:77] Creating layer pool1
I0428 20:21:06.703111  1692 net.cpp:86] Creating Layer pool1
I0428 20:21:06.703115  1692 net.cpp:408] pool1 <- conv1
I0428 20:21:06.703125  1692 net.cpp:382] pool1 -> pool1
I0428 20:21:06.703177  1692 net.cpp:124] Setting up pool1
I0428 20:21:06.703188  1692 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:21:06.703191  1692 net.cpp:139] Memory required for data: 16314800
I0428 20:21:06.703193  1692 layer_factory.hpp:77] Creating layer ip1
I0428 20:21:06.703200  1692 net.cpp:86] Creating Layer ip1
I0428 20:21:06.703203  1692 net.cpp:408] ip1 <- pool1
I0428 20:21:06.703207  1692 net.cpp:382] ip1 -> ip1
I0428 20:21:06.703377  1692 net.cpp:124] Setting up ip1
I0428 20:21:06.703387  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.703398  1692 net.cpp:139] Memory required for data: 16318800
I0428 20:21:06.703407  1692 layer_factory.hpp:77] Creating layer relu1
I0428 20:21:06.703411  1692 net.cpp:86] Creating Layer relu1
I0428 20:21:06.703415  1692 net.cpp:408] relu1 <- ip1
I0428 20:21:06.703419  1692 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:21:06.703595  1692 net.cpp:124] Setting up relu1
I0428 20:21:06.703608  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.703610  1692 net.cpp:139] Memory required for data: 16322800
I0428 20:21:06.703613  1692 layer_factory.hpp:77] Creating layer ip2
I0428 20:21:06.703620  1692 net.cpp:86] Creating Layer ip2
I0428 20:21:06.703624  1692 net.cpp:408] ip2 <- ip1
I0428 20:21:06.703650  1692 net.cpp:382] ip2 -> ip2
I0428 20:21:06.703747  1692 net.cpp:124] Setting up ip2
I0428 20:21:06.703753  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.703757  1692 net.cpp:139] Memory required for data: 16326800
I0428 20:21:06.703761  1692 layer_factory.hpp:77] Creating layer relu2
I0428 20:21:06.703766  1692 net.cpp:86] Creating Layer relu2
I0428 20:21:06.703768  1692 net.cpp:408] relu2 <- ip2
I0428 20:21:06.703774  1692 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:21:06.703922  1692 net.cpp:124] Setting up relu2
I0428 20:21:06.703930  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.703933  1692 net.cpp:139] Memory required for data: 16330800
I0428 20:21:06.703943  1692 layer_factory.hpp:77] Creating layer ip3
I0428 20:21:06.703948  1692 net.cpp:86] Creating Layer ip3
I0428 20:21:06.703949  1692 net.cpp:408] ip3 <- ip2
I0428 20:21:06.703955  1692 net.cpp:382] ip3 -> ip3
I0428 20:21:06.704054  1692 net.cpp:124] Setting up ip3
I0428 20:21:06.704061  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.704064  1692 net.cpp:139] Memory required for data: 16334800
I0428 20:21:06.704071  1692 layer_factory.hpp:77] Creating layer relu3
I0428 20:21:06.704075  1692 net.cpp:86] Creating Layer relu3
I0428 20:21:06.704078  1692 net.cpp:408] relu3 <- ip3
I0428 20:21:06.704089  1692 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:21:06.704918  1692 net.cpp:124] Setting up relu3
I0428 20:21:06.704931  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.704934  1692 net.cpp:139] Memory required for data: 16338800
I0428 20:21:06.704938  1692 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:21:06.704944  1692 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:21:06.704947  1692 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:21:06.704952  1692 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:21:06.704959  1692 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:21:06.705006  1692 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:21:06.705011  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.705015  1692 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:21:06.705018  1692 net.cpp:139] Memory required for data: 16346800
I0428 20:21:06.705020  1692 layer_factory.hpp:77] Creating layer accuracy
I0428 20:21:06.705025  1692 net.cpp:86] Creating Layer accuracy
I0428 20:21:06.705029  1692 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:21:06.705032  1692 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:21:06.705039  1692 net.cpp:382] accuracy -> accuracy
I0428 20:21:06.705044  1692 net.cpp:124] Setting up accuracy
I0428 20:21:06.705049  1692 net.cpp:131] Top shape: (1)
I0428 20:21:06.705051  1692 net.cpp:139] Memory required for data: 16346804
I0428 20:21:06.705054  1692 layer_factory.hpp:77] Creating layer loss
I0428 20:21:06.705059  1692 net.cpp:86] Creating Layer loss
I0428 20:21:06.705061  1692 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:21:06.705065  1692 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:21:06.705070  1692 net.cpp:382] loss -> loss
I0428 20:21:06.705076  1692 layer_factory.hpp:77] Creating layer loss
I0428 20:21:06.705360  1692 net.cpp:124] Setting up loss
I0428 20:21:06.705385  1692 net.cpp:131] Top shape: (1)
I0428 20:21:06.705389  1692 net.cpp:134]     with loss weight 1
I0428 20:21:06.705405  1692 net.cpp:139] Memory required for data: 16346808
I0428 20:21:06.705409  1692 net.cpp:200] loss needs backward computation.
I0428 20:21:06.705412  1692 net.cpp:202] accuracy does not need backward computation.
I0428 20:21:06.705428  1692 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:21:06.705431  1692 net.cpp:200] relu3 needs backward computation.
I0428 20:21:06.705433  1692 net.cpp:200] ip3 needs backward computation.
I0428 20:21:06.705437  1692 net.cpp:200] relu2 needs backward computation.
I0428 20:21:06.705440  1692 net.cpp:200] ip2 needs backward computation.
I0428 20:21:06.705443  1692 net.cpp:200] relu1 needs backward computation.
I0428 20:21:06.705446  1692 net.cpp:200] ip1 needs backward computation.
I0428 20:21:06.705449  1692 net.cpp:200] pool1 needs backward computation.
I0428 20:21:06.705451  1692 net.cpp:200] conv1 needs backward computation.
I0428 20:21:06.705454  1692 net.cpp:200] pool0 needs backward computation.
I0428 20:21:06.705468  1692 net.cpp:200] conv0 needs backward computation.
I0428 20:21:06.705472  1692 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:21:06.705476  1692 net.cpp:202] mnist does not need backward computation.
I0428 20:21:06.705478  1692 net.cpp:244] This network produces output accuracy
I0428 20:21:06.705482  1692 net.cpp:244] This network produces output loss
I0428 20:21:06.705492  1692 net.cpp:257] Network initialization done.
I0428 20:21:06.705550  1692 solver.cpp:56] Solver scaffolding done.
I0428 20:21:06.705909  1692 caffe.cpp:248] Starting Optimization
I0428 20:21:06.705916  1692 solver.cpp:273] Solving LeNet
I0428 20:21:06.705924  1692 solver.cpp:274] Learning Rate Policy: inv
I0428 20:21:06.706118  1692 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:21:06.712898  1692 blocking_queue.cpp:49] Waiting for data
I0428 20:21:06.791510  1699 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:21:06.792330  1692 solver.cpp:398]     Test net output #0: accuracy = 0.0868
I0428 20:21:06.792351  1692 solver.cpp:398]     Test net output #1: loss = 2.3026 (* 1 = 2.3026 loss)
I0428 20:21:06.797261  1692 solver.cpp:219] Iteration 0 (0 iter/s, 0.0913111s/100 iters), loss = 2.30266
I0428 20:21:06.797284  1692 solver.cpp:238]     Train net output #0: loss = 2.30266 (* 1 = 2.30266 loss)
I0428 20:21:06.797297  1692 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:21:06.959455  1692 solver.cpp:219] Iteration 100 (616.704 iter/s, 0.162152s/100 iters), loss = 0.65346
I0428 20:21:06.959483  1692 solver.cpp:238]     Train net output #0: loss = 0.65346 (* 1 = 0.65346 loss)
I0428 20:21:06.959491  1692 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:21:07.121134  1692 solver.cpp:219] Iteration 200 (618.661 iter/s, 0.161639s/100 iters), loss = 0.466062
I0428 20:21:07.121176  1692 solver.cpp:238]     Train net output #0: loss = 0.466062 (* 1 = 0.466062 loss)
I0428 20:21:07.121181  1692 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:21:07.274555  1692 solver.cpp:219] Iteration 300 (652.024 iter/s, 0.153369s/100 iters), loss = 0.299528
I0428 20:21:07.274595  1692 solver.cpp:238]     Train net output #0: loss = 0.299528 (* 1 = 0.299528 loss)
I0428 20:21:07.274600  1692 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:21:07.431002  1692 solver.cpp:219] Iteration 400 (639.342 iter/s, 0.156411s/100 iters), loss = 0.184405
I0428 20:21:07.431041  1692 solver.cpp:238]     Train net output #0: loss = 0.184405 (* 1 = 0.184405 loss)
I0428 20:21:07.431047  1692 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:21:07.597255  1692 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:21:07.677368  1699 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:21:07.678403  1692 solver.cpp:398]     Test net output #0: accuracy = 0.953
I0428 20:21:07.678438  1692 solver.cpp:398]     Test net output #1: loss = 0.161602 (* 1 = 0.161602 loss)
I0428 20:21:07.680037  1692 solver.cpp:219] Iteration 500 (401.62 iter/s, 0.248992s/100 iters), loss = 0.0690452
I0428 20:21:07.680073  1692 solver.cpp:238]     Train net output #0: loss = 0.0690453 (* 1 = 0.0690453 loss)
I0428 20:21:07.680078  1692 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:21:07.839867  1692 solver.cpp:219] Iteration 600 (625.846 iter/s, 0.159784s/100 iters), loss = 0.10221
I0428 20:21:07.839907  1692 solver.cpp:238]     Train net output #0: loss = 0.10221 (* 1 = 0.10221 loss)
I0428 20:21:07.839913  1692 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:21:08.002704  1692 solver.cpp:219] Iteration 700 (614.256 iter/s, 0.162799s/100 iters), loss = 0.13255
I0428 20:21:08.002733  1692 solver.cpp:238]     Train net output #0: loss = 0.13255 (* 1 = 0.13255 loss)
I0428 20:21:08.002741  1692 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:21:08.156966  1692 solver.cpp:219] Iteration 800 (648.426 iter/s, 0.15422s/100 iters), loss = 0.23793
I0428 20:21:08.157021  1692 solver.cpp:238]     Train net output #0: loss = 0.23793 (* 1 = 0.23793 loss)
I0428 20:21:08.157028  1692 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:21:08.315852  1692 solver.cpp:219] Iteration 900 (629.65 iter/s, 0.158818s/100 iters), loss = 0.19909
I0428 20:21:08.315891  1692 solver.cpp:238]     Train net output #0: loss = 0.19909 (* 1 = 0.19909 loss)
I0428 20:21:08.315897  1692 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:21:08.368981  1698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:21:08.476291  1692 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:21:08.478508  1692 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:21:08.479871  1692 solver.cpp:311] Iteration 1000, loss = 0.170049
I0428 20:21:08.479889  1692 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:21:08.559701  1699 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:21:08.560696  1692 solver.cpp:398]     Test net output #0: accuracy = 0.9678
I0428 20:21:08.560719  1692 solver.cpp:398]     Test net output #1: loss = 0.117758 (* 1 = 0.117758 loss)
I0428 20:21:08.560740  1692 solver.cpp:316] Optimization Done.
I0428 20:21:08.560744  1692 caffe.cpp:259] Optimization Done.
