I0428 20:12:11.072957 32209 caffe.cpp:218] Using GPUs 0
I0428 20:12:11.108593 32209 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:11.561100 32209 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1175.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:11.561230 32209 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1175.prototxt
I0428 20:12:11.561575 32209 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:11.561604 32209 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:11.561677 32209 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:11.561738 32209 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:11.561822 32209 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:11.561843 32209 net.cpp:86] Creating Layer mnist
I0428 20:12:11.561849 32209 net.cpp:382] mnist -> data
I0428 20:12:11.561868 32209 net.cpp:382] mnist -> label
I0428 20:12:11.562881 32209 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:11.565083 32209 net.cpp:124] Setting up mnist
I0428 20:12:11.565101 32209 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:11.565106 32209 net.cpp:131] Top shape: 64 (64)
I0428 20:12:11.565109 32209 net.cpp:139] Memory required for data: 200960
I0428 20:12:11.565114 32209 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:11.565129 32209 net.cpp:86] Creating Layer conv0
I0428 20:12:11.565134 32209 net.cpp:408] conv0 <- data
I0428 20:12:11.565142 32209 net.cpp:382] conv0 -> conv0
I0428 20:12:11.786051 32209 net.cpp:124] Setting up conv0
I0428 20:12:11.786092 32209 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:11.786095 32209 net.cpp:139] Memory required for data: 3887360
I0428 20:12:11.786129 32209 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:11.786156 32209 net.cpp:86] Creating Layer pool0
I0428 20:12:11.786160 32209 net.cpp:408] pool0 <- conv0
I0428 20:12:11.786166 32209 net.cpp:382] pool0 -> pool0
I0428 20:12:11.786211 32209 net.cpp:124] Setting up pool0
I0428 20:12:11.786216 32209 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:11.786218 32209 net.cpp:139] Memory required for data: 4808960
I0428 20:12:11.786221 32209 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:11.786231 32209 net.cpp:86] Creating Layer conv1
I0428 20:12:11.786234 32209 net.cpp:408] conv1 <- pool0
I0428 20:12:11.786239 32209 net.cpp:382] conv1 -> conv1
I0428 20:12:11.788550 32209 net.cpp:124] Setting up conv1
I0428 20:12:11.788578 32209 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:11.788583 32209 net.cpp:139] Memory required for data: 6447360
I0428 20:12:11.788590 32209 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:11.788596 32209 net.cpp:86] Creating Layer pool1
I0428 20:12:11.788600 32209 net.cpp:408] pool1 <- conv1
I0428 20:12:11.788604 32209 net.cpp:382] pool1 -> pool1
I0428 20:12:11.788655 32209 net.cpp:124] Setting up pool1
I0428 20:12:11.788661 32209 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:11.788664 32209 net.cpp:139] Memory required for data: 6856960
I0428 20:12:11.788667 32209 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:11.788674 32209 net.cpp:86] Creating Layer ip1
I0428 20:12:11.788677 32209 net.cpp:408] ip1 <- pool1
I0428 20:12:11.788682 32209 net.cpp:382] ip1 -> ip1
I0428 20:12:11.789862 32209 net.cpp:124] Setting up ip1
I0428 20:12:11.789875 32209 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:11.789878 32209 net.cpp:139] Memory required for data: 6859520
I0428 20:12:11.789886 32209 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:11.789892 32209 net.cpp:86] Creating Layer relu1
I0428 20:12:11.789896 32209 net.cpp:408] relu1 <- ip1
I0428 20:12:11.789899 32209 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:11.790082 32209 net.cpp:124] Setting up relu1
I0428 20:12:11.790092 32209 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:11.790096 32209 net.cpp:139] Memory required for data: 6862080
I0428 20:12:11.790098 32209 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:11.790104 32209 net.cpp:86] Creating Layer ip2
I0428 20:12:11.790107 32209 net.cpp:408] ip2 <- ip1
I0428 20:12:11.790112 32209 net.cpp:382] ip2 -> ip2
I0428 20:12:11.790199 32209 net.cpp:124] Setting up ip2
I0428 20:12:11.790205 32209 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:11.790207 32209 net.cpp:139] Memory required for data: 6864640
I0428 20:12:11.790212 32209 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:11.790217 32209 net.cpp:86] Creating Layer relu2
I0428 20:12:11.790220 32209 net.cpp:408] relu2 <- ip2
I0428 20:12:11.790225 32209 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:11.790978 32209 net.cpp:124] Setting up relu2
I0428 20:12:11.791005 32209 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:11.791010 32209 net.cpp:139] Memory required for data: 6867200
I0428 20:12:11.791014 32209 layer_factory.hpp:77] Creating layer loss
I0428 20:12:11.791020 32209 net.cpp:86] Creating Layer loss
I0428 20:12:11.791024 32209 net.cpp:408] loss <- ip2
I0428 20:12:11.791043 32209 net.cpp:408] loss <- label
I0428 20:12:11.791048 32209 net.cpp:382] loss -> loss
I0428 20:12:11.791064 32209 layer_factory.hpp:77] Creating layer loss
I0428 20:12:11.791299 32209 net.cpp:124] Setting up loss
I0428 20:12:11.791309 32209 net.cpp:131] Top shape: (1)
I0428 20:12:11.791312 32209 net.cpp:134]     with loss weight 1
I0428 20:12:11.791326 32209 net.cpp:139] Memory required for data: 6867204
I0428 20:12:11.791329 32209 net.cpp:200] loss needs backward computation.
I0428 20:12:11.791333 32209 net.cpp:200] relu2 needs backward computation.
I0428 20:12:11.791337 32209 net.cpp:200] ip2 needs backward computation.
I0428 20:12:11.791339 32209 net.cpp:200] relu1 needs backward computation.
I0428 20:12:11.791342 32209 net.cpp:200] ip1 needs backward computation.
I0428 20:12:11.791354 32209 net.cpp:200] pool1 needs backward computation.
I0428 20:12:11.791357 32209 net.cpp:200] conv1 needs backward computation.
I0428 20:12:11.791360 32209 net.cpp:200] pool0 needs backward computation.
I0428 20:12:11.791363 32209 net.cpp:200] conv0 needs backward computation.
I0428 20:12:11.791366 32209 net.cpp:202] mnist does not need backward computation.
I0428 20:12:11.791368 32209 net.cpp:244] This network produces output loss
I0428 20:12:11.791378 32209 net.cpp:257] Network initialization done.
I0428 20:12:11.791674 32209 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1175.prototxt
I0428 20:12:11.791699 32209 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:11.791781 32209 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:11.791846 32209 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:11.791893 32209 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:11.791905 32209 net.cpp:86] Creating Layer mnist
I0428 20:12:11.791910 32209 net.cpp:382] mnist -> data
I0428 20:12:11.791918 32209 net.cpp:382] mnist -> label
I0428 20:12:11.792006 32209 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:11.794265 32209 net.cpp:124] Setting up mnist
I0428 20:12:11.794287 32209 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:11.794293 32209 net.cpp:131] Top shape: 100 (100)
I0428 20:12:11.794296 32209 net.cpp:139] Memory required for data: 314000
I0428 20:12:11.794299 32209 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:11.794306 32209 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:11.794309 32209 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:11.794314 32209 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:11.794320 32209 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:11.794409 32209 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:11.794419 32209 net.cpp:131] Top shape: 100 (100)
I0428 20:12:11.794422 32209 net.cpp:131] Top shape: 100 (100)
I0428 20:12:11.794425 32209 net.cpp:139] Memory required for data: 314800
I0428 20:12:11.794428 32209 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:11.794437 32209 net.cpp:86] Creating Layer conv0
I0428 20:12:11.794440 32209 net.cpp:408] conv0 <- data
I0428 20:12:11.794446 32209 net.cpp:382] conv0 -> conv0
I0428 20:12:11.795987 32209 net.cpp:124] Setting up conv0
I0428 20:12:11.796001 32209 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:11.796005 32209 net.cpp:139] Memory required for data: 6074800
I0428 20:12:11.796030 32209 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:11.796039 32209 net.cpp:86] Creating Layer pool0
I0428 20:12:11.796058 32209 net.cpp:408] pool0 <- conv0
I0428 20:12:11.796064 32209 net.cpp:382] pool0 -> pool0
I0428 20:12:11.796102 32209 net.cpp:124] Setting up pool0
I0428 20:12:11.796108 32209 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:11.796113 32209 net.cpp:139] Memory required for data: 7514800
I0428 20:12:11.796116 32209 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:11.796128 32209 net.cpp:86] Creating Layer conv1
I0428 20:12:11.796130 32209 net.cpp:408] conv1 <- pool0
I0428 20:12:11.796136 32209 net.cpp:382] conv1 -> conv1
I0428 20:12:11.798107 32209 net.cpp:124] Setting up conv1
I0428 20:12:11.798122 32209 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:11.798140 32209 net.cpp:139] Memory required for data: 10074800
I0428 20:12:11.798148 32209 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:11.798158 32209 net.cpp:86] Creating Layer pool1
I0428 20:12:11.798162 32209 net.cpp:408] pool1 <- conv1
I0428 20:12:11.798167 32209 net.cpp:382] pool1 -> pool1
I0428 20:12:11.798207 32209 net.cpp:124] Setting up pool1
I0428 20:12:11.798215 32209 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:11.798218 32209 net.cpp:139] Memory required for data: 10714800
I0428 20:12:11.798221 32209 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:11.798228 32209 net.cpp:86] Creating Layer ip1
I0428 20:12:11.798231 32209 net.cpp:408] ip1 <- pool1
I0428 20:12:11.798238 32209 net.cpp:382] ip1 -> ip1
I0428 20:12:11.798441 32209 net.cpp:124] Setting up ip1
I0428 20:12:11.798449 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.798452 32209 net.cpp:139] Memory required for data: 10718800
I0428 20:12:11.798460 32209 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:11.798463 32209 net.cpp:86] Creating Layer relu1
I0428 20:12:11.798467 32209 net.cpp:408] relu1 <- ip1
I0428 20:12:11.798485 32209 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:11.798645 32209 net.cpp:124] Setting up relu1
I0428 20:12:11.798655 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.798657 32209 net.cpp:139] Memory required for data: 10722800
I0428 20:12:11.798660 32209 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:11.798666 32209 net.cpp:86] Creating Layer ip2
I0428 20:12:11.798669 32209 net.cpp:408] ip2 <- ip1
I0428 20:12:11.798676 32209 net.cpp:382] ip2 -> ip2
I0428 20:12:11.798805 32209 net.cpp:124] Setting up ip2
I0428 20:12:11.798812 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.798815 32209 net.cpp:139] Memory required for data: 10726800
I0428 20:12:11.798820 32209 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:11.798825 32209 net.cpp:86] Creating Layer relu2
I0428 20:12:11.798827 32209 net.cpp:408] relu2 <- ip2
I0428 20:12:11.798832 32209 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:11.798991 32209 net.cpp:124] Setting up relu2
I0428 20:12:11.799000 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.799003 32209 net.cpp:139] Memory required for data: 10730800
I0428 20:12:11.799006 32209 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:12:11.799011 32209 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:12:11.799015 32209 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:12:11.799019 32209 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:12:11.799051 32209 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:12:11.799101 32209 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:12:11.799109 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.799113 32209 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:11.799116 32209 net.cpp:139] Memory required for data: 10738800
I0428 20:12:11.799118 32209 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:11.799124 32209 net.cpp:86] Creating Layer accuracy
I0428 20:12:11.799126 32209 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:12:11.799130 32209 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:11.799134 32209 net.cpp:382] accuracy -> accuracy
I0428 20:12:11.799141 32209 net.cpp:124] Setting up accuracy
I0428 20:12:11.799145 32209 net.cpp:131] Top shape: (1)
I0428 20:12:11.799147 32209 net.cpp:139] Memory required for data: 10738804
I0428 20:12:11.799150 32209 layer_factory.hpp:77] Creating layer loss
I0428 20:12:11.799155 32209 net.cpp:86] Creating Layer loss
I0428 20:12:11.799160 32209 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:12:11.799162 32209 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:11.799166 32209 net.cpp:382] loss -> loss
I0428 20:12:11.799172 32209 layer_factory.hpp:77] Creating layer loss
I0428 20:12:11.799443 32209 net.cpp:124] Setting up loss
I0428 20:12:11.799453 32209 net.cpp:131] Top shape: (1)
I0428 20:12:11.799456 32209 net.cpp:134]     with loss weight 1
I0428 20:12:11.799463 32209 net.cpp:139] Memory required for data: 10738808
I0428 20:12:11.799465 32209 net.cpp:200] loss needs backward computation.
I0428 20:12:11.799469 32209 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:11.799473 32209 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:12:11.799475 32209 net.cpp:200] relu2 needs backward computation.
I0428 20:12:11.799477 32209 net.cpp:200] ip2 needs backward computation.
I0428 20:12:11.799480 32209 net.cpp:200] relu1 needs backward computation.
I0428 20:12:11.799482 32209 net.cpp:200] ip1 needs backward computation.
I0428 20:12:11.799485 32209 net.cpp:200] pool1 needs backward computation.
I0428 20:12:11.799489 32209 net.cpp:200] conv1 needs backward computation.
I0428 20:12:11.799492 32209 net.cpp:200] pool0 needs backward computation.
I0428 20:12:11.799494 32209 net.cpp:200] conv0 needs backward computation.
I0428 20:12:11.799499 32209 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:11.799501 32209 net.cpp:202] mnist does not need backward computation.
I0428 20:12:11.799504 32209 net.cpp:244] This network produces output accuracy
I0428 20:12:11.799506 32209 net.cpp:244] This network produces output loss
I0428 20:12:11.799516 32209 net.cpp:257] Network initialization done.
I0428 20:12:11.799551 32209 solver.cpp:56] Solver scaffolding done.
I0428 20:12:11.799818 32209 caffe.cpp:248] Starting Optimization
I0428 20:12:11.799823 32209 solver.cpp:273] Solving LeNet
I0428 20:12:11.799826 32209 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:11.800595 32209 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:11.867211 32218 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:11.869477 32209 solver.cpp:398]     Test net output #0: accuracy = 0.0625
I0428 20:12:11.869525 32209 solver.cpp:398]     Test net output #1: loss = 2.32467 (* 1 = 2.32467 loss)
I0428 20:12:11.874101 32209 solver.cpp:219] Iteration 0 (-2.11793e-31 iter/s, 0.0742502s/100 iters), loss = 2.33213
I0428 20:12:11.874141 32209 solver.cpp:238]     Train net output #0: loss = 2.33213 (* 1 = 2.33213 loss)
I0428 20:12:11.874152 32209 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:12.033013 32209 solver.cpp:219] Iteration 100 (629.443 iter/s, 0.158871s/100 iters), loss = 1.02743
I0428 20:12:12.033041 32209 solver.cpp:238]     Train net output #0: loss = 1.02743 (* 1 = 1.02743 loss)
I0428 20:12:12.033047 32209 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:12.188735 32209 solver.cpp:219] Iteration 200 (642.34 iter/s, 0.155681s/100 iters), loss = 0.36936
I0428 20:12:12.188773 32209 solver.cpp:238]     Train net output #0: loss = 0.36936 (* 1 = 0.36936 loss)
I0428 20:12:12.188781 32209 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:12.342712 32209 solver.cpp:219] Iteration 300 (649.656 iter/s, 0.153928s/100 iters), loss = 0.238007
I0428 20:12:12.342754 32209 solver.cpp:238]     Train net output #0: loss = 0.238007 (* 1 = 0.238007 loss)
I0428 20:12:12.342761 32209 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:12.492871 32209 solver.cpp:219] Iteration 400 (666.145 iter/s, 0.150117s/100 iters), loss = 0.0724468
I0428 20:12:12.492914 32209 solver.cpp:238]     Train net output #0: loss = 0.0724469 (* 1 = 0.0724469 loss)
I0428 20:12:12.492920 32209 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:12.639771 32209 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:12.703102 32218 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:12.705360 32209 solver.cpp:398]     Test net output #0: accuracy = 0.9487
I0428 20:12:12.705379 32209 solver.cpp:398]     Test net output #1: loss = 0.169496 (* 1 = 0.169496 loss)
I0428 20:12:12.706782 32209 solver.cpp:219] Iteration 500 (467.61 iter/s, 0.213853s/100 iters), loss = 0.217251
I0428 20:12:12.706804 32209 solver.cpp:238]     Train net output #0: loss = 0.217252 (* 1 = 0.217252 loss)
I0428 20:12:12.706811 32209 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:12.862149 32209 solver.cpp:219] Iteration 600 (643.788 iter/s, 0.155331s/100 iters), loss = 0.104576
I0428 20:12:12.862175 32209 solver.cpp:238]     Train net output #0: loss = 0.104576 (* 1 = 0.104576 loss)
I0428 20:12:12.862182 32209 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:13.054867 32209 solver.cpp:219] Iteration 700 (519.015 iter/s, 0.192673s/100 iters), loss = 0.239674
I0428 20:12:13.054913 32209 solver.cpp:238]     Train net output #0: loss = 0.239674 (* 1 = 0.239674 loss)
I0428 20:12:13.054925 32209 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:13.257215 32209 solver.cpp:219] Iteration 800 (494.379 iter/s, 0.202274s/100 iters), loss = 0.321296
I0428 20:12:13.257273 32209 solver.cpp:238]     Train net output #0: loss = 0.321296 (* 1 = 0.321296 loss)
I0428 20:12:13.257287 32209 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:13.458715 32209 solver.cpp:219] Iteration 900 (496.448 iter/s, 0.201431s/100 iters), loss = 0.164681
I0428 20:12:13.458772 32209 solver.cpp:238]     Train net output #0: loss = 0.164681 (* 1 = 0.164681 loss)
I0428 20:12:13.458784 32209 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:13.525882 32217 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:13.660555 32209 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:13.663878 32209 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:13.665632 32209 solver.cpp:311] Iteration 1000, loss = 0.128781
I0428 20:12:13.665659 32209 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:13.737257 32218 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:13.739642 32209 solver.cpp:398]     Test net output #0: accuracy = 0.9725
I0428 20:12:13.739666 32209 solver.cpp:398]     Test net output #1: loss = 0.0879429 (* 1 = 0.0879429 loss)
I0428 20:12:13.739672 32209 solver.cpp:316] Optimization Done.
I0428 20:12:13.739687 32209 caffe.cpp:259] Optimization Done.
