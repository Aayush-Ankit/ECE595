I0428 19:49:11.239246 26695 caffe.cpp:218] Using GPUs 0
I0428 19:49:11.274698 26695 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:11.726783 26695 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test567.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:11.726914 26695 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test567.prototxt
I0428 19:49:11.727253 26695 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:11.727284 26695 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:11.727380 26695 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:11.727447 26695 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:11.727530 26695 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:11.727550 26695 net.cpp:86] Creating Layer mnist
I0428 19:49:11.727555 26695 net.cpp:382] mnist -> data
I0428 19:49:11.727574 26695 net.cpp:382] mnist -> label
I0428 19:49:11.728592 26695 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:11.730890 26695 net.cpp:124] Setting up mnist
I0428 19:49:11.730934 26695 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:11.730939 26695 net.cpp:131] Top shape: 64 (64)
I0428 19:49:11.730942 26695 net.cpp:139] Memory required for data: 200960
I0428 19:49:11.730947 26695 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:11.730960 26695 net.cpp:86] Creating Layer conv0
I0428 19:49:11.730978 26695 net.cpp:408] conv0 <- data
I0428 19:49:11.730988 26695 net.cpp:382] conv0 -> conv0
I0428 19:49:11.959682 26695 net.cpp:124] Setting up conv0
I0428 19:49:11.959709 26695 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:11.959713 26695 net.cpp:139] Memory required for data: 938240
I0428 19:49:11.959728 26695 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:11.959740 26695 net.cpp:86] Creating Layer pool0
I0428 19:49:11.959744 26695 net.cpp:408] pool0 <- conv0
I0428 19:49:11.959749 26695 net.cpp:382] pool0 -> pool0
I0428 19:49:11.959808 26695 net.cpp:124] Setting up pool0
I0428 19:49:11.959815 26695 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:11.959816 26695 net.cpp:139] Memory required for data: 1122560
I0428 19:49:11.959820 26695 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:11.959830 26695 net.cpp:86] Creating Layer conv1
I0428 19:49:11.959832 26695 net.cpp:408] conv1 <- pool0
I0428 19:49:11.959837 26695 net.cpp:382] conv1 -> conv1
I0428 19:49:11.961730 26695 net.cpp:124] Setting up conv1
I0428 19:49:11.961760 26695 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:11.961765 26695 net.cpp:139] Memory required for data: 1204480
I0428 19:49:11.961773 26695 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:11.961781 26695 net.cpp:86] Creating Layer pool1
I0428 19:49:11.961784 26695 net.cpp:408] pool1 <- conv1
I0428 19:49:11.961789 26695 net.cpp:382] pool1 -> pool1
I0428 19:49:11.961827 26695 net.cpp:124] Setting up pool1
I0428 19:49:11.961833 26695 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:11.961835 26695 net.cpp:139] Memory required for data: 1224960
I0428 19:49:11.961838 26695 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:11.961845 26695 net.cpp:86] Creating Layer ip1
I0428 19:49:11.961848 26695 net.cpp:408] ip1 <- pool1
I0428 19:49:11.961853 26695 net.cpp:382] ip1 -> ip1
I0428 19:49:11.962853 26695 net.cpp:124] Setting up ip1
I0428 19:49:11.962867 26695 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:11.962885 26695 net.cpp:139] Memory required for data: 1231360
I0428 19:49:11.962894 26695 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:11.962900 26695 net.cpp:86] Creating Layer relu1
I0428 19:49:11.962904 26695 net.cpp:408] relu1 <- ip1
I0428 19:49:11.962908 26695 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:11.963086 26695 net.cpp:124] Setting up relu1
I0428 19:49:11.963095 26695 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:11.963099 26695 net.cpp:139] Memory required for data: 1237760
I0428 19:49:11.963101 26695 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:11.963109 26695 net.cpp:86] Creating Layer ip2
I0428 19:49:11.963111 26695 net.cpp:408] ip2 <- ip1
I0428 19:49:11.963116 26695 net.cpp:382] ip2 -> ip2
I0428 19:49:11.963209 26695 net.cpp:124] Setting up ip2
I0428 19:49:11.963217 26695 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:11.963219 26695 net.cpp:139] Memory required for data: 1240320
I0428 19:49:11.963224 26695 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:11.963229 26695 net.cpp:86] Creating Layer relu2
I0428 19:49:11.963232 26695 net.cpp:408] relu2 <- ip2
I0428 19:49:11.963237 26695 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:11.963980 26695 net.cpp:124] Setting up relu2
I0428 19:49:11.963992 26695 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:11.964011 26695 net.cpp:139] Memory required for data: 1242880
I0428 19:49:11.964015 26695 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:11.964021 26695 net.cpp:86] Creating Layer ip3
I0428 19:49:11.964025 26695 net.cpp:408] ip3 <- ip2
I0428 19:49:11.964030 26695 net.cpp:382] ip3 -> ip3
I0428 19:49:11.964123 26695 net.cpp:124] Setting up ip3
I0428 19:49:11.964130 26695 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:11.964133 26695 net.cpp:139] Memory required for data: 1245440
I0428 19:49:11.964140 26695 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:11.964145 26695 net.cpp:86] Creating Layer relu3
I0428 19:49:11.964148 26695 net.cpp:408] relu3 <- ip3
I0428 19:49:11.964153 26695 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:11.964323 26695 net.cpp:124] Setting up relu3
I0428 19:49:11.964331 26695 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:11.964334 26695 net.cpp:139] Memory required for data: 1248000
I0428 19:49:11.964337 26695 layer_factory.hpp:77] Creating layer loss
I0428 19:49:11.964342 26695 net.cpp:86] Creating Layer loss
I0428 19:49:11.964346 26695 net.cpp:408] loss <- ip3
I0428 19:49:11.964349 26695 net.cpp:408] loss <- label
I0428 19:49:11.964354 26695 net.cpp:382] loss -> loss
I0428 19:49:11.964371 26695 layer_factory.hpp:77] Creating layer loss
I0428 19:49:11.964588 26695 net.cpp:124] Setting up loss
I0428 19:49:11.964597 26695 net.cpp:131] Top shape: (1)
I0428 19:49:11.964601 26695 net.cpp:134]     with loss weight 1
I0428 19:49:11.964613 26695 net.cpp:139] Memory required for data: 1248004
I0428 19:49:11.964617 26695 net.cpp:200] loss needs backward computation.
I0428 19:49:11.964637 26695 net.cpp:200] relu3 needs backward computation.
I0428 19:49:11.964640 26695 net.cpp:200] ip3 needs backward computation.
I0428 19:49:11.964643 26695 net.cpp:200] relu2 needs backward computation.
I0428 19:49:11.964646 26695 net.cpp:200] ip2 needs backward computation.
I0428 19:49:11.964648 26695 net.cpp:200] relu1 needs backward computation.
I0428 19:49:11.964651 26695 net.cpp:200] ip1 needs backward computation.
I0428 19:49:11.964654 26695 net.cpp:200] pool1 needs backward computation.
I0428 19:49:11.964658 26695 net.cpp:200] conv1 needs backward computation.
I0428 19:49:11.964660 26695 net.cpp:200] pool0 needs backward computation.
I0428 19:49:11.964663 26695 net.cpp:200] conv0 needs backward computation.
I0428 19:49:11.964666 26695 net.cpp:202] mnist does not need backward computation.
I0428 19:49:11.964668 26695 net.cpp:244] This network produces output loss
I0428 19:49:11.964678 26695 net.cpp:257] Network initialization done.
I0428 19:49:11.965087 26695 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test567.prototxt
I0428 19:49:11.965132 26695 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:11.965270 26695 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:11.965344 26695 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:11.965401 26695 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:11.965414 26695 net.cpp:86] Creating Layer mnist
I0428 19:49:11.965417 26695 net.cpp:382] mnist -> data
I0428 19:49:11.965425 26695 net.cpp:382] mnist -> label
I0428 19:49:11.965507 26695 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:11.967383 26695 net.cpp:124] Setting up mnist
I0428 19:49:11.967406 26695 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:11.967411 26695 net.cpp:131] Top shape: 100 (100)
I0428 19:49:11.967414 26695 net.cpp:139] Memory required for data: 314000
I0428 19:49:11.967418 26695 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:11.967448 26695 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:11.967453 26695 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:11.967458 26695 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:11.967463 26695 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:11.967517 26695 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:11.967530 26695 net.cpp:131] Top shape: 100 (100)
I0428 19:49:11.967533 26695 net.cpp:131] Top shape: 100 (100)
I0428 19:49:11.967551 26695 net.cpp:139] Memory required for data: 314800
I0428 19:49:11.967555 26695 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:11.967562 26695 net.cpp:86] Creating Layer conv0
I0428 19:49:11.967566 26695 net.cpp:408] conv0 <- data
I0428 19:49:11.967586 26695 net.cpp:382] conv0 -> conv0
I0428 19:49:11.969424 26695 net.cpp:124] Setting up conv0
I0428 19:49:11.969437 26695 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:11.969441 26695 net.cpp:139] Memory required for data: 1466800
I0428 19:49:11.969450 26695 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:11.969475 26695 net.cpp:86] Creating Layer pool0
I0428 19:49:11.969477 26695 net.cpp:408] pool0 <- conv0
I0428 19:49:11.969482 26695 net.cpp:382] pool0 -> pool0
I0428 19:49:11.969521 26695 net.cpp:124] Setting up pool0
I0428 19:49:11.969525 26695 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:11.969528 26695 net.cpp:139] Memory required for data: 1754800
I0428 19:49:11.969530 26695 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:11.969540 26695 net.cpp:86] Creating Layer conv1
I0428 19:49:11.969543 26695 net.cpp:408] conv1 <- pool0
I0428 19:49:11.969550 26695 net.cpp:382] conv1 -> conv1
I0428 19:49:11.971756 26695 net.cpp:124] Setting up conv1
I0428 19:49:11.971768 26695 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:11.971771 26695 net.cpp:139] Memory required for data: 1882800
I0428 19:49:11.971779 26695 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:11.971802 26695 net.cpp:86] Creating Layer pool1
I0428 19:49:11.971806 26695 net.cpp:408] pool1 <- conv1
I0428 19:49:11.971810 26695 net.cpp:382] pool1 -> pool1
I0428 19:49:11.971853 26695 net.cpp:124] Setting up pool1
I0428 19:49:11.971858 26695 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:11.971861 26695 net.cpp:139] Memory required for data: 1914800
I0428 19:49:11.971864 26695 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:11.971870 26695 net.cpp:86] Creating Layer ip1
I0428 19:49:11.971873 26695 net.cpp:408] ip1 <- pool1
I0428 19:49:11.971879 26695 net.cpp:382] ip1 -> ip1
I0428 19:49:11.972079 26695 net.cpp:124] Setting up ip1
I0428 19:49:11.972092 26695 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:11.972105 26695 net.cpp:139] Memory required for data: 1924800
I0428 19:49:11.972120 26695 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:11.972137 26695 net.cpp:86] Creating Layer relu1
I0428 19:49:11.972141 26695 net.cpp:408] relu1 <- ip1
I0428 19:49:11.972146 26695 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:11.972334 26695 net.cpp:124] Setting up relu1
I0428 19:49:11.972343 26695 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:11.972347 26695 net.cpp:139] Memory required for data: 1934800
I0428 19:49:11.972349 26695 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:11.972357 26695 net.cpp:86] Creating Layer ip2
I0428 19:49:11.972360 26695 net.cpp:408] ip2 <- ip1
I0428 19:49:11.972367 26695 net.cpp:382] ip2 -> ip2
I0428 19:49:11.972478 26695 net.cpp:124] Setting up ip2
I0428 19:49:11.972486 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.972488 26695 net.cpp:139] Memory required for data: 1938800
I0428 19:49:11.972494 26695 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:11.972498 26695 net.cpp:86] Creating Layer relu2
I0428 19:49:11.972501 26695 net.cpp:408] relu2 <- ip2
I0428 19:49:11.972506 26695 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:11.972654 26695 net.cpp:124] Setting up relu2
I0428 19:49:11.972663 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.972666 26695 net.cpp:139] Memory required for data: 1942800
I0428 19:49:11.972669 26695 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:11.972674 26695 net.cpp:86] Creating Layer ip3
I0428 19:49:11.972677 26695 net.cpp:408] ip3 <- ip2
I0428 19:49:11.972682 26695 net.cpp:382] ip3 -> ip3
I0428 19:49:11.972791 26695 net.cpp:124] Setting up ip3
I0428 19:49:11.972798 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.972801 26695 net.cpp:139] Memory required for data: 1946800
I0428 19:49:11.972831 26695 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:11.972836 26695 net.cpp:86] Creating Layer relu3
I0428 19:49:11.972839 26695 net.cpp:408] relu3 <- ip3
I0428 19:49:11.972844 26695 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:11.973783 26695 net.cpp:124] Setting up relu3
I0428 19:49:11.973796 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.973800 26695 net.cpp:139] Memory required for data: 1950800
I0428 19:49:11.973803 26695 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:11.973809 26695 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:11.973812 26695 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:11.973819 26695 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:11.973825 26695 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:11.973881 26695 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:11.973889 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.973892 26695 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:11.973896 26695 net.cpp:139] Memory required for data: 1958800
I0428 19:49:11.973898 26695 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:11.973925 26695 net.cpp:86] Creating Layer accuracy
I0428 19:49:11.973929 26695 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:11.973933 26695 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:11.973948 26695 net.cpp:382] accuracy -> accuracy
I0428 19:49:11.973978 26695 net.cpp:124] Setting up accuracy
I0428 19:49:11.973981 26695 net.cpp:131] Top shape: (1)
I0428 19:49:11.973984 26695 net.cpp:139] Memory required for data: 1958804
I0428 19:49:11.973986 26695 layer_factory.hpp:77] Creating layer loss
I0428 19:49:11.973997 26695 net.cpp:86] Creating Layer loss
I0428 19:49:11.973999 26695 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:11.974004 26695 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:11.974007 26695 net.cpp:382] loss -> loss
I0428 19:49:11.974012 26695 layer_factory.hpp:77] Creating layer loss
I0428 19:49:11.974270 26695 net.cpp:124] Setting up loss
I0428 19:49:11.974280 26695 net.cpp:131] Top shape: (1)
I0428 19:49:11.974283 26695 net.cpp:134]     with loss weight 1
I0428 19:49:11.974290 26695 net.cpp:139] Memory required for data: 1958808
I0428 19:49:11.974314 26695 net.cpp:200] loss needs backward computation.
I0428 19:49:11.974318 26695 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:11.974328 26695 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:11.974330 26695 net.cpp:200] relu3 needs backward computation.
I0428 19:49:11.974334 26695 net.cpp:200] ip3 needs backward computation.
I0428 19:49:11.974336 26695 net.cpp:200] relu2 needs backward computation.
I0428 19:49:11.974339 26695 net.cpp:200] ip2 needs backward computation.
I0428 19:49:11.974342 26695 net.cpp:200] relu1 needs backward computation.
I0428 19:49:11.974344 26695 net.cpp:200] ip1 needs backward computation.
I0428 19:49:11.974347 26695 net.cpp:200] pool1 needs backward computation.
I0428 19:49:11.974350 26695 net.cpp:200] conv1 needs backward computation.
I0428 19:49:11.974367 26695 net.cpp:200] pool0 needs backward computation.
I0428 19:49:11.974371 26695 net.cpp:200] conv0 needs backward computation.
I0428 19:49:11.974375 26695 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:11.974378 26695 net.cpp:202] mnist does not need backward computation.
I0428 19:49:11.974380 26695 net.cpp:244] This network produces output accuracy
I0428 19:49:11.974383 26695 net.cpp:244] This network produces output loss
I0428 19:49:11.974397 26695 net.cpp:257] Network initialization done.
I0428 19:49:11.974438 26695 solver.cpp:56] Solver scaffolding done.
I0428 19:49:11.974766 26695 caffe.cpp:248] Starting Optimization
I0428 19:49:11.974772 26695 solver.cpp:273] Solving LeNet
I0428 19:49:11.974776 26695 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:11.975657 26695 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:11.979362 26695 blocking_queue.cpp:49] Waiting for data
I0428 19:49:12.052392 26702 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:12.052945 26695 solver.cpp:398]     Test net output #0: accuracy = 0.1204
I0428 19:49:12.052964 26695 solver.cpp:398]     Test net output #1: loss = 2.29525 (* 1 = 2.29525 loss)
I0428 19:49:12.054936 26695 solver.cpp:219] Iteration 0 (0 iter/s, 0.080136s/100 iters), loss = 2.30946
I0428 19:49:12.054960 26695 solver.cpp:238]     Train net output #0: loss = 2.30946 (* 1 = 2.30946 loss)
I0428 19:49:12.054986 26695 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:12.135236 26695 solver.cpp:219] Iteration 100 (1245.89 iter/s, 0.0802642s/100 iters), loss = 0.910181
I0428 19:49:12.135262 26695 solver.cpp:238]     Train net output #0: loss = 0.910181 (* 1 = 0.910181 loss)
I0428 19:49:12.135267 26695 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:12.211274 26695 solver.cpp:219] Iteration 200 (1315.73 iter/s, 0.0760034s/100 iters), loss = 0.408702
I0428 19:49:12.211298 26695 solver.cpp:238]     Train net output #0: loss = 0.408702 (* 1 = 0.408702 loss)
I0428 19:49:12.211323 26695 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:12.287672 26695 solver.cpp:219] Iteration 300 (1309.5 iter/s, 0.0763648s/100 iters), loss = 0.385261
I0428 19:49:12.287698 26695 solver.cpp:238]     Train net output #0: loss = 0.385261 (* 1 = 0.385261 loss)
I0428 19:49:12.287720 26695 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:12.361096 26695 solver.cpp:219] Iteration 400 (1362.62 iter/s, 0.073388s/100 iters), loss = 0.244806
I0428 19:49:12.361127 26695 solver.cpp:238]     Train net output #0: loss = 0.244806 (* 1 = 0.244806 loss)
I0428 19:49:12.361135 26695 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:12.435832 26695 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:12.491629 26702 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:12.492110 26695 solver.cpp:398]     Test net output #0: accuracy = 0.9227
I0428 19:49:12.492131 26695 solver.cpp:398]     Test net output #1: loss = 0.251349 (* 1 = 0.251349 loss)
I0428 19:49:12.492924 26695 solver.cpp:219] Iteration 500 (758.813 iter/s, 0.131785s/100 iters), loss = 0.338963
I0428 19:49:12.492954 26695 solver.cpp:238]     Train net output #0: loss = 0.338964 (* 1 = 0.338964 loss)
I0428 19:49:12.492975 26695 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:12.567663 26695 solver.cpp:219] Iteration 600 (1338.71 iter/s, 0.0746988s/100 iters), loss = 0.126838
I0428 19:49:12.567692 26695 solver.cpp:238]     Train net output #0: loss = 0.126838 (* 1 = 0.126838 loss)
I0428 19:49:12.567718 26695 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:12.644202 26695 solver.cpp:219] Iteration 700 (1307.24 iter/s, 0.0764971s/100 iters), loss = 0.298117
I0428 19:49:12.644227 26695 solver.cpp:238]     Train net output #0: loss = 0.298117 (* 1 = 0.298117 loss)
I0428 19:49:12.644232 26695 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:12.714905 26695 solver.cpp:219] Iteration 800 (1415.04 iter/s, 0.0706692s/100 iters), loss = 0.413532
I0428 19:49:12.714927 26695 solver.cpp:238]     Train net output #0: loss = 0.413532 (* 1 = 0.413532 loss)
I0428 19:49:12.714948 26695 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:12.784636 26695 solver.cpp:219] Iteration 900 (1434.71 iter/s, 0.0697006s/100 iters), loss = 0.150468
I0428 19:49:12.784659 26695 solver.cpp:238]     Train net output #0: loss = 0.150468 (* 1 = 0.150468 loss)
I0428 19:49:12.784664 26695 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:12.808073 26701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:12.854048 26695 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:12.854778 26695 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:12.855268 26695 solver.cpp:311] Iteration 1000, loss = 0.21506
I0428 19:49:12.855283 26695 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:12.901649 26702 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:12.902145 26695 solver.cpp:398]     Test net output #0: accuracy = 0.9469
I0428 19:49:12.902163 26695 solver.cpp:398]     Test net output #1: loss = 0.163891 (* 1 = 0.163891 loss)
I0428 19:49:12.902168 26695 solver.cpp:316] Optimization Done.
I0428 19:49:12.902170 26695 caffe.cpp:259] Optimization Done.
