I0428 19:40:31.545171 24571 caffe.cpp:218] Using GPUs 0
I0428 19:40:31.575716 24571 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:32.018399 24571 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test337.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:32.018537 24571 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test337.prototxt
I0428 19:40:32.018867 24571 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:32.018895 24571 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:32.018986 24571 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:32.019044 24571 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:32.019140 24571 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:32.019158 24571 net.cpp:86] Creating Layer mnist
I0428 19:40:32.019165 24571 net.cpp:382] mnist -> data
I0428 19:40:32.019183 24571 net.cpp:382] mnist -> label
I0428 19:40:32.020074 24571 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:32.022286 24571 net.cpp:124] Setting up mnist
I0428 19:40:32.022316 24571 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:32.022322 24571 net.cpp:131] Top shape: 64 (64)
I0428 19:40:32.022326 24571 net.cpp:139] Memory required for data: 200960
I0428 19:40:32.022332 24571 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:32.022361 24571 net.cpp:86] Creating Layer conv0
I0428 19:40:32.022394 24571 net.cpp:408] conv0 <- data
I0428 19:40:32.022419 24571 net.cpp:382] conv0 -> conv0
I0428 19:40:32.250216 24571 net.cpp:124] Setting up conv0
I0428 19:40:32.250257 24571 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:32.250262 24571 net.cpp:139] Memory required for data: 495872
I0428 19:40:32.250277 24571 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:32.250303 24571 net.cpp:86] Creating Layer pool0
I0428 19:40:32.250308 24571 net.cpp:408] pool0 <- conv0
I0428 19:40:32.250329 24571 net.cpp:382] pool0 -> pool0
I0428 19:40:32.250372 24571 net.cpp:124] Setting up pool0
I0428 19:40:32.250377 24571 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:32.250380 24571 net.cpp:139] Memory required for data: 569600
I0428 19:40:32.250383 24571 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:32.250393 24571 net.cpp:86] Creating Layer conv1
I0428 19:40:32.250396 24571 net.cpp:408] conv1 <- pool0
I0428 19:40:32.250401 24571 net.cpp:382] conv1 -> conv1
I0428 19:40:32.252199 24571 net.cpp:124] Setting up conv1
I0428 19:40:32.252229 24571 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:32.252233 24571 net.cpp:139] Memory required for data: 651520
I0428 19:40:32.252241 24571 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:32.252264 24571 net.cpp:86] Creating Layer pool1
I0428 19:40:32.252269 24571 net.cpp:408] pool1 <- conv1
I0428 19:40:32.252274 24571 net.cpp:382] pool1 -> pool1
I0428 19:40:32.252310 24571 net.cpp:124] Setting up pool1
I0428 19:40:32.252315 24571 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:32.252318 24571 net.cpp:139] Memory required for data: 672000
I0428 19:40:32.252322 24571 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:32.252329 24571 net.cpp:86] Creating Layer ip1
I0428 19:40:32.252347 24571 net.cpp:408] ip1 <- pool1
I0428 19:40:32.252352 24571 net.cpp:382] ip1 -> ip1
I0428 19:40:32.253419 24571 net.cpp:124] Setting up ip1
I0428 19:40:32.253432 24571 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:32.253451 24571 net.cpp:139] Memory required for data: 678400
I0428 19:40:32.253460 24571 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:32.253466 24571 net.cpp:86] Creating Layer relu1
I0428 19:40:32.253470 24571 net.cpp:408] relu1 <- ip1
I0428 19:40:32.253490 24571 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:32.253672 24571 net.cpp:124] Setting up relu1
I0428 19:40:32.253681 24571 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:32.253684 24571 net.cpp:139] Memory required for data: 684800
I0428 19:40:32.253687 24571 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:32.253695 24571 net.cpp:86] Creating Layer ip2
I0428 19:40:32.253697 24571 net.cpp:408] ip2 <- ip1
I0428 19:40:32.253702 24571 net.cpp:382] ip2 -> ip2
I0428 19:40:32.253796 24571 net.cpp:124] Setting up ip2
I0428 19:40:32.253803 24571 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:32.253806 24571 net.cpp:139] Memory required for data: 691200
I0428 19:40:32.253811 24571 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:32.253818 24571 net.cpp:86] Creating Layer relu2
I0428 19:40:32.253820 24571 net.cpp:408] relu2 <- ip2
I0428 19:40:32.253825 24571 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:32.254606 24571 net.cpp:124] Setting up relu2
I0428 19:40:32.254618 24571 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:32.254638 24571 net.cpp:139] Memory required for data: 697600
I0428 19:40:32.254642 24571 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:32.254648 24571 net.cpp:86] Creating Layer ip3
I0428 19:40:32.254653 24571 net.cpp:408] ip3 <- ip2
I0428 19:40:32.254658 24571 net.cpp:382] ip3 -> ip3
I0428 19:40:32.254752 24571 net.cpp:124] Setting up ip3
I0428 19:40:32.254760 24571 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:32.254763 24571 net.cpp:139] Memory required for data: 700160
I0428 19:40:32.254771 24571 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:32.254776 24571 net.cpp:86] Creating Layer relu3
I0428 19:40:32.254779 24571 net.cpp:408] relu3 <- ip3
I0428 19:40:32.254783 24571 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:32.254958 24571 net.cpp:124] Setting up relu3
I0428 19:40:32.254967 24571 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:32.254971 24571 net.cpp:139] Memory required for data: 702720
I0428 19:40:32.254973 24571 layer_factory.hpp:77] Creating layer loss
I0428 19:40:32.254979 24571 net.cpp:86] Creating Layer loss
I0428 19:40:32.254982 24571 net.cpp:408] loss <- ip3
I0428 19:40:32.254987 24571 net.cpp:408] loss <- label
I0428 19:40:32.254990 24571 net.cpp:382] loss -> loss
I0428 19:40:32.255007 24571 layer_factory.hpp:77] Creating layer loss
I0428 19:40:32.255239 24571 net.cpp:124] Setting up loss
I0428 19:40:32.255249 24571 net.cpp:131] Top shape: (1)
I0428 19:40:32.255251 24571 net.cpp:134]     with loss weight 1
I0428 19:40:32.255264 24571 net.cpp:139] Memory required for data: 702724
I0428 19:40:32.255269 24571 net.cpp:200] loss needs backward computation.
I0428 19:40:32.255272 24571 net.cpp:200] relu3 needs backward computation.
I0428 19:40:32.255275 24571 net.cpp:200] ip3 needs backward computation.
I0428 19:40:32.255278 24571 net.cpp:200] relu2 needs backward computation.
I0428 19:40:32.255281 24571 net.cpp:200] ip2 needs backward computation.
I0428 19:40:32.255285 24571 net.cpp:200] relu1 needs backward computation.
I0428 19:40:32.255287 24571 net.cpp:200] ip1 needs backward computation.
I0428 19:40:32.255290 24571 net.cpp:200] pool1 needs backward computation.
I0428 19:40:32.255293 24571 net.cpp:200] conv1 needs backward computation.
I0428 19:40:32.255296 24571 net.cpp:200] pool0 needs backward computation.
I0428 19:40:32.255300 24571 net.cpp:200] conv0 needs backward computation.
I0428 19:40:32.255303 24571 net.cpp:202] mnist does not need backward computation.
I0428 19:40:32.255321 24571 net.cpp:244] This network produces output loss
I0428 19:40:32.255331 24571 net.cpp:257] Network initialization done.
I0428 19:40:32.255684 24571 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test337.prototxt
I0428 19:40:32.255726 24571 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:32.255813 24571 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:32.255889 24571 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:32.255946 24571 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:32.255959 24571 net.cpp:86] Creating Layer mnist
I0428 19:40:32.255962 24571 net.cpp:382] mnist -> data
I0428 19:40:32.255970 24571 net.cpp:382] mnist -> label
I0428 19:40:32.256047 24571 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:32.258123 24571 net.cpp:124] Setting up mnist
I0428 19:40:32.258152 24571 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:32.258157 24571 net.cpp:131] Top shape: 100 (100)
I0428 19:40:32.258159 24571 net.cpp:139] Memory required for data: 314000
I0428 19:40:32.258163 24571 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:32.258188 24571 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:32.258193 24571 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:32.258196 24571 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:32.258203 24571 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:32.258249 24571 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:32.258254 24571 net.cpp:131] Top shape: 100 (100)
I0428 19:40:32.258256 24571 net.cpp:131] Top shape: 100 (100)
I0428 19:40:32.258260 24571 net.cpp:139] Memory required for data: 314800
I0428 19:40:32.258262 24571 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:32.258270 24571 net.cpp:86] Creating Layer conv0
I0428 19:40:32.258272 24571 net.cpp:408] conv0 <- data
I0428 19:40:32.258277 24571 net.cpp:382] conv0 -> conv0
I0428 19:40:32.260068 24571 net.cpp:124] Setting up conv0
I0428 19:40:32.260082 24571 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:32.260085 24571 net.cpp:139] Memory required for data: 775600
I0428 19:40:32.260093 24571 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:32.260099 24571 net.cpp:86] Creating Layer pool0
I0428 19:40:32.260102 24571 net.cpp:408] pool0 <- conv0
I0428 19:40:32.260107 24571 net.cpp:382] pool0 -> pool0
I0428 19:40:32.260140 24571 net.cpp:124] Setting up pool0
I0428 19:40:32.260145 24571 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:32.260149 24571 net.cpp:139] Memory required for data: 890800
I0428 19:40:32.260150 24571 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:32.260159 24571 net.cpp:86] Creating Layer conv1
I0428 19:40:32.260161 24571 net.cpp:408] conv1 <- pool0
I0428 19:40:32.260166 24571 net.cpp:382] conv1 -> conv1
I0428 19:40:32.261701 24571 net.cpp:124] Setting up conv1
I0428 19:40:32.261714 24571 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:32.261719 24571 net.cpp:139] Memory required for data: 1018800
I0428 19:40:32.261728 24571 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:32.261734 24571 net.cpp:86] Creating Layer pool1
I0428 19:40:32.261737 24571 net.cpp:408] pool1 <- conv1
I0428 19:40:32.261742 24571 net.cpp:382] pool1 -> pool1
I0428 19:40:32.261786 24571 net.cpp:124] Setting up pool1
I0428 19:40:32.261792 24571 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:32.261795 24571 net.cpp:139] Memory required for data: 1050800
I0428 19:40:32.261798 24571 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:32.261806 24571 net.cpp:86] Creating Layer ip1
I0428 19:40:32.261808 24571 net.cpp:408] ip1 <- pool1
I0428 19:40:32.261812 24571 net.cpp:382] ip1 -> ip1
I0428 19:40:32.261919 24571 net.cpp:124] Setting up ip1
I0428 19:40:32.261927 24571 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:32.261976 24571 net.cpp:139] Memory required for data: 1060800
I0428 19:40:32.262001 24571 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:32.262006 24571 net.cpp:86] Creating Layer relu1
I0428 19:40:32.262011 24571 net.cpp:408] relu1 <- ip1
I0428 19:40:32.262022 24571 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:32.262182 24571 net.cpp:124] Setting up relu1
I0428 19:40:32.262192 24571 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:32.262195 24571 net.cpp:139] Memory required for data: 1070800
I0428 19:40:32.262198 24571 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:32.262205 24571 net.cpp:86] Creating Layer ip2
I0428 19:40:32.262208 24571 net.cpp:408] ip2 <- ip1
I0428 19:40:32.262213 24571 net.cpp:382] ip2 -> ip2
I0428 19:40:32.262328 24571 net.cpp:124] Setting up ip2
I0428 19:40:32.262336 24571 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:32.262339 24571 net.cpp:139] Memory required for data: 1080800
I0428 19:40:32.262344 24571 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:32.262356 24571 net.cpp:86] Creating Layer relu2
I0428 19:40:32.262361 24571 net.cpp:408] relu2 <- ip2
I0428 19:40:32.262364 24571 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:32.262531 24571 net.cpp:124] Setting up relu2
I0428 19:40:32.262540 24571 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:32.262543 24571 net.cpp:139] Memory required for data: 1090800
I0428 19:40:32.262547 24571 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:32.262552 24571 net.cpp:86] Creating Layer ip3
I0428 19:40:32.262554 24571 net.cpp:408] ip3 <- ip2
I0428 19:40:32.262559 24571 net.cpp:382] ip3 -> ip3
I0428 19:40:32.262722 24571 net.cpp:124] Setting up ip3
I0428 19:40:32.262730 24571 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:32.262733 24571 net.cpp:139] Memory required for data: 1094800
I0428 19:40:32.262742 24571 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:32.262748 24571 net.cpp:86] Creating Layer relu3
I0428 19:40:32.262750 24571 net.cpp:408] relu3 <- ip3
I0428 19:40:32.262755 24571 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:32.263639 24571 net.cpp:124] Setting up relu3
I0428 19:40:32.263651 24571 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:32.263671 24571 net.cpp:139] Memory required for data: 1098800
I0428 19:40:32.263674 24571 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:32.263680 24571 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:32.263684 24571 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:32.263690 24571 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:32.263696 24571 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:32.263736 24571 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:32.263743 24571 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:32.263747 24571 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:32.263751 24571 net.cpp:139] Memory required for data: 1106800
I0428 19:40:32.263754 24571 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:32.263761 24571 net.cpp:86] Creating Layer accuracy
I0428 19:40:32.263763 24571 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:32.263767 24571 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:32.263772 24571 net.cpp:382] accuracy -> accuracy
I0428 19:40:32.263779 24571 net.cpp:124] Setting up accuracy
I0428 19:40:32.263787 24571 net.cpp:131] Top shape: (1)
I0428 19:40:32.263790 24571 net.cpp:139] Memory required for data: 1106804
I0428 19:40:32.263793 24571 layer_factory.hpp:77] Creating layer loss
I0428 19:40:32.263798 24571 net.cpp:86] Creating Layer loss
I0428 19:40:32.263808 24571 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:32.263813 24571 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:32.263818 24571 net.cpp:382] loss -> loss
I0428 19:40:32.263824 24571 layer_factory.hpp:77] Creating layer loss
I0428 19:40:32.264083 24571 net.cpp:124] Setting up loss
I0428 19:40:32.264096 24571 net.cpp:131] Top shape: (1)
I0428 19:40:32.264099 24571 net.cpp:134]     with loss weight 1
I0428 19:40:32.264106 24571 net.cpp:139] Memory required for data: 1106808
I0428 19:40:32.264134 24571 net.cpp:200] loss needs backward computation.
I0428 19:40:32.264139 24571 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:32.264161 24571 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:32.264166 24571 net.cpp:200] relu3 needs backward computation.
I0428 19:40:32.264169 24571 net.cpp:200] ip3 needs backward computation.
I0428 19:40:32.264173 24571 net.cpp:200] relu2 needs backward computation.
I0428 19:40:32.264188 24571 net.cpp:200] ip2 needs backward computation.
I0428 19:40:32.264190 24571 net.cpp:200] relu1 needs backward computation.
I0428 19:40:32.264194 24571 net.cpp:200] ip1 needs backward computation.
I0428 19:40:32.264197 24571 net.cpp:200] pool1 needs backward computation.
I0428 19:40:32.264201 24571 net.cpp:200] conv1 needs backward computation.
I0428 19:40:32.264204 24571 net.cpp:200] pool0 needs backward computation.
I0428 19:40:32.264209 24571 net.cpp:200] conv0 needs backward computation.
I0428 19:40:32.264212 24571 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:32.264217 24571 net.cpp:202] mnist does not need backward computation.
I0428 19:40:32.264220 24571 net.cpp:244] This network produces output accuracy
I0428 19:40:32.264225 24571 net.cpp:244] This network produces output loss
I0428 19:40:32.264235 24571 net.cpp:257] Network initialization done.
I0428 19:40:32.264279 24571 solver.cpp:56] Solver scaffolding done.
I0428 19:40:32.264688 24571 caffe.cpp:248] Starting Optimization
I0428 19:40:32.264693 24571 solver.cpp:273] Solving LeNet
I0428 19:40:32.264696 24571 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:32.265672 24571 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:32.268045 24571 blocking_queue.cpp:49] Waiting for data
I0428 19:40:32.339936 24578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:32.340402 24571 solver.cpp:398]     Test net output #0: accuracy = 0.093
I0428 19:40:32.340435 24571 solver.cpp:398]     Test net output #1: loss = 2.31296 (* 1 = 2.31296 loss)
I0428 19:40:32.342334 24571 solver.cpp:219] Iteration 0 (0 iter/s, 0.0775982s/100 iters), loss = 2.30573
I0428 19:40:32.342373 24571 solver.cpp:238]     Train net output #0: loss = 2.30573 (* 1 = 2.30573 loss)
I0428 19:40:32.342397 24571 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:32.415144 24571 solver.cpp:219] Iteration 100 (1374.63 iter/s, 0.072747s/100 iters), loss = 0.735904
I0428 19:40:32.415185 24571 solver.cpp:238]     Train net output #0: loss = 0.735904 (* 1 = 0.735904 loss)
I0428 19:40:32.415192 24571 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:32.486919 24571 solver.cpp:219] Iteration 200 (1393.95 iter/s, 0.0717383s/100 iters), loss = 0.469319
I0428 19:40:32.486943 24571 solver.cpp:238]     Train net output #0: loss = 0.469319 (* 1 = 0.469319 loss)
I0428 19:40:32.486965 24571 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:32.557662 24571 solver.cpp:219] Iteration 300 (1414.3 iter/s, 0.0707062s/100 iters), loss = 0.456824
I0428 19:40:32.557684 24571 solver.cpp:238]     Train net output #0: loss = 0.456824 (* 1 = 0.456824 loss)
I0428 19:40:32.557706 24571 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:32.627818 24571 solver.cpp:219] Iteration 400 (1426.1 iter/s, 0.0701215s/100 iters), loss = 0.220941
I0428 19:40:32.627842 24571 solver.cpp:238]     Train net output #0: loss = 0.220941 (* 1 = 0.220941 loss)
I0428 19:40:32.627864 24571 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:32.698165 24571 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:32.770773 24578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:32.771220 24571 solver.cpp:398]     Test net output #0: accuracy = 0.9381
I0428 19:40:32.771239 24571 solver.cpp:398]     Test net output #1: loss = 0.205156 (* 1 = 0.205156 loss)
I0428 19:40:32.772066 24571 solver.cpp:219] Iteration 500 (693.424 iter/s, 0.144212s/100 iters), loss = 0.281694
I0428 19:40:32.772094 24571 solver.cpp:238]     Train net output #0: loss = 0.281694 (* 1 = 0.281694 loss)
I0428 19:40:32.772115 24571 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:32.844384 24571 solver.cpp:219] Iteration 600 (1383.55 iter/s, 0.072278s/100 iters), loss = 0.191182
I0428 19:40:32.844424 24571 solver.cpp:238]     Train net output #0: loss = 0.191182 (* 1 = 0.191182 loss)
I0428 19:40:32.844431 24571 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:32.915580 24571 solver.cpp:219] Iteration 700 (1405.39 iter/s, 0.0711548s/100 iters), loss = 0.194474
I0428 19:40:32.915619 24571 solver.cpp:238]     Train net output #0: loss = 0.194474 (* 1 = 0.194474 loss)
I0428 19:40:32.915626 24571 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:32.985482 24571 solver.cpp:219] Iteration 800 (1431.26 iter/s, 0.0698685s/100 iters), loss = 0.271767
I0428 19:40:32.985522 24571 solver.cpp:238]     Train net output #0: loss = 0.271767 (* 1 = 0.271767 loss)
I0428 19:40:32.985528 24571 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:33.055744 24571 solver.cpp:219] Iteration 900 (1424.25 iter/s, 0.0702126s/100 iters), loss = 0.197392
I0428 19:40:33.055770 24571 solver.cpp:238]     Train net output #0: loss = 0.197392 (* 1 = 0.197392 loss)
I0428 19:40:33.055793 24571 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:33.079331 24577 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:33.124790 24571 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:33.125504 24571 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:33.125957 24571 solver.cpp:311] Iteration 1000, loss = 0.204584
I0428 19:40:33.125985 24571 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:33.178738 24578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:33.179240 24571 solver.cpp:398]     Test net output #0: accuracy = 0.9577
I0428 19:40:33.179275 24571 solver.cpp:398]     Test net output #1: loss = 0.133665 (* 1 = 0.133665 loss)
I0428 19:40:33.179280 24571 solver.cpp:316] Optimization Done.
I0428 19:40:33.179282 24571 caffe.cpp:259] Optimization Done.
