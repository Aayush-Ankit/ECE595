I0428 19:32:57.555922 22996 caffe.cpp:218] Using GPUs 0
I0428 19:32:57.596715 22996 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:32:58.111485 22996 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test167.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:32:58.111661 22996 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test167.prototxt
I0428 19:32:58.112002 22996 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:32:58.112023 22996 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:32:58.112110 22996 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:58.112208 22996 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:58.112341 22996 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:32:58.112378 22996 net.cpp:86] Creating Layer mnist
I0428 19:32:58.112391 22996 net.cpp:382] mnist -> data
I0428 19:32:58.112422 22996 net.cpp:382] mnist -> label
I0428 19:32:58.113627 22996 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:32:58.116313 22996 net.cpp:124] Setting up mnist
I0428 19:32:58.116338 22996 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:32:58.116349 22996 net.cpp:131] Top shape: 64 (64)
I0428 19:32:58.116355 22996 net.cpp:139] Memory required for data: 200960
I0428 19:32:58.116366 22996 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:58.116392 22996 net.cpp:86] Creating Layer conv0
I0428 19:32:58.116405 22996 net.cpp:408] conv0 <- data
I0428 19:32:58.116423 22996 net.cpp:382] conv0 -> conv0
I0428 19:32:58.401590 22996 net.cpp:124] Setting up conv0
I0428 19:32:58.401621 22996 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 19:32:58.401628 22996 net.cpp:139] Memory required for data: 3887360
I0428 19:32:58.401648 22996 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:58.401666 22996 net.cpp:86] Creating Layer pool0
I0428 19:32:58.401680 22996 net.cpp:408] pool0 <- conv0
I0428 19:32:58.401690 22996 net.cpp:382] pool0 -> pool0
I0428 19:32:58.401746 22996 net.cpp:124] Setting up pool0
I0428 19:32:58.401756 22996 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 19:32:58.401760 22996 net.cpp:139] Memory required for data: 4808960
I0428 19:32:58.401784 22996 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:58.401796 22996 net.cpp:86] Creating Layer ip1
I0428 19:32:58.401803 22996 net.cpp:408] ip1 <- pool0
I0428 19:32:58.401811 22996 net.cpp:382] ip1 -> ip1
I0428 19:32:58.403733 22996 net.cpp:124] Setting up ip1
I0428 19:32:58.403750 22996 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:32:58.403758 22996 net.cpp:139] Memory required for data: 4821760
I0428 19:32:58.403769 22996 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:58.403780 22996 net.cpp:86] Creating Layer relu1
I0428 19:32:58.403791 22996 net.cpp:408] relu1 <- ip1
I0428 19:32:58.403798 22996 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:58.403972 22996 net.cpp:124] Setting up relu1
I0428 19:32:58.403983 22996 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:32:58.403990 22996 net.cpp:139] Memory required for data: 4834560
I0428 19:32:58.403995 22996 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:58.404005 22996 net.cpp:86] Creating Layer ip2
I0428 19:32:58.404011 22996 net.cpp:408] ip2 <- ip1
I0428 19:32:58.404018 22996 net.cpp:382] ip2 -> ip2
I0428 19:32:58.404121 22996 net.cpp:124] Setting up ip2
I0428 19:32:58.404131 22996 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:58.404136 22996 net.cpp:139] Memory required for data: 4837120
I0428 19:32:58.404147 22996 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:58.404156 22996 net.cpp:86] Creating Layer relu2
I0428 19:32:58.404161 22996 net.cpp:408] relu2 <- ip2
I0428 19:32:58.404168 22996 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:58.404943 22996 net.cpp:124] Setting up relu2
I0428 19:32:58.404958 22996 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:58.404964 22996 net.cpp:139] Memory required for data: 4839680
I0428 19:32:58.404970 22996 layer_factory.hpp:77] Creating layer loss
I0428 19:32:58.404979 22996 net.cpp:86] Creating Layer loss
I0428 19:32:58.404985 22996 net.cpp:408] loss <- ip2
I0428 19:32:58.404994 22996 net.cpp:408] loss <- label
I0428 19:32:58.405002 22996 net.cpp:382] loss -> loss
I0428 19:32:58.405023 22996 layer_factory.hpp:77] Creating layer loss
I0428 19:32:58.405274 22996 net.cpp:124] Setting up loss
I0428 19:32:58.405287 22996 net.cpp:131] Top shape: (1)
I0428 19:32:58.405293 22996 net.cpp:134]     with loss weight 1
I0428 19:32:58.405313 22996 net.cpp:139] Memory required for data: 4839684
I0428 19:32:58.405319 22996 net.cpp:200] loss needs backward computation.
I0428 19:32:58.405325 22996 net.cpp:200] relu2 needs backward computation.
I0428 19:32:58.405331 22996 net.cpp:200] ip2 needs backward computation.
I0428 19:32:58.405336 22996 net.cpp:200] relu1 needs backward computation.
I0428 19:32:58.405341 22996 net.cpp:200] ip1 needs backward computation.
I0428 19:32:58.405346 22996 net.cpp:200] pool0 needs backward computation.
I0428 19:32:58.405351 22996 net.cpp:200] conv0 needs backward computation.
I0428 19:32:58.405357 22996 net.cpp:202] mnist does not need backward computation.
I0428 19:32:58.405362 22996 net.cpp:244] This network produces output loss
I0428 19:32:58.405375 22996 net.cpp:257] Network initialization done.
I0428 19:32:58.405625 22996 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test167.prototxt
I0428 19:32:58.405656 22996 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:32:58.405735 22996 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:32:58.405833 22996 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:58.405892 22996 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:32:58.405910 22996 net.cpp:86] Creating Layer mnist
I0428 19:32:58.405916 22996 net.cpp:382] mnist -> data
I0428 19:32:58.405928 22996 net.cpp:382] mnist -> label
I0428 19:32:58.406044 22996 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:32:58.407141 22996 net.cpp:124] Setting up mnist
I0428 19:32:58.407157 22996 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:32:58.407166 22996 net.cpp:131] Top shape: 100 (100)
I0428 19:32:58.407171 22996 net.cpp:139] Memory required for data: 314000
I0428 19:32:58.407176 22996 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:32:58.407186 22996 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:32:58.407191 22996 net.cpp:408] label_mnist_1_split <- label
I0428 19:32:58.407199 22996 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:32:58.407209 22996 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:32:58.407258 22996 net.cpp:124] Setting up label_mnist_1_split
I0428 19:32:58.407268 22996 net.cpp:131] Top shape: 100 (100)
I0428 19:32:58.407274 22996 net.cpp:131] Top shape: 100 (100)
I0428 19:32:58.407279 22996 net.cpp:139] Memory required for data: 314800
I0428 19:32:58.407284 22996 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:58.407297 22996 net.cpp:86] Creating Layer conv0
I0428 19:32:58.407305 22996 net.cpp:408] conv0 <- data
I0428 19:32:58.407315 22996 net.cpp:382] conv0 -> conv0
I0428 19:32:58.408924 22996 net.cpp:124] Setting up conv0
I0428 19:32:58.408941 22996 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 19:32:58.408947 22996 net.cpp:139] Memory required for data: 6074800
I0428 19:32:58.408977 22996 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:58.408988 22996 net.cpp:86] Creating Layer pool0
I0428 19:32:58.408996 22996 net.cpp:408] pool0 <- conv0
I0428 19:32:58.409005 22996 net.cpp:382] pool0 -> pool0
I0428 19:32:58.409046 22996 net.cpp:124] Setting up pool0
I0428 19:32:58.409056 22996 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 19:32:58.409061 22996 net.cpp:139] Memory required for data: 7514800
I0428 19:32:58.409067 22996 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:58.409077 22996 net.cpp:86] Creating Layer ip1
I0428 19:32:58.409083 22996 net.cpp:408] ip1 <- pool0
I0428 19:32:58.409091 22996 net.cpp:382] ip1 -> ip1
I0428 19:32:58.411109 22996 net.cpp:124] Setting up ip1
I0428 19:32:58.411123 22996 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:32:58.411129 22996 net.cpp:139] Memory required for data: 7534800
I0428 19:32:58.411157 22996 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:58.411165 22996 net.cpp:86] Creating Layer relu1
I0428 19:32:58.411171 22996 net.cpp:408] relu1 <- ip1
I0428 19:32:58.411180 22996 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:58.411366 22996 net.cpp:124] Setting up relu1
I0428 19:32:58.411377 22996 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:32:58.411396 22996 net.cpp:139] Memory required for data: 7554800
I0428 19:32:58.411403 22996 layer_factory.hpp:77] Creating layer ip2
I0428 19:32:58.411413 22996 net.cpp:86] Creating Layer ip2
I0428 19:32:58.411420 22996 net.cpp:408] ip2 <- ip1
I0428 19:32:58.411430 22996 net.cpp:382] ip2 -> ip2
I0428 19:32:58.411548 22996 net.cpp:124] Setting up ip2
I0428 19:32:58.411559 22996 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:58.411564 22996 net.cpp:139] Memory required for data: 7558800
I0428 19:32:58.411576 22996 layer_factory.hpp:77] Creating layer relu2
I0428 19:32:58.411584 22996 net.cpp:86] Creating Layer relu2
I0428 19:32:58.411592 22996 net.cpp:408] relu2 <- ip2
I0428 19:32:58.411600 22996 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:32:58.411754 22996 net.cpp:124] Setting up relu2
I0428 19:32:58.411764 22996 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:58.411775 22996 net.cpp:139] Memory required for data: 7562800
I0428 19:32:58.411780 22996 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:32:58.411792 22996 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:32:58.411798 22996 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:32:58.411806 22996 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:32:58.411821 22996 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:32:58.411877 22996 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:32:58.411886 22996 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:58.411893 22996 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:58.411898 22996 net.cpp:139] Memory required for data: 7570800
I0428 19:32:58.411902 22996 layer_factory.hpp:77] Creating layer accuracy
I0428 19:32:58.411911 22996 net.cpp:86] Creating Layer accuracy
I0428 19:32:58.411916 22996 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:32:58.411922 22996 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:32:58.411931 22996 net.cpp:382] accuracy -> accuracy
I0428 19:32:58.411942 22996 net.cpp:124] Setting up accuracy
I0428 19:32:58.411950 22996 net.cpp:131] Top shape: (1)
I0428 19:32:58.411955 22996 net.cpp:139] Memory required for data: 7570804
I0428 19:32:58.411960 22996 layer_factory.hpp:77] Creating layer loss
I0428 19:32:58.411967 22996 net.cpp:86] Creating Layer loss
I0428 19:32:58.411973 22996 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:32:58.411979 22996 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:32:58.411986 22996 net.cpp:382] loss -> loss
I0428 19:32:58.411995 22996 layer_factory.hpp:77] Creating layer loss
I0428 19:32:58.413031 22996 net.cpp:124] Setting up loss
I0428 19:32:58.413048 22996 net.cpp:131] Top shape: (1)
I0428 19:32:58.413054 22996 net.cpp:134]     with loss weight 1
I0428 19:32:58.413064 22996 net.cpp:139] Memory required for data: 7570808
I0428 19:32:58.413070 22996 net.cpp:200] loss needs backward computation.
I0428 19:32:58.413077 22996 net.cpp:202] accuracy does not need backward computation.
I0428 19:32:58.413084 22996 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:32:58.413090 22996 net.cpp:200] relu2 needs backward computation.
I0428 19:32:58.413095 22996 net.cpp:200] ip2 needs backward computation.
I0428 19:32:58.413101 22996 net.cpp:200] relu1 needs backward computation.
I0428 19:32:58.413107 22996 net.cpp:200] ip1 needs backward computation.
I0428 19:32:58.413113 22996 net.cpp:200] pool0 needs backward computation.
I0428 19:32:58.413120 22996 net.cpp:200] conv0 needs backward computation.
I0428 19:32:58.413125 22996 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:32:58.413132 22996 net.cpp:202] mnist does not need backward computation.
I0428 19:32:58.413142 22996 net.cpp:244] This network produces output accuracy
I0428 19:32:58.413149 22996 net.cpp:244] This network produces output loss
I0428 19:32:58.413166 22996 net.cpp:257] Network initialization done.
I0428 19:32:58.413221 22996 solver.cpp:56] Solver scaffolding done.
I0428 19:32:58.413445 22996 caffe.cpp:248] Starting Optimization
I0428 19:32:58.413456 22996 solver.cpp:273] Solving LeNet
I0428 19:32:58.413473 22996 solver.cpp:274] Learning Rate Policy: inv
I0428 19:32:58.414324 22996 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:32:58.421020 22996 blocking_queue.cpp:49] Waiting for data
I0428 19:32:58.491485 23005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:58.492195 22996 solver.cpp:398]     Test net output #0: accuracy = 0.1322
I0428 19:32:58.492216 22996 solver.cpp:398]     Test net output #1: loss = 2.29213 (* 1 = 2.29213 loss)
I0428 19:32:58.495704 22996 solver.cpp:219] Iteration 0 (0 iter/s, 0.0822006s/100 iters), loss = 2.3347
I0428 19:32:58.495731 22996 solver.cpp:238]     Train net output #0: loss = 2.3347 (* 1 = 2.3347 loss)
I0428 19:32:58.495764 22996 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:32:58.587491 22996 solver.cpp:219] Iteration 100 (1089.91 iter/s, 0.0917505s/100 iters), loss = 0.273761
I0428 19:32:58.587520 22996 solver.cpp:238]     Train net output #0: loss = 0.273761 (* 1 = 0.273761 loss)
I0428 19:32:58.587546 22996 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:32:58.677939 22996 solver.cpp:219] Iteration 200 (1106.03 iter/s, 0.0904131s/100 iters), loss = 0.231108
I0428 19:32:58.677969 22996 solver.cpp:238]     Train net output #0: loss = 0.231108 (* 1 = 0.231108 loss)
I0428 19:32:58.677996 22996 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:32:58.776299 22996 solver.cpp:219] Iteration 300 (1017.06 iter/s, 0.0983224s/100 iters), loss = 0.254829
I0428 19:32:58.776334 22996 solver.cpp:238]     Train net output #0: loss = 0.254829 (* 1 = 0.254829 loss)
I0428 19:32:58.776360 22996 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:32:58.876493 22996 solver.cpp:219] Iteration 400 (998.479 iter/s, 0.100152s/100 iters), loss = 0.114791
I0428 19:32:58.876524 22996 solver.cpp:238]     Train net output #0: loss = 0.114791 (* 1 = 0.114791 loss)
I0428 19:32:58.876551 22996 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:32:58.975602 22996 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:32:59.051405 23005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:59.052098 22996 solver.cpp:398]     Test net output #0: accuracy = 0.9487
I0428 19:32:59.052120 22996 solver.cpp:398]     Test net output #1: loss = 0.17383 (* 1 = 0.17383 loss)
I0428 19:32:59.053102 22996 solver.cpp:219] Iteration 500 (566.357 iter/s, 0.176567s/100 iters), loss = 0.263282
I0428 19:32:59.053143 22996 solver.cpp:238]     Train net output #0: loss = 0.263282 (* 1 = 0.263282 loss)
I0428 19:32:59.053155 22996 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:32:59.150303 22996 solver.cpp:219] Iteration 600 (1029.27 iter/s, 0.0971559s/100 iters), loss = 0.146894
I0428 19:32:59.150333 22996 solver.cpp:238]     Train net output #0: loss = 0.146894 (* 1 = 0.146894 loss)
I0428 19:32:59.150359 22996 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:32:59.242321 22996 solver.cpp:219] Iteration 700 (1087.24 iter/s, 0.0919757s/100 iters), loss = 0.218355
I0428 19:32:59.242352 22996 solver.cpp:238]     Train net output #0: loss = 0.218355 (* 1 = 0.218355 loss)
I0428 19:32:59.242378 22996 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:32:59.332820 22996 solver.cpp:219] Iteration 800 (1105.45 iter/s, 0.0904612s/100 iters), loss = 0.294754
I0428 19:32:59.332865 22996 solver.cpp:238]     Train net output #0: loss = 0.294754 (* 1 = 0.294754 loss)
I0428 19:32:59.332891 22996 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:32:59.423518 22996 solver.cpp:219] Iteration 900 (1103.19 iter/s, 0.0906465s/100 iters), loss = 0.205445
I0428 19:32:59.423549 22996 solver.cpp:238]     Train net output #0: loss = 0.205445 (* 1 = 0.205445 loss)
I0428 19:32:59.423576 22996 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:32:59.453711 23004 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:59.512516 22996 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:32:59.516232 22996 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:32:59.518113 22996 solver.cpp:311] Iteration 1000, loss = 0.118836
I0428 19:32:59.518129 22996 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:32:59.594660 23005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:59.595366 22996 solver.cpp:398]     Test net output #0: accuracy = 0.9681
I0428 19:32:59.595387 22996 solver.cpp:398]     Test net output #1: loss = 0.105768 (* 1 = 0.105768 loss)
I0428 19:32:59.595412 22996 solver.cpp:316] Optimization Done.
I0428 19:32:59.595417 22996 caffe.cpp:259] Optimization Done.
