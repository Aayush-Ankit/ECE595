I0428 19:58:31.281289 28995 caffe.cpp:218] Using GPUs 0
I0428 19:58:31.310133 28995 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:31.814124 28995 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test821.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:31.814262 28995 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test821.prototxt
I0428 19:58:31.814594 28995 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:31.814610 28995 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:31.814688 28995 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:31.814751 28995 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:31.814849 28995 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:31.814872 28995 net.cpp:86] Creating Layer mnist
I0428 19:58:31.814879 28995 net.cpp:382] mnist -> data
I0428 19:58:31.814901 28995 net.cpp:382] mnist -> label
I0428 19:58:31.815990 28995 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:31.818819 28995 net.cpp:124] Setting up mnist
I0428 19:58:31.818837 28995 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:31.818843 28995 net.cpp:131] Top shape: 64 (64)
I0428 19:58:31.818847 28995 net.cpp:139] Memory required for data: 200960
I0428 19:58:31.818856 28995 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:31.818871 28995 net.cpp:86] Creating Layer conv0
I0428 19:58:31.818876 28995 net.cpp:408] conv0 <- data
I0428 19:58:31.818888 28995 net.cpp:382] conv0 -> conv0
I0428 19:58:32.139186 28995 net.cpp:124] Setting up conv0
I0428 19:58:32.139220 28995 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:32.139226 28995 net.cpp:139] Memory required for data: 1675520
I0428 19:58:32.139243 28995 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:32.139258 28995 net.cpp:86] Creating Layer pool0
I0428 19:58:32.139264 28995 net.cpp:408] pool0 <- conv0
I0428 19:58:32.139271 28995 net.cpp:382] pool0 -> pool0
I0428 19:58:32.139327 28995 net.cpp:124] Setting up pool0
I0428 19:58:32.139340 28995 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:32.139363 28995 net.cpp:139] Memory required for data: 2044160
I0428 19:58:32.139366 28995 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:32.139379 28995 net.cpp:86] Creating Layer conv1
I0428 19:58:32.139384 28995 net.cpp:408] conv1 <- pool0
I0428 19:58:32.139389 28995 net.cpp:382] conv1 -> conv1
I0428 19:58:32.142525 28995 net.cpp:124] Setting up conv1
I0428 19:58:32.142544 28995 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:58:32.142549 28995 net.cpp:139] Memory required for data: 2208000
I0428 19:58:32.142559 28995 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:32.142568 28995 net.cpp:86] Creating Layer pool1
I0428 19:58:32.142572 28995 net.cpp:408] pool1 <- conv1
I0428 19:58:32.142578 28995 net.cpp:382] pool1 -> pool1
I0428 19:58:32.142623 28995 net.cpp:124] Setting up pool1
I0428 19:58:32.142630 28995 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:58:32.142633 28995 net.cpp:139] Memory required for data: 2248960
I0428 19:58:32.142637 28995 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:32.142647 28995 net.cpp:86] Creating Layer ip1
I0428 19:58:32.142650 28995 net.cpp:408] ip1 <- pool1
I0428 19:58:32.142655 28995 net.cpp:382] ip1 -> ip1
I0428 19:58:32.142782 28995 net.cpp:124] Setting up ip1
I0428 19:58:32.142792 28995 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:32.142796 28995 net.cpp:139] Memory required for data: 2251520
I0428 19:58:32.142803 28995 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:32.142810 28995 net.cpp:86] Creating Layer relu1
I0428 19:58:32.142814 28995 net.cpp:408] relu1 <- ip1
I0428 19:58:32.142819 28995 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:32.143014 28995 net.cpp:124] Setting up relu1
I0428 19:58:32.143025 28995 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:32.143028 28995 net.cpp:139] Memory required for data: 2254080
I0428 19:58:32.143033 28995 layer_factory.hpp:77] Creating layer loss
I0428 19:58:32.143040 28995 net.cpp:86] Creating Layer loss
I0428 19:58:32.143044 28995 net.cpp:408] loss <- ip1
I0428 19:58:32.143049 28995 net.cpp:408] loss <- label
I0428 19:58:32.143054 28995 net.cpp:382] loss -> loss
I0428 19:58:32.143076 28995 layer_factory.hpp:77] Creating layer loss
I0428 19:58:32.144014 28995 net.cpp:124] Setting up loss
I0428 19:58:32.144029 28995 net.cpp:131] Top shape: (1)
I0428 19:58:32.144033 28995 net.cpp:134]     with loss weight 1
I0428 19:58:32.144050 28995 net.cpp:139] Memory required for data: 2254084
I0428 19:58:32.144054 28995 net.cpp:200] loss needs backward computation.
I0428 19:58:32.144060 28995 net.cpp:200] relu1 needs backward computation.
I0428 19:58:32.144063 28995 net.cpp:200] ip1 needs backward computation.
I0428 19:58:32.144068 28995 net.cpp:200] pool1 needs backward computation.
I0428 19:58:32.144071 28995 net.cpp:200] conv1 needs backward computation.
I0428 19:58:32.144074 28995 net.cpp:200] pool0 needs backward computation.
I0428 19:58:32.144078 28995 net.cpp:200] conv0 needs backward computation.
I0428 19:58:32.144083 28995 net.cpp:202] mnist does not need backward computation.
I0428 19:58:32.144085 28995 net.cpp:244] This network produces output loss
I0428 19:58:32.144094 28995 net.cpp:257] Network initialization done.
I0428 19:58:32.144400 28995 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test821.prototxt
I0428 19:58:32.144429 28995 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:32.144516 28995 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:32.144598 28995 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:32.144651 28995 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:32.144666 28995 net.cpp:86] Creating Layer mnist
I0428 19:58:32.144671 28995 net.cpp:382] mnist -> data
I0428 19:58:32.144680 28995 net.cpp:382] mnist -> label
I0428 19:58:32.144781 28995 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:32.146998 28995 net.cpp:124] Setting up mnist
I0428 19:58:32.147014 28995 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:32.147020 28995 net.cpp:131] Top shape: 100 (100)
I0428 19:58:32.147024 28995 net.cpp:139] Memory required for data: 314000
I0428 19:58:32.147028 28995 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:32.147045 28995 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:32.147049 28995 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:32.147055 28995 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:32.147063 28995 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:32.147117 28995 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:32.147125 28995 net.cpp:131] Top shape: 100 (100)
I0428 19:58:32.147128 28995 net.cpp:131] Top shape: 100 (100)
I0428 19:58:32.147132 28995 net.cpp:139] Memory required for data: 314800
I0428 19:58:32.147136 28995 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:32.147145 28995 net.cpp:86] Creating Layer conv0
I0428 19:58:32.147150 28995 net.cpp:408] conv0 <- data
I0428 19:58:32.147156 28995 net.cpp:382] conv0 -> conv0
I0428 19:58:32.148205 28995 net.cpp:124] Setting up conv0
I0428 19:58:32.148219 28995 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:32.148224 28995 net.cpp:139] Memory required for data: 2618800
I0428 19:58:32.148234 28995 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:32.148242 28995 net.cpp:86] Creating Layer pool0
I0428 19:58:32.148247 28995 net.cpp:408] pool0 <- conv0
I0428 19:58:32.148252 28995 net.cpp:382] pool0 -> pool0
I0428 19:58:32.148294 28995 net.cpp:124] Setting up pool0
I0428 19:58:32.148300 28995 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:32.148303 28995 net.cpp:139] Memory required for data: 3194800
I0428 19:58:32.148308 28995 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:32.148317 28995 net.cpp:86] Creating Layer conv1
I0428 19:58:32.148320 28995 net.cpp:408] conv1 <- pool0
I0428 19:58:32.148326 28995 net.cpp:382] conv1 -> conv1
I0428 19:58:32.150650 28995 net.cpp:124] Setting up conv1
I0428 19:58:32.150665 28995 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:58:32.150670 28995 net.cpp:139] Memory required for data: 3450800
I0428 19:58:32.150679 28995 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:32.150687 28995 net.cpp:86] Creating Layer pool1
I0428 19:58:32.150704 28995 net.cpp:408] pool1 <- conv1
I0428 19:58:32.150712 28995 net.cpp:382] pool1 -> pool1
I0428 19:58:32.150774 28995 net.cpp:124] Setting up pool1
I0428 19:58:32.150781 28995 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:58:32.150784 28995 net.cpp:139] Memory required for data: 3514800
I0428 19:58:32.150789 28995 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:32.150794 28995 net.cpp:86] Creating Layer ip1
I0428 19:58:32.150799 28995 net.cpp:408] ip1 <- pool1
I0428 19:58:32.150804 28995 net.cpp:382] ip1 -> ip1
I0428 19:58:32.150938 28995 net.cpp:124] Setting up ip1
I0428 19:58:32.150949 28995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:32.150952 28995 net.cpp:139] Memory required for data: 3518800
I0428 19:58:32.150960 28995 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:32.150966 28995 net.cpp:86] Creating Layer relu1
I0428 19:58:32.150969 28995 net.cpp:408] relu1 <- ip1
I0428 19:58:32.150975 28995 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:32.151887 28995 net.cpp:124] Setting up relu1
I0428 19:58:32.151901 28995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:32.151906 28995 net.cpp:139] Memory required for data: 3522800
I0428 19:58:32.151911 28995 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:58:32.151918 28995 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:58:32.151922 28995 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:58:32.151928 28995 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:58:32.151937 28995 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:58:32.151989 28995 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:58:32.151998 28995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:32.152003 28995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:32.152005 28995 net.cpp:139] Memory required for data: 3530800
I0428 19:58:32.152009 28995 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:32.152015 28995 net.cpp:86] Creating Layer accuracy
I0428 19:58:32.152019 28995 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:58:32.152024 28995 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:32.152029 28995 net.cpp:382] accuracy -> accuracy
I0428 19:58:32.152037 28995 net.cpp:124] Setting up accuracy
I0428 19:58:32.152042 28995 net.cpp:131] Top shape: (1)
I0428 19:58:32.152046 28995 net.cpp:139] Memory required for data: 3530804
I0428 19:58:32.152050 28995 layer_factory.hpp:77] Creating layer loss
I0428 19:58:32.152055 28995 net.cpp:86] Creating Layer loss
I0428 19:58:32.152058 28995 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:58:32.152062 28995 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:32.152067 28995 net.cpp:382] loss -> loss
I0428 19:58:32.152076 28995 layer_factory.hpp:77] Creating layer loss
I0428 19:58:32.152351 28995 net.cpp:124] Setting up loss
I0428 19:58:32.152364 28995 net.cpp:131] Top shape: (1)
I0428 19:58:32.152367 28995 net.cpp:134]     with loss weight 1
I0428 19:58:32.152374 28995 net.cpp:139] Memory required for data: 3530808
I0428 19:58:32.152379 28995 net.cpp:200] loss needs backward computation.
I0428 19:58:32.152384 28995 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:32.152390 28995 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:58:32.152392 28995 net.cpp:200] relu1 needs backward computation.
I0428 19:58:32.152396 28995 net.cpp:200] ip1 needs backward computation.
I0428 19:58:32.152400 28995 net.cpp:200] pool1 needs backward computation.
I0428 19:58:32.152403 28995 net.cpp:200] conv1 needs backward computation.
I0428 19:58:32.152407 28995 net.cpp:200] pool0 needs backward computation.
I0428 19:58:32.152411 28995 net.cpp:200] conv0 needs backward computation.
I0428 19:58:32.152416 28995 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:32.152420 28995 net.cpp:202] mnist does not need backward computation.
I0428 19:58:32.152425 28995 net.cpp:244] This network produces output accuracy
I0428 19:58:32.152427 28995 net.cpp:244] This network produces output loss
I0428 19:58:32.152449 28995 net.cpp:257] Network initialization done.
I0428 19:58:32.152490 28995 solver.cpp:56] Solver scaffolding done.
I0428 19:58:32.152743 28995 caffe.cpp:248] Starting Optimization
I0428 19:58:32.152751 28995 solver.cpp:273] Solving LeNet
I0428 19:58:32.152755 28995 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:32.153002 28995 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:32.157068 28995 blocking_queue.cpp:49] Waiting for data
I0428 19:58:32.228426 29002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:32.229043 28995 solver.cpp:398]     Test net output #0: accuracy = 0.0635
I0428 19:58:32.229079 28995 solver.cpp:398]     Test net output #1: loss = 2.49302 (* 1 = 2.49302 loss)
I0428 19:58:32.232352 28995 solver.cpp:219] Iteration 0 (0 iter/s, 0.0795515s/100 iters), loss = 2.50874
I0428 19:58:32.232390 28995 solver.cpp:238]     Train net output #0: loss = 2.50874 (* 1 = 2.50874 loss)
I0428 19:58:32.232409 28995 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:32.305801 28995 solver.cpp:219] Iteration 100 (1362.37 iter/s, 0.0734014s/100 iters), loss = 1.39797
I0428 19:58:32.305835 28995 solver.cpp:238]     Train net output #0: loss = 1.39797 (* 1 = 1.39797 loss)
I0428 19:58:32.305845 28995 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:32.372478 28995 solver.cpp:219] Iteration 200 (1500.74 iter/s, 0.0666337s/100 iters), loss = 0.993123
I0428 19:58:32.372508 28995 solver.cpp:238]     Train net output #0: loss = 0.993123 (* 1 = 0.993123 loss)
I0428 19:58:32.372514 28995 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:32.438765 28995 solver.cpp:219] Iteration 300 (1509.46 iter/s, 0.0662487s/100 iters), loss = 0.844325
I0428 19:58:32.438792 28995 solver.cpp:238]     Train net output #0: loss = 0.844325 (* 1 = 0.844325 loss)
I0428 19:58:32.438801 28995 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:32.504040 28995 solver.cpp:219] Iteration 400 (1532.82 iter/s, 0.065239s/100 iters), loss = 0.4366
I0428 19:58:32.504068 28995 solver.cpp:238]     Train net output #0: loss = 0.4366 (* 1 = 0.4366 loss)
I0428 19:58:32.504076 28995 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:32.568925 28995 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:32.643245 29002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:32.643717 28995 solver.cpp:398]     Test net output #0: accuracy = 0.8937
I0428 19:58:32.643739 28995 solver.cpp:398]     Test net output #1: loss = 0.353377 (* 1 = 0.353377 loss)
I0428 19:58:32.644533 28995 solver.cpp:219] Iteration 500 (711.983 iter/s, 0.140453s/100 iters), loss = 0.403914
I0428 19:58:32.644562 28995 solver.cpp:238]     Train net output #0: loss = 0.403914 (* 1 = 0.403914 loss)
I0428 19:58:32.644570 28995 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:32.711122 28995 solver.cpp:219] Iteration 600 (1502.7 iter/s, 0.0665467s/100 iters), loss = 0.0865808
I0428 19:58:32.711151 28995 solver.cpp:238]     Train net output #0: loss = 0.0865808 (* 1 = 0.0865808 loss)
I0428 19:58:32.711159 28995 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:32.777575 28995 solver.cpp:219] Iteration 700 (1505.72 iter/s, 0.0664136s/100 iters), loss = 0.217137
I0428 19:58:32.777603 28995 solver.cpp:238]     Train net output #0: loss = 0.217137 (* 1 = 0.217137 loss)
I0428 19:58:32.777611 28995 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:32.846626 28995 solver.cpp:219] Iteration 800 (1449.12 iter/s, 0.0690074s/100 iters), loss = 0.246791
I0428 19:58:32.846683 28995 solver.cpp:238]     Train net output #0: loss = 0.246791 (* 1 = 0.246791 loss)
I0428 19:58:32.846698 28995 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:32.922832 28995 solver.cpp:219] Iteration 900 (1313.31 iter/s, 0.0761436s/100 iters), loss = 0.279104
I0428 19:58:32.922868 28995 solver.cpp:238]     Train net output #0: loss = 0.279104 (* 1 = 0.279104 loss)
I0428 19:58:32.922876 28995 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:32.945534 29001 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:32.988277 28995 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:32.988896 28995 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:32.989284 28995 solver.cpp:311] Iteration 1000, loss = 0.0862852
I0428 19:58:32.989301 28995 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:33.063158 29002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:33.063633 28995 solver.cpp:398]     Test net output #0: accuracy = 0.9712
I0428 19:58:33.063653 28995 solver.cpp:398]     Test net output #1: loss = 0.100089 (* 1 = 0.100089 loss)
I0428 19:58:33.063660 28995 solver.cpp:316] Optimization Done.
I0428 19:58:33.063664 28995 caffe.cpp:259] Optimization Done.
