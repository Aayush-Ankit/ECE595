I0428 19:47:14.583856 26143 caffe.cpp:218] Using GPUs 0
I0428 19:47:14.622120 26143 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:15.102779 26143 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test509.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:15.102911 26143 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test509.prototxt
I0428 19:47:15.103188 26143 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:15.103199 26143 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:15.103265 26143 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:15.103322 26143 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:15.103404 26143 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:15.103422 26143 net.cpp:86] Creating Layer mnist
I0428 19:47:15.103430 26143 net.cpp:382] mnist -> data
I0428 19:47:15.103447 26143 net.cpp:382] mnist -> label
I0428 19:47:15.104375 26143 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:15.106740 26143 net.cpp:124] Setting up mnist
I0428 19:47:15.106771 26143 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:15.106776 26143 net.cpp:131] Top shape: 64 (64)
I0428 19:47:15.106779 26143 net.cpp:139] Memory required for data: 200960
I0428 19:47:15.106786 26143 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:15.106801 26143 net.cpp:86] Creating Layer conv0
I0428 19:47:15.106807 26143 net.cpp:408] conv0 <- data
I0428 19:47:15.106818 26143 net.cpp:382] conv0 -> conv0
I0428 19:47:15.339309 26143 net.cpp:124] Setting up conv0
I0428 19:47:15.339335 26143 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:15.339339 26143 net.cpp:139] Memory required for data: 938240
I0428 19:47:15.339354 26143 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:15.339380 26143 net.cpp:86] Creating Layer pool0
I0428 19:47:15.339383 26143 net.cpp:408] pool0 <- conv0
I0428 19:47:15.339390 26143 net.cpp:382] pool0 -> pool0
I0428 19:47:15.339448 26143 net.cpp:124] Setting up pool0
I0428 19:47:15.339454 26143 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:15.339473 26143 net.cpp:139] Memory required for data: 1122560
I0428 19:47:15.339476 26143 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:15.339486 26143 net.cpp:86] Creating Layer conv1
I0428 19:47:15.339489 26143 net.cpp:408] conv1 <- pool0
I0428 19:47:15.339494 26143 net.cpp:382] conv1 -> conv1
I0428 19:47:15.341480 26143 net.cpp:124] Setting up conv1
I0428 19:47:15.341493 26143 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:15.341512 26143 net.cpp:139] Memory required for data: 1155328
I0428 19:47:15.341534 26143 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:15.341542 26143 net.cpp:86] Creating Layer pool1
I0428 19:47:15.341545 26143 net.cpp:408] pool1 <- conv1
I0428 19:47:15.341550 26143 net.cpp:382] pool1 -> pool1
I0428 19:47:15.341601 26143 net.cpp:124] Setting up pool1
I0428 19:47:15.341608 26143 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:15.341610 26143 net.cpp:139] Memory required for data: 1163520
I0428 19:47:15.341612 26143 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:15.341619 26143 net.cpp:86] Creating Layer ip1
I0428 19:47:15.341622 26143 net.cpp:408] ip1 <- pool1
I0428 19:47:15.341627 26143 net.cpp:382] ip1 -> ip1
I0428 19:47:15.341750 26143 net.cpp:124] Setting up ip1
I0428 19:47:15.341758 26143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:15.341763 26143 net.cpp:139] Memory required for data: 1166080
I0428 19:47:15.341769 26143 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:15.341775 26143 net.cpp:86] Creating Layer relu1
I0428 19:47:15.341778 26143 net.cpp:408] relu1 <- ip1
I0428 19:47:15.341783 26143 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:15.341969 26143 net.cpp:124] Setting up relu1
I0428 19:47:15.341977 26143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:15.341981 26143 net.cpp:139] Memory required for data: 1168640
I0428 19:47:15.341984 26143 layer_factory.hpp:77] Creating layer loss
I0428 19:47:15.341990 26143 net.cpp:86] Creating Layer loss
I0428 19:47:15.341994 26143 net.cpp:408] loss <- ip1
I0428 19:47:15.341997 26143 net.cpp:408] loss <- label
I0428 19:47:15.342018 26143 net.cpp:382] loss -> loss
I0428 19:47:15.342033 26143 layer_factory.hpp:77] Creating layer loss
I0428 19:47:15.343300 26143 net.cpp:124] Setting up loss
I0428 19:47:15.343312 26143 net.cpp:131] Top shape: (1)
I0428 19:47:15.343333 26143 net.cpp:134]     with loss weight 1
I0428 19:47:15.343346 26143 net.cpp:139] Memory required for data: 1168644
I0428 19:47:15.343350 26143 net.cpp:200] loss needs backward computation.
I0428 19:47:15.343353 26143 net.cpp:200] relu1 needs backward computation.
I0428 19:47:15.343356 26143 net.cpp:200] ip1 needs backward computation.
I0428 19:47:15.343359 26143 net.cpp:200] pool1 needs backward computation.
I0428 19:47:15.343363 26143 net.cpp:200] conv1 needs backward computation.
I0428 19:47:15.343365 26143 net.cpp:200] pool0 needs backward computation.
I0428 19:47:15.343369 26143 net.cpp:200] conv0 needs backward computation.
I0428 19:47:15.343371 26143 net.cpp:202] mnist does not need backward computation.
I0428 19:47:15.343374 26143 net.cpp:244] This network produces output loss
I0428 19:47:15.343382 26143 net.cpp:257] Network initialization done.
I0428 19:47:15.343647 26143 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test509.prototxt
I0428 19:47:15.343669 26143 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:15.343741 26143 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:15.343809 26143 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:15.343852 26143 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:15.343865 26143 net.cpp:86] Creating Layer mnist
I0428 19:47:15.343869 26143 net.cpp:382] mnist -> data
I0428 19:47:15.343876 26143 net.cpp:382] mnist -> label
I0428 19:47:15.343955 26143 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:15.346249 26143 net.cpp:124] Setting up mnist
I0428 19:47:15.346262 26143 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:15.346267 26143 net.cpp:131] Top shape: 100 (100)
I0428 19:47:15.346271 26143 net.cpp:139] Memory required for data: 314000
I0428 19:47:15.346290 26143 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:15.346297 26143 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:15.346302 26143 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:15.346307 26143 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:15.346313 26143 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:15.346457 26143 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:15.346465 26143 net.cpp:131] Top shape: 100 (100)
I0428 19:47:15.346469 26143 net.cpp:131] Top shape: 100 (100)
I0428 19:47:15.346472 26143 net.cpp:139] Memory required for data: 314800
I0428 19:47:15.346477 26143 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:15.346485 26143 net.cpp:86] Creating Layer conv0
I0428 19:47:15.346489 26143 net.cpp:408] conv0 <- data
I0428 19:47:15.346494 26143 net.cpp:382] conv0 -> conv0
I0428 19:47:15.347327 26143 net.cpp:124] Setting up conv0
I0428 19:47:15.347339 26143 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:15.347343 26143 net.cpp:139] Memory required for data: 1466800
I0428 19:47:15.347352 26143 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:15.347359 26143 net.cpp:86] Creating Layer pool0
I0428 19:47:15.347362 26143 net.cpp:408] pool0 <- conv0
I0428 19:47:15.347368 26143 net.cpp:382] pool0 -> pool0
I0428 19:47:15.347403 26143 net.cpp:124] Setting up pool0
I0428 19:47:15.347409 26143 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:15.347411 26143 net.cpp:139] Memory required for data: 1754800
I0428 19:47:15.347414 26143 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:15.347422 26143 net.cpp:86] Creating Layer conv1
I0428 19:47:15.347425 26143 net.cpp:408] conv1 <- pool0
I0428 19:47:15.347431 26143 net.cpp:382] conv1 -> conv1
I0428 19:47:15.349653 26143 net.cpp:124] Setting up conv1
I0428 19:47:15.349665 26143 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:15.349680 26143 net.cpp:139] Memory required for data: 1806000
I0428 19:47:15.349689 26143 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:15.349695 26143 net.cpp:86] Creating Layer pool1
I0428 19:47:15.349730 26143 net.cpp:408] pool1 <- conv1
I0428 19:47:15.349736 26143 net.cpp:382] pool1 -> pool1
I0428 19:47:15.349781 26143 net.cpp:124] Setting up pool1
I0428 19:47:15.349788 26143 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:15.349792 26143 net.cpp:139] Memory required for data: 1818800
I0428 19:47:15.349812 26143 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:15.349817 26143 net.cpp:86] Creating Layer ip1
I0428 19:47:15.349822 26143 net.cpp:408] ip1 <- pool1
I0428 19:47:15.349827 26143 net.cpp:382] ip1 -> ip1
I0428 19:47:15.349947 26143 net.cpp:124] Setting up ip1
I0428 19:47:15.349958 26143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:15.349962 26143 net.cpp:139] Memory required for data: 1822800
I0428 19:47:15.349970 26143 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:15.349975 26143 net.cpp:86] Creating Layer relu1
I0428 19:47:15.349979 26143 net.cpp:408] relu1 <- ip1
I0428 19:47:15.349984 26143 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:15.350833 26143 net.cpp:124] Setting up relu1
I0428 19:47:15.350844 26143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:15.350848 26143 net.cpp:139] Memory required for data: 1826800
I0428 19:47:15.350852 26143 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:47:15.350859 26143 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:47:15.350862 26143 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:47:15.350868 26143 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:47:15.350874 26143 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:47:15.350960 26143 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:47:15.350968 26143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:15.350973 26143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:15.350976 26143 net.cpp:139] Memory required for data: 1834800
I0428 19:47:15.350980 26143 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:15.350986 26143 net.cpp:86] Creating Layer accuracy
I0428 19:47:15.350989 26143 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:47:15.351006 26143 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:15.351009 26143 net.cpp:382] accuracy -> accuracy
I0428 19:47:15.351017 26143 net.cpp:124] Setting up accuracy
I0428 19:47:15.351022 26143 net.cpp:131] Top shape: (1)
I0428 19:47:15.351025 26143 net.cpp:139] Memory required for data: 1834804
I0428 19:47:15.351027 26143 layer_factory.hpp:77] Creating layer loss
I0428 19:47:15.351032 26143 net.cpp:86] Creating Layer loss
I0428 19:47:15.351035 26143 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:47:15.351038 26143 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:15.351043 26143 net.cpp:382] loss -> loss
I0428 19:47:15.351049 26143 layer_factory.hpp:77] Creating layer loss
I0428 19:47:15.351290 26143 net.cpp:124] Setting up loss
I0428 19:47:15.351300 26143 net.cpp:131] Top shape: (1)
I0428 19:47:15.351303 26143 net.cpp:134]     with loss weight 1
I0428 19:47:15.351311 26143 net.cpp:139] Memory required for data: 1834808
I0428 19:47:15.351315 26143 net.cpp:200] loss needs backward computation.
I0428 19:47:15.351318 26143 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:15.351322 26143 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:47:15.351325 26143 net.cpp:200] relu1 needs backward computation.
I0428 19:47:15.351328 26143 net.cpp:200] ip1 needs backward computation.
I0428 19:47:15.351331 26143 net.cpp:200] pool1 needs backward computation.
I0428 19:47:15.351335 26143 net.cpp:200] conv1 needs backward computation.
I0428 19:47:15.351337 26143 net.cpp:200] pool0 needs backward computation.
I0428 19:47:15.351341 26143 net.cpp:200] conv0 needs backward computation.
I0428 19:47:15.351356 26143 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:15.351359 26143 net.cpp:202] mnist does not need backward computation.
I0428 19:47:15.351362 26143 net.cpp:244] This network produces output accuracy
I0428 19:47:15.351366 26143 net.cpp:244] This network produces output loss
I0428 19:47:15.351375 26143 net.cpp:257] Network initialization done.
I0428 19:47:15.351419 26143 solver.cpp:56] Solver scaffolding done.
I0428 19:47:15.351631 26143 caffe.cpp:248] Starting Optimization
I0428 19:47:15.351639 26143 solver.cpp:273] Solving LeNet
I0428 19:47:15.351641 26143 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:15.352378 26143 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:15.355643 26143 blocking_queue.cpp:49] Waiting for data
I0428 19:47:15.428339 26150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:15.428822 26143 solver.cpp:398]     Test net output #0: accuracy = 0.0857
I0428 19:47:15.428858 26143 solver.cpp:398]     Test net output #1: loss = 2.36879 (* 1 = 2.36879 loss)
I0428 19:47:15.430467 26143 solver.cpp:219] Iteration 0 (-5.64024e-31 iter/s, 0.0787907s/100 iters), loss = 2.41844
I0428 19:47:15.430510 26143 solver.cpp:238]     Train net output #0: loss = 2.41844 (* 1 = 2.41844 loss)
I0428 19:47:15.430523 26143 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:15.491227 26143 solver.cpp:219] Iteration 100 (1647.39 iter/s, 0.0607021s/100 iters), loss = 0.787477
I0428 19:47:15.491291 26143 solver.cpp:238]     Train net output #0: loss = 0.787477 (* 1 = 0.787477 loss)
I0428 19:47:15.491298 26143 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:15.545523 26143 solver.cpp:219] Iteration 200 (1844.11 iter/s, 0.0542266s/100 iters), loss = 0.453968
I0428 19:47:15.545568 26143 solver.cpp:238]     Train net output #0: loss = 0.453968 (* 1 = 0.453968 loss)
I0428 19:47:15.545593 26143 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:15.604193 26143 solver.cpp:219] Iteration 300 (1705.48 iter/s, 0.0586344s/100 iters), loss = 0.644126
I0428 19:47:15.604218 26143 solver.cpp:238]     Train net output #0: loss = 0.644126 (* 1 = 0.644126 loss)
I0428 19:47:15.604238 26143 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:15.662598 26143 solver.cpp:219] Iteration 400 (1713.12 iter/s, 0.0583731s/100 iters), loss = 0.195224
I0428 19:47:15.662637 26143 solver.cpp:238]     Train net output #0: loss = 0.195224 (* 1 = 0.195224 loss)
I0428 19:47:15.662643 26143 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:15.719957 26143 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:15.795297 26150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:15.795754 26143 solver.cpp:398]     Test net output #0: accuracy = 0.9257
I0428 19:47:15.795775 26143 solver.cpp:398]     Test net output #1: loss = 0.244084 (* 1 = 0.244084 loss)
I0428 19:47:15.796444 26143 solver.cpp:219] Iteration 500 (747.322 iter/s, 0.133811s/100 iters), loss = 0.206868
I0428 19:47:15.796481 26143 solver.cpp:238]     Train net output #0: loss = 0.206868 (* 1 = 0.206868 loss)
I0428 19:47:15.796488 26143 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:15.854501 26143 solver.cpp:219] Iteration 600 (1723.82 iter/s, 0.0580106s/100 iters), loss = 0.202186
I0428 19:47:15.854526 26143 solver.cpp:238]     Train net output #0: loss = 0.202186 (* 1 = 0.202186 loss)
I0428 19:47:15.854547 26143 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:15.910688 26143 solver.cpp:219] Iteration 700 (1780.81 iter/s, 0.0561542s/100 iters), loss = 0.37167
I0428 19:47:15.910712 26143 solver.cpp:238]     Train net output #0: loss = 0.37167 (* 1 = 0.37167 loss)
I0428 19:47:15.910734 26143 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:15.969775 26143 solver.cpp:219] Iteration 800 (1693.35 iter/s, 0.0590545s/100 iters), loss = 0.331388
I0428 19:47:15.969813 26143 solver.cpp:238]     Train net output #0: loss = 0.331388 (* 1 = 0.331388 loss)
I0428 19:47:15.969835 26143 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:16.027778 26143 solver.cpp:219] Iteration 900 (1724.98 iter/s, 0.0579717s/100 iters), loss = 0.410327
I0428 19:47:16.027801 26143 solver.cpp:238]     Train net output #0: loss = 0.410327 (* 1 = 0.410327 loss)
I0428 19:47:16.027825 26143 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:16.047699 26149 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:16.084889 26143 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:16.085397 26143 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:16.085743 26143 solver.cpp:311] Iteration 1000, loss = 0.26088
I0428 19:47:16.085757 26143 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:16.160991 26150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:16.161471 26143 solver.cpp:398]     Test net output #0: accuracy = 0.9397
I0428 19:47:16.161492 26143 solver.cpp:398]     Test net output #1: loss = 0.186113 (* 1 = 0.186113 loss)
I0428 19:47:16.161497 26143 solver.cpp:316] Optimization Done.
I0428 19:47:16.161500 26143 caffe.cpp:259] Optimization Done.
