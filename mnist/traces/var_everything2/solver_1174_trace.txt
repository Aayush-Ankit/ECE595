I0428 20:12:08.320894 32201 caffe.cpp:218] Using GPUs 0
I0428 20:12:08.358073 32201 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:08.813204 32201 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1174.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:08.813375 32201 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1174.prototxt
I0428 20:12:08.813704 32201 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:08.813719 32201 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:08.813792 32201 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:08.813869 32201 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:08.813951 32201 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:08.813971 32201 net.cpp:86] Creating Layer mnist
I0428 20:12:08.813979 32201 net.cpp:382] mnist -> data
I0428 20:12:08.813998 32201 net.cpp:382] mnist -> label
I0428 20:12:08.814924 32201 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:08.817081 32201 net.cpp:124] Setting up mnist
I0428 20:12:08.817111 32201 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:08.817116 32201 net.cpp:131] Top shape: 64 (64)
I0428 20:12:08.817119 32201 net.cpp:139] Memory required for data: 200960
I0428 20:12:08.817126 32201 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:08.817140 32201 net.cpp:86] Creating Layer conv0
I0428 20:12:08.817150 32201 net.cpp:408] conv0 <- data
I0428 20:12:08.817190 32201 net.cpp:382] conv0 -> conv0
I0428 20:12:09.051056 32201 net.cpp:124] Setting up conv0
I0428 20:12:09.051098 32201 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:09.051117 32201 net.cpp:139] Memory required for data: 3887360
I0428 20:12:09.051151 32201 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:09.051179 32201 net.cpp:86] Creating Layer pool0
I0428 20:12:09.051183 32201 net.cpp:408] pool0 <- conv0
I0428 20:12:09.051188 32201 net.cpp:382] pool0 -> pool0
I0428 20:12:09.051232 32201 net.cpp:124] Setting up pool0
I0428 20:12:09.051245 32201 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:09.051249 32201 net.cpp:139] Memory required for data: 4808960
I0428 20:12:09.051251 32201 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:09.051261 32201 net.cpp:86] Creating Layer conv1
I0428 20:12:09.051265 32201 net.cpp:408] conv1 <- pool0
I0428 20:12:09.051270 32201 net.cpp:382] conv1 -> conv1
I0428 20:12:09.053644 32201 net.cpp:124] Setting up conv1
I0428 20:12:09.053674 32201 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:09.053678 32201 net.cpp:139] Memory required for data: 6447360
I0428 20:12:09.053686 32201 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:09.053692 32201 net.cpp:86] Creating Layer pool1
I0428 20:12:09.053696 32201 net.cpp:408] pool1 <- conv1
I0428 20:12:09.053701 32201 net.cpp:382] pool1 -> pool1
I0428 20:12:09.053766 32201 net.cpp:124] Setting up pool1
I0428 20:12:09.053771 32201 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:09.053773 32201 net.cpp:139] Memory required for data: 6856960
I0428 20:12:09.053776 32201 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:09.053783 32201 net.cpp:86] Creating Layer ip1
I0428 20:12:09.053786 32201 net.cpp:408] ip1 <- pool1
I0428 20:12:09.053791 32201 net.cpp:382] ip1 -> ip1
I0428 20:12:09.054920 32201 net.cpp:124] Setting up ip1
I0428 20:12:09.054934 32201 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:09.054937 32201 net.cpp:139] Memory required for data: 6859520
I0428 20:12:09.054945 32201 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:09.054951 32201 net.cpp:86] Creating Layer relu1
I0428 20:12:09.054955 32201 net.cpp:408] relu1 <- ip1
I0428 20:12:09.054960 32201 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:09.055152 32201 net.cpp:124] Setting up relu1
I0428 20:12:09.055161 32201 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:09.055164 32201 net.cpp:139] Memory required for data: 6862080
I0428 20:12:09.055167 32201 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:09.055173 32201 net.cpp:86] Creating Layer ip2
I0428 20:12:09.055177 32201 net.cpp:408] ip2 <- ip1
I0428 20:12:09.055181 32201 net.cpp:382] ip2 -> ip2
I0428 20:12:09.055266 32201 net.cpp:124] Setting up ip2
I0428 20:12:09.055272 32201 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:09.055275 32201 net.cpp:139] Memory required for data: 6864640
I0428 20:12:09.055281 32201 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:09.055286 32201 net.cpp:86] Creating Layer relu2
I0428 20:12:09.055289 32201 net.cpp:408] relu2 <- ip2
I0428 20:12:09.055294 32201 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:09.056135 32201 net.cpp:124] Setting up relu2
I0428 20:12:09.056147 32201 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:09.056166 32201 net.cpp:139] Memory required for data: 6867200
I0428 20:12:09.056169 32201 layer_factory.hpp:77] Creating layer loss
I0428 20:12:09.056175 32201 net.cpp:86] Creating Layer loss
I0428 20:12:09.056179 32201 net.cpp:408] loss <- ip2
I0428 20:12:09.056183 32201 net.cpp:408] loss <- label
I0428 20:12:09.056188 32201 net.cpp:382] loss -> loss
I0428 20:12:09.056206 32201 layer_factory.hpp:77] Creating layer loss
I0428 20:12:09.056432 32201 net.cpp:124] Setting up loss
I0428 20:12:09.056442 32201 net.cpp:131] Top shape: (1)
I0428 20:12:09.056445 32201 net.cpp:134]     with loss weight 1
I0428 20:12:09.056458 32201 net.cpp:139] Memory required for data: 6867204
I0428 20:12:09.056463 32201 net.cpp:200] loss needs backward computation.
I0428 20:12:09.056465 32201 net.cpp:200] relu2 needs backward computation.
I0428 20:12:09.056468 32201 net.cpp:200] ip2 needs backward computation.
I0428 20:12:09.056471 32201 net.cpp:200] relu1 needs backward computation.
I0428 20:12:09.056474 32201 net.cpp:200] ip1 needs backward computation.
I0428 20:12:09.056488 32201 net.cpp:200] pool1 needs backward computation.
I0428 20:12:09.056490 32201 net.cpp:200] conv1 needs backward computation.
I0428 20:12:09.056494 32201 net.cpp:200] pool0 needs backward computation.
I0428 20:12:09.056498 32201 net.cpp:200] conv0 needs backward computation.
I0428 20:12:09.056500 32201 net.cpp:202] mnist does not need backward computation.
I0428 20:12:09.056504 32201 net.cpp:244] This network produces output loss
I0428 20:12:09.056512 32201 net.cpp:257] Network initialization done.
I0428 20:12:09.056859 32201 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1174.prototxt
I0428 20:12:09.056902 32201 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:09.056990 32201 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:09.057059 32201 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:09.057106 32201 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:09.057119 32201 net.cpp:86] Creating Layer mnist
I0428 20:12:09.057126 32201 net.cpp:382] mnist -> data
I0428 20:12:09.057137 32201 net.cpp:382] mnist -> label
I0428 20:12:09.057246 32201 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:09.059159 32201 net.cpp:124] Setting up mnist
I0428 20:12:09.059203 32201 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:09.059208 32201 net.cpp:131] Top shape: 100 (100)
I0428 20:12:09.059211 32201 net.cpp:139] Memory required for data: 314000
I0428 20:12:09.059216 32201 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:09.059226 32201 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:09.059244 32201 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:09.059250 32201 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:09.059257 32201 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:09.059325 32201 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:09.059334 32201 net.cpp:131] Top shape: 100 (100)
I0428 20:12:09.059339 32201 net.cpp:131] Top shape: 100 (100)
I0428 20:12:09.059341 32201 net.cpp:139] Memory required for data: 314800
I0428 20:12:09.059345 32201 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:09.059355 32201 net.cpp:86] Creating Layer conv0
I0428 20:12:09.059360 32201 net.cpp:408] conv0 <- data
I0428 20:12:09.059365 32201 net.cpp:382] conv0 -> conv0
I0428 20:12:09.060906 32201 net.cpp:124] Setting up conv0
I0428 20:12:09.060936 32201 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:09.060940 32201 net.cpp:139] Memory required for data: 6074800
I0428 20:12:09.060964 32201 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:09.060989 32201 net.cpp:86] Creating Layer pool0
I0428 20:12:09.060994 32201 net.cpp:408] pool0 <- conv0
I0428 20:12:09.060999 32201 net.cpp:382] pool0 -> pool0
I0428 20:12:09.061051 32201 net.cpp:124] Setting up pool0
I0428 20:12:09.061059 32201 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:09.061063 32201 net.cpp:139] Memory required for data: 7514800
I0428 20:12:09.061065 32201 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:09.061074 32201 net.cpp:86] Creating Layer conv1
I0428 20:12:09.061079 32201 net.cpp:408] conv1 <- pool0
I0428 20:12:09.061084 32201 net.cpp:382] conv1 -> conv1
I0428 20:12:09.062902 32201 net.cpp:124] Setting up conv1
I0428 20:12:09.062932 32201 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:09.062937 32201 net.cpp:139] Memory required for data: 10074800
I0428 20:12:09.062960 32201 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:09.062968 32201 net.cpp:86] Creating Layer pool1
I0428 20:12:09.062971 32201 net.cpp:408] pool1 <- conv1
I0428 20:12:09.062978 32201 net.cpp:382] pool1 -> pool1
I0428 20:12:09.063015 32201 net.cpp:124] Setting up pool1
I0428 20:12:09.063022 32201 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:09.063026 32201 net.cpp:139] Memory required for data: 10714800
I0428 20:12:09.063030 32201 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:09.063036 32201 net.cpp:86] Creating Layer ip1
I0428 20:12:09.063040 32201 net.cpp:408] ip1 <- pool1
I0428 20:12:09.063045 32201 net.cpp:382] ip1 -> ip1
I0428 20:12:09.063251 32201 net.cpp:124] Setting up ip1
I0428 20:12:09.063258 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.063277 32201 net.cpp:139] Memory required for data: 10718800
I0428 20:12:09.063283 32201 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:09.063292 32201 net.cpp:86] Creating Layer relu1
I0428 20:12:09.063310 32201 net.cpp:408] relu1 <- ip1
I0428 20:12:09.063315 32201 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:09.063594 32201 net.cpp:124] Setting up relu1
I0428 20:12:09.063617 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.063621 32201 net.cpp:139] Memory required for data: 10722800
I0428 20:12:09.063623 32201 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:09.063630 32201 net.cpp:86] Creating Layer ip2
I0428 20:12:09.063633 32201 net.cpp:408] ip2 <- ip1
I0428 20:12:09.063638 32201 net.cpp:382] ip2 -> ip2
I0428 20:12:09.063724 32201 net.cpp:124] Setting up ip2
I0428 20:12:09.063731 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.063735 32201 net.cpp:139] Memory required for data: 10726800
I0428 20:12:09.063740 32201 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:09.063760 32201 net.cpp:86] Creating Layer relu2
I0428 20:12:09.063762 32201 net.cpp:408] relu2 <- ip2
I0428 20:12:09.063766 32201 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:09.063917 32201 net.cpp:124] Setting up relu2
I0428 20:12:09.063925 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.063928 32201 net.cpp:139] Memory required for data: 10730800
I0428 20:12:09.063931 32201 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:12:09.063936 32201 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:12:09.063940 32201 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:12:09.063943 32201 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:12:09.063959 32201 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:12:09.064009 32201 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:12:09.064018 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.064023 32201 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:09.064024 32201 net.cpp:139] Memory required for data: 10738800
I0428 20:12:09.064028 32201 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:09.064047 32201 net.cpp:86] Creating Layer accuracy
I0428 20:12:09.064051 32201 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:12:09.064055 32201 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:09.064061 32201 net.cpp:382] accuracy -> accuracy
I0428 20:12:09.064069 32201 net.cpp:124] Setting up accuracy
I0428 20:12:09.064072 32201 net.cpp:131] Top shape: (1)
I0428 20:12:09.064074 32201 net.cpp:139] Memory required for data: 10738804
I0428 20:12:09.064077 32201 layer_factory.hpp:77] Creating layer loss
I0428 20:12:09.064082 32201 net.cpp:86] Creating Layer loss
I0428 20:12:09.064086 32201 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:12:09.064090 32201 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:09.064095 32201 net.cpp:382] loss -> loss
I0428 20:12:09.064102 32201 layer_factory.hpp:77] Creating layer loss
I0428 20:12:09.064410 32201 net.cpp:124] Setting up loss
I0428 20:12:09.064434 32201 net.cpp:131] Top shape: (1)
I0428 20:12:09.064436 32201 net.cpp:134]     with loss weight 1
I0428 20:12:09.064458 32201 net.cpp:139] Memory required for data: 10738808
I0428 20:12:09.064461 32201 net.cpp:200] loss needs backward computation.
I0428 20:12:09.064465 32201 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:09.064468 32201 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:12:09.064471 32201 net.cpp:200] relu2 needs backward computation.
I0428 20:12:09.064476 32201 net.cpp:200] ip2 needs backward computation.
I0428 20:12:09.064478 32201 net.cpp:200] relu1 needs backward computation.
I0428 20:12:09.064481 32201 net.cpp:200] ip1 needs backward computation.
I0428 20:12:09.064483 32201 net.cpp:200] pool1 needs backward computation.
I0428 20:12:09.064486 32201 net.cpp:200] conv1 needs backward computation.
I0428 20:12:09.064489 32201 net.cpp:200] pool0 needs backward computation.
I0428 20:12:09.064492 32201 net.cpp:200] conv0 needs backward computation.
I0428 20:12:09.064496 32201 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:09.064499 32201 net.cpp:202] mnist does not need backward computation.
I0428 20:12:09.064502 32201 net.cpp:244] This network produces output accuracy
I0428 20:12:09.064504 32201 net.cpp:244] This network produces output loss
I0428 20:12:09.064515 32201 net.cpp:257] Network initialization done.
I0428 20:12:09.064551 32201 solver.cpp:56] Solver scaffolding done.
I0428 20:12:09.064842 32201 caffe.cpp:248] Starting Optimization
I0428 20:12:09.064849 32201 solver.cpp:273] Solving LeNet
I0428 20:12:09.064852 32201 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:09.065634 32201 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:09.076390 32201 blocking_queue.cpp:49] Waiting for data
I0428 20:12:09.144462 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:09.145222 32201 solver.cpp:398]     Test net output #0: accuracy = 0.097
I0428 20:12:09.145257 32201 solver.cpp:398]     Test net output #1: loss = 2.32648 (* 1 = 2.32648 loss)
I0428 20:12:09.149976 32201 solver.cpp:219] Iteration 0 (2.67515 iter/s, 0.0850975s/100 iters), loss = 2.31006
I0428 20:12:09.150015 32201 solver.cpp:238]     Train net output #0: loss = 2.31006 (* 1 = 2.31006 loss)
I0428 20:12:09.150027 32201 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:09.296593 32201 solver.cpp:219] Iteration 100 (682.318 iter/s, 0.146559s/100 iters), loss = 0.674401
I0428 20:12:09.296633 32201 solver.cpp:238]     Train net output #0: loss = 0.674401 (* 1 = 0.674401 loss)
I0428 20:12:09.296640 32201 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:09.442988 32201 solver.cpp:219] Iteration 200 (683.264 iter/s, 0.146356s/100 iters), loss = 0.586316
I0428 20:12:09.443027 32201 solver.cpp:238]     Train net output #0: loss = 0.586316 (* 1 = 0.586316 loss)
I0428 20:12:09.443033 32201 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:09.586937 32201 solver.cpp:219] Iteration 300 (694.874 iter/s, 0.143911s/100 iters), loss = 0.517742
I0428 20:12:09.586974 32201 solver.cpp:238]     Train net output #0: loss = 0.517742 (* 1 = 0.517742 loss)
I0428 20:12:09.586980 32201 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:09.731420 32201 solver.cpp:219] Iteration 400 (692.313 iter/s, 0.144443s/100 iters), loss = 0.828085
I0428 20:12:09.731443 32201 solver.cpp:238]     Train net output #0: loss = 0.828085 (* 1 = 0.828085 loss)
I0428 20:12:09.731449 32201 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:09.873641 32201 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:09.938341 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:09.940640 32201 solver.cpp:398]     Test net output #0: accuracy = 0.7679
I0428 20:12:09.940675 32201 solver.cpp:398]     Test net output #1: loss = 0.597012 (* 1 = 0.597012 loss)
I0428 20:12:09.942050 32201 solver.cpp:219] Iteration 500 (474.854 iter/s, 0.210591s/100 iters), loss = 0.746086
I0428 20:12:09.942075 32201 solver.cpp:238]     Train net output #0: loss = 0.746086 (* 1 = 0.746086 loss)
I0428 20:12:09.942081 32201 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:10.096782 32201 solver.cpp:219] Iteration 600 (646.43 iter/s, 0.154696s/100 iters), loss = 0.47998
I0428 20:12:10.096827 32201 solver.cpp:238]     Train net output #0: loss = 0.47998 (* 1 = 0.47998 loss)
I0428 20:12:10.096835 32201 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:10.258074 32201 solver.cpp:219] Iteration 700 (620.15 iter/s, 0.161251s/100 iters), loss = 0.4971
I0428 20:12:10.258116 32201 solver.cpp:238]     Train net output #0: loss = 0.4971 (* 1 = 0.4971 loss)
I0428 20:12:10.258121 32201 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:10.421767 32201 solver.cpp:219] Iteration 800 (611.043 iter/s, 0.163655s/100 iters), loss = 0.656974
I0428 20:12:10.421794 32201 solver.cpp:238]     Train net output #0: loss = 0.656974 (* 1 = 0.656974 loss)
I0428 20:12:10.421805 32201 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:10.584381 32201 solver.cpp:219] Iteration 900 (615.103 iter/s, 0.162574s/100 iters), loss = 0.284557
I0428 20:12:10.584419 32201 solver.cpp:238]     Train net output #0: loss = 0.284557 (* 1 = 0.284557 loss)
I0428 20:12:10.584424 32201 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:10.635555 32207 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:10.730242 32201 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:10.732398 32201 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:10.733541 32201 solver.cpp:311] Iteration 1000, loss = 0.42025
I0428 20:12:10.733556 32201 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:10.797570 32208 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:10.799849 32201 solver.cpp:398]     Test net output #0: accuracy = 0.7868
I0428 20:12:10.799882 32201 solver.cpp:398]     Test net output #1: loss = 0.528127 (* 1 = 0.528127 loss)
I0428 20:12:10.799887 32201 solver.cpp:316] Optimization Done.
I0428 20:12:10.799890 32201 caffe.cpp:259] Optimization Done.
