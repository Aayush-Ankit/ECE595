I0428 19:34:08.054052 23275 caffe.cpp:218] Using GPUs 0
I0428 19:34:08.094415 23275 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:08.555640 23275 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test197.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:08.555814 23275 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test197.prototxt
I0428 19:34:08.556046 23275 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:08.556057 23275 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:08.556113 23275 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:08.556161 23275 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:08.556241 23275 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:08.556259 23275 net.cpp:86] Creating Layer mnist
I0428 19:34:08.556268 23275 net.cpp:382] mnist -> data
I0428 19:34:08.556287 23275 net.cpp:382] mnist -> label
I0428 19:34:08.557344 23275 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:08.559600 23275 net.cpp:124] Setting up mnist
I0428 19:34:08.559629 23275 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:08.559634 23275 net.cpp:131] Top shape: 64 (64)
I0428 19:34:08.559638 23275 net.cpp:139] Memory required for data: 200960
I0428 19:34:08.559643 23275 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:08.559682 23275 net.cpp:86] Creating Layer conv0
I0428 19:34:08.559687 23275 net.cpp:408] conv0 <- data
I0428 19:34:08.559697 23275 net.cpp:382] conv0 -> conv0
I0428 19:34:08.797550 23275 net.cpp:124] Setting up conv0
I0428 19:34:08.797591 23275 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:08.797595 23275 net.cpp:139] Memory required for data: 7573760
I0428 19:34:08.797610 23275 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:08.797622 23275 net.cpp:86] Creating Layer pool0
I0428 19:34:08.797626 23275 net.cpp:408] pool0 <- conv0
I0428 19:34:08.797631 23275 net.cpp:382] pool0 -> pool0
I0428 19:34:08.797693 23275 net.cpp:124] Setting up pool0
I0428 19:34:08.797700 23275 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:08.797703 23275 net.cpp:139] Memory required for data: 9416960
I0428 19:34:08.797706 23275 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:08.797714 23275 net.cpp:86] Creating Layer ip1
I0428 19:34:08.797736 23275 net.cpp:408] ip1 <- pool0
I0428 19:34:08.797756 23275 net.cpp:382] ip1 -> ip1
I0428 19:34:08.799178 23275 net.cpp:124] Setting up ip1
I0428 19:34:08.799207 23275 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:08.799226 23275 net.cpp:139] Memory required for data: 9419520
I0428 19:34:08.799247 23275 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:08.799253 23275 net.cpp:86] Creating Layer relu1
I0428 19:34:08.799257 23275 net.cpp:408] relu1 <- ip1
I0428 19:34:08.799262 23275 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:08.799437 23275 net.cpp:124] Setting up relu1
I0428 19:34:08.799445 23275 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:08.799448 23275 net.cpp:139] Memory required for data: 9422080
I0428 19:34:08.799451 23275 layer_factory.hpp:77] Creating layer loss
I0428 19:34:08.799458 23275 net.cpp:86] Creating Layer loss
I0428 19:34:08.799460 23275 net.cpp:408] loss <- ip1
I0428 19:34:08.799464 23275 net.cpp:408] loss <- label
I0428 19:34:08.799469 23275 net.cpp:382] loss -> loss
I0428 19:34:08.799484 23275 layer_factory.hpp:77] Creating layer loss
I0428 19:34:08.800277 23275 net.cpp:124] Setting up loss
I0428 19:34:08.800292 23275 net.cpp:131] Top shape: (1)
I0428 19:34:08.800312 23275 net.cpp:134]     with loss weight 1
I0428 19:34:08.800325 23275 net.cpp:139] Memory required for data: 9422084
I0428 19:34:08.800329 23275 net.cpp:200] loss needs backward computation.
I0428 19:34:08.800333 23275 net.cpp:200] relu1 needs backward computation.
I0428 19:34:08.800335 23275 net.cpp:200] ip1 needs backward computation.
I0428 19:34:08.800338 23275 net.cpp:200] pool0 needs backward computation.
I0428 19:34:08.800341 23275 net.cpp:200] conv0 needs backward computation.
I0428 19:34:08.800345 23275 net.cpp:202] mnist does not need backward computation.
I0428 19:34:08.800348 23275 net.cpp:244] This network produces output loss
I0428 19:34:08.800354 23275 net.cpp:257] Network initialization done.
I0428 19:34:08.800577 23275 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test197.prototxt
I0428 19:34:08.800597 23275 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:08.800659 23275 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:08.800710 23275 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:08.800786 23275 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:08.800801 23275 net.cpp:86] Creating Layer mnist
I0428 19:34:08.800806 23275 net.cpp:382] mnist -> data
I0428 19:34:08.800837 23275 net.cpp:382] mnist -> label
I0428 19:34:08.800952 23275 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:08.802259 23275 net.cpp:124] Setting up mnist
I0428 19:34:08.802287 23275 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:08.802309 23275 net.cpp:131] Top shape: 100 (100)
I0428 19:34:08.802311 23275 net.cpp:139] Memory required for data: 314000
I0428 19:34:08.802326 23275 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:08.802333 23275 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:08.802337 23275 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:08.802342 23275 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:08.802348 23275 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:08.802446 23275 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:08.802454 23275 net.cpp:131] Top shape: 100 (100)
I0428 19:34:08.802459 23275 net.cpp:131] Top shape: 100 (100)
I0428 19:34:08.802461 23275 net.cpp:139] Memory required for data: 314800
I0428 19:34:08.802464 23275 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:08.802474 23275 net.cpp:86] Creating Layer conv0
I0428 19:34:08.802477 23275 net.cpp:408] conv0 <- data
I0428 19:34:08.802482 23275 net.cpp:382] conv0 -> conv0
I0428 19:34:08.804172 23275 net.cpp:124] Setting up conv0
I0428 19:34:08.804200 23275 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:08.804204 23275 net.cpp:139] Memory required for data: 11834800
I0428 19:34:08.804213 23275 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:08.804219 23275 net.cpp:86] Creating Layer pool0
I0428 19:34:08.804222 23275 net.cpp:408] pool0 <- conv0
I0428 19:34:08.804226 23275 net.cpp:382] pool0 -> pool0
I0428 19:34:08.804276 23275 net.cpp:124] Setting up pool0
I0428 19:34:08.804281 23275 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:08.804285 23275 net.cpp:139] Memory required for data: 14714800
I0428 19:34:08.804287 23275 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:08.804294 23275 net.cpp:86] Creating Layer ip1
I0428 19:34:08.804297 23275 net.cpp:408] ip1 <- pool0
I0428 19:34:08.804302 23275 net.cpp:382] ip1 -> ip1
I0428 19:34:08.804865 23275 net.cpp:124] Setting up ip1
I0428 19:34:08.804873 23275 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:08.804893 23275 net.cpp:139] Memory required for data: 14718800
I0428 19:34:08.804899 23275 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:08.804905 23275 net.cpp:86] Creating Layer relu1
I0428 19:34:08.804909 23275 net.cpp:408] relu1 <- ip1
I0428 19:34:08.804913 23275 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:08.805161 23275 net.cpp:124] Setting up relu1
I0428 19:34:08.805171 23275 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:08.805173 23275 net.cpp:139] Memory required for data: 14722800
I0428 19:34:08.805176 23275 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:34:08.805181 23275 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:34:08.805194 23275 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:34:08.805199 23275 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:34:08.805204 23275 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:34:08.805259 23275 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:34:08.805265 23275 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:08.805270 23275 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:08.805272 23275 net.cpp:139] Memory required for data: 14730800
I0428 19:34:08.805275 23275 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:08.805280 23275 net.cpp:86] Creating Layer accuracy
I0428 19:34:08.805284 23275 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:34:08.805304 23275 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:08.805308 23275 net.cpp:382] accuracy -> accuracy
I0428 19:34:08.805315 23275 net.cpp:124] Setting up accuracy
I0428 19:34:08.805320 23275 net.cpp:131] Top shape: (1)
I0428 19:34:08.805322 23275 net.cpp:139] Memory required for data: 14730804
I0428 19:34:08.805325 23275 layer_factory.hpp:77] Creating layer loss
I0428 19:34:08.805332 23275 net.cpp:86] Creating Layer loss
I0428 19:34:08.805335 23275 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:34:08.805339 23275 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:08.805344 23275 net.cpp:382] loss -> loss
I0428 19:34:08.805351 23275 layer_factory.hpp:77] Creating layer loss
I0428 19:34:08.805608 23275 net.cpp:124] Setting up loss
I0428 19:34:08.805627 23275 net.cpp:131] Top shape: (1)
I0428 19:34:08.805632 23275 net.cpp:134]     with loss weight 1
I0428 19:34:08.805639 23275 net.cpp:139] Memory required for data: 14730808
I0428 19:34:08.805641 23275 net.cpp:200] loss needs backward computation.
I0428 19:34:08.805645 23275 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:08.805649 23275 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:34:08.805652 23275 net.cpp:200] relu1 needs backward computation.
I0428 19:34:08.805655 23275 net.cpp:200] ip1 needs backward computation.
I0428 19:34:08.805658 23275 net.cpp:200] pool0 needs backward computation.
I0428 19:34:08.805661 23275 net.cpp:200] conv0 needs backward computation.
I0428 19:34:08.805665 23275 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:08.805670 23275 net.cpp:202] mnist does not need backward computation.
I0428 19:34:08.805678 23275 net.cpp:244] This network produces output accuracy
I0428 19:34:08.805682 23275 net.cpp:244] This network produces output loss
I0428 19:34:08.805691 23275 net.cpp:257] Network initialization done.
I0428 19:34:08.805729 23275 solver.cpp:56] Solver scaffolding done.
I0428 19:34:08.805878 23275 caffe.cpp:248] Starting Optimization
I0428 19:34:08.805884 23275 solver.cpp:273] Solving LeNet
I0428 19:34:08.805887 23275 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:08.806666 23275 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:08.813344 23275 blocking_queue.cpp:49] Waiting for data
I0428 19:34:08.902730 23282 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:08.904201 23275 solver.cpp:398]     Test net output #0: accuracy = 0.0479
I0428 19:34:08.904234 23275 solver.cpp:398]     Test net output #1: loss = 2.3562 (* 1 = 2.3562 loss)
I0428 19:34:08.908567 23275 solver.cpp:219] Iteration 0 (0 iter/s, 0.102643s/100 iters), loss = 2.32183
I0428 19:34:08.908605 23275 solver.cpp:238]     Train net output #0: loss = 2.32183 (* 1 = 2.32183 loss)
I0428 19:34:08.908617 23275 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:09.034977 23275 solver.cpp:219] Iteration 100 (791.29 iter/s, 0.126376s/100 iters), loss = 0.579036
I0428 19:34:09.035018 23275 solver.cpp:238]     Train net output #0: loss = 0.579036 (* 1 = 0.579036 loss)
I0428 19:34:09.035024 23275 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:09.161804 23275 solver.cpp:219] Iteration 200 (788.803 iter/s, 0.126774s/100 iters), loss = 0.220915
I0428 19:34:09.161844 23275 solver.cpp:238]     Train net output #0: loss = 0.220915 (* 1 = 0.220915 loss)
I0428 19:34:09.161849 23275 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:09.288655 23275 solver.cpp:219] Iteration 300 (788.574 iter/s, 0.126811s/100 iters), loss = 0.228369
I0428 19:34:09.288703 23275 solver.cpp:238]     Train net output #0: loss = 0.228369 (* 1 = 0.228369 loss)
I0428 19:34:09.288710 23275 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:09.414619 23275 solver.cpp:219] Iteration 400 (794.25 iter/s, 0.125905s/100 iters), loss = 0.143876
I0428 19:34:09.414661 23275 solver.cpp:238]     Train net output #0: loss = 0.143876 (* 1 = 0.143876 loss)
I0428 19:34:09.414669 23275 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:09.540007 23275 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:09.632266 23282 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:09.633674 23275 solver.cpp:398]     Test net output #0: accuracy = 0.9498
I0428 19:34:09.633709 23275 solver.cpp:398]     Test net output #1: loss = 0.186017 (* 1 = 0.186017 loss)
I0428 19:34:09.635031 23275 solver.cpp:219] Iteration 500 (453.816 iter/s, 0.220354s/100 iters), loss = 0.253391
I0428 19:34:09.635056 23275 solver.cpp:238]     Train net output #0: loss = 0.253391 (* 1 = 0.253391 loss)
I0428 19:34:09.635063 23275 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:09.763481 23275 solver.cpp:219] Iteration 600 (778.726 iter/s, 0.128415s/100 iters), loss = 0.115911
I0428 19:34:09.763535 23275 solver.cpp:238]     Train net output #0: loss = 0.115911 (* 1 = 0.115911 loss)
I0428 19:34:09.763542 23275 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:09.891544 23275 solver.cpp:219] Iteration 700 (781.256 iter/s, 0.127999s/100 iters), loss = 0.281341
I0428 19:34:09.891613 23275 solver.cpp:238]     Train net output #0: loss = 0.281341 (* 1 = 0.281341 loss)
I0428 19:34:09.891620 23275 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:10.019481 23275 solver.cpp:219] Iteration 800 (782.107 iter/s, 0.12786s/100 iters), loss = 0.282586
I0428 19:34:10.019537 23275 solver.cpp:238]     Train net output #0: loss = 0.282586 (* 1 = 0.282586 loss)
I0428 19:34:10.019543 23275 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:10.146484 23275 solver.cpp:219] Iteration 900 (787.704 iter/s, 0.126951s/100 iters), loss = 0.201259
I0428 19:34:10.146526 23275 solver.cpp:238]     Train net output #0: loss = 0.201259 (* 1 = 0.201259 loss)
I0428 19:34:10.146533 23275 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:10.188280 23281 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:10.270561 23275 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:10.272050 23275 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:10.273568 23275 solver.cpp:311] Iteration 1000, loss = 0.170824
I0428 19:34:10.273584 23275 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:10.365397 23282 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:10.366806 23275 solver.cpp:398]     Test net output #0: accuracy = 0.9655
I0428 19:34:10.366843 23275 solver.cpp:398]     Test net output #1: loss = 0.121783 (* 1 = 0.121783 loss)
I0428 19:34:10.366849 23275 solver.cpp:316] Optimization Done.
I0428 19:34:10.366868 23275 caffe.cpp:259] Optimization Done.
