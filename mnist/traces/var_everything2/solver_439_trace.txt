I0428 19:44:06.245405 25532 caffe.cpp:218] Using GPUs 0
I0428 19:44:06.284047 25532 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:06.804379 25532 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test439.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:06.804519 25532 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test439.prototxt
I0428 19:44:06.804890 25532 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:06.804908 25532 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:06.804993 25532 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:44:06.805061 25532 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:06.805158 25532 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:06.805181 25532 net.cpp:86] Creating Layer mnist
I0428 19:44:06.805188 25532 net.cpp:382] mnist -> data
I0428 19:44:06.805212 25532 net.cpp:382] mnist -> label
I0428 19:44:06.806290 25532 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:06.808723 25532 net.cpp:124] Setting up mnist
I0428 19:44:06.808740 25532 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:06.808748 25532 net.cpp:131] Top shape: 64 (64)
I0428 19:44:06.808751 25532 net.cpp:139] Memory required for data: 200960
I0428 19:44:06.808758 25532 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:06.808773 25532 net.cpp:86] Creating Layer conv0
I0428 19:44:06.808779 25532 net.cpp:408] conv0 <- data
I0428 19:44:06.808790 25532 net.cpp:382] conv0 -> conv0
I0428 19:44:07.098700 25532 net.cpp:124] Setting up conv0
I0428 19:44:07.098732 25532 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:07.098737 25532 net.cpp:139] Memory required for data: 495872
I0428 19:44:07.098776 25532 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:07.098791 25532 net.cpp:86] Creating Layer pool0
I0428 19:44:07.098796 25532 net.cpp:408] pool0 <- conv0
I0428 19:44:07.098803 25532 net.cpp:382] pool0 -> pool0
I0428 19:44:07.098860 25532 net.cpp:124] Setting up pool0
I0428 19:44:07.098871 25532 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:07.098875 25532 net.cpp:139] Memory required for data: 569600
I0428 19:44:07.098879 25532 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:07.098892 25532 net.cpp:86] Creating Layer conv1
I0428 19:44:07.098896 25532 net.cpp:408] conv1 <- pool0
I0428 19:44:07.098902 25532 net.cpp:382] conv1 -> conv1
I0428 19:44:07.102032 25532 net.cpp:124] Setting up conv1
I0428 19:44:07.102052 25532 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:07.102057 25532 net.cpp:139] Memory required for data: 1388800
I0428 19:44:07.102067 25532 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:07.102077 25532 net.cpp:86] Creating Layer pool1
I0428 19:44:07.102080 25532 net.cpp:408] pool1 <- conv1
I0428 19:44:07.102088 25532 net.cpp:382] pool1 -> pool1
I0428 19:44:07.102133 25532 net.cpp:124] Setting up pool1
I0428 19:44:07.102141 25532 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:07.102145 25532 net.cpp:139] Memory required for data: 1593600
I0428 19:44:07.102149 25532 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:07.102157 25532 net.cpp:86] Creating Layer ip1
I0428 19:44:07.102161 25532 net.cpp:408] ip1 <- pool1
I0428 19:44:07.102167 25532 net.cpp:382] ip1 -> ip1
I0428 19:44:07.102560 25532 net.cpp:124] Setting up ip1
I0428 19:44:07.102569 25532 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:07.102572 25532 net.cpp:139] Memory required for data: 1606400
I0428 19:44:07.102581 25532 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:07.102589 25532 net.cpp:86] Creating Layer relu1
I0428 19:44:07.102593 25532 net.cpp:408] relu1 <- ip1
I0428 19:44:07.102598 25532 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:07.102802 25532 net.cpp:124] Setting up relu1
I0428 19:44:07.102814 25532 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:07.102818 25532 net.cpp:139] Memory required for data: 1619200
I0428 19:44:07.102823 25532 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:07.102829 25532 net.cpp:86] Creating Layer ip2
I0428 19:44:07.102833 25532 net.cpp:408] ip2 <- ip1
I0428 19:44:07.102839 25532 net.cpp:382] ip2 -> ip2
I0428 19:44:07.102962 25532 net.cpp:124] Setting up ip2
I0428 19:44:07.102972 25532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:07.102974 25532 net.cpp:139] Memory required for data: 1621760
I0428 19:44:07.102982 25532 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:07.102989 25532 net.cpp:86] Creating Layer relu2
I0428 19:44:07.102993 25532 net.cpp:408] relu2 <- ip2
I0428 19:44:07.102998 25532 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:07.103855 25532 net.cpp:124] Setting up relu2
I0428 19:44:07.103870 25532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:07.103874 25532 net.cpp:139] Memory required for data: 1624320
I0428 19:44:07.103878 25532 layer_factory.hpp:77] Creating layer loss
I0428 19:44:07.103886 25532 net.cpp:86] Creating Layer loss
I0428 19:44:07.103890 25532 net.cpp:408] loss <- ip2
I0428 19:44:07.103895 25532 net.cpp:408] loss <- label
I0428 19:44:07.103902 25532 net.cpp:382] loss -> loss
I0428 19:44:07.103926 25532 layer_factory.hpp:77] Creating layer loss
I0428 19:44:07.104225 25532 net.cpp:124] Setting up loss
I0428 19:44:07.104238 25532 net.cpp:131] Top shape: (1)
I0428 19:44:07.104241 25532 net.cpp:134]     with loss weight 1
I0428 19:44:07.104257 25532 net.cpp:139] Memory required for data: 1624324
I0428 19:44:07.104262 25532 net.cpp:200] loss needs backward computation.
I0428 19:44:07.104266 25532 net.cpp:200] relu2 needs backward computation.
I0428 19:44:07.104270 25532 net.cpp:200] ip2 needs backward computation.
I0428 19:44:07.104274 25532 net.cpp:200] relu1 needs backward computation.
I0428 19:44:07.104277 25532 net.cpp:200] ip1 needs backward computation.
I0428 19:44:07.104293 25532 net.cpp:200] pool1 needs backward computation.
I0428 19:44:07.104296 25532 net.cpp:200] conv1 needs backward computation.
I0428 19:44:07.104300 25532 net.cpp:200] pool0 needs backward computation.
I0428 19:44:07.104305 25532 net.cpp:200] conv0 needs backward computation.
I0428 19:44:07.104310 25532 net.cpp:202] mnist does not need backward computation.
I0428 19:44:07.104312 25532 net.cpp:244] This network produces output loss
I0428 19:44:07.104322 25532 net.cpp:257] Network initialization done.
I0428 19:44:07.104663 25532 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test439.prototxt
I0428 19:44:07.104694 25532 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:07.104799 25532 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:44:07.104888 25532 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:07.104938 25532 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:07.104957 25532 net.cpp:86] Creating Layer mnist
I0428 19:44:07.104964 25532 net.cpp:382] mnist -> data
I0428 19:44:07.104974 25532 net.cpp:382] mnist -> label
I0428 19:44:07.105077 25532 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:07.107477 25532 net.cpp:124] Setting up mnist
I0428 19:44:07.107493 25532 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:07.107499 25532 net.cpp:131] Top shape: 100 (100)
I0428 19:44:07.107502 25532 net.cpp:139] Memory required for data: 314000
I0428 19:44:07.107507 25532 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:07.107533 25532 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:07.107537 25532 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:07.107543 25532 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:07.107570 25532 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:07.107630 25532 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:07.107650 25532 net.cpp:131] Top shape: 100 (100)
I0428 19:44:07.107656 25532 net.cpp:131] Top shape: 100 (100)
I0428 19:44:07.107659 25532 net.cpp:139] Memory required for data: 314800
I0428 19:44:07.107662 25532 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:07.107674 25532 net.cpp:86] Creating Layer conv0
I0428 19:44:07.107678 25532 net.cpp:408] conv0 <- data
I0428 19:44:07.107686 25532 net.cpp:382] conv0 -> conv0
I0428 19:44:07.109637 25532 net.cpp:124] Setting up conv0
I0428 19:44:07.109657 25532 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:07.109661 25532 net.cpp:139] Memory required for data: 775600
I0428 19:44:07.109673 25532 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:07.109680 25532 net.cpp:86] Creating Layer pool0
I0428 19:44:07.109684 25532 net.cpp:408] pool0 <- conv0
I0428 19:44:07.109689 25532 net.cpp:382] pool0 -> pool0
I0428 19:44:07.109737 25532 net.cpp:124] Setting up pool0
I0428 19:44:07.109743 25532 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:07.109747 25532 net.cpp:139] Memory required for data: 890800
I0428 19:44:07.109750 25532 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:07.109762 25532 net.cpp:86] Creating Layer conv1
I0428 19:44:07.109768 25532 net.cpp:408] conv1 <- pool0
I0428 19:44:07.109773 25532 net.cpp:382] conv1 -> conv1
I0428 19:44:07.111557 25532 net.cpp:124] Setting up conv1
I0428 19:44:07.111572 25532 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:07.111577 25532 net.cpp:139] Memory required for data: 2170800
I0428 19:44:07.111588 25532 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:07.111596 25532 net.cpp:86] Creating Layer pool1
I0428 19:44:07.111600 25532 net.cpp:408] pool1 <- conv1
I0428 19:44:07.111615 25532 net.cpp:382] pool1 -> pool1
I0428 19:44:07.111660 25532 net.cpp:124] Setting up pool1
I0428 19:44:07.111670 25532 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:07.111675 25532 net.cpp:139] Memory required for data: 2490800
I0428 19:44:07.111677 25532 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:07.111685 25532 net.cpp:86] Creating Layer ip1
I0428 19:44:07.111688 25532 net.cpp:408] ip1 <- pool1
I0428 19:44:07.111696 25532 net.cpp:382] ip1 -> ip1
I0428 19:44:07.112098 25532 net.cpp:124] Setting up ip1
I0428 19:44:07.112108 25532 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:07.112112 25532 net.cpp:139] Memory required for data: 2510800
I0428 19:44:07.112121 25532 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:07.112128 25532 net.cpp:86] Creating Layer relu1
I0428 19:44:07.112133 25532 net.cpp:408] relu1 <- ip1
I0428 19:44:07.112138 25532 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:07.112355 25532 net.cpp:124] Setting up relu1
I0428 19:44:07.112367 25532 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:07.112371 25532 net.cpp:139] Memory required for data: 2530800
I0428 19:44:07.112375 25532 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:07.112385 25532 net.cpp:86] Creating Layer ip2
I0428 19:44:07.112388 25532 net.cpp:408] ip2 <- ip1
I0428 19:44:07.112395 25532 net.cpp:382] ip2 -> ip2
I0428 19:44:07.112542 25532 net.cpp:124] Setting up ip2
I0428 19:44:07.112551 25532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:07.112555 25532 net.cpp:139] Memory required for data: 2534800
I0428 19:44:07.112562 25532 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:07.112567 25532 net.cpp:86] Creating Layer relu2
I0428 19:44:07.112572 25532 net.cpp:408] relu2 <- ip2
I0428 19:44:07.112578 25532 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:07.112826 25532 net.cpp:124] Setting up relu2
I0428 19:44:07.112838 25532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:07.112848 25532 net.cpp:139] Memory required for data: 2538800
I0428 19:44:07.112853 25532 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:44:07.112865 25532 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:44:07.112869 25532 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:44:07.112876 25532 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:44:07.112895 25532 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:44:07.112941 25532 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:44:07.112947 25532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:07.112952 25532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:07.112956 25532 net.cpp:139] Memory required for data: 2546800
I0428 19:44:07.112959 25532 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:07.112970 25532 net.cpp:86] Creating Layer accuracy
I0428 19:44:07.112973 25532 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:44:07.112979 25532 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:07.112985 25532 net.cpp:382] accuracy -> accuracy
I0428 19:44:07.112993 25532 net.cpp:124] Setting up accuracy
I0428 19:44:07.113013 25532 net.cpp:131] Top shape: (1)
I0428 19:44:07.113016 25532 net.cpp:139] Memory required for data: 2546804
I0428 19:44:07.113026 25532 layer_factory.hpp:77] Creating layer loss
I0428 19:44:07.113031 25532 net.cpp:86] Creating Layer loss
I0428 19:44:07.113035 25532 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:44:07.113040 25532 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:07.113052 25532 net.cpp:382] loss -> loss
I0428 19:44:07.113059 25532 layer_factory.hpp:77] Creating layer loss
I0428 19:44:07.113365 25532 net.cpp:124] Setting up loss
I0428 19:44:07.113379 25532 net.cpp:131] Top shape: (1)
I0428 19:44:07.113382 25532 net.cpp:134]     with loss weight 1
I0428 19:44:07.113389 25532 net.cpp:139] Memory required for data: 2546808
I0428 19:44:07.113394 25532 net.cpp:200] loss needs backward computation.
I0428 19:44:07.113399 25532 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:07.113404 25532 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:44:07.113406 25532 net.cpp:200] relu2 needs backward computation.
I0428 19:44:07.113410 25532 net.cpp:200] ip2 needs backward computation.
I0428 19:44:07.113414 25532 net.cpp:200] relu1 needs backward computation.
I0428 19:44:07.113417 25532 net.cpp:200] ip1 needs backward computation.
I0428 19:44:07.113420 25532 net.cpp:200] pool1 needs backward computation.
I0428 19:44:07.113433 25532 net.cpp:200] conv1 needs backward computation.
I0428 19:44:07.113436 25532 net.cpp:200] pool0 needs backward computation.
I0428 19:44:07.113440 25532 net.cpp:200] conv0 needs backward computation.
I0428 19:44:07.113445 25532 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:07.113456 25532 net.cpp:202] mnist does not need backward computation.
I0428 19:44:07.113459 25532 net.cpp:244] This network produces output accuracy
I0428 19:44:07.113463 25532 net.cpp:244] This network produces output loss
I0428 19:44:07.113476 25532 net.cpp:257] Network initialization done.
I0428 19:44:07.113518 25532 solver.cpp:56] Solver scaffolding done.
I0428 19:44:07.113834 25532 caffe.cpp:248] Starting Optimization
I0428 19:44:07.113843 25532 solver.cpp:273] Solving LeNet
I0428 19:44:07.113848 25532 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:07.114830 25532 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:07.117960 25532 blocking_queue.cpp:49] Waiting for data
I0428 19:44:07.190274 25539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:07.190774 25532 solver.cpp:398]     Test net output #0: accuracy = 0.0688
I0428 19:44:07.190798 25532 solver.cpp:398]     Test net output #1: loss = 2.37797 (* 1 = 2.37797 loss)
I0428 19:44:07.193645 25532 solver.cpp:219] Iteration 0 (-1.78345e-31 iter/s, 0.0797674s/100 iters), loss = 2.34202
I0428 19:44:07.193676 25532 solver.cpp:238]     Train net output #0: loss = 2.34202 (* 1 = 2.34202 loss)
I0428 19:44:07.193691 25532 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:07.291905 25532 solver.cpp:219] Iteration 100 (1018.25 iter/s, 0.0982077s/100 iters), loss = 0.729212
I0428 19:44:07.291932 25532 solver.cpp:238]     Train net output #0: loss = 0.729212 (* 1 = 0.729212 loss)
I0428 19:44:07.291939 25532 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:07.385071 25532 solver.cpp:219] Iteration 200 (1073.81 iter/s, 0.0931267s/100 iters), loss = 0.659493
I0428 19:44:07.385107 25532 solver.cpp:238]     Train net output #0: loss = 0.659493 (* 1 = 0.659493 loss)
I0428 19:44:07.385113 25532 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:07.478579 25532 solver.cpp:219] Iteration 300 (1069.95 iter/s, 0.0934623s/100 iters), loss = 0.505167
I0428 19:44:07.478603 25532 solver.cpp:238]     Train net output #0: loss = 0.505167 (* 1 = 0.505167 loss)
I0428 19:44:07.478610 25532 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:07.572449 25532 solver.cpp:219] Iteration 400 (1065.72 iter/s, 0.0938332s/100 iters), loss = 0.181283
I0428 19:44:07.572473 25532 solver.cpp:238]     Train net output #0: loss = 0.181283 (* 1 = 0.181283 loss)
I0428 19:44:07.572479 25532 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:07.665035 25532 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:07.718118 25539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:07.718567 25532 solver.cpp:398]     Test net output #0: accuracy = 0.9538
I0428 19:44:07.718586 25532 solver.cpp:398]     Test net output #1: loss = 0.150455 (* 1 = 0.150455 loss)
I0428 19:44:07.719645 25532 solver.cpp:219] Iteration 500 (679.531 iter/s, 0.14716s/100 iters), loss = 0.158069
I0428 19:44:07.719683 25532 solver.cpp:238]     Train net output #0: loss = 0.158069 (* 1 = 0.158069 loss)
I0428 19:44:07.719691 25532 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:07.824441 25532 solver.cpp:219] Iteration 600 (954.709 iter/s, 0.104744s/100 iters), loss = 0.133877
I0428 19:44:07.824472 25532 solver.cpp:238]     Train net output #0: loss = 0.133877 (* 1 = 0.133877 loss)
I0428 19:44:07.824481 25532 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:07.921897 25532 solver.cpp:219] Iteration 700 (1026.64 iter/s, 0.0974049s/100 iters), loss = 0.226229
I0428 19:44:07.921926 25532 solver.cpp:238]     Train net output #0: loss = 0.226229 (* 1 = 0.226229 loss)
I0428 19:44:07.921933 25532 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:08.018679 25532 solver.cpp:219] Iteration 800 (1033.75 iter/s, 0.0967352s/100 iters), loss = 0.258094
I0428 19:44:08.018707 25532 solver.cpp:238]     Train net output #0: loss = 0.258094 (* 1 = 0.258094 loss)
I0428 19:44:08.018714 25532 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:08.111901 25532 solver.cpp:219] Iteration 900 (1073.18 iter/s, 0.0931809s/100 iters), loss = 0.267462
I0428 19:44:08.111925 25532 solver.cpp:238]     Train net output #0: loss = 0.267462 (* 1 = 0.267462 loss)
I0428 19:44:08.111932 25532 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:08.143060 25538 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:08.204547 25532 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:08.206065 25532 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:08.206895 25532 solver.cpp:311] Iteration 1000, loss = 0.17024
I0428 19:44:08.206941 25532 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:08.266371 25539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:08.266937 25532 solver.cpp:398]     Test net output #0: accuracy = 0.9728
I0428 19:44:08.266960 25532 solver.cpp:398]     Test net output #1: loss = 0.0822934 (* 1 = 0.0822934 loss)
I0428 19:44:08.266970 25532 solver.cpp:316] Optimization Done.
I0428 19:44:08.266975 25532 caffe.cpp:259] Optimization Done.
