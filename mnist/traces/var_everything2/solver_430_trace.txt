I0428 19:43:45.185824 25446 caffe.cpp:218] Using GPUs 0
I0428 19:43:45.222517 25446 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:43:45.659927 25446 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test430.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:43:45.660060 25446 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test430.prototxt
I0428 19:43:45.660344 25446 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:43:45.660359 25446 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:43:45.660439 25446 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:43:45.660506 25446 layer_factory.hpp:77] Creating layer mnist
I0428 19:43:45.660606 25446 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:43:45.660631 25446 net.cpp:86] Creating Layer mnist
I0428 19:43:45.660640 25446 net.cpp:382] mnist -> data
I0428 19:43:45.660663 25446 net.cpp:382] mnist -> label
I0428 19:43:45.661721 25446 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:43:45.663898 25446 net.cpp:124] Setting up mnist
I0428 19:43:45.663930 25446 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:43:45.663938 25446 net.cpp:131] Top shape: 64 (64)
I0428 19:43:45.663944 25446 net.cpp:139] Memory required for data: 200960
I0428 19:43:45.663952 25446 layer_factory.hpp:77] Creating layer conv0
I0428 19:43:45.663971 25446 net.cpp:86] Creating Layer conv0
I0428 19:43:45.663980 25446 net.cpp:408] conv0 <- data
I0428 19:43:45.663993 25446 net.cpp:382] conv0 -> conv0
I0428 19:43:45.895788 25446 net.cpp:124] Setting up conv0
I0428 19:43:45.895817 25446 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:43:45.895823 25446 net.cpp:139] Memory required for data: 495872
I0428 19:43:45.895841 25446 layer_factory.hpp:77] Creating layer pool0
I0428 19:43:45.895872 25446 net.cpp:86] Creating Layer pool0
I0428 19:43:45.895879 25446 net.cpp:408] pool0 <- conv0
I0428 19:43:45.895887 25446 net.cpp:382] pool0 -> pool0
I0428 19:43:45.895941 25446 net.cpp:124] Setting up pool0
I0428 19:43:45.895951 25446 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:43:45.896389 25446 net.cpp:139] Memory required for data: 569600
I0428 19:43:45.896409 25446 layer_factory.hpp:77] Creating layer conv1
I0428 19:43:45.896433 25446 net.cpp:86] Creating Layer conv1
I0428 19:43:45.896443 25446 net.cpp:408] conv1 <- pool0
I0428 19:43:45.896458 25446 net.cpp:382] conv1 -> conv1
I0428 19:43:45.902055 25446 net.cpp:124] Setting up conv1
I0428 19:43:45.902097 25446 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:43:45.902107 25446 net.cpp:139] Memory required for data: 1388800
I0428 19:43:45.902129 25446 layer_factory.hpp:77] Creating layer pool1
I0428 19:43:45.902146 25446 net.cpp:86] Creating Layer pool1
I0428 19:43:45.902155 25446 net.cpp:408] pool1 <- conv1
I0428 19:43:45.902168 25446 net.cpp:382] pool1 -> pool1
I0428 19:43:45.902247 25446 net.cpp:124] Setting up pool1
I0428 19:43:45.902261 25446 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:43:45.902267 25446 net.cpp:139] Memory required for data: 1593600
I0428 19:43:45.902274 25446 layer_factory.hpp:77] Creating layer ip1
I0428 19:43:45.902289 25446 net.cpp:86] Creating Layer ip1
I0428 19:43:45.902298 25446 net.cpp:408] ip1 <- pool1
I0428 19:43:45.902310 25446 net.cpp:382] ip1 -> ip1
I0428 19:43:45.904155 25446 net.cpp:124] Setting up ip1
I0428 19:43:45.904181 25446 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:45.904189 25446 net.cpp:139] Memory required for data: 1596160
I0428 19:43:45.904207 25446 layer_factory.hpp:77] Creating layer relu1
I0428 19:43:45.904228 25446 net.cpp:86] Creating Layer relu1
I0428 19:43:45.904237 25446 net.cpp:408] relu1 <- ip1
I0428 19:43:45.904248 25446 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:43:45.904628 25446 net.cpp:124] Setting up relu1
I0428 19:43:45.904646 25446 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:45.904655 25446 net.cpp:139] Memory required for data: 1598720
I0428 19:43:45.904664 25446 layer_factory.hpp:77] Creating layer loss
I0428 19:43:45.904676 25446 net.cpp:86] Creating Layer loss
I0428 19:43:45.904691 25446 net.cpp:408] loss <- ip1
I0428 19:43:45.904701 25446 net.cpp:408] loss <- label
I0428 19:43:45.904712 25446 net.cpp:382] loss -> loss
I0428 19:43:45.904739 25446 layer_factory.hpp:77] Creating layer loss
I0428 19:43:45.906416 25446 net.cpp:124] Setting up loss
I0428 19:43:45.906442 25446 net.cpp:131] Top shape: (1)
I0428 19:43:45.906451 25446 net.cpp:134]     with loss weight 1
I0428 19:43:45.906477 25446 net.cpp:139] Memory required for data: 1598724
I0428 19:43:45.906486 25446 net.cpp:200] loss needs backward computation.
I0428 19:43:45.906504 25446 net.cpp:200] relu1 needs backward computation.
I0428 19:43:45.906510 25446 net.cpp:200] ip1 needs backward computation.
I0428 19:43:45.906519 25446 net.cpp:200] pool1 needs backward computation.
I0428 19:43:45.906527 25446 net.cpp:200] conv1 needs backward computation.
I0428 19:43:45.906533 25446 net.cpp:200] pool0 needs backward computation.
I0428 19:43:45.906546 25446 net.cpp:200] conv0 needs backward computation.
I0428 19:43:45.906554 25446 net.cpp:202] mnist does not need backward computation.
I0428 19:43:45.906561 25446 net.cpp:244] This network produces output loss
I0428 19:43:45.906579 25446 net.cpp:257] Network initialization done.
I0428 19:43:45.907116 25446 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test430.prototxt
I0428 19:43:45.907162 25446 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:43:45.907310 25446 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:43:45.907451 25446 layer_factory.hpp:77] Creating layer mnist
I0428 19:43:45.907547 25446 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:43:45.907570 25446 net.cpp:86] Creating Layer mnist
I0428 19:43:45.907580 25446 net.cpp:382] mnist -> data
I0428 19:43:45.907598 25446 net.cpp:382] mnist -> label
I0428 19:43:45.907775 25446 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:43:45.911525 25446 net.cpp:124] Setting up mnist
I0428 19:43:45.911550 25446 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:43:45.911562 25446 net.cpp:131] Top shape: 100 (100)
I0428 19:43:45.911571 25446 net.cpp:139] Memory required for data: 314000
I0428 19:43:45.911581 25446 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:43:45.911594 25446 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:43:45.911602 25446 net.cpp:408] label_mnist_1_split <- label
I0428 19:43:45.911614 25446 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:43:45.911628 25446 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:43:45.911809 25446 net.cpp:124] Setting up label_mnist_1_split
I0428 19:43:45.911823 25446 net.cpp:131] Top shape: 100 (100)
I0428 19:43:45.911833 25446 net.cpp:131] Top shape: 100 (100)
I0428 19:43:45.911839 25446 net.cpp:139] Memory required for data: 314800
I0428 19:43:45.911846 25446 layer_factory.hpp:77] Creating layer conv0
I0428 19:43:45.911864 25446 net.cpp:86] Creating Layer conv0
I0428 19:43:45.911871 25446 net.cpp:408] conv0 <- data
I0428 19:43:45.911882 25446 net.cpp:382] conv0 -> conv0
I0428 19:43:45.913424 25446 net.cpp:124] Setting up conv0
I0428 19:43:45.913445 25446 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:43:45.913455 25446 net.cpp:139] Memory required for data: 775600
I0428 19:43:45.913473 25446 layer_factory.hpp:77] Creating layer pool0
I0428 19:43:45.913486 25446 net.cpp:86] Creating Layer pool0
I0428 19:43:45.913494 25446 net.cpp:408] pool0 <- conv0
I0428 19:43:45.913506 25446 net.cpp:382] pool0 -> pool0
I0428 19:43:45.913578 25446 net.cpp:124] Setting up pool0
I0428 19:43:45.913589 25446 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:43:45.913596 25446 net.cpp:139] Memory required for data: 890800
I0428 19:43:45.913602 25446 layer_factory.hpp:77] Creating layer conv1
I0428 19:43:45.913619 25446 net.cpp:86] Creating Layer conv1
I0428 19:43:45.913627 25446 net.cpp:408] conv1 <- pool0
I0428 19:43:45.913637 25446 net.cpp:382] conv1 -> conv1
I0428 19:43:45.916378 25446 net.cpp:124] Setting up conv1
I0428 19:43:45.916404 25446 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:43:45.916424 25446 net.cpp:139] Memory required for data: 2170800
I0428 19:43:45.916442 25446 layer_factory.hpp:77] Creating layer pool1
I0428 19:43:45.916456 25446 net.cpp:86] Creating Layer pool1
I0428 19:43:45.916484 25446 net.cpp:408] pool1 <- conv1
I0428 19:43:45.916497 25446 net.cpp:382] pool1 -> pool1
I0428 19:43:45.916616 25446 net.cpp:124] Setting up pool1
I0428 19:43:45.916630 25446 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:43:45.916638 25446 net.cpp:139] Memory required for data: 2490800
I0428 19:43:45.916646 25446 layer_factory.hpp:77] Creating layer ip1
I0428 19:43:45.916659 25446 net.cpp:86] Creating Layer ip1
I0428 19:43:45.916666 25446 net.cpp:408] ip1 <- pool1
I0428 19:43:45.916678 25446 net.cpp:382] ip1 -> ip1
I0428 19:43:45.916975 25446 net.cpp:124] Setting up ip1
I0428 19:43:45.916990 25446 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:45.916998 25446 net.cpp:139] Memory required for data: 2494800
I0428 19:43:45.917012 25446 layer_factory.hpp:77] Creating layer relu1
I0428 19:43:45.917023 25446 net.cpp:86] Creating Layer relu1
I0428 19:43:45.917032 25446 net.cpp:408] relu1 <- ip1
I0428 19:43:45.917042 25446 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:43:45.918560 25446 net.cpp:124] Setting up relu1
I0428 19:43:45.918582 25446 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:45.918591 25446 net.cpp:139] Memory required for data: 2498800
I0428 19:43:45.918601 25446 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:43:45.918619 25446 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:43:45.918628 25446 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:43:45.918642 25446 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:43:45.918655 25446 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:43:45.918740 25446 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:43:45.918752 25446 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:45.918761 25446 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:45.918768 25446 net.cpp:139] Memory required for data: 2506800
I0428 19:43:45.918774 25446 layer_factory.hpp:77] Creating layer accuracy
I0428 19:43:45.918792 25446 net.cpp:86] Creating Layer accuracy
I0428 19:43:45.918800 25446 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:43:45.918825 25446 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:43:45.918840 25446 net.cpp:382] accuracy -> accuracy
I0428 19:43:45.918855 25446 net.cpp:124] Setting up accuracy
I0428 19:43:45.918865 25446 net.cpp:131] Top shape: (1)
I0428 19:43:45.918872 25446 net.cpp:139] Memory required for data: 2506804
I0428 19:43:45.918881 25446 layer_factory.hpp:77] Creating layer loss
I0428 19:43:45.918890 25446 net.cpp:86] Creating Layer loss
I0428 19:43:45.918898 25446 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:43:45.918908 25446 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:43:45.918918 25446 net.cpp:382] loss -> loss
I0428 19:43:45.918931 25446 layer_factory.hpp:77] Creating layer loss
I0428 19:43:45.919414 25446 net.cpp:124] Setting up loss
I0428 19:43:45.919430 25446 net.cpp:131] Top shape: (1)
I0428 19:43:45.919437 25446 net.cpp:134]     with loss weight 1
I0428 19:43:45.919450 25446 net.cpp:139] Memory required for data: 2506808
I0428 19:43:45.919456 25446 net.cpp:200] loss needs backward computation.
I0428 19:43:45.919466 25446 net.cpp:202] accuracy does not need backward computation.
I0428 19:43:45.919476 25446 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:43:45.919482 25446 net.cpp:200] relu1 needs backward computation.
I0428 19:43:45.919488 25446 net.cpp:200] ip1 needs backward computation.
I0428 19:43:45.919495 25446 net.cpp:200] pool1 needs backward computation.
I0428 19:43:45.919502 25446 net.cpp:200] conv1 needs backward computation.
I0428 19:43:45.919510 25446 net.cpp:200] pool0 needs backward computation.
I0428 19:43:45.919526 25446 net.cpp:200] conv0 needs backward computation.
I0428 19:43:45.919534 25446 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:43:45.919541 25446 net.cpp:202] mnist does not need backward computation.
I0428 19:43:45.919548 25446 net.cpp:244] This network produces output accuracy
I0428 19:43:45.919554 25446 net.cpp:244] This network produces output loss
I0428 19:43:45.919600 25446 net.cpp:257] Network initialization done.
I0428 19:43:45.919667 25446 solver.cpp:56] Solver scaffolding done.
I0428 19:43:45.920090 25446 caffe.cpp:248] Starting Optimization
I0428 19:43:45.920100 25446 solver.cpp:273] Solving LeNet
I0428 19:43:45.920107 25446 solver.cpp:274] Learning Rate Policy: inv
I0428 19:43:45.920295 25446 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:43:45.926461 25446 blocking_queue.cpp:49] Waiting for data
I0428 19:43:45.996045 25453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:45.996595 25446 solver.cpp:398]     Test net output #0: accuracy = 0.0743
I0428 19:43:45.996637 25446 solver.cpp:398]     Test net output #1: loss = 2.31163 (* 1 = 2.31163 loss)
I0428 19:43:45.999259 25446 solver.cpp:219] Iteration 0 (-2.41988e-31 iter/s, 0.0791173s/100 iters), loss = 2.3136
I0428 19:43:45.999308 25446 solver.cpp:238]     Train net output #0: loss = 2.3136 (* 1 = 2.3136 loss)
I0428 19:43:45.999337 25446 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:43:46.095947 25446 solver.cpp:219] Iteration 100 (1034.84 iter/s, 0.0966329s/100 iters), loss = 0.241828
I0428 19:43:46.095989 25446 solver.cpp:238]     Train net output #0: loss = 0.241828 (* 1 = 0.241828 loss)
I0428 19:43:46.096004 25446 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:43:46.186089 25446 solver.cpp:219] Iteration 200 (1109.96 iter/s, 0.0900934s/100 iters), loss = 0.196746
I0428 19:43:46.186120 25446 solver.cpp:238]     Train net output #0: loss = 0.196746 (* 1 = 0.196746 loss)
I0428 19:43:46.186132 25446 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:43:46.275069 25446 solver.cpp:219] Iteration 300 (1124.33 iter/s, 0.0889417s/100 iters), loss = 0.186624
I0428 19:43:46.275104 25446 solver.cpp:238]     Train net output #0: loss = 0.186624 (* 1 = 0.186624 loss)
I0428 19:43:46.275115 25446 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:43:46.366271 25446 solver.cpp:219] Iteration 400 (1096.97 iter/s, 0.0911606s/100 iters), loss = 0.145267
I0428 19:43:46.366307 25446 solver.cpp:238]     Train net output #0: loss = 0.145267 (* 1 = 0.145267 loss)
I0428 19:43:46.366320 25446 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:43:46.459138 25446 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:43:46.533776 25453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:46.534201 25446 solver.cpp:398]     Test net output #0: accuracy = 0.9588
I0428 19:43:46.534225 25446 solver.cpp:398]     Test net output #1: loss = 0.140055 (* 1 = 0.140055 loss)
I0428 19:43:46.535161 25446 solver.cpp:219] Iteration 500 (592.265 iter/s, 0.168843s/100 iters), loss = 0.20219
I0428 19:43:46.535192 25446 solver.cpp:238]     Train net output #0: loss = 0.20219 (* 1 = 0.20219 loss)
I0428 19:43:46.535208 25446 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:43:46.635979 25446 solver.cpp:219] Iteration 600 (992.26 iter/s, 0.10078s/100 iters), loss = 0.133328
I0428 19:43:46.636008 25446 solver.cpp:238]     Train net output #0: loss = 0.133328 (* 1 = 0.133328 loss)
I0428 19:43:46.636034 25446 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:43:46.726198 25446 solver.cpp:219] Iteration 700 (1108.85 iter/s, 0.0901837s/100 iters), loss = 0.238974
I0428 19:43:46.726230 25446 solver.cpp:238]     Train net output #0: loss = 0.238974 (* 1 = 0.238974 loss)
I0428 19:43:46.726241 25446 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:43:46.814276 25446 solver.cpp:219] Iteration 800 (1135.84 iter/s, 0.0880404s/100 iters), loss = 0.241815
I0428 19:43:46.814308 25446 solver.cpp:238]     Train net output #0: loss = 0.241815 (* 1 = 0.241815 loss)
I0428 19:43:46.814321 25446 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:43:46.902493 25446 solver.cpp:219] Iteration 900 (1134.07 iter/s, 0.0881777s/100 iters), loss = 0.137104
I0428 19:43:46.902525 25446 solver.cpp:238]     Train net output #0: loss = 0.137104 (* 1 = 0.137104 loss)
I0428 19:43:46.902537 25446 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:43:46.932271 25452 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:46.990440 25446 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:43:46.991242 25446 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:43:46.991677 25446 solver.cpp:311] Iteration 1000, loss = 0.17144
I0428 19:43:46.991693 25446 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:43:47.066079 25453 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:47.066511 25446 solver.cpp:398]     Test net output #0: accuracy = 0.9721
I0428 19:43:47.066536 25446 solver.cpp:398]     Test net output #1: loss = 0.0936363 (* 1 = 0.0936363 loss)
I0428 19:43:47.066545 25446 solver.cpp:316] Optimization Done.
I0428 19:43:47.066551 25446 caffe.cpp:259] Optimization Done.
