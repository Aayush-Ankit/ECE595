I0428 20:17:32.502020   893 caffe.cpp:218] Using GPUs 0
I0428 20:17:32.539763   893 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:32.994954   893 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1297.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:32.995081   893 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1297.prototxt
I0428 20:17:32.995412   893 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:32.995441   893 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:32.995527   893 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:32.995586   893 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:32.995667   893 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:32.995687   893 net.cpp:86] Creating Layer mnist
I0428 20:17:32.995692   893 net.cpp:382] mnist -> data
I0428 20:17:32.995710   893 net.cpp:382] mnist -> label
I0428 20:17:32.996726   893 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:32.998951   893 net.cpp:124] Setting up mnist
I0428 20:17:32.998984   893 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:32.998989   893 net.cpp:131] Top shape: 64 (64)
I0428 20:17:32.998992   893 net.cpp:139] Memory required for data: 200960
I0428 20:17:32.998998   893 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:32.999013   893 net.cpp:86] Creating Layer conv0
I0428 20:17:32.999017   893 net.cpp:408] conv0 <- data
I0428 20:17:32.999027   893 net.cpp:382] conv0 -> conv0
I0428 20:17:33.234467   893 net.cpp:124] Setting up conv0
I0428 20:17:33.234493   893 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:33.234496   893 net.cpp:139] Memory required for data: 7573760
I0428 20:17:33.234545   893 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:33.234572   893 net.cpp:86] Creating Layer pool0
I0428 20:17:33.234576   893 net.cpp:408] pool0 <- conv0
I0428 20:17:33.234581   893 net.cpp:382] pool0 -> pool0
I0428 20:17:33.234627   893 net.cpp:124] Setting up pool0
I0428 20:17:33.234633   893 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:33.234635   893 net.cpp:139] Memory required for data: 9416960
I0428 20:17:33.234638   893 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:33.234649   893 net.cpp:86] Creating Layer conv1
I0428 20:17:33.234652   893 net.cpp:408] conv1 <- pool0
I0428 20:17:33.234657   893 net.cpp:382] conv1 -> conv1
I0428 20:17:33.237538   893 net.cpp:124] Setting up conv1
I0428 20:17:33.237552   893 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:33.237556   893 net.cpp:139] Memory required for data: 9580800
I0428 20:17:33.237565   893 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:33.237588   893 net.cpp:86] Creating Layer pool1
I0428 20:17:33.237591   893 net.cpp:408] pool1 <- conv1
I0428 20:17:33.237612   893 net.cpp:382] pool1 -> pool1
I0428 20:17:33.237648   893 net.cpp:124] Setting up pool1
I0428 20:17:33.237653   893 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:33.237656   893 net.cpp:139] Memory required for data: 9621760
I0428 20:17:33.237659   893 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:33.237666   893 net.cpp:86] Creating Layer ip1
I0428 20:17:33.237668   893 net.cpp:408] ip1 <- pool1
I0428 20:17:33.237673   893 net.cpp:382] ip1 -> ip1
I0428 20:17:33.237812   893 net.cpp:124] Setting up ip1
I0428 20:17:33.237819   893 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:17:33.237823   893 net.cpp:139] Memory required for data: 9634560
I0428 20:17:33.237845   893 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:33.237850   893 net.cpp:86] Creating Layer relu1
I0428 20:17:33.237854   893 net.cpp:408] relu1 <- ip1
I0428 20:17:33.237857   893 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:33.238020   893 net.cpp:124] Setting up relu1
I0428 20:17:33.238029   893 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:17:33.238031   893 net.cpp:139] Memory required for data: 9647360
I0428 20:17:33.238034   893 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:33.238039   893 net.cpp:86] Creating Layer ip2
I0428 20:17:33.238042   893 net.cpp:408] ip2 <- ip1
I0428 20:17:33.238046   893 net.cpp:382] ip2 -> ip2
I0428 20:17:33.238131   893 net.cpp:124] Setting up ip2
I0428 20:17:33.238138   893 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:33.238142   893 net.cpp:139] Memory required for data: 9649920
I0428 20:17:33.238147   893 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:33.238152   893 net.cpp:86] Creating Layer relu2
I0428 20:17:33.238154   893 net.cpp:408] relu2 <- ip2
I0428 20:17:33.238158   893 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:33.238934   893 net.cpp:124] Setting up relu2
I0428 20:17:33.238945   893 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:33.238965   893 net.cpp:139] Memory required for data: 9652480
I0428 20:17:33.238967   893 layer_factory.hpp:77] Creating layer loss
I0428 20:17:33.238973   893 net.cpp:86] Creating Layer loss
I0428 20:17:33.238976   893 net.cpp:408] loss <- ip2
I0428 20:17:33.238981   893 net.cpp:408] loss <- label
I0428 20:17:33.238986   893 net.cpp:382] loss -> loss
I0428 20:17:33.239004   893 layer_factory.hpp:77] Creating layer loss
I0428 20:17:33.239209   893 net.cpp:124] Setting up loss
I0428 20:17:33.239218   893 net.cpp:131] Top shape: (1)
I0428 20:17:33.239222   893 net.cpp:134]     with loss weight 1
I0428 20:17:33.239236   893 net.cpp:139] Memory required for data: 9652484
I0428 20:17:33.239240   893 net.cpp:200] loss needs backward computation.
I0428 20:17:33.239243   893 net.cpp:200] relu2 needs backward computation.
I0428 20:17:33.239246   893 net.cpp:200] ip2 needs backward computation.
I0428 20:17:33.239248   893 net.cpp:200] relu1 needs backward computation.
I0428 20:17:33.239251   893 net.cpp:200] ip1 needs backward computation.
I0428 20:17:33.239264   893 net.cpp:200] pool1 needs backward computation.
I0428 20:17:33.239267   893 net.cpp:200] conv1 needs backward computation.
I0428 20:17:33.239270   893 net.cpp:200] pool0 needs backward computation.
I0428 20:17:33.239274   893 net.cpp:200] conv0 needs backward computation.
I0428 20:17:33.239276   893 net.cpp:202] mnist does not need backward computation.
I0428 20:17:33.239279   893 net.cpp:244] This network produces output loss
I0428 20:17:33.239287   893 net.cpp:257] Network initialization done.
I0428 20:17:33.239594   893 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1297.prototxt
I0428 20:17:33.239648   893 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:33.239729   893 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:33.239790   893 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:33.239847   893 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:33.239874   893 net.cpp:86] Creating Layer mnist
I0428 20:17:33.239878   893 net.cpp:382] mnist -> data
I0428 20:17:33.239886   893 net.cpp:382] mnist -> label
I0428 20:17:33.239995   893 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:33.242197   893 net.cpp:124] Setting up mnist
I0428 20:17:33.242226   893 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:33.242230   893 net.cpp:131] Top shape: 100 (100)
I0428 20:17:33.242233   893 net.cpp:139] Memory required for data: 314000
I0428 20:17:33.242238   893 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:33.242244   893 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:33.242246   893 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:33.242250   893 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:33.242256   893 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:33.242305   893 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:33.242310   893 net.cpp:131] Top shape: 100 (100)
I0428 20:17:33.242313   893 net.cpp:131] Top shape: 100 (100)
I0428 20:17:33.242316   893 net.cpp:139] Memory required for data: 314800
I0428 20:17:33.242318   893 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:33.242326   893 net.cpp:86] Creating Layer conv0
I0428 20:17:33.242328   893 net.cpp:408] conv0 <- data
I0428 20:17:33.242333   893 net.cpp:382] conv0 -> conv0
I0428 20:17:33.244096   893 net.cpp:124] Setting up conv0
I0428 20:17:33.244110   893 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:33.244113   893 net.cpp:139] Memory required for data: 11834800
I0428 20:17:33.244122   893 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:33.244139   893 net.cpp:86] Creating Layer pool0
I0428 20:17:33.244143   893 net.cpp:408] pool0 <- conv0
I0428 20:17:33.244148   893 net.cpp:382] pool0 -> pool0
I0428 20:17:33.244197   893 net.cpp:124] Setting up pool0
I0428 20:17:33.244204   893 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:33.244206   893 net.cpp:139] Memory required for data: 14714800
I0428 20:17:33.244210   893 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:33.244217   893 net.cpp:86] Creating Layer conv1
I0428 20:17:33.244220   893 net.cpp:408] conv1 <- pool0
I0428 20:17:33.244225   893 net.cpp:382] conv1 -> conv1
I0428 20:17:33.245823   893 net.cpp:124] Setting up conv1
I0428 20:17:33.245836   893 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:33.245839   893 net.cpp:139] Memory required for data: 14970800
I0428 20:17:33.245847   893 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:33.245853   893 net.cpp:86] Creating Layer pool1
I0428 20:17:33.245857   893 net.cpp:408] pool1 <- conv1
I0428 20:17:33.245860   893 net.cpp:382] pool1 -> pool1
I0428 20:17:33.245920   893 net.cpp:124] Setting up pool1
I0428 20:17:33.245925   893 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:33.245929   893 net.cpp:139] Memory required for data: 15034800
I0428 20:17:33.245931   893 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:33.245937   893 net.cpp:86] Creating Layer ip1
I0428 20:17:33.245946   893 net.cpp:408] ip1 <- pool1
I0428 20:17:33.245956   893 net.cpp:382] ip1 -> ip1
I0428 20:17:33.246121   893 net.cpp:124] Setting up ip1
I0428 20:17:33.246131   893 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:17:33.246134   893 net.cpp:139] Memory required for data: 15054800
I0428 20:17:33.246141   893 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:33.246146   893 net.cpp:86] Creating Layer relu1
I0428 20:17:33.246150   893 net.cpp:408] relu1 <- ip1
I0428 20:17:33.246155   893 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:33.246305   893 net.cpp:124] Setting up relu1
I0428 20:17:33.246328   893 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:17:33.246331   893 net.cpp:139] Memory required for data: 15074800
I0428 20:17:33.246335   893 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:33.246356   893 net.cpp:86] Creating Layer ip2
I0428 20:17:33.246359   893 net.cpp:408] ip2 <- ip1
I0428 20:17:33.246363   893 net.cpp:382] ip2 -> ip2
I0428 20:17:33.246465   893 net.cpp:124] Setting up ip2
I0428 20:17:33.246472   893 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:33.246474   893 net.cpp:139] Memory required for data: 15078800
I0428 20:17:33.246479   893 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:33.246484   893 net.cpp:86] Creating Layer relu2
I0428 20:17:33.246486   893 net.cpp:408] relu2 <- ip2
I0428 20:17:33.246490   893 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:33.246619   893 net.cpp:124] Setting up relu2
I0428 20:17:33.246626   893 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:33.246630   893 net.cpp:139] Memory required for data: 15082800
I0428 20:17:33.246634   893 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:33.246637   893 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:33.246639   893 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:33.246644   893 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:33.246659   893 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:33.246697   893 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:33.246721   893 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:33.246726   893 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:33.246733   893 net.cpp:139] Memory required for data: 15090800
I0428 20:17:33.246737   893 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:33.246745   893 net.cpp:86] Creating Layer accuracy
I0428 20:17:33.246749   893 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:33.246753   893 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:33.246757   893 net.cpp:382] accuracy -> accuracy
I0428 20:17:33.246768   893 net.cpp:124] Setting up accuracy
I0428 20:17:33.246773   893 net.cpp:131] Top shape: (1)
I0428 20:17:33.246775   893 net.cpp:139] Memory required for data: 15090804
I0428 20:17:33.246778   893 layer_factory.hpp:77] Creating layer loss
I0428 20:17:33.246783   893 net.cpp:86] Creating Layer loss
I0428 20:17:33.246785   893 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:33.246788   893 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:33.246793   893 net.cpp:382] loss -> loss
I0428 20:17:33.246798   893 layer_factory.hpp:77] Creating layer loss
I0428 20:17:33.247000   893 net.cpp:124] Setting up loss
I0428 20:17:33.247009   893 net.cpp:131] Top shape: (1)
I0428 20:17:33.247012   893 net.cpp:134]     with loss weight 1
I0428 20:17:33.247030   893 net.cpp:139] Memory required for data: 15090808
I0428 20:17:33.247032   893 net.cpp:200] loss needs backward computation.
I0428 20:17:33.247036   893 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:33.247045   893 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:33.247047   893 net.cpp:200] relu2 needs backward computation.
I0428 20:17:33.247051   893 net.cpp:200] ip2 needs backward computation.
I0428 20:17:33.247058   893 net.cpp:200] relu1 needs backward computation.
I0428 20:17:33.247061   893 net.cpp:200] ip1 needs backward computation.
I0428 20:17:33.247064   893 net.cpp:200] pool1 needs backward computation.
I0428 20:17:33.247067   893 net.cpp:200] conv1 needs backward computation.
I0428 20:17:33.247071   893 net.cpp:200] pool0 needs backward computation.
I0428 20:17:33.247077   893 net.cpp:200] conv0 needs backward computation.
I0428 20:17:33.247081   893 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:33.247084   893 net.cpp:202] mnist does not need backward computation.
I0428 20:17:33.247087   893 net.cpp:244] This network produces output accuracy
I0428 20:17:33.247095   893 net.cpp:244] This network produces output loss
I0428 20:17:33.247104   893 net.cpp:257] Network initialization done.
I0428 20:17:33.247176   893 solver.cpp:56] Solver scaffolding done.
I0428 20:17:33.247530   893 caffe.cpp:248] Starting Optimization
I0428 20:17:33.247536   893 solver.cpp:273] Solving LeNet
I0428 20:17:33.247539   893 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:33.248281   893 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:33.252552   893 blocking_queue.cpp:49] Waiting for data
I0428 20:17:33.365942   902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:33.366849   893 solver.cpp:398]     Test net output #0: accuracy = 0.0983
I0428 20:17:33.366883   893 solver.cpp:398]     Test net output #1: loss = 2.3157 (* 1 = 2.3157 loss)
I0428 20:17:33.371001   893 solver.cpp:219] Iteration 0 (1.84433 iter/s, 0.123432s/100 iters), loss = 2.28699
I0428 20:17:33.371024   893 solver.cpp:238]     Train net output #0: loss = 2.28699 (* 1 = 2.28699 loss)
I0428 20:17:33.371035   893 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:33.484612   893 solver.cpp:219] Iteration 100 (880.478 iter/s, 0.113575s/100 iters), loss = 0.32729
I0428 20:17:33.484655   893 solver.cpp:238]     Train net output #0: loss = 0.32729 (* 1 = 0.32729 loss)
I0428 20:17:33.484663   893 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:33.600759   893 solver.cpp:219] Iteration 200 (861.386 iter/s, 0.116092s/100 iters), loss = 0.191937
I0428 20:17:33.600790   893 solver.cpp:238]     Train net output #0: loss = 0.191937 (* 1 = 0.191937 loss)
I0428 20:17:33.600795   893 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:33.720114   893 solver.cpp:219] Iteration 300 (838.122 iter/s, 0.119314s/100 iters), loss = 0.243083
I0428 20:17:33.720139   893 solver.cpp:238]     Train net output #0: loss = 0.243083 (* 1 = 0.243083 loss)
I0428 20:17:33.720144   893 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:33.834991   893 solver.cpp:219] Iteration 400 (870.758 iter/s, 0.114842s/100 iters), loss = 0.149879
I0428 20:17:33.835014   893 solver.cpp:238]     Train net output #0: loss = 0.149879 (* 1 = 0.149879 loss)
I0428 20:17:33.835036   893 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:33.947031   893 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:34.023859   902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:34.024557   893 solver.cpp:398]     Test net output #0: accuracy = 0.9622
I0428 20:17:34.024575   893 solver.cpp:398]     Test net output #1: loss = 0.117739 (* 1 = 0.117739 loss)
I0428 20:17:34.025758   893 solver.cpp:219] Iteration 500 (524.309 iter/s, 0.190727s/100 iters), loss = 0.0573878
I0428 20:17:34.025820   893 solver.cpp:238]     Train net output #0: loss = 0.0573878 (* 1 = 0.0573878 loss)
I0428 20:17:34.025827   893 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:34.148643   893 solver.cpp:219] Iteration 600 (814.237 iter/s, 0.122814s/100 iters), loss = 0.0890854
I0428 20:17:34.148674   893 solver.cpp:238]     Train net output #0: loss = 0.0890855 (* 1 = 0.0890855 loss)
I0428 20:17:34.148684   893 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:34.278803   893 solver.cpp:219] Iteration 700 (768.517 iter/s, 0.130121s/100 iters), loss = 0.175229
I0428 20:17:34.278827   893 solver.cpp:238]     Train net output #0: loss = 0.175229 (* 1 = 0.175229 loss)
I0428 20:17:34.278834   893 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:34.408596   893 solver.cpp:219] Iteration 800 (770.67 iter/s, 0.129757s/100 iters), loss = 0.20092
I0428 20:17:34.408637   893 solver.cpp:238]     Train net output #0: loss = 0.20092 (* 1 = 0.20092 loss)
I0428 20:17:34.408643   893 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:34.526231   893 solver.cpp:219] Iteration 900 (850.354 iter/s, 0.117598s/100 iters), loss = 0.141849
I0428 20:17:34.526271   893 solver.cpp:238]     Train net output #0: loss = 0.141849 (* 1 = 0.141849 loss)
I0428 20:17:34.526278   893 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:34.563398   901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:34.639878   893 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:34.640931   893 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:34.641736   893 solver.cpp:311] Iteration 1000, loss = 0.190866
I0428 20:17:34.641752   893 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:34.715188   902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:34.715888   893 solver.cpp:398]     Test net output #0: accuracy = 0.9753
I0428 20:17:34.715921   893 solver.cpp:398]     Test net output #1: loss = 0.077263 (* 1 = 0.077263 loss)
I0428 20:17:34.715927   893 solver.cpp:316] Optimization Done.
I0428 20:17:34.715930   893 caffe.cpp:259] Optimization Done.
