I0428 20:02:39.219532 29989 caffe.cpp:218] Using GPUs 0
I0428 20:02:39.250382 29989 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:39.744788 29989 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test934.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:39.745333 29989 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test934.prototxt
I0428 20:02:39.745781 29989 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:39.745805 29989 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:39.745918 29989 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:39.746024 29989 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:39.746160 29989 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:39.746194 29989 net.cpp:86] Creating Layer mnist
I0428 20:02:39.746206 29989 net.cpp:382] mnist -> data
I0428 20:02:39.746237 29989 net.cpp:382] mnist -> label
I0428 20:02:39.747501 29989 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:39.749989 29989 net.cpp:124] Setting up mnist
I0428 20:02:39.750010 29989 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:39.750020 29989 net.cpp:131] Top shape: 64 (64)
I0428 20:02:39.750026 29989 net.cpp:139] Memory required for data: 200960
I0428 20:02:39.750038 29989 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:39.750061 29989 net.cpp:86] Creating Layer conv0
I0428 20:02:39.750087 29989 net.cpp:408] conv0 <- data
I0428 20:02:39.750105 29989 net.cpp:382] conv0 -> conv0
I0428 20:02:40.041455 29989 net.cpp:124] Setting up conv0
I0428 20:02:40.041487 29989 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:40.041496 29989 net.cpp:139] Memory required for data: 1675520
I0428 20:02:40.041519 29989 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:40.041539 29989 net.cpp:86] Creating Layer pool0
I0428 20:02:40.041548 29989 net.cpp:408] pool0 <- conv0
I0428 20:02:40.041559 29989 net.cpp:382] pool0 -> pool0
I0428 20:02:40.041632 29989 net.cpp:124] Setting up pool0
I0428 20:02:40.041643 29989 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:40.041651 29989 net.cpp:139] Memory required for data: 2044160
I0428 20:02:40.041657 29989 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:40.041676 29989 net.cpp:86] Creating Layer conv1
I0428 20:02:40.041684 29989 net.cpp:408] conv1 <- pool0
I0428 20:02:40.041695 29989 net.cpp:382] conv1 -> conv1
I0428 20:02:40.044929 29989 net.cpp:124] Setting up conv1
I0428 20:02:40.044950 29989 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:40.044957 29989 net.cpp:139] Memory required for data: 2863360
I0428 20:02:40.044975 29989 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:40.044988 29989 net.cpp:86] Creating Layer pool1
I0428 20:02:40.044996 29989 net.cpp:408] pool1 <- conv1
I0428 20:02:40.045006 29989 net.cpp:382] pool1 -> pool1
I0428 20:02:40.045069 29989 net.cpp:124] Setting up pool1
I0428 20:02:40.045081 29989 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:40.045087 29989 net.cpp:139] Memory required for data: 3068160
I0428 20:02:40.045094 29989 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:40.045106 29989 net.cpp:86] Creating Layer ip1
I0428 20:02:40.045114 29989 net.cpp:408] ip1 <- pool1
I0428 20:02:40.045125 29989 net.cpp:382] ip1 -> ip1
I0428 20:02:40.045526 29989 net.cpp:124] Setting up ip1
I0428 20:02:40.045536 29989 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:40.045543 29989 net.cpp:139] Memory required for data: 3080960
I0428 20:02:40.045557 29989 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:40.045572 29989 net.cpp:86] Creating Layer relu1
I0428 20:02:40.045580 29989 net.cpp:408] relu1 <- ip1
I0428 20:02:40.045590 29989 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:40.045795 29989 net.cpp:124] Setting up relu1
I0428 20:02:40.045809 29989 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:40.045814 29989 net.cpp:139] Memory required for data: 3093760
I0428 20:02:40.045820 29989 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:40.045832 29989 net.cpp:86] Creating Layer ip2
I0428 20:02:40.045840 29989 net.cpp:408] ip2 <- ip1
I0428 20:02:40.045850 29989 net.cpp:382] ip2 -> ip2
I0428 20:02:40.046973 29989 net.cpp:124] Setting up ip2
I0428 20:02:40.046991 29989 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:40.046998 29989 net.cpp:139] Memory required for data: 3106560
I0428 20:02:40.047010 29989 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:40.047024 29989 net.cpp:86] Creating Layer relu2
I0428 20:02:40.047030 29989 net.cpp:408] relu2 <- ip2
I0428 20:02:40.047039 29989 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:40.047899 29989 net.cpp:124] Setting up relu2
I0428 20:02:40.047916 29989 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:40.047924 29989 net.cpp:139] Memory required for data: 3119360
I0428 20:02:40.047930 29989 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:40.047943 29989 net.cpp:86] Creating Layer ip3
I0428 20:02:40.047950 29989 net.cpp:408] ip3 <- ip2
I0428 20:02:40.047961 29989 net.cpp:382] ip3 -> ip3
I0428 20:02:40.048094 29989 net.cpp:124] Setting up ip3
I0428 20:02:40.048110 29989 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:40.048116 29989 net.cpp:139] Memory required for data: 3121920
I0428 20:02:40.048131 29989 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:40.048143 29989 net.cpp:86] Creating Layer relu3
I0428 20:02:40.048151 29989 net.cpp:408] relu3 <- ip3
I0428 20:02:40.048159 29989 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:40.048362 29989 net.cpp:124] Setting up relu3
I0428 20:02:40.048374 29989 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:40.048382 29989 net.cpp:139] Memory required for data: 3124480
I0428 20:02:40.048388 29989 layer_factory.hpp:77] Creating layer loss
I0428 20:02:40.048398 29989 net.cpp:86] Creating Layer loss
I0428 20:02:40.048405 29989 net.cpp:408] loss <- ip3
I0428 20:02:40.048413 29989 net.cpp:408] loss <- label
I0428 20:02:40.048424 29989 net.cpp:382] loss -> loss
I0428 20:02:40.048449 29989 layer_factory.hpp:77] Creating layer loss
I0428 20:02:40.048725 29989 net.cpp:124] Setting up loss
I0428 20:02:40.048738 29989 net.cpp:131] Top shape: (1)
I0428 20:02:40.048745 29989 net.cpp:134]     with loss weight 1
I0428 20:02:40.048768 29989 net.cpp:139] Memory required for data: 3124484
I0428 20:02:40.048776 29989 net.cpp:200] loss needs backward computation.
I0428 20:02:40.048784 29989 net.cpp:200] relu3 needs backward computation.
I0428 20:02:40.048790 29989 net.cpp:200] ip3 needs backward computation.
I0428 20:02:40.048797 29989 net.cpp:200] relu2 needs backward computation.
I0428 20:02:40.048804 29989 net.cpp:200] ip2 needs backward computation.
I0428 20:02:40.048820 29989 net.cpp:200] relu1 needs backward computation.
I0428 20:02:40.048826 29989 net.cpp:200] ip1 needs backward computation.
I0428 20:02:40.048832 29989 net.cpp:200] pool1 needs backward computation.
I0428 20:02:40.048840 29989 net.cpp:200] conv1 needs backward computation.
I0428 20:02:40.048846 29989 net.cpp:200] pool0 needs backward computation.
I0428 20:02:40.048852 29989 net.cpp:200] conv0 needs backward computation.
I0428 20:02:40.048859 29989 net.cpp:202] mnist does not need backward computation.
I0428 20:02:40.048872 29989 net.cpp:244] This network produces output loss
I0428 20:02:40.048899 29989 net.cpp:257] Network initialization done.
I0428 20:02:40.049305 29989 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test934.prototxt
I0428 20:02:40.049347 29989 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:40.049466 29989 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:40.049604 29989 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:40.049669 29989 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:40.049695 29989 net.cpp:86] Creating Layer mnist
I0428 20:02:40.049705 29989 net.cpp:382] mnist -> data
I0428 20:02:40.049721 29989 net.cpp:382] mnist -> label
I0428 20:02:40.049865 29989 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:40.052258 29989 net.cpp:124] Setting up mnist
I0428 20:02:40.052276 29989 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:40.052287 29989 net.cpp:131] Top shape: 100 (100)
I0428 20:02:40.052294 29989 net.cpp:139] Memory required for data: 314000
I0428 20:02:40.052301 29989 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:40.052314 29989 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:40.052321 29989 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:40.052331 29989 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:40.052345 29989 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:40.052433 29989 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:40.052444 29989 net.cpp:131] Top shape: 100 (100)
I0428 20:02:40.052453 29989 net.cpp:131] Top shape: 100 (100)
I0428 20:02:40.052459 29989 net.cpp:139] Memory required for data: 314800
I0428 20:02:40.052465 29989 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:40.052481 29989 net.cpp:86] Creating Layer conv0
I0428 20:02:40.052490 29989 net.cpp:408] conv0 <- data
I0428 20:02:40.052501 29989 net.cpp:382] conv0 -> conv0
I0428 20:02:40.054203 29989 net.cpp:124] Setting up conv0
I0428 20:02:40.054224 29989 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:40.054230 29989 net.cpp:139] Memory required for data: 2618800
I0428 20:02:40.054247 29989 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:40.054260 29989 net.cpp:86] Creating Layer pool0
I0428 20:02:40.054270 29989 net.cpp:408] pool0 <- conv0
I0428 20:02:40.054280 29989 net.cpp:382] pool0 -> pool0
I0428 20:02:40.054332 29989 net.cpp:124] Setting up pool0
I0428 20:02:40.054343 29989 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:40.054349 29989 net.cpp:139] Memory required for data: 3194800
I0428 20:02:40.054356 29989 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:40.054374 29989 net.cpp:86] Creating Layer conv1
I0428 20:02:40.054383 29989 net.cpp:408] conv1 <- pool0
I0428 20:02:40.054394 29989 net.cpp:382] conv1 -> conv1
I0428 20:02:40.056248 29989 net.cpp:124] Setting up conv1
I0428 20:02:40.056268 29989 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:40.056277 29989 net.cpp:139] Memory required for data: 4474800
I0428 20:02:40.056293 29989 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:40.056310 29989 net.cpp:86] Creating Layer pool1
I0428 20:02:40.056319 29989 net.cpp:408] pool1 <- conv1
I0428 20:02:40.056330 29989 net.cpp:382] pool1 -> pool1
I0428 20:02:40.056382 29989 net.cpp:124] Setting up pool1
I0428 20:02:40.056392 29989 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:40.056399 29989 net.cpp:139] Memory required for data: 4794800
I0428 20:02:40.056406 29989 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:40.056417 29989 net.cpp:86] Creating Layer ip1
I0428 20:02:40.056424 29989 net.cpp:408] ip1 <- pool1
I0428 20:02:40.056435 29989 net.cpp:382] ip1 -> ip1
I0428 20:02:40.056857 29989 net.cpp:124] Setting up ip1
I0428 20:02:40.056871 29989 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:40.056895 29989 net.cpp:139] Memory required for data: 4814800
I0428 20:02:40.056911 29989 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:40.056922 29989 net.cpp:86] Creating Layer relu1
I0428 20:02:40.056931 29989 net.cpp:408] relu1 <- ip1
I0428 20:02:40.056941 29989 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:40.057200 29989 net.cpp:124] Setting up relu1
I0428 20:02:40.057214 29989 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:40.057219 29989 net.cpp:139] Memory required for data: 4834800
I0428 20:02:40.057226 29989 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:40.057242 29989 net.cpp:86] Creating Layer ip2
I0428 20:02:40.057250 29989 net.cpp:408] ip2 <- ip1
I0428 20:02:40.057260 29989 net.cpp:382] ip2 -> ip2
I0428 20:02:40.057420 29989 net.cpp:124] Setting up ip2
I0428 20:02:40.057431 29989 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:40.057437 29989 net.cpp:139] Memory required for data: 4854800
I0428 20:02:40.057448 29989 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:40.057462 29989 net.cpp:86] Creating Layer relu2
I0428 20:02:40.057471 29989 net.cpp:408] relu2 <- ip2
I0428 20:02:40.057479 29989 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:40.057679 29989 net.cpp:124] Setting up relu2
I0428 20:02:40.057692 29989 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:40.057698 29989 net.cpp:139] Memory required for data: 4874800
I0428 20:02:40.057705 29989 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:40.057719 29989 net.cpp:86] Creating Layer ip3
I0428 20:02:40.057725 29989 net.cpp:408] ip3 <- ip2
I0428 20:02:40.057736 29989 net.cpp:382] ip3 -> ip3
I0428 20:02:40.057873 29989 net.cpp:124] Setting up ip3
I0428 20:02:40.057883 29989 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:40.057889 29989 net.cpp:139] Memory required for data: 4878800
I0428 20:02:40.057906 29989 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:40.057919 29989 net.cpp:86] Creating Layer relu3
I0428 20:02:40.057927 29989 net.cpp:408] relu3 <- ip3
I0428 20:02:40.057937 29989 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:40.058900 29989 net.cpp:124] Setting up relu3
I0428 20:02:40.058917 29989 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:40.058924 29989 net.cpp:139] Memory required for data: 4882800
I0428 20:02:40.058931 29989 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:40.058941 29989 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:40.058948 29989 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:40.058959 29989 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:40.058972 29989 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:40.059028 29989 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:40.059038 29989 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:40.059046 29989 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:40.059052 29989 net.cpp:139] Memory required for data: 4890800
I0428 20:02:40.059059 29989 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:40.059072 29989 net.cpp:86] Creating Layer accuracy
I0428 20:02:40.059083 29989 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:40.059092 29989 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:40.059101 29989 net.cpp:382] accuracy -> accuracy
I0428 20:02:40.059116 29989 net.cpp:124] Setting up accuracy
I0428 20:02:40.059128 29989 net.cpp:131] Top shape: (1)
I0428 20:02:40.059134 29989 net.cpp:139] Memory required for data: 4890804
I0428 20:02:40.059140 29989 layer_factory.hpp:77] Creating layer loss
I0428 20:02:40.059151 29989 net.cpp:86] Creating Layer loss
I0428 20:02:40.059159 29989 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:40.059167 29989 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:40.059175 29989 net.cpp:382] loss -> loss
I0428 20:02:40.059187 29989 layer_factory.hpp:77] Creating layer loss
I0428 20:02:40.059485 29989 net.cpp:124] Setting up loss
I0428 20:02:40.059499 29989 net.cpp:131] Top shape: (1)
I0428 20:02:40.059505 29989 net.cpp:134]     with loss weight 1
I0428 20:02:40.059530 29989 net.cpp:139] Memory required for data: 4890808
I0428 20:02:40.059537 29989 net.cpp:200] loss needs backward computation.
I0428 20:02:40.059545 29989 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:40.059552 29989 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:40.059559 29989 net.cpp:200] relu3 needs backward computation.
I0428 20:02:40.059566 29989 net.cpp:200] ip3 needs backward computation.
I0428 20:02:40.059571 29989 net.cpp:200] relu2 needs backward computation.
I0428 20:02:40.059581 29989 net.cpp:200] ip2 needs backward computation.
I0428 20:02:40.059587 29989 net.cpp:200] relu1 needs backward computation.
I0428 20:02:40.059597 29989 net.cpp:200] ip1 needs backward computation.
I0428 20:02:40.059603 29989 net.cpp:200] pool1 needs backward computation.
I0428 20:02:40.059609 29989 net.cpp:200] conv1 needs backward computation.
I0428 20:02:40.059617 29989 net.cpp:200] pool0 needs backward computation.
I0428 20:02:40.059623 29989 net.cpp:200] conv0 needs backward computation.
I0428 20:02:40.059630 29989 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:40.059638 29989 net.cpp:202] mnist does not need backward computation.
I0428 20:02:40.059646 29989 net.cpp:244] This network produces output accuracy
I0428 20:02:40.059654 29989 net.cpp:244] This network produces output loss
I0428 20:02:40.059674 29989 net.cpp:257] Network initialization done.
I0428 20:02:40.059733 29989 solver.cpp:56] Solver scaffolding done.
I0428 20:02:40.060196 29989 caffe.cpp:248] Starting Optimization
I0428 20:02:40.060205 29989 solver.cpp:273] Solving LeNet
I0428 20:02:40.060211 29989 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:40.061115 29989 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:40.066311 29989 blocking_queue.cpp:49] Waiting for data
I0428 20:02:40.135437 29996 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:40.136004 29989 solver.cpp:398]     Test net output #0: accuracy = 0.0832
I0428 20:02:40.136032 29989 solver.cpp:398]     Test net output #1: loss = 2.31328 (* 1 = 2.31328 loss)
I0428 20:02:40.139513 29989 solver.cpp:219] Iteration 0 (0 iter/s, 0.0792637s/100 iters), loss = 2.30555
I0428 20:02:40.139549 29989 solver.cpp:238]     Train net output #0: loss = 2.30555 (* 1 = 2.30555 loss)
I0428 20:02:40.139574 29989 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:40.248553 29989 solver.cpp:219] Iteration 100 (917.486 iter/s, 0.108994s/100 iters), loss = 1.13226
I0428 20:02:40.248585 29989 solver.cpp:238]     Train net output #0: loss = 1.13226 (* 1 = 1.13226 loss)
I0428 20:02:40.248612 29989 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:40.356129 29989 solver.cpp:219] Iteration 200 (929.917 iter/s, 0.107536s/100 iters), loss = 0.663906
I0428 20:02:40.356156 29989 solver.cpp:238]     Train net output #0: loss = 0.663906 (* 1 = 0.663906 loss)
I0428 20:02:40.356181 29989 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:40.464278 29989 solver.cpp:219] Iteration 300 (924.95 iter/s, 0.108114s/100 iters), loss = 0.922798
I0428 20:02:40.464306 29989 solver.cpp:238]     Train net output #0: loss = 0.922798 (* 1 = 0.922798 loss)
I0428 20:02:40.464331 29989 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:40.570192 29989 solver.cpp:219] Iteration 400 (944.48 iter/s, 0.105878s/100 iters), loss = 0.515924
I0428 20:02:40.570222 29989 solver.cpp:238]     Train net output #0: loss = 0.515924 (* 1 = 0.515924 loss)
I0428 20:02:40.570247 29989 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:40.676167 29989 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:40.723953 29996 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:40.724478 29989 solver.cpp:398]     Test net output #0: accuracy = 0.6671
I0428 20:02:40.724514 29989 solver.cpp:398]     Test net output #1: loss = 0.812409 (* 1 = 0.812409 loss)
I0428 20:02:40.725574 29989 solver.cpp:219] Iteration 500 (643.75 iter/s, 0.15534s/100 iters), loss = 0.73184
I0428 20:02:40.725622 29989 solver.cpp:238]     Train net output #0: loss = 0.73184 (* 1 = 0.73184 loss)
I0428 20:02:40.725646 29989 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:40.835341 29989 solver.cpp:219] Iteration 600 (911.464 iter/s, 0.109714s/100 iters), loss = 1.02261
I0428 20:02:40.835371 29989 solver.cpp:238]     Train net output #0: loss = 1.02261 (* 1 = 1.02261 loss)
I0428 20:02:40.835391 29989 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:40.945394 29989 solver.cpp:219] Iteration 700 (908.963 iter/s, 0.110016s/100 iters), loss = 0.783636
I0428 20:02:40.945427 29989 solver.cpp:238]     Train net output #0: loss = 0.783636 (* 1 = 0.783636 loss)
I0428 20:02:40.945438 29989 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:41.055059 29989 solver.cpp:219] Iteration 800 (912.206 iter/s, 0.109624s/100 iters), loss = 0.866056
I0428 20:02:41.055088 29989 solver.cpp:238]     Train net output #0: loss = 0.866056 (* 1 = 0.866056 loss)
I0428 20:02:41.055115 29989 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:41.164569 29989 solver.cpp:219] Iteration 900 (913.469 iter/s, 0.109473s/100 iters), loss = 0.724033
I0428 20:02:41.164597 29989 solver.cpp:238]     Train net output #0: loss = 0.724033 (* 1 = 0.724033 loss)
I0428 20:02:41.164623 29989 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:41.200958 29995 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:41.272238 29989 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:41.273968 29989 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:41.274811 29989 solver.cpp:311] Iteration 1000, loss = 0.630438
I0428 20:02:41.274827 29989 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:41.323148 29996 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:41.323675 29989 solver.cpp:398]     Test net output #0: accuracy = 0.785
I0428 20:02:41.323696 29989 solver.cpp:398]     Test net output #1: loss = 0.529391 (* 1 = 0.529391 loss)
I0428 20:02:41.323704 29989 solver.cpp:316] Optimization Done.
I0428 20:02:41.323710 29989 caffe.cpp:259] Optimization Done.
