I0428 20:02:06.045503 29873 caffe.cpp:218] Using GPUs 0
I0428 20:02:06.075608 29873 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:06.520284 29873 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test920.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:06.520411 29873 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test920.prototxt
I0428 20:02:06.520745 29873 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:06.520761 29873 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:06.520861 29873 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:06.520941 29873 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:06.521026 29873 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:06.521046 29873 net.cpp:86] Creating Layer mnist
I0428 20:02:06.521052 29873 net.cpp:382] mnist -> data
I0428 20:02:06.521071 29873 net.cpp:382] mnist -> label
I0428 20:02:06.522008 29873 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:06.524155 29873 net.cpp:124] Setting up mnist
I0428 20:02:06.524185 29873 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:06.524190 29873 net.cpp:131] Top shape: 64 (64)
I0428 20:02:06.524194 29873 net.cpp:139] Memory required for data: 200960
I0428 20:02:06.524214 29873 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:06.524242 29873 net.cpp:86] Creating Layer conv0
I0428 20:02:06.524261 29873 net.cpp:408] conv0 <- data
I0428 20:02:06.524271 29873 net.cpp:382] conv0 -> conv0
I0428 20:02:06.756616 29873 net.cpp:124] Setting up conv0
I0428 20:02:06.756642 29873 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:06.756646 29873 net.cpp:139] Memory required for data: 1675520
I0428 20:02:06.756660 29873 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:06.756671 29873 net.cpp:86] Creating Layer pool0
I0428 20:02:06.756675 29873 net.cpp:408] pool0 <- conv0
I0428 20:02:06.756680 29873 net.cpp:382] pool0 -> pool0
I0428 20:02:06.756738 29873 net.cpp:124] Setting up pool0
I0428 20:02:06.756743 29873 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:06.756747 29873 net.cpp:139] Memory required for data: 2044160
I0428 20:02:06.756749 29873 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:06.756759 29873 net.cpp:86] Creating Layer conv1
I0428 20:02:06.756762 29873 net.cpp:408] conv1 <- pool0
I0428 20:02:06.756767 29873 net.cpp:382] conv1 -> conv1
I0428 20:02:06.759706 29873 net.cpp:124] Setting up conv1
I0428 20:02:06.759735 29873 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:06.759738 29873 net.cpp:139] Memory required for data: 2863360
I0428 20:02:06.759747 29873 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:06.759754 29873 net.cpp:86] Creating Layer pool1
I0428 20:02:06.759773 29873 net.cpp:408] pool1 <- conv1
I0428 20:02:06.759776 29873 net.cpp:382] pool1 -> pool1
I0428 20:02:06.759827 29873 net.cpp:124] Setting up pool1
I0428 20:02:06.759832 29873 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:06.759835 29873 net.cpp:139] Memory required for data: 3068160
I0428 20:02:06.759838 29873 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:06.759845 29873 net.cpp:86] Creating Layer ip1
I0428 20:02:06.759847 29873 net.cpp:408] ip1 <- pool1
I0428 20:02:06.759852 29873 net.cpp:382] ip1 -> ip1
I0428 20:02:06.760048 29873 net.cpp:124] Setting up ip1
I0428 20:02:06.760056 29873 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:06.760059 29873 net.cpp:139] Memory required for data: 3074560
I0428 20:02:06.760066 29873 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:06.760073 29873 net.cpp:86] Creating Layer relu1
I0428 20:02:06.760076 29873 net.cpp:408] relu1 <- ip1
I0428 20:02:06.760080 29873 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:06.760264 29873 net.cpp:124] Setting up relu1
I0428 20:02:06.760272 29873 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:06.760275 29873 net.cpp:139] Memory required for data: 3080960
I0428 20:02:06.760278 29873 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:06.760284 29873 net.cpp:86] Creating Layer ip2
I0428 20:02:06.760288 29873 net.cpp:408] ip2 <- ip1
I0428 20:02:06.760291 29873 net.cpp:382] ip2 -> ip2
I0428 20:02:06.760381 29873 net.cpp:124] Setting up ip2
I0428 20:02:06.760388 29873 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:06.760391 29873 net.cpp:139] Memory required for data: 3083520
I0428 20:02:06.760396 29873 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:06.760401 29873 net.cpp:86] Creating Layer relu2
I0428 20:02:06.760404 29873 net.cpp:408] relu2 <- ip2
I0428 20:02:06.760408 29873 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:06.761247 29873 net.cpp:124] Setting up relu2
I0428 20:02:06.761260 29873 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:06.761278 29873 net.cpp:139] Memory required for data: 3086080
I0428 20:02:06.761282 29873 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:06.761289 29873 net.cpp:86] Creating Layer ip3
I0428 20:02:06.761292 29873 net.cpp:408] ip3 <- ip2
I0428 20:02:06.761298 29873 net.cpp:382] ip3 -> ip3
I0428 20:02:06.761396 29873 net.cpp:124] Setting up ip3
I0428 20:02:06.761404 29873 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:06.761407 29873 net.cpp:139] Memory required for data: 3088640
I0428 20:02:06.761415 29873 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:06.761420 29873 net.cpp:86] Creating Layer relu3
I0428 20:02:06.761423 29873 net.cpp:408] relu3 <- ip3
I0428 20:02:06.761427 29873 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:06.761598 29873 net.cpp:124] Setting up relu3
I0428 20:02:06.761606 29873 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:06.761625 29873 net.cpp:139] Memory required for data: 3091200
I0428 20:02:06.761627 29873 layer_factory.hpp:77] Creating layer loss
I0428 20:02:06.761639 29873 net.cpp:86] Creating Layer loss
I0428 20:02:06.761657 29873 net.cpp:408] loss <- ip3
I0428 20:02:06.761662 29873 net.cpp:408] loss <- label
I0428 20:02:06.761667 29873 net.cpp:382] loss -> loss
I0428 20:02:06.761678 29873 layer_factory.hpp:77] Creating layer loss
I0428 20:02:06.761883 29873 net.cpp:124] Setting up loss
I0428 20:02:06.761893 29873 net.cpp:131] Top shape: (1)
I0428 20:02:06.761895 29873 net.cpp:134]     with loss weight 1
I0428 20:02:06.761909 29873 net.cpp:139] Memory required for data: 3091204
I0428 20:02:06.761912 29873 net.cpp:200] loss needs backward computation.
I0428 20:02:06.761915 29873 net.cpp:200] relu3 needs backward computation.
I0428 20:02:06.761919 29873 net.cpp:200] ip3 needs backward computation.
I0428 20:02:06.761921 29873 net.cpp:200] relu2 needs backward computation.
I0428 20:02:06.761924 29873 net.cpp:200] ip2 needs backward computation.
I0428 20:02:06.761929 29873 net.cpp:200] relu1 needs backward computation.
I0428 20:02:06.761930 29873 net.cpp:200] ip1 needs backward computation.
I0428 20:02:06.761934 29873 net.cpp:200] pool1 needs backward computation.
I0428 20:02:06.761936 29873 net.cpp:200] conv1 needs backward computation.
I0428 20:02:06.761940 29873 net.cpp:200] pool0 needs backward computation.
I0428 20:02:06.761942 29873 net.cpp:200] conv0 needs backward computation.
I0428 20:02:06.761945 29873 net.cpp:202] mnist does not need backward computation.
I0428 20:02:06.761948 29873 net.cpp:244] This network produces output loss
I0428 20:02:06.761957 29873 net.cpp:257] Network initialization done.
I0428 20:02:06.762269 29873 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test920.prototxt
I0428 20:02:06.762295 29873 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:06.762408 29873 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:06.762485 29873 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:06.762527 29873 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:06.762538 29873 net.cpp:86] Creating Layer mnist
I0428 20:02:06.762543 29873 net.cpp:382] mnist -> data
I0428 20:02:06.762550 29873 net.cpp:382] mnist -> label
I0428 20:02:06.762647 29873 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:06.764904 29873 net.cpp:124] Setting up mnist
I0428 20:02:06.764932 29873 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:06.764937 29873 net.cpp:131] Top shape: 100 (100)
I0428 20:02:06.764941 29873 net.cpp:139] Memory required for data: 314000
I0428 20:02:06.764945 29873 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:06.764951 29873 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:06.764955 29873 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:06.764960 29873 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:06.764966 29873 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:06.765002 29873 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:06.765007 29873 net.cpp:131] Top shape: 100 (100)
I0428 20:02:06.765010 29873 net.cpp:131] Top shape: 100 (100)
I0428 20:02:06.765013 29873 net.cpp:139] Memory required for data: 314800
I0428 20:02:06.765017 29873 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:06.765024 29873 net.cpp:86] Creating Layer conv0
I0428 20:02:06.765027 29873 net.cpp:408] conv0 <- data
I0428 20:02:06.765033 29873 net.cpp:382] conv0 -> conv0
I0428 20:02:06.766613 29873 net.cpp:124] Setting up conv0
I0428 20:02:06.766626 29873 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:06.766629 29873 net.cpp:139] Memory required for data: 2618800
I0428 20:02:06.766639 29873 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:06.766661 29873 net.cpp:86] Creating Layer pool0
I0428 20:02:06.766664 29873 net.cpp:408] pool0 <- conv0
I0428 20:02:06.766685 29873 net.cpp:382] pool0 -> pool0
I0428 20:02:06.766733 29873 net.cpp:124] Setting up pool0
I0428 20:02:06.766738 29873 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:06.766741 29873 net.cpp:139] Memory required for data: 3194800
I0428 20:02:06.766743 29873 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:06.766753 29873 net.cpp:86] Creating Layer conv1
I0428 20:02:06.766757 29873 net.cpp:408] conv1 <- pool0
I0428 20:02:06.766762 29873 net.cpp:382] conv1 -> conv1
I0428 20:02:06.768406 29873 net.cpp:124] Setting up conv1
I0428 20:02:06.768419 29873 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:06.768437 29873 net.cpp:139] Memory required for data: 4474800
I0428 20:02:06.768445 29873 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:06.768451 29873 net.cpp:86] Creating Layer pool1
I0428 20:02:06.768455 29873 net.cpp:408] pool1 <- conv1
I0428 20:02:06.768462 29873 net.cpp:382] pool1 -> pool1
I0428 20:02:06.768496 29873 net.cpp:124] Setting up pool1
I0428 20:02:06.768502 29873 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:06.768504 29873 net.cpp:139] Memory required for data: 4794800
I0428 20:02:06.768507 29873 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:06.768514 29873 net.cpp:86] Creating Layer ip1
I0428 20:02:06.768523 29873 net.cpp:408] ip1 <- pool1
I0428 20:02:06.768529 29873 net.cpp:382] ip1 -> ip1
I0428 20:02:06.768757 29873 net.cpp:124] Setting up ip1
I0428 20:02:06.768765 29873 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:06.768779 29873 net.cpp:139] Memory required for data: 4804800
I0428 20:02:06.768802 29873 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:06.768807 29873 net.cpp:86] Creating Layer relu1
I0428 20:02:06.768833 29873 net.cpp:408] relu1 <- ip1
I0428 20:02:06.768838 29873 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:06.769042 29873 net.cpp:124] Setting up relu1
I0428 20:02:06.769050 29873 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:06.769053 29873 net.cpp:139] Memory required for data: 4814800
I0428 20:02:06.769057 29873 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:06.769067 29873 net.cpp:86] Creating Layer ip2
I0428 20:02:06.769070 29873 net.cpp:408] ip2 <- ip1
I0428 20:02:06.769084 29873 net.cpp:382] ip2 -> ip2
I0428 20:02:06.769249 29873 net.cpp:124] Setting up ip2
I0428 20:02:06.769258 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.769260 29873 net.cpp:139] Memory required for data: 4818800
I0428 20:02:06.769265 29873 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:06.769269 29873 net.cpp:86] Creating Layer relu2
I0428 20:02:06.769279 29873 net.cpp:408] relu2 <- ip2
I0428 20:02:06.769284 29873 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:06.769461 29873 net.cpp:124] Setting up relu2
I0428 20:02:06.769484 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.769487 29873 net.cpp:139] Memory required for data: 4822800
I0428 20:02:06.769490 29873 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:06.769496 29873 net.cpp:86] Creating Layer ip3
I0428 20:02:06.769500 29873 net.cpp:408] ip3 <- ip2
I0428 20:02:06.769505 29873 net.cpp:382] ip3 -> ip3
I0428 20:02:06.769635 29873 net.cpp:124] Setting up ip3
I0428 20:02:06.769642 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.769645 29873 net.cpp:139] Memory required for data: 4826800
I0428 20:02:06.769654 29873 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:06.769659 29873 net.cpp:86] Creating Layer relu3
I0428 20:02:06.769662 29873 net.cpp:408] relu3 <- ip3
I0428 20:02:06.769666 29873 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:06.770536 29873 net.cpp:124] Setting up relu3
I0428 20:02:06.770550 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.770552 29873 net.cpp:139] Memory required for data: 4830800
I0428 20:02:06.770555 29873 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:06.770560 29873 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:06.770570 29873 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:06.770575 29873 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:06.770579 29873 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:06.770617 29873 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:06.770627 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.770632 29873 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:06.770633 29873 net.cpp:139] Memory required for data: 4838800
I0428 20:02:06.770642 29873 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:06.770647 29873 net.cpp:86] Creating Layer accuracy
I0428 20:02:06.770649 29873 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:06.770653 29873 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:06.770659 29873 net.cpp:382] accuracy -> accuracy
I0428 20:02:06.770671 29873 net.cpp:124] Setting up accuracy
I0428 20:02:06.770675 29873 net.cpp:131] Top shape: (1)
I0428 20:02:06.770678 29873 net.cpp:139] Memory required for data: 4838804
I0428 20:02:06.770680 29873 layer_factory.hpp:77] Creating layer loss
I0428 20:02:06.770690 29873 net.cpp:86] Creating Layer loss
I0428 20:02:06.770694 29873 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:06.770702 29873 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:06.770706 29873 net.cpp:382] loss -> loss
I0428 20:02:06.770711 29873 layer_factory.hpp:77] Creating layer loss
I0428 20:02:06.770987 29873 net.cpp:124] Setting up loss
I0428 20:02:06.770997 29873 net.cpp:131] Top shape: (1)
I0428 20:02:06.770999 29873 net.cpp:134]     with loss weight 1
I0428 20:02:06.771015 29873 net.cpp:139] Memory required for data: 4838808
I0428 20:02:06.771019 29873 net.cpp:200] loss needs backward computation.
I0428 20:02:06.771023 29873 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:06.771028 29873 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:06.771030 29873 net.cpp:200] relu3 needs backward computation.
I0428 20:02:06.771034 29873 net.cpp:200] ip3 needs backward computation.
I0428 20:02:06.771036 29873 net.cpp:200] relu2 needs backward computation.
I0428 20:02:06.771039 29873 net.cpp:200] ip2 needs backward computation.
I0428 20:02:06.771042 29873 net.cpp:200] relu1 needs backward computation.
I0428 20:02:06.771051 29873 net.cpp:200] ip1 needs backward computation.
I0428 20:02:06.771054 29873 net.cpp:200] pool1 needs backward computation.
I0428 20:02:06.771057 29873 net.cpp:200] conv1 needs backward computation.
I0428 20:02:06.771061 29873 net.cpp:200] pool0 needs backward computation.
I0428 20:02:06.771070 29873 net.cpp:200] conv0 needs backward computation.
I0428 20:02:06.771087 29873 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:06.771091 29873 net.cpp:202] mnist does not need backward computation.
I0428 20:02:06.771109 29873 net.cpp:244] This network produces output accuracy
I0428 20:02:06.771112 29873 net.cpp:244] This network produces output loss
I0428 20:02:06.771129 29873 net.cpp:257] Network initialization done.
I0428 20:02:06.771184 29873 solver.cpp:56] Solver scaffolding done.
I0428 20:02:06.771523 29873 caffe.cpp:248] Starting Optimization
I0428 20:02:06.771529 29873 solver.cpp:273] Solving LeNet
I0428 20:02:06.771531 29873 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:06.771752 29873 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:06.776674 29873 blocking_queue.cpp:49] Waiting for data
I0428 20:02:06.844295 29880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:06.844892 29873 solver.cpp:398]     Test net output #0: accuracy = 0.072
I0428 20:02:06.844911 29873 solver.cpp:398]     Test net output #1: loss = 2.32372 (* 1 = 2.32372 loss)
I0428 20:02:06.848048 29873 solver.cpp:219] Iteration 0 (-1.42842e-30 iter/s, 0.0764856s/100 iters), loss = 2.31095
I0428 20:02:06.848070 29873 solver.cpp:238]     Train net output #0: loss = 2.31095 (* 1 = 2.31095 loss)
I0428 20:02:06.848096 29873 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:06.954450 29873 solver.cpp:219] Iteration 100 (940.151 iter/s, 0.106366s/100 iters), loss = 0.789533
I0428 20:02:06.954475 29873 solver.cpp:238]     Train net output #0: loss = 0.789533 (* 1 = 0.789533 loss)
I0428 20:02:06.954496 29873 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:07.060024 29873 solver.cpp:219] Iteration 200 (947.53 iter/s, 0.105538s/100 iters), loss = 0.435195
I0428 20:02:07.060048 29873 solver.cpp:238]     Train net output #0: loss = 0.435195 (* 1 = 0.435195 loss)
I0428 20:02:07.060055 29873 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:07.166461 29873 solver.cpp:219] Iteration 300 (939.825 iter/s, 0.106403s/100 iters), loss = 0.299286
I0428 20:02:07.166486 29873 solver.cpp:238]     Train net output #0: loss = 0.299286 (* 1 = 0.299286 loss)
I0428 20:02:07.166508 29873 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:07.271512 29873 solver.cpp:219] Iteration 400 (952.252 iter/s, 0.105014s/100 iters), loss = 0.176356
I0428 20:02:07.271535 29873 solver.cpp:238]     Train net output #0: loss = 0.176356 (* 1 = 0.176356 loss)
I0428 20:02:07.271541 29873 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:07.374305 29873 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:07.428344 29880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:07.428866 29873 solver.cpp:398]     Test net output #0: accuracy = 0.9518
I0428 20:02:07.428886 29873 solver.cpp:398]     Test net output #1: loss = 0.158145 (* 1 = 0.158145 loss)
I0428 20:02:07.429986 29873 solver.cpp:219] Iteration 500 (631.169 iter/s, 0.158436s/100 iters), loss = 0.215537
I0428 20:02:07.430032 29873 solver.cpp:238]     Train net output #0: loss = 0.215537 (* 1 = 0.215537 loss)
I0428 20:02:07.430045 29873 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:07.542922 29873 solver.cpp:219] Iteration 600 (885.894 iter/s, 0.11288s/100 iters), loss = 0.0844492
I0428 20:02:07.542960 29873 solver.cpp:238]     Train net output #0: loss = 0.0844492 (* 1 = 0.0844492 loss)
I0428 20:02:07.542985 29873 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:07.655581 29873 solver.cpp:219] Iteration 700 (887.905 iter/s, 0.112625s/100 iters), loss = 0.146686
I0428 20:02:07.655622 29873 solver.cpp:238]     Train net output #0: loss = 0.146686 (* 1 = 0.146686 loss)
I0428 20:02:07.655627 29873 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:07.765940 29873 solver.cpp:219] Iteration 800 (906.422 iter/s, 0.110324s/100 iters), loss = 0.306759
I0428 20:02:07.765996 29873 solver.cpp:238]     Train net output #0: loss = 0.306759 (* 1 = 0.306759 loss)
I0428 20:02:07.766002 29873 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:07.871775 29873 solver.cpp:219] Iteration 900 (945.466 iter/s, 0.105768s/100 iters), loss = 0.198014
I0428 20:02:07.871810 29873 solver.cpp:238]     Train net output #0: loss = 0.198014 (* 1 = 0.198014 loss)
I0428 20:02:07.871816 29873 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:07.906747 29879 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:07.975713 29873 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:07.977205 29873 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:07.977903 29873 solver.cpp:311] Iteration 1000, loss = 0.140261
I0428 20:02:07.977918 29873 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:08.054083 29880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:08.054612 29873 solver.cpp:398]     Test net output #0: accuracy = 0.9683
I0428 20:02:08.054648 29873 solver.cpp:398]     Test net output #1: loss = 0.0976806 (* 1 = 0.0976806 loss)
I0428 20:02:08.054653 29873 solver.cpp:316] Optimization Done.
I0428 20:02:08.054656 29873 caffe.cpp:259] Optimization Done.
