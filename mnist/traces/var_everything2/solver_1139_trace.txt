I0428 20:10:36.919834 31885 caffe.cpp:218] Using GPUs 0
I0428 20:10:36.957741 31885 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:37.410148 31885 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1139.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:37.410298 31885 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1139.prototxt
I0428 20:10:37.410665 31885 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:37.410696 31885 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:37.410768 31885 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:37.410831 31885 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:37.410926 31885 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:37.410945 31885 net.cpp:86] Creating Layer mnist
I0428 20:10:37.410953 31885 net.cpp:382] mnist -> data
I0428 20:10:37.410970 31885 net.cpp:382] mnist -> label
I0428 20:10:37.411988 31885 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:37.414187 31885 net.cpp:124] Setting up mnist
I0428 20:10:37.414234 31885 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:37.414239 31885 net.cpp:131] Top shape: 64 (64)
I0428 20:10:37.414242 31885 net.cpp:139] Memory required for data: 200960
I0428 20:10:37.414247 31885 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:37.414261 31885 net.cpp:86] Creating Layer conv0
I0428 20:10:37.414266 31885 net.cpp:408] conv0 <- data
I0428 20:10:37.414294 31885 net.cpp:382] conv0 -> conv0
I0428 20:10:37.639084 31885 net.cpp:124] Setting up conv0
I0428 20:10:37.639109 31885 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:37.639113 31885 net.cpp:139] Memory required for data: 3887360
I0428 20:10:37.639144 31885 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:37.639173 31885 net.cpp:86] Creating Layer pool0
I0428 20:10:37.639175 31885 net.cpp:408] pool0 <- conv0
I0428 20:10:37.639181 31885 net.cpp:382] pool0 -> pool0
I0428 20:10:37.639223 31885 net.cpp:124] Setting up pool0
I0428 20:10:37.639230 31885 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:37.639233 31885 net.cpp:139] Memory required for data: 4808960
I0428 20:10:37.639236 31885 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:37.639246 31885 net.cpp:86] Creating Layer conv1
I0428 20:10:37.639250 31885 net.cpp:408] conv1 <- pool0
I0428 20:10:37.639256 31885 net.cpp:382] conv1 -> conv1
I0428 20:10:37.641182 31885 net.cpp:124] Setting up conv1
I0428 20:10:37.641196 31885 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:10:37.641217 31885 net.cpp:139] Memory required for data: 5628160
I0428 20:10:37.641225 31885 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:37.641232 31885 net.cpp:86] Creating Layer pool1
I0428 20:10:37.641235 31885 net.cpp:408] pool1 <- conv1
I0428 20:10:37.641240 31885 net.cpp:382] pool1 -> pool1
I0428 20:10:37.641275 31885 net.cpp:124] Setting up pool1
I0428 20:10:37.641281 31885 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:10:37.641284 31885 net.cpp:139] Memory required for data: 5832960
I0428 20:10:37.641288 31885 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:37.641294 31885 net.cpp:86] Creating Layer ip1
I0428 20:10:37.641297 31885 net.cpp:408] ip1 <- pool1
I0428 20:10:37.641301 31885 net.cpp:382] ip1 -> ip1
I0428 20:10:37.641499 31885 net.cpp:124] Setting up ip1
I0428 20:10:37.641506 31885 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:10:37.641510 31885 net.cpp:139] Memory required for data: 5839360
I0428 20:10:37.641516 31885 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:37.641521 31885 net.cpp:86] Creating Layer relu1
I0428 20:10:37.641526 31885 net.cpp:408] relu1 <- ip1
I0428 20:10:37.641530 31885 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:37.641685 31885 net.cpp:124] Setting up relu1
I0428 20:10:37.641693 31885 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:10:37.641696 31885 net.cpp:139] Memory required for data: 5845760
I0428 20:10:37.641700 31885 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:37.641705 31885 net.cpp:86] Creating Layer ip2
I0428 20:10:37.641716 31885 net.cpp:408] ip2 <- ip1
I0428 20:10:37.641721 31885 net.cpp:382] ip2 -> ip2
I0428 20:10:37.641805 31885 net.cpp:124] Setting up ip2
I0428 20:10:37.641813 31885 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:37.641815 31885 net.cpp:139] Memory required for data: 5848320
I0428 20:10:37.641820 31885 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:37.641826 31885 net.cpp:86] Creating Layer relu2
I0428 20:10:37.641829 31885 net.cpp:408] relu2 <- ip2
I0428 20:10:37.641832 31885 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:37.642518 31885 net.cpp:124] Setting up relu2
I0428 20:10:37.642530 31885 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:37.642549 31885 net.cpp:139] Memory required for data: 5850880
I0428 20:10:37.642554 31885 layer_factory.hpp:77] Creating layer loss
I0428 20:10:37.642560 31885 net.cpp:86] Creating Layer loss
I0428 20:10:37.642562 31885 net.cpp:408] loss <- ip2
I0428 20:10:37.642567 31885 net.cpp:408] loss <- label
I0428 20:10:37.642571 31885 net.cpp:382] loss -> loss
I0428 20:10:37.642590 31885 layer_factory.hpp:77] Creating layer loss
I0428 20:10:37.642809 31885 net.cpp:124] Setting up loss
I0428 20:10:37.642818 31885 net.cpp:131] Top shape: (1)
I0428 20:10:37.642822 31885 net.cpp:134]     with loss weight 1
I0428 20:10:37.642835 31885 net.cpp:139] Memory required for data: 5850884
I0428 20:10:37.642838 31885 net.cpp:200] loss needs backward computation.
I0428 20:10:37.642843 31885 net.cpp:200] relu2 needs backward computation.
I0428 20:10:37.642844 31885 net.cpp:200] ip2 needs backward computation.
I0428 20:10:37.642848 31885 net.cpp:200] relu1 needs backward computation.
I0428 20:10:37.642850 31885 net.cpp:200] ip1 needs backward computation.
I0428 20:10:37.642864 31885 net.cpp:200] pool1 needs backward computation.
I0428 20:10:37.642868 31885 net.cpp:200] conv1 needs backward computation.
I0428 20:10:37.642870 31885 net.cpp:200] pool0 needs backward computation.
I0428 20:10:37.642874 31885 net.cpp:200] conv0 needs backward computation.
I0428 20:10:37.642876 31885 net.cpp:202] mnist does not need backward computation.
I0428 20:10:37.642879 31885 net.cpp:244] This network produces output loss
I0428 20:10:37.642887 31885 net.cpp:257] Network initialization done.
I0428 20:10:37.643160 31885 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1139.prototxt
I0428 20:10:37.643183 31885 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:37.643262 31885 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:37.643322 31885 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:37.643368 31885 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:37.643378 31885 net.cpp:86] Creating Layer mnist
I0428 20:10:37.643383 31885 net.cpp:382] mnist -> data
I0428 20:10:37.643390 31885 net.cpp:382] mnist -> label
I0428 20:10:37.643468 31885 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:37.645299 31885 net.cpp:124] Setting up mnist
I0428 20:10:37.645329 31885 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:37.645334 31885 net.cpp:131] Top shape: 100 (100)
I0428 20:10:37.645337 31885 net.cpp:139] Memory required for data: 314000
I0428 20:10:37.645340 31885 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:37.645346 31885 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:37.645350 31885 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:37.645366 31885 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:37.645372 31885 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:37.645468 31885 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:37.645476 31885 net.cpp:131] Top shape: 100 (100)
I0428 20:10:37.645479 31885 net.cpp:131] Top shape: 100 (100)
I0428 20:10:37.645483 31885 net.cpp:139] Memory required for data: 314800
I0428 20:10:37.645485 31885 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:37.645509 31885 net.cpp:86] Creating Layer conv0
I0428 20:10:37.645512 31885 net.cpp:408] conv0 <- data
I0428 20:10:37.645517 31885 net.cpp:382] conv0 -> conv0
I0428 20:10:37.646996 31885 net.cpp:124] Setting up conv0
I0428 20:10:37.647009 31885 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:37.647012 31885 net.cpp:139] Memory required for data: 6074800
I0428 20:10:37.647022 31885 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:37.647027 31885 net.cpp:86] Creating Layer pool0
I0428 20:10:37.647030 31885 net.cpp:408] pool0 <- conv0
I0428 20:10:37.647040 31885 net.cpp:382] pool0 -> pool0
I0428 20:10:37.647085 31885 net.cpp:124] Setting up pool0
I0428 20:10:37.647092 31885 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:37.647094 31885 net.cpp:139] Memory required for data: 7514800
I0428 20:10:37.647097 31885 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:37.647106 31885 net.cpp:86] Creating Layer conv1
I0428 20:10:37.647109 31885 net.cpp:408] conv1 <- pool0
I0428 20:10:37.647122 31885 net.cpp:382] conv1 -> conv1
I0428 20:10:37.648799 31885 net.cpp:124] Setting up conv1
I0428 20:10:37.648829 31885 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:10:37.648849 31885 net.cpp:139] Memory required for data: 8794800
I0428 20:10:37.648876 31885 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:37.648883 31885 net.cpp:86] Creating Layer pool1
I0428 20:10:37.648886 31885 net.cpp:408] pool1 <- conv1
I0428 20:10:37.648893 31885 net.cpp:382] pool1 -> pool1
I0428 20:10:37.648933 31885 net.cpp:124] Setting up pool1
I0428 20:10:37.648942 31885 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:10:37.648946 31885 net.cpp:139] Memory required for data: 9114800
I0428 20:10:37.648949 31885 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:37.648957 31885 net.cpp:86] Creating Layer ip1
I0428 20:10:37.648960 31885 net.cpp:408] ip1 <- pool1
I0428 20:10:37.648972 31885 net.cpp:382] ip1 -> ip1
I0428 20:10:37.649256 31885 net.cpp:124] Setting up ip1
I0428 20:10:37.649263 31885 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:10:37.649266 31885 net.cpp:139] Memory required for data: 9124800
I0428 20:10:37.649272 31885 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:37.649281 31885 net.cpp:86] Creating Layer relu1
I0428 20:10:37.649284 31885 net.cpp:408] relu1 <- ip1
I0428 20:10:37.649288 31885 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:37.649543 31885 net.cpp:124] Setting up relu1
I0428 20:10:37.649551 31885 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:10:37.649554 31885 net.cpp:139] Memory required for data: 9134800
I0428 20:10:37.649557 31885 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:37.649565 31885 net.cpp:86] Creating Layer ip2
I0428 20:10:37.649569 31885 net.cpp:408] ip2 <- ip1
I0428 20:10:37.649574 31885 net.cpp:382] ip2 -> ip2
I0428 20:10:37.649672 31885 net.cpp:124] Setting up ip2
I0428 20:10:37.649678 31885 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:37.649680 31885 net.cpp:139] Memory required for data: 9138800
I0428 20:10:37.649686 31885 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:37.649690 31885 net.cpp:86] Creating Layer relu2
I0428 20:10:37.649693 31885 net.cpp:408] relu2 <- ip2
I0428 20:10:37.649696 31885 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:37.649843 31885 net.cpp:124] Setting up relu2
I0428 20:10:37.649852 31885 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:37.649854 31885 net.cpp:139] Memory required for data: 9142800
I0428 20:10:37.649857 31885 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:10:37.649862 31885 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:10:37.649864 31885 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:10:37.649869 31885 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:10:37.649884 31885 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:10:37.649919 31885 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:10:37.649924 31885 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:37.649929 31885 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:37.649930 31885 net.cpp:139] Memory required for data: 9150800
I0428 20:10:37.649933 31885 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:37.649940 31885 net.cpp:86] Creating Layer accuracy
I0428 20:10:37.649942 31885 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:10:37.649946 31885 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:37.649950 31885 net.cpp:382] accuracy -> accuracy
I0428 20:10:37.649956 31885 net.cpp:124] Setting up accuracy
I0428 20:10:37.649966 31885 net.cpp:131] Top shape: (1)
I0428 20:10:37.649969 31885 net.cpp:139] Memory required for data: 9150804
I0428 20:10:37.649977 31885 layer_factory.hpp:77] Creating layer loss
I0428 20:10:37.649982 31885 net.cpp:86] Creating Layer loss
I0428 20:10:37.649986 31885 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:10:37.649988 31885 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:37.649992 31885 net.cpp:382] loss -> loss
I0428 20:10:37.649998 31885 layer_factory.hpp:77] Creating layer loss
I0428 20:10:37.650262 31885 net.cpp:124] Setting up loss
I0428 20:10:37.650270 31885 net.cpp:131] Top shape: (1)
I0428 20:10:37.650274 31885 net.cpp:134]     with loss weight 1
I0428 20:10:37.650279 31885 net.cpp:139] Memory required for data: 9150808
I0428 20:10:37.650282 31885 net.cpp:200] loss needs backward computation.
I0428 20:10:37.650285 31885 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:37.650290 31885 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:10:37.650291 31885 net.cpp:200] relu2 needs backward computation.
I0428 20:10:37.650295 31885 net.cpp:200] ip2 needs backward computation.
I0428 20:10:37.650296 31885 net.cpp:200] relu1 needs backward computation.
I0428 20:10:37.650300 31885 net.cpp:200] ip1 needs backward computation.
I0428 20:10:37.650302 31885 net.cpp:200] pool1 needs backward computation.
I0428 20:10:37.650305 31885 net.cpp:200] conv1 needs backward computation.
I0428 20:10:37.650307 31885 net.cpp:200] pool0 needs backward computation.
I0428 20:10:37.650311 31885 net.cpp:200] conv0 needs backward computation.
I0428 20:10:37.650315 31885 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:37.650317 31885 net.cpp:202] mnist does not need backward computation.
I0428 20:10:37.650319 31885 net.cpp:244] This network produces output accuracy
I0428 20:10:37.650322 31885 net.cpp:244] This network produces output loss
I0428 20:10:37.650331 31885 net.cpp:257] Network initialization done.
I0428 20:10:37.650365 31885 solver.cpp:56] Solver scaffolding done.
I0428 20:10:37.650622 31885 caffe.cpp:248] Starting Optimization
I0428 20:10:37.650629 31885 solver.cpp:273] Solving LeNet
I0428 20:10:37.650630 31885 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:37.651334 31885 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:37.707137 31892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:37.708616 31885 solver.cpp:398]     Test net output #0: accuracy = 0.0774
I0428 20:10:37.708636 31885 solver.cpp:398]     Test net output #1: loss = 2.39054 (* 1 = 2.39054 loss)
I0428 20:10:37.712112 31885 solver.cpp:219] Iteration 0 (0 iter/s, 0.061445s/100 iters), loss = 2.38792
I0428 20:10:37.712152 31885 solver.cpp:238]     Train net output #0: loss = 2.38792 (* 1 = 2.38792 loss)
I0428 20:10:37.712165 31885 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:37.828605 31885 solver.cpp:219] Iteration 100 (858.811 iter/s, 0.11644s/100 iters), loss = 0.933401
I0428 20:10:37.828634 31885 solver.cpp:238]     Train net output #0: loss = 0.933401 (* 1 = 0.933401 loss)
I0428 20:10:37.828640 31885 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:37.946272 31885 solver.cpp:219] Iteration 200 (850.153 iter/s, 0.117626s/100 iters), loss = 1.04973
I0428 20:10:37.946327 31885 solver.cpp:238]     Train net output #0: loss = 1.04973 (* 1 = 1.04973 loss)
I0428 20:10:37.946347 31885 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:38.063592 31885 solver.cpp:219] Iteration 300 (852.841 iter/s, 0.117255s/100 iters), loss = 0.638862
I0428 20:10:38.063619 31885 solver.cpp:238]     Train net output #0: loss = 0.638862 (* 1 = 0.638862 loss)
I0428 20:10:38.063627 31885 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:38.194269 31885 solver.cpp:219] Iteration 400 (765.469 iter/s, 0.130639s/100 iters), loss = 0.657068
I0428 20:10:38.194309 31885 solver.cpp:238]     Train net output #0: loss = 0.657068 (* 1 = 0.657068 loss)
I0428 20:10:38.194315 31885 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:38.322105 31885 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:38.374739 31892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:38.376123 31885 solver.cpp:398]     Test net output #0: accuracy = 0.8506
I0428 20:10:38.376144 31885 solver.cpp:398]     Test net output #1: loss = 0.565011 (* 1 = 0.565011 loss)
I0428 20:10:38.377269 31885 solver.cpp:219] Iteration 500 (546.561 iter/s, 0.182962s/100 iters), loss = 0.634876
I0428 20:10:38.377293 31885 solver.cpp:238]     Train net output #0: loss = 0.634876 (* 1 = 0.634876 loss)
I0428 20:10:38.377316 31885 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:38.509331 31885 solver.cpp:219] Iteration 600 (757.424 iter/s, 0.132026s/100 iters), loss = 0.408077
I0428 20:10:38.509354 31885 solver.cpp:238]     Train net output #0: loss = 0.408077 (* 1 = 0.408077 loss)
I0428 20:10:38.509377 31885 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:38.639984 31885 solver.cpp:219] Iteration 700 (765.595 iter/s, 0.130617s/100 iters), loss = 0.861711
I0428 20:10:38.640010 31885 solver.cpp:238]     Train net output #0: loss = 0.861711 (* 1 = 0.861711 loss)
I0428 20:10:38.640017 31885 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:38.771299 31885 solver.cpp:219] Iteration 800 (761.738 iter/s, 0.131279s/100 iters), loss = 0.650241
I0428 20:10:38.771340 31885 solver.cpp:238]     Train net output #0: loss = 0.650241 (* 1 = 0.650241 loss)
I0428 20:10:38.771360 31885 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:38.895212 31885 solver.cpp:219] Iteration 900 (807.257 iter/s, 0.123876s/100 iters), loss = 0.479301
I0428 20:10:38.895254 31885 solver.cpp:238]     Train net output #0: loss = 0.479301 (* 1 = 0.479301 loss)
I0428 20:10:38.895261 31885 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:38.933604 31891 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:39.008886 31885 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:39.010515 31885 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:39.011421 31885 solver.cpp:311] Iteration 1000, loss = 0.684532
I0428 20:10:39.011436 31885 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:39.014740 31885 blocking_queue.cpp:49] Waiting for data
I0428 20:10:39.085964 31892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:39.086558 31885 solver.cpp:398]     Test net output #0: accuracy = 0.8839
I0428 20:10:39.086578 31885 solver.cpp:398]     Test net output #1: loss = 0.50948 (* 1 = 0.50948 loss)
I0428 20:10:39.086583 31885 solver.cpp:316] Optimization Done.
I0428 20:10:39.086586 31885 caffe.cpp:259] Optimization Done.
