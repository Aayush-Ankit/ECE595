I0428 19:32:33.266788 22865 caffe.cpp:218] Using GPUs 0
I0428 19:32:33.304790 22865 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:32:33.820991 22865 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test156.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:32:33.821161 22865 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test156.prototxt
I0428 19:32:33.821460 22865 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:32:33.821480 22865 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:32:33.821561 22865 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:32:33.821650 22865 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:33.821780 22865 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:32:33.821815 22865 net.cpp:86] Creating Layer mnist
I0428 19:32:33.821828 22865 net.cpp:382] mnist -> data
I0428 19:32:33.821861 22865 net.cpp:382] mnist -> label
I0428 19:32:33.823014 22865 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:32:33.825495 22865 net.cpp:124] Setting up mnist
I0428 19:32:33.825517 22865 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:32:33.825528 22865 net.cpp:131] Top shape: 64 (64)
I0428 19:32:33.825534 22865 net.cpp:139] Memory required for data: 200960
I0428 19:32:33.825546 22865 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:33.825577 22865 net.cpp:86] Creating Layer conv0
I0428 19:32:33.825587 22865 net.cpp:408] conv0 <- data
I0428 19:32:33.825605 22865 net.cpp:382] conv0 -> conv0
I0428 19:32:34.108467 22865 net.cpp:124] Setting up conv0
I0428 19:32:34.108499 22865 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 19:32:34.108505 22865 net.cpp:139] Memory required for data: 3887360
I0428 19:32:34.108525 22865 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:34.108541 22865 net.cpp:86] Creating Layer pool0
I0428 19:32:34.108554 22865 net.cpp:408] pool0 <- conv0
I0428 19:32:34.108563 22865 net.cpp:382] pool0 -> pool0
I0428 19:32:34.108618 22865 net.cpp:124] Setting up pool0
I0428 19:32:34.108628 22865 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 19:32:34.108633 22865 net.cpp:139] Memory required for data: 4808960
I0428 19:32:34.108638 22865 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:34.108649 22865 net.cpp:86] Creating Layer ip1
I0428 19:32:34.108659 22865 net.cpp:408] ip1 <- pool0
I0428 19:32:34.108667 22865 net.cpp:382] ip1 -> ip1
I0428 19:32:34.108978 22865 net.cpp:124] Setting up ip1
I0428 19:32:34.108989 22865 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:34.109009 22865 net.cpp:139] Memory required for data: 4811520
I0428 19:32:34.109021 22865 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:34.109031 22865 net.cpp:86] Creating Layer relu1
I0428 19:32:34.109038 22865 net.cpp:408] relu1 <- ip1
I0428 19:32:34.109045 22865 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:34.109213 22865 net.cpp:124] Setting up relu1
I0428 19:32:34.109223 22865 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:34.109228 22865 net.cpp:139] Memory required for data: 4814080
I0428 19:32:34.109233 22865 layer_factory.hpp:77] Creating layer loss
I0428 19:32:34.109241 22865 net.cpp:86] Creating Layer loss
I0428 19:32:34.109247 22865 net.cpp:408] loss <- ip1
I0428 19:32:34.109254 22865 net.cpp:408] loss <- label
I0428 19:32:34.109262 22865 net.cpp:382] loss -> loss
I0428 19:32:34.109282 22865 layer_factory.hpp:77] Creating layer loss
I0428 19:32:34.110085 22865 net.cpp:124] Setting up loss
I0428 19:32:34.110100 22865 net.cpp:131] Top shape: (1)
I0428 19:32:34.110105 22865 net.cpp:134]     with loss weight 1
I0428 19:32:34.110124 22865 net.cpp:139] Memory required for data: 4814084
I0428 19:32:34.110131 22865 net.cpp:200] loss needs backward computation.
I0428 19:32:34.110137 22865 net.cpp:200] relu1 needs backward computation.
I0428 19:32:34.110141 22865 net.cpp:200] ip1 needs backward computation.
I0428 19:32:34.110146 22865 net.cpp:200] pool0 needs backward computation.
I0428 19:32:34.110152 22865 net.cpp:200] conv0 needs backward computation.
I0428 19:32:34.110157 22865 net.cpp:202] mnist does not need backward computation.
I0428 19:32:34.110162 22865 net.cpp:244] This network produces output loss
I0428 19:32:34.110175 22865 net.cpp:257] Network initialization done.
I0428 19:32:34.110394 22865 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test156.prototxt
I0428 19:32:34.110422 22865 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:32:34.110493 22865 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:32:34.110579 22865 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:34.110637 22865 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:32:34.110654 22865 net.cpp:86] Creating Layer mnist
I0428 19:32:34.110666 22865 net.cpp:382] mnist -> data
I0428 19:32:34.110677 22865 net.cpp:382] mnist -> label
I0428 19:32:34.110817 22865 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:32:34.112725 22865 net.cpp:124] Setting up mnist
I0428 19:32:34.112740 22865 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:32:34.112747 22865 net.cpp:131] Top shape: 100 (100)
I0428 19:32:34.112751 22865 net.cpp:139] Memory required for data: 314000
I0428 19:32:34.112769 22865 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:32:34.112779 22865 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:32:34.112785 22865 net.cpp:408] label_mnist_1_split <- label
I0428 19:32:34.112795 22865 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:32:34.112807 22865 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:32:34.112951 22865 net.cpp:124] Setting up label_mnist_1_split
I0428 19:32:34.112962 22865 net.cpp:131] Top shape: 100 (100)
I0428 19:32:34.112969 22865 net.cpp:131] Top shape: 100 (100)
I0428 19:32:34.112974 22865 net.cpp:139] Memory required for data: 314800
I0428 19:32:34.112980 22865 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:34.112996 22865 net.cpp:86] Creating Layer conv0
I0428 19:32:34.113004 22865 net.cpp:408] conv0 <- data
I0428 19:32:34.113018 22865 net.cpp:382] conv0 -> conv0
I0428 19:32:34.114644 22865 net.cpp:124] Setting up conv0
I0428 19:32:34.114658 22865 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 19:32:34.114665 22865 net.cpp:139] Memory required for data: 6074800
I0428 19:32:34.114678 22865 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:34.114689 22865 net.cpp:86] Creating Layer pool0
I0428 19:32:34.114696 22865 net.cpp:408] pool0 <- conv0
I0428 19:32:34.114704 22865 net.cpp:382] pool0 -> pool0
I0428 19:32:34.114747 22865 net.cpp:124] Setting up pool0
I0428 19:32:34.114755 22865 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 19:32:34.114760 22865 net.cpp:139] Memory required for data: 7514800
I0428 19:32:34.114765 22865 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:34.114776 22865 net.cpp:86] Creating Layer ip1
I0428 19:32:34.114781 22865 net.cpp:408] ip1 <- pool0
I0428 19:32:34.114791 22865 net.cpp:382] ip1 -> ip1
I0428 19:32:34.115137 22865 net.cpp:124] Setting up ip1
I0428 19:32:34.115147 22865 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:34.115152 22865 net.cpp:139] Memory required for data: 7518800
I0428 19:32:34.115165 22865 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:34.115175 22865 net.cpp:86] Creating Layer relu1
I0428 19:32:34.115180 22865 net.cpp:408] relu1 <- ip1
I0428 19:32:34.115190 22865 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:34.115468 22865 net.cpp:124] Setting up relu1
I0428 19:32:34.115478 22865 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:34.115483 22865 net.cpp:139] Memory required for data: 7522800
I0428 19:32:34.115490 22865 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:32:34.115499 22865 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:32:34.115506 22865 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:32:34.115519 22865 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:32:34.115530 22865 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:32:34.115577 22865 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:32:34.115586 22865 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:34.115592 22865 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:34.115599 22865 net.cpp:139] Memory required for data: 7530800
I0428 19:32:34.115604 22865 layer_factory.hpp:77] Creating layer accuracy
I0428 19:32:34.115613 22865 net.cpp:86] Creating Layer accuracy
I0428 19:32:34.115619 22865 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:32:34.115627 22865 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:32:34.115635 22865 net.cpp:382] accuracy -> accuracy
I0428 19:32:34.115646 22865 net.cpp:124] Setting up accuracy
I0428 19:32:34.115654 22865 net.cpp:131] Top shape: (1)
I0428 19:32:34.115659 22865 net.cpp:139] Memory required for data: 7530804
I0428 19:32:34.115664 22865 layer_factory.hpp:77] Creating layer loss
I0428 19:32:34.115674 22865 net.cpp:86] Creating Layer loss
I0428 19:32:34.115679 22865 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:32:34.115686 22865 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:32:34.115694 22865 net.cpp:382] loss -> loss
I0428 19:32:34.115705 22865 layer_factory.hpp:77] Creating layer loss
I0428 19:32:34.115945 22865 net.cpp:124] Setting up loss
I0428 19:32:34.115967 22865 net.cpp:131] Top shape: (1)
I0428 19:32:34.115972 22865 net.cpp:134]     with loss weight 1
I0428 19:32:34.115981 22865 net.cpp:139] Memory required for data: 7530808
I0428 19:32:34.115988 22865 net.cpp:200] loss needs backward computation.
I0428 19:32:34.115993 22865 net.cpp:202] accuracy does not need backward computation.
I0428 19:32:34.115999 22865 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:32:34.116004 22865 net.cpp:200] relu1 needs backward computation.
I0428 19:32:34.116009 22865 net.cpp:200] ip1 needs backward computation.
I0428 19:32:34.116014 22865 net.cpp:200] pool0 needs backward computation.
I0428 19:32:34.116019 22865 net.cpp:200] conv0 needs backward computation.
I0428 19:32:34.116025 22865 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:32:34.116030 22865 net.cpp:202] mnist does not need backward computation.
I0428 19:32:34.116035 22865 net.cpp:244] This network produces output accuracy
I0428 19:32:34.116041 22865 net.cpp:244] This network produces output loss
I0428 19:32:34.116060 22865 net.cpp:257] Network initialization done.
I0428 19:32:34.116111 22865 solver.cpp:56] Solver scaffolding done.
I0428 19:32:34.116288 22865 caffe.cpp:248] Starting Optimization
I0428 19:32:34.116297 22865 solver.cpp:273] Solving LeNet
I0428 19:32:34.116302 22865 solver.cpp:274] Learning Rate Policy: inv
I0428 19:32:34.117035 22865 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:32:34.122923 22865 blocking_queue.cpp:49] Waiting for data
I0428 19:32:34.182474 22872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:34.183236 22865 solver.cpp:398]     Test net output #0: accuracy = 0.1027
I0428 19:32:34.183256 22865 solver.cpp:398]     Test net output #1: loss = 2.3192 (* 1 = 2.3192 loss)
I0428 19:32:34.186576 22865 solver.cpp:219] Iteration 0 (-9.77848e-31 iter/s, 0.0702105s/100 iters), loss = 2.31763
I0428 19:32:34.186604 22865 solver.cpp:238]     Train net output #0: loss = 2.31763 (* 1 = 2.31763 loss)
I0428 19:32:34.186621 22865 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:32:34.267793 22865 solver.cpp:219] Iteration 100 (1231.8 iter/s, 0.0811817s/100 iters), loss = 0.583011
I0428 19:32:34.267822 22865 solver.cpp:238]     Train net output #0: loss = 0.583011 (* 1 = 0.583011 loss)
I0428 19:32:34.267848 22865 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:32:34.349305 22865 solver.cpp:219] Iteration 200 (1227.33 iter/s, 0.0814776s/100 iters), loss = 0.360831
I0428 19:32:34.349333 22865 solver.cpp:238]     Train net output #0: loss = 0.360831 (* 1 = 0.360831 loss)
I0428 19:32:34.349357 22865 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:32:34.431512 22865 solver.cpp:219] Iteration 300 (1216.95 iter/s, 0.0821729s/100 iters), loss = 0.489458
I0428 19:32:34.431541 22865 solver.cpp:238]     Train net output #0: loss = 0.489458 (* 1 = 0.489458 loss)
I0428 19:32:34.431568 22865 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:32:34.513715 22865 solver.cpp:219] Iteration 400 (1217.02 iter/s, 0.0821678s/100 iters), loss = 0.33883
I0428 19:32:34.513746 22865 solver.cpp:238]     Train net output #0: loss = 0.33883 (* 1 = 0.33883 loss)
I0428 19:32:34.513770 22865 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:32:34.594698 22865 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:32:34.654844 22872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:34.655678 22865 solver.cpp:398]     Test net output #0: accuracy = 0.8512
I0428 19:32:34.655700 22865 solver.cpp:398]     Test net output #1: loss = 0.435474 (* 1 = 0.435474 loss)
I0428 19:32:34.656631 22865 solver.cpp:219] Iteration 500 (699.904 iter/s, 0.142877s/100 iters), loss = 0.540114
I0428 19:32:34.656672 22865 solver.cpp:238]     Train net output #0: loss = 0.540114 (* 1 = 0.540114 loss)
I0428 19:32:34.656683 22865 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:32:34.743764 22865 solver.cpp:219] Iteration 600 (1148.31 iter/s, 0.0870842s/100 iters), loss = 0.425583
I0428 19:32:34.743809 22865 solver.cpp:238]     Train net output #0: loss = 0.425583 (* 1 = 0.425583 loss)
I0428 19:32:34.743835 22865 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:32:34.826692 22865 solver.cpp:219] Iteration 700 (1206.59 iter/s, 0.0828785s/100 iters), loss = 0.353547
I0428 19:32:34.826721 22865 solver.cpp:238]     Train net output #0: loss = 0.353547 (* 1 = 0.353547 loss)
I0428 19:32:34.826748 22865 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:32:34.908767 22865 solver.cpp:219] Iteration 800 (1218.94 iter/s, 0.0820388s/100 iters), loss = 0.371955
I0428 19:32:34.908797 22865 solver.cpp:238]     Train net output #0: loss = 0.371955 (* 1 = 0.371955 loss)
I0428 19:32:34.908828 22865 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:32:34.994413 22865 solver.cpp:219] Iteration 900 (1168.08 iter/s, 0.0856105s/100 iters), loss = 0.303866
I0428 19:32:34.994446 22865 solver.cpp:238]     Train net output #0: loss = 0.303866 (* 1 = 0.303866 loss)
I0428 19:32:34.994472 22865 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:32:35.023560 22871 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:35.079056 22865 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:32:35.080082 22865 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:32:35.081030 22865 solver.cpp:311] Iteration 1000, loss = 0.236961
I0428 19:32:35.081048 22865 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:32:35.140107 22872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:35.141535 22865 solver.cpp:398]     Test net output #0: accuracy = 0.9567
I0428 19:32:35.141572 22865 solver.cpp:398]     Test net output #1: loss = 0.154563 (* 1 = 0.154563 loss)
I0428 19:32:35.141595 22865 solver.cpp:316] Optimization Done.
I0428 19:32:35.141602 22865 caffe.cpp:259] Optimization Done.
