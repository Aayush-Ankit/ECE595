I0428 20:25:14.954798  2559 caffe.cpp:218] Using GPUs 0
I0428 20:25:14.987465  2559 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:25:15.496657  2559 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1451.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:25:15.496805  2559 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1451.prototxt
I0428 20:25:15.497198  2559 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:25:15.497217  2559 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:25:15.497308  2559 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:15.497385  2559 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:15.497486  2559 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:25:15.497512  2559 net.cpp:86] Creating Layer mnist
I0428 20:25:15.497521  2559 net.cpp:382] mnist -> data
I0428 20:25:15.497544  2559 net.cpp:382] mnist -> label
I0428 20:25:15.498637  2559 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:25:15.501127  2559 net.cpp:124] Setting up mnist
I0428 20:25:15.501147  2559 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:25:15.501163  2559 net.cpp:131] Top shape: 64 (64)
I0428 20:25:15.501165  2559 net.cpp:139] Memory required for data: 200960
I0428 20:25:15.501173  2559 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:15.501201  2559 net.cpp:86] Creating Layer conv0
I0428 20:25:15.501207  2559 net.cpp:408] conv0 <- data
I0428 20:25:15.501220  2559 net.cpp:382] conv0 -> conv0
I0428 20:25:15.771621  2559 net.cpp:124] Setting up conv0
I0428 20:25:15.771663  2559 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:25:15.771667  2559 net.cpp:139] Memory required for data: 14946560
I0428 20:25:15.771713  2559 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:15.771741  2559 net.cpp:86] Creating Layer pool0
I0428 20:25:15.771745  2559 net.cpp:408] pool0 <- conv0
I0428 20:25:15.771750  2559 net.cpp:382] pool0 -> pool0
I0428 20:25:15.771795  2559 net.cpp:124] Setting up pool0
I0428 20:25:15.771811  2559 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:25:15.771814  2559 net.cpp:139] Memory required for data: 18632960
I0428 20:25:15.771817  2559 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:15.771827  2559 net.cpp:86] Creating Layer conv1
I0428 20:25:15.771831  2559 net.cpp:408] conv1 <- pool0
I0428 20:25:15.771834  2559 net.cpp:382] conv1 -> conv1
I0428 20:25:15.774462  2559 net.cpp:124] Setting up conv1
I0428 20:25:15.774492  2559 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:25:15.774495  2559 net.cpp:139] Memory required for data: 18665728
I0428 20:25:15.774518  2559 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:15.774524  2559 net.cpp:86] Creating Layer pool1
I0428 20:25:15.774528  2559 net.cpp:408] pool1 <- conv1
I0428 20:25:15.774531  2559 net.cpp:382] pool1 -> pool1
I0428 20:25:15.774580  2559 net.cpp:124] Setting up pool1
I0428 20:25:15.774585  2559 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:25:15.774588  2559 net.cpp:139] Memory required for data: 18673920
I0428 20:25:15.774590  2559 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:15.774598  2559 net.cpp:86] Creating Layer ip1
I0428 20:25:15.774601  2559 net.cpp:408] ip1 <- pool1
I0428 20:25:15.774605  2559 net.cpp:382] ip1 -> ip1
I0428 20:25:15.774730  2559 net.cpp:124] Setting up ip1
I0428 20:25:15.774739  2559 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:25:15.774741  2559 net.cpp:139] Memory required for data: 18680320
I0428 20:25:15.774747  2559 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:15.774754  2559 net.cpp:86] Creating Layer relu1
I0428 20:25:15.774756  2559 net.cpp:408] relu1 <- ip1
I0428 20:25:15.774760  2559 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:15.774919  2559 net.cpp:124] Setting up relu1
I0428 20:25:15.774927  2559 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:25:15.774930  2559 net.cpp:139] Memory required for data: 18686720
I0428 20:25:15.774933  2559 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:15.774940  2559 net.cpp:86] Creating Layer ip2
I0428 20:25:15.774942  2559 net.cpp:408] ip2 <- ip1
I0428 20:25:15.774947  2559 net.cpp:382] ip2 -> ip2
I0428 20:25:15.775048  2559 net.cpp:124] Setting up ip2
I0428 20:25:15.775055  2559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:15.775058  2559 net.cpp:139] Memory required for data: 18689280
I0428 20:25:15.775063  2559 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:15.775068  2559 net.cpp:86] Creating Layer relu2
I0428 20:25:15.775071  2559 net.cpp:408] relu2 <- ip2
I0428 20:25:15.775075  2559 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:15.775799  2559 net.cpp:124] Setting up relu2
I0428 20:25:15.775826  2559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:15.775845  2559 net.cpp:139] Memory required for data: 18691840
I0428 20:25:15.775848  2559 layer_factory.hpp:77] Creating layer loss
I0428 20:25:15.775854  2559 net.cpp:86] Creating Layer loss
I0428 20:25:15.775857  2559 net.cpp:408] loss <- ip2
I0428 20:25:15.775862  2559 net.cpp:408] loss <- label
I0428 20:25:15.775867  2559 net.cpp:382] loss -> loss
I0428 20:25:15.775887  2559 layer_factory.hpp:77] Creating layer loss
I0428 20:25:15.776103  2559 net.cpp:124] Setting up loss
I0428 20:25:15.776113  2559 net.cpp:131] Top shape: (1)
I0428 20:25:15.776116  2559 net.cpp:134]     with loss weight 1
I0428 20:25:15.776131  2559 net.cpp:139] Memory required for data: 18691844
I0428 20:25:15.776134  2559 net.cpp:200] loss needs backward computation.
I0428 20:25:15.776139  2559 net.cpp:200] relu2 needs backward computation.
I0428 20:25:15.776141  2559 net.cpp:200] ip2 needs backward computation.
I0428 20:25:15.776144  2559 net.cpp:200] relu1 needs backward computation.
I0428 20:25:15.776147  2559 net.cpp:200] ip1 needs backward computation.
I0428 20:25:15.776160  2559 net.cpp:200] pool1 needs backward computation.
I0428 20:25:15.776165  2559 net.cpp:200] conv1 needs backward computation.
I0428 20:25:15.776167  2559 net.cpp:200] pool0 needs backward computation.
I0428 20:25:15.776170  2559 net.cpp:200] conv0 needs backward computation.
I0428 20:25:15.776175  2559 net.cpp:202] mnist does not need backward computation.
I0428 20:25:15.776176  2559 net.cpp:244] This network produces output loss
I0428 20:25:15.776185  2559 net.cpp:257] Network initialization done.
I0428 20:25:15.776468  2559 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1451.prototxt
I0428 20:25:15.776492  2559 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:25:15.776589  2559 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:15.776662  2559 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:15.776705  2559 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:25:15.776716  2559 net.cpp:86] Creating Layer mnist
I0428 20:25:15.776721  2559 net.cpp:382] mnist -> data
I0428 20:25:15.776728  2559 net.cpp:382] mnist -> label
I0428 20:25:15.776826  2559 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:25:15.778878  2559 net.cpp:124] Setting up mnist
I0428 20:25:15.778892  2559 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:25:15.778911  2559 net.cpp:131] Top shape: 100 (100)
I0428 20:25:15.778914  2559 net.cpp:139] Memory required for data: 314000
I0428 20:25:15.778918  2559 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:25:15.778928  2559 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:25:15.778933  2559 net.cpp:408] label_mnist_1_split <- label
I0428 20:25:15.778937  2559 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:25:15.778944  2559 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:25:15.779045  2559 net.cpp:124] Setting up label_mnist_1_split
I0428 20:25:15.779053  2559 net.cpp:131] Top shape: 100 (100)
I0428 20:25:15.779057  2559 net.cpp:131] Top shape: 100 (100)
I0428 20:25:15.779060  2559 net.cpp:139] Memory required for data: 314800
I0428 20:25:15.779063  2559 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:15.779072  2559 net.cpp:86] Creating Layer conv0
I0428 20:25:15.779075  2559 net.cpp:408] conv0 <- data
I0428 20:25:15.779080  2559 net.cpp:382] conv0 -> conv0
I0428 20:25:15.780530  2559 net.cpp:124] Setting up conv0
I0428 20:25:15.780560  2559 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:25:15.780563  2559 net.cpp:139] Memory required for data: 23354800
I0428 20:25:15.780587  2559 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:15.780593  2559 net.cpp:86] Creating Layer pool0
I0428 20:25:15.780597  2559 net.cpp:408] pool0 <- conv0
I0428 20:25:15.780601  2559 net.cpp:382] pool0 -> pool0
I0428 20:25:15.780634  2559 net.cpp:124] Setting up pool0
I0428 20:25:15.780640  2559 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:25:15.780642  2559 net.cpp:139] Memory required for data: 29114800
I0428 20:25:15.780647  2559 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:15.780654  2559 net.cpp:86] Creating Layer conv1
I0428 20:25:15.780658  2559 net.cpp:408] conv1 <- pool0
I0428 20:25:15.780663  2559 net.cpp:382] conv1 -> conv1
I0428 20:25:15.782151  2559 net.cpp:124] Setting up conv1
I0428 20:25:15.782179  2559 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:25:15.782183  2559 net.cpp:139] Memory required for data: 29166000
I0428 20:25:15.782192  2559 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:15.782198  2559 net.cpp:86] Creating Layer pool1
I0428 20:25:15.782202  2559 net.cpp:408] pool1 <- conv1
I0428 20:25:15.782207  2559 net.cpp:382] pool1 -> pool1
I0428 20:25:15.782241  2559 net.cpp:124] Setting up pool1
I0428 20:25:15.782250  2559 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:25:15.782253  2559 net.cpp:139] Memory required for data: 29178800
I0428 20:25:15.782256  2559 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:15.782263  2559 net.cpp:86] Creating Layer ip1
I0428 20:25:15.782265  2559 net.cpp:408] ip1 <- pool1
I0428 20:25:15.782269  2559 net.cpp:382] ip1 -> ip1
I0428 20:25:15.782366  2559 net.cpp:124] Setting up ip1
I0428 20:25:15.782373  2559 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:25:15.782377  2559 net.cpp:139] Memory required for data: 29188800
I0428 20:25:15.782382  2559 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:15.782388  2559 net.cpp:86] Creating Layer relu1
I0428 20:25:15.782392  2559 net.cpp:408] relu1 <- ip1
I0428 20:25:15.782395  2559 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:15.782546  2559 net.cpp:124] Setting up relu1
I0428 20:25:15.782555  2559 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:25:15.782558  2559 net.cpp:139] Memory required for data: 29198800
I0428 20:25:15.782562  2559 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:15.782568  2559 net.cpp:86] Creating Layer ip2
I0428 20:25:15.782572  2559 net.cpp:408] ip2 <- ip1
I0428 20:25:15.782577  2559 net.cpp:382] ip2 -> ip2
I0428 20:25:15.782686  2559 net.cpp:124] Setting up ip2
I0428 20:25:15.782693  2559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:15.782696  2559 net.cpp:139] Memory required for data: 29202800
I0428 20:25:15.782702  2559 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:15.782706  2559 net.cpp:86] Creating Layer relu2
I0428 20:25:15.782709  2559 net.cpp:408] relu2 <- ip2
I0428 20:25:15.782713  2559 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:15.782878  2559 net.cpp:124] Setting up relu2
I0428 20:25:15.782887  2559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:15.782891  2559 net.cpp:139] Memory required for data: 29206800
I0428 20:25:15.782893  2559 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:25:15.782898  2559 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:25:15.782902  2559 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:25:15.782907  2559 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:25:15.782922  2559 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:25:15.782956  2559 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:25:15.782963  2559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:15.782968  2559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:15.782969  2559 net.cpp:139] Memory required for data: 29214800
I0428 20:25:15.782973  2559 layer_factory.hpp:77] Creating layer accuracy
I0428 20:25:15.782977  2559 net.cpp:86] Creating Layer accuracy
I0428 20:25:15.782981  2559 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:25:15.782985  2559 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:25:15.782989  2559 net.cpp:382] accuracy -> accuracy
I0428 20:25:15.782995  2559 net.cpp:124] Setting up accuracy
I0428 20:25:15.782999  2559 net.cpp:131] Top shape: (1)
I0428 20:25:15.783002  2559 net.cpp:139] Memory required for data: 29214804
I0428 20:25:15.783005  2559 layer_factory.hpp:77] Creating layer loss
I0428 20:25:15.783010  2559 net.cpp:86] Creating Layer loss
I0428 20:25:15.783013  2559 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:25:15.783017  2559 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:25:15.783021  2559 net.cpp:382] loss -> loss
I0428 20:25:15.783027  2559 layer_factory.hpp:77] Creating layer loss
I0428 20:25:15.783241  2559 net.cpp:124] Setting up loss
I0428 20:25:15.783249  2559 net.cpp:131] Top shape: (1)
I0428 20:25:15.783253  2559 net.cpp:134]     with loss weight 1
I0428 20:25:15.783259  2559 net.cpp:139] Memory required for data: 29214808
I0428 20:25:15.783263  2559 net.cpp:200] loss needs backward computation.
I0428 20:25:15.783272  2559 net.cpp:202] accuracy does not need backward computation.
I0428 20:25:15.783277  2559 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:25:15.783280  2559 net.cpp:200] relu2 needs backward computation.
I0428 20:25:15.783283  2559 net.cpp:200] ip2 needs backward computation.
I0428 20:25:15.783287  2559 net.cpp:200] relu1 needs backward computation.
I0428 20:25:15.783289  2559 net.cpp:200] ip1 needs backward computation.
I0428 20:25:15.783293  2559 net.cpp:200] pool1 needs backward computation.
I0428 20:25:15.783296  2559 net.cpp:200] conv1 needs backward computation.
I0428 20:25:15.783300  2559 net.cpp:200] pool0 needs backward computation.
I0428 20:25:15.783303  2559 net.cpp:200] conv0 needs backward computation.
I0428 20:25:15.783308  2559 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:25:15.783310  2559 net.cpp:202] mnist does not need backward computation.
I0428 20:25:15.783313  2559 net.cpp:244] This network produces output accuracy
I0428 20:25:15.783316  2559 net.cpp:244] This network produces output loss
I0428 20:25:15.783326  2559 net.cpp:257] Network initialization done.
I0428 20:25:15.783361  2559 solver.cpp:56] Solver scaffolding done.
I0428 20:25:15.783645  2559 caffe.cpp:248] Starting Optimization
I0428 20:25:15.783651  2559 solver.cpp:273] Solving LeNet
I0428 20:25:15.783653  2559 solver.cpp:274] Learning Rate Policy: inv
I0428 20:25:15.784406  2559 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:25:15.876636  2568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:15.879900  2559 solver.cpp:398]     Test net output #0: accuracy = 0.1367
I0428 20:25:15.879933  2559 solver.cpp:398]     Test net output #1: loss = 2.30508 (* 1 = 2.30508 loss)
I0428 20:25:15.884193  2559 solver.cpp:219] Iteration 0 (-6.62791e-31 iter/s, 0.100499s/100 iters), loss = 2.31807
I0428 20:25:15.884233  2559 solver.cpp:238]     Train net output #0: loss = 2.31807 (* 1 = 2.31807 loss)
I0428 20:25:15.884245  2559 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:25:16.087998  2559 solver.cpp:219] Iteration 100 (490.804 iter/s, 0.203747s/100 iters), loss = 0.375836
I0428 20:25:16.088038  2559 solver.cpp:238]     Train net output #0: loss = 0.375836 (* 1 = 0.375836 loss)
I0428 20:25:16.088044  2559 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:25:16.293424  2559 solver.cpp:219] Iteration 200 (486.905 iter/s, 0.205379s/100 iters), loss = 0.285076
I0428 20:25:16.293505  2559 solver.cpp:238]     Train net output #0: loss = 0.285076 (* 1 = 0.285076 loss)
I0428 20:25:16.293520  2559 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:25:16.507895  2559 solver.cpp:219] Iteration 300 (466.469 iter/s, 0.214376s/100 iters), loss = 0.359504
I0428 20:25:16.507942  2559 solver.cpp:238]     Train net output #0: loss = 0.359504 (* 1 = 0.359504 loss)
I0428 20:25:16.507954  2559 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:25:16.718437  2559 solver.cpp:219] Iteration 400 (475.109 iter/s, 0.210478s/100 iters), loss = 0.148373
I0428 20:25:16.718487  2559 solver.cpp:238]     Train net output #0: loss = 0.148373 (* 1 = 0.148373 loss)
I0428 20:25:16.718497  2559 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:25:16.916159  2559 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:25:17.020670  2568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:17.023269  2559 solver.cpp:398]     Test net output #0: accuracy = 0.945
I0428 20:25:17.023298  2559 solver.cpp:398]     Test net output #1: loss = 0.178849 (* 1 = 0.178849 loss)
I0428 20:25:17.025230  2559 solver.cpp:219] Iteration 500 (326.025 iter/s, 0.306725s/100 iters), loss = 0.13059
I0428 20:25:17.025261  2559 solver.cpp:238]     Train net output #0: loss = 0.13059 (* 1 = 0.13059 loss)
I0428 20:25:17.025269  2559 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:25:17.232969  2559 solver.cpp:219] Iteration 600 (481.493 iter/s, 0.207688s/100 iters), loss = 0.119313
I0428 20:25:17.233017  2559 solver.cpp:238]     Train net output #0: loss = 0.119313 (* 1 = 0.119313 loss)
I0428 20:25:17.233031  2559 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:25:17.433231  2559 solver.cpp:219] Iteration 700 (499.543 iter/s, 0.200183s/100 iters), loss = 0.279236
I0428 20:25:17.433290  2559 solver.cpp:238]     Train net output #0: loss = 0.279236 (* 1 = 0.279236 loss)
I0428 20:25:17.433305  2559 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:25:17.641185  2559 solver.cpp:219] Iteration 800 (481.046 iter/s, 0.20788s/100 iters), loss = 0.162587
I0428 20:25:17.641225  2559 solver.cpp:238]     Train net output #0: loss = 0.162587 (* 1 = 0.162587 loss)
I0428 20:25:17.641235  2559 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:25:17.852017  2559 solver.cpp:219] Iteration 900 (474.439 iter/s, 0.210775s/100 iters), loss = 0.208011
I0428 20:25:17.852069  2559 solver.cpp:238]     Train net output #0: loss = 0.208011 (* 1 = 0.208011 loss)
I0428 20:25:17.852082  2559 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:25:17.921258  2567 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:18.058329  2559 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:25:18.060086  2559 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:25:18.061239  2559 solver.cpp:311] Iteration 1000, loss = 0.137884
I0428 20:25:18.061270  2559 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:25:18.159826  2568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:18.162225  2559 solver.cpp:398]     Test net output #0: accuracy = 0.9572
I0428 20:25:18.162250  2559 solver.cpp:398]     Test net output #1: loss = 0.131797 (* 1 = 0.131797 loss)
I0428 20:25:18.162256  2559 solver.cpp:316] Optimization Done.
I0428 20:25:18.162259  2559 caffe.cpp:259] Optimization Done.
