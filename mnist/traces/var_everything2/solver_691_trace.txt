I0428 19:53:35.231580 27803 caffe.cpp:218] Using GPUs 0
I0428 19:53:35.268173 27803 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:35.722882 27803 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test691.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:35.723017 27803 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test691.prototxt
I0428 19:53:35.723341 27803 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:35.723357 27803 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:35.723435 27803 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:35.723500 27803 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:35.723594 27803 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:35.723614 27803 net.cpp:86] Creating Layer mnist
I0428 19:53:35.723621 27803 net.cpp:382] mnist -> data
I0428 19:53:35.723640 27803 net.cpp:382] mnist -> label
I0428 19:53:35.724656 27803 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:35.727006 27803 net.cpp:124] Setting up mnist
I0428 19:53:35.727037 27803 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:35.727041 27803 net.cpp:131] Top shape: 64 (64)
I0428 19:53:35.727044 27803 net.cpp:139] Memory required for data: 200960
I0428 19:53:35.727051 27803 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:35.727064 27803 net.cpp:86] Creating Layer conv0
I0428 19:53:35.727080 27803 net.cpp:408] conv0 <- data
I0428 19:53:35.727092 27803 net.cpp:382] conv0 -> conv0
I0428 19:53:35.957829 27803 net.cpp:124] Setting up conv0
I0428 19:53:35.957871 27803 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:35.957875 27803 net.cpp:139] Memory required for data: 938240
I0428 19:53:35.957890 27803 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:35.957903 27803 net.cpp:86] Creating Layer pool0
I0428 19:53:35.957907 27803 net.cpp:408] pool0 <- conv0
I0428 19:53:35.957928 27803 net.cpp:382] pool0 -> pool0
I0428 19:53:35.957988 27803 net.cpp:124] Setting up pool0
I0428 19:53:35.957995 27803 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:35.957998 27803 net.cpp:139] Memory required for data: 1122560
I0428 19:53:35.958000 27803 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:35.958010 27803 net.cpp:86] Creating Layer conv1
I0428 19:53:35.958014 27803 net.cpp:408] conv1 <- pool0
I0428 19:53:35.958019 27803 net.cpp:382] conv1 -> conv1
I0428 19:53:35.960789 27803 net.cpp:124] Setting up conv1
I0428 19:53:35.960803 27803 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:35.960830 27803 net.cpp:139] Memory required for data: 1941760
I0428 19:53:35.960839 27803 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:35.960862 27803 net.cpp:86] Creating Layer pool1
I0428 19:53:35.960865 27803 net.cpp:408] pool1 <- conv1
I0428 19:53:35.960870 27803 net.cpp:382] pool1 -> pool1
I0428 19:53:35.960940 27803 net.cpp:124] Setting up pool1
I0428 19:53:35.960947 27803 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:35.960964 27803 net.cpp:139] Memory required for data: 2146560
I0428 19:53:35.960968 27803 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:35.960974 27803 net.cpp:86] Creating Layer ip1
I0428 19:53:35.960978 27803 net.cpp:408] ip1 <- pool1
I0428 19:53:35.960983 27803 net.cpp:382] ip1 -> ip1
I0428 19:53:35.961205 27803 net.cpp:124] Setting up ip1
I0428 19:53:35.961212 27803 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:35.961215 27803 net.cpp:139] Memory required for data: 2152960
I0428 19:53:35.961222 27803 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:35.961228 27803 net.cpp:86] Creating Layer relu1
I0428 19:53:35.961231 27803 net.cpp:408] relu1 <- ip1
I0428 19:53:35.961236 27803 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:35.961414 27803 net.cpp:124] Setting up relu1
I0428 19:53:35.961423 27803 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:35.961426 27803 net.cpp:139] Memory required for data: 2159360
I0428 19:53:35.961428 27803 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:35.961434 27803 net.cpp:86] Creating Layer ip2
I0428 19:53:35.961437 27803 net.cpp:408] ip2 <- ip1
I0428 19:53:35.961441 27803 net.cpp:382] ip2 -> ip2
I0428 19:53:35.962483 27803 net.cpp:124] Setting up ip2
I0428 19:53:35.962496 27803 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:35.962514 27803 net.cpp:139] Memory required for data: 2172160
I0428 19:53:35.962520 27803 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:35.962527 27803 net.cpp:86] Creating Layer relu2
I0428 19:53:35.962530 27803 net.cpp:408] relu2 <- ip2
I0428 19:53:35.962534 27803 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:35.963304 27803 net.cpp:124] Setting up relu2
I0428 19:53:35.963316 27803 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:35.963336 27803 net.cpp:139] Memory required for data: 2184960
I0428 19:53:35.963340 27803 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:35.963348 27803 net.cpp:86] Creating Layer ip3
I0428 19:53:35.963351 27803 net.cpp:408] ip3 <- ip2
I0428 19:53:35.963357 27803 net.cpp:382] ip3 -> ip3
I0428 19:53:35.963491 27803 net.cpp:124] Setting up ip3
I0428 19:53:35.963500 27803 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:35.963502 27803 net.cpp:139] Memory required for data: 2187520
I0428 19:53:35.963510 27803 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:35.963516 27803 net.cpp:86] Creating Layer relu3
I0428 19:53:35.963520 27803 net.cpp:408] relu3 <- ip3
I0428 19:53:35.963523 27803 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:35.963696 27803 net.cpp:124] Setting up relu3
I0428 19:53:35.963704 27803 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:35.963707 27803 net.cpp:139] Memory required for data: 2190080
I0428 19:53:35.963711 27803 layer_factory.hpp:77] Creating layer loss
I0428 19:53:35.963716 27803 net.cpp:86] Creating Layer loss
I0428 19:53:35.963719 27803 net.cpp:408] loss <- ip3
I0428 19:53:35.963723 27803 net.cpp:408] loss <- label
I0428 19:53:35.963728 27803 net.cpp:382] loss -> loss
I0428 19:53:35.963745 27803 layer_factory.hpp:77] Creating layer loss
I0428 19:53:35.963980 27803 net.cpp:124] Setting up loss
I0428 19:53:35.963989 27803 net.cpp:131] Top shape: (1)
I0428 19:53:35.963994 27803 net.cpp:134]     with loss weight 1
I0428 19:53:35.964006 27803 net.cpp:139] Memory required for data: 2190084
I0428 19:53:35.964010 27803 net.cpp:200] loss needs backward computation.
I0428 19:53:35.964013 27803 net.cpp:200] relu3 needs backward computation.
I0428 19:53:35.964016 27803 net.cpp:200] ip3 needs backward computation.
I0428 19:53:35.964020 27803 net.cpp:200] relu2 needs backward computation.
I0428 19:53:35.964022 27803 net.cpp:200] ip2 needs backward computation.
I0428 19:53:35.964025 27803 net.cpp:200] relu1 needs backward computation.
I0428 19:53:35.964027 27803 net.cpp:200] ip1 needs backward computation.
I0428 19:53:35.964030 27803 net.cpp:200] pool1 needs backward computation.
I0428 19:53:35.964033 27803 net.cpp:200] conv1 needs backward computation.
I0428 19:53:35.964036 27803 net.cpp:200] pool0 needs backward computation.
I0428 19:53:35.964040 27803 net.cpp:200] conv0 needs backward computation.
I0428 19:53:35.964042 27803 net.cpp:202] mnist does not need backward computation.
I0428 19:53:35.964046 27803 net.cpp:244] This network produces output loss
I0428 19:53:35.964069 27803 net.cpp:257] Network initialization done.
I0428 19:53:35.964442 27803 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test691.prototxt
I0428 19:53:35.964485 27803 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:35.964602 27803 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:35.964679 27803 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:35.964726 27803 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:35.964738 27803 net.cpp:86] Creating Layer mnist
I0428 19:53:35.964742 27803 net.cpp:382] mnist -> data
I0428 19:53:35.964751 27803 net.cpp:382] mnist -> label
I0428 19:53:35.964867 27803 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:35.966975 27803 net.cpp:124] Setting up mnist
I0428 19:53:35.967018 27803 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:35.967022 27803 net.cpp:131] Top shape: 100 (100)
I0428 19:53:35.967025 27803 net.cpp:139] Memory required for data: 314000
I0428 19:53:35.967046 27803 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:35.967051 27803 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:35.967056 27803 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:35.967059 27803 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:35.967067 27803 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:35.967171 27803 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:35.967180 27803 net.cpp:131] Top shape: 100 (100)
I0428 19:53:35.967183 27803 net.cpp:131] Top shape: 100 (100)
I0428 19:53:35.967186 27803 net.cpp:139] Memory required for data: 314800
I0428 19:53:35.967190 27803 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:35.967197 27803 net.cpp:86] Creating Layer conv0
I0428 19:53:35.967201 27803 net.cpp:408] conv0 <- data
I0428 19:53:35.967206 27803 net.cpp:382] conv0 -> conv0
I0428 19:53:35.968922 27803 net.cpp:124] Setting up conv0
I0428 19:53:35.968950 27803 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:35.968971 27803 net.cpp:139] Memory required for data: 1466800
I0428 19:53:35.968978 27803 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:35.968986 27803 net.cpp:86] Creating Layer pool0
I0428 19:53:35.968988 27803 net.cpp:408] pool0 <- conv0
I0428 19:53:35.968993 27803 net.cpp:382] pool0 -> pool0
I0428 19:53:35.969029 27803 net.cpp:124] Setting up pool0
I0428 19:53:35.969034 27803 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:35.969038 27803 net.cpp:139] Memory required for data: 1754800
I0428 19:53:35.969040 27803 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:35.969048 27803 net.cpp:86] Creating Layer conv1
I0428 19:53:35.969051 27803 net.cpp:408] conv1 <- pool0
I0428 19:53:35.969056 27803 net.cpp:382] conv1 -> conv1
I0428 19:53:35.970667 27803 net.cpp:124] Setting up conv1
I0428 19:53:35.970696 27803 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:35.970700 27803 net.cpp:139] Memory required for data: 3034800
I0428 19:53:35.970710 27803 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:35.970717 27803 net.cpp:86] Creating Layer pool1
I0428 19:53:35.970721 27803 net.cpp:408] pool1 <- conv1
I0428 19:53:35.970726 27803 net.cpp:382] pool1 -> pool1
I0428 19:53:35.970762 27803 net.cpp:124] Setting up pool1
I0428 19:53:35.970768 27803 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:35.970772 27803 net.cpp:139] Memory required for data: 3354800
I0428 19:53:35.970774 27803 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:35.970780 27803 net.cpp:86] Creating Layer ip1
I0428 19:53:35.970783 27803 net.cpp:408] ip1 <- pool1
I0428 19:53:35.970788 27803 net.cpp:382] ip1 -> ip1
I0428 19:53:35.971025 27803 net.cpp:124] Setting up ip1
I0428 19:53:35.971035 27803 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:35.971050 27803 net.cpp:139] Memory required for data: 3364800
I0428 19:53:35.971058 27803 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:35.971070 27803 net.cpp:86] Creating Layer relu1
I0428 19:53:35.971083 27803 net.cpp:408] relu1 <- ip1
I0428 19:53:35.971088 27803 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:35.971263 27803 net.cpp:124] Setting up relu1
I0428 19:53:35.971272 27803 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:35.971282 27803 net.cpp:139] Memory required for data: 3374800
I0428 19:53:35.971285 27803 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:35.971292 27803 net.cpp:86] Creating Layer ip2
I0428 19:53:35.971297 27803 net.cpp:408] ip2 <- ip1
I0428 19:53:35.971302 27803 net.cpp:382] ip2 -> ip2
I0428 19:53:35.971412 27803 net.cpp:124] Setting up ip2
I0428 19:53:35.971420 27803 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:35.971422 27803 net.cpp:139] Memory required for data: 3394800
I0428 19:53:35.971428 27803 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:35.971432 27803 net.cpp:86] Creating Layer relu2
I0428 19:53:35.971436 27803 net.cpp:408] relu2 <- ip2
I0428 19:53:35.971441 27803 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:35.971659 27803 net.cpp:124] Setting up relu2
I0428 19:53:35.971668 27803 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:35.971675 27803 net.cpp:139] Memory required for data: 3414800
I0428 19:53:35.971679 27803 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:35.971684 27803 net.cpp:86] Creating Layer ip3
I0428 19:53:35.971688 27803 net.cpp:408] ip3 <- ip2
I0428 19:53:35.971693 27803 net.cpp:382] ip3 -> ip3
I0428 19:53:35.971793 27803 net.cpp:124] Setting up ip3
I0428 19:53:35.971801 27803 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:35.971803 27803 net.cpp:139] Memory required for data: 3418800
I0428 19:53:35.971812 27803 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:35.971817 27803 net.cpp:86] Creating Layer relu3
I0428 19:53:35.971819 27803 net.cpp:408] relu3 <- ip3
I0428 19:53:35.971823 27803 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:35.972667 27803 net.cpp:124] Setting up relu3
I0428 19:53:35.972678 27803 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:35.972699 27803 net.cpp:139] Memory required for data: 3422800
I0428 19:53:35.972703 27803 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:35.972709 27803 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:35.972712 27803 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:35.972718 27803 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:35.972723 27803 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:35.972779 27803 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:35.972786 27803 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:35.972790 27803 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:35.972792 27803 net.cpp:139] Memory required for data: 3430800
I0428 19:53:35.972795 27803 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:35.972805 27803 net.cpp:86] Creating Layer accuracy
I0428 19:53:35.972808 27803 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:35.972836 27803 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:35.972857 27803 net.cpp:382] accuracy -> accuracy
I0428 19:53:35.972865 27803 net.cpp:124] Setting up accuracy
I0428 19:53:35.972869 27803 net.cpp:131] Top shape: (1)
I0428 19:53:35.972893 27803 net.cpp:139] Memory required for data: 3430804
I0428 19:53:35.972896 27803 layer_factory.hpp:77] Creating layer loss
I0428 19:53:35.972901 27803 net.cpp:86] Creating Layer loss
I0428 19:53:35.972904 27803 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:35.972909 27803 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:35.972919 27803 net.cpp:382] loss -> loss
I0428 19:53:35.972926 27803 layer_factory.hpp:77] Creating layer loss
I0428 19:53:35.973244 27803 net.cpp:124] Setting up loss
I0428 19:53:35.973268 27803 net.cpp:131] Top shape: (1)
I0428 19:53:35.973287 27803 net.cpp:134]     with loss weight 1
I0428 19:53:35.973309 27803 net.cpp:139] Memory required for data: 3430808
I0428 19:53:35.973322 27803 net.cpp:200] loss needs backward computation.
I0428 19:53:35.973327 27803 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:35.973330 27803 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:35.973335 27803 net.cpp:200] relu3 needs backward computation.
I0428 19:53:35.973337 27803 net.cpp:200] ip3 needs backward computation.
I0428 19:53:35.973340 27803 net.cpp:200] relu2 needs backward computation.
I0428 19:53:35.973343 27803 net.cpp:200] ip2 needs backward computation.
I0428 19:53:35.973346 27803 net.cpp:200] relu1 needs backward computation.
I0428 19:53:35.973351 27803 net.cpp:200] ip1 needs backward computation.
I0428 19:53:35.973353 27803 net.cpp:200] pool1 needs backward computation.
I0428 19:53:35.973356 27803 net.cpp:200] conv1 needs backward computation.
I0428 19:53:35.973359 27803 net.cpp:200] pool0 needs backward computation.
I0428 19:53:35.973362 27803 net.cpp:200] conv0 needs backward computation.
I0428 19:53:35.973367 27803 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:35.973371 27803 net.cpp:202] mnist does not need backward computation.
I0428 19:53:35.973379 27803 net.cpp:244] This network produces output accuracy
I0428 19:53:35.973382 27803 net.cpp:244] This network produces output loss
I0428 19:53:35.973393 27803 net.cpp:257] Network initialization done.
I0428 19:53:35.973439 27803 solver.cpp:56] Solver scaffolding done.
I0428 19:53:35.973793 27803 caffe.cpp:248] Starting Optimization
I0428 19:53:35.973799 27803 solver.cpp:273] Solving LeNet
I0428 19:53:35.973803 27803 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:35.974778 27803 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:35.979001 27803 blocking_queue.cpp:49] Waiting for data
I0428 19:53:36.050074 27810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:36.050652 27803 solver.cpp:398]     Test net output #0: accuracy = 0.1283
I0428 19:53:36.050679 27803 solver.cpp:398]     Test net output #1: loss = 2.30822 (* 1 = 2.30822 loss)
I0428 19:53:36.055263 27803 solver.cpp:219] Iteration 0 (0 iter/s, 0.0814111s/100 iters), loss = 2.29418
I0428 19:53:36.055312 27803 solver.cpp:238]     Train net output #0: loss = 2.29418 (* 1 = 2.29418 loss)
I0428 19:53:36.055332 27803 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:36.177598 27803 solver.cpp:219] Iteration 100 (817.816 iter/s, 0.122277s/100 iters), loss = 1.07191
I0428 19:53:36.177639 27803 solver.cpp:238]     Train net output #0: loss = 1.07191 (* 1 = 1.07191 loss)
I0428 19:53:36.177649 27803 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:36.285722 27803 solver.cpp:219] Iteration 200 (925.301 iter/s, 0.108073s/100 iters), loss = 0.529154
I0428 19:53:36.285748 27803 solver.cpp:238]     Train net output #0: loss = 0.529154 (* 1 = 0.529154 loss)
I0428 19:53:36.285755 27803 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:36.400415 27803 solver.cpp:219] Iteration 300 (872.219 iter/s, 0.11465s/100 iters), loss = 0.609793
I0428 19:53:36.400459 27803 solver.cpp:238]     Train net output #0: loss = 0.609793 (* 1 = 0.609793 loss)
I0428 19:53:36.400466 27803 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:36.514601 27803 solver.cpp:219] Iteration 400 (876.171 iter/s, 0.114133s/100 iters), loss = 0.445097
I0428 19:53:36.514636 27803 solver.cpp:238]     Train net output #0: loss = 0.445097 (* 1 = 0.445097 loss)
I0428 19:53:36.514644 27803 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:36.627769 27803 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:36.681704 27810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:36.682222 27803 solver.cpp:398]     Test net output #0: accuracy = 0.8571
I0428 19:53:36.682248 27803 solver.cpp:398]     Test net output #1: loss = 0.384856 (* 1 = 0.384856 loss)
I0428 19:53:36.683390 27803 solver.cpp:219] Iteration 500 (592.628 iter/s, 0.16874s/100 iters), loss = 0.251511
I0428 19:53:36.683428 27803 solver.cpp:238]     Train net output #0: loss = 0.251511 (* 1 = 0.251511 loss)
I0428 19:53:36.683454 27803 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:36.798410 27803 solver.cpp:219] Iteration 600 (869.769 iter/s, 0.114973s/100 iters), loss = 0.236833
I0428 19:53:36.798445 27803 solver.cpp:238]     Train net output #0: loss = 0.236833 (* 1 = 0.236833 loss)
I0428 19:53:36.798454 27803 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:36.910614 27803 solver.cpp:219] Iteration 700 (891.602 iter/s, 0.112158s/100 iters), loss = 0.538592
I0428 19:53:36.910650 27803 solver.cpp:238]     Train net output #0: loss = 0.538592 (* 1 = 0.538592 loss)
I0428 19:53:36.910657 27803 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:37.024005 27803 solver.cpp:219] Iteration 800 (882.274 iter/s, 0.113343s/100 iters), loss = 0.505486
I0428 19:53:37.024040 27803 solver.cpp:238]     Train net output #0: loss = 0.505486 (* 1 = 0.505486 loss)
I0428 19:53:37.024049 27803 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:37.133698 27803 solver.cpp:219] Iteration 900 (912.019 iter/s, 0.109647s/100 iters), loss = 0.476351
I0428 19:53:37.133741 27803 solver.cpp:238]     Train net output #0: loss = 0.476351 (* 1 = 0.476351 loss)
I0428 19:53:37.133749 27803 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:37.169864 27809 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:37.242164 27803 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:37.243477 27803 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:37.244179 27803 solver.cpp:311] Iteration 1000, loss = 0.373148
I0428 19:53:37.244199 27803 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:37.319388 27810 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:37.319926 27803 solver.cpp:398]     Test net output #0: accuracy = 0.8778
I0428 19:53:37.319964 27803 solver.cpp:398]     Test net output #1: loss = 0.314998 (* 1 = 0.314998 loss)
I0428 19:53:37.319969 27803 solver.cpp:316] Optimization Done.
I0428 19:53:37.319972 27803 caffe.cpp:259] Optimization Done.
