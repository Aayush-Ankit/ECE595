I0428 20:16:04.579399   581 caffe.cpp:218] Using GPUs 0
I0428 20:16:04.611711   581 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:05.090845   581 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1262.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:05.090981   581 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1262.prototxt
I0428 20:16:05.091326   581 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:05.091341   581 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:05.091425   581 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:05.091503   581 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:05.091584   581 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:05.091603   581 net.cpp:86] Creating Layer mnist
I0428 20:16:05.091610   581 net.cpp:382] mnist -> data
I0428 20:16:05.091629   581 net.cpp:382] mnist -> label
I0428 20:16:05.092602   581 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:05.094791   581 net.cpp:124] Setting up mnist
I0428 20:16:05.094835   581 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:05.094840   581 net.cpp:131] Top shape: 64 (64)
I0428 20:16:05.094842   581 net.cpp:139] Memory required for data: 200960
I0428 20:16:05.094847   581 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:05.094892   581 net.cpp:86] Creating Layer conv0
I0428 20:16:05.094908   581 net.cpp:408] conv0 <- data
I0428 20:16:05.094918   581 net.cpp:382] conv0 -> conv0
I0428 20:16:05.324589   581 net.cpp:124] Setting up conv0
I0428 20:16:05.324630   581 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:05.324633   581 net.cpp:139] Memory required for data: 7573760
I0428 20:16:05.324647   581 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:05.324659   581 net.cpp:86] Creating Layer pool0
I0428 20:16:05.324662   581 net.cpp:408] pool0 <- conv0
I0428 20:16:05.324668   581 net.cpp:382] pool0 -> pool0
I0428 20:16:05.324728   581 net.cpp:124] Setting up pool0
I0428 20:16:05.324734   581 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:05.324736   581 net.cpp:139] Memory required for data: 9416960
I0428 20:16:05.324739   581 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:05.324750   581 net.cpp:86] Creating Layer conv1
I0428 20:16:05.324754   581 net.cpp:408] conv1 <- pool0
I0428 20:16:05.324759   581 net.cpp:382] conv1 -> conv1
I0428 20:16:05.327646   581 net.cpp:124] Setting up conv1
I0428 20:16:05.327674   581 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:05.327693   581 net.cpp:139] Memory required for data: 9498880
I0428 20:16:05.327702   581 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:05.327708   581 net.cpp:86] Creating Layer pool1
I0428 20:16:05.327711   581 net.cpp:408] pool1 <- conv1
I0428 20:16:05.327716   581 net.cpp:382] pool1 -> pool1
I0428 20:16:05.327782   581 net.cpp:124] Setting up pool1
I0428 20:16:05.327788   581 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:05.327791   581 net.cpp:139] Memory required for data: 9519360
I0428 20:16:05.327795   581 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:05.327801   581 net.cpp:86] Creating Layer ip1
I0428 20:16:05.327805   581 net.cpp:408] ip1 <- pool1
I0428 20:16:05.327810   581 net.cpp:382] ip1 -> ip1
I0428 20:16:05.327908   581 net.cpp:124] Setting up ip1
I0428 20:16:05.327915   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.327919   581 net.cpp:139] Memory required for data: 9521920
I0428 20:16:05.327925   581 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:05.327930   581 net.cpp:86] Creating Layer relu1
I0428 20:16:05.327934   581 net.cpp:408] relu1 <- ip1
I0428 20:16:05.327939   581 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:05.328115   581 net.cpp:124] Setting up relu1
I0428 20:16:05.328124   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.328126   581 net.cpp:139] Memory required for data: 9524480
I0428 20:16:05.328130   581 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:05.328135   581 net.cpp:86] Creating Layer ip2
I0428 20:16:05.328138   581 net.cpp:408] ip2 <- ip1
I0428 20:16:05.328142   581 net.cpp:382] ip2 -> ip2
I0428 20:16:05.328230   581 net.cpp:124] Setting up ip2
I0428 20:16:05.328238   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.328251   581 net.cpp:139] Memory required for data: 9527040
I0428 20:16:05.328256   581 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:05.328261   581 net.cpp:86] Creating Layer relu2
I0428 20:16:05.328264   581 net.cpp:408] relu2 <- ip2
I0428 20:16:05.328269   581 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:05.329036   581 net.cpp:124] Setting up relu2
I0428 20:16:05.329049   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.329067   581 net.cpp:139] Memory required for data: 9529600
I0428 20:16:05.329071   581 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:05.329078   581 net.cpp:86] Creating Layer ip3
I0428 20:16:05.329082   581 net.cpp:408] ip3 <- ip2
I0428 20:16:05.329087   581 net.cpp:382] ip3 -> ip3
I0428 20:16:05.329196   581 net.cpp:124] Setting up ip3
I0428 20:16:05.329203   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.329206   581 net.cpp:139] Memory required for data: 9532160
I0428 20:16:05.329215   581 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:05.329219   581 net.cpp:86] Creating Layer relu3
I0428 20:16:05.329222   581 net.cpp:408] relu3 <- ip3
I0428 20:16:05.329226   581 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:05.329387   581 net.cpp:124] Setting up relu3
I0428 20:16:05.329396   581 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:05.329398   581 net.cpp:139] Memory required for data: 9534720
I0428 20:16:05.329401   581 layer_factory.hpp:77] Creating layer loss
I0428 20:16:05.329406   581 net.cpp:86] Creating Layer loss
I0428 20:16:05.329409   581 net.cpp:408] loss <- ip3
I0428 20:16:05.329413   581 net.cpp:408] loss <- label
I0428 20:16:05.329418   581 net.cpp:382] loss -> loss
I0428 20:16:05.329450   581 layer_factory.hpp:77] Creating layer loss
I0428 20:16:05.329675   581 net.cpp:124] Setting up loss
I0428 20:16:05.329684   581 net.cpp:131] Top shape: (1)
I0428 20:16:05.329687   581 net.cpp:134]     with loss weight 1
I0428 20:16:05.329701   581 net.cpp:139] Memory required for data: 9534724
I0428 20:16:05.329705   581 net.cpp:200] loss needs backward computation.
I0428 20:16:05.329710   581 net.cpp:200] relu3 needs backward computation.
I0428 20:16:05.329723   581 net.cpp:200] ip3 needs backward computation.
I0428 20:16:05.329726   581 net.cpp:200] relu2 needs backward computation.
I0428 20:16:05.329728   581 net.cpp:200] ip2 needs backward computation.
I0428 20:16:05.329731   581 net.cpp:200] relu1 needs backward computation.
I0428 20:16:05.329735   581 net.cpp:200] ip1 needs backward computation.
I0428 20:16:05.329737   581 net.cpp:200] pool1 needs backward computation.
I0428 20:16:05.329741   581 net.cpp:200] conv1 needs backward computation.
I0428 20:16:05.329743   581 net.cpp:200] pool0 needs backward computation.
I0428 20:16:05.329746   581 net.cpp:200] conv0 needs backward computation.
I0428 20:16:05.329749   581 net.cpp:202] mnist does not need backward computation.
I0428 20:16:05.329752   581 net.cpp:244] This network produces output loss
I0428 20:16:05.329761   581 net.cpp:257] Network initialization done.
I0428 20:16:05.330165   581 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1262.prototxt
I0428 20:16:05.330209   581 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:05.330305   581 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:05.330391   581 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:05.330471   581 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:05.330484   581 net.cpp:86] Creating Layer mnist
I0428 20:16:05.330489   581 net.cpp:382] mnist -> data
I0428 20:16:05.330497   581 net.cpp:382] mnist -> label
I0428 20:16:05.330591   581 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:05.332680   581 net.cpp:124] Setting up mnist
I0428 20:16:05.332708   581 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:05.332713   581 net.cpp:131] Top shape: 100 (100)
I0428 20:16:05.332717   581 net.cpp:139] Memory required for data: 314000
I0428 20:16:05.332721   581 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:05.332756   581 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:05.332762   581 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:05.332767   581 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:05.332773   581 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:05.332836   581 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:05.332842   581 net.cpp:131] Top shape: 100 (100)
I0428 20:16:05.332846   581 net.cpp:131] Top shape: 100 (100)
I0428 20:16:05.332849   581 net.cpp:139] Memory required for data: 314800
I0428 20:16:05.332866   581 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:05.332896   581 net.cpp:86] Creating Layer conv0
I0428 20:16:05.332901   581 net.cpp:408] conv0 <- data
I0428 20:16:05.332906   581 net.cpp:382] conv0 -> conv0
I0428 20:16:05.334692   581 net.cpp:124] Setting up conv0
I0428 20:16:05.334704   581 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:05.334708   581 net.cpp:139] Memory required for data: 11834800
I0428 20:16:05.334717   581 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:05.334723   581 net.cpp:86] Creating Layer pool0
I0428 20:16:05.334738   581 net.cpp:408] pool0 <- conv0
I0428 20:16:05.334741   581 net.cpp:382] pool0 -> pool0
I0428 20:16:05.334777   581 net.cpp:124] Setting up pool0
I0428 20:16:05.334782   581 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:05.334785   581 net.cpp:139] Memory required for data: 14714800
I0428 20:16:05.334789   581 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:05.334795   581 net.cpp:86] Creating Layer conv1
I0428 20:16:05.334800   581 net.cpp:408] conv1 <- pool0
I0428 20:16:05.334803   581 net.cpp:382] conv1 -> conv1
I0428 20:16:05.336407   581 net.cpp:124] Setting up conv1
I0428 20:16:05.336421   581 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:05.336424   581 net.cpp:139] Memory required for data: 14842800
I0428 20:16:05.336439   581 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:05.336446   581 net.cpp:86] Creating Layer pool1
I0428 20:16:05.336449   581 net.cpp:408] pool1 <- conv1
I0428 20:16:05.336454   581 net.cpp:382] pool1 -> pool1
I0428 20:16:05.336490   581 net.cpp:124] Setting up pool1
I0428 20:16:05.336495   581 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:05.336498   581 net.cpp:139] Memory required for data: 14874800
I0428 20:16:05.336500   581 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:05.336511   581 net.cpp:86] Creating Layer ip1
I0428 20:16:05.336514   581 net.cpp:408] ip1 <- pool1
I0428 20:16:05.336519   581 net.cpp:382] ip1 -> ip1
I0428 20:16:05.336616   581 net.cpp:124] Setting up ip1
I0428 20:16:05.336637   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.336648   581 net.cpp:139] Memory required for data: 14878800
I0428 20:16:05.336655   581 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:05.336660   581 net.cpp:86] Creating Layer relu1
I0428 20:16:05.336663   581 net.cpp:408] relu1 <- ip1
I0428 20:16:05.336668   581 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:05.336889   581 net.cpp:124] Setting up relu1
I0428 20:16:05.336899   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.336902   581 net.cpp:139] Memory required for data: 14882800
I0428 20:16:05.336905   581 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:05.336921   581 net.cpp:86] Creating Layer ip2
I0428 20:16:05.336925   581 net.cpp:408] ip2 <- ip1
I0428 20:16:05.336936   581 net.cpp:382] ip2 -> ip2
I0428 20:16:05.337055   581 net.cpp:124] Setting up ip2
I0428 20:16:05.337062   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.337065   581 net.cpp:139] Memory required for data: 14886800
I0428 20:16:05.337086   581 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:05.337090   581 net.cpp:86] Creating Layer relu2
I0428 20:16:05.337113   581 net.cpp:408] relu2 <- ip2
I0428 20:16:05.337117   581 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:05.337287   581 net.cpp:124] Setting up relu2
I0428 20:16:05.337296   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.337306   581 net.cpp:139] Memory required for data: 14890800
I0428 20:16:05.337307   581 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:05.337313   581 net.cpp:86] Creating Layer ip3
I0428 20:16:05.337316   581 net.cpp:408] ip3 <- ip2
I0428 20:16:05.337322   581 net.cpp:382] ip3 -> ip3
I0428 20:16:05.337450   581 net.cpp:124] Setting up ip3
I0428 20:16:05.337456   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.337460   581 net.cpp:139] Memory required for data: 14894800
I0428 20:16:05.337466   581 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:05.337471   581 net.cpp:86] Creating Layer relu3
I0428 20:16:05.337473   581 net.cpp:408] relu3 <- ip3
I0428 20:16:05.337478   581 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:05.338310   581 net.cpp:124] Setting up relu3
I0428 20:16:05.338322   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.338325   581 net.cpp:139] Memory required for data: 14898800
I0428 20:16:05.338330   581 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:05.338335   581 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:05.338338   581 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:05.338345   581 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:05.338351   581 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:05.338394   581 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:05.338399   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.338403   581 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:05.338405   581 net.cpp:139] Memory required for data: 14906800
I0428 20:16:05.338408   581 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:05.338418   581 net.cpp:86] Creating Layer accuracy
I0428 20:16:05.338421   581 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:05.338426   581 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:05.338431   581 net.cpp:382] accuracy -> accuracy
I0428 20:16:05.338446   581 net.cpp:124] Setting up accuracy
I0428 20:16:05.338450   581 net.cpp:131] Top shape: (1)
I0428 20:16:05.338459   581 net.cpp:139] Memory required for data: 14906804
I0428 20:16:05.338462   581 layer_factory.hpp:77] Creating layer loss
I0428 20:16:05.338482   581 net.cpp:86] Creating Layer loss
I0428 20:16:05.338485   581 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:05.338503   581 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:05.338513   581 net.cpp:382] loss -> loss
I0428 20:16:05.338518   581 layer_factory.hpp:77] Creating layer loss
I0428 20:16:05.338758   581 net.cpp:124] Setting up loss
I0428 20:16:05.338768   581 net.cpp:131] Top shape: (1)
I0428 20:16:05.338771   581 net.cpp:134]     with loss weight 1
I0428 20:16:05.338793   581 net.cpp:139] Memory required for data: 14906808
I0428 20:16:05.338801   581 net.cpp:200] loss needs backward computation.
I0428 20:16:05.338804   581 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:05.338807   581 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:05.338816   581 net.cpp:200] relu3 needs backward computation.
I0428 20:16:05.338819   581 net.cpp:200] ip3 needs backward computation.
I0428 20:16:05.338821   581 net.cpp:200] relu2 needs backward computation.
I0428 20:16:05.338824   581 net.cpp:200] ip2 needs backward computation.
I0428 20:16:05.338826   581 net.cpp:200] relu1 needs backward computation.
I0428 20:16:05.338835   581 net.cpp:200] ip1 needs backward computation.
I0428 20:16:05.338836   581 net.cpp:200] pool1 needs backward computation.
I0428 20:16:05.338840   581 net.cpp:200] conv1 needs backward computation.
I0428 20:16:05.338842   581 net.cpp:200] pool0 needs backward computation.
I0428 20:16:05.338845   581 net.cpp:200] conv0 needs backward computation.
I0428 20:16:05.338850   581 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:05.338853   581 net.cpp:202] mnist does not need backward computation.
I0428 20:16:05.338855   581 net.cpp:244] This network produces output accuracy
I0428 20:16:05.338858   581 net.cpp:244] This network produces output loss
I0428 20:16:05.338886   581 net.cpp:257] Network initialization done.
I0428 20:16:05.338942   581 solver.cpp:56] Solver scaffolding done.
I0428 20:16:05.339347   581 caffe.cpp:248] Starting Optimization
I0428 20:16:05.339354   581 solver.cpp:273] Solving LeNet
I0428 20:16:05.339357   581 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:05.340214   581 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:05.346073   581 blocking_queue.cpp:49] Waiting for data
I0428 20:16:05.416544   588 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:05.417279   581 solver.cpp:398]     Test net output #0: accuracy = 0.1621
I0428 20:16:05.417315   581 solver.cpp:398]     Test net output #1: loss = 2.29738 (* 1 = 2.29738 loss)
I0428 20:16:05.421779   581 solver.cpp:219] Iteration 0 (-4.5826e-31 iter/s, 0.082389s/100 iters), loss = 2.30271
I0428 20:16:05.421802   581 solver.cpp:238]     Train net output #0: loss = 2.30271 (* 1 = 2.30271 loss)
I0428 20:16:05.421828   581 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:05.536708   581 solver.cpp:219] Iteration 100 (870.384 iter/s, 0.114892s/100 iters), loss = 0.813963
I0428 20:16:05.536733   581 solver.cpp:238]     Train net output #0: loss = 0.813963 (* 1 = 0.813963 loss)
I0428 20:16:05.536756   581 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:05.654016   581 solver.cpp:219] Iteration 200 (852.722 iter/s, 0.117272s/100 iters), loss = 0.338029
I0428 20:16:05.654057   581 solver.cpp:238]     Train net output #0: loss = 0.338029 (* 1 = 0.338029 loss)
I0428 20:16:05.654063   581 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:05.771610   581 solver.cpp:219] Iteration 300 (850.651 iter/s, 0.117557s/100 iters), loss = 0.367296
I0428 20:16:05.771636   581 solver.cpp:238]     Train net output #0: loss = 0.367296 (* 1 = 0.367296 loss)
I0428 20:16:05.771643   581 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:05.888523   581 solver.cpp:219] Iteration 400 (855.606 iter/s, 0.116876s/100 iters), loss = 0.219276
I0428 20:16:05.888566   581 solver.cpp:238]     Train net output #0: loss = 0.219276 (* 1 = 0.219276 loss)
I0428 20:16:05.888573   581 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:06.006639   581 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:06.083148   588 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:06.083895   581 solver.cpp:398]     Test net output #0: accuracy = 0.9405
I0428 20:16:06.083914   581 solver.cpp:398]     Test net output #1: loss = 0.20368 (* 1 = 0.20368 loss)
I0428 20:16:06.085075   581 solver.cpp:219] Iteration 500 (508.923 iter/s, 0.196493s/100 iters), loss = 0.154509
I0428 20:16:06.085120   581 solver.cpp:238]     Train net output #0: loss = 0.154509 (* 1 = 0.154509 loss)
I0428 20:16:06.085129   581 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:06.202687   581 solver.cpp:219] Iteration 600 (850.66 iter/s, 0.117556s/100 iters), loss = 0.147493
I0428 20:16:06.202711   581 solver.cpp:238]     Train net output #0: loss = 0.147493 (* 1 = 0.147493 loss)
I0428 20:16:06.202734   581 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:06.319025   581 solver.cpp:219] Iteration 700 (859.832 iter/s, 0.116302s/100 iters), loss = 0.189984
I0428 20:16:06.319051   581 solver.cpp:238]     Train net output #0: loss = 0.189984 (* 1 = 0.189984 loss)
I0428 20:16:06.319077   581 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:06.436050   581 solver.cpp:219] Iteration 800 (854.782 iter/s, 0.116989s/100 iters), loss = 0.260017
I0428 20:16:06.436091   581 solver.cpp:238]     Train net output #0: loss = 0.260017 (* 1 = 0.260017 loss)
I0428 20:16:06.436097   581 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:06.561095   581 solver.cpp:219] Iteration 900 (799.976 iter/s, 0.125004s/100 iters), loss = 0.277569
I0428 20:16:06.561128   581 solver.cpp:238]     Train net output #0: loss = 0.277569 (* 1 = 0.277569 loss)
I0428 20:16:06.561136   581 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:06.601323   587 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:06.681182   581 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:06.682164   581 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:06.682919   581 solver.cpp:311] Iteration 1000, loss = 0.135904
I0428 20:16:06.682934   581 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:06.760367   588 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:06.761134   581 solver.cpp:398]     Test net output #0: accuracy = 0.9621
I0428 20:16:06.761168   581 solver.cpp:398]     Test net output #1: loss = 0.119305 (* 1 = 0.119305 loss)
I0428 20:16:06.761173   581 solver.cpp:316] Optimization Done.
I0428 20:16:06.761178   581 caffe.cpp:259] Optimization Done.
