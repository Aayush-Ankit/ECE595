I0428 19:47:32.363785 26220 caffe.cpp:218] Using GPUs 0
I0428 19:47:32.405141 26220 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:32.867883 26220 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test518.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:32.868041 26220 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test518.prototxt
I0428 19:47:32.868386 26220 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:32.868402 26220 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:32.868492 26220 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:47:32.868577 26220 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:32.868677 26220 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:32.868703 26220 net.cpp:86] Creating Layer mnist
I0428 19:47:32.868712 26220 net.cpp:382] mnist -> data
I0428 19:47:32.868737 26220 net.cpp:382] mnist -> label
I0428 19:47:32.869915 26220 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:32.872158 26220 net.cpp:124] Setting up mnist
I0428 19:47:32.872175 26220 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:32.872184 26220 net.cpp:131] Top shape: 64 (64)
I0428 19:47:32.872189 26220 net.cpp:139] Memory required for data: 200960
I0428 19:47:32.872198 26220 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:32.872218 26220 net.cpp:86] Creating Layer conv0
I0428 19:47:32.872228 26220 net.cpp:408] conv0 <- data
I0428 19:47:32.872257 26220 net.cpp:382] conv0 -> conv0
I0428 19:47:33.107570 26220 net.cpp:124] Setting up conv0
I0428 19:47:33.107611 26220 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:33.107615 26220 net.cpp:139] Memory required for data: 938240
I0428 19:47:33.107648 26220 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:33.107661 26220 net.cpp:86] Creating Layer pool0
I0428 19:47:33.107664 26220 net.cpp:408] pool0 <- conv0
I0428 19:47:33.107671 26220 net.cpp:382] pool0 -> pool0
I0428 19:47:33.107733 26220 net.cpp:124] Setting up pool0
I0428 19:47:33.107740 26220 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:33.107743 26220 net.cpp:139] Memory required for data: 1122560
I0428 19:47:33.107746 26220 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:33.107758 26220 net.cpp:86] Creating Layer conv1
I0428 19:47:33.107762 26220 net.cpp:408] conv1 <- pool0
I0428 19:47:33.107782 26220 net.cpp:382] conv1 -> conv1
I0428 19:47:33.109653 26220 net.cpp:124] Setting up conv1
I0428 19:47:33.109694 26220 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:33.109699 26220 net.cpp:139] Memory required for data: 1155328
I0428 19:47:33.109707 26220 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:33.109715 26220 net.cpp:86] Creating Layer pool1
I0428 19:47:33.109719 26220 net.cpp:408] pool1 <- conv1
I0428 19:47:33.109724 26220 net.cpp:382] pool1 -> pool1
I0428 19:47:33.109763 26220 net.cpp:124] Setting up pool1
I0428 19:47:33.109771 26220 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:33.109774 26220 net.cpp:139] Memory required for data: 1163520
I0428 19:47:33.109777 26220 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:33.109786 26220 net.cpp:86] Creating Layer ip1
I0428 19:47:33.109788 26220 net.cpp:408] ip1 <- pool1
I0428 19:47:33.109793 26220 net.cpp:382] ip1 -> ip1
I0428 19:47:33.110828 26220 net.cpp:124] Setting up ip1
I0428 19:47:33.110841 26220 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:33.110860 26220 net.cpp:139] Memory required for data: 1176320
I0428 19:47:33.110868 26220 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:33.110874 26220 net.cpp:86] Creating Layer relu1
I0428 19:47:33.110878 26220 net.cpp:408] relu1 <- ip1
I0428 19:47:33.110883 26220 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:33.111057 26220 net.cpp:124] Setting up relu1
I0428 19:47:33.111068 26220 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:33.111070 26220 net.cpp:139] Memory required for data: 1189120
I0428 19:47:33.111073 26220 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:33.111080 26220 net.cpp:86] Creating Layer ip2
I0428 19:47:33.111083 26220 net.cpp:408] ip2 <- ip1
I0428 19:47:33.111088 26220 net.cpp:382] ip2 -> ip2
I0428 19:47:33.111187 26220 net.cpp:124] Setting up ip2
I0428 19:47:33.111194 26220 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:33.111197 26220 net.cpp:139] Memory required for data: 1191680
I0428 19:47:33.111202 26220 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:33.111208 26220 net.cpp:86] Creating Layer relu2
I0428 19:47:33.111212 26220 net.cpp:408] relu2 <- ip2
I0428 19:47:33.111217 26220 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:33.111956 26220 net.cpp:124] Setting up relu2
I0428 19:47:33.111968 26220 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:33.111986 26220 net.cpp:139] Memory required for data: 1194240
I0428 19:47:33.111990 26220 layer_factory.hpp:77] Creating layer loss
I0428 19:47:33.111996 26220 net.cpp:86] Creating Layer loss
I0428 19:47:33.112000 26220 net.cpp:408] loss <- ip2
I0428 19:47:33.112004 26220 net.cpp:408] loss <- label
I0428 19:47:33.112010 26220 net.cpp:382] loss -> loss
I0428 19:47:33.112026 26220 layer_factory.hpp:77] Creating layer loss
I0428 19:47:33.112275 26220 net.cpp:124] Setting up loss
I0428 19:47:33.112285 26220 net.cpp:131] Top shape: (1)
I0428 19:47:33.112288 26220 net.cpp:134]     with loss weight 1
I0428 19:47:33.112305 26220 net.cpp:139] Memory required for data: 1194244
I0428 19:47:33.112308 26220 net.cpp:200] loss needs backward computation.
I0428 19:47:33.112313 26220 net.cpp:200] relu2 needs backward computation.
I0428 19:47:33.112315 26220 net.cpp:200] ip2 needs backward computation.
I0428 19:47:33.112318 26220 net.cpp:200] relu1 needs backward computation.
I0428 19:47:33.112321 26220 net.cpp:200] ip1 needs backward computation.
I0428 19:47:33.112324 26220 net.cpp:200] pool1 needs backward computation.
I0428 19:47:33.112351 26220 net.cpp:200] conv1 needs backward computation.
I0428 19:47:33.112355 26220 net.cpp:200] pool0 needs backward computation.
I0428 19:47:33.112359 26220 net.cpp:200] conv0 needs backward computation.
I0428 19:47:33.112361 26220 net.cpp:202] mnist does not need backward computation.
I0428 19:47:33.112365 26220 net.cpp:244] This network produces output loss
I0428 19:47:33.112373 26220 net.cpp:257] Network initialization done.
I0428 19:47:33.112684 26220 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test518.prototxt
I0428 19:47:33.112707 26220 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:33.112789 26220 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:47:33.112913 26220 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:33.112964 26220 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:33.112979 26220 net.cpp:86] Creating Layer mnist
I0428 19:47:33.112987 26220 net.cpp:382] mnist -> data
I0428 19:47:33.112995 26220 net.cpp:382] mnist -> label
I0428 19:47:33.113088 26220 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:33.115115 26220 net.cpp:124] Setting up mnist
I0428 19:47:33.115139 26220 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:33.115159 26220 net.cpp:131] Top shape: 100 (100)
I0428 19:47:33.115164 26220 net.cpp:139] Memory required for data: 314000
I0428 19:47:33.115166 26220 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:33.115173 26220 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:33.115176 26220 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:33.115181 26220 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:33.115187 26220 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:33.115255 26220 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:33.115273 26220 net.cpp:131] Top shape: 100 (100)
I0428 19:47:33.115278 26220 net.cpp:131] Top shape: 100 (100)
I0428 19:47:33.115280 26220 net.cpp:139] Memory required for data: 314800
I0428 19:47:33.115283 26220 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:33.115291 26220 net.cpp:86] Creating Layer conv0
I0428 19:47:33.115298 26220 net.cpp:408] conv0 <- data
I0428 19:47:33.115303 26220 net.cpp:382] conv0 -> conv0
I0428 19:47:33.116852 26220 net.cpp:124] Setting up conv0
I0428 19:47:33.116866 26220 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:33.116870 26220 net.cpp:139] Memory required for data: 1466800
I0428 19:47:33.116879 26220 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:33.116885 26220 net.cpp:86] Creating Layer pool0
I0428 19:47:33.116889 26220 net.cpp:408] pool0 <- conv0
I0428 19:47:33.116894 26220 net.cpp:382] pool0 -> pool0
I0428 19:47:33.116961 26220 net.cpp:124] Setting up pool0
I0428 19:47:33.116967 26220 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:33.116971 26220 net.cpp:139] Memory required for data: 1754800
I0428 19:47:33.116973 26220 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:33.116982 26220 net.cpp:86] Creating Layer conv1
I0428 19:47:33.116986 26220 net.cpp:408] conv1 <- pool0
I0428 19:47:33.116991 26220 net.cpp:382] conv1 -> conv1
I0428 19:47:33.119240 26220 net.cpp:124] Setting up conv1
I0428 19:47:33.119251 26220 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:33.119256 26220 net.cpp:139] Memory required for data: 1806000
I0428 19:47:33.119263 26220 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:33.119269 26220 net.cpp:86] Creating Layer pool1
I0428 19:47:33.119272 26220 net.cpp:408] pool1 <- conv1
I0428 19:47:33.119277 26220 net.cpp:382] pool1 -> pool1
I0428 19:47:33.119334 26220 net.cpp:124] Setting up pool1
I0428 19:47:33.119341 26220 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:33.119344 26220 net.cpp:139] Memory required for data: 1818800
I0428 19:47:33.119348 26220 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:33.119354 26220 net.cpp:86] Creating Layer ip1
I0428 19:47:33.119357 26220 net.cpp:408] ip1 <- pool1
I0428 19:47:33.119361 26220 net.cpp:382] ip1 -> ip1
I0428 19:47:33.119498 26220 net.cpp:124] Setting up ip1
I0428 19:47:33.119508 26220 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:33.119511 26220 net.cpp:139] Memory required for data: 1838800
I0428 19:47:33.119519 26220 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:33.119526 26220 net.cpp:86] Creating Layer relu1
I0428 19:47:33.119529 26220 net.cpp:408] relu1 <- ip1
I0428 19:47:33.119534 26220 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:33.119701 26220 net.cpp:124] Setting up relu1
I0428 19:47:33.119710 26220 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:33.119714 26220 net.cpp:139] Memory required for data: 1858800
I0428 19:47:33.119719 26220 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:33.119725 26220 net.cpp:86] Creating Layer ip2
I0428 19:47:33.119745 26220 net.cpp:408] ip2 <- ip1
I0428 19:47:33.119750 26220 net.cpp:382] ip2 -> ip2
I0428 19:47:33.119848 26220 net.cpp:124] Setting up ip2
I0428 19:47:33.119854 26220 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:33.119865 26220 net.cpp:139] Memory required for data: 1862800
I0428 19:47:33.119871 26220 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:33.119875 26220 net.cpp:86] Creating Layer relu2
I0428 19:47:33.119879 26220 net.cpp:408] relu2 <- ip2
I0428 19:47:33.119882 26220 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:33.120082 26220 net.cpp:124] Setting up relu2
I0428 19:47:33.120090 26220 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:33.120093 26220 net.cpp:139] Memory required for data: 1866800
I0428 19:47:33.120096 26220 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:47:33.120101 26220 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:47:33.120105 26220 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:47:33.120108 26220 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:47:33.120126 26220 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:47:33.120159 26220 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:47:33.120165 26220 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:33.120168 26220 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:33.120172 26220 net.cpp:139] Memory required for data: 1874800
I0428 19:47:33.120174 26220 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:33.120178 26220 net.cpp:86] Creating Layer accuracy
I0428 19:47:33.120182 26220 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:47:33.120185 26220 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:33.120189 26220 net.cpp:382] accuracy -> accuracy
I0428 19:47:33.120195 26220 net.cpp:124] Setting up accuracy
I0428 19:47:33.120199 26220 net.cpp:131] Top shape: (1)
I0428 19:47:33.120203 26220 net.cpp:139] Memory required for data: 1874804
I0428 19:47:33.120205 26220 layer_factory.hpp:77] Creating layer loss
I0428 19:47:33.120208 26220 net.cpp:86] Creating Layer loss
I0428 19:47:33.120211 26220 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:47:33.120215 26220 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:33.120218 26220 net.cpp:382] loss -> loss
I0428 19:47:33.120224 26220 layer_factory.hpp:77] Creating layer loss
I0428 19:47:33.120450 26220 net.cpp:124] Setting up loss
I0428 19:47:33.120457 26220 net.cpp:131] Top shape: (1)
I0428 19:47:33.120461 26220 net.cpp:134]     with loss weight 1
I0428 19:47:33.120467 26220 net.cpp:139] Memory required for data: 1874808
I0428 19:47:33.120471 26220 net.cpp:200] loss needs backward computation.
I0428 19:47:33.120474 26220 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:33.120478 26220 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:47:33.120481 26220 net.cpp:200] relu2 needs backward computation.
I0428 19:47:33.120484 26220 net.cpp:200] ip2 needs backward computation.
I0428 19:47:33.120487 26220 net.cpp:200] relu1 needs backward computation.
I0428 19:47:33.120491 26220 net.cpp:200] ip1 needs backward computation.
I0428 19:47:33.120493 26220 net.cpp:200] pool1 needs backward computation.
I0428 19:47:33.120496 26220 net.cpp:200] conv1 needs backward computation.
I0428 19:47:33.120499 26220 net.cpp:200] pool0 needs backward computation.
I0428 19:47:33.120502 26220 net.cpp:200] conv0 needs backward computation.
I0428 19:47:33.120507 26220 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:33.120525 26220 net.cpp:202] mnist does not need backward computation.
I0428 19:47:33.120529 26220 net.cpp:244] This network produces output accuracy
I0428 19:47:33.120533 26220 net.cpp:244] This network produces output loss
I0428 19:47:33.120543 26220 net.cpp:257] Network initialization done.
I0428 19:47:33.120581 26220 solver.cpp:56] Solver scaffolding done.
I0428 19:47:33.120904 26220 caffe.cpp:248] Starting Optimization
I0428 19:47:33.120911 26220 solver.cpp:273] Solving LeNet
I0428 19:47:33.120930 26220 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:33.121737 26220 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:33.125980 26220 blocking_queue.cpp:49] Waiting for data
I0428 19:47:33.178484 26229 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:33.179003 26220 solver.cpp:398]     Test net output #0: accuracy = 0.1142
I0428 19:47:33.179036 26220 solver.cpp:398]     Test net output #1: loss = 2.303 (* 1 = 2.303 loss)
I0428 19:47:33.180821 26220 solver.cpp:219] Iteration 0 (-1.38168e-42 iter/s, 0.059863s/100 iters), loss = 2.30722
I0428 19:47:33.180845 26220 solver.cpp:238]     Train net output #0: loss = 2.30722 (* 1 = 2.30722 loss)
I0428 19:47:33.180856 26220 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:33.258487 26220 solver.cpp:219] Iteration 100 (1288.17 iter/s, 0.0776293s/100 iters), loss = 0.854111
I0428 19:47:33.258533 26220 solver.cpp:238]     Train net output #0: loss = 0.854111 (* 1 = 0.854111 loss)
I0428 19:47:33.258545 26220 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:33.333670 26220 solver.cpp:219] Iteration 200 (1331.05 iter/s, 0.0751288s/100 iters), loss = 0.844358
I0428 19:47:33.333726 26220 solver.cpp:238]     Train net output #0: loss = 0.844358 (* 1 = 0.844358 loss)
I0428 19:47:33.333735 26220 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:33.400004 26220 solver.cpp:219] Iteration 300 (1508.97 iter/s, 0.0662704s/100 iters), loss = 0.941218
I0428 19:47:33.400035 26220 solver.cpp:238]     Train net output #0: loss = 0.941218 (* 1 = 0.941218 loss)
I0428 19:47:33.400043 26220 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:33.466840 26220 solver.cpp:219] Iteration 400 (1497.08 iter/s, 0.0667965s/100 iters), loss = 0.760989
I0428 19:47:33.466871 26220 solver.cpp:238]     Train net output #0: loss = 0.760989 (* 1 = 0.760989 loss)
I0428 19:47:33.466878 26220 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:33.532948 26220 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:33.588346 26229 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:33.590227 26220 solver.cpp:398]     Test net output #0: accuracy = 0.8066
I0428 19:47:33.590265 26220 solver.cpp:398]     Test net output #1: loss = 0.679055 (* 1 = 0.679055 loss)
I0428 19:47:33.591119 26220 solver.cpp:219] Iteration 500 (804.934 iter/s, 0.124234s/100 iters), loss = 0.70565
I0428 19:47:33.591158 26220 solver.cpp:238]     Train net output #0: loss = 0.70565 (* 1 = 0.70565 loss)
I0428 19:47:33.591171 26220 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:33.670331 26220 solver.cpp:219] Iteration 600 (1263.21 iter/s, 0.0791634s/100 iters), loss = 0.516436
I0428 19:47:33.670367 26220 solver.cpp:238]     Train net output #0: loss = 0.516436 (* 1 = 0.516436 loss)
I0428 19:47:33.670377 26220 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:33.738492 26220 solver.cpp:219] Iteration 700 (1468.07 iter/s, 0.0681165s/100 iters), loss = 0.871814
I0428 19:47:33.738521 26220 solver.cpp:238]     Train net output #0: loss = 0.871814 (* 1 = 0.871814 loss)
I0428 19:47:33.738529 26220 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:33.805361 26220 solver.cpp:219] Iteration 800 (1496.35 iter/s, 0.0668295s/100 iters), loss = 0.543101
I0428 19:47:33.805390 26220 solver.cpp:238]     Train net output #0: loss = 0.543101 (* 1 = 0.543101 loss)
I0428 19:47:33.805398 26220 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:33.871954 26220 solver.cpp:219] Iteration 900 (1502.5 iter/s, 0.0665559s/100 iters), loss = 0.405455
I0428 19:47:33.871984 26220 solver.cpp:238]     Train net output #0: loss = 0.405455 (* 1 = 0.405455 loss)
I0428 19:47:33.871991 26220 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:33.894140 26228 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:33.946269 26220 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:33.947113 26220 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:33.947727 26220 solver.cpp:311] Iteration 1000, loss = 0.494591
I0428 19:47:33.947755 26220 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:34.002851 26229 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:34.003384 26220 solver.cpp:398]     Test net output #0: accuracy = 0.9294
I0428 19:47:34.003412 26220 solver.cpp:398]     Test net output #1: loss = 0.404479 (* 1 = 0.404479 loss)
I0428 19:47:34.003418 26220 solver.cpp:316] Optimization Done.
I0428 19:47:34.003423 26220 caffe.cpp:259] Optimization Done.
