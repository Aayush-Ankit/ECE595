I0428 19:55:25.853582 28180 caffe.cpp:218] Using GPUs 0
I0428 19:55:25.890339 28180 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:26.344951 28180 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test732.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:26.345140 28180 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test732.prototxt
I0428 19:55:26.345520 28180 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:26.345551 28180 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:26.345629 28180 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:26.345695 28180 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:26.345777 28180 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:26.345795 28180 net.cpp:86] Creating Layer mnist
I0428 19:55:26.345804 28180 net.cpp:382] mnist -> data
I0428 19:55:26.345823 28180 net.cpp:382] mnist -> label
I0428 19:55:26.346815 28180 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:26.349237 28180 net.cpp:124] Setting up mnist
I0428 19:55:26.349251 28180 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:26.349256 28180 net.cpp:131] Top shape: 64 (64)
I0428 19:55:26.349259 28180 net.cpp:139] Memory required for data: 200960
I0428 19:55:26.349265 28180 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:26.349280 28180 net.cpp:86] Creating Layer conv0
I0428 19:55:26.349297 28180 net.cpp:408] conv0 <- data
I0428 19:55:26.349308 28180 net.cpp:382] conv0 -> conv0
I0428 19:55:26.583683 28180 net.cpp:124] Setting up conv0
I0428 19:55:26.583725 28180 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:26.583745 28180 net.cpp:139] Memory required for data: 938240
I0428 19:55:26.583758 28180 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:26.583772 28180 net.cpp:86] Creating Layer pool0
I0428 19:55:26.583775 28180 net.cpp:408] pool0 <- conv0
I0428 19:55:26.583781 28180 net.cpp:382] pool0 -> pool0
I0428 19:55:26.583842 28180 net.cpp:124] Setting up pool0
I0428 19:55:26.583848 28180 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:26.583851 28180 net.cpp:139] Memory required for data: 1122560
I0428 19:55:26.583854 28180 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:26.583864 28180 net.cpp:86] Creating Layer conv1
I0428 19:55:26.583868 28180 net.cpp:408] conv1 <- pool0
I0428 19:55:26.583873 28180 net.cpp:382] conv1 -> conv1
I0428 19:55:26.586809 28180 net.cpp:124] Setting up conv1
I0428 19:55:26.586838 28180 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:26.586841 28180 net.cpp:139] Memory required for data: 2760960
I0428 19:55:26.586865 28180 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:26.586874 28180 net.cpp:86] Creating Layer pool1
I0428 19:55:26.586879 28180 net.cpp:408] pool1 <- conv1
I0428 19:55:26.586884 28180 net.cpp:382] pool1 -> pool1
I0428 19:55:26.586937 28180 net.cpp:124] Setting up pool1
I0428 19:55:26.586943 28180 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:26.586946 28180 net.cpp:139] Memory required for data: 3170560
I0428 19:55:26.586948 28180 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:26.586957 28180 net.cpp:86] Creating Layer ip1
I0428 19:55:26.586959 28180 net.cpp:408] ip1 <- pool1
I0428 19:55:26.586964 28180 net.cpp:382] ip1 -> ip1
I0428 19:55:26.588419 28180 net.cpp:124] Setting up ip1
I0428 19:55:26.588448 28180 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:26.588450 28180 net.cpp:139] Memory required for data: 3183360
I0428 19:55:26.588474 28180 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:26.588481 28180 net.cpp:86] Creating Layer relu1
I0428 19:55:26.588485 28180 net.cpp:408] relu1 <- ip1
I0428 19:55:26.588490 28180 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:26.588665 28180 net.cpp:124] Setting up relu1
I0428 19:55:26.588673 28180 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:26.588676 28180 net.cpp:139] Memory required for data: 3196160
I0428 19:55:26.588680 28180 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:26.588686 28180 net.cpp:86] Creating Layer ip2
I0428 19:55:26.588690 28180 net.cpp:408] ip2 <- ip1
I0428 19:55:26.588695 28180 net.cpp:382] ip2 -> ip2
I0428 19:55:26.588821 28180 net.cpp:124] Setting up ip2
I0428 19:55:26.588829 28180 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:26.588847 28180 net.cpp:139] Memory required for data: 3198720
I0428 19:55:26.588853 28180 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:26.588860 28180 net.cpp:86] Creating Layer relu2
I0428 19:55:26.588865 28180 net.cpp:408] relu2 <- ip2
I0428 19:55:26.588884 28180 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:26.589722 28180 net.cpp:124] Setting up relu2
I0428 19:55:26.589750 28180 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:26.589753 28180 net.cpp:139] Memory required for data: 3201280
I0428 19:55:26.589757 28180 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:26.589764 28180 net.cpp:86] Creating Layer ip3
I0428 19:55:26.589768 28180 net.cpp:408] ip3 <- ip2
I0428 19:55:26.589774 28180 net.cpp:382] ip3 -> ip3
I0428 19:55:26.589890 28180 net.cpp:124] Setting up ip3
I0428 19:55:26.589897 28180 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:26.589900 28180 net.cpp:139] Memory required for data: 3203840
I0428 19:55:26.589907 28180 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:26.589912 28180 net.cpp:86] Creating Layer relu3
I0428 19:55:26.589915 28180 net.cpp:408] relu3 <- ip3
I0428 19:55:26.589920 28180 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:26.590104 28180 net.cpp:124] Setting up relu3
I0428 19:55:26.590113 28180 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:26.590116 28180 net.cpp:139] Memory required for data: 3206400
I0428 19:55:26.590119 28180 layer_factory.hpp:77] Creating layer loss
I0428 19:55:26.590126 28180 net.cpp:86] Creating Layer loss
I0428 19:55:26.590128 28180 net.cpp:408] loss <- ip3
I0428 19:55:26.590132 28180 net.cpp:408] loss <- label
I0428 19:55:26.590138 28180 net.cpp:382] loss -> loss
I0428 19:55:26.590157 28180 layer_factory.hpp:77] Creating layer loss
I0428 19:55:26.590415 28180 net.cpp:124] Setting up loss
I0428 19:55:26.590425 28180 net.cpp:131] Top shape: (1)
I0428 19:55:26.590428 28180 net.cpp:134]     with loss weight 1
I0428 19:55:26.590441 28180 net.cpp:139] Memory required for data: 3206404
I0428 19:55:26.590445 28180 net.cpp:200] loss needs backward computation.
I0428 19:55:26.590450 28180 net.cpp:200] relu3 needs backward computation.
I0428 19:55:26.590452 28180 net.cpp:200] ip3 needs backward computation.
I0428 19:55:26.590456 28180 net.cpp:200] relu2 needs backward computation.
I0428 19:55:26.590458 28180 net.cpp:200] ip2 needs backward computation.
I0428 19:55:26.590461 28180 net.cpp:200] relu1 needs backward computation.
I0428 19:55:26.590463 28180 net.cpp:200] ip1 needs backward computation.
I0428 19:55:26.590466 28180 net.cpp:200] pool1 needs backward computation.
I0428 19:55:26.590469 28180 net.cpp:200] conv1 needs backward computation.
I0428 19:55:26.590472 28180 net.cpp:200] pool0 needs backward computation.
I0428 19:55:26.590476 28180 net.cpp:200] conv0 needs backward computation.
I0428 19:55:26.590479 28180 net.cpp:202] mnist does not need backward computation.
I0428 19:55:26.590482 28180 net.cpp:244] This network produces output loss
I0428 19:55:26.590492 28180 net.cpp:257] Network initialization done.
I0428 19:55:26.590873 28180 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test732.prototxt
I0428 19:55:26.590916 28180 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:26.591011 28180 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:26.591104 28180 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:26.591162 28180 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:26.591189 28180 net.cpp:86] Creating Layer mnist
I0428 19:55:26.591194 28180 net.cpp:382] mnist -> data
I0428 19:55:26.591202 28180 net.cpp:382] mnist -> label
I0428 19:55:26.591301 28180 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:26.592531 28180 net.cpp:124] Setting up mnist
I0428 19:55:26.592559 28180 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:26.592564 28180 net.cpp:131] Top shape: 100 (100)
I0428 19:55:26.592567 28180 net.cpp:139] Memory required for data: 314000
I0428 19:55:26.592571 28180 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:26.592607 28180 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:26.592612 28180 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:26.592625 28180 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:26.592633 28180 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:26.592694 28180 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:26.592716 28180 net.cpp:131] Top shape: 100 (100)
I0428 19:55:26.592720 28180 net.cpp:131] Top shape: 100 (100)
I0428 19:55:26.592723 28180 net.cpp:139] Memory required for data: 314800
I0428 19:55:26.592726 28180 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:26.592736 28180 net.cpp:86] Creating Layer conv0
I0428 19:55:26.592739 28180 net.cpp:408] conv0 <- data
I0428 19:55:26.592744 28180 net.cpp:382] conv0 -> conv0
I0428 19:55:26.594599 28180 net.cpp:124] Setting up conv0
I0428 19:55:26.594612 28180 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:26.594615 28180 net.cpp:139] Memory required for data: 1466800
I0428 19:55:26.594624 28180 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:26.594632 28180 net.cpp:86] Creating Layer pool0
I0428 19:55:26.594635 28180 net.cpp:408] pool0 <- conv0
I0428 19:55:26.594640 28180 net.cpp:382] pool0 -> pool0
I0428 19:55:26.594677 28180 net.cpp:124] Setting up pool0
I0428 19:55:26.594682 28180 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:26.594686 28180 net.cpp:139] Memory required for data: 1754800
I0428 19:55:26.594687 28180 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:26.594712 28180 net.cpp:86] Creating Layer conv1
I0428 19:55:26.594715 28180 net.cpp:408] conv1 <- pool0
I0428 19:55:26.594722 28180 net.cpp:382] conv1 -> conv1
I0428 19:55:26.596472 28180 net.cpp:124] Setting up conv1
I0428 19:55:26.596485 28180 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:26.596489 28180 net.cpp:139] Memory required for data: 4314800
I0428 19:55:26.596498 28180 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:26.596505 28180 net.cpp:86] Creating Layer pool1
I0428 19:55:26.596509 28180 net.cpp:408] pool1 <- conv1
I0428 19:55:26.596514 28180 net.cpp:382] pool1 -> pool1
I0428 19:55:26.596550 28180 net.cpp:124] Setting up pool1
I0428 19:55:26.596555 28180 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:26.596559 28180 net.cpp:139] Memory required for data: 4954800
I0428 19:55:26.596561 28180 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:26.596575 28180 net.cpp:86] Creating Layer ip1
I0428 19:55:26.596577 28180 net.cpp:408] ip1 <- pool1
I0428 19:55:26.596581 28180 net.cpp:382] ip1 -> ip1
I0428 19:55:26.597271 28180 net.cpp:124] Setting up ip1
I0428 19:55:26.597280 28180 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:26.597299 28180 net.cpp:139] Memory required for data: 4974800
I0428 19:55:26.597314 28180 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:26.597321 28180 net.cpp:86] Creating Layer relu1
I0428 19:55:26.597326 28180 net.cpp:408] relu1 <- ip1
I0428 19:55:26.597329 28180 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:26.597558 28180 net.cpp:124] Setting up relu1
I0428 19:55:26.597568 28180 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:26.597571 28180 net.cpp:139] Memory required for data: 4994800
I0428 19:55:26.597574 28180 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:26.597582 28180 net.cpp:86] Creating Layer ip2
I0428 19:55:26.597585 28180 net.cpp:408] ip2 <- ip1
I0428 19:55:26.597591 28180 net.cpp:382] ip2 -> ip2
I0428 19:55:26.597719 28180 net.cpp:124] Setting up ip2
I0428 19:55:26.597728 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.597731 28180 net.cpp:139] Memory required for data: 4998800
I0428 19:55:26.597736 28180 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:26.597741 28180 net.cpp:86] Creating Layer relu2
I0428 19:55:26.597744 28180 net.cpp:408] relu2 <- ip2
I0428 19:55:26.597748 28180 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:26.597913 28180 net.cpp:124] Setting up relu2
I0428 19:55:26.597923 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.597925 28180 net.cpp:139] Memory required for data: 5002800
I0428 19:55:26.597929 28180 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:26.597934 28180 net.cpp:86] Creating Layer ip3
I0428 19:55:26.597942 28180 net.cpp:408] ip3 <- ip2
I0428 19:55:26.597950 28180 net.cpp:382] ip3 -> ip3
I0428 19:55:26.598062 28180 net.cpp:124] Setting up ip3
I0428 19:55:26.598069 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.598073 28180 net.cpp:139] Memory required for data: 5006800
I0428 19:55:26.598081 28180 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:26.598085 28180 net.cpp:86] Creating Layer relu3
I0428 19:55:26.598095 28180 net.cpp:408] relu3 <- ip3
I0428 19:55:26.598100 28180 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:26.598912 28180 net.cpp:124] Setting up relu3
I0428 19:55:26.598923 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.598927 28180 net.cpp:139] Memory required for data: 5010800
I0428 19:55:26.598929 28180 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:26.598934 28180 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:26.598937 28180 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:26.598944 28180 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:26.598949 28180 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:26.598989 28180 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:26.598994 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.599004 28180 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:26.599007 28180 net.cpp:139] Memory required for data: 5018800
I0428 19:55:26.599015 28180 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:26.599022 28180 net.cpp:86] Creating Layer accuracy
I0428 19:55:26.599025 28180 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:26.599028 28180 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:26.599032 28180 net.cpp:382] accuracy -> accuracy
I0428 19:55:26.599038 28180 net.cpp:124] Setting up accuracy
I0428 19:55:26.599043 28180 net.cpp:131] Top shape: (1)
I0428 19:55:26.599046 28180 net.cpp:139] Memory required for data: 5018804
I0428 19:55:26.599048 28180 layer_factory.hpp:77] Creating layer loss
I0428 19:55:26.599052 28180 net.cpp:86] Creating Layer loss
I0428 19:55:26.599056 28180 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:26.599059 28180 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:26.599062 28180 net.cpp:382] loss -> loss
I0428 19:55:26.599067 28180 layer_factory.hpp:77] Creating layer loss
I0428 19:55:26.599350 28180 net.cpp:124] Setting up loss
I0428 19:55:26.599360 28180 net.cpp:131] Top shape: (1)
I0428 19:55:26.599364 28180 net.cpp:134]     with loss weight 1
I0428 19:55:26.599378 28180 net.cpp:139] Memory required for data: 5018808
I0428 19:55:26.599382 28180 net.cpp:200] loss needs backward computation.
I0428 19:55:26.599386 28180 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:26.599390 28180 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:26.599393 28180 net.cpp:200] relu3 needs backward computation.
I0428 19:55:26.599396 28180 net.cpp:200] ip3 needs backward computation.
I0428 19:55:26.599400 28180 net.cpp:200] relu2 needs backward computation.
I0428 19:55:26.599401 28180 net.cpp:200] ip2 needs backward computation.
I0428 19:55:26.599405 28180 net.cpp:200] relu1 needs backward computation.
I0428 19:55:26.599407 28180 net.cpp:200] ip1 needs backward computation.
I0428 19:55:26.599431 28180 net.cpp:200] pool1 needs backward computation.
I0428 19:55:26.599434 28180 net.cpp:200] conv1 needs backward computation.
I0428 19:55:26.599437 28180 net.cpp:200] pool0 needs backward computation.
I0428 19:55:26.599445 28180 net.cpp:200] conv0 needs backward computation.
I0428 19:55:26.599449 28180 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:26.599452 28180 net.cpp:202] mnist does not need backward computation.
I0428 19:55:26.599455 28180 net.cpp:244] This network produces output accuracy
I0428 19:55:26.599458 28180 net.cpp:244] This network produces output loss
I0428 19:55:26.599468 28180 net.cpp:257] Network initialization done.
I0428 19:55:26.599510 28180 solver.cpp:56] Solver scaffolding done.
I0428 19:55:26.599850 28180 caffe.cpp:248] Starting Optimization
I0428 19:55:26.599858 28180 solver.cpp:273] Solving LeNet
I0428 19:55:26.599859 28180 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:26.600757 28180 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:26.606181 28180 blocking_queue.cpp:49] Waiting for data
I0428 19:55:26.675240 28187 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:26.675869 28180 solver.cpp:398]     Test net output #0: accuracy = 0.1628
I0428 19:55:26.675889 28180 solver.cpp:398]     Test net output #1: loss = 2.28972 (* 1 = 2.28972 loss)
I0428 19:55:26.679754 28180 solver.cpp:219] Iteration 0 (-9.08879e-31 iter/s, 0.0798628s/100 iters), loss = 2.30584
I0428 19:55:26.679778 28180 solver.cpp:238]     Train net output #0: loss = 2.30584 (* 1 = 2.30584 loss)
I0428 19:55:26.679805 28180 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:26.826485 28180 solver.cpp:219] Iteration 100 (681.704 iter/s, 0.146691s/100 iters), loss = 0.37012
I0428 19:55:26.826510 28180 solver.cpp:238]     Train net output #0: loss = 0.37012 (* 1 = 0.37012 loss)
I0428 19:55:26.826516 28180 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:26.971022 28180 solver.cpp:219] Iteration 200 (692.038 iter/s, 0.144501s/100 iters), loss = 0.2242
I0428 19:55:26.971047 28180 solver.cpp:238]     Train net output #0: loss = 0.2242 (* 1 = 0.2242 loss)
I0428 19:55:26.971053 28180 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:27.119423 28180 solver.cpp:219] Iteration 300 (674.021 iter/s, 0.148363s/100 iters), loss = 0.255569
I0428 19:55:27.119451 28180 solver.cpp:238]     Train net output #0: loss = 0.255569 (* 1 = 0.255569 loss)
I0428 19:55:27.119458 28180 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:27.265691 28180 solver.cpp:219] Iteration 400 (683.862 iter/s, 0.146228s/100 iters), loss = 0.14505
I0428 19:55:27.265715 28180 solver.cpp:238]     Train net output #0: loss = 0.14505 (* 1 = 0.14505 loss)
I0428 19:55:27.265738 28180 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:27.412297 28180 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:27.465258 28187 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:27.467061 28180 solver.cpp:398]     Test net output #0: accuracy = 0.9498
I0428 19:55:27.467087 28180 solver.cpp:398]     Test net output #1: loss = 0.160135 (* 1 = 0.160135 loss)
I0428 19:55:27.468585 28180 solver.cpp:219] Iteration 500 (492.967 iter/s, 0.202853s/100 iters), loss = 0.188605
I0428 19:55:27.468624 28180 solver.cpp:238]     Train net output #0: loss = 0.188605 (* 1 = 0.188605 loss)
I0428 19:55:27.468649 28180 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:27.616930 28180 solver.cpp:219] Iteration 600 (674.343 iter/s, 0.148292s/100 iters), loss = 0.0820372
I0428 19:55:27.616958 28180 solver.cpp:238]     Train net output #0: loss = 0.0820372 (* 1 = 0.0820372 loss)
I0428 19:55:27.616966 28180 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:27.764145 28180 solver.cpp:219] Iteration 700 (679.461 iter/s, 0.147175s/100 iters), loss = 0.123012
I0428 19:55:27.764171 28180 solver.cpp:238]     Train net output #0: loss = 0.123012 (* 1 = 0.123012 loss)
I0428 19:55:27.764178 28180 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:27.914804 28180 solver.cpp:219] Iteration 800 (663.922 iter/s, 0.15062s/100 iters), loss = 0.263707
I0428 19:55:27.914844 28180 solver.cpp:238]     Train net output #0: loss = 0.263707 (* 1 = 0.263707 loss)
I0428 19:55:27.914850 28180 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:28.058234 28180 solver.cpp:219] Iteration 900 (697.375 iter/s, 0.143395s/100 iters), loss = 0.210104
I0428 19:55:28.058275 28180 solver.cpp:238]     Train net output #0: loss = 0.210104 (* 1 = 0.210104 loss)
I0428 19:55:28.058281 28180 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:28.106417 28186 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:28.208314 28180 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:28.210788 28180 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:28.212030 28180 solver.cpp:311] Iteration 1000, loss = 0.127309
I0428 19:55:28.212045 28180 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:28.287181 28187 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:28.287793 28180 solver.cpp:398]     Test net output #0: accuracy = 0.976
I0428 19:55:28.287811 28180 solver.cpp:398]     Test net output #1: loss = 0.0754801 (* 1 = 0.0754801 loss)
I0428 19:55:28.287817 28180 solver.cpp:316] Optimization Done.
I0428 19:55:28.287820 28180 caffe.cpp:259] Optimization Done.
