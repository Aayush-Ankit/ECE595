I0428 20:16:14.403293   615 caffe.cpp:218] Using GPUs 0
I0428 20:16:14.440843   615 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:14.954746   615 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1266.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:14.954893   615 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1266.prototxt
I0428 20:16:14.955307   615 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:14.955327   615 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:14.955427   615 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:14.955507   615 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:14.955605   615 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:14.955631   615 net.cpp:86] Creating Layer mnist
I0428 20:16:14.955638   615 net.cpp:382] mnist -> data
I0428 20:16:14.955659   615 net.cpp:382] mnist -> label
I0428 20:16:14.956744   615 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:14.959259   615 net.cpp:124] Setting up mnist
I0428 20:16:14.959278   615 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:14.959285   615 net.cpp:131] Top shape: 64 (64)
I0428 20:16:14.959290   615 net.cpp:139] Memory required for data: 200960
I0428 20:16:14.959296   615 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:14.959311   615 net.cpp:86] Creating Layer conv0
I0428 20:16:14.959332   615 net.cpp:408] conv0 <- data
I0428 20:16:14.959347   615 net.cpp:382] conv0 -> conv0
I0428 20:16:15.218821   615 net.cpp:124] Setting up conv0
I0428 20:16:15.218878   615 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:15.218883   615 net.cpp:139] Memory required for data: 7573760
I0428 20:16:15.218897   615 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:15.218924   615 net.cpp:86] Creating Layer pool0
I0428 20:16:15.218928   615 net.cpp:408] pool0 <- conv0
I0428 20:16:15.218935   615 net.cpp:382] pool0 -> pool0
I0428 20:16:15.219002   615 net.cpp:124] Setting up pool0
I0428 20:16:15.219010   615 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:15.219012   615 net.cpp:139] Memory required for data: 9416960
I0428 20:16:15.219017   615 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:15.219025   615 net.cpp:86] Creating Layer conv1
I0428 20:16:15.219032   615 net.cpp:408] conv1 <- pool0
I0428 20:16:15.219035   615 net.cpp:382] conv1 -> conv1
I0428 20:16:15.221935   615 net.cpp:124] Setting up conv1
I0428 20:16:15.221982   615 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:15.221985   615 net.cpp:139] Memory required for data: 9498880
I0428 20:16:15.221994   615 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:15.222002   615 net.cpp:86] Creating Layer pool1
I0428 20:16:15.222021   615 net.cpp:408] pool1 <- conv1
I0428 20:16:15.222026   615 net.cpp:382] pool1 -> pool1
I0428 20:16:15.222064   615 net.cpp:124] Setting up pool1
I0428 20:16:15.222071   615 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:15.222074   615 net.cpp:139] Memory required for data: 9519360
I0428 20:16:15.222077   615 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:15.222085   615 net.cpp:86] Creating Layer ip1
I0428 20:16:15.222088   615 net.cpp:408] ip1 <- pool1
I0428 20:16:15.222093   615 net.cpp:382] ip1 -> ip1
I0428 20:16:15.222193   615 net.cpp:124] Setting up ip1
I0428 20:16:15.222200   615 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:15.222203   615 net.cpp:139] Memory required for data: 9521920
I0428 20:16:15.222211   615 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:15.222218   615 net.cpp:86] Creating Layer relu1
I0428 20:16:15.222220   615 net.cpp:408] relu1 <- ip1
I0428 20:16:15.222225   615 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:15.222421   615 net.cpp:124] Setting up relu1
I0428 20:16:15.222429   615 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:15.222432   615 net.cpp:139] Memory required for data: 9524480
I0428 20:16:15.222435   615 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:15.222441   615 net.cpp:86] Creating Layer ip2
I0428 20:16:15.222445   615 net.cpp:408] ip2 <- ip1
I0428 20:16:15.222450   615 net.cpp:382] ip2 -> ip2
I0428 20:16:15.222544   615 net.cpp:124] Setting up ip2
I0428 20:16:15.222550   615 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:15.222553   615 net.cpp:139] Memory required for data: 9537280
I0428 20:16:15.222559   615 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:15.222564   615 net.cpp:86] Creating Layer relu2
I0428 20:16:15.222568   615 net.cpp:408] relu2 <- ip2
I0428 20:16:15.222571   615 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:15.223294   615 net.cpp:124] Setting up relu2
I0428 20:16:15.223305   615 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:15.223326   615 net.cpp:139] Memory required for data: 9550080
I0428 20:16:15.223330   615 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:15.223336   615 net.cpp:86] Creating Layer ip3
I0428 20:16:15.223340   615 net.cpp:408] ip3 <- ip2
I0428 20:16:15.223345   615 net.cpp:382] ip3 -> ip3
I0428 20:16:15.223457   615 net.cpp:124] Setting up ip3
I0428 20:16:15.223464   615 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:15.223467   615 net.cpp:139] Memory required for data: 9552640
I0428 20:16:15.223475   615 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:15.223480   615 net.cpp:86] Creating Layer relu3
I0428 20:16:15.223486   615 net.cpp:408] relu3 <- ip3
I0428 20:16:15.223491   615 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:15.223704   615 net.cpp:124] Setting up relu3
I0428 20:16:15.223713   615 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:15.223716   615 net.cpp:139] Memory required for data: 9555200
I0428 20:16:15.223721   615 layer_factory.hpp:77] Creating layer loss
I0428 20:16:15.223726   615 net.cpp:86] Creating Layer loss
I0428 20:16:15.223729   615 net.cpp:408] loss <- ip3
I0428 20:16:15.223734   615 net.cpp:408] loss <- label
I0428 20:16:15.223739   615 net.cpp:382] loss -> loss
I0428 20:16:15.223754   615 layer_factory.hpp:77] Creating layer loss
I0428 20:16:15.224038   615 net.cpp:124] Setting up loss
I0428 20:16:15.224046   615 net.cpp:131] Top shape: (1)
I0428 20:16:15.224066   615 net.cpp:134]     with loss weight 1
I0428 20:16:15.224081   615 net.cpp:139] Memory required for data: 9555204
I0428 20:16:15.224083   615 net.cpp:200] loss needs backward computation.
I0428 20:16:15.224087   615 net.cpp:200] relu3 needs backward computation.
I0428 20:16:15.224090   615 net.cpp:200] ip3 needs backward computation.
I0428 20:16:15.224093   615 net.cpp:200] relu2 needs backward computation.
I0428 20:16:15.224097   615 net.cpp:200] ip2 needs backward computation.
I0428 20:16:15.224099   615 net.cpp:200] relu1 needs backward computation.
I0428 20:16:15.224102   615 net.cpp:200] ip1 needs backward computation.
I0428 20:16:15.224104   615 net.cpp:200] pool1 needs backward computation.
I0428 20:16:15.224107   615 net.cpp:200] conv1 needs backward computation.
I0428 20:16:15.224112   615 net.cpp:200] pool0 needs backward computation.
I0428 20:16:15.224114   615 net.cpp:200] conv0 needs backward computation.
I0428 20:16:15.224117   615 net.cpp:202] mnist does not need backward computation.
I0428 20:16:15.224120   615 net.cpp:244] This network produces output loss
I0428 20:16:15.224129   615 net.cpp:257] Network initialization done.
I0428 20:16:15.224519   615 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1266.prototxt
I0428 20:16:15.224566   615 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:15.224663   615 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:15.224762   615 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:15.224815   615 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:15.224843   615 net.cpp:86] Creating Layer mnist
I0428 20:16:15.224848   615 net.cpp:382] mnist -> data
I0428 20:16:15.224856   615 net.cpp:382] mnist -> label
I0428 20:16:15.224946   615 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:15.226902   615 net.cpp:124] Setting up mnist
I0428 20:16:15.226943   615 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:15.226948   615 net.cpp:131] Top shape: 100 (100)
I0428 20:16:15.226969   615 net.cpp:139] Memory required for data: 314000
I0428 20:16:15.226972   615 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:15.226979   615 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:15.226982   615 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:15.226987   615 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:15.227010   615 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:15.227051   615 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:15.227058   615 net.cpp:131] Top shape: 100 (100)
I0428 20:16:15.227062   615 net.cpp:131] Top shape: 100 (100)
I0428 20:16:15.227066   615 net.cpp:139] Memory required for data: 314800
I0428 20:16:15.227068   615 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:15.227092   615 net.cpp:86] Creating Layer conv0
I0428 20:16:15.227097   615 net.cpp:408] conv0 <- data
I0428 20:16:15.227102   615 net.cpp:382] conv0 -> conv0
I0428 20:16:15.228919   615 net.cpp:124] Setting up conv0
I0428 20:16:15.228948   615 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:15.228952   615 net.cpp:139] Memory required for data: 11834800
I0428 20:16:15.228961   615 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:15.228968   615 net.cpp:86] Creating Layer pool0
I0428 20:16:15.228971   615 net.cpp:408] pool0 <- conv0
I0428 20:16:15.228991   615 net.cpp:382] pool0 -> pool0
I0428 20:16:15.229039   615 net.cpp:124] Setting up pool0
I0428 20:16:15.229046   615 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:15.229049   615 net.cpp:139] Memory required for data: 14714800
I0428 20:16:15.229053   615 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:15.229061   615 net.cpp:86] Creating Layer conv1
I0428 20:16:15.229064   615 net.cpp:408] conv1 <- pool0
I0428 20:16:15.229069   615 net.cpp:382] conv1 -> conv1
I0428 20:16:15.230808   615 net.cpp:124] Setting up conv1
I0428 20:16:15.230839   615 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:15.230844   615 net.cpp:139] Memory required for data: 14842800
I0428 20:16:15.230854   615 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:15.230860   615 net.cpp:86] Creating Layer pool1
I0428 20:16:15.230865   615 net.cpp:408] pool1 <- conv1
I0428 20:16:15.230870   615 net.cpp:382] pool1 -> pool1
I0428 20:16:15.230916   615 net.cpp:124] Setting up pool1
I0428 20:16:15.230922   615 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:15.230926   615 net.cpp:139] Memory required for data: 14874800
I0428 20:16:15.230929   615 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:15.230936   615 net.cpp:86] Creating Layer ip1
I0428 20:16:15.230939   615 net.cpp:408] ip1 <- pool1
I0428 20:16:15.230944   615 net.cpp:382] ip1 -> ip1
I0428 20:16:15.231047   615 net.cpp:124] Setting up ip1
I0428 20:16:15.231061   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.231076   615 net.cpp:139] Memory required for data: 14878800
I0428 20:16:15.231093   615 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:15.231098   615 net.cpp:86] Creating Layer relu1
I0428 20:16:15.231102   615 net.cpp:408] relu1 <- ip1
I0428 20:16:15.231107   615 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:15.231350   615 net.cpp:124] Setting up relu1
I0428 20:16:15.231360   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.231384   615 net.cpp:139] Memory required for data: 14882800
I0428 20:16:15.231403   615 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:15.231411   615 net.cpp:86] Creating Layer ip2
I0428 20:16:15.231416   615 net.cpp:408] ip2 <- ip1
I0428 20:16:15.231422   615 net.cpp:382] ip2 -> ip2
I0428 20:16:15.231528   615 net.cpp:124] Setting up ip2
I0428 20:16:15.231535   615 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:15.231539   615 net.cpp:139] Memory required for data: 14902800
I0428 20:16:15.231544   615 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:15.231549   615 net.cpp:86] Creating Layer relu2
I0428 20:16:15.231552   615 net.cpp:408] relu2 <- ip2
I0428 20:16:15.231557   615 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:15.231731   615 net.cpp:124] Setting up relu2
I0428 20:16:15.231740   615 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:15.231744   615 net.cpp:139] Memory required for data: 14922800
I0428 20:16:15.231747   615 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:15.231752   615 net.cpp:86] Creating Layer ip3
I0428 20:16:15.231756   615 net.cpp:408] ip3 <- ip2
I0428 20:16:15.231761   615 net.cpp:382] ip3 -> ip3
I0428 20:16:15.231906   615 net.cpp:124] Setting up ip3
I0428 20:16:15.231914   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.231933   615 net.cpp:139] Memory required for data: 14926800
I0428 20:16:15.231941   615 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:15.231948   615 net.cpp:86] Creating Layer relu3
I0428 20:16:15.231952   615 net.cpp:408] relu3 <- ip3
I0428 20:16:15.231961   615 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:15.232805   615 net.cpp:124] Setting up relu3
I0428 20:16:15.232839   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.232843   615 net.cpp:139] Memory required for data: 14930800
I0428 20:16:15.232846   615 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:15.232853   615 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:15.232857   615 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:15.232862   615 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:15.232884   615 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:15.232926   615 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:15.232933   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.232939   615 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:15.232941   615 net.cpp:139] Memory required for data: 14938800
I0428 20:16:15.232944   615 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:15.232949   615 net.cpp:86] Creating Layer accuracy
I0428 20:16:15.232954   615 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:15.232959   615 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:15.232964   615 net.cpp:382] accuracy -> accuracy
I0428 20:16:15.232970   615 net.cpp:124] Setting up accuracy
I0428 20:16:15.232975   615 net.cpp:131] Top shape: (1)
I0428 20:16:15.232978   615 net.cpp:139] Memory required for data: 14938804
I0428 20:16:15.232981   615 layer_factory.hpp:77] Creating layer loss
I0428 20:16:15.232986   615 net.cpp:86] Creating Layer loss
I0428 20:16:15.232990   615 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:15.232996   615 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:15.233002   615 net.cpp:382] loss -> loss
I0428 20:16:15.233008   615 layer_factory.hpp:77] Creating layer loss
I0428 20:16:15.233311   615 net.cpp:124] Setting up loss
I0428 20:16:15.233320   615 net.cpp:131] Top shape: (1)
I0428 20:16:15.233324   615 net.cpp:134]     with loss weight 1
I0428 20:16:15.233340   615 net.cpp:139] Memory required for data: 14938808
I0428 20:16:15.233343   615 net.cpp:200] loss needs backward computation.
I0428 20:16:15.233347   615 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:15.233351   615 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:15.233355   615 net.cpp:200] relu3 needs backward computation.
I0428 20:16:15.233357   615 net.cpp:200] ip3 needs backward computation.
I0428 20:16:15.233359   615 net.cpp:200] relu2 needs backward computation.
I0428 20:16:15.233362   615 net.cpp:200] ip2 needs backward computation.
I0428 20:16:15.233366   615 net.cpp:200] relu1 needs backward computation.
I0428 20:16:15.233367   615 net.cpp:200] ip1 needs backward computation.
I0428 20:16:15.233371   615 net.cpp:200] pool1 needs backward computation.
I0428 20:16:15.233373   615 net.cpp:200] conv1 needs backward computation.
I0428 20:16:15.233377   615 net.cpp:200] pool0 needs backward computation.
I0428 20:16:15.233381   615 net.cpp:200] conv0 needs backward computation.
I0428 20:16:15.233383   615 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:15.233388   615 net.cpp:202] mnist does not need backward computation.
I0428 20:16:15.233391   615 net.cpp:244] This network produces output accuracy
I0428 20:16:15.233394   615 net.cpp:244] This network produces output loss
I0428 20:16:15.233408   615 net.cpp:257] Network initialization done.
I0428 20:16:15.233481   615 solver.cpp:56] Solver scaffolding done.
I0428 20:16:15.233834   615 caffe.cpp:248] Starting Optimization
I0428 20:16:15.233857   615 solver.cpp:273] Solving LeNet
I0428 20:16:15.233860   615 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:15.234694   615 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:15.301645   622 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:15.303972   615 solver.cpp:398]     Test net output #0: accuracy = 0.0627
I0428 20:16:15.304006   615 solver.cpp:398]     Test net output #1: loss = 2.34227 (* 1 = 2.34227 loss)
I0428 20:16:15.308130   615 solver.cpp:219] Iteration 0 (-1.08254e-30 iter/s, 0.0742295s/100 iters), loss = 2.33258
I0428 20:16:15.308171   615 solver.cpp:238]     Train net output #0: loss = 2.33258 (* 1 = 2.33258 loss)
I0428 20:16:15.308182   615 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:15.437302   615 solver.cpp:219] Iteration 100 (774.392 iter/s, 0.129134s/100 iters), loss = 1.57832
I0428 20:16:15.437342   615 solver.cpp:238]     Train net output #0: loss = 1.57832 (* 1 = 1.57832 loss)
I0428 20:16:15.437350   615 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:15.559420   615 solver.cpp:219] Iteration 200 (819.147 iter/s, 0.122078s/100 iters), loss = 0.45131
I0428 20:16:15.559468   615 solver.cpp:238]     Train net output #0: loss = 0.45131 (* 1 = 0.45131 loss)
I0428 20:16:15.559473   615 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:15.678042   615 solver.cpp:219] Iteration 300 (843.42 iter/s, 0.118565s/100 iters), loss = 0.699523
I0428 20:16:15.678081   615 solver.cpp:238]     Train net output #0: loss = 0.699523 (* 1 = 0.699523 loss)
I0428 20:16:15.678087   615 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:15.794986   615 solver.cpp:219] Iteration 400 (855.373 iter/s, 0.116908s/100 iters), loss = 0.417628
I0428 20:16:15.795027   615 solver.cpp:238]     Train net output #0: loss = 0.417628 (* 1 = 0.417628 loss)
I0428 20:16:15.795033   615 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:15.911931   615 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:15.976330   622 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:15.978250   615 solver.cpp:398]     Test net output #0: accuracy = 0.8535
I0428 20:16:15.978286   615 solver.cpp:398]     Test net output #1: loss = 0.431443 (* 1 = 0.431443 loss)
I0428 20:16:15.979421   615 solver.cpp:219] Iteration 500 (542.39 iter/s, 0.184369s/100 iters), loss = 0.412602
I0428 20:16:15.979460   615 solver.cpp:238]     Train net output #0: loss = 0.412602 (* 1 = 0.412602 loss)
I0428 20:16:15.979486   615 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:16.098048   615 solver.cpp:219] Iteration 600 (843.216 iter/s, 0.118594s/100 iters), loss = 0.533301
I0428 20:16:16.098088   615 solver.cpp:238]     Train net output #0: loss = 0.533301 (* 1 = 0.533301 loss)
I0428 20:16:16.098094   615 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:16.216733   615 solver.cpp:219] Iteration 700 (842.918 iter/s, 0.118636s/100 iters), loss = 0.364403
I0428 20:16:16.216773   615 solver.cpp:238]     Train net output #0: loss = 0.364403 (* 1 = 0.364403 loss)
I0428 20:16:16.216779   615 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:16.332465   615 solver.cpp:219] Iteration 800 (864.322 iter/s, 0.115698s/100 iters), loss = 0.361909
I0428 20:16:16.332506   615 solver.cpp:238]     Train net output #0: loss = 0.361909 (* 1 = 0.361909 loss)
I0428 20:16:16.332514   615 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:16.449446   615 solver.cpp:219] Iteration 900 (855.216 iter/s, 0.11693s/100 iters), loss = 0.233381
I0428 20:16:16.449487   615 solver.cpp:238]     Train net output #0: loss = 0.233381 (* 1 = 0.233381 loss)
I0428 20:16:16.449494   615 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:16.488806   621 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:16.567605   615 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:16.568601   615 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:16.569378   615 solver.cpp:311] Iteration 1000, loss = 0.202108
I0428 20:16:16.569396   615 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:16.573498   615 blocking_queue.cpp:49] Waiting for data
I0428 20:16:16.646008   622 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:16.646759   615 solver.cpp:398]     Test net output #0: accuracy = 0.9582
I0428 20:16:16.646792   615 solver.cpp:398]     Test net output #1: loss = 0.140778 (* 1 = 0.140778 loss)
I0428 20:16:16.646812   615 solver.cpp:316] Optimization Done.
I0428 20:16:16.646816   615 caffe.cpp:259] Optimization Done.
