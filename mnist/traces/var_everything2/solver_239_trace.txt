I0428 19:36:11.471226 23652 caffe.cpp:218] Using GPUs 0
I0428 19:36:11.511895 23652 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:36:12.044351 23652 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test239.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:36:12.044495 23652 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test239.prototxt
I0428 19:36:12.044826 23652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:36:12.044842 23652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:36:12.044919 23652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:12.044983 23652 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:12.045083 23652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:36:12.045105 23652 net.cpp:86] Creating Layer mnist
I0428 19:36:12.045112 23652 net.cpp:382] mnist -> data
I0428 19:36:12.045135 23652 net.cpp:382] mnist -> label
I0428 19:36:12.046227 23652 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:36:12.048669 23652 net.cpp:124] Setting up mnist
I0428 19:36:12.048687 23652 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:36:12.048694 23652 net.cpp:131] Top shape: 64 (64)
I0428 19:36:12.048698 23652 net.cpp:139] Memory required for data: 200960
I0428 19:36:12.048705 23652 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:12.048722 23652 net.cpp:86] Creating Layer conv0
I0428 19:36:12.048727 23652 net.cpp:408] conv0 <- data
I0428 19:36:12.048738 23652 net.cpp:382] conv0 -> conv0
I0428 19:36:12.342073 23652 net.cpp:124] Setting up conv0
I0428 19:36:12.342105 23652 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:36:12.342110 23652 net.cpp:139] Memory required for data: 14946560
I0428 19:36:12.342129 23652 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:12.342145 23652 net.cpp:86] Creating Layer pool0
I0428 19:36:12.342150 23652 net.cpp:408] pool0 <- conv0
I0428 19:36:12.342157 23652 net.cpp:382] pool0 -> pool0
I0428 19:36:12.342216 23652 net.cpp:124] Setting up pool0
I0428 19:36:12.342231 23652 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:36:12.342236 23652 net.cpp:139] Memory required for data: 18632960
I0428 19:36:12.342257 23652 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:12.342265 23652 net.cpp:86] Creating Layer ip1
I0428 19:36:12.342269 23652 net.cpp:408] ip1 <- pool0
I0428 19:36:12.342278 23652 net.cpp:382] ip1 -> ip1
I0428 19:36:12.344346 23652 net.cpp:124] Setting up ip1
I0428 19:36:12.344362 23652 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:12.344365 23652 net.cpp:139] Memory required for data: 18635520
I0428 19:36:12.344375 23652 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:12.344383 23652 net.cpp:86] Creating Layer relu1
I0428 19:36:12.344388 23652 net.cpp:408] relu1 <- ip1
I0428 19:36:12.344396 23652 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:12.344612 23652 net.cpp:124] Setting up relu1
I0428 19:36:12.344624 23652 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:12.344629 23652 net.cpp:139] Memory required for data: 18638080
I0428 19:36:12.344632 23652 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:12.344642 23652 net.cpp:86] Creating Layer ip2
I0428 19:36:12.344646 23652 net.cpp:408] ip2 <- ip1
I0428 19:36:12.344653 23652 net.cpp:382] ip2 -> ip2
I0428 19:36:12.344772 23652 net.cpp:124] Setting up ip2
I0428 19:36:12.344782 23652 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:12.344786 23652 net.cpp:139] Memory required for data: 18640640
I0428 19:36:12.344795 23652 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:12.344801 23652 net.cpp:86] Creating Layer relu2
I0428 19:36:12.344805 23652 net.cpp:408] relu2 <- ip2
I0428 19:36:12.344817 23652 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:12.345687 23652 net.cpp:124] Setting up relu2
I0428 19:36:12.345702 23652 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:12.345706 23652 net.cpp:139] Memory required for data: 18643200
I0428 19:36:12.345710 23652 layer_factory.hpp:77] Creating layer loss
I0428 19:36:12.345721 23652 net.cpp:86] Creating Layer loss
I0428 19:36:12.345724 23652 net.cpp:408] loss <- ip2
I0428 19:36:12.345729 23652 net.cpp:408] loss <- label
I0428 19:36:12.345736 23652 net.cpp:382] loss -> loss
I0428 19:36:12.345757 23652 layer_factory.hpp:77] Creating layer loss
I0428 19:36:12.346046 23652 net.cpp:124] Setting up loss
I0428 19:36:12.346057 23652 net.cpp:131] Top shape: (1)
I0428 19:36:12.346061 23652 net.cpp:134]     with loss weight 1
I0428 19:36:12.346077 23652 net.cpp:139] Memory required for data: 18643204
I0428 19:36:12.346081 23652 net.cpp:200] loss needs backward computation.
I0428 19:36:12.346086 23652 net.cpp:200] relu2 needs backward computation.
I0428 19:36:12.346089 23652 net.cpp:200] ip2 needs backward computation.
I0428 19:36:12.346093 23652 net.cpp:200] relu1 needs backward computation.
I0428 19:36:12.346096 23652 net.cpp:200] ip1 needs backward computation.
I0428 19:36:12.346101 23652 net.cpp:200] pool0 needs backward computation.
I0428 19:36:12.346103 23652 net.cpp:200] conv0 needs backward computation.
I0428 19:36:12.346107 23652 net.cpp:202] mnist does not need backward computation.
I0428 19:36:12.346112 23652 net.cpp:244] This network produces output loss
I0428 19:36:12.346122 23652 net.cpp:257] Network initialization done.
I0428 19:36:12.346427 23652 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test239.prototxt
I0428 19:36:12.346456 23652 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:36:12.346540 23652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:12.346631 23652 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:12.346681 23652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:36:12.346694 23652 net.cpp:86] Creating Layer mnist
I0428 19:36:12.346701 23652 net.cpp:382] mnist -> data
I0428 19:36:12.346710 23652 net.cpp:382] mnist -> label
I0428 19:36:12.346815 23652 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:36:12.348055 23652 net.cpp:124] Setting up mnist
I0428 19:36:12.348070 23652 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:36:12.348076 23652 net.cpp:131] Top shape: 100 (100)
I0428 19:36:12.348080 23652 net.cpp:139] Memory required for data: 314000
I0428 19:36:12.348085 23652 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:36:12.348139 23652 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:36:12.348145 23652 net.cpp:408] label_mnist_1_split <- label
I0428 19:36:12.348150 23652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:36:12.348158 23652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:36:12.348271 23652 net.cpp:124] Setting up label_mnist_1_split
I0428 19:36:12.348280 23652 net.cpp:131] Top shape: 100 (100)
I0428 19:36:12.348285 23652 net.cpp:131] Top shape: 100 (100)
I0428 19:36:12.348289 23652 net.cpp:139] Memory required for data: 314800
I0428 19:36:12.348292 23652 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:12.348304 23652 net.cpp:86] Creating Layer conv0
I0428 19:36:12.348307 23652 net.cpp:408] conv0 <- data
I0428 19:36:12.348315 23652 net.cpp:382] conv0 -> conv0
I0428 19:36:12.350225 23652 net.cpp:124] Setting up conv0
I0428 19:36:12.350242 23652 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:36:12.350247 23652 net.cpp:139] Memory required for data: 23354800
I0428 19:36:12.350258 23652 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:12.350267 23652 net.cpp:86] Creating Layer pool0
I0428 19:36:12.350272 23652 net.cpp:408] pool0 <- conv0
I0428 19:36:12.350278 23652 net.cpp:382] pool0 -> pool0
I0428 19:36:12.350325 23652 net.cpp:124] Setting up pool0
I0428 19:36:12.350332 23652 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:36:12.350335 23652 net.cpp:139] Memory required for data: 29114800
I0428 19:36:12.350338 23652 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:12.350347 23652 net.cpp:86] Creating Layer ip1
I0428 19:36:12.350350 23652 net.cpp:408] ip1 <- pool0
I0428 19:36:12.350358 23652 net.cpp:382] ip1 -> ip1
I0428 19:36:12.352440 23652 net.cpp:124] Setting up ip1
I0428 19:36:12.352454 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.352459 23652 net.cpp:139] Memory required for data: 29118800
I0428 19:36:12.352469 23652 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:12.352476 23652 net.cpp:86] Creating Layer relu1
I0428 19:36:12.352480 23652 net.cpp:408] relu1 <- ip1
I0428 19:36:12.352486 23652 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:12.352741 23652 net.cpp:124] Setting up relu1
I0428 19:36:12.352753 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.352769 23652 net.cpp:139] Memory required for data: 29122800
I0428 19:36:12.352773 23652 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:12.352783 23652 net.cpp:86] Creating Layer ip2
I0428 19:36:12.352787 23652 net.cpp:408] ip2 <- ip1
I0428 19:36:12.352794 23652 net.cpp:382] ip2 -> ip2
I0428 19:36:12.352929 23652 net.cpp:124] Setting up ip2
I0428 19:36:12.352939 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.352943 23652 net.cpp:139] Memory required for data: 29126800
I0428 19:36:12.352953 23652 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:12.352962 23652 net.cpp:86] Creating Layer relu2
I0428 19:36:12.352965 23652 net.cpp:408] relu2 <- ip2
I0428 19:36:12.352970 23652 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:12.353163 23652 net.cpp:124] Setting up relu2
I0428 19:36:12.353173 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.353178 23652 net.cpp:139] Memory required for data: 29130800
I0428 19:36:12.353183 23652 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:36:12.353189 23652 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:36:12.353193 23652 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:36:12.353199 23652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:36:12.353206 23652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:36:12.353251 23652 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:36:12.353258 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.353262 23652 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:12.353266 23652 net.cpp:139] Memory required for data: 29138800
I0428 19:36:12.353269 23652 layer_factory.hpp:77] Creating layer accuracy
I0428 19:36:12.353277 23652 net.cpp:86] Creating Layer accuracy
I0428 19:36:12.353281 23652 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:36:12.353286 23652 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:36:12.353291 23652 net.cpp:382] accuracy -> accuracy
I0428 19:36:12.353298 23652 net.cpp:124] Setting up accuracy
I0428 19:36:12.353303 23652 net.cpp:131] Top shape: (1)
I0428 19:36:12.353307 23652 net.cpp:139] Memory required for data: 29138804
I0428 19:36:12.353312 23652 layer_factory.hpp:77] Creating layer loss
I0428 19:36:12.353318 23652 net.cpp:86] Creating Layer loss
I0428 19:36:12.353322 23652 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:36:12.353327 23652 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:36:12.353332 23652 net.cpp:382] loss -> loss
I0428 19:36:12.353339 23652 layer_factory.hpp:77] Creating layer loss
I0428 19:36:12.354440 23652 net.cpp:124] Setting up loss
I0428 19:36:12.354455 23652 net.cpp:131] Top shape: (1)
I0428 19:36:12.354460 23652 net.cpp:134]     with loss weight 1
I0428 19:36:12.354466 23652 net.cpp:139] Memory required for data: 29138808
I0428 19:36:12.354471 23652 net.cpp:200] loss needs backward computation.
I0428 19:36:12.354476 23652 net.cpp:202] accuracy does not need backward computation.
I0428 19:36:12.354480 23652 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:36:12.354485 23652 net.cpp:200] relu2 needs backward computation.
I0428 19:36:12.354487 23652 net.cpp:200] ip2 needs backward computation.
I0428 19:36:12.354491 23652 net.cpp:200] relu1 needs backward computation.
I0428 19:36:12.354495 23652 net.cpp:200] ip1 needs backward computation.
I0428 19:36:12.354509 23652 net.cpp:200] pool0 needs backward computation.
I0428 19:36:12.354513 23652 net.cpp:200] conv0 needs backward computation.
I0428 19:36:12.354524 23652 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:36:12.354528 23652 net.cpp:202] mnist does not need backward computation.
I0428 19:36:12.354532 23652 net.cpp:244] This network produces output accuracy
I0428 19:36:12.354542 23652 net.cpp:244] This network produces output loss
I0428 19:36:12.354554 23652 net.cpp:257] Network initialization done.
I0428 19:36:12.354593 23652 solver.cpp:56] Solver scaffolding done.
I0428 19:36:12.354838 23652 caffe.cpp:248] Starting Optimization
I0428 19:36:12.354846 23652 solver.cpp:273] Solving LeNet
I0428 19:36:12.354862 23652 solver.cpp:274] Learning Rate Policy: inv
I0428 19:36:12.355748 23652 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:36:12.517137 23659 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:12.521643 23652 solver.cpp:398]     Test net output #0: accuracy = 0.0849
I0428 19:36:12.521667 23652 solver.cpp:398]     Test net output #1: loss = 2.32076 (* 1 = 2.32076 loss)
I0428 19:36:12.526967 23652 solver.cpp:219] Iteration 0 (0 iter/s, 0.172068s/100 iters), loss = 2.29722
I0428 19:36:12.526995 23652 solver.cpp:238]     Train net output #0: loss = 2.29722 (* 1 = 2.29722 loss)
I0428 19:36:12.527009 23652 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:36:12.749224 23652 solver.cpp:219] Iteration 100 (450.053 iter/s, 0.222196s/100 iters), loss = 0.869588
I0428 19:36:12.749249 23652 solver.cpp:238]     Train net output #0: loss = 0.869588 (* 1 = 0.869588 loss)
I0428 19:36:12.749255 23652 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:36:12.970214 23652 solver.cpp:219] Iteration 200 (452.594 iter/s, 0.220948s/100 iters), loss = 0.432279
I0428 19:36:12.970240 23652 solver.cpp:238]     Train net output #0: loss = 0.432279 (* 1 = 0.432279 loss)
I0428 19:36:12.970247 23652 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:36:13.191112 23652 solver.cpp:219] Iteration 300 (452.785 iter/s, 0.220855s/100 iters), loss = 0.472417
I0428 19:36:13.191154 23652 solver.cpp:238]     Train net output #0: loss = 0.472417 (* 1 = 0.472417 loss)
I0428 19:36:13.191160 23652 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:36:13.412664 23652 solver.cpp:219] Iteration 400 (451.479 iter/s, 0.221494s/100 iters), loss = 0.367429
I0428 19:36:13.412690 23652 solver.cpp:238]     Train net output #0: loss = 0.367429 (* 1 = 0.367429 loss)
I0428 19:36:13.412698 23652 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:36:13.630769 23652 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:36:13.786578 23659 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:13.790871 23652 solver.cpp:398]     Test net output #0: accuracy = 0.8551
I0428 19:36:13.790911 23652 solver.cpp:398]     Test net output #1: loss = 0.425699 (* 1 = 0.425699 loss)
I0428 19:36:13.793079 23652 solver.cpp:219] Iteration 500 (262.906 iter/s, 0.380364s/100 iters), loss = 0.572118
I0428 19:36:13.793104 23652 solver.cpp:238]     Train net output #0: loss = 0.572118 (* 1 = 0.572118 loss)
I0428 19:36:13.793112 23652 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:36:14.014302 23652 solver.cpp:219] Iteration 600 (452.119 iter/s, 0.221181s/100 iters), loss = 0.427786
I0428 19:36:14.014328 23652 solver.cpp:238]     Train net output #0: loss = 0.427786 (* 1 = 0.427786 loss)
I0428 19:36:14.014335 23652 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:36:14.236222 23652 solver.cpp:219] Iteration 700 (450.704 iter/s, 0.221875s/100 iters), loss = 0.510226
I0428 19:36:14.236251 23652 solver.cpp:238]     Train net output #0: loss = 0.510226 (* 1 = 0.510226 loss)
I0428 19:36:14.236259 23652 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:36:14.458539 23652 solver.cpp:219] Iteration 800 (449.902 iter/s, 0.22227s/100 iters), loss = 0.562849
I0428 19:36:14.458566 23652 solver.cpp:238]     Train net output #0: loss = 0.562849 (* 1 = 0.562849 loss)
I0428 19:36:14.458573 23652 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:36:14.680832 23652 solver.cpp:219] Iteration 900 (449.944 iter/s, 0.22225s/100 iters), loss = 0.536547
I0428 19:36:14.680874 23652 solver.cpp:238]     Train net output #0: loss = 0.536547 (* 1 = 0.536547 loss)
I0428 19:36:14.680881 23652 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:36:14.754731 23658 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:14.899003 23652 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:36:14.902915 23652 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:36:14.905447 23652 solver.cpp:311] Iteration 1000, loss = 0.410534
I0428 19:36:14.905462 23652 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:36:15.059648 23659 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:15.064019 23652 solver.cpp:398]     Test net output #0: accuracy = 0.8707
I0428 19:36:15.064055 23652 solver.cpp:398]     Test net output #1: loss = 0.353601 (* 1 = 0.353601 loss)
I0428 19:36:15.064060 23652 solver.cpp:316] Optimization Done.
I0428 19:36:15.064064 23652 caffe.cpp:259] Optimization Done.
