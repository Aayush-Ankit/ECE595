I0428 20:31:04.132103  3901 caffe.cpp:218] Using GPUs 0
I0428 20:31:04.171876  3901 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:31:04.692044  3901 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1549.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:31:04.692214  3901 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1549.prototxt
I0428 20:31:04.692638  3901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:31:04.692663  3901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:31:04.692782  3901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:31:04.692905  3901 layer_factory.hpp:77] Creating layer mnist
I0428 20:31:04.693039  3901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:31:04.693073  3901 net.cpp:86] Creating Layer mnist
I0428 20:31:04.693084  3901 net.cpp:382] mnist -> data
I0428 20:31:04.693116  3901 net.cpp:382] mnist -> label
I0428 20:31:04.694404  3901 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:31:04.696872  3901 net.cpp:124] Setting up mnist
I0428 20:31:04.696893  3901 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:31:04.696903  3901 net.cpp:131] Top shape: 64 (64)
I0428 20:31:04.696909  3901 net.cpp:139] Memory required for data: 200960
I0428 20:31:04.696920  3901 layer_factory.hpp:77] Creating layer conv0
I0428 20:31:04.696946  3901 net.cpp:86] Creating Layer conv0
I0428 20:31:04.696970  3901 net.cpp:408] conv0 <- data
I0428 20:31:04.696990  3901 net.cpp:382] conv0 -> conv0
I0428 20:31:04.989913  3901 net.cpp:124] Setting up conv0
I0428 20:31:04.989948  3901 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:31:04.989956  3901 net.cpp:139] Memory required for data: 14946560
I0428 20:31:04.989980  3901 layer_factory.hpp:77] Creating layer pool0
I0428 20:31:04.990001  3901 net.cpp:86] Creating Layer pool0
I0428 20:31:04.990020  3901 net.cpp:408] pool0 <- conv0
I0428 20:31:04.990032  3901 net.cpp:382] pool0 -> pool0
I0428 20:31:04.990101  3901 net.cpp:124] Setting up pool0
I0428 20:31:04.990113  3901 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:31:04.990118  3901 net.cpp:139] Memory required for data: 18632960
I0428 20:31:04.990124  3901 layer_factory.hpp:77] Creating layer conv1
I0428 20:31:04.990149  3901 net.cpp:86] Creating Layer conv1
I0428 20:31:04.990157  3901 net.cpp:408] conv1 <- pool0
I0428 20:31:04.990169  3901 net.cpp:382] conv1 -> conv1
I0428 20:31:04.992544  3901 net.cpp:124] Setting up conv1
I0428 20:31:04.992565  3901 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:31:04.992573  3901 net.cpp:139] Memory required for data: 18796800
I0428 20:31:04.992589  3901 layer_factory.hpp:77] Creating layer pool1
I0428 20:31:04.992606  3901 net.cpp:86] Creating Layer pool1
I0428 20:31:04.992617  3901 net.cpp:408] pool1 <- conv1
I0428 20:31:04.992630  3901 net.cpp:382] pool1 -> pool1
I0428 20:31:04.992686  3901 net.cpp:124] Setting up pool1
I0428 20:31:04.992697  3901 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:31:04.992702  3901 net.cpp:139] Memory required for data: 18837760
I0428 20:31:04.992709  3901 layer_factory.hpp:77] Creating layer ip1
I0428 20:31:04.992724  3901 net.cpp:86] Creating Layer ip1
I0428 20:31:04.992735  3901 net.cpp:408] ip1 <- pool1
I0428 20:31:04.992746  3901 net.cpp:382] ip1 -> ip1
I0428 20:31:04.992926  3901 net.cpp:124] Setting up ip1
I0428 20:31:04.992938  3901 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:31:04.992944  3901 net.cpp:139] Memory required for data: 18844160
I0428 20:31:04.992959  3901 layer_factory.hpp:77] Creating layer relu1
I0428 20:31:04.992970  3901 net.cpp:86] Creating Layer relu1
I0428 20:31:04.992979  3901 net.cpp:408] relu1 <- ip1
I0428 20:31:04.992987  3901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:31:04.993196  3901 net.cpp:124] Setting up relu1
I0428 20:31:04.993208  3901 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:31:04.993214  3901 net.cpp:139] Memory required for data: 18850560
I0428 20:31:04.993221  3901 layer_factory.hpp:77] Creating layer ip2
I0428 20:31:04.993233  3901 net.cpp:86] Creating Layer ip2
I0428 20:31:04.993240  3901 net.cpp:408] ip2 <- ip1
I0428 20:31:04.993250  3901 net.cpp:382] ip2 -> ip2
I0428 20:31:04.993382  3901 net.cpp:124] Setting up ip2
I0428 20:31:04.993393  3901 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:31:04.993399  3901 net.cpp:139] Memory required for data: 18863360
I0428 20:31:04.993410  3901 layer_factory.hpp:77] Creating layer relu2
I0428 20:31:04.993422  3901 net.cpp:86] Creating Layer relu2
I0428 20:31:04.993429  3901 net.cpp:408] relu2 <- ip2
I0428 20:31:04.993438  3901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:31:04.994292  3901 net.cpp:124] Setting up relu2
I0428 20:31:04.994309  3901 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:31:04.994316  3901 net.cpp:139] Memory required for data: 18876160
I0428 20:31:04.994323  3901 layer_factory.hpp:77] Creating layer ip3
I0428 20:31:04.994336  3901 net.cpp:86] Creating Layer ip3
I0428 20:31:04.994343  3901 net.cpp:408] ip3 <- ip2
I0428 20:31:04.994354  3901 net.cpp:382] ip3 -> ip3
I0428 20:31:04.994483  3901 net.cpp:124] Setting up ip3
I0428 20:31:04.994494  3901 net.cpp:131] Top shape: 64 10 (640)
I0428 20:31:04.994501  3901 net.cpp:139] Memory required for data: 18878720
I0428 20:31:04.994516  3901 layer_factory.hpp:77] Creating layer relu3
I0428 20:31:04.994529  3901 net.cpp:86] Creating Layer relu3
I0428 20:31:04.994536  3901 net.cpp:408] relu3 <- ip3
I0428 20:31:04.994545  3901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:31:04.994750  3901 net.cpp:124] Setting up relu3
I0428 20:31:04.994761  3901 net.cpp:131] Top shape: 64 10 (640)
I0428 20:31:04.994767  3901 net.cpp:139] Memory required for data: 18881280
I0428 20:31:04.994773  3901 layer_factory.hpp:77] Creating layer loss
I0428 20:31:04.994784  3901 net.cpp:86] Creating Layer loss
I0428 20:31:04.994791  3901 net.cpp:408] loss <- ip3
I0428 20:31:04.994799  3901 net.cpp:408] loss <- label
I0428 20:31:04.994809  3901 net.cpp:382] loss -> loss
I0428 20:31:04.994838  3901 layer_factory.hpp:77] Creating layer loss
I0428 20:31:04.995121  3901 net.cpp:124] Setting up loss
I0428 20:31:04.995132  3901 net.cpp:131] Top shape: (1)
I0428 20:31:04.995139  3901 net.cpp:134]     with loss weight 1
I0428 20:31:04.995162  3901 net.cpp:139] Memory required for data: 18881284
I0428 20:31:04.995169  3901 net.cpp:200] loss needs backward computation.
I0428 20:31:04.995177  3901 net.cpp:200] relu3 needs backward computation.
I0428 20:31:04.995183  3901 net.cpp:200] ip3 needs backward computation.
I0428 20:31:04.995190  3901 net.cpp:200] relu2 needs backward computation.
I0428 20:31:04.995196  3901 net.cpp:200] ip2 needs backward computation.
I0428 20:31:04.995203  3901 net.cpp:200] relu1 needs backward computation.
I0428 20:31:04.995208  3901 net.cpp:200] ip1 needs backward computation.
I0428 20:31:04.995215  3901 net.cpp:200] pool1 needs backward computation.
I0428 20:31:04.995223  3901 net.cpp:200] conv1 needs backward computation.
I0428 20:31:04.995229  3901 net.cpp:200] pool0 needs backward computation.
I0428 20:31:04.995235  3901 net.cpp:200] conv0 needs backward computation.
I0428 20:31:04.995242  3901 net.cpp:202] mnist does not need backward computation.
I0428 20:31:04.995249  3901 net.cpp:244] This network produces output loss
I0428 20:31:04.995266  3901 net.cpp:257] Network initialization done.
I0428 20:31:04.995658  3901 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1549.prototxt
I0428 20:31:04.995700  3901 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:31:04.995816  3901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:31:04.995955  3901 layer_factory.hpp:77] Creating layer mnist
I0428 20:31:04.996026  3901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:31:04.996048  3901 net.cpp:86] Creating Layer mnist
I0428 20:31:04.996058  3901 net.cpp:382] mnist -> data
I0428 20:31:04.996073  3901 net.cpp:382] mnist -> label
I0428 20:31:04.996217  3901 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:31:04.998842  3901 net.cpp:124] Setting up mnist
I0428 20:31:04.998859  3901 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:31:04.998869  3901 net.cpp:131] Top shape: 100 (100)
I0428 20:31:04.998877  3901 net.cpp:139] Memory required for data: 314000
I0428 20:31:04.998883  3901 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:31:04.998895  3901 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:31:04.998903  3901 net.cpp:408] label_mnist_1_split <- label
I0428 20:31:04.998913  3901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:31:04.998925  3901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:31:04.999024  3901 net.cpp:124] Setting up label_mnist_1_split
I0428 20:31:04.999035  3901 net.cpp:131] Top shape: 100 (100)
I0428 20:31:04.999042  3901 net.cpp:131] Top shape: 100 (100)
I0428 20:31:04.999049  3901 net.cpp:139] Memory required for data: 314800
I0428 20:31:04.999055  3901 layer_factory.hpp:77] Creating layer conv0
I0428 20:31:04.999071  3901 net.cpp:86] Creating Layer conv0
I0428 20:31:04.999080  3901 net.cpp:408] conv0 <- data
I0428 20:31:04.999091  3901 net.cpp:382] conv0 -> conv0
I0428 20:31:05.000849  3901 net.cpp:124] Setting up conv0
I0428 20:31:05.000869  3901 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:31:05.000876  3901 net.cpp:139] Memory required for data: 23354800
I0428 20:31:05.000893  3901 layer_factory.hpp:77] Creating layer pool0
I0428 20:31:05.000906  3901 net.cpp:86] Creating Layer pool0
I0428 20:31:05.000913  3901 net.cpp:408] pool0 <- conv0
I0428 20:31:05.000923  3901 net.cpp:382] pool0 -> pool0
I0428 20:31:05.000974  3901 net.cpp:124] Setting up pool0
I0428 20:31:05.000985  3901 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:31:05.000993  3901 net.cpp:139] Memory required for data: 29114800
I0428 20:31:05.000998  3901 layer_factory.hpp:77] Creating layer conv1
I0428 20:31:05.001014  3901 net.cpp:86] Creating Layer conv1
I0428 20:31:05.001024  3901 net.cpp:408] conv1 <- pool0
I0428 20:31:05.001034  3901 net.cpp:382] conv1 -> conv1
I0428 20:31:05.002912  3901 net.cpp:124] Setting up conv1
I0428 20:31:05.002929  3901 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:31:05.002936  3901 net.cpp:139] Memory required for data: 29370800
I0428 20:31:05.002952  3901 layer_factory.hpp:77] Creating layer pool1
I0428 20:31:05.002964  3901 net.cpp:86] Creating Layer pool1
I0428 20:31:05.002972  3901 net.cpp:408] pool1 <- conv1
I0428 20:31:05.002981  3901 net.cpp:382] pool1 -> pool1
I0428 20:31:05.003034  3901 net.cpp:124] Setting up pool1
I0428 20:31:05.003046  3901 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:31:05.003051  3901 net.cpp:139] Memory required for data: 29434800
I0428 20:31:05.003058  3901 layer_factory.hpp:77] Creating layer ip1
I0428 20:31:05.003069  3901 net.cpp:86] Creating Layer ip1
I0428 20:31:05.003077  3901 net.cpp:408] ip1 <- pool1
I0428 20:31:05.003087  3901 net.cpp:382] ip1 -> ip1
I0428 20:31:05.003249  3901 net.cpp:124] Setting up ip1
I0428 20:31:05.003274  3901 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:31:05.003281  3901 net.cpp:139] Memory required for data: 29444800
I0428 20:31:05.003296  3901 layer_factory.hpp:77] Creating layer relu1
I0428 20:31:05.003307  3901 net.cpp:86] Creating Layer relu1
I0428 20:31:05.003314  3901 net.cpp:408] relu1 <- ip1
I0428 20:31:05.003324  3901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:31:05.003531  3901 net.cpp:124] Setting up relu1
I0428 20:31:05.003543  3901 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:31:05.003551  3901 net.cpp:139] Memory required for data: 29454800
I0428 20:31:05.003558  3901 layer_factory.hpp:77] Creating layer ip2
I0428 20:31:05.003571  3901 net.cpp:86] Creating Layer ip2
I0428 20:31:05.003578  3901 net.cpp:408] ip2 <- ip1
I0428 20:31:05.003589  3901 net.cpp:382] ip2 -> ip2
I0428 20:31:05.003742  3901 net.cpp:124] Setting up ip2
I0428 20:31:05.003752  3901 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:31:05.003758  3901 net.cpp:139] Memory required for data: 29474800
I0428 20:31:05.003769  3901 layer_factory.hpp:77] Creating layer relu2
I0428 20:31:05.003779  3901 net.cpp:86] Creating Layer relu2
I0428 20:31:05.003787  3901 net.cpp:408] relu2 <- ip2
I0428 20:31:05.003794  3901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:31:05.003985  3901 net.cpp:124] Setting up relu2
I0428 20:31:05.004000  3901 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:31:05.004006  3901 net.cpp:139] Memory required for data: 29494800
I0428 20:31:05.004014  3901 layer_factory.hpp:77] Creating layer ip3
I0428 20:31:05.004024  3901 net.cpp:86] Creating Layer ip3
I0428 20:31:05.004030  3901 net.cpp:408] ip3 <- ip2
I0428 20:31:05.004040  3901 net.cpp:382] ip3 -> ip3
I0428 20:31:05.004170  3901 net.cpp:124] Setting up ip3
I0428 20:31:05.004181  3901 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:05.004191  3901 net.cpp:139] Memory required for data: 29498800
I0428 20:31:05.004207  3901 layer_factory.hpp:77] Creating layer relu3
I0428 20:31:05.004217  3901 net.cpp:86] Creating Layer relu3
I0428 20:31:05.004225  3901 net.cpp:408] relu3 <- ip3
I0428 20:31:05.004233  3901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:31:05.005189  3901 net.cpp:124] Setting up relu3
I0428 20:31:05.005206  3901 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:05.005213  3901 net.cpp:139] Memory required for data: 29502800
I0428 20:31:05.005220  3901 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:31:05.005230  3901 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:31:05.005237  3901 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:31:05.005247  3901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:31:05.005259  3901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:31:05.005311  3901 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:31:05.005322  3901 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:05.005331  3901 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:31:05.005337  3901 net.cpp:139] Memory required for data: 29510800
I0428 20:31:05.005343  3901 layer_factory.hpp:77] Creating layer accuracy
I0428 20:31:05.005359  3901 net.cpp:86] Creating Layer accuracy
I0428 20:31:05.005367  3901 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:31:05.005378  3901 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:31:05.005388  3901 net.cpp:382] accuracy -> accuracy
I0428 20:31:05.005401  3901 net.cpp:124] Setting up accuracy
I0428 20:31:05.005411  3901 net.cpp:131] Top shape: (1)
I0428 20:31:05.005417  3901 net.cpp:139] Memory required for data: 29510804
I0428 20:31:05.005424  3901 layer_factory.hpp:77] Creating layer loss
I0428 20:31:05.005434  3901 net.cpp:86] Creating Layer loss
I0428 20:31:05.005445  3901 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:31:05.005452  3901 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:31:05.005461  3901 net.cpp:382] loss -> loss
I0428 20:31:05.005473  3901 layer_factory.hpp:77] Creating layer loss
I0428 20:31:05.005758  3901 net.cpp:124] Setting up loss
I0428 20:31:05.005769  3901 net.cpp:131] Top shape: (1)
I0428 20:31:05.005776  3901 net.cpp:134]     with loss weight 1
I0428 20:31:05.005800  3901 net.cpp:139] Memory required for data: 29510808
I0428 20:31:05.005813  3901 net.cpp:200] loss needs backward computation.
I0428 20:31:05.005821  3901 net.cpp:202] accuracy does not need backward computation.
I0428 20:31:05.005830  3901 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:31:05.005836  3901 net.cpp:200] relu3 needs backward computation.
I0428 20:31:05.005841  3901 net.cpp:200] ip3 needs backward computation.
I0428 20:31:05.005848  3901 net.cpp:200] relu2 needs backward computation.
I0428 20:31:05.005856  3901 net.cpp:200] ip2 needs backward computation.
I0428 20:31:05.005863  3901 net.cpp:200] relu1 needs backward computation.
I0428 20:31:05.005869  3901 net.cpp:200] ip1 needs backward computation.
I0428 20:31:05.005875  3901 net.cpp:200] pool1 needs backward computation.
I0428 20:31:05.005882  3901 net.cpp:200] conv1 needs backward computation.
I0428 20:31:05.005889  3901 net.cpp:200] pool0 needs backward computation.
I0428 20:31:05.005897  3901 net.cpp:200] conv0 needs backward computation.
I0428 20:31:05.005904  3901 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:31:05.005913  3901 net.cpp:202] mnist does not need backward computation.
I0428 20:31:05.005918  3901 net.cpp:244] This network produces output accuracy
I0428 20:31:05.005926  3901 net.cpp:244] This network produces output loss
I0428 20:31:05.005945  3901 net.cpp:257] Network initialization done.
I0428 20:31:05.006003  3901 solver.cpp:56] Solver scaffolding done.
I0428 20:31:05.006456  3901 caffe.cpp:248] Starting Optimization
I0428 20:31:05.006465  3901 solver.cpp:273] Solving LeNet
I0428 20:31:05.006470  3901 solver.cpp:274] Learning Rate Policy: inv
I0428 20:31:05.007383  3901 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:31:05.107648  3908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:05.109879  3901 solver.cpp:398]     Test net output #0: accuracy = 0.1253
I0428 20:31:05.109904  3901 solver.cpp:398]     Test net output #1: loss = 2.32018 (* 1 = 2.32018 loss)
I0428 20:31:05.114611  3901 solver.cpp:219] Iteration 0 (-5.36806e-31 iter/s, 0.1081s/100 iters), loss = 2.35859
I0428 20:31:05.114644  3901 solver.cpp:238]     Train net output #0: loss = 2.35859 (* 1 = 2.35859 loss)
I0428 20:31:05.114662  3901 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:31:05.326508  3901 solver.cpp:219] Iteration 100 (472.034 iter/s, 0.211849s/100 iters), loss = 0.240677
I0428 20:31:05.326555  3901 solver.cpp:238]     Train net output #0: loss = 0.240677 (* 1 = 0.240677 loss)
I0428 20:31:05.326571  3901 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:31:05.545321  3901 solver.cpp:219] Iteration 200 (457.136 iter/s, 0.218753s/100 iters), loss = 0.241618
I0428 20:31:05.545372  3901 solver.cpp:238]     Train net output #0: loss = 0.241618 (* 1 = 0.241618 loss)
I0428 20:31:05.545389  3901 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:31:05.768801  3901 solver.cpp:219] Iteration 300 (447.597 iter/s, 0.223415s/100 iters), loss = 0.263211
I0428 20:31:05.768872  3901 solver.cpp:238]     Train net output #0: loss = 0.263211 (* 1 = 0.263211 loss)
I0428 20:31:05.768892  3901 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:31:05.994848  3901 solver.cpp:219] Iteration 400 (442.548 iter/s, 0.225964s/100 iters), loss = 0.097397
I0428 20:31:05.994904  3901 solver.cpp:238]     Train net output #0: loss = 0.097397 (* 1 = 0.097397 loss)
I0428 20:31:05.994923  3901 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:31:06.218811  3901 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:31:06.321619  3908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:06.325186  3901 solver.cpp:398]     Test net output #0: accuracy = 0.961
I0428 20:31:06.325215  3901 solver.cpp:398]     Test net output #1: loss = 0.122878 (* 1 = 0.122878 loss)
I0428 20:31:06.327155  3901 solver.cpp:219] Iteration 500 (300.988 iter/s, 0.332239s/100 iters), loss = 0.186425
I0428 20:31:06.327190  3901 solver.cpp:238]     Train net output #0: loss = 0.186425 (* 1 = 0.186425 loss)
I0428 20:31:06.327222  3901 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:31:06.551632  3901 solver.cpp:219] Iteration 600 (445.591 iter/s, 0.224421s/100 iters), loss = 0.100003
I0428 20:31:06.551687  3901 solver.cpp:238]     Train net output #0: loss = 0.100003 (* 1 = 0.100003 loss)
I0428 20:31:06.551702  3901 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:31:06.780120  3901 solver.cpp:219] Iteration 700 (437.799 iter/s, 0.228416s/100 iters), loss = 0.113912
I0428 20:31:06.780174  3901 solver.cpp:238]     Train net output #0: loss = 0.113912 (* 1 = 0.113912 loss)
I0428 20:31:06.780186  3901 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:31:07.010097  3901 solver.cpp:219] Iteration 800 (434.96 iter/s, 0.229906s/100 iters), loss = 0.180918
I0428 20:31:07.010149  3901 solver.cpp:238]     Train net output #0: loss = 0.180918 (* 1 = 0.180918 loss)
I0428 20:31:07.010162  3901 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:31:07.240996  3901 solver.cpp:219] Iteration 900 (433.219 iter/s, 0.23083s/100 iters), loss = 0.160343
I0428 20:31:07.241045  3901 solver.cpp:238]     Train net output #0: loss = 0.160343 (* 1 = 0.160343 loss)
I0428 20:31:07.241057  3901 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:31:07.316922  3907 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:07.456972  3901 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:31:07.458946  3901 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:31:07.460343  3901 solver.cpp:311] Iteration 1000, loss = 0.117782
I0428 20:31:07.460381  3901 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:31:07.566391  3908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:31:07.570042  3901 solver.cpp:398]     Test net output #0: accuracy = 0.9739
I0428 20:31:07.570071  3901 solver.cpp:398]     Test net output #1: loss = 0.0834789 (* 1 = 0.0834789 loss)
I0428 20:31:07.570078  3901 solver.cpp:316] Optimization Done.
I0428 20:31:07.570082  3901 caffe.cpp:259] Optimization Done.
