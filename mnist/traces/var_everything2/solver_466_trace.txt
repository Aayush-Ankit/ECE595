I0428 19:45:10.930570 25755 caffe.cpp:218] Using GPUs 0
I0428 19:45:10.971683 25755 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:11.492218 25755 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test466.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:11.492352 25755 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test466.prototxt
I0428 19:45:11.492755 25755 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:11.492772 25755 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:11.492877 25755 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:11.492949 25755 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:11.493057 25755 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:11.493078 25755 net.cpp:86] Creating Layer mnist
I0428 19:45:11.493086 25755 net.cpp:382] mnist -> data
I0428 19:45:11.493108 25755 net.cpp:382] mnist -> label
I0428 19:45:11.494237 25755 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:11.496675 25755 net.cpp:124] Setting up mnist
I0428 19:45:11.496692 25755 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:11.496698 25755 net.cpp:131] Top shape: 64 (64)
I0428 19:45:11.496702 25755 net.cpp:139] Memory required for data: 200960
I0428 19:45:11.496717 25755 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:11.496733 25755 net.cpp:86] Creating Layer conv0
I0428 19:45:11.496755 25755 net.cpp:408] conv0 <- data
I0428 19:45:11.496767 25755 net.cpp:382] conv0 -> conv0
I0428 19:45:11.785794 25755 net.cpp:124] Setting up conv0
I0428 19:45:11.785825 25755 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:11.785830 25755 net.cpp:139] Memory required for data: 495872
I0428 19:45:11.785847 25755 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:11.785862 25755 net.cpp:86] Creating Layer pool0
I0428 19:45:11.785866 25755 net.cpp:408] pool0 <- conv0
I0428 19:45:11.785873 25755 net.cpp:382] pool0 -> pool0
I0428 19:45:11.785928 25755 net.cpp:124] Setting up pool0
I0428 19:45:11.785935 25755 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:11.785938 25755 net.cpp:139] Memory required for data: 569600
I0428 19:45:11.785943 25755 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:11.785955 25755 net.cpp:86] Creating Layer conv1
I0428 19:45:11.785959 25755 net.cpp:408] conv1 <- pool0
I0428 19:45:11.785965 25755 net.cpp:382] conv1 -> conv1
I0428 19:45:11.789069 25755 net.cpp:124] Setting up conv1
I0428 19:45:11.789088 25755 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:45:11.789093 25755 net.cpp:139] Memory required for data: 1388800
I0428 19:45:11.789103 25755 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:11.789113 25755 net.cpp:86] Creating Layer pool1
I0428 19:45:11.789116 25755 net.cpp:408] pool1 <- conv1
I0428 19:45:11.789122 25755 net.cpp:382] pool1 -> pool1
I0428 19:45:11.789166 25755 net.cpp:124] Setting up pool1
I0428 19:45:11.789173 25755 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:45:11.789176 25755 net.cpp:139] Memory required for data: 1593600
I0428 19:45:11.789180 25755 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:11.789188 25755 net.cpp:86] Creating Layer ip1
I0428 19:45:11.789192 25755 net.cpp:408] ip1 <- pool1
I0428 19:45:11.789198 25755 net.cpp:382] ip1 -> ip1
I0428 19:45:11.789585 25755 net.cpp:124] Setting up ip1
I0428 19:45:11.789595 25755 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:11.789599 25755 net.cpp:139] Memory required for data: 1606400
I0428 19:45:11.789608 25755 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:11.789614 25755 net.cpp:86] Creating Layer relu1
I0428 19:45:11.789618 25755 net.cpp:408] relu1 <- ip1
I0428 19:45:11.789623 25755 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:11.789813 25755 net.cpp:124] Setting up relu1
I0428 19:45:11.789824 25755 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:11.789827 25755 net.cpp:139] Memory required for data: 1619200
I0428 19:45:11.789831 25755 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:11.789839 25755 net.cpp:86] Creating Layer ip2
I0428 19:45:11.789844 25755 net.cpp:408] ip2 <- ip1
I0428 19:45:11.789849 25755 net.cpp:382] ip2 -> ip2
I0428 19:45:11.789986 25755 net.cpp:124] Setting up ip2
I0428 19:45:11.789994 25755 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:11.789999 25755 net.cpp:139] Memory required for data: 1632000
I0428 19:45:11.790005 25755 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:11.790012 25755 net.cpp:86] Creating Layer relu2
I0428 19:45:11.790016 25755 net.cpp:408] relu2 <- ip2
I0428 19:45:11.790020 25755 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:11.790859 25755 net.cpp:124] Setting up relu2
I0428 19:45:11.790874 25755 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:11.790879 25755 net.cpp:139] Memory required for data: 1644800
I0428 19:45:11.790882 25755 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:11.790891 25755 net.cpp:86] Creating Layer ip3
I0428 19:45:11.790895 25755 net.cpp:408] ip3 <- ip2
I0428 19:45:11.790901 25755 net.cpp:382] ip3 -> ip3
I0428 19:45:11.791019 25755 net.cpp:124] Setting up ip3
I0428 19:45:11.791029 25755 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:11.791033 25755 net.cpp:139] Memory required for data: 1647360
I0428 19:45:11.791043 25755 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:11.791049 25755 net.cpp:86] Creating Layer relu3
I0428 19:45:11.791051 25755 net.cpp:408] relu3 <- ip3
I0428 19:45:11.791056 25755 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:11.791249 25755 net.cpp:124] Setting up relu3
I0428 19:45:11.791260 25755 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:11.791265 25755 net.cpp:139] Memory required for data: 1649920
I0428 19:45:11.791267 25755 layer_factory.hpp:77] Creating layer loss
I0428 19:45:11.791275 25755 net.cpp:86] Creating Layer loss
I0428 19:45:11.791278 25755 net.cpp:408] loss <- ip3
I0428 19:45:11.791283 25755 net.cpp:408] loss <- label
I0428 19:45:11.791290 25755 net.cpp:382] loss -> loss
I0428 19:45:11.791311 25755 layer_factory.hpp:77] Creating layer loss
I0428 19:45:11.791573 25755 net.cpp:124] Setting up loss
I0428 19:45:11.791584 25755 net.cpp:131] Top shape: (1)
I0428 19:45:11.791587 25755 net.cpp:134]     with loss weight 1
I0428 19:45:11.791604 25755 net.cpp:139] Memory required for data: 1649924
I0428 19:45:11.791607 25755 net.cpp:200] loss needs backward computation.
I0428 19:45:11.791612 25755 net.cpp:200] relu3 needs backward computation.
I0428 19:45:11.791616 25755 net.cpp:200] ip3 needs backward computation.
I0428 19:45:11.791620 25755 net.cpp:200] relu2 needs backward computation.
I0428 19:45:11.791623 25755 net.cpp:200] ip2 needs backward computation.
I0428 19:45:11.791626 25755 net.cpp:200] relu1 needs backward computation.
I0428 19:45:11.791630 25755 net.cpp:200] ip1 needs backward computation.
I0428 19:45:11.791635 25755 net.cpp:200] pool1 needs backward computation.
I0428 19:45:11.791637 25755 net.cpp:200] conv1 needs backward computation.
I0428 19:45:11.791641 25755 net.cpp:200] pool0 needs backward computation.
I0428 19:45:11.791646 25755 net.cpp:200] conv0 needs backward computation.
I0428 19:45:11.791651 25755 net.cpp:202] mnist does not need backward computation.
I0428 19:45:11.791653 25755 net.cpp:244] This network produces output loss
I0428 19:45:11.791664 25755 net.cpp:257] Network initialization done.
I0428 19:45:11.792043 25755 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test466.prototxt
I0428 19:45:11.792076 25755 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:11.792184 25755 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:11.792278 25755 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:11.792330 25755 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:11.792345 25755 net.cpp:86] Creating Layer mnist
I0428 19:45:11.792351 25755 net.cpp:382] mnist -> data
I0428 19:45:11.792359 25755 net.cpp:382] mnist -> label
I0428 19:45:11.792456 25755 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:11.794646 25755 net.cpp:124] Setting up mnist
I0428 19:45:11.794661 25755 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:11.794668 25755 net.cpp:131] Top shape: 100 (100)
I0428 19:45:11.794672 25755 net.cpp:139] Memory required for data: 314000
I0428 19:45:11.794677 25755 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:11.794688 25755 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:11.794692 25755 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:11.794698 25755 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:11.794706 25755 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:11.794754 25755 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:11.794759 25755 net.cpp:131] Top shape: 100 (100)
I0428 19:45:11.794765 25755 net.cpp:131] Top shape: 100 (100)
I0428 19:45:11.794769 25755 net.cpp:139] Memory required for data: 314800
I0428 19:45:11.794772 25755 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:11.794781 25755 net.cpp:86] Creating Layer conv0
I0428 19:45:11.794785 25755 net.cpp:408] conv0 <- data
I0428 19:45:11.794791 25755 net.cpp:382] conv0 -> conv0
I0428 19:45:11.796715 25755 net.cpp:124] Setting up conv0
I0428 19:45:11.796731 25755 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:11.796736 25755 net.cpp:139] Memory required for data: 775600
I0428 19:45:11.796746 25755 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:11.796754 25755 net.cpp:86] Creating Layer pool0
I0428 19:45:11.796758 25755 net.cpp:408] pool0 <- conv0
I0428 19:45:11.796766 25755 net.cpp:382] pool0 -> pool0
I0428 19:45:11.796807 25755 net.cpp:124] Setting up pool0
I0428 19:45:11.796821 25755 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:11.796825 25755 net.cpp:139] Memory required for data: 890800
I0428 19:45:11.796829 25755 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:11.796839 25755 net.cpp:86] Creating Layer conv1
I0428 19:45:11.796844 25755 net.cpp:408] conv1 <- pool0
I0428 19:45:11.796849 25755 net.cpp:382] conv1 -> conv1
I0428 19:45:11.798545 25755 net.cpp:124] Setting up conv1
I0428 19:45:11.798562 25755 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:45:11.798565 25755 net.cpp:139] Memory required for data: 2170800
I0428 19:45:11.798576 25755 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:11.798584 25755 net.cpp:86] Creating Layer pool1
I0428 19:45:11.798589 25755 net.cpp:408] pool1 <- conv1
I0428 19:45:11.798595 25755 net.cpp:382] pool1 -> pool1
I0428 19:45:11.798635 25755 net.cpp:124] Setting up pool1
I0428 19:45:11.798641 25755 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:45:11.798645 25755 net.cpp:139] Memory required for data: 2490800
I0428 19:45:11.798648 25755 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:11.798655 25755 net.cpp:86] Creating Layer ip1
I0428 19:45:11.798660 25755 net.cpp:408] ip1 <- pool1
I0428 19:45:11.798666 25755 net.cpp:382] ip1 -> ip1
I0428 19:45:11.799055 25755 net.cpp:124] Setting up ip1
I0428 19:45:11.799065 25755 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:11.799082 25755 net.cpp:139] Memory required for data: 2510800
I0428 19:45:11.799093 25755 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:11.799098 25755 net.cpp:86] Creating Layer relu1
I0428 19:45:11.799110 25755 net.cpp:408] relu1 <- ip1
I0428 19:45:11.799115 25755 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:11.799296 25755 net.cpp:124] Setting up relu1
I0428 19:45:11.799307 25755 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:11.799311 25755 net.cpp:139] Memory required for data: 2530800
I0428 19:45:11.799322 25755 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:11.799330 25755 net.cpp:86] Creating Layer ip2
I0428 19:45:11.799335 25755 net.cpp:408] ip2 <- ip1
I0428 19:45:11.799340 25755 net.cpp:382] ip2 -> ip2
I0428 19:45:11.799490 25755 net.cpp:124] Setting up ip2
I0428 19:45:11.799499 25755 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:11.799504 25755 net.cpp:139] Memory required for data: 2550800
I0428 19:45:11.799510 25755 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:11.799515 25755 net.cpp:86] Creating Layer relu2
I0428 19:45:11.799518 25755 net.cpp:408] relu2 <- ip2
I0428 19:45:11.799523 25755 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:11.799772 25755 net.cpp:124] Setting up relu2
I0428 19:45:11.799782 25755 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:11.799792 25755 net.cpp:139] Memory required for data: 2570800
I0428 19:45:11.799795 25755 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:11.799801 25755 net.cpp:86] Creating Layer ip3
I0428 19:45:11.799806 25755 net.cpp:408] ip3 <- ip2
I0428 19:45:11.799811 25755 net.cpp:382] ip3 -> ip3
I0428 19:45:11.799922 25755 net.cpp:124] Setting up ip3
I0428 19:45:11.799931 25755 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:11.799934 25755 net.cpp:139] Memory required for data: 2574800
I0428 19:45:11.799943 25755 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:11.799950 25755 net.cpp:86] Creating Layer relu3
I0428 19:45:11.799953 25755 net.cpp:408] relu3 <- ip3
I0428 19:45:11.799958 25755 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:11.800881 25755 net.cpp:124] Setting up relu3
I0428 19:45:11.800896 25755 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:11.800900 25755 net.cpp:139] Memory required for data: 2578800
I0428 19:45:11.800904 25755 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:45:11.800911 25755 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:45:11.800915 25755 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:45:11.800921 25755 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:45:11.800930 25755 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:45:11.800989 25755 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:45:11.800997 25755 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:11.801002 25755 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:11.801004 25755 net.cpp:139] Memory required for data: 2586800
I0428 19:45:11.801008 25755 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:11.801014 25755 net.cpp:86] Creating Layer accuracy
I0428 19:45:11.801017 25755 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:45:11.801023 25755 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:11.801029 25755 net.cpp:382] accuracy -> accuracy
I0428 19:45:11.801036 25755 net.cpp:124] Setting up accuracy
I0428 19:45:11.801048 25755 net.cpp:131] Top shape: (1)
I0428 19:45:11.801053 25755 net.cpp:139] Memory required for data: 2586804
I0428 19:45:11.801061 25755 layer_factory.hpp:77] Creating layer loss
I0428 19:45:11.801066 25755 net.cpp:86] Creating Layer loss
I0428 19:45:11.801070 25755 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:45:11.801080 25755 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:11.801085 25755 net.cpp:382] loss -> loss
I0428 19:45:11.801093 25755 layer_factory.hpp:77] Creating layer loss
I0428 19:45:11.801355 25755 net.cpp:124] Setting up loss
I0428 19:45:11.801367 25755 net.cpp:131] Top shape: (1)
I0428 19:45:11.801372 25755 net.cpp:134]     with loss weight 1
I0428 19:45:11.801378 25755 net.cpp:139] Memory required for data: 2586808
I0428 19:45:11.801395 25755 net.cpp:200] loss needs backward computation.
I0428 19:45:11.801401 25755 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:11.801405 25755 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:45:11.801409 25755 net.cpp:200] relu3 needs backward computation.
I0428 19:45:11.801412 25755 net.cpp:200] ip3 needs backward computation.
I0428 19:45:11.801416 25755 net.cpp:200] relu2 needs backward computation.
I0428 19:45:11.801420 25755 net.cpp:200] ip2 needs backward computation.
I0428 19:45:11.801424 25755 net.cpp:200] relu1 needs backward computation.
I0428 19:45:11.801427 25755 net.cpp:200] ip1 needs backward computation.
I0428 19:45:11.801431 25755 net.cpp:200] pool1 needs backward computation.
I0428 19:45:11.801434 25755 net.cpp:200] conv1 needs backward computation.
I0428 19:45:11.801439 25755 net.cpp:200] pool0 needs backward computation.
I0428 19:45:11.801442 25755 net.cpp:200] conv0 needs backward computation.
I0428 19:45:11.801446 25755 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:11.801451 25755 net.cpp:202] mnist does not need backward computation.
I0428 19:45:11.801455 25755 net.cpp:244] This network produces output accuracy
I0428 19:45:11.801458 25755 net.cpp:244] This network produces output loss
I0428 19:45:11.801471 25755 net.cpp:257] Network initialization done.
I0428 19:45:11.801529 25755 solver.cpp:56] Solver scaffolding done.
I0428 19:45:11.801906 25755 caffe.cpp:248] Starting Optimization
I0428 19:45:11.801914 25755 solver.cpp:273] Solving LeNet
I0428 19:45:11.801918 25755 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:11.802858 25755 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:11.806728 25755 blocking_queue.cpp:49] Waiting for data
I0428 19:45:11.877329 25762 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:11.877837 25755 solver.cpp:398]     Test net output #0: accuracy = 0.206
I0428 19:45:11.877859 25755 solver.cpp:398]     Test net output #1: loss = 2.28809 (* 1 = 2.28809 loss)
I0428 19:45:11.880637 25755 solver.cpp:219] Iteration 0 (-3.43195e-31 iter/s, 0.0786913s/100 iters), loss = 2.28483
I0428 19:45:11.880666 25755 solver.cpp:238]     Train net output #0: loss = 2.28483 (* 1 = 2.28483 loss)
I0428 19:45:11.880678 25755 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:11.989069 25755 solver.cpp:219] Iteration 100 (922.565 iter/s, 0.108393s/100 iters), loss = 0.527891
I0428 19:45:11.989096 25755 solver.cpp:238]     Train net output #0: loss = 0.527891 (* 1 = 0.527891 loss)
I0428 19:45:11.989102 25755 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:12.094136 25755 solver.cpp:219] Iteration 200 (952.112 iter/s, 0.10503s/100 iters), loss = 0.461885
I0428 19:45:12.094161 25755 solver.cpp:238]     Train net output #0: loss = 0.461884 (* 1 = 0.461884 loss)
I0428 19:45:12.094168 25755 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:12.195888 25755 solver.cpp:219] Iteration 300 (983.13 iter/s, 0.101716s/100 iters), loss = 0.588872
I0428 19:45:12.195912 25755 solver.cpp:238]     Train net output #0: loss = 0.588872 (* 1 = 0.588872 loss)
I0428 19:45:12.195919 25755 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:12.310680 25755 solver.cpp:219] Iteration 400 (871.433 iter/s, 0.114754s/100 iters), loss = 0.282592
I0428 19:45:12.310715 25755 solver.cpp:238]     Train net output #0: loss = 0.282592 (* 1 = 0.282592 loss)
I0428 19:45:12.310736 25755 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:12.422644 25755 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:12.469326 25762 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:12.469810 25755 solver.cpp:398]     Test net output #0: accuracy = 0.8607
I0428 19:45:12.469835 25755 solver.cpp:398]     Test net output #1: loss = 0.369441 (* 1 = 0.369441 loss)
I0428 19:45:12.470875 25755 solver.cpp:219] Iteration 500 (624.421 iter/s, 0.160148s/100 iters), loss = 0.222925
I0428 19:45:12.470932 25755 solver.cpp:238]     Train net output #0: loss = 0.222925 (* 1 = 0.222925 loss)
I0428 19:45:12.470957 25755 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:12.580782 25755 solver.cpp:219] Iteration 600 (910.39 iter/s, 0.109843s/100 iters), loss = 0.263146
I0428 19:45:12.580806 25755 solver.cpp:238]     Train net output #0: loss = 0.263146 (* 1 = 0.263146 loss)
I0428 19:45:12.580849 25755 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:12.687314 25755 solver.cpp:219] Iteration 700 (938.994 iter/s, 0.106497s/100 iters), loss = 0.550093
I0428 19:45:12.687340 25755 solver.cpp:238]     Train net output #0: loss = 0.550093 (* 1 = 0.550093 loss)
I0428 19:45:12.687347 25755 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:12.793912 25755 solver.cpp:219] Iteration 800 (938.425 iter/s, 0.106562s/100 iters), loss = 0.416848
I0428 19:45:12.793938 25755 solver.cpp:238]     Train net output #0: loss = 0.416848 (* 1 = 0.416848 loss)
I0428 19:45:12.793961 25755 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:12.901175 25755 solver.cpp:219] Iteration 900 (932.609 iter/s, 0.107226s/100 iters), loss = 0.472588
I0428 19:45:12.901201 25755 solver.cpp:238]     Train net output #0: loss = 0.472588 (* 1 = 0.472588 loss)
I0428 19:45:12.901207 25755 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:12.936897 25761 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:13.004326 25755 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:13.005898 25755 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:13.006754 25755 solver.cpp:311] Iteration 1000, loss = 0.465146
I0428 19:45:13.006768 25755 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:13.082713 25762 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:13.083217 25755 solver.cpp:398]     Test net output #0: accuracy = 0.8753
I0428 19:45:13.083237 25755 solver.cpp:398]     Test net output #1: loss = 0.320784 (* 1 = 0.320784 loss)
I0428 19:45:13.083242 25755 solver.cpp:316] Optimization Done.
I0428 19:45:13.083245 25755 caffe.cpp:259] Optimization Done.
