I0428 19:40:11.523164 24487 caffe.cpp:218] Using GPUs 0
I0428 19:40:11.564482 24487 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:12.032902 24487 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test327.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:12.033044 24487 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test327.prototxt
I0428 19:40:12.033416 24487 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:12.033444 24487 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:12.033521 24487 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:12.033581 24487 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:12.033675 24487 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:12.033694 24487 net.cpp:86] Creating Layer mnist
I0428 19:40:12.033700 24487 net.cpp:382] mnist -> data
I0428 19:40:12.033718 24487 net.cpp:382] mnist -> label
I0428 19:40:12.034684 24487 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:12.036831 24487 net.cpp:124] Setting up mnist
I0428 19:40:12.036861 24487 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:12.036882 24487 net.cpp:131] Top shape: 64 (64)
I0428 19:40:12.036885 24487 net.cpp:139] Memory required for data: 200960
I0428 19:40:12.036891 24487 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:12.036905 24487 net.cpp:86] Creating Layer conv0
I0428 19:40:12.036923 24487 net.cpp:408] conv0 <- data
I0428 19:40:12.036932 24487 net.cpp:382] conv0 -> conv0
I0428 19:40:12.264792 24487 net.cpp:124] Setting up conv0
I0428 19:40:12.264838 24487 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:12.264858 24487 net.cpp:139] Memory required for data: 495872
I0428 19:40:12.264894 24487 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:12.264921 24487 net.cpp:86] Creating Layer pool0
I0428 19:40:12.264925 24487 net.cpp:408] pool0 <- conv0
I0428 19:40:12.264932 24487 net.cpp:382] pool0 -> pool0
I0428 19:40:12.264979 24487 net.cpp:124] Setting up pool0
I0428 19:40:12.264991 24487 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:12.265009 24487 net.cpp:139] Memory required for data: 569600
I0428 19:40:12.265013 24487 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:12.265025 24487 net.cpp:86] Creating Layer conv1
I0428 19:40:12.265029 24487 net.cpp:408] conv1 <- pool0
I0428 19:40:12.265036 24487 net.cpp:382] conv1 -> conv1
I0428 19:40:12.266990 24487 net.cpp:124] Setting up conv1
I0428 19:40:12.267004 24487 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:12.267024 24487 net.cpp:139] Memory required for data: 651520
I0428 19:40:12.267033 24487 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:12.267042 24487 net.cpp:86] Creating Layer pool1
I0428 19:40:12.267045 24487 net.cpp:408] pool1 <- conv1
I0428 19:40:12.267050 24487 net.cpp:382] pool1 -> pool1
I0428 19:40:12.267107 24487 net.cpp:124] Setting up pool1
I0428 19:40:12.267112 24487 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:12.267115 24487 net.cpp:139] Memory required for data: 672000
I0428 19:40:12.267118 24487 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:12.267140 24487 net.cpp:86] Creating Layer ip1
I0428 19:40:12.267143 24487 net.cpp:408] ip1 <- pool1
I0428 19:40:12.267148 24487 net.cpp:382] ip1 -> ip1
I0428 19:40:12.267256 24487 net.cpp:124] Setting up ip1
I0428 19:40:12.267278 24487 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:12.267282 24487 net.cpp:139] Memory required for data: 674560
I0428 19:40:12.267288 24487 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:12.267295 24487 net.cpp:86] Creating Layer relu1
I0428 19:40:12.267298 24487 net.cpp:408] relu1 <- ip1
I0428 19:40:12.267302 24487 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:12.267480 24487 net.cpp:124] Setting up relu1
I0428 19:40:12.267504 24487 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:12.267508 24487 net.cpp:139] Memory required for data: 677120
I0428 19:40:12.267510 24487 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:12.267518 24487 net.cpp:86] Creating Layer ip2
I0428 19:40:12.267521 24487 net.cpp:408] ip2 <- ip1
I0428 19:40:12.267526 24487 net.cpp:382] ip2 -> ip2
I0428 19:40:12.267623 24487 net.cpp:124] Setting up ip2
I0428 19:40:12.267630 24487 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:12.267633 24487 net.cpp:139] Memory required for data: 683520
I0428 19:40:12.267638 24487 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:12.267644 24487 net.cpp:86] Creating Layer relu2
I0428 19:40:12.267648 24487 net.cpp:408] relu2 <- ip2
I0428 19:40:12.267652 24487 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:12.268437 24487 net.cpp:124] Setting up relu2
I0428 19:40:12.268450 24487 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:12.268468 24487 net.cpp:139] Memory required for data: 689920
I0428 19:40:12.268471 24487 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:12.268479 24487 net.cpp:86] Creating Layer ip3
I0428 19:40:12.268497 24487 net.cpp:408] ip3 <- ip2
I0428 19:40:12.268503 24487 net.cpp:382] ip3 -> ip3
I0428 19:40:12.268599 24487 net.cpp:124] Setting up ip3
I0428 19:40:12.268606 24487 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:12.268609 24487 net.cpp:139] Memory required for data: 692480
I0428 19:40:12.268615 24487 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:12.268621 24487 net.cpp:86] Creating Layer relu3
I0428 19:40:12.268623 24487 net.cpp:408] relu3 <- ip3
I0428 19:40:12.268627 24487 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:12.268836 24487 net.cpp:124] Setting up relu3
I0428 19:40:12.268846 24487 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:12.268848 24487 net.cpp:139] Memory required for data: 695040
I0428 19:40:12.268851 24487 layer_factory.hpp:77] Creating layer loss
I0428 19:40:12.268857 24487 net.cpp:86] Creating Layer loss
I0428 19:40:12.268860 24487 net.cpp:408] loss <- ip3
I0428 19:40:12.268863 24487 net.cpp:408] loss <- label
I0428 19:40:12.268870 24487 net.cpp:382] loss -> loss
I0428 19:40:12.268885 24487 layer_factory.hpp:77] Creating layer loss
I0428 19:40:12.269127 24487 net.cpp:124] Setting up loss
I0428 19:40:12.269152 24487 net.cpp:131] Top shape: (1)
I0428 19:40:12.269155 24487 net.cpp:134]     with loss weight 1
I0428 19:40:12.269184 24487 net.cpp:139] Memory required for data: 695044
I0428 19:40:12.269187 24487 net.cpp:200] loss needs backward computation.
I0428 19:40:12.269191 24487 net.cpp:200] relu3 needs backward computation.
I0428 19:40:12.269193 24487 net.cpp:200] ip3 needs backward computation.
I0428 19:40:12.269196 24487 net.cpp:200] relu2 needs backward computation.
I0428 19:40:12.269199 24487 net.cpp:200] ip2 needs backward computation.
I0428 19:40:12.269201 24487 net.cpp:200] relu1 needs backward computation.
I0428 19:40:12.269203 24487 net.cpp:200] ip1 needs backward computation.
I0428 19:40:12.269207 24487 net.cpp:200] pool1 needs backward computation.
I0428 19:40:12.269209 24487 net.cpp:200] conv1 needs backward computation.
I0428 19:40:12.269212 24487 net.cpp:200] pool0 needs backward computation.
I0428 19:40:12.269214 24487 net.cpp:200] conv0 needs backward computation.
I0428 19:40:12.269217 24487 net.cpp:202] mnist does not need backward computation.
I0428 19:40:12.269220 24487 net.cpp:244] This network produces output loss
I0428 19:40:12.269232 24487 net.cpp:257] Network initialization done.
I0428 19:40:12.269644 24487 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test327.prototxt
I0428 19:40:12.269686 24487 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:12.269842 24487 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:12.269924 24487 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:12.269966 24487 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:12.269980 24487 net.cpp:86] Creating Layer mnist
I0428 19:40:12.269984 24487 net.cpp:382] mnist -> data
I0428 19:40:12.269991 24487 net.cpp:382] mnist -> label
I0428 19:40:12.270072 24487 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:12.272390 24487 net.cpp:124] Setting up mnist
I0428 19:40:12.272419 24487 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:12.272425 24487 net.cpp:131] Top shape: 100 (100)
I0428 19:40:12.272428 24487 net.cpp:139] Memory required for data: 314000
I0428 19:40:12.272431 24487 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:12.272439 24487 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:12.272441 24487 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:12.272445 24487 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:12.272466 24487 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:12.272598 24487 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:12.272604 24487 net.cpp:131] Top shape: 100 (100)
I0428 19:40:12.272609 24487 net.cpp:131] Top shape: 100 (100)
I0428 19:40:12.272613 24487 net.cpp:139] Memory required for data: 314800
I0428 19:40:12.272615 24487 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:12.272624 24487 net.cpp:86] Creating Layer conv0
I0428 19:40:12.272627 24487 net.cpp:408] conv0 <- data
I0428 19:40:12.272634 24487 net.cpp:382] conv0 -> conv0
I0428 19:40:12.274451 24487 net.cpp:124] Setting up conv0
I0428 19:40:12.274464 24487 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:12.274467 24487 net.cpp:139] Memory required for data: 775600
I0428 19:40:12.274477 24487 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:12.274483 24487 net.cpp:86] Creating Layer pool0
I0428 19:40:12.274487 24487 net.cpp:408] pool0 <- conv0
I0428 19:40:12.274492 24487 net.cpp:382] pool0 -> pool0
I0428 19:40:12.274526 24487 net.cpp:124] Setting up pool0
I0428 19:40:12.274533 24487 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:12.274534 24487 net.cpp:139] Memory required for data: 890800
I0428 19:40:12.274538 24487 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:12.274545 24487 net.cpp:86] Creating Layer conv1
I0428 19:40:12.274549 24487 net.cpp:408] conv1 <- pool0
I0428 19:40:12.274554 24487 net.cpp:382] conv1 -> conv1
I0428 19:40:12.276124 24487 net.cpp:124] Setting up conv1
I0428 19:40:12.276139 24487 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:12.276144 24487 net.cpp:139] Memory required for data: 1018800
I0428 19:40:12.276151 24487 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:12.276173 24487 net.cpp:86] Creating Layer pool1
I0428 19:40:12.276176 24487 net.cpp:408] pool1 <- conv1
I0428 19:40:12.276182 24487 net.cpp:382] pool1 -> pool1
I0428 19:40:12.276218 24487 net.cpp:124] Setting up pool1
I0428 19:40:12.276224 24487 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:12.276227 24487 net.cpp:139] Memory required for data: 1050800
I0428 19:40:12.276229 24487 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:12.276237 24487 net.cpp:86] Creating Layer ip1
I0428 19:40:12.276239 24487 net.cpp:408] ip1 <- pool1
I0428 19:40:12.276258 24487 net.cpp:382] ip1 -> ip1
I0428 19:40:12.276355 24487 net.cpp:124] Setting up ip1
I0428 19:40:12.276365 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.276376 24487 net.cpp:139] Memory required for data: 1054800
I0428 19:40:12.276391 24487 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:12.276407 24487 net.cpp:86] Creating Layer relu1
I0428 19:40:12.276410 24487 net.cpp:408] relu1 <- ip1
I0428 19:40:12.276414 24487 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:12.276590 24487 net.cpp:124] Setting up relu1
I0428 19:40:12.276602 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.276604 24487 net.cpp:139] Memory required for data: 1058800
I0428 19:40:12.276613 24487 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:12.276620 24487 net.cpp:86] Creating Layer ip2
I0428 19:40:12.276623 24487 net.cpp:408] ip2 <- ip1
I0428 19:40:12.276629 24487 net.cpp:382] ip2 -> ip2
I0428 19:40:12.276726 24487 net.cpp:124] Setting up ip2
I0428 19:40:12.276733 24487 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:12.276736 24487 net.cpp:139] Memory required for data: 1068800
I0428 19:40:12.276741 24487 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:12.276747 24487 net.cpp:86] Creating Layer relu2
I0428 19:40:12.276757 24487 net.cpp:408] relu2 <- ip2
I0428 19:40:12.276762 24487 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:12.276980 24487 net.cpp:124] Setting up relu2
I0428 19:40:12.276989 24487 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:12.276993 24487 net.cpp:139] Memory required for data: 1078800
I0428 19:40:12.276996 24487 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:12.277005 24487 net.cpp:86] Creating Layer ip3
I0428 19:40:12.277009 24487 net.cpp:408] ip3 <- ip2
I0428 19:40:12.277014 24487 net.cpp:382] ip3 -> ip3
I0428 19:40:12.277122 24487 net.cpp:124] Setting up ip3
I0428 19:40:12.277130 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.277133 24487 net.cpp:139] Memory required for data: 1082800
I0428 19:40:12.277148 24487 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:12.277153 24487 net.cpp:86] Creating Layer relu3
I0428 19:40:12.277156 24487 net.cpp:408] relu3 <- ip3
I0428 19:40:12.277161 24487 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:12.278023 24487 net.cpp:124] Setting up relu3
I0428 19:40:12.278053 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.278055 24487 net.cpp:139] Memory required for data: 1086800
I0428 19:40:12.278059 24487 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:12.278065 24487 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:12.278070 24487 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:12.278076 24487 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:12.278082 24487 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:12.278165 24487 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:12.278172 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.278177 24487 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:12.278179 24487 net.cpp:139] Memory required for data: 1094800
I0428 19:40:12.278182 24487 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:12.278187 24487 net.cpp:86] Creating Layer accuracy
I0428 19:40:12.278192 24487 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:12.278200 24487 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:12.278206 24487 net.cpp:382] accuracy -> accuracy
I0428 19:40:12.278213 24487 net.cpp:124] Setting up accuracy
I0428 19:40:12.278218 24487 net.cpp:131] Top shape: (1)
I0428 19:40:12.278220 24487 net.cpp:139] Memory required for data: 1094804
I0428 19:40:12.278223 24487 layer_factory.hpp:77] Creating layer loss
I0428 19:40:12.278234 24487 net.cpp:86] Creating Layer loss
I0428 19:40:12.278236 24487 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:12.278240 24487 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:12.278244 24487 net.cpp:382] loss -> loss
I0428 19:40:12.278250 24487 layer_factory.hpp:77] Creating layer loss
I0428 19:40:12.278568 24487 net.cpp:124] Setting up loss
I0428 19:40:12.278578 24487 net.cpp:131] Top shape: (1)
I0428 19:40:12.278581 24487 net.cpp:134]     with loss weight 1
I0428 19:40:12.278587 24487 net.cpp:139] Memory required for data: 1094808
I0428 19:40:12.278601 24487 net.cpp:200] loss needs backward computation.
I0428 19:40:12.278605 24487 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:12.278609 24487 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:12.278614 24487 net.cpp:200] relu3 needs backward computation.
I0428 19:40:12.278615 24487 net.cpp:200] ip3 needs backward computation.
I0428 19:40:12.278620 24487 net.cpp:200] relu2 needs backward computation.
I0428 19:40:12.278622 24487 net.cpp:200] ip2 needs backward computation.
I0428 19:40:12.278627 24487 net.cpp:200] relu1 needs backward computation.
I0428 19:40:12.278630 24487 net.cpp:200] ip1 needs backward computation.
I0428 19:40:12.278633 24487 net.cpp:200] pool1 needs backward computation.
I0428 19:40:12.278636 24487 net.cpp:200] conv1 needs backward computation.
I0428 19:40:12.278640 24487 net.cpp:200] pool0 needs backward computation.
I0428 19:40:12.278643 24487 net.cpp:200] conv0 needs backward computation.
I0428 19:40:12.278647 24487 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:12.278651 24487 net.cpp:202] mnist does not need backward computation.
I0428 19:40:12.278654 24487 net.cpp:244] This network produces output accuracy
I0428 19:40:12.278658 24487 net.cpp:244] This network produces output loss
I0428 19:40:12.278671 24487 net.cpp:257] Network initialization done.
I0428 19:40:12.278717 24487 solver.cpp:56] Solver scaffolding done.
I0428 19:40:12.279110 24487 caffe.cpp:248] Starting Optimization
I0428 19:40:12.279117 24487 solver.cpp:273] Solving LeNet
I0428 19:40:12.279119 24487 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:12.280045 24487 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:12.282584 24487 blocking_queue.cpp:49] Waiting for data
I0428 19:40:12.352094 24494 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:12.352555 24487 solver.cpp:398]     Test net output #0: accuracy = 0.0992
I0428 19:40:12.352589 24487 solver.cpp:398]     Test net output #1: loss = 2.31995 (* 1 = 2.31995 loss)
I0428 19:40:12.354609 24487 solver.cpp:219] Iteration 0 (0 iter/s, 0.0754483s/100 iters), loss = 2.32082
I0428 19:40:12.354650 24487 solver.cpp:238]     Train net output #0: loss = 2.32082 (* 1 = 2.32082 loss)
I0428 19:40:12.354661 24487 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:12.428287 24487 solver.cpp:219] Iteration 100 (1358.2 iter/s, 0.0736266s/100 iters), loss = 1.98669
I0428 19:40:12.428310 24487 solver.cpp:238]     Train net output #0: loss = 1.98669 (* 1 = 1.98669 loss)
I0428 19:40:12.428318 24487 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:12.498884 24487 solver.cpp:219] Iteration 200 (1417.2 iter/s, 0.0705618s/100 iters), loss = 1.35418
I0428 19:40:12.498908 24487 solver.cpp:238]     Train net output #0: loss = 1.35418 (* 1 = 1.35418 loss)
I0428 19:40:12.498914 24487 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:12.569139 24487 solver.cpp:219] Iteration 300 (1424.1 iter/s, 0.0702198s/100 iters), loss = 0.872161
I0428 19:40:12.569160 24487 solver.cpp:238]     Train net output #0: loss = 0.872161 (* 1 = 0.872161 loss)
I0428 19:40:12.569182 24487 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:12.640110 24487 solver.cpp:219] Iteration 400 (1409.71 iter/s, 0.0709367s/100 iters), loss = 1.11283
I0428 19:40:12.640131 24487 solver.cpp:238]     Train net output #0: loss = 1.11283 (* 1 = 1.11283 loss)
I0428 19:40:12.640137 24487 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:12.709465 24487 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:12.783956 24494 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:12.784384 24487 solver.cpp:398]     Test net output #0: accuracy = 0.729
I0428 19:40:12.784404 24487 solver.cpp:398]     Test net output #1: loss = 0.746603 (* 1 = 0.746603 loss)
I0428 19:40:12.785176 24487 solver.cpp:219] Iteration 500 (689.512 iter/s, 0.14503s/100 iters), loss = 0.944716
I0428 19:40:12.785199 24487 solver.cpp:238]     Train net output #0: loss = 0.944716 (* 1 = 0.944716 loss)
I0428 19:40:12.785223 24487 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:12.856573 24487 solver.cpp:219] Iteration 600 (1401.3 iter/s, 0.0713626s/100 iters), loss = 0.690593
I0428 19:40:12.856597 24487 solver.cpp:238]     Train net output #0: loss = 0.690593 (* 1 = 0.690593 loss)
I0428 19:40:12.856604 24487 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:12.926280 24487 solver.cpp:219] Iteration 700 (1435.32 iter/s, 0.0696709s/100 iters), loss = 0.710539
I0428 19:40:12.926303 24487 solver.cpp:238]     Train net output #0: loss = 0.710539 (* 1 = 0.710539 loss)
I0428 19:40:12.926309 24487 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:12.996469 24487 solver.cpp:219] Iteration 800 (1425.53 iter/s, 0.0701491s/100 iters), loss = 0.801646
I0428 19:40:12.996492 24487 solver.cpp:238]     Train net output #0: loss = 0.801646 (* 1 = 0.801646 loss)
I0428 19:40:12.996500 24487 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:13.066284 24487 solver.cpp:219] Iteration 900 (1433.09 iter/s, 0.0697795s/100 iters), loss = 0.54071
I0428 19:40:13.066309 24487 solver.cpp:238]     Train net output #0: loss = 0.54071 (* 1 = 0.54071 loss)
I0428 19:40:13.066316 24487 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:13.089829 24493 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:13.135365 24487 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:13.135985 24487 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:13.136427 24487 solver.cpp:311] Iteration 1000, loss = 0.553956
I0428 19:40:13.136445 24487 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:13.211012 24494 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:13.211616 24487 solver.cpp:398]     Test net output #0: accuracy = 0.7543
I0428 19:40:13.211647 24487 solver.cpp:398]     Test net output #1: loss = 0.6584 (* 1 = 0.6584 loss)
I0428 19:40:13.211658 24487 solver.cpp:316] Optimization Done.
I0428 19:40:13.211664 24487 caffe.cpp:259] Optimization Done.
