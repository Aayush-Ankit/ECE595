I0428 19:48:06.959344 26404 caffe.cpp:218] Using GPUs 0
I0428 19:48:06.995771 26404 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:07.514127 26404 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test535.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:07.514298 26404 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test535.prototxt
I0428 19:48:07.514719 26404 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:07.514745 26404 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:07.514858 26404 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:07.514972 26404 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:07.515097 26404 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:07.515131 26404 net.cpp:86] Creating Layer mnist
I0428 19:48:07.515143 26404 net.cpp:382] mnist -> data
I0428 19:48:07.515173 26404 net.cpp:382] mnist -> label
I0428 19:48:07.516445 26404 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:07.518909 26404 net.cpp:124] Setting up mnist
I0428 19:48:07.518929 26404 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:07.518942 26404 net.cpp:131] Top shape: 64 (64)
I0428 19:48:07.518949 26404 net.cpp:139] Memory required for data: 200960
I0428 19:48:07.518959 26404 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:07.518981 26404 net.cpp:86] Creating Layer conv0
I0428 19:48:07.519006 26404 net.cpp:408] conv0 <- data
I0428 19:48:07.519028 26404 net.cpp:382] conv0 -> conv0
I0428 19:48:07.807509 26404 net.cpp:124] Setting up conv0
I0428 19:48:07.807540 26404 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:07.807546 26404 net.cpp:139] Memory required for data: 938240
I0428 19:48:07.807569 26404 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:07.807588 26404 net.cpp:86] Creating Layer pool0
I0428 19:48:07.807595 26404 net.cpp:408] pool0 <- conv0
I0428 19:48:07.807606 26404 net.cpp:382] pool0 -> pool0
I0428 19:48:07.807673 26404 net.cpp:124] Setting up pool0
I0428 19:48:07.807683 26404 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:07.807689 26404 net.cpp:139] Memory required for data: 1122560
I0428 19:48:07.807695 26404 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:07.807711 26404 net.cpp:86] Creating Layer conv1
I0428 19:48:07.807719 26404 net.cpp:408] conv1 <- pool0
I0428 19:48:07.807729 26404 net.cpp:382] conv1 -> conv1
I0428 19:48:07.809718 26404 net.cpp:124] Setting up conv1
I0428 19:48:07.809736 26404 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:48:07.809743 26404 net.cpp:139] Memory required for data: 1155328
I0428 19:48:07.809757 26404 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:07.809769 26404 net.cpp:86] Creating Layer pool1
I0428 19:48:07.809775 26404 net.cpp:408] pool1 <- conv1
I0428 19:48:07.809784 26404 net.cpp:382] pool1 -> pool1
I0428 19:48:07.809833 26404 net.cpp:124] Setting up pool1
I0428 19:48:07.809841 26404 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:48:07.809846 26404 net.cpp:139] Memory required for data: 1163520
I0428 19:48:07.809852 26404 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:07.809864 26404 net.cpp:86] Creating Layer ip1
I0428 19:48:07.809870 26404 net.cpp:408] ip1 <- pool1
I0428 19:48:07.809878 26404 net.cpp:382] ip1 -> ip1
I0428 19:48:07.809990 26404 net.cpp:124] Setting up ip1
I0428 19:48:07.809999 26404 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:07.810005 26404 net.cpp:139] Memory required for data: 1169920
I0428 19:48:07.810019 26404 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:07.810031 26404 net.cpp:86] Creating Layer relu1
I0428 19:48:07.810040 26404 net.cpp:408] relu1 <- ip1
I0428 19:48:07.810050 26404 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:07.810230 26404 net.cpp:124] Setting up relu1
I0428 19:48:07.810241 26404 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:07.810246 26404 net.cpp:139] Memory required for data: 1176320
I0428 19:48:07.810252 26404 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:07.810263 26404 net.cpp:86] Creating Layer ip2
I0428 19:48:07.810268 26404 net.cpp:408] ip2 <- ip1
I0428 19:48:07.810277 26404 net.cpp:382] ip2 -> ip2
I0428 19:48:07.811267 26404 net.cpp:124] Setting up ip2
I0428 19:48:07.811282 26404 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:07.811288 26404 net.cpp:139] Memory required for data: 1189120
I0428 19:48:07.811298 26404 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:07.811309 26404 net.cpp:86] Creating Layer relu2
I0428 19:48:07.811316 26404 net.cpp:408] relu2 <- ip2
I0428 19:48:07.811324 26404 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:07.812101 26404 net.cpp:124] Setting up relu2
I0428 19:48:07.812116 26404 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:07.812122 26404 net.cpp:139] Memory required for data: 1201920
I0428 19:48:07.812127 26404 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:07.812139 26404 net.cpp:86] Creating Layer ip3
I0428 19:48:07.812145 26404 net.cpp:408] ip3 <- ip2
I0428 19:48:07.812155 26404 net.cpp:382] ip3 -> ip3
I0428 19:48:07.812271 26404 net.cpp:124] Setting up ip3
I0428 19:48:07.812283 26404 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:07.812288 26404 net.cpp:139] Memory required for data: 1204480
I0428 19:48:07.812301 26404 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:07.812312 26404 net.cpp:86] Creating Layer relu3
I0428 19:48:07.812320 26404 net.cpp:408] relu3 <- ip3
I0428 19:48:07.812328 26404 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:07.812508 26404 net.cpp:124] Setting up relu3
I0428 19:48:07.812520 26404 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:07.812525 26404 net.cpp:139] Memory required for data: 1207040
I0428 19:48:07.812531 26404 layer_factory.hpp:77] Creating layer loss
I0428 19:48:07.812541 26404 net.cpp:86] Creating Layer loss
I0428 19:48:07.812546 26404 net.cpp:408] loss <- ip3
I0428 19:48:07.812554 26404 net.cpp:408] loss <- label
I0428 19:48:07.812562 26404 net.cpp:382] loss -> loss
I0428 19:48:07.812587 26404 layer_factory.hpp:77] Creating layer loss
I0428 19:48:07.812844 26404 net.cpp:124] Setting up loss
I0428 19:48:07.812856 26404 net.cpp:131] Top shape: (1)
I0428 19:48:07.812862 26404 net.cpp:134]     with loss weight 1
I0428 19:48:07.812885 26404 net.cpp:139] Memory required for data: 1207044
I0428 19:48:07.812891 26404 net.cpp:200] loss needs backward computation.
I0428 19:48:07.812897 26404 net.cpp:200] relu3 needs backward computation.
I0428 19:48:07.812902 26404 net.cpp:200] ip3 needs backward computation.
I0428 19:48:07.812908 26404 net.cpp:200] relu2 needs backward computation.
I0428 19:48:07.812913 26404 net.cpp:200] ip2 needs backward computation.
I0428 19:48:07.812918 26404 net.cpp:200] relu1 needs backward computation.
I0428 19:48:07.812923 26404 net.cpp:200] ip1 needs backward computation.
I0428 19:48:07.812929 26404 net.cpp:200] pool1 needs backward computation.
I0428 19:48:07.812934 26404 net.cpp:200] conv1 needs backward computation.
I0428 19:48:07.812940 26404 net.cpp:200] pool0 needs backward computation.
I0428 19:48:07.812947 26404 net.cpp:200] conv0 needs backward computation.
I0428 19:48:07.812952 26404 net.cpp:202] mnist does not need backward computation.
I0428 19:48:07.812958 26404 net.cpp:244] This network produces output loss
I0428 19:48:07.812973 26404 net.cpp:257] Network initialization done.
I0428 19:48:07.813323 26404 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test535.prototxt
I0428 19:48:07.813360 26404 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:07.813465 26404 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:07.813588 26404 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:07.813652 26404 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:07.813670 26404 net.cpp:86] Creating Layer mnist
I0428 19:48:07.813678 26404 net.cpp:382] mnist -> data
I0428 19:48:07.813690 26404 net.cpp:382] mnist -> label
I0428 19:48:07.813817 26404 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:07.815973 26404 net.cpp:124] Setting up mnist
I0428 19:48:07.815989 26404 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:07.815999 26404 net.cpp:131] Top shape: 100 (100)
I0428 19:48:07.816004 26404 net.cpp:139] Memory required for data: 314000
I0428 19:48:07.816010 26404 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:07.816021 26404 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:07.816027 26404 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:07.816035 26404 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:07.816047 26404 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:07.816167 26404 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:07.816176 26404 net.cpp:131] Top shape: 100 (100)
I0428 19:48:07.816184 26404 net.cpp:131] Top shape: 100 (100)
I0428 19:48:07.816190 26404 net.cpp:139] Memory required for data: 314800
I0428 19:48:07.816195 26404 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:07.816210 26404 net.cpp:86] Creating Layer conv0
I0428 19:48:07.816216 26404 net.cpp:408] conv0 <- data
I0428 19:48:07.816226 26404 net.cpp:382] conv0 -> conv0
I0428 19:48:07.817819 26404 net.cpp:124] Setting up conv0
I0428 19:48:07.817836 26404 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:07.817842 26404 net.cpp:139] Memory required for data: 1466800
I0428 19:48:07.817857 26404 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:07.817870 26404 net.cpp:86] Creating Layer pool0
I0428 19:48:07.817876 26404 net.cpp:408] pool0 <- conv0
I0428 19:48:07.817886 26404 net.cpp:382] pool0 -> pool0
I0428 19:48:07.817932 26404 net.cpp:124] Setting up pool0
I0428 19:48:07.817941 26404 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:07.817946 26404 net.cpp:139] Memory required for data: 1754800
I0428 19:48:07.817951 26404 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:07.817967 26404 net.cpp:86] Creating Layer conv1
I0428 19:48:07.817975 26404 net.cpp:408] conv1 <- pool0
I0428 19:48:07.817986 26404 net.cpp:382] conv1 -> conv1
I0428 19:48:07.820188 26404 net.cpp:124] Setting up conv1
I0428 19:48:07.820204 26404 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:48:07.820209 26404 net.cpp:139] Memory required for data: 1806000
I0428 19:48:07.820224 26404 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:07.820236 26404 net.cpp:86] Creating Layer pool1
I0428 19:48:07.820242 26404 net.cpp:408] pool1 <- conv1
I0428 19:48:07.820251 26404 net.cpp:382] pool1 -> pool1
I0428 19:48:07.820303 26404 net.cpp:124] Setting up pool1
I0428 19:48:07.820313 26404 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:48:07.820318 26404 net.cpp:139] Memory required for data: 1818800
I0428 19:48:07.820323 26404 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:07.820335 26404 net.cpp:86] Creating Layer ip1
I0428 19:48:07.820341 26404 net.cpp:408] ip1 <- pool1
I0428 19:48:07.820353 26404 net.cpp:382] ip1 -> ip1
I0428 19:48:07.820474 26404 net.cpp:124] Setting up ip1
I0428 19:48:07.820484 26404 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:07.820502 26404 net.cpp:139] Memory required for data: 1828800
I0428 19:48:07.820516 26404 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:07.820526 26404 net.cpp:86] Creating Layer relu1
I0428 19:48:07.820533 26404 net.cpp:408] relu1 <- ip1
I0428 19:48:07.820543 26404 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:07.820737 26404 net.cpp:124] Setting up relu1
I0428 19:48:07.820749 26404 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:07.820754 26404 net.cpp:139] Memory required for data: 1838800
I0428 19:48:07.820760 26404 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:07.820775 26404 net.cpp:86] Creating Layer ip2
I0428 19:48:07.820781 26404 net.cpp:408] ip2 <- ip1
I0428 19:48:07.820791 26404 net.cpp:382] ip2 -> ip2
I0428 19:48:07.820929 26404 net.cpp:124] Setting up ip2
I0428 19:48:07.820940 26404 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:07.820945 26404 net.cpp:139] Memory required for data: 1858800
I0428 19:48:07.820955 26404 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:07.820964 26404 net.cpp:86] Creating Layer relu2
I0428 19:48:07.820974 26404 net.cpp:408] relu2 <- ip2
I0428 19:48:07.820984 26404 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:07.821223 26404 net.cpp:124] Setting up relu2
I0428 19:48:07.821233 26404 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:07.821239 26404 net.cpp:139] Memory required for data: 1878800
I0428 19:48:07.821244 26404 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:07.821255 26404 net.cpp:86] Creating Layer ip3
I0428 19:48:07.821260 26404 net.cpp:408] ip3 <- ip2
I0428 19:48:07.821270 26404 net.cpp:382] ip3 -> ip3
I0428 19:48:07.821391 26404 net.cpp:124] Setting up ip3
I0428 19:48:07.821401 26404 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:07.821406 26404 net.cpp:139] Memory required for data: 1882800
I0428 19:48:07.821421 26404 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:07.821430 26404 net.cpp:86] Creating Layer relu3
I0428 19:48:07.821435 26404 net.cpp:408] relu3 <- ip3
I0428 19:48:07.821442 26404 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:07.822248 26404 net.cpp:124] Setting up relu3
I0428 19:48:07.822263 26404 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:07.822268 26404 net.cpp:139] Memory required for data: 1886800
I0428 19:48:07.822273 26404 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:07.822283 26404 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:07.822289 26404 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:07.822298 26404 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:07.822309 26404 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:07.822365 26404 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:07.822373 26404 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:07.822381 26404 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:07.822386 26404 net.cpp:139] Memory required for data: 1894800
I0428 19:48:07.822391 26404 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:07.822408 26404 net.cpp:86] Creating Layer accuracy
I0428 19:48:07.822414 26404 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:07.822422 26404 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:07.822439 26404 net.cpp:382] accuracy -> accuracy
I0428 19:48:07.822451 26404 net.cpp:124] Setting up accuracy
I0428 19:48:07.822470 26404 net.cpp:131] Top shape: (1)
I0428 19:48:07.822475 26404 net.cpp:139] Memory required for data: 1894804
I0428 19:48:07.822480 26404 layer_factory.hpp:77] Creating layer loss
I0428 19:48:07.822489 26404 net.cpp:86] Creating Layer loss
I0428 19:48:07.822494 26404 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:07.822501 26404 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:07.822510 26404 net.cpp:382] loss -> loss
I0428 19:48:07.822520 26404 layer_factory.hpp:77] Creating layer loss
I0428 19:48:07.822778 26404 net.cpp:124] Setting up loss
I0428 19:48:07.822793 26404 net.cpp:131] Top shape: (1)
I0428 19:48:07.822798 26404 net.cpp:134]     with loss weight 1
I0428 19:48:07.822808 26404 net.cpp:139] Memory required for data: 1894808
I0428 19:48:07.822825 26404 net.cpp:200] loss needs backward computation.
I0428 19:48:07.822835 26404 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:07.822841 26404 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:07.822846 26404 net.cpp:200] relu3 needs backward computation.
I0428 19:48:07.822852 26404 net.cpp:200] ip3 needs backward computation.
I0428 19:48:07.822857 26404 net.cpp:200] relu2 needs backward computation.
I0428 19:48:07.822865 26404 net.cpp:200] ip2 needs backward computation.
I0428 19:48:07.822870 26404 net.cpp:200] relu1 needs backward computation.
I0428 19:48:07.822875 26404 net.cpp:200] ip1 needs backward computation.
I0428 19:48:07.822881 26404 net.cpp:200] pool1 needs backward computation.
I0428 19:48:07.822886 26404 net.cpp:200] conv1 needs backward computation.
I0428 19:48:07.822891 26404 net.cpp:200] pool0 needs backward computation.
I0428 19:48:07.822896 26404 net.cpp:200] conv0 needs backward computation.
I0428 19:48:07.822903 26404 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:07.822909 26404 net.cpp:202] mnist does not need backward computation.
I0428 19:48:07.822914 26404 net.cpp:244] This network produces output accuracy
I0428 19:48:07.822921 26404 net.cpp:244] This network produces output loss
I0428 19:48:07.822938 26404 net.cpp:257] Network initialization done.
I0428 19:48:07.822988 26404 solver.cpp:56] Solver scaffolding done.
I0428 19:48:07.823355 26404 caffe.cpp:248] Starting Optimization
I0428 19:48:07.823362 26404 solver.cpp:273] Solving LeNet
I0428 19:48:07.823367 26404 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:07.824133 26404 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:07.827630 26404 blocking_queue.cpp:49] Waiting for data
I0428 19:48:07.897868 26411 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:07.898497 26404 solver.cpp:398]     Test net output #0: accuracy = 0.0222
I0428 19:48:07.898532 26404 solver.cpp:398]     Test net output #1: loss = 2.34467 (* 1 = 2.34467 loss)
I0428 19:48:07.901157 26404 solver.cpp:219] Iteration 0 (-1.96993e-31 iter/s, 0.0777523s/100 iters), loss = 2.34636
I0428 19:48:07.901197 26404 solver.cpp:238]     Train net output #0: loss = 2.34636 (* 1 = 2.34636 loss)
I0428 19:48:07.901216 26404 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:07.986085 26404 solver.cpp:219] Iteration 100 (1178.19 iter/s, 0.0848763s/100 iters), loss = 1.07093
I0428 19:48:07.986117 26404 solver.cpp:238]     Train net output #0: loss = 1.07093 (* 1 = 1.07093 loss)
I0428 19:48:07.986125 26404 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:08.059747 26404 solver.cpp:219] Iteration 200 (1358.32 iter/s, 0.0736205s/100 iters), loss = 1.28713
I0428 19:48:08.059777 26404 solver.cpp:238]     Train net output #0: loss = 1.28713 (* 1 = 1.28713 loss)
I0428 19:48:08.059783 26404 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:08.132771 26404 solver.cpp:219] Iteration 300 (1370.13 iter/s, 0.0729856s/100 iters), loss = 0.992084
I0428 19:48:08.132799 26404 solver.cpp:238]     Train net output #0: loss = 0.992084 (* 1 = 0.992084 loss)
I0428 19:48:08.132807 26404 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:08.206267 26404 solver.cpp:219] Iteration 400 (1361.31 iter/s, 0.0734586s/100 iters), loss = 1.17576
I0428 19:48:08.206296 26404 solver.cpp:238]     Train net output #0: loss = 1.17576 (* 1 = 1.17576 loss)
I0428 19:48:08.206305 26404 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:08.279397 26404 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:08.354770 26411 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:08.355314 26404 solver.cpp:398]     Test net output #0: accuracy = 0.6629
I0428 19:48:08.355346 26404 solver.cpp:398]     Test net output #1: loss = 0.898743 (* 1 = 0.898743 loss)
I0428 19:48:08.356221 26404 solver.cpp:219] Iteration 500 (667.06 iter/s, 0.149912s/100 iters), loss = 1.08887
I0428 19:48:08.356247 26404 solver.cpp:238]     Train net output #0: loss = 1.08887 (* 1 = 1.08887 loss)
I0428 19:48:08.356272 26404 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:08.432525 26404 solver.cpp:219] Iteration 600 (1311.17 iter/s, 0.0762675s/100 iters), loss = 0.92083
I0428 19:48:08.432554 26404 solver.cpp:238]     Train net output #0: loss = 0.92083 (* 1 = 0.92083 loss)
I0428 19:48:08.432560 26404 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:08.505316 26404 solver.cpp:219] Iteration 700 (1374.51 iter/s, 0.0727532s/100 iters), loss = 0.791312
I0428 19:48:08.505343 26404 solver.cpp:238]     Train net output #0: loss = 0.791312 (* 1 = 0.791312 loss)
I0428 19:48:08.505350 26404 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:08.577805 26404 solver.cpp:219] Iteration 800 (1380.22 iter/s, 0.0724521s/100 iters), loss = 1.04193
I0428 19:48:08.577833 26404 solver.cpp:238]     Train net output #0: loss = 1.04193 (* 1 = 1.04193 loss)
I0428 19:48:08.577841 26404 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:08.649410 26404 solver.cpp:219] Iteration 900 (1397.29 iter/s, 0.0715674s/100 iters), loss = 1.15707
I0428 19:48:08.649435 26404 solver.cpp:238]     Train net output #0: loss = 1.15707 (* 1 = 1.15707 loss)
I0428 19:48:08.649442 26404 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:08.672801 26410 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:08.717773 26404 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:08.718503 26404 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:08.718932 26404 solver.cpp:311] Iteration 1000, loss = 0.679114
I0428 19:48:08.718952 26404 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:08.794353 26411 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:08.794875 26404 solver.cpp:398]     Test net output #0: accuracy = 0.675
I0428 19:48:08.794893 26404 solver.cpp:398]     Test net output #1: loss = 0.840751 (* 1 = 0.840751 loss)
I0428 19:48:08.794898 26404 solver.cpp:316] Optimization Done.
I0428 19:48:08.794904 26404 caffe.cpp:259] Optimization Done.
