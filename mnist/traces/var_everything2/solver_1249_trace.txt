I0428 20:15:32.966380   468 caffe.cpp:218] Using GPUs 0
I0428 20:15:32.994240   468 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:33.442651   468 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1249.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:33.442786   468 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1249.prototxt
I0428 20:15:33.443078   468 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:33.443106   468 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:33.443189   468 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:15:33.443248   468 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:33.443346   468 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:33.443368   468 net.cpp:86] Creating Layer mnist
I0428 20:15:33.443374   468 net.cpp:382] mnist -> data
I0428 20:15:33.443393   468 net.cpp:382] mnist -> label
I0428 20:15:33.444394   468 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:33.446789   468 net.cpp:124] Setting up mnist
I0428 20:15:33.446821   468 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:33.446838   468 net.cpp:131] Top shape: 64 (64)
I0428 20:15:33.446842   468 net.cpp:139] Memory required for data: 200960
I0428 20:15:33.446848   468 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:33.446861   468 net.cpp:86] Creating Layer conv0
I0428 20:15:33.446866   468 net.cpp:408] conv0 <- data
I0428 20:15:33.446877   468 net.cpp:382] conv0 -> conv0
I0428 20:15:33.677438   468 net.cpp:124] Setting up conv0
I0428 20:15:33.677479   468 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:33.677484   468 net.cpp:139] Memory required for data: 7573760
I0428 20:15:33.677500   468 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:33.677512   468 net.cpp:86] Creating Layer pool0
I0428 20:15:33.677516   468 net.cpp:408] pool0 <- conv0
I0428 20:15:33.677521   468 net.cpp:382] pool0 -> pool0
I0428 20:15:33.677582   468 net.cpp:124] Setting up pool0
I0428 20:15:33.677588   468 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:33.677606   468 net.cpp:139] Memory required for data: 9416960
I0428 20:15:33.677610   468 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:33.677620   468 net.cpp:86] Creating Layer conv1
I0428 20:15:33.677623   468 net.cpp:408] conv1 <- pool0
I0428 20:15:33.677628   468 net.cpp:382] conv1 -> conv1
I0428 20:15:33.680392   468 net.cpp:124] Setting up conv1
I0428 20:15:33.680407   468 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:33.680410   468 net.cpp:139] Memory required for data: 9498880
I0428 20:15:33.680418   468 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:33.680425   468 net.cpp:86] Creating Layer pool1
I0428 20:15:33.680429   468 net.cpp:408] pool1 <- conv1
I0428 20:15:33.680434   468 net.cpp:382] pool1 -> pool1
I0428 20:15:33.680488   468 net.cpp:124] Setting up pool1
I0428 20:15:33.680493   468 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:33.680496   468 net.cpp:139] Memory required for data: 9519360
I0428 20:15:33.680500   468 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:33.680506   468 net.cpp:86] Creating Layer ip1
I0428 20:15:33.680510   468 net.cpp:408] ip1 <- pool1
I0428 20:15:33.680513   468 net.cpp:382] ip1 -> ip1
I0428 20:15:33.680604   468 net.cpp:124] Setting up ip1
I0428 20:15:33.680613   468 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:33.680615   468 net.cpp:139] Memory required for data: 9521920
I0428 20:15:33.680622   468 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:33.680627   468 net.cpp:86] Creating Layer relu1
I0428 20:15:33.680630   468 net.cpp:408] relu1 <- ip1
I0428 20:15:33.680634   468 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:33.680831   468 net.cpp:124] Setting up relu1
I0428 20:15:33.680841   468 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:33.680845   468 net.cpp:139] Memory required for data: 9524480
I0428 20:15:33.680848   468 layer_factory.hpp:77] Creating layer loss
I0428 20:15:33.680855   468 net.cpp:86] Creating Layer loss
I0428 20:15:33.680873   468 net.cpp:408] loss <- ip1
I0428 20:15:33.680878   468 net.cpp:408] loss <- label
I0428 20:15:33.680899   468 net.cpp:382] loss -> loss
I0428 20:15:33.680917   468 layer_factory.hpp:77] Creating layer loss
I0428 20:15:33.681766   468 net.cpp:124] Setting up loss
I0428 20:15:33.681779   468 net.cpp:131] Top shape: (1)
I0428 20:15:33.681798   468 net.cpp:134]     with loss weight 1
I0428 20:15:33.681814   468 net.cpp:139] Memory required for data: 9524484
I0428 20:15:33.681818   468 net.cpp:200] loss needs backward computation.
I0428 20:15:33.681821   468 net.cpp:200] relu1 needs backward computation.
I0428 20:15:33.681824   468 net.cpp:200] ip1 needs backward computation.
I0428 20:15:33.681828   468 net.cpp:200] pool1 needs backward computation.
I0428 20:15:33.681846   468 net.cpp:200] conv1 needs backward computation.
I0428 20:15:33.681849   468 net.cpp:200] pool0 needs backward computation.
I0428 20:15:33.681852   468 net.cpp:200] conv0 needs backward computation.
I0428 20:15:33.681856   468 net.cpp:202] mnist does not need backward computation.
I0428 20:15:33.681859   468 net.cpp:244] This network produces output loss
I0428 20:15:33.681867   468 net.cpp:257] Network initialization done.
I0428 20:15:33.682128   468 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1249.prototxt
I0428 20:15:33.682168   468 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:33.682240   468 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:15:33.682312   468 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:33.682356   468 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:33.682371   468 net.cpp:86] Creating Layer mnist
I0428 20:15:33.682376   468 net.cpp:382] mnist -> data
I0428 20:15:33.682384   468 net.cpp:382] mnist -> label
I0428 20:15:33.682463   468 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:33.684512   468 net.cpp:124] Setting up mnist
I0428 20:15:33.684556   468 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:33.684562   468 net.cpp:131] Top shape: 100 (100)
I0428 20:15:33.684566   468 net.cpp:139] Memory required for data: 314000
I0428 20:15:33.684569   468 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:33.684579   468 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:33.684583   468 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:33.684588   468 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:33.684594   468 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:33.684713   468 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:33.684721   468 net.cpp:131] Top shape: 100 (100)
I0428 20:15:33.684725   468 net.cpp:131] Top shape: 100 (100)
I0428 20:15:33.684728   468 net.cpp:139] Memory required for data: 314800
I0428 20:15:33.684731   468 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:33.684741   468 net.cpp:86] Creating Layer conv0
I0428 20:15:33.684743   468 net.cpp:408] conv0 <- data
I0428 20:15:33.684748   468 net.cpp:382] conv0 -> conv0
I0428 20:15:33.685575   468 net.cpp:124] Setting up conv0
I0428 20:15:33.685586   468 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:33.685590   468 net.cpp:139] Memory required for data: 11834800
I0428 20:15:33.685614   468 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:33.685621   468 net.cpp:86] Creating Layer pool0
I0428 20:15:33.685626   468 net.cpp:408] pool0 <- conv0
I0428 20:15:33.685629   468 net.cpp:382] pool0 -> pool0
I0428 20:15:33.685664   468 net.cpp:124] Setting up pool0
I0428 20:15:33.685672   468 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:33.685674   468 net.cpp:139] Memory required for data: 14714800
I0428 20:15:33.685678   468 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:33.685688   468 net.cpp:86] Creating Layer conv1
I0428 20:15:33.685691   468 net.cpp:408] conv1 <- pool0
I0428 20:15:33.685698   468 net.cpp:382] conv1 -> conv1
I0428 20:15:33.687394   468 net.cpp:124] Setting up conv1
I0428 20:15:33.687408   468 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:33.687429   468 net.cpp:139] Memory required for data: 14842800
I0428 20:15:33.687439   468 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:33.687448   468 net.cpp:86] Creating Layer pool1
I0428 20:15:33.687461   468 net.cpp:408] pool1 <- conv1
I0428 20:15:33.687467   468 net.cpp:382] pool1 -> pool1
I0428 20:15:33.687535   468 net.cpp:124] Setting up pool1
I0428 20:15:33.687556   468 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:33.687561   468 net.cpp:139] Memory required for data: 14874800
I0428 20:15:33.687566   468 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:33.687577   468 net.cpp:86] Creating Layer ip1
I0428 20:15:33.687582   468 net.cpp:408] ip1 <- pool1
I0428 20:15:33.687592   468 net.cpp:382] ip1 -> ip1
I0428 20:15:33.687721   468 net.cpp:124] Setting up ip1
I0428 20:15:33.687731   468 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:33.687734   468 net.cpp:139] Memory required for data: 14878800
I0428 20:15:33.687742   468 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:33.687748   468 net.cpp:86] Creating Layer relu1
I0428 20:15:33.687752   468 net.cpp:408] relu1 <- ip1
I0428 20:15:33.687757   468 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:33.688635   468 net.cpp:124] Setting up relu1
I0428 20:15:33.688648   468 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:33.688668   468 net.cpp:139] Memory required for data: 14882800
I0428 20:15:33.688674   468 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:15:33.688684   468 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:15:33.688688   468 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:15:33.688694   468 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:15:33.688699   468 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:15:33.688740   468 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:15:33.688760   468 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:33.688765   468 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:33.688767   468 net.cpp:139] Memory required for data: 14890800
I0428 20:15:33.688771   468 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:33.688776   468 net.cpp:86] Creating Layer accuracy
I0428 20:15:33.688778   468 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:15:33.688783   468 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:33.688789   468 net.cpp:382] accuracy -> accuracy
I0428 20:15:33.688802   468 net.cpp:124] Setting up accuracy
I0428 20:15:33.688805   468 net.cpp:131] Top shape: (1)
I0428 20:15:33.688814   468 net.cpp:139] Memory required for data: 14890804
I0428 20:15:33.688818   468 layer_factory.hpp:77] Creating layer loss
I0428 20:15:33.688839   468 net.cpp:86] Creating Layer loss
I0428 20:15:33.688863   468 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:15:33.688868   468 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:33.688879   468 net.cpp:382] loss -> loss
I0428 20:15:33.688886   468 layer_factory.hpp:77] Creating layer loss
I0428 20:15:33.689172   468 net.cpp:124] Setting up loss
I0428 20:15:33.689199   468 net.cpp:131] Top shape: (1)
I0428 20:15:33.689203   468 net.cpp:134]     with loss weight 1
I0428 20:15:33.689210   468 net.cpp:139] Memory required for data: 14890808
I0428 20:15:33.689229   468 net.cpp:200] loss needs backward computation.
I0428 20:15:33.689234   468 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:33.689251   468 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:15:33.689255   468 net.cpp:200] relu1 needs backward computation.
I0428 20:15:33.689258   468 net.cpp:200] ip1 needs backward computation.
I0428 20:15:33.689261   468 net.cpp:200] pool1 needs backward computation.
I0428 20:15:33.689265   468 net.cpp:200] conv1 needs backward computation.
I0428 20:15:33.689267   468 net.cpp:200] pool0 needs backward computation.
I0428 20:15:33.689270   468 net.cpp:200] conv0 needs backward computation.
I0428 20:15:33.689275   468 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:33.689278   468 net.cpp:202] mnist does not need backward computation.
I0428 20:15:33.689280   468 net.cpp:244] This network produces output accuracy
I0428 20:15:33.689285   468 net.cpp:244] This network produces output loss
I0428 20:15:33.689304   468 net.cpp:257] Network initialization done.
I0428 20:15:33.689338   468 solver.cpp:56] Solver scaffolding done.
I0428 20:15:33.689565   468 caffe.cpp:248] Starting Optimization
I0428 20:15:33.689573   468 solver.cpp:273] Solving LeNet
I0428 20:15:33.689575   468 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:33.690354   468 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:33.696411   468 blocking_queue.cpp:49] Waiting for data
I0428 20:15:33.763051   475 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:33.763747   468 solver.cpp:398]     Test net output #0: accuracy = 0.0217
I0428 20:15:33.763782   468 solver.cpp:398]     Test net output #1: loss = 2.44955 (* 1 = 2.44955 loss)
I0428 20:15:33.767961   468 solver.cpp:219] Iteration 0 (0 iter/s, 0.0783503s/100 iters), loss = 2.44673
I0428 20:15:33.767999   468 solver.cpp:238]     Train net output #0: loss = 2.44673 (* 1 = 2.44673 loss)
I0428 20:15:33.768010   468 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:33.873327   468 solver.cpp:219] Iteration 100 (949.585 iter/s, 0.105309s/100 iters), loss = 0.265319
I0428 20:15:33.873389   468 solver.cpp:238]     Train net output #0: loss = 0.265319 (* 1 = 0.265319 loss)
I0428 20:15:33.873399   468 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:33.981737   468 solver.cpp:219] Iteration 200 (923.01 iter/s, 0.108341s/100 iters), loss = 0.26279
I0428 20:15:33.981781   468 solver.cpp:238]     Train net output #0: loss = 0.26279 (* 1 = 0.26279 loss)
I0428 20:15:33.981789   468 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:34.086773   468 solver.cpp:219] Iteration 300 (952.447 iter/s, 0.104993s/100 iters), loss = 0.235206
I0428 20:15:34.086833   468 solver.cpp:238]     Train net output #0: loss = 0.235206 (* 1 = 0.235206 loss)
I0428 20:15:34.086841   468 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:34.193424   468 solver.cpp:219] Iteration 400 (938.119 iter/s, 0.106596s/100 iters), loss = 0.0954884
I0428 20:15:34.193464   468 solver.cpp:238]     Train net output #0: loss = 0.0954883 (* 1 = 0.0954883 loss)
I0428 20:15:34.193472   468 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:34.298887   468 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:34.358954   475 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:34.361078   468 solver.cpp:398]     Test net output #0: accuracy = 0.9589
I0428 20:15:34.361117   468 solver.cpp:398]     Test net output #1: loss = 0.139289 (* 1 = 0.139289 loss)
I0428 20:15:34.362150   468 solver.cpp:219] Iteration 500 (592.863 iter/s, 0.168673s/100 iters), loss = 0.114796
I0428 20:15:34.362191   468 solver.cpp:238]     Train net output #0: loss = 0.114796 (* 1 = 0.114796 loss)
I0428 20:15:34.362200   468 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:34.468045   468 solver.cpp:219] Iteration 600 (944.643 iter/s, 0.10586s/100 iters), loss = 0.142106
I0428 20:15:34.468088   468 solver.cpp:238]     Train net output #0: loss = 0.142106 (* 1 = 0.142106 loss)
I0428 20:15:34.468096   468 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:34.574405   468 solver.cpp:219] Iteration 700 (940.667 iter/s, 0.106308s/100 iters), loss = 0.250845
I0428 20:15:34.574437   468 solver.cpp:238]     Train net output #0: loss = 0.250845 (* 1 = 0.250845 loss)
I0428 20:15:34.574446   468 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:34.682261   468 solver.cpp:219] Iteration 800 (927.524 iter/s, 0.107814s/100 iters), loss = 0.237049
I0428 20:15:34.682303   468 solver.cpp:238]     Train net output #0: loss = 0.237049 (* 1 = 0.237049 loss)
I0428 20:15:34.682310   468 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:34.789350   468 solver.cpp:219] Iteration 900 (934.134 iter/s, 0.107051s/100 iters), loss = 0.273339
I0428 20:15:34.789388   468 solver.cpp:238]     Train net output #0: loss = 0.273339 (* 1 = 0.273339 loss)
I0428 20:15:34.789397   468 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:34.825498   474 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:34.895179   468 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:34.896020   468 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:34.896677   468 solver.cpp:311] Iteration 1000, loss = 0.187787
I0428 20:15:34.896692   468 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:34.956358   475 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:34.958431   468 solver.cpp:398]     Test net output #0: accuracy = 0.9709
I0428 20:15:34.958467   468 solver.cpp:398]     Test net output #1: loss = 0.0901503 (* 1 = 0.0901503 loss)
I0428 20:15:34.958472   468 solver.cpp:316] Optimization Done.
I0428 20:15:34.958477   468 caffe.cpp:259] Optimization Done.
