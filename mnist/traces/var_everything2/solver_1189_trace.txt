I0428 20:12:54.141472 32369 caffe.cpp:218] Using GPUs 0
I0428 20:12:54.171291 32369 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:54.622864 32369 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1189.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:54.623013 32369 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1189.prototxt
I0428 20:12:54.623347 32369 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:54.623361 32369 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:54.623435 32369 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:12:54.623494 32369 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:54.623575 32369 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:54.623594 32369 net.cpp:86] Creating Layer mnist
I0428 20:12:54.623600 32369 net.cpp:382] mnist -> data
I0428 20:12:54.623618 32369 net.cpp:382] mnist -> label
I0428 20:12:54.624605 32369 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:54.626838 32369 net.cpp:124] Setting up mnist
I0428 20:12:54.626868 32369 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:54.626873 32369 net.cpp:131] Top shape: 64 (64)
I0428 20:12:54.626876 32369 net.cpp:139] Memory required for data: 200960
I0428 20:12:54.626883 32369 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:54.626894 32369 net.cpp:86] Creating Layer conv0
I0428 20:12:54.626910 32369 net.cpp:408] conv0 <- data
I0428 20:12:54.626920 32369 net.cpp:382] conv0 -> conv0
I0428 20:12:54.863567 32369 net.cpp:124] Setting up conv0
I0428 20:12:54.863593 32369 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:54.863596 32369 net.cpp:139] Memory required for data: 3887360
I0428 20:12:54.863611 32369 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:54.863638 32369 net.cpp:86] Creating Layer pool0
I0428 20:12:54.863642 32369 net.cpp:408] pool0 <- conv0
I0428 20:12:54.863647 32369 net.cpp:382] pool0 -> pool0
I0428 20:12:54.863689 32369 net.cpp:124] Setting up pool0
I0428 20:12:54.863695 32369 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:54.863698 32369 net.cpp:139] Memory required for data: 4808960
I0428 20:12:54.863700 32369 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:54.863711 32369 net.cpp:86] Creating Layer conv1
I0428 20:12:54.863714 32369 net.cpp:408] conv1 <- pool0
I0428 20:12:54.863718 32369 net.cpp:382] conv1 -> conv1
I0428 20:12:54.865921 32369 net.cpp:124] Setting up conv1
I0428 20:12:54.865934 32369 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:54.865952 32369 net.cpp:139] Memory required for data: 6447360
I0428 20:12:54.865962 32369 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:54.865983 32369 net.cpp:86] Creating Layer pool1
I0428 20:12:54.865986 32369 net.cpp:408] pool1 <- conv1
I0428 20:12:54.865990 32369 net.cpp:382] pool1 -> pool1
I0428 20:12:54.866025 32369 net.cpp:124] Setting up pool1
I0428 20:12:54.866030 32369 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:54.866034 32369 net.cpp:139] Memory required for data: 6856960
I0428 20:12:54.866035 32369 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:54.866042 32369 net.cpp:86] Creating Layer ip1
I0428 20:12:54.866045 32369 net.cpp:408] ip1 <- pool1
I0428 20:12:54.866050 32369 net.cpp:382] ip1 -> ip1
I0428 20:12:54.867081 32369 net.cpp:124] Setting up ip1
I0428 20:12:54.867094 32369 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:54.867097 32369 net.cpp:139] Memory required for data: 6859520
I0428 20:12:54.867106 32369 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:54.867112 32369 net.cpp:86] Creating Layer relu1
I0428 20:12:54.867115 32369 net.cpp:408] relu1 <- ip1
I0428 20:12:54.867120 32369 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:54.867321 32369 net.cpp:124] Setting up relu1
I0428 20:12:54.867331 32369 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:54.867334 32369 net.cpp:139] Memory required for data: 6862080
I0428 20:12:54.867337 32369 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:54.867343 32369 net.cpp:86] Creating Layer ip2
I0428 20:12:54.867347 32369 net.cpp:408] ip2 <- ip1
I0428 20:12:54.867365 32369 net.cpp:382] ip2 -> ip2
I0428 20:12:54.867480 32369 net.cpp:124] Setting up ip2
I0428 20:12:54.867486 32369 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:54.867489 32369 net.cpp:139] Memory required for data: 6874880
I0428 20:12:54.867494 32369 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:54.867501 32369 net.cpp:86] Creating Layer relu2
I0428 20:12:54.867504 32369 net.cpp:408] relu2 <- ip2
I0428 20:12:54.867508 32369 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:54.868347 32369 net.cpp:124] Setting up relu2
I0428 20:12:54.868360 32369 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:54.868378 32369 net.cpp:139] Memory required for data: 6887680
I0428 20:12:54.868381 32369 layer_factory.hpp:77] Creating layer ip3
I0428 20:12:54.868388 32369 net.cpp:86] Creating Layer ip3
I0428 20:12:54.868391 32369 net.cpp:408] ip3 <- ip2
I0428 20:12:54.868396 32369 net.cpp:382] ip3 -> ip3
I0428 20:12:54.868494 32369 net.cpp:124] Setting up ip3
I0428 20:12:54.868502 32369 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:54.868505 32369 net.cpp:139] Memory required for data: 6890240
I0428 20:12:54.868512 32369 layer_factory.hpp:77] Creating layer relu3
I0428 20:12:54.868517 32369 net.cpp:86] Creating Layer relu3
I0428 20:12:54.868520 32369 net.cpp:408] relu3 <- ip3
I0428 20:12:54.868525 32369 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:12:54.868698 32369 net.cpp:124] Setting up relu3
I0428 20:12:54.868706 32369 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:54.868710 32369 net.cpp:139] Memory required for data: 6892800
I0428 20:12:54.868713 32369 layer_factory.hpp:77] Creating layer loss
I0428 20:12:54.868718 32369 net.cpp:86] Creating Layer loss
I0428 20:12:54.868723 32369 net.cpp:408] loss <- ip3
I0428 20:12:54.868727 32369 net.cpp:408] loss <- label
I0428 20:12:54.868732 32369 net.cpp:382] loss -> loss
I0428 20:12:54.868749 32369 layer_factory.hpp:77] Creating layer loss
I0428 20:12:54.869022 32369 net.cpp:124] Setting up loss
I0428 20:12:54.869033 32369 net.cpp:131] Top shape: (1)
I0428 20:12:54.869036 32369 net.cpp:134]     with loss weight 1
I0428 20:12:54.869050 32369 net.cpp:139] Memory required for data: 6892804
I0428 20:12:54.869055 32369 net.cpp:200] loss needs backward computation.
I0428 20:12:54.869060 32369 net.cpp:200] relu3 needs backward computation.
I0428 20:12:54.869062 32369 net.cpp:200] ip3 needs backward computation.
I0428 20:12:54.869065 32369 net.cpp:200] relu2 needs backward computation.
I0428 20:12:54.869067 32369 net.cpp:200] ip2 needs backward computation.
I0428 20:12:54.869071 32369 net.cpp:200] relu1 needs backward computation.
I0428 20:12:54.869073 32369 net.cpp:200] ip1 needs backward computation.
I0428 20:12:54.869076 32369 net.cpp:200] pool1 needs backward computation.
I0428 20:12:54.869079 32369 net.cpp:200] conv1 needs backward computation.
I0428 20:12:54.869081 32369 net.cpp:200] pool0 needs backward computation.
I0428 20:12:54.869084 32369 net.cpp:200] conv0 needs backward computation.
I0428 20:12:54.869088 32369 net.cpp:202] mnist does not need backward computation.
I0428 20:12:54.869091 32369 net.cpp:244] This network produces output loss
I0428 20:12:54.869102 32369 net.cpp:257] Network initialization done.
I0428 20:12:54.869515 32369 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1189.prototxt
I0428 20:12:54.869555 32369 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:54.869644 32369 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:12:54.869727 32369 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:54.869770 32369 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:54.869781 32369 net.cpp:86] Creating Layer mnist
I0428 20:12:54.869786 32369 net.cpp:382] mnist -> data
I0428 20:12:54.869793 32369 net.cpp:382] mnist -> label
I0428 20:12:54.869874 32369 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:54.871999 32369 net.cpp:124] Setting up mnist
I0428 20:12:54.872027 32369 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:54.872032 32369 net.cpp:131] Top shape: 100 (100)
I0428 20:12:54.872035 32369 net.cpp:139] Memory required for data: 314000
I0428 20:12:54.872038 32369 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:54.872045 32369 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:54.872047 32369 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:54.872064 32369 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:54.872072 32369 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:54.872115 32369 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:54.872123 32369 net.cpp:131] Top shape: 100 (100)
I0428 20:12:54.872125 32369 net.cpp:131] Top shape: 100 (100)
I0428 20:12:54.872128 32369 net.cpp:139] Memory required for data: 314800
I0428 20:12:54.872130 32369 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:54.872141 32369 net.cpp:86] Creating Layer conv0
I0428 20:12:54.872144 32369 net.cpp:408] conv0 <- data
I0428 20:12:54.872149 32369 net.cpp:382] conv0 -> conv0
I0428 20:12:54.874001 32369 net.cpp:124] Setting up conv0
I0428 20:12:54.874014 32369 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:54.874033 32369 net.cpp:139] Memory required for data: 6074800
I0428 20:12:54.874042 32369 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:54.874050 32369 net.cpp:86] Creating Layer pool0
I0428 20:12:54.874054 32369 net.cpp:408] pool0 <- conv0
I0428 20:12:54.874058 32369 net.cpp:382] pool0 -> pool0
I0428 20:12:54.874094 32369 net.cpp:124] Setting up pool0
I0428 20:12:54.874099 32369 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:54.874102 32369 net.cpp:139] Memory required for data: 7514800
I0428 20:12:54.874105 32369 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:54.874114 32369 net.cpp:86] Creating Layer conv1
I0428 20:12:54.874116 32369 net.cpp:408] conv1 <- pool0
I0428 20:12:54.874122 32369 net.cpp:382] conv1 -> conv1
I0428 20:12:54.876137 32369 net.cpp:124] Setting up conv1
I0428 20:12:54.876149 32369 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:54.876163 32369 net.cpp:139] Memory required for data: 10074800
I0428 20:12:54.876173 32369 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:54.876178 32369 net.cpp:86] Creating Layer pool1
I0428 20:12:54.876196 32369 net.cpp:408] pool1 <- conv1
I0428 20:12:54.876202 32369 net.cpp:382] pool1 -> pool1
I0428 20:12:54.876255 32369 net.cpp:124] Setting up pool1
I0428 20:12:54.876262 32369 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:54.876266 32369 net.cpp:139] Memory required for data: 10714800
I0428 20:12:54.876267 32369 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:54.876274 32369 net.cpp:86] Creating Layer ip1
I0428 20:12:54.876278 32369 net.cpp:408] ip1 <- pool1
I0428 20:12:54.876283 32369 net.cpp:382] ip1 -> ip1
I0428 20:12:54.876458 32369 net.cpp:124] Setting up ip1
I0428 20:12:54.876466 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.876482 32369 net.cpp:139] Memory required for data: 10718800
I0428 20:12:54.876488 32369 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:54.876494 32369 net.cpp:86] Creating Layer relu1
I0428 20:12:54.876513 32369 net.cpp:408] relu1 <- ip1
I0428 20:12:54.876518 32369 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:54.876683 32369 net.cpp:124] Setting up relu1
I0428 20:12:54.876693 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.876695 32369 net.cpp:139] Memory required for data: 10722800
I0428 20:12:54.876699 32369 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:54.876708 32369 net.cpp:86] Creating Layer ip2
I0428 20:12:54.876711 32369 net.cpp:408] ip2 <- ip1
I0428 20:12:54.876718 32369 net.cpp:382] ip2 -> ip2
I0428 20:12:54.876842 32369 net.cpp:124] Setting up ip2
I0428 20:12:54.876852 32369 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:54.876855 32369 net.cpp:139] Memory required for data: 10742800
I0428 20:12:54.876862 32369 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:54.876866 32369 net.cpp:86] Creating Layer relu2
I0428 20:12:54.876869 32369 net.cpp:408] relu2 <- ip2
I0428 20:12:54.876880 32369 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:54.877043 32369 net.cpp:124] Setting up relu2
I0428 20:12:54.877053 32369 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:54.877055 32369 net.cpp:139] Memory required for data: 10762800
I0428 20:12:54.877058 32369 layer_factory.hpp:77] Creating layer ip3
I0428 20:12:54.877064 32369 net.cpp:86] Creating Layer ip3
I0428 20:12:54.877068 32369 net.cpp:408] ip3 <- ip2
I0428 20:12:54.877074 32369 net.cpp:382] ip3 -> ip3
I0428 20:12:54.877221 32369 net.cpp:124] Setting up ip3
I0428 20:12:54.877228 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.877231 32369 net.cpp:139] Memory required for data: 10766800
I0428 20:12:54.877240 32369 layer_factory.hpp:77] Creating layer relu3
I0428 20:12:54.877245 32369 net.cpp:86] Creating Layer relu3
I0428 20:12:54.877249 32369 net.cpp:408] relu3 <- ip3
I0428 20:12:54.877254 32369 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:12:54.878121 32369 net.cpp:124] Setting up relu3
I0428 20:12:54.878134 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.878137 32369 net.cpp:139] Memory required for data: 10770800
I0428 20:12:54.878140 32369 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:12:54.878146 32369 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:12:54.878149 32369 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:12:54.878156 32369 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:12:54.878162 32369 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:12:54.878199 32369 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:12:54.878204 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.878208 32369 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:54.878211 32369 net.cpp:139] Memory required for data: 10778800
I0428 20:12:54.878213 32369 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:54.878219 32369 net.cpp:86] Creating Layer accuracy
I0428 20:12:54.878223 32369 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:12:54.878227 32369 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:54.878232 32369 net.cpp:382] accuracy -> accuracy
I0428 20:12:54.878240 32369 net.cpp:124] Setting up accuracy
I0428 20:12:54.878244 32369 net.cpp:131] Top shape: (1)
I0428 20:12:54.878247 32369 net.cpp:139] Memory required for data: 10778804
I0428 20:12:54.878249 32369 layer_factory.hpp:77] Creating layer loss
I0428 20:12:54.878254 32369 net.cpp:86] Creating Layer loss
I0428 20:12:54.878257 32369 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:12:54.878267 32369 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:54.878270 32369 net.cpp:382] loss -> loss
I0428 20:12:54.878276 32369 layer_factory.hpp:77] Creating layer loss
I0428 20:12:54.878505 32369 net.cpp:124] Setting up loss
I0428 20:12:54.878515 32369 net.cpp:131] Top shape: (1)
I0428 20:12:54.878520 32369 net.cpp:134]     with loss weight 1
I0428 20:12:54.878535 32369 net.cpp:139] Memory required for data: 10778808
I0428 20:12:54.878538 32369 net.cpp:200] loss needs backward computation.
I0428 20:12:54.878542 32369 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:54.878545 32369 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:12:54.878548 32369 net.cpp:200] relu3 needs backward computation.
I0428 20:12:54.878551 32369 net.cpp:200] ip3 needs backward computation.
I0428 20:12:54.878554 32369 net.cpp:200] relu2 needs backward computation.
I0428 20:12:54.878563 32369 net.cpp:200] ip2 needs backward computation.
I0428 20:12:54.878566 32369 net.cpp:200] relu1 needs backward computation.
I0428 20:12:54.878568 32369 net.cpp:200] ip1 needs backward computation.
I0428 20:12:54.878571 32369 net.cpp:200] pool1 needs backward computation.
I0428 20:12:54.878574 32369 net.cpp:200] conv1 needs backward computation.
I0428 20:12:54.878577 32369 net.cpp:200] pool0 needs backward computation.
I0428 20:12:54.878582 32369 net.cpp:200] conv0 needs backward computation.
I0428 20:12:54.878584 32369 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:54.878588 32369 net.cpp:202] mnist does not need backward computation.
I0428 20:12:54.878592 32369 net.cpp:244] This network produces output accuracy
I0428 20:12:54.878594 32369 net.cpp:244] This network produces output loss
I0428 20:12:54.878604 32369 net.cpp:257] Network initialization done.
I0428 20:12:54.878676 32369 solver.cpp:56] Solver scaffolding done.
I0428 20:12:54.879067 32369 caffe.cpp:248] Starting Optimization
I0428 20:12:54.879075 32369 solver.cpp:273] Solving LeNet
I0428 20:12:54.879077 32369 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:54.879968 32369 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:54.887080 32369 blocking_queue.cpp:49] Waiting for data
I0428 20:12:54.957474 32376 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:54.958303 32369 solver.cpp:398]     Test net output #0: accuracy = 0.075
I0428 20:12:54.958338 32369 solver.cpp:398]     Test net output #1: loss = 2.31239 (* 1 = 2.31239 loss)
I0428 20:12:54.963006 32369 solver.cpp:219] Iteration 0 (0 iter/s, 0.0838891s/100 iters), loss = 2.29989
I0428 20:12:54.963044 32369 solver.cpp:238]     Train net output #0: loss = 2.29989 (* 1 = 2.29989 loss)
I0428 20:12:54.963057 32369 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:55.123826 32369 solver.cpp:219] Iteration 100 (621.964 iter/s, 0.160781s/100 iters), loss = 0.985324
I0428 20:12:55.123865 32369 solver.cpp:238]     Train net output #0: loss = 0.985324 (* 1 = 0.985324 loss)
I0428 20:12:55.123872 32369 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:55.280704 32369 solver.cpp:219] Iteration 200 (637.605 iter/s, 0.156837s/100 iters), loss = 1.31911
I0428 20:12:55.280742 32369 solver.cpp:238]     Train net output #0: loss = 1.31911 (* 1 = 1.31911 loss)
I0428 20:12:55.280748 32369 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:55.436964 32369 solver.cpp:219] Iteration 300 (640.113 iter/s, 0.156222s/100 iters), loss = 0.927296
I0428 20:12:55.437011 32369 solver.cpp:238]     Train net output #0: loss = 0.927296 (* 1 = 0.927296 loss)
I0428 20:12:55.437019 32369 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:55.595448 32369 solver.cpp:219] Iteration 400 (631.213 iter/s, 0.158425s/100 iters), loss = 0.898984
I0428 20:12:55.595473 32369 solver.cpp:238]     Train net output #0: loss = 0.898984 (* 1 = 0.898984 loss)
I0428 20:12:55.595479 32369 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:55.754329 32369 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:55.831207 32376 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:55.832497 32369 solver.cpp:398]     Test net output #0: accuracy = 0.6002
I0428 20:12:55.832537 32369 solver.cpp:398]     Test net output #1: loss = 0.97995 (* 1 = 0.97995 loss)
I0428 20:12:55.834081 32369 solver.cpp:219] Iteration 500 (419.126 iter/s, 0.238592s/100 iters), loss = 1.04124
I0428 20:12:55.834133 32369 solver.cpp:238]     Train net output #0: loss = 1.04124 (* 1 = 1.04124 loss)
I0428 20:12:55.834156 32369 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:55.999024 32369 solver.cpp:219] Iteration 600 (606.512 iter/s, 0.164877s/100 iters), loss = 0.817439
I0428 20:12:55.999065 32369 solver.cpp:238]     Train net output #0: loss = 0.817439 (* 1 = 0.817439 loss)
I0428 20:12:55.999071 32369 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:56.155956 32369 solver.cpp:219] Iteration 700 (637.372 iter/s, 0.156894s/100 iters), loss = 0.748303
I0428 20:12:56.155997 32369 solver.cpp:238]     Train net output #0: loss = 0.748303 (* 1 = 0.748303 loss)
I0428 20:12:56.156003 32369 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:56.311199 32369 solver.cpp:219] Iteration 800 (644.307 iter/s, 0.155206s/100 iters), loss = 0.588106
I0428 20:12:56.311239 32369 solver.cpp:238]     Train net output #0: loss = 0.588106 (* 1 = 0.588106 loss)
I0428 20:12:56.311244 32369 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:56.468780 32369 solver.cpp:219] Iteration 900 (634.745 iter/s, 0.157544s/100 iters), loss = 0.518522
I0428 20:12:56.468827 32369 solver.cpp:238]     Train net output #0: loss = 0.518522 (* 1 = 0.518522 loss)
I0428 20:12:56.468833 32369 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:56.520972 32375 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:56.623330 32369 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:56.625753 32369 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:56.626974 32369 solver.cpp:311] Iteration 1000, loss = 0.386104
I0428 20:12:56.626991 32369 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:56.694072 32376 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:56.696435 32369 solver.cpp:398]     Test net output #0: accuracy = 0.8787
I0428 20:12:56.696454 32369 solver.cpp:398]     Test net output #1: loss = 0.330552 (* 1 = 0.330552 loss)
I0428 20:12:56.696457 32369 solver.cpp:316] Optimization Done.
I0428 20:12:56.696475 32369 caffe.cpp:259] Optimization Done.
