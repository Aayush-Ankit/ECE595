I0428 19:41:05.063753 24737 caffe.cpp:218] Using GPUs 0
I0428 19:41:05.105265 24737 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:05.623159 24737 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test354.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:05.623292 24737 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test354.prototxt
I0428 19:41:05.623670 24737 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:05.623688 24737 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:05.623775 24737 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:05.623848 24737 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:05.623944 24737 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:05.623965 24737 net.cpp:86] Creating Layer mnist
I0428 19:41:05.623975 24737 net.cpp:382] mnist -> data
I0428 19:41:05.623996 24737 net.cpp:382] mnist -> label
I0428 19:41:05.625061 24737 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:05.627650 24737 net.cpp:124] Setting up mnist
I0428 19:41:05.627667 24737 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:05.627673 24737 net.cpp:131] Top shape: 64 (64)
I0428 19:41:05.627676 24737 net.cpp:139] Memory required for data: 200960
I0428 19:41:05.627683 24737 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:05.627733 24737 net.cpp:86] Creating Layer conv0
I0428 19:41:05.627740 24737 net.cpp:408] conv0 <- data
I0428 19:41:05.627754 24737 net.cpp:382] conv0 -> conv0
I0428 19:41:05.914297 24737 net.cpp:124] Setting up conv0
I0428 19:41:05.914328 24737 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:05.914332 24737 net.cpp:139] Memory required for data: 495872
I0428 19:41:05.914369 24737 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:05.914383 24737 net.cpp:86] Creating Layer pool0
I0428 19:41:05.914387 24737 net.cpp:408] pool0 <- conv0
I0428 19:41:05.914393 24737 net.cpp:382] pool0 -> pool0
I0428 19:41:05.914450 24737 net.cpp:124] Setting up pool0
I0428 19:41:05.914469 24737 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:05.914471 24737 net.cpp:139] Memory required for data: 569600
I0428 19:41:05.914475 24737 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:05.914487 24737 net.cpp:86] Creating Layer conv1
I0428 19:41:05.914490 24737 net.cpp:408] conv1 <- pool0
I0428 19:41:05.914496 24737 net.cpp:382] conv1 -> conv1
I0428 19:41:05.916538 24737 net.cpp:124] Setting up conv1
I0428 19:41:05.916554 24737 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:05.916558 24737 net.cpp:139] Memory required for data: 733440
I0428 19:41:05.916568 24737 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:05.916576 24737 net.cpp:86] Creating Layer pool1
I0428 19:41:05.916580 24737 net.cpp:408] pool1 <- conv1
I0428 19:41:05.916586 24737 net.cpp:382] pool1 -> pool1
I0428 19:41:05.916630 24737 net.cpp:124] Setting up pool1
I0428 19:41:05.916635 24737 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:05.916638 24737 net.cpp:139] Memory required for data: 774400
I0428 19:41:05.916642 24737 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:05.916656 24737 net.cpp:86] Creating Layer ip1
I0428 19:41:05.916658 24737 net.cpp:408] ip1 <- pool1
I0428 19:41:05.916663 24737 net.cpp:382] ip1 -> ip1
I0428 19:41:05.917696 24737 net.cpp:124] Setting up ip1
I0428 19:41:05.917711 24737 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:05.917716 24737 net.cpp:139] Memory required for data: 776960
I0428 19:41:05.917726 24737 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:05.917732 24737 net.cpp:86] Creating Layer relu1
I0428 19:41:05.917735 24737 net.cpp:408] relu1 <- ip1
I0428 19:41:05.917740 24737 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:05.917934 24737 net.cpp:124] Setting up relu1
I0428 19:41:05.917944 24737 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:05.917948 24737 net.cpp:139] Memory required for data: 779520
I0428 19:41:05.917953 24737 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:05.917959 24737 net.cpp:86] Creating Layer ip2
I0428 19:41:05.917963 24737 net.cpp:408] ip2 <- ip1
I0428 19:41:05.917969 24737 net.cpp:382] ip2 -> ip2
I0428 19:41:05.918076 24737 net.cpp:124] Setting up ip2
I0428 19:41:05.918083 24737 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:05.918087 24737 net.cpp:139] Memory required for data: 782080
I0428 19:41:05.918093 24737 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:05.918100 24737 net.cpp:86] Creating Layer relu2
I0428 19:41:05.918104 24737 net.cpp:408] relu2 <- ip2
I0428 19:41:05.918108 24737 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:05.918917 24737 net.cpp:124] Setting up relu2
I0428 19:41:05.918931 24737 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:05.918936 24737 net.cpp:139] Memory required for data: 784640
I0428 19:41:05.918939 24737 layer_factory.hpp:77] Creating layer loss
I0428 19:41:05.918946 24737 net.cpp:86] Creating Layer loss
I0428 19:41:05.918949 24737 net.cpp:408] loss <- ip2
I0428 19:41:05.918954 24737 net.cpp:408] loss <- label
I0428 19:41:05.918962 24737 net.cpp:382] loss -> loss
I0428 19:41:05.918982 24737 layer_factory.hpp:77] Creating layer loss
I0428 19:41:05.919242 24737 net.cpp:124] Setting up loss
I0428 19:41:05.919255 24737 net.cpp:131] Top shape: (1)
I0428 19:41:05.919258 24737 net.cpp:134]     with loss weight 1
I0428 19:41:05.919275 24737 net.cpp:139] Memory required for data: 784644
I0428 19:41:05.919279 24737 net.cpp:200] loss needs backward computation.
I0428 19:41:05.919283 24737 net.cpp:200] relu2 needs backward computation.
I0428 19:41:05.919287 24737 net.cpp:200] ip2 needs backward computation.
I0428 19:41:05.919291 24737 net.cpp:200] relu1 needs backward computation.
I0428 19:41:05.919293 24737 net.cpp:200] ip1 needs backward computation.
I0428 19:41:05.919297 24737 net.cpp:200] pool1 needs backward computation.
I0428 19:41:05.919312 24737 net.cpp:200] conv1 needs backward computation.
I0428 19:41:05.919317 24737 net.cpp:200] pool0 needs backward computation.
I0428 19:41:05.919320 24737 net.cpp:200] conv0 needs backward computation.
I0428 19:41:05.919324 24737 net.cpp:202] mnist does not need backward computation.
I0428 19:41:05.919327 24737 net.cpp:244] This network produces output loss
I0428 19:41:05.919337 24737 net.cpp:257] Network initialization done.
I0428 19:41:05.919665 24737 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test354.prototxt
I0428 19:41:05.919693 24737 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:05.919787 24737 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:05.919858 24737 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:05.919909 24737 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:05.919922 24737 net.cpp:86] Creating Layer mnist
I0428 19:41:05.919927 24737 net.cpp:382] mnist -> data
I0428 19:41:05.919935 24737 net.cpp:382] mnist -> label
I0428 19:41:05.920032 24737 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:05.922108 24737 net.cpp:124] Setting up mnist
I0428 19:41:05.922124 24737 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:05.922129 24737 net.cpp:131] Top shape: 100 (100)
I0428 19:41:05.922133 24737 net.cpp:139] Memory required for data: 314000
I0428 19:41:05.922137 24737 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:05.922148 24737 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:05.922153 24737 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:05.922158 24737 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:05.922166 24737 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:05.922219 24737 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:05.922238 24737 net.cpp:131] Top shape: 100 (100)
I0428 19:41:05.922242 24737 net.cpp:131] Top shape: 100 (100)
I0428 19:41:05.922245 24737 net.cpp:139] Memory required for data: 314800
I0428 19:41:05.922250 24737 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:05.922258 24737 net.cpp:86] Creating Layer conv0
I0428 19:41:05.922262 24737 net.cpp:408] conv0 <- data
I0428 19:41:05.922268 24737 net.cpp:382] conv0 -> conv0
I0428 19:41:05.924123 24737 net.cpp:124] Setting up conv0
I0428 19:41:05.924139 24737 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:05.924142 24737 net.cpp:139] Memory required for data: 775600
I0428 19:41:05.924154 24737 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:05.924160 24737 net.cpp:86] Creating Layer pool0
I0428 19:41:05.924165 24737 net.cpp:408] pool0 <- conv0
I0428 19:41:05.924170 24737 net.cpp:382] pool0 -> pool0
I0428 19:41:05.924209 24737 net.cpp:124] Setting up pool0
I0428 19:41:05.924216 24737 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:05.924219 24737 net.cpp:139] Memory required for data: 890800
I0428 19:41:05.924222 24737 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:05.924232 24737 net.cpp:86] Creating Layer conv1
I0428 19:41:05.924235 24737 net.cpp:408] conv1 <- pool0
I0428 19:41:05.924242 24737 net.cpp:382] conv1 -> conv1
I0428 19:41:05.925853 24737 net.cpp:124] Setting up conv1
I0428 19:41:05.925868 24737 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:05.925873 24737 net.cpp:139] Memory required for data: 1146800
I0428 19:41:05.925882 24737 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:05.925896 24737 net.cpp:86] Creating Layer pool1
I0428 19:41:05.925900 24737 net.cpp:408] pool1 <- conv1
I0428 19:41:05.925906 24737 net.cpp:382] pool1 -> pool1
I0428 19:41:05.925953 24737 net.cpp:124] Setting up pool1
I0428 19:41:05.925959 24737 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:05.925962 24737 net.cpp:139] Memory required for data: 1210800
I0428 19:41:05.925966 24737 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:05.925978 24737 net.cpp:86] Creating Layer ip1
I0428 19:41:05.925982 24737 net.cpp:408] ip1 <- pool1
I0428 19:41:05.925987 24737 net.cpp:382] ip1 -> ip1
I0428 19:41:05.926105 24737 net.cpp:124] Setting up ip1
I0428 19:41:05.926115 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926131 24737 net.cpp:139] Memory required for data: 1214800
I0428 19:41:05.926141 24737 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:05.926152 24737 net.cpp:86] Creating Layer relu1
I0428 19:41:05.926156 24737 net.cpp:408] relu1 <- ip1
I0428 19:41:05.926162 24737 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:05.926340 24737 net.cpp:124] Setting up relu1
I0428 19:41:05.926350 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926354 24737 net.cpp:139] Memory required for data: 1218800
I0428 19:41:05.926364 24737 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:05.926373 24737 net.cpp:86] Creating Layer ip2
I0428 19:41:05.926376 24737 net.cpp:408] ip2 <- ip1
I0428 19:41:05.926381 24737 net.cpp:382] ip2 -> ip2
I0428 19:41:05.926489 24737 net.cpp:124] Setting up ip2
I0428 19:41:05.926497 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926502 24737 net.cpp:139] Memory required for data: 1222800
I0428 19:41:05.926508 24737 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:05.926513 24737 net.cpp:86] Creating Layer relu2
I0428 19:41:05.926517 24737 net.cpp:408] relu2 <- ip2
I0428 19:41:05.926522 24737 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:05.926690 24737 net.cpp:124] Setting up relu2
I0428 19:41:05.926698 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926702 24737 net.cpp:139] Memory required for data: 1226800
I0428 19:41:05.926705 24737 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:41:05.926710 24737 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:41:05.926714 24737 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:41:05.926719 24737 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:41:05.926761 24737 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:41:05.926801 24737 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:41:05.926807 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926811 24737 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:05.926820 24737 net.cpp:139] Memory required for data: 1234800
I0428 19:41:05.926825 24737 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:05.926829 24737 net.cpp:86] Creating Layer accuracy
I0428 19:41:05.926839 24737 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:41:05.926844 24737 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:05.926849 24737 net.cpp:382] accuracy -> accuracy
I0428 19:41:05.926862 24737 net.cpp:124] Setting up accuracy
I0428 19:41:05.926867 24737 net.cpp:131] Top shape: (1)
I0428 19:41:05.926872 24737 net.cpp:139] Memory required for data: 1234804
I0428 19:41:05.926880 24737 layer_factory.hpp:77] Creating layer loss
I0428 19:41:05.926885 24737 net.cpp:86] Creating Layer loss
I0428 19:41:05.926888 24737 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:41:05.926892 24737 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:05.926898 24737 net.cpp:382] loss -> loss
I0428 19:41:05.926903 24737 layer_factory.hpp:77] Creating layer loss
I0428 19:41:05.927192 24737 net.cpp:124] Setting up loss
I0428 19:41:05.927206 24737 net.cpp:131] Top shape: (1)
I0428 19:41:05.927209 24737 net.cpp:134]     with loss weight 1
I0428 19:41:05.927217 24737 net.cpp:139] Memory required for data: 1234808
I0428 19:41:05.927219 24737 net.cpp:200] loss needs backward computation.
I0428 19:41:05.927224 24737 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:05.927228 24737 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:41:05.927232 24737 net.cpp:200] relu2 needs backward computation.
I0428 19:41:05.927235 24737 net.cpp:200] ip2 needs backward computation.
I0428 19:41:05.927239 24737 net.cpp:200] relu1 needs backward computation.
I0428 19:41:05.927242 24737 net.cpp:200] ip1 needs backward computation.
I0428 19:41:05.927247 24737 net.cpp:200] pool1 needs backward computation.
I0428 19:41:05.927250 24737 net.cpp:200] conv1 needs backward computation.
I0428 19:41:05.927253 24737 net.cpp:200] pool0 needs backward computation.
I0428 19:41:05.927258 24737 net.cpp:200] conv0 needs backward computation.
I0428 19:41:05.927261 24737 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:05.927265 24737 net.cpp:202] mnist does not need backward computation.
I0428 19:41:05.927269 24737 net.cpp:244] This network produces output accuracy
I0428 19:41:05.927273 24737 net.cpp:244] This network produces output loss
I0428 19:41:05.927284 24737 net.cpp:257] Network initialization done.
I0428 19:41:05.927325 24737 solver.cpp:56] Solver scaffolding done.
I0428 19:41:05.927625 24737 caffe.cpp:248] Starting Optimization
I0428 19:41:05.927634 24737 solver.cpp:273] Solving LeNet
I0428 19:41:05.927636 24737 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:05.928490 24737 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:05.930327 24737 blocking_queue.cpp:49] Waiting for data
I0428 19:41:06.004421 24744 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:06.004886 24737 solver.cpp:398]     Test net output #0: accuracy = 0.1178
I0428 19:41:06.004905 24737 solver.cpp:398]     Test net output #1: loss = 2.30802 (* 1 = 2.30802 loss)
I0428 19:41:06.006588 24737 solver.cpp:219] Iteration 0 (-8.43055e-31 iter/s, 0.0789266s/100 iters), loss = 2.29327
I0428 19:41:06.006655 24737 solver.cpp:238]     Train net output #0: loss = 2.29327 (* 1 = 2.29327 loss)
I0428 19:41:06.006671 24737 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:06.082476 24737 solver.cpp:219] Iteration 100 (1318.74 iter/s, 0.0758301s/100 iters), loss = 1.04636
I0428 19:41:06.082501 24737 solver.cpp:238]     Train net output #0: loss = 1.04636 (* 1 = 1.04636 loss)
I0428 19:41:06.082507 24737 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:06.149966 24737 solver.cpp:219] Iteration 200 (1482.45 iter/s, 0.0674561s/100 iters), loss = 0.896732
I0428 19:41:06.150018 24737 solver.cpp:238]     Train net output #0: loss = 0.896732 (* 1 = 0.896732 loss)
I0428 19:41:06.150025 24737 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:06.215992 24737 solver.cpp:219] Iteration 300 (1515.56 iter/s, 0.0659824s/100 iters), loss = 0.536933
I0428 19:41:06.216032 24737 solver.cpp:238]     Train net output #0: loss = 0.536933 (* 1 = 0.536933 loss)
I0428 19:41:06.216038 24737 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:06.282177 24737 solver.cpp:219] Iteration 400 (1512.03 iter/s, 0.0661361s/100 iters), loss = 0.851683
I0428 19:41:06.282220 24737 solver.cpp:238]     Train net output #0: loss = 0.851683 (* 1 = 0.851683 loss)
I0428 19:41:06.282227 24737 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:06.347463 24737 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:06.422909 24744 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:06.423318 24737 solver.cpp:398]     Test net output #0: accuracy = 0.8149
I0428 19:41:06.423339 24737 solver.cpp:398]     Test net output #1: loss = 0.675291 (* 1 = 0.675291 loss)
I0428 19:41:06.424082 24737 solver.cpp:219] Iteration 500 (704.977 iter/s, 0.141849s/100 iters), loss = 0.916724
I0428 19:41:06.424106 24737 solver.cpp:238]     Train net output #0: loss = 0.916724 (* 1 = 0.916724 loss)
I0428 19:41:06.424113 24737 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:06.501348 24737 solver.cpp:219] Iteration 600 (1294.8 iter/s, 0.0772321s/100 iters), loss = 0.490521
I0428 19:41:06.501371 24737 solver.cpp:238]     Train net output #0: loss = 0.490521 (* 1 = 0.490521 loss)
I0428 19:41:06.501379 24737 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:06.568488 24737 solver.cpp:219] Iteration 700 (1490.14 iter/s, 0.0671078s/100 iters), loss = 1.08649
I0428 19:41:06.568511 24737 solver.cpp:238]     Train net output #0: loss = 1.08649 (* 1 = 1.08649 loss)
I0428 19:41:06.568517 24737 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:06.635493 24737 solver.cpp:219] Iteration 800 (1493.12 iter/s, 0.0669737s/100 iters), loss = 0.679504
I0428 19:41:06.635517 24737 solver.cpp:238]     Train net output #0: loss = 0.679504 (* 1 = 0.679504 loss)
I0428 19:41:06.635524 24737 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:06.702872 24737 solver.cpp:219] Iteration 900 (1484.86 iter/s, 0.0673464s/100 iters), loss = 0.65174
I0428 19:41:06.702895 24737 solver.cpp:238]     Train net output #0: loss = 0.65174 (* 1 = 0.65174 loss)
I0428 19:41:06.702901 24737 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:06.724882 24743 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:06.768996 24737 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:06.769692 24737 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:06.770161 24737 solver.cpp:311] Iteration 1000, loss = 0.749578
I0428 19:41:06.770176 24737 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:06.842578 24744 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:06.843051 24737 solver.cpp:398]     Test net output #0: accuracy = 0.8561
I0428 19:41:06.843081 24737 solver.cpp:398]     Test net output #1: loss = 0.593574 (* 1 = 0.593574 loss)
I0428 19:41:06.843088 24737 solver.cpp:316] Optimization Done.
I0428 19:41:06.843092 24737 caffe.cpp:259] Optimization Done.
