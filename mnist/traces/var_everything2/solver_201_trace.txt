I0428 19:34:18.808851 23309 caffe.cpp:218] Using GPUs 0
I0428 19:34:18.848975 23309 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:19.364681 23309 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test201.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:19.364861 23309 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test201.prototxt
I0428 19:34:19.365206 23309 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:19.365227 23309 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:19.365314 23309 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:19.365413 23309 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:19.365543 23309 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:19.365576 23309 net.cpp:86] Creating Layer mnist
I0428 19:34:19.365591 23309 net.cpp:382] mnist -> data
I0428 19:34:19.365622 23309 net.cpp:382] mnist -> label
I0428 19:34:19.366822 23309 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:19.369513 23309 net.cpp:124] Setting up mnist
I0428 19:34:19.369535 23309 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:19.369545 23309 net.cpp:131] Top shape: 64 (64)
I0428 19:34:19.369552 23309 net.cpp:139] Memory required for data: 200960
I0428 19:34:19.369563 23309 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:19.369588 23309 net.cpp:86] Creating Layer conv0
I0428 19:34:19.369599 23309 net.cpp:408] conv0 <- data
I0428 19:34:19.369619 23309 net.cpp:382] conv0 -> conv0
I0428 19:34:19.657812 23309 net.cpp:124] Setting up conv0
I0428 19:34:19.657842 23309 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:19.657850 23309 net.cpp:139] Memory required for data: 7573760
I0428 19:34:19.657872 23309 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:19.657892 23309 net.cpp:86] Creating Layer pool0
I0428 19:34:19.657907 23309 net.cpp:408] pool0 <- conv0
I0428 19:34:19.657917 23309 net.cpp:382] pool0 -> pool0
I0428 19:34:19.657979 23309 net.cpp:124] Setting up pool0
I0428 19:34:19.657989 23309 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:19.657995 23309 net.cpp:139] Memory required for data: 9416960
I0428 19:34:19.658022 23309 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:19.658036 23309 net.cpp:86] Creating Layer ip1
I0428 19:34:19.658043 23309 net.cpp:408] ip1 <- pool0
I0428 19:34:19.658052 23309 net.cpp:382] ip1 -> ip1
I0428 19:34:19.660168 23309 net.cpp:124] Setting up ip1
I0428 19:34:19.660193 23309 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:34:19.660199 23309 net.cpp:139] Memory required for data: 9423360
I0428 19:34:19.660213 23309 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:19.660226 23309 net.cpp:86] Creating Layer relu1
I0428 19:34:19.660233 23309 net.cpp:408] relu1 <- ip1
I0428 19:34:19.660241 23309 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:19.660436 23309 net.cpp:124] Setting up relu1
I0428 19:34:19.660447 23309 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:34:19.660454 23309 net.cpp:139] Memory required for data: 9429760
I0428 19:34:19.660459 23309 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:19.660471 23309 net.cpp:86] Creating Layer ip2
I0428 19:34:19.660477 23309 net.cpp:408] ip2 <- ip1
I0428 19:34:19.660487 23309 net.cpp:382] ip2 -> ip2
I0428 19:34:19.660595 23309 net.cpp:124] Setting up ip2
I0428 19:34:19.660605 23309 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:19.660611 23309 net.cpp:139] Memory required for data: 9432320
I0428 19:34:19.660624 23309 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:19.660637 23309 net.cpp:86] Creating Layer relu2
I0428 19:34:19.660643 23309 net.cpp:408] relu2 <- ip2
I0428 19:34:19.660651 23309 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:19.661458 23309 net.cpp:124] Setting up relu2
I0428 19:34:19.661473 23309 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:19.661479 23309 net.cpp:139] Memory required for data: 9434880
I0428 19:34:19.661485 23309 layer_factory.hpp:77] Creating layer loss
I0428 19:34:19.661496 23309 net.cpp:86] Creating Layer loss
I0428 19:34:19.661502 23309 net.cpp:408] loss <- ip2
I0428 19:34:19.661510 23309 net.cpp:408] loss <- label
I0428 19:34:19.661520 23309 net.cpp:382] loss -> loss
I0428 19:34:19.661541 23309 layer_factory.hpp:77] Creating layer loss
I0428 19:34:19.661788 23309 net.cpp:124] Setting up loss
I0428 19:34:19.661800 23309 net.cpp:131] Top shape: (1)
I0428 19:34:19.661806 23309 net.cpp:134]     with loss weight 1
I0428 19:34:19.661826 23309 net.cpp:139] Memory required for data: 9434884
I0428 19:34:19.661834 23309 net.cpp:200] loss needs backward computation.
I0428 19:34:19.661840 23309 net.cpp:200] relu2 needs backward computation.
I0428 19:34:19.661845 23309 net.cpp:200] ip2 needs backward computation.
I0428 19:34:19.661851 23309 net.cpp:200] relu1 needs backward computation.
I0428 19:34:19.661856 23309 net.cpp:200] ip1 needs backward computation.
I0428 19:34:19.661862 23309 net.cpp:200] pool0 needs backward computation.
I0428 19:34:19.661867 23309 net.cpp:200] conv0 needs backward computation.
I0428 19:34:19.661875 23309 net.cpp:202] mnist does not need backward computation.
I0428 19:34:19.661880 23309 net.cpp:244] This network produces output loss
I0428 19:34:19.661892 23309 net.cpp:257] Network initialization done.
I0428 19:34:19.662158 23309 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test201.prototxt
I0428 19:34:19.662190 23309 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:19.662273 23309 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:19.662396 23309 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:19.662459 23309 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:19.662477 23309 net.cpp:86] Creating Layer mnist
I0428 19:34:19.662485 23309 net.cpp:382] mnist -> data
I0428 19:34:19.662498 23309 net.cpp:382] mnist -> label
I0428 19:34:19.662621 23309 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:19.663790 23309 net.cpp:124] Setting up mnist
I0428 19:34:19.663806 23309 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:19.663815 23309 net.cpp:131] Top shape: 100 (100)
I0428 19:34:19.663821 23309 net.cpp:139] Memory required for data: 314000
I0428 19:34:19.663827 23309 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:19.663838 23309 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:19.663844 23309 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:19.663853 23309 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:19.663864 23309 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:19.663990 23309 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:19.664000 23309 net.cpp:131] Top shape: 100 (100)
I0428 19:34:19.664005 23309 net.cpp:131] Top shape: 100 (100)
I0428 19:34:19.664011 23309 net.cpp:139] Memory required for data: 314800
I0428 19:34:19.664017 23309 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:19.664031 23309 net.cpp:86] Creating Layer conv0
I0428 19:34:19.664038 23309 net.cpp:408] conv0 <- data
I0428 19:34:19.664047 23309 net.cpp:382] conv0 -> conv0
I0428 19:34:19.665534 23309 net.cpp:124] Setting up conv0
I0428 19:34:19.665552 23309 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:19.665560 23309 net.cpp:139] Memory required for data: 11834800
I0428 19:34:19.665575 23309 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:19.665585 23309 net.cpp:86] Creating Layer pool0
I0428 19:34:19.665591 23309 net.cpp:408] pool0 <- conv0
I0428 19:34:19.665601 23309 net.cpp:382] pool0 -> pool0
I0428 19:34:19.665684 23309 net.cpp:124] Setting up pool0
I0428 19:34:19.665693 23309 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:19.665699 23309 net.cpp:139] Memory required for data: 14714800
I0428 19:34:19.665705 23309 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:19.665716 23309 net.cpp:86] Creating Layer ip1
I0428 19:34:19.665724 23309 net.cpp:408] ip1 <- pool0
I0428 19:34:19.665732 23309 net.cpp:382] ip1 -> ip1
I0428 19:34:19.667770 23309 net.cpp:124] Setting up ip1
I0428 19:34:19.667785 23309 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:34:19.667791 23309 net.cpp:139] Memory required for data: 14724800
I0428 19:34:19.667805 23309 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:19.667814 23309 net.cpp:86] Creating Layer relu1
I0428 19:34:19.667821 23309 net.cpp:408] relu1 <- ip1
I0428 19:34:19.667830 23309 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:19.668007 23309 net.cpp:124] Setting up relu1
I0428 19:34:19.668018 23309 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:34:19.668042 23309 net.cpp:139] Memory required for data: 14734800
I0428 19:34:19.668051 23309 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:19.668061 23309 net.cpp:86] Creating Layer ip2
I0428 19:34:19.668069 23309 net.cpp:408] ip2 <- ip1
I0428 19:34:19.668079 23309 net.cpp:382] ip2 -> ip2
I0428 19:34:19.668186 23309 net.cpp:124] Setting up ip2
I0428 19:34:19.668195 23309 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:19.668200 23309 net.cpp:139] Memory required for data: 14738800
I0428 19:34:19.668215 23309 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:19.668225 23309 net.cpp:86] Creating Layer relu2
I0428 19:34:19.668231 23309 net.cpp:408] relu2 <- ip2
I0428 19:34:19.668239 23309 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:19.668412 23309 net.cpp:124] Setting up relu2
I0428 19:34:19.668422 23309 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:19.668427 23309 net.cpp:139] Memory required for data: 14742800
I0428 19:34:19.668433 23309 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:19.668443 23309 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:19.668449 23309 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:19.668457 23309 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:19.668469 23309 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:19.668555 23309 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:19.668565 23309 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:19.668572 23309 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:19.668577 23309 net.cpp:139] Memory required for data: 14750800
I0428 19:34:19.668584 23309 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:19.668592 23309 net.cpp:86] Creating Layer accuracy
I0428 19:34:19.668599 23309 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:19.668606 23309 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:19.668614 23309 net.cpp:382] accuracy -> accuracy
I0428 19:34:19.668627 23309 net.cpp:124] Setting up accuracy
I0428 19:34:19.668635 23309 net.cpp:131] Top shape: (1)
I0428 19:34:19.668642 23309 net.cpp:139] Memory required for data: 14750804
I0428 19:34:19.668648 23309 layer_factory.hpp:77] Creating layer loss
I0428 19:34:19.668656 23309 net.cpp:86] Creating Layer loss
I0428 19:34:19.668663 23309 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:19.668668 23309 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:19.668676 23309 net.cpp:382] loss -> loss
I0428 19:34:19.668687 23309 layer_factory.hpp:77] Creating layer loss
I0428 19:34:19.669685 23309 net.cpp:124] Setting up loss
I0428 19:34:19.669700 23309 net.cpp:131] Top shape: (1)
I0428 19:34:19.669706 23309 net.cpp:134]     with loss weight 1
I0428 19:34:19.669718 23309 net.cpp:139] Memory required for data: 14750808
I0428 19:34:19.669723 23309 net.cpp:200] loss needs backward computation.
I0428 19:34:19.669734 23309 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:19.669744 23309 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:19.669749 23309 net.cpp:200] relu2 needs backward computation.
I0428 19:34:19.669754 23309 net.cpp:200] ip2 needs backward computation.
I0428 19:34:19.669759 23309 net.cpp:200] relu1 needs backward computation.
I0428 19:34:19.669765 23309 net.cpp:200] ip1 needs backward computation.
I0428 19:34:19.669770 23309 net.cpp:200] pool0 needs backward computation.
I0428 19:34:19.669776 23309 net.cpp:200] conv0 needs backward computation.
I0428 19:34:19.669785 23309 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:19.669795 23309 net.cpp:202] mnist does not need backward computation.
I0428 19:34:19.669801 23309 net.cpp:244] This network produces output accuracy
I0428 19:34:19.669807 23309 net.cpp:244] This network produces output loss
I0428 19:34:19.669826 23309 net.cpp:257] Network initialization done.
I0428 19:34:19.669868 23309 solver.cpp:56] Solver scaffolding done.
I0428 19:34:19.670089 23309 caffe.cpp:248] Starting Optimization
I0428 19:34:19.670096 23309 solver.cpp:273] Solving LeNet
I0428 19:34:19.670115 23309 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:19.670837 23309 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:19.767017 23316 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:19.770424 23309 solver.cpp:398]     Test net output #0: accuracy = 0.1344
I0428 19:34:19.770445 23309 solver.cpp:398]     Test net output #1: loss = 2.31299 (* 1 = 2.31299 loss)
I0428 19:34:19.774740 23309 solver.cpp:219] Iteration 0 (0 iter/s, 0.104593s/100 iters), loss = 2.29965
I0428 19:34:19.774785 23309 solver.cpp:238]     Train net output #0: loss = 2.29965 (* 1 = 2.29965 loss)
I0428 19:34:19.774808 23309 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:19.912156 23309 solver.cpp:219] Iteration 100 (727.952 iter/s, 0.137372s/100 iters), loss = 0.514369
I0428 19:34:19.912202 23309 solver.cpp:238]     Train net output #0: loss = 0.514369 (* 1 = 0.514369 loss)
I0428 19:34:19.912217 23309 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:20.057379 23309 solver.cpp:219] Iteration 200 (688.856 iter/s, 0.145168s/100 iters), loss = 0.406721
I0428 19:34:20.057415 23309 solver.cpp:238]     Train net output #0: loss = 0.406721 (* 1 = 0.406721 loss)
I0428 19:34:20.057425 23309 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:20.196432 23309 solver.cpp:219] Iteration 300 (719.399 iter/s, 0.139005s/100 iters), loss = 0.347818
I0428 19:34:20.196465 23309 solver.cpp:238]     Train net output #0: loss = 0.347818 (* 1 = 0.347818 loss)
I0428 19:34:20.196471 23309 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:20.337990 23309 solver.cpp:219] Iteration 400 (706.655 iter/s, 0.141512s/100 iters), loss = 0.338601
I0428 19:34:20.338023 23309 solver.cpp:238]     Train net output #0: loss = 0.338601 (* 1 = 0.338601 loss)
I0428 19:34:20.338032 23309 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:20.480551 23309 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:20.579239 23316 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:20.582787 23309 solver.cpp:398]     Test net output #0: accuracy = 0.861
I0428 19:34:20.582810 23309 solver.cpp:398]     Test net output #1: loss = 0.384375 (* 1 = 0.384375 loss)
I0428 19:34:20.584110 23309 solver.cpp:219] Iteration 500 (406.39 iter/s, 0.246069s/100 iters), loss = 0.453849
I0428 19:34:20.584136 23309 solver.cpp:238]     Train net output #0: loss = 0.453849 (* 1 = 0.453849 loss)
I0428 19:34:20.584142 23309 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:20.725925 23309 solver.cpp:219] Iteration 600 (705.339 iter/s, 0.141776s/100 iters), loss = 0.405401
I0428 19:34:20.725957 23309 solver.cpp:238]     Train net output #0: loss = 0.405401 (* 1 = 0.405401 loss)
I0428 19:34:20.725965 23309 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:20.864276 23309 solver.cpp:219] Iteration 700 (723.026 iter/s, 0.138308s/100 iters), loss = 0.445005
I0428 19:34:20.864305 23309 solver.cpp:238]     Train net output #0: loss = 0.445005 (* 1 = 0.445005 loss)
I0428 19:34:20.864312 23309 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:21.001955 23309 solver.cpp:219] Iteration 800 (726.549 iter/s, 0.137637s/100 iters), loss = 0.417083
I0428 19:34:21.001982 23309 solver.cpp:238]     Train net output #0: loss = 0.417083 (* 1 = 0.417083 loss)
I0428 19:34:21.001989 23309 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:21.139338 23309 solver.cpp:219] Iteration 900 (728.104 iter/s, 0.137343s/100 iters), loss = 0.236815
I0428 19:34:21.139367 23309 solver.cpp:238]     Train net output #0: loss = 0.236815 (* 1 = 0.236815 loss)
I0428 19:34:21.139374 23309 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:21.185894 23315 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:21.277009 23309 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:21.281622 23309 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:21.283978 23309 solver.cpp:311] Iteration 1000, loss = 0.284477
I0428 19:34:21.284001 23309 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:21.381472 23316 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:21.384954 23309 solver.cpp:398]     Test net output #0: accuracy = 0.8763
I0428 19:34:21.384979 23309 solver.cpp:398]     Test net output #1: loss = 0.324271 (* 1 = 0.324271 loss)
I0428 19:34:21.384985 23309 solver.cpp:316] Optimization Done.
I0428 19:34:21.384989 23309 caffe.cpp:259] Optimization Done.
