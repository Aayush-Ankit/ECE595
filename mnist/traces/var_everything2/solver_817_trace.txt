I0428 19:58:23.093669 28961 caffe.cpp:218] Using GPUs 0
I0428 19:58:23.131681 28961 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:23.640760 28961 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test817.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:23.640903 28961 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test817.prototxt
I0428 19:58:23.641320 28961 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:23.641338 28961 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:23.641443 28961 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:23.641522 28961 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:23.641638 28961 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:23.641662 28961 net.cpp:86] Creating Layer mnist
I0428 19:58:23.641670 28961 net.cpp:382] mnist -> data
I0428 19:58:23.641693 28961 net.cpp:382] mnist -> label
I0428 19:58:23.642788 28961 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:23.645239 28961 net.cpp:124] Setting up mnist
I0428 19:58:23.645259 28961 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:23.645265 28961 net.cpp:131] Top shape: 64 (64)
I0428 19:58:23.645269 28961 net.cpp:139] Memory required for data: 200960
I0428 19:58:23.645277 28961 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:23.645292 28961 net.cpp:86] Creating Layer conv0
I0428 19:58:23.645313 28961 net.cpp:408] conv0 <- data
I0428 19:58:23.645326 28961 net.cpp:382] conv0 -> conv0
I0428 19:58:23.890367 28961 net.cpp:124] Setting up conv0
I0428 19:58:23.890408 28961 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:23.890413 28961 net.cpp:139] Memory required for data: 1675520
I0428 19:58:23.890426 28961 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:23.890439 28961 net.cpp:86] Creating Layer pool0
I0428 19:58:23.890444 28961 net.cpp:408] pool0 <- conv0
I0428 19:58:23.890449 28961 net.cpp:382] pool0 -> pool0
I0428 19:58:23.890509 28961 net.cpp:124] Setting up pool0
I0428 19:58:23.890514 28961 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:23.890517 28961 net.cpp:139] Memory required for data: 2044160
I0428 19:58:23.890521 28961 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:23.890532 28961 net.cpp:86] Creating Layer conv1
I0428 19:58:23.890534 28961 net.cpp:408] conv1 <- pool0
I0428 19:58:23.890539 28961 net.cpp:382] conv1 -> conv1
I0428 19:58:23.893486 28961 net.cpp:124] Setting up conv1
I0428 19:58:23.893514 28961 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:23.893518 28961 net.cpp:139] Memory required for data: 2126080
I0428 19:58:23.893525 28961 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:23.893533 28961 net.cpp:86] Creating Layer pool1
I0428 19:58:23.893537 28961 net.cpp:408] pool1 <- conv1
I0428 19:58:23.893542 28961 net.cpp:382] pool1 -> pool1
I0428 19:58:23.893591 28961 net.cpp:124] Setting up pool1
I0428 19:58:23.893599 28961 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:23.893601 28961 net.cpp:139] Memory required for data: 2146560
I0428 19:58:23.893604 28961 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:23.893612 28961 net.cpp:86] Creating Layer ip1
I0428 19:58:23.893615 28961 net.cpp:408] ip1 <- pool1
I0428 19:58:23.893620 28961 net.cpp:382] ip1 -> ip1
I0428 19:58:23.893734 28961 net.cpp:124] Setting up ip1
I0428 19:58:23.893740 28961 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:23.893743 28961 net.cpp:139] Memory required for data: 2159360
I0428 19:58:23.893750 28961 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:23.893755 28961 net.cpp:86] Creating Layer relu1
I0428 19:58:23.893759 28961 net.cpp:408] relu1 <- ip1
I0428 19:58:23.893764 28961 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:23.893928 28961 net.cpp:124] Setting up relu1
I0428 19:58:23.893935 28961 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:23.893939 28961 net.cpp:139] Memory required for data: 2172160
I0428 19:58:23.893941 28961 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:23.893947 28961 net.cpp:86] Creating Layer ip2
I0428 19:58:23.893950 28961 net.cpp:408] ip2 <- ip1
I0428 19:58:23.893954 28961 net.cpp:382] ip2 -> ip2
I0428 19:58:23.894068 28961 net.cpp:124] Setting up ip2
I0428 19:58:23.894073 28961 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:23.894076 28961 net.cpp:139] Memory required for data: 2184960
I0428 19:58:23.894081 28961 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:23.894088 28961 net.cpp:86] Creating Layer relu2
I0428 19:58:23.894090 28961 net.cpp:408] relu2 <- ip2
I0428 19:58:23.894094 28961 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:23.894876 28961 net.cpp:124] Setting up relu2
I0428 19:58:23.894888 28961 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:23.894892 28961 net.cpp:139] Memory required for data: 2197760
I0428 19:58:23.894896 28961 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:23.894903 28961 net.cpp:86] Creating Layer ip3
I0428 19:58:23.894906 28961 net.cpp:408] ip3 <- ip2
I0428 19:58:23.894912 28961 net.cpp:382] ip3 -> ip3
I0428 19:58:23.895035 28961 net.cpp:124] Setting up ip3
I0428 19:58:23.895042 28961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:23.895045 28961 net.cpp:139] Memory required for data: 2200320
I0428 19:58:23.895052 28961 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:23.895057 28961 net.cpp:86] Creating Layer relu3
I0428 19:58:23.895061 28961 net.cpp:408] relu3 <- ip3
I0428 19:58:23.895064 28961 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:23.895227 28961 net.cpp:124] Setting up relu3
I0428 19:58:23.895236 28961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:23.895239 28961 net.cpp:139] Memory required for data: 2202880
I0428 19:58:23.895242 28961 layer_factory.hpp:77] Creating layer loss
I0428 19:58:23.895248 28961 net.cpp:86] Creating Layer loss
I0428 19:58:23.895251 28961 net.cpp:408] loss <- ip3
I0428 19:58:23.895256 28961 net.cpp:408] loss <- label
I0428 19:58:23.895261 28961 net.cpp:382] loss -> loss
I0428 19:58:23.895277 28961 layer_factory.hpp:77] Creating layer loss
I0428 19:58:23.895524 28961 net.cpp:124] Setting up loss
I0428 19:58:23.895534 28961 net.cpp:131] Top shape: (1)
I0428 19:58:23.895536 28961 net.cpp:134]     with loss weight 1
I0428 19:58:23.895552 28961 net.cpp:139] Memory required for data: 2202884
I0428 19:58:23.895555 28961 net.cpp:200] loss needs backward computation.
I0428 19:58:23.895560 28961 net.cpp:200] relu3 needs backward computation.
I0428 19:58:23.895562 28961 net.cpp:200] ip3 needs backward computation.
I0428 19:58:23.895565 28961 net.cpp:200] relu2 needs backward computation.
I0428 19:58:23.895568 28961 net.cpp:200] ip2 needs backward computation.
I0428 19:58:23.895571 28961 net.cpp:200] relu1 needs backward computation.
I0428 19:58:23.895575 28961 net.cpp:200] ip1 needs backward computation.
I0428 19:58:23.895576 28961 net.cpp:200] pool1 needs backward computation.
I0428 19:58:23.895579 28961 net.cpp:200] conv1 needs backward computation.
I0428 19:58:23.895582 28961 net.cpp:200] pool0 needs backward computation.
I0428 19:58:23.895586 28961 net.cpp:200] conv0 needs backward computation.
I0428 19:58:23.895588 28961 net.cpp:202] mnist does not need backward computation.
I0428 19:58:23.895591 28961 net.cpp:244] This network produces output loss
I0428 19:58:23.895599 28961 net.cpp:257] Network initialization done.
I0428 19:58:23.895944 28961 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test817.prototxt
I0428 19:58:23.895972 28961 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:23.896064 28961 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:23.896178 28961 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:23.896234 28961 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:23.896245 28961 net.cpp:86] Creating Layer mnist
I0428 19:58:23.896250 28961 net.cpp:382] mnist -> data
I0428 19:58:23.896257 28961 net.cpp:382] mnist -> label
I0428 19:58:23.896335 28961 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:23.898336 28961 net.cpp:124] Setting up mnist
I0428 19:58:23.898375 28961 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:23.898380 28961 net.cpp:131] Top shape: 100 (100)
I0428 19:58:23.898383 28961 net.cpp:139] Memory required for data: 314000
I0428 19:58:23.898387 28961 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:23.898394 28961 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:23.898413 28961 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:23.898418 28961 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:23.898424 28961 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:23.898469 28961 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:23.898474 28961 net.cpp:131] Top shape: 100 (100)
I0428 19:58:23.898478 28961 net.cpp:131] Top shape: 100 (100)
I0428 19:58:23.898481 28961 net.cpp:139] Memory required for data: 314800
I0428 19:58:23.898484 28961 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:23.898494 28961 net.cpp:86] Creating Layer conv0
I0428 19:58:23.898496 28961 net.cpp:408] conv0 <- data
I0428 19:58:23.898501 28961 net.cpp:382] conv0 -> conv0
I0428 19:58:23.900322 28961 net.cpp:124] Setting up conv0
I0428 19:58:23.900351 28961 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:23.900354 28961 net.cpp:139] Memory required for data: 2618800
I0428 19:58:23.900377 28961 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:23.900398 28961 net.cpp:86] Creating Layer pool0
I0428 19:58:23.900401 28961 net.cpp:408] pool0 <- conv0
I0428 19:58:23.900406 28961 net.cpp:382] pool0 -> pool0
I0428 19:58:23.900440 28961 net.cpp:124] Setting up pool0
I0428 19:58:23.900445 28961 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:23.900449 28961 net.cpp:139] Memory required for data: 3194800
I0428 19:58:23.900451 28961 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:23.900460 28961 net.cpp:86] Creating Layer conv1
I0428 19:58:23.900462 28961 net.cpp:408] conv1 <- pool0
I0428 19:58:23.900466 28961 net.cpp:382] conv1 -> conv1
I0428 19:58:23.902667 28961 net.cpp:124] Setting up conv1
I0428 19:58:23.902681 28961 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:23.902686 28961 net.cpp:139] Memory required for data: 3322800
I0428 19:58:23.902694 28961 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:23.902700 28961 net.cpp:86] Creating Layer pool1
I0428 19:58:23.902704 28961 net.cpp:408] pool1 <- conv1
I0428 19:58:23.902724 28961 net.cpp:382] pool1 -> pool1
I0428 19:58:23.902763 28961 net.cpp:124] Setting up pool1
I0428 19:58:23.902770 28961 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:23.902772 28961 net.cpp:139] Memory required for data: 3354800
I0428 19:58:23.902776 28961 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:23.902781 28961 net.cpp:86] Creating Layer ip1
I0428 19:58:23.902801 28961 net.cpp:408] ip1 <- pool1
I0428 19:58:23.902804 28961 net.cpp:382] ip1 -> ip1
I0428 19:58:23.902990 28961 net.cpp:124] Setting up ip1
I0428 19:58:23.902999 28961 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:23.903013 28961 net.cpp:139] Memory required for data: 3374800
I0428 19:58:23.903020 28961 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:23.903026 28961 net.cpp:86] Creating Layer relu1
I0428 19:58:23.903029 28961 net.cpp:408] relu1 <- ip1
I0428 19:58:23.903034 28961 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:23.903208 28961 net.cpp:124] Setting up relu1
I0428 19:58:23.903216 28961 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:23.903220 28961 net.cpp:139] Memory required for data: 3394800
I0428 19:58:23.903223 28961 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:23.903230 28961 net.cpp:86] Creating Layer ip2
I0428 19:58:23.903234 28961 net.cpp:408] ip2 <- ip1
I0428 19:58:23.903239 28961 net.cpp:382] ip2 -> ip2
I0428 19:58:23.903342 28961 net.cpp:124] Setting up ip2
I0428 19:58:23.903349 28961 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:23.903352 28961 net.cpp:139] Memory required for data: 3414800
I0428 19:58:23.903357 28961 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:23.903362 28961 net.cpp:86] Creating Layer relu2
I0428 19:58:23.903367 28961 net.cpp:408] relu2 <- ip2
I0428 19:58:23.903370 28961 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:23.903511 28961 net.cpp:124] Setting up relu2
I0428 19:58:23.903517 28961 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:23.903522 28961 net.cpp:139] Memory required for data: 3434800
I0428 19:58:23.903524 28961 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:23.903529 28961 net.cpp:86] Creating Layer ip3
I0428 19:58:23.903533 28961 net.cpp:408] ip3 <- ip2
I0428 19:58:23.903537 28961 net.cpp:382] ip3 -> ip3
I0428 19:58:23.903630 28961 net.cpp:124] Setting up ip3
I0428 19:58:23.903636 28961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:23.903640 28961 net.cpp:139] Memory required for data: 3438800
I0428 19:58:23.903647 28961 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:23.903652 28961 net.cpp:86] Creating Layer relu3
I0428 19:58:23.903656 28961 net.cpp:408] relu3 <- ip3
I0428 19:58:23.903659 28961 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:23.904482 28961 net.cpp:124] Setting up relu3
I0428 19:58:23.904495 28961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:23.904498 28961 net.cpp:139] Memory required for data: 3442800
I0428 19:58:23.904501 28961 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:23.904506 28961 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:23.904510 28961 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:23.904515 28961 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:23.904521 28961 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:23.904567 28961 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:23.904574 28961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:23.904579 28961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:23.904582 28961 net.cpp:139] Memory required for data: 3450800
I0428 19:58:23.904589 28961 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:23.904594 28961 net.cpp:86] Creating Layer accuracy
I0428 19:58:23.904597 28961 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:23.904602 28961 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:23.904606 28961 net.cpp:382] accuracy -> accuracy
I0428 19:58:23.904613 28961 net.cpp:124] Setting up accuracy
I0428 19:58:23.904618 28961 net.cpp:131] Top shape: (1)
I0428 19:58:23.904620 28961 net.cpp:139] Memory required for data: 3450804
I0428 19:58:23.904623 28961 layer_factory.hpp:77] Creating layer loss
I0428 19:58:23.904628 28961 net.cpp:86] Creating Layer loss
I0428 19:58:23.904635 28961 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:23.904639 28961 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:23.904644 28961 net.cpp:382] loss -> loss
I0428 19:58:23.904649 28961 layer_factory.hpp:77] Creating layer loss
I0428 19:58:23.904868 28961 net.cpp:124] Setting up loss
I0428 19:58:23.904880 28961 net.cpp:131] Top shape: (1)
I0428 19:58:23.904882 28961 net.cpp:134]     with loss weight 1
I0428 19:58:23.904888 28961 net.cpp:139] Memory required for data: 3450808
I0428 19:58:23.904901 28961 net.cpp:200] loss needs backward computation.
I0428 19:58:23.904906 28961 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:23.904909 28961 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:23.904912 28961 net.cpp:200] relu3 needs backward computation.
I0428 19:58:23.904917 28961 net.cpp:200] ip3 needs backward computation.
I0428 19:58:23.904919 28961 net.cpp:200] relu2 needs backward computation.
I0428 19:58:23.904922 28961 net.cpp:200] ip2 needs backward computation.
I0428 19:58:23.904925 28961 net.cpp:200] relu1 needs backward computation.
I0428 19:58:23.904928 28961 net.cpp:200] ip1 needs backward computation.
I0428 19:58:23.904937 28961 net.cpp:200] pool1 needs backward computation.
I0428 19:58:23.904940 28961 net.cpp:200] conv1 needs backward computation.
I0428 19:58:23.904947 28961 net.cpp:200] pool0 needs backward computation.
I0428 19:58:23.904955 28961 net.cpp:200] conv0 needs backward computation.
I0428 19:58:23.904959 28961 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:23.904968 28961 net.cpp:202] mnist does not need backward computation.
I0428 19:58:23.904970 28961 net.cpp:244] This network produces output accuracy
I0428 19:58:23.904973 28961 net.cpp:244] This network produces output loss
I0428 19:58:23.904983 28961 net.cpp:257] Network initialization done.
I0428 19:58:23.905025 28961 solver.cpp:56] Solver scaffolding done.
I0428 19:58:23.905398 28961 caffe.cpp:248] Starting Optimization
I0428 19:58:23.905405 28961 solver.cpp:273] Solving LeNet
I0428 19:58:23.905407 28961 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:23.906275 28961 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:23.909891 28961 blocking_queue.cpp:49] Waiting for data
I0428 19:58:23.978036 28968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:23.978610 28961 solver.cpp:398]     Test net output #0: accuracy = 0.0814
I0428 19:58:23.978639 28961 solver.cpp:398]     Test net output #1: loss = 2.33717 (* 1 = 2.33717 loss)
I0428 19:58:23.981540 28961 solver.cpp:219] Iteration 0 (-9.45016e-31 iter/s, 0.0760934s/100 iters), loss = 2.31132
I0428 19:58:23.981572 28961 solver.cpp:238]     Train net output #0: loss = 2.31132 (* 1 = 2.31132 loss)
I0428 19:58:23.981586 28961 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:24.059450 28961 solver.cpp:219] Iteration 100 (1284.17 iter/s, 0.0778711s/100 iters), loss = 1.0394
I0428 19:58:24.059476 28961 solver.cpp:238]     Train net output #0: loss = 1.0394 (* 1 = 1.0394 loss)
I0428 19:58:24.059484 28961 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:24.134289 28961 solver.cpp:219] Iteration 200 (1336.82 iter/s, 0.0748042s/100 iters), loss = 0.592051
I0428 19:58:24.134312 28961 solver.cpp:238]     Train net output #0: loss = 0.592051 (* 1 = 0.592051 loss)
I0428 19:58:24.134318 28961 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:24.211237 28961 solver.cpp:219] Iteration 300 (1300.11 iter/s, 0.0769165s/100 iters), loss = 0.428591
I0428 19:58:24.211277 28961 solver.cpp:238]     Train net output #0: loss = 0.428591 (* 1 = 0.428591 loss)
I0428 19:58:24.211283 28961 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:24.289166 28961 solver.cpp:219] Iteration 400 (1284.02 iter/s, 0.0778803s/100 iters), loss = 0.253685
I0428 19:58:24.289221 28961 solver.cpp:238]     Train net output #0: loss = 0.253685 (* 1 = 0.253685 loss)
I0428 19:58:24.289240 28961 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:24.366509 28961 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:24.421385 28968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:24.421890 28961 solver.cpp:398]     Test net output #0: accuracy = 0.8347
I0428 19:58:24.421924 28961 solver.cpp:398]     Test net output #1: loss = 0.440323 (* 1 = 0.440323 loss)
I0428 19:58:24.422709 28961 solver.cpp:219] Iteration 500 (749.196 iter/s, 0.133476s/100 iters), loss = 0.491366
I0428 19:58:24.422758 28961 solver.cpp:238]     Train net output #0: loss = 0.491366 (* 1 = 0.491366 loss)
I0428 19:58:24.422766 28961 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:24.508874 28961 solver.cpp:219] Iteration 600 (1161.33 iter/s, 0.086108s/100 iters), loss = 0.128345
I0428 19:58:24.508914 28961 solver.cpp:238]     Train net output #0: loss = 0.128345 (* 1 = 0.128345 loss)
I0428 19:58:24.508921 28961 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:24.592865 28961 solver.cpp:219] Iteration 700 (1191.1 iter/s, 0.0839557s/100 iters), loss = 0.184349
I0428 19:58:24.592906 28961 solver.cpp:238]     Train net output #0: loss = 0.184349 (* 1 = 0.184349 loss)
I0428 19:58:24.592913 28961 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:24.667132 28961 solver.cpp:219] Iteration 800 (1347.13 iter/s, 0.0742318s/100 iters), loss = 0.235361
I0428 19:58:24.667171 28961 solver.cpp:238]     Train net output #0: loss = 0.235361 (* 1 = 0.235361 loss)
I0428 19:58:24.667177 28961 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:24.742491 28961 solver.cpp:219] Iteration 900 (1327.55 iter/s, 0.0753265s/100 iters), loss = 0.237073
I0428 19:58:24.742532 28961 solver.cpp:238]     Train net output #0: loss = 0.237073 (* 1 = 0.237073 loss)
I0428 19:58:24.742537 28961 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:24.768276 28967 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:24.817842 28961 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:24.818609 28961 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:24.819159 28961 solver.cpp:311] Iteration 1000, loss = 0.136172
I0428 19:58:24.819202 28961 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:24.872417 28968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:24.872931 28961 solver.cpp:398]     Test net output #0: accuracy = 0.9667
I0428 19:58:24.872967 28961 solver.cpp:398]     Test net output #1: loss = 0.105364 (* 1 = 0.105364 loss)
I0428 19:58:24.872972 28961 solver.cpp:316] Optimization Done.
I0428 19:58:24.872977 28961 caffe.cpp:259] Optimization Done.
