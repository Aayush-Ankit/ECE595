I0428 20:10:17.943142 31808 caffe.cpp:218] Using GPUs 0
I0428 20:10:17.973464 31808 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:18.419106 31808 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1131.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:18.419266 31808 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1131.prototxt
I0428 20:10:18.419579 31808 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:18.419590 31808 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:18.419668 31808 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:10:18.419721 31808 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:18.419857 31808 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:18.419878 31808 net.cpp:86] Creating Layer mnist
I0428 20:10:18.419884 31808 net.cpp:382] mnist -> data
I0428 20:10:18.419903 31808 net.cpp:382] mnist -> label
I0428 20:10:18.420933 31808 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:18.423416 31808 net.cpp:124] Setting up mnist
I0428 20:10:18.423461 31808 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:18.423467 31808 net.cpp:131] Top shape: 64 (64)
I0428 20:10:18.423470 31808 net.cpp:139] Memory required for data: 200960
I0428 20:10:18.423476 31808 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:18.423506 31808 net.cpp:86] Creating Layer conv0
I0428 20:10:18.423512 31808 net.cpp:408] conv0 <- data
I0428 20:10:18.423524 31808 net.cpp:382] conv0 -> conv0
I0428 20:10:18.651602 31808 net.cpp:124] Setting up conv0
I0428 20:10:18.651629 31808 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:18.651633 31808 net.cpp:139] Memory required for data: 3887360
I0428 20:10:18.651664 31808 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:18.651676 31808 net.cpp:86] Creating Layer pool0
I0428 20:10:18.651687 31808 net.cpp:408] pool0 <- conv0
I0428 20:10:18.651692 31808 net.cpp:382] pool0 -> pool0
I0428 20:10:18.651736 31808 net.cpp:124] Setting up pool0
I0428 20:10:18.651742 31808 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:18.651760 31808 net.cpp:139] Memory required for data: 4808960
I0428 20:10:18.651764 31808 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:18.651775 31808 net.cpp:86] Creating Layer conv1
I0428 20:10:18.651779 31808 net.cpp:408] conv1 <- pool0
I0428 20:10:18.651784 31808 net.cpp:382] conv1 -> conv1
I0428 20:10:18.653931 31808 net.cpp:124] Setting up conv1
I0428 20:10:18.653946 31808 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:10:18.653950 31808 net.cpp:139] Memory required for data: 5628160
I0428 20:10:18.653975 31808 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:18.653982 31808 net.cpp:86] Creating Layer pool1
I0428 20:10:18.653986 31808 net.cpp:408] pool1 <- conv1
I0428 20:10:18.653991 31808 net.cpp:382] pool1 -> pool1
I0428 20:10:18.654028 31808 net.cpp:124] Setting up pool1
I0428 20:10:18.654036 31808 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:10:18.654038 31808 net.cpp:139] Memory required for data: 5832960
I0428 20:10:18.654042 31808 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:18.654048 31808 net.cpp:86] Creating Layer ip1
I0428 20:10:18.654052 31808 net.cpp:408] ip1 <- pool1
I0428 20:10:18.654057 31808 net.cpp:382] ip1 -> ip1
I0428 20:10:18.655066 31808 net.cpp:124] Setting up ip1
I0428 20:10:18.655093 31808 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:18.655097 31808 net.cpp:139] Memory required for data: 5835520
I0428 20:10:18.655120 31808 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:18.655141 31808 net.cpp:86] Creating Layer relu1
I0428 20:10:18.655145 31808 net.cpp:408] relu1 <- ip1
I0428 20:10:18.655150 31808 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:18.655342 31808 net.cpp:124] Setting up relu1
I0428 20:10:18.655351 31808 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:18.655354 31808 net.cpp:139] Memory required for data: 5838080
I0428 20:10:18.655359 31808 layer_factory.hpp:77] Creating layer loss
I0428 20:10:18.655364 31808 net.cpp:86] Creating Layer loss
I0428 20:10:18.655367 31808 net.cpp:408] loss <- ip1
I0428 20:10:18.655372 31808 net.cpp:408] loss <- label
I0428 20:10:18.655377 31808 net.cpp:382] loss -> loss
I0428 20:10:18.655392 31808 layer_factory.hpp:77] Creating layer loss
I0428 20:10:18.656339 31808 net.cpp:124] Setting up loss
I0428 20:10:18.656352 31808 net.cpp:131] Top shape: (1)
I0428 20:10:18.656371 31808 net.cpp:134]     with loss weight 1
I0428 20:10:18.656385 31808 net.cpp:139] Memory required for data: 5838084
I0428 20:10:18.656389 31808 net.cpp:200] loss needs backward computation.
I0428 20:10:18.656394 31808 net.cpp:200] relu1 needs backward computation.
I0428 20:10:18.656396 31808 net.cpp:200] ip1 needs backward computation.
I0428 20:10:18.656399 31808 net.cpp:200] pool1 needs backward computation.
I0428 20:10:18.656402 31808 net.cpp:200] conv1 needs backward computation.
I0428 20:10:18.656405 31808 net.cpp:200] pool0 needs backward computation.
I0428 20:10:18.656409 31808 net.cpp:200] conv0 needs backward computation.
I0428 20:10:18.656412 31808 net.cpp:202] mnist does not need backward computation.
I0428 20:10:18.656415 31808 net.cpp:244] This network produces output loss
I0428 20:10:18.656424 31808 net.cpp:257] Network initialization done.
I0428 20:10:18.656723 31808 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1131.prototxt
I0428 20:10:18.656762 31808 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:18.656862 31808 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:10:18.656934 31808 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:18.656980 31808 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:18.656991 31808 net.cpp:86] Creating Layer mnist
I0428 20:10:18.656996 31808 net.cpp:382] mnist -> data
I0428 20:10:18.657004 31808 net.cpp:382] mnist -> label
I0428 20:10:18.657093 31808 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:18.659137 31808 net.cpp:124] Setting up mnist
I0428 20:10:18.659183 31808 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:18.659188 31808 net.cpp:131] Top shape: 100 (100)
I0428 20:10:18.659190 31808 net.cpp:139] Memory required for data: 314000
I0428 20:10:18.659194 31808 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:18.659201 31808 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:18.659204 31808 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:18.659225 31808 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:18.659232 31808 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:18.659279 31808 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:18.659286 31808 net.cpp:131] Top shape: 100 (100)
I0428 20:10:18.659291 31808 net.cpp:131] Top shape: 100 (100)
I0428 20:10:18.659293 31808 net.cpp:139] Memory required for data: 314800
I0428 20:10:18.659296 31808 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:18.659306 31808 net.cpp:86] Creating Layer conv0
I0428 20:10:18.659308 31808 net.cpp:408] conv0 <- data
I0428 20:10:18.659314 31808 net.cpp:382] conv0 -> conv0
I0428 20:10:18.660246 31808 net.cpp:124] Setting up conv0
I0428 20:10:18.660259 31808 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:18.660280 31808 net.cpp:139] Memory required for data: 6074800
I0428 20:10:18.660290 31808 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:18.660296 31808 net.cpp:86] Creating Layer pool0
I0428 20:10:18.660300 31808 net.cpp:408] pool0 <- conv0
I0428 20:10:18.660305 31808 net.cpp:382] pool0 -> pool0
I0428 20:10:18.660342 31808 net.cpp:124] Setting up pool0
I0428 20:10:18.660349 31808 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:18.660353 31808 net.cpp:139] Memory required for data: 7514800
I0428 20:10:18.660356 31808 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:18.660365 31808 net.cpp:86] Creating Layer conv1
I0428 20:10:18.660369 31808 net.cpp:408] conv1 <- pool0
I0428 20:10:18.660375 31808 net.cpp:382] conv1 -> conv1
I0428 20:10:18.662202 31808 net.cpp:124] Setting up conv1
I0428 20:10:18.662233 31808 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:10:18.662238 31808 net.cpp:139] Memory required for data: 8794800
I0428 20:10:18.662248 31808 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:18.662256 31808 net.cpp:86] Creating Layer pool1
I0428 20:10:18.662271 31808 net.cpp:408] pool1 <- conv1
I0428 20:10:18.662277 31808 net.cpp:382] pool1 -> pool1
I0428 20:10:18.662315 31808 net.cpp:124] Setting up pool1
I0428 20:10:18.662323 31808 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:10:18.662327 31808 net.cpp:139] Memory required for data: 9114800
I0428 20:10:18.662330 31808 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:18.662336 31808 net.cpp:86] Creating Layer ip1
I0428 20:10:18.662348 31808 net.cpp:408] ip1 <- pool1
I0428 20:10:18.662353 31808 net.cpp:382] ip1 -> ip1
I0428 20:10:18.662516 31808 net.cpp:124] Setting up ip1
I0428 20:10:18.662524 31808 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:18.662528 31808 net.cpp:139] Memory required for data: 9118800
I0428 20:10:18.662535 31808 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:18.662541 31808 net.cpp:86] Creating Layer relu1
I0428 20:10:18.662545 31808 net.cpp:408] relu1 <- ip1
I0428 20:10:18.662550 31808 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:18.663399 31808 net.cpp:124] Setting up relu1
I0428 20:10:18.663427 31808 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:18.663431 31808 net.cpp:139] Memory required for data: 9122800
I0428 20:10:18.663435 31808 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:10:18.663444 31808 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:10:18.663457 31808 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:10:18.663463 31808 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:10:18.663470 31808 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:10:18.663512 31808 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:10:18.663519 31808 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:18.663523 31808 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:18.663527 31808 net.cpp:139] Memory required for data: 9130800
I0428 20:10:18.663530 31808 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:18.663535 31808 net.cpp:86] Creating Layer accuracy
I0428 20:10:18.663538 31808 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:10:18.663543 31808 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:18.663547 31808 net.cpp:382] accuracy -> accuracy
I0428 20:10:18.663554 31808 net.cpp:124] Setting up accuracy
I0428 20:10:18.663564 31808 net.cpp:131] Top shape: (1)
I0428 20:10:18.663568 31808 net.cpp:139] Memory required for data: 9130804
I0428 20:10:18.663570 31808 layer_factory.hpp:77] Creating layer loss
I0428 20:10:18.663574 31808 net.cpp:86] Creating Layer loss
I0428 20:10:18.663578 31808 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:10:18.663581 31808 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:18.663585 31808 net.cpp:382] loss -> loss
I0428 20:10:18.663591 31808 layer_factory.hpp:77] Creating layer loss
I0428 20:10:18.663836 31808 net.cpp:124] Setting up loss
I0428 20:10:18.663846 31808 net.cpp:131] Top shape: (1)
I0428 20:10:18.663849 31808 net.cpp:134]     with loss weight 1
I0428 20:10:18.663857 31808 net.cpp:139] Memory required for data: 9130808
I0428 20:10:18.663861 31808 net.cpp:200] loss needs backward computation.
I0428 20:10:18.663866 31808 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:18.663869 31808 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:10:18.663873 31808 net.cpp:200] relu1 needs backward computation.
I0428 20:10:18.663877 31808 net.cpp:200] ip1 needs backward computation.
I0428 20:10:18.663880 31808 net.cpp:200] pool1 needs backward computation.
I0428 20:10:18.663884 31808 net.cpp:200] conv1 needs backward computation.
I0428 20:10:18.663887 31808 net.cpp:200] pool0 needs backward computation.
I0428 20:10:18.663890 31808 net.cpp:200] conv0 needs backward computation.
I0428 20:10:18.663894 31808 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:18.663905 31808 net.cpp:202] mnist does not need backward computation.
I0428 20:10:18.663914 31808 net.cpp:244] This network produces output accuracy
I0428 20:10:18.663918 31808 net.cpp:244] This network produces output loss
I0428 20:10:18.663938 31808 net.cpp:257] Network initialization done.
I0428 20:10:18.663978 31808 solver.cpp:56] Solver scaffolding done.
I0428 20:10:18.664197 31808 caffe.cpp:248] Starting Optimization
I0428 20:10:18.664203 31808 solver.cpp:273] Solving LeNet
I0428 20:10:18.664206 31808 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:18.665032 31808 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:18.670238 31808 blocking_queue.cpp:49] Waiting for data
I0428 20:10:18.743486 31815 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:18.744101 31808 solver.cpp:398]     Test net output #0: accuracy = 0.1122
I0428 20:10:18.744133 31808 solver.cpp:398]     Test net output #1: loss = 2.34311 (* 1 = 2.34311 loss)
I0428 20:10:18.748016 31808 solver.cpp:219] Iteration 0 (0 iter/s, 0.0837847s/100 iters), loss = 2.32318
I0428 20:10:18.748057 31808 solver.cpp:238]     Train net output #0: loss = 2.32318 (* 1 = 2.32318 loss)
I0428 20:10:18.748069 31808 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:18.864704 31808 solver.cpp:219] Iteration 100 (857.379 iter/s, 0.116635s/100 iters), loss = 0.286525
I0428 20:10:18.864747 31808 solver.cpp:238]     Train net output #0: loss = 0.286525 (* 1 = 0.286525 loss)
I0428 20:10:18.864753 31808 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:18.972676 31808 solver.cpp:219] Iteration 200 (926.486 iter/s, 0.107935s/100 iters), loss = 0.171639
I0428 20:10:18.972718 31808 solver.cpp:238]     Train net output #0: loss = 0.171639 (* 1 = 0.171639 loss)
I0428 20:10:18.972724 31808 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:19.080778 31808 solver.cpp:219] Iteration 300 (925.485 iter/s, 0.108051s/100 iters), loss = 0.155614
I0428 20:10:19.080806 31808 solver.cpp:238]     Train net output #0: loss = 0.155614 (* 1 = 0.155614 loss)
I0428 20:10:19.080818 31808 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:19.188421 31808 solver.cpp:219] Iteration 400 (929.334 iter/s, 0.107604s/100 iters), loss = 0.0802333
I0428 20:10:19.188447 31808 solver.cpp:238]     Train net output #0: loss = 0.0802333 (* 1 = 0.0802333 loss)
I0428 20:10:19.188453 31808 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:19.293179 31808 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:19.369403 31815 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:19.369998 31808 solver.cpp:398]     Test net output #0: accuracy = 0.9692
I0428 20:10:19.370035 31808 solver.cpp:398]     Test net output #1: loss = 0.106003 (* 1 = 0.106003 loss)
I0428 20:10:19.371181 31808 solver.cpp:219] Iteration 500 (547.29 iter/s, 0.182718s/100 iters), loss = 0.118882
I0428 20:10:19.371228 31808 solver.cpp:238]     Train net output #0: loss = 0.118882 (* 1 = 0.118882 loss)
I0428 20:10:19.371235 31808 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:19.488859 31808 solver.cpp:219] Iteration 600 (850.187 iter/s, 0.117621s/100 iters), loss = 0.0991834
I0428 20:10:19.488900 31808 solver.cpp:238]     Train net output #0: loss = 0.0991833 (* 1 = 0.0991833 loss)
I0428 20:10:19.488906 31808 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:19.595793 31808 solver.cpp:219] Iteration 700 (935.602 iter/s, 0.106883s/100 iters), loss = 0.124496
I0428 20:10:19.595834 31808 solver.cpp:238]     Train net output #0: loss = 0.124496 (* 1 = 0.124496 loss)
I0428 20:10:19.595840 31808 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:19.703332 31808 solver.cpp:219] Iteration 800 (930.335 iter/s, 0.107488s/100 iters), loss = 0.227979
I0428 20:10:19.703356 31808 solver.cpp:238]     Train net output #0: loss = 0.227979 (* 1 = 0.227979 loss)
I0428 20:10:19.703363 31808 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:19.812346 31808 solver.cpp:219] Iteration 900 (917.616 iter/s, 0.108978s/100 iters), loss = 0.164336
I0428 20:10:19.812374 31808 solver.cpp:238]     Train net output #0: loss = 0.164336 (* 1 = 0.164336 loss)
I0428 20:10:19.812381 31808 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:19.849534 31814 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:19.920953 31808 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:19.922293 31808 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:19.923063 31808 solver.cpp:311] Iteration 1000, loss = 0.0732431
I0428 20:10:19.923080 31808 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:19.998075 31815 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:19.998658 31808 solver.cpp:398]     Test net output #0: accuracy = 0.9771
I0428 20:10:19.998693 31808 solver.cpp:398]     Test net output #1: loss = 0.0700181 (* 1 = 0.0700181 loss)
I0428 20:10:19.998699 31808 solver.cpp:316] Optimization Done.
I0428 20:10:19.998703 31808 caffe.cpp:259] Optimization Done.
