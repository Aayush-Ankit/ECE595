I0428 20:14:31.812609 32697 caffe.cpp:218] Using GPUs 0
I0428 20:14:31.842536 32697 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:32.290948 32697 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1224.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:32.291076 32697 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1224.prototxt
I0428 20:14:32.291427 32697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:32.291457 32697 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:32.291539 32697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:32.291602 32697 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:32.291684 32697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:32.291703 32697 net.cpp:86] Creating Layer mnist
I0428 20:14:32.291712 32697 net.cpp:382] mnist -> data
I0428 20:14:32.291730 32697 net.cpp:382] mnist -> label
I0428 20:14:32.292726 32697 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:32.294889 32697 net.cpp:124] Setting up mnist
I0428 20:14:32.294919 32697 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:32.294924 32697 net.cpp:131] Top shape: 64 (64)
I0428 20:14:32.294942 32697 net.cpp:139] Memory required for data: 200960
I0428 20:14:32.294950 32697 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:32.294963 32697 net.cpp:86] Creating Layer conv0
I0428 20:14:32.294980 32697 net.cpp:408] conv0 <- data
I0428 20:14:32.294991 32697 net.cpp:382] conv0 -> conv0
I0428 20:14:32.524011 32697 net.cpp:124] Setting up conv0
I0428 20:14:32.524052 32697 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:32.524056 32697 net.cpp:139] Memory required for data: 7573760
I0428 20:14:32.524070 32697 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:32.524083 32697 net.cpp:86] Creating Layer pool0
I0428 20:14:32.524086 32697 net.cpp:408] pool0 <- conv0
I0428 20:14:32.524092 32697 net.cpp:382] pool0 -> pool0
I0428 20:14:32.524158 32697 net.cpp:124] Setting up pool0
I0428 20:14:32.524165 32697 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:32.524168 32697 net.cpp:139] Memory required for data: 9416960
I0428 20:14:32.524188 32697 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:32.524199 32697 net.cpp:86] Creating Layer conv1
I0428 20:14:32.524204 32697 net.cpp:408] conv1 <- pool0
I0428 20:14:32.524224 32697 net.cpp:382] conv1 -> conv1
I0428 20:14:32.526273 32697 net.cpp:124] Setting up conv1
I0428 20:14:32.526288 32697 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:32.526293 32697 net.cpp:139] Memory required for data: 9449728
I0428 20:14:32.526301 32697 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:32.526310 32697 net.cpp:86] Creating Layer pool1
I0428 20:14:32.526314 32697 net.cpp:408] pool1 <- conv1
I0428 20:14:32.526319 32697 net.cpp:382] pool1 -> pool1
I0428 20:14:32.526357 32697 net.cpp:124] Setting up pool1
I0428 20:14:32.526363 32697 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:32.526365 32697 net.cpp:139] Memory required for data: 9457920
I0428 20:14:32.526370 32697 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:32.526377 32697 net.cpp:86] Creating Layer ip1
I0428 20:14:32.526381 32697 net.cpp:408] ip1 <- pool1
I0428 20:14:32.526386 32697 net.cpp:382] ip1 -> ip1
I0428 20:14:32.526504 32697 net.cpp:124] Setting up ip1
I0428 20:14:32.526512 32697 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:32.526515 32697 net.cpp:139] Memory required for data: 9460480
I0428 20:14:32.526522 32697 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:32.526530 32697 net.cpp:86] Creating Layer relu1
I0428 20:14:32.526532 32697 net.cpp:408] relu1 <- ip1
I0428 20:14:32.526536 32697 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:32.526710 32697 net.cpp:124] Setting up relu1
I0428 20:14:32.526720 32697 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:32.526722 32697 net.cpp:139] Memory required for data: 9463040
I0428 20:14:32.526726 32697 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:32.526733 32697 net.cpp:86] Creating Layer ip2
I0428 20:14:32.526736 32697 net.cpp:408] ip2 <- ip1
I0428 20:14:32.526741 32697 net.cpp:382] ip2 -> ip2
I0428 20:14:32.526836 32697 net.cpp:124] Setting up ip2
I0428 20:14:32.526844 32697 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:32.526846 32697 net.cpp:139] Memory required for data: 9469440
I0428 20:14:32.526851 32697 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:32.526859 32697 net.cpp:86] Creating Layer relu2
I0428 20:14:32.526861 32697 net.cpp:408] relu2 <- ip2
I0428 20:14:32.526865 32697 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:32.527616 32697 net.cpp:124] Setting up relu2
I0428 20:14:32.527645 32697 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:32.527649 32697 net.cpp:139] Memory required for data: 9475840
I0428 20:14:32.527652 32697 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:32.527659 32697 net.cpp:86] Creating Layer ip3
I0428 20:14:32.527663 32697 net.cpp:408] ip3 <- ip2
I0428 20:14:32.527669 32697 net.cpp:382] ip3 -> ip3
I0428 20:14:32.527770 32697 net.cpp:124] Setting up ip3
I0428 20:14:32.527778 32697 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:32.527781 32697 net.cpp:139] Memory required for data: 9478400
I0428 20:14:32.527789 32697 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:32.527794 32697 net.cpp:86] Creating Layer relu3
I0428 20:14:32.527797 32697 net.cpp:408] relu3 <- ip3
I0428 20:14:32.527802 32697 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:32.527981 32697 net.cpp:124] Setting up relu3
I0428 20:14:32.527988 32697 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:32.527992 32697 net.cpp:139] Memory required for data: 9480960
I0428 20:14:32.527994 32697 layer_factory.hpp:77] Creating layer loss
I0428 20:14:32.528000 32697 net.cpp:86] Creating Layer loss
I0428 20:14:32.528007 32697 net.cpp:408] loss <- ip3
I0428 20:14:32.528010 32697 net.cpp:408] loss <- label
I0428 20:14:32.528015 32697 net.cpp:382] loss -> loss
I0428 20:14:32.528034 32697 layer_factory.hpp:77] Creating layer loss
I0428 20:14:32.528264 32697 net.cpp:124] Setting up loss
I0428 20:14:32.528272 32697 net.cpp:131] Top shape: (1)
I0428 20:14:32.528275 32697 net.cpp:134]     with loss weight 1
I0428 20:14:32.528290 32697 net.cpp:139] Memory required for data: 9480964
I0428 20:14:32.528292 32697 net.cpp:200] loss needs backward computation.
I0428 20:14:32.528295 32697 net.cpp:200] relu3 needs backward computation.
I0428 20:14:32.528298 32697 net.cpp:200] ip3 needs backward computation.
I0428 20:14:32.528301 32697 net.cpp:200] relu2 needs backward computation.
I0428 20:14:32.528303 32697 net.cpp:200] ip2 needs backward computation.
I0428 20:14:32.528306 32697 net.cpp:200] relu1 needs backward computation.
I0428 20:14:32.528309 32697 net.cpp:200] ip1 needs backward computation.
I0428 20:14:32.528311 32697 net.cpp:200] pool1 needs backward computation.
I0428 20:14:32.528314 32697 net.cpp:200] conv1 needs backward computation.
I0428 20:14:32.528317 32697 net.cpp:200] pool0 needs backward computation.
I0428 20:14:32.528321 32697 net.cpp:200] conv0 needs backward computation.
I0428 20:14:32.528323 32697 net.cpp:202] mnist does not need backward computation.
I0428 20:14:32.528326 32697 net.cpp:244] This network produces output loss
I0428 20:14:32.528337 32697 net.cpp:257] Network initialization done.
I0428 20:14:32.528712 32697 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1224.prototxt
I0428 20:14:32.528753 32697 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:32.528868 32697 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:32.528985 32697 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:32.529031 32697 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:32.529045 32697 net.cpp:86] Creating Layer mnist
I0428 20:14:32.529050 32697 net.cpp:382] mnist -> data
I0428 20:14:32.529058 32697 net.cpp:382] mnist -> label
I0428 20:14:32.529161 32697 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:32.531082 32697 net.cpp:124] Setting up mnist
I0428 20:14:32.531126 32697 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:32.531131 32697 net.cpp:131] Top shape: 100 (100)
I0428 20:14:32.531133 32697 net.cpp:139] Memory required for data: 314000
I0428 20:14:32.531136 32697 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:32.531208 32697 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:32.531214 32697 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:32.531219 32697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:32.531226 32697 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:32.531357 32697 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:32.531364 32697 net.cpp:131] Top shape: 100 (100)
I0428 20:14:32.531368 32697 net.cpp:131] Top shape: 100 (100)
I0428 20:14:32.531371 32697 net.cpp:139] Memory required for data: 314800
I0428 20:14:32.531381 32697 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:32.531390 32697 net.cpp:86] Creating Layer conv0
I0428 20:14:32.531394 32697 net.cpp:408] conv0 <- data
I0428 20:14:32.531400 32697 net.cpp:382] conv0 -> conv0
I0428 20:14:32.533211 32697 net.cpp:124] Setting up conv0
I0428 20:14:32.533241 32697 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:32.533243 32697 net.cpp:139] Memory required for data: 11834800
I0428 20:14:32.533254 32697 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:32.533260 32697 net.cpp:86] Creating Layer pool0
I0428 20:14:32.533263 32697 net.cpp:408] pool0 <- conv0
I0428 20:14:32.533268 32697 net.cpp:382] pool0 -> pool0
I0428 20:14:32.533304 32697 net.cpp:124] Setting up pool0
I0428 20:14:32.533310 32697 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:32.533313 32697 net.cpp:139] Memory required for data: 14714800
I0428 20:14:32.533315 32697 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:32.533324 32697 net.cpp:86] Creating Layer conv1
I0428 20:14:32.533327 32697 net.cpp:408] conv1 <- pool0
I0428 20:14:32.533334 32697 net.cpp:382] conv1 -> conv1
I0428 20:14:32.534900 32697 net.cpp:124] Setting up conv1
I0428 20:14:32.534931 32697 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:32.534935 32697 net.cpp:139] Memory required for data: 14766000
I0428 20:14:32.534960 32697 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:32.534967 32697 net.cpp:86] Creating Layer pool1
I0428 20:14:32.534972 32697 net.cpp:408] pool1 <- conv1
I0428 20:14:32.534978 32697 net.cpp:382] pool1 -> pool1
I0428 20:14:32.535015 32697 net.cpp:124] Setting up pool1
I0428 20:14:32.535043 32697 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:32.535045 32697 net.cpp:139] Memory required for data: 14778800
I0428 20:14:32.535048 32697 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:32.535056 32697 net.cpp:86] Creating Layer ip1
I0428 20:14:32.535059 32697 net.cpp:408] ip1 <- pool1
I0428 20:14:32.535063 32697 net.cpp:382] ip1 -> ip1
I0428 20:14:32.535194 32697 net.cpp:124] Setting up ip1
I0428 20:14:32.535203 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.535218 32697 net.cpp:139] Memory required for data: 14782800
I0428 20:14:32.535225 32697 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:32.535233 32697 net.cpp:86] Creating Layer relu1
I0428 20:14:32.535235 32697 net.cpp:408] relu1 <- ip1
I0428 20:14:32.535243 32697 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:32.535439 32697 net.cpp:124] Setting up relu1
I0428 20:14:32.535447 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.535451 32697 net.cpp:139] Memory required for data: 14786800
I0428 20:14:32.535454 32697 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:32.535462 32697 net.cpp:86] Creating Layer ip2
I0428 20:14:32.535466 32697 net.cpp:408] ip2 <- ip1
I0428 20:14:32.535471 32697 net.cpp:382] ip2 -> ip2
I0428 20:14:32.535571 32697 net.cpp:124] Setting up ip2
I0428 20:14:32.535579 32697 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:32.535583 32697 net.cpp:139] Memory required for data: 14796800
I0428 20:14:32.535588 32697 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:32.535593 32697 net.cpp:86] Creating Layer relu2
I0428 20:14:32.535596 32697 net.cpp:408] relu2 <- ip2
I0428 20:14:32.535600 32697 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:32.535774 32697 net.cpp:124] Setting up relu2
I0428 20:14:32.535784 32697 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:32.535786 32697 net.cpp:139] Memory required for data: 14806800
I0428 20:14:32.535789 32697 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:32.535794 32697 net.cpp:86] Creating Layer ip3
I0428 20:14:32.535797 32697 net.cpp:408] ip3 <- ip2
I0428 20:14:32.535805 32697 net.cpp:382] ip3 -> ip3
I0428 20:14:32.535930 32697 net.cpp:124] Setting up ip3
I0428 20:14:32.535938 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.535941 32697 net.cpp:139] Memory required for data: 14810800
I0428 20:14:32.535949 32697 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:32.535955 32697 net.cpp:86] Creating Layer relu3
I0428 20:14:32.535959 32697 net.cpp:408] relu3 <- ip3
I0428 20:14:32.535962 32697 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:32.536855 32697 net.cpp:124] Setting up relu3
I0428 20:14:32.536867 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.536886 32697 net.cpp:139] Memory required for data: 14814800
I0428 20:14:32.536914 32697 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:32.536924 32697 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:32.536928 32697 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:32.536936 32697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:32.536942 32697 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:32.536988 32697 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:32.537001 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.537005 32697 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:32.537009 32697 net.cpp:139] Memory required for data: 14822800
I0428 20:14:32.537012 32697 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:32.537022 32697 net.cpp:86] Creating Layer accuracy
I0428 20:14:32.537025 32697 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:32.537030 32697 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:32.537036 32697 net.cpp:382] accuracy -> accuracy
I0428 20:14:32.537045 32697 net.cpp:124] Setting up accuracy
I0428 20:14:32.537048 32697 net.cpp:131] Top shape: (1)
I0428 20:14:32.537051 32697 net.cpp:139] Memory required for data: 14822804
I0428 20:14:32.537053 32697 layer_factory.hpp:77] Creating layer loss
I0428 20:14:32.537058 32697 net.cpp:86] Creating Layer loss
I0428 20:14:32.537061 32697 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:32.537065 32697 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:32.537070 32697 net.cpp:382] loss -> loss
I0428 20:14:32.537075 32697 layer_factory.hpp:77] Creating layer loss
I0428 20:14:32.537358 32697 net.cpp:124] Setting up loss
I0428 20:14:32.537367 32697 net.cpp:131] Top shape: (1)
I0428 20:14:32.537372 32697 net.cpp:134]     with loss weight 1
I0428 20:14:32.537389 32697 net.cpp:139] Memory required for data: 14822808
I0428 20:14:32.537391 32697 net.cpp:200] loss needs backward computation.
I0428 20:14:32.537395 32697 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:32.537400 32697 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:32.537407 32697 net.cpp:200] relu3 needs backward computation.
I0428 20:14:32.537410 32697 net.cpp:200] ip3 needs backward computation.
I0428 20:14:32.537413 32697 net.cpp:200] relu2 needs backward computation.
I0428 20:14:32.537416 32697 net.cpp:200] ip2 needs backward computation.
I0428 20:14:32.537418 32697 net.cpp:200] relu1 needs backward computation.
I0428 20:14:32.537421 32697 net.cpp:200] ip1 needs backward computation.
I0428 20:14:32.537425 32697 net.cpp:200] pool1 needs backward computation.
I0428 20:14:32.537427 32697 net.cpp:200] conv1 needs backward computation.
I0428 20:14:32.537446 32697 net.cpp:200] pool0 needs backward computation.
I0428 20:14:32.537470 32697 net.cpp:200] conv0 needs backward computation.
I0428 20:14:32.537494 32697 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:32.537498 32697 net.cpp:202] mnist does not need backward computation.
I0428 20:14:32.537500 32697 net.cpp:244] This network produces output accuracy
I0428 20:14:32.537509 32697 net.cpp:244] This network produces output loss
I0428 20:14:32.537523 32697 net.cpp:257] Network initialization done.
I0428 20:14:32.537600 32697 solver.cpp:56] Solver scaffolding done.
I0428 20:14:32.538033 32697 caffe.cpp:248] Starting Optimization
I0428 20:14:32.538038 32697 solver.cpp:273] Solving LeNet
I0428 20:14:32.538041 32697 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:32.538938 32697 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:32.545245 32697 blocking_queue.cpp:49] Waiting for data
I0428 20:14:32.615540 32704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:32.616328 32697 solver.cpp:398]     Test net output #0: accuracy = 0.1273
I0428 20:14:32.616348 32697 solver.cpp:398]     Test net output #1: loss = 2.30388 (* 1 = 2.30388 loss)
I0428 20:14:32.620430 32697 solver.cpp:219] Iteration 0 (-1.27934e-31 iter/s, 0.0823431s/100 iters), loss = 2.3005
I0428 20:14:32.620471 32697 solver.cpp:238]     Train net output #0: loss = 2.3005 (* 1 = 2.3005 loss)
I0428 20:14:32.620481 32697 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:32.734271 32697 solver.cpp:219] Iteration 100 (878.725 iter/s, 0.113801s/100 iters), loss = 0.842801
I0428 20:14:32.734313 32697 solver.cpp:238]     Train net output #0: loss = 0.842801 (* 1 = 0.842801 loss)
I0428 20:14:32.734319 32697 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:32.845713 32697 solver.cpp:219] Iteration 200 (897.625 iter/s, 0.111405s/100 iters), loss = 0.495115
I0428 20:14:32.845752 32697 solver.cpp:238]     Train net output #0: loss = 0.495115 (* 1 = 0.495115 loss)
I0428 20:14:32.845758 32697 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:32.957615 32697 solver.cpp:219] Iteration 300 (893.918 iter/s, 0.111867s/100 iters), loss = 0.46755
I0428 20:14:32.957654 32697 solver.cpp:238]     Train net output #0: loss = 0.46755 (* 1 = 0.46755 loss)
I0428 20:14:32.957660 32697 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:33.069000 32697 solver.cpp:219] Iteration 400 (898.187 iter/s, 0.111335s/100 iters), loss = 0.727729
I0428 20:14:33.069038 32697 solver.cpp:238]     Train net output #0: loss = 0.727729 (* 1 = 0.727729 loss)
I0428 20:14:33.069044 32697 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:33.180981 32697 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:33.246217 32704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:33.247887 32697 solver.cpp:398]     Test net output #0: accuracy = 0.9143
I0428 20:14:33.247908 32697 solver.cpp:398]     Test net output #1: loss = 0.295525 (* 1 = 0.295525 loss)
I0428 20:14:33.248998 32697 solver.cpp:219] Iteration 500 (555.673 iter/s, 0.179962s/100 iters), loss = 0.223065
I0428 20:14:33.249071 32697 solver.cpp:238]     Train net output #0: loss = 0.223065 (* 1 = 0.223065 loss)
I0428 20:14:33.249078 32697 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:33.368083 32697 solver.cpp:219] Iteration 600 (840.321 iter/s, 0.119002s/100 iters), loss = 0.231598
I0428 20:14:33.368125 32697 solver.cpp:238]     Train net output #0: loss = 0.231598 (* 1 = 0.231598 loss)
I0428 20:14:33.368132 32697 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:33.480156 32697 solver.cpp:219] Iteration 700 (892.702 iter/s, 0.112019s/100 iters), loss = 0.240923
I0428 20:14:33.480199 32697 solver.cpp:238]     Train net output #0: loss = 0.240923 (* 1 = 0.240923 loss)
I0428 20:14:33.480206 32697 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:33.592778 32697 solver.cpp:219] Iteration 800 (888.341 iter/s, 0.112569s/100 iters), loss = 0.277755
I0428 20:14:33.592844 32697 solver.cpp:238]     Train net output #0: loss = 0.277755 (* 1 = 0.277755 loss)
I0428 20:14:33.592851 32697 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:33.704866 32697 solver.cpp:219] Iteration 900 (892.63 iter/s, 0.112028s/100 iters), loss = 0.38544
I0428 20:14:33.704907 32697 solver.cpp:238]     Train net output #0: loss = 0.38544 (* 1 = 0.38544 loss)
I0428 20:14:33.704913 32697 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:33.742571 32703 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:33.816220 32697 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:33.817207 32697 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:33.817884 32697 solver.cpp:311] Iteration 1000, loss = 0.265323
I0428 20:14:33.817903 32697 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:33.894701 32704 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:33.895473 32697 solver.cpp:398]     Test net output #0: accuracy = 0.9508
I0428 20:14:33.895493 32697 solver.cpp:398]     Test net output #1: loss = 0.156366 (* 1 = 0.156366 loss)
I0428 20:14:33.895498 32697 solver.cpp:316] Optimization Done.
I0428 20:14:33.895500 32697 caffe.cpp:259] Optimization Done.
