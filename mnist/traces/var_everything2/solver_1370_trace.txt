I0428 20:20:46.194437  1626 caffe.cpp:218] Using GPUs 0
I0428 20:20:46.231817  1626 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:20:46.744524  1626 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1370.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:20:46.744671  1626 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1370.prototxt
I0428 20:20:46.745062  1626 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:20:46.745081  1626 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:20:46.745170  1626 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:20:46.745249  1626 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:46.745352  1626 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:20:46.745375  1626 net.cpp:86] Creating Layer mnist
I0428 20:20:46.745384  1626 net.cpp:382] mnist -> data
I0428 20:20:46.745407  1626 net.cpp:382] mnist -> label
I0428 20:20:46.746498  1626 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:20:46.748961  1626 net.cpp:124] Setting up mnist
I0428 20:20:46.748980  1626 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:20:46.748986  1626 net.cpp:131] Top shape: 64 (64)
I0428 20:20:46.748988  1626 net.cpp:139] Memory required for data: 200960
I0428 20:20:46.748996  1626 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:46.749033  1626 net.cpp:86] Creating Layer conv0
I0428 20:20:46.749038  1626 net.cpp:408] conv0 <- data
I0428 20:20:46.749052  1626 net.cpp:382] conv0 -> conv0
I0428 20:20:47.035918  1626 net.cpp:124] Setting up conv0
I0428 20:20:47.035945  1626 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:20:47.035949  1626 net.cpp:139] Memory required for data: 7573760
I0428 20:20:47.035981  1626 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:47.035995  1626 net.cpp:86] Creating Layer pool0
I0428 20:20:47.035998  1626 net.cpp:408] pool0 <- conv0
I0428 20:20:47.036005  1626 net.cpp:382] pool0 -> pool0
I0428 20:20:47.036052  1626 net.cpp:124] Setting up pool0
I0428 20:20:47.036058  1626 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:20:47.036061  1626 net.cpp:139] Memory required for data: 9416960
I0428 20:20:47.036063  1626 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:47.036074  1626 net.cpp:86] Creating Layer conv1
I0428 20:20:47.036078  1626 net.cpp:408] conv1 <- pool0
I0428 20:20:47.036082  1626 net.cpp:382] conv1 -> conv1
I0428 20:20:47.038290  1626 net.cpp:124] Setting up conv1
I0428 20:20:47.038305  1626 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:20:47.038308  1626 net.cpp:139] Memory required for data: 10236160
I0428 20:20:47.038316  1626 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:47.038323  1626 net.cpp:86] Creating Layer pool1
I0428 20:20:47.038327  1626 net.cpp:408] pool1 <- conv1
I0428 20:20:47.038332  1626 net.cpp:382] pool1 -> pool1
I0428 20:20:47.038368  1626 net.cpp:124] Setting up pool1
I0428 20:20:47.038374  1626 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:20:47.038377  1626 net.cpp:139] Memory required for data: 10440960
I0428 20:20:47.038379  1626 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:47.038386  1626 net.cpp:86] Creating Layer ip1
I0428 20:20:47.038389  1626 net.cpp:408] ip1 <- pool1
I0428 20:20:47.038393  1626 net.cpp:382] ip1 -> ip1
I0428 20:20:47.039342  1626 net.cpp:124] Setting up ip1
I0428 20:20:47.039355  1626 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:47.039360  1626 net.cpp:139] Memory required for data: 10443520
I0428 20:20:47.039366  1626 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:47.039372  1626 net.cpp:86] Creating Layer relu1
I0428 20:20:47.039376  1626 net.cpp:408] relu1 <- ip1
I0428 20:20:47.039381  1626 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:47.039553  1626 net.cpp:124] Setting up relu1
I0428 20:20:47.039562  1626 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:47.039566  1626 net.cpp:139] Memory required for data: 10446080
I0428 20:20:47.039568  1626 layer_factory.hpp:77] Creating layer ip2
I0428 20:20:47.039575  1626 net.cpp:86] Creating Layer ip2
I0428 20:20:47.039578  1626 net.cpp:408] ip2 <- ip1
I0428 20:20:47.039583  1626 net.cpp:382] ip2 -> ip2
I0428 20:20:47.039676  1626 net.cpp:124] Setting up ip2
I0428 20:20:47.039683  1626 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:47.039686  1626 net.cpp:139] Memory required for data: 10448640
I0428 20:20:47.039691  1626 layer_factory.hpp:77] Creating layer relu2
I0428 20:20:47.039697  1626 net.cpp:86] Creating Layer relu2
I0428 20:20:47.039700  1626 net.cpp:408] relu2 <- ip2
I0428 20:20:47.039705  1626 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:20:47.040411  1626 net.cpp:124] Setting up relu2
I0428 20:20:47.040423  1626 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:47.040427  1626 net.cpp:139] Memory required for data: 10451200
I0428 20:20:47.040431  1626 layer_factory.hpp:77] Creating layer loss
I0428 20:20:47.040436  1626 net.cpp:86] Creating Layer loss
I0428 20:20:47.040439  1626 net.cpp:408] loss <- ip2
I0428 20:20:47.040444  1626 net.cpp:408] loss <- label
I0428 20:20:47.040449  1626 net.cpp:382] loss -> loss
I0428 20:20:47.040467  1626 layer_factory.hpp:77] Creating layer loss
I0428 20:20:47.040693  1626 net.cpp:124] Setting up loss
I0428 20:20:47.040701  1626 net.cpp:131] Top shape: (1)
I0428 20:20:47.040704  1626 net.cpp:134]     with loss weight 1
I0428 20:20:47.040719  1626 net.cpp:139] Memory required for data: 10451204
I0428 20:20:47.040721  1626 net.cpp:200] loss needs backward computation.
I0428 20:20:47.040725  1626 net.cpp:200] relu2 needs backward computation.
I0428 20:20:47.040729  1626 net.cpp:200] ip2 needs backward computation.
I0428 20:20:47.040731  1626 net.cpp:200] relu1 needs backward computation.
I0428 20:20:47.040733  1626 net.cpp:200] ip1 needs backward computation.
I0428 20:20:47.040747  1626 net.cpp:200] pool1 needs backward computation.
I0428 20:20:47.040750  1626 net.cpp:200] conv1 needs backward computation.
I0428 20:20:47.040753  1626 net.cpp:200] pool0 needs backward computation.
I0428 20:20:47.040756  1626 net.cpp:200] conv0 needs backward computation.
I0428 20:20:47.040760  1626 net.cpp:202] mnist does not need backward computation.
I0428 20:20:47.040762  1626 net.cpp:244] This network produces output loss
I0428 20:20:47.040771  1626 net.cpp:257] Network initialization done.
I0428 20:20:47.041107  1626 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1370.prototxt
I0428 20:20:47.041134  1626 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:20:47.041234  1626 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:20:47.041326  1626 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:47.041373  1626 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:20:47.041384  1626 net.cpp:86] Creating Layer mnist
I0428 20:20:47.041389  1626 net.cpp:382] mnist -> data
I0428 20:20:47.041398  1626 net.cpp:382] mnist -> label
I0428 20:20:47.041496  1626 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:20:47.043339  1626 net.cpp:124] Setting up mnist
I0428 20:20:47.043354  1626 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:20:47.043359  1626 net.cpp:131] Top shape: 100 (100)
I0428 20:20:47.043361  1626 net.cpp:139] Memory required for data: 314000
I0428 20:20:47.043365  1626 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:20:47.043372  1626 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:20:47.043375  1626 net.cpp:408] label_mnist_1_split <- label
I0428 20:20:47.043380  1626 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:20:47.043386  1626 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:20:47.043442  1626 net.cpp:124] Setting up label_mnist_1_split
I0428 20:20:47.043447  1626 net.cpp:131] Top shape: 100 (100)
I0428 20:20:47.043452  1626 net.cpp:131] Top shape: 100 (100)
I0428 20:20:47.043453  1626 net.cpp:139] Memory required for data: 314800
I0428 20:20:47.043457  1626 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:47.043465  1626 net.cpp:86] Creating Layer conv0
I0428 20:20:47.043468  1626 net.cpp:408] conv0 <- data
I0428 20:20:47.043473  1626 net.cpp:382] conv0 -> conv0
I0428 20:20:47.045162  1626 net.cpp:124] Setting up conv0
I0428 20:20:47.045176  1626 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:20:47.045181  1626 net.cpp:139] Memory required for data: 11834800
I0428 20:20:47.045188  1626 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:47.045195  1626 net.cpp:86] Creating Layer pool0
I0428 20:20:47.045198  1626 net.cpp:408] pool0 <- conv0
I0428 20:20:47.045203  1626 net.cpp:382] pool0 -> pool0
I0428 20:20:47.045240  1626 net.cpp:124] Setting up pool0
I0428 20:20:47.045245  1626 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:20:47.045248  1626 net.cpp:139] Memory required for data: 14714800
I0428 20:20:47.045251  1626 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:47.045259  1626 net.cpp:86] Creating Layer conv1
I0428 20:20:47.045262  1626 net.cpp:408] conv1 <- pool0
I0428 20:20:47.045267  1626 net.cpp:382] conv1 -> conv1
I0428 20:20:47.047132  1626 net.cpp:124] Setting up conv1
I0428 20:20:47.047144  1626 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:20:47.047148  1626 net.cpp:139] Memory required for data: 15994800
I0428 20:20:47.047157  1626 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:47.047163  1626 net.cpp:86] Creating Layer pool1
I0428 20:20:47.047165  1626 net.cpp:408] pool1 <- conv1
I0428 20:20:47.047171  1626 net.cpp:382] pool1 -> pool1
I0428 20:20:47.047209  1626 net.cpp:124] Setting up pool1
I0428 20:20:47.047215  1626 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:20:47.047219  1626 net.cpp:139] Memory required for data: 16314800
I0428 20:20:47.047222  1626 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:47.047227  1626 net.cpp:86] Creating Layer ip1
I0428 20:20:47.047230  1626 net.cpp:408] ip1 <- pool1
I0428 20:20:47.047235  1626 net.cpp:382] ip1 -> ip1
I0428 20:20:47.047405  1626 net.cpp:124] Setting up ip1
I0428 20:20:47.047425  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.047428  1626 net.cpp:139] Memory required for data: 16318800
I0428 20:20:47.047435  1626 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:47.047441  1626 net.cpp:86] Creating Layer relu1
I0428 20:20:47.047444  1626 net.cpp:408] relu1 <- ip1
I0428 20:20:47.047448  1626 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:47.047610  1626 net.cpp:124] Setting up relu1
I0428 20:20:47.047617  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.047621  1626 net.cpp:139] Memory required for data: 16322800
I0428 20:20:47.047624  1626 layer_factory.hpp:77] Creating layer ip2
I0428 20:20:47.047631  1626 net.cpp:86] Creating Layer ip2
I0428 20:20:47.047636  1626 net.cpp:408] ip2 <- ip1
I0428 20:20:47.047641  1626 net.cpp:382] ip2 -> ip2
I0428 20:20:47.047736  1626 net.cpp:124] Setting up ip2
I0428 20:20:47.047744  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.047746  1626 net.cpp:139] Memory required for data: 16326800
I0428 20:20:47.047752  1626 layer_factory.hpp:77] Creating layer relu2
I0428 20:20:47.047757  1626 net.cpp:86] Creating Layer relu2
I0428 20:20:47.047760  1626 net.cpp:408] relu2 <- ip2
I0428 20:20:47.047765  1626 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:20:47.047924  1626 net.cpp:124] Setting up relu2
I0428 20:20:47.047932  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.047935  1626 net.cpp:139] Memory required for data: 16330800
I0428 20:20:47.047940  1626 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:20:47.047943  1626 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:20:47.047953  1626 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:20:47.047958  1626 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:20:47.047974  1626 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:20:47.048009  1626 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:20:47.048017  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.048020  1626 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:47.048023  1626 net.cpp:139] Memory required for data: 16338800
I0428 20:20:47.048025  1626 layer_factory.hpp:77] Creating layer accuracy
I0428 20:20:47.048030  1626 net.cpp:86] Creating Layer accuracy
I0428 20:20:47.048033  1626 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:20:47.048038  1626 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:20:47.048043  1626 net.cpp:382] accuracy -> accuracy
I0428 20:20:47.048049  1626 net.cpp:124] Setting up accuracy
I0428 20:20:47.048053  1626 net.cpp:131] Top shape: (1)
I0428 20:20:47.048055  1626 net.cpp:139] Memory required for data: 16338804
I0428 20:20:47.048058  1626 layer_factory.hpp:77] Creating layer loss
I0428 20:20:47.048063  1626 net.cpp:86] Creating Layer loss
I0428 20:20:47.048065  1626 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:20:47.048069  1626 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:20:47.048074  1626 net.cpp:382] loss -> loss
I0428 20:20:47.048079  1626 layer_factory.hpp:77] Creating layer loss
I0428 20:20:47.048370  1626 net.cpp:124] Setting up loss
I0428 20:20:47.048379  1626 net.cpp:131] Top shape: (1)
I0428 20:20:47.048383  1626 net.cpp:134]     with loss weight 1
I0428 20:20:47.048389  1626 net.cpp:139] Memory required for data: 16338808
I0428 20:20:47.048393  1626 net.cpp:200] loss needs backward computation.
I0428 20:20:47.048398  1626 net.cpp:202] accuracy does not need backward computation.
I0428 20:20:47.048400  1626 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:20:47.048404  1626 net.cpp:200] relu2 needs backward computation.
I0428 20:20:47.048406  1626 net.cpp:200] ip2 needs backward computation.
I0428 20:20:47.048410  1626 net.cpp:200] relu1 needs backward computation.
I0428 20:20:47.048413  1626 net.cpp:200] ip1 needs backward computation.
I0428 20:20:47.048415  1626 net.cpp:200] pool1 needs backward computation.
I0428 20:20:47.048419  1626 net.cpp:200] conv1 needs backward computation.
I0428 20:20:47.048422  1626 net.cpp:200] pool0 needs backward computation.
I0428 20:20:47.048425  1626 net.cpp:200] conv0 needs backward computation.
I0428 20:20:47.048429  1626 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:20:47.048432  1626 net.cpp:202] mnist does not need backward computation.
I0428 20:20:47.048435  1626 net.cpp:244] This network produces output accuracy
I0428 20:20:47.048439  1626 net.cpp:244] This network produces output loss
I0428 20:20:47.048454  1626 net.cpp:257] Network initialization done.
I0428 20:20:47.048492  1626 solver.cpp:56] Solver scaffolding done.
I0428 20:20:47.048765  1626 caffe.cpp:248] Starting Optimization
I0428 20:20:47.048773  1626 solver.cpp:273] Solving LeNet
I0428 20:20:47.048774  1626 solver.cpp:274] Learning Rate Policy: inv
I0428 20:20:47.048975  1626 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:20:47.056108  1626 blocking_queue.cpp:49] Waiting for data
I0428 20:20:47.129204  1633 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:47.130154  1626 solver.cpp:398]     Test net output #0: accuracy = 0.1212
I0428 20:20:47.130188  1626 solver.cpp:398]     Test net output #1: loss = 2.32135 (* 1 = 2.32135 loss)
I0428 20:20:47.134569  1626 solver.cpp:219] Iteration 0 (0 iter/s, 0.0857705s/100 iters), loss = 2.31664
I0428 20:20:47.134590  1626 solver.cpp:238]     Train net output #0: loss = 2.31664 (* 1 = 2.31664 loss)
I0428 20:20:47.134601  1626 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:20:47.295006  1626 solver.cpp:219] Iteration 100 (623.436 iter/s, 0.160401s/100 iters), loss = 0.911761
I0428 20:20:47.295032  1626 solver.cpp:238]     Train net output #0: loss = 0.911761 (* 1 = 0.911761 loss)
I0428 20:20:47.295038  1626 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:20:47.442082  1626 solver.cpp:219] Iteration 200 (680.096 iter/s, 0.147038s/100 iters), loss = 0.721311
I0428 20:20:47.442121  1626 solver.cpp:238]     Train net output #0: loss = 0.721311 (* 1 = 0.721311 loss)
I0428 20:20:47.442126  1626 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:20:47.598018  1626 solver.cpp:219] Iteration 300 (641.497 iter/s, 0.155885s/100 iters), loss = 0.455142
I0428 20:20:47.598042  1626 solver.cpp:238]     Train net output #0: loss = 0.455142 (* 1 = 0.455142 loss)
I0428 20:20:47.598047  1626 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:20:47.747431  1626 solver.cpp:219] Iteration 400 (669.447 iter/s, 0.149377s/100 iters), loss = 0.191129
I0428 20:20:47.747455  1626 solver.cpp:238]     Train net output #0: loss = 0.191129 (* 1 = 0.191129 loss)
I0428 20:20:47.747462  1626 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:20:47.894503  1626 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:20:47.973412  1633 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:47.974405  1626 solver.cpp:398]     Test net output #0: accuracy = 0.8668
I0428 20:20:47.974439  1626 solver.cpp:398]     Test net output #1: loss = 0.346458 (* 1 = 0.346458 loss)
I0428 20:20:47.975983  1626 solver.cpp:219] Iteration 500 (437.636 iter/s, 0.2285s/100 iters), loss = 0.247653
I0428 20:20:47.976022  1626 solver.cpp:238]     Train net output #0: loss = 0.247653 (* 1 = 0.247653 loss)
I0428 20:20:47.976027  1626 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:20:48.135032  1626 solver.cpp:219] Iteration 600 (628.872 iter/s, 0.159015s/100 iters), loss = 0.374366
I0428 20:20:48.135073  1626 solver.cpp:238]     Train net output #0: loss = 0.374366 (* 1 = 0.374366 loss)
I0428 20:20:48.135094  1626 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:20:48.282896  1626 solver.cpp:219] Iteration 700 (676.468 iter/s, 0.147827s/100 iters), loss = 0.419037
I0428 20:20:48.282935  1626 solver.cpp:238]     Train net output #0: loss = 0.419037 (* 1 = 0.419037 loss)
I0428 20:20:48.282941  1626 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:20:48.431584  1626 solver.cpp:219] Iteration 800 (672.712 iter/s, 0.148652s/100 iters), loss = 0.493244
I0428 20:20:48.431623  1626 solver.cpp:238]     Train net output #0: loss = 0.493244 (* 1 = 0.493244 loss)
I0428 20:20:48.431629  1626 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:20:48.579756  1626 solver.cpp:219] Iteration 900 (675.065 iter/s, 0.148134s/100 iters), loss = 0.367812
I0428 20:20:48.579782  1626 solver.cpp:238]     Train net output #0: loss = 0.367812 (* 1 = 0.367812 loss)
I0428 20:20:48.579788  1626 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:20:48.628986  1632 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:48.725070  1626 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:20:48.726989  1626 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:20:48.728273  1626 solver.cpp:311] Iteration 1000, loss = 0.39924
I0428 20:20:48.728289  1626 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:20:48.806318  1633 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:48.807287  1626 solver.cpp:398]     Test net output #0: accuracy = 0.8799
I0428 20:20:48.807323  1626 solver.cpp:398]     Test net output #1: loss = 0.299796 (* 1 = 0.299796 loss)
I0428 20:20:48.807329  1626 solver.cpp:316] Optimization Done.
I0428 20:20:48.807332  1626 caffe.cpp:259] Optimization Done.
