I0428 19:44:37.182325 25641 caffe.cpp:218] Using GPUs 0
I0428 19:44:37.222187 25641 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:37.678455 25641 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test452.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:37.678601 25641 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test452.prototxt
I0428 19:44:37.678954 25641 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:37.678984 25641 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:37.679059 25641 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:37.679116 25641 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:37.679198 25641 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:37.679216 25641 net.cpp:86] Creating Layer mnist
I0428 19:44:37.679222 25641 net.cpp:382] mnist -> data
I0428 19:44:37.679240 25641 net.cpp:382] mnist -> label
I0428 19:44:37.680228 25641 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:37.682392 25641 net.cpp:124] Setting up mnist
I0428 19:44:37.682422 25641 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:37.682427 25641 net.cpp:131] Top shape: 64 (64)
I0428 19:44:37.682430 25641 net.cpp:139] Memory required for data: 200960
I0428 19:44:37.682436 25641 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:37.682449 25641 net.cpp:86] Creating Layer conv0
I0428 19:44:37.682466 25641 net.cpp:408] conv0 <- data
I0428 19:44:37.682476 25641 net.cpp:382] conv0 -> conv0
I0428 19:44:37.914607 25641 net.cpp:124] Setting up conv0
I0428 19:44:37.914631 25641 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:37.914635 25641 net.cpp:139] Memory required for data: 495872
I0428 19:44:37.914650 25641 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:37.914661 25641 net.cpp:86] Creating Layer pool0
I0428 19:44:37.914666 25641 net.cpp:408] pool0 <- conv0
I0428 19:44:37.914671 25641 net.cpp:382] pool0 -> pool0
I0428 19:44:37.914739 25641 net.cpp:124] Setting up pool0
I0428 19:44:37.914746 25641 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:37.914748 25641 net.cpp:139] Memory required for data: 569600
I0428 19:44:37.914752 25641 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:37.914762 25641 net.cpp:86] Creating Layer conv1
I0428 19:44:37.914764 25641 net.cpp:408] conv1 <- pool0
I0428 19:44:37.914769 25641 net.cpp:382] conv1 -> conv1
I0428 19:44:37.917484 25641 net.cpp:124] Setting up conv1
I0428 19:44:37.917520 25641 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:37.917524 25641 net.cpp:139] Memory required for data: 1388800
I0428 19:44:37.917532 25641 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:37.917541 25641 net.cpp:86] Creating Layer pool1
I0428 19:44:37.917546 25641 net.cpp:408] pool1 <- conv1
I0428 19:44:37.917551 25641 net.cpp:382] pool1 -> pool1
I0428 19:44:37.917587 25641 net.cpp:124] Setting up pool1
I0428 19:44:37.917592 25641 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:37.917594 25641 net.cpp:139] Memory required for data: 1593600
I0428 19:44:37.917598 25641 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:37.917605 25641 net.cpp:86] Creating Layer ip1
I0428 19:44:37.917608 25641 net.cpp:408] ip1 <- pool1
I0428 19:44:37.917613 25641 net.cpp:382] ip1 -> ip1
I0428 19:44:37.917829 25641 net.cpp:124] Setting up ip1
I0428 19:44:37.917837 25641 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:37.917840 25641 net.cpp:139] Memory required for data: 1600000
I0428 19:44:37.917847 25641 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:37.917855 25641 net.cpp:86] Creating Layer relu1
I0428 19:44:37.917857 25641 net.cpp:408] relu1 <- ip1
I0428 19:44:37.917861 25641 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:37.918015 25641 net.cpp:124] Setting up relu1
I0428 19:44:37.918025 25641 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:37.918027 25641 net.cpp:139] Memory required for data: 1606400
I0428 19:44:37.918030 25641 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:37.918037 25641 net.cpp:86] Creating Layer ip2
I0428 19:44:37.918040 25641 net.cpp:408] ip2 <- ip1
I0428 19:44:37.918045 25641 net.cpp:382] ip2 -> ip2
I0428 19:44:37.918148 25641 net.cpp:124] Setting up ip2
I0428 19:44:37.918154 25641 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:37.918156 25641 net.cpp:139] Memory required for data: 1608960
I0428 19:44:37.918162 25641 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:37.918167 25641 net.cpp:86] Creating Layer relu2
I0428 19:44:37.918170 25641 net.cpp:408] relu2 <- ip2
I0428 19:44:37.918174 25641 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:37.918925 25641 net.cpp:124] Setting up relu2
I0428 19:44:37.918936 25641 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:37.918954 25641 net.cpp:139] Memory required for data: 1611520
I0428 19:44:37.918957 25641 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:37.918964 25641 net.cpp:86] Creating Layer ip3
I0428 19:44:37.918967 25641 net.cpp:408] ip3 <- ip2
I0428 19:44:37.918974 25641 net.cpp:382] ip3 -> ip3
I0428 19:44:37.919085 25641 net.cpp:124] Setting up ip3
I0428 19:44:37.919095 25641 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:37.919097 25641 net.cpp:139] Memory required for data: 1614080
I0428 19:44:37.919106 25641 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:37.919111 25641 net.cpp:86] Creating Layer relu3
I0428 19:44:37.919113 25641 net.cpp:408] relu3 <- ip3
I0428 19:44:37.919117 25641 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:37.919283 25641 net.cpp:124] Setting up relu3
I0428 19:44:37.919291 25641 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:37.919293 25641 net.cpp:139] Memory required for data: 1616640
I0428 19:44:37.919296 25641 layer_factory.hpp:77] Creating layer loss
I0428 19:44:37.919302 25641 net.cpp:86] Creating Layer loss
I0428 19:44:37.919306 25641 net.cpp:408] loss <- ip3
I0428 19:44:37.919311 25641 net.cpp:408] loss <- label
I0428 19:44:37.919315 25641 net.cpp:382] loss -> loss
I0428 19:44:37.919332 25641 layer_factory.hpp:77] Creating layer loss
I0428 19:44:37.919559 25641 net.cpp:124] Setting up loss
I0428 19:44:37.919567 25641 net.cpp:131] Top shape: (1)
I0428 19:44:37.919570 25641 net.cpp:134]     with loss weight 1
I0428 19:44:37.919584 25641 net.cpp:139] Memory required for data: 1616644
I0428 19:44:37.919587 25641 net.cpp:200] loss needs backward computation.
I0428 19:44:37.919590 25641 net.cpp:200] relu3 needs backward computation.
I0428 19:44:37.919594 25641 net.cpp:200] ip3 needs backward computation.
I0428 19:44:37.919596 25641 net.cpp:200] relu2 needs backward computation.
I0428 19:44:37.919598 25641 net.cpp:200] ip2 needs backward computation.
I0428 19:44:37.919601 25641 net.cpp:200] relu1 needs backward computation.
I0428 19:44:37.919603 25641 net.cpp:200] ip1 needs backward computation.
I0428 19:44:37.919606 25641 net.cpp:200] pool1 needs backward computation.
I0428 19:44:37.919610 25641 net.cpp:200] conv1 needs backward computation.
I0428 19:44:37.919611 25641 net.cpp:200] pool0 needs backward computation.
I0428 19:44:37.919615 25641 net.cpp:200] conv0 needs backward computation.
I0428 19:44:37.919617 25641 net.cpp:202] mnist does not need backward computation.
I0428 19:44:37.919620 25641 net.cpp:244] This network produces output loss
I0428 19:44:37.919630 25641 net.cpp:257] Network initialization done.
I0428 19:44:37.919963 25641 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test452.prototxt
I0428 19:44:37.920004 25641 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:37.920096 25641 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:37.920187 25641 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:37.920227 25641 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:37.920240 25641 net.cpp:86] Creating Layer mnist
I0428 19:44:37.920245 25641 net.cpp:382] mnist -> data
I0428 19:44:37.920253 25641 net.cpp:382] mnist -> label
I0428 19:44:37.920333 25641 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:37.922346 25641 net.cpp:124] Setting up mnist
I0428 19:44:37.922374 25641 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:37.922380 25641 net.cpp:131] Top shape: 100 (100)
I0428 19:44:37.922384 25641 net.cpp:139] Memory required for data: 314000
I0428 19:44:37.922387 25641 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:37.922412 25641 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:37.922415 25641 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:37.922420 25641 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:37.922428 25641 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:37.922528 25641 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:37.922535 25641 net.cpp:131] Top shape: 100 (100)
I0428 19:44:37.922539 25641 net.cpp:131] Top shape: 100 (100)
I0428 19:44:37.922541 25641 net.cpp:139] Memory required for data: 314800
I0428 19:44:37.922544 25641 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:37.922554 25641 net.cpp:86] Creating Layer conv0
I0428 19:44:37.922557 25641 net.cpp:408] conv0 <- data
I0428 19:44:37.922564 25641 net.cpp:382] conv0 -> conv0
I0428 19:44:37.924070 25641 net.cpp:124] Setting up conv0
I0428 19:44:37.924100 25641 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:37.924103 25641 net.cpp:139] Memory required for data: 775600
I0428 19:44:37.924113 25641 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:37.924120 25641 net.cpp:86] Creating Layer pool0
I0428 19:44:37.924124 25641 net.cpp:408] pool0 <- conv0
I0428 19:44:37.924129 25641 net.cpp:382] pool0 -> pool0
I0428 19:44:37.924165 25641 net.cpp:124] Setting up pool0
I0428 19:44:37.924171 25641 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:37.924173 25641 net.cpp:139] Memory required for data: 890800
I0428 19:44:37.924176 25641 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:37.924185 25641 net.cpp:86] Creating Layer conv1
I0428 19:44:37.924188 25641 net.cpp:408] conv1 <- pool0
I0428 19:44:37.924196 25641 net.cpp:382] conv1 -> conv1
I0428 19:44:37.925953 25641 net.cpp:124] Setting up conv1
I0428 19:44:37.925982 25641 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:37.925987 25641 net.cpp:139] Memory required for data: 2170800
I0428 19:44:37.925994 25641 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:37.926002 25641 net.cpp:86] Creating Layer pool1
I0428 19:44:37.926021 25641 net.cpp:408] pool1 <- conv1
I0428 19:44:37.926028 25641 net.cpp:382] pool1 -> pool1
I0428 19:44:37.926066 25641 net.cpp:124] Setting up pool1
I0428 19:44:37.926072 25641 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:37.926075 25641 net.cpp:139] Memory required for data: 2490800
I0428 19:44:37.926079 25641 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:37.926086 25641 net.cpp:86] Creating Layer ip1
I0428 19:44:37.926090 25641 net.cpp:408] ip1 <- pool1
I0428 19:44:37.926095 25641 net.cpp:382] ip1 -> ip1
I0428 19:44:37.926316 25641 net.cpp:124] Setting up ip1
I0428 19:44:37.926327 25641 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:37.926355 25641 net.cpp:139] Memory required for data: 2500800
I0428 19:44:37.926362 25641 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:37.926368 25641 net.cpp:86] Creating Layer relu1
I0428 19:44:37.926372 25641 net.cpp:408] relu1 <- ip1
I0428 19:44:37.926375 25641 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:37.926610 25641 net.cpp:124] Setting up relu1
I0428 19:44:37.926621 25641 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:37.926625 25641 net.cpp:139] Memory required for data: 2510800
I0428 19:44:37.926628 25641 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:37.926635 25641 net.cpp:86] Creating Layer ip2
I0428 19:44:37.926638 25641 net.cpp:408] ip2 <- ip1
I0428 19:44:37.926645 25641 net.cpp:382] ip2 -> ip2
I0428 19:44:37.926755 25641 net.cpp:124] Setting up ip2
I0428 19:44:37.926764 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.926766 25641 net.cpp:139] Memory required for data: 2514800
I0428 19:44:37.926771 25641 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:37.926776 25641 net.cpp:86] Creating Layer relu2
I0428 19:44:37.926779 25641 net.cpp:408] relu2 <- ip2
I0428 19:44:37.926784 25641 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:37.926991 25641 net.cpp:124] Setting up relu2
I0428 19:44:37.927000 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.927003 25641 net.cpp:139] Memory required for data: 2518800
I0428 19:44:37.927006 25641 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:37.927013 25641 net.cpp:86] Creating Layer ip3
I0428 19:44:37.927016 25641 net.cpp:408] ip3 <- ip2
I0428 19:44:37.927021 25641 net.cpp:382] ip3 -> ip3
I0428 19:44:37.927135 25641 net.cpp:124] Setting up ip3
I0428 19:44:37.927144 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.927146 25641 net.cpp:139] Memory required for data: 2522800
I0428 19:44:37.927155 25641 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:37.927160 25641 net.cpp:86] Creating Layer relu3
I0428 19:44:37.927162 25641 net.cpp:408] relu3 <- ip3
I0428 19:44:37.927167 25641 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:37.928036 25641 net.cpp:124] Setting up relu3
I0428 19:44:37.928050 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.928066 25641 net.cpp:139] Memory required for data: 2526800
I0428 19:44:37.928069 25641 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:37.928092 25641 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:37.928094 25641 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:37.928099 25641 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:37.928105 25641 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:37.928144 25641 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:37.928151 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.928155 25641 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:37.928158 25641 net.cpp:139] Memory required for data: 2534800
I0428 19:44:37.928160 25641 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:37.928166 25641 net.cpp:86] Creating Layer accuracy
I0428 19:44:37.928169 25641 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:37.928174 25641 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:37.928179 25641 net.cpp:382] accuracy -> accuracy
I0428 19:44:37.928185 25641 net.cpp:124] Setting up accuracy
I0428 19:44:37.928189 25641 net.cpp:131] Top shape: (1)
I0428 19:44:37.928192 25641 net.cpp:139] Memory required for data: 2534804
I0428 19:44:37.928196 25641 layer_factory.hpp:77] Creating layer loss
I0428 19:44:37.928200 25641 net.cpp:86] Creating Layer loss
I0428 19:44:37.928203 25641 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:37.928207 25641 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:37.928212 25641 net.cpp:382] loss -> loss
I0428 19:44:37.928218 25641 layer_factory.hpp:77] Creating layer loss
I0428 19:44:37.928452 25641 net.cpp:124] Setting up loss
I0428 19:44:37.928462 25641 net.cpp:131] Top shape: (1)
I0428 19:44:37.928464 25641 net.cpp:134]     with loss weight 1
I0428 19:44:37.928470 25641 net.cpp:139] Memory required for data: 2534808
I0428 19:44:37.928483 25641 net.cpp:200] loss needs backward computation.
I0428 19:44:37.928486 25641 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:37.928490 25641 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:37.928493 25641 net.cpp:200] relu3 needs backward computation.
I0428 19:44:37.928496 25641 net.cpp:200] ip3 needs backward computation.
I0428 19:44:37.928498 25641 net.cpp:200] relu2 needs backward computation.
I0428 19:44:37.928503 25641 net.cpp:200] ip2 needs backward computation.
I0428 19:44:37.928504 25641 net.cpp:200] relu1 needs backward computation.
I0428 19:44:37.928508 25641 net.cpp:200] ip1 needs backward computation.
I0428 19:44:37.928510 25641 net.cpp:200] pool1 needs backward computation.
I0428 19:44:37.928514 25641 net.cpp:200] conv1 needs backward computation.
I0428 19:44:37.928517 25641 net.cpp:200] pool0 needs backward computation.
I0428 19:44:37.928520 25641 net.cpp:200] conv0 needs backward computation.
I0428 19:44:37.928524 25641 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:37.928527 25641 net.cpp:202] mnist does not need backward computation.
I0428 19:44:37.928530 25641 net.cpp:244] This network produces output accuracy
I0428 19:44:37.928534 25641 net.cpp:244] This network produces output loss
I0428 19:44:37.928545 25641 net.cpp:257] Network initialization done.
I0428 19:44:37.928584 25641 solver.cpp:56] Solver scaffolding done.
I0428 19:44:37.928951 25641 caffe.cpp:248] Starting Optimization
I0428 19:44:37.928957 25641 solver.cpp:273] Solving LeNet
I0428 19:44:37.928961 25641 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:37.929162 25641 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:37.933841 25641 blocking_queue.cpp:49] Waiting for data
I0428 19:44:37.984751 25648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:37.985299 25641 solver.cpp:398]     Test net output #0: accuracy = 0.1219
I0428 19:44:37.985333 25641 solver.cpp:398]     Test net output #1: loss = 2.29929 (* 1 = 2.29929 loss)
I0428 19:44:37.987393 25641 solver.cpp:219] Iteration 0 (-1.88864e-31 iter/s, 0.0583967s/100 iters), loss = 2.29045
I0428 19:44:37.987432 25641 solver.cpp:238]     Train net output #0: loss = 2.29045 (* 1 = 2.29045 loss)
I0428 19:44:37.987443 25641 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:38.090190 25641 solver.cpp:219] Iteration 100 (973.147 iter/s, 0.102759s/100 iters), loss = 0.896618
I0428 19:44:38.090232 25641 solver.cpp:238]     Train net output #0: loss = 0.896618 (* 1 = 0.896618 loss)
I0428 19:44:38.090239 25641 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:38.198104 25641 solver.cpp:219] Iteration 200 (927.004 iter/s, 0.107874s/100 iters), loss = 0.85022
I0428 19:44:38.198143 25641 solver.cpp:238]     Train net output #0: loss = 0.85022 (* 1 = 0.85022 loss)
I0428 19:44:38.198153 25641 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:38.306211 25641 solver.cpp:219] Iteration 300 (925.406 iter/s, 0.108061s/100 iters), loss = 0.464803
I0428 19:44:38.306243 25641 solver.cpp:238]     Train net output #0: loss = 0.464803 (* 1 = 0.464803 loss)
I0428 19:44:38.306251 25641 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:38.412230 25641 solver.cpp:219] Iteration 400 (943.602 iter/s, 0.105977s/100 iters), loss = 0.443359
I0428 19:44:38.412259 25641 solver.cpp:238]     Train net output #0: loss = 0.443359 (* 1 = 0.443359 loss)
I0428 19:44:38.412267 25641 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:38.523221 25641 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:38.581648 25648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:38.582211 25641 solver.cpp:398]     Test net output #0: accuracy = 0.8512
I0428 19:44:38.582247 25641 solver.cpp:398]     Test net output #1: loss = 0.425475 (* 1 = 0.425475 loss)
I0428 19:44:38.583405 25641 solver.cpp:219] Iteration 500 (584.345 iter/s, 0.171132s/100 iters), loss = 0.332025
I0428 19:44:38.583446 25641 solver.cpp:238]     Train net output #0: loss = 0.332025 (* 1 = 0.332025 loss)
I0428 19:44:38.583472 25641 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:38.691604 25641 solver.cpp:219] Iteration 600 (924.557 iter/s, 0.10816s/100 iters), loss = 0.533976
I0428 19:44:38.691634 25641 solver.cpp:238]     Train net output #0: loss = 0.533977 (* 1 = 0.533977 loss)
I0428 19:44:38.691642 25641 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:38.801053 25641 solver.cpp:219] Iteration 700 (914.059 iter/s, 0.109402s/100 iters), loss = 0.312885
I0428 19:44:38.801107 25641 solver.cpp:238]     Train net output #0: loss = 0.312885 (* 1 = 0.312885 loss)
I0428 19:44:38.801122 25641 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:38.917709 25641 solver.cpp:219] Iteration 800 (857.68 iter/s, 0.116594s/100 iters), loss = 0.43335
I0428 19:44:38.917743 25641 solver.cpp:238]     Train net output #0: loss = 0.43335 (* 1 = 0.43335 loss)
I0428 19:44:38.917752 25641 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:39.026935 25641 solver.cpp:219] Iteration 900 (915.911 iter/s, 0.109181s/100 iters), loss = 0.635523
I0428 19:44:39.026970 25641 solver.cpp:238]     Train net output #0: loss = 0.635523 (* 1 = 0.635523 loss)
I0428 19:44:39.026978 25641 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:39.064388 25647 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:39.135080 25641 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:39.136344 25641 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:39.137025 25641 solver.cpp:311] Iteration 1000, loss = 0.393344
I0428 19:44:39.137042 25641 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:39.211292 25648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:39.211805 25641 solver.cpp:398]     Test net output #0: accuracy = 0.868
I0428 19:44:39.211827 25641 solver.cpp:398]     Test net output #1: loss = 0.351771 (* 1 = 0.351771 loss)
I0428 19:44:39.211839 25641 solver.cpp:316] Optimization Done.
I0428 19:44:39.211843 25641 caffe.cpp:259] Optimization Done.
