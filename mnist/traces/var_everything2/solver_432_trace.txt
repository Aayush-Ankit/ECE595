I0428 19:43:49.612342 25462 caffe.cpp:218] Using GPUs 0
I0428 19:43:49.653491 25462 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:43:50.173104 25462 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test432.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:43:50.173271 25462 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test432.prototxt
I0428 19:43:50.173643 25462 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:43:50.173666 25462 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:43:50.173761 25462 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:43:50.173862 25462 layer_factory.hpp:77] Creating layer mnist
I0428 19:43:50.173996 25462 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:43:50.174029 25462 net.cpp:86] Creating Layer mnist
I0428 19:43:50.174041 25462 net.cpp:382] mnist -> data
I0428 19:43:50.174073 25462 net.cpp:382] mnist -> label
I0428 19:43:50.175303 25462 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:43:50.177781 25462 net.cpp:124] Setting up mnist
I0428 19:43:50.177803 25462 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:43:50.177812 25462 net.cpp:131] Top shape: 64 (64)
I0428 19:43:50.177819 25462 net.cpp:139] Memory required for data: 200960
I0428 19:43:50.177830 25462 layer_factory.hpp:77] Creating layer conv0
I0428 19:43:50.177852 25462 net.cpp:86] Creating Layer conv0
I0428 19:43:50.177863 25462 net.cpp:408] conv0 <- data
I0428 19:43:50.177881 25462 net.cpp:382] conv0 -> conv0
I0428 19:43:50.462267 25462 net.cpp:124] Setting up conv0
I0428 19:43:50.462296 25462 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:43:50.462302 25462 net.cpp:139] Memory required for data: 495872
I0428 19:43:50.462347 25462 layer_factory.hpp:77] Creating layer pool0
I0428 19:43:50.462365 25462 net.cpp:86] Creating Layer pool0
I0428 19:43:50.462373 25462 net.cpp:408] pool0 <- conv0
I0428 19:43:50.462381 25462 net.cpp:382] pool0 -> pool0
I0428 19:43:50.462433 25462 net.cpp:124] Setting up pool0
I0428 19:43:50.462442 25462 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:43:50.462447 25462 net.cpp:139] Memory required for data: 569600
I0428 19:43:50.462452 25462 layer_factory.hpp:77] Creating layer conv1
I0428 19:43:50.462467 25462 net.cpp:86] Creating Layer conv1
I0428 19:43:50.462473 25462 net.cpp:408] conv1 <- pool0
I0428 19:43:50.462482 25462 net.cpp:382] conv1 -> conv1
I0428 19:43:50.465231 25462 net.cpp:124] Setting up conv1
I0428 19:43:50.465247 25462 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:43:50.465253 25462 net.cpp:139] Memory required for data: 1388800
I0428 19:43:50.465266 25462 layer_factory.hpp:77] Creating layer pool1
I0428 19:43:50.465277 25462 net.cpp:86] Creating Layer pool1
I0428 19:43:50.465283 25462 net.cpp:408] pool1 <- conv1
I0428 19:43:50.465291 25462 net.cpp:382] pool1 -> pool1
I0428 19:43:50.465334 25462 net.cpp:124] Setting up pool1
I0428 19:43:50.465343 25462 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:43:50.465348 25462 net.cpp:139] Memory required for data: 1593600
I0428 19:43:50.465353 25462 layer_factory.hpp:77] Creating layer ip1
I0428 19:43:50.465364 25462 net.cpp:86] Creating Layer ip1
I0428 19:43:50.465369 25462 net.cpp:408] ip1 <- pool1
I0428 19:43:50.465378 25462 net.cpp:382] ip1 -> ip1
I0428 19:43:50.466399 25462 net.cpp:124] Setting up ip1
I0428 19:43:50.466414 25462 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:50.466420 25462 net.cpp:139] Memory required for data: 1596160
I0428 19:43:50.466434 25462 layer_factory.hpp:77] Creating layer relu1
I0428 19:43:50.466444 25462 net.cpp:86] Creating Layer relu1
I0428 19:43:50.466450 25462 net.cpp:408] relu1 <- ip1
I0428 19:43:50.466459 25462 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:43:50.466678 25462 net.cpp:124] Setting up relu1
I0428 19:43:50.466688 25462 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:50.466693 25462 net.cpp:139] Memory required for data: 1598720
I0428 19:43:50.466698 25462 layer_factory.hpp:77] Creating layer ip2
I0428 19:43:50.466708 25462 net.cpp:86] Creating Layer ip2
I0428 19:43:50.466713 25462 net.cpp:408] ip2 <- ip1
I0428 19:43:50.466722 25462 net.cpp:382] ip2 -> ip2
I0428 19:43:50.466821 25462 net.cpp:124] Setting up ip2
I0428 19:43:50.466830 25462 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:50.466835 25462 net.cpp:139] Memory required for data: 1601280
I0428 19:43:50.466843 25462 layer_factory.hpp:77] Creating layer relu2
I0428 19:43:50.466852 25462 net.cpp:86] Creating Layer relu2
I0428 19:43:50.466859 25462 net.cpp:408] relu2 <- ip2
I0428 19:43:50.466866 25462 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:43:50.467579 25462 net.cpp:124] Setting up relu2
I0428 19:43:50.467592 25462 net.cpp:131] Top shape: 64 10 (640)
I0428 19:43:50.467598 25462 net.cpp:139] Memory required for data: 1603840
I0428 19:43:50.467603 25462 layer_factory.hpp:77] Creating layer loss
I0428 19:43:50.467613 25462 net.cpp:86] Creating Layer loss
I0428 19:43:50.467618 25462 net.cpp:408] loss <- ip2
I0428 19:43:50.467641 25462 net.cpp:408] loss <- label
I0428 19:43:50.467666 25462 net.cpp:382] loss -> loss
I0428 19:43:50.467710 25462 layer_factory.hpp:77] Creating layer loss
I0428 19:43:50.467970 25462 net.cpp:124] Setting up loss
I0428 19:43:50.467983 25462 net.cpp:131] Top shape: (1)
I0428 19:43:50.467988 25462 net.cpp:134]     with loss weight 1
I0428 19:43:50.468009 25462 net.cpp:139] Memory required for data: 1603844
I0428 19:43:50.468016 25462 net.cpp:200] loss needs backward computation.
I0428 19:43:50.468024 25462 net.cpp:200] relu2 needs backward computation.
I0428 19:43:50.468029 25462 net.cpp:200] ip2 needs backward computation.
I0428 19:43:50.468034 25462 net.cpp:200] relu1 needs backward computation.
I0428 19:43:50.468039 25462 net.cpp:200] ip1 needs backward computation.
I0428 19:43:50.468060 25462 net.cpp:200] pool1 needs backward computation.
I0428 19:43:50.468065 25462 net.cpp:200] conv1 needs backward computation.
I0428 19:43:50.468086 25462 net.cpp:200] pool0 needs backward computation.
I0428 19:43:50.468091 25462 net.cpp:200] conv0 needs backward computation.
I0428 19:43:50.468112 25462 net.cpp:202] mnist does not need backward computation.
I0428 19:43:50.468132 25462 net.cpp:244] This network produces output loss
I0428 19:43:50.468144 25462 net.cpp:257] Network initialization done.
I0428 19:43:50.468428 25462 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test432.prototxt
I0428 19:43:50.468461 25462 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:43:50.468562 25462 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:43:50.468658 25462 layer_factory.hpp:77] Creating layer mnist
I0428 19:43:50.468716 25462 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:43:50.468739 25462 net.cpp:86] Creating Layer mnist
I0428 19:43:50.468745 25462 net.cpp:382] mnist -> data
I0428 19:43:50.468757 25462 net.cpp:382] mnist -> label
I0428 19:43:50.468968 25462 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:43:50.471091 25462 net.cpp:124] Setting up mnist
I0428 19:43:50.471122 25462 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:43:50.471129 25462 net.cpp:131] Top shape: 100 (100)
I0428 19:43:50.471134 25462 net.cpp:139] Memory required for data: 314000
I0428 19:43:50.471140 25462 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:43:50.471150 25462 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:43:50.471156 25462 net.cpp:408] label_mnist_1_split <- label
I0428 19:43:50.471164 25462 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:43:50.471174 25462 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:43:50.471266 25462 net.cpp:124] Setting up label_mnist_1_split
I0428 19:43:50.471284 25462 net.cpp:131] Top shape: 100 (100)
I0428 19:43:50.471292 25462 net.cpp:131] Top shape: 100 (100)
I0428 19:43:50.471297 25462 net.cpp:139] Memory required for data: 314800
I0428 19:43:50.471302 25462 layer_factory.hpp:77] Creating layer conv0
I0428 19:43:50.471314 25462 net.cpp:86] Creating Layer conv0
I0428 19:43:50.471320 25462 net.cpp:408] conv0 <- data
I0428 19:43:50.471329 25462 net.cpp:382] conv0 -> conv0
I0428 19:43:50.472980 25462 net.cpp:124] Setting up conv0
I0428 19:43:50.472997 25462 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:43:50.473003 25462 net.cpp:139] Memory required for data: 775600
I0428 19:43:50.473018 25462 layer_factory.hpp:77] Creating layer pool0
I0428 19:43:50.473028 25462 net.cpp:86] Creating Layer pool0
I0428 19:43:50.473034 25462 net.cpp:408] pool0 <- conv0
I0428 19:43:50.473043 25462 net.cpp:382] pool0 -> pool0
I0428 19:43:50.473086 25462 net.cpp:124] Setting up pool0
I0428 19:43:50.473095 25462 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:43:50.473101 25462 net.cpp:139] Memory required for data: 890800
I0428 19:43:50.473106 25462 layer_factory.hpp:77] Creating layer conv1
I0428 19:43:50.473121 25462 net.cpp:86] Creating Layer conv1
I0428 19:43:50.473142 25462 net.cpp:408] conv1 <- pool0
I0428 19:43:50.473152 25462 net.cpp:382] conv1 -> conv1
I0428 19:43:50.474761 25462 net.cpp:124] Setting up conv1
I0428 19:43:50.474789 25462 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:43:50.474797 25462 net.cpp:139] Memory required for data: 2170800
I0428 19:43:50.474810 25462 layer_factory.hpp:77] Creating layer pool1
I0428 19:43:50.474820 25462 net.cpp:86] Creating Layer pool1
I0428 19:43:50.474827 25462 net.cpp:408] pool1 <- conv1
I0428 19:43:50.474835 25462 net.cpp:382] pool1 -> pool1
I0428 19:43:50.474879 25462 net.cpp:124] Setting up pool1
I0428 19:43:50.474887 25462 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:43:50.474894 25462 net.cpp:139] Memory required for data: 2490800
I0428 19:43:50.474898 25462 layer_factory.hpp:77] Creating layer ip1
I0428 19:43:50.474908 25462 net.cpp:86] Creating Layer ip1
I0428 19:43:50.474915 25462 net.cpp:408] ip1 <- pool1
I0428 19:43:50.474923 25462 net.cpp:382] ip1 -> ip1
I0428 19:43:50.475105 25462 net.cpp:124] Setting up ip1
I0428 19:43:50.475114 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475119 25462 net.cpp:139] Memory required for data: 2494800
I0428 19:43:50.475131 25462 layer_factory.hpp:77] Creating layer relu1
I0428 19:43:50.475139 25462 net.cpp:86] Creating Layer relu1
I0428 19:43:50.475145 25462 net.cpp:408] relu1 <- ip1
I0428 19:43:50.475153 25462 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:43:50.475311 25462 net.cpp:124] Setting up relu1
I0428 19:43:50.475322 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475327 25462 net.cpp:139] Memory required for data: 2498800
I0428 19:43:50.475333 25462 layer_factory.hpp:77] Creating layer ip2
I0428 19:43:50.475344 25462 net.cpp:86] Creating Layer ip2
I0428 19:43:50.475349 25462 net.cpp:408] ip2 <- ip1
I0428 19:43:50.475358 25462 net.cpp:382] ip2 -> ip2
I0428 19:43:50.475473 25462 net.cpp:124] Setting up ip2
I0428 19:43:50.475481 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475486 25462 net.cpp:139] Memory required for data: 2502800
I0428 19:43:50.475494 25462 layer_factory.hpp:77] Creating layer relu2
I0428 19:43:50.475502 25462 net.cpp:86] Creating Layer relu2
I0428 19:43:50.475522 25462 net.cpp:408] relu2 <- ip2
I0428 19:43:50.475540 25462 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:43:50.475790 25462 net.cpp:124] Setting up relu2
I0428 19:43:50.475801 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475812 25462 net.cpp:139] Memory required for data: 2506800
I0428 19:43:50.475817 25462 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:43:50.475826 25462 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:43:50.475831 25462 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:43:50.475839 25462 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:43:50.475862 25462 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:43:50.475908 25462 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:43:50.475915 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475924 25462 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:43:50.475929 25462 net.cpp:139] Memory required for data: 2514800
I0428 19:43:50.475934 25462 layer_factory.hpp:77] Creating layer accuracy
I0428 19:43:50.475944 25462 net.cpp:86] Creating Layer accuracy
I0428 19:43:50.475951 25462 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:43:50.475970 25462 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:43:50.475976 25462 net.cpp:382] accuracy -> accuracy
I0428 19:43:50.475988 25462 net.cpp:124] Setting up accuracy
I0428 19:43:50.475996 25462 net.cpp:131] Top shape: (1)
I0428 19:43:50.476001 25462 net.cpp:139] Memory required for data: 2514804
I0428 19:43:50.476007 25462 layer_factory.hpp:77] Creating layer loss
I0428 19:43:50.476014 25462 net.cpp:86] Creating Layer loss
I0428 19:43:50.476019 25462 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:43:50.476040 25462 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:43:50.476047 25462 net.cpp:382] loss -> loss
I0428 19:43:50.476058 25462 layer_factory.hpp:77] Creating layer loss
I0428 19:43:50.476311 25462 net.cpp:124] Setting up loss
I0428 19:43:50.476325 25462 net.cpp:131] Top shape: (1)
I0428 19:43:50.476331 25462 net.cpp:134]     with loss weight 1
I0428 19:43:50.476341 25462 net.cpp:139] Memory required for data: 2514808
I0428 19:43:50.476346 25462 net.cpp:200] loss needs backward computation.
I0428 19:43:50.476353 25462 net.cpp:202] accuracy does not need backward computation.
I0428 19:43:50.476359 25462 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:43:50.476366 25462 net.cpp:200] relu2 needs backward computation.
I0428 19:43:50.476387 25462 net.cpp:200] ip2 needs backward computation.
I0428 19:43:50.476397 25462 net.cpp:200] relu1 needs backward computation.
I0428 19:43:50.476402 25462 net.cpp:200] ip1 needs backward computation.
I0428 19:43:50.476408 25462 net.cpp:200] pool1 needs backward computation.
I0428 19:43:50.476413 25462 net.cpp:200] conv1 needs backward computation.
I0428 19:43:50.476419 25462 net.cpp:200] pool0 needs backward computation.
I0428 19:43:50.476425 25462 net.cpp:200] conv0 needs backward computation.
I0428 19:43:50.476431 25462 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:43:50.476438 25462 net.cpp:202] mnist does not need backward computation.
I0428 19:43:50.476444 25462 net.cpp:244] This network produces output accuracy
I0428 19:43:50.476450 25462 net.cpp:244] This network produces output loss
I0428 19:43:50.476466 25462 net.cpp:257] Network initialization done.
I0428 19:43:50.476541 25462 solver.cpp:56] Solver scaffolding done.
I0428 19:43:50.476853 25462 caffe.cpp:248] Starting Optimization
I0428 19:43:50.476861 25462 solver.cpp:273] Solving LeNet
I0428 19:43:50.476881 25462 solver.cpp:274] Learning Rate Policy: inv
I0428 19:43:50.477111 25462 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:43:50.480711 25462 blocking_queue.cpp:49] Waiting for data
I0428 19:43:50.552021 25469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:50.552453 25462 solver.cpp:398]     Test net output #0: accuracy = 0.1145
I0428 19:43:50.552475 25462 solver.cpp:398]     Test net output #1: loss = 2.33388 (* 1 = 2.33388 loss)
I0428 19:43:50.554826 25462 solver.cpp:219] Iteration 0 (-1.04257e-42 iter/s, 0.0779049s/100 iters), loss = 2.30783
I0428 19:43:50.554870 25462 solver.cpp:238]     Train net output #0: loss = 2.30783 (* 1 = 2.30783 loss)
I0428 19:43:50.554895 25462 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:43:50.659603 25462 solver.cpp:219] Iteration 100 (954.869 iter/s, 0.104726s/100 iters), loss = 1.56771
I0428 19:43:50.659646 25462 solver.cpp:238]     Train net output #0: loss = 1.56771 (* 1 = 1.56771 loss)
I0428 19:43:50.659660 25462 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:43:50.765445 25462 solver.cpp:219] Iteration 200 (945.238 iter/s, 0.105793s/100 iters), loss = 1.68236
I0428 19:43:50.765494 25462 solver.cpp:238]     Train net output #0: loss = 1.68236 (* 1 = 1.68236 loss)
I0428 19:43:50.765507 25462 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:43:50.864495 25462 solver.cpp:219] Iteration 300 (1010.16 iter/s, 0.0989942s/100 iters), loss = 1.43774
I0428 19:43:50.864527 25462 solver.cpp:238]     Train net output #0: loss = 1.43774 (* 1 = 1.43774 loss)
I0428 19:43:50.864538 25462 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:43:50.965154 25462 solver.cpp:219] Iteration 400 (993.845 iter/s, 0.100619s/100 iters), loss = 1.43677
I0428 19:43:50.965188 25462 solver.cpp:238]     Train net output #0: loss = 1.43677 (* 1 = 1.43677 loss)
I0428 19:43:50.965200 25462 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:43:51.073487 25462 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:43:51.129762 25469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:51.130292 25462 solver.cpp:398]     Test net output #0: accuracy = 0.4717
I0428 19:43:51.130324 25462 solver.cpp:398]     Test net output #1: loss = 1.46228 (* 1 = 1.46228 loss)
I0428 19:43:51.131423 25462 solver.cpp:219] Iteration 500 (601.602 iter/s, 0.166223s/100 iters), loss = 1.50715
I0428 19:43:51.131476 25462 solver.cpp:238]     Train net output #0: loss = 1.50715 (* 1 = 1.50715 loss)
I0428 19:43:51.131494 25462 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:43:51.232569 25462 solver.cpp:219] Iteration 600 (989.22 iter/s, 0.10109s/100 iters), loss = 1.63197
I0428 19:43:51.232604 25462 solver.cpp:238]     Train net output #0: loss = 1.63197 (* 1 = 1.63197 loss)
I0428 19:43:51.232615 25462 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:43:51.337882 25462 solver.cpp:219] Iteration 700 (949.974 iter/s, 0.105266s/100 iters), loss = 1.38865
I0428 19:43:51.337935 25462 solver.cpp:238]     Train net output #0: loss = 1.38865 (* 1 = 1.38865 loss)
I0428 19:43:51.337954 25462 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:43:51.444404 25462 solver.cpp:219] Iteration 800 (939.292 iter/s, 0.106463s/100 iters), loss = 1.63153
I0428 19:43:51.444447 25462 solver.cpp:238]     Train net output #0: loss = 1.63153 (* 1 = 1.63153 loss)
I0428 19:43:51.444463 25462 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:43:51.549175 25462 solver.cpp:219] Iteration 900 (954.915 iter/s, 0.104721s/100 iters), loss = 1.71374
I0428 19:43:51.549214 25462 solver.cpp:238]     Train net output #0: loss = 1.71374 (* 1 = 1.71374 loss)
I0428 19:43:51.549227 25462 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:43:51.582720 25468 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:51.647547 25462 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:43:51.648578 25462 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:43:51.649338 25462 solver.cpp:311] Iteration 1000, loss = 1.51907
I0428 19:43:51.649374 25462 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:43:51.706261 25469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:43:51.706800 25462 solver.cpp:398]     Test net output #0: accuracy = 0.4748
I0428 19:43:51.706830 25462 solver.cpp:398]     Test net output #1: loss = 1.44945 (* 1 = 1.44945 loss)
I0428 19:43:51.706838 25462 solver.cpp:316] Optimization Done.
I0428 19:43:51.706842 25462 caffe.cpp:259] Optimization Done.
