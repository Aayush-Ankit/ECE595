I0428 20:13:26.156841 32460 caffe.cpp:218] Using GPUs 0
I0428 20:13:26.192934 32460 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:13:26.646481 32460 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1199.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:13:26.646639 32460 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1199.prototxt
I0428 20:13:26.646968 32460 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:13:26.646983 32460 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:13:26.647066 32460 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:26.647128 32460 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:26.647214 32460 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:13:26.647233 32460 net.cpp:86] Creating Layer mnist
I0428 20:13:26.647240 32460 net.cpp:382] mnist -> data
I0428 20:13:26.647258 32460 net.cpp:382] mnist -> label
I0428 20:13:26.648268 32460 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:13:26.650393 32460 net.cpp:124] Setting up mnist
I0428 20:13:26.650424 32460 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:13:26.650429 32460 net.cpp:131] Top shape: 64 (64)
I0428 20:13:26.650430 32460 net.cpp:139] Memory required for data: 200960
I0428 20:13:26.650436 32460 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:26.650459 32460 net.cpp:86] Creating Layer conv0
I0428 20:13:26.650475 32460 net.cpp:408] conv0 <- data
I0428 20:13:26.650486 32460 net.cpp:382] conv0 -> conv0
I0428 20:13:26.883411 32460 net.cpp:124] Setting up conv0
I0428 20:13:26.883436 32460 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:13:26.883440 32460 net.cpp:139] Memory required for data: 3887360
I0428 20:13:26.883471 32460 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:26.883483 32460 net.cpp:86] Creating Layer pool0
I0428 20:13:26.883487 32460 net.cpp:408] pool0 <- conv0
I0428 20:13:26.883492 32460 net.cpp:382] pool0 -> pool0
I0428 20:13:26.883556 32460 net.cpp:124] Setting up pool0
I0428 20:13:26.883561 32460 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:13:26.883564 32460 net.cpp:139] Memory required for data: 4808960
I0428 20:13:26.883568 32460 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:26.883577 32460 net.cpp:86] Creating Layer conv1
I0428 20:13:26.883580 32460 net.cpp:408] conv1 <- pool0
I0428 20:13:26.883585 32460 net.cpp:382] conv1 -> conv1
I0428 20:13:26.885840 32460 net.cpp:124] Setting up conv1
I0428 20:13:26.885854 32460 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:13:26.885859 32460 net.cpp:139] Memory required for data: 6447360
I0428 20:13:26.885866 32460 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:26.885872 32460 net.cpp:86] Creating Layer pool1
I0428 20:13:26.885876 32460 net.cpp:408] pool1 <- conv1
I0428 20:13:26.885880 32460 net.cpp:382] pool1 -> pool1
I0428 20:13:26.885928 32460 net.cpp:124] Setting up pool1
I0428 20:13:26.885933 32460 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:13:26.885936 32460 net.cpp:139] Memory required for data: 6856960
I0428 20:13:26.885939 32460 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:26.885946 32460 net.cpp:86] Creating Layer ip1
I0428 20:13:26.885948 32460 net.cpp:408] ip1 <- pool1
I0428 20:13:26.885952 32460 net.cpp:382] ip1 -> ip1
I0428 20:13:26.886284 32460 net.cpp:124] Setting up ip1
I0428 20:13:26.886292 32460 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:26.886296 32460 net.cpp:139] Memory required for data: 6863360
I0428 20:13:26.886301 32460 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:26.886307 32460 net.cpp:86] Creating Layer relu1
I0428 20:13:26.886310 32460 net.cpp:408] relu1 <- ip1
I0428 20:13:26.886314 32460 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:26.886468 32460 net.cpp:124] Setting up relu1
I0428 20:13:26.886476 32460 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:26.886479 32460 net.cpp:139] Memory required for data: 6869760
I0428 20:13:26.886482 32460 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:26.886488 32460 net.cpp:86] Creating Layer ip2
I0428 20:13:26.886492 32460 net.cpp:408] ip2 <- ip1
I0428 20:13:26.886495 32460 net.cpp:382] ip2 -> ip2
I0428 20:13:26.887575 32460 net.cpp:124] Setting up ip2
I0428 20:13:26.887603 32460 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:13:26.887608 32460 net.cpp:139] Memory required for data: 6882560
I0428 20:13:26.887614 32460 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:26.887620 32460 net.cpp:86] Creating Layer relu2
I0428 20:13:26.887624 32460 net.cpp:408] relu2 <- ip2
I0428 20:13:26.887629 32460 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:26.888423 32460 net.cpp:124] Setting up relu2
I0428 20:13:26.888437 32460 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:13:26.888439 32460 net.cpp:139] Memory required for data: 6895360
I0428 20:13:26.888443 32460 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:26.888450 32460 net.cpp:86] Creating Layer ip3
I0428 20:13:26.888453 32460 net.cpp:408] ip3 <- ip2
I0428 20:13:26.888458 32460 net.cpp:382] ip3 -> ip3
I0428 20:13:26.888582 32460 net.cpp:124] Setting up ip3
I0428 20:13:26.888591 32460 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:26.888592 32460 net.cpp:139] Memory required for data: 6897920
I0428 20:13:26.888600 32460 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:26.888604 32460 net.cpp:86] Creating Layer relu3
I0428 20:13:26.888607 32460 net.cpp:408] relu3 <- ip3
I0428 20:13:26.888612 32460 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:26.888767 32460 net.cpp:124] Setting up relu3
I0428 20:13:26.888774 32460 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:26.888777 32460 net.cpp:139] Memory required for data: 6900480
I0428 20:13:26.888780 32460 layer_factory.hpp:77] Creating layer loss
I0428 20:13:26.888785 32460 net.cpp:86] Creating Layer loss
I0428 20:13:26.888788 32460 net.cpp:408] loss <- ip3
I0428 20:13:26.888792 32460 net.cpp:408] loss <- label
I0428 20:13:26.888797 32460 net.cpp:382] loss -> loss
I0428 20:13:26.888829 32460 layer_factory.hpp:77] Creating layer loss
I0428 20:13:26.889072 32460 net.cpp:124] Setting up loss
I0428 20:13:26.889081 32460 net.cpp:131] Top shape: (1)
I0428 20:13:26.889086 32460 net.cpp:134]     with loss weight 1
I0428 20:13:26.889099 32460 net.cpp:139] Memory required for data: 6900484
I0428 20:13:26.889102 32460 net.cpp:200] loss needs backward computation.
I0428 20:13:26.889106 32460 net.cpp:200] relu3 needs backward computation.
I0428 20:13:26.889109 32460 net.cpp:200] ip3 needs backward computation.
I0428 20:13:26.889112 32460 net.cpp:200] relu2 needs backward computation.
I0428 20:13:26.889116 32460 net.cpp:200] ip2 needs backward computation.
I0428 20:13:26.889118 32460 net.cpp:200] relu1 needs backward computation.
I0428 20:13:26.889120 32460 net.cpp:200] ip1 needs backward computation.
I0428 20:13:26.889124 32460 net.cpp:200] pool1 needs backward computation.
I0428 20:13:26.889127 32460 net.cpp:200] conv1 needs backward computation.
I0428 20:13:26.889130 32460 net.cpp:200] pool0 needs backward computation.
I0428 20:13:26.889133 32460 net.cpp:200] conv0 needs backward computation.
I0428 20:13:26.889137 32460 net.cpp:202] mnist does not need backward computation.
I0428 20:13:26.889139 32460 net.cpp:244] This network produces output loss
I0428 20:13:26.889148 32460 net.cpp:257] Network initialization done.
I0428 20:13:26.889489 32460 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1199.prototxt
I0428 20:13:26.889515 32460 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:13:26.889600 32460 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:26.889673 32460 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:26.889719 32460 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:13:26.889730 32460 net.cpp:86] Creating Layer mnist
I0428 20:13:26.889734 32460 net.cpp:382] mnist -> data
I0428 20:13:26.889741 32460 net.cpp:382] mnist -> label
I0428 20:13:26.889835 32460 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:13:26.891785 32460 net.cpp:124] Setting up mnist
I0428 20:13:26.891813 32460 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:13:26.891819 32460 net.cpp:131] Top shape: 100 (100)
I0428 20:13:26.891822 32460 net.cpp:139] Memory required for data: 314000
I0428 20:13:26.891826 32460 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:13:26.891866 32460 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:13:26.891870 32460 net.cpp:408] label_mnist_1_split <- label
I0428 20:13:26.891875 32460 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:13:26.891897 32460 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:13:26.891938 32460 net.cpp:124] Setting up label_mnist_1_split
I0428 20:13:26.891944 32460 net.cpp:131] Top shape: 100 (100)
I0428 20:13:26.891947 32460 net.cpp:131] Top shape: 100 (100)
I0428 20:13:26.891950 32460 net.cpp:139] Memory required for data: 314800
I0428 20:13:26.891953 32460 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:26.891960 32460 net.cpp:86] Creating Layer conv0
I0428 20:13:26.891964 32460 net.cpp:408] conv0 <- data
I0428 20:13:26.891968 32460 net.cpp:382] conv0 -> conv0
I0428 20:13:26.893663 32460 net.cpp:124] Setting up conv0
I0428 20:13:26.893678 32460 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:13:26.893682 32460 net.cpp:139] Memory required for data: 6074800
I0428 20:13:26.893690 32460 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:26.893712 32460 net.cpp:86] Creating Layer pool0
I0428 20:13:26.893714 32460 net.cpp:408] pool0 <- conv0
I0428 20:13:26.893719 32460 net.cpp:382] pool0 -> pool0
I0428 20:13:26.893754 32460 net.cpp:124] Setting up pool0
I0428 20:13:26.893759 32460 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:13:26.893762 32460 net.cpp:139] Memory required for data: 7514800
I0428 20:13:26.893765 32460 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:26.893774 32460 net.cpp:86] Creating Layer conv1
I0428 20:13:26.893777 32460 net.cpp:408] conv1 <- pool0
I0428 20:13:26.893782 32460 net.cpp:382] conv1 -> conv1
I0428 20:13:26.895736 32460 net.cpp:124] Setting up conv1
I0428 20:13:26.895750 32460 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:13:26.895761 32460 net.cpp:139] Memory required for data: 10074800
I0428 20:13:26.895771 32460 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:26.895776 32460 net.cpp:86] Creating Layer pool1
I0428 20:13:26.895781 32460 net.cpp:408] pool1 <- conv1
I0428 20:13:26.895787 32460 net.cpp:382] pool1 -> pool1
I0428 20:13:26.895824 32460 net.cpp:124] Setting up pool1
I0428 20:13:26.895838 32460 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:13:26.895841 32460 net.cpp:139] Memory required for data: 10714800
I0428 20:13:26.895845 32460 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:26.895850 32460 net.cpp:86] Creating Layer ip1
I0428 20:13:26.895853 32460 net.cpp:408] ip1 <- pool1
I0428 20:13:26.895862 32460 net.cpp:382] ip1 -> ip1
I0428 20:13:26.896219 32460 net.cpp:124] Setting up ip1
I0428 20:13:26.896227 32460 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:26.896240 32460 net.cpp:139] Memory required for data: 10724800
I0428 20:13:26.896247 32460 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:26.896252 32460 net.cpp:86] Creating Layer relu1
I0428 20:13:26.896255 32460 net.cpp:408] relu1 <- ip1
I0428 20:13:26.896261 32460 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:26.896484 32460 net.cpp:124] Setting up relu1
I0428 20:13:26.896492 32460 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:26.896495 32460 net.cpp:139] Memory required for data: 10734800
I0428 20:13:26.896499 32460 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:26.896507 32460 net.cpp:86] Creating Layer ip2
I0428 20:13:26.896510 32460 net.cpp:408] ip2 <- ip1
I0428 20:13:26.896515 32460 net.cpp:382] ip2 -> ip2
I0428 20:13:26.896667 32460 net.cpp:124] Setting up ip2
I0428 20:13:26.896673 32460 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:13:26.896677 32460 net.cpp:139] Memory required for data: 10754800
I0428 20:13:26.896682 32460 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:26.896687 32460 net.cpp:86] Creating Layer relu2
I0428 20:13:26.896689 32460 net.cpp:408] relu2 <- ip2
I0428 20:13:26.896694 32460 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:26.896865 32460 net.cpp:124] Setting up relu2
I0428 20:13:26.896874 32460 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:13:26.896878 32460 net.cpp:139] Memory required for data: 10774800
I0428 20:13:26.896880 32460 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:26.896886 32460 net.cpp:86] Creating Layer ip3
I0428 20:13:26.896889 32460 net.cpp:408] ip3 <- ip2
I0428 20:13:26.896893 32460 net.cpp:382] ip3 -> ip3
I0428 20:13:26.897008 32460 net.cpp:124] Setting up ip3
I0428 20:13:26.897016 32460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:26.897017 32460 net.cpp:139] Memory required for data: 10778800
I0428 20:13:26.897027 32460 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:26.897032 32460 net.cpp:86] Creating Layer relu3
I0428 20:13:26.897034 32460 net.cpp:408] relu3 <- ip3
I0428 20:13:26.897037 32460 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:26.897893 32460 net.cpp:124] Setting up relu3
I0428 20:13:26.897920 32460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:26.897923 32460 net.cpp:139] Memory required for data: 10782800
I0428 20:13:26.897927 32460 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:13:26.897933 32460 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:13:26.897936 32460 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:13:26.897941 32460 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:13:26.897948 32460 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:13:26.898007 32460 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:13:26.898012 32460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:26.898015 32460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:26.898020 32460 net.cpp:139] Memory required for data: 10790800
I0428 20:13:26.898023 32460 layer_factory.hpp:77] Creating layer accuracy
I0428 20:13:26.898030 32460 net.cpp:86] Creating Layer accuracy
I0428 20:13:26.898035 32460 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:13:26.898038 32460 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:13:26.898042 32460 net.cpp:382] accuracy -> accuracy
I0428 20:13:26.898056 32460 net.cpp:124] Setting up accuracy
I0428 20:13:26.898061 32460 net.cpp:131] Top shape: (1)
I0428 20:13:26.898063 32460 net.cpp:139] Memory required for data: 10790804
I0428 20:13:26.898066 32460 layer_factory.hpp:77] Creating layer loss
I0428 20:13:26.898077 32460 net.cpp:86] Creating Layer loss
I0428 20:13:26.898079 32460 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:13:26.898088 32460 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:13:26.898093 32460 net.cpp:382] loss -> loss
I0428 20:13:26.898099 32460 layer_factory.hpp:77] Creating layer loss
I0428 20:13:26.898367 32460 net.cpp:124] Setting up loss
I0428 20:13:26.898376 32460 net.cpp:131] Top shape: (1)
I0428 20:13:26.898380 32460 net.cpp:134]     with loss weight 1
I0428 20:13:26.898406 32460 net.cpp:139] Memory required for data: 10790808
I0428 20:13:26.898409 32460 net.cpp:200] loss needs backward computation.
I0428 20:13:26.898413 32460 net.cpp:202] accuracy does not need backward computation.
I0428 20:13:26.898416 32460 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:13:26.898419 32460 net.cpp:200] relu3 needs backward computation.
I0428 20:13:26.898422 32460 net.cpp:200] ip3 needs backward computation.
I0428 20:13:26.898425 32460 net.cpp:200] relu2 needs backward computation.
I0428 20:13:26.898427 32460 net.cpp:200] ip2 needs backward computation.
I0428 20:13:26.898430 32460 net.cpp:200] relu1 needs backward computation.
I0428 20:13:26.898432 32460 net.cpp:200] ip1 needs backward computation.
I0428 20:13:26.898435 32460 net.cpp:200] pool1 needs backward computation.
I0428 20:13:26.898438 32460 net.cpp:200] conv1 needs backward computation.
I0428 20:13:26.898442 32460 net.cpp:200] pool0 needs backward computation.
I0428 20:13:26.898444 32460 net.cpp:200] conv0 needs backward computation.
I0428 20:13:26.898447 32460 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:13:26.898452 32460 net.cpp:202] mnist does not need backward computation.
I0428 20:13:26.898453 32460 net.cpp:244] This network produces output accuracy
I0428 20:13:26.898457 32460 net.cpp:244] This network produces output loss
I0428 20:13:26.898468 32460 net.cpp:257] Network initialization done.
I0428 20:13:26.898507 32460 solver.cpp:56] Solver scaffolding done.
I0428 20:13:26.898840 32460 caffe.cpp:248] Starting Optimization
I0428 20:13:26.898847 32460 solver.cpp:273] Solving LeNet
I0428 20:13:26.898849 32460 solver.cpp:274] Learning Rate Policy: inv
I0428 20:13:26.899689 32460 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:13:26.906859 32460 blocking_queue.cpp:49] Waiting for data
I0428 20:13:26.977859 32469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:26.978642 32460 solver.cpp:398]     Test net output #0: accuracy = 0.0912
I0428 20:13:26.978660 32460 solver.cpp:398]     Test net output #1: loss = 2.30851 (* 1 = 2.30851 loss)
I0428 20:13:26.983810 32460 solver.cpp:219] Iteration 0 (-9.57087e-43 iter/s, 0.0849326s/100 iters), loss = 2.31505
I0428 20:13:26.983835 32460 solver.cpp:238]     Train net output #0: loss = 2.31505 (* 1 = 2.31505 loss)
I0428 20:13:26.983846 32460 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:13:27.145030 32460 solver.cpp:219] Iteration 100 (620.429 iter/s, 0.161179s/100 iters), loss = 0.787172
I0428 20:13:27.145056 32460 solver.cpp:238]     Train net output #0: loss = 0.787172 (* 1 = 0.787172 loss)
I0428 20:13:27.145062 32460 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:13:27.307757 32460 solver.cpp:219] Iteration 200 (614.67 iter/s, 0.162689s/100 iters), loss = 0.670639
I0428 20:13:27.307780 32460 solver.cpp:238]     Train net output #0: loss = 0.670639 (* 1 = 0.670639 loss)
I0428 20:13:27.307786 32460 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:13:27.468502 32460 solver.cpp:219] Iteration 300 (622.26 iter/s, 0.160705s/100 iters), loss = 0.512383
I0428 20:13:27.468533 32460 solver.cpp:238]     Train net output #0: loss = 0.512383 (* 1 = 0.512383 loss)
I0428 20:13:27.468538 32460 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:13:27.627689 32460 solver.cpp:219] Iteration 400 (628.358 iter/s, 0.159145s/100 iters), loss = 0.310222
I0428 20:13:27.627714 32460 solver.cpp:238]     Train net output #0: loss = 0.310222 (* 1 = 0.310222 loss)
I0428 20:13:27.627735 32460 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:13:27.786175 32460 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:13:27.852560 32469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:27.854934 32460 solver.cpp:398]     Test net output #0: accuracy = 0.8617
I0428 20:13:27.854954 32460 solver.cpp:398]     Test net output #1: loss = 0.367183 (* 1 = 0.367183 loss)
I0428 20:13:27.856437 32460 solver.cpp:219] Iteration 500 (437.242 iter/s, 0.228706s/100 iters), loss = 0.179024
I0428 20:13:27.856487 32460 solver.cpp:238]     Train net output #0: loss = 0.179024 (* 1 = 0.179024 loss)
I0428 20:13:27.856508 32460 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:13:28.019784 32460 solver.cpp:219] Iteration 600 (612.43 iter/s, 0.163284s/100 iters), loss = 0.258679
I0428 20:13:28.019809 32460 solver.cpp:238]     Train net output #0: loss = 0.258679 (* 1 = 0.258679 loss)
I0428 20:13:28.019815 32460 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:13:28.182904 32460 solver.cpp:219] Iteration 700 (613.191 iter/s, 0.163081s/100 iters), loss = 0.476533
I0428 20:13:28.182927 32460 solver.cpp:238]     Train net output #0: loss = 0.476533 (* 1 = 0.476533 loss)
I0428 20:13:28.182950 32460 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:13:28.345278 32460 solver.cpp:219] Iteration 800 (616.007 iter/s, 0.162336s/100 iters), loss = 0.322558
I0428 20:13:28.345304 32460 solver.cpp:238]     Train net output #0: loss = 0.322558 (* 1 = 0.322558 loss)
I0428 20:13:28.345309 32460 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:13:28.508613 32460 solver.cpp:219] Iteration 900 (612.38 iter/s, 0.163297s/100 iters), loss = 0.423799
I0428 20:13:28.508638 32460 solver.cpp:238]     Train net output #0: loss = 0.423799 (* 1 = 0.423799 loss)
I0428 20:13:28.508661 32460 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:13:28.563141 32468 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:28.669049 32460 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:13:28.671656 32460 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:13:28.673007 32460 solver.cpp:311] Iteration 1000, loss = 0.376404
I0428 20:13:28.673022 32460 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:13:28.738076 32469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:28.740442 32460 solver.cpp:398]     Test net output #0: accuracy = 0.881
I0428 20:13:28.740459 32460 solver.cpp:398]     Test net output #1: loss = 0.305449 (* 1 = 0.305449 loss)
I0428 20:13:28.740464 32460 solver.cpp:316] Optimization Done.
I0428 20:13:28.740483 32460 caffe.cpp:259] Optimization Done.
