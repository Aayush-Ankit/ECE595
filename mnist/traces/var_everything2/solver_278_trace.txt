I0428 19:38:35.138515 24055 caffe.cpp:218] Using GPUs 0
I0428 19:38:35.179736 24055 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:38:35.644237 24055 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test278.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:38:35.644371 24055 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test278.prototxt
I0428 19:38:35.644655 24055 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:38:35.644671 24055 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:38:35.644744 24055 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:35.644855 24055 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:35.644986 24055 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:38:35.645015 24055 net.cpp:86] Creating Layer mnist
I0428 19:38:35.645025 24055 net.cpp:382] mnist -> data
I0428 19:38:35.645051 24055 net.cpp:382] mnist -> label
I0428 19:38:35.646139 24055 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:38:35.648551 24055 net.cpp:124] Setting up mnist
I0428 19:38:35.648583 24055 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:38:35.648591 24055 net.cpp:131] Top shape: 64 (64)
I0428 19:38:35.648596 24055 net.cpp:139] Memory required for data: 200960
I0428 19:38:35.648605 24055 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:35.648623 24055 net.cpp:86] Creating Layer conv0
I0428 19:38:35.648632 24055 net.cpp:408] conv0 <- data
I0428 19:38:35.648646 24055 net.cpp:382] conv0 -> conv0
I0428 19:38:35.965023 24055 net.cpp:124] Setting up conv0
I0428 19:38:35.965056 24055 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:38:35.965061 24055 net.cpp:139] Memory required for data: 495872
I0428 19:38:35.965102 24055 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:35.965118 24055 net.cpp:86] Creating Layer pool0
I0428 19:38:35.965123 24055 net.cpp:408] pool0 <- conv0
I0428 19:38:35.965131 24055 net.cpp:382] pool0 -> pool0
I0428 19:38:35.965188 24055 net.cpp:124] Setting up pool0
I0428 19:38:35.965198 24055 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:38:35.965201 24055 net.cpp:139] Memory required for data: 569600
I0428 19:38:35.965205 24055 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:35.965217 24055 net.cpp:86] Creating Layer conv1
I0428 19:38:35.965221 24055 net.cpp:408] conv1 <- pool0
I0428 19:38:35.965227 24055 net.cpp:382] conv1 -> conv1
I0428 19:38:35.967356 24055 net.cpp:124] Setting up conv1
I0428 19:38:35.967375 24055 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:38:35.967378 24055 net.cpp:139] Memory required for data: 602368
I0428 19:38:35.967389 24055 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:35.967397 24055 net.cpp:86] Creating Layer pool1
I0428 19:38:35.967402 24055 net.cpp:408] pool1 <- conv1
I0428 19:38:35.967408 24055 net.cpp:382] pool1 -> pool1
I0428 19:38:35.967453 24055 net.cpp:124] Setting up pool1
I0428 19:38:35.967459 24055 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:38:35.967463 24055 net.cpp:139] Memory required for data: 610560
I0428 19:38:35.967466 24055 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:35.967474 24055 net.cpp:86] Creating Layer ip1
I0428 19:38:35.967478 24055 net.cpp:408] ip1 <- pool1
I0428 19:38:35.967483 24055 net.cpp:382] ip1 -> ip1
I0428 19:38:35.967597 24055 net.cpp:124] Setting up ip1
I0428 19:38:35.967605 24055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:35.967609 24055 net.cpp:139] Memory required for data: 613120
I0428 19:38:35.967617 24055 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:35.967624 24055 net.cpp:86] Creating Layer relu1
I0428 19:38:35.967628 24055 net.cpp:408] relu1 <- ip1
I0428 19:38:35.967633 24055 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:35.967825 24055 net.cpp:124] Setting up relu1
I0428 19:38:35.967836 24055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:35.967840 24055 net.cpp:139] Memory required for data: 615680
I0428 19:38:35.967844 24055 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:35.967851 24055 net.cpp:86] Creating Layer ip2
I0428 19:38:35.967855 24055 net.cpp:408] ip2 <- ip1
I0428 19:38:35.967861 24055 net.cpp:382] ip2 -> ip2
I0428 19:38:35.967969 24055 net.cpp:124] Setting up ip2
I0428 19:38:35.967978 24055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:35.967981 24055 net.cpp:139] Memory required for data: 618240
I0428 19:38:35.967988 24055 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:35.967995 24055 net.cpp:86] Creating Layer relu2
I0428 19:38:35.967999 24055 net.cpp:408] relu2 <- ip2
I0428 19:38:35.968003 24055 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:35.968855 24055 net.cpp:124] Setting up relu2
I0428 19:38:35.968871 24055 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:35.968875 24055 net.cpp:139] Memory required for data: 620800
I0428 19:38:35.968879 24055 layer_factory.hpp:77] Creating layer loss
I0428 19:38:35.968888 24055 net.cpp:86] Creating Layer loss
I0428 19:38:35.968891 24055 net.cpp:408] loss <- ip2
I0428 19:38:35.968896 24055 net.cpp:408] loss <- label
I0428 19:38:35.968904 24055 net.cpp:382] loss -> loss
I0428 19:38:35.968926 24055 layer_factory.hpp:77] Creating layer loss
I0428 19:38:35.969203 24055 net.cpp:124] Setting up loss
I0428 19:38:35.969215 24055 net.cpp:131] Top shape: (1)
I0428 19:38:35.969219 24055 net.cpp:134]     with loss weight 1
I0428 19:38:35.969236 24055 net.cpp:139] Memory required for data: 620804
I0428 19:38:35.969240 24055 net.cpp:200] loss needs backward computation.
I0428 19:38:35.969244 24055 net.cpp:200] relu2 needs backward computation.
I0428 19:38:35.969249 24055 net.cpp:200] ip2 needs backward computation.
I0428 19:38:35.969251 24055 net.cpp:200] relu1 needs backward computation.
I0428 19:38:35.969255 24055 net.cpp:200] ip1 needs backward computation.
I0428 19:38:35.969259 24055 net.cpp:200] pool1 needs backward computation.
I0428 19:38:35.969275 24055 net.cpp:200] conv1 needs backward computation.
I0428 19:38:35.969280 24055 net.cpp:200] pool0 needs backward computation.
I0428 19:38:35.969282 24055 net.cpp:200] conv0 needs backward computation.
I0428 19:38:35.969287 24055 net.cpp:202] mnist does not need backward computation.
I0428 19:38:35.969290 24055 net.cpp:244] This network produces output loss
I0428 19:38:35.969300 24055 net.cpp:257] Network initialization done.
I0428 19:38:35.969640 24055 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test278.prototxt
I0428 19:38:35.969671 24055 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:38:35.969769 24055 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:35.969844 24055 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:35.969898 24055 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:38:35.969916 24055 net.cpp:86] Creating Layer mnist
I0428 19:38:35.969923 24055 net.cpp:382] mnist -> data
I0428 19:38:35.969931 24055 net.cpp:382] mnist -> label
I0428 19:38:35.970033 24055 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:38:35.972220 24055 net.cpp:124] Setting up mnist
I0428 19:38:35.972236 24055 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:38:35.972242 24055 net.cpp:131] Top shape: 100 (100)
I0428 19:38:35.972246 24055 net.cpp:139] Memory required for data: 314000
I0428 19:38:35.972251 24055 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:38:35.972259 24055 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:38:35.972264 24055 net.cpp:408] label_mnist_1_split <- label
I0428 19:38:35.972270 24055 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:38:35.972277 24055 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:38:35.972331 24055 net.cpp:124] Setting up label_mnist_1_split
I0428 19:38:35.972348 24055 net.cpp:131] Top shape: 100 (100)
I0428 19:38:35.972353 24055 net.cpp:131] Top shape: 100 (100)
I0428 19:38:35.972357 24055 net.cpp:139] Memory required for data: 314800
I0428 19:38:35.972360 24055 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:35.972371 24055 net.cpp:86] Creating Layer conv0
I0428 19:38:35.972374 24055 net.cpp:408] conv0 <- data
I0428 19:38:35.972380 24055 net.cpp:382] conv0 -> conv0
I0428 19:38:35.974299 24055 net.cpp:124] Setting up conv0
I0428 19:38:35.974316 24055 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:38:35.974320 24055 net.cpp:139] Memory required for data: 775600
I0428 19:38:35.974331 24055 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:35.974340 24055 net.cpp:86] Creating Layer pool0
I0428 19:38:35.974344 24055 net.cpp:408] pool0 <- conv0
I0428 19:38:35.974350 24055 net.cpp:382] pool0 -> pool0
I0428 19:38:35.974395 24055 net.cpp:124] Setting up pool0
I0428 19:38:35.974400 24055 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:38:35.974403 24055 net.cpp:139] Memory required for data: 890800
I0428 19:38:35.974407 24055 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:35.974419 24055 net.cpp:86] Creating Layer conv1
I0428 19:38:35.974422 24055 net.cpp:408] conv1 <- pool0
I0428 19:38:35.974429 24055 net.cpp:382] conv1 -> conv1
I0428 19:38:35.976181 24055 net.cpp:124] Setting up conv1
I0428 19:38:35.976202 24055 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:38:35.976205 24055 net.cpp:139] Memory required for data: 942000
I0428 19:38:35.976217 24055 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:35.976224 24055 net.cpp:86] Creating Layer pool1
I0428 19:38:35.976230 24055 net.cpp:408] pool1 <- conv1
I0428 19:38:35.976236 24055 net.cpp:382] pool1 -> pool1
I0428 19:38:35.976284 24055 net.cpp:124] Setting up pool1
I0428 19:38:35.976290 24055 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:38:35.976294 24055 net.cpp:139] Memory required for data: 954800
I0428 19:38:35.976299 24055 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:35.976306 24055 net.cpp:86] Creating Layer ip1
I0428 19:38:35.976310 24055 net.cpp:408] ip1 <- pool1
I0428 19:38:35.976317 24055 net.cpp:382] ip1 -> ip1
I0428 19:38:35.976435 24055 net.cpp:124] Setting up ip1
I0428 19:38:35.976445 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.976449 24055 net.cpp:139] Memory required for data: 958800
I0428 19:38:35.976457 24055 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:35.976464 24055 net.cpp:86] Creating Layer relu1
I0428 19:38:35.976467 24055 net.cpp:408] relu1 <- ip1
I0428 19:38:35.976480 24055 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:35.976675 24055 net.cpp:124] Setting up relu1
I0428 19:38:35.976686 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.976691 24055 net.cpp:139] Memory required for data: 962800
I0428 19:38:35.976694 24055 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:35.976702 24055 net.cpp:86] Creating Layer ip2
I0428 19:38:35.976707 24055 net.cpp:408] ip2 <- ip1
I0428 19:38:35.976714 24055 net.cpp:382] ip2 -> ip2
I0428 19:38:35.976843 24055 net.cpp:124] Setting up ip2
I0428 19:38:35.976853 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.976857 24055 net.cpp:139] Memory required for data: 966800
I0428 19:38:35.976863 24055 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:35.976869 24055 net.cpp:86] Creating Layer relu2
I0428 19:38:35.976873 24055 net.cpp:408] relu2 <- ip2
I0428 19:38:35.976879 24055 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:35.977159 24055 net.cpp:124] Setting up relu2
I0428 19:38:35.977169 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.977172 24055 net.cpp:139] Memory required for data: 970800
I0428 19:38:35.977183 24055 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:38:35.977193 24055 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:38:35.977198 24055 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:38:35.977205 24055 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:38:35.977211 24055 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:38:35.977267 24055 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:38:35.977274 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.977279 24055 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:35.977283 24055 net.cpp:139] Memory required for data: 978800
I0428 19:38:35.977286 24055 layer_factory.hpp:77] Creating layer accuracy
I0428 19:38:35.977294 24055 net.cpp:86] Creating Layer accuracy
I0428 19:38:35.977299 24055 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:38:35.977303 24055 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:38:35.977315 24055 net.cpp:382] accuracy -> accuracy
I0428 19:38:35.977324 24055 net.cpp:124] Setting up accuracy
I0428 19:38:35.977334 24055 net.cpp:131] Top shape: (1)
I0428 19:38:35.977339 24055 net.cpp:139] Memory required for data: 978804
I0428 19:38:35.977341 24055 layer_factory.hpp:77] Creating layer loss
I0428 19:38:35.977349 24055 net.cpp:86] Creating Layer loss
I0428 19:38:35.977354 24055 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:38:35.977357 24055 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:38:35.977362 24055 net.cpp:382] loss -> loss
I0428 19:38:35.977370 24055 layer_factory.hpp:77] Creating layer loss
I0428 19:38:35.977659 24055 net.cpp:124] Setting up loss
I0428 19:38:35.977671 24055 net.cpp:131] Top shape: (1)
I0428 19:38:35.977675 24055 net.cpp:134]     with loss weight 1
I0428 19:38:35.977682 24055 net.cpp:139] Memory required for data: 978808
I0428 19:38:35.977686 24055 net.cpp:200] loss needs backward computation.
I0428 19:38:35.977691 24055 net.cpp:202] accuracy does not need backward computation.
I0428 19:38:35.977696 24055 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:38:35.977699 24055 net.cpp:200] relu2 needs backward computation.
I0428 19:38:35.977702 24055 net.cpp:200] ip2 needs backward computation.
I0428 19:38:35.977706 24055 net.cpp:200] relu1 needs backward computation.
I0428 19:38:35.977710 24055 net.cpp:200] ip1 needs backward computation.
I0428 19:38:35.977721 24055 net.cpp:200] pool1 needs backward computation.
I0428 19:38:35.977725 24055 net.cpp:200] conv1 needs backward computation.
I0428 19:38:35.977728 24055 net.cpp:200] pool0 needs backward computation.
I0428 19:38:35.977731 24055 net.cpp:200] conv0 needs backward computation.
I0428 19:38:35.977736 24055 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:38:35.977741 24055 net.cpp:202] mnist does not need backward computation.
I0428 19:38:35.977744 24055 net.cpp:244] This network produces output accuracy
I0428 19:38:35.977748 24055 net.cpp:244] This network produces output loss
I0428 19:38:35.977762 24055 net.cpp:257] Network initialization done.
I0428 19:38:35.977807 24055 solver.cpp:56] Solver scaffolding done.
I0428 19:38:35.978149 24055 caffe.cpp:248] Starting Optimization
I0428 19:38:35.978157 24055 solver.cpp:273] Solving LeNet
I0428 19:38:35.978159 24055 solver.cpp:274] Learning Rate Policy: inv
I0428 19:38:35.979110 24055 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:38:35.981406 24055 blocking_queue.cpp:49] Waiting for data
I0428 19:38:36.054415 24062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:36.054869 24055 solver.cpp:398]     Test net output #0: accuracy = 0.1238
I0428 19:38:36.054898 24055 solver.cpp:398]     Test net output #1: loss = 2.29446 (* 1 = 2.29446 loss)
I0428 19:38:36.056872 24055 solver.cpp:219] Iteration 0 (-1.56798e-30 iter/s, 0.0786729s/100 iters), loss = 2.27315
I0428 19:38:36.056905 24055 solver.cpp:238]     Train net output #0: loss = 2.27315 (* 1 = 2.27315 loss)
I0428 19:38:36.056923 24055 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:38:36.123915 24055 solver.cpp:219] Iteration 100 (1492.58 iter/s, 0.0669983s/100 iters), loss = 0.832479
I0428 19:38:36.123946 24055 solver.cpp:238]     Train net output #0: loss = 0.832479 (* 1 = 0.832479 loss)
I0428 19:38:36.123955 24055 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:38:36.188525 24055 solver.cpp:219] Iteration 200 (1548.68 iter/s, 0.0645713s/100 iters), loss = 0.507835
I0428 19:38:36.188570 24055 solver.cpp:238]     Train net output #0: loss = 0.507835 (* 1 = 0.507835 loss)
I0428 19:38:36.188578 24055 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:38:36.253336 24055 solver.cpp:219] Iteration 300 (1544.17 iter/s, 0.0647598s/100 iters), loss = 0.528618
I0428 19:38:36.253366 24055 solver.cpp:238]     Train net output #0: loss = 0.528618 (* 1 = 0.528618 loss)
I0428 19:38:36.253373 24055 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:38:36.317994 24055 solver.cpp:219] Iteration 400 (1547.54 iter/s, 0.0646187s/100 iters), loss = 0.371516
I0428 19:38:36.318025 24055 solver.cpp:238]     Train net output #0: loss = 0.371516 (* 1 = 0.371516 loss)
I0428 19:38:36.318032 24055 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:38:36.382139 24055 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:38:36.438604 24062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:36.439026 24055 solver.cpp:398]     Test net output #0: accuracy = 0.8736
I0428 19:38:36.439046 24055 solver.cpp:398]     Test net output #1: loss = 0.388901 (* 1 = 0.388901 loss)
I0428 19:38:36.439739 24055 solver.cpp:219] Iteration 500 (821.669 iter/s, 0.121704s/100 iters), loss = 0.300451
I0428 19:38:36.439777 24055 solver.cpp:238]     Train net output #0: loss = 0.300451 (* 1 = 0.300451 loss)
I0428 19:38:36.439785 24055 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:38:36.499763 24055 solver.cpp:219] Iteration 600 (1666.89 iter/s, 0.0599921s/100 iters), loss = 0.34738
I0428 19:38:36.499801 24055 solver.cpp:238]     Train net output #0: loss = 0.34738 (* 1 = 0.34738 loss)
I0428 19:38:36.499807 24055 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:38:36.559550 24055 solver.cpp:219] Iteration 700 (1673.49 iter/s, 0.0597554s/100 iters), loss = 0.358284
I0428 19:38:36.559589 24055 solver.cpp:238]     Train net output #0: loss = 0.358284 (* 1 = 0.358284 loss)
I0428 19:38:36.559595 24055 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:38:36.619541 24055 solver.cpp:219] Iteration 800 (1667.75 iter/s, 0.0599612s/100 iters), loss = 0.510598
I0428 19:38:36.619581 24055 solver.cpp:238]     Train net output #0: loss = 0.510598 (* 1 = 0.510598 loss)
I0428 19:38:36.619587 24055 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:38:36.678117 24055 solver.cpp:219] Iteration 900 (1708.11 iter/s, 0.0585441s/100 iters), loss = 0.39506
I0428 19:38:36.678158 24055 solver.cpp:238]     Train net output #0: loss = 0.39506 (* 1 = 0.39506 loss)
I0428 19:38:36.678164 24055 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:38:36.698159 24061 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:36.736618 24055 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:38:36.737257 24055 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:38:36.737637 24055 solver.cpp:311] Iteration 1000, loss = 0.271054
I0428 19:38:36.737651 24055 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:38:36.792744 24062 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:36.793211 24055 solver.cpp:398]     Test net output #0: accuracy = 0.9022
I0428 19:38:36.793256 24055 solver.cpp:398]     Test net output #1: loss = 0.31703 (* 1 = 0.31703 loss)
I0428 19:38:36.793261 24055 solver.cpp:316] Optimization Done.
I0428 19:38:36.793263 24055 caffe.cpp:259] Optimization Done.
