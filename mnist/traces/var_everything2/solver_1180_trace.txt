I0428 20:12:25.897068 32252 caffe.cpp:218] Using GPUs 0
I0428 20:12:25.933629 32252 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:26.440891 32252 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1180.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:26.441063 32252 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1180.prototxt
I0428 20:12:26.441453 32252 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:26.441478 32252 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:26.441581 32252 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:26.441692 32252 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:26.441826 32252 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:26.441859 32252 net.cpp:86] Creating Layer mnist
I0428 20:12:26.441874 32252 net.cpp:382] mnist -> data
I0428 20:12:26.441903 32252 net.cpp:382] mnist -> label
I0428 20:12:26.443158 32252 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:26.445664 32252 net.cpp:124] Setting up mnist
I0428 20:12:26.445685 32252 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:26.445695 32252 net.cpp:131] Top shape: 64 (64)
I0428 20:12:26.445701 32252 net.cpp:139] Memory required for data: 200960
I0428 20:12:26.445713 32252 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:26.445737 32252 net.cpp:86] Creating Layer conv0
I0428 20:12:26.445747 32252 net.cpp:408] conv0 <- data
I0428 20:12:26.445767 32252 net.cpp:382] conv0 -> conv0
I0428 20:12:26.729439 32252 net.cpp:124] Setting up conv0
I0428 20:12:26.729468 32252 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:26.729475 32252 net.cpp:139] Memory required for data: 3887360
I0428 20:12:26.729517 32252 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:26.729537 32252 net.cpp:86] Creating Layer pool0
I0428 20:12:26.729544 32252 net.cpp:408] pool0 <- conv0
I0428 20:12:26.729553 32252 net.cpp:382] pool0 -> pool0
I0428 20:12:26.729605 32252 net.cpp:124] Setting up pool0
I0428 20:12:26.729614 32252 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:26.729619 32252 net.cpp:139] Memory required for data: 4808960
I0428 20:12:26.729624 32252 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:26.729640 32252 net.cpp:86] Creating Layer conv1
I0428 20:12:26.729645 32252 net.cpp:408] conv1 <- pool0
I0428 20:12:26.729655 32252 net.cpp:382] conv1 -> conv1
I0428 20:12:26.731982 32252 net.cpp:124] Setting up conv1
I0428 20:12:26.731998 32252 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:26.732005 32252 net.cpp:139] Memory required for data: 6447360
I0428 20:12:26.732017 32252 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:26.732029 32252 net.cpp:86] Creating Layer pool1
I0428 20:12:26.732055 32252 net.cpp:408] pool1 <- conv1
I0428 20:12:26.732064 32252 net.cpp:382] pool1 -> pool1
I0428 20:12:26.732107 32252 net.cpp:124] Setting up pool1
I0428 20:12:26.732116 32252 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:26.732121 32252 net.cpp:139] Memory required for data: 6856960
I0428 20:12:26.732126 32252 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:26.732137 32252 net.cpp:86] Creating Layer ip1
I0428 20:12:26.732146 32252 net.cpp:408] ip1 <- pool1
I0428 20:12:26.732156 32252 net.cpp:382] ip1 -> ip1
I0428 20:12:26.733686 32252 net.cpp:124] Setting up ip1
I0428 20:12:26.733701 32252 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:26.733707 32252 net.cpp:139] Memory required for data: 6869760
I0428 20:12:26.733721 32252 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:26.733729 32252 net.cpp:86] Creating Layer relu1
I0428 20:12:26.733741 32252 net.cpp:408] relu1 <- ip1
I0428 20:12:26.733749 32252 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:26.733937 32252 net.cpp:124] Setting up relu1
I0428 20:12:26.733947 32252 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:12:26.733952 32252 net.cpp:139] Memory required for data: 6882560
I0428 20:12:26.733958 32252 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:26.733968 32252 net.cpp:86] Creating Layer ip2
I0428 20:12:26.733973 32252 net.cpp:408] ip2 <- ip1
I0428 20:12:26.733981 32252 net.cpp:382] ip2 -> ip2
I0428 20:12:26.734086 32252 net.cpp:124] Setting up ip2
I0428 20:12:26.734094 32252 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:26.734099 32252 net.cpp:139] Memory required for data: 6885120
I0428 20:12:26.734108 32252 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:26.734118 32252 net.cpp:86] Creating Layer relu2
I0428 20:12:26.734138 32252 net.cpp:408] relu2 <- ip2
I0428 20:12:26.734146 32252 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:26.734971 32252 net.cpp:124] Setting up relu2
I0428 20:12:26.734985 32252 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:26.734990 32252 net.cpp:139] Memory required for data: 6887680
I0428 20:12:26.734997 32252 layer_factory.hpp:77] Creating layer loss
I0428 20:12:26.735007 32252 net.cpp:86] Creating Layer loss
I0428 20:12:26.735013 32252 net.cpp:408] loss <- ip2
I0428 20:12:26.735019 32252 net.cpp:408] loss <- label
I0428 20:12:26.735028 32252 net.cpp:382] loss -> loss
I0428 20:12:26.735051 32252 layer_factory.hpp:77] Creating layer loss
I0428 20:12:26.735306 32252 net.cpp:124] Setting up loss
I0428 20:12:26.735318 32252 net.cpp:131] Top shape: (1)
I0428 20:12:26.735323 32252 net.cpp:134]     with loss weight 1
I0428 20:12:26.735343 32252 net.cpp:139] Memory required for data: 6887684
I0428 20:12:26.735349 32252 net.cpp:200] loss needs backward computation.
I0428 20:12:26.735355 32252 net.cpp:200] relu2 needs backward computation.
I0428 20:12:26.735360 32252 net.cpp:200] ip2 needs backward computation.
I0428 20:12:26.735365 32252 net.cpp:200] relu1 needs backward computation.
I0428 20:12:26.735370 32252 net.cpp:200] ip1 needs backward computation.
I0428 20:12:26.735388 32252 net.cpp:200] pool1 needs backward computation.
I0428 20:12:26.735394 32252 net.cpp:200] conv1 needs backward computation.
I0428 20:12:26.735399 32252 net.cpp:200] pool0 needs backward computation.
I0428 20:12:26.735405 32252 net.cpp:200] conv0 needs backward computation.
I0428 20:12:26.735410 32252 net.cpp:202] mnist does not need backward computation.
I0428 20:12:26.735415 32252 net.cpp:244] This network produces output loss
I0428 20:12:26.735430 32252 net.cpp:257] Network initialization done.
I0428 20:12:26.735741 32252 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1180.prototxt
I0428 20:12:26.735774 32252 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:26.735879 32252 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:26.735975 32252 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:26.736033 32252 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:26.736050 32252 net.cpp:86] Creating Layer mnist
I0428 20:12:26.736058 32252 net.cpp:382] mnist -> data
I0428 20:12:26.736069 32252 net.cpp:382] mnist -> label
I0428 20:12:26.736184 32252 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:26.737501 32252 net.cpp:124] Setting up mnist
I0428 20:12:26.737519 32252 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:26.737526 32252 net.cpp:131] Top shape: 100 (100)
I0428 20:12:26.737531 32252 net.cpp:139] Memory required for data: 314000
I0428 20:12:26.737537 32252 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:26.737547 32252 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:26.737553 32252 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:26.737561 32252 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:26.737572 32252 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:26.737638 32252 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:26.737648 32252 net.cpp:131] Top shape: 100 (100)
I0428 20:12:26.737655 32252 net.cpp:131] Top shape: 100 (100)
I0428 20:12:26.737660 32252 net.cpp:139] Memory required for data: 314800
I0428 20:12:26.737666 32252 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:26.737679 32252 net.cpp:86] Creating Layer conv0
I0428 20:12:26.737686 32252 net.cpp:408] conv0 <- data
I0428 20:12:26.737695 32252 net.cpp:382] conv0 -> conv0
I0428 20:12:26.739384 32252 net.cpp:124] Setting up conv0
I0428 20:12:26.739400 32252 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:26.739406 32252 net.cpp:139] Memory required for data: 6074800
I0428 20:12:26.739435 32252 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:26.739445 32252 net.cpp:86] Creating Layer pool0
I0428 20:12:26.739451 32252 net.cpp:408] pool0 <- conv0
I0428 20:12:26.739459 32252 net.cpp:382] pool0 -> pool0
I0428 20:12:26.739500 32252 net.cpp:124] Setting up pool0
I0428 20:12:26.739509 32252 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:26.739514 32252 net.cpp:139] Memory required for data: 7514800
I0428 20:12:26.739519 32252 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:26.739532 32252 net.cpp:86] Creating Layer conv1
I0428 20:12:26.739539 32252 net.cpp:408] conv1 <- pool0
I0428 20:12:26.739547 32252 net.cpp:382] conv1 -> conv1
I0428 20:12:26.741432 32252 net.cpp:124] Setting up conv1
I0428 20:12:26.741447 32252 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:26.741453 32252 net.cpp:139] Memory required for data: 10074800
I0428 20:12:26.741480 32252 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:26.741490 32252 net.cpp:86] Creating Layer pool1
I0428 20:12:26.741495 32252 net.cpp:408] pool1 <- conv1
I0428 20:12:26.741504 32252 net.cpp:382] pool1 -> pool1
I0428 20:12:26.741546 32252 net.cpp:124] Setting up pool1
I0428 20:12:26.741555 32252 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:26.741560 32252 net.cpp:139] Memory required for data: 10714800
I0428 20:12:26.741566 32252 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:26.741575 32252 net.cpp:86] Creating Layer ip1
I0428 20:12:26.741581 32252 net.cpp:408] ip1 <- pool1
I0428 20:12:26.741590 32252 net.cpp:382] ip1 -> ip1
I0428 20:12:26.742143 32252 net.cpp:124] Setting up ip1
I0428 20:12:26.742153 32252 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:26.742158 32252 net.cpp:139] Memory required for data: 10734800
I0428 20:12:26.742171 32252 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:26.742180 32252 net.cpp:86] Creating Layer relu1
I0428 20:12:26.742187 32252 net.cpp:408] relu1 <- ip1
I0428 20:12:26.742194 32252 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:26.742404 32252 net.cpp:124] Setting up relu1
I0428 20:12:26.742413 32252 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:12:26.742419 32252 net.cpp:139] Memory required for data: 10754800
I0428 20:12:26.742424 32252 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:26.742449 32252 net.cpp:86] Creating Layer ip2
I0428 20:12:26.742465 32252 net.cpp:408] ip2 <- ip1
I0428 20:12:26.742472 32252 net.cpp:382] ip2 -> ip2
I0428 20:12:26.742594 32252 net.cpp:124] Setting up ip2
I0428 20:12:26.742604 32252 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:26.742609 32252 net.cpp:139] Memory required for data: 10758800
I0428 20:12:26.742619 32252 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:26.742626 32252 net.cpp:86] Creating Layer relu2
I0428 20:12:26.742631 32252 net.cpp:408] relu2 <- ip2
I0428 20:12:26.742638 32252 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:26.742807 32252 net.cpp:124] Setting up relu2
I0428 20:12:26.742820 32252 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:26.742835 32252 net.cpp:139] Memory required for data: 10762800
I0428 20:12:26.742841 32252 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:12:26.742848 32252 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:12:26.742853 32252 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:12:26.742861 32252 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:12:26.742882 32252 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:12:26.742923 32252 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:12:26.742933 32252 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:26.742938 32252 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:26.742944 32252 net.cpp:139] Memory required for data: 10770800
I0428 20:12:26.742949 32252 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:26.742956 32252 net.cpp:86] Creating Layer accuracy
I0428 20:12:26.742962 32252 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:12:26.742969 32252 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:26.742976 32252 net.cpp:382] accuracy -> accuracy
I0428 20:12:26.742987 32252 net.cpp:124] Setting up accuracy
I0428 20:12:26.742995 32252 net.cpp:131] Top shape: (1)
I0428 20:12:26.743001 32252 net.cpp:139] Memory required for data: 10770804
I0428 20:12:26.743006 32252 layer_factory.hpp:77] Creating layer loss
I0428 20:12:26.743013 32252 net.cpp:86] Creating Layer loss
I0428 20:12:26.743042 32252 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:12:26.743049 32252 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:26.743057 32252 net.cpp:382] loss -> loss
I0428 20:12:26.743077 32252 layer_factory.hpp:77] Creating layer loss
I0428 20:12:26.743333 32252 net.cpp:124] Setting up loss
I0428 20:12:26.743360 32252 net.cpp:131] Top shape: (1)
I0428 20:12:26.743366 32252 net.cpp:134]     with loss weight 1
I0428 20:12:26.743374 32252 net.cpp:139] Memory required for data: 10770808
I0428 20:12:26.743381 32252 net.cpp:200] loss needs backward computation.
I0428 20:12:26.743387 32252 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:26.743393 32252 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:12:26.743399 32252 net.cpp:200] relu2 needs backward computation.
I0428 20:12:26.743403 32252 net.cpp:200] ip2 needs backward computation.
I0428 20:12:26.743409 32252 net.cpp:200] relu1 needs backward computation.
I0428 20:12:26.743414 32252 net.cpp:200] ip1 needs backward computation.
I0428 20:12:26.743419 32252 net.cpp:200] pool1 needs backward computation.
I0428 20:12:26.743425 32252 net.cpp:200] conv1 needs backward computation.
I0428 20:12:26.743430 32252 net.cpp:200] pool0 needs backward computation.
I0428 20:12:26.743436 32252 net.cpp:200] conv0 needs backward computation.
I0428 20:12:26.743443 32252 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:26.743448 32252 net.cpp:202] mnist does not need backward computation.
I0428 20:12:26.743453 32252 net.cpp:244] This network produces output accuracy
I0428 20:12:26.743458 32252 net.cpp:244] This network produces output loss
I0428 20:12:26.743474 32252 net.cpp:257] Network initialization done.
I0428 20:12:26.743531 32252 solver.cpp:56] Solver scaffolding done.
I0428 20:12:26.743808 32252 caffe.cpp:248] Starting Optimization
I0428 20:12:26.743816 32252 solver.cpp:273] Solving LeNet
I0428 20:12:26.743823 32252 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:26.744689 32252 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:26.751498 32252 blocking_queue.cpp:49] Waiting for data
I0428 20:12:26.821902 32259 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:26.822643 32252 solver.cpp:398]     Test net output #0: accuracy = 0.0792
I0428 20:12:26.822664 32252 solver.cpp:398]     Test net output #1: loss = 2.3685 (* 1 = 2.3685 loss)
I0428 20:12:26.827754 32252 solver.cpp:219] Iteration 0 (-7.14498e-31 iter/s, 0.0839038s/100 iters), loss = 2.37584
I0428 20:12:26.827783 32252 solver.cpp:238]     Train net output #0: loss = 2.37584 (* 1 = 2.37584 loss)
I0428 20:12:26.827816 32252 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:26.982491 32252 solver.cpp:219] Iteration 100 (646.422 iter/s, 0.154698s/100 iters), loss = 0.663803
I0428 20:12:26.982522 32252 solver.cpp:238]     Train net output #0: loss = 0.663803 (* 1 = 0.663803 loss)
I0428 20:12:26.982548 32252 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:27.135238 32252 solver.cpp:219] Iteration 200 (654.849 iter/s, 0.152707s/100 iters), loss = 0.613219
I0428 20:12:27.135267 32252 solver.cpp:238]     Train net output #0: loss = 0.613219 (* 1 = 0.613219 loss)
I0428 20:12:27.135293 32252 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:27.287786 32252 solver.cpp:219] Iteration 300 (655.696 iter/s, 0.15251s/100 iters), loss = 0.240368
I0428 20:12:27.287813 32252 solver.cpp:238]     Train net output #0: loss = 0.240368 (* 1 = 0.240368 loss)
I0428 20:12:27.287838 32252 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:27.490130 32252 solver.cpp:219] Iteration 400 (494.324 iter/s, 0.202296s/100 iters), loss = 0.280301
I0428 20:12:27.490182 32252 solver.cpp:238]     Train net output #0: loss = 0.280301 (* 1 = 0.280301 loss)
I0428 20:12:27.490196 32252 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:27.702199 32252 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:27.780014 32259 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:27.781168 32252 solver.cpp:398]     Test net output #0: accuracy = 0.882
I0428 20:12:27.781199 32252 solver.cpp:398]     Test net output #1: loss = 0.319301 (* 1 = 0.319301 loss)
I0428 20:12:27.783237 32252 solver.cpp:219] Iteration 500 (341.254 iter/s, 0.293037s/100 iters), loss = 0.41546
I0428 20:12:27.783270 32252 solver.cpp:238]     Train net output #0: loss = 0.41546 (* 1 = 0.41546 loss)
I0428 20:12:27.783283 32252 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:27.977805 32252 solver.cpp:219] Iteration 600 (514.08 iter/s, 0.194522s/100 iters), loss = 0.221063
I0428 20:12:27.977845 32252 solver.cpp:238]     Train net output #0: loss = 0.221063 (* 1 = 0.221063 loss)
I0428 20:12:27.977851 32252 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:28.138600 32252 solver.cpp:219] Iteration 700 (622.082 iter/s, 0.16075s/100 iters), loss = 0.181815
I0428 20:12:28.138660 32252 solver.cpp:238]     Train net output #0: loss = 0.181815 (* 1 = 0.181815 loss)
I0428 20:12:28.138676 32252 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:28.349647 32252 solver.cpp:219] Iteration 800 (473.984 iter/s, 0.210978s/100 iters), loss = 0.25808
I0428 20:12:28.349692 32252 solver.cpp:238]     Train net output #0: loss = 0.25808 (* 1 = 0.25808 loss)
I0428 20:12:28.349705 32252 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:28.561496 32252 solver.cpp:219] Iteration 900 (472.173 iter/s, 0.211787s/100 iters), loss = 0.180208
I0428 20:12:28.561550 32252 solver.cpp:238]     Train net output #0: loss = 0.180208 (* 1 = 0.180208 loss)
I0428 20:12:28.561563 32252 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:28.632128 32258 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:28.772166 32252 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:28.777385 32252 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:28.780066 32252 solver.cpp:311] Iteration 1000, loss = 0.126865
I0428 20:12:28.780094 32252 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:28.857655 32259 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:28.858670 32252 solver.cpp:398]     Test net output #0: accuracy = 0.9763
I0428 20:12:28.858698 32252 solver.cpp:398]     Test net output #1: loss = 0.0718495 (* 1 = 0.0718495 loss)
I0428 20:12:28.858717 32252 solver.cpp:316] Optimization Done.
I0428 20:12:28.858722 32252 caffe.cpp:259] Optimization Done.
