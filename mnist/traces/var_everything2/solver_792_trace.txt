I0428 19:57:32.958379 28710 caffe.cpp:218] Using GPUs 0
I0428 19:57:32.988284 28710 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:33.434028 28710 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test792.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:33.434151 28710 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test792.prototxt
I0428 19:57:33.434587 28710 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:33.434619 28710 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:33.434705 28710 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:33.434773 28710 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:33.434875 28710 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:33.434895 28710 net.cpp:86] Creating Layer mnist
I0428 19:57:33.434900 28710 net.cpp:382] mnist -> data
I0428 19:57:33.434921 28710 net.cpp:382] mnist -> label
I0428 19:57:33.435865 28710 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:33.438148 28710 net.cpp:124] Setting up mnist
I0428 19:57:33.438196 28710 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:33.438201 28710 net.cpp:131] Top shape: 64 (64)
I0428 19:57:33.438205 28710 net.cpp:139] Memory required for data: 200960
I0428 19:57:33.438212 28710 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:33.438227 28710 net.cpp:86] Creating Layer conv0
I0428 19:57:33.438246 28710 net.cpp:408] conv0 <- data
I0428 19:57:33.438257 28710 net.cpp:382] conv0 -> conv0
I0428 19:57:33.659059 28710 net.cpp:124] Setting up conv0
I0428 19:57:33.659085 28710 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:33.659088 28710 net.cpp:139] Memory required for data: 1675520
I0428 19:57:33.659102 28710 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:33.659113 28710 net.cpp:86] Creating Layer pool0
I0428 19:57:33.659117 28710 net.cpp:408] pool0 <- conv0
I0428 19:57:33.659122 28710 net.cpp:382] pool0 -> pool0
I0428 19:57:33.659181 28710 net.cpp:124] Setting up pool0
I0428 19:57:33.659186 28710 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:33.659189 28710 net.cpp:139] Memory required for data: 2044160
I0428 19:57:33.659193 28710 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:33.659204 28710 net.cpp:86] Creating Layer conv1
I0428 19:57:33.659206 28710 net.cpp:408] conv1 <- pool0
I0428 19:57:33.659211 28710 net.cpp:382] conv1 -> conv1
I0428 19:57:33.661983 28710 net.cpp:124] Setting up conv1
I0428 19:57:33.662010 28710 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:33.662029 28710 net.cpp:139] Memory required for data: 2126080
I0428 19:57:33.662037 28710 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:33.662045 28710 net.cpp:86] Creating Layer pool1
I0428 19:57:33.662047 28710 net.cpp:408] pool1 <- conv1
I0428 19:57:33.662052 28710 net.cpp:382] pool1 -> pool1
I0428 19:57:33.662102 28710 net.cpp:124] Setting up pool1
I0428 19:57:33.662107 28710 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:33.662111 28710 net.cpp:139] Memory required for data: 2146560
I0428 19:57:33.662113 28710 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:33.662120 28710 net.cpp:86] Creating Layer ip1
I0428 19:57:33.662123 28710 net.cpp:408] ip1 <- pool1
I0428 19:57:33.662127 28710 net.cpp:382] ip1 -> ip1
I0428 19:57:33.662225 28710 net.cpp:124] Setting up ip1
I0428 19:57:33.662231 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.662235 28710 net.cpp:139] Memory required for data: 2149120
I0428 19:57:33.662242 28710 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:33.662247 28710 net.cpp:86] Creating Layer relu1
I0428 19:57:33.662250 28710 net.cpp:408] relu1 <- ip1
I0428 19:57:33.662255 28710 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:33.662430 28710 net.cpp:124] Setting up relu1
I0428 19:57:33.662437 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.662441 28710 net.cpp:139] Memory required for data: 2151680
I0428 19:57:33.662444 28710 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:33.662451 28710 net.cpp:86] Creating Layer ip2
I0428 19:57:33.662453 28710 net.cpp:408] ip2 <- ip1
I0428 19:57:33.662458 28710 net.cpp:382] ip2 -> ip2
I0428 19:57:33.662561 28710 net.cpp:124] Setting up ip2
I0428 19:57:33.662567 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.662570 28710 net.cpp:139] Memory required for data: 2154240
I0428 19:57:33.662575 28710 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:33.662595 28710 net.cpp:86] Creating Layer relu2
I0428 19:57:33.662598 28710 net.cpp:408] relu2 <- ip2
I0428 19:57:33.662602 28710 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:33.663399 28710 net.cpp:124] Setting up relu2
I0428 19:57:33.663411 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.663430 28710 net.cpp:139] Memory required for data: 2156800
I0428 19:57:33.663434 28710 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:33.663456 28710 net.cpp:86] Creating Layer ip3
I0428 19:57:33.663460 28710 net.cpp:408] ip3 <- ip2
I0428 19:57:33.663465 28710 net.cpp:382] ip3 -> ip3
I0428 19:57:33.663561 28710 net.cpp:124] Setting up ip3
I0428 19:57:33.663569 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.663573 28710 net.cpp:139] Memory required for data: 2159360
I0428 19:57:33.663579 28710 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:33.663584 28710 net.cpp:86] Creating Layer relu3
I0428 19:57:33.663588 28710 net.cpp:408] relu3 <- ip3
I0428 19:57:33.663591 28710 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:33.663794 28710 net.cpp:124] Setting up relu3
I0428 19:57:33.663801 28710 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:33.663805 28710 net.cpp:139] Memory required for data: 2161920
I0428 19:57:33.663812 28710 layer_factory.hpp:77] Creating layer loss
I0428 19:57:33.663818 28710 net.cpp:86] Creating Layer loss
I0428 19:57:33.663821 28710 net.cpp:408] loss <- ip3
I0428 19:57:33.663825 28710 net.cpp:408] loss <- label
I0428 19:57:33.663830 28710 net.cpp:382] loss -> loss
I0428 19:57:33.663844 28710 layer_factory.hpp:77] Creating layer loss
I0428 19:57:33.664093 28710 net.cpp:124] Setting up loss
I0428 19:57:33.664101 28710 net.cpp:131] Top shape: (1)
I0428 19:57:33.664104 28710 net.cpp:134]     with loss weight 1
I0428 19:57:33.664119 28710 net.cpp:139] Memory required for data: 2161924
I0428 19:57:33.664121 28710 net.cpp:200] loss needs backward computation.
I0428 19:57:33.664125 28710 net.cpp:200] relu3 needs backward computation.
I0428 19:57:33.664127 28710 net.cpp:200] ip3 needs backward computation.
I0428 19:57:33.664130 28710 net.cpp:200] relu2 needs backward computation.
I0428 19:57:33.664134 28710 net.cpp:200] ip2 needs backward computation.
I0428 19:57:33.664136 28710 net.cpp:200] relu1 needs backward computation.
I0428 19:57:33.664139 28710 net.cpp:200] ip1 needs backward computation.
I0428 19:57:33.664141 28710 net.cpp:200] pool1 needs backward computation.
I0428 19:57:33.664144 28710 net.cpp:200] conv1 needs backward computation.
I0428 19:57:33.664147 28710 net.cpp:200] pool0 needs backward computation.
I0428 19:57:33.664150 28710 net.cpp:200] conv0 needs backward computation.
I0428 19:57:33.664153 28710 net.cpp:202] mnist does not need backward computation.
I0428 19:57:33.664156 28710 net.cpp:244] This network produces output loss
I0428 19:57:33.664165 28710 net.cpp:257] Network initialization done.
I0428 19:57:33.664531 28710 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test792.prototxt
I0428 19:57:33.664572 28710 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:33.664660 28710 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:33.664737 28710 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:33.664795 28710 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:33.664814 28710 net.cpp:86] Creating Layer mnist
I0428 19:57:33.664837 28710 net.cpp:382] mnist -> data
I0428 19:57:33.664862 28710 net.cpp:382] mnist -> label
I0428 19:57:33.664944 28710 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:33.666862 28710 net.cpp:124] Setting up mnist
I0428 19:57:33.666889 28710 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:33.666909 28710 net.cpp:131] Top shape: 100 (100)
I0428 19:57:33.666913 28710 net.cpp:139] Memory required for data: 314000
I0428 19:57:33.666916 28710 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:33.666923 28710 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:33.666926 28710 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:33.666930 28710 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:33.666936 28710 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:33.666985 28710 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:33.666990 28710 net.cpp:131] Top shape: 100 (100)
I0428 19:57:33.666995 28710 net.cpp:131] Top shape: 100 (100)
I0428 19:57:33.666996 28710 net.cpp:139] Memory required for data: 314800
I0428 19:57:33.666999 28710 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:33.667007 28710 net.cpp:86] Creating Layer conv0
I0428 19:57:33.667011 28710 net.cpp:408] conv0 <- data
I0428 19:57:33.667016 28710 net.cpp:382] conv0 -> conv0
I0428 19:57:33.668845 28710 net.cpp:124] Setting up conv0
I0428 19:57:33.668874 28710 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:33.668877 28710 net.cpp:139] Memory required for data: 2618800
I0428 19:57:33.668886 28710 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:33.668893 28710 net.cpp:86] Creating Layer pool0
I0428 19:57:33.668896 28710 net.cpp:408] pool0 <- conv0
I0428 19:57:33.668901 28710 net.cpp:382] pool0 -> pool0
I0428 19:57:33.668937 28710 net.cpp:124] Setting up pool0
I0428 19:57:33.668942 28710 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:33.668946 28710 net.cpp:139] Memory required for data: 3194800
I0428 19:57:33.668948 28710 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:33.668957 28710 net.cpp:86] Creating Layer conv1
I0428 19:57:33.668961 28710 net.cpp:408] conv1 <- pool0
I0428 19:57:33.668965 28710 net.cpp:382] conv1 -> conv1
I0428 19:57:33.671015 28710 net.cpp:124] Setting up conv1
I0428 19:57:33.671038 28710 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:33.671058 28710 net.cpp:139] Memory required for data: 3322800
I0428 19:57:33.671078 28710 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:33.671085 28710 net.cpp:86] Creating Layer pool1
I0428 19:57:33.671088 28710 net.cpp:408] pool1 <- conv1
I0428 19:57:33.671094 28710 net.cpp:382] pool1 -> pool1
I0428 19:57:33.671136 28710 net.cpp:124] Setting up pool1
I0428 19:57:33.671141 28710 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:33.671145 28710 net.cpp:139] Memory required for data: 3354800
I0428 19:57:33.671149 28710 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:33.671156 28710 net.cpp:86] Creating Layer ip1
I0428 19:57:33.671159 28710 net.cpp:408] ip1 <- pool1
I0428 19:57:33.671164 28710 net.cpp:382] ip1 -> ip1
I0428 19:57:33.671283 28710 net.cpp:124] Setting up ip1
I0428 19:57:33.671289 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.671303 28710 net.cpp:139] Memory required for data: 3358800
I0428 19:57:33.671310 28710 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:33.671315 28710 net.cpp:86] Creating Layer relu1
I0428 19:57:33.671319 28710 net.cpp:408] relu1 <- ip1
I0428 19:57:33.671324 28710 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:33.671599 28710 net.cpp:124] Setting up relu1
I0428 19:57:33.671609 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.671612 28710 net.cpp:139] Memory required for data: 3362800
I0428 19:57:33.671617 28710 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:33.671623 28710 net.cpp:86] Creating Layer ip2
I0428 19:57:33.671627 28710 net.cpp:408] ip2 <- ip1
I0428 19:57:33.671633 28710 net.cpp:382] ip2 -> ip2
I0428 19:57:33.671751 28710 net.cpp:124] Setting up ip2
I0428 19:57:33.671757 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.671761 28710 net.cpp:139] Memory required for data: 3366800
I0428 19:57:33.671766 28710 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:33.671772 28710 net.cpp:86] Creating Layer relu2
I0428 19:57:33.671774 28710 net.cpp:408] relu2 <- ip2
I0428 19:57:33.671784 28710 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:33.671936 28710 net.cpp:124] Setting up relu2
I0428 19:57:33.671946 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.671948 28710 net.cpp:139] Memory required for data: 3370800
I0428 19:57:33.671952 28710 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:33.671957 28710 net.cpp:86] Creating Layer ip3
I0428 19:57:33.671960 28710 net.cpp:408] ip3 <- ip2
I0428 19:57:33.671964 28710 net.cpp:382] ip3 -> ip3
I0428 19:57:33.672061 28710 net.cpp:124] Setting up ip3
I0428 19:57:33.672068 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.672071 28710 net.cpp:139] Memory required for data: 3374800
I0428 19:57:33.672080 28710 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:33.672083 28710 net.cpp:86] Creating Layer relu3
I0428 19:57:33.672086 28710 net.cpp:408] relu3 <- ip3
I0428 19:57:33.672091 28710 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:33.673002 28710 net.cpp:124] Setting up relu3
I0428 19:57:33.673015 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.673019 28710 net.cpp:139] Memory required for data: 3378800
I0428 19:57:33.673022 28710 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:33.673033 28710 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:33.673038 28710 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:33.673043 28710 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:33.673048 28710 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:33.673113 28710 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:33.673120 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.673125 28710 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:33.673133 28710 net.cpp:139] Memory required for data: 3386800
I0428 19:57:33.673136 28710 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:33.673141 28710 net.cpp:86] Creating Layer accuracy
I0428 19:57:33.673144 28710 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:33.673148 28710 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:33.673156 28710 net.cpp:382] accuracy -> accuracy
I0428 19:57:33.673163 28710 net.cpp:124] Setting up accuracy
I0428 19:57:33.673167 28710 net.cpp:131] Top shape: (1)
I0428 19:57:33.673171 28710 net.cpp:139] Memory required for data: 3386804
I0428 19:57:33.673173 28710 layer_factory.hpp:77] Creating layer loss
I0428 19:57:33.673177 28710 net.cpp:86] Creating Layer loss
I0428 19:57:33.673200 28710 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:33.673204 28710 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:33.673223 28710 net.cpp:382] loss -> loss
I0428 19:57:33.673229 28710 layer_factory.hpp:77] Creating layer loss
I0428 19:57:33.673492 28710 net.cpp:124] Setting up loss
I0428 19:57:33.673501 28710 net.cpp:131] Top shape: (1)
I0428 19:57:33.673506 28710 net.cpp:134]     with loss weight 1
I0428 19:57:33.673511 28710 net.cpp:139] Memory required for data: 3386808
I0428 19:57:33.673526 28710 net.cpp:200] loss needs backward computation.
I0428 19:57:33.673529 28710 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:33.673533 28710 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:33.673537 28710 net.cpp:200] relu3 needs backward computation.
I0428 19:57:33.673545 28710 net.cpp:200] ip3 needs backward computation.
I0428 19:57:33.673548 28710 net.cpp:200] relu2 needs backward computation.
I0428 19:57:33.673552 28710 net.cpp:200] ip2 needs backward computation.
I0428 19:57:33.673553 28710 net.cpp:200] relu1 needs backward computation.
I0428 19:57:33.673557 28710 net.cpp:200] ip1 needs backward computation.
I0428 19:57:33.673564 28710 net.cpp:200] pool1 needs backward computation.
I0428 19:57:33.673568 28710 net.cpp:200] conv1 needs backward computation.
I0428 19:57:33.673575 28710 net.cpp:200] pool0 needs backward computation.
I0428 19:57:33.673578 28710 net.cpp:200] conv0 needs backward computation.
I0428 19:57:33.673583 28710 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:33.673586 28710 net.cpp:202] mnist does not need backward computation.
I0428 19:57:33.673588 28710 net.cpp:244] This network produces output accuracy
I0428 19:57:33.673591 28710 net.cpp:244] This network produces output loss
I0428 19:57:33.673604 28710 net.cpp:257] Network initialization done.
I0428 19:57:33.673678 28710 solver.cpp:56] Solver scaffolding done.
I0428 19:57:33.674078 28710 caffe.cpp:248] Starting Optimization
I0428 19:57:33.674083 28710 solver.cpp:273] Solving LeNet
I0428 19:57:33.674087 28710 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:33.675000 28710 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:33.678915 28710 blocking_queue.cpp:49] Waiting for data
I0428 19:57:33.749841 28717 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:33.750386 28710 solver.cpp:398]     Test net output #0: accuracy = 0.0973
I0428 19:57:33.750421 28710 solver.cpp:398]     Test net output #1: loss = 2.29945 (* 1 = 2.29945 loss)
I0428 19:57:33.752843 28710 solver.cpp:219] Iteration 0 (2.89259 iter/s, 0.0787005s/100 iters), loss = 2.28665
I0428 19:57:33.752883 28710 solver.cpp:238]     Train net output #0: loss = 2.28665 (* 1 = 2.28665 loss)
I0428 19:57:33.752897 28710 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:33.835777 28710 solver.cpp:219] Iteration 100 (1206.32 iter/s, 0.0828969s/100 iters), loss = 1.23854
I0428 19:57:33.835800 28710 solver.cpp:238]     Train net output #0: loss = 1.23854 (* 1 = 1.23854 loss)
I0428 19:57:33.835806 28710 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:33.915220 28710 solver.cpp:219] Iteration 200 (1259.37 iter/s, 0.0794051s/100 iters), loss = 1.06212
I0428 19:57:33.915257 28710 solver.cpp:238]     Train net output #0: loss = 1.06212 (* 1 = 1.06212 loss)
I0428 19:57:33.915271 28710 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:33.989892 28710 solver.cpp:219] Iteration 300 (1339.96 iter/s, 0.0746291s/100 iters), loss = 1.03667
I0428 19:57:33.989917 28710 solver.cpp:238]     Train net output #0: loss = 1.03667 (* 1 = 1.03667 loss)
I0428 19:57:33.989923 28710 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:34.064446 28710 solver.cpp:219] Iteration 400 (1341.89 iter/s, 0.0745216s/100 iters), loss = 0.849362
I0428 19:57:34.064469 28710 solver.cpp:238]     Train net output #0: loss = 0.849362 (* 1 = 0.849362 loss)
I0428 19:57:34.064491 28710 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:34.137969 28710 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:34.184010 28717 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:34.184540 28710 solver.cpp:398]     Test net output #0: accuracy = 0.6438
I0428 19:57:34.184558 28710 solver.cpp:398]     Test net output #1: loss = 0.968456 (* 1 = 0.968456 loss)
I0428 19:57:34.185413 28710 solver.cpp:219] Iteration 500 (826.916 iter/s, 0.120931s/100 iters), loss = 0.91087
I0428 19:57:34.185463 28710 solver.cpp:238]     Train net output #0: loss = 0.91087 (* 1 = 0.91087 loss)
I0428 19:57:34.185499 28710 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:34.265308 28710 solver.cpp:219] Iteration 600 (1252.52 iter/s, 0.0798394s/100 iters), loss = 0.85971
I0428 19:57:34.265332 28710 solver.cpp:238]     Train net output #0: loss = 0.85971 (* 1 = 0.85971 loss)
I0428 19:57:34.265338 28710 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:34.344780 28710 solver.cpp:219] Iteration 700 (1258.81 iter/s, 0.0794399s/100 iters), loss = 1.17653
I0428 19:57:34.344807 28710 solver.cpp:238]     Train net output #0: loss = 1.17653 (* 1 = 1.17653 loss)
I0428 19:57:34.344838 28710 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:34.423079 28710 solver.cpp:219] Iteration 800 (1277.92 iter/s, 0.0782523s/100 iters), loss = 1.0327
I0428 19:57:34.423118 28710 solver.cpp:238]     Train net output #0: loss = 1.0327 (* 1 = 1.0327 loss)
I0428 19:57:34.423125 28710 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:34.501154 28710 solver.cpp:219] Iteration 900 (1281.34 iter/s, 0.0780431s/100 iters), loss = 0.936611
I0428 19:57:34.501179 28710 solver.cpp:238]     Train net output #0: loss = 0.936611 (* 1 = 0.936611 loss)
I0428 19:57:34.501190 28710 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:34.527441 28716 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:34.577404 28710 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:34.578073 28710 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:34.578550 28710 solver.cpp:311] Iteration 1000, loss = 0.968292
I0428 19:57:34.578565 28710 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:34.624663 28717 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:34.625193 28710 solver.cpp:398]     Test net output #0: accuracy = 0.6655
I0428 19:57:34.625226 28710 solver.cpp:398]     Test net output #1: loss = 0.865908 (* 1 = 0.865908 loss)
I0428 19:57:34.625231 28710 solver.cpp:316] Optimization Done.
I0428 19:57:34.625234 28710 caffe.cpp:259] Optimization Done.
