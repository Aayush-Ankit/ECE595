I0428 19:45:15.791730 25771 caffe.cpp:218] Using GPUs 0
I0428 19:45:15.833106 25771 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:16.354043 25771 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test468.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:16.354215 25771 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test468.prototxt
I0428 19:45:16.354564 25771 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:16.354584 25771 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:16.354676 25771 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:45:16.354774 25771 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:16.354905 25771 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:16.354938 25771 net.cpp:86] Creating Layer mnist
I0428 19:45:16.354951 25771 net.cpp:382] mnist -> data
I0428 19:45:16.354981 25771 net.cpp:382] mnist -> label
I0428 19:45:16.356189 25771 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:16.358660 25771 net.cpp:124] Setting up mnist
I0428 19:45:16.358681 25771 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:16.358691 25771 net.cpp:131] Top shape: 64 (64)
I0428 19:45:16.358697 25771 net.cpp:139] Memory required for data: 200960
I0428 19:45:16.358707 25771 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:16.358731 25771 net.cpp:86] Creating Layer conv0
I0428 19:45:16.358742 25771 net.cpp:408] conv0 <- data
I0428 19:45:16.358763 25771 net.cpp:382] conv0 -> conv0
I0428 19:45:16.651257 25771 net.cpp:124] Setting up conv0
I0428 19:45:16.651291 25771 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:16.651298 25771 net.cpp:139] Memory required for data: 495872
I0428 19:45:16.651322 25771 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:16.651342 25771 net.cpp:86] Creating Layer pool0
I0428 19:45:16.651350 25771 net.cpp:408] pool0 <- conv0
I0428 19:45:16.651361 25771 net.cpp:382] pool0 -> pool0
I0428 19:45:16.651434 25771 net.cpp:124] Setting up pool0
I0428 19:45:16.651444 25771 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:16.651474 25771 net.cpp:139] Memory required for data: 569600
I0428 19:45:16.651482 25771 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:16.651501 25771 net.cpp:86] Creating Layer conv1
I0428 19:45:16.651510 25771 net.cpp:408] conv1 <- pool0
I0428 19:45:16.651520 25771 net.cpp:382] conv1 -> conv1
I0428 19:45:16.654682 25771 net.cpp:124] Setting up conv1
I0428 19:45:16.654703 25771 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:16.654711 25771 net.cpp:139] Memory required for data: 2208000
I0428 19:45:16.654726 25771 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:16.654741 25771 net.cpp:86] Creating Layer pool1
I0428 19:45:16.654747 25771 net.cpp:408] pool1 <- conv1
I0428 19:45:16.654757 25771 net.cpp:382] pool1 -> pool1
I0428 19:45:16.654811 25771 net.cpp:124] Setting up pool1
I0428 19:45:16.654822 25771 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:16.654829 25771 net.cpp:139] Memory required for data: 2617600
I0428 19:45:16.654835 25771 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:16.654850 25771 net.cpp:86] Creating Layer ip1
I0428 19:45:16.654861 25771 net.cpp:408] ip1 <- pool1
I0428 19:45:16.654871 25771 net.cpp:382] ip1 -> ip1
I0428 19:45:16.655099 25771 net.cpp:124] Setting up ip1
I0428 19:45:16.655110 25771 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:16.655117 25771 net.cpp:139] Memory required for data: 2620160
I0428 19:45:16.655130 25771 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:16.655145 25771 net.cpp:86] Creating Layer relu1
I0428 19:45:16.655156 25771 net.cpp:408] relu1 <- ip1
I0428 19:45:16.655165 25771 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:16.655367 25771 net.cpp:124] Setting up relu1
I0428 19:45:16.655380 25771 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:16.655385 25771 net.cpp:139] Memory required for data: 2622720
I0428 19:45:16.655391 25771 layer_factory.hpp:77] Creating layer loss
I0428 19:45:16.655402 25771 net.cpp:86] Creating Layer loss
I0428 19:45:16.655408 25771 net.cpp:408] loss <- ip1
I0428 19:45:16.655416 25771 net.cpp:408] loss <- label
I0428 19:45:16.655426 25771 net.cpp:382] loss -> loss
I0428 19:45:16.655455 25771 layer_factory.hpp:77] Creating layer loss
I0428 19:45:16.656397 25771 net.cpp:124] Setting up loss
I0428 19:45:16.656414 25771 net.cpp:131] Top shape: (1)
I0428 19:45:16.656421 25771 net.cpp:134]     with loss weight 1
I0428 19:45:16.656450 25771 net.cpp:139] Memory required for data: 2622724
I0428 19:45:16.656457 25771 net.cpp:200] loss needs backward computation.
I0428 19:45:16.656464 25771 net.cpp:200] relu1 needs backward computation.
I0428 19:45:16.656471 25771 net.cpp:200] ip1 needs backward computation.
I0428 19:45:16.656477 25771 net.cpp:200] pool1 needs backward computation.
I0428 19:45:16.656483 25771 net.cpp:200] conv1 needs backward computation.
I0428 19:45:16.656489 25771 net.cpp:200] pool0 needs backward computation.
I0428 19:45:16.656497 25771 net.cpp:200] conv0 needs backward computation.
I0428 19:45:16.656503 25771 net.cpp:202] mnist does not need backward computation.
I0428 19:45:16.656509 25771 net.cpp:244] This network produces output loss
I0428 19:45:16.656524 25771 net.cpp:257] Network initialization done.
I0428 19:45:16.656846 25771 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test468.prototxt
I0428 19:45:16.656884 25771 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:16.656981 25771 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:45:16.657100 25771 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:16.657169 25771 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:16.657191 25771 net.cpp:86] Creating Layer mnist
I0428 19:45:16.657200 25771 net.cpp:382] mnist -> data
I0428 19:45:16.657214 25771 net.cpp:382] mnist -> label
I0428 19:45:16.657356 25771 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:16.659654 25771 net.cpp:124] Setting up mnist
I0428 19:45:16.659672 25771 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:16.659682 25771 net.cpp:131] Top shape: 100 (100)
I0428 19:45:16.659689 25771 net.cpp:139] Memory required for data: 314000
I0428 19:45:16.659696 25771 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:16.659734 25771 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:16.659740 25771 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:16.659750 25771 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:16.659764 25771 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:16.659855 25771 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:16.659867 25771 net.cpp:131] Top shape: 100 (100)
I0428 19:45:16.659873 25771 net.cpp:131] Top shape: 100 (100)
I0428 19:45:16.659879 25771 net.cpp:139] Memory required for data: 314800
I0428 19:45:16.659886 25771 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:16.659903 25771 net.cpp:86] Creating Layer conv0
I0428 19:45:16.659910 25771 net.cpp:408] conv0 <- data
I0428 19:45:16.659921 25771 net.cpp:382] conv0 -> conv0
I0428 19:45:16.660851 25771 net.cpp:124] Setting up conv0
I0428 19:45:16.660868 25771 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:16.660876 25771 net.cpp:139] Memory required for data: 775600
I0428 19:45:16.660898 25771 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:16.660909 25771 net.cpp:86] Creating Layer pool0
I0428 19:45:16.660917 25771 net.cpp:408] pool0 <- conv0
I0428 19:45:16.660926 25771 net.cpp:382] pool0 -> pool0
I0428 19:45:16.660975 25771 net.cpp:124] Setting up pool0
I0428 19:45:16.660985 25771 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:16.660991 25771 net.cpp:139] Memory required for data: 890800
I0428 19:45:16.660998 25771 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:16.661013 25771 net.cpp:86] Creating Layer conv1
I0428 19:45:16.661021 25771 net.cpp:408] conv1 <- pool0
I0428 19:45:16.661031 25771 net.cpp:382] conv1 -> conv1
I0428 19:45:16.662757 25771 net.cpp:124] Setting up conv1
I0428 19:45:16.662776 25771 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:16.662783 25771 net.cpp:139] Memory required for data: 3450800
I0428 19:45:16.662799 25771 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:16.662811 25771 net.cpp:86] Creating Layer pool1
I0428 19:45:16.662833 25771 net.cpp:408] pool1 <- conv1
I0428 19:45:16.662844 25771 net.cpp:382] pool1 -> pool1
I0428 19:45:16.662900 25771 net.cpp:124] Setting up pool1
I0428 19:45:16.662910 25771 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:16.662917 25771 net.cpp:139] Memory required for data: 4090800
I0428 19:45:16.662927 25771 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:16.662940 25771 net.cpp:86] Creating Layer ip1
I0428 19:45:16.662947 25771 net.cpp:408] ip1 <- pool1
I0428 19:45:16.662962 25771 net.cpp:382] ip1 -> ip1
I0428 19:45:16.663193 25771 net.cpp:124] Setting up ip1
I0428 19:45:16.663203 25771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:16.663209 25771 net.cpp:139] Memory required for data: 4094800
I0428 19:45:16.663224 25771 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:16.663234 25771 net.cpp:86] Creating Layer relu1
I0428 19:45:16.663242 25771 net.cpp:408] relu1 <- ip1
I0428 19:45:16.663252 25771 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:16.664197 25771 net.cpp:124] Setting up relu1
I0428 19:45:16.664213 25771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:16.664222 25771 net.cpp:139] Memory required for data: 4098800
I0428 19:45:16.664228 25771 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:45:16.664242 25771 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:45:16.664247 25771 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:45:16.664258 25771 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:45:16.664269 25771 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:45:16.664322 25771 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:45:16.664331 25771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:16.664340 25771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:16.664346 25771 net.cpp:139] Memory required for data: 4106800
I0428 19:45:16.664356 25771 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:16.664366 25771 net.cpp:86] Creating Layer accuracy
I0428 19:45:16.664372 25771 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:45:16.664381 25771 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:16.664389 25771 net.cpp:382] accuracy -> accuracy
I0428 19:45:16.664404 25771 net.cpp:124] Setting up accuracy
I0428 19:45:16.664417 25771 net.cpp:131] Top shape: (1)
I0428 19:45:16.664423 25771 net.cpp:139] Memory required for data: 4106804
I0428 19:45:16.664429 25771 layer_factory.hpp:77] Creating layer loss
I0428 19:45:16.664438 25771 net.cpp:86] Creating Layer loss
I0428 19:45:16.664445 25771 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:45:16.664453 25771 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:16.664461 25771 net.cpp:382] loss -> loss
I0428 19:45:16.664474 25771 layer_factory.hpp:77] Creating layer loss
I0428 19:45:16.664752 25771 net.cpp:124] Setting up loss
I0428 19:45:16.664764 25771 net.cpp:131] Top shape: (1)
I0428 19:45:16.664772 25771 net.cpp:134]     with loss weight 1
I0428 19:45:16.664783 25771 net.cpp:139] Memory required for data: 4106808
I0428 19:45:16.664789 25771 net.cpp:200] loss needs backward computation.
I0428 19:45:16.664798 25771 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:16.664806 25771 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:45:16.664824 25771 net.cpp:200] relu1 needs backward computation.
I0428 19:45:16.664831 25771 net.cpp:200] ip1 needs backward computation.
I0428 19:45:16.664839 25771 net.cpp:200] pool1 needs backward computation.
I0428 19:45:16.664844 25771 net.cpp:200] conv1 needs backward computation.
I0428 19:45:16.664851 25771 net.cpp:200] pool0 needs backward computation.
I0428 19:45:16.664857 25771 net.cpp:200] conv0 needs backward computation.
I0428 19:45:16.664865 25771 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:16.664872 25771 net.cpp:202] mnist does not need backward computation.
I0428 19:45:16.664878 25771 net.cpp:244] This network produces output accuracy
I0428 19:45:16.664885 25771 net.cpp:244] This network produces output loss
I0428 19:45:16.664918 25771 net.cpp:257] Network initialization done.
I0428 19:45:16.664968 25771 solver.cpp:56] Solver scaffolding done.
I0428 19:45:16.665267 25771 caffe.cpp:248] Starting Optimization
I0428 19:45:16.665276 25771 solver.cpp:273] Solving LeNet
I0428 19:45:16.665282 25771 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:16.665446 25771 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:16.669962 25771 blocking_queue.cpp:49] Waiting for data
I0428 19:45:16.740464 25781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:16.740996 25771 solver.cpp:398]     Test net output #0: accuracy = 0.098
I0428 19:45:16.741020 25771 solver.cpp:398]     Test net output #1: loss = 2.41864 (* 1 = 2.41864 loss)
I0428 19:45:16.744534 25771 solver.cpp:219] Iteration 0 (0 iter/s, 0.0792078s/100 iters), loss = 2.39331
I0428 19:45:16.744563 25771 solver.cpp:238]     Train net output #0: loss = 2.39331 (* 1 = 2.39331 loss)
I0428 19:45:16.744581 25771 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:16.884740 25771 solver.cpp:219] Iteration 100 (713.434 iter/s, 0.140167s/100 iters), loss = 1.78433
I0428 19:45:16.884768 25771 solver.cpp:238]     Train net output #0: loss = 1.78433 (* 1 = 1.78433 loss)
I0428 19:45:16.884794 25771 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:17.025712 25771 solver.cpp:219] Iteration 200 (709.572 iter/s, 0.14093s/100 iters), loss = 1.22843
I0428 19:45:17.025755 25771 solver.cpp:238]     Train net output #0: loss = 1.22843 (* 1 = 1.22843 loss)
I0428 19:45:17.025770 25771 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:17.177741 25771 solver.cpp:219] Iteration 300 (658.004 iter/s, 0.151975s/100 iters), loss = 1.19095
I0428 19:45:17.177791 25771 solver.cpp:238]     Train net output #0: loss = 1.19095 (* 1 = 1.19095 loss)
I0428 19:45:17.177810 25771 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:17.328289 25771 solver.cpp:219] Iteration 400 (664.5 iter/s, 0.150489s/100 iters), loss = 1.13944
I0428 19:45:17.328341 25771 solver.cpp:238]     Train net output #0: loss = 1.13944 (* 1 = 1.13944 loss)
I0428 19:45:17.328359 25771 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:17.472865 25771 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:17.554262 25781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:17.554965 25771 solver.cpp:398]     Test net output #0: accuracy = 0.6521
I0428 19:45:17.554994 25771 solver.cpp:398]     Test net output #1: loss = 1.05368 (* 1 = 1.05368 loss)
I0428 19:45:17.556532 25771 solver.cpp:219] Iteration 500 (438.254 iter/s, 0.228178s/100 iters), loss = 1.10162
I0428 19:45:17.556571 25771 solver.cpp:238]     Train net output #0: loss = 1.10162 (* 1 = 1.10162 loss)
I0428 19:45:17.556584 25771 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:17.694463 25771 solver.cpp:219] Iteration 600 (725.251 iter/s, 0.137883s/100 iters), loss = 0.791649
I0428 19:45:17.694496 25771 solver.cpp:238]     Train net output #0: loss = 0.791649 (* 1 = 0.791649 loss)
I0428 19:45:17.694504 25771 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:17.837129 25771 solver.cpp:219] Iteration 700 (701.166 iter/s, 0.14262s/100 iters), loss = 1.19997
I0428 19:45:17.837163 25771 solver.cpp:238]     Train net output #0: loss = 1.19997 (* 1 = 1.19997 loss)
I0428 19:45:17.837172 25771 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:17.987386 25771 solver.cpp:219] Iteration 800 (665.746 iter/s, 0.150207s/100 iters), loss = 0.913266
I0428 19:45:17.987431 25771 solver.cpp:238]     Train net output #0: loss = 0.913266 (* 1 = 0.913266 loss)
I0428 19:45:17.987442 25771 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:18.141978 25771 solver.cpp:219] Iteration 900 (647.117 iter/s, 0.154532s/100 iters), loss = 0.856588
I0428 19:45:18.142030 25771 solver.cpp:238]     Train net output #0: loss = 0.856588 (* 1 = 0.856588 loss)
I0428 19:45:18.142042 25771 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:18.193858 25780 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:18.298388 25771 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:18.300163 25771 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:18.301285 25771 solver.cpp:311] Iteration 1000, loss = 0.952285
I0428 19:45:18.301324 25771 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:18.374734 25781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:18.375342 25771 solver.cpp:398]     Test net output #0: accuracy = 0.7838
I0428 19:45:18.375375 25771 solver.cpp:398]     Test net output #1: loss = 0.754661 (* 1 = 0.754661 loss)
I0428 19:45:18.375381 25771 solver.cpp:316] Optimization Done.
I0428 19:45:18.375387 25771 caffe.cpp:259] Optimization Done.
