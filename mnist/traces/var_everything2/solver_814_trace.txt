I0428 19:58:17.014375 28936 caffe.cpp:218] Using GPUs 0
I0428 19:58:17.052544 28936 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:17.505877 28936 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test814.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:17.506012 28936 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test814.prototxt
I0428 19:58:17.506371 28936 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:17.506400 28936 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:17.506484 28936 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:17.506548 28936 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:17.506644 28936 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:17.506664 28936 net.cpp:86] Creating Layer mnist
I0428 19:58:17.506670 28936 net.cpp:382] mnist -> data
I0428 19:58:17.506688 28936 net.cpp:382] mnist -> label
I0428 19:58:17.507709 28936 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:17.510241 28936 net.cpp:124] Setting up mnist
I0428 19:58:17.510288 28936 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:17.510293 28936 net.cpp:131] Top shape: 64 (64)
I0428 19:58:17.510296 28936 net.cpp:139] Memory required for data: 200960
I0428 19:58:17.510303 28936 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:17.510320 28936 net.cpp:86] Creating Layer conv0
I0428 19:58:17.510337 28936 net.cpp:408] conv0 <- data
I0428 19:58:17.510349 28936 net.cpp:382] conv0 -> conv0
I0428 19:58:17.734768 28936 net.cpp:124] Setting up conv0
I0428 19:58:17.734825 28936 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:17.734829 28936 net.cpp:139] Memory required for data: 1675520
I0428 19:58:17.734844 28936 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:17.734872 28936 net.cpp:86] Creating Layer pool0
I0428 19:58:17.734876 28936 net.cpp:408] pool0 <- conv0
I0428 19:58:17.734897 28936 net.cpp:382] pool0 -> pool0
I0428 19:58:17.734946 28936 net.cpp:124] Setting up pool0
I0428 19:58:17.734954 28936 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:17.734957 28936 net.cpp:139] Memory required for data: 2044160
I0428 19:58:17.734961 28936 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:17.734972 28936 net.cpp:86] Creating Layer conv1
I0428 19:58:17.734975 28936 net.cpp:408] conv1 <- pool0
I0428 19:58:17.734980 28936 net.cpp:382] conv1 -> conv1
I0428 19:58:17.737707 28936 net.cpp:124] Setting up conv1
I0428 19:58:17.737722 28936 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:17.737726 28936 net.cpp:139] Memory required for data: 2126080
I0428 19:58:17.737735 28936 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:17.737758 28936 net.cpp:86] Creating Layer pool1
I0428 19:58:17.737761 28936 net.cpp:408] pool1 <- conv1
I0428 19:58:17.737767 28936 net.cpp:382] pool1 -> pool1
I0428 19:58:17.737804 28936 net.cpp:124] Setting up pool1
I0428 19:58:17.737810 28936 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:17.737813 28936 net.cpp:139] Memory required for data: 2146560
I0428 19:58:17.737817 28936 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:17.737838 28936 net.cpp:86] Creating Layer ip1
I0428 19:58:17.737841 28936 net.cpp:408] ip1 <- pool1
I0428 19:58:17.737845 28936 net.cpp:382] ip1 -> ip1
I0428 19:58:17.737960 28936 net.cpp:124] Setting up ip1
I0428 19:58:17.737968 28936 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:17.737972 28936 net.cpp:139] Memory required for data: 2159360
I0428 19:58:17.737993 28936 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:17.737998 28936 net.cpp:86] Creating Layer relu1
I0428 19:58:17.738001 28936 net.cpp:408] relu1 <- ip1
I0428 19:58:17.738010 28936 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:17.738185 28936 net.cpp:124] Setting up relu1
I0428 19:58:17.738193 28936 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:17.738198 28936 net.cpp:139] Memory required for data: 2172160
I0428 19:58:17.738200 28936 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:17.738206 28936 net.cpp:86] Creating Layer ip2
I0428 19:58:17.738209 28936 net.cpp:408] ip2 <- ip1
I0428 19:58:17.738214 28936 net.cpp:382] ip2 -> ip2
I0428 19:58:17.738310 28936 net.cpp:124] Setting up ip2
I0428 19:58:17.738317 28936 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:17.738320 28936 net.cpp:139] Memory required for data: 2178560
I0428 19:58:17.738325 28936 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:17.738332 28936 net.cpp:86] Creating Layer relu2
I0428 19:58:17.738334 28936 net.cpp:408] relu2 <- ip2
I0428 19:58:17.738338 28936 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:17.739091 28936 net.cpp:124] Setting up relu2
I0428 19:58:17.739102 28936 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:17.739120 28936 net.cpp:139] Memory required for data: 2184960
I0428 19:58:17.739125 28936 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:17.739130 28936 net.cpp:86] Creating Layer ip3
I0428 19:58:17.739135 28936 net.cpp:408] ip3 <- ip2
I0428 19:58:17.739140 28936 net.cpp:382] ip3 -> ip3
I0428 19:58:17.739228 28936 net.cpp:124] Setting up ip3
I0428 19:58:17.739234 28936 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:17.739238 28936 net.cpp:139] Memory required for data: 2187520
I0428 19:58:17.739245 28936 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:17.739250 28936 net.cpp:86] Creating Layer relu3
I0428 19:58:17.739253 28936 net.cpp:408] relu3 <- ip3
I0428 19:58:17.739256 28936 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:17.739406 28936 net.cpp:124] Setting up relu3
I0428 19:58:17.739414 28936 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:17.739418 28936 net.cpp:139] Memory required for data: 2190080
I0428 19:58:17.739420 28936 layer_factory.hpp:77] Creating layer loss
I0428 19:58:17.739426 28936 net.cpp:86] Creating Layer loss
I0428 19:58:17.739429 28936 net.cpp:408] loss <- ip3
I0428 19:58:17.739434 28936 net.cpp:408] loss <- label
I0428 19:58:17.739439 28936 net.cpp:382] loss -> loss
I0428 19:58:17.739452 28936 layer_factory.hpp:77] Creating layer loss
I0428 19:58:17.739653 28936 net.cpp:124] Setting up loss
I0428 19:58:17.739661 28936 net.cpp:131] Top shape: (1)
I0428 19:58:17.739665 28936 net.cpp:134]     with loss weight 1
I0428 19:58:17.739678 28936 net.cpp:139] Memory required for data: 2190084
I0428 19:58:17.739682 28936 net.cpp:200] loss needs backward computation.
I0428 19:58:17.739686 28936 net.cpp:200] relu3 needs backward computation.
I0428 19:58:17.739688 28936 net.cpp:200] ip3 needs backward computation.
I0428 19:58:17.739691 28936 net.cpp:200] relu2 needs backward computation.
I0428 19:58:17.739694 28936 net.cpp:200] ip2 needs backward computation.
I0428 19:58:17.739697 28936 net.cpp:200] relu1 needs backward computation.
I0428 19:58:17.739699 28936 net.cpp:200] ip1 needs backward computation.
I0428 19:58:17.739702 28936 net.cpp:200] pool1 needs backward computation.
I0428 19:58:17.739706 28936 net.cpp:200] conv1 needs backward computation.
I0428 19:58:17.739709 28936 net.cpp:200] pool0 needs backward computation.
I0428 19:58:17.739712 28936 net.cpp:200] conv0 needs backward computation.
I0428 19:58:17.739715 28936 net.cpp:202] mnist does not need backward computation.
I0428 19:58:17.739733 28936 net.cpp:244] This network produces output loss
I0428 19:58:17.739742 28936 net.cpp:257] Network initialization done.
I0428 19:58:17.740061 28936 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test814.prototxt
I0428 19:58:17.740115 28936 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:17.740197 28936 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:17.740270 28936 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:17.740314 28936 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:17.740326 28936 net.cpp:86] Creating Layer mnist
I0428 19:58:17.740330 28936 net.cpp:382] mnist -> data
I0428 19:58:17.740337 28936 net.cpp:382] mnist -> label
I0428 19:58:17.740414 28936 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:17.742260 28936 net.cpp:124] Setting up mnist
I0428 19:58:17.742305 28936 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:17.742310 28936 net.cpp:131] Top shape: 100 (100)
I0428 19:58:17.742312 28936 net.cpp:139] Memory required for data: 314000
I0428 19:58:17.742316 28936 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:17.742322 28936 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:17.742326 28936 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:17.742331 28936 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:17.742337 28936 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:17.742422 28936 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:17.742430 28936 net.cpp:131] Top shape: 100 (100)
I0428 19:58:17.742434 28936 net.cpp:131] Top shape: 100 (100)
I0428 19:58:17.742436 28936 net.cpp:139] Memory required for data: 314800
I0428 19:58:17.742439 28936 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:17.742449 28936 net.cpp:86] Creating Layer conv0
I0428 19:58:17.742452 28936 net.cpp:408] conv0 <- data
I0428 19:58:17.742456 28936 net.cpp:382] conv0 -> conv0
I0428 19:58:17.744010 28936 net.cpp:124] Setting up conv0
I0428 19:58:17.744024 28936 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:17.744029 28936 net.cpp:139] Memory required for data: 2618800
I0428 19:58:17.744037 28936 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:17.744043 28936 net.cpp:86] Creating Layer pool0
I0428 19:58:17.744057 28936 net.cpp:408] pool0 <- conv0
I0428 19:58:17.744062 28936 net.cpp:382] pool0 -> pool0
I0428 19:58:17.744134 28936 net.cpp:124] Setting up pool0
I0428 19:58:17.744139 28936 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:17.744143 28936 net.cpp:139] Memory required for data: 3194800
I0428 19:58:17.744145 28936 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:17.744154 28936 net.cpp:86] Creating Layer conv1
I0428 19:58:17.744158 28936 net.cpp:408] conv1 <- pool0
I0428 19:58:17.744163 28936 net.cpp:382] conv1 -> conv1
I0428 19:58:17.746371 28936 net.cpp:124] Setting up conv1
I0428 19:58:17.746383 28936 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:17.746387 28936 net.cpp:139] Memory required for data: 3322800
I0428 19:58:17.746397 28936 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:17.746402 28936 net.cpp:86] Creating Layer pool1
I0428 19:58:17.746407 28936 net.cpp:408] pool1 <- conv1
I0428 19:58:17.746426 28936 net.cpp:382] pool1 -> pool1
I0428 19:58:17.746503 28936 net.cpp:124] Setting up pool1
I0428 19:58:17.746511 28936 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:17.746515 28936 net.cpp:139] Memory required for data: 3354800
I0428 19:58:17.746518 28936 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:17.746525 28936 net.cpp:86] Creating Layer ip1
I0428 19:58:17.746528 28936 net.cpp:408] ip1 <- pool1
I0428 19:58:17.746533 28936 net.cpp:382] ip1 -> ip1
I0428 19:58:17.746670 28936 net.cpp:124] Setting up ip1
I0428 19:58:17.746676 28936 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:17.746690 28936 net.cpp:139] Memory required for data: 3374800
I0428 19:58:17.746697 28936 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:17.746702 28936 net.cpp:86] Creating Layer relu1
I0428 19:58:17.746706 28936 net.cpp:408] relu1 <- ip1
I0428 19:58:17.746711 28936 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:17.746870 28936 net.cpp:124] Setting up relu1
I0428 19:58:17.746881 28936 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:17.746884 28936 net.cpp:139] Memory required for data: 3394800
I0428 19:58:17.746887 28936 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:17.746894 28936 net.cpp:86] Creating Layer ip2
I0428 19:58:17.746898 28936 net.cpp:408] ip2 <- ip1
I0428 19:58:17.746903 28936 net.cpp:382] ip2 -> ip2
I0428 19:58:17.747015 28936 net.cpp:124] Setting up ip2
I0428 19:58:17.747021 28936 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:17.747025 28936 net.cpp:139] Memory required for data: 3404800
I0428 19:58:17.747030 28936 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:17.747035 28936 net.cpp:86] Creating Layer relu2
I0428 19:58:17.747037 28936 net.cpp:408] relu2 <- ip2
I0428 19:58:17.747041 28936 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:17.747256 28936 net.cpp:124] Setting up relu2
I0428 19:58:17.747267 28936 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:17.747269 28936 net.cpp:139] Memory required for data: 3414800
I0428 19:58:17.747273 28936 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:17.747278 28936 net.cpp:86] Creating Layer ip3
I0428 19:58:17.747282 28936 net.cpp:408] ip3 <- ip2
I0428 19:58:17.747287 28936 net.cpp:382] ip3 -> ip3
I0428 19:58:17.747395 28936 net.cpp:124] Setting up ip3
I0428 19:58:17.747418 28936 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:17.747422 28936 net.cpp:139] Memory required for data: 3418800
I0428 19:58:17.747447 28936 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:17.747452 28936 net.cpp:86] Creating Layer relu3
I0428 19:58:17.747455 28936 net.cpp:408] relu3 <- ip3
I0428 19:58:17.747459 28936 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:17.748312 28936 net.cpp:124] Setting up relu3
I0428 19:58:17.748323 28936 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:17.748327 28936 net.cpp:139] Memory required for data: 3422800
I0428 19:58:17.748332 28936 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:17.748337 28936 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:17.748339 28936 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:17.748345 28936 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:17.748352 28936 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:17.748386 28936 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:17.748394 28936 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:17.748397 28936 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:17.748400 28936 net.cpp:139] Memory required for data: 3430800
I0428 19:58:17.748404 28936 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:17.748409 28936 net.cpp:86] Creating Layer accuracy
I0428 19:58:17.748412 28936 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:17.748416 28936 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:17.748420 28936 net.cpp:382] accuracy -> accuracy
I0428 19:58:17.748427 28936 net.cpp:124] Setting up accuracy
I0428 19:58:17.748431 28936 net.cpp:131] Top shape: (1)
I0428 19:58:17.748435 28936 net.cpp:139] Memory required for data: 3430804
I0428 19:58:17.748437 28936 layer_factory.hpp:77] Creating layer loss
I0428 19:58:17.748441 28936 net.cpp:86] Creating Layer loss
I0428 19:58:17.748445 28936 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:17.748448 28936 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:17.748452 28936 net.cpp:382] loss -> loss
I0428 19:58:17.748458 28936 layer_factory.hpp:77] Creating layer loss
I0428 19:58:17.748729 28936 net.cpp:124] Setting up loss
I0428 19:58:17.748739 28936 net.cpp:131] Top shape: (1)
I0428 19:58:17.748741 28936 net.cpp:134]     with loss weight 1
I0428 19:58:17.748749 28936 net.cpp:139] Memory required for data: 3430808
I0428 19:58:17.748761 28936 net.cpp:200] loss needs backward computation.
I0428 19:58:17.748766 28936 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:17.748770 28936 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:17.748790 28936 net.cpp:200] relu3 needs backward computation.
I0428 19:58:17.748793 28936 net.cpp:200] ip3 needs backward computation.
I0428 19:58:17.748796 28936 net.cpp:200] relu2 needs backward computation.
I0428 19:58:17.748800 28936 net.cpp:200] ip2 needs backward computation.
I0428 19:58:17.748803 28936 net.cpp:200] relu1 needs backward computation.
I0428 19:58:17.748806 28936 net.cpp:200] ip1 needs backward computation.
I0428 19:58:17.748816 28936 net.cpp:200] pool1 needs backward computation.
I0428 19:58:17.748842 28936 net.cpp:200] conv1 needs backward computation.
I0428 19:58:17.748845 28936 net.cpp:200] pool0 needs backward computation.
I0428 19:58:17.748848 28936 net.cpp:200] conv0 needs backward computation.
I0428 19:58:17.748853 28936 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:17.748857 28936 net.cpp:202] mnist does not need backward computation.
I0428 19:58:17.748860 28936 net.cpp:244] This network produces output accuracy
I0428 19:58:17.748864 28936 net.cpp:244] This network produces output loss
I0428 19:58:17.748877 28936 net.cpp:257] Network initialization done.
I0428 19:58:17.748921 28936 solver.cpp:56] Solver scaffolding done.
I0428 19:58:17.749315 28936 caffe.cpp:248] Starting Optimization
I0428 19:58:17.749322 28936 solver.cpp:273] Solving LeNet
I0428 19:58:17.749325 28936 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:17.749471 28936 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:17.755201 28936 blocking_queue.cpp:49] Waiting for data
I0428 19:58:17.805881 28944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:17.806382 28936 solver.cpp:398]     Test net output #0: accuracy = 0.0966
I0428 19:58:17.806416 28936 solver.cpp:398]     Test net output #1: loss = 2.30829 (* 1 = 2.30829 loss)
I0428 19:58:17.809046 28936 solver.cpp:219] Iteration 0 (0 iter/s, 0.0596961s/100 iters), loss = 2.3175
I0428 19:58:17.809099 28936 solver.cpp:238]     Train net output #0: loss = 2.3175 (* 1 = 2.3175 loss)
I0428 19:58:17.809111 28936 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:17.883196 28936 solver.cpp:219] Iteration 100 (1349.75 iter/s, 0.0740876s/100 iters), loss = 0.659755
I0428 19:58:17.883236 28936 solver.cpp:238]     Train net output #0: loss = 0.659755 (* 1 = 0.659755 loss)
I0428 19:58:17.883242 28936 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:17.957324 28936 solver.cpp:219] Iteration 200 (1349.64 iter/s, 0.0740936s/100 iters), loss = 0.562454
I0428 19:58:17.957361 28936 solver.cpp:238]     Train net output #0: loss = 0.562454 (* 1 = 0.562454 loss)
I0428 19:58:17.957367 28936 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:18.030748 28936 solver.cpp:219] Iteration 300 (1362.51 iter/s, 0.0733942s/100 iters), loss = 0.595586
I0428 19:58:18.030786 28936 solver.cpp:238]     Train net output #0: loss = 0.595586 (* 1 = 0.595586 loss)
I0428 19:58:18.030792 28936 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:18.104898 28936 solver.cpp:219] Iteration 400 (1349.2 iter/s, 0.0741181s/100 iters), loss = 0.339148
I0428 19:58:18.104936 28936 solver.cpp:238]     Train net output #0: loss = 0.339148 (* 1 = 0.339148 loss)
I0428 19:58:18.104943 28936 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:18.177695 28936 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:18.223104 28944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:18.223619 28936 solver.cpp:398]     Test net output #0: accuracy = 0.851
I0428 19:58:18.223652 28936 solver.cpp:398]     Test net output #1: loss = 0.413332 (* 1 = 0.413332 loss)
I0428 19:58:18.224496 28936 solver.cpp:219] Iteration 500 (836.377 iter/s, 0.119563s/100 iters), loss = 0.360468
I0428 19:58:18.224557 28936 solver.cpp:238]     Train net output #0: loss = 0.360468 (* 1 = 0.360468 loss)
I0428 19:58:18.224592 28936 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:18.307657 28936 solver.cpp:219] Iteration 600 (1203.51 iter/s, 0.0830905s/100 iters), loss = 0.27762
I0428 19:58:18.307694 28936 solver.cpp:238]     Train net output #0: loss = 0.27762 (* 1 = 0.27762 loss)
I0428 19:58:18.307700 28936 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:18.386361 28936 solver.cpp:219] Iteration 700 (1271.09 iter/s, 0.0786729s/100 iters), loss = 0.590195
I0428 19:58:18.386401 28936 solver.cpp:238]     Train net output #0: loss = 0.590195 (* 1 = 0.590195 loss)
I0428 19:58:18.386407 28936 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:18.463474 28936 solver.cpp:219] Iteration 800 (1297.4 iter/s, 0.0770775s/100 iters), loss = 0.41403
I0428 19:58:18.463512 28936 solver.cpp:238]     Train net output #0: loss = 0.41403 (* 1 = 0.41403 loss)
I0428 19:58:18.463518 28936 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:18.540503 28936 solver.cpp:219] Iteration 900 (1298.76 iter/s, 0.0769966s/100 iters), loss = 0.535591
I0428 19:58:18.540541 28936 solver.cpp:238]     Train net output #0: loss = 0.535591 (* 1 = 0.535591 loss)
I0428 19:58:18.540547 28936 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:18.570192 28942 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:18.620703 28936 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:18.621558 28936 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:18.622062 28936 solver.cpp:311] Iteration 1000, loss = 0.419541
I0428 19:58:18.622092 28936 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:18.667235 28944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:18.667794 28936 solver.cpp:398]     Test net output #0: accuracy = 0.8686
I0428 19:58:18.667811 28936 solver.cpp:398]     Test net output #1: loss = 0.347543 (* 1 = 0.347543 loss)
I0428 19:58:18.667830 28936 solver.cpp:316] Optimization Done.
I0428 19:58:18.667834 28936 caffe.cpp:259] Optimization Done.
