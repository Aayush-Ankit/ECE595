I0428 19:57:15.179371 28632 caffe.cpp:218] Using GPUs 0
I0428 19:57:15.215503 28632 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:15.726951 28632 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test783.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:15.727093 28632 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test783.prototxt
I0428 19:57:15.727474 28632 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:15.727494 28632 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:15.727584 28632 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:15.727661 28632 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:15.727759 28632 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:15.727784 28632 net.cpp:86] Creating Layer mnist
I0428 19:57:15.727795 28632 net.cpp:382] mnist -> data
I0428 19:57:15.727821 28632 net.cpp:382] mnist -> label
I0428 19:57:15.728906 28632 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:15.731395 28632 net.cpp:124] Setting up mnist
I0428 19:57:15.731415 28632 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:15.731422 28632 net.cpp:131] Top shape: 64 (64)
I0428 19:57:15.731426 28632 net.cpp:139] Memory required for data: 200960
I0428 19:57:15.731432 28632 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:15.731449 28632 net.cpp:86] Creating Layer conv0
I0428 19:57:15.731456 28632 net.cpp:408] conv0 <- data
I0428 19:57:15.731467 28632 net.cpp:382] conv0 -> conv0
I0428 19:57:16.020144 28632 net.cpp:124] Setting up conv0
I0428 19:57:16.020185 28632 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:16.020189 28632 net.cpp:139] Memory required for data: 1675520
I0428 19:57:16.020236 28632 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:16.020264 28632 net.cpp:86] Creating Layer pool0
I0428 19:57:16.020268 28632 net.cpp:408] pool0 <- conv0
I0428 19:57:16.020273 28632 net.cpp:382] pool0 -> pool0
I0428 19:57:16.020319 28632 net.cpp:124] Setting up pool0
I0428 19:57:16.020331 28632 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:16.020334 28632 net.cpp:139] Memory required for data: 2044160
I0428 19:57:16.020337 28632 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:16.020349 28632 net.cpp:86] Creating Layer conv1
I0428 19:57:16.020351 28632 net.cpp:408] conv1 <- pool0
I0428 19:57:16.020355 28632 net.cpp:382] conv1 -> conv1
I0428 19:57:16.023169 28632 net.cpp:124] Setting up conv1
I0428 19:57:16.023182 28632 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:16.023201 28632 net.cpp:139] Memory required for data: 2126080
I0428 19:57:16.023210 28632 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:16.023216 28632 net.cpp:86] Creating Layer pool1
I0428 19:57:16.023221 28632 net.cpp:408] pool1 <- conv1
I0428 19:57:16.023226 28632 net.cpp:382] pool1 -> pool1
I0428 19:57:16.023277 28632 net.cpp:124] Setting up pool1
I0428 19:57:16.023283 28632 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:16.023285 28632 net.cpp:139] Memory required for data: 2146560
I0428 19:57:16.023288 28632 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:16.023295 28632 net.cpp:86] Creating Layer ip1
I0428 19:57:16.023298 28632 net.cpp:408] ip1 <- pool1
I0428 19:57:16.023303 28632 net.cpp:382] ip1 -> ip1
I0428 19:57:16.023398 28632 net.cpp:124] Setting up ip1
I0428 19:57:16.023406 28632 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:16.023409 28632 net.cpp:139] Memory required for data: 2149120
I0428 19:57:16.023416 28632 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:16.023422 28632 net.cpp:86] Creating Layer relu1
I0428 19:57:16.023424 28632 net.cpp:408] relu1 <- ip1
I0428 19:57:16.023429 28632 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:16.023596 28632 net.cpp:124] Setting up relu1
I0428 19:57:16.023603 28632 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:16.023607 28632 net.cpp:139] Memory required for data: 2151680
I0428 19:57:16.023609 28632 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:16.023615 28632 net.cpp:86] Creating Layer ip2
I0428 19:57:16.023618 28632 net.cpp:408] ip2 <- ip1
I0428 19:57:16.023623 28632 net.cpp:382] ip2 -> ip2
I0428 19:57:16.023715 28632 net.cpp:124] Setting up ip2
I0428 19:57:16.023721 28632 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:16.023725 28632 net.cpp:139] Memory required for data: 2154240
I0428 19:57:16.023730 28632 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:16.023736 28632 net.cpp:86] Creating Layer relu2
I0428 19:57:16.023738 28632 net.cpp:408] relu2 <- ip2
I0428 19:57:16.023742 28632 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:16.024538 28632 net.cpp:124] Setting up relu2
I0428 19:57:16.024549 28632 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:16.024554 28632 net.cpp:139] Memory required for data: 2156800
I0428 19:57:16.024557 28632 layer_factory.hpp:77] Creating layer loss
I0428 19:57:16.024564 28632 net.cpp:86] Creating Layer loss
I0428 19:57:16.024567 28632 net.cpp:408] loss <- ip2
I0428 19:57:16.024571 28632 net.cpp:408] loss <- label
I0428 19:57:16.024576 28632 net.cpp:382] loss -> loss
I0428 19:57:16.024603 28632 layer_factory.hpp:77] Creating layer loss
I0428 19:57:16.024874 28632 net.cpp:124] Setting up loss
I0428 19:57:16.024900 28632 net.cpp:131] Top shape: (1)
I0428 19:57:16.024904 28632 net.cpp:134]     with loss weight 1
I0428 19:57:16.024919 28632 net.cpp:139] Memory required for data: 2156804
I0428 19:57:16.024922 28632 net.cpp:200] loss needs backward computation.
I0428 19:57:16.024926 28632 net.cpp:200] relu2 needs backward computation.
I0428 19:57:16.024930 28632 net.cpp:200] ip2 needs backward computation.
I0428 19:57:16.024933 28632 net.cpp:200] relu1 needs backward computation.
I0428 19:57:16.024936 28632 net.cpp:200] ip1 needs backward computation.
I0428 19:57:16.024950 28632 net.cpp:200] pool1 needs backward computation.
I0428 19:57:16.024955 28632 net.cpp:200] conv1 needs backward computation.
I0428 19:57:16.024958 28632 net.cpp:200] pool0 needs backward computation.
I0428 19:57:16.024961 28632 net.cpp:200] conv0 needs backward computation.
I0428 19:57:16.024966 28632 net.cpp:202] mnist does not need backward computation.
I0428 19:57:16.024968 28632 net.cpp:244] This network produces output loss
I0428 19:57:16.024977 28632 net.cpp:257] Network initialization done.
I0428 19:57:16.025362 28632 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test783.prototxt
I0428 19:57:16.025401 28632 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:16.025486 28632 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:16.025564 28632 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:16.025619 28632 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:16.025630 28632 net.cpp:86] Creating Layer mnist
I0428 19:57:16.025637 28632 net.cpp:382] mnist -> data
I0428 19:57:16.025648 28632 net.cpp:382] mnist -> label
I0428 19:57:16.025748 28632 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:16.028059 28632 net.cpp:124] Setting up mnist
I0428 19:57:16.028072 28632 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:16.028077 28632 net.cpp:131] Top shape: 100 (100)
I0428 19:57:16.028080 28632 net.cpp:139] Memory required for data: 314000
I0428 19:57:16.028084 28632 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:16.028101 28632 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:16.028105 28632 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:16.028110 28632 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:16.028117 28632 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:16.028208 28632 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:16.028225 28632 net.cpp:131] Top shape: 100 (100)
I0428 19:57:16.028229 28632 net.cpp:131] Top shape: 100 (100)
I0428 19:57:16.028233 28632 net.cpp:139] Memory required for data: 314800
I0428 19:57:16.028235 28632 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:16.028261 28632 net.cpp:86] Creating Layer conv0
I0428 19:57:16.028264 28632 net.cpp:408] conv0 <- data
I0428 19:57:16.028271 28632 net.cpp:382] conv0 -> conv0
I0428 19:57:16.030087 28632 net.cpp:124] Setting up conv0
I0428 19:57:16.030100 28632 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:16.030119 28632 net.cpp:139] Memory required for data: 2618800
I0428 19:57:16.030128 28632 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:16.030135 28632 net.cpp:86] Creating Layer pool0
I0428 19:57:16.030139 28632 net.cpp:408] pool0 <- conv0
I0428 19:57:16.030143 28632 net.cpp:382] pool0 -> pool0
I0428 19:57:16.030196 28632 net.cpp:124] Setting up pool0
I0428 19:57:16.030201 28632 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:16.030205 28632 net.cpp:139] Memory required for data: 3194800
I0428 19:57:16.030207 28632 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:16.030216 28632 net.cpp:86] Creating Layer conv1
I0428 19:57:16.030220 28632 net.cpp:408] conv1 <- pool0
I0428 19:57:16.030228 28632 net.cpp:382] conv1 -> conv1
I0428 19:57:16.032327 28632 net.cpp:124] Setting up conv1
I0428 19:57:16.032342 28632 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:16.032346 28632 net.cpp:139] Memory required for data: 3322800
I0428 19:57:16.032356 28632 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:16.032377 28632 net.cpp:86] Creating Layer pool1
I0428 19:57:16.032380 28632 net.cpp:408] pool1 <- conv1
I0428 19:57:16.032384 28632 net.cpp:382] pool1 -> pool1
I0428 19:57:16.032424 28632 net.cpp:124] Setting up pool1
I0428 19:57:16.032429 28632 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:16.032433 28632 net.cpp:139] Memory required for data: 3354800
I0428 19:57:16.032436 28632 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:16.032443 28632 net.cpp:86] Creating Layer ip1
I0428 19:57:16.032446 28632 net.cpp:408] ip1 <- pool1
I0428 19:57:16.032450 28632 net.cpp:382] ip1 -> ip1
I0428 19:57:16.032552 28632 net.cpp:124] Setting up ip1
I0428 19:57:16.032559 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.032562 28632 net.cpp:139] Memory required for data: 3358800
I0428 19:57:16.032568 28632 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:16.032574 28632 net.cpp:86] Creating Layer relu1
I0428 19:57:16.032578 28632 net.cpp:408] relu1 <- ip1
I0428 19:57:16.032582 28632 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:16.032814 28632 net.cpp:124] Setting up relu1
I0428 19:57:16.032841 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.032845 28632 net.cpp:139] Memory required for data: 3362800
I0428 19:57:16.032847 28632 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:16.032855 28632 net.cpp:86] Creating Layer ip2
I0428 19:57:16.032857 28632 net.cpp:408] ip2 <- ip1
I0428 19:57:16.032863 28632 net.cpp:382] ip2 -> ip2
I0428 19:57:16.033016 28632 net.cpp:124] Setting up ip2
I0428 19:57:16.033041 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.033046 28632 net.cpp:139] Memory required for data: 3366800
I0428 19:57:16.033051 28632 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:16.033058 28632 net.cpp:86] Creating Layer relu2
I0428 19:57:16.033067 28632 net.cpp:408] relu2 <- ip2
I0428 19:57:16.033072 28632 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:16.033298 28632 net.cpp:124] Setting up relu2
I0428 19:57:16.033306 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.033309 28632 net.cpp:139] Memory required for data: 3370800
I0428 19:57:16.033313 28632 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:16.033319 28632 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:16.033323 28632 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:16.033327 28632 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:16.033344 28632 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:16.033385 28632 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:16.033393 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.033397 28632 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:16.033399 28632 net.cpp:139] Memory required for data: 3378800
I0428 19:57:16.033402 28632 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:16.033409 28632 net.cpp:86] Creating Layer accuracy
I0428 19:57:16.033412 28632 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:16.033417 28632 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:16.033421 28632 net.cpp:382] accuracy -> accuracy
I0428 19:57:16.033427 28632 net.cpp:124] Setting up accuracy
I0428 19:57:16.033432 28632 net.cpp:131] Top shape: (1)
I0428 19:57:16.033435 28632 net.cpp:139] Memory required for data: 3378804
I0428 19:57:16.033438 28632 layer_factory.hpp:77] Creating layer loss
I0428 19:57:16.033444 28632 net.cpp:86] Creating Layer loss
I0428 19:57:16.033448 28632 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:16.033452 28632 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:16.033462 28632 net.cpp:382] loss -> loss
I0428 19:57:16.033468 28632 layer_factory.hpp:77] Creating layer loss
I0428 19:57:16.033731 28632 net.cpp:124] Setting up loss
I0428 19:57:16.033740 28632 net.cpp:131] Top shape: (1)
I0428 19:57:16.033743 28632 net.cpp:134]     with loss weight 1
I0428 19:57:16.033749 28632 net.cpp:139] Memory required for data: 3378808
I0428 19:57:16.033759 28632 net.cpp:200] loss needs backward computation.
I0428 19:57:16.033763 28632 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:16.033767 28632 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:16.033771 28632 net.cpp:200] relu2 needs backward computation.
I0428 19:57:16.033773 28632 net.cpp:200] ip2 needs backward computation.
I0428 19:57:16.033776 28632 net.cpp:200] relu1 needs backward computation.
I0428 19:57:16.033779 28632 net.cpp:200] ip1 needs backward computation.
I0428 19:57:16.033782 28632 net.cpp:200] pool1 needs backward computation.
I0428 19:57:16.033785 28632 net.cpp:200] conv1 needs backward computation.
I0428 19:57:16.033788 28632 net.cpp:200] pool0 needs backward computation.
I0428 19:57:16.033792 28632 net.cpp:200] conv0 needs backward computation.
I0428 19:57:16.033794 28632 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:16.033803 28632 net.cpp:202] mnist does not need backward computation.
I0428 19:57:16.033807 28632 net.cpp:244] This network produces output accuracy
I0428 19:57:16.033809 28632 net.cpp:244] This network produces output loss
I0428 19:57:16.033819 28632 net.cpp:257] Network initialization done.
I0428 19:57:16.033856 28632 solver.cpp:56] Solver scaffolding done.
I0428 19:57:16.034159 28632 caffe.cpp:248] Starting Optimization
I0428 19:57:16.034165 28632 solver.cpp:273] Solving LeNet
I0428 19:57:16.034168 28632 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:16.034967 28632 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:16.038352 28632 blocking_queue.cpp:49] Waiting for data
I0428 19:57:16.109720 28639 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:16.110271 28632 solver.cpp:398]     Test net output #0: accuracy = 0.0769
I0428 19:57:16.110308 28632 solver.cpp:398]     Test net output #1: loss = 2.35226 (* 1 = 2.35226 loss)
I0428 19:57:16.112844 28632 solver.cpp:219] Iteration 0 (-1.8236e-31 iter/s, 0.0786175s/100 iters), loss = 2.36574
I0428 19:57:16.112884 28632 solver.cpp:238]     Train net output #0: loss = 2.36574 (* 1 = 2.36574 loss)
I0428 19:57:16.112895 28632 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:16.182221 28632 solver.cpp:219] Iteration 100 (1442.14 iter/s, 0.0693412s/100 iters), loss = 0.824509
I0428 19:57:16.182260 28632 solver.cpp:238]     Train net output #0: loss = 0.824509 (* 1 = 0.824509 loss)
I0428 19:57:16.182267 28632 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:16.250663 28632 solver.cpp:219] Iteration 200 (1462.14 iter/s, 0.068393s/100 iters), loss = 0.283415
I0428 19:57:16.250713 28632 solver.cpp:238]     Train net output #0: loss = 0.283415 (* 1 = 0.283415 loss)
I0428 19:57:16.250720 28632 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:16.318822 28632 solver.cpp:219] Iteration 300 (1468.38 iter/s, 0.0681021s/100 iters), loss = 0.292403
I0428 19:57:16.318859 28632 solver.cpp:238]     Train net output #0: loss = 0.292403 (* 1 = 0.292403 loss)
I0428 19:57:16.318866 28632 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:16.386523 28632 solver.cpp:219] Iteration 400 (1478.12 iter/s, 0.0676537s/100 iters), loss = 0.174385
I0428 19:57:16.386560 28632 solver.cpp:238]     Train net output #0: loss = 0.174385 (* 1 = 0.174385 loss)
I0428 19:57:16.386565 28632 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:16.453347 28632 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:16.505930 28639 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:16.506428 28632 solver.cpp:398]     Test net output #0: accuracy = 0.9403
I0428 19:57:16.506451 28632 solver.cpp:398]     Test net output #1: loss = 0.198403 (* 1 = 0.198403 loss)
I0428 19:57:16.507206 28632 solver.cpp:219] Iteration 500 (828.852 iter/s, 0.120649s/100 iters), loss = 0.170491
I0428 19:57:16.507235 28632 solver.cpp:238]     Train net output #0: loss = 0.170491 (* 1 = 0.170491 loss)
I0428 19:57:16.507243 28632 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:16.577126 28632 solver.cpp:219] Iteration 600 (1430.97 iter/s, 0.0698827s/100 iters), loss = 0.183775
I0428 19:57:16.577149 28632 solver.cpp:238]     Train net output #0: loss = 0.183775 (* 1 = 0.183775 loss)
I0428 19:57:16.577157 28632 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:16.644054 28632 solver.cpp:219] Iteration 700 (1494.84 iter/s, 0.0668968s/100 iters), loss = 0.188484
I0428 19:57:16.644078 28632 solver.cpp:238]     Train net output #0: loss = 0.188484 (* 1 = 0.188484 loss)
I0428 19:57:16.644083 28632 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:16.712455 28632 solver.cpp:219] Iteration 800 (1462.64 iter/s, 0.0683694s/100 iters), loss = 0.147717
I0428 19:57:16.712492 28632 solver.cpp:238]     Train net output #0: loss = 0.147718 (* 1 = 0.147718 loss)
I0428 19:57:16.712498 28632 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:16.781092 28632 solver.cpp:219] Iteration 900 (1457.6 iter/s, 0.068606s/100 iters), loss = 0.192871
I0428 19:57:16.781131 28632 solver.cpp:238]     Train net output #0: loss = 0.192871 (* 1 = 0.192871 loss)
I0428 19:57:16.781152 28632 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:16.804266 28638 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:16.848870 28632 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:16.849577 28632 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:16.850025 28632 solver.cpp:311] Iteration 1000, loss = 0.0757901
I0428 19:57:16.850040 28632 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:16.895864 28639 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:16.896384 28632 solver.cpp:398]     Test net output #0: accuracy = 0.9598
I0428 19:57:16.896401 28632 solver.cpp:398]     Test net output #1: loss = 0.132927 (* 1 = 0.132927 loss)
I0428 19:57:16.896425 28632 solver.cpp:316] Optimization Done.
I0428 19:57:16.896427 28632 caffe.cpp:259] Optimization Done.
