I0428 19:49:49.161679 26862 caffe.cpp:218] Using GPUs 0
I0428 19:49:49.197691 26862 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:49.647586 26862 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test586.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:49.647734 26862 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test586.prototxt
I0428 19:49:49.648027 26862 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:49.648038 26862 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:49.648131 26862 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:49.648185 26862 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:49.648286 26862 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:49.648306 26862 net.cpp:86] Creating Layer mnist
I0428 19:49:49.648315 26862 net.cpp:382] mnist -> data
I0428 19:49:49.648334 26862 net.cpp:382] mnist -> label
I0428 19:49:49.649384 26862 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:49.651607 26862 net.cpp:124] Setting up mnist
I0428 19:49:49.651636 26862 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:49.651641 26862 net.cpp:131] Top shape: 64 (64)
I0428 19:49:49.651644 26862 net.cpp:139] Memory required for data: 200960
I0428 19:49:49.651650 26862 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:49.651664 26862 net.cpp:86] Creating Layer conv0
I0428 19:49:49.651669 26862 net.cpp:408] conv0 <- data
I0428 19:49:49.651679 26862 net.cpp:382] conv0 -> conv0
I0428 19:49:49.882299 26862 net.cpp:124] Setting up conv0
I0428 19:49:49.882325 26862 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:49.882329 26862 net.cpp:139] Memory required for data: 938240
I0428 19:49:49.882344 26862 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:49.882357 26862 net.cpp:86] Creating Layer pool0
I0428 19:49:49.882361 26862 net.cpp:408] pool0 <- conv0
I0428 19:49:49.882366 26862 net.cpp:382] pool0 -> pool0
I0428 19:49:49.882426 26862 net.cpp:124] Setting up pool0
I0428 19:49:49.882432 26862 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:49.882467 26862 net.cpp:139] Memory required for data: 1122560
I0428 19:49:49.882470 26862 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:49.882481 26862 net.cpp:86] Creating Layer conv1
I0428 19:49:49.882484 26862 net.cpp:408] conv1 <- pool0
I0428 19:49:49.882489 26862 net.cpp:382] conv1 -> conv1
I0428 19:49:49.885366 26862 net.cpp:124] Setting up conv1
I0428 19:49:49.885396 26862 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:49:49.885399 26862 net.cpp:139] Memory required for data: 1286400
I0428 19:49:49.885407 26862 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:49.885416 26862 net.cpp:86] Creating Layer pool1
I0428 19:49:49.885418 26862 net.cpp:408] pool1 <- conv1
I0428 19:49:49.885423 26862 net.cpp:382] pool1 -> pool1
I0428 19:49:49.885475 26862 net.cpp:124] Setting up pool1
I0428 19:49:49.885480 26862 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:49:49.885483 26862 net.cpp:139] Memory required for data: 1327360
I0428 19:49:49.885486 26862 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:49.885493 26862 net.cpp:86] Creating Layer ip1
I0428 19:49:49.885496 26862 net.cpp:408] ip1 <- pool1
I0428 19:49:49.885501 26862 net.cpp:382] ip1 -> ip1
I0428 19:49:49.885618 26862 net.cpp:124] Setting up ip1
I0428 19:49:49.885625 26862 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:49.885628 26862 net.cpp:139] Memory required for data: 1329920
I0428 19:49:49.885635 26862 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:49.885640 26862 net.cpp:86] Creating Layer relu1
I0428 19:49:49.885643 26862 net.cpp:408] relu1 <- ip1
I0428 19:49:49.885648 26862 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:49.885803 26862 net.cpp:124] Setting up relu1
I0428 19:49:49.885812 26862 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:49.885814 26862 net.cpp:139] Memory required for data: 1332480
I0428 19:49:49.885818 26862 layer_factory.hpp:77] Creating layer loss
I0428 19:49:49.885823 26862 net.cpp:86] Creating Layer loss
I0428 19:49:49.885826 26862 net.cpp:408] loss <- ip1
I0428 19:49:49.885830 26862 net.cpp:408] loss <- label
I0428 19:49:49.885834 26862 net.cpp:382] loss -> loss
I0428 19:49:49.885848 26862 layer_factory.hpp:77] Creating layer loss
I0428 19:49:49.886629 26862 net.cpp:124] Setting up loss
I0428 19:49:49.886641 26862 net.cpp:131] Top shape: (1)
I0428 19:49:49.886659 26862 net.cpp:134]     with loss weight 1
I0428 19:49:49.886687 26862 net.cpp:139] Memory required for data: 1332484
I0428 19:49:49.886692 26862 net.cpp:200] loss needs backward computation.
I0428 19:49:49.886694 26862 net.cpp:200] relu1 needs backward computation.
I0428 19:49:49.886698 26862 net.cpp:200] ip1 needs backward computation.
I0428 19:49:49.886700 26862 net.cpp:200] pool1 needs backward computation.
I0428 19:49:49.886703 26862 net.cpp:200] conv1 needs backward computation.
I0428 19:49:49.886705 26862 net.cpp:200] pool0 needs backward computation.
I0428 19:49:49.886708 26862 net.cpp:200] conv0 needs backward computation.
I0428 19:49:49.886711 26862 net.cpp:202] mnist does not need backward computation.
I0428 19:49:49.886713 26862 net.cpp:244] This network produces output loss
I0428 19:49:49.886720 26862 net.cpp:257] Network initialization done.
I0428 19:49:49.887017 26862 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test586.prototxt
I0428 19:49:49.887042 26862 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:49.887117 26862 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:49.887217 26862 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:49.887259 26862 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:49.887270 26862 net.cpp:86] Creating Layer mnist
I0428 19:49:49.887275 26862 net.cpp:382] mnist -> data
I0428 19:49:49.887282 26862 net.cpp:382] mnist -> label
I0428 19:49:49.887359 26862 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:49.889523 26862 net.cpp:124] Setting up mnist
I0428 19:49:49.889552 26862 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:49.889557 26862 net.cpp:131] Top shape: 100 (100)
I0428 19:49:49.889560 26862 net.cpp:139] Memory required for data: 314000
I0428 19:49:49.889564 26862 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:49.889570 26862 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:49.889574 26862 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:49.889578 26862 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:49.889600 26862 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:49.889737 26862 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:49.889745 26862 net.cpp:131] Top shape: 100 (100)
I0428 19:49:49.889750 26862 net.cpp:131] Top shape: 100 (100)
I0428 19:49:49.889752 26862 net.cpp:139] Memory required for data: 314800
I0428 19:49:49.889755 26862 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:49.889765 26862 net.cpp:86] Creating Layer conv0
I0428 19:49:49.889768 26862 net.cpp:408] conv0 <- data
I0428 19:49:49.889773 26862 net.cpp:382] conv0 -> conv0
I0428 19:49:49.890643 26862 net.cpp:124] Setting up conv0
I0428 19:49:49.890655 26862 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:49.890658 26862 net.cpp:139] Memory required for data: 1466800
I0428 19:49:49.890666 26862 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:49.890671 26862 net.cpp:86] Creating Layer pool0
I0428 19:49:49.890674 26862 net.cpp:408] pool0 <- conv0
I0428 19:49:49.890678 26862 net.cpp:382] pool0 -> pool0
I0428 19:49:49.890710 26862 net.cpp:124] Setting up pool0
I0428 19:49:49.890715 26862 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:49.890717 26862 net.cpp:139] Memory required for data: 1754800
I0428 19:49:49.890720 26862 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:49.890727 26862 net.cpp:86] Creating Layer conv1
I0428 19:49:49.890730 26862 net.cpp:408] conv1 <- pool0
I0428 19:49:49.890734 26862 net.cpp:382] conv1 -> conv1
I0428 19:49:49.893013 26862 net.cpp:124] Setting up conv1
I0428 19:49:49.893028 26862 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:49:49.893033 26862 net.cpp:139] Memory required for data: 2010800
I0428 19:49:49.893041 26862 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:49.893048 26862 net.cpp:86] Creating Layer pool1
I0428 19:49:49.893079 26862 net.cpp:408] pool1 <- conv1
I0428 19:49:49.893085 26862 net.cpp:382] pool1 -> pool1
I0428 19:49:49.893126 26862 net.cpp:124] Setting up pool1
I0428 19:49:49.893131 26862 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:49:49.893134 26862 net.cpp:139] Memory required for data: 2074800
I0428 19:49:49.893138 26862 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:49.893153 26862 net.cpp:86] Creating Layer ip1
I0428 19:49:49.893157 26862 net.cpp:408] ip1 <- pool1
I0428 19:49:49.893162 26862 net.cpp:382] ip1 -> ip1
I0428 19:49:49.893303 26862 net.cpp:124] Setting up ip1
I0428 19:49:49.893311 26862 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:49.893314 26862 net.cpp:139] Memory required for data: 2078800
I0428 19:49:49.893321 26862 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:49.893326 26862 net.cpp:86] Creating Layer relu1
I0428 19:49:49.893328 26862 net.cpp:408] relu1 <- ip1
I0428 19:49:49.893333 26862 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:49.894173 26862 net.cpp:124] Setting up relu1
I0428 19:49:49.894184 26862 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:49.894188 26862 net.cpp:139] Memory required for data: 2082800
I0428 19:49:49.894197 26862 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:49:49.894204 26862 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:49:49.894207 26862 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:49:49.894212 26862 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:49:49.894223 26862 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:49:49.894258 26862 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:49:49.894263 26862 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:49.894268 26862 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:49.894269 26862 net.cpp:139] Memory required for data: 2090800
I0428 19:49:49.894273 26862 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:49.894282 26862 net.cpp:86] Creating Layer accuracy
I0428 19:49:49.894285 26862 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:49:49.894289 26862 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:49.894294 26862 net.cpp:382] accuracy -> accuracy
I0428 19:49:49.894300 26862 net.cpp:124] Setting up accuracy
I0428 19:49:49.894304 26862 net.cpp:131] Top shape: (1)
I0428 19:49:49.894321 26862 net.cpp:139] Memory required for data: 2090804
I0428 19:49:49.894330 26862 layer_factory.hpp:77] Creating layer loss
I0428 19:49:49.894333 26862 net.cpp:86] Creating Layer loss
I0428 19:49:49.894336 26862 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:49:49.894340 26862 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:49.894359 26862 net.cpp:382] loss -> loss
I0428 19:49:49.894371 26862 layer_factory.hpp:77] Creating layer loss
I0428 19:49:49.894623 26862 net.cpp:124] Setting up loss
I0428 19:49:49.894631 26862 net.cpp:131] Top shape: (1)
I0428 19:49:49.894635 26862 net.cpp:134]     with loss weight 1
I0428 19:49:49.894642 26862 net.cpp:139] Memory required for data: 2090808
I0428 19:49:49.894646 26862 net.cpp:200] loss needs backward computation.
I0428 19:49:49.894649 26862 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:49.894660 26862 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:49:49.894664 26862 net.cpp:200] relu1 needs backward computation.
I0428 19:49:49.894666 26862 net.cpp:200] ip1 needs backward computation.
I0428 19:49:49.894670 26862 net.cpp:200] pool1 needs backward computation.
I0428 19:49:49.894672 26862 net.cpp:200] conv1 needs backward computation.
I0428 19:49:49.894676 26862 net.cpp:200] pool0 needs backward computation.
I0428 19:49:49.894680 26862 net.cpp:200] conv0 needs backward computation.
I0428 19:49:49.894683 26862 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:49.894687 26862 net.cpp:202] mnist does not need backward computation.
I0428 19:49:49.894690 26862 net.cpp:244] This network produces output accuracy
I0428 19:49:49.894693 26862 net.cpp:244] This network produces output loss
I0428 19:49:49.894712 26862 net.cpp:257] Network initialization done.
I0428 19:49:49.894778 26862 solver.cpp:56] Solver scaffolding done.
I0428 19:49:49.894973 26862 caffe.cpp:248] Starting Optimization
I0428 19:49:49.894980 26862 solver.cpp:273] Solving LeNet
I0428 19:49:49.894984 26862 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:49.895107 26862 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:49.898105 26862 blocking_queue.cpp:49] Waiting for data
I0428 19:49:49.973649 26869 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:49.974118 26862 solver.cpp:398]     Test net output #0: accuracy = 0.0656
I0428 19:49:49.974153 26862 solver.cpp:398]     Test net output #1: loss = 2.32304 (* 1 = 2.32304 loss)
I0428 19:49:49.975731 26862 solver.cpp:219] Iteration 0 (0 iter/s, 0.0807086s/100 iters), loss = 2.34387
I0428 19:49:49.975791 26862 solver.cpp:238]     Train net output #0: loss = 2.34387 (* 1 = 2.34387 loss)
I0428 19:49:49.975805 26862 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:50.049134 26862 solver.cpp:219] Iteration 100 (1363.36 iter/s, 0.0733482s/100 iters), loss = 0.265396
I0428 19:49:50.049170 26862 solver.cpp:238]     Train net output #0: loss = 0.265396 (* 1 = 0.265396 loss)
I0428 19:49:50.049180 26862 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:50.116700 26862 solver.cpp:219] Iteration 200 (1480.99 iter/s, 0.0675225s/100 iters), loss = 0.237397
I0428 19:49:50.116726 26862 solver.cpp:238]     Train net output #0: loss = 0.237397 (* 1 = 0.237397 loss)
I0428 19:49:50.116734 26862 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:50.179075 26862 solver.cpp:219] Iteration 300 (1604.1 iter/s, 0.0623401s/100 iters), loss = 0.205304
I0428 19:49:50.179112 26862 solver.cpp:238]     Train net output #0: loss = 0.205304 (* 1 = 0.205304 loss)
I0428 19:49:50.179119 26862 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:50.241227 26862 solver.cpp:219] Iteration 400 (1609.74 iter/s, 0.062122s/100 iters), loss = 0.128593
I0428 19:49:50.241266 26862 solver.cpp:238]     Train net output #0: loss = 0.128593 (* 1 = 0.128593 loss)
I0428 19:49:50.241272 26862 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:50.302116 26862 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:50.378051 26869 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:50.378594 26862 solver.cpp:398]     Test net output #0: accuracy = 0.9581
I0428 19:49:50.378624 26862 solver.cpp:398]     Test net output #1: loss = 0.146158 (* 1 = 0.146158 loss)
I0428 19:49:50.379446 26862 solver.cpp:219] Iteration 500 (723.696 iter/s, 0.13818s/100 iters), loss = 0.203508
I0428 19:49:50.379483 26862 solver.cpp:238]     Train net output #0: loss = 0.203508 (* 1 = 0.203508 loss)
I0428 19:49:50.379494 26862 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:50.450222 26862 solver.cpp:219] Iteration 600 (1413.79 iter/s, 0.0707318s/100 iters), loss = 0.185452
I0428 19:49:50.450251 26862 solver.cpp:238]     Train net output #0: loss = 0.185452 (* 1 = 0.185452 loss)
I0428 19:49:50.450259 26862 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:50.517170 26862 solver.cpp:219] Iteration 700 (1494.52 iter/s, 0.0669112s/100 iters), loss = 0.208273
I0428 19:49:50.517196 26862 solver.cpp:238]     Train net output #0: loss = 0.208273 (* 1 = 0.208273 loss)
I0428 19:49:50.517202 26862 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:50.575986 26862 solver.cpp:219] Iteration 800 (1701.21 iter/s, 0.0587818s/100 iters), loss = 0.280468
I0428 19:49:50.576026 26862 solver.cpp:238]     Train net output #0: loss = 0.280468 (* 1 = 0.280468 loss)
I0428 19:49:50.576033 26862 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:50.637737 26862 solver.cpp:219] Iteration 900 (1620.69 iter/s, 0.0617021s/100 iters), loss = 0.284344
I0428 19:49:50.637760 26862 solver.cpp:238]     Train net output #0: loss = 0.284344 (* 1 = 0.284344 loss)
I0428 19:49:50.637766 26862 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:50.658720 26868 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:50.699506 26862 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:50.700065 26862 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:50.700414 26862 solver.cpp:311] Iteration 1000, loss = 0.129135
I0428 19:49:50.700431 26862 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:50.775336 26869 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:50.775800 26862 solver.cpp:398]     Test net output #0: accuracy = 0.9682
I0428 19:49:50.775835 26862 solver.cpp:398]     Test net output #1: loss = 0.105318 (* 1 = 0.105318 loss)
I0428 19:49:50.775840 26862 solver.cpp:316] Optimization Done.
I0428 19:49:50.775845 26862 caffe.cpp:259] Optimization Done.
