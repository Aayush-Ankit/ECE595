I0428 19:58:11.283608 28912 caffe.cpp:218] Using GPUs 0
I0428 19:58:11.312887 28912 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:11.760617 28912 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test811.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:11.760771 28912 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test811.prototxt
I0428 19:58:11.761193 28912 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:11.761237 28912 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:11.761317 28912 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:11.761379 28912 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:11.761458 28912 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:11.761477 28912 net.cpp:86] Creating Layer mnist
I0428 19:58:11.761482 28912 net.cpp:382] mnist -> data
I0428 19:58:11.761502 28912 net.cpp:382] mnist -> label
I0428 19:58:11.762585 28912 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:11.764832 28912 net.cpp:124] Setting up mnist
I0428 19:58:11.764894 28912 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:11.764905 28912 net.cpp:131] Top shape: 64 (64)
I0428 19:58:11.764909 28912 net.cpp:139] Memory required for data: 200960
I0428 19:58:11.764914 28912 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:11.764927 28912 net.cpp:86] Creating Layer conv0
I0428 19:58:11.764962 28912 net.cpp:408] conv0 <- data
I0428 19:58:11.764972 28912 net.cpp:382] conv0 -> conv0
I0428 19:58:11.995266 28912 net.cpp:124] Setting up conv0
I0428 19:58:11.995309 28912 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:11.995313 28912 net.cpp:139] Memory required for data: 1675520
I0428 19:58:11.995329 28912 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:11.995357 28912 net.cpp:86] Creating Layer pool0
I0428 19:58:11.995362 28912 net.cpp:408] pool0 <- conv0
I0428 19:58:11.995368 28912 net.cpp:382] pool0 -> pool0
I0428 19:58:11.995416 28912 net.cpp:124] Setting up pool0
I0428 19:58:11.995424 28912 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:11.995427 28912 net.cpp:139] Memory required for data: 2044160
I0428 19:58:11.995430 28912 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:11.995440 28912 net.cpp:86] Creating Layer conv1
I0428 19:58:11.995445 28912 net.cpp:408] conv1 <- pool0
I0428 19:58:11.995450 28912 net.cpp:382] conv1 -> conv1
I0428 19:58:11.998256 28912 net.cpp:124] Setting up conv1
I0428 19:58:11.998286 28912 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:11.998291 28912 net.cpp:139] Memory required for data: 2126080
I0428 19:58:11.998299 28912 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:11.998307 28912 net.cpp:86] Creating Layer pool1
I0428 19:58:11.998327 28912 net.cpp:408] pool1 <- conv1
I0428 19:58:11.998332 28912 net.cpp:382] pool1 -> pool1
I0428 19:58:11.998369 28912 net.cpp:124] Setting up pool1
I0428 19:58:11.998376 28912 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:11.998396 28912 net.cpp:139] Memory required for data: 2146560
I0428 19:58:11.998399 28912 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:11.998410 28912 net.cpp:86] Creating Layer ip1
I0428 19:58:11.998415 28912 net.cpp:408] ip1 <- pool1
I0428 19:58:11.998420 28912 net.cpp:382] ip1 -> ip1
I0428 19:58:11.998554 28912 net.cpp:124] Setting up ip1
I0428 19:58:11.998563 28912 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:11.998565 28912 net.cpp:139] Memory required for data: 2159360
I0428 19:58:11.998572 28912 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:11.998577 28912 net.cpp:86] Creating Layer relu1
I0428 19:58:11.998581 28912 net.cpp:408] relu1 <- ip1
I0428 19:58:11.998585 28912 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:11.998745 28912 net.cpp:124] Setting up relu1
I0428 19:58:11.998754 28912 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:11.998757 28912 net.cpp:139] Memory required for data: 2172160
I0428 19:58:11.998760 28912 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:11.998767 28912 net.cpp:86] Creating Layer ip2
I0428 19:58:11.998785 28912 net.cpp:408] ip2 <- ip1
I0428 19:58:11.998790 28912 net.cpp:382] ip2 -> ip2
I0428 19:58:11.998884 28912 net.cpp:124] Setting up ip2
I0428 19:58:11.998891 28912 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:11.998894 28912 net.cpp:139] Memory required for data: 2174720
I0428 19:58:11.998899 28912 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:11.998904 28912 net.cpp:86] Creating Layer relu2
I0428 19:58:11.998908 28912 net.cpp:408] relu2 <- ip2
I0428 19:58:11.998911 28912 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:11.999701 28912 net.cpp:124] Setting up relu2
I0428 19:58:11.999712 28912 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:11.999732 28912 net.cpp:139] Memory required for data: 2177280
I0428 19:58:11.999737 28912 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:11.999758 28912 net.cpp:86] Creating Layer ip3
I0428 19:58:11.999761 28912 net.cpp:408] ip3 <- ip2
I0428 19:58:11.999768 28912 net.cpp:382] ip3 -> ip3
I0428 19:58:11.999878 28912 net.cpp:124] Setting up ip3
I0428 19:58:11.999886 28912 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:11.999888 28912 net.cpp:139] Memory required for data: 2179840
I0428 19:58:11.999896 28912 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:11.999900 28912 net.cpp:86] Creating Layer relu3
I0428 19:58:11.999903 28912 net.cpp:408] relu3 <- ip3
I0428 19:58:11.999907 28912 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:12.000097 28912 net.cpp:124] Setting up relu3
I0428 19:58:12.000105 28912 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:12.000109 28912 net.cpp:139] Memory required for data: 2182400
I0428 19:58:12.000113 28912 layer_factory.hpp:77] Creating layer loss
I0428 19:58:12.000118 28912 net.cpp:86] Creating Layer loss
I0428 19:58:12.000121 28912 net.cpp:408] loss <- ip3
I0428 19:58:12.000125 28912 net.cpp:408] loss <- label
I0428 19:58:12.000131 28912 net.cpp:382] loss -> loss
I0428 19:58:12.000149 28912 layer_factory.hpp:77] Creating layer loss
I0428 19:58:12.000386 28912 net.cpp:124] Setting up loss
I0428 19:58:12.000396 28912 net.cpp:131] Top shape: (1)
I0428 19:58:12.000399 28912 net.cpp:134]     with loss weight 1
I0428 19:58:12.000413 28912 net.cpp:139] Memory required for data: 2182404
I0428 19:58:12.000417 28912 net.cpp:200] loss needs backward computation.
I0428 19:58:12.000421 28912 net.cpp:200] relu3 needs backward computation.
I0428 19:58:12.000423 28912 net.cpp:200] ip3 needs backward computation.
I0428 19:58:12.000427 28912 net.cpp:200] relu2 needs backward computation.
I0428 19:58:12.000429 28912 net.cpp:200] ip2 needs backward computation.
I0428 19:58:12.000432 28912 net.cpp:200] relu1 needs backward computation.
I0428 19:58:12.000435 28912 net.cpp:200] ip1 needs backward computation.
I0428 19:58:12.000438 28912 net.cpp:200] pool1 needs backward computation.
I0428 19:58:12.000442 28912 net.cpp:200] conv1 needs backward computation.
I0428 19:58:12.000444 28912 net.cpp:200] pool0 needs backward computation.
I0428 19:58:12.000447 28912 net.cpp:200] conv0 needs backward computation.
I0428 19:58:12.000452 28912 net.cpp:202] mnist does not need backward computation.
I0428 19:58:12.000453 28912 net.cpp:244] This network produces output loss
I0428 19:58:12.000463 28912 net.cpp:257] Network initialization done.
I0428 19:58:12.000876 28912 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test811.prototxt
I0428 19:58:12.000906 28912 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:12.001019 28912 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:12.001099 28912 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:12.001143 28912 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:12.001171 28912 net.cpp:86] Creating Layer mnist
I0428 19:58:12.001190 28912 net.cpp:382] mnist -> data
I0428 19:58:12.001197 28912 net.cpp:382] mnist -> label
I0428 19:58:12.001278 28912 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:12.003521 28912 net.cpp:124] Setting up mnist
I0428 19:58:12.003551 28912 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:12.003556 28912 net.cpp:131] Top shape: 100 (100)
I0428 19:58:12.003559 28912 net.cpp:139] Memory required for data: 314000
I0428 19:58:12.003563 28912 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:12.003581 28912 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:12.003584 28912 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:12.003589 28912 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:12.003595 28912 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:12.003681 28912 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:12.003689 28912 net.cpp:131] Top shape: 100 (100)
I0428 19:58:12.003692 28912 net.cpp:131] Top shape: 100 (100)
I0428 19:58:12.003695 28912 net.cpp:139] Memory required for data: 314800
I0428 19:58:12.003698 28912 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:12.003706 28912 net.cpp:86] Creating Layer conv0
I0428 19:58:12.003710 28912 net.cpp:408] conv0 <- data
I0428 19:58:12.003715 28912 net.cpp:382] conv0 -> conv0
I0428 19:58:12.005375 28912 net.cpp:124] Setting up conv0
I0428 19:58:12.005388 28912 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:12.005393 28912 net.cpp:139] Memory required for data: 2618800
I0428 19:58:12.005400 28912 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:12.005406 28912 net.cpp:86] Creating Layer pool0
I0428 19:58:12.005410 28912 net.cpp:408] pool0 <- conv0
I0428 19:58:12.005414 28912 net.cpp:382] pool0 -> pool0
I0428 19:58:12.005465 28912 net.cpp:124] Setting up pool0
I0428 19:58:12.005471 28912 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:12.005475 28912 net.cpp:139] Memory required for data: 3194800
I0428 19:58:12.005478 28912 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:12.005487 28912 net.cpp:86] Creating Layer conv1
I0428 19:58:12.005491 28912 net.cpp:408] conv1 <- pool0
I0428 19:58:12.005499 28912 net.cpp:382] conv1 -> conv1
I0428 19:58:12.007547 28912 net.cpp:124] Setting up conv1
I0428 19:58:12.007560 28912 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:12.007565 28912 net.cpp:139] Memory required for data: 3322800
I0428 19:58:12.007587 28912 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:12.007593 28912 net.cpp:86] Creating Layer pool1
I0428 19:58:12.007596 28912 net.cpp:408] pool1 <- conv1
I0428 19:58:12.007601 28912 net.cpp:382] pool1 -> pool1
I0428 19:58:12.007689 28912 net.cpp:124] Setting up pool1
I0428 19:58:12.007696 28912 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:12.007699 28912 net.cpp:139] Memory required for data: 3354800
I0428 19:58:12.007702 28912 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:12.007709 28912 net.cpp:86] Creating Layer ip1
I0428 19:58:12.007711 28912 net.cpp:408] ip1 <- pool1
I0428 19:58:12.007720 28912 net.cpp:382] ip1 -> ip1
I0428 19:58:12.007835 28912 net.cpp:124] Setting up ip1
I0428 19:58:12.007843 28912 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:12.007858 28912 net.cpp:139] Memory required for data: 3374800
I0428 19:58:12.007865 28912 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:12.007870 28912 net.cpp:86] Creating Layer relu1
I0428 19:58:12.007874 28912 net.cpp:408] relu1 <- ip1
I0428 19:58:12.007877 28912 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:12.008049 28912 net.cpp:124] Setting up relu1
I0428 19:58:12.008057 28912 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:12.008060 28912 net.cpp:139] Memory required for data: 3394800
I0428 19:58:12.008064 28912 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:12.008070 28912 net.cpp:86] Creating Layer ip2
I0428 19:58:12.008074 28912 net.cpp:408] ip2 <- ip1
I0428 19:58:12.008080 28912 net.cpp:382] ip2 -> ip2
I0428 19:58:12.008183 28912 net.cpp:124] Setting up ip2
I0428 19:58:12.008190 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.008194 28912 net.cpp:139] Memory required for data: 3398800
I0428 19:58:12.008199 28912 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:12.008203 28912 net.cpp:86] Creating Layer relu2
I0428 19:58:12.008206 28912 net.cpp:408] relu2 <- ip2
I0428 19:58:12.008210 28912 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:12.008462 28912 net.cpp:124] Setting up relu2
I0428 19:58:12.008471 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.008474 28912 net.cpp:139] Memory required for data: 3402800
I0428 19:58:12.008478 28912 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:12.008486 28912 net.cpp:86] Creating Layer ip3
I0428 19:58:12.008488 28912 net.cpp:408] ip3 <- ip2
I0428 19:58:12.008492 28912 net.cpp:382] ip3 -> ip3
I0428 19:58:12.008599 28912 net.cpp:124] Setting up ip3
I0428 19:58:12.008617 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.008620 28912 net.cpp:139] Memory required for data: 3406800
I0428 19:58:12.008628 28912 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:12.008652 28912 net.cpp:86] Creating Layer relu3
I0428 19:58:12.008656 28912 net.cpp:408] relu3 <- ip3
I0428 19:58:12.008662 28912 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:12.009589 28912 net.cpp:124] Setting up relu3
I0428 19:58:12.009616 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.009620 28912 net.cpp:139] Memory required for data: 3410800
I0428 19:58:12.009624 28912 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:12.009629 28912 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:12.009634 28912 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:12.009637 28912 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:12.009644 28912 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:12.009682 28912 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:12.009688 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.009692 28912 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:12.009694 28912 net.cpp:139] Memory required for data: 3418800
I0428 19:58:12.009697 28912 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:12.009702 28912 net.cpp:86] Creating Layer accuracy
I0428 19:58:12.009706 28912 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:12.009709 28912 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:12.009716 28912 net.cpp:382] accuracy -> accuracy
I0428 19:58:12.009722 28912 net.cpp:124] Setting up accuracy
I0428 19:58:12.009727 28912 net.cpp:131] Top shape: (1)
I0428 19:58:12.009729 28912 net.cpp:139] Memory required for data: 3418804
I0428 19:58:12.009732 28912 layer_factory.hpp:77] Creating layer loss
I0428 19:58:12.009737 28912 net.cpp:86] Creating Layer loss
I0428 19:58:12.009739 28912 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:12.009742 28912 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:12.009747 28912 net.cpp:382] loss -> loss
I0428 19:58:12.009753 28912 layer_factory.hpp:77] Creating layer loss
I0428 19:58:12.009995 28912 net.cpp:124] Setting up loss
I0428 19:58:12.010004 28912 net.cpp:131] Top shape: (1)
I0428 19:58:12.010007 28912 net.cpp:134]     with loss weight 1
I0428 19:58:12.010012 28912 net.cpp:139] Memory required for data: 3418808
I0428 19:58:12.010025 28912 net.cpp:200] loss needs backward computation.
I0428 19:58:12.010030 28912 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:12.010033 28912 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:12.010036 28912 net.cpp:200] relu3 needs backward computation.
I0428 19:58:12.010040 28912 net.cpp:200] ip3 needs backward computation.
I0428 19:58:12.010041 28912 net.cpp:200] relu2 needs backward computation.
I0428 19:58:12.010045 28912 net.cpp:200] ip2 needs backward computation.
I0428 19:58:12.010047 28912 net.cpp:200] relu1 needs backward computation.
I0428 19:58:12.010049 28912 net.cpp:200] ip1 needs backward computation.
I0428 19:58:12.010052 28912 net.cpp:200] pool1 needs backward computation.
I0428 19:58:12.010056 28912 net.cpp:200] conv1 needs backward computation.
I0428 19:58:12.010058 28912 net.cpp:200] pool0 needs backward computation.
I0428 19:58:12.010061 28912 net.cpp:200] conv0 needs backward computation.
I0428 19:58:12.010064 28912 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:12.010067 28912 net.cpp:202] mnist does not need backward computation.
I0428 19:58:12.010071 28912 net.cpp:244] This network produces output accuracy
I0428 19:58:12.010073 28912 net.cpp:244] This network produces output loss
I0428 19:58:12.010083 28912 net.cpp:257] Network initialization done.
I0428 19:58:12.010138 28912 solver.cpp:56] Solver scaffolding done.
I0428 19:58:12.010519 28912 caffe.cpp:248] Starting Optimization
I0428 19:58:12.010540 28912 solver.cpp:273] Solving LeNet
I0428 19:58:12.010543 28912 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:12.011332 28912 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:12.018182 28912 blocking_queue.cpp:49] Waiting for data
I0428 19:58:12.059355 28919 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:12.059872 28912 solver.cpp:398]     Test net output #0: accuracy = 0.1117
I0428 19:58:12.059891 28912 solver.cpp:398]     Test net output #1: loss = 2.3032 (* 1 = 2.3032 loss)
I0428 19:58:12.062481 28912 solver.cpp:219] Iteration 0 (-1.52561e-30 iter/s, 0.0519004s/100 iters), loss = 2.30239
I0428 19:58:12.062505 28912 solver.cpp:238]     Train net output #0: loss = 2.30239 (* 1 = 2.30239 loss)
I0428 19:58:12.062530 28912 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:12.137347 28912 solver.cpp:219] Iteration 100 (1336.38 iter/s, 0.0748288s/100 iters), loss = 0.660848
I0428 19:58:12.137370 28912 solver.cpp:238]     Train net output #0: loss = 0.660848 (* 1 = 0.660848 loss)
I0428 19:58:12.137377 28912 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:12.211746 28912 solver.cpp:219] Iteration 200 (1344.68 iter/s, 0.074367s/100 iters), loss = 0.30336
I0428 19:58:12.211768 28912 solver.cpp:238]     Train net output #0: loss = 0.30336 (* 1 = 0.30336 loss)
I0428 19:58:12.211791 28912 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:12.286042 28912 solver.cpp:219] Iteration 300 (1346.53 iter/s, 0.0742647s/100 iters), loss = 0.265306
I0428 19:58:12.286065 28912 solver.cpp:238]     Train net output #0: loss = 0.265306 (* 1 = 0.265306 loss)
I0428 19:58:12.286087 28912 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:12.360919 28912 solver.cpp:219] Iteration 400 (1336.09 iter/s, 0.074845s/100 iters), loss = 0.191397
I0428 19:58:12.360941 28912 solver.cpp:238]     Train net output #0: loss = 0.191398 (* 1 = 0.191398 loss)
I0428 19:58:12.360962 28912 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:12.434839 28912 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:12.479547 28919 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:12.480057 28912 solver.cpp:398]     Test net output #0: accuracy = 0.9429
I0428 19:58:12.480077 28912 solver.cpp:398]     Test net output #1: loss = 0.184546 (* 1 = 0.184546 loss)
I0428 19:58:12.480835 28912 solver.cpp:219] Iteration 500 (834.284 iter/s, 0.119863s/100 iters), loss = 0.175627
I0428 19:58:12.480870 28912 solver.cpp:238]     Train net output #0: loss = 0.175627 (* 1 = 0.175627 loss)
I0428 19:58:12.480893 28912 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:12.566304 28912 solver.cpp:219] Iteration 600 (1170.59 iter/s, 0.0854267s/100 iters), loss = 0.163529
I0428 19:58:12.566329 28912 solver.cpp:238]     Train net output #0: loss = 0.163529 (* 1 = 0.163529 loss)
I0428 19:58:12.566350 28912 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:12.643378 28912 solver.cpp:219] Iteration 700 (1298.02 iter/s, 0.0770406s/100 iters), loss = 0.221417
I0428 19:58:12.643402 28912 solver.cpp:238]     Train net output #0: loss = 0.221417 (* 1 = 0.221417 loss)
I0428 19:58:12.643429 28912 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:12.719815 28912 solver.cpp:219] Iteration 800 (1309.07 iter/s, 0.0763904s/100 iters), loss = 0.311671
I0428 19:58:12.719838 28912 solver.cpp:238]     Train net output #0: loss = 0.311671 (* 1 = 0.311671 loss)
I0428 19:58:12.719859 28912 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:12.795327 28912 solver.cpp:219] Iteration 900 (1324.86 iter/s, 0.0754799s/100 iters), loss = 0.173204
I0428 19:58:12.795351 28912 solver.cpp:238]     Train net output #0: loss = 0.173204 (* 1 = 0.173204 loss)
I0428 19:58:12.795375 28912 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:12.821002 28918 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:12.869583 28912 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:12.870360 28912 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:12.870877 28912 solver.cpp:311] Iteration 1000, loss = 0.116844
I0428 19:58:12.870906 28912 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:12.945215 28919 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:12.945732 28912 solver.cpp:398]     Test net output #0: accuracy = 0.9689
I0428 19:58:12.945766 28912 solver.cpp:398]     Test net output #1: loss = 0.100374 (* 1 = 0.100374 loss)
I0428 19:58:12.945771 28912 solver.cpp:316] Optimization Done.
I0428 19:58:12.945775 28912 caffe.cpp:259] Optimization Done.
