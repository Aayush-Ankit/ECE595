I0428 19:56:04.317198 28342 caffe.cpp:218] Using GPUs 0
I0428 19:56:04.353474 28342 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:04.809343 28342 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test748.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:04.809490 28342 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test748.prototxt
I0428 19:56:04.809945 28342 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:04.809964 28342 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:04.810068 28342 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:04.810142 28342 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:04.810243 28342 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:04.810286 28342 net.cpp:86] Creating Layer mnist
I0428 19:56:04.810297 28342 net.cpp:382] mnist -> data
I0428 19:56:04.810338 28342 net.cpp:382] mnist -> label
I0428 19:56:04.811669 28342 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:04.813953 28342 net.cpp:124] Setting up mnist
I0428 19:56:04.813984 28342 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:04.813989 28342 net.cpp:131] Top shape: 64 (64)
I0428 19:56:04.813993 28342 net.cpp:139] Memory required for data: 200960
I0428 19:56:04.814002 28342 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:04.814018 28342 net.cpp:86] Creating Layer conv0
I0428 19:56:04.814025 28342 net.cpp:408] conv0 <- data
I0428 19:56:04.814038 28342 net.cpp:382] conv0 -> conv0
I0428 19:56:05.034214 28342 net.cpp:124] Setting up conv0
I0428 19:56:05.034255 28342 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:05.034258 28342 net.cpp:139] Memory required for data: 1675520
I0428 19:56:05.034291 28342 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:05.034307 28342 net.cpp:86] Creating Layer pool0
I0428 19:56:05.034312 28342 net.cpp:408] pool0 <- conv0
I0428 19:56:05.034319 28342 net.cpp:382] pool0 -> pool0
I0428 19:56:05.034391 28342 net.cpp:124] Setting up pool0
I0428 19:56:05.034402 28342 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:05.034407 28342 net.cpp:139] Memory required for data: 2044160
I0428 19:56:05.034411 28342 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:05.034425 28342 net.cpp:86] Creating Layer conv1
I0428 19:56:05.034430 28342 net.cpp:408] conv1 <- pool0
I0428 19:56:05.034437 28342 net.cpp:382] conv1 -> conv1
I0428 19:56:05.036675 28342 net.cpp:124] Setting up conv1
I0428 19:56:05.036689 28342 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:05.036710 28342 net.cpp:139] Memory required for data: 2076928
I0428 19:56:05.036718 28342 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:05.036725 28342 net.cpp:86] Creating Layer pool1
I0428 19:56:05.036730 28342 net.cpp:408] pool1 <- conv1
I0428 19:56:05.036734 28342 net.cpp:382] pool1 -> pool1
I0428 19:56:05.036782 28342 net.cpp:124] Setting up pool1
I0428 19:56:05.036792 28342 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:05.036798 28342 net.cpp:139] Memory required for data: 2085120
I0428 19:56:05.036803 28342 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:05.036836 28342 net.cpp:86] Creating Layer ip1
I0428 19:56:05.036842 28342 net.cpp:408] ip1 <- pool1
I0428 19:56:05.036851 28342 net.cpp:382] ip1 -> ip1
I0428 19:56:05.037029 28342 net.cpp:124] Setting up ip1
I0428 19:56:05.037041 28342 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:05.037046 28342 net.cpp:139] Memory required for data: 2091520
I0428 19:56:05.037058 28342 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:05.037067 28342 net.cpp:86] Creating Layer relu1
I0428 19:56:05.037072 28342 net.cpp:408] relu1 <- ip1
I0428 19:56:05.037081 28342 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:05.037329 28342 net.cpp:124] Setting up relu1
I0428 19:56:05.037358 28342 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:05.037362 28342 net.cpp:139] Memory required for data: 2097920
I0428 19:56:05.037367 28342 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:05.037376 28342 net.cpp:86] Creating Layer ip2
I0428 19:56:05.037381 28342 net.cpp:408] ip2 <- ip1
I0428 19:56:05.037389 28342 net.cpp:382] ip2 -> ip2
I0428 19:56:05.037520 28342 net.cpp:124] Setting up ip2
I0428 19:56:05.037530 28342 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:05.037534 28342 net.cpp:139] Memory required for data: 2100480
I0428 19:56:05.037544 28342 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:05.037566 28342 net.cpp:86] Creating Layer relu2
I0428 19:56:05.037572 28342 net.cpp:408] relu2 <- ip2
I0428 19:56:05.037580 28342 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:05.038642 28342 net.cpp:124] Setting up relu2
I0428 19:56:05.038674 28342 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:05.038681 28342 net.cpp:139] Memory required for data: 2103040
I0428 19:56:05.038686 28342 layer_factory.hpp:77] Creating layer loss
I0428 19:56:05.038696 28342 net.cpp:86] Creating Layer loss
I0428 19:56:05.038702 28342 net.cpp:408] loss <- ip2
I0428 19:56:05.038708 28342 net.cpp:408] loss <- label
I0428 19:56:05.038717 28342 net.cpp:382] loss -> loss
I0428 19:56:05.038739 28342 layer_factory.hpp:77] Creating layer loss
I0428 19:56:05.039191 28342 net.cpp:124] Setting up loss
I0428 19:56:05.039222 28342 net.cpp:131] Top shape: (1)
I0428 19:56:05.039227 28342 net.cpp:134]     with loss weight 1
I0428 19:56:05.039271 28342 net.cpp:139] Memory required for data: 2103044
I0428 19:56:05.039276 28342 net.cpp:200] loss needs backward computation.
I0428 19:56:05.039283 28342 net.cpp:200] relu2 needs backward computation.
I0428 19:56:05.039288 28342 net.cpp:200] ip2 needs backward computation.
I0428 19:56:05.039293 28342 net.cpp:200] relu1 needs backward computation.
I0428 19:56:05.039297 28342 net.cpp:200] ip1 needs backward computation.
I0428 19:56:05.039314 28342 net.cpp:200] pool1 needs backward computation.
I0428 19:56:05.039319 28342 net.cpp:200] conv1 needs backward computation.
I0428 19:56:05.039324 28342 net.cpp:200] pool0 needs backward computation.
I0428 19:56:05.039330 28342 net.cpp:200] conv0 needs backward computation.
I0428 19:56:05.039335 28342 net.cpp:202] mnist does not need backward computation.
I0428 19:56:05.039340 28342 net.cpp:244] This network produces output loss
I0428 19:56:05.039352 28342 net.cpp:257] Network initialization done.
I0428 19:56:05.039852 28342 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test748.prototxt
I0428 19:56:05.039906 28342 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:05.040032 28342 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:05.040189 28342 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:05.040248 28342 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:05.040266 28342 net.cpp:86] Creating Layer mnist
I0428 19:56:05.040273 28342 net.cpp:382] mnist -> data
I0428 19:56:05.040285 28342 net.cpp:382] mnist -> label
I0428 19:56:05.040410 28342 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:05.043221 28342 net.cpp:124] Setting up mnist
I0428 19:56:05.043251 28342 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:05.043256 28342 net.cpp:131] Top shape: 100 (100)
I0428 19:56:05.043259 28342 net.cpp:139] Memory required for data: 314000
I0428 19:56:05.043263 28342 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:05.043270 28342 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:05.043273 28342 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:05.043279 28342 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:05.043289 28342 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:05.043359 28342 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:05.043382 28342 net.cpp:131] Top shape: 100 (100)
I0428 19:56:05.043390 28342 net.cpp:131] Top shape: 100 (100)
I0428 19:56:05.043395 28342 net.cpp:139] Memory required for data: 314800
I0428 19:56:05.043400 28342 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:05.043412 28342 net.cpp:86] Creating Layer conv0
I0428 19:56:05.043417 28342 net.cpp:408] conv0 <- data
I0428 19:56:05.043426 28342 net.cpp:382] conv0 -> conv0
I0428 19:56:05.045583 28342 net.cpp:124] Setting up conv0
I0428 19:56:05.045598 28342 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:05.045600 28342 net.cpp:139] Memory required for data: 2618800
I0428 19:56:05.045610 28342 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:05.045617 28342 net.cpp:86] Creating Layer pool0
I0428 19:56:05.045624 28342 net.cpp:408] pool0 <- conv0
I0428 19:56:05.045630 28342 net.cpp:382] pool0 -> pool0
I0428 19:56:05.045680 28342 net.cpp:124] Setting up pool0
I0428 19:56:05.045688 28342 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:05.045703 28342 net.cpp:139] Memory required for data: 3194800
I0428 19:56:05.045708 28342 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:05.045720 28342 net.cpp:86] Creating Layer conv1
I0428 19:56:05.045725 28342 net.cpp:408] conv1 <- pool0
I0428 19:56:05.045733 28342 net.cpp:382] conv1 -> conv1
I0428 19:56:05.048221 28342 net.cpp:124] Setting up conv1
I0428 19:56:05.048250 28342 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:05.048254 28342 net.cpp:139] Memory required for data: 3246000
I0428 19:56:05.048264 28342 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:05.048272 28342 net.cpp:86] Creating Layer pool1
I0428 19:56:05.048277 28342 net.cpp:408] pool1 <- conv1
I0428 19:56:05.048303 28342 net.cpp:382] pool1 -> pool1
I0428 19:56:05.048364 28342 net.cpp:124] Setting up pool1
I0428 19:56:05.048377 28342 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:05.048382 28342 net.cpp:139] Memory required for data: 3258800
I0428 19:56:05.048388 28342 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:05.048395 28342 net.cpp:86] Creating Layer ip1
I0428 19:56:05.048401 28342 net.cpp:408] ip1 <- pool1
I0428 19:56:05.048408 28342 net.cpp:382] ip1 -> ip1
I0428 19:56:05.048590 28342 net.cpp:124] Setting up ip1
I0428 19:56:05.048601 28342 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:05.048606 28342 net.cpp:139] Memory required for data: 3268800
I0428 19:56:05.048617 28342 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:05.048625 28342 net.cpp:86] Creating Layer relu1
I0428 19:56:05.048630 28342 net.cpp:408] relu1 <- ip1
I0428 19:56:05.048637 28342 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:05.048997 28342 net.cpp:124] Setting up relu1
I0428 19:56:05.049011 28342 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:05.049017 28342 net.cpp:139] Memory required for data: 3278800
I0428 19:56:05.049023 28342 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:05.049036 28342 net.cpp:86] Creating Layer ip2
I0428 19:56:05.049041 28342 net.cpp:408] ip2 <- ip1
I0428 19:56:05.049051 28342 net.cpp:382] ip2 -> ip2
I0428 19:56:05.049206 28342 net.cpp:124] Setting up ip2
I0428 19:56:05.049217 28342 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:05.049230 28342 net.cpp:139] Memory required for data: 3282800
I0428 19:56:05.049240 28342 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:05.049248 28342 net.cpp:86] Creating Layer relu2
I0428 19:56:05.049268 28342 net.cpp:408] relu2 <- ip2
I0428 19:56:05.049275 28342 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:05.049513 28342 net.cpp:124] Setting up relu2
I0428 19:56:05.049525 28342 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:05.049530 28342 net.cpp:139] Memory required for data: 3286800
I0428 19:56:05.049535 28342 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:56:05.049542 28342 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:56:05.049548 28342 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:56:05.049556 28342 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:56:05.049576 28342 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:56:05.049635 28342 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:56:05.049643 28342 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:05.049655 28342 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:05.049676 28342 net.cpp:139] Memory required for data: 3294800
I0428 19:56:05.049681 28342 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:05.049690 28342 net.cpp:86] Creating Layer accuracy
I0428 19:56:05.049695 28342 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:56:05.049706 28342 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:05.049713 28342 net.cpp:382] accuracy -> accuracy
I0428 19:56:05.049729 28342 net.cpp:124] Setting up accuracy
I0428 19:56:05.049736 28342 net.cpp:131] Top shape: (1)
I0428 19:56:05.049741 28342 net.cpp:139] Memory required for data: 3294804
I0428 19:56:05.049746 28342 layer_factory.hpp:77] Creating layer loss
I0428 19:56:05.049752 28342 net.cpp:86] Creating Layer loss
I0428 19:56:05.049757 28342 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:56:05.049763 28342 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:05.049775 28342 net.cpp:382] loss -> loss
I0428 19:56:05.049799 28342 layer_factory.hpp:77] Creating layer loss
I0428 19:56:05.050125 28342 net.cpp:124] Setting up loss
I0428 19:56:05.050137 28342 net.cpp:131] Top shape: (1)
I0428 19:56:05.050143 28342 net.cpp:134]     with loss weight 1
I0428 19:56:05.050150 28342 net.cpp:139] Memory required for data: 3294808
I0428 19:56:05.050155 28342 net.cpp:200] loss needs backward computation.
I0428 19:56:05.050161 28342 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:05.050168 28342 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:56:05.050173 28342 net.cpp:200] relu2 needs backward computation.
I0428 19:56:05.050176 28342 net.cpp:200] ip2 needs backward computation.
I0428 19:56:05.050181 28342 net.cpp:200] relu1 needs backward computation.
I0428 19:56:05.050185 28342 net.cpp:200] ip1 needs backward computation.
I0428 19:56:05.050190 28342 net.cpp:200] pool1 needs backward computation.
I0428 19:56:05.050196 28342 net.cpp:200] conv1 needs backward computation.
I0428 19:56:05.050201 28342 net.cpp:200] pool0 needs backward computation.
I0428 19:56:05.050205 28342 net.cpp:200] conv0 needs backward computation.
I0428 19:56:05.050211 28342 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:05.050217 28342 net.cpp:202] mnist does not need backward computation.
I0428 19:56:05.050221 28342 net.cpp:244] This network produces output accuracy
I0428 19:56:05.050241 28342 net.cpp:244] This network produces output loss
I0428 19:56:05.050271 28342 net.cpp:257] Network initialization done.
I0428 19:56:05.050334 28342 solver.cpp:56] Solver scaffolding done.
I0428 19:56:05.050767 28342 caffe.cpp:248] Starting Optimization
I0428 19:56:05.050777 28342 solver.cpp:273] Solving LeNet
I0428 19:56:05.050782 28342 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:05.051837 28342 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:05.055765 28342 blocking_queue.cpp:49] Waiting for data
I0428 19:56:05.127539 28349 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:05.128177 28342 solver.cpp:398]     Test net output #0: accuracy = 0.107
I0428 19:56:05.128203 28342 solver.cpp:398]     Test net output #1: loss = 2.30661 (* 1 = 2.30661 loss)
I0428 19:56:05.130950 28342 solver.cpp:219] Iteration 0 (0 iter/s, 0.0801403s/100 iters), loss = 2.30461
I0428 19:56:05.130972 28342 solver.cpp:238]     Train net output #0: loss = 2.30461 (* 1 = 2.30461 loss)
I0428 19:56:05.130987 28342 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:05.199184 28342 solver.cpp:219] Iteration 100 (1466.31 iter/s, 0.0681985s/100 iters), loss = 1.13172
I0428 19:56:05.199208 28342 solver.cpp:238]     Train net output #0: loss = 1.13172 (* 1 = 1.13172 loss)
I0428 19:56:05.199216 28342 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:05.266049 28342 solver.cpp:219] Iteration 200 (1496.3 iter/s, 0.0668314s/100 iters), loss = 0.604012
I0428 19:56:05.266103 28342 solver.cpp:238]     Train net output #0: loss = 0.604012 (* 1 = 0.604012 loss)
I0428 19:56:05.266118 28342 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:05.337560 28342 solver.cpp:219] Iteration 300 (1399.57 iter/s, 0.0714505s/100 iters), loss = 0.570789
I0428 19:56:05.337584 28342 solver.cpp:238]     Train net output #0: loss = 0.570789 (* 1 = 0.570789 loss)
I0428 19:56:05.337604 28342 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:05.406118 28342 solver.cpp:219] Iteration 400 (1459.41 iter/s, 0.068521s/100 iters), loss = 0.672356
I0428 19:56:05.406141 28342 solver.cpp:238]     Train net output #0: loss = 0.672356 (* 1 = 0.672356 loss)
I0428 19:56:05.406148 28342 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:05.471843 28342 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:05.516495 28349 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:05.517184 28342 solver.cpp:398]     Test net output #0: accuracy = 0.8996
I0428 19:56:05.517207 28342 solver.cpp:398]     Test net output #1: loss = 0.482781 (* 1 = 0.482781 loss)
I0428 19:56:05.518182 28342 solver.cpp:219] Iteration 500 (892.645 iter/s, 0.112027s/100 iters), loss = 0.447436
I0428 19:56:05.518213 28342 solver.cpp:238]     Train net output #0: loss = 0.447436 (* 1 = 0.447436 loss)
I0428 19:56:05.518239 28342 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:05.597465 28342 solver.cpp:219] Iteration 600 (1261.9 iter/s, 0.0792453s/100 iters), loss = 0.259025
I0428 19:56:05.597489 28342 solver.cpp:238]     Train net output #0: loss = 0.259025 (* 1 = 0.259025 loss)
I0428 19:56:05.597499 28342 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:05.665401 28342 solver.cpp:219] Iteration 700 (1472.66 iter/s, 0.0679045s/100 iters), loss = 0.245181
I0428 19:56:05.665426 28342 solver.cpp:238]     Train net output #0: loss = 0.245181 (* 1 = 0.245181 loss)
I0428 19:56:05.665437 28342 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:05.732462 28342 solver.cpp:219] Iteration 800 (1491.89 iter/s, 0.067029s/100 iters), loss = 0.358908
I0428 19:56:05.732487 28342 solver.cpp:238]     Train net output #0: loss = 0.358909 (* 1 = 0.358909 loss)
I0428 19:56:05.732498 28342 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:05.799116 28342 solver.cpp:219] Iteration 900 (1501 iter/s, 0.0666225s/100 iters), loss = 0.352133
I0428 19:56:05.799141 28342 solver.cpp:238]     Train net output #0: loss = 0.352133 (* 1 = 0.352133 loss)
I0428 19:56:05.799152 28342 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:05.822001 28348 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:05.866235 28342 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:05.866994 28342 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:05.867684 28342 solver.cpp:311] Iteration 1000, loss = 0.198512
I0428 19:56:05.867715 28342 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:05.942559 28349 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:05.943177 28342 solver.cpp:398]     Test net output #0: accuracy = 0.9482
I0428 19:56:05.943217 28342 solver.cpp:398]     Test net output #1: loss = 0.167907 (* 1 = 0.167907 loss)
I0428 19:56:05.943225 28342 solver.cpp:316] Optimization Done.
I0428 19:56:05.943233 28342 caffe.cpp:259] Optimization Done.
