I0428 20:01:47.593936 29806 caffe.cpp:218] Using GPUs 0
I0428 20:01:47.631701 29806 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:48.087954 29806 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test912.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:48.088089 29806 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test912.prototxt
I0428 20:01:48.088420 29806 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:48.088436 29806 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:48.088515 29806 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:48.088579 29806 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:48.088659 29806 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:48.088677 29806 net.cpp:86] Creating Layer mnist
I0428 20:01:48.088685 29806 net.cpp:382] mnist -> data
I0428 20:01:48.088703 29806 net.cpp:382] mnist -> label
I0428 20:01:48.089757 29806 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:48.092099 29806 net.cpp:124] Setting up mnist
I0428 20:01:48.092146 29806 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:48.092151 29806 net.cpp:131] Top shape: 64 (64)
I0428 20:01:48.092154 29806 net.cpp:139] Memory required for data: 200960
I0428 20:01:48.092160 29806 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:48.092192 29806 net.cpp:86] Creating Layer conv0
I0428 20:01:48.092211 29806 net.cpp:408] conv0 <- data
I0428 20:01:48.092222 29806 net.cpp:382] conv0 -> conv0
I0428 20:01:48.317209 29806 net.cpp:124] Setting up conv0
I0428 20:01:48.317235 29806 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:48.317239 29806 net.cpp:139] Memory required for data: 1675520
I0428 20:01:48.317253 29806 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:48.317265 29806 net.cpp:86] Creating Layer pool0
I0428 20:01:48.317270 29806 net.cpp:408] pool0 <- conv0
I0428 20:01:48.317273 29806 net.cpp:382] pool0 -> pool0
I0428 20:01:48.317332 29806 net.cpp:124] Setting up pool0
I0428 20:01:48.317338 29806 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:48.317342 29806 net.cpp:139] Memory required for data: 2044160
I0428 20:01:48.317344 29806 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:48.317354 29806 net.cpp:86] Creating Layer conv1
I0428 20:01:48.317358 29806 net.cpp:408] conv1 <- pool0
I0428 20:01:48.317363 29806 net.cpp:382] conv1 -> conv1
I0428 20:01:48.320111 29806 net.cpp:124] Setting up conv1
I0428 20:01:48.320140 29806 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:48.320144 29806 net.cpp:139] Memory required for data: 2863360
I0428 20:01:48.320153 29806 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:48.320175 29806 net.cpp:86] Creating Layer pool1
I0428 20:01:48.320179 29806 net.cpp:408] pool1 <- conv1
I0428 20:01:48.320197 29806 net.cpp:382] pool1 -> pool1
I0428 20:01:48.320250 29806 net.cpp:124] Setting up pool1
I0428 20:01:48.320255 29806 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:48.320257 29806 net.cpp:139] Memory required for data: 3068160
I0428 20:01:48.320261 29806 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:48.320267 29806 net.cpp:86] Creating Layer ip1
I0428 20:01:48.320271 29806 net.cpp:408] ip1 <- pool1
I0428 20:01:48.320274 29806 net.cpp:382] ip1 -> ip1
I0428 20:01:48.320410 29806 net.cpp:124] Setting up ip1
I0428 20:01:48.320417 29806 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:48.320420 29806 net.cpp:139] Memory required for data: 3070720
I0428 20:01:48.320426 29806 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:48.320432 29806 net.cpp:86] Creating Layer relu1
I0428 20:01:48.320436 29806 net.cpp:408] relu1 <- ip1
I0428 20:01:48.320439 29806 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:48.320605 29806 net.cpp:124] Setting up relu1
I0428 20:01:48.320614 29806 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:48.320617 29806 net.cpp:139] Memory required for data: 3073280
I0428 20:01:48.320621 29806 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:48.320626 29806 net.cpp:86] Creating Layer ip2
I0428 20:01:48.320629 29806 net.cpp:408] ip2 <- ip1
I0428 20:01:48.320634 29806 net.cpp:382] ip2 -> ip2
I0428 20:01:48.320722 29806 net.cpp:124] Setting up ip2
I0428 20:01:48.320729 29806 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:48.320731 29806 net.cpp:139] Memory required for data: 3079680
I0428 20:01:48.320736 29806 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:48.320747 29806 net.cpp:86] Creating Layer relu2
I0428 20:01:48.320749 29806 net.cpp:408] relu2 <- ip2
I0428 20:01:48.320754 29806 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:48.321599 29806 net.cpp:124] Setting up relu2
I0428 20:01:48.321611 29806 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:48.321615 29806 net.cpp:139] Memory required for data: 3086080
I0428 20:01:48.321619 29806 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:48.321625 29806 net.cpp:86] Creating Layer ip3
I0428 20:01:48.321629 29806 net.cpp:408] ip3 <- ip2
I0428 20:01:48.321635 29806 net.cpp:382] ip3 -> ip3
I0428 20:01:48.321732 29806 net.cpp:124] Setting up ip3
I0428 20:01:48.321740 29806 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:48.321743 29806 net.cpp:139] Memory required for data: 3088640
I0428 20:01:48.321751 29806 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:48.321756 29806 net.cpp:86] Creating Layer relu3
I0428 20:01:48.321759 29806 net.cpp:408] relu3 <- ip3
I0428 20:01:48.321763 29806 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:48.321921 29806 net.cpp:124] Setting up relu3
I0428 20:01:48.321946 29806 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:48.321949 29806 net.cpp:139] Memory required for data: 3091200
I0428 20:01:48.321952 29806 layer_factory.hpp:77] Creating layer loss
I0428 20:01:48.321959 29806 net.cpp:86] Creating Layer loss
I0428 20:01:48.321961 29806 net.cpp:408] loss <- ip3
I0428 20:01:48.321965 29806 net.cpp:408] loss <- label
I0428 20:01:48.321970 29806 net.cpp:382] loss -> loss
I0428 20:01:48.321987 29806 layer_factory.hpp:77] Creating layer loss
I0428 20:01:48.322206 29806 net.cpp:124] Setting up loss
I0428 20:01:48.322216 29806 net.cpp:131] Top shape: (1)
I0428 20:01:48.322219 29806 net.cpp:134]     with loss weight 1
I0428 20:01:48.322232 29806 net.cpp:139] Memory required for data: 3091204
I0428 20:01:48.322237 29806 net.cpp:200] loss needs backward computation.
I0428 20:01:48.322239 29806 net.cpp:200] relu3 needs backward computation.
I0428 20:01:48.322242 29806 net.cpp:200] ip3 needs backward computation.
I0428 20:01:48.322245 29806 net.cpp:200] relu2 needs backward computation.
I0428 20:01:48.322248 29806 net.cpp:200] ip2 needs backward computation.
I0428 20:01:48.322252 29806 net.cpp:200] relu1 needs backward computation.
I0428 20:01:48.322253 29806 net.cpp:200] ip1 needs backward computation.
I0428 20:01:48.322257 29806 net.cpp:200] pool1 needs backward computation.
I0428 20:01:48.322259 29806 net.cpp:200] conv1 needs backward computation.
I0428 20:01:48.322263 29806 net.cpp:200] pool0 needs backward computation.
I0428 20:01:48.322265 29806 net.cpp:200] conv0 needs backward computation.
I0428 20:01:48.322268 29806 net.cpp:202] mnist does not need backward computation.
I0428 20:01:48.322271 29806 net.cpp:244] This network produces output loss
I0428 20:01:48.322280 29806 net.cpp:257] Network initialization done.
I0428 20:01:48.322648 29806 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test912.prototxt
I0428 20:01:48.322692 29806 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:48.322791 29806 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:48.322886 29806 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:48.322947 29806 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:48.322958 29806 net.cpp:86] Creating Layer mnist
I0428 20:01:48.322963 29806 net.cpp:382] mnist -> data
I0428 20:01:48.322970 29806 net.cpp:382] mnist -> label
I0428 20:01:48.323051 29806 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:48.325053 29806 net.cpp:124] Setting up mnist
I0428 20:01:48.325099 29806 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:48.325104 29806 net.cpp:131] Top shape: 100 (100)
I0428 20:01:48.325109 29806 net.cpp:139] Memory required for data: 314000
I0428 20:01:48.325112 29806 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:48.325134 29806 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:48.325139 29806 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:48.325145 29806 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:48.325152 29806 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:48.325227 29806 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:48.325233 29806 net.cpp:131] Top shape: 100 (100)
I0428 20:01:48.325237 29806 net.cpp:131] Top shape: 100 (100)
I0428 20:01:48.325240 29806 net.cpp:139] Memory required for data: 314800
I0428 20:01:48.325244 29806 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:48.325253 29806 net.cpp:86] Creating Layer conv0
I0428 20:01:48.325256 29806 net.cpp:408] conv0 <- data
I0428 20:01:48.325261 29806 net.cpp:382] conv0 -> conv0
I0428 20:01:48.326957 29806 net.cpp:124] Setting up conv0
I0428 20:01:48.326987 29806 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:48.326992 29806 net.cpp:139] Memory required for data: 2618800
I0428 20:01:48.327000 29806 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:48.327008 29806 net.cpp:86] Creating Layer pool0
I0428 20:01:48.327010 29806 net.cpp:408] pool0 <- conv0
I0428 20:01:48.327015 29806 net.cpp:382] pool0 -> pool0
I0428 20:01:48.327069 29806 net.cpp:124] Setting up pool0
I0428 20:01:48.327074 29806 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:48.327077 29806 net.cpp:139] Memory required for data: 3194800
I0428 20:01:48.327081 29806 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:48.327090 29806 net.cpp:86] Creating Layer conv1
I0428 20:01:48.327092 29806 net.cpp:408] conv1 <- pool0
I0428 20:01:48.327097 29806 net.cpp:382] conv1 -> conv1
I0428 20:01:48.328732 29806 net.cpp:124] Setting up conv1
I0428 20:01:48.328778 29806 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:48.328781 29806 net.cpp:139] Memory required for data: 4474800
I0428 20:01:48.328789 29806 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:48.328797 29806 net.cpp:86] Creating Layer pool1
I0428 20:01:48.328801 29806 net.cpp:408] pool1 <- conv1
I0428 20:01:48.328807 29806 net.cpp:382] pool1 -> pool1
I0428 20:01:48.328871 29806 net.cpp:124] Setting up pool1
I0428 20:01:48.328877 29806 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:48.328881 29806 net.cpp:139] Memory required for data: 4794800
I0428 20:01:48.328884 29806 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:48.328891 29806 net.cpp:86] Creating Layer ip1
I0428 20:01:48.328908 29806 net.cpp:408] ip1 <- pool1
I0428 20:01:48.328914 29806 net.cpp:382] ip1 -> ip1
I0428 20:01:48.329074 29806 net.cpp:124] Setting up ip1
I0428 20:01:48.329084 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.329099 29806 net.cpp:139] Memory required for data: 4798800
I0428 20:01:48.329108 29806 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:48.329113 29806 net.cpp:86] Creating Layer relu1
I0428 20:01:48.329118 29806 net.cpp:408] relu1 <- ip1
I0428 20:01:48.329123 29806 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:48.329315 29806 net.cpp:124] Setting up relu1
I0428 20:01:48.329324 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.329329 29806 net.cpp:139] Memory required for data: 4802800
I0428 20:01:48.329332 29806 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:48.329339 29806 net.cpp:86] Creating Layer ip2
I0428 20:01:48.329349 29806 net.cpp:408] ip2 <- ip1
I0428 20:01:48.329354 29806 net.cpp:382] ip2 -> ip2
I0428 20:01:48.329468 29806 net.cpp:124] Setting up ip2
I0428 20:01:48.329476 29806 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:48.329479 29806 net.cpp:139] Memory required for data: 4812800
I0428 20:01:48.329484 29806 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:48.329489 29806 net.cpp:86] Creating Layer relu2
I0428 20:01:48.329493 29806 net.cpp:408] relu2 <- ip2
I0428 20:01:48.329496 29806 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:48.329748 29806 net.cpp:124] Setting up relu2
I0428 20:01:48.329757 29806 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:48.329761 29806 net.cpp:139] Memory required for data: 4822800
I0428 20:01:48.329764 29806 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:48.329771 29806 net.cpp:86] Creating Layer ip3
I0428 20:01:48.329773 29806 net.cpp:408] ip3 <- ip2
I0428 20:01:48.329778 29806 net.cpp:382] ip3 -> ip3
I0428 20:01:48.329875 29806 net.cpp:124] Setting up ip3
I0428 20:01:48.329882 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.329885 29806 net.cpp:139] Memory required for data: 4826800
I0428 20:01:48.329892 29806 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:48.329897 29806 net.cpp:86] Creating Layer relu3
I0428 20:01:48.329900 29806 net.cpp:408] relu3 <- ip3
I0428 20:01:48.329905 29806 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:48.330763 29806 net.cpp:124] Setting up relu3
I0428 20:01:48.330791 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.330796 29806 net.cpp:139] Memory required for data: 4830800
I0428 20:01:48.330798 29806 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:48.330804 29806 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:48.330807 29806 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:48.330813 29806 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:48.330819 29806 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:48.330900 29806 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:48.330909 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.330912 29806 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:48.330915 29806 net.cpp:139] Memory required for data: 4838800
I0428 20:01:48.330919 29806 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:48.330924 29806 net.cpp:86] Creating Layer accuracy
I0428 20:01:48.330927 29806 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:48.330932 29806 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:48.330936 29806 net.cpp:382] accuracy -> accuracy
I0428 20:01:48.330945 29806 net.cpp:124] Setting up accuracy
I0428 20:01:48.330955 29806 net.cpp:131] Top shape: (1)
I0428 20:01:48.330958 29806 net.cpp:139] Memory required for data: 4838804
I0428 20:01:48.330961 29806 layer_factory.hpp:77] Creating layer loss
I0428 20:01:48.330966 29806 net.cpp:86] Creating Layer loss
I0428 20:01:48.330971 29806 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:48.330974 29806 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:48.330978 29806 net.cpp:382] loss -> loss
I0428 20:01:48.330986 29806 layer_factory.hpp:77] Creating layer loss
I0428 20:01:48.331248 29806 net.cpp:124] Setting up loss
I0428 20:01:48.331269 29806 net.cpp:131] Top shape: (1)
I0428 20:01:48.331272 29806 net.cpp:134]     with loss weight 1
I0428 20:01:48.331288 29806 net.cpp:139] Memory required for data: 4838808
I0428 20:01:48.331292 29806 net.cpp:200] loss needs backward computation.
I0428 20:01:48.331296 29806 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:48.331300 29806 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:48.331303 29806 net.cpp:200] relu3 needs backward computation.
I0428 20:01:48.331306 29806 net.cpp:200] ip3 needs backward computation.
I0428 20:01:48.331310 29806 net.cpp:200] relu2 needs backward computation.
I0428 20:01:48.331312 29806 net.cpp:200] ip2 needs backward computation.
I0428 20:01:48.331315 29806 net.cpp:200] relu1 needs backward computation.
I0428 20:01:48.331318 29806 net.cpp:200] ip1 needs backward computation.
I0428 20:01:48.331321 29806 net.cpp:200] pool1 needs backward computation.
I0428 20:01:48.331324 29806 net.cpp:200] conv1 needs backward computation.
I0428 20:01:48.331328 29806 net.cpp:200] pool0 needs backward computation.
I0428 20:01:48.331331 29806 net.cpp:200] conv0 needs backward computation.
I0428 20:01:48.331336 29806 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:48.331341 29806 net.cpp:202] mnist does not need backward computation.
I0428 20:01:48.331342 29806 net.cpp:244] This network produces output accuracy
I0428 20:01:48.331346 29806 net.cpp:244] This network produces output loss
I0428 20:01:48.331362 29806 net.cpp:257] Network initialization done.
I0428 20:01:48.331404 29806 solver.cpp:56] Solver scaffolding done.
I0428 20:01:48.331784 29806 caffe.cpp:248] Starting Optimization
I0428 20:01:48.331790 29806 solver.cpp:273] Solving LeNet
I0428 20:01:48.331794 29806 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:48.332072 29806 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:48.336832 29806 blocking_queue.cpp:49] Waiting for data
I0428 20:01:48.404404 29813 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:48.405037 29806 solver.cpp:398]     Test net output #0: accuracy = 0.0851
I0428 20:01:48.405073 29806 solver.cpp:398]     Test net output #1: loss = 2.31115 (* 1 = 2.31115 loss)
I0428 20:01:48.409610 29806 solver.cpp:219] Iteration 0 (2.92725 iter/s, 0.0777687s/100 iters), loss = 2.31285
I0428 20:01:48.409649 29806 solver.cpp:238]     Train net output #0: loss = 2.31285 (* 1 = 2.31285 loss)
I0428 20:01:48.409667 29806 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:48.524057 29806 solver.cpp:219] Iteration 100 (874.132 iter/s, 0.114399s/100 iters), loss = 1.2178
I0428 20:01:48.524089 29806 solver.cpp:238]     Train net output #0: loss = 1.2178 (* 1 = 1.2178 loss)
I0428 20:01:48.524097 29806 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:48.628769 29806 solver.cpp:219] Iteration 200 (955.373 iter/s, 0.104671s/100 iters), loss = 1.03871
I0428 20:01:48.628793 29806 solver.cpp:238]     Train net output #0: loss = 1.03871 (* 1 = 1.03871 loss)
I0428 20:01:48.628798 29806 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:48.733930 29806 solver.cpp:219] Iteration 300 (951.223 iter/s, 0.105128s/100 iters), loss = 0.597402
I0428 20:01:48.733969 29806 solver.cpp:238]     Train net output #0: loss = 0.597402 (* 1 = 0.597402 loss)
I0428 20:01:48.733975 29806 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:48.838579 29806 solver.cpp:219] Iteration 400 (955.888 iter/s, 0.104615s/100 iters), loss = 0.940314
I0428 20:01:48.838618 29806 solver.cpp:238]     Train net output #0: loss = 0.940314 (* 1 = 0.940314 loss)
I0428 20:01:48.838623 29806 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:48.941287 29806 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:48.994315 29813 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:48.994853 29806 solver.cpp:398]     Test net output #0: accuracy = 0.6615
I0428 20:01:48.994877 29806 solver.cpp:398]     Test net output #1: loss = 0.882764 (* 1 = 0.882764 loss)
I0428 20:01:48.995951 29806 solver.cpp:219] Iteration 500 (635.584 iter/s, 0.157336s/100 iters), loss = 1.12032
I0428 20:01:48.995988 29806 solver.cpp:238]     Train net output #0: loss = 1.12032 (* 1 = 1.12032 loss)
I0428 20:01:48.996013 29806 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:49.108316 29806 solver.cpp:219] Iteration 600 (890.319 iter/s, 0.112319s/100 iters), loss = 0.741737
I0428 20:01:49.108345 29806 solver.cpp:238]     Train net output #0: loss = 0.741737 (* 1 = 0.741737 loss)
I0428 20:01:49.108352 29806 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:49.212882 29806 solver.cpp:219] Iteration 700 (956.693 iter/s, 0.104527s/100 iters), loss = 0.88708
I0428 20:01:49.212921 29806 solver.cpp:238]     Train net output #0: loss = 0.88708 (* 1 = 0.88708 loss)
I0428 20:01:49.212929 29806 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:49.316422 29806 solver.cpp:219] Iteration 800 (966.118 iter/s, 0.103507s/100 iters), loss = 0.859183
I0428 20:01:49.316463 29806 solver.cpp:238]     Train net output #0: loss = 0.859183 (* 1 = 0.859183 loss)
I0428 20:01:49.316469 29806 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:49.423414 29806 solver.cpp:219] Iteration 900 (934.957 iter/s, 0.106957s/100 iters), loss = 0.683658
I0428 20:01:49.423485 29806 solver.cpp:238]     Train net output #0: loss = 0.683658 (* 1 = 0.683658 loss)
I0428 20:01:49.423492 29806 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:49.458461 29812 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:49.532976 29806 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:49.534129 29806 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:49.534844 29806 solver.cpp:311] Iteration 1000, loss = 0.768258
I0428 20:01:49.534860 29806 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:49.606644 29813 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:49.607190 29806 solver.cpp:398]     Test net output #0: accuracy = 0.6809
I0428 20:01:49.607225 29806 solver.cpp:398]     Test net output #1: loss = 0.785768 (* 1 = 0.785768 loss)
I0428 20:01:49.607230 29806 solver.cpp:316] Optimization Done.
I0428 20:01:49.607249 29806 caffe.cpp:259] Optimization Done.
