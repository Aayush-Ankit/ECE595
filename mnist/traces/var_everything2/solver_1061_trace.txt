I0428 20:07:38.005367 31150 caffe.cpp:218] Using GPUs 0
I0428 20:07:38.034647 31150 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:07:38.476678 31150 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1061.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:07:38.476847 31150 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1061.prototxt
I0428 20:07:38.477190 31150 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:07:38.477205 31150 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:07:38.477274 31150 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:07:38.477334 31150 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:38.477416 31150 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:07:38.477433 31150 net.cpp:86] Creating Layer mnist
I0428 20:07:38.477442 31150 net.cpp:382] mnist -> data
I0428 20:07:38.477460 31150 net.cpp:382] mnist -> label
I0428 20:07:38.478400 31150 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:07:38.480739 31150 net.cpp:124] Setting up mnist
I0428 20:07:38.480769 31150 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:07:38.480773 31150 net.cpp:131] Top shape: 64 (64)
I0428 20:07:38.480777 31150 net.cpp:139] Memory required for data: 200960
I0428 20:07:38.480782 31150 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:38.480839 31150 net.cpp:86] Creating Layer conv0
I0428 20:07:38.480845 31150 net.cpp:408] conv0 <- data
I0428 20:07:38.480883 31150 net.cpp:382] conv0 -> conv0
I0428 20:07:38.710985 31150 net.cpp:124] Setting up conv0
I0428 20:07:38.711025 31150 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:07:38.711030 31150 net.cpp:139] Memory required for data: 3887360
I0428 20:07:38.711063 31150 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:38.711091 31150 net.cpp:86] Creating Layer pool0
I0428 20:07:38.711096 31150 net.cpp:408] pool0 <- conv0
I0428 20:07:38.711102 31150 net.cpp:382] pool0 -> pool0
I0428 20:07:38.711148 31150 net.cpp:124] Setting up pool0
I0428 20:07:38.711159 31150 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:07:38.711163 31150 net.cpp:139] Memory required for data: 4808960
I0428 20:07:38.711165 31150 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:38.711190 31150 net.cpp:86] Creating Layer conv1
I0428 20:07:38.711194 31150 net.cpp:408] conv1 <- pool0
I0428 20:07:38.711199 31150 net.cpp:382] conv1 -> conv1
I0428 20:07:38.714022 31150 net.cpp:124] Setting up conv1
I0428 20:07:38.714051 31150 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:07:38.714069 31150 net.cpp:139] Memory required for data: 4972800
I0428 20:07:38.714078 31150 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:38.714085 31150 net.cpp:86] Creating Layer pool1
I0428 20:07:38.714089 31150 net.cpp:408] pool1 <- conv1
I0428 20:07:38.714094 31150 net.cpp:382] pool1 -> pool1
I0428 20:07:38.714145 31150 net.cpp:124] Setting up pool1
I0428 20:07:38.714151 31150 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:07:38.714154 31150 net.cpp:139] Memory required for data: 5013760
I0428 20:07:38.714172 31150 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:38.714179 31150 net.cpp:86] Creating Layer ip1
I0428 20:07:38.714182 31150 net.cpp:408] ip1 <- pool1
I0428 20:07:38.714187 31150 net.cpp:382] ip1 -> ip1
I0428 20:07:38.715148 31150 net.cpp:124] Setting up ip1
I0428 20:07:38.715160 31150 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:07:38.715179 31150 net.cpp:139] Memory required for data: 5020160
I0428 20:07:38.715188 31150 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:38.715193 31150 net.cpp:86] Creating Layer relu1
I0428 20:07:38.715198 31150 net.cpp:408] relu1 <- ip1
I0428 20:07:38.715203 31150 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:38.715410 31150 net.cpp:124] Setting up relu1
I0428 20:07:38.715420 31150 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:07:38.715423 31150 net.cpp:139] Memory required for data: 5026560
I0428 20:07:38.715426 31150 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:38.715433 31150 net.cpp:86] Creating Layer ip2
I0428 20:07:38.715436 31150 net.cpp:408] ip2 <- ip1
I0428 20:07:38.715441 31150 net.cpp:382] ip2 -> ip2
I0428 20:07:38.715561 31150 net.cpp:124] Setting up ip2
I0428 20:07:38.715584 31150 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:38.715586 31150 net.cpp:139] Memory required for data: 5029120
I0428 20:07:38.715591 31150 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:38.715597 31150 net.cpp:86] Creating Layer relu2
I0428 20:07:38.715600 31150 net.cpp:408] relu2 <- ip2
I0428 20:07:38.715605 31150 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:38.716398 31150 net.cpp:124] Setting up relu2
I0428 20:07:38.716409 31150 net.cpp:131] Top shape: 64 10 (640)
I0428 20:07:38.716413 31150 net.cpp:139] Memory required for data: 5031680
I0428 20:07:38.716431 31150 layer_factory.hpp:77] Creating layer loss
I0428 20:07:38.716439 31150 net.cpp:86] Creating Layer loss
I0428 20:07:38.716441 31150 net.cpp:408] loss <- ip2
I0428 20:07:38.716446 31150 net.cpp:408] loss <- label
I0428 20:07:38.716464 31150 net.cpp:382] loss -> loss
I0428 20:07:38.716482 31150 layer_factory.hpp:77] Creating layer loss
I0428 20:07:38.716734 31150 net.cpp:124] Setting up loss
I0428 20:07:38.716743 31150 net.cpp:131] Top shape: (1)
I0428 20:07:38.716747 31150 net.cpp:134]     with loss weight 1
I0428 20:07:38.716761 31150 net.cpp:139] Memory required for data: 5031684
I0428 20:07:38.716764 31150 net.cpp:200] loss needs backward computation.
I0428 20:07:38.716768 31150 net.cpp:200] relu2 needs backward computation.
I0428 20:07:38.716771 31150 net.cpp:200] ip2 needs backward computation.
I0428 20:07:38.716774 31150 net.cpp:200] relu1 needs backward computation.
I0428 20:07:38.716778 31150 net.cpp:200] ip1 needs backward computation.
I0428 20:07:38.716790 31150 net.cpp:200] pool1 needs backward computation.
I0428 20:07:38.716794 31150 net.cpp:200] conv1 needs backward computation.
I0428 20:07:38.716796 31150 net.cpp:200] pool0 needs backward computation.
I0428 20:07:38.716799 31150 net.cpp:200] conv0 needs backward computation.
I0428 20:07:38.716804 31150 net.cpp:202] mnist does not need backward computation.
I0428 20:07:38.716806 31150 net.cpp:244] This network produces output loss
I0428 20:07:38.716835 31150 net.cpp:257] Network initialization done.
I0428 20:07:38.717231 31150 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1061.prototxt
I0428 20:07:38.717283 31150 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:07:38.717361 31150 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:07:38.717438 31150 layer_factory.hpp:77] Creating layer mnist
I0428 20:07:38.717507 31150 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:07:38.717520 31150 net.cpp:86] Creating Layer mnist
I0428 20:07:38.717525 31150 net.cpp:382] mnist -> data
I0428 20:07:38.717535 31150 net.cpp:382] mnist -> label
I0428 20:07:38.717622 31150 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:07:38.719637 31150 net.cpp:124] Setting up mnist
I0428 20:07:38.719681 31150 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:07:38.719686 31150 net.cpp:131] Top shape: 100 (100)
I0428 20:07:38.719689 31150 net.cpp:139] Memory required for data: 314000
I0428 20:07:38.719693 31150 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:07:38.719700 31150 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:07:38.719703 31150 net.cpp:408] label_mnist_1_split <- label
I0428 20:07:38.719708 31150 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:07:38.719715 31150 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:07:38.719776 31150 net.cpp:124] Setting up label_mnist_1_split
I0428 20:07:38.719782 31150 net.cpp:131] Top shape: 100 (100)
I0428 20:07:38.719785 31150 net.cpp:131] Top shape: 100 (100)
I0428 20:07:38.719789 31150 net.cpp:139] Memory required for data: 314800
I0428 20:07:38.719792 31150 layer_factory.hpp:77] Creating layer conv0
I0428 20:07:38.719800 31150 net.cpp:86] Creating Layer conv0
I0428 20:07:38.719804 31150 net.cpp:408] conv0 <- data
I0428 20:07:38.719808 31150 net.cpp:382] conv0 -> conv0
I0428 20:07:38.721488 31150 net.cpp:124] Setting up conv0
I0428 20:07:38.721501 31150 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:07:38.721505 31150 net.cpp:139] Memory required for data: 6074800
I0428 20:07:38.721514 31150 layer_factory.hpp:77] Creating layer pool0
I0428 20:07:38.721536 31150 net.cpp:86] Creating Layer pool0
I0428 20:07:38.721539 31150 net.cpp:408] pool0 <- conv0
I0428 20:07:38.721544 31150 net.cpp:382] pool0 -> pool0
I0428 20:07:38.721580 31150 net.cpp:124] Setting up pool0
I0428 20:07:38.721585 31150 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:07:38.721602 31150 net.cpp:139] Memory required for data: 7514800
I0428 20:07:38.721606 31150 layer_factory.hpp:77] Creating layer conv1
I0428 20:07:38.721613 31150 net.cpp:86] Creating Layer conv1
I0428 20:07:38.721616 31150 net.cpp:408] conv1 <- pool0
I0428 20:07:38.721621 31150 net.cpp:382] conv1 -> conv1
I0428 20:07:38.723747 31150 net.cpp:124] Setting up conv1
I0428 20:07:38.723758 31150 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:07:38.723762 31150 net.cpp:139] Memory required for data: 7770800
I0428 20:07:38.723772 31150 layer_factory.hpp:77] Creating layer pool1
I0428 20:07:38.723794 31150 net.cpp:86] Creating Layer pool1
I0428 20:07:38.723798 31150 net.cpp:408] pool1 <- conv1
I0428 20:07:38.723803 31150 net.cpp:382] pool1 -> pool1
I0428 20:07:38.723840 31150 net.cpp:124] Setting up pool1
I0428 20:07:38.723846 31150 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:07:38.723850 31150 net.cpp:139] Memory required for data: 7834800
I0428 20:07:38.723851 31150 layer_factory.hpp:77] Creating layer ip1
I0428 20:07:38.723857 31150 net.cpp:86] Creating Layer ip1
I0428 20:07:38.723861 31150 net.cpp:408] ip1 <- pool1
I0428 20:07:38.723865 31150 net.cpp:382] ip1 -> ip1
I0428 20:07:38.723999 31150 net.cpp:124] Setting up ip1
I0428 20:07:38.724007 31150 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:07:38.724010 31150 net.cpp:139] Memory required for data: 7844800
I0428 20:07:38.724019 31150 layer_factory.hpp:77] Creating layer relu1
I0428 20:07:38.724023 31150 net.cpp:86] Creating Layer relu1
I0428 20:07:38.724027 31150 net.cpp:408] relu1 <- ip1
I0428 20:07:38.724038 31150 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:07:38.724225 31150 net.cpp:124] Setting up relu1
I0428 20:07:38.724247 31150 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:07:38.724265 31150 net.cpp:139] Memory required for data: 7854800
I0428 20:07:38.724269 31150 layer_factory.hpp:77] Creating layer ip2
I0428 20:07:38.724283 31150 net.cpp:86] Creating Layer ip2
I0428 20:07:38.724287 31150 net.cpp:408] ip2 <- ip1
I0428 20:07:38.724297 31150 net.cpp:382] ip2 -> ip2
I0428 20:07:38.724421 31150 net.cpp:124] Setting up ip2
I0428 20:07:38.724427 31150 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:38.724431 31150 net.cpp:139] Memory required for data: 7858800
I0428 20:07:38.724436 31150 layer_factory.hpp:77] Creating layer relu2
I0428 20:07:38.724441 31150 net.cpp:86] Creating Layer relu2
I0428 20:07:38.724444 31150 net.cpp:408] relu2 <- ip2
I0428 20:07:38.724453 31150 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:07:38.724617 31150 net.cpp:124] Setting up relu2
I0428 20:07:38.724625 31150 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:38.724628 31150 net.cpp:139] Memory required for data: 7862800
I0428 20:07:38.724632 31150 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:07:38.724635 31150 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:07:38.724638 31150 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:07:38.724642 31150 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:07:38.724658 31150 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:07:38.724692 31150 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:07:38.724697 31150 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:38.724701 31150 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:07:38.724704 31150 net.cpp:139] Memory required for data: 7870800
I0428 20:07:38.724714 31150 layer_factory.hpp:77] Creating layer accuracy
I0428 20:07:38.724723 31150 net.cpp:86] Creating Layer accuracy
I0428 20:07:38.724726 31150 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:07:38.724730 31150 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:07:38.724735 31150 net.cpp:382] accuracy -> accuracy
I0428 20:07:38.724740 31150 net.cpp:124] Setting up accuracy
I0428 20:07:38.724745 31150 net.cpp:131] Top shape: (1)
I0428 20:07:38.724747 31150 net.cpp:139] Memory required for data: 7870804
I0428 20:07:38.724750 31150 layer_factory.hpp:77] Creating layer loss
I0428 20:07:38.724761 31150 net.cpp:86] Creating Layer loss
I0428 20:07:38.724763 31150 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:07:38.724766 31150 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:07:38.724771 31150 net.cpp:382] loss -> loss
I0428 20:07:38.724776 31150 layer_factory.hpp:77] Creating layer loss
I0428 20:07:38.725075 31150 net.cpp:124] Setting up loss
I0428 20:07:38.725085 31150 net.cpp:131] Top shape: (1)
I0428 20:07:38.725087 31150 net.cpp:134]     with loss weight 1
I0428 20:07:38.725095 31150 net.cpp:139] Memory required for data: 7870808
I0428 20:07:38.725097 31150 net.cpp:200] loss needs backward computation.
I0428 20:07:38.725101 31150 net.cpp:202] accuracy does not need backward computation.
I0428 20:07:38.725106 31150 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:07:38.725108 31150 net.cpp:200] relu2 needs backward computation.
I0428 20:07:38.725111 31150 net.cpp:200] ip2 needs backward computation.
I0428 20:07:38.725114 31150 net.cpp:200] relu1 needs backward computation.
I0428 20:07:38.725117 31150 net.cpp:200] ip1 needs backward computation.
I0428 20:07:38.725121 31150 net.cpp:200] pool1 needs backward computation.
I0428 20:07:38.725124 31150 net.cpp:200] conv1 needs backward computation.
I0428 20:07:38.725127 31150 net.cpp:200] pool0 needs backward computation.
I0428 20:07:38.725131 31150 net.cpp:200] conv0 needs backward computation.
I0428 20:07:38.725134 31150 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:07:38.725138 31150 net.cpp:202] mnist does not need backward computation.
I0428 20:07:38.725142 31150 net.cpp:244] This network produces output accuracy
I0428 20:07:38.725144 31150 net.cpp:244] This network produces output loss
I0428 20:07:38.725188 31150 net.cpp:257] Network initialization done.
I0428 20:07:38.725239 31150 solver.cpp:56] Solver scaffolding done.
I0428 20:07:38.725570 31150 caffe.cpp:248] Starting Optimization
I0428 20:07:38.725577 31150 solver.cpp:273] Solving LeNet
I0428 20:07:38.725580 31150 solver.cpp:274] Learning Rate Policy: inv
I0428 20:07:38.726328 31150 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:07:38.730458 31150 blocking_queue.cpp:49] Waiting for data
I0428 20:07:38.802918 31157 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:38.803494 31150 solver.cpp:398]     Test net output #0: accuracy = 0.117
I0428 20:07:38.803513 31150 solver.cpp:398]     Test net output #1: loss = 2.31544 (* 1 = 2.31544 loss)
I0428 20:07:38.807020 31150 solver.cpp:219] Iteration 0 (-9.13154e-31 iter/s, 0.0814098s/100 iters), loss = 2.30227
I0428 20:07:38.807059 31150 solver.cpp:238]     Train net output #0: loss = 2.30227 (* 1 = 2.30227 loss)
I0428 20:07:38.807085 31150 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:07:38.892521 31150 solver.cpp:219] Iteration 100 (1170.22 iter/s, 0.0854538s/100 iters), loss = 1.25393
I0428 20:07:38.892545 31150 solver.cpp:238]     Train net output #0: loss = 1.25393 (* 1 = 1.25393 loss)
I0428 20:07:38.892552 31150 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:07:38.976990 31150 solver.cpp:219] Iteration 200 (1184.36 iter/s, 0.0844339s/100 iters), loss = 1.20298
I0428 20:07:38.977016 31150 solver.cpp:238]     Train net output #0: loss = 1.20298 (* 1 = 1.20298 loss)
I0428 20:07:38.977022 31150 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:07:39.061333 31150 solver.cpp:219] Iteration 300 (1186.13 iter/s, 0.084308s/100 iters), loss = 0.721081
I0428 20:07:39.061357 31150 solver.cpp:238]     Train net output #0: loss = 0.721081 (* 1 = 0.721081 loss)
I0428 20:07:39.061362 31150 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:07:39.144291 31150 solver.cpp:219] Iteration 400 (1205.9 iter/s, 0.0829255s/100 iters), loss = 0.819316
I0428 20:07:39.144315 31150 solver.cpp:238]     Train net output #0: loss = 0.819316 (* 1 = 0.819316 loss)
I0428 20:07:39.144336 31150 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:07:39.242342 31150 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:07:39.317029 31157 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:39.317641 31150 solver.cpp:398]     Test net output #0: accuracy = 0.8338
I0428 20:07:39.317668 31150 solver.cpp:398]     Test net output #1: loss = 0.6205 (* 1 = 0.6205 loss)
I0428 20:07:39.318586 31150 solver.cpp:219] Iteration 500 (573.865 iter/s, 0.174257s/100 iters), loss = 0.627023
I0428 20:07:39.318617 31150 solver.cpp:238]     Train net output #0: loss = 0.627023 (* 1 = 0.627023 loss)
I0428 20:07:39.318625 31150 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:07:39.409548 31150 solver.cpp:219] Iteration 600 (1099.87 iter/s, 0.0909199s/100 iters), loss = 0.581073
I0428 20:07:39.409580 31150 solver.cpp:238]     Train net output #0: loss = 0.581073 (* 1 = 0.581073 loss)
I0428 20:07:39.409588 31150 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:07:39.505154 31150 solver.cpp:219] Iteration 700 (1046.45 iter/s, 0.0955607s/100 iters), loss = 0.691578
I0428 20:07:39.505198 31150 solver.cpp:238]     Train net output #0: loss = 0.691578 (* 1 = 0.691578 loss)
I0428 20:07:39.505211 31150 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:07:39.595093 31150 solver.cpp:219] Iteration 800 (1112.51 iter/s, 0.0898867s/100 iters), loss = 0.707892
I0428 20:07:39.595125 31150 solver.cpp:238]     Train net output #0: loss = 0.707892 (* 1 = 0.707892 loss)
I0428 20:07:39.595137 31150 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:07:39.683845 31150 solver.cpp:219] Iteration 900 (1127.28 iter/s, 0.088709s/100 iters), loss = 0.514489
I0428 20:07:39.683876 31150 solver.cpp:238]     Train net output #0: loss = 0.514489 (* 1 = 0.514489 loss)
I0428 20:07:39.683883 31150 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:07:39.713446 31156 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:39.772317 31150 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:07:39.773149 31150 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:07:39.773757 31150 solver.cpp:311] Iteration 1000, loss = 0.541751
I0428 20:07:39.773775 31150 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:07:39.848894 31157 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:07:39.849592 31150 solver.cpp:398]     Test net output #0: accuracy = 0.8641
I0428 20:07:39.849622 31150 solver.cpp:398]     Test net output #1: loss = 0.549148 (* 1 = 0.549148 loss)
I0428 20:07:39.849629 31150 solver.cpp:316] Optimization Done.
I0428 20:07:39.849635 31150 caffe.cpp:259] Optimization Done.
