I0428 19:49:05.296001 26669 caffe.cpp:218] Using GPUs 0
I0428 19:49:05.333652 26669 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:05.844583 26669 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test564.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:05.844732 26669 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test564.prototxt
I0428 19:49:05.845161 26669 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:05.845182 26669 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:05.845284 26669 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:05.845365 26669 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:05.845464 26669 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:05.845489 26669 net.cpp:86] Creating Layer mnist
I0428 19:49:05.845499 26669 net.cpp:382] mnist -> data
I0428 19:49:05.845521 26669 net.cpp:382] mnist -> label
I0428 19:49:05.846616 26669 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:05.849084 26669 net.cpp:124] Setting up mnist
I0428 19:49:05.849103 26669 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:05.849109 26669 net.cpp:131] Top shape: 64 (64)
I0428 19:49:05.849113 26669 net.cpp:139] Memory required for data: 200960
I0428 19:49:05.849120 26669 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:05.849138 26669 net.cpp:86] Creating Layer conv0
I0428 19:49:05.849159 26669 net.cpp:408] conv0 <- data
I0428 19:49:05.849174 26669 net.cpp:382] conv0 -> conv0
I0428 19:49:06.140455 26669 net.cpp:124] Setting up conv0
I0428 19:49:06.140489 26669 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:06.140494 26669 net.cpp:139] Memory required for data: 938240
I0428 19:49:06.140512 26669 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:06.140528 26669 net.cpp:86] Creating Layer pool0
I0428 19:49:06.140533 26669 net.cpp:408] pool0 <- conv0
I0428 19:49:06.140539 26669 net.cpp:382] pool0 -> pool0
I0428 19:49:06.140596 26669 net.cpp:124] Setting up pool0
I0428 19:49:06.140606 26669 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:06.140610 26669 net.cpp:139] Memory required for data: 1122560
I0428 19:49:06.140614 26669 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:06.140627 26669 net.cpp:86] Creating Layer conv1
I0428 19:49:06.140631 26669 net.cpp:408] conv1 <- pool0
I0428 19:49:06.140637 26669 net.cpp:382] conv1 -> conv1
I0428 19:49:06.142796 26669 net.cpp:124] Setting up conv1
I0428 19:49:06.142814 26669 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:06.142819 26669 net.cpp:139] Memory required for data: 1204480
I0428 19:49:06.142829 26669 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:06.142838 26669 net.cpp:86] Creating Layer pool1
I0428 19:49:06.142843 26669 net.cpp:408] pool1 <- conv1
I0428 19:49:06.142849 26669 net.cpp:382] pool1 -> pool1
I0428 19:49:06.142894 26669 net.cpp:124] Setting up pool1
I0428 19:49:06.142901 26669 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:06.142905 26669 net.cpp:139] Memory required for data: 1224960
I0428 19:49:06.142909 26669 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:06.142917 26669 net.cpp:86] Creating Layer ip1
I0428 19:49:06.142921 26669 net.cpp:408] ip1 <- pool1
I0428 19:49:06.142926 26669 net.cpp:382] ip1 -> ip1
I0428 19:49:06.143049 26669 net.cpp:124] Setting up ip1
I0428 19:49:06.143057 26669 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:06.143061 26669 net.cpp:139] Memory required for data: 1227520
I0428 19:49:06.143070 26669 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:06.143076 26669 net.cpp:86] Creating Layer relu1
I0428 19:49:06.143080 26669 net.cpp:408] relu1 <- ip1
I0428 19:49:06.143085 26669 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:06.143285 26669 net.cpp:124] Setting up relu1
I0428 19:49:06.143296 26669 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:06.143299 26669 net.cpp:139] Memory required for data: 1230080
I0428 19:49:06.143303 26669 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:06.143311 26669 net.cpp:86] Creating Layer ip2
I0428 19:49:06.143316 26669 net.cpp:408] ip2 <- ip1
I0428 19:49:06.143321 26669 net.cpp:382] ip2 -> ip2
I0428 19:49:06.143440 26669 net.cpp:124] Setting up ip2
I0428 19:49:06.143448 26669 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:06.143452 26669 net.cpp:139] Memory required for data: 1242880
I0428 19:49:06.143458 26669 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:06.143465 26669 net.cpp:86] Creating Layer relu2
I0428 19:49:06.143470 26669 net.cpp:408] relu2 <- ip2
I0428 19:49:06.143474 26669 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:06.144320 26669 net.cpp:124] Setting up relu2
I0428 19:49:06.144335 26669 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:06.144338 26669 net.cpp:139] Memory required for data: 1255680
I0428 19:49:06.144343 26669 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:06.144351 26669 net.cpp:86] Creating Layer ip3
I0428 19:49:06.144356 26669 net.cpp:408] ip3 <- ip2
I0428 19:49:06.144361 26669 net.cpp:382] ip3 -> ip3
I0428 19:49:06.144484 26669 net.cpp:124] Setting up ip3
I0428 19:49:06.144495 26669 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:06.144498 26669 net.cpp:139] Memory required for data: 1258240
I0428 19:49:06.144508 26669 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:06.144520 26669 net.cpp:86] Creating Layer relu3
I0428 19:49:06.144525 26669 net.cpp:408] relu3 <- ip3
I0428 19:49:06.144529 26669 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:06.144727 26669 net.cpp:124] Setting up relu3
I0428 19:49:06.144738 26669 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:06.144742 26669 net.cpp:139] Memory required for data: 1260800
I0428 19:49:06.144747 26669 layer_factory.hpp:77] Creating layer loss
I0428 19:49:06.144753 26669 net.cpp:86] Creating Layer loss
I0428 19:49:06.144757 26669 net.cpp:408] loss <- ip3
I0428 19:49:06.144762 26669 net.cpp:408] loss <- label
I0428 19:49:06.144768 26669 net.cpp:382] loss -> loss
I0428 19:49:06.144789 26669 layer_factory.hpp:77] Creating layer loss
I0428 19:49:06.145068 26669 net.cpp:124] Setting up loss
I0428 19:49:06.145081 26669 net.cpp:131] Top shape: (1)
I0428 19:49:06.145086 26669 net.cpp:134]     with loss weight 1
I0428 19:49:06.145102 26669 net.cpp:139] Memory required for data: 1260804
I0428 19:49:06.145105 26669 net.cpp:200] loss needs backward computation.
I0428 19:49:06.145109 26669 net.cpp:200] relu3 needs backward computation.
I0428 19:49:06.145113 26669 net.cpp:200] ip3 needs backward computation.
I0428 19:49:06.145117 26669 net.cpp:200] relu2 needs backward computation.
I0428 19:49:06.145120 26669 net.cpp:200] ip2 needs backward computation.
I0428 19:49:06.145124 26669 net.cpp:200] relu1 needs backward computation.
I0428 19:49:06.145128 26669 net.cpp:200] ip1 needs backward computation.
I0428 19:49:06.145131 26669 net.cpp:200] pool1 needs backward computation.
I0428 19:49:06.145134 26669 net.cpp:200] conv1 needs backward computation.
I0428 19:49:06.145138 26669 net.cpp:200] pool0 needs backward computation.
I0428 19:49:06.145143 26669 net.cpp:200] conv0 needs backward computation.
I0428 19:49:06.145146 26669 net.cpp:202] mnist does not need backward computation.
I0428 19:49:06.145150 26669 net.cpp:244] This network produces output loss
I0428 19:49:06.145161 26669 net.cpp:257] Network initialization done.
I0428 19:49:06.145543 26669 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test564.prototxt
I0428 19:49:06.145576 26669 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:06.145680 26669 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:06.145774 26669 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:06.145824 26669 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:06.145844 26669 net.cpp:86] Creating Layer mnist
I0428 19:49:06.145849 26669 net.cpp:382] mnist -> data
I0428 19:49:06.145859 26669 net.cpp:382] mnist -> label
I0428 19:49:06.145958 26669 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:06.148146 26669 net.cpp:124] Setting up mnist
I0428 19:49:06.148162 26669 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:06.148169 26669 net.cpp:131] Top shape: 100 (100)
I0428 19:49:06.148174 26669 net.cpp:139] Memory required for data: 314000
I0428 19:49:06.148177 26669 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:06.148190 26669 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:06.148195 26669 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:06.148200 26669 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:06.148208 26669 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:06.148327 26669 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:06.148337 26669 net.cpp:131] Top shape: 100 (100)
I0428 19:49:06.148342 26669 net.cpp:131] Top shape: 100 (100)
I0428 19:49:06.148346 26669 net.cpp:139] Memory required for data: 314800
I0428 19:49:06.148350 26669 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:06.148360 26669 net.cpp:86] Creating Layer conv0
I0428 19:49:06.148365 26669 net.cpp:408] conv0 <- data
I0428 19:49:06.148371 26669 net.cpp:382] conv0 -> conv0
I0428 19:49:06.150028 26669 net.cpp:124] Setting up conv0
I0428 19:49:06.150048 26669 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:06.150053 26669 net.cpp:139] Memory required for data: 1466800
I0428 19:49:06.150065 26669 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:06.150073 26669 net.cpp:86] Creating Layer pool0
I0428 19:49:06.150079 26669 net.cpp:408] pool0 <- conv0
I0428 19:49:06.150085 26669 net.cpp:382] pool0 -> pool0
I0428 19:49:06.150130 26669 net.cpp:124] Setting up pool0
I0428 19:49:06.150137 26669 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:06.150141 26669 net.cpp:139] Memory required for data: 1754800
I0428 19:49:06.150146 26669 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:06.150156 26669 net.cpp:86] Creating Layer conv1
I0428 19:49:06.150161 26669 net.cpp:408] conv1 <- pool0
I0428 19:49:06.150167 26669 net.cpp:382] conv1 -> conv1
I0428 19:49:06.152508 26669 net.cpp:124] Setting up conv1
I0428 19:49:06.152523 26669 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:06.152528 26669 net.cpp:139] Memory required for data: 1882800
I0428 19:49:06.152537 26669 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:06.152545 26669 net.cpp:86] Creating Layer pool1
I0428 19:49:06.152549 26669 net.cpp:408] pool1 <- conv1
I0428 19:49:06.152556 26669 net.cpp:382] pool1 -> pool1
I0428 19:49:06.152643 26669 net.cpp:124] Setting up pool1
I0428 19:49:06.152653 26669 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:06.152657 26669 net.cpp:139] Memory required for data: 1914800
I0428 19:49:06.152662 26669 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:06.152669 26669 net.cpp:86] Creating Layer ip1
I0428 19:49:06.152673 26669 net.cpp:408] ip1 <- pool1
I0428 19:49:06.152679 26669 net.cpp:382] ip1 -> ip1
I0428 19:49:06.152804 26669 net.cpp:124] Setting up ip1
I0428 19:49:06.152822 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.152843 26669 net.cpp:139] Memory required for data: 1918800
I0428 19:49:06.152854 26669 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:06.152860 26669 net.cpp:86] Creating Layer relu1
I0428 19:49:06.152865 26669 net.cpp:408] relu1 <- ip1
I0428 19:49:06.152870 26669 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:06.153077 26669 net.cpp:124] Setting up relu1
I0428 19:49:06.153089 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.153092 26669 net.cpp:139] Memory required for data: 1922800
I0428 19:49:06.153095 26669 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:06.153105 26669 net.cpp:86] Creating Layer ip2
I0428 19:49:06.153108 26669 net.cpp:408] ip2 <- ip1
I0428 19:49:06.153115 26669 net.cpp:382] ip2 -> ip2
I0428 19:49:06.153234 26669 net.cpp:124] Setting up ip2
I0428 19:49:06.153244 26669 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:06.153247 26669 net.cpp:139] Memory required for data: 1942800
I0428 19:49:06.153254 26669 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:06.153259 26669 net.cpp:86] Creating Layer relu2
I0428 19:49:06.153264 26669 net.cpp:408] relu2 <- ip2
I0428 19:49:06.153268 26669 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:06.153445 26669 net.cpp:124] Setting up relu2
I0428 19:49:06.153455 26669 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:06.153460 26669 net.cpp:139] Memory required for data: 1962800
I0428 19:49:06.153462 26669 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:06.153470 26669 net.cpp:86] Creating Layer ip3
I0428 19:49:06.153473 26669 net.cpp:408] ip3 <- ip2
I0428 19:49:06.153479 26669 net.cpp:382] ip3 -> ip3
I0428 19:49:06.153599 26669 net.cpp:124] Setting up ip3
I0428 19:49:06.153607 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.153611 26669 net.cpp:139] Memory required for data: 1966800
I0428 19:49:06.153620 26669 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:06.153625 26669 net.cpp:86] Creating Layer relu3
I0428 19:49:06.153630 26669 net.cpp:408] relu3 <- ip3
I0428 19:49:06.153635 26669 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:06.154487 26669 net.cpp:124] Setting up relu3
I0428 19:49:06.154502 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.154507 26669 net.cpp:139] Memory required for data: 1970800
I0428 19:49:06.154511 26669 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:06.154517 26669 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:06.154521 26669 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:06.154527 26669 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:06.154534 26669 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:06.154578 26669 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:06.154584 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.154589 26669 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:06.154592 26669 net.cpp:139] Memory required for data: 1978800
I0428 19:49:06.154597 26669 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:06.154603 26669 net.cpp:86] Creating Layer accuracy
I0428 19:49:06.154606 26669 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:06.154610 26669 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:06.154616 26669 net.cpp:382] accuracy -> accuracy
I0428 19:49:06.154624 26669 net.cpp:124] Setting up accuracy
I0428 19:49:06.154629 26669 net.cpp:131] Top shape: (1)
I0428 19:49:06.154633 26669 net.cpp:139] Memory required for data: 1978804
I0428 19:49:06.154636 26669 layer_factory.hpp:77] Creating layer loss
I0428 19:49:06.154641 26669 net.cpp:86] Creating Layer loss
I0428 19:49:06.154645 26669 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:06.154649 26669 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:06.154654 26669 net.cpp:382] loss -> loss
I0428 19:49:06.154661 26669 layer_factory.hpp:77] Creating layer loss
I0428 19:49:06.154929 26669 net.cpp:124] Setting up loss
I0428 19:49:06.154940 26669 net.cpp:131] Top shape: (1)
I0428 19:49:06.154944 26669 net.cpp:134]     with loss weight 1
I0428 19:49:06.154952 26669 net.cpp:139] Memory required for data: 1978808
I0428 19:49:06.154966 26669 net.cpp:200] loss needs backward computation.
I0428 19:49:06.154971 26669 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:06.154976 26669 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:06.154979 26669 net.cpp:200] relu3 needs backward computation.
I0428 19:49:06.154983 26669 net.cpp:200] ip3 needs backward computation.
I0428 19:49:06.154986 26669 net.cpp:200] relu2 needs backward computation.
I0428 19:49:06.154990 26669 net.cpp:200] ip2 needs backward computation.
I0428 19:49:06.154994 26669 net.cpp:200] relu1 needs backward computation.
I0428 19:49:06.154997 26669 net.cpp:200] ip1 needs backward computation.
I0428 19:49:06.155000 26669 net.cpp:200] pool1 needs backward computation.
I0428 19:49:06.155004 26669 net.cpp:200] conv1 needs backward computation.
I0428 19:49:06.155009 26669 net.cpp:200] pool0 needs backward computation.
I0428 19:49:06.155012 26669 net.cpp:200] conv0 needs backward computation.
I0428 19:49:06.155017 26669 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:06.155022 26669 net.cpp:202] mnist does not need backward computation.
I0428 19:49:06.155025 26669 net.cpp:244] This network produces output accuracy
I0428 19:49:06.155030 26669 net.cpp:244] This network produces output loss
I0428 19:49:06.155042 26669 net.cpp:257] Network initialization done.
I0428 19:49:06.155092 26669 solver.cpp:56] Solver scaffolding done.
I0428 19:49:06.155485 26669 caffe.cpp:248] Starting Optimization
I0428 19:49:06.155494 26669 solver.cpp:273] Solving LeNet
I0428 19:49:06.155498 26669 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:06.156350 26669 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:06.162446 26669 blocking_queue.cpp:49] Waiting for data
I0428 19:49:06.211138 26676 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:06.211633 26669 solver.cpp:398]     Test net output #0: accuracy = 0.0952
I0428 19:49:06.211654 26669 solver.cpp:398]     Test net output #1: loss = 2.31486 (* 1 = 2.31486 loss)
I0428 19:49:06.213522 26669 solver.cpp:219] Iteration 0 (-2.79345e-33 iter/s, 0.0579995s/100 iters), loss = 2.31549
I0428 19:49:06.213551 26669 solver.cpp:238]     Train net output #0: loss = 2.31549 (* 1 = 2.31549 loss)
I0428 19:49:06.213563 26669 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:06.285493 26669 solver.cpp:219] Iteration 100 (1390.12 iter/s, 0.071936s/100 iters), loss = 0.755663
I0428 19:49:06.285519 26669 solver.cpp:238]     Train net output #0: loss = 0.755663 (* 1 = 0.755663 loss)
I0428 19:49:06.285526 26669 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:06.360216 26669 solver.cpp:219] Iteration 200 (1338.95 iter/s, 0.0746854s/100 iters), loss = 0.594661
I0428 19:49:06.360263 26669 solver.cpp:238]     Train net output #0: loss = 0.594661 (* 1 = 0.594661 loss)
I0428 19:49:06.360270 26669 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:06.434644 26669 solver.cpp:219] Iteration 300 (1344.61 iter/s, 0.0743711s/100 iters), loss = 0.584549
I0428 19:49:06.434684 26669 solver.cpp:238]     Train net output #0: loss = 0.584549 (* 1 = 0.584549 loss)
I0428 19:49:06.434690 26669 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:06.507181 26669 solver.cpp:219] Iteration 400 (1379.52 iter/s, 0.0724889s/100 iters), loss = 0.832934
I0428 19:49:06.507220 26669 solver.cpp:238]     Train net output #0: loss = 0.832934 (* 1 = 0.832934 loss)
I0428 19:49:06.507226 26669 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:06.575942 26669 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:06.620260 26676 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:06.620751 26669 solver.cpp:398]     Test net output #0: accuracy = 0.8416
I0428 19:49:06.620785 26669 solver.cpp:398]     Test net output #1: loss = 0.454546 (* 1 = 0.454546 loss)
I0428 19:49:06.621628 26669 solver.cpp:219] Iteration 500 (874.054 iter/s, 0.114409s/100 iters), loss = 0.611039
I0428 19:49:06.621668 26669 solver.cpp:238]     Train net output #0: loss = 0.611039 (* 1 = 0.611039 loss)
I0428 19:49:06.621690 26669 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:06.716567 26669 solver.cpp:219] Iteration 600 (1053.89 iter/s, 0.0948869s/100 iters), loss = 0.233636
I0428 19:49:06.716604 26669 solver.cpp:238]     Train net output #0: loss = 0.233636 (* 1 = 0.233636 loss)
I0428 19:49:06.716614 26669 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:06.794606 26669 solver.cpp:219] Iteration 700 (1282.15 iter/s, 0.077994s/100 iters), loss = 0.355233
I0428 19:49:06.794636 26669 solver.cpp:238]     Train net output #0: loss = 0.355233 (* 1 = 0.355233 loss)
I0428 19:49:06.794646 26669 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:06.870343 26669 solver.cpp:219] Iteration 800 (1321.05 iter/s, 0.0756972s/100 iters), loss = 0.412243
I0428 19:49:06.870373 26669 solver.cpp:238]     Train net output #0: loss = 0.412243 (* 1 = 0.412243 loss)
I0428 19:49:06.870381 26669 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:06.945487 26669 solver.cpp:219] Iteration 900 (1331.5 iter/s, 0.0751032s/100 iters), loss = 0.294514
I0428 19:49:06.945516 26669 solver.cpp:238]     Train net output #0: loss = 0.294514 (* 1 = 0.294514 loss)
I0428 19:49:06.945524 26669 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:06.970788 26675 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:07.019855 26669 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:07.020570 26669 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:07.021016 26669 solver.cpp:311] Iteration 1000, loss = 0.358711
I0428 19:49:07.021034 26669 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:07.066054 26676 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:07.067224 26669 solver.cpp:398]     Test net output #0: accuracy = 0.8583
I0428 19:49:07.067247 26669 solver.cpp:398]     Test net output #1: loss = 0.37967 (* 1 = 0.37967 loss)
I0428 19:49:07.067263 26669 solver.cpp:316] Optimization Done.
I0428 19:49:07.067270 26669 caffe.cpp:259] Optimization Done.
