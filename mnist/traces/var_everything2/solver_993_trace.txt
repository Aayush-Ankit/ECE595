I0428 20:05:11.794003 30559 caffe.cpp:218] Using GPUs 0
I0428 20:05:11.832064 30559 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:12.366894 30559 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test993.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:12.367033 30559 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test993.prototxt
I0428 20:05:12.367436 30559 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:12.367455 30559 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:12.367552 30559 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:12.367624 30559 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:12.367724 30559 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:12.367748 30559 net.cpp:86] Creating Layer mnist
I0428 20:05:12.367755 30559 net.cpp:382] mnist -> data
I0428 20:05:12.367779 30559 net.cpp:382] mnist -> label
I0428 20:05:12.368882 30559 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:12.371539 30559 net.cpp:124] Setting up mnist
I0428 20:05:12.371562 30559 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:12.371569 30559 net.cpp:131] Top shape: 64 (64)
I0428 20:05:12.371572 30559 net.cpp:139] Memory required for data: 200960
I0428 20:05:12.371579 30559 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:12.371598 30559 net.cpp:86] Creating Layer conv0
I0428 20:05:12.371618 30559 net.cpp:408] conv0 <- data
I0428 20:05:12.371631 30559 net.cpp:382] conv0 -> conv0
I0428 20:05:12.663130 30559 net.cpp:124] Setting up conv0
I0428 20:05:12.663157 30559 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:12.663162 30559 net.cpp:139] Memory required for data: 3887360
I0428 20:05:12.663178 30559 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:12.663193 30559 net.cpp:86] Creating Layer pool0
I0428 20:05:12.663198 30559 net.cpp:408] pool0 <- conv0
I0428 20:05:12.663204 30559 net.cpp:382] pool0 -> pool0
I0428 20:05:12.663254 30559 net.cpp:124] Setting up pool0
I0428 20:05:12.663260 30559 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:12.663264 30559 net.cpp:139] Memory required for data: 4808960
I0428 20:05:12.663266 30559 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:12.663280 30559 net.cpp:86] Creating Layer conv1
I0428 20:05:12.663282 30559 net.cpp:408] conv1 <- pool0
I0428 20:05:12.663287 30559 net.cpp:382] conv1 -> conv1
I0428 20:05:12.666087 30559 net.cpp:124] Setting up conv1
I0428 20:05:12.666103 30559 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:12.666107 30559 net.cpp:139] Memory required for data: 4841728
I0428 20:05:12.666116 30559 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:12.666126 30559 net.cpp:86] Creating Layer pool1
I0428 20:05:12.666129 30559 net.cpp:408] pool1 <- conv1
I0428 20:05:12.666134 30559 net.cpp:382] pool1 -> pool1
I0428 20:05:12.666172 30559 net.cpp:124] Setting up pool1
I0428 20:05:12.666177 30559 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:12.666180 30559 net.cpp:139] Memory required for data: 4849920
I0428 20:05:12.666183 30559 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:12.666195 30559 net.cpp:86] Creating Layer ip1
I0428 20:05:12.666198 30559 net.cpp:408] ip1 <- pool1
I0428 20:05:12.666203 30559 net.cpp:382] ip1 -> ip1
I0428 20:05:12.666301 30559 net.cpp:124] Setting up ip1
I0428 20:05:12.666309 30559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:12.666313 30559 net.cpp:139] Memory required for data: 4852480
I0428 20:05:12.666321 30559 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:12.666326 30559 net.cpp:86] Creating Layer relu1
I0428 20:05:12.666329 30559 net.cpp:408] relu1 <- ip1
I0428 20:05:12.666334 30559 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:12.666507 30559 net.cpp:124] Setting up relu1
I0428 20:05:12.666515 30559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:12.666518 30559 net.cpp:139] Memory required for data: 4855040
I0428 20:05:12.666522 30559 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:12.666528 30559 net.cpp:86] Creating Layer ip2
I0428 20:05:12.666532 30559 net.cpp:408] ip2 <- ip1
I0428 20:05:12.666537 30559 net.cpp:382] ip2 -> ip2
I0428 20:05:12.666640 30559 net.cpp:124] Setting up ip2
I0428 20:05:12.666648 30559 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:12.666651 30559 net.cpp:139] Memory required for data: 4867840
I0428 20:05:12.666657 30559 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:12.666662 30559 net.cpp:86] Creating Layer relu2
I0428 20:05:12.666666 30559 net.cpp:408] relu2 <- ip2
I0428 20:05:12.666671 30559 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:12.667418 30559 net.cpp:124] Setting up relu2
I0428 20:05:12.667431 30559 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:12.667436 30559 net.cpp:139] Memory required for data: 4880640
I0428 20:05:12.667440 30559 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:12.667448 30559 net.cpp:86] Creating Layer ip3
I0428 20:05:12.667451 30559 net.cpp:408] ip3 <- ip2
I0428 20:05:12.667457 30559 net.cpp:382] ip3 -> ip3
I0428 20:05:12.667564 30559 net.cpp:124] Setting up ip3
I0428 20:05:12.667573 30559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:12.667577 30559 net.cpp:139] Memory required for data: 4883200
I0428 20:05:12.667584 30559 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:12.667590 30559 net.cpp:86] Creating Layer relu3
I0428 20:05:12.667593 30559 net.cpp:408] relu3 <- ip3
I0428 20:05:12.667598 30559 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:12.667771 30559 net.cpp:124] Setting up relu3
I0428 20:05:12.667780 30559 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:12.667783 30559 net.cpp:139] Memory required for data: 4885760
I0428 20:05:12.667788 30559 layer_factory.hpp:77] Creating layer loss
I0428 20:05:12.667793 30559 net.cpp:86] Creating Layer loss
I0428 20:05:12.667796 30559 net.cpp:408] loss <- ip3
I0428 20:05:12.667800 30559 net.cpp:408] loss <- label
I0428 20:05:12.667806 30559 net.cpp:382] loss -> loss
I0428 20:05:12.667824 30559 layer_factory.hpp:77] Creating layer loss
I0428 20:05:12.668051 30559 net.cpp:124] Setting up loss
I0428 20:05:12.668061 30559 net.cpp:131] Top shape: (1)
I0428 20:05:12.668066 30559 net.cpp:134]     with loss weight 1
I0428 20:05:12.668079 30559 net.cpp:139] Memory required for data: 4885764
I0428 20:05:12.668082 30559 net.cpp:200] loss needs backward computation.
I0428 20:05:12.668087 30559 net.cpp:200] relu3 needs backward computation.
I0428 20:05:12.668089 30559 net.cpp:200] ip3 needs backward computation.
I0428 20:05:12.668093 30559 net.cpp:200] relu2 needs backward computation.
I0428 20:05:12.668097 30559 net.cpp:200] ip2 needs backward computation.
I0428 20:05:12.668099 30559 net.cpp:200] relu1 needs backward computation.
I0428 20:05:12.668102 30559 net.cpp:200] ip1 needs backward computation.
I0428 20:05:12.668105 30559 net.cpp:200] pool1 needs backward computation.
I0428 20:05:12.668108 30559 net.cpp:200] conv1 needs backward computation.
I0428 20:05:12.668112 30559 net.cpp:200] pool0 needs backward computation.
I0428 20:05:12.668117 30559 net.cpp:200] conv0 needs backward computation.
I0428 20:05:12.668119 30559 net.cpp:202] mnist does not need backward computation.
I0428 20:05:12.668123 30559 net.cpp:244] This network produces output loss
I0428 20:05:12.668133 30559 net.cpp:257] Network initialization done.
I0428 20:05:12.668473 30559 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test993.prototxt
I0428 20:05:12.668501 30559 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:12.668597 30559 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:12.668678 30559 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:12.668725 30559 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:12.668740 30559 net.cpp:86] Creating Layer mnist
I0428 20:05:12.668743 30559 net.cpp:382] mnist -> data
I0428 20:05:12.668751 30559 net.cpp:382] mnist -> label
I0428 20:05:12.668848 30559 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:12.670779 30559 net.cpp:124] Setting up mnist
I0428 20:05:12.670794 30559 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:12.670799 30559 net.cpp:131] Top shape: 100 (100)
I0428 20:05:12.670802 30559 net.cpp:139] Memory required for data: 314000
I0428 20:05:12.670806 30559 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:12.670816 30559 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:12.670820 30559 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:12.670827 30559 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:12.670835 30559 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:12.670941 30559 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:12.670949 30559 net.cpp:131] Top shape: 100 (100)
I0428 20:05:12.670953 30559 net.cpp:131] Top shape: 100 (100)
I0428 20:05:12.670956 30559 net.cpp:139] Memory required for data: 314800
I0428 20:05:12.670959 30559 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:12.670969 30559 net.cpp:86] Creating Layer conv0
I0428 20:05:12.670972 30559 net.cpp:408] conv0 <- data
I0428 20:05:12.670977 30559 net.cpp:382] conv0 -> conv0
I0428 20:05:12.672577 30559 net.cpp:124] Setting up conv0
I0428 20:05:12.672591 30559 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:12.672595 30559 net.cpp:139] Memory required for data: 6074800
I0428 20:05:12.672605 30559 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:12.672610 30559 net.cpp:86] Creating Layer pool0
I0428 20:05:12.672615 30559 net.cpp:408] pool0 <- conv0
I0428 20:05:12.672619 30559 net.cpp:382] pool0 -> pool0
I0428 20:05:12.672654 30559 net.cpp:124] Setting up pool0
I0428 20:05:12.672660 30559 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:12.672663 30559 net.cpp:139] Memory required for data: 7514800
I0428 20:05:12.672667 30559 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:12.672674 30559 net.cpp:86] Creating Layer conv1
I0428 20:05:12.672677 30559 net.cpp:408] conv1 <- pool0
I0428 20:05:12.672683 30559 net.cpp:382] conv1 -> conv1
I0428 20:05:12.674664 30559 net.cpp:124] Setting up conv1
I0428 20:05:12.674679 30559 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:12.674684 30559 net.cpp:139] Memory required for data: 7566000
I0428 20:05:12.674692 30559 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:12.674698 30559 net.cpp:86] Creating Layer pool1
I0428 20:05:12.674702 30559 net.cpp:408] pool1 <- conv1
I0428 20:05:12.674707 30559 net.cpp:382] pool1 -> pool1
I0428 20:05:12.674746 30559 net.cpp:124] Setting up pool1
I0428 20:05:12.674751 30559 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:12.674754 30559 net.cpp:139] Memory required for data: 7578800
I0428 20:05:12.674757 30559 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:12.674762 30559 net.cpp:86] Creating Layer ip1
I0428 20:05:12.674765 30559 net.cpp:408] ip1 <- pool1
I0428 20:05:12.674770 30559 net.cpp:382] ip1 -> ip1
I0428 20:05:12.674866 30559 net.cpp:124] Setting up ip1
I0428 20:05:12.674875 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.674887 30559 net.cpp:139] Memory required for data: 7582800
I0428 20:05:12.674896 30559 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:12.674901 30559 net.cpp:86] Creating Layer relu1
I0428 20:05:12.674903 30559 net.cpp:408] relu1 <- ip1
I0428 20:05:12.674908 30559 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:12.675101 30559 net.cpp:124] Setting up relu1
I0428 20:05:12.675108 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.675112 30559 net.cpp:139] Memory required for data: 7586800
I0428 20:05:12.675115 30559 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:12.675122 30559 net.cpp:86] Creating Layer ip2
I0428 20:05:12.675125 30559 net.cpp:408] ip2 <- ip1
I0428 20:05:12.675130 30559 net.cpp:382] ip2 -> ip2
I0428 20:05:12.675248 30559 net.cpp:124] Setting up ip2
I0428 20:05:12.675256 30559 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:12.675259 30559 net.cpp:139] Memory required for data: 7606800
I0428 20:05:12.675266 30559 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:12.675271 30559 net.cpp:86] Creating Layer relu2
I0428 20:05:12.675273 30559 net.cpp:408] relu2 <- ip2
I0428 20:05:12.675278 30559 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:12.675426 30559 net.cpp:124] Setting up relu2
I0428 20:05:12.675434 30559 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:12.675437 30559 net.cpp:139] Memory required for data: 7626800
I0428 20:05:12.675441 30559 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:12.675446 30559 net.cpp:86] Creating Layer ip3
I0428 20:05:12.675449 30559 net.cpp:408] ip3 <- ip2
I0428 20:05:12.675454 30559 net.cpp:382] ip3 -> ip3
I0428 20:05:12.675550 30559 net.cpp:124] Setting up ip3
I0428 20:05:12.675557 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.675560 30559 net.cpp:139] Memory required for data: 7630800
I0428 20:05:12.675568 30559 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:12.675573 30559 net.cpp:86] Creating Layer relu3
I0428 20:05:12.675576 30559 net.cpp:408] relu3 <- ip3
I0428 20:05:12.675580 30559 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:12.676355 30559 net.cpp:124] Setting up relu3
I0428 20:05:12.676367 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.676370 30559 net.cpp:139] Memory required for data: 7634800
I0428 20:05:12.676374 30559 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:12.676379 30559 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:12.676383 30559 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:12.676388 30559 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:12.676394 30559 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:12.676447 30559 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:12.676452 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.676456 30559 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:12.676460 30559 net.cpp:139] Memory required for data: 7642800
I0428 20:05:12.676462 30559 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:12.676468 30559 net.cpp:86] Creating Layer accuracy
I0428 20:05:12.676471 30559 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:12.676476 30559 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:12.676481 30559 net.cpp:382] accuracy -> accuracy
I0428 20:05:12.676487 30559 net.cpp:124] Setting up accuracy
I0428 20:05:12.676497 30559 net.cpp:131] Top shape: (1)
I0428 20:05:12.676501 30559 net.cpp:139] Memory required for data: 7642804
I0428 20:05:12.676503 30559 layer_factory.hpp:77] Creating layer loss
I0428 20:05:12.676507 30559 net.cpp:86] Creating Layer loss
I0428 20:05:12.676511 30559 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:12.676514 30559 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:12.676518 30559 net.cpp:382] loss -> loss
I0428 20:05:12.676525 30559 layer_factory.hpp:77] Creating layer loss
I0428 20:05:12.676746 30559 net.cpp:124] Setting up loss
I0428 20:05:12.676755 30559 net.cpp:131] Top shape: (1)
I0428 20:05:12.676759 30559 net.cpp:134]     with loss weight 1
I0428 20:05:12.676765 30559 net.cpp:139] Memory required for data: 7642808
I0428 20:05:12.676779 30559 net.cpp:200] loss needs backward computation.
I0428 20:05:12.676782 30559 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:12.676787 30559 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:12.676790 30559 net.cpp:200] relu3 needs backward computation.
I0428 20:05:12.676793 30559 net.cpp:200] ip3 needs backward computation.
I0428 20:05:12.676797 30559 net.cpp:200] relu2 needs backward computation.
I0428 20:05:12.676800 30559 net.cpp:200] ip2 needs backward computation.
I0428 20:05:12.676803 30559 net.cpp:200] relu1 needs backward computation.
I0428 20:05:12.676806 30559 net.cpp:200] ip1 needs backward computation.
I0428 20:05:12.676815 30559 net.cpp:200] pool1 needs backward computation.
I0428 20:05:12.676818 30559 net.cpp:200] conv1 needs backward computation.
I0428 20:05:12.676822 30559 net.cpp:200] pool0 needs backward computation.
I0428 20:05:12.676826 30559 net.cpp:200] conv0 needs backward computation.
I0428 20:05:12.676851 30559 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:12.676854 30559 net.cpp:202] mnist does not need backward computation.
I0428 20:05:12.676857 30559 net.cpp:244] This network produces output accuracy
I0428 20:05:12.676861 30559 net.cpp:244] This network produces output loss
I0428 20:05:12.676892 30559 net.cpp:257] Network initialization done.
I0428 20:05:12.676945 30559 solver.cpp:56] Solver scaffolding done.
I0428 20:05:12.677316 30559 caffe.cpp:248] Starting Optimization
I0428 20:05:12.677322 30559 solver.cpp:273] Solving LeNet
I0428 20:05:12.677325 30559 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:12.678169 30559 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:12.683125 30559 blocking_queue.cpp:49] Waiting for data
I0428 20:05:12.752785 30566 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:12.753378 30559 solver.cpp:398]     Test net output #0: accuracy = 0.0981
I0428 20:05:12.753415 30559 solver.cpp:398]     Test net output #1: loss = 2.32519 (* 1 = 2.32519 loss)
I0428 20:05:12.756381 30559 solver.cpp:219] Iteration 0 (2.88079 iter/s, 0.0790231s/100 iters), loss = 2.37216
I0428 20:05:12.756418 30559 solver.cpp:238]     Train net output #0: loss = 2.37216 (* 1 = 2.37216 loss)
I0428 20:05:12.756429 30559 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:12.844700 30559 solver.cpp:219] Iteration 100 (1132.67 iter/s, 0.0882872s/100 iters), loss = 1.27546
I0428 20:05:12.844727 30559 solver.cpp:238]     Train net output #0: loss = 1.27546 (* 1 = 1.27546 loss)
I0428 20:05:12.844732 30559 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:12.931295 30559 solver.cpp:219] Iteration 200 (1155.27 iter/s, 0.0865597s/100 iters), loss = 0.866689
I0428 20:05:12.931336 30559 solver.cpp:238]     Train net output #0: loss = 0.866689 (* 1 = 0.866689 loss)
I0428 20:05:12.931344 30559 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:13.018175 30559 solver.cpp:219] Iteration 300 (1151.48 iter/s, 0.0868444s/100 iters), loss = 0.565433
I0428 20:05:13.018216 30559 solver.cpp:238]     Train net output #0: loss = 0.565433 (* 1 = 0.565433 loss)
I0428 20:05:13.018224 30559 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:13.104105 30559 solver.cpp:219] Iteration 400 (1164.42 iter/s, 0.0858798s/100 iters), loss = 0.284982
I0428 20:05:13.104146 30559 solver.cpp:238]     Train net output #0: loss = 0.284982 (* 1 = 0.284982 loss)
I0428 20:05:13.104168 30559 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:13.201375 30559 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:13.255198 30566 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:13.255774 30559 solver.cpp:398]     Test net output #0: accuracy = 0.8938
I0428 20:05:13.255810 30559 solver.cpp:398]     Test net output #1: loss = 0.324937 (* 1 = 0.324937 loss)
I0428 20:05:13.256685 30559 solver.cpp:219] Iteration 500 (655.561 iter/s, 0.152541s/100 iters), loss = 0.185014
I0428 20:05:13.256731 30559 solver.cpp:238]     Train net output #0: loss = 0.185014 (* 1 = 0.185014 loss)
I0428 20:05:13.256752 30559 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:13.354101 30559 solver.cpp:219] Iteration 600 (1027.09 iter/s, 0.0973625s/100 iters), loss = 0.25935
I0428 20:05:13.354157 30559 solver.cpp:238]     Train net output #0: loss = 0.25935 (* 1 = 0.25935 loss)
I0428 20:05:13.354163 30559 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:13.443043 30559 solver.cpp:219] Iteration 700 (1125.16 iter/s, 0.0888761s/100 iters), loss = 0.427359
I0428 20:05:13.443083 30559 solver.cpp:238]     Train net output #0: loss = 0.427359 (* 1 = 0.427359 loss)
I0428 20:05:13.443089 30559 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:13.529477 30559 solver.cpp:219] Iteration 800 (1157.39 iter/s, 0.086401s/100 iters), loss = 0.301896
I0428 20:05:13.529516 30559 solver.cpp:238]     Train net output #0: loss = 0.301896 (* 1 = 0.301896 loss)
I0428 20:05:13.529522 30559 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:13.616308 30559 solver.cpp:219] Iteration 900 (1152.08 iter/s, 0.0867993s/100 iters), loss = 0.231906
I0428 20:05:13.616348 30559 solver.cpp:238]     Train net output #0: loss = 0.231907 (* 1 = 0.231907 loss)
I0428 20:05:13.616354 30559 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:13.645475 30565 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:13.702517 30559 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:13.703243 30559 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:13.703830 30559 solver.cpp:311] Iteration 1000, loss = 0.251448
I0428 20:05:13.703860 30559 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:13.778821 30566 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:13.779399 30559 solver.cpp:398]     Test net output #0: accuracy = 0.9459
I0428 20:05:13.779435 30559 solver.cpp:398]     Test net output #1: loss = 0.177134 (* 1 = 0.177134 loss)
I0428 20:05:13.779440 30559 solver.cpp:316] Optimization Done.
I0428 20:05:13.779443 30559 caffe.cpp:259] Optimization Done.
