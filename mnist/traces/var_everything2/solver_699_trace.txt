I0428 19:53:54.134099 27893 caffe.cpp:218] Using GPUs 0
I0428 19:53:54.161895 27893 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:54.610363 27893 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test699.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:54.610512 27893 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test699.prototxt
I0428 19:53:54.610873 27893 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:54.610905 27893 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:54.610983 27893 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:54.611047 27893 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:54.611126 27893 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:54.611146 27893 net.cpp:86] Creating Layer mnist
I0428 19:53:54.611153 27893 net.cpp:382] mnist -> data
I0428 19:53:54.611173 27893 net.cpp:382] mnist -> label
I0428 19:53:54.612087 27893 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:54.614329 27893 net.cpp:124] Setting up mnist
I0428 19:53:54.614344 27893 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:54.614349 27893 net.cpp:131] Top shape: 64 (64)
I0428 19:53:54.614352 27893 net.cpp:139] Memory required for data: 200960
I0428 19:53:54.614358 27893 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:54.614373 27893 net.cpp:86] Creating Layer conv0
I0428 19:53:54.614390 27893 net.cpp:408] conv0 <- data
I0428 19:53:54.614400 27893 net.cpp:382] conv0 -> conv0
I0428 19:53:54.845705 27893 net.cpp:124] Setting up conv0
I0428 19:53:54.845746 27893 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:54.845749 27893 net.cpp:139] Memory required for data: 938240
I0428 19:53:54.845763 27893 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:54.845775 27893 net.cpp:86] Creating Layer pool0
I0428 19:53:54.845779 27893 net.cpp:408] pool0 <- conv0
I0428 19:53:54.845783 27893 net.cpp:382] pool0 -> pool0
I0428 19:53:54.845849 27893 net.cpp:124] Setting up pool0
I0428 19:53:54.845857 27893 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:54.845860 27893 net.cpp:139] Memory required for data: 1122560
I0428 19:53:54.845863 27893 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:54.845875 27893 net.cpp:86] Creating Layer conv1
I0428 19:53:54.845880 27893 net.cpp:408] conv1 <- pool0
I0428 19:53:54.845901 27893 net.cpp:382] conv1 -> conv1
I0428 19:53:54.848709 27893 net.cpp:124] Setting up conv1
I0428 19:53:54.848738 27893 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:54.848742 27893 net.cpp:139] Memory required for data: 1941760
I0428 19:53:54.848752 27893 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:54.848758 27893 net.cpp:86] Creating Layer pool1
I0428 19:53:54.848762 27893 net.cpp:408] pool1 <- conv1
I0428 19:53:54.848767 27893 net.cpp:382] pool1 -> pool1
I0428 19:53:54.848825 27893 net.cpp:124] Setting up pool1
I0428 19:53:54.848834 27893 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:54.848852 27893 net.cpp:139] Memory required for data: 2146560
I0428 19:53:54.848855 27893 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:54.848866 27893 net.cpp:86] Creating Layer ip1
I0428 19:53:54.848870 27893 net.cpp:408] ip1 <- pool1
I0428 19:53:54.848878 27893 net.cpp:382] ip1 -> ip1
I0428 19:53:54.849300 27893 net.cpp:124] Setting up ip1
I0428 19:53:54.849308 27893 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:54.849325 27893 net.cpp:139] Memory required for data: 2159360
I0428 19:53:54.849334 27893 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:54.849339 27893 net.cpp:86] Creating Layer relu1
I0428 19:53:54.849342 27893 net.cpp:408] relu1 <- ip1
I0428 19:53:54.849362 27893 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:54.849545 27893 net.cpp:124] Setting up relu1
I0428 19:53:54.849553 27893 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:54.849556 27893 net.cpp:139] Memory required for data: 2172160
I0428 19:53:54.849560 27893 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:54.849566 27893 net.cpp:86] Creating Layer ip2
I0428 19:53:54.849570 27893 net.cpp:408] ip2 <- ip1
I0428 19:53:54.849575 27893 net.cpp:382] ip2 -> ip2
I0428 19:53:54.850540 27893 net.cpp:124] Setting up ip2
I0428 19:53:54.850553 27893 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:54.850571 27893 net.cpp:139] Memory required for data: 2184960
I0428 19:53:54.850577 27893 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:54.850584 27893 net.cpp:86] Creating Layer relu2
I0428 19:53:54.850587 27893 net.cpp:408] relu2 <- ip2
I0428 19:53:54.850594 27893 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:54.851366 27893 net.cpp:124] Setting up relu2
I0428 19:53:54.851393 27893 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:53:54.851397 27893 net.cpp:139] Memory required for data: 2197760
I0428 19:53:54.851399 27893 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:54.851423 27893 net.cpp:86] Creating Layer ip3
I0428 19:53:54.851426 27893 net.cpp:408] ip3 <- ip2
I0428 19:53:54.851431 27893 net.cpp:382] ip3 -> ip3
I0428 19:53:54.851538 27893 net.cpp:124] Setting up ip3
I0428 19:53:54.851547 27893 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:54.851548 27893 net.cpp:139] Memory required for data: 2200320
I0428 19:53:54.851557 27893 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:54.851564 27893 net.cpp:86] Creating Layer relu3
I0428 19:53:54.851584 27893 net.cpp:408] relu3 <- ip3
I0428 19:53:54.851588 27893 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:54.851775 27893 net.cpp:124] Setting up relu3
I0428 19:53:54.851785 27893 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:54.851788 27893 net.cpp:139] Memory required for data: 2202880
I0428 19:53:54.851791 27893 layer_factory.hpp:77] Creating layer loss
I0428 19:53:54.851799 27893 net.cpp:86] Creating Layer loss
I0428 19:53:54.851801 27893 net.cpp:408] loss <- ip3
I0428 19:53:54.851805 27893 net.cpp:408] loss <- label
I0428 19:53:54.851810 27893 net.cpp:382] loss -> loss
I0428 19:53:54.851828 27893 layer_factory.hpp:77] Creating layer loss
I0428 19:53:54.852069 27893 net.cpp:124] Setting up loss
I0428 19:53:54.852078 27893 net.cpp:131] Top shape: (1)
I0428 19:53:54.852082 27893 net.cpp:134]     with loss weight 1
I0428 19:53:54.852097 27893 net.cpp:139] Memory required for data: 2202884
I0428 19:53:54.852100 27893 net.cpp:200] loss needs backward computation.
I0428 19:53:54.852103 27893 net.cpp:200] relu3 needs backward computation.
I0428 19:53:54.852107 27893 net.cpp:200] ip3 needs backward computation.
I0428 19:53:54.852109 27893 net.cpp:200] relu2 needs backward computation.
I0428 19:53:54.852111 27893 net.cpp:200] ip2 needs backward computation.
I0428 19:53:54.852114 27893 net.cpp:200] relu1 needs backward computation.
I0428 19:53:54.852118 27893 net.cpp:200] ip1 needs backward computation.
I0428 19:53:54.852121 27893 net.cpp:200] pool1 needs backward computation.
I0428 19:53:54.852124 27893 net.cpp:200] conv1 needs backward computation.
I0428 19:53:54.852126 27893 net.cpp:200] pool0 needs backward computation.
I0428 19:53:54.852129 27893 net.cpp:200] conv0 needs backward computation.
I0428 19:53:54.852133 27893 net.cpp:202] mnist does not need backward computation.
I0428 19:53:54.852135 27893 net.cpp:244] This network produces output loss
I0428 19:53:54.852144 27893 net.cpp:257] Network initialization done.
I0428 19:53:54.852541 27893 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test699.prototxt
I0428 19:53:54.852581 27893 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:54.852669 27893 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:54.852748 27893 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:54.852787 27893 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:54.852804 27893 net.cpp:86] Creating Layer mnist
I0428 19:53:54.852828 27893 net.cpp:382] mnist -> data
I0428 19:53:54.852836 27893 net.cpp:382] mnist -> label
I0428 19:53:54.852955 27893 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:54.854944 27893 net.cpp:124] Setting up mnist
I0428 19:53:54.854957 27893 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:54.854964 27893 net.cpp:131] Top shape: 100 (100)
I0428 19:53:54.854966 27893 net.cpp:139] Memory required for data: 314000
I0428 19:53:54.854969 27893 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:54.854979 27893 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:54.854984 27893 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:54.854990 27893 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:54.854996 27893 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:54.855134 27893 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:54.855140 27893 net.cpp:131] Top shape: 100 (100)
I0428 19:53:54.855144 27893 net.cpp:131] Top shape: 100 (100)
I0428 19:53:54.855147 27893 net.cpp:139] Memory required for data: 314800
I0428 19:53:54.855150 27893 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:54.855176 27893 net.cpp:86] Creating Layer conv0
I0428 19:53:54.855180 27893 net.cpp:408] conv0 <- data
I0428 19:53:54.855185 27893 net.cpp:382] conv0 -> conv0
I0428 19:53:54.857081 27893 net.cpp:124] Setting up conv0
I0428 19:53:54.857096 27893 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:54.857100 27893 net.cpp:139] Memory required for data: 1466800
I0428 19:53:54.857110 27893 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:54.857118 27893 net.cpp:86] Creating Layer pool0
I0428 19:53:54.857121 27893 net.cpp:408] pool0 <- conv0
I0428 19:53:54.857126 27893 net.cpp:382] pool0 -> pool0
I0428 19:53:54.857180 27893 net.cpp:124] Setting up pool0
I0428 19:53:54.857188 27893 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:54.857192 27893 net.cpp:139] Memory required for data: 1754800
I0428 19:53:54.857194 27893 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:54.857203 27893 net.cpp:86] Creating Layer conv1
I0428 19:53:54.857208 27893 net.cpp:408] conv1 <- pool0
I0428 19:53:54.857229 27893 net.cpp:382] conv1 -> conv1
I0428 19:53:54.858877 27893 net.cpp:124] Setting up conv1
I0428 19:53:54.858896 27893 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:54.858911 27893 net.cpp:139] Memory required for data: 3034800
I0428 19:53:54.858921 27893 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:54.858928 27893 net.cpp:86] Creating Layer pool1
I0428 19:53:54.858932 27893 net.cpp:408] pool1 <- conv1
I0428 19:53:54.858938 27893 net.cpp:382] pool1 -> pool1
I0428 19:53:54.858978 27893 net.cpp:124] Setting up pool1
I0428 19:53:54.858985 27893 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:54.858989 27893 net.cpp:139] Memory required for data: 3354800
I0428 19:53:54.858991 27893 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:54.858999 27893 net.cpp:86] Creating Layer ip1
I0428 19:53:54.859002 27893 net.cpp:408] ip1 <- pool1
I0428 19:53:54.859007 27893 net.cpp:382] ip1 -> ip1
I0428 19:53:54.859413 27893 net.cpp:124] Setting up ip1
I0428 19:53:54.859422 27893 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:54.859436 27893 net.cpp:139] Memory required for data: 3374800
I0428 19:53:54.859446 27893 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:54.859469 27893 net.cpp:86] Creating Layer relu1
I0428 19:53:54.859498 27893 net.cpp:408] relu1 <- ip1
I0428 19:53:54.859501 27893 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:54.859699 27893 net.cpp:124] Setting up relu1
I0428 19:53:54.859707 27893 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:54.859711 27893 net.cpp:139] Memory required for data: 3394800
I0428 19:53:54.859714 27893 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:54.859722 27893 net.cpp:86] Creating Layer ip2
I0428 19:53:54.859725 27893 net.cpp:408] ip2 <- ip1
I0428 19:53:54.859731 27893 net.cpp:382] ip2 -> ip2
I0428 19:53:54.859904 27893 net.cpp:124] Setting up ip2
I0428 19:53:54.859912 27893 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:54.859915 27893 net.cpp:139] Memory required for data: 3414800
I0428 19:53:54.859921 27893 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:54.859926 27893 net.cpp:86] Creating Layer relu2
I0428 19:53:54.859930 27893 net.cpp:408] relu2 <- ip2
I0428 19:53:54.859935 27893 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:54.860175 27893 net.cpp:124] Setting up relu2
I0428 19:53:54.860184 27893 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:53:54.860188 27893 net.cpp:139] Memory required for data: 3434800
I0428 19:53:54.860191 27893 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:54.860198 27893 net.cpp:86] Creating Layer ip3
I0428 19:53:54.860200 27893 net.cpp:408] ip3 <- ip2
I0428 19:53:54.860206 27893 net.cpp:382] ip3 -> ip3
I0428 19:53:54.860330 27893 net.cpp:124] Setting up ip3
I0428 19:53:54.860335 27893 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:54.860338 27893 net.cpp:139] Memory required for data: 3438800
I0428 19:53:54.860348 27893 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:54.860353 27893 net.cpp:86] Creating Layer relu3
I0428 19:53:54.860357 27893 net.cpp:408] relu3 <- ip3
I0428 19:53:54.860361 27893 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:54.861264 27893 net.cpp:124] Setting up relu3
I0428 19:53:54.861276 27893 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:54.861280 27893 net.cpp:139] Memory required for data: 3442800
I0428 19:53:54.861284 27893 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:54.861289 27893 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:54.861292 27893 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:54.861299 27893 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:54.861304 27893 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:54.861354 27893 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:54.861361 27893 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:54.861366 27893 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:54.861369 27893 net.cpp:139] Memory required for data: 3450800
I0428 19:53:54.861378 27893 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:54.861384 27893 net.cpp:86] Creating Layer accuracy
I0428 19:53:54.861388 27893 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:54.861392 27893 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:54.861397 27893 net.cpp:382] accuracy -> accuracy
I0428 19:53:54.861404 27893 net.cpp:124] Setting up accuracy
I0428 19:53:54.861408 27893 net.cpp:131] Top shape: (1)
I0428 19:53:54.861418 27893 net.cpp:139] Memory required for data: 3450804
I0428 19:53:54.861421 27893 layer_factory.hpp:77] Creating layer loss
I0428 19:53:54.861426 27893 net.cpp:86] Creating Layer loss
I0428 19:53:54.861430 27893 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:54.861434 27893 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:54.861438 27893 net.cpp:382] loss -> loss
I0428 19:53:54.861443 27893 layer_factory.hpp:77] Creating layer loss
I0428 19:53:54.861685 27893 net.cpp:124] Setting up loss
I0428 19:53:54.861695 27893 net.cpp:131] Top shape: (1)
I0428 19:53:54.861697 27893 net.cpp:134]     with loss weight 1
I0428 19:53:54.861703 27893 net.cpp:139] Memory required for data: 3450808
I0428 19:53:54.861717 27893 net.cpp:200] loss needs backward computation.
I0428 19:53:54.861721 27893 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:54.861724 27893 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:54.861727 27893 net.cpp:200] relu3 needs backward computation.
I0428 19:53:54.861732 27893 net.cpp:200] ip3 needs backward computation.
I0428 19:53:54.861733 27893 net.cpp:200] relu2 needs backward computation.
I0428 19:53:54.861737 27893 net.cpp:200] ip2 needs backward computation.
I0428 19:53:54.861738 27893 net.cpp:200] relu1 needs backward computation.
I0428 19:53:54.861742 27893 net.cpp:200] ip1 needs backward computation.
I0428 19:53:54.861744 27893 net.cpp:200] pool1 needs backward computation.
I0428 19:53:54.861747 27893 net.cpp:200] conv1 needs backward computation.
I0428 19:53:54.861752 27893 net.cpp:200] pool0 needs backward computation.
I0428 19:53:54.861754 27893 net.cpp:200] conv0 needs backward computation.
I0428 19:53:54.861765 27893 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:54.861768 27893 net.cpp:202] mnist does not need backward computation.
I0428 19:53:54.861771 27893 net.cpp:244] This network produces output accuracy
I0428 19:53:54.861774 27893 net.cpp:244] This network produces output loss
I0428 19:53:54.861790 27893 net.cpp:257] Network initialization done.
I0428 19:53:54.861831 27893 solver.cpp:56] Solver scaffolding done.
I0428 19:53:54.862215 27893 caffe.cpp:248] Starting Optimization
I0428 19:53:54.862221 27893 solver.cpp:273] Solving LeNet
I0428 19:53:54.862223 27893 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:54.863029 27893 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:54.867333 27893 blocking_queue.cpp:49] Waiting for data
I0428 19:53:54.938220 27900 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:54.938719 27893 solver.cpp:398]     Test net output #0: accuracy = 0.1628
I0428 19:53:54.938740 27893 solver.cpp:398]     Test net output #1: loss = 2.29773 (* 1 = 2.29773 loss)
I0428 19:53:54.942149 27893 solver.cpp:219] Iteration 0 (-1.16436e-33 iter/s, 0.0799016s/100 iters), loss = 2.28409
I0428 19:53:54.942174 27893 solver.cpp:238]     Train net output #0: loss = 2.28409 (* 1 = 2.28409 loss)
I0428 19:53:54.942203 27893 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:55.047482 27893 solver.cpp:219] Iteration 100 (949.76 iter/s, 0.10529s/100 iters), loss = 0.997531
I0428 19:53:55.047526 27893 solver.cpp:238]     Train net output #0: loss = 0.997531 (* 1 = 0.997531 loss)
I0428 19:53:55.047540 27893 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:55.163923 27893 solver.cpp:219] Iteration 200 (859.203 iter/s, 0.116387s/100 iters), loss = 1.01986
I0428 19:53:55.163956 27893 solver.cpp:238]     Train net output #0: loss = 1.01986 (* 1 = 1.01986 loss)
I0428 19:53:55.163964 27893 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:55.264730 27893 solver.cpp:219] Iteration 300 (992.401 iter/s, 0.100766s/100 iters), loss = 0.980278
I0428 19:53:55.264753 27893 solver.cpp:238]     Train net output #0: loss = 0.980278 (* 1 = 0.980278 loss)
I0428 19:53:55.264760 27893 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:55.368796 27893 solver.cpp:219] Iteration 400 (961.373 iter/s, 0.104018s/100 iters), loss = 0.642118
I0428 19:53:55.368824 27893 solver.cpp:238]     Train net output #0: loss = 0.642118 (* 1 = 0.642118 loss)
I0428 19:53:55.368831 27893 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:55.475941 27893 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:55.528805 27900 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:55.529316 27893 solver.cpp:398]     Test net output #0: accuracy = 0.7732
I0428 19:53:55.529342 27893 solver.cpp:398]     Test net output #1: loss = 0.575391 (* 1 = 0.575391 loss)
I0428 19:53:55.530447 27893 solver.cpp:219] Iteration 500 (618.782 iter/s, 0.161608s/100 iters), loss = 0.377389
I0428 19:53:55.530501 27893 solver.cpp:238]     Train net output #0: loss = 0.377389 (* 1 = 0.377389 loss)
I0428 19:53:55.530514 27893 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:55.640733 27893 solver.cpp:219] Iteration 600 (907.24 iter/s, 0.110224s/100 iters), loss = 0.542928
I0428 19:53:55.640775 27893 solver.cpp:238]     Train net output #0: loss = 0.542928 (* 1 = 0.542928 loss)
I0428 19:53:55.640781 27893 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:55.750833 27893 solver.cpp:219] Iteration 700 (908.565 iter/s, 0.110064s/100 iters), loss = 0.81189
I0428 19:53:55.750875 27893 solver.cpp:238]     Train net output #0: loss = 0.81189 (* 1 = 0.81189 loss)
I0428 19:53:55.750881 27893 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:55.855617 27893 solver.cpp:219] Iteration 800 (954.823 iter/s, 0.104731s/100 iters), loss = 0.70064
I0428 19:53:55.855656 27893 solver.cpp:238]     Train net output #0: loss = 0.70064 (* 1 = 0.70064 loss)
I0428 19:53:55.855664 27893 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:55.962164 27893 solver.cpp:219] Iteration 900 (938.849 iter/s, 0.106513s/100 iters), loss = 0.474976
I0428 19:53:55.962205 27893 solver.cpp:238]     Train net output #0: loss = 0.474976 (* 1 = 0.474976 loss)
I0428 19:53:55.962211 27893 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:55.998587 27899 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:56.066573 27893 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:56.068271 27893 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:56.069102 27893 solver.cpp:311] Iteration 1000, loss = 0.373255
I0428 19:53:56.069115 27893 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:56.122257 27900 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:56.122756 27893 solver.cpp:398]     Test net output #0: accuracy = 0.8744
I0428 19:53:56.122773 27893 solver.cpp:398]     Test net output #1: loss = 0.330206 (* 1 = 0.330206 loss)
I0428 19:53:56.122777 27893 solver.cpp:316] Optimization Done.
I0428 19:53:56.122781 27893 caffe.cpp:259] Optimization Done.
