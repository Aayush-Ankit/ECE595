I0428 19:52:07.560575 27443 caffe.cpp:218] Using GPUs 0
I0428 19:52:07.589931 27443 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:52:08.042403 27443 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test653.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:52:08.042556 27443 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test653.prototxt
I0428 19:52:08.042908 27443 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:52:08.042938 27443 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:52:08.043018 27443 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:08.043094 27443 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:08.043177 27443 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:52:08.043196 27443 net.cpp:86] Creating Layer mnist
I0428 19:52:08.043202 27443 net.cpp:382] mnist -> data
I0428 19:52:08.043220 27443 net.cpp:382] mnist -> label
I0428 19:52:08.044158 27443 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:52:08.046599 27443 net.cpp:124] Setting up mnist
I0428 19:52:08.046630 27443 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:52:08.046635 27443 net.cpp:131] Top shape: 64 (64)
I0428 19:52:08.046638 27443 net.cpp:139] Memory required for data: 200960
I0428 19:52:08.046644 27443 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:08.046658 27443 net.cpp:86] Creating Layer conv0
I0428 19:52:08.046674 27443 net.cpp:408] conv0 <- data
I0428 19:52:08.046684 27443 net.cpp:382] conv0 -> conv0
I0428 19:52:08.275524 27443 net.cpp:124] Setting up conv0
I0428 19:52:08.275565 27443 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:52:08.275570 27443 net.cpp:139] Memory required for data: 938240
I0428 19:52:08.275584 27443 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:08.275596 27443 net.cpp:86] Creating Layer pool0
I0428 19:52:08.275615 27443 net.cpp:408] pool0 <- conv0
I0428 19:52:08.275620 27443 net.cpp:382] pool0 -> pool0
I0428 19:52:08.275666 27443 net.cpp:124] Setting up pool0
I0428 19:52:08.275673 27443 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:52:08.275676 27443 net.cpp:139] Memory required for data: 1122560
I0428 19:52:08.275679 27443 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:08.275691 27443 net.cpp:86] Creating Layer conv1
I0428 19:52:08.275693 27443 net.cpp:408] conv1 <- pool0
I0428 19:52:08.275698 27443 net.cpp:382] conv1 -> conv1
I0428 19:52:08.278426 27443 net.cpp:124] Setting up conv1
I0428 19:52:08.278440 27443 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:52:08.278445 27443 net.cpp:139] Memory required for data: 1532160
I0428 19:52:08.278455 27443 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:08.278461 27443 net.cpp:86] Creating Layer pool1
I0428 19:52:08.278465 27443 net.cpp:408] pool1 <- conv1
I0428 19:52:08.278486 27443 net.cpp:382] pool1 -> pool1
I0428 19:52:08.278522 27443 net.cpp:124] Setting up pool1
I0428 19:52:08.278527 27443 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:52:08.278529 27443 net.cpp:139] Memory required for data: 1634560
I0428 19:52:08.278532 27443 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:08.278539 27443 net.cpp:86] Creating Layer ip1
I0428 19:52:08.278542 27443 net.cpp:408] ip1 <- pool1
I0428 19:52:08.278547 27443 net.cpp:382] ip1 -> ip1
I0428 19:52:08.279525 27443 net.cpp:124] Setting up ip1
I0428 19:52:08.279537 27443 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:08.279556 27443 net.cpp:139] Memory required for data: 1640960
I0428 19:52:08.279579 27443 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:08.279585 27443 net.cpp:86] Creating Layer relu1
I0428 19:52:08.279589 27443 net.cpp:408] relu1 <- ip1
I0428 19:52:08.279593 27443 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:08.279769 27443 net.cpp:124] Setting up relu1
I0428 19:52:08.279779 27443 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:08.279783 27443 net.cpp:139] Memory required for data: 1647360
I0428 19:52:08.279785 27443 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:08.279791 27443 net.cpp:86] Creating Layer ip2
I0428 19:52:08.279794 27443 net.cpp:408] ip2 <- ip1
I0428 19:52:08.279799 27443 net.cpp:382] ip2 -> ip2
I0428 19:52:08.279904 27443 net.cpp:124] Setting up ip2
I0428 19:52:08.279927 27443 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:52:08.279930 27443 net.cpp:139] Memory required for data: 1660160
I0428 19:52:08.279935 27443 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:08.279943 27443 net.cpp:86] Creating Layer relu2
I0428 19:52:08.279947 27443 net.cpp:408] relu2 <- ip2
I0428 19:52:08.279950 27443 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:08.280699 27443 net.cpp:124] Setting up relu2
I0428 19:52:08.280710 27443 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:52:08.280714 27443 net.cpp:139] Memory required for data: 1672960
I0428 19:52:08.280716 27443 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:08.280724 27443 net.cpp:86] Creating Layer ip3
I0428 19:52:08.280726 27443 net.cpp:408] ip3 <- ip2
I0428 19:52:08.280732 27443 net.cpp:382] ip3 -> ip3
I0428 19:52:08.280858 27443 net.cpp:124] Setting up ip3
I0428 19:52:08.280884 27443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:08.280886 27443 net.cpp:139] Memory required for data: 1675520
I0428 19:52:08.280894 27443 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:08.280900 27443 net.cpp:86] Creating Layer relu3
I0428 19:52:08.280903 27443 net.cpp:408] relu3 <- ip3
I0428 19:52:08.280908 27443 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:08.281086 27443 net.cpp:124] Setting up relu3
I0428 19:52:08.281095 27443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:08.281098 27443 net.cpp:139] Memory required for data: 1678080
I0428 19:52:08.281101 27443 layer_factory.hpp:77] Creating layer loss
I0428 19:52:08.281108 27443 net.cpp:86] Creating Layer loss
I0428 19:52:08.281111 27443 net.cpp:408] loss <- ip3
I0428 19:52:08.281116 27443 net.cpp:408] loss <- label
I0428 19:52:08.281121 27443 net.cpp:382] loss -> loss
I0428 19:52:08.281137 27443 layer_factory.hpp:77] Creating layer loss
I0428 19:52:08.281401 27443 net.cpp:124] Setting up loss
I0428 19:52:08.281409 27443 net.cpp:131] Top shape: (1)
I0428 19:52:08.281412 27443 net.cpp:134]     with loss weight 1
I0428 19:52:08.281430 27443 net.cpp:139] Memory required for data: 1678084
I0428 19:52:08.281432 27443 net.cpp:200] loss needs backward computation.
I0428 19:52:08.281436 27443 net.cpp:200] relu3 needs backward computation.
I0428 19:52:08.281438 27443 net.cpp:200] ip3 needs backward computation.
I0428 19:52:08.281441 27443 net.cpp:200] relu2 needs backward computation.
I0428 19:52:08.281443 27443 net.cpp:200] ip2 needs backward computation.
I0428 19:52:08.281446 27443 net.cpp:200] relu1 needs backward computation.
I0428 19:52:08.281448 27443 net.cpp:200] ip1 needs backward computation.
I0428 19:52:08.281451 27443 net.cpp:200] pool1 needs backward computation.
I0428 19:52:08.281455 27443 net.cpp:200] conv1 needs backward computation.
I0428 19:52:08.281457 27443 net.cpp:200] pool0 needs backward computation.
I0428 19:52:08.281460 27443 net.cpp:200] conv0 needs backward computation.
I0428 19:52:08.281462 27443 net.cpp:202] mnist does not need backward computation.
I0428 19:52:08.281466 27443 net.cpp:244] This network produces output loss
I0428 19:52:08.281476 27443 net.cpp:257] Network initialization done.
I0428 19:52:08.281783 27443 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test653.prototxt
I0428 19:52:08.281810 27443 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:52:08.281915 27443 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:08.281992 27443 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:08.282037 27443 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:52:08.282048 27443 net.cpp:86] Creating Layer mnist
I0428 19:52:08.282053 27443 net.cpp:382] mnist -> data
I0428 19:52:08.282078 27443 net.cpp:382] mnist -> label
I0428 19:52:08.282163 27443 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:52:08.284119 27443 net.cpp:124] Setting up mnist
I0428 19:52:08.284132 27443 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:52:08.284137 27443 net.cpp:131] Top shape: 100 (100)
I0428 19:52:08.284139 27443 net.cpp:139] Memory required for data: 314000
I0428 19:52:08.284143 27443 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:52:08.284163 27443 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:52:08.284168 27443 net.cpp:408] label_mnist_1_split <- label
I0428 19:52:08.284171 27443 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:52:08.284179 27443 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:52:08.284301 27443 net.cpp:124] Setting up label_mnist_1_split
I0428 19:52:08.284308 27443 net.cpp:131] Top shape: 100 (100)
I0428 19:52:08.284312 27443 net.cpp:131] Top shape: 100 (100)
I0428 19:52:08.284314 27443 net.cpp:139] Memory required for data: 314800
I0428 19:52:08.284317 27443 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:08.284327 27443 net.cpp:86] Creating Layer conv0
I0428 19:52:08.284330 27443 net.cpp:408] conv0 <- data
I0428 19:52:08.284346 27443 net.cpp:382] conv0 -> conv0
I0428 19:52:08.285990 27443 net.cpp:124] Setting up conv0
I0428 19:52:08.286005 27443 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:52:08.286008 27443 net.cpp:139] Memory required for data: 1466800
I0428 19:52:08.286016 27443 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:08.286037 27443 net.cpp:86] Creating Layer pool0
I0428 19:52:08.286041 27443 net.cpp:408] pool0 <- conv0
I0428 19:52:08.286044 27443 net.cpp:382] pool0 -> pool0
I0428 19:52:08.286095 27443 net.cpp:124] Setting up pool0
I0428 19:52:08.286103 27443 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:52:08.286104 27443 net.cpp:139] Memory required for data: 1754800
I0428 19:52:08.286108 27443 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:08.286118 27443 net.cpp:86] Creating Layer conv1
I0428 19:52:08.286121 27443 net.cpp:408] conv1 <- pool0
I0428 19:52:08.286126 27443 net.cpp:382] conv1 -> conv1
I0428 19:52:08.288367 27443 net.cpp:124] Setting up conv1
I0428 19:52:08.288379 27443 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:52:08.288383 27443 net.cpp:139] Memory required for data: 2394800
I0428 19:52:08.288390 27443 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:08.288414 27443 net.cpp:86] Creating Layer pool1
I0428 19:52:08.288417 27443 net.cpp:408] pool1 <- conv1
I0428 19:52:08.288436 27443 net.cpp:382] pool1 -> pool1
I0428 19:52:08.288478 27443 net.cpp:124] Setting up pool1
I0428 19:52:08.288486 27443 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:52:08.288487 27443 net.cpp:139] Memory required for data: 2554800
I0428 19:52:08.288491 27443 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:08.288496 27443 net.cpp:86] Creating Layer ip1
I0428 19:52:08.288499 27443 net.cpp:408] ip1 <- pool1
I0428 19:52:08.288504 27443 net.cpp:382] ip1 -> ip1
I0428 19:52:08.288683 27443 net.cpp:124] Setting up ip1
I0428 19:52:08.288691 27443 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:08.288704 27443 net.cpp:139] Memory required for data: 2564800
I0428 19:52:08.288728 27443 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:08.288734 27443 net.cpp:86] Creating Layer relu1
I0428 19:52:08.288748 27443 net.cpp:408] relu1 <- ip1
I0428 19:52:08.288754 27443 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:08.288954 27443 net.cpp:124] Setting up relu1
I0428 19:52:08.288964 27443 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:08.288966 27443 net.cpp:139] Memory required for data: 2574800
I0428 19:52:08.288970 27443 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:08.288978 27443 net.cpp:86] Creating Layer ip2
I0428 19:52:08.288983 27443 net.cpp:408] ip2 <- ip1
I0428 19:52:08.288990 27443 net.cpp:382] ip2 -> ip2
I0428 19:52:08.289125 27443 net.cpp:124] Setting up ip2
I0428 19:52:08.289132 27443 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:52:08.289136 27443 net.cpp:139] Memory required for data: 2594800
I0428 19:52:08.289146 27443 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:08.289167 27443 net.cpp:86] Creating Layer relu2
I0428 19:52:08.289170 27443 net.cpp:408] relu2 <- ip2
I0428 19:52:08.289175 27443 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:08.289363 27443 net.cpp:124] Setting up relu2
I0428 19:52:08.289371 27443 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:52:08.289376 27443 net.cpp:139] Memory required for data: 2614800
I0428 19:52:08.289378 27443 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:08.289384 27443 net.cpp:86] Creating Layer ip3
I0428 19:52:08.289387 27443 net.cpp:408] ip3 <- ip2
I0428 19:52:08.289391 27443 net.cpp:382] ip3 -> ip3
I0428 19:52:08.289551 27443 net.cpp:124] Setting up ip3
I0428 19:52:08.289559 27443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:08.289562 27443 net.cpp:139] Memory required for data: 2618800
I0428 19:52:08.289571 27443 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:08.289575 27443 net.cpp:86] Creating Layer relu3
I0428 19:52:08.289578 27443 net.cpp:408] relu3 <- ip3
I0428 19:52:08.289582 27443 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:08.290400 27443 net.cpp:124] Setting up relu3
I0428 19:52:08.290411 27443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:08.290415 27443 net.cpp:139] Memory required for data: 2622800
I0428 19:52:08.290417 27443 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:52:08.290422 27443 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:52:08.290426 27443 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:52:08.290431 27443 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:52:08.290438 27443 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:52:08.290475 27443 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:52:08.290482 27443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:08.290485 27443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:08.290488 27443 net.cpp:139] Memory required for data: 2630800
I0428 19:52:08.290490 27443 layer_factory.hpp:77] Creating layer accuracy
I0428 19:52:08.290496 27443 net.cpp:86] Creating Layer accuracy
I0428 19:52:08.290499 27443 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:52:08.290503 27443 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:52:08.290508 27443 net.cpp:382] accuracy -> accuracy
I0428 19:52:08.290514 27443 net.cpp:124] Setting up accuracy
I0428 19:52:08.290518 27443 net.cpp:131] Top shape: (1)
I0428 19:52:08.290520 27443 net.cpp:139] Memory required for data: 2630804
I0428 19:52:08.290524 27443 layer_factory.hpp:77] Creating layer loss
I0428 19:52:08.290529 27443 net.cpp:86] Creating Layer loss
I0428 19:52:08.290532 27443 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:52:08.290535 27443 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:52:08.290539 27443 net.cpp:382] loss -> loss
I0428 19:52:08.290545 27443 layer_factory.hpp:77] Creating layer loss
I0428 19:52:08.290828 27443 net.cpp:124] Setting up loss
I0428 19:52:08.290838 27443 net.cpp:131] Top shape: (1)
I0428 19:52:08.290841 27443 net.cpp:134]     with loss weight 1
I0428 19:52:08.290848 27443 net.cpp:139] Memory required for data: 2630808
I0428 19:52:08.290863 27443 net.cpp:200] loss needs backward computation.
I0428 19:52:08.290866 27443 net.cpp:202] accuracy does not need backward computation.
I0428 19:52:08.290870 27443 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:52:08.290874 27443 net.cpp:200] relu3 needs backward computation.
I0428 19:52:08.290875 27443 net.cpp:200] ip3 needs backward computation.
I0428 19:52:08.290879 27443 net.cpp:200] relu2 needs backward computation.
I0428 19:52:08.290881 27443 net.cpp:200] ip2 needs backward computation.
I0428 19:52:08.290884 27443 net.cpp:200] relu1 needs backward computation.
I0428 19:52:08.290886 27443 net.cpp:200] ip1 needs backward computation.
I0428 19:52:08.290889 27443 net.cpp:200] pool1 needs backward computation.
I0428 19:52:08.290892 27443 net.cpp:200] conv1 needs backward computation.
I0428 19:52:08.290895 27443 net.cpp:200] pool0 needs backward computation.
I0428 19:52:08.290899 27443 net.cpp:200] conv0 needs backward computation.
I0428 19:52:08.290902 27443 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:52:08.290905 27443 net.cpp:202] mnist does not need backward computation.
I0428 19:52:08.290910 27443 net.cpp:244] This network produces output accuracy
I0428 19:52:08.290913 27443 net.cpp:244] This network produces output loss
I0428 19:52:08.290923 27443 net.cpp:257] Network initialization done.
I0428 19:52:08.290966 27443 solver.cpp:56] Solver scaffolding done.
I0428 19:52:08.291323 27443 caffe.cpp:248] Starting Optimization
I0428 19:52:08.291329 27443 solver.cpp:273] Solving LeNet
I0428 19:52:08.291332 27443 solver.cpp:274] Learning Rate Policy: inv
I0428 19:52:08.292127 27443 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:52:08.295897 27443 blocking_queue.cpp:49] Waiting for data
I0428 19:52:08.349725 27450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:08.350239 27443 solver.cpp:398]     Test net output #0: accuracy = 0.1125
I0428 19:52:08.350260 27443 solver.cpp:398]     Test net output #1: loss = 2.3304 (* 1 = 2.3304 loss)
I0428 19:52:08.352120 27443 solver.cpp:219] Iteration 0 (0 iter/s, 0.0607508s/100 iters), loss = 2.3402
I0428 19:52:08.352144 27443 solver.cpp:238]     Train net output #0: loss = 2.3402 (* 1 = 2.3402 loss)
I0428 19:52:08.352161 27443 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:52:08.435350 27443 solver.cpp:219] Iteration 100 (1202 iter/s, 0.0831949s/100 iters), loss = 1.46099
I0428 19:52:08.435375 27443 solver.cpp:238]     Train net output #0: loss = 1.46099 (* 1 = 1.46099 loss)
I0428 19:52:08.435397 27443 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:52:08.518592 27443 solver.cpp:219] Iteration 200 (1201.85 iter/s, 0.0832051s/100 iters), loss = 0.837643
I0428 19:52:08.518616 27443 solver.cpp:238]     Train net output #0: loss = 0.837643 (* 1 = 0.837643 loss)
I0428 19:52:08.518638 27443 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:52:08.602160 27443 solver.cpp:219] Iteration 300 (1197.12 iter/s, 0.0835338s/100 iters), loss = 0.420869
I0428 19:52:08.602185 27443 solver.cpp:238]     Train net output #0: loss = 0.420869 (* 1 = 0.420869 loss)
I0428 19:52:08.602206 27443 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:52:08.685310 27443 solver.cpp:219] Iteration 400 (1203.12 iter/s, 0.0831171s/100 iters), loss = 0.498049
I0428 19:52:08.685334 27443 solver.cpp:238]     Train net output #0: loss = 0.498049 (* 1 = 0.498049 loss)
I0428 19:52:08.685356 27443 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:52:08.767966 27443 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:52:08.819170 27450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:08.819712 27443 solver.cpp:398]     Test net output #0: accuracy = 0.8504
I0428 19:52:08.819731 27443 solver.cpp:398]     Test net output #1: loss = 0.412027 (* 1 = 0.412027 loss)
I0428 19:52:08.820629 27443 solver.cpp:219] Iteration 500 (739.187 iter/s, 0.135284s/100 iters), loss = 0.395041
I0428 19:52:08.820690 27443 solver.cpp:238]     Train net output #0: loss = 0.395041 (* 1 = 0.395041 loss)
I0428 19:52:08.820713 27443 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:52:08.915716 27443 solver.cpp:219] Iteration 600 (1052.44 iter/s, 0.0950169s/100 iters), loss = 0.452408
I0428 19:52:08.915760 27443 solver.cpp:238]     Train net output #0: loss = 0.452409 (* 1 = 0.452409 loss)
I0428 19:52:08.915767 27443 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:52:08.999960 27443 solver.cpp:219] Iteration 700 (1187.54 iter/s, 0.0842076s/100 iters), loss = 0.363474
I0428 19:52:09.000000 27443 solver.cpp:238]     Train net output #0: loss = 0.363475 (* 1 = 0.363475 loss)
I0428 19:52:09.000007 27443 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:52:09.083235 27443 solver.cpp:219] Iteration 800 (1201.32 iter/s, 0.083242s/100 iters), loss = 0.613176
I0428 19:52:09.083274 27443 solver.cpp:238]     Train net output #0: loss = 0.613176 (* 1 = 0.613176 loss)
I0428 19:52:09.083281 27443 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:52:09.166728 27443 solver.cpp:219] Iteration 900 (1198.4 iter/s, 0.0834447s/100 iters), loss = 0.697547
I0428 19:52:09.166769 27443 solver.cpp:238]     Train net output #0: loss = 0.697547 (* 1 = 0.697547 loss)
I0428 19:52:09.166790 27443 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:52:09.194804 27449 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:09.249550 27443 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:52:09.250542 27443 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:52:09.251085 27443 solver.cpp:311] Iteration 1000, loss = 0.408747
I0428 19:52:09.251117 27443 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:52:09.303598 27450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:09.304122 27443 solver.cpp:398]     Test net output #0: accuracy = 0.8694
I0428 19:52:09.304141 27443 solver.cpp:398]     Test net output #1: loss = 0.339461 (* 1 = 0.339461 loss)
I0428 19:52:09.304147 27443 solver.cpp:316] Optimization Done.
I0428 19:52:09.304150 27443 caffe.cpp:259] Optimization Done.
