I0428 20:02:55.029800 30080 caffe.cpp:218] Using GPUs 0
I0428 20:02:55.062690 30080 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:55.504284 30080 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test940.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:55.504427 30080 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test940.prototxt
I0428 20:02:55.504748 30080 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:55.504762 30080 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:55.504856 30080 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:02:55.504917 30080 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:55.504997 30080 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:55.505017 30080 net.cpp:86] Creating Layer mnist
I0428 20:02:55.505023 30080 net.cpp:382] mnist -> data
I0428 20:02:55.505041 30080 net.cpp:382] mnist -> label
I0428 20:02:55.506094 30080 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:55.508337 30080 net.cpp:124] Setting up mnist
I0428 20:02:55.508366 30080 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:55.508388 30080 net.cpp:131] Top shape: 64 (64)
I0428 20:02:55.508390 30080 net.cpp:139] Memory required for data: 200960
I0428 20:02:55.508396 30080 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:55.508411 30080 net.cpp:86] Creating Layer conv0
I0428 20:02:55.508415 30080 net.cpp:408] conv0 <- data
I0428 20:02:55.508426 30080 net.cpp:382] conv0 -> conv0
I0428 20:02:55.728543 30080 net.cpp:124] Setting up conv0
I0428 20:02:55.728569 30080 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:55.728574 30080 net.cpp:139] Memory required for data: 1675520
I0428 20:02:55.728601 30080 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:55.728631 30080 net.cpp:86] Creating Layer pool0
I0428 20:02:55.728634 30080 net.cpp:408] pool0 <- conv0
I0428 20:02:55.728639 30080 net.cpp:382] pool0 -> pool0
I0428 20:02:55.728701 30080 net.cpp:124] Setting up pool0
I0428 20:02:55.728708 30080 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:55.728711 30080 net.cpp:139] Memory required for data: 2044160
I0428 20:02:55.728714 30080 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:55.728726 30080 net.cpp:86] Creating Layer conv1
I0428 20:02:55.728732 30080 net.cpp:408] conv1 <- pool0
I0428 20:02:55.728737 30080 net.cpp:382] conv1 -> conv1
I0428 20:02:55.731139 30080 net.cpp:124] Setting up conv1
I0428 20:02:55.731154 30080 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:02:55.731158 30080 net.cpp:139] Memory required for data: 3682560
I0428 20:02:55.731199 30080 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:55.731210 30080 net.cpp:86] Creating Layer pool1
I0428 20:02:55.731215 30080 net.cpp:408] pool1 <- conv1
I0428 20:02:55.731220 30080 net.cpp:382] pool1 -> pool1
I0428 20:02:55.731257 30080 net.cpp:124] Setting up pool1
I0428 20:02:55.731264 30080 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:02:55.731267 30080 net.cpp:139] Memory required for data: 4092160
I0428 20:02:55.731271 30080 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:55.731278 30080 net.cpp:86] Creating Layer ip1
I0428 20:02:55.731281 30080 net.cpp:408] ip1 <- pool1
I0428 20:02:55.731287 30080 net.cpp:382] ip1 -> ip1
I0428 20:02:55.732429 30080 net.cpp:124] Setting up ip1
I0428 20:02:55.732440 30080 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:55.732460 30080 net.cpp:139] Memory required for data: 4094720
I0428 20:02:55.732467 30080 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:55.732475 30080 net.cpp:86] Creating Layer relu1
I0428 20:02:55.732480 30080 net.cpp:408] relu1 <- ip1
I0428 20:02:55.732484 30080 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:55.732672 30080 net.cpp:124] Setting up relu1
I0428 20:02:55.732681 30080 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:55.732684 30080 net.cpp:139] Memory required for data: 4097280
I0428 20:02:55.732687 30080 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:55.732695 30080 net.cpp:86] Creating Layer ip2
I0428 20:02:55.732698 30080 net.cpp:408] ip2 <- ip1
I0428 20:02:55.732704 30080 net.cpp:382] ip2 -> ip2
I0428 20:02:55.732797 30080 net.cpp:124] Setting up ip2
I0428 20:02:55.732805 30080 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:55.732807 30080 net.cpp:139] Memory required for data: 4099840
I0428 20:02:55.732817 30080 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:55.732825 30080 net.cpp:86] Creating Layer relu2
I0428 20:02:55.732828 30080 net.cpp:408] relu2 <- ip2
I0428 20:02:55.732832 30080 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:55.733738 30080 net.cpp:124] Setting up relu2
I0428 20:02:55.733750 30080 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:55.733769 30080 net.cpp:139] Memory required for data: 4102400
I0428 20:02:55.733772 30080 layer_factory.hpp:77] Creating layer loss
I0428 20:02:55.733779 30080 net.cpp:86] Creating Layer loss
I0428 20:02:55.733784 30080 net.cpp:408] loss <- ip2
I0428 20:02:55.733788 30080 net.cpp:408] loss <- label
I0428 20:02:55.733809 30080 net.cpp:382] loss -> loss
I0428 20:02:55.733830 30080 layer_factory.hpp:77] Creating layer loss
I0428 20:02:55.734098 30080 net.cpp:124] Setting up loss
I0428 20:02:55.734108 30080 net.cpp:131] Top shape: (1)
I0428 20:02:55.734112 30080 net.cpp:134]     with loss weight 1
I0428 20:02:55.734127 30080 net.cpp:139] Memory required for data: 4102404
I0428 20:02:55.734130 30080 net.cpp:200] loss needs backward computation.
I0428 20:02:55.734133 30080 net.cpp:200] relu2 needs backward computation.
I0428 20:02:55.734153 30080 net.cpp:200] ip2 needs backward computation.
I0428 20:02:55.734155 30080 net.cpp:200] relu1 needs backward computation.
I0428 20:02:55.734158 30080 net.cpp:200] ip1 needs backward computation.
I0428 20:02:55.734187 30080 net.cpp:200] pool1 needs backward computation.
I0428 20:02:55.734191 30080 net.cpp:200] conv1 needs backward computation.
I0428 20:02:55.734194 30080 net.cpp:200] pool0 needs backward computation.
I0428 20:02:55.734197 30080 net.cpp:200] conv0 needs backward computation.
I0428 20:02:55.734201 30080 net.cpp:202] mnist does not need backward computation.
I0428 20:02:55.734205 30080 net.cpp:244] This network produces output loss
I0428 20:02:55.734213 30080 net.cpp:257] Network initialization done.
I0428 20:02:55.734575 30080 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test940.prototxt
I0428 20:02:55.734602 30080 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:55.734701 30080 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:02:55.734783 30080 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:55.734827 30080 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:55.734840 30080 net.cpp:86] Creating Layer mnist
I0428 20:02:55.734845 30080 net.cpp:382] mnist -> data
I0428 20:02:55.734853 30080 net.cpp:382] mnist -> label
I0428 20:02:55.734937 30080 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:55.737032 30080 net.cpp:124] Setting up mnist
I0428 20:02:55.737076 30080 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:55.737083 30080 net.cpp:131] Top shape: 100 (100)
I0428 20:02:55.737087 30080 net.cpp:139] Memory required for data: 314000
I0428 20:02:55.737090 30080 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:55.737121 30080 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:55.737126 30080 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:55.737131 30080 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:55.737138 30080 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:55.737256 30080 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:55.737264 30080 net.cpp:131] Top shape: 100 (100)
I0428 20:02:55.737268 30080 net.cpp:131] Top shape: 100 (100)
I0428 20:02:55.737272 30080 net.cpp:139] Memory required for data: 314800
I0428 20:02:55.737274 30080 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:55.737283 30080 net.cpp:86] Creating Layer conv0
I0428 20:02:55.737287 30080 net.cpp:408] conv0 <- data
I0428 20:02:55.737293 30080 net.cpp:382] conv0 -> conv0
I0428 20:02:55.739081 30080 net.cpp:124] Setting up conv0
I0428 20:02:55.739110 30080 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:55.739114 30080 net.cpp:139] Memory required for data: 2618800
I0428 20:02:55.739122 30080 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:55.739130 30080 net.cpp:86] Creating Layer pool0
I0428 20:02:55.739133 30080 net.cpp:408] pool0 <- conv0
I0428 20:02:55.739138 30080 net.cpp:382] pool0 -> pool0
I0428 20:02:55.739174 30080 net.cpp:124] Setting up pool0
I0428 20:02:55.739181 30080 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:55.739182 30080 net.cpp:139] Memory required for data: 3194800
I0428 20:02:55.739186 30080 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:55.739197 30080 net.cpp:86] Creating Layer conv1
I0428 20:02:55.739200 30080 net.cpp:408] conv1 <- pool0
I0428 20:02:55.739207 30080 net.cpp:382] conv1 -> conv1
I0428 20:02:55.741123 30080 net.cpp:124] Setting up conv1
I0428 20:02:55.741153 30080 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:02:55.741158 30080 net.cpp:139] Memory required for data: 5754800
I0428 20:02:55.741166 30080 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:55.741173 30080 net.cpp:86] Creating Layer pool1
I0428 20:02:55.741176 30080 net.cpp:408] pool1 <- conv1
I0428 20:02:55.741183 30080 net.cpp:382] pool1 -> pool1
I0428 20:02:55.741235 30080 net.cpp:124] Setting up pool1
I0428 20:02:55.741240 30080 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:02:55.741243 30080 net.cpp:139] Memory required for data: 6394800
I0428 20:02:55.741246 30080 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:55.741253 30080 net.cpp:86] Creating Layer ip1
I0428 20:02:55.741256 30080 net.cpp:408] ip1 <- pool1
I0428 20:02:55.741261 30080 net.cpp:382] ip1 -> ip1
I0428 20:02:55.741462 30080 net.cpp:124] Setting up ip1
I0428 20:02:55.741485 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.741489 30080 net.cpp:139] Memory required for data: 6398800
I0428 20:02:55.741497 30080 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:55.741503 30080 net.cpp:86] Creating Layer relu1
I0428 20:02:55.741506 30080 net.cpp:408] relu1 <- ip1
I0428 20:02:55.741511 30080 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:55.741686 30080 net.cpp:124] Setting up relu1
I0428 20:02:55.741694 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.741698 30080 net.cpp:139] Memory required for data: 6402800
I0428 20:02:55.741701 30080 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:55.741708 30080 net.cpp:86] Creating Layer ip2
I0428 20:02:55.741713 30080 net.cpp:408] ip2 <- ip1
I0428 20:02:55.741717 30080 net.cpp:382] ip2 -> ip2
I0428 20:02:55.741824 30080 net.cpp:124] Setting up ip2
I0428 20:02:55.741849 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.741852 30080 net.cpp:139] Memory required for data: 6406800
I0428 20:02:55.741858 30080 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:55.741863 30080 net.cpp:86] Creating Layer relu2
I0428 20:02:55.741868 30080 net.cpp:408] relu2 <- ip2
I0428 20:02:55.741871 30080 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:55.742071 30080 net.cpp:124] Setting up relu2
I0428 20:02:55.742082 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.742085 30080 net.cpp:139] Memory required for data: 6410800
I0428 20:02:55.742089 30080 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:02:55.742094 30080 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:02:55.742097 30080 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:02:55.742101 30080 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:02:55.742117 30080 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:02:55.742208 30080 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:02:55.742214 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.742218 30080 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:55.742225 30080 net.cpp:139] Memory required for data: 6418800
I0428 20:02:55.742228 30080 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:55.742234 30080 net.cpp:86] Creating Layer accuracy
I0428 20:02:55.742238 30080 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:02:55.742241 30080 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:55.742245 30080 net.cpp:382] accuracy -> accuracy
I0428 20:02:55.742252 30080 net.cpp:124] Setting up accuracy
I0428 20:02:55.742256 30080 net.cpp:131] Top shape: (1)
I0428 20:02:55.742259 30080 net.cpp:139] Memory required for data: 6418804
I0428 20:02:55.742262 30080 layer_factory.hpp:77] Creating layer loss
I0428 20:02:55.742266 30080 net.cpp:86] Creating Layer loss
I0428 20:02:55.742269 30080 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:02:55.742272 30080 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:55.742293 30080 net.cpp:382] loss -> loss
I0428 20:02:55.742300 30080 layer_factory.hpp:77] Creating layer loss
I0428 20:02:55.742539 30080 net.cpp:124] Setting up loss
I0428 20:02:55.742548 30080 net.cpp:131] Top shape: (1)
I0428 20:02:55.742552 30080 net.cpp:134]     with loss weight 1
I0428 20:02:55.742558 30080 net.cpp:139] Memory required for data: 6418808
I0428 20:02:55.742561 30080 net.cpp:200] loss needs backward computation.
I0428 20:02:55.742565 30080 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:55.742569 30080 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:02:55.742573 30080 net.cpp:200] relu2 needs backward computation.
I0428 20:02:55.742575 30080 net.cpp:200] ip2 needs backward computation.
I0428 20:02:55.742578 30080 net.cpp:200] relu1 needs backward computation.
I0428 20:02:55.742581 30080 net.cpp:200] ip1 needs backward computation.
I0428 20:02:55.742584 30080 net.cpp:200] pool1 needs backward computation.
I0428 20:02:55.742588 30080 net.cpp:200] conv1 needs backward computation.
I0428 20:02:55.742590 30080 net.cpp:200] pool0 needs backward computation.
I0428 20:02:55.742594 30080 net.cpp:200] conv0 needs backward computation.
I0428 20:02:55.742597 30080 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:55.742601 30080 net.cpp:202] mnist does not need backward computation.
I0428 20:02:55.742604 30080 net.cpp:244] This network produces output accuracy
I0428 20:02:55.742607 30080 net.cpp:244] This network produces output loss
I0428 20:02:55.742619 30080 net.cpp:257] Network initialization done.
I0428 20:02:55.742655 30080 solver.cpp:56] Solver scaffolding done.
I0428 20:02:55.742945 30080 caffe.cpp:248] Starting Optimization
I0428 20:02:55.742951 30080 solver.cpp:273] Solving LeNet
I0428 20:02:55.742954 30080 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:55.743185 30080 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:55.748579 30080 blocking_queue.cpp:49] Waiting for data
I0428 20:02:55.822993 30087 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:55.823606 30080 solver.cpp:398]     Test net output #0: accuracy = 0.056
I0428 20:02:55.823623 30080 solver.cpp:398]     Test net output #1: loss = 2.31747 (* 1 = 2.31747 loss)
I0428 20:02:55.827895 30080 solver.cpp:219] Iteration 0 (0 iter/s, 0.0849007s/100 iters), loss = 2.32219
I0428 20:02:55.827934 30080 solver.cpp:238]     Train net output #0: loss = 2.32219 (* 1 = 2.32219 loss)
I0428 20:02:55.827945 30080 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:55.972887 30080 solver.cpp:219] Iteration 100 (689.877 iter/s, 0.144953s/100 iters), loss = 0.535002
I0428 20:02:55.972928 30080 solver.cpp:238]     Train net output #0: loss = 0.535002 (* 1 = 0.535002 loss)
I0428 20:02:55.972934 30080 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:56.115653 30080 solver.cpp:219] Iteration 200 (700.702 iter/s, 0.142714s/100 iters), loss = 0.222148
I0428 20:02:56.115691 30080 solver.cpp:238]     Train net output #0: loss = 0.222148 (* 1 = 0.222148 loss)
I0428 20:02:56.115697 30080 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:56.256721 30080 solver.cpp:219] Iteration 300 (709.129 iter/s, 0.141018s/100 iters), loss = 0.258466
I0428 20:02:56.256742 30080 solver.cpp:238]     Train net output #0: loss = 0.258466 (* 1 = 0.258466 loss)
I0428 20:02:56.256748 30080 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:56.400249 30080 solver.cpp:219] Iteration 400 (696.888 iter/s, 0.143495s/100 iters), loss = 0.160553
I0428 20:02:56.400288 30080 solver.cpp:238]     Train net output #0: loss = 0.160553 (* 1 = 0.160553 loss)
I0428 20:02:56.400295 30080 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:56.538805 30080 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:56.593468 30087 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:56.594987 30080 solver.cpp:398]     Test net output #0: accuracy = 0.954
I0428 20:02:56.595006 30080 solver.cpp:398]     Test net output #1: loss = 0.151849 (* 1 = 0.151849 loss)
I0428 20:02:56.596515 30080 solver.cpp:219] Iteration 500 (509.648 iter/s, 0.196214s/100 iters), loss = 0.190664
I0428 20:02:56.596554 30080 solver.cpp:238]     Train net output #0: loss = 0.190664 (* 1 = 0.190664 loss)
I0428 20:02:56.596560 30080 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:56.746017 30080 solver.cpp:219] Iteration 600 (669.048 iter/s, 0.149466s/100 iters), loss = 0.0987642
I0428 20:02:56.746045 30080 solver.cpp:238]     Train net output #0: loss = 0.0987642 (* 1 = 0.0987642 loss)
I0428 20:02:56.746053 30080 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:56.888062 30080 solver.cpp:219] Iteration 700 (704.209 iter/s, 0.142003s/100 iters), loss = 0.216455
I0428 20:02:56.888103 30080 solver.cpp:238]     Train net output #0: loss = 0.216455 (* 1 = 0.216455 loss)
I0428 20:02:56.888110 30080 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:57.030063 30080 solver.cpp:219] Iteration 800 (704.408 iter/s, 0.141963s/100 iters), loss = 0.281222
I0428 20:02:57.030103 30080 solver.cpp:238]     Train net output #0: loss = 0.281222 (* 1 = 0.281222 loss)
I0428 20:02:57.030110 30080 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:57.171098 30080 solver.cpp:219] Iteration 900 (709.227 iter/s, 0.140999s/100 iters), loss = 0.159114
I0428 20:02:57.171139 30080 solver.cpp:238]     Train net output #0: loss = 0.159114 (* 1 = 0.159114 loss)
I0428 20:02:57.171145 30080 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:57.217550 30086 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:57.315100 30080 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:57.316931 30080 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:57.317872 30080 solver.cpp:311] Iteration 1000, loss = 0.102785
I0428 20:02:57.317886 30080 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:57.372318 30087 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:57.373831 30080 solver.cpp:398]     Test net output #0: accuracy = 0.969
I0428 20:02:57.373865 30080 solver.cpp:398]     Test net output #1: loss = 0.102079 (* 1 = 0.102079 loss)
I0428 20:02:57.373870 30080 solver.cpp:316] Optimization Done.
I0428 20:02:57.373874 30080 caffe.cpp:259] Optimization Done.
