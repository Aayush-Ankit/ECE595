I0428 20:02:01.427350 29857 caffe.cpp:218] Using GPUs 0
I0428 20:02:01.464438 29857 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:01.980361 29857 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test918.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:01.980537 29857 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test918.prototxt
I0428 20:02:01.980970 29857 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:01.980998 29857 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:01.981117 29857 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:01.981233 29857 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:01.981367 29857 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:01.981400 29857 net.cpp:86] Creating Layer mnist
I0428 20:02:01.981415 29857 net.cpp:382] mnist -> data
I0428 20:02:01.981447 29857 net.cpp:382] mnist -> label
I0428 20:02:01.982753 29857 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:01.985235 29857 net.cpp:124] Setting up mnist
I0428 20:02:01.985258 29857 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:01.985270 29857 net.cpp:131] Top shape: 64 (64)
I0428 20:02:01.985275 29857 net.cpp:139] Memory required for data: 200960
I0428 20:02:01.985286 29857 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:01.985311 29857 net.cpp:86] Creating Layer conv0
I0428 20:02:01.985337 29857 net.cpp:408] conv0 <- data
I0428 20:02:01.985355 29857 net.cpp:382] conv0 -> conv0
I0428 20:02:02.272974 29857 net.cpp:124] Setting up conv0
I0428 20:02:02.273005 29857 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:02.273010 29857 net.cpp:139] Memory required for data: 1675520
I0428 20:02:02.273032 29857 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:02.273051 29857 net.cpp:86] Creating Layer pool0
I0428 20:02:02.273066 29857 net.cpp:408] pool0 <- conv0
I0428 20:02:02.273077 29857 net.cpp:382] pool0 -> pool0
I0428 20:02:02.273144 29857 net.cpp:124] Setting up pool0
I0428 20:02:02.273154 29857 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:02.273159 29857 net.cpp:139] Memory required for data: 2044160
I0428 20:02:02.273164 29857 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:02.273181 29857 net.cpp:86] Creating Layer conv1
I0428 20:02:02.273188 29857 net.cpp:408] conv1 <- pool0
I0428 20:02:02.273197 29857 net.cpp:382] conv1 -> conv1
I0428 20:02:02.276049 29857 net.cpp:124] Setting up conv1
I0428 20:02:02.276067 29857 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:02.276074 29857 net.cpp:139] Memory required for data: 2863360
I0428 20:02:02.276088 29857 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:02.276101 29857 net.cpp:86] Creating Layer pool1
I0428 20:02:02.276108 29857 net.cpp:408] pool1 <- conv1
I0428 20:02:02.276116 29857 net.cpp:382] pool1 -> pool1
I0428 20:02:02.276165 29857 net.cpp:124] Setting up pool1
I0428 20:02:02.276175 29857 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:02.276181 29857 net.cpp:139] Memory required for data: 3068160
I0428 20:02:02.276187 29857 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:02.276198 29857 net.cpp:86] Creating Layer ip1
I0428 20:02:02.276209 29857 net.cpp:408] ip1 <- pool1
I0428 20:02:02.276219 29857 net.cpp:382] ip1 -> ip1
I0428 20:02:02.276465 29857 net.cpp:124] Setting up ip1
I0428 20:02:02.276474 29857 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:02.276480 29857 net.cpp:139] Memory required for data: 3074560
I0428 20:02:02.276494 29857 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:02.276502 29857 net.cpp:86] Creating Layer relu1
I0428 20:02:02.276512 29857 net.cpp:408] relu1 <- ip1
I0428 20:02:02.276521 29857 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:02.276700 29857 net.cpp:124] Setting up relu1
I0428 20:02:02.276711 29857 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:02.276717 29857 net.cpp:139] Memory required for data: 3080960
I0428 20:02:02.276722 29857 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:02.276733 29857 net.cpp:86] Creating Layer ip2
I0428 20:02:02.276739 29857 net.cpp:408] ip2 <- ip1
I0428 20:02:02.276748 29857 net.cpp:382] ip2 -> ip2
I0428 20:02:02.276865 29857 net.cpp:124] Setting up ip2
I0428 20:02:02.276882 29857 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:02.276888 29857 net.cpp:139] Memory required for data: 3083520
I0428 20:02:02.276898 29857 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:02.276909 29857 net.cpp:86] Creating Layer relu2
I0428 20:02:02.276916 29857 net.cpp:408] relu2 <- ip2
I0428 20:02:02.276923 29857 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:02.277680 29857 net.cpp:124] Setting up relu2
I0428 20:02:02.277695 29857 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:02.277701 29857 net.cpp:139] Memory required for data: 3086080
I0428 20:02:02.277707 29857 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:02.277719 29857 net.cpp:86] Creating Layer ip3
I0428 20:02:02.277724 29857 net.cpp:408] ip3 <- ip2
I0428 20:02:02.277734 29857 net.cpp:382] ip3 -> ip3
I0428 20:02:02.277848 29857 net.cpp:124] Setting up ip3
I0428 20:02:02.277859 29857 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:02.277864 29857 net.cpp:139] Memory required for data: 3088640
I0428 20:02:02.277878 29857 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:02.277889 29857 net.cpp:86] Creating Layer relu3
I0428 20:02:02.277896 29857 net.cpp:408] relu3 <- ip3
I0428 20:02:02.277904 29857 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:02.278079 29857 net.cpp:124] Setting up relu3
I0428 20:02:02.278090 29857 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:02.278096 29857 net.cpp:139] Memory required for data: 3091200
I0428 20:02:02.278102 29857 layer_factory.hpp:77] Creating layer loss
I0428 20:02:02.278111 29857 net.cpp:86] Creating Layer loss
I0428 20:02:02.278117 29857 net.cpp:408] loss <- ip3
I0428 20:02:02.278125 29857 net.cpp:408] loss <- label
I0428 20:02:02.278133 29857 net.cpp:382] loss -> loss
I0428 20:02:02.278154 29857 layer_factory.hpp:77] Creating layer loss
I0428 20:02:02.278391 29857 net.cpp:124] Setting up loss
I0428 20:02:02.278403 29857 net.cpp:131] Top shape: (1)
I0428 20:02:02.278409 29857 net.cpp:134]     with loss weight 1
I0428 20:02:02.278429 29857 net.cpp:139] Memory required for data: 3091204
I0428 20:02:02.278436 29857 net.cpp:200] loss needs backward computation.
I0428 20:02:02.278442 29857 net.cpp:200] relu3 needs backward computation.
I0428 20:02:02.278448 29857 net.cpp:200] ip3 needs backward computation.
I0428 20:02:02.278455 29857 net.cpp:200] relu2 needs backward computation.
I0428 20:02:02.278460 29857 net.cpp:200] ip2 needs backward computation.
I0428 20:02:02.278465 29857 net.cpp:200] relu1 needs backward computation.
I0428 20:02:02.278470 29857 net.cpp:200] ip1 needs backward computation.
I0428 20:02:02.278476 29857 net.cpp:200] pool1 needs backward computation.
I0428 20:02:02.278481 29857 net.cpp:200] conv1 needs backward computation.
I0428 20:02:02.278487 29857 net.cpp:200] pool0 needs backward computation.
I0428 20:02:02.278493 29857 net.cpp:200] conv0 needs backward computation.
I0428 20:02:02.278501 29857 net.cpp:202] mnist does not need backward computation.
I0428 20:02:02.278506 29857 net.cpp:244] This network produces output loss
I0428 20:02:02.278520 29857 net.cpp:257] Network initialization done.
I0428 20:02:02.278864 29857 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test918.prototxt
I0428 20:02:02.278900 29857 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:02.279003 29857 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:02.279125 29857 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:02.279187 29857 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:02.279206 29857 net.cpp:86] Creating Layer mnist
I0428 20:02:02.279214 29857 net.cpp:382] mnist -> data
I0428 20:02:02.279227 29857 net.cpp:382] mnist -> label
I0428 20:02:02.279355 29857 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:02.281675 29857 net.cpp:124] Setting up mnist
I0428 20:02:02.281692 29857 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:02.281700 29857 net.cpp:131] Top shape: 100 (100)
I0428 20:02:02.281707 29857 net.cpp:139] Memory required for data: 314000
I0428 20:02:02.281713 29857 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:02.281723 29857 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:02.281728 29857 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:02.281738 29857 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:02.281749 29857 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:02.281821 29857 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:02.281829 29857 net.cpp:131] Top shape: 100 (100)
I0428 20:02:02.281836 29857 net.cpp:131] Top shape: 100 (100)
I0428 20:02:02.281841 29857 net.cpp:139] Memory required for data: 314800
I0428 20:02:02.281847 29857 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:02.281862 29857 net.cpp:86] Creating Layer conv0
I0428 20:02:02.281868 29857 net.cpp:408] conv0 <- data
I0428 20:02:02.281877 29857 net.cpp:382] conv0 -> conv0
I0428 20:02:02.283350 29857 net.cpp:124] Setting up conv0
I0428 20:02:02.283367 29857 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:02.283373 29857 net.cpp:139] Memory required for data: 2618800
I0428 20:02:02.283388 29857 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:02.283399 29857 net.cpp:86] Creating Layer pool0
I0428 20:02:02.283408 29857 net.cpp:408] pool0 <- conv0
I0428 20:02:02.283417 29857 net.cpp:382] pool0 -> pool0
I0428 20:02:02.283459 29857 net.cpp:124] Setting up pool0
I0428 20:02:02.283468 29857 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:02.283474 29857 net.cpp:139] Memory required for data: 3194800
I0428 20:02:02.283480 29857 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:02.283498 29857 net.cpp:86] Creating Layer conv1
I0428 20:02:02.283504 29857 net.cpp:408] conv1 <- pool0
I0428 20:02:02.283516 29857 net.cpp:382] conv1 -> conv1
I0428 20:02:02.285082 29857 net.cpp:124] Setting up conv1
I0428 20:02:02.285099 29857 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:02.285104 29857 net.cpp:139] Memory required for data: 4474800
I0428 20:02:02.285117 29857 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:02.285130 29857 net.cpp:86] Creating Layer pool1
I0428 20:02:02.285136 29857 net.cpp:408] pool1 <- conv1
I0428 20:02:02.285145 29857 net.cpp:382] pool1 -> pool1
I0428 20:02:02.285193 29857 net.cpp:124] Setting up pool1
I0428 20:02:02.285202 29857 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:02.285207 29857 net.cpp:139] Memory required for data: 4794800
I0428 20:02:02.285212 29857 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:02.285229 29857 net.cpp:86] Creating Layer ip1
I0428 20:02:02.285238 29857 net.cpp:408] ip1 <- pool1
I0428 20:02:02.285246 29857 net.cpp:382] ip1 -> ip1
I0428 20:02:02.285475 29857 net.cpp:124] Setting up ip1
I0428 20:02:02.285485 29857 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:02.285501 29857 net.cpp:139] Memory required for data: 4804800
I0428 20:02:02.285514 29857 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:02.285528 29857 net.cpp:86] Creating Layer relu1
I0428 20:02:02.285536 29857 net.cpp:408] relu1 <- ip1
I0428 20:02:02.285543 29857 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:02.285789 29857 net.cpp:124] Setting up relu1
I0428 20:02:02.285799 29857 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:02.285805 29857 net.cpp:139] Memory required for data: 4814800
I0428 20:02:02.285810 29857 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:02.285825 29857 net.cpp:86] Creating Layer ip2
I0428 20:02:02.285832 29857 net.cpp:408] ip2 <- ip1
I0428 20:02:02.285845 29857 net.cpp:382] ip2 -> ip2
I0428 20:02:02.285979 29857 net.cpp:124] Setting up ip2
I0428 20:02:02.285989 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.285995 29857 net.cpp:139] Memory required for data: 4818800
I0428 20:02:02.286005 29857 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:02.286013 29857 net.cpp:86] Creating Layer relu2
I0428 20:02:02.286020 29857 net.cpp:408] relu2 <- ip2
I0428 20:02:02.286028 29857 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:02.286203 29857 net.cpp:124] Setting up relu2
I0428 20:02:02.286216 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.286222 29857 net.cpp:139] Memory required for data: 4822800
I0428 20:02:02.286228 29857 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:02.286237 29857 net.cpp:86] Creating Layer ip3
I0428 20:02:02.286243 29857 net.cpp:408] ip3 <- ip2
I0428 20:02:02.286254 29857 net.cpp:382] ip3 -> ip3
I0428 20:02:02.286379 29857 net.cpp:124] Setting up ip3
I0428 20:02:02.286388 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.286394 29857 net.cpp:139] Memory required for data: 4826800
I0428 20:02:02.286407 29857 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:02.286417 29857 net.cpp:86] Creating Layer relu3
I0428 20:02:02.286422 29857 net.cpp:408] relu3 <- ip3
I0428 20:02:02.286432 29857 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:02.287253 29857 net.cpp:124] Setting up relu3
I0428 20:02:02.287267 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.287273 29857 net.cpp:139] Memory required for data: 4830800
I0428 20:02:02.287278 29857 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:02.287286 29857 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:02.287292 29857 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:02.287302 29857 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:02.287313 29857 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:02.287358 29857 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:02.287367 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.287374 29857 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:02.287379 29857 net.cpp:139] Memory required for data: 4838800
I0428 20:02:02.287384 29857 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:02.287395 29857 net.cpp:86] Creating Layer accuracy
I0428 20:02:02.287401 29857 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:02.287408 29857 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:02.287417 29857 net.cpp:382] accuracy -> accuracy
I0428 20:02:02.287430 29857 net.cpp:124] Setting up accuracy
I0428 20:02:02.287437 29857 net.cpp:131] Top shape: (1)
I0428 20:02:02.287442 29857 net.cpp:139] Memory required for data: 4838804
I0428 20:02:02.287447 29857 layer_factory.hpp:77] Creating layer loss
I0428 20:02:02.287456 29857 net.cpp:86] Creating Layer loss
I0428 20:02:02.287461 29857 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:02.287467 29857 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:02.287474 29857 net.cpp:382] loss -> loss
I0428 20:02:02.287484 29857 layer_factory.hpp:77] Creating layer loss
I0428 20:02:02.287734 29857 net.cpp:124] Setting up loss
I0428 20:02:02.287748 29857 net.cpp:131] Top shape: (1)
I0428 20:02:02.287755 29857 net.cpp:134]     with loss weight 1
I0428 20:02:02.287773 29857 net.cpp:139] Memory required for data: 4838808
I0428 20:02:02.287781 29857 net.cpp:200] loss needs backward computation.
I0428 20:02:02.287786 29857 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:02.287792 29857 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:02.287797 29857 net.cpp:200] relu3 needs backward computation.
I0428 20:02:02.287802 29857 net.cpp:200] ip3 needs backward computation.
I0428 20:02:02.287807 29857 net.cpp:200] relu2 needs backward computation.
I0428 20:02:02.287812 29857 net.cpp:200] ip2 needs backward computation.
I0428 20:02:02.287817 29857 net.cpp:200] relu1 needs backward computation.
I0428 20:02:02.287822 29857 net.cpp:200] ip1 needs backward computation.
I0428 20:02:02.287827 29857 net.cpp:200] pool1 needs backward computation.
I0428 20:02:02.287832 29857 net.cpp:200] conv1 needs backward computation.
I0428 20:02:02.287838 29857 net.cpp:200] pool0 needs backward computation.
I0428 20:02:02.287843 29857 net.cpp:200] conv0 needs backward computation.
I0428 20:02:02.287849 29857 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:02.287856 29857 net.cpp:202] mnist does not need backward computation.
I0428 20:02:02.287860 29857 net.cpp:244] This network produces output accuracy
I0428 20:02:02.287866 29857 net.cpp:244] This network produces output loss
I0428 20:02:02.287885 29857 net.cpp:257] Network initialization done.
I0428 20:02:02.287933 29857 solver.cpp:56] Solver scaffolding done.
I0428 20:02:02.288281 29857 caffe.cpp:248] Starting Optimization
I0428 20:02:02.288290 29857 solver.cpp:273] Solving LeNet
I0428 20:02:02.288293 29857 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:02.288468 29857 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:02.293084 29857 blocking_queue.cpp:49] Waiting for data
I0428 20:02:02.363878 29864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:02.364445 29857 solver.cpp:398]     Test net output #0: accuracy = 0.1313
I0428 20:02:02.364470 29857 solver.cpp:398]     Test net output #1: loss = 2.31941 (* 1 = 2.31941 loss)
I0428 20:02:02.367723 29857 solver.cpp:219] Iteration 0 (0 iter/s, 0.0793979s/100 iters), loss = 2.28655
I0428 20:02:02.367750 29857 solver.cpp:238]     Train net output #0: loss = 2.28655 (* 1 = 2.28655 loss)
I0428 20:02:02.367782 29857 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:02.474807 29857 solver.cpp:219] Iteration 100 (934.188 iter/s, 0.107045s/100 iters), loss = 1.68372
I0428 20:02:02.474834 29857 solver.cpp:238]     Train net output #0: loss = 1.68372 (* 1 = 1.68372 loss)
I0428 20:02:02.474860 29857 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:02.580559 29857 solver.cpp:219] Iteration 200 (945.933 iter/s, 0.105716s/100 iters), loss = 1.76659
I0428 20:02:02.580587 29857 solver.cpp:238]     Train net output #0: loss = 1.76659 (* 1 = 1.76659 loss)
I0428 20:02:02.580613 29857 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:02.688040 29857 solver.cpp:219] Iteration 300 (930.707 iter/s, 0.107445s/100 iters), loss = 1.55543
I0428 20:02:02.688069 29857 solver.cpp:238]     Train net output #0: loss = 1.55543 (* 1 = 1.55543 loss)
I0428 20:02:02.688079 29857 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:02.794705 29857 solver.cpp:219] Iteration 400 (937.839 iter/s, 0.106628s/100 iters), loss = 1.67801
I0428 20:02:02.794734 29857 solver.cpp:238]     Train net output #0: loss = 1.67801 (* 1 = 1.67801 loss)
I0428 20:02:02.794761 29857 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:02.899132 29857 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:02.946609 29864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:02.947129 29857 solver.cpp:398]     Test net output #0: accuracy = 0.4646
I0428 20:02:02.947149 29857 solver.cpp:398]     Test net output #1: loss = 1.52566 (* 1 = 1.52566 loss)
I0428 20:02:02.948205 29857 solver.cpp:219] Iteration 500 (651.637 iter/s, 0.15346s/100 iters), loss = 1.5607
I0428 20:02:02.948247 29857 solver.cpp:238]     Train net output #0: loss = 1.5607 (* 1 = 1.5607 loss)
I0428 20:02:02.948272 29857 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:03.053530 29857 solver.cpp:219] Iteration 600 (949.87 iter/s, 0.105278s/100 iters), loss = 1.49415
I0428 20:02:03.053560 29857 solver.cpp:238]     Train net output #0: loss = 1.49415 (* 1 = 1.49415 loss)
I0428 20:02:03.053586 29857 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:03.159349 29857 solver.cpp:219] Iteration 700 (945.329 iter/s, 0.105783s/100 iters), loss = 1.41123
I0428 20:02:03.159377 29857 solver.cpp:238]     Train net output #0: loss = 1.41123 (* 1 = 1.41123 loss)
I0428 20:02:03.159404 29857 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:03.265171 29857 solver.cpp:219] Iteration 800 (945.32 iter/s, 0.105784s/100 iters), loss = 1.4119
I0428 20:02:03.265199 29857 solver.cpp:238]     Train net output #0: loss = 1.4119 (* 1 = 1.4119 loss)
I0428 20:02:03.265225 29857 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:03.371543 29857 solver.cpp:219] Iteration 900 (940.413 iter/s, 0.106336s/100 iters), loss = 1.71727
I0428 20:02:03.371573 29857 solver.cpp:238]     Train net output #0: loss = 1.71727 (* 1 = 1.71727 loss)
I0428 20:02:03.371600 29857 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:03.406985 29863 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:03.476255 29857 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:03.477712 29857 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:03.478441 29857 solver.cpp:311] Iteration 1000, loss = 1.41153
I0428 20:02:03.478458 29857 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:03.525485 29864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:03.526054 29857 solver.cpp:398]     Test net output #0: accuracy = 0.473
I0428 20:02:03.526077 29857 solver.cpp:398]     Test net output #1: loss = 1.4605 (* 1 = 1.4605 loss)
I0428 20:02:03.526087 29857 solver.cpp:316] Optimization Done.
I0428 20:02:03.526091 29857 caffe.cpp:259] Optimization Done.
