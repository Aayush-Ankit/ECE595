I0428 19:57:31.081244 28701 caffe.cpp:218] Using GPUs 0
I0428 19:57:31.113023 28701 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:31.595973 28701 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test791.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:31.596123 28701 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test791.prototxt
I0428 19:57:31.596464 28701 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:31.596493 28701 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:31.596565 28701 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:31.596626 28701 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:31.596704 28701 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:31.596724 28701 net.cpp:86] Creating Layer mnist
I0428 19:57:31.596731 28701 net.cpp:382] mnist -> data
I0428 19:57:31.596748 28701 net.cpp:382] mnist -> label
I0428 19:57:31.597820 28701 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:31.600385 28701 net.cpp:124] Setting up mnist
I0428 19:57:31.600400 28701 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:31.600405 28701 net.cpp:131] Top shape: 64 (64)
I0428 19:57:31.600409 28701 net.cpp:139] Memory required for data: 200960
I0428 19:57:31.600414 28701 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:31.600430 28701 net.cpp:86] Creating Layer conv0
I0428 19:57:31.600433 28701 net.cpp:408] conv0 <- data
I0428 19:57:31.600458 28701 net.cpp:382] conv0 -> conv0
I0428 19:57:31.836858 28701 net.cpp:124] Setting up conv0
I0428 19:57:31.836899 28701 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:31.836902 28701 net.cpp:139] Memory required for data: 1675520
I0428 19:57:31.836951 28701 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:31.836963 28701 net.cpp:86] Creating Layer pool0
I0428 19:57:31.836971 28701 net.cpp:408] pool0 <- conv0
I0428 19:57:31.836977 28701 net.cpp:382] pool0 -> pool0
I0428 19:57:31.837023 28701 net.cpp:124] Setting up pool0
I0428 19:57:31.837028 28701 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:31.837031 28701 net.cpp:139] Memory required for data: 2044160
I0428 19:57:31.837034 28701 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:31.837060 28701 net.cpp:86] Creating Layer conv1
I0428 19:57:31.837064 28701 net.cpp:408] conv1 <- pool0
I0428 19:57:31.837069 28701 net.cpp:382] conv1 -> conv1
I0428 19:57:31.839850 28701 net.cpp:124] Setting up conv1
I0428 19:57:31.839864 28701 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:31.839867 28701 net.cpp:139] Memory required for data: 2126080
I0428 19:57:31.839892 28701 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:31.839900 28701 net.cpp:86] Creating Layer pool1
I0428 19:57:31.839902 28701 net.cpp:408] pool1 <- conv1
I0428 19:57:31.839907 28701 net.cpp:382] pool1 -> pool1
I0428 19:57:31.839943 28701 net.cpp:124] Setting up pool1
I0428 19:57:31.839951 28701 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:31.839953 28701 net.cpp:139] Memory required for data: 2146560
I0428 19:57:31.839956 28701 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:31.839962 28701 net.cpp:86] Creating Layer ip1
I0428 19:57:31.839965 28701 net.cpp:408] ip1 <- pool1
I0428 19:57:31.839970 28701 net.cpp:382] ip1 -> ip1
I0428 19:57:31.840090 28701 net.cpp:124] Setting up ip1
I0428 19:57:31.840095 28701 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:31.840098 28701 net.cpp:139] Memory required for data: 2159360
I0428 19:57:31.840106 28701 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:31.840111 28701 net.cpp:86] Creating Layer relu1
I0428 19:57:31.840113 28701 net.cpp:408] relu1 <- ip1
I0428 19:57:31.840117 28701 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:31.840315 28701 net.cpp:124] Setting up relu1
I0428 19:57:31.840324 28701 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:31.840342 28701 net.cpp:139] Memory required for data: 2172160
I0428 19:57:31.840347 28701 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:31.840353 28701 net.cpp:86] Creating Layer ip2
I0428 19:57:31.840356 28701 net.cpp:408] ip2 <- ip1
I0428 19:57:31.840361 28701 net.cpp:382] ip2 -> ip2
I0428 19:57:31.840468 28701 net.cpp:124] Setting up ip2
I0428 19:57:31.840474 28701 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:31.840478 28701 net.cpp:139] Memory required for data: 2174720
I0428 19:57:31.840484 28701 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:31.840507 28701 net.cpp:86] Creating Layer relu2
I0428 19:57:31.840510 28701 net.cpp:408] relu2 <- ip2
I0428 19:57:31.840514 28701 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:31.841305 28701 net.cpp:124] Setting up relu2
I0428 19:57:31.841316 28701 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:31.841336 28701 net.cpp:139] Memory required for data: 2177280
I0428 19:57:31.841339 28701 layer_factory.hpp:77] Creating layer loss
I0428 19:57:31.841346 28701 net.cpp:86] Creating Layer loss
I0428 19:57:31.841348 28701 net.cpp:408] loss <- ip2
I0428 19:57:31.841353 28701 net.cpp:408] loss <- label
I0428 19:57:31.841358 28701 net.cpp:382] loss -> loss
I0428 19:57:31.841377 28701 layer_factory.hpp:77] Creating layer loss
I0428 19:57:31.841671 28701 net.cpp:124] Setting up loss
I0428 19:57:31.841681 28701 net.cpp:131] Top shape: (1)
I0428 19:57:31.841701 28701 net.cpp:134]     with loss weight 1
I0428 19:57:31.841716 28701 net.cpp:139] Memory required for data: 2177284
I0428 19:57:31.841719 28701 net.cpp:200] loss needs backward computation.
I0428 19:57:31.841723 28701 net.cpp:200] relu2 needs backward computation.
I0428 19:57:31.841727 28701 net.cpp:200] ip2 needs backward computation.
I0428 19:57:31.841729 28701 net.cpp:200] relu1 needs backward computation.
I0428 19:57:31.841732 28701 net.cpp:200] ip1 needs backward computation.
I0428 19:57:31.841747 28701 net.cpp:200] pool1 needs backward computation.
I0428 19:57:31.841749 28701 net.cpp:200] conv1 needs backward computation.
I0428 19:57:31.841768 28701 net.cpp:200] pool0 needs backward computation.
I0428 19:57:31.841771 28701 net.cpp:200] conv0 needs backward computation.
I0428 19:57:31.841774 28701 net.cpp:202] mnist does not need backward computation.
I0428 19:57:31.841792 28701 net.cpp:244] This network produces output loss
I0428 19:57:31.841815 28701 net.cpp:257] Network initialization done.
I0428 19:57:31.842108 28701 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test791.prototxt
I0428 19:57:31.842149 28701 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:31.842226 28701 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:31.842320 28701 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:31.842366 28701 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:31.842378 28701 net.cpp:86] Creating Layer mnist
I0428 19:57:31.842383 28701 net.cpp:382] mnist -> data
I0428 19:57:31.842391 28701 net.cpp:382] mnist -> label
I0428 19:57:31.842476 28701 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:31.844481 28701 net.cpp:124] Setting up mnist
I0428 19:57:31.844509 28701 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:31.844514 28701 net.cpp:131] Top shape: 100 (100)
I0428 19:57:31.844517 28701 net.cpp:139] Memory required for data: 314000
I0428 19:57:31.844521 28701 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:31.844539 28701 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:31.844542 28701 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:31.844547 28701 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:31.844553 28701 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:31.844645 28701 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:31.844660 28701 net.cpp:131] Top shape: 100 (100)
I0428 19:57:31.844665 28701 net.cpp:131] Top shape: 100 (100)
I0428 19:57:31.844667 28701 net.cpp:139] Memory required for data: 314800
I0428 19:57:31.844669 28701 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:31.844677 28701 net.cpp:86] Creating Layer conv0
I0428 19:57:31.844681 28701 net.cpp:408] conv0 <- data
I0428 19:57:31.844686 28701 net.cpp:382] conv0 -> conv0
I0428 19:57:31.846328 28701 net.cpp:124] Setting up conv0
I0428 19:57:31.846343 28701 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:31.846346 28701 net.cpp:139] Memory required for data: 2618800
I0428 19:57:31.846375 28701 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:31.846382 28701 net.cpp:86] Creating Layer pool0
I0428 19:57:31.846385 28701 net.cpp:408] pool0 <- conv0
I0428 19:57:31.846390 28701 net.cpp:382] pool0 -> pool0
I0428 19:57:31.846424 28701 net.cpp:124] Setting up pool0
I0428 19:57:31.846431 28701 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:31.846433 28701 net.cpp:139] Memory required for data: 3194800
I0428 19:57:31.846442 28701 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:31.846451 28701 net.cpp:86] Creating Layer conv1
I0428 19:57:31.846453 28701 net.cpp:408] conv1 <- pool0
I0428 19:57:31.846458 28701 net.cpp:382] conv1 -> conv1
I0428 19:57:31.848594 28701 net.cpp:124] Setting up conv1
I0428 19:57:31.848606 28701 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:31.848610 28701 net.cpp:139] Memory required for data: 3322800
I0428 19:57:31.848634 28701 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:31.848640 28701 net.cpp:86] Creating Layer pool1
I0428 19:57:31.848644 28701 net.cpp:408] pool1 <- conv1
I0428 19:57:31.848649 28701 net.cpp:382] pool1 -> pool1
I0428 19:57:31.848695 28701 net.cpp:124] Setting up pool1
I0428 19:57:31.848701 28701 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:31.848704 28701 net.cpp:139] Memory required for data: 3354800
I0428 19:57:31.848707 28701 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:31.848712 28701 net.cpp:86] Creating Layer ip1
I0428 19:57:31.848716 28701 net.cpp:408] ip1 <- pool1
I0428 19:57:31.848721 28701 net.cpp:382] ip1 -> ip1
I0428 19:57:31.848886 28701 net.cpp:124] Setting up ip1
I0428 19:57:31.848896 28701 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:31.848898 28701 net.cpp:139] Memory required for data: 3374800
I0428 19:57:31.848917 28701 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:31.848922 28701 net.cpp:86] Creating Layer relu1
I0428 19:57:31.848925 28701 net.cpp:408] relu1 <- ip1
I0428 19:57:31.848930 28701 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:31.849098 28701 net.cpp:124] Setting up relu1
I0428 19:57:31.849107 28701 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:31.849110 28701 net.cpp:139] Memory required for data: 3394800
I0428 19:57:31.849113 28701 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:31.849122 28701 net.cpp:86] Creating Layer ip2
I0428 19:57:31.849128 28701 net.cpp:408] ip2 <- ip1
I0428 19:57:31.849133 28701 net.cpp:382] ip2 -> ip2
I0428 19:57:31.849251 28701 net.cpp:124] Setting up ip2
I0428 19:57:31.849256 28701 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:31.849259 28701 net.cpp:139] Memory required for data: 3398800
I0428 19:57:31.849264 28701 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:31.849269 28701 net.cpp:86] Creating Layer relu2
I0428 19:57:31.849272 28701 net.cpp:408] relu2 <- ip2
I0428 19:57:31.849277 28701 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:31.849519 28701 net.cpp:124] Setting up relu2
I0428 19:57:31.849529 28701 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:31.849531 28701 net.cpp:139] Memory required for data: 3402800
I0428 19:57:31.849534 28701 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:31.849539 28701 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:31.849541 28701 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:31.849545 28701 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:31.849560 28701 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:31.849593 28701 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:31.849599 28701 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:31.849603 28701 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:31.849606 28701 net.cpp:139] Memory required for data: 3410800
I0428 19:57:31.849608 28701 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:31.849613 28701 net.cpp:86] Creating Layer accuracy
I0428 19:57:31.849622 28701 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:31.849625 28701 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:31.849629 28701 net.cpp:382] accuracy -> accuracy
I0428 19:57:31.849637 28701 net.cpp:124] Setting up accuracy
I0428 19:57:31.849639 28701 net.cpp:131] Top shape: (1)
I0428 19:57:31.849647 28701 net.cpp:139] Memory required for data: 3410804
I0428 19:57:31.849649 28701 layer_factory.hpp:77] Creating layer loss
I0428 19:57:31.849654 28701 net.cpp:86] Creating Layer loss
I0428 19:57:31.849656 28701 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:31.849660 28701 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:31.849668 28701 net.cpp:382] loss -> loss
I0428 19:57:31.849674 28701 layer_factory.hpp:77] Creating layer loss
I0428 19:57:31.849903 28701 net.cpp:124] Setting up loss
I0428 19:57:31.849912 28701 net.cpp:131] Top shape: (1)
I0428 19:57:31.849915 28701 net.cpp:134]     with loss weight 1
I0428 19:57:31.849922 28701 net.cpp:139] Memory required for data: 3410808
I0428 19:57:31.849925 28701 net.cpp:200] loss needs backward computation.
I0428 19:57:31.849930 28701 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:31.849933 28701 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:31.849936 28701 net.cpp:200] relu2 needs backward computation.
I0428 19:57:31.849939 28701 net.cpp:200] ip2 needs backward computation.
I0428 19:57:31.849942 28701 net.cpp:200] relu1 needs backward computation.
I0428 19:57:31.849951 28701 net.cpp:200] ip1 needs backward computation.
I0428 19:57:31.849954 28701 net.cpp:200] pool1 needs backward computation.
I0428 19:57:31.849957 28701 net.cpp:200] conv1 needs backward computation.
I0428 19:57:31.849961 28701 net.cpp:200] pool0 needs backward computation.
I0428 19:57:31.849963 28701 net.cpp:200] conv0 needs backward computation.
I0428 19:57:31.849967 28701 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:31.849970 28701 net.cpp:202] mnist does not need backward computation.
I0428 19:57:31.849973 28701 net.cpp:244] This network produces output accuracy
I0428 19:57:31.849977 28701 net.cpp:244] This network produces output loss
I0428 19:57:31.849987 28701 net.cpp:257] Network initialization done.
I0428 19:57:31.850023 28701 solver.cpp:56] Solver scaffolding done.
I0428 19:57:31.850334 28701 caffe.cpp:248] Starting Optimization
I0428 19:57:31.850340 28701 solver.cpp:273] Solving LeNet
I0428 19:57:31.850343 28701 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:31.851060 28701 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:31.855252 28701 blocking_queue.cpp:49] Waiting for data
I0428 19:57:31.905709 28709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:31.906195 28701 solver.cpp:398]     Test net output #0: accuracy = 0.1076
I0428 19:57:31.906215 28701 solver.cpp:398]     Test net output #1: loss = 2.36344 (* 1 = 2.36344 loss)
I0428 19:57:31.908625 28701 solver.cpp:219] Iteration 0 (0 iter/s, 0.0582555s/100 iters), loss = 2.37135
I0428 19:57:31.908646 28701 solver.cpp:238]     Train net output #0: loss = 2.37135 (* 1 = 2.37135 loss)
I0428 19:57:31.908674 28701 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:31.976665 28701 solver.cpp:219] Iteration 100 (1470.39 iter/s, 0.068009s/100 iters), loss = 1.17231
I0428 19:57:31.976687 28701 solver.cpp:238]     Train net output #0: loss = 1.17231 (* 1 = 1.17231 loss)
I0428 19:57:31.976693 28701 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:32.044688 28701 solver.cpp:219] Iteration 200 (1470.77 iter/s, 0.0679917s/100 iters), loss = 0.33689
I0428 19:57:32.044723 28701 solver.cpp:238]     Train net output #0: loss = 0.33689 (* 1 = 0.33689 loss)
I0428 19:57:32.044744 28701 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:32.112679 28701 solver.cpp:219] Iteration 300 (1471.7 iter/s, 0.0679485s/100 iters), loss = 0.561646
I0428 19:57:32.112700 28701 solver.cpp:238]     Train net output #0: loss = 0.561646 (* 1 = 0.561646 loss)
I0428 19:57:32.112706 28701 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:32.180886 28701 solver.cpp:219] Iteration 400 (1466.8 iter/s, 0.0681757s/100 iters), loss = 0.217753
I0428 19:57:32.180907 28701 solver.cpp:238]     Train net output #0: loss = 0.217753 (* 1 = 0.217753 loss)
I0428 19:57:32.180912 28701 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:32.248991 28701 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:32.294893 28709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:32.295354 28701 solver.cpp:398]     Test net output #0: accuracy = 0.949
I0428 19:57:32.295374 28701 solver.cpp:398]     Test net output #1: loss = 0.165987 (* 1 = 0.165987 loss)
I0428 19:57:32.296130 28701 solver.cpp:219] Iteration 500 (867.963 iter/s, 0.115212s/100 iters), loss = 0.151767
I0428 19:57:32.296171 28701 solver.cpp:238]     Train net output #0: loss = 0.151767 (* 1 = 0.151767 loss)
I0428 19:57:32.296180 28701 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:32.378530 28701 solver.cpp:219] Iteration 600 (1214.32 iter/s, 0.0823509s/100 iters), loss = 0.153608
I0428 19:57:32.378553 28701 solver.cpp:238]     Train net output #0: loss = 0.153608 (* 1 = 0.153608 loss)
I0428 19:57:32.378559 28701 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:32.447953 28701 solver.cpp:219] Iteration 700 (1441.08 iter/s, 0.0693922s/100 iters), loss = 0.122591
I0428 19:57:32.447978 28701 solver.cpp:238]     Train net output #0: loss = 0.122591 (* 1 = 0.122591 loss)
I0428 19:57:32.447985 28701 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:32.517105 28701 solver.cpp:219] Iteration 800 (1446.82 iter/s, 0.069117s/100 iters), loss = 0.342086
I0428 19:57:32.517132 28701 solver.cpp:238]     Train net output #0: loss = 0.342086 (* 1 = 0.342086 loss)
I0428 19:57:32.517138 28701 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:32.584708 28701 solver.cpp:219] Iteration 900 (1480.02 iter/s, 0.0675667s/100 iters), loss = 0.148338
I0428 19:57:32.584731 28701 solver.cpp:238]     Train net output #0: loss = 0.148338 (* 1 = 0.148338 loss)
I0428 19:57:32.584739 28701 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:32.607363 28708 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:32.652446 28701 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:32.653152 28701 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:32.653564 28701 solver.cpp:311] Iteration 1000, loss = 0.223423
I0428 19:57:32.653579 28701 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:32.700927 28709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:32.701401 28701 solver.cpp:398]     Test net output #0: accuracy = 0.9703
I0428 19:57:32.701419 28701 solver.cpp:398]     Test net output #1: loss = 0.0937845 (* 1 = 0.0937845 loss)
I0428 19:57:32.701424 28701 solver.cpp:316] Optimization Done.
I0428 19:57:32.701427 28701 caffe.cpp:259] Optimization Done.
