I0428 20:27:57.014129  3269 caffe.cpp:218] Using GPUs 0
I0428 20:27:57.050249  3269 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:27:57.558087  3269 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1497.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:27:57.558231  3269 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1497.prototxt
I0428 20:27:57.558650  3269 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:27:57.558670  3269 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:27:57.558771  3269 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:27:57.558852  3269 layer_factory.hpp:77] Creating layer mnist
I0428 20:27:57.558954  3269 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:27:57.558979  3269 net.cpp:86] Creating Layer mnist
I0428 20:27:57.558986  3269 net.cpp:382] mnist -> data
I0428 20:27:57.559011  3269 net.cpp:382] mnist -> label
I0428 20:27:57.560102  3269 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:27:57.562589  3269 net.cpp:124] Setting up mnist
I0428 20:27:57.562609  3269 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:27:57.562616  3269 net.cpp:131] Top shape: 64 (64)
I0428 20:27:57.562621  3269 net.cpp:139] Memory required for data: 200960
I0428 20:27:57.562628  3269 layer_factory.hpp:77] Creating layer conv0
I0428 20:27:57.562645  3269 net.cpp:86] Creating Layer conv0
I0428 20:27:57.562665  3269 net.cpp:408] conv0 <- data
I0428 20:27:57.562678  3269 net.cpp:382] conv0 -> conv0
I0428 20:27:57.846223  3269 net.cpp:124] Setting up conv0
I0428 20:27:57.846251  3269 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:27:57.846254  3269 net.cpp:139] Memory required for data: 14946560
I0428 20:27:57.846269  3269 layer_factory.hpp:77] Creating layer pool0
I0428 20:27:57.846282  3269 net.cpp:86] Creating Layer pool0
I0428 20:27:57.846287  3269 net.cpp:408] pool0 <- conv0
I0428 20:27:57.846292  3269 net.cpp:382] pool0 -> pool0
I0428 20:27:57.846338  3269 net.cpp:124] Setting up pool0
I0428 20:27:57.846343  3269 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:27:57.846345  3269 net.cpp:139] Memory required for data: 18632960
I0428 20:27:57.846349  3269 layer_factory.hpp:77] Creating layer conv1
I0428 20:27:57.846359  3269 net.cpp:86] Creating Layer conv1
I0428 20:27:57.846361  3269 net.cpp:408] conv1 <- pool0
I0428 20:27:57.846365  3269 net.cpp:382] conv1 -> conv1
I0428 20:27:57.849061  3269 net.cpp:124] Setting up conv1
I0428 20:27:57.849092  3269 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:27:57.849097  3269 net.cpp:139] Memory required for data: 18714880
I0428 20:27:57.849104  3269 layer_factory.hpp:77] Creating layer pool1
I0428 20:27:57.849128  3269 net.cpp:86] Creating Layer pool1
I0428 20:27:57.849131  3269 net.cpp:408] pool1 <- conv1
I0428 20:27:57.849135  3269 net.cpp:382] pool1 -> pool1
I0428 20:27:57.849171  3269 net.cpp:124] Setting up pool1
I0428 20:27:57.849176  3269 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:27:57.849179  3269 net.cpp:139] Memory required for data: 18735360
I0428 20:27:57.849182  3269 layer_factory.hpp:77] Creating layer ip1
I0428 20:27:57.849189  3269 net.cpp:86] Creating Layer ip1
I0428 20:27:57.849195  3269 net.cpp:408] ip1 <- pool1
I0428 20:27:57.849202  3269 net.cpp:382] ip1 -> ip1
I0428 20:27:57.849313  3269 net.cpp:124] Setting up ip1
I0428 20:27:57.849319  3269 net.cpp:131] Top shape: 64 10 (640)
I0428 20:27:57.849323  3269 net.cpp:139] Memory required for data: 18737920
I0428 20:27:57.849328  3269 layer_factory.hpp:77] Creating layer relu1
I0428 20:27:57.849334  3269 net.cpp:86] Creating Layer relu1
I0428 20:27:57.849336  3269 net.cpp:408] relu1 <- ip1
I0428 20:27:57.849340  3269 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:27:57.849500  3269 net.cpp:124] Setting up relu1
I0428 20:27:57.849509  3269 net.cpp:131] Top shape: 64 10 (640)
I0428 20:27:57.849512  3269 net.cpp:139] Memory required for data: 18740480
I0428 20:27:57.849515  3269 layer_factory.hpp:77] Creating layer ip2
I0428 20:27:57.849521  3269 net.cpp:86] Creating Layer ip2
I0428 20:27:57.849524  3269 net.cpp:408] ip2 <- ip1
I0428 20:27:57.849529  3269 net.cpp:382] ip2 -> ip2
I0428 20:27:57.849616  3269 net.cpp:124] Setting up ip2
I0428 20:27:57.849622  3269 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:27:57.849624  3269 net.cpp:139] Memory required for data: 18746880
I0428 20:27:57.849629  3269 layer_factory.hpp:77] Creating layer relu2
I0428 20:27:57.849634  3269 net.cpp:86] Creating Layer relu2
I0428 20:27:57.849637  3269 net.cpp:408] relu2 <- ip2
I0428 20:27:57.849642  3269 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:27:57.850461  3269 net.cpp:124] Setting up relu2
I0428 20:27:57.850474  3269 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:27:57.850478  3269 net.cpp:139] Memory required for data: 18753280
I0428 20:27:57.850481  3269 layer_factory.hpp:77] Creating layer ip3
I0428 20:27:57.850488  3269 net.cpp:86] Creating Layer ip3
I0428 20:27:57.850492  3269 net.cpp:408] ip3 <- ip2
I0428 20:27:57.850497  3269 net.cpp:382] ip3 -> ip3
I0428 20:27:57.850590  3269 net.cpp:124] Setting up ip3
I0428 20:27:57.850599  3269 net.cpp:131] Top shape: 64 10 (640)
I0428 20:27:57.850601  3269 net.cpp:139] Memory required for data: 18755840
I0428 20:27:57.850610  3269 layer_factory.hpp:77] Creating layer relu3
I0428 20:27:57.850613  3269 net.cpp:86] Creating Layer relu3
I0428 20:27:57.850616  3269 net.cpp:408] relu3 <- ip3
I0428 20:27:57.850620  3269 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:27:57.850787  3269 net.cpp:124] Setting up relu3
I0428 20:27:57.850795  3269 net.cpp:131] Top shape: 64 10 (640)
I0428 20:27:57.850798  3269 net.cpp:139] Memory required for data: 18758400
I0428 20:27:57.850801  3269 layer_factory.hpp:77] Creating layer loss
I0428 20:27:57.850807  3269 net.cpp:86] Creating Layer loss
I0428 20:27:57.850811  3269 net.cpp:408] loss <- ip3
I0428 20:27:57.850814  3269 net.cpp:408] loss <- label
I0428 20:27:57.850818  3269 net.cpp:382] loss -> loss
I0428 20:27:57.850832  3269 layer_factory.hpp:77] Creating layer loss
I0428 20:27:57.851044  3269 net.cpp:124] Setting up loss
I0428 20:27:57.851053  3269 net.cpp:131] Top shape: (1)
I0428 20:27:57.851056  3269 net.cpp:134]     with loss weight 1
I0428 20:27:57.851070  3269 net.cpp:139] Memory required for data: 18758404
I0428 20:27:57.851074  3269 net.cpp:200] loss needs backward computation.
I0428 20:27:57.851078  3269 net.cpp:200] relu3 needs backward computation.
I0428 20:27:57.851080  3269 net.cpp:200] ip3 needs backward computation.
I0428 20:27:57.851083  3269 net.cpp:200] relu2 needs backward computation.
I0428 20:27:57.851086  3269 net.cpp:200] ip2 needs backward computation.
I0428 20:27:57.851089  3269 net.cpp:200] relu1 needs backward computation.
I0428 20:27:57.851091  3269 net.cpp:200] ip1 needs backward computation.
I0428 20:27:57.851094  3269 net.cpp:200] pool1 needs backward computation.
I0428 20:27:57.851096  3269 net.cpp:200] conv1 needs backward computation.
I0428 20:27:57.851099  3269 net.cpp:200] pool0 needs backward computation.
I0428 20:27:57.851102  3269 net.cpp:200] conv0 needs backward computation.
I0428 20:27:57.851105  3269 net.cpp:202] mnist does not need backward computation.
I0428 20:27:57.851109  3269 net.cpp:244] This network produces output loss
I0428 20:27:57.851116  3269 net.cpp:257] Network initialization done.
I0428 20:27:57.851470  3269 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1497.prototxt
I0428 20:27:57.851526  3269 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:27:57.851619  3269 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:27:57.851694  3269 layer_factory.hpp:77] Creating layer mnist
I0428 20:27:57.851739  3269 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:27:57.851752  3269 net.cpp:86] Creating Layer mnist
I0428 20:27:57.851755  3269 net.cpp:382] mnist -> data
I0428 20:27:57.851763  3269 net.cpp:382] mnist -> label
I0428 20:27:57.851855  3269 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:27:57.853987  3269 net.cpp:124] Setting up mnist
I0428 20:27:57.854017  3269 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:27:57.854022  3269 net.cpp:131] Top shape: 100 (100)
I0428 20:27:57.854025  3269 net.cpp:139] Memory required for data: 314000
I0428 20:27:57.854044  3269 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:27:57.854051  3269 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:27:57.854054  3269 net.cpp:408] label_mnist_1_split <- label
I0428 20:27:57.854059  3269 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:27:57.854065  3269 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:27:57.854120  3269 net.cpp:124] Setting up label_mnist_1_split
I0428 20:27:57.854125  3269 net.cpp:131] Top shape: 100 (100)
I0428 20:27:57.854128  3269 net.cpp:131] Top shape: 100 (100)
I0428 20:27:57.854131  3269 net.cpp:139] Memory required for data: 314800
I0428 20:27:57.854135  3269 layer_factory.hpp:77] Creating layer conv0
I0428 20:27:57.854142  3269 net.cpp:86] Creating Layer conv0
I0428 20:27:57.854146  3269 net.cpp:408] conv0 <- data
I0428 20:27:57.854149  3269 net.cpp:382] conv0 -> conv0
I0428 20:27:57.855819  3269 net.cpp:124] Setting up conv0
I0428 20:27:57.855834  3269 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:27:57.855837  3269 net.cpp:139] Memory required for data: 23354800
I0428 20:27:57.855845  3269 layer_factory.hpp:77] Creating layer pool0
I0428 20:27:57.855851  3269 net.cpp:86] Creating Layer pool0
I0428 20:27:57.855854  3269 net.cpp:408] pool0 <- conv0
I0428 20:27:57.855859  3269 net.cpp:382] pool0 -> pool0
I0428 20:27:57.855895  3269 net.cpp:124] Setting up pool0
I0428 20:27:57.855901  3269 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:27:57.855904  3269 net.cpp:139] Memory required for data: 29114800
I0428 20:27:57.855906  3269 layer_factory.hpp:77] Creating layer conv1
I0428 20:27:57.855916  3269 net.cpp:86] Creating Layer conv1
I0428 20:27:57.855918  3269 net.cpp:408] conv1 <- pool0
I0428 20:27:57.855923  3269 net.cpp:382] conv1 -> conv1
I0428 20:27:57.857487  3269 net.cpp:124] Setting up conv1
I0428 20:27:57.857501  3269 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:27:57.857506  3269 net.cpp:139] Memory required for data: 29242800
I0428 20:27:57.857513  3269 layer_factory.hpp:77] Creating layer pool1
I0428 20:27:57.857519  3269 net.cpp:86] Creating Layer pool1
I0428 20:27:57.857522  3269 net.cpp:408] pool1 <- conv1
I0428 20:27:57.857527  3269 net.cpp:382] pool1 -> pool1
I0428 20:27:57.857560  3269 net.cpp:124] Setting up pool1
I0428 20:27:57.857565  3269 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:27:57.857568  3269 net.cpp:139] Memory required for data: 29274800
I0428 20:27:57.857571  3269 layer_factory.hpp:77] Creating layer ip1
I0428 20:27:57.857576  3269 net.cpp:86] Creating Layer ip1
I0428 20:27:57.857579  3269 net.cpp:408] ip1 <- pool1
I0428 20:27:57.857584  3269 net.cpp:382] ip1 -> ip1
I0428 20:27:57.857703  3269 net.cpp:124] Setting up ip1
I0428 20:27:57.857712  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.857725  3269 net.cpp:139] Memory required for data: 29278800
I0428 20:27:57.857735  3269 layer_factory.hpp:77] Creating layer relu1
I0428 20:27:57.857743  3269 net.cpp:86] Creating Layer relu1
I0428 20:27:57.857748  3269 net.cpp:408] relu1 <- ip1
I0428 20:27:57.857756  3269 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:27:57.857918  3269 net.cpp:124] Setting up relu1
I0428 20:27:57.857928  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.857933  3269 net.cpp:139] Memory required for data: 29282800
I0428 20:27:57.857935  3269 layer_factory.hpp:77] Creating layer ip2
I0428 20:27:57.857941  3269 net.cpp:86] Creating Layer ip2
I0428 20:27:57.857945  3269 net.cpp:408] ip2 <- ip1
I0428 20:27:57.857950  3269 net.cpp:382] ip2 -> ip2
I0428 20:27:57.858053  3269 net.cpp:124] Setting up ip2
I0428 20:27:57.858060  3269 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:27:57.858063  3269 net.cpp:139] Memory required for data: 29292800
I0428 20:27:57.858068  3269 layer_factory.hpp:77] Creating layer relu2
I0428 20:27:57.858072  3269 net.cpp:86] Creating Layer relu2
I0428 20:27:57.858074  3269 net.cpp:408] relu2 <- ip2
I0428 20:27:57.858078  3269 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:27:57.858216  3269 net.cpp:124] Setting up relu2
I0428 20:27:57.858223  3269 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:27:57.858227  3269 net.cpp:139] Memory required for data: 29302800
I0428 20:27:57.858228  3269 layer_factory.hpp:77] Creating layer ip3
I0428 20:27:57.858233  3269 net.cpp:86] Creating Layer ip3
I0428 20:27:57.858237  3269 net.cpp:408] ip3 <- ip2
I0428 20:27:57.858242  3269 net.cpp:382] ip3 -> ip3
I0428 20:27:57.858327  3269 net.cpp:124] Setting up ip3
I0428 20:27:57.858333  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.858337  3269 net.cpp:139] Memory required for data: 29306800
I0428 20:27:57.858352  3269 layer_factory.hpp:77] Creating layer relu3
I0428 20:27:57.858356  3269 net.cpp:86] Creating Layer relu3
I0428 20:27:57.858359  3269 net.cpp:408] relu3 <- ip3
I0428 20:27:57.858362  3269 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:27:57.859174  3269 net.cpp:124] Setting up relu3
I0428 20:27:57.859185  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.859189  3269 net.cpp:139] Memory required for data: 29310800
I0428 20:27:57.859192  3269 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:27:57.859197  3269 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:27:57.859200  3269 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:27:57.859205  3269 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:27:57.859211  3269 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:27:57.859251  3269 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:27:57.859254  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.859258  3269 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:27:57.859261  3269 net.cpp:139] Memory required for data: 29318800
I0428 20:27:57.859263  3269 layer_factory.hpp:77] Creating layer accuracy
I0428 20:27:57.859267  3269 net.cpp:86] Creating Layer accuracy
I0428 20:27:57.859272  3269 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:27:57.859275  3269 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:27:57.859279  3269 net.cpp:382] accuracy -> accuracy
I0428 20:27:57.859285  3269 net.cpp:124] Setting up accuracy
I0428 20:27:57.859289  3269 net.cpp:131] Top shape: (1)
I0428 20:27:57.859292  3269 net.cpp:139] Memory required for data: 29318804
I0428 20:27:57.859294  3269 layer_factory.hpp:77] Creating layer loss
I0428 20:27:57.859298  3269 net.cpp:86] Creating Layer loss
I0428 20:27:57.859300  3269 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:27:57.859304  3269 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:27:57.859308  3269 net.cpp:382] loss -> loss
I0428 20:27:57.859320  3269 layer_factory.hpp:77] Creating layer loss
I0428 20:27:57.859529  3269 net.cpp:124] Setting up loss
I0428 20:27:57.859537  3269 net.cpp:131] Top shape: (1)
I0428 20:27:57.859540  3269 net.cpp:134]     with loss weight 1
I0428 20:27:57.859555  3269 net.cpp:139] Memory required for data: 29318808
I0428 20:27:57.859558  3269 net.cpp:200] loss needs backward computation.
I0428 20:27:57.859570  3269 net.cpp:202] accuracy does not need backward computation.
I0428 20:27:57.859572  3269 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:27:57.859575  3269 net.cpp:200] relu3 needs backward computation.
I0428 20:27:57.859577  3269 net.cpp:200] ip3 needs backward computation.
I0428 20:27:57.859586  3269 net.cpp:200] relu2 needs backward computation.
I0428 20:27:57.859588  3269 net.cpp:200] ip2 needs backward computation.
I0428 20:27:57.859591  3269 net.cpp:200] relu1 needs backward computation.
I0428 20:27:57.859594  3269 net.cpp:200] ip1 needs backward computation.
I0428 20:27:57.859596  3269 net.cpp:200] pool1 needs backward computation.
I0428 20:27:57.859604  3269 net.cpp:200] conv1 needs backward computation.
I0428 20:27:57.859607  3269 net.cpp:200] pool0 needs backward computation.
I0428 20:27:57.859611  3269 net.cpp:200] conv0 needs backward computation.
I0428 20:27:57.859613  3269 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:27:57.859617  3269 net.cpp:202] mnist does not need backward computation.
I0428 20:27:57.859619  3269 net.cpp:244] This network produces output accuracy
I0428 20:27:57.859623  3269 net.cpp:244] This network produces output loss
I0428 20:27:57.859632  3269 net.cpp:257] Network initialization done.
I0428 20:27:57.859675  3269 solver.cpp:56] Solver scaffolding done.
I0428 20:27:57.860002  3269 caffe.cpp:248] Starting Optimization
I0428 20:27:57.860008  3269 solver.cpp:273] Solving LeNet
I0428 20:27:57.860010  3269 solver.cpp:274] Learning Rate Policy: inv
I0428 20:27:57.860851  3269 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:27:57.957607  3276 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:27:57.959038  3269 solver.cpp:398]     Test net output #0: accuracy = 0.132
I0428 20:27:57.959060  3269 solver.cpp:398]     Test net output #1: loss = 2.29715 (* 1 = 2.29715 loss)
I0428 20:27:57.963526  3269 solver.cpp:219] Iteration 0 (0 iter/s, 0.10349s/100 iters), loss = 2.29658
I0428 20:27:57.963548  3269 solver.cpp:238]     Train net output #0: loss = 2.29658 (* 1 = 2.29658 loss)
I0428 20:27:57.963559  3269 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:27:58.173243  3269 solver.cpp:219] Iteration 100 (476.93 iter/s, 0.209674s/100 iters), loss = 1.07202
I0428 20:27:58.173287  3269 solver.cpp:238]     Train net output #0: loss = 1.07202 (* 1 = 1.07202 loss)
I0428 20:27:58.173298  3269 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:27:58.379461  3269 solver.cpp:219] Iteration 200 (485.061 iter/s, 0.20616s/100 iters), loss = 1.20212
I0428 20:27:58.379492  3269 solver.cpp:238]     Train net output #0: loss = 1.20212 (* 1 = 1.20212 loss)
I0428 20:27:58.379499  3269 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:27:58.591147  3269 solver.cpp:219] Iteration 300 (472.497 iter/s, 0.211641s/100 iters), loss = 0.931345
I0428 20:27:58.591179  3269 solver.cpp:238]     Train net output #0: loss = 0.931345 (* 1 = 0.931345 loss)
I0428 20:27:58.591187  3269 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:27:58.803445  3269 solver.cpp:219] Iteration 400 (471.146 iter/s, 0.212249s/100 iters), loss = 0.417204
I0428 20:27:58.803483  3269 solver.cpp:238]     Train net output #0: loss = 0.417204 (* 1 = 0.417204 loss)
I0428 20:27:58.803491  3269 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:27:59.019714  3269 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:27:59.121081  3276 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:27:59.123608  3269 solver.cpp:398]     Test net output #0: accuracy = 0.933
I0428 20:27:59.123638  3269 solver.cpp:398]     Test net output #1: loss = 0.235334 (* 1 = 0.235334 loss)
I0428 20:27:59.125651  3269 solver.cpp:219] Iteration 500 (310.418 iter/s, 0.322146s/100 iters), loss = 0.273548
I0428 20:27:59.125681  3269 solver.cpp:238]     Train net output #0: loss = 0.273548 (* 1 = 0.273548 loss)
I0428 20:27:59.125707  3269 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:27:59.342986  3269 solver.cpp:219] Iteration 600 (460.224 iter/s, 0.217286s/100 iters), loss = 0.11687
I0428 20:27:59.343034  3269 solver.cpp:238]     Train net output #0: loss = 0.11687 (* 1 = 0.11687 loss)
I0428 20:27:59.343046  3269 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:27:59.559747  3269 solver.cpp:219] Iteration 700 (461.472 iter/s, 0.216698s/100 iters), loss = 0.312146
I0428 20:27:59.559787  3269 solver.cpp:238]     Train net output #0: loss = 0.312146 (* 1 = 0.312146 loss)
I0428 20:27:59.559798  3269 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:27:59.779217  3269 solver.cpp:219] Iteration 800 (455.769 iter/s, 0.219409s/100 iters), loss = 0.40712
I0428 20:27:59.779261  3269 solver.cpp:238]     Train net output #0: loss = 0.40712 (* 1 = 0.40712 loss)
I0428 20:27:59.779273  3269 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:27:59.989400  3269 solver.cpp:219] Iteration 900 (475.91 iter/s, 0.210124s/100 iters), loss = 0.245136
I0428 20:27:59.989436  3269 solver.cpp:238]     Train net output #0: loss = 0.245136 (* 1 = 0.245136 loss)
I0428 20:27:59.989444  3269 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:00.057940  3275 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:00.204769  3269 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:00.206630  3269 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:00.207885  3269 solver.cpp:311] Iteration 1000, loss = 0.194698
I0428 20:28:00.207916  3269 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:00.307549  3276 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:00.310154  3269 solver.cpp:398]     Test net output #0: accuracy = 0.9554
I0428 20:28:00.310184  3269 solver.cpp:398]     Test net output #1: loss = 0.152974 (* 1 = 0.152974 loss)
I0428 20:28:00.310191  3269 solver.cpp:316] Optimization Done.
I0428 20:28:00.310196  3269 caffe.cpp:259] Optimization Done.
