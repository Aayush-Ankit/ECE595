I0428 20:02:22.626791 29932 caffe.cpp:218] Using GPUs 0
I0428 20:02:22.664496 29932 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:23.119952 29932 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test927.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:23.120090 29932 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test927.prototxt
I0428 20:02:23.120416 29932 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:23.120434 29932 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:23.120513 29932 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:23.120594 29932 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:23.120672 29932 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:23.120692 29932 net.cpp:86] Creating Layer mnist
I0428 20:02:23.120700 29932 net.cpp:382] mnist -> data
I0428 20:02:23.120718 29932 net.cpp:382] mnist -> label
I0428 20:02:23.121722 29932 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:23.123931 29932 net.cpp:124] Setting up mnist
I0428 20:02:23.123962 29932 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:23.123967 29932 net.cpp:131] Top shape: 64 (64)
I0428 20:02:23.123986 29932 net.cpp:139] Memory required for data: 200960
I0428 20:02:23.123991 29932 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:23.124006 29932 net.cpp:86] Creating Layer conv0
I0428 20:02:23.124024 29932 net.cpp:408] conv0 <- data
I0428 20:02:23.124037 29932 net.cpp:382] conv0 -> conv0
I0428 20:02:23.352201 29932 net.cpp:124] Setting up conv0
I0428 20:02:23.352244 29932 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:23.352248 29932 net.cpp:139] Memory required for data: 1675520
I0428 20:02:23.352277 29932 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:23.352289 29932 net.cpp:86] Creating Layer pool0
I0428 20:02:23.352293 29932 net.cpp:408] pool0 <- conv0
I0428 20:02:23.352298 29932 net.cpp:382] pool0 -> pool0
I0428 20:02:23.352356 29932 net.cpp:124] Setting up pool0
I0428 20:02:23.352362 29932 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:23.352365 29932 net.cpp:139] Memory required for data: 2044160
I0428 20:02:23.352367 29932 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:23.352377 29932 net.cpp:86] Creating Layer conv1
I0428 20:02:23.352380 29932 net.cpp:408] conv1 <- pool0
I0428 20:02:23.352385 29932 net.cpp:382] conv1 -> conv1
I0428 20:02:23.355208 29932 net.cpp:124] Setting up conv1
I0428 20:02:23.355254 29932 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:23.355258 29932 net.cpp:139] Memory required for data: 2863360
I0428 20:02:23.355268 29932 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:23.355274 29932 net.cpp:86] Creating Layer pool1
I0428 20:02:23.355278 29932 net.cpp:408] pool1 <- conv1
I0428 20:02:23.355283 29932 net.cpp:382] pool1 -> pool1
I0428 20:02:23.355335 29932 net.cpp:124] Setting up pool1
I0428 20:02:23.355341 29932 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:23.355345 29932 net.cpp:139] Memory required for data: 3068160
I0428 20:02:23.355347 29932 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:23.355355 29932 net.cpp:86] Creating Layer ip1
I0428 20:02:23.355357 29932 net.cpp:408] ip1 <- pool1
I0428 20:02:23.355362 29932 net.cpp:382] ip1 -> ip1
I0428 20:02:23.355723 29932 net.cpp:124] Setting up ip1
I0428 20:02:23.355731 29932 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:23.355749 29932 net.cpp:139] Memory required for data: 3080960
I0428 20:02:23.355756 29932 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:23.355761 29932 net.cpp:86] Creating Layer relu1
I0428 20:02:23.355763 29932 net.cpp:408] relu1 <- ip1
I0428 20:02:23.355768 29932 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:23.355924 29932 net.cpp:124] Setting up relu1
I0428 20:02:23.355933 29932 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:23.355937 29932 net.cpp:139] Memory required for data: 3093760
I0428 20:02:23.355939 29932 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:23.355944 29932 net.cpp:86] Creating Layer ip2
I0428 20:02:23.355948 29932 net.cpp:408] ip2 <- ip1
I0428 20:02:23.355952 29932 net.cpp:382] ip2 -> ip2
I0428 20:02:23.356043 29932 net.cpp:124] Setting up ip2
I0428 20:02:23.356050 29932 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:23.356053 29932 net.cpp:139] Memory required for data: 3096320
I0428 20:02:23.356058 29932 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:23.356065 29932 net.cpp:86] Creating Layer relu2
I0428 20:02:23.356067 29932 net.cpp:408] relu2 <- ip2
I0428 20:02:23.356071 29932 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:23.356894 29932 net.cpp:124] Setting up relu2
I0428 20:02:23.356907 29932 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:23.356926 29932 net.cpp:139] Memory required for data: 3098880
I0428 20:02:23.356930 29932 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:23.356936 29932 net.cpp:86] Creating Layer ip3
I0428 20:02:23.356940 29932 net.cpp:408] ip3 <- ip2
I0428 20:02:23.356945 29932 net.cpp:382] ip3 -> ip3
I0428 20:02:23.357043 29932 net.cpp:124] Setting up ip3
I0428 20:02:23.357050 29932 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:23.357053 29932 net.cpp:139] Memory required for data: 3101440
I0428 20:02:23.357061 29932 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:23.357066 29932 net.cpp:86] Creating Layer relu3
I0428 20:02:23.357069 29932 net.cpp:408] relu3 <- ip3
I0428 20:02:23.357074 29932 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:23.357261 29932 net.cpp:124] Setting up relu3
I0428 20:02:23.357270 29932 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:23.357273 29932 net.cpp:139] Memory required for data: 3104000
I0428 20:02:23.357276 29932 layer_factory.hpp:77] Creating layer loss
I0428 20:02:23.357282 29932 net.cpp:86] Creating Layer loss
I0428 20:02:23.357285 29932 net.cpp:408] loss <- ip3
I0428 20:02:23.357290 29932 net.cpp:408] loss <- label
I0428 20:02:23.357295 29932 net.cpp:382] loss -> loss
I0428 20:02:23.357309 29932 layer_factory.hpp:77] Creating layer loss
I0428 20:02:23.357553 29932 net.cpp:124] Setting up loss
I0428 20:02:23.357561 29932 net.cpp:131] Top shape: (1)
I0428 20:02:23.357565 29932 net.cpp:134]     with loss weight 1
I0428 20:02:23.357579 29932 net.cpp:139] Memory required for data: 3104004
I0428 20:02:23.357583 29932 net.cpp:200] loss needs backward computation.
I0428 20:02:23.357586 29932 net.cpp:200] relu3 needs backward computation.
I0428 20:02:23.357589 29932 net.cpp:200] ip3 needs backward computation.
I0428 20:02:23.357592 29932 net.cpp:200] relu2 needs backward computation.
I0428 20:02:23.357595 29932 net.cpp:200] ip2 needs backward computation.
I0428 20:02:23.357599 29932 net.cpp:200] relu1 needs backward computation.
I0428 20:02:23.357600 29932 net.cpp:200] ip1 needs backward computation.
I0428 20:02:23.357604 29932 net.cpp:200] pool1 needs backward computation.
I0428 20:02:23.357606 29932 net.cpp:200] conv1 needs backward computation.
I0428 20:02:23.357609 29932 net.cpp:200] pool0 needs backward computation.
I0428 20:02:23.357614 29932 net.cpp:200] conv0 needs backward computation.
I0428 20:02:23.357631 29932 net.cpp:202] mnist does not need backward computation.
I0428 20:02:23.357635 29932 net.cpp:244] This network produces output loss
I0428 20:02:23.357658 29932 net.cpp:257] Network initialization done.
I0428 20:02:23.358053 29932 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test927.prototxt
I0428 20:02:23.358109 29932 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:23.358196 29932 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:23.358269 29932 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:23.358309 29932 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:23.358324 29932 net.cpp:86] Creating Layer mnist
I0428 20:02:23.358328 29932 net.cpp:382] mnist -> data
I0428 20:02:23.358335 29932 net.cpp:382] mnist -> label
I0428 20:02:23.358431 29932 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:23.360462 29932 net.cpp:124] Setting up mnist
I0428 20:02:23.360507 29932 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:23.360512 29932 net.cpp:131] Top shape: 100 (100)
I0428 20:02:23.360515 29932 net.cpp:139] Memory required for data: 314000
I0428 20:02:23.360518 29932 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:23.360525 29932 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:23.360528 29932 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:23.360533 29932 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:23.360540 29932 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:23.360581 29932 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:23.360587 29932 net.cpp:131] Top shape: 100 (100)
I0428 20:02:23.360590 29932 net.cpp:131] Top shape: 100 (100)
I0428 20:02:23.360594 29932 net.cpp:139] Memory required for data: 314800
I0428 20:02:23.360596 29932 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:23.360605 29932 net.cpp:86] Creating Layer conv0
I0428 20:02:23.360607 29932 net.cpp:408] conv0 <- data
I0428 20:02:23.360611 29932 net.cpp:382] conv0 -> conv0
I0428 20:02:23.362459 29932 net.cpp:124] Setting up conv0
I0428 20:02:23.362489 29932 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:23.362493 29932 net.cpp:139] Memory required for data: 2618800
I0428 20:02:23.362502 29932 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:23.362510 29932 net.cpp:86] Creating Layer pool0
I0428 20:02:23.362514 29932 net.cpp:408] pool0 <- conv0
I0428 20:02:23.362519 29932 net.cpp:382] pool0 -> pool0
I0428 20:02:23.362552 29932 net.cpp:124] Setting up pool0
I0428 20:02:23.362557 29932 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:23.362560 29932 net.cpp:139] Memory required for data: 3194800
I0428 20:02:23.362563 29932 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:23.362571 29932 net.cpp:86] Creating Layer conv1
I0428 20:02:23.362574 29932 net.cpp:408] conv1 <- pool0
I0428 20:02:23.362579 29932 net.cpp:382] conv1 -> conv1
I0428 20:02:23.364226 29932 net.cpp:124] Setting up conv1
I0428 20:02:23.364256 29932 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:23.364259 29932 net.cpp:139] Memory required for data: 4474800
I0428 20:02:23.364269 29932 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:23.364275 29932 net.cpp:86] Creating Layer pool1
I0428 20:02:23.364279 29932 net.cpp:408] pool1 <- conv1
I0428 20:02:23.364295 29932 net.cpp:382] pool1 -> pool1
I0428 20:02:23.364346 29932 net.cpp:124] Setting up pool1
I0428 20:02:23.364352 29932 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:23.364356 29932 net.cpp:139] Memory required for data: 4794800
I0428 20:02:23.364359 29932 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:23.364364 29932 net.cpp:86] Creating Layer ip1
I0428 20:02:23.364368 29932 net.cpp:408] ip1 <- pool1
I0428 20:02:23.364372 29932 net.cpp:382] ip1 -> ip1
I0428 20:02:23.364725 29932 net.cpp:124] Setting up ip1
I0428 20:02:23.364739 29932 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:23.364768 29932 net.cpp:139] Memory required for data: 4814800
I0428 20:02:23.364776 29932 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:23.364781 29932 net.cpp:86] Creating Layer relu1
I0428 20:02:23.364784 29932 net.cpp:408] relu1 <- ip1
I0428 20:02:23.364789 29932 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:23.364969 29932 net.cpp:124] Setting up relu1
I0428 20:02:23.364980 29932 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:23.364984 29932 net.cpp:139] Memory required for data: 4834800
I0428 20:02:23.364987 29932 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:23.364995 29932 net.cpp:86] Creating Layer ip2
I0428 20:02:23.364997 29932 net.cpp:408] ip2 <- ip1
I0428 20:02:23.365015 29932 net.cpp:382] ip2 -> ip2
I0428 20:02:23.365195 29932 net.cpp:124] Setting up ip2
I0428 20:02:23.365205 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.365212 29932 net.cpp:139] Memory required for data: 4838800
I0428 20:02:23.365218 29932 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:23.365223 29932 net.cpp:86] Creating Layer relu2
I0428 20:02:23.365226 29932 net.cpp:408] relu2 <- ip2
I0428 20:02:23.365231 29932 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:23.365427 29932 net.cpp:124] Setting up relu2
I0428 20:02:23.365452 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.365454 29932 net.cpp:139] Memory required for data: 4842800
I0428 20:02:23.365458 29932 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:23.365463 29932 net.cpp:86] Creating Layer ip3
I0428 20:02:23.365466 29932 net.cpp:408] ip3 <- ip2
I0428 20:02:23.365478 29932 net.cpp:382] ip3 -> ip3
I0428 20:02:23.365582 29932 net.cpp:124] Setting up ip3
I0428 20:02:23.365589 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.365592 29932 net.cpp:139] Memory required for data: 4846800
I0428 20:02:23.365600 29932 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:23.365604 29932 net.cpp:86] Creating Layer relu3
I0428 20:02:23.365607 29932 net.cpp:408] relu3 <- ip3
I0428 20:02:23.365612 29932 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:23.366435 29932 net.cpp:124] Setting up relu3
I0428 20:02:23.366446 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.366466 29932 net.cpp:139] Memory required for data: 4850800
I0428 20:02:23.366469 29932 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:23.366474 29932 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:23.366477 29932 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:23.366484 29932 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:23.366490 29932 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:23.366546 29932 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:23.366566 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.366570 29932 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:23.366574 29932 net.cpp:139] Memory required for data: 4858800
I0428 20:02:23.366576 29932 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:23.366581 29932 net.cpp:86] Creating Layer accuracy
I0428 20:02:23.366585 29932 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:23.366588 29932 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:23.366593 29932 net.cpp:382] accuracy -> accuracy
I0428 20:02:23.366600 29932 net.cpp:124] Setting up accuracy
I0428 20:02:23.366605 29932 net.cpp:131] Top shape: (1)
I0428 20:02:23.366607 29932 net.cpp:139] Memory required for data: 4858804
I0428 20:02:23.366611 29932 layer_factory.hpp:77] Creating layer loss
I0428 20:02:23.366616 29932 net.cpp:86] Creating Layer loss
I0428 20:02:23.366618 29932 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:23.366622 29932 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:23.366626 29932 net.cpp:382] loss -> loss
I0428 20:02:23.366632 29932 layer_factory.hpp:77] Creating layer loss
I0428 20:02:23.366866 29932 net.cpp:124] Setting up loss
I0428 20:02:23.366875 29932 net.cpp:131] Top shape: (1)
I0428 20:02:23.366879 29932 net.cpp:134]     with loss weight 1
I0428 20:02:23.366895 29932 net.cpp:139] Memory required for data: 4858808
I0428 20:02:23.366899 29932 net.cpp:200] loss needs backward computation.
I0428 20:02:23.366902 29932 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:23.366906 29932 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:23.366909 29932 net.cpp:200] relu3 needs backward computation.
I0428 20:02:23.366912 29932 net.cpp:200] ip3 needs backward computation.
I0428 20:02:23.366916 29932 net.cpp:200] relu2 needs backward computation.
I0428 20:02:23.366919 29932 net.cpp:200] ip2 needs backward computation.
I0428 20:02:23.366921 29932 net.cpp:200] relu1 needs backward computation.
I0428 20:02:23.366925 29932 net.cpp:200] ip1 needs backward computation.
I0428 20:02:23.366935 29932 net.cpp:200] pool1 needs backward computation.
I0428 20:02:23.366945 29932 net.cpp:200] conv1 needs backward computation.
I0428 20:02:23.366950 29932 net.cpp:200] pool0 needs backward computation.
I0428 20:02:23.366963 29932 net.cpp:200] conv0 needs backward computation.
I0428 20:02:23.366967 29932 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:23.366971 29932 net.cpp:202] mnist does not need backward computation.
I0428 20:02:23.366974 29932 net.cpp:244] This network produces output accuracy
I0428 20:02:23.366982 29932 net.cpp:244] This network produces output loss
I0428 20:02:23.366993 29932 net.cpp:257] Network initialization done.
I0428 20:02:23.367035 29932 solver.cpp:56] Solver scaffolding done.
I0428 20:02:23.367398 29932 caffe.cpp:248] Starting Optimization
I0428 20:02:23.367403 29932 solver.cpp:273] Solving LeNet
I0428 20:02:23.367406 29932 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:23.368377 29932 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:23.372773 29932 blocking_queue.cpp:49] Waiting for data
I0428 20:02:23.443627 29939 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:23.444190 29932 solver.cpp:398]     Test net output #0: accuracy = 0.1367
I0428 20:02:23.444224 29932 solver.cpp:398]     Test net output #1: loss = 2.3296 (* 1 = 2.3296 loss)
I0428 20:02:23.447485 29932 solver.cpp:219] Iteration 0 (-1.03276e-42 iter/s, 0.0800348s/100 iters), loss = 2.32161
I0428 20:02:23.447525 29932 solver.cpp:238]     Train net output #0: loss = 2.32161 (* 1 = 2.32161 loss)
I0428 20:02:23.447552 29932 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:23.557315 29932 solver.cpp:219] Iteration 100 (910.794 iter/s, 0.109794s/100 iters), loss = 0.440827
I0428 20:02:23.557354 29932 solver.cpp:238]     Train net output #0: loss = 0.440827 (* 1 = 0.440827 loss)
I0428 20:02:23.557360 29932 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:23.665333 29932 solver.cpp:219] Iteration 200 (926.073 iter/s, 0.107983s/100 iters), loss = 0.262685
I0428 20:02:23.665374 29932 solver.cpp:238]     Train net output #0: loss = 0.262685 (* 1 = 0.262685 loss)
I0428 20:02:23.665380 29932 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:23.775831 29932 solver.cpp:219] Iteration 300 (905.407 iter/s, 0.110448s/100 iters), loss = 0.177661
I0428 20:02:23.775869 29932 solver.cpp:238]     Train net output #0: loss = 0.177661 (* 1 = 0.177661 loss)
I0428 20:02:23.775876 29932 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:23.889230 29932 solver.cpp:219] Iteration 400 (882.105 iter/s, 0.113365s/100 iters), loss = 0.106064
I0428 20:02:23.889269 29932 solver.cpp:238]     Train net output #0: loss = 0.106064 (* 1 = 0.106064 loss)
I0428 20:02:23.889276 29932 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:23.998215 29932 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:24.051877 29939 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:24.052438 29932 solver.cpp:398]     Test net output #0: accuracy = 0.9609
I0428 20:02:24.052474 29932 solver.cpp:398]     Test net output #1: loss = 0.134257 (* 1 = 0.134257 loss)
I0428 20:02:24.053587 29932 solver.cpp:219] Iteration 500 (608.568 iter/s, 0.16432s/100 iters), loss = 0.106472
I0428 20:02:24.053645 29932 solver.cpp:238]     Train net output #0: loss = 0.106472 (* 1 = 0.106472 loss)
I0428 20:02:24.053653 29932 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:24.168792 29932 solver.cpp:219] Iteration 600 (868.516 iter/s, 0.115139s/100 iters), loss = 0.0885011
I0428 20:02:24.168838 29932 solver.cpp:238]     Train net output #0: loss = 0.088501 (* 1 = 0.088501 loss)
I0428 20:02:24.168845 29932 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:24.277572 29932 solver.cpp:219] Iteration 700 (919.758 iter/s, 0.108724s/100 iters), loss = 0.150601
I0428 20:02:24.277612 29932 solver.cpp:238]     Train net output #0: loss = 0.150601 (* 1 = 0.150601 loss)
I0428 20:02:24.277621 29932 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:24.387030 29932 solver.cpp:219] Iteration 800 (914.025 iter/s, 0.109406s/100 iters), loss = 0.414051
I0428 20:02:24.387069 29932 solver.cpp:238]     Train net output #0: loss = 0.414051 (* 1 = 0.414051 loss)
I0428 20:02:24.387076 29932 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:24.500738 29932 solver.cpp:219] Iteration 900 (879.857 iter/s, 0.113655s/100 iters), loss = 0.139499
I0428 20:02:24.500787 29932 solver.cpp:238]     Train net output #0: loss = 0.139499 (* 1 = 0.139499 loss)
I0428 20:02:24.500793 29932 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:24.536906 29938 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:24.609081 29932 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:24.610616 29932 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:24.611479 29932 solver.cpp:311] Iteration 1000, loss = 0.0907114
I0428 20:02:24.611495 29932 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:24.685750 29939 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:24.686344 29932 solver.cpp:398]     Test net output #0: accuracy = 0.9761
I0428 20:02:24.686372 29932 solver.cpp:398]     Test net output #1: loss = 0.0808847 (* 1 = 0.0808847 loss)
I0428 20:02:24.686381 29932 solver.cpp:316] Optimization Done.
I0428 20:02:24.686388 29932 caffe.cpp:259] Optimization Done.
