I0428 19:52:59.768703 27672 caffe.cpp:218] Using GPUs 0
I0428 19:52:59.805174 27672 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:00.317289 27672 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test676.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:00.317430 27672 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test676.prototxt
I0428 19:53:00.317844 27672 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:00.317863 27672 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:00.317966 27672 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:00.318043 27672 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:00.318141 27672 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:00.318164 27672 net.cpp:86] Creating Layer mnist
I0428 19:53:00.318171 27672 net.cpp:382] mnist -> data
I0428 19:53:00.318197 27672 net.cpp:382] mnist -> label
I0428 19:53:00.319310 27672 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:00.322078 27672 net.cpp:124] Setting up mnist
I0428 19:53:00.322099 27672 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:00.322105 27672 net.cpp:131] Top shape: 64 (64)
I0428 19:53:00.322109 27672 net.cpp:139] Memory required for data: 200960
I0428 19:53:00.322116 27672 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:00.322141 27672 net.cpp:86] Creating Layer conv0
I0428 19:53:00.322162 27672 net.cpp:408] conv0 <- data
I0428 19:53:00.322175 27672 net.cpp:382] conv0 -> conv0
I0428 19:53:00.605872 27672 net.cpp:124] Setting up conv0
I0428 19:53:00.605901 27672 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:00.605904 27672 net.cpp:139] Memory required for data: 938240
I0428 19:53:00.605921 27672 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:00.605934 27672 net.cpp:86] Creating Layer pool0
I0428 19:53:00.605938 27672 net.cpp:408] pool0 <- conv0
I0428 19:53:00.605943 27672 net.cpp:382] pool0 -> pool0
I0428 19:53:00.605990 27672 net.cpp:124] Setting up pool0
I0428 19:53:00.605998 27672 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:00.606001 27672 net.cpp:139] Memory required for data: 1122560
I0428 19:53:00.606004 27672 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:00.606015 27672 net.cpp:86] Creating Layer conv1
I0428 19:53:00.606021 27672 net.cpp:408] conv1 <- pool0
I0428 19:53:00.606026 27672 net.cpp:382] conv1 -> conv1
I0428 19:53:00.608834 27672 net.cpp:124] Setting up conv1
I0428 19:53:00.608850 27672 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:00.608853 27672 net.cpp:139] Memory required for data: 1941760
I0428 19:53:00.608862 27672 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:00.608870 27672 net.cpp:86] Creating Layer pool1
I0428 19:53:00.608873 27672 net.cpp:408] pool1 <- conv1
I0428 19:53:00.608878 27672 net.cpp:382] pool1 -> pool1
I0428 19:53:00.608916 27672 net.cpp:124] Setting up pool1
I0428 19:53:00.608922 27672 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:00.608925 27672 net.cpp:139] Memory required for data: 2146560
I0428 19:53:00.608928 27672 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:00.608935 27672 net.cpp:86] Creating Layer ip1
I0428 19:53:00.608938 27672 net.cpp:408] ip1 <- pool1
I0428 19:53:00.608943 27672 net.cpp:382] ip1 -> ip1
I0428 19:53:00.609088 27672 net.cpp:124] Setting up ip1
I0428 19:53:00.609097 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.609102 27672 net.cpp:139] Memory required for data: 2149120
I0428 19:53:00.609108 27672 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:00.609114 27672 net.cpp:86] Creating Layer relu1
I0428 19:53:00.609117 27672 net.cpp:408] relu1 <- ip1
I0428 19:53:00.609122 27672 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:00.609287 27672 net.cpp:124] Setting up relu1
I0428 19:53:00.609297 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.609300 27672 net.cpp:139] Memory required for data: 2151680
I0428 19:53:00.609303 27672 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:00.609310 27672 net.cpp:86] Creating Layer ip2
I0428 19:53:00.609315 27672 net.cpp:408] ip2 <- ip1
I0428 19:53:00.609320 27672 net.cpp:382] ip2 -> ip2
I0428 19:53:00.609414 27672 net.cpp:124] Setting up ip2
I0428 19:53:00.609421 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.609424 27672 net.cpp:139] Memory required for data: 2154240
I0428 19:53:00.609431 27672 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:00.609436 27672 net.cpp:86] Creating Layer relu2
I0428 19:53:00.609439 27672 net.cpp:408] relu2 <- ip2
I0428 19:53:00.609443 27672 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:00.610168 27672 net.cpp:124] Setting up relu2
I0428 19:53:00.610180 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.610184 27672 net.cpp:139] Memory required for data: 2156800
I0428 19:53:00.610188 27672 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:00.610194 27672 net.cpp:86] Creating Layer ip3
I0428 19:53:00.610198 27672 net.cpp:408] ip3 <- ip2
I0428 19:53:00.610203 27672 net.cpp:382] ip3 -> ip3
I0428 19:53:00.610301 27672 net.cpp:124] Setting up ip3
I0428 19:53:00.610307 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.610311 27672 net.cpp:139] Memory required for data: 2159360
I0428 19:53:00.610330 27672 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:00.610335 27672 net.cpp:86] Creating Layer relu3
I0428 19:53:00.610340 27672 net.cpp:408] relu3 <- ip3
I0428 19:53:00.610347 27672 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:00.610538 27672 net.cpp:124] Setting up relu3
I0428 19:53:00.610548 27672 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:00.610550 27672 net.cpp:139] Memory required for data: 2161920
I0428 19:53:00.610554 27672 layer_factory.hpp:77] Creating layer loss
I0428 19:53:00.610560 27672 net.cpp:86] Creating Layer loss
I0428 19:53:00.610564 27672 net.cpp:408] loss <- ip3
I0428 19:53:00.610569 27672 net.cpp:408] loss <- label
I0428 19:53:00.610574 27672 net.cpp:382] loss -> loss
I0428 19:53:00.610592 27672 layer_factory.hpp:77] Creating layer loss
I0428 19:53:00.610826 27672 net.cpp:124] Setting up loss
I0428 19:53:00.610834 27672 net.cpp:131] Top shape: (1)
I0428 19:53:00.610837 27672 net.cpp:134]     with loss weight 1
I0428 19:53:00.610852 27672 net.cpp:139] Memory required for data: 2161924
I0428 19:53:00.610855 27672 net.cpp:200] loss needs backward computation.
I0428 19:53:00.610859 27672 net.cpp:200] relu3 needs backward computation.
I0428 19:53:00.610862 27672 net.cpp:200] ip3 needs backward computation.
I0428 19:53:00.610865 27672 net.cpp:200] relu2 needs backward computation.
I0428 19:53:00.610868 27672 net.cpp:200] ip2 needs backward computation.
I0428 19:53:00.610872 27672 net.cpp:200] relu1 needs backward computation.
I0428 19:53:00.610873 27672 net.cpp:200] ip1 needs backward computation.
I0428 19:53:00.610877 27672 net.cpp:200] pool1 needs backward computation.
I0428 19:53:00.610880 27672 net.cpp:200] conv1 needs backward computation.
I0428 19:53:00.610882 27672 net.cpp:200] pool0 needs backward computation.
I0428 19:53:00.610885 27672 net.cpp:200] conv0 needs backward computation.
I0428 19:53:00.610905 27672 net.cpp:202] mnist does not need backward computation.
I0428 19:53:00.610908 27672 net.cpp:244] This network produces output loss
I0428 19:53:00.610919 27672 net.cpp:257] Network initialization done.
I0428 19:53:00.611285 27672 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test676.prototxt
I0428 19:53:00.611320 27672 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:00.611416 27672 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:00.611500 27672 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:00.611552 27672 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:00.611570 27672 net.cpp:86] Creating Layer mnist
I0428 19:53:00.611580 27672 net.cpp:382] mnist -> data
I0428 19:53:00.611588 27672 net.cpp:382] mnist -> label
I0428 19:53:00.611675 27672 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:00.613682 27672 net.cpp:124] Setting up mnist
I0428 19:53:00.613696 27672 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:00.613701 27672 net.cpp:131] Top shape: 100 (100)
I0428 19:53:00.613704 27672 net.cpp:139] Memory required for data: 314000
I0428 19:53:00.613708 27672 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:00.613718 27672 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:00.613721 27672 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:00.613750 27672 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:00.613757 27672 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:00.613797 27672 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:00.613803 27672 net.cpp:131] Top shape: 100 (100)
I0428 19:53:00.613806 27672 net.cpp:131] Top shape: 100 (100)
I0428 19:53:00.613809 27672 net.cpp:139] Memory required for data: 314800
I0428 19:53:00.613812 27672 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:00.613821 27672 net.cpp:86] Creating Layer conv0
I0428 19:53:00.613824 27672 net.cpp:408] conv0 <- data
I0428 19:53:00.613829 27672 net.cpp:382] conv0 -> conv0
I0428 19:53:00.615500 27672 net.cpp:124] Setting up conv0
I0428 19:53:00.615514 27672 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:00.615519 27672 net.cpp:139] Memory required for data: 1466800
I0428 19:53:00.615527 27672 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:00.615535 27672 net.cpp:86] Creating Layer pool0
I0428 19:53:00.615537 27672 net.cpp:408] pool0 <- conv0
I0428 19:53:00.615542 27672 net.cpp:382] pool0 -> pool0
I0428 19:53:00.615579 27672 net.cpp:124] Setting up pool0
I0428 19:53:00.615586 27672 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:00.615589 27672 net.cpp:139] Memory required for data: 1754800
I0428 19:53:00.615592 27672 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:00.615600 27672 net.cpp:86] Creating Layer conv1
I0428 19:53:00.615603 27672 net.cpp:408] conv1 <- pool0
I0428 19:53:00.615609 27672 net.cpp:382] conv1 -> conv1
I0428 19:53:00.617203 27672 net.cpp:124] Setting up conv1
I0428 19:53:00.617218 27672 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:00.617223 27672 net.cpp:139] Memory required for data: 3034800
I0428 19:53:00.617230 27672 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:00.617238 27672 net.cpp:86] Creating Layer pool1
I0428 19:53:00.617241 27672 net.cpp:408] pool1 <- conv1
I0428 19:53:00.617246 27672 net.cpp:382] pool1 -> pool1
I0428 19:53:00.617283 27672 net.cpp:124] Setting up pool1
I0428 19:53:00.617290 27672 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:00.617292 27672 net.cpp:139] Memory required for data: 3354800
I0428 19:53:00.617295 27672 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:00.617302 27672 net.cpp:86] Creating Layer ip1
I0428 19:53:00.617306 27672 net.cpp:408] ip1 <- pool1
I0428 19:53:00.617311 27672 net.cpp:382] ip1 -> ip1
I0428 19:53:00.617492 27672 net.cpp:124] Setting up ip1
I0428 19:53:00.617502 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.617516 27672 net.cpp:139] Memory required for data: 3358800
I0428 19:53:00.617524 27672 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:00.617537 27672 net.cpp:86] Creating Layer relu1
I0428 19:53:00.617547 27672 net.cpp:408] relu1 <- ip1
I0428 19:53:00.617557 27672 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:00.617797 27672 net.cpp:124] Setting up relu1
I0428 19:53:00.617806 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.617810 27672 net.cpp:139] Memory required for data: 3362800
I0428 19:53:00.617816 27672 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:00.617825 27672 net.cpp:86] Creating Layer ip2
I0428 19:53:00.617828 27672 net.cpp:408] ip2 <- ip1
I0428 19:53:00.617838 27672 net.cpp:382] ip2 -> ip2
I0428 19:53:00.617938 27672 net.cpp:124] Setting up ip2
I0428 19:53:00.617945 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.617949 27672 net.cpp:139] Memory required for data: 3366800
I0428 19:53:00.617954 27672 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:00.617964 27672 net.cpp:86] Creating Layer relu2
I0428 19:53:00.617966 27672 net.cpp:408] relu2 <- ip2
I0428 19:53:00.617975 27672 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:00.618139 27672 net.cpp:124] Setting up relu2
I0428 19:53:00.618149 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.618151 27672 net.cpp:139] Memory required for data: 3370800
I0428 19:53:00.618155 27672 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:00.618160 27672 net.cpp:86] Creating Layer ip3
I0428 19:53:00.618162 27672 net.cpp:408] ip3 <- ip2
I0428 19:53:00.618167 27672 net.cpp:382] ip3 -> ip3
I0428 19:53:00.618264 27672 net.cpp:124] Setting up ip3
I0428 19:53:00.618271 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.618273 27672 net.cpp:139] Memory required for data: 3374800
I0428 19:53:00.618281 27672 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:00.618286 27672 net.cpp:86] Creating Layer relu3
I0428 19:53:00.618293 27672 net.cpp:408] relu3 <- ip3
I0428 19:53:00.618304 27672 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:00.619141 27672 net.cpp:124] Setting up relu3
I0428 19:53:00.619155 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.619158 27672 net.cpp:139] Memory required for data: 3378800
I0428 19:53:00.619163 27672 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:00.619173 27672 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:00.619175 27672 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:00.619181 27672 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:00.619189 27672 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:00.619232 27672 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:00.619243 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.619247 27672 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:00.619251 27672 net.cpp:139] Memory required for data: 3386800
I0428 19:53:00.619253 27672 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:00.619259 27672 net.cpp:86] Creating Layer accuracy
I0428 19:53:00.619262 27672 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:00.619267 27672 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:00.619272 27672 net.cpp:382] accuracy -> accuracy
I0428 19:53:00.619279 27672 net.cpp:124] Setting up accuracy
I0428 19:53:00.619283 27672 net.cpp:131] Top shape: (1)
I0428 19:53:00.619287 27672 net.cpp:139] Memory required for data: 3386804
I0428 19:53:00.619289 27672 layer_factory.hpp:77] Creating layer loss
I0428 19:53:00.619294 27672 net.cpp:86] Creating Layer loss
I0428 19:53:00.619297 27672 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:00.619300 27672 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:00.619305 27672 net.cpp:382] loss -> loss
I0428 19:53:00.619310 27672 layer_factory.hpp:77] Creating layer loss
I0428 19:53:00.619550 27672 net.cpp:124] Setting up loss
I0428 19:53:00.619560 27672 net.cpp:131] Top shape: (1)
I0428 19:53:00.619565 27672 net.cpp:134]     with loss weight 1
I0428 19:53:00.619570 27672 net.cpp:139] Memory required for data: 3386808
I0428 19:53:00.619583 27672 net.cpp:200] loss needs backward computation.
I0428 19:53:00.619587 27672 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:00.619590 27672 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:00.619593 27672 net.cpp:200] relu3 needs backward computation.
I0428 19:53:00.619596 27672 net.cpp:200] ip3 needs backward computation.
I0428 19:53:00.619606 27672 net.cpp:200] relu2 needs backward computation.
I0428 19:53:00.619607 27672 net.cpp:200] ip2 needs backward computation.
I0428 19:53:00.619611 27672 net.cpp:200] relu1 needs backward computation.
I0428 19:53:00.619612 27672 net.cpp:200] ip1 needs backward computation.
I0428 19:53:00.619616 27672 net.cpp:200] pool1 needs backward computation.
I0428 19:53:00.619619 27672 net.cpp:200] conv1 needs backward computation.
I0428 19:53:00.619622 27672 net.cpp:200] pool0 needs backward computation.
I0428 19:53:00.619624 27672 net.cpp:200] conv0 needs backward computation.
I0428 19:53:00.619628 27672 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:00.619632 27672 net.cpp:202] mnist does not need backward computation.
I0428 19:53:00.619638 27672 net.cpp:244] This network produces output accuracy
I0428 19:53:00.619642 27672 net.cpp:244] This network produces output loss
I0428 19:53:00.619653 27672 net.cpp:257] Network initialization done.
I0428 19:53:00.619695 27672 solver.cpp:56] Solver scaffolding done.
I0428 19:53:00.620095 27672 caffe.cpp:248] Starting Optimization
I0428 19:53:00.620101 27672 solver.cpp:273] Solving LeNet
I0428 19:53:00.620105 27672 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:00.620262 27672 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:00.626194 27672 blocking_queue.cpp:49] Waiting for data
I0428 19:53:00.694849 27680 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:00.695390 27672 solver.cpp:398]     Test net output #0: accuracy = 0.1391
I0428 19:53:00.695430 27672 solver.cpp:398]     Test net output #1: loss = 2.32937 (* 1 = 2.32937 loss)
I0428 19:53:00.698038 27672 solver.cpp:219] Iteration 0 (-1.6331e-30 iter/s, 0.0778926s/100 iters), loss = 2.30968
I0428 19:53:00.698079 27672 solver.cpp:238]     Train net output #0: loss = 2.30968 (* 1 = 2.30968 loss)
I0428 19:53:00.698091 27672 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:00.805903 27672 solver.cpp:219] Iteration 100 (927.578 iter/s, 0.107808s/100 iters), loss = 0.924035
I0428 19:53:00.805944 27672 solver.cpp:238]     Train net output #0: loss = 0.924035 (* 1 = 0.924035 loss)
I0428 19:53:00.805954 27672 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:00.910711 27672 solver.cpp:219] Iteration 200 (954.568 iter/s, 0.104759s/100 iters), loss = 0.615891
I0428 19:53:00.910738 27672 solver.cpp:238]     Train net output #0: loss = 0.615891 (* 1 = 0.615891 loss)
I0428 19:53:00.910745 27672 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:01.013540 27672 solver.cpp:219] Iteration 300 (972.846 iter/s, 0.102791s/100 iters), loss = 0.368922
I0428 19:53:01.013568 27672 solver.cpp:238]     Train net output #0: loss = 0.368922 (* 1 = 0.368922 loss)
I0428 19:53:01.013576 27672 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:01.118585 27672 solver.cpp:219] Iteration 400 (952.317 iter/s, 0.105007s/100 iters), loss = 0.280613
I0428 19:53:01.118614 27672 solver.cpp:238]     Train net output #0: loss = 0.280613 (* 1 = 0.280613 loss)
I0428 19:53:01.118634 27672 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:01.224339 27672 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:01.297835 27680 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:01.298316 27672 solver.cpp:398]     Test net output #0: accuracy = 0.9279
I0428 19:53:01.298348 27672 solver.cpp:398]     Test net output #1: loss = 0.235299 (* 1 = 0.235299 loss)
I0428 19:53:01.299387 27672 solver.cpp:219] Iteration 500 (553.224 iter/s, 0.180759s/100 iters), loss = 0.192392
I0428 19:53:01.299439 27672 solver.cpp:238]     Train net output #0: loss = 0.192392 (* 1 = 0.192392 loss)
I0428 19:53:01.299451 27672 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:01.408380 27672 solver.cpp:219] Iteration 600 (918.028 iter/s, 0.108929s/100 iters), loss = 0.150218
I0428 19:53:01.408417 27672 solver.cpp:238]     Train net output #0: loss = 0.150218 (* 1 = 0.150218 loss)
I0428 19:53:01.408437 27672 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:01.520056 27672 solver.cpp:219] Iteration 700 (895.822 iter/s, 0.111629s/100 iters), loss = 0.315248
I0428 19:53:01.520083 27672 solver.cpp:238]     Train net output #0: loss = 0.315248 (* 1 = 0.315248 loss)
I0428 19:53:01.520090 27672 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:01.626653 27672 solver.cpp:219] Iteration 800 (938.478 iter/s, 0.106555s/100 iters), loss = 0.338567
I0428 19:53:01.626698 27672 solver.cpp:238]     Train net output #0: loss = 0.338567 (* 1 = 0.338567 loss)
I0428 19:53:01.626710 27672 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:01.742570 27672 solver.cpp:219] Iteration 900 (863.091 iter/s, 0.115863s/100 iters), loss = 0.219001
I0428 19:53:01.742607 27672 solver.cpp:238]     Train net output #0: loss = 0.219001 (* 1 = 0.219001 loss)
I0428 19:53:01.742616 27672 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:01.780767 27679 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:01.855273 27672 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:01.856428 27672 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:01.857072 27672 solver.cpp:311] Iteration 1000, loss = 0.192558
I0428 19:53:01.857089 27672 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:01.933279 27680 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:01.933841 27672 solver.cpp:398]     Test net output #0: accuracy = 0.9645
I0428 19:53:01.933866 27672 solver.cpp:398]     Test net output #1: loss = 0.122165 (* 1 = 0.122165 loss)
I0428 19:53:01.933873 27672 solver.cpp:316] Optimization Done.
I0428 19:53:01.933877 27672 caffe.cpp:259] Optimization Done.
