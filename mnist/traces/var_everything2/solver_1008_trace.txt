I0428 20:05:44.409828 30683 caffe.cpp:218] Using GPUs 0
I0428 20:05:44.439409 30683 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:44.892072 30683 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1008.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:44.892216 30683 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1008.prototxt
I0428 20:05:44.892616 30683 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:44.892633 30683 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:44.892746 30683 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:44.892829 30683 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:44.892930 30683 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:44.892952 30683 net.cpp:86] Creating Layer mnist
I0428 20:05:44.892959 30683 net.cpp:382] mnist -> data
I0428 20:05:44.892982 30683 net.cpp:382] mnist -> label
I0428 20:05:44.894059 30683 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:44.896477 30683 net.cpp:124] Setting up mnist
I0428 20:05:44.896494 30683 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:44.896500 30683 net.cpp:131] Top shape: 64 (64)
I0428 20:05:44.896504 30683 net.cpp:139] Memory required for data: 200960
I0428 20:05:44.896512 30683 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:44.896528 30683 net.cpp:86] Creating Layer conv0
I0428 20:05:44.896548 30683 net.cpp:408] conv0 <- data
I0428 20:05:44.896559 30683 net.cpp:382] conv0 -> conv0
I0428 20:05:45.165698 30683 net.cpp:124] Setting up conv0
I0428 20:05:45.165722 30683 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:45.165725 30683 net.cpp:139] Memory required for data: 3887360
I0428 20:05:45.165740 30683 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:45.165751 30683 net.cpp:86] Creating Layer pool0
I0428 20:05:45.165755 30683 net.cpp:408] pool0 <- conv0
I0428 20:05:45.165760 30683 net.cpp:382] pool0 -> pool0
I0428 20:05:45.165817 30683 net.cpp:124] Setting up pool0
I0428 20:05:45.165823 30683 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:45.165825 30683 net.cpp:139] Memory required for data: 4808960
I0428 20:05:45.165828 30683 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:45.165839 30683 net.cpp:86] Creating Layer conv1
I0428 20:05:45.165841 30683 net.cpp:408] conv1 <- pool0
I0428 20:05:45.165846 30683 net.cpp:382] conv1 -> conv1
I0428 20:05:45.168529 30683 net.cpp:124] Setting up conv1
I0428 20:05:45.168558 30683 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:45.168562 30683 net.cpp:139] Memory required for data: 4841728
I0428 20:05:45.168586 30683 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:45.168593 30683 net.cpp:86] Creating Layer pool1
I0428 20:05:45.168597 30683 net.cpp:408] pool1 <- conv1
I0428 20:05:45.168601 30683 net.cpp:382] pool1 -> pool1
I0428 20:05:45.168653 30683 net.cpp:124] Setting up pool1
I0428 20:05:45.168658 30683 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:45.168660 30683 net.cpp:139] Memory required for data: 4849920
I0428 20:05:45.168663 30683 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:45.168670 30683 net.cpp:86] Creating Layer ip1
I0428 20:05:45.168680 30683 net.cpp:408] ip1 <- pool1
I0428 20:05:45.168684 30683 net.cpp:382] ip1 -> ip1
I0428 20:05:45.168790 30683 net.cpp:124] Setting up ip1
I0428 20:05:45.168798 30683 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:45.168802 30683 net.cpp:139] Memory required for data: 4862720
I0428 20:05:45.168808 30683 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:45.168820 30683 net.cpp:86] Creating Layer relu1
I0428 20:05:45.168824 30683 net.cpp:408] relu1 <- ip1
I0428 20:05:45.168843 30683 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:45.169026 30683 net.cpp:124] Setting up relu1
I0428 20:05:45.169035 30683 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:45.169039 30683 net.cpp:139] Memory required for data: 4875520
I0428 20:05:45.169042 30683 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:45.169049 30683 net.cpp:86] Creating Layer ip2
I0428 20:05:45.169051 30683 net.cpp:408] ip2 <- ip1
I0428 20:05:45.169056 30683 net.cpp:382] ip2 -> ip2
I0428 20:05:45.169168 30683 net.cpp:124] Setting up ip2
I0428 20:05:45.169176 30683 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:05:45.169179 30683 net.cpp:139] Memory required for data: 4881920
I0428 20:05:45.169184 30683 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:45.169191 30683 net.cpp:86] Creating Layer relu2
I0428 20:05:45.169194 30683 net.cpp:408] relu2 <- ip2
I0428 20:05:45.169198 30683 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:45.170001 30683 net.cpp:124] Setting up relu2
I0428 20:05:45.170013 30683 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:05:45.170032 30683 net.cpp:139] Memory required for data: 4888320
I0428 20:05:45.170035 30683 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:45.170042 30683 net.cpp:86] Creating Layer ip3
I0428 20:05:45.170044 30683 net.cpp:408] ip3 <- ip2
I0428 20:05:45.170049 30683 net.cpp:382] ip3 -> ip3
I0428 20:05:45.170140 30683 net.cpp:124] Setting up ip3
I0428 20:05:45.170150 30683 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:45.170152 30683 net.cpp:139] Memory required for data: 4890880
I0428 20:05:45.170159 30683 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:45.170164 30683 net.cpp:86] Creating Layer relu3
I0428 20:05:45.170167 30683 net.cpp:408] relu3 <- ip3
I0428 20:05:45.170171 30683 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:45.170341 30683 net.cpp:124] Setting up relu3
I0428 20:05:45.170348 30683 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:45.170352 30683 net.cpp:139] Memory required for data: 4893440
I0428 20:05:45.170356 30683 layer_factory.hpp:77] Creating layer loss
I0428 20:05:45.170361 30683 net.cpp:86] Creating Layer loss
I0428 20:05:45.170363 30683 net.cpp:408] loss <- ip3
I0428 20:05:45.170367 30683 net.cpp:408] loss <- label
I0428 20:05:45.170372 30683 net.cpp:382] loss -> loss
I0428 20:05:45.170390 30683 layer_factory.hpp:77] Creating layer loss
I0428 20:05:45.170601 30683 net.cpp:124] Setting up loss
I0428 20:05:45.170611 30683 net.cpp:131] Top shape: (1)
I0428 20:05:45.170614 30683 net.cpp:134]     with loss weight 1
I0428 20:05:45.170627 30683 net.cpp:139] Memory required for data: 4893444
I0428 20:05:45.170631 30683 net.cpp:200] loss needs backward computation.
I0428 20:05:45.170634 30683 net.cpp:200] relu3 needs backward computation.
I0428 20:05:45.170637 30683 net.cpp:200] ip3 needs backward computation.
I0428 20:05:45.170640 30683 net.cpp:200] relu2 needs backward computation.
I0428 20:05:45.170644 30683 net.cpp:200] ip2 needs backward computation.
I0428 20:05:45.170646 30683 net.cpp:200] relu1 needs backward computation.
I0428 20:05:45.170650 30683 net.cpp:200] ip1 needs backward computation.
I0428 20:05:45.170652 30683 net.cpp:200] pool1 needs backward computation.
I0428 20:05:45.170655 30683 net.cpp:200] conv1 needs backward computation.
I0428 20:05:45.170658 30683 net.cpp:200] pool0 needs backward computation.
I0428 20:05:45.170661 30683 net.cpp:200] conv0 needs backward computation.
I0428 20:05:45.170665 30683 net.cpp:202] mnist does not need backward computation.
I0428 20:05:45.170667 30683 net.cpp:244] This network produces output loss
I0428 20:05:45.170676 30683 net.cpp:257] Network initialization done.
I0428 20:05:45.171049 30683 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1008.prototxt
I0428 20:05:45.171092 30683 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:45.171198 30683 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:45.171274 30683 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:45.171316 30683 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:45.171327 30683 net.cpp:86] Creating Layer mnist
I0428 20:05:45.171332 30683 net.cpp:382] mnist -> data
I0428 20:05:45.171340 30683 net.cpp:382] mnist -> label
I0428 20:05:45.171422 30683 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:45.173569 30683 net.cpp:124] Setting up mnist
I0428 20:05:45.173598 30683 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:45.173602 30683 net.cpp:131] Top shape: 100 (100)
I0428 20:05:45.173606 30683 net.cpp:139] Memory required for data: 314000
I0428 20:05:45.173609 30683 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:45.173635 30683 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:45.173640 30683 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:45.173643 30683 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:45.173650 30683 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:45.173686 30683 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:45.173691 30683 net.cpp:131] Top shape: 100 (100)
I0428 20:05:45.173694 30683 net.cpp:131] Top shape: 100 (100)
I0428 20:05:45.173696 30683 net.cpp:139] Memory required for data: 314800
I0428 20:05:45.173699 30683 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:45.173707 30683 net.cpp:86] Creating Layer conv0
I0428 20:05:45.173710 30683 net.cpp:408] conv0 <- data
I0428 20:05:45.173714 30683 net.cpp:382] conv0 -> conv0
I0428 20:05:45.175539 30683 net.cpp:124] Setting up conv0
I0428 20:05:45.175554 30683 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:45.175559 30683 net.cpp:139] Memory required for data: 6074800
I0428 20:05:45.175566 30683 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:45.175572 30683 net.cpp:86] Creating Layer pool0
I0428 20:05:45.175575 30683 net.cpp:408] pool0 <- conv0
I0428 20:05:45.175580 30683 net.cpp:382] pool0 -> pool0
I0428 20:05:45.175616 30683 net.cpp:124] Setting up pool0
I0428 20:05:45.175621 30683 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:45.175623 30683 net.cpp:139] Memory required for data: 7514800
I0428 20:05:45.175626 30683 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:45.175635 30683 net.cpp:86] Creating Layer conv1
I0428 20:05:45.175638 30683 net.cpp:408] conv1 <- pool0
I0428 20:05:45.175642 30683 net.cpp:382] conv1 -> conv1
I0428 20:05:45.177893 30683 net.cpp:124] Setting up conv1
I0428 20:05:45.177907 30683 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:45.177918 30683 net.cpp:139] Memory required for data: 7566000
I0428 20:05:45.177927 30683 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:45.177954 30683 net.cpp:86] Creating Layer pool1
I0428 20:05:45.177958 30683 net.cpp:408] pool1 <- conv1
I0428 20:05:45.177963 30683 net.cpp:382] pool1 -> pool1
I0428 20:05:45.178001 30683 net.cpp:124] Setting up pool1
I0428 20:05:45.178007 30683 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:45.178010 30683 net.cpp:139] Memory required for data: 7578800
I0428 20:05:45.178014 30683 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:45.178020 30683 net.cpp:86] Creating Layer ip1
I0428 20:05:45.178022 30683 net.cpp:408] ip1 <- pool1
I0428 20:05:45.178028 30683 net.cpp:382] ip1 -> ip1
I0428 20:05:45.178182 30683 net.cpp:124] Setting up ip1
I0428 20:05:45.178189 30683 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:45.178202 30683 net.cpp:139] Memory required for data: 7598800
I0428 20:05:45.178210 30683 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:45.178215 30683 net.cpp:86] Creating Layer relu1
I0428 20:05:45.178218 30683 net.cpp:408] relu1 <- ip1
I0428 20:05:45.178226 30683 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:45.178517 30683 net.cpp:124] Setting up relu1
I0428 20:05:45.178526 30683 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:45.178529 30683 net.cpp:139] Memory required for data: 7618800
I0428 20:05:45.178532 30683 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:45.178542 30683 net.cpp:86] Creating Layer ip2
I0428 20:05:45.178545 30683 net.cpp:408] ip2 <- ip1
I0428 20:05:45.178550 30683 net.cpp:382] ip2 -> ip2
I0428 20:05:45.178654 30683 net.cpp:124] Setting up ip2
I0428 20:05:45.178663 30683 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:05:45.178664 30683 net.cpp:139] Memory required for data: 7628800
I0428 20:05:45.178670 30683 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:45.178680 30683 net.cpp:86] Creating Layer relu2
I0428 20:05:45.178683 30683 net.cpp:408] relu2 <- ip2
I0428 20:05:45.178689 30683 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:45.178894 30683 net.cpp:124] Setting up relu2
I0428 20:05:45.178903 30683 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:05:45.178908 30683 net.cpp:139] Memory required for data: 7638800
I0428 20:05:45.178911 30683 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:45.178917 30683 net.cpp:86] Creating Layer ip3
I0428 20:05:45.178926 30683 net.cpp:408] ip3 <- ip2
I0428 20:05:45.178931 30683 net.cpp:382] ip3 -> ip3
I0428 20:05:45.179028 30683 net.cpp:124] Setting up ip3
I0428 20:05:45.179035 30683 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:45.179039 30683 net.cpp:139] Memory required for data: 7642800
I0428 20:05:45.179052 30683 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:45.179059 30683 net.cpp:86] Creating Layer relu3
I0428 20:05:45.179062 30683 net.cpp:408] relu3 <- ip3
I0428 20:05:45.179071 30683 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:45.179872 30683 net.cpp:124] Setting up relu3
I0428 20:05:45.179904 30683 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:45.179908 30683 net.cpp:139] Memory required for data: 7646800
I0428 20:05:45.179910 30683 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:45.179930 30683 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:45.179934 30683 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:45.179939 30683 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:45.179944 30683 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:45.179986 30683 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:45.179991 30683 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:45.179994 30683 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:45.179997 30683 net.cpp:139] Memory required for data: 7654800
I0428 20:05:45.179999 30683 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:45.180006 30683 net.cpp:86] Creating Layer accuracy
I0428 20:05:45.180008 30683 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:45.180018 30683 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:45.180039 30683 net.cpp:382] accuracy -> accuracy
I0428 20:05:45.180047 30683 net.cpp:124] Setting up accuracy
I0428 20:05:45.180050 30683 net.cpp:131] Top shape: (1)
I0428 20:05:45.180053 30683 net.cpp:139] Memory required for data: 7654804
I0428 20:05:45.180058 30683 layer_factory.hpp:77] Creating layer loss
I0428 20:05:45.180063 30683 net.cpp:86] Creating Layer loss
I0428 20:05:45.180065 30683 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:45.180080 30683 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:45.180084 30683 net.cpp:382] loss -> loss
I0428 20:05:45.180090 30683 layer_factory.hpp:77] Creating layer loss
I0428 20:05:45.180327 30683 net.cpp:124] Setting up loss
I0428 20:05:45.180337 30683 net.cpp:131] Top shape: (1)
I0428 20:05:45.180341 30683 net.cpp:134]     with loss weight 1
I0428 20:05:45.180346 30683 net.cpp:139] Memory required for data: 7654808
I0428 20:05:45.180374 30683 net.cpp:200] loss needs backward computation.
I0428 20:05:45.180378 30683 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:45.180382 30683 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:45.180385 30683 net.cpp:200] relu3 needs backward computation.
I0428 20:05:45.180387 30683 net.cpp:200] ip3 needs backward computation.
I0428 20:05:45.180390 30683 net.cpp:200] relu2 needs backward computation.
I0428 20:05:45.180393 30683 net.cpp:200] ip2 needs backward computation.
I0428 20:05:45.180395 30683 net.cpp:200] relu1 needs backward computation.
I0428 20:05:45.180398 30683 net.cpp:200] ip1 needs backward computation.
I0428 20:05:45.180402 30683 net.cpp:200] pool1 needs backward computation.
I0428 20:05:45.180404 30683 net.cpp:200] conv1 needs backward computation.
I0428 20:05:45.180408 30683 net.cpp:200] pool0 needs backward computation.
I0428 20:05:45.180410 30683 net.cpp:200] conv0 needs backward computation.
I0428 20:05:45.180420 30683 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:45.180423 30683 net.cpp:202] mnist does not need backward computation.
I0428 20:05:45.180426 30683 net.cpp:244] This network produces output accuracy
I0428 20:05:45.180435 30683 net.cpp:244] This network produces output loss
I0428 20:05:45.180446 30683 net.cpp:257] Network initialization done.
I0428 20:05:45.180485 30683 solver.cpp:56] Solver scaffolding done.
I0428 20:05:45.180845 30683 caffe.cpp:248] Starting Optimization
I0428 20:05:45.180853 30683 solver.cpp:273] Solving LeNet
I0428 20:05:45.180856 30683 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:45.181702 30683 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:45.187440 30683 blocking_queue.cpp:49] Waiting for data
I0428 20:05:45.257362 30690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:45.257941 30683 solver.cpp:398]     Test net output #0: accuracy = 0.1048
I0428 20:05:45.257959 30683 solver.cpp:398]     Test net output #1: loss = 2.30358 (* 1 = 2.30358 loss)
I0428 20:05:45.261046 30683 solver.cpp:219] Iteration 0 (-8.33355e-31 iter/s, 0.0801649s/100 iters), loss = 2.31661
I0428 20:05:45.261070 30683 solver.cpp:238]     Train net output #0: loss = 2.31661 (* 1 = 2.31661 loss)
I0428 20:05:45.261096 30683 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:45.351114 30683 solver.cpp:219] Iteration 100 (1110.73 iter/s, 0.0900311s/100 iters), loss = 2.00625
I0428 20:05:45.351137 30683 solver.cpp:238]     Train net output #0: loss = 2.00625 (* 1 = 2.00625 loss)
I0428 20:05:45.351158 30683 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:45.439541 30683 solver.cpp:219] Iteration 200 (1131.32 iter/s, 0.0883927s/100 iters), loss = 1.13977
I0428 20:05:45.439568 30683 solver.cpp:238]     Train net output #0: loss = 1.13977 (* 1 = 1.13977 loss)
I0428 20:05:45.439574 30683 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:45.526448 30683 solver.cpp:219] Iteration 300 (1151.13 iter/s, 0.086871s/100 iters), loss = 1.07658
I0428 20:05:45.526470 30683 solver.cpp:238]     Train net output #0: loss = 1.07658 (* 1 = 1.07658 loss)
I0428 20:05:45.526476 30683 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:45.613257 30683 solver.cpp:219] Iteration 400 (1152.37 iter/s, 0.0867779s/100 iters), loss = 0.4115
I0428 20:05:45.613281 30683 solver.cpp:238]     Train net output #0: loss = 0.4115 (* 1 = 0.4115 loss)
I0428 20:05:45.613286 30683 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:45.699671 30683 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:45.754454 30690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:45.755092 30683 solver.cpp:398]     Test net output #0: accuracy = 0.9201
I0428 20:05:45.755110 30683 solver.cpp:398]     Test net output #1: loss = 0.256324 (* 1 = 0.256324 loss)
I0428 20:05:45.755965 30683 solver.cpp:219] Iteration 500 (700.914 iter/s, 0.142671s/100 iters), loss = 0.29299
I0428 20:05:45.756028 30683 solver.cpp:238]     Train net output #0: loss = 0.29299 (* 1 = 0.29299 loss)
I0428 20:05:45.756050 30683 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:45.850149 30683 solver.cpp:219] Iteration 600 (1062.55 iter/s, 0.0941136s/100 iters), loss = 0.184693
I0428 20:05:45.850175 30683 solver.cpp:238]     Train net output #0: loss = 0.184693 (* 1 = 0.184693 loss)
I0428 20:05:45.850198 30683 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:45.938117 30683 solver.cpp:219] Iteration 700 (1137.24 iter/s, 0.087932s/100 iters), loss = 0.399723
I0428 20:05:45.938141 30683 solver.cpp:238]     Train net output #0: loss = 0.399723 (* 1 = 0.399723 loss)
I0428 20:05:45.938164 30683 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:46.029155 30683 solver.cpp:219] Iteration 800 (1098.85 iter/s, 0.0910039s/100 iters), loss = 0.360467
I0428 20:05:46.029181 30683 solver.cpp:238]     Train net output #0: loss = 0.360467 (* 1 = 0.360467 loss)
I0428 20:05:46.029199 30683 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:46.115206 30683 solver.cpp:219] Iteration 900 (1162.59 iter/s, 0.086015s/100 iters), loss = 0.26323
I0428 20:05:46.115231 30683 solver.cpp:238]     Train net output #0: loss = 0.26323 (* 1 = 0.26323 loss)
I0428 20:05:46.115254 30683 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:46.143795 30689 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:46.204885 30683 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:46.205615 30683 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:46.206149 30683 solver.cpp:311] Iteration 1000, loss = 0.256665
I0428 20:05:46.206166 30683 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:46.280050 30690 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:46.280634 30683 solver.cpp:398]     Test net output #0: accuracy = 0.9522
I0428 20:05:46.280656 30683 solver.cpp:398]     Test net output #1: loss = 0.14798 (* 1 = 0.14798 loss)
I0428 20:05:46.280661 30683 solver.cpp:316] Optimization Done.
I0428 20:05:46.280664 30683 caffe.cpp:259] Optimization Done.
