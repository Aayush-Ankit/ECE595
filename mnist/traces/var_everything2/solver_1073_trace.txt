I0428 20:08:04.263870 31300 caffe.cpp:218] Using GPUs 0
I0428 20:08:04.296931 31300 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:08:04.796072 31300 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1073.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:08:04.796277 31300 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1073.prototxt
I0428 20:08:04.796969 31300 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:08:04.797034 31300 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:08:04.797193 31300 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:08:04.797310 31300 layer_factory.hpp:77] Creating layer mnist
I0428 20:08:04.797448 31300 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:08:04.797478 31300 net.cpp:86] Creating Layer mnist
I0428 20:08:04.797489 31300 net.cpp:382] mnist -> data
I0428 20:08:04.797521 31300 net.cpp:382] mnist -> label
I0428 20:08:04.798949 31300 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:08:04.802448 31300 net.cpp:124] Setting up mnist
I0428 20:08:04.802482 31300 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:08:04.802491 31300 net.cpp:131] Top shape: 64 (64)
I0428 20:08:04.802497 31300 net.cpp:139] Memory required for data: 200960
I0428 20:08:04.802506 31300 layer_factory.hpp:77] Creating layer conv0
I0428 20:08:04.802531 31300 net.cpp:86] Creating Layer conv0
I0428 20:08:04.802567 31300 net.cpp:408] conv0 <- data
I0428 20:08:04.802584 31300 net.cpp:382] conv0 -> conv0
I0428 20:08:05.100805 31300 net.cpp:124] Setting up conv0
I0428 20:08:05.100845 31300 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:08:05.100852 31300 net.cpp:139] Memory required for data: 3887360
I0428 20:08:05.100868 31300 layer_factory.hpp:77] Creating layer pool0
I0428 20:08:05.100883 31300 net.cpp:86] Creating Layer pool0
I0428 20:08:05.100895 31300 net.cpp:408] pool0 <- conv0
I0428 20:08:05.100901 31300 net.cpp:382] pool0 -> pool0
I0428 20:08:05.100965 31300 net.cpp:124] Setting up pool0
I0428 20:08:05.100980 31300 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:08:05.100985 31300 net.cpp:139] Memory required for data: 4808960
I0428 20:08:05.100988 31300 layer_factory.hpp:77] Creating layer conv1
I0428 20:08:05.101001 31300 net.cpp:86] Creating Layer conv1
I0428 20:08:05.101011 31300 net.cpp:408] conv1 <- pool0
I0428 20:08:05.101017 31300 net.cpp:382] conv1 -> conv1
I0428 20:08:05.104168 31300 net.cpp:124] Setting up conv1
I0428 20:08:05.104185 31300 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:08:05.104190 31300 net.cpp:139] Memory required for data: 4972800
I0428 20:08:05.104200 31300 layer_factory.hpp:77] Creating layer pool1
I0428 20:08:05.104209 31300 net.cpp:86] Creating Layer pool1
I0428 20:08:05.104215 31300 net.cpp:408] pool1 <- conv1
I0428 20:08:05.104221 31300 net.cpp:382] pool1 -> pool1
I0428 20:08:05.104290 31300 net.cpp:124] Setting up pool1
I0428 20:08:05.104300 31300 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:08:05.104302 31300 net.cpp:139] Memory required for data: 5013760
I0428 20:08:05.104307 31300 layer_factory.hpp:77] Creating layer ip1
I0428 20:08:05.104315 31300 net.cpp:86] Creating Layer ip1
I0428 20:08:05.104321 31300 net.cpp:408] ip1 <- pool1
I0428 20:08:05.104327 31300 net.cpp:382] ip1 -> ip1
I0428 20:08:05.105444 31300 net.cpp:124] Setting up ip1
I0428 20:08:05.105459 31300 net.cpp:131] Top shape: 64 10 (640)
I0428 20:08:05.105464 31300 net.cpp:139] Memory required for data: 5016320
I0428 20:08:05.105474 31300 layer_factory.hpp:77] Creating layer relu1
I0428 20:08:05.105481 31300 net.cpp:86] Creating Layer relu1
I0428 20:08:05.105485 31300 net.cpp:408] relu1 <- ip1
I0428 20:08:05.105491 31300 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:08:05.105693 31300 net.cpp:124] Setting up relu1
I0428 20:08:05.105703 31300 net.cpp:131] Top shape: 64 10 (640)
I0428 20:08:05.105708 31300 net.cpp:139] Memory required for data: 5018880
I0428 20:08:05.105711 31300 layer_factory.hpp:77] Creating layer ip2
I0428 20:08:05.105720 31300 net.cpp:86] Creating Layer ip2
I0428 20:08:05.105723 31300 net.cpp:408] ip2 <- ip1
I0428 20:08:05.105729 31300 net.cpp:382] ip2 -> ip2
I0428 20:08:05.105850 31300 net.cpp:124] Setting up ip2
I0428 20:08:05.105859 31300 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:08:05.105862 31300 net.cpp:139] Memory required for data: 5031680
I0428 20:08:05.105870 31300 layer_factory.hpp:77] Creating layer relu2
I0428 20:08:05.105876 31300 net.cpp:86] Creating Layer relu2
I0428 20:08:05.105880 31300 net.cpp:408] relu2 <- ip2
I0428 20:08:05.105885 31300 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:08:05.106724 31300 net.cpp:124] Setting up relu2
I0428 20:08:05.106739 31300 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:08:05.106745 31300 net.cpp:139] Memory required for data: 5044480
I0428 20:08:05.106748 31300 layer_factory.hpp:77] Creating layer ip3
I0428 20:08:05.106756 31300 net.cpp:86] Creating Layer ip3
I0428 20:08:05.106760 31300 net.cpp:408] ip3 <- ip2
I0428 20:08:05.106766 31300 net.cpp:382] ip3 -> ip3
I0428 20:08:05.106894 31300 net.cpp:124] Setting up ip3
I0428 20:08:05.106902 31300 net.cpp:131] Top shape: 64 10 (640)
I0428 20:08:05.106906 31300 net.cpp:139] Memory required for data: 5047040
I0428 20:08:05.106916 31300 layer_factory.hpp:77] Creating layer relu3
I0428 20:08:05.106922 31300 net.cpp:86] Creating Layer relu3
I0428 20:08:05.106926 31300 net.cpp:408] relu3 <- ip3
I0428 20:08:05.106931 31300 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:08:05.107132 31300 net.cpp:124] Setting up relu3
I0428 20:08:05.107143 31300 net.cpp:131] Top shape: 64 10 (640)
I0428 20:08:05.107147 31300 net.cpp:139] Memory required for data: 5049600
I0428 20:08:05.107151 31300 layer_factory.hpp:77] Creating layer loss
I0428 20:08:05.107159 31300 net.cpp:86] Creating Layer loss
I0428 20:08:05.107163 31300 net.cpp:408] loss <- ip3
I0428 20:08:05.107168 31300 net.cpp:408] loss <- label
I0428 20:08:05.107174 31300 net.cpp:382] loss -> loss
I0428 20:08:05.107195 31300 layer_factory.hpp:77] Creating layer loss
I0428 20:08:05.107483 31300 net.cpp:124] Setting up loss
I0428 20:08:05.107506 31300 net.cpp:131] Top shape: (1)
I0428 20:08:05.107511 31300 net.cpp:134]     with loss weight 1
I0428 20:08:05.107537 31300 net.cpp:139] Memory required for data: 5049604
I0428 20:08:05.107540 31300 net.cpp:200] loss needs backward computation.
I0428 20:08:05.107545 31300 net.cpp:200] relu3 needs backward computation.
I0428 20:08:05.107548 31300 net.cpp:200] ip3 needs backward computation.
I0428 20:08:05.107553 31300 net.cpp:200] relu2 needs backward computation.
I0428 20:08:05.107555 31300 net.cpp:200] ip2 needs backward computation.
I0428 20:08:05.107558 31300 net.cpp:200] relu1 needs backward computation.
I0428 20:08:05.107563 31300 net.cpp:200] ip1 needs backward computation.
I0428 20:08:05.107565 31300 net.cpp:200] pool1 needs backward computation.
I0428 20:08:05.107569 31300 net.cpp:200] conv1 needs backward computation.
I0428 20:08:05.107573 31300 net.cpp:200] pool0 needs backward computation.
I0428 20:08:05.107576 31300 net.cpp:200] conv0 needs backward computation.
I0428 20:08:05.107580 31300 net.cpp:202] mnist does not need backward computation.
I0428 20:08:05.107583 31300 net.cpp:244] This network produces output loss
I0428 20:08:05.107595 31300 net.cpp:257] Network initialization done.
I0428 20:08:05.107976 31300 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1073.prototxt
I0428 20:08:05.108008 31300 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:08:05.108119 31300 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:08:05.108218 31300 layer_factory.hpp:77] Creating layer mnist
I0428 20:08:05.108269 31300 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:08:05.108284 31300 net.cpp:86] Creating Layer mnist
I0428 20:08:05.108292 31300 net.cpp:382] mnist -> data
I0428 20:08:05.108301 31300 net.cpp:382] mnist -> label
I0428 20:08:05.108409 31300 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:08:05.110592 31300 net.cpp:124] Setting up mnist
I0428 20:08:05.110615 31300 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:08:05.110620 31300 net.cpp:131] Top shape: 100 (100)
I0428 20:08:05.110623 31300 net.cpp:139] Memory required for data: 314000
I0428 20:08:05.110628 31300 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:08:05.110672 31300 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:08:05.110677 31300 net.cpp:408] label_mnist_1_split <- label
I0428 20:08:05.110683 31300 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:08:05.110692 31300 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:08:05.110750 31300 net.cpp:124] Setting up label_mnist_1_split
I0428 20:08:05.110757 31300 net.cpp:131] Top shape: 100 (100)
I0428 20:08:05.110761 31300 net.cpp:131] Top shape: 100 (100)
I0428 20:08:05.110765 31300 net.cpp:139] Memory required for data: 314800
I0428 20:08:05.110769 31300 layer_factory.hpp:77] Creating layer conv0
I0428 20:08:05.110780 31300 net.cpp:86] Creating Layer conv0
I0428 20:08:05.110783 31300 net.cpp:408] conv0 <- data
I0428 20:08:05.110791 31300 net.cpp:382] conv0 -> conv0
I0428 20:08:05.112779 31300 net.cpp:124] Setting up conv0
I0428 20:08:05.112795 31300 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:08:05.112799 31300 net.cpp:139] Memory required for data: 6074800
I0428 20:08:05.112829 31300 layer_factory.hpp:77] Creating layer pool0
I0428 20:08:05.112838 31300 net.cpp:86] Creating Layer pool0
I0428 20:08:05.112843 31300 net.cpp:408] pool0 <- conv0
I0428 20:08:05.112848 31300 net.cpp:382] pool0 -> pool0
I0428 20:08:05.112908 31300 net.cpp:124] Setting up pool0
I0428 20:08:05.112915 31300 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:08:05.112920 31300 net.cpp:139] Memory required for data: 7514800
I0428 20:08:05.112922 31300 layer_factory.hpp:77] Creating layer conv1
I0428 20:08:05.112934 31300 net.cpp:86] Creating Layer conv1
I0428 20:08:05.112938 31300 net.cpp:408] conv1 <- pool0
I0428 20:08:05.112946 31300 net.cpp:382] conv1 -> conv1
I0428 20:08:05.115353 31300 net.cpp:124] Setting up conv1
I0428 20:08:05.115371 31300 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:08:05.115376 31300 net.cpp:139] Memory required for data: 7770800
I0428 20:08:05.115396 31300 layer_factory.hpp:77] Creating layer pool1
I0428 20:08:05.115403 31300 net.cpp:86] Creating Layer pool1
I0428 20:08:05.115408 31300 net.cpp:408] pool1 <- conv1
I0428 20:08:05.115414 31300 net.cpp:382] pool1 -> pool1
I0428 20:08:05.115466 31300 net.cpp:124] Setting up pool1
I0428 20:08:05.115476 31300 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:08:05.115480 31300 net.cpp:139] Memory required for data: 7834800
I0428 20:08:05.115483 31300 layer_factory.hpp:77] Creating layer ip1
I0428 20:08:05.115491 31300 net.cpp:86] Creating Layer ip1
I0428 20:08:05.115495 31300 net.cpp:408] ip1 <- pool1
I0428 20:08:05.115502 31300 net.cpp:382] ip1 -> ip1
I0428 20:08:05.115655 31300 net.cpp:124] Setting up ip1
I0428 20:08:05.115665 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.115681 31300 net.cpp:139] Memory required for data: 7838800
I0428 20:08:05.115691 31300 layer_factory.hpp:77] Creating layer relu1
I0428 20:08:05.115698 31300 net.cpp:86] Creating Layer relu1
I0428 20:08:05.115702 31300 net.cpp:408] relu1 <- ip1
I0428 20:08:05.115707 31300 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:08:05.115947 31300 net.cpp:124] Setting up relu1
I0428 20:08:05.115962 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.115965 31300 net.cpp:139] Memory required for data: 7842800
I0428 20:08:05.115969 31300 layer_factory.hpp:77] Creating layer ip2
I0428 20:08:05.115978 31300 net.cpp:86] Creating Layer ip2
I0428 20:08:05.115983 31300 net.cpp:408] ip2 <- ip1
I0428 20:08:05.115998 31300 net.cpp:382] ip2 -> ip2
I0428 20:08:05.116128 31300 net.cpp:124] Setting up ip2
I0428 20:08:05.116137 31300 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:08:05.116142 31300 net.cpp:139] Memory required for data: 7862800
I0428 20:08:05.116148 31300 layer_factory.hpp:77] Creating layer relu2
I0428 20:08:05.116154 31300 net.cpp:86] Creating Layer relu2
I0428 20:08:05.116165 31300 net.cpp:408] relu2 <- ip2
I0428 20:08:05.116171 31300 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:08:05.116359 31300 net.cpp:124] Setting up relu2
I0428 20:08:05.116370 31300 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:08:05.116374 31300 net.cpp:139] Memory required for data: 7882800
I0428 20:08:05.116379 31300 layer_factory.hpp:77] Creating layer ip3
I0428 20:08:05.116392 31300 net.cpp:86] Creating Layer ip3
I0428 20:08:05.116396 31300 net.cpp:408] ip3 <- ip2
I0428 20:08:05.116403 31300 net.cpp:382] ip3 -> ip3
I0428 20:08:05.116528 31300 net.cpp:124] Setting up ip3
I0428 20:08:05.116536 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.116540 31300 net.cpp:139] Memory required for data: 7886800
I0428 20:08:05.116550 31300 layer_factory.hpp:77] Creating layer relu3
I0428 20:08:05.116555 31300 net.cpp:86] Creating Layer relu3
I0428 20:08:05.116559 31300 net.cpp:408] relu3 <- ip3
I0428 20:08:05.116565 31300 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:08:05.117506 31300 net.cpp:124] Setting up relu3
I0428 20:08:05.117519 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.117524 31300 net.cpp:139] Memory required for data: 7890800
I0428 20:08:05.117528 31300 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:08:05.117535 31300 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:08:05.117539 31300 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:08:05.117545 31300 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:08:05.117553 31300 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:08:05.117609 31300 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:08:05.117616 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.117622 31300 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:08:05.117640 31300 net.cpp:139] Memory required for data: 7898800
I0428 20:08:05.117645 31300 layer_factory.hpp:77] Creating layer accuracy
I0428 20:08:05.117650 31300 net.cpp:86] Creating Layer accuracy
I0428 20:08:05.117653 31300 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:08:05.117658 31300 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:08:05.117666 31300 net.cpp:382] accuracy -> accuracy
I0428 20:08:05.117673 31300 net.cpp:124] Setting up accuracy
I0428 20:08:05.117678 31300 net.cpp:131] Top shape: (1)
I0428 20:08:05.117682 31300 net.cpp:139] Memory required for data: 7898804
I0428 20:08:05.117686 31300 layer_factory.hpp:77] Creating layer loss
I0428 20:08:05.117691 31300 net.cpp:86] Creating Layer loss
I0428 20:08:05.117694 31300 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:08:05.117699 31300 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:08:05.117705 31300 net.cpp:382] loss -> loss
I0428 20:08:05.117712 31300 layer_factory.hpp:77] Creating layer loss
I0428 20:08:05.118001 31300 net.cpp:124] Setting up loss
I0428 20:08:05.118012 31300 net.cpp:131] Top shape: (1)
I0428 20:08:05.118016 31300 net.cpp:134]     with loss weight 1
I0428 20:08:05.118043 31300 net.cpp:139] Memory required for data: 7898808
I0428 20:08:05.118048 31300 net.cpp:200] loss needs backward computation.
I0428 20:08:05.118053 31300 net.cpp:202] accuracy does not need backward computation.
I0428 20:08:05.118064 31300 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:08:05.118069 31300 net.cpp:200] relu3 needs backward computation.
I0428 20:08:05.118072 31300 net.cpp:200] ip3 needs backward computation.
I0428 20:08:05.118086 31300 net.cpp:200] relu2 needs backward computation.
I0428 20:08:05.118090 31300 net.cpp:200] ip2 needs backward computation.
I0428 20:08:05.118093 31300 net.cpp:200] relu1 needs backward computation.
I0428 20:08:05.118108 31300 net.cpp:200] ip1 needs backward computation.
I0428 20:08:05.118111 31300 net.cpp:200] pool1 needs backward computation.
I0428 20:08:05.118115 31300 net.cpp:200] conv1 needs backward computation.
I0428 20:08:05.118119 31300 net.cpp:200] pool0 needs backward computation.
I0428 20:08:05.118122 31300 net.cpp:200] conv0 needs backward computation.
I0428 20:08:05.118127 31300 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:08:05.118131 31300 net.cpp:202] mnist does not need backward computation.
I0428 20:08:05.118140 31300 net.cpp:244] This network produces output accuracy
I0428 20:08:05.118144 31300 net.cpp:244] This network produces output loss
I0428 20:08:05.118158 31300 net.cpp:257] Network initialization done.
I0428 20:08:05.118208 31300 solver.cpp:56] Solver scaffolding done.
I0428 20:08:05.118600 31300 caffe.cpp:248] Starting Optimization
I0428 20:08:05.118607 31300 solver.cpp:273] Solving LeNet
I0428 20:08:05.118613 31300 solver.cpp:274] Learning Rate Policy: inv
I0428 20:08:05.119629 31300 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:08:05.125080 31300 blocking_queue.cpp:49] Waiting for data
I0428 20:08:05.193895 31307 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:08:05.194525 31300 solver.cpp:398]     Test net output #0: accuracy = 0.1011
I0428 20:08:05.194547 31300 solver.cpp:398]     Test net output #1: loss = 2.31432 (* 1 = 2.31432 loss)
I0428 20:08:05.198494 31300 solver.cpp:219] Iteration 0 (2.8509 iter/s, 0.0798515s/100 iters), loss = 2.28707
I0428 20:08:05.198523 31300 solver.cpp:238]     Train net output #0: loss = 2.28707 (* 1 = 2.28707 loss)
I0428 20:08:05.198547 31300 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:08:05.292768 31300 solver.cpp:219] Iteration 100 (1061.23 iter/s, 0.0942306s/100 iters), loss = 1.40721
I0428 20:08:05.292798 31300 solver.cpp:238]     Train net output #0: loss = 1.40721 (* 1 = 1.40721 loss)
I0428 20:08:05.292805 31300 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:08:05.386299 31300 solver.cpp:219] Iteration 200 (1069.61 iter/s, 0.0934922s/100 iters), loss = 1.4975
I0428 20:08:05.386328 31300 solver.cpp:238]     Train net output #0: loss = 1.4975 (* 1 = 1.4975 loss)
I0428 20:08:05.386337 31300 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:08:05.479935 31300 solver.cpp:219] Iteration 300 (1068.4 iter/s, 0.0935977s/100 iters), loss = 1.08311
I0428 20:08:05.479964 31300 solver.cpp:238]     Train net output #0: loss = 1.08311 (* 1 = 1.08311 loss)
I0428 20:08:05.479971 31300 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:08:05.573578 31300 solver.cpp:219] Iteration 400 (1068.33 iter/s, 0.0936038s/100 iters), loss = 0.720124
I0428 20:08:05.573607 31300 solver.cpp:238]     Train net output #0: loss = 0.720124 (* 1 = 0.720124 loss)
I0428 20:08:05.573614 31300 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:08:05.666265 31300 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:08:05.721949 31307 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:08:05.722542 31300 solver.cpp:398]     Test net output #0: accuracy = 0.756
I0428 20:08:05.722559 31300 solver.cpp:398]     Test net output #1: loss = 0.630734 (* 1 = 0.630734 loss)
I0428 20:08:05.723697 31300 solver.cpp:219] Iteration 500 (666.318 iter/s, 0.150078s/100 iters), loss = 0.502964
I0428 20:08:05.723718 31300 solver.cpp:238]     Train net output #0: loss = 0.502964 (* 1 = 0.502964 loss)
I0428 20:08:05.723743 31300 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:08:05.825136 31300 solver.cpp:219] Iteration 600 (986.11 iter/s, 0.101409s/100 iters), loss = 0.812767
I0428 20:08:05.825160 31300 solver.cpp:238]     Train net output #0: loss = 0.812767 (* 1 = 0.812767 loss)
I0428 20:08:05.825182 31300 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:08:05.917371 31300 solver.cpp:219] Iteration 700 (1084.59 iter/s, 0.092201s/100 iters), loss = 0.668994
I0428 20:08:05.917395 31300 solver.cpp:238]     Train net output #0: loss = 0.668994 (* 1 = 0.668994 loss)
I0428 20:08:05.917418 31300 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:08:06.007836 31300 solver.cpp:219] Iteration 800 (1105.82 iter/s, 0.0904305s/100 iters), loss = 0.930422
I0428 20:08:06.007863 31300 solver.cpp:238]     Train net output #0: loss = 0.930422 (* 1 = 0.930422 loss)
I0428 20:08:06.007869 31300 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:08:06.098359 31300 solver.cpp:219] Iteration 900 (1105.11 iter/s, 0.0904888s/100 iters), loss = 0.879133
I0428 20:08:06.098383 31300 solver.cpp:238]     Train net output #0: loss = 0.879133 (* 1 = 0.879133 loss)
I0428 20:08:06.098404 31300 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:08:06.128381 31306 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:08:06.187744 31300 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:08:06.188649 31300 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:08:06.189237 31300 solver.cpp:311] Iteration 1000, loss = 0.527715
I0428 20:08:06.189254 31300 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:08:06.244897 31307 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:08:06.245520 31300 solver.cpp:398]     Test net output #0: accuracy = 0.7728
I0428 20:08:06.245538 31300 solver.cpp:398]     Test net output #1: loss = 0.559246 (* 1 = 0.559246 loss)
I0428 20:08:06.245543 31300 solver.cpp:316] Optimization Done.
I0428 20:08:06.245546 31300 caffe.cpp:259] Optimization Done.
