I0428 19:41:13.071864 24771 caffe.cpp:218] Using GPUs 0
I0428 19:41:13.112105 24771 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:13.628482 24771 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test358.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:13.628653 24771 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test358.prototxt
I0428 19:41:13.629031 24771 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:13.629055 24771 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:13.629150 24771 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:13.629250 24771 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:13.629384 24771 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:13.629415 24771 net.cpp:86] Creating Layer mnist
I0428 19:41:13.629427 24771 net.cpp:382] mnist -> data
I0428 19:41:13.629458 24771 net.cpp:382] mnist -> label
I0428 19:41:13.630697 24771 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:13.633168 24771 net.cpp:124] Setting up mnist
I0428 19:41:13.633188 24771 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:13.633199 24771 net.cpp:131] Top shape: 64 (64)
I0428 19:41:13.633205 24771 net.cpp:139] Memory required for data: 200960
I0428 19:41:13.633218 24771 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:13.633239 24771 net.cpp:86] Creating Layer conv0
I0428 19:41:13.633250 24771 net.cpp:408] conv0 <- data
I0428 19:41:13.633267 24771 net.cpp:382] conv0 -> conv0
I0428 19:41:13.901119 24771 net.cpp:124] Setting up conv0
I0428 19:41:13.901162 24771 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:13.901170 24771 net.cpp:139] Memory required for data: 495872
I0428 19:41:13.901229 24771 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:13.901249 24771 net.cpp:86] Creating Layer pool0
I0428 19:41:13.901271 24771 net.cpp:408] pool0 <- conv0
I0428 19:41:13.901281 24771 net.cpp:382] pool0 -> pool0
I0428 19:41:13.901336 24771 net.cpp:124] Setting up pool0
I0428 19:41:13.901345 24771 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:13.901350 24771 net.cpp:139] Memory required for data: 569600
I0428 19:41:13.901355 24771 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:13.901371 24771 net.cpp:86] Creating Layer conv1
I0428 19:41:13.901377 24771 net.cpp:408] conv1 <- pool0
I0428 19:41:13.901386 24771 net.cpp:382] conv1 -> conv1
I0428 19:41:13.903373 24771 net.cpp:124] Setting up conv1
I0428 19:41:13.903390 24771 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:13.903396 24771 net.cpp:139] Memory required for data: 733440
I0428 19:41:13.903409 24771 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:13.903424 24771 net.cpp:86] Creating Layer pool1
I0428 19:41:13.903430 24771 net.cpp:408] pool1 <- conv1
I0428 19:41:13.903439 24771 net.cpp:382] pool1 -> pool1
I0428 19:41:13.903517 24771 net.cpp:124] Setting up pool1
I0428 19:41:13.903540 24771 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:13.903545 24771 net.cpp:139] Memory required for data: 774400
I0428 19:41:13.903550 24771 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:13.903561 24771 net.cpp:86] Creating Layer ip1
I0428 19:41:13.903566 24771 net.cpp:408] ip1 <- pool1
I0428 19:41:13.903575 24771 net.cpp:382] ip1 -> ip1
I0428 19:41:13.904585 24771 net.cpp:124] Setting up ip1
I0428 19:41:13.904599 24771 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:41:13.904604 24771 net.cpp:139] Memory required for data: 780800
I0428 19:41:13.904618 24771 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:13.904628 24771 net.cpp:86] Creating Layer relu1
I0428 19:41:13.904633 24771 net.cpp:408] relu1 <- ip1
I0428 19:41:13.904644 24771 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:13.904903 24771 net.cpp:124] Setting up relu1
I0428 19:41:13.904914 24771 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:41:13.904935 24771 net.cpp:139] Memory required for data: 787200
I0428 19:41:13.904940 24771 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:13.904953 24771 net.cpp:86] Creating Layer ip2
I0428 19:41:13.904959 24771 net.cpp:408] ip2 <- ip1
I0428 19:41:13.904968 24771 net.cpp:382] ip2 -> ip2
I0428 19:41:13.905083 24771 net.cpp:124] Setting up ip2
I0428 19:41:13.905093 24771 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:13.905098 24771 net.cpp:139] Memory required for data: 789760
I0428 19:41:13.905107 24771 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:13.905118 24771 net.cpp:86] Creating Layer relu2
I0428 19:41:13.905124 24771 net.cpp:408] relu2 <- ip2
I0428 19:41:13.905134 24771 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:13.906007 24771 net.cpp:124] Setting up relu2
I0428 19:41:13.906035 24771 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:13.906041 24771 net.cpp:139] Memory required for data: 792320
I0428 19:41:13.906046 24771 layer_factory.hpp:77] Creating layer loss
I0428 19:41:13.906059 24771 net.cpp:86] Creating Layer loss
I0428 19:41:13.906064 24771 net.cpp:408] loss <- ip2
I0428 19:41:13.906072 24771 net.cpp:408] loss <- label
I0428 19:41:13.906080 24771 net.cpp:382] loss -> loss
I0428 19:41:13.906105 24771 layer_factory.hpp:77] Creating layer loss
I0428 19:41:13.906378 24771 net.cpp:124] Setting up loss
I0428 19:41:13.906388 24771 net.cpp:131] Top shape: (1)
I0428 19:41:13.906394 24771 net.cpp:134]     with loss weight 1
I0428 19:41:13.906412 24771 net.cpp:139] Memory required for data: 792324
I0428 19:41:13.906419 24771 net.cpp:200] loss needs backward computation.
I0428 19:41:13.906424 24771 net.cpp:200] relu2 needs backward computation.
I0428 19:41:13.906428 24771 net.cpp:200] ip2 needs backward computation.
I0428 19:41:13.906433 24771 net.cpp:200] relu1 needs backward computation.
I0428 19:41:13.906453 24771 net.cpp:200] ip1 needs backward computation.
I0428 19:41:13.906458 24771 net.cpp:200] pool1 needs backward computation.
I0428 19:41:13.906489 24771 net.cpp:200] conv1 needs backward computation.
I0428 19:41:13.906496 24771 net.cpp:200] pool0 needs backward computation.
I0428 19:41:13.906500 24771 net.cpp:200] conv0 needs backward computation.
I0428 19:41:13.906507 24771 net.cpp:202] mnist does not need backward computation.
I0428 19:41:13.906514 24771 net.cpp:244] This network produces output loss
I0428 19:41:13.906528 24771 net.cpp:257] Network initialization done.
I0428 19:41:13.906865 24771 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test358.prototxt
I0428 19:41:13.906898 24771 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:13.906991 24771 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:13.907104 24771 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:13.907160 24771 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:13.907177 24771 net.cpp:86] Creating Layer mnist
I0428 19:41:13.907186 24771 net.cpp:382] mnist -> data
I0428 19:41:13.907197 24771 net.cpp:382] mnist -> label
I0428 19:41:13.907333 24771 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:13.909791 24771 net.cpp:124] Setting up mnist
I0428 19:41:13.909822 24771 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:13.909831 24771 net.cpp:131] Top shape: 100 (100)
I0428 19:41:13.909850 24771 net.cpp:139] Memory required for data: 314000
I0428 19:41:13.909857 24771 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:13.909881 24771 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:13.909888 24771 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:13.909898 24771 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:13.909910 24771 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:13.910034 24771 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:13.910054 24771 net.cpp:131] Top shape: 100 (100)
I0428 19:41:13.910075 24771 net.cpp:131] Top shape: 100 (100)
I0428 19:41:13.910080 24771 net.cpp:139] Memory required for data: 314800
I0428 19:41:13.910086 24771 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:13.910102 24771 net.cpp:86] Creating Layer conv0
I0428 19:41:13.910109 24771 net.cpp:408] conv0 <- data
I0428 19:41:13.910118 24771 net.cpp:382] conv0 -> conv0
I0428 19:41:13.911828 24771 net.cpp:124] Setting up conv0
I0428 19:41:13.911842 24771 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:13.911847 24771 net.cpp:139] Memory required for data: 775600
I0428 19:41:13.911877 24771 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:13.911890 24771 net.cpp:86] Creating Layer pool0
I0428 19:41:13.911897 24771 net.cpp:408] pool0 <- conv0
I0428 19:41:13.911906 24771 net.cpp:382] pool0 -> pool0
I0428 19:41:13.911968 24771 net.cpp:124] Setting up pool0
I0428 19:41:13.911978 24771 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:13.911983 24771 net.cpp:139] Memory required for data: 890800
I0428 19:41:13.911989 24771 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:13.912008 24771 net.cpp:86] Creating Layer conv1
I0428 19:41:13.912014 24771 net.cpp:408] conv1 <- pool0
I0428 19:41:13.912026 24771 net.cpp:382] conv1 -> conv1
I0428 19:41:13.913584 24771 net.cpp:124] Setting up conv1
I0428 19:41:13.913599 24771 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:13.913604 24771 net.cpp:139] Memory required for data: 1146800
I0428 19:41:13.913619 24771 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:13.913630 24771 net.cpp:86] Creating Layer pool1
I0428 19:41:13.913635 24771 net.cpp:408] pool1 <- conv1
I0428 19:41:13.913645 24771 net.cpp:382] pool1 -> pool1
I0428 19:41:13.913700 24771 net.cpp:124] Setting up pool1
I0428 19:41:13.913709 24771 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:13.913717 24771 net.cpp:139] Memory required for data: 1210800
I0428 19:41:13.913722 24771 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:13.913733 24771 net.cpp:86] Creating Layer ip1
I0428 19:41:13.913739 24771 net.cpp:408] ip1 <- pool1
I0428 19:41:13.913748 24771 net.cpp:382] ip1 -> ip1
I0428 19:41:13.913882 24771 net.cpp:124] Setting up ip1
I0428 19:41:13.913894 24771 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:41:13.913899 24771 net.cpp:139] Memory required for data: 1220800
I0428 19:41:13.913914 24771 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:13.913925 24771 net.cpp:86] Creating Layer relu1
I0428 19:41:13.913934 24771 net.cpp:408] relu1 <- ip1
I0428 19:41:13.913942 24771 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:13.914151 24771 net.cpp:124] Setting up relu1
I0428 19:41:13.914173 24771 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:41:13.914180 24771 net.cpp:139] Memory required for data: 1230800
I0428 19:41:13.914185 24771 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:13.914197 24771 net.cpp:86] Creating Layer ip2
I0428 19:41:13.914202 24771 net.cpp:408] ip2 <- ip1
I0428 19:41:13.914213 24771 net.cpp:382] ip2 -> ip2
I0428 19:41:13.914326 24771 net.cpp:124] Setting up ip2
I0428 19:41:13.914335 24771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:13.914341 24771 net.cpp:139] Memory required for data: 1234800
I0428 19:41:13.914351 24771 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:13.914361 24771 net.cpp:86] Creating Layer relu2
I0428 19:41:13.914367 24771 net.cpp:408] relu2 <- ip2
I0428 19:41:13.914374 24771 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:13.914572 24771 net.cpp:124] Setting up relu2
I0428 19:41:13.914583 24771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:13.914589 24771 net.cpp:139] Memory required for data: 1238800
I0428 19:41:13.914594 24771 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:41:13.914602 24771 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:41:13.914608 24771 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:41:13.914615 24771 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:41:13.914638 24771 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:41:13.914685 24771 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:41:13.914693 24771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:13.914700 24771 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:13.914705 24771 net.cpp:139] Memory required for data: 1246800
I0428 19:41:13.914710 24771 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:13.914721 24771 net.cpp:86] Creating Layer accuracy
I0428 19:41:13.914726 24771 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:41:13.914733 24771 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:13.914741 24771 net.cpp:382] accuracy -> accuracy
I0428 19:41:13.914752 24771 net.cpp:124] Setting up accuracy
I0428 19:41:13.914760 24771 net.cpp:131] Top shape: (1)
I0428 19:41:13.914765 24771 net.cpp:139] Memory required for data: 1246804
I0428 19:41:13.914770 24771 layer_factory.hpp:77] Creating layer loss
I0428 19:41:13.914779 24771 net.cpp:86] Creating Layer loss
I0428 19:41:13.914785 24771 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:41:13.914791 24771 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:13.914799 24771 net.cpp:382] loss -> loss
I0428 19:41:13.914808 24771 layer_factory.hpp:77] Creating layer loss
I0428 19:41:13.915062 24771 net.cpp:124] Setting up loss
I0428 19:41:13.915076 24771 net.cpp:131] Top shape: (1)
I0428 19:41:13.915081 24771 net.cpp:134]     with loss weight 1
I0428 19:41:13.915092 24771 net.cpp:139] Memory required for data: 1246808
I0428 19:41:13.915098 24771 net.cpp:200] loss needs backward computation.
I0428 19:41:13.915104 24771 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:13.915112 24771 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:41:13.915117 24771 net.cpp:200] relu2 needs backward computation.
I0428 19:41:13.915122 24771 net.cpp:200] ip2 needs backward computation.
I0428 19:41:13.915129 24771 net.cpp:200] relu1 needs backward computation.
I0428 19:41:13.915133 24771 net.cpp:200] ip1 needs backward computation.
I0428 19:41:13.915138 24771 net.cpp:200] pool1 needs backward computation.
I0428 19:41:13.915144 24771 net.cpp:200] conv1 needs backward computation.
I0428 19:41:13.915151 24771 net.cpp:200] pool0 needs backward computation.
I0428 19:41:13.915156 24771 net.cpp:200] conv0 needs backward computation.
I0428 19:41:13.915161 24771 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:13.915169 24771 net.cpp:202] mnist does not need backward computation.
I0428 19:41:13.915175 24771 net.cpp:244] This network produces output accuracy
I0428 19:41:13.915194 24771 net.cpp:244] This network produces output loss
I0428 19:41:13.915208 24771 net.cpp:257] Network initialization done.
I0428 19:41:13.915271 24771 solver.cpp:56] Solver scaffolding done.
I0428 19:41:13.915556 24771 caffe.cpp:248] Starting Optimization
I0428 19:41:13.915565 24771 solver.cpp:273] Solving LeNet
I0428 19:41:13.915568 24771 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:13.916339 24771 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:13.919703 24771 blocking_queue.cpp:49] Waiting for data
I0428 19:41:13.970847 24778 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:13.971264 24771 solver.cpp:398]     Test net output #0: accuracy = 0.1174
I0428 19:41:13.971287 24771 solver.cpp:398]     Test net output #1: loss = 2.29837 (* 1 = 2.29837 loss)
I0428 19:41:13.973070 24771 solver.cpp:219] Iteration 0 (-1.41391e-42 iter/s, 0.057471s/100 iters), loss = 2.28346
I0428 19:41:13.973101 24771 solver.cpp:238]     Train net output #0: loss = 2.28346 (* 1 = 2.28346 loss)
I0428 19:41:13.973147 24771 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:14.053411 24771 solver.cpp:219] Iteration 100 (1245.28 iter/s, 0.0803029s/100 iters), loss = 0.677825
I0428 19:41:14.053439 24771 solver.cpp:238]     Train net output #0: loss = 0.677825 (* 1 = 0.677825 loss)
I0428 19:41:14.053464 24771 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:14.122030 24771 solver.cpp:219] Iteration 200 (1458.16 iter/s, 0.0685795s/100 iters), loss = 1.10487
I0428 19:41:14.122071 24771 solver.cpp:238]     Train net output #0: loss = 1.10487 (* 1 = 1.10487 loss)
I0428 19:41:14.122081 24771 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:14.187479 24771 solver.cpp:219] Iteration 300 (1529.08 iter/s, 0.0653988s/100 iters), loss = 0.774804
I0428 19:41:14.187506 24771 solver.cpp:238]     Train net output #0: loss = 0.774804 (* 1 = 0.774804 loss)
I0428 19:41:14.187516 24771 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:14.253742 24771 solver.cpp:219] Iteration 400 (1509.93 iter/s, 0.0662281s/100 iters), loss = 0.672348
I0428 19:41:14.253769 24771 solver.cpp:238]     Train net output #0: loss = 0.672348 (* 1 = 0.672348 loss)
I0428 19:41:14.253779 24771 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:14.319521 24771 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:14.372977 24778 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:14.373368 24771 solver.cpp:398]     Test net output #0: accuracy = 0.7531
I0428 19:41:14.373389 24771 solver.cpp:398]     Test net output #1: loss = 0.66144 (* 1 = 0.66144 loss)
I0428 19:41:14.374172 24771 solver.cpp:219] Iteration 500 (830.629 iter/s, 0.120391s/100 iters), loss = 0.618832
I0428 19:41:14.374225 24771 solver.cpp:238]     Train net output #0: loss = 0.618832 (* 1 = 0.618832 loss)
I0428 19:41:14.374235 24771 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:14.450178 24771 solver.cpp:219] Iteration 600 (1316.73 iter/s, 0.0759458s/100 iters), loss = 0.620335
I0428 19:41:14.450206 24771 solver.cpp:238]     Train net output #0: loss = 0.620335 (* 1 = 0.620335 loss)
I0428 19:41:14.450217 24771 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:14.519631 24771 solver.cpp:219] Iteration 700 (1440.7 iter/s, 0.0694109s/100 iters), loss = 0.71811
I0428 19:41:14.519678 24771 solver.cpp:238]     Train net output #0: loss = 0.71811 (* 1 = 0.71811 loss)
I0428 19:41:14.519695 24771 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:14.598050 24771 solver.cpp:219] Iteration 800 (1276.14 iter/s, 0.0783616s/100 iters), loss = 0.680324
I0428 19:41:14.598085 24771 solver.cpp:238]     Train net output #0: loss = 0.680324 (* 1 = 0.680324 loss)
I0428 19:41:14.598098 24771 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:14.667486 24771 solver.cpp:219] Iteration 900 (1441.08 iter/s, 0.0693924s/100 iters), loss = 0.92061
I0428 19:41:14.667515 24771 solver.cpp:238]     Train net output #0: loss = 0.92061 (* 1 = 0.92061 loss)
I0428 19:41:14.667526 24771 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:14.690047 24777 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:14.733811 24771 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:14.734468 24771 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:14.734892 24771 solver.cpp:311] Iteration 1000, loss = 0.632136
I0428 19:41:14.734925 24771 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:14.810760 24778 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:14.811197 24771 solver.cpp:398]     Test net output #0: accuracy = 0.7686
I0428 19:41:14.811216 24771 solver.cpp:398]     Test net output #1: loss = 0.580434 (* 1 = 0.580434 loss)
I0428 19:41:14.811225 24771 solver.cpp:316] Optimization Done.
I0428 19:41:14.811230 24771 caffe.cpp:259] Optimization Done.
