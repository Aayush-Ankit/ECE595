I0428 20:36:48.730661  4853 caffe.cpp:218] Using GPUs 0
I0428 20:36:48.764775  4853 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:49.217690  4853 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1642.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:49.217828  4853 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1642.prototxt
I0428 20:36:49.218135  4853 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:49.218148  4853 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:49.218216  4853 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:49.218274  4853 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:49.218351  4853 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:49.218370  4853 net.cpp:86] Creating Layer mnist
I0428 20:36:49.218377  4853 net.cpp:382] mnist -> data
I0428 20:36:49.218395  4853 net.cpp:382] mnist -> label
I0428 20:36:49.219300  4853 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:49.221462  4853 net.cpp:124] Setting up mnist
I0428 20:36:49.221489  4853 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:49.221494  4853 net.cpp:131] Top shape: 64 (64)
I0428 20:36:49.221513  4853 net.cpp:139] Memory required for data: 200960
I0428 20:36:49.221518  4853 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:49.221532  4853 net.cpp:86] Creating Layer conv0
I0428 20:36:49.221537  4853 net.cpp:408] conv0 <- data
I0428 20:36:49.221547  4853 net.cpp:382] conv0 -> conv0
I0428 20:36:49.453536  4853 net.cpp:124] Setting up conv0
I0428 20:36:49.453562  4853 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:49.453567  4853 net.cpp:139] Memory required for data: 14946560
I0428 20:36:49.453599  4853 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:49.453611  4853 net.cpp:86] Creating Layer pool0
I0428 20:36:49.453615  4853 net.cpp:408] pool0 <- conv0
I0428 20:36:49.453620  4853 net.cpp:382] pool0 -> pool0
I0428 20:36:49.453665  4853 net.cpp:124] Setting up pool0
I0428 20:36:49.453671  4853 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:49.453675  4853 net.cpp:139] Memory required for data: 18632960
I0428 20:36:49.453677  4853 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:49.453687  4853 net.cpp:86] Creating Layer conv1
I0428 20:36:49.453691  4853 net.cpp:408] conv1 <- pool0
I0428 20:36:49.453694  4853 net.cpp:382] conv1 -> conv1
I0428 20:36:49.457839  4853 net.cpp:124] Setting up conv1
I0428 20:36:49.457854  4853 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:49.457872  4853 net.cpp:139] Memory required for data: 20271360
I0428 20:36:49.457881  4853 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:49.457888  4853 net.cpp:86] Creating Layer pool1
I0428 20:36:49.457892  4853 net.cpp:408] pool1 <- conv1
I0428 20:36:49.457896  4853 net.cpp:382] pool1 -> pool1
I0428 20:36:49.457931  4853 net.cpp:124] Setting up pool1
I0428 20:36:49.457937  4853 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:49.457938  4853 net.cpp:139] Memory required for data: 20680960
I0428 20:36:49.457942  4853 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:49.457948  4853 net.cpp:86] Creating Layer ip1
I0428 20:36:49.457952  4853 net.cpp:408] ip1 <- pool1
I0428 20:36:49.457955  4853 net.cpp:382] ip1 -> ip1
I0428 20:36:49.458946  4853 net.cpp:124] Setting up ip1
I0428 20:36:49.458957  4853 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:49.458961  4853 net.cpp:139] Memory required for data: 20683520
I0428 20:36:49.458968  4853 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:49.458973  4853 net.cpp:86] Creating Layer relu1
I0428 20:36:49.458977  4853 net.cpp:408] relu1 <- ip1
I0428 20:36:49.458981  4853 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:49.459133  4853 net.cpp:124] Setting up relu1
I0428 20:36:49.459141  4853 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:49.459144  4853 net.cpp:139] Memory required for data: 20686080
I0428 20:36:49.459147  4853 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:49.459153  4853 net.cpp:86] Creating Layer ip2
I0428 20:36:49.459156  4853 net.cpp:408] ip2 <- ip1
I0428 20:36:49.459161  4853 net.cpp:382] ip2 -> ip2
I0428 20:36:49.459245  4853 net.cpp:124] Setting up ip2
I0428 20:36:49.459252  4853 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:49.459254  4853 net.cpp:139] Memory required for data: 20688640
I0428 20:36:49.459259  4853 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:49.459265  4853 net.cpp:86] Creating Layer relu2
I0428 20:36:49.459269  4853 net.cpp:408] relu2 <- ip2
I0428 20:36:49.459271  4853 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:49.459975  4853 net.cpp:124] Setting up relu2
I0428 20:36:49.459986  4853 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:49.459990  4853 net.cpp:139] Memory required for data: 20691200
I0428 20:36:49.459992  4853 layer_factory.hpp:77] Creating layer loss
I0428 20:36:49.459998  4853 net.cpp:86] Creating Layer loss
I0428 20:36:49.460001  4853 net.cpp:408] loss <- ip2
I0428 20:36:49.460005  4853 net.cpp:408] loss <- label
I0428 20:36:49.460011  4853 net.cpp:382] loss -> loss
I0428 20:36:49.460026  4853 layer_factory.hpp:77] Creating layer loss
I0428 20:36:49.460229  4853 net.cpp:124] Setting up loss
I0428 20:36:49.460238  4853 net.cpp:131] Top shape: (1)
I0428 20:36:49.460242  4853 net.cpp:134]     with loss weight 1
I0428 20:36:49.460254  4853 net.cpp:139] Memory required for data: 20691204
I0428 20:36:49.460258  4853 net.cpp:200] loss needs backward computation.
I0428 20:36:49.460261  4853 net.cpp:200] relu2 needs backward computation.
I0428 20:36:49.460264  4853 net.cpp:200] ip2 needs backward computation.
I0428 20:36:49.460268  4853 net.cpp:200] relu1 needs backward computation.
I0428 20:36:49.460269  4853 net.cpp:200] ip1 needs backward computation.
I0428 20:36:49.460283  4853 net.cpp:200] pool1 needs backward computation.
I0428 20:36:49.460285  4853 net.cpp:200] conv1 needs backward computation.
I0428 20:36:49.460289  4853 net.cpp:200] pool0 needs backward computation.
I0428 20:36:49.460291  4853 net.cpp:200] conv0 needs backward computation.
I0428 20:36:49.460294  4853 net.cpp:202] mnist does not need backward computation.
I0428 20:36:49.460297  4853 net.cpp:244] This network produces output loss
I0428 20:36:49.460305  4853 net.cpp:257] Network initialization done.
I0428 20:36:49.460594  4853 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1642.prototxt
I0428 20:36:49.460619  4853 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:49.460700  4853 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:49.460770  4853 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:49.460832  4853 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:49.460860  4853 net.cpp:86] Creating Layer mnist
I0428 20:36:49.460865  4853 net.cpp:382] mnist -> data
I0428 20:36:49.460872  4853 net.cpp:382] mnist -> label
I0428 20:36:49.460960  4853 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:49.462842  4853 net.cpp:124] Setting up mnist
I0428 20:36:49.462870  4853 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:49.462875  4853 net.cpp:131] Top shape: 100 (100)
I0428 20:36:49.462880  4853 net.cpp:139] Memory required for data: 314000
I0428 20:36:49.462883  4853 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:49.462889  4853 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:49.462893  4853 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:49.462911  4853 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:49.462918  4853 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:49.462980  4853 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:49.462985  4853 net.cpp:131] Top shape: 100 (100)
I0428 20:36:49.462990  4853 net.cpp:131] Top shape: 100 (100)
I0428 20:36:49.462991  4853 net.cpp:139] Memory required for data: 314800
I0428 20:36:49.462994  4853 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:49.463002  4853 net.cpp:86] Creating Layer conv0
I0428 20:36:49.463006  4853 net.cpp:408] conv0 <- data
I0428 20:36:49.463009  4853 net.cpp:382] conv0 -> conv0
I0428 20:36:49.464706  4853 net.cpp:124] Setting up conv0
I0428 20:36:49.464720  4853 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:49.464723  4853 net.cpp:139] Memory required for data: 23354800
I0428 20:36:49.464732  4853 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:49.464738  4853 net.cpp:86] Creating Layer pool0
I0428 20:36:49.464742  4853 net.cpp:408] pool0 <- conv0
I0428 20:36:49.464746  4853 net.cpp:382] pool0 -> pool0
I0428 20:36:49.464797  4853 net.cpp:124] Setting up pool0
I0428 20:36:49.464802  4853 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:49.464805  4853 net.cpp:139] Memory required for data: 29114800
I0428 20:36:49.464817  4853 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:49.464857  4853 net.cpp:86] Creating Layer conv1
I0428 20:36:49.464861  4853 net.cpp:408] conv1 <- pool0
I0428 20:36:49.464867  4853 net.cpp:382] conv1 -> conv1
I0428 20:36:49.467916  4853 net.cpp:124] Setting up conv1
I0428 20:36:49.467931  4853 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:49.467936  4853 net.cpp:139] Memory required for data: 31674800
I0428 20:36:49.467944  4853 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:49.467952  4853 net.cpp:86] Creating Layer pool1
I0428 20:36:49.467955  4853 net.cpp:408] pool1 <- conv1
I0428 20:36:49.467960  4853 net.cpp:382] pool1 -> pool1
I0428 20:36:49.468036  4853 net.cpp:124] Setting up pool1
I0428 20:36:49.468044  4853 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:49.468046  4853 net.cpp:139] Memory required for data: 32314800
I0428 20:36:49.468050  4853 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:49.468072  4853 net.cpp:86] Creating Layer ip1
I0428 20:36:49.468075  4853 net.cpp:408] ip1 <- pool1
I0428 20:36:49.468080  4853 net.cpp:382] ip1 -> ip1
I0428 20:36:49.468287  4853 net.cpp:124] Setting up ip1
I0428 20:36:49.468296  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468298  4853 net.cpp:139] Memory required for data: 32318800
I0428 20:36:49.468327  4853 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:49.468331  4853 net.cpp:86] Creating Layer relu1
I0428 20:36:49.468340  4853 net.cpp:408] relu1 <- ip1
I0428 20:36:49.468346  4853 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:49.468529  4853 net.cpp:124] Setting up relu1
I0428 20:36:49.468538  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468540  4853 net.cpp:139] Memory required for data: 32322800
I0428 20:36:49.468544  4853 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:49.468551  4853 net.cpp:86] Creating Layer ip2
I0428 20:36:49.468554  4853 net.cpp:408] ip2 <- ip1
I0428 20:36:49.468559  4853 net.cpp:382] ip2 -> ip2
I0428 20:36:49.468654  4853 net.cpp:124] Setting up ip2
I0428 20:36:49.468662  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468664  4853 net.cpp:139] Memory required for data: 32326800
I0428 20:36:49.468669  4853 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:49.468688  4853 net.cpp:86] Creating Layer relu2
I0428 20:36:49.468691  4853 net.cpp:408] relu2 <- ip2
I0428 20:36:49.468705  4853 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:49.468894  4853 net.cpp:124] Setting up relu2
I0428 20:36:49.468904  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468907  4853 net.cpp:139] Memory required for data: 32330800
I0428 20:36:49.468910  4853 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:36:49.468916  4853 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:36:49.468919  4853 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:36:49.468924  4853 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:36:49.468940  4853 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:36:49.468979  4853 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:36:49.468984  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468988  4853 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:49.468991  4853 net.cpp:139] Memory required for data: 32338800
I0428 20:36:49.468994  4853 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:49.468999  4853 net.cpp:86] Creating Layer accuracy
I0428 20:36:49.469002  4853 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:36:49.469007  4853 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:49.469012  4853 net.cpp:382] accuracy -> accuracy
I0428 20:36:49.469018  4853 net.cpp:124] Setting up accuracy
I0428 20:36:49.469022  4853 net.cpp:131] Top shape: (1)
I0428 20:36:49.469025  4853 net.cpp:139] Memory required for data: 32338804
I0428 20:36:49.469028  4853 layer_factory.hpp:77] Creating layer loss
I0428 20:36:49.469033  4853 net.cpp:86] Creating Layer loss
I0428 20:36:49.469036  4853 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:36:49.469039  4853 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:49.469045  4853 net.cpp:382] loss -> loss
I0428 20:36:49.469051  4853 layer_factory.hpp:77] Creating layer loss
I0428 20:36:49.469368  4853 net.cpp:124] Setting up loss
I0428 20:36:49.469378  4853 net.cpp:131] Top shape: (1)
I0428 20:36:49.469382  4853 net.cpp:134]     with loss weight 1
I0428 20:36:49.469388  4853 net.cpp:139] Memory required for data: 32338808
I0428 20:36:49.469390  4853 net.cpp:200] loss needs backward computation.
I0428 20:36:49.469394  4853 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:49.469398  4853 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:36:49.469401  4853 net.cpp:200] relu2 needs backward computation.
I0428 20:36:49.469404  4853 net.cpp:200] ip2 needs backward computation.
I0428 20:36:49.469408  4853 net.cpp:200] relu1 needs backward computation.
I0428 20:36:49.469410  4853 net.cpp:200] ip1 needs backward computation.
I0428 20:36:49.469413  4853 net.cpp:200] pool1 needs backward computation.
I0428 20:36:49.469416  4853 net.cpp:200] conv1 needs backward computation.
I0428 20:36:49.469427  4853 net.cpp:200] pool0 needs backward computation.
I0428 20:36:49.469430  4853 net.cpp:200] conv0 needs backward computation.
I0428 20:36:49.469434  4853 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:49.469439  4853 net.cpp:202] mnist does not need backward computation.
I0428 20:36:49.469440  4853 net.cpp:244] This network produces output accuracy
I0428 20:36:49.469444  4853 net.cpp:244] This network produces output loss
I0428 20:36:49.469455  4853 net.cpp:257] Network initialization done.
I0428 20:36:49.469509  4853 solver.cpp:56] Solver scaffolding done.
I0428 20:36:49.469781  4853 caffe.cpp:248] Starting Optimization
I0428 20:36:49.469789  4853 solver.cpp:273] Solving LeNet
I0428 20:36:49.469790  4853 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:49.470559  4853 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:49.595875  4860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:49.599056  4853 solver.cpp:398]     Test net output #0: accuracy = 0.0903
I0428 20:36:49.599076  4853 solver.cpp:398]     Test net output #1: loss = 2.33507 (* 1 = 2.33507 loss)
I0428 20:36:49.604277  4853 solver.cpp:219] Iteration 0 (0 iter/s, 0.134459s/100 iters), loss = 2.34836
I0428 20:36:49.604301  4853 solver.cpp:238]     Train net output #0: loss = 2.34836 (* 1 = 2.34836 loss)
I0428 20:36:49.604312  4853 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:49.863714  4853 solver.cpp:219] Iteration 100 (385.516 iter/s, 0.259393s/100 iters), loss = 1.36054
I0428 20:36:49.863740  4853 solver.cpp:238]     Train net output #0: loss = 1.36054 (* 1 = 1.36054 loss)
I0428 20:36:49.863747  4853 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:50.121857  4853 solver.cpp:219] Iteration 200 (387.453 iter/s, 0.258096s/100 iters), loss = 1.29162
I0428 20:36:50.121896  4853 solver.cpp:238]     Train net output #0: loss = 1.29162 (* 1 = 1.29162 loss)
I0428 20:36:50.121902  4853 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:50.380010  4853 solver.cpp:219] Iteration 300 (387.448 iter/s, 0.258099s/100 iters), loss = 0.954645
I0428 20:36:50.380053  4853 solver.cpp:238]     Train net output #0: loss = 0.954645 (* 1 = 0.954645 loss)
I0428 20:36:50.380059  4853 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:50.639964  4853 solver.cpp:219] Iteration 400 (384.772 iter/s, 0.259894s/100 iters), loss = 1.10728
I0428 20:36:50.640007  4853 solver.cpp:238]     Train net output #0: loss = 1.10728 (* 1 = 1.10728 loss)
I0428 20:36:50.640012  4853 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:50.898242  4853 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:51.021090  4860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:51.024447  4853 solver.cpp:398]     Test net output #0: accuracy = 0.5779
I0428 20:36:51.024471  4853 solver.cpp:398]     Test net output #1: loss = 1.22523 (* 1 = 1.22523 loss)
I0428 20:36:51.027005  4853 solver.cpp:219] Iteration 500 (258.403 iter/s, 0.386993s/100 iters), loss = 1.27564
I0428 20:36:51.027029  4853 solver.cpp:238]     Train net output #0: loss = 1.27564 (* 1 = 1.27564 loss)
I0428 20:36:51.027036  4853 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:51.290756  4853 solver.cpp:219] Iteration 600 (379.206 iter/s, 0.263709s/100 iters), loss = 1.34554
I0428 20:36:51.290798  4853 solver.cpp:238]     Train net output #0: loss = 1.34554 (* 1 = 1.34554 loss)
I0428 20:36:51.290805  4853 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:51.556339  4853 solver.cpp:219] Iteration 700 (376.635 iter/s, 0.265509s/100 iters), loss = 1.41747
I0428 20:36:51.556367  4853 solver.cpp:238]     Train net output #0: loss = 1.41747 (* 1 = 1.41747 loss)
I0428 20:36:51.556375  4853 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:51.823351  4853 solver.cpp:219] Iteration 800 (374.581 iter/s, 0.266965s/100 iters), loss = 1.31629
I0428 20:36:51.823382  4853 solver.cpp:238]     Train net output #0: loss = 1.31629 (* 1 = 1.31629 loss)
I0428 20:36:51.823388  4853 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:52.092712  4853 solver.cpp:219] Iteration 900 (371.316 iter/s, 0.269312s/100 iters), loss = 1.04005
I0428 20:36:52.092737  4853 solver.cpp:238]     Train net output #0: loss = 1.04005 (* 1 = 1.04005 loss)
I0428 20:36:52.092744  4853 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:52.182355  4859 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:52.360910  4853 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:52.365979  4853 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:52.368932  4853 solver.cpp:311] Iteration 1000, loss = 1.34888
I0428 20:36:52.368947  4853 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:52.494664  4860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:52.499045  4853 solver.cpp:398]     Test net output #0: accuracy = 0.578
I0428 20:36:52.499064  4853 solver.cpp:398]     Test net output #1: loss = 1.20186 (* 1 = 1.20186 loss)
I0428 20:36:52.499068  4853 solver.cpp:316] Optimization Done.
I0428 20:36:52.499071  4853 caffe.cpp:259] Optimization Done.
