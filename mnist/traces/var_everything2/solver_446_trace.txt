I0428 19:44:22.867485 25590 caffe.cpp:218] Using GPUs 0
I0428 19:44:22.904182 25590 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:23.413697 25590 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test446.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:23.413872 25590 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test446.prototxt
I0428 19:44:23.414296 25590 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:23.414326 25590 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:23.414438 25590 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:23.414556 25590 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:23.414687 25590 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:23.414721 25590 net.cpp:86] Creating Layer mnist
I0428 19:44:23.414736 25590 net.cpp:382] mnist -> data
I0428 19:44:23.414765 25590 net.cpp:382] mnist -> label
I0428 19:44:23.416039 25590 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:23.418515 25590 net.cpp:124] Setting up mnist
I0428 19:44:23.418539 25590 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:23.418550 25590 net.cpp:131] Top shape: 64 (64)
I0428 19:44:23.418555 25590 net.cpp:139] Memory required for data: 200960
I0428 19:44:23.418565 25590 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:23.418588 25590 net.cpp:86] Creating Layer conv0
I0428 19:44:23.418612 25590 net.cpp:408] conv0 <- data
I0428 19:44:23.418632 25590 net.cpp:382] conv0 -> conv0
I0428 19:44:23.664947 25590 net.cpp:124] Setting up conv0
I0428 19:44:23.664978 25590 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:23.664983 25590 net.cpp:139] Memory required for data: 495872
I0428 19:44:23.665004 25590 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:23.665035 25590 net.cpp:86] Creating Layer pool0
I0428 19:44:23.665050 25590 net.cpp:408] pool0 <- conv0
I0428 19:44:23.665060 25590 net.cpp:382] pool0 -> pool0
I0428 19:44:23.665115 25590 net.cpp:124] Setting up pool0
I0428 19:44:23.665124 25590 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:23.665129 25590 net.cpp:139] Memory required for data: 569600
I0428 19:44:23.665148 25590 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:23.665177 25590 net.cpp:86] Creating Layer conv1
I0428 19:44:23.665184 25590 net.cpp:408] conv1 <- pool0
I0428 19:44:23.665192 25590 net.cpp:382] conv1 -> conv1
I0428 19:44:23.667871 25590 net.cpp:124] Setting up conv1
I0428 19:44:23.667886 25590 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:23.667892 25590 net.cpp:139] Memory required for data: 1388800
I0428 19:44:23.667920 25590 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:23.667932 25590 net.cpp:86] Creating Layer pool1
I0428 19:44:23.667938 25590 net.cpp:408] pool1 <- conv1
I0428 19:44:23.667946 25590 net.cpp:382] pool1 -> pool1
I0428 19:44:23.668005 25590 net.cpp:124] Setting up pool1
I0428 19:44:23.668015 25590 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:23.668020 25590 net.cpp:139] Memory required for data: 1593600
I0428 19:44:23.668025 25590 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:23.668035 25590 net.cpp:86] Creating Layer ip1
I0428 19:44:23.668046 25590 net.cpp:408] ip1 <- pool1
I0428 19:44:23.668054 25590 net.cpp:382] ip1 -> ip1
I0428 19:44:23.669083 25590 net.cpp:124] Setting up ip1
I0428 19:44:23.669098 25590 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:23.669104 25590 net.cpp:139] Memory required for data: 1596160
I0428 19:44:23.669118 25590 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:23.669128 25590 net.cpp:86] Creating Layer relu1
I0428 19:44:23.669136 25590 net.cpp:408] relu1 <- ip1
I0428 19:44:23.669143 25590 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:23.669381 25590 net.cpp:124] Setting up relu1
I0428 19:44:23.669390 25590 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:23.669395 25590 net.cpp:139] Memory required for data: 1598720
I0428 19:44:23.669400 25590 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:23.669410 25590 net.cpp:86] Creating Layer ip2
I0428 19:44:23.669415 25590 net.cpp:408] ip2 <- ip1
I0428 19:44:23.669423 25590 net.cpp:382] ip2 -> ip2
I0428 19:44:23.669522 25590 net.cpp:124] Setting up ip2
I0428 19:44:23.669530 25590 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:23.669535 25590 net.cpp:139] Memory required for data: 1605120
I0428 19:44:23.669543 25590 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:23.669553 25590 net.cpp:86] Creating Layer relu2
I0428 19:44:23.669559 25590 net.cpp:408] relu2 <- ip2
I0428 19:44:23.669565 25590 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:23.670306 25590 net.cpp:124] Setting up relu2
I0428 19:44:23.670339 25590 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:23.670346 25590 net.cpp:139] Memory required for data: 1611520
I0428 19:44:23.670351 25590 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:23.670362 25590 net.cpp:86] Creating Layer ip3
I0428 19:44:23.670368 25590 net.cpp:408] ip3 <- ip2
I0428 19:44:23.670377 25590 net.cpp:382] ip3 -> ip3
I0428 19:44:23.670482 25590 net.cpp:124] Setting up ip3
I0428 19:44:23.670492 25590 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:23.670497 25590 net.cpp:139] Memory required for data: 1614080
I0428 19:44:23.670524 25590 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:23.670536 25590 net.cpp:86] Creating Layer relu3
I0428 19:44:23.670544 25590 net.cpp:408] relu3 <- ip3
I0428 19:44:23.670552 25590 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:23.670727 25590 net.cpp:124] Setting up relu3
I0428 19:44:23.670735 25590 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:23.670740 25590 net.cpp:139] Memory required for data: 1616640
I0428 19:44:23.670745 25590 layer_factory.hpp:77] Creating layer loss
I0428 19:44:23.670754 25590 net.cpp:86] Creating Layer loss
I0428 19:44:23.670759 25590 net.cpp:408] loss <- ip3
I0428 19:44:23.670765 25590 net.cpp:408] loss <- label
I0428 19:44:23.670773 25590 net.cpp:382] loss -> loss
I0428 19:44:23.670791 25590 layer_factory.hpp:77] Creating layer loss
I0428 19:44:23.671005 25590 net.cpp:124] Setting up loss
I0428 19:44:23.671030 25590 net.cpp:131] Top shape: (1)
I0428 19:44:23.671036 25590 net.cpp:134]     with loss weight 1
I0428 19:44:23.671056 25590 net.cpp:139] Memory required for data: 1616644
I0428 19:44:23.671061 25590 net.cpp:200] loss needs backward computation.
I0428 19:44:23.671083 25590 net.cpp:200] relu3 needs backward computation.
I0428 19:44:23.671088 25590 net.cpp:200] ip3 needs backward computation.
I0428 19:44:23.671093 25590 net.cpp:200] relu2 needs backward computation.
I0428 19:44:23.671098 25590 net.cpp:200] ip2 needs backward computation.
I0428 19:44:23.671104 25590 net.cpp:200] relu1 needs backward computation.
I0428 19:44:23.671109 25590 net.cpp:200] ip1 needs backward computation.
I0428 19:44:23.671114 25590 net.cpp:200] pool1 needs backward computation.
I0428 19:44:23.671119 25590 net.cpp:200] conv1 needs backward computation.
I0428 19:44:23.671124 25590 net.cpp:200] pool0 needs backward computation.
I0428 19:44:23.671130 25590 net.cpp:200] conv0 needs backward computation.
I0428 19:44:23.671136 25590 net.cpp:202] mnist does not need backward computation.
I0428 19:44:23.671141 25590 net.cpp:244] This network produces output loss
I0428 19:44:23.671154 25590 net.cpp:257] Network initialization done.
I0428 19:44:23.671491 25590 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test446.prototxt
I0428 19:44:23.671525 25590 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:23.671632 25590 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:23.671736 25590 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:23.671809 25590 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:23.671828 25590 net.cpp:86] Creating Layer mnist
I0428 19:44:23.671834 25590 net.cpp:382] mnist -> data
I0428 19:44:23.671845 25590 net.cpp:382] mnist -> label
I0428 19:44:23.671957 25590 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:23.674188 25590 net.cpp:124] Setting up mnist
I0428 19:44:23.674219 25590 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:23.674227 25590 net.cpp:131] Top shape: 100 (100)
I0428 19:44:23.674233 25590 net.cpp:139] Memory required for data: 314000
I0428 19:44:23.674239 25590 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:23.674249 25590 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:23.674255 25590 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:23.674263 25590 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:23.674288 25590 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:23.674377 25590 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:23.674386 25590 net.cpp:131] Top shape: 100 (100)
I0428 19:44:23.674392 25590 net.cpp:131] Top shape: 100 (100)
I0428 19:44:23.674397 25590 net.cpp:139] Memory required for data: 314800
I0428 19:44:23.674402 25590 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:23.674414 25590 net.cpp:86] Creating Layer conv0
I0428 19:44:23.674420 25590 net.cpp:408] conv0 <- data
I0428 19:44:23.674428 25590 net.cpp:382] conv0 -> conv0
I0428 19:44:23.675956 25590 net.cpp:124] Setting up conv0
I0428 19:44:23.675971 25590 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:23.675976 25590 net.cpp:139] Memory required for data: 775600
I0428 19:44:23.675990 25590 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:23.675999 25590 net.cpp:86] Creating Layer pool0
I0428 19:44:23.676005 25590 net.cpp:408] pool0 <- conv0
I0428 19:44:23.676013 25590 net.cpp:382] pool0 -> pool0
I0428 19:44:23.676054 25590 net.cpp:124] Setting up pool0
I0428 19:44:23.676061 25590 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:23.676065 25590 net.cpp:139] Memory required for data: 890800
I0428 19:44:23.676070 25590 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:23.676082 25590 net.cpp:86] Creating Layer conv1
I0428 19:44:23.676089 25590 net.cpp:408] conv1 <- pool0
I0428 19:44:23.676096 25590 net.cpp:382] conv1 -> conv1
I0428 19:44:23.677773 25590 net.cpp:124] Setting up conv1
I0428 19:44:23.677789 25590 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:23.677795 25590 net.cpp:139] Memory required for data: 2170800
I0428 19:44:23.677809 25590 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:23.677819 25590 net.cpp:86] Creating Layer pool1
I0428 19:44:23.677831 25590 net.cpp:408] pool1 <- conv1
I0428 19:44:23.677840 25590 net.cpp:382] pool1 -> pool1
I0428 19:44:23.677886 25590 net.cpp:124] Setting up pool1
I0428 19:44:23.677911 25590 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:23.677916 25590 net.cpp:139] Memory required for data: 2490800
I0428 19:44:23.677920 25590 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:23.677930 25590 net.cpp:86] Creating Layer ip1
I0428 19:44:23.677935 25590 net.cpp:408] ip1 <- pool1
I0428 19:44:23.677943 25590 net.cpp:382] ip1 -> ip1
I0428 19:44:23.678095 25590 net.cpp:124] Setting up ip1
I0428 19:44:23.678104 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.678120 25590 net.cpp:139] Memory required for data: 2494800
I0428 19:44:23.678134 25590 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:23.678143 25590 net.cpp:86] Creating Layer relu1
I0428 19:44:23.678149 25590 net.cpp:408] relu1 <- ip1
I0428 19:44:23.678158 25590 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:23.678330 25590 net.cpp:124] Setting up relu1
I0428 19:44:23.678340 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.678347 25590 net.cpp:139] Memory required for data: 2498800
I0428 19:44:23.678354 25590 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:23.678364 25590 net.cpp:86] Creating Layer ip2
I0428 19:44:23.678369 25590 net.cpp:408] ip2 <- ip1
I0428 19:44:23.678377 25590 net.cpp:382] ip2 -> ip2
I0428 19:44:23.678494 25590 net.cpp:124] Setting up ip2
I0428 19:44:23.678503 25590 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:23.678508 25590 net.cpp:139] Memory required for data: 2508800
I0428 19:44:23.678519 25590 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:23.678525 25590 net.cpp:86] Creating Layer relu2
I0428 19:44:23.678531 25590 net.cpp:408] relu2 <- ip2
I0428 19:44:23.678539 25590 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:23.678817 25590 net.cpp:124] Setting up relu2
I0428 19:44:23.678827 25590 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:23.678833 25590 net.cpp:139] Memory required for data: 2518800
I0428 19:44:23.678838 25590 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:23.678848 25590 net.cpp:86] Creating Layer ip3
I0428 19:44:23.678853 25590 net.cpp:408] ip3 <- ip2
I0428 19:44:23.678879 25590 net.cpp:382] ip3 -> ip3
I0428 19:44:23.678978 25590 net.cpp:124] Setting up ip3
I0428 19:44:23.678987 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.678993 25590 net.cpp:139] Memory required for data: 2522800
I0428 19:44:23.679005 25590 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:23.679014 25590 net.cpp:86] Creating Layer relu3
I0428 19:44:23.679023 25590 net.cpp:408] relu3 <- ip3
I0428 19:44:23.679030 25590 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:23.679831 25590 net.cpp:124] Setting up relu3
I0428 19:44:23.679843 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.679848 25590 net.cpp:139] Memory required for data: 2526800
I0428 19:44:23.679854 25590 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:23.679862 25590 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:23.679882 25590 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:23.679889 25590 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:23.679913 25590 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:23.679975 25590 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:23.679983 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.679989 25590 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:23.679994 25590 net.cpp:139] Memory required for data: 2534800
I0428 19:44:23.680001 25590 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:23.680009 25590 net.cpp:86] Creating Layer accuracy
I0428 19:44:23.680014 25590 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:23.680035 25590 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:23.680043 25590 net.cpp:382] accuracy -> accuracy
I0428 19:44:23.680054 25590 net.cpp:124] Setting up accuracy
I0428 19:44:23.680063 25590 net.cpp:131] Top shape: (1)
I0428 19:44:23.680073 25590 net.cpp:139] Memory required for data: 2534804
I0428 19:44:23.680078 25590 layer_factory.hpp:77] Creating layer loss
I0428 19:44:23.680084 25590 net.cpp:86] Creating Layer loss
I0428 19:44:23.680090 25590 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:23.680099 25590 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:23.680105 25590 net.cpp:382] loss -> loss
I0428 19:44:23.680115 25590 layer_factory.hpp:77] Creating layer loss
I0428 19:44:23.680380 25590 net.cpp:124] Setting up loss
I0428 19:44:23.680390 25590 net.cpp:131] Top shape: (1)
I0428 19:44:23.680397 25590 net.cpp:134]     with loss weight 1
I0428 19:44:23.680407 25590 net.cpp:139] Memory required for data: 2534808
I0428 19:44:23.680423 25590 net.cpp:200] loss needs backward computation.
I0428 19:44:23.680429 25590 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:23.680435 25590 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:23.680440 25590 net.cpp:200] relu3 needs backward computation.
I0428 19:44:23.680445 25590 net.cpp:200] ip3 needs backward computation.
I0428 19:44:23.680450 25590 net.cpp:200] relu2 needs backward computation.
I0428 19:44:23.680455 25590 net.cpp:200] ip2 needs backward computation.
I0428 19:44:23.680461 25590 net.cpp:200] relu1 needs backward computation.
I0428 19:44:23.680465 25590 net.cpp:200] ip1 needs backward computation.
I0428 19:44:23.680471 25590 net.cpp:200] pool1 needs backward computation.
I0428 19:44:23.680476 25590 net.cpp:200] conv1 needs backward computation.
I0428 19:44:23.680482 25590 net.cpp:200] pool0 needs backward computation.
I0428 19:44:23.680488 25590 net.cpp:200] conv0 needs backward computation.
I0428 19:44:23.680495 25590 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:23.680500 25590 net.cpp:202] mnist does not need backward computation.
I0428 19:44:23.680505 25590 net.cpp:244] This network produces output accuracy
I0428 19:44:23.680510 25590 net.cpp:244] This network produces output loss
I0428 19:44:23.680526 25590 net.cpp:257] Network initialization done.
I0428 19:44:23.680573 25590 solver.cpp:56] Solver scaffolding done.
I0428 19:44:23.680981 25590 caffe.cpp:248] Starting Optimization
I0428 19:44:23.680989 25590 solver.cpp:273] Solving LeNet
I0428 19:44:23.680994 25590 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:23.681288 25590 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:23.685446 25590 blocking_queue.cpp:49] Waiting for data
I0428 19:44:23.759219 25598 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:23.759702 25590 solver.cpp:398]     Test net output #0: accuracy = 0.1033
I0428 19:44:23.759721 25590 solver.cpp:398]     Test net output #1: loss = 2.33706 (* 1 = 2.33706 loss)
I0428 19:44:23.762034 25590 solver.cpp:219] Iteration 0 (0 iter/s, 0.0810086s/100 iters), loss = 2.31976
I0428 19:44:23.762079 25590 solver.cpp:238]     Train net output #0: loss = 2.31976 (* 1 = 2.31976 loss)
I0428 19:44:23.762112 25590 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:23.875619 25590 solver.cpp:219] Iteration 100 (880.818 iter/s, 0.113531s/100 iters), loss = 0.820779
I0428 19:44:23.875653 25590 solver.cpp:238]     Train net output #0: loss = 0.820779 (* 1 = 0.820779 loss)
I0428 19:44:23.875664 25590 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:23.981051 25590 solver.cpp:219] Iteration 200 (948.856 iter/s, 0.10539s/100 iters), loss = 0.5213
I0428 19:44:23.981079 25590 solver.cpp:238]     Train net output #0: loss = 0.5213 (* 1 = 0.5213 loss)
I0428 19:44:23.981089 25590 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:24.079478 25590 solver.cpp:219] Iteration 300 (1016.35 iter/s, 0.098391s/100 iters), loss = 0.418888
I0428 19:44:24.079505 25590 solver.cpp:238]     Train net output #0: loss = 0.418888 (* 1 = 0.418888 loss)
I0428 19:44:24.079515 25590 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:24.179836 25590 solver.cpp:219] Iteration 400 (996.787 iter/s, 0.100322s/100 iters), loss = 0.705801
I0428 19:44:24.179864 25590 solver.cpp:238]     Train net output #0: loss = 0.705801 (* 1 = 0.705801 loss)
I0428 19:44:24.179874 25590 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:24.286450 25590 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:24.361805 25598 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:24.362344 25590 solver.cpp:398]     Test net output #0: accuracy = 0.8358
I0428 19:44:24.362372 25590 solver.cpp:398]     Test net output #1: loss = 0.462518 (* 1 = 0.462518 loss)
I0428 19:44:24.363333 25590 solver.cpp:219] Iteration 500 (545.094 iter/s, 0.183455s/100 iters), loss = 0.504612
I0428 19:44:24.363379 25590 solver.cpp:238]     Train net output #0: loss = 0.504612 (* 1 = 0.504612 loss)
I0428 19:44:24.363405 25590 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:24.470041 25590 solver.cpp:219] Iteration 600 (937.607 iter/s, 0.106655s/100 iters), loss = 0.214018
I0428 19:44:24.470070 25590 solver.cpp:238]     Train net output #0: loss = 0.214018 (* 1 = 0.214018 loss)
I0428 19:44:24.470082 25590 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:24.583851 25590 solver.cpp:219] Iteration 700 (878.986 iter/s, 0.113767s/100 iters), loss = 0.428756
I0428 19:44:24.583894 25590 solver.cpp:238]     Train net output #0: loss = 0.428756 (* 1 = 0.428756 loss)
I0428 19:44:24.583904 25590 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:24.690795 25590 solver.cpp:219] Iteration 800 (935.511 iter/s, 0.106893s/100 iters), loss = 0.476247
I0428 19:44:24.690824 25590 solver.cpp:238]     Train net output #0: loss = 0.476247 (* 1 = 0.476247 loss)
I0428 19:44:24.690831 25590 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:24.802063 25590 solver.cpp:219] Iteration 900 (899.063 iter/s, 0.111227s/100 iters), loss = 0.383039
I0428 19:44:24.802100 25590 solver.cpp:238]     Train net output #0: loss = 0.383039 (* 1 = 0.383039 loss)
I0428 19:44:24.802109 25590 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:24.839197 25596 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:24.914855 25590 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:24.916133 25590 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:24.916951 25590 solver.cpp:311] Iteration 1000, loss = 0.264011
I0428 19:44:24.916978 25590 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:24.994405 25598 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:24.994966 25590 solver.cpp:398]     Test net output #0: accuracy = 0.8612
I0428 19:44:24.994992 25590 solver.cpp:398]     Test net output #1: loss = 0.377198 (* 1 = 0.377198 loss)
I0428 19:44:24.994998 25590 solver.cpp:316] Optimization Done.
I0428 19:44:24.995002 25590 caffe.cpp:259] Optimization Done.
