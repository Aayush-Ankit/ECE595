I0428 19:47:44.307654 26270 caffe.cpp:218] Using GPUs 0
I0428 19:47:44.348803 26270 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:44.955368 26270 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test524.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:44.955534 26270 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test524.prototxt
I0428 19:47:44.956125 26270 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:44.956151 26270 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:44.956295 26270 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:44.956403 26270 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:44.956529 26270 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:44.956562 26270 net.cpp:86] Creating Layer mnist
I0428 19:47:44.956578 26270 net.cpp:382] mnist -> data
I0428 19:47:44.956609 26270 net.cpp:382] mnist -> label
I0428 19:47:44.958060 26270 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:44.961282 26270 net.cpp:124] Setting up mnist
I0428 19:47:44.961303 26270 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:44.961313 26270 net.cpp:131] Top shape: 64 (64)
I0428 19:47:44.961318 26270 net.cpp:139] Memory required for data: 200960
I0428 19:47:44.961326 26270 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:44.961349 26270 net.cpp:86] Creating Layer conv0
I0428 19:47:44.961374 26270 net.cpp:408] conv0 <- data
I0428 19:47:44.961395 26270 net.cpp:382] conv0 -> conv0
I0428 19:47:45.291708 26270 net.cpp:124] Setting up conv0
I0428 19:47:45.291754 26270 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:45.291760 26270 net.cpp:139] Memory required for data: 938240
I0428 19:47:45.291795 26270 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:45.291810 26270 net.cpp:86] Creating Layer pool0
I0428 19:47:45.291815 26270 net.cpp:408] pool0 <- conv0
I0428 19:47:45.291822 26270 net.cpp:382] pool0 -> pool0
I0428 19:47:45.291913 26270 net.cpp:124] Setting up pool0
I0428 19:47:45.291923 26270 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:45.291944 26270 net.cpp:139] Memory required for data: 1122560
I0428 19:47:45.291947 26270 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:45.291962 26270 net.cpp:86] Creating Layer conv1
I0428 19:47:45.291966 26270 net.cpp:408] conv1 <- pool0
I0428 19:47:45.291973 26270 net.cpp:382] conv1 -> conv1
I0428 19:47:45.294391 26270 net.cpp:124] Setting up conv1
I0428 19:47:45.294425 26270 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:45.294430 26270 net.cpp:139] Memory required for data: 1155328
I0428 19:47:45.294440 26270 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:45.294450 26270 net.cpp:86] Creating Layer pool1
I0428 19:47:45.294456 26270 net.cpp:408] pool1 <- conv1
I0428 19:47:45.294462 26270 net.cpp:382] pool1 -> pool1
I0428 19:47:45.294505 26270 net.cpp:124] Setting up pool1
I0428 19:47:45.294515 26270 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:45.294519 26270 net.cpp:139] Memory required for data: 1163520
I0428 19:47:45.294524 26270 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:45.294533 26270 net.cpp:86] Creating Layer ip1
I0428 19:47:45.294541 26270 net.cpp:408] ip1 <- pool1
I0428 19:47:45.294564 26270 net.cpp:382] ip1 -> ip1
I0428 19:47:45.294700 26270 net.cpp:124] Setting up ip1
I0428 19:47:45.294711 26270 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:45.294715 26270 net.cpp:139] Memory required for data: 1166080
I0428 19:47:45.294726 26270 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:45.294736 26270 net.cpp:86] Creating Layer relu1
I0428 19:47:45.294741 26270 net.cpp:408] relu1 <- ip1
I0428 19:47:45.294747 26270 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:45.294981 26270 net.cpp:124] Setting up relu1
I0428 19:47:45.294994 26270 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:45.294999 26270 net.cpp:139] Memory required for data: 1168640
I0428 19:47:45.295019 26270 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:45.295047 26270 net.cpp:86] Creating Layer ip2
I0428 19:47:45.295053 26270 net.cpp:408] ip2 <- ip1
I0428 19:47:45.295060 26270 net.cpp:382] ip2 -> ip2
I0428 19:47:45.295209 26270 net.cpp:124] Setting up ip2
I0428 19:47:45.295218 26270 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:47:45.295223 26270 net.cpp:139] Memory required for data: 1175040
I0428 19:47:45.295231 26270 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:45.295240 26270 net.cpp:86] Creating Layer relu2
I0428 19:47:45.295246 26270 net.cpp:408] relu2 <- ip2
I0428 19:47:45.295253 26270 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:45.296226 26270 net.cpp:124] Setting up relu2
I0428 19:47:45.296255 26270 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:47:45.296260 26270 net.cpp:139] Memory required for data: 1181440
I0428 19:47:45.296265 26270 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:45.296274 26270 net.cpp:86] Creating Layer ip3
I0428 19:47:45.296279 26270 net.cpp:408] ip3 <- ip2
I0428 19:47:45.296298 26270 net.cpp:382] ip3 -> ip3
I0428 19:47:45.296409 26270 net.cpp:124] Setting up ip3
I0428 19:47:45.296419 26270 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:45.296423 26270 net.cpp:139] Memory required for data: 1184000
I0428 19:47:45.296433 26270 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:45.296442 26270 net.cpp:86] Creating Layer relu3
I0428 19:47:45.296463 26270 net.cpp:408] relu3 <- ip3
I0428 19:47:45.296468 26270 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:45.296665 26270 net.cpp:124] Setting up relu3
I0428 19:47:45.296677 26270 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:45.296681 26270 net.cpp:139] Memory required for data: 1186560
I0428 19:47:45.296686 26270 layer_factory.hpp:77] Creating layer loss
I0428 19:47:45.296694 26270 net.cpp:86] Creating Layer loss
I0428 19:47:45.296699 26270 net.cpp:408] loss <- ip3
I0428 19:47:45.296703 26270 net.cpp:408] loss <- label
I0428 19:47:45.296725 26270 net.cpp:382] loss -> loss
I0428 19:47:45.296763 26270 layer_factory.hpp:77] Creating layer loss
I0428 19:47:45.297122 26270 net.cpp:124] Setting up loss
I0428 19:47:45.297137 26270 net.cpp:131] Top shape: (1)
I0428 19:47:45.297142 26270 net.cpp:134]     with loss weight 1
I0428 19:47:45.297176 26270 net.cpp:139] Memory required for data: 1186564
I0428 19:47:45.297181 26270 net.cpp:200] loss needs backward computation.
I0428 19:47:45.297188 26270 net.cpp:200] relu3 needs backward computation.
I0428 19:47:45.297209 26270 net.cpp:200] ip3 needs backward computation.
I0428 19:47:45.297227 26270 net.cpp:200] relu2 needs backward computation.
I0428 19:47:45.297232 26270 net.cpp:200] ip2 needs backward computation.
I0428 19:47:45.297250 26270 net.cpp:200] relu1 needs backward computation.
I0428 19:47:45.297256 26270 net.cpp:200] ip1 needs backward computation.
I0428 19:47:45.297272 26270 net.cpp:200] pool1 needs backward computation.
I0428 19:47:45.297276 26270 net.cpp:200] conv1 needs backward computation.
I0428 19:47:45.297297 26270 net.cpp:200] pool0 needs backward computation.
I0428 19:47:45.297302 26270 net.cpp:200] conv0 needs backward computation.
I0428 19:47:45.297305 26270 net.cpp:202] mnist does not need backward computation.
I0428 19:47:45.297310 26270 net.cpp:244] This network produces output loss
I0428 19:47:45.297322 26270 net.cpp:257] Network initialization done.
I0428 19:47:45.297776 26270 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test524.prototxt
I0428 19:47:45.297827 26270 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:45.297945 26270 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:45.298058 26270 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:45.298112 26270 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:45.298130 26270 net.cpp:86] Creating Layer mnist
I0428 19:47:45.298138 26270 net.cpp:382] mnist -> data
I0428 19:47:45.298164 26270 net.cpp:382] mnist -> label
I0428 19:47:45.298266 26270 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:45.300776 26270 net.cpp:124] Setting up mnist
I0428 19:47:45.300834 26270 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:45.300858 26270 net.cpp:131] Top shape: 100 (100)
I0428 19:47:45.300878 26270 net.cpp:139] Memory required for data: 314000
I0428 19:47:45.300884 26270 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:45.300896 26270 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:45.300907 26270 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:45.300930 26270 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:45.300940 26270 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:45.301028 26270 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:45.301039 26270 net.cpp:131] Top shape: 100 (100)
I0428 19:47:45.301046 26270 net.cpp:131] Top shape: 100 (100)
I0428 19:47:45.301051 26270 net.cpp:139] Memory required for data: 314800
I0428 19:47:45.301056 26270 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:45.301072 26270 net.cpp:86] Creating Layer conv0
I0428 19:47:45.301077 26270 net.cpp:408] conv0 <- data
I0428 19:47:45.301086 26270 net.cpp:382] conv0 -> conv0
I0428 19:47:45.303125 26270 net.cpp:124] Setting up conv0
I0428 19:47:45.303143 26270 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:45.303148 26270 net.cpp:139] Memory required for data: 1466800
I0428 19:47:45.303161 26270 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:45.303170 26270 net.cpp:86] Creating Layer pool0
I0428 19:47:45.303180 26270 net.cpp:408] pool0 <- conv0
I0428 19:47:45.303202 26270 net.cpp:382] pool0 -> pool0
I0428 19:47:45.303251 26270 net.cpp:124] Setting up pool0
I0428 19:47:45.303261 26270 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:45.303266 26270 net.cpp:139] Memory required for data: 1754800
I0428 19:47:45.303270 26270 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:45.303282 26270 net.cpp:86] Creating Layer conv1
I0428 19:47:45.303290 26270 net.cpp:408] conv1 <- pool0
I0428 19:47:45.303298 26270 net.cpp:382] conv1 -> conv1
I0428 19:47:45.306282 26270 net.cpp:124] Setting up conv1
I0428 19:47:45.306298 26270 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:45.306303 26270 net.cpp:139] Memory required for data: 1806000
I0428 19:47:45.306314 26270 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:45.306341 26270 net.cpp:86] Creating Layer pool1
I0428 19:47:45.306347 26270 net.cpp:408] pool1 <- conv1
I0428 19:47:45.306370 26270 net.cpp:382] pool1 -> pool1
I0428 19:47:45.306453 26270 net.cpp:124] Setting up pool1
I0428 19:47:45.306464 26270 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:45.306478 26270 net.cpp:139] Memory required for data: 1818800
I0428 19:47:45.306484 26270 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:45.306493 26270 net.cpp:86] Creating Layer ip1
I0428 19:47:45.306499 26270 net.cpp:408] ip1 <- pool1
I0428 19:47:45.306507 26270 net.cpp:382] ip1 -> ip1
I0428 19:47:45.306649 26270 net.cpp:124] Setting up ip1
I0428 19:47:45.306660 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.306680 26270 net.cpp:139] Memory required for data: 1822800
I0428 19:47:45.306709 26270 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:45.306715 26270 net.cpp:86] Creating Layer relu1
I0428 19:47:45.306720 26270 net.cpp:408] relu1 <- ip1
I0428 19:47:45.306728 26270 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:45.306985 26270 net.cpp:124] Setting up relu1
I0428 19:47:45.306998 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.307003 26270 net.cpp:139] Memory required for data: 1826800
I0428 19:47:45.307008 26270 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:45.307032 26270 net.cpp:86] Creating Layer ip2
I0428 19:47:45.307040 26270 net.cpp:408] ip2 <- ip1
I0428 19:47:45.307059 26270 net.cpp:382] ip2 -> ip2
I0428 19:47:45.307186 26270 net.cpp:124] Setting up ip2
I0428 19:47:45.307199 26270 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:47:45.307204 26270 net.cpp:139] Memory required for data: 1836800
I0428 19:47:45.307212 26270 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:45.307221 26270 net.cpp:86] Creating Layer relu2
I0428 19:47:45.307241 26270 net.cpp:408] relu2 <- ip2
I0428 19:47:45.307247 26270 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:45.307601 26270 net.cpp:124] Setting up relu2
I0428 19:47:45.307627 26270 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:47:45.307632 26270 net.cpp:139] Memory required for data: 1846800
I0428 19:47:45.307636 26270 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:45.307651 26270 net.cpp:86] Creating Layer ip3
I0428 19:47:45.307654 26270 net.cpp:408] ip3 <- ip2
I0428 19:47:45.307662 26270 net.cpp:382] ip3 -> ip3
I0428 19:47:45.307829 26270 net.cpp:124] Setting up ip3
I0428 19:47:45.307840 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.307845 26270 net.cpp:139] Memory required for data: 1850800
I0428 19:47:45.307857 26270 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:45.307868 26270 net.cpp:86] Creating Layer relu3
I0428 19:47:45.307873 26270 net.cpp:408] relu3 <- ip3
I0428 19:47:45.307880 26270 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:45.309027 26270 net.cpp:124] Setting up relu3
I0428 19:47:45.309044 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.309051 26270 net.cpp:139] Memory required for data: 1854800
I0428 19:47:45.309056 26270 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:47:45.309064 26270 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:47:45.309072 26270 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:47:45.309082 26270 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:47:45.309092 26270 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:47:45.309154 26270 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:47:45.309180 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.309185 26270 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:45.309191 26270 net.cpp:139] Memory required for data: 1862800
I0428 19:47:45.309211 26270 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:45.309219 26270 net.cpp:86] Creating Layer accuracy
I0428 19:47:45.309224 26270 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:47:45.309231 26270 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:45.309237 26270 net.cpp:382] accuracy -> accuracy
I0428 19:47:45.309247 26270 net.cpp:124] Setting up accuracy
I0428 19:47:45.309253 26270 net.cpp:131] Top shape: (1)
I0428 19:47:45.309258 26270 net.cpp:139] Memory required for data: 1862804
I0428 19:47:45.309263 26270 layer_factory.hpp:77] Creating layer loss
I0428 19:47:45.309270 26270 net.cpp:86] Creating Layer loss
I0428 19:47:45.309278 26270 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:47:45.309284 26270 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:45.309290 26270 net.cpp:382] loss -> loss
I0428 19:47:45.309299 26270 layer_factory.hpp:77] Creating layer loss
I0428 19:47:45.309624 26270 net.cpp:124] Setting up loss
I0428 19:47:45.309636 26270 net.cpp:131] Top shape: (1)
I0428 19:47:45.309658 26270 net.cpp:134]     with loss weight 1
I0428 19:47:45.309667 26270 net.cpp:139] Memory required for data: 1862808
I0428 19:47:45.309684 26270 net.cpp:200] loss needs backward computation.
I0428 19:47:45.309691 26270 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:45.309696 26270 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:47:45.309701 26270 net.cpp:200] relu3 needs backward computation.
I0428 19:47:45.309706 26270 net.cpp:200] ip3 needs backward computation.
I0428 19:47:45.309710 26270 net.cpp:200] relu2 needs backward computation.
I0428 19:47:45.309715 26270 net.cpp:200] ip2 needs backward computation.
I0428 19:47:45.309720 26270 net.cpp:200] relu1 needs backward computation.
I0428 19:47:45.309725 26270 net.cpp:200] ip1 needs backward computation.
I0428 19:47:45.309729 26270 net.cpp:200] pool1 needs backward computation.
I0428 19:47:45.309734 26270 net.cpp:200] conv1 needs backward computation.
I0428 19:47:45.309746 26270 net.cpp:200] pool0 needs backward computation.
I0428 19:47:45.309751 26270 net.cpp:200] conv0 needs backward computation.
I0428 19:47:45.309756 26270 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:45.309762 26270 net.cpp:202] mnist does not need backward computation.
I0428 19:47:45.309778 26270 net.cpp:244] This network produces output accuracy
I0428 19:47:45.309784 26270 net.cpp:244] This network produces output loss
I0428 19:47:45.309799 26270 net.cpp:257] Network initialization done.
I0428 19:47:45.309860 26270 solver.cpp:56] Solver scaffolding done.
I0428 19:47:45.310351 26270 caffe.cpp:248] Starting Optimization
I0428 19:47:45.310359 26270 solver.cpp:273] Solving LeNet
I0428 19:47:45.310379 26270 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:45.311483 26270 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:45.316638 26270 blocking_queue.cpp:49] Waiting for data
I0428 19:47:45.387925 26321 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:45.388509 26270 solver.cpp:398]     Test net output #0: accuracy = 0.1017
I0428 19:47:45.388552 26270 solver.cpp:398]     Test net output #1: loss = 2.30992 (* 1 = 2.30992 loss)
I0428 19:47:45.390939 26270 solver.cpp:219] Iteration 0 (-9.15713e-31 iter/s, 0.0805212s/100 iters), loss = 2.30892
I0428 19:47:45.390970 26270 solver.cpp:238]     Train net output #0: loss = 2.30892 (* 1 = 2.30892 loss)
I0428 19:47:45.390986 26270 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:45.474534 26270 solver.cpp:219] Iteration 100 (1196.83 iter/s, 0.0835543s/100 iters), loss = 1.86457
I0428 19:47:45.474580 26270 solver.cpp:238]     Train net output #0: loss = 1.86457 (* 1 = 1.86457 loss)
I0428 19:47:45.474588 26270 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:45.557669 26270 solver.cpp:219] Iteration 200 (1203.64 iter/s, 0.0830812s/100 iters), loss = 0.930184
I0428 19:47:45.557699 26270 solver.cpp:238]     Train net output #0: loss = 0.930184 (* 1 = 0.930184 loss)
I0428 19:47:45.557706 26270 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:45.637759 26270 solver.cpp:219] Iteration 300 (1249.18 iter/s, 0.0800522s/100 iters), loss = 0.944247
I0428 19:47:45.637804 26270 solver.cpp:238]     Train net output #0: loss = 0.944247 (* 1 = 0.944247 loss)
I0428 19:47:45.637811 26270 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:45.722520 26270 solver.cpp:219] Iteration 400 (1180.52 iter/s, 0.0847083s/100 iters), loss = 0.934853
I0428 19:47:45.722564 26270 solver.cpp:238]     Train net output #0: loss = 0.934853 (* 1 = 0.934853 loss)
I0428 19:47:45.722573 26270 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:45.806092 26270 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:45.877336 26321 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:45.877950 26270 solver.cpp:398]     Test net output #0: accuracy = 0.7759
I0428 19:47:45.877990 26270 solver.cpp:398]     Test net output #1: loss = 0.795882 (* 1 = 0.795882 loss)
I0428 19:47:45.879123 26270 solver.cpp:219] Iteration 500 (638.79 iter/s, 0.156546s/100 iters), loss = 0.840078
I0428 19:47:45.879166 26270 solver.cpp:238]     Train net output #0: loss = 0.840078 (* 1 = 0.840078 loss)
I0428 19:47:45.879194 26270 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:45.963354 26270 solver.cpp:219] Iteration 600 (1187.93 iter/s, 0.0841798s/100 iters), loss = 0.714672
I0428 19:47:45.963397 26270 solver.cpp:238]     Train net output #0: loss = 0.714672 (* 1 = 0.714672 loss)
I0428 19:47:45.963404 26270 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:46.036682 26270 solver.cpp:219] Iteration 700 (1364.49 iter/s, 0.0732877s/100 iters), loss = 0.807338
I0428 19:47:46.036711 26270 solver.cpp:238]     Train net output #0: loss = 0.807338 (* 1 = 0.807338 loss)
I0428 19:47:46.036722 26270 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:46.109623 26270 solver.cpp:219] Iteration 800 (1371.66 iter/s, 0.0729046s/100 iters), loss = 0.39125
I0428 19:47:46.109652 26270 solver.cpp:238]     Train net output #0: loss = 0.39125 (* 1 = 0.39125 loss)
I0428 19:47:46.109660 26270 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:46.181869 26270 solver.cpp:219] Iteration 900 (1384.86 iter/s, 0.0722094s/100 iters), loss = 0.362358
I0428 19:47:46.181896 26270 solver.cpp:238]     Train net output #0: loss = 0.362358 (* 1 = 0.362358 loss)
I0428 19:47:46.181903 26270 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:46.205174 26316 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:46.250411 26270 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:46.251135 26270 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:46.251585 26270 solver.cpp:311] Iteration 1000, loss = 0.295695
I0428 19:47:46.251600 26270 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:46.318346 26321 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:46.318984 26270 solver.cpp:398]     Test net output #0: accuracy = 0.9252
I0428 19:47:46.319021 26270 solver.cpp:398]     Test net output #1: loss = 0.261227 (* 1 = 0.261227 loss)
I0428 19:47:46.319030 26270 solver.cpp:316] Optimization Done.
I0428 19:47:46.319033 26270 caffe.cpp:259] Optimization Done.
