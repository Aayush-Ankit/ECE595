I0428 19:29:04.990720 21919 caffe.cpp:218] Using GPUs 0
I0428 19:29:05.031635 21919 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:29:05.495345 21919 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test47.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:29:05.495484 21919 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test47.prototxt
I0428 19:29:05.495740 21919 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:29:05.495759 21919 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:29:05.495844 21919 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:05.495919 21919 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:05.496027 21919 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:29:05.496053 21919 net.cpp:86] Creating Layer mnist
I0428 19:29:05.496064 21919 net.cpp:382] mnist -> data
I0428 19:29:05.496103 21919 net.cpp:382] mnist -> label
I0428 19:29:05.497130 21919 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:29:05.499359 21919 net.cpp:124] Setting up mnist
I0428 19:29:05.499375 21919 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:29:05.499397 21919 net.cpp:131] Top shape: 64 (64)
I0428 19:29:05.499402 21919 net.cpp:139] Memory required for data: 200960
I0428 19:29:05.499411 21919 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:05.499431 21919 net.cpp:86] Creating Layer conv0
I0428 19:29:05.499440 21919 net.cpp:408] conv0 <- data
I0428 19:29:05.499456 21919 net.cpp:382] conv0 -> conv0
I0428 19:29:05.735100 21919 net.cpp:124] Setting up conv0
I0428 19:29:05.735128 21919 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:29:05.735134 21919 net.cpp:139] Memory required for data: 495872
I0428 19:29:05.735168 21919 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:05.735185 21919 net.cpp:86] Creating Layer pool0
I0428 19:29:05.735198 21919 net.cpp:408] pool0 <- conv0
I0428 19:29:05.735206 21919 net.cpp:382] pool0 -> pool0
I0428 19:29:05.735256 21919 net.cpp:124] Setting up pool0
I0428 19:29:05.735265 21919 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:29:05.735270 21919 net.cpp:139] Memory required for data: 569600
I0428 19:29:05.735291 21919 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:05.735302 21919 net.cpp:86] Creating Layer ip1
I0428 19:29:05.735308 21919 net.cpp:408] ip1 <- pool0
I0428 19:29:05.735316 21919 net.cpp:382] ip1 -> ip1
I0428 19:29:05.736335 21919 net.cpp:124] Setting up ip1
I0428 19:29:05.736351 21919 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:05.736371 21919 net.cpp:139] Memory required for data: 576000
I0428 19:29:05.736400 21919 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:05.736413 21919 net.cpp:86] Creating Layer relu1
I0428 19:29:05.736439 21919 net.cpp:408] relu1 <- ip1
I0428 19:29:05.736448 21919 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:05.736661 21919 net.cpp:124] Setting up relu1
I0428 19:29:05.736673 21919 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:05.736678 21919 net.cpp:139] Memory required for data: 582400
I0428 19:29:05.736685 21919 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:05.736696 21919 net.cpp:86] Creating Layer ip2
I0428 19:29:05.736701 21919 net.cpp:408] ip2 <- ip1
I0428 19:29:05.736711 21919 net.cpp:382] ip2 -> ip2
I0428 19:29:05.736867 21919 net.cpp:124] Setting up ip2
I0428 19:29:05.736877 21919 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:05.736882 21919 net.cpp:139] Memory required for data: 584960
I0428 19:29:05.736894 21919 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:05.736902 21919 net.cpp:86] Creating Layer relu2
I0428 19:29:05.736928 21919 net.cpp:408] relu2 <- ip2
I0428 19:29:05.736950 21919 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:05.737740 21919 net.cpp:124] Setting up relu2
I0428 19:29:05.737753 21919 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:05.737758 21919 net.cpp:139] Memory required for data: 587520
I0428 19:29:05.737764 21919 layer_factory.hpp:77] Creating layer loss
I0428 19:29:05.737773 21919 net.cpp:86] Creating Layer loss
I0428 19:29:05.737778 21919 net.cpp:408] loss <- ip2
I0428 19:29:05.737784 21919 net.cpp:408] loss <- label
I0428 19:29:05.737792 21919 net.cpp:382] loss -> loss
I0428 19:29:05.737817 21919 layer_factory.hpp:77] Creating layer loss
I0428 19:29:05.738066 21919 net.cpp:124] Setting up loss
I0428 19:29:05.738077 21919 net.cpp:131] Top shape: (1)
I0428 19:29:05.738082 21919 net.cpp:134]     with loss weight 1
I0428 19:29:05.738101 21919 net.cpp:139] Memory required for data: 587524
I0428 19:29:05.738106 21919 net.cpp:200] loss needs backward computation.
I0428 19:29:05.738112 21919 net.cpp:200] relu2 needs backward computation.
I0428 19:29:05.738116 21919 net.cpp:200] ip2 needs backward computation.
I0428 19:29:05.738121 21919 net.cpp:200] relu1 needs backward computation.
I0428 19:29:05.738126 21919 net.cpp:200] ip1 needs backward computation.
I0428 19:29:05.738131 21919 net.cpp:200] pool0 needs backward computation.
I0428 19:29:05.738135 21919 net.cpp:200] conv0 needs backward computation.
I0428 19:29:05.738142 21919 net.cpp:202] mnist does not need backward computation.
I0428 19:29:05.738147 21919 net.cpp:244] This network produces output loss
I0428 19:29:05.738158 21919 net.cpp:257] Network initialization done.
I0428 19:29:05.738418 21919 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test47.prototxt
I0428 19:29:05.738447 21919 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:29:05.738524 21919 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:05.738632 21919 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:05.738703 21919 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:29:05.738720 21919 net.cpp:86] Creating Layer mnist
I0428 19:29:05.738728 21919 net.cpp:382] mnist -> data
I0428 19:29:05.738739 21919 net.cpp:382] mnist -> label
I0428 19:29:05.738862 21919 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:29:05.740849 21919 net.cpp:124] Setting up mnist
I0428 19:29:05.740895 21919 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:29:05.740903 21919 net.cpp:131] Top shape: 100 (100)
I0428 19:29:05.740908 21919 net.cpp:139] Memory required for data: 314000
I0428 19:29:05.740914 21919 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:29:05.740957 21919 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:29:05.740963 21919 net.cpp:408] label_mnist_1_split <- label
I0428 19:29:05.740988 21919 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:29:05.741000 21919 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:29:05.741066 21919 net.cpp:124] Setting up label_mnist_1_split
I0428 19:29:05.741076 21919 net.cpp:131] Top shape: 100 (100)
I0428 19:29:05.741082 21919 net.cpp:131] Top shape: 100 (100)
I0428 19:29:05.741088 21919 net.cpp:139] Memory required for data: 314800
I0428 19:29:05.741093 21919 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:05.741108 21919 net.cpp:86] Creating Layer conv0
I0428 19:29:05.741117 21919 net.cpp:408] conv0 <- data
I0428 19:29:05.741127 21919 net.cpp:382] conv0 -> conv0
I0428 19:29:05.742868 21919 net.cpp:124] Setting up conv0
I0428 19:29:05.742884 21919 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:29:05.742889 21919 net.cpp:139] Memory required for data: 775600
I0428 19:29:05.742903 21919 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:05.742913 21919 net.cpp:86] Creating Layer pool0
I0428 19:29:05.742919 21919 net.cpp:408] pool0 <- conv0
I0428 19:29:05.742928 21919 net.cpp:382] pool0 -> pool0
I0428 19:29:05.742967 21919 net.cpp:124] Setting up pool0
I0428 19:29:05.742975 21919 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:29:05.742980 21919 net.cpp:139] Memory required for data: 890800
I0428 19:29:05.742985 21919 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:05.743010 21919 net.cpp:86] Creating Layer ip1
I0428 19:29:05.743015 21919 net.cpp:408] ip1 <- pool0
I0428 19:29:05.743022 21919 net.cpp:382] ip1 -> ip1
I0428 19:29:05.743201 21919 net.cpp:124] Setting up ip1
I0428 19:29:05.743209 21919 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:05.743214 21919 net.cpp:139] Memory required for data: 900800
I0428 19:29:05.743227 21919 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:05.743233 21919 net.cpp:86] Creating Layer relu1
I0428 19:29:05.743240 21919 net.cpp:408] relu1 <- ip1
I0428 19:29:05.743248 21919 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:05.743412 21919 net.cpp:124] Setting up relu1
I0428 19:29:05.743423 21919 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:05.743429 21919 net.cpp:139] Memory required for data: 910800
I0428 19:29:05.743448 21919 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:05.743458 21919 net.cpp:86] Creating Layer ip2
I0428 19:29:05.743463 21919 net.cpp:408] ip2 <- ip1
I0428 19:29:05.743472 21919 net.cpp:382] ip2 -> ip2
I0428 19:29:05.743614 21919 net.cpp:124] Setting up ip2
I0428 19:29:05.743623 21919 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:05.743628 21919 net.cpp:139] Memory required for data: 914800
I0428 19:29:05.743639 21919 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:05.743646 21919 net.cpp:86] Creating Layer relu2
I0428 19:29:05.743652 21919 net.cpp:408] relu2 <- ip2
I0428 19:29:05.743659 21919 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:05.743891 21919 net.cpp:124] Setting up relu2
I0428 19:29:05.743899 21919 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:05.743904 21919 net.cpp:139] Memory required for data: 918800
I0428 19:29:05.743909 21919 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:29:05.743919 21919 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:29:05.743940 21919 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:29:05.743948 21919 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:29:05.743974 21919 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:29:05.744016 21919 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:29:05.744025 21919 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:05.744032 21919 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:05.744038 21919 net.cpp:139] Memory required for data: 926800
I0428 19:29:05.744043 21919 layer_factory.hpp:77] Creating layer accuracy
I0428 19:29:05.744052 21919 net.cpp:86] Creating Layer accuracy
I0428 19:29:05.744062 21919 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:29:05.744069 21919 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:29:05.744078 21919 net.cpp:382] accuracy -> accuracy
I0428 19:29:05.744089 21919 net.cpp:124] Setting up accuracy
I0428 19:29:05.744097 21919 net.cpp:131] Top shape: (1)
I0428 19:29:05.744103 21919 net.cpp:139] Memory required for data: 926804
I0428 19:29:05.744108 21919 layer_factory.hpp:77] Creating layer loss
I0428 19:29:05.744117 21919 net.cpp:86] Creating Layer loss
I0428 19:29:05.744122 21919 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:29:05.744129 21919 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:29:05.744137 21919 net.cpp:382] loss -> loss
I0428 19:29:05.744146 21919 layer_factory.hpp:77] Creating layer loss
I0428 19:29:05.745124 21919 net.cpp:124] Setting up loss
I0428 19:29:05.745153 21919 net.cpp:131] Top shape: (1)
I0428 19:29:05.745159 21919 net.cpp:134]     with loss weight 1
I0428 19:29:05.745168 21919 net.cpp:139] Memory required for data: 926808
I0428 19:29:05.745174 21919 net.cpp:200] loss needs backward computation.
I0428 19:29:05.745180 21919 net.cpp:202] accuracy does not need backward computation.
I0428 19:29:05.745187 21919 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:29:05.745193 21919 net.cpp:200] relu2 needs backward computation.
I0428 19:29:05.745198 21919 net.cpp:200] ip2 needs backward computation.
I0428 19:29:05.745218 21919 net.cpp:200] relu1 needs backward computation.
I0428 19:29:05.745221 21919 net.cpp:200] ip1 needs backward computation.
I0428 19:29:05.745227 21919 net.cpp:200] pool0 needs backward computation.
I0428 19:29:05.745232 21919 net.cpp:200] conv0 needs backward computation.
I0428 19:29:05.745239 21919 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:29:05.745244 21919 net.cpp:202] mnist does not need backward computation.
I0428 19:29:05.745249 21919 net.cpp:244] This network produces output accuracy
I0428 19:29:05.745255 21919 net.cpp:244] This network produces output loss
I0428 19:29:05.745270 21919 net.cpp:257] Network initialization done.
I0428 19:29:05.745339 21919 solver.cpp:56] Solver scaffolding done.
I0428 19:29:05.745553 21919 caffe.cpp:248] Starting Optimization
I0428 19:29:05.745560 21919 solver.cpp:273] Solving LeNet
I0428 19:29:05.745565 21919 solver.cpp:274] Learning Rate Policy: inv
I0428 19:29:05.745694 21919 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:29:05.748172 21919 blocking_queue.cpp:49] Waiting for data
I0428 19:29:05.824138 21928 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:05.824512 21919 solver.cpp:398]     Test net output #0: accuracy = 0.1544
I0428 19:29:05.824530 21919 solver.cpp:398]     Test net output #1: loss = 2.28843 (* 1 = 2.28843 loss)
I0428 19:29:05.826020 21919 solver.cpp:219] Iteration 0 (-8.81965e-31 iter/s, 0.0804154s/100 iters), loss = 2.28572
I0428 19:29:05.826057 21919 solver.cpp:238]     Train net output #0: loss = 2.28572 (* 1 = 2.28572 loss)
I0428 19:29:05.826091 21919 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:29:05.875720 21919 solver.cpp:219] Iteration 100 (2013.7 iter/s, 0.0496599s/100 iters), loss = 1.07726
I0428 19:29:05.875749 21919 solver.cpp:238]     Train net output #0: loss = 1.07726 (* 1 = 1.07726 loss)
I0428 19:29:05.875775 21919 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:29:05.923841 21919 solver.cpp:219] Iteration 200 (2079.61 iter/s, 0.048086s/100 iters), loss = 0.78939
I0428 19:29:05.923895 21919 solver.cpp:238]     Train net output #0: loss = 0.78939 (* 1 = 0.78939 loss)
I0428 19:29:05.923908 21919 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:29:05.972662 21919 solver.cpp:219] Iteration 300 (2050.11 iter/s, 0.0487778s/100 iters), loss = 1.0956
I0428 19:29:05.972713 21919 solver.cpp:238]     Train net output #0: loss = 1.0956 (* 1 = 1.0956 loss)
I0428 19:29:05.972726 21919 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:29:06.021867 21919 solver.cpp:219] Iteration 400 (2033.9 iter/s, 0.0491667s/100 iters), loss = 0.866044
I0428 19:29:06.021893 21919 solver.cpp:238]     Train net output #0: loss = 0.866044 (* 1 = 0.866044 loss)
I0428 19:29:06.021919 21919 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:29:06.073145 21919 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:29:06.126216 21928 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:06.126602 21919 solver.cpp:398]     Test net output #0: accuracy = 0.6659
I0428 19:29:06.126623 21919 solver.cpp:398]     Test net output #1: loss = 0.885097 (* 1 = 0.885097 loss)
I0428 19:29:06.127228 21919 solver.cpp:219] Iteration 500 (949.435 iter/s, 0.105326s/100 iters), loss = 1.01872
I0428 19:29:06.127267 21919 solver.cpp:238]     Train net output #0: loss = 1.01872 (* 1 = 1.01872 loss)
I0428 19:29:06.127293 21919 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:29:06.176370 21919 solver.cpp:219] Iteration 600 (2036.25 iter/s, 0.0491099s/100 iters), loss = 0.903569
I0428 19:29:06.176398 21919 solver.cpp:238]     Train net output #0: loss = 0.903569 (* 1 = 0.903569 loss)
I0428 19:29:06.176424 21919 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:29:06.229557 21919 solver.cpp:219] Iteration 700 (1881.59 iter/s, 0.0531466s/100 iters), loss = 0.784882
I0428 19:29:06.229622 21919 solver.cpp:238]     Train net output #0: loss = 0.784882 (* 1 = 0.784882 loss)
I0428 19:29:06.229635 21919 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:29:06.291285 21919 solver.cpp:219] Iteration 800 (1621.6 iter/s, 0.0616673s/100 iters), loss = 1.11321
I0428 19:29:06.291317 21919 solver.cpp:238]     Train net output #0: loss = 1.11321 (* 1 = 1.11321 loss)
I0428 19:29:06.291337 21919 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:29:06.346220 21919 solver.cpp:219] Iteration 900 (1821.61 iter/s, 0.0548966s/100 iters), loss = 0.842353
I0428 19:29:06.346248 21919 solver.cpp:238]     Train net output #0: loss = 0.842353 (* 1 = 0.842353 loss)
I0428 19:29:06.346269 21919 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:29:06.366693 21925 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:06.399624 21919 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:29:06.400298 21919 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:29:06.400679 21919 solver.cpp:311] Iteration 1000, loss = 0.830477
I0428 19:29:06.400696 21919 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:29:06.475263 21928 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:06.475675 21919 solver.cpp:398]     Test net output #0: accuracy = 0.675
I0428 19:29:06.475699 21919 solver.cpp:398]     Test net output #1: loss = 0.835128 (* 1 = 0.835128 loss)
I0428 19:29:06.475705 21919 solver.cpp:316] Optimization Done.
I0428 19:29:06.475709 21919 caffe.cpp:259] Optimization Done.
