I0428 20:25:07.989146  2543 caffe.cpp:218] Using GPUs 0
I0428 20:25:08.026021  2543 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:25:08.539371  2543 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1449.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:25:08.539516  2543 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1449.prototxt
I0428 20:25:08.539897  2543 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:25:08.539917  2543 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:25:08.540009  2543 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:08.540088  2543 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:08.540189  2543 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:25:08.540213  2543 net.cpp:86] Creating Layer mnist
I0428 20:25:08.540221  2543 net.cpp:382] mnist -> data
I0428 20:25:08.540246  2543 net.cpp:382] mnist -> label
I0428 20:25:08.541342  2543 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:25:08.544008  2543 net.cpp:124] Setting up mnist
I0428 20:25:08.544033  2543 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:25:08.544039  2543 net.cpp:131] Top shape: 64 (64)
I0428 20:25:08.544042  2543 net.cpp:139] Memory required for data: 200960
I0428 20:25:08.544050  2543 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:08.544067  2543 net.cpp:86] Creating Layer conv0
I0428 20:25:08.544073  2543 net.cpp:408] conv0 <- data
I0428 20:25:08.544085  2543 net.cpp:382] conv0 -> conv0
I0428 20:25:08.836413  2543 net.cpp:124] Setting up conv0
I0428 20:25:08.836447  2543 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:25:08.836452  2543 net.cpp:139] Memory required for data: 14946560
I0428 20:25:08.836495  2543 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:08.836510  2543 net.cpp:86] Creating Layer pool0
I0428 20:25:08.836515  2543 net.cpp:408] pool0 <- conv0
I0428 20:25:08.836522  2543 net.cpp:382] pool0 -> pool0
I0428 20:25:08.836580  2543 net.cpp:124] Setting up pool0
I0428 20:25:08.836589  2543 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:25:08.836594  2543 net.cpp:139] Memory required for data: 18632960
I0428 20:25:08.836598  2543 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:08.836611  2543 net.cpp:86] Creating Layer conv1
I0428 20:25:08.836616  2543 net.cpp:408] conv1 <- pool0
I0428 20:25:08.836622  2543 net.cpp:382] conv1 -> conv1
I0428 20:25:08.839787  2543 net.cpp:124] Setting up conv1
I0428 20:25:08.839805  2543 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:25:08.839810  2543 net.cpp:139] Memory required for data: 18665728
I0428 20:25:08.839821  2543 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:08.839831  2543 net.cpp:86] Creating Layer pool1
I0428 20:25:08.839836  2543 net.cpp:408] pool1 <- conv1
I0428 20:25:08.839843  2543 net.cpp:382] pool1 -> pool1
I0428 20:25:08.839886  2543 net.cpp:124] Setting up pool1
I0428 20:25:08.839893  2543 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:25:08.839897  2543 net.cpp:139] Memory required for data: 18673920
I0428 20:25:08.839901  2543 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:08.839910  2543 net.cpp:86] Creating Layer ip1
I0428 20:25:08.839915  2543 net.cpp:408] ip1 <- pool1
I0428 20:25:08.839920  2543 net.cpp:382] ip1 -> ip1
I0428 20:25:08.840037  2543 net.cpp:124] Setting up ip1
I0428 20:25:08.840046  2543 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:25:08.840051  2543 net.cpp:139] Memory required for data: 18680320
I0428 20:25:08.840059  2543 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:08.840066  2543 net.cpp:86] Creating Layer relu1
I0428 20:25:08.840070  2543 net.cpp:408] relu1 <- ip1
I0428 20:25:08.840076  2543 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:08.840279  2543 net.cpp:124] Setting up relu1
I0428 20:25:08.840291  2543 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:25:08.840296  2543 net.cpp:139] Memory required for data: 18686720
I0428 20:25:08.840301  2543 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:08.840308  2543 net.cpp:86] Creating Layer ip2
I0428 20:25:08.840312  2543 net.cpp:408] ip2 <- ip1
I0428 20:25:08.840318  2543 net.cpp:382] ip2 -> ip2
I0428 20:25:08.840430  2543 net.cpp:124] Setting up ip2
I0428 20:25:08.840440  2543 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:08.840443  2543 net.cpp:139] Memory required for data: 18689280
I0428 20:25:08.840451  2543 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:08.840457  2543 net.cpp:86] Creating Layer relu2
I0428 20:25:08.840461  2543 net.cpp:408] relu2 <- ip2
I0428 20:25:08.840467  2543 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:08.841322  2543 net.cpp:124] Setting up relu2
I0428 20:25:08.841338  2543 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:08.841343  2543 net.cpp:139] Memory required for data: 18691840
I0428 20:25:08.841348  2543 layer_factory.hpp:77] Creating layer loss
I0428 20:25:08.841356  2543 net.cpp:86] Creating Layer loss
I0428 20:25:08.841361  2543 net.cpp:408] loss <- ip2
I0428 20:25:08.841367  2543 net.cpp:408] loss <- label
I0428 20:25:08.841373  2543 net.cpp:382] loss -> loss
I0428 20:25:08.841393  2543 layer_factory.hpp:77] Creating layer loss
I0428 20:25:08.841665  2543 net.cpp:124] Setting up loss
I0428 20:25:08.841678  2543 net.cpp:131] Top shape: (1)
I0428 20:25:08.841683  2543 net.cpp:134]     with loss weight 1
I0428 20:25:08.841701  2543 net.cpp:139] Memory required for data: 18691844
I0428 20:25:08.841704  2543 net.cpp:200] loss needs backward computation.
I0428 20:25:08.841709  2543 net.cpp:200] relu2 needs backward computation.
I0428 20:25:08.841713  2543 net.cpp:200] ip2 needs backward computation.
I0428 20:25:08.841717  2543 net.cpp:200] relu1 needs backward computation.
I0428 20:25:08.841720  2543 net.cpp:200] ip1 needs backward computation.
I0428 20:25:08.841737  2543 net.cpp:200] pool1 needs backward computation.
I0428 20:25:08.841742  2543 net.cpp:200] conv1 needs backward computation.
I0428 20:25:08.841745  2543 net.cpp:200] pool0 needs backward computation.
I0428 20:25:08.841749  2543 net.cpp:200] conv0 needs backward computation.
I0428 20:25:08.841754  2543 net.cpp:202] mnist does not need backward computation.
I0428 20:25:08.841758  2543 net.cpp:244] This network produces output loss
I0428 20:25:08.841768  2543 net.cpp:257] Network initialization done.
I0428 20:25:08.842130  2543 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1449.prototxt
I0428 20:25:08.842161  2543 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:25:08.842262  2543 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:08.842339  2543 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:08.842393  2543 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:25:08.842408  2543 net.cpp:86] Creating Layer mnist
I0428 20:25:08.842414  2543 net.cpp:382] mnist -> data
I0428 20:25:08.842423  2543 net.cpp:382] mnist -> label
I0428 20:25:08.842525  2543 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:25:08.844727  2543 net.cpp:124] Setting up mnist
I0428 20:25:08.844744  2543 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:25:08.844750  2543 net.cpp:131] Top shape: 100 (100)
I0428 20:25:08.844754  2543 net.cpp:139] Memory required for data: 314000
I0428 20:25:08.844759  2543 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:25:08.844769  2543 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:25:08.844772  2543 net.cpp:408] label_mnist_1_split <- label
I0428 20:25:08.844779  2543 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:25:08.844787  2543 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:25:08.845007  2543 net.cpp:124] Setting up label_mnist_1_split
I0428 20:25:08.845038  2543 net.cpp:131] Top shape: 100 (100)
I0428 20:25:08.845053  2543 net.cpp:131] Top shape: 100 (100)
I0428 20:25:08.845060  2543 net.cpp:139] Memory required for data: 314800
I0428 20:25:08.845068  2543 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:08.845089  2543 net.cpp:86] Creating Layer conv0
I0428 20:25:08.845098  2543 net.cpp:408] conv0 <- data
I0428 20:25:08.845111  2543 net.cpp:382] conv0 -> conv0
I0428 20:25:08.847882  2543 net.cpp:124] Setting up conv0
I0428 20:25:08.847910  2543 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:25:08.847918  2543 net.cpp:139] Memory required for data: 23354800
I0428 20:25:08.847937  2543 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:08.847950  2543 net.cpp:86] Creating Layer pool0
I0428 20:25:08.847957  2543 net.cpp:408] pool0 <- conv0
I0428 20:25:08.847968  2543 net.cpp:382] pool0 -> pool0
I0428 20:25:08.848037  2543 net.cpp:124] Setting up pool0
I0428 20:25:08.848050  2543 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:25:08.848057  2543 net.cpp:139] Memory required for data: 29114800
I0428 20:25:08.848063  2543 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:08.848081  2543 net.cpp:86] Creating Layer conv1
I0428 20:25:08.848094  2543 net.cpp:408] conv1 <- pool0
I0428 20:25:08.848107  2543 net.cpp:382] conv1 -> conv1
I0428 20:25:08.850764  2543 net.cpp:124] Setting up conv1
I0428 20:25:08.850790  2543 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:25:08.850798  2543 net.cpp:139] Memory required for data: 29166000
I0428 20:25:08.850814  2543 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:08.850828  2543 net.cpp:86] Creating Layer pool1
I0428 20:25:08.850836  2543 net.cpp:408] pool1 <- conv1
I0428 20:25:08.850847  2543 net.cpp:382] pool1 -> pool1
I0428 20:25:08.850916  2543 net.cpp:124] Setting up pool1
I0428 20:25:08.850929  2543 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:25:08.850950  2543 net.cpp:139] Memory required for data: 29178800
I0428 20:25:08.850962  2543 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:08.850975  2543 net.cpp:86] Creating Layer ip1
I0428 20:25:08.850980  2543 net.cpp:408] ip1 <- pool1
I0428 20:25:08.850992  2543 net.cpp:382] ip1 -> ip1
I0428 20:25:08.851187  2543 net.cpp:124] Setting up ip1
I0428 20:25:08.851202  2543 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:25:08.851208  2543 net.cpp:139] Memory required for data: 29188800
I0428 20:25:08.851222  2543 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:08.851231  2543 net.cpp:86] Creating Layer relu1
I0428 20:25:08.851238  2543 net.cpp:408] relu1 <- ip1
I0428 20:25:08.851249  2543 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:08.851608  2543 net.cpp:124] Setting up relu1
I0428 20:25:08.851626  2543 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:25:08.851632  2543 net.cpp:139] Memory required for data: 29198800
I0428 20:25:08.851639  2543 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:08.851652  2543 net.cpp:86] Creating Layer ip2
I0428 20:25:08.851660  2543 net.cpp:408] ip2 <- ip1
I0428 20:25:08.851668  2543 net.cpp:382] ip2 -> ip2
I0428 20:25:08.851852  2543 net.cpp:124] Setting up ip2
I0428 20:25:08.851864  2543 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:08.851871  2543 net.cpp:139] Memory required for data: 29202800
I0428 20:25:08.851881  2543 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:08.851889  2543 net.cpp:86] Creating Layer relu2
I0428 20:25:08.851896  2543 net.cpp:408] relu2 <- ip2
I0428 20:25:08.851905  2543 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:08.852198  2543 net.cpp:124] Setting up relu2
I0428 20:25:08.852213  2543 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:08.852219  2543 net.cpp:139] Memory required for data: 29206800
I0428 20:25:08.852224  2543 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:25:08.852241  2543 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:25:08.852247  2543 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:25:08.852258  2543 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:25:08.852288  2543 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:25:08.852350  2543 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:25:08.852361  2543 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:08.852370  2543 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:08.852375  2543 net.cpp:139] Memory required for data: 29214800
I0428 20:25:08.852380  2543 layer_factory.hpp:77] Creating layer accuracy
I0428 20:25:08.852391  2543 net.cpp:86] Creating Layer accuracy
I0428 20:25:08.852397  2543 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:25:08.852404  2543 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:25:08.852414  2543 net.cpp:382] accuracy -> accuracy
I0428 20:25:08.852427  2543 net.cpp:124] Setting up accuracy
I0428 20:25:08.852434  2543 net.cpp:131] Top shape: (1)
I0428 20:25:08.852439  2543 net.cpp:139] Memory required for data: 29214804
I0428 20:25:08.852445  2543 layer_factory.hpp:77] Creating layer loss
I0428 20:25:08.852453  2543 net.cpp:86] Creating Layer loss
I0428 20:25:08.852459  2543 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:25:08.852468  2543 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:25:08.852475  2543 net.cpp:382] loss -> loss
I0428 20:25:08.852485  2543 layer_factory.hpp:77] Creating layer loss
I0428 20:25:08.852937  2543 net.cpp:124] Setting up loss
I0428 20:25:08.852954  2543 net.cpp:131] Top shape: (1)
I0428 20:25:08.852960  2543 net.cpp:134]     with loss weight 1
I0428 20:25:08.852972  2543 net.cpp:139] Memory required for data: 29214808
I0428 20:25:08.852977  2543 net.cpp:200] loss needs backward computation.
I0428 20:25:08.852985  2543 net.cpp:202] accuracy does not need backward computation.
I0428 20:25:08.852993  2543 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:25:08.852998  2543 net.cpp:200] relu2 needs backward computation.
I0428 20:25:08.853003  2543 net.cpp:200] ip2 needs backward computation.
I0428 20:25:08.853008  2543 net.cpp:200] relu1 needs backward computation.
I0428 20:25:08.853013  2543 net.cpp:200] ip1 needs backward computation.
I0428 20:25:08.853019  2543 net.cpp:200] pool1 needs backward computation.
I0428 20:25:08.853024  2543 net.cpp:200] conv1 needs backward computation.
I0428 20:25:08.853030  2543 net.cpp:200] pool0 needs backward computation.
I0428 20:25:08.853036  2543 net.cpp:200] conv0 needs backward computation.
I0428 20:25:08.853044  2543 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:25:08.853049  2543 net.cpp:202] mnist does not need backward computation.
I0428 20:25:08.853055  2543 net.cpp:244] This network produces output accuracy
I0428 20:25:08.853061  2543 net.cpp:244] This network produces output loss
I0428 20:25:08.853081  2543 net.cpp:257] Network initialization done.
I0428 20:25:08.853148  2543 solver.cpp:56] Solver scaffolding done.
I0428 20:25:08.853634  2543 caffe.cpp:248] Starting Optimization
I0428 20:25:08.853644  2543 solver.cpp:273] Solving LeNet
I0428 20:25:08.853651  2543 solver.cpp:274] Learning Rate Policy: inv
I0428 20:25:08.854881  2543 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:25:08.956360  2550 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:08.959740  2543 solver.cpp:398]     Test net output #0: accuracy = 0.119
I0428 20:25:08.959765  2543 solver.cpp:398]     Test net output #1: loss = 2.35826 (* 1 = 2.35826 loss)
I0428 20:25:08.964584  2543 solver.cpp:219] Iteration 0 (-3.9736e-31 iter/s, 0.110897s/100 iters), loss = 2.34641
I0428 20:25:08.964615  2543 solver.cpp:238]     Train net output #0: loss = 2.34641 (* 1 = 2.34641 loss)
I0428 20:25:08.964629  2543 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:25:09.164758  2543 solver.cpp:219] Iteration 100 (499.694 iter/s, 0.200122s/100 iters), loss = 0.723486
I0428 20:25:09.164795  2543 solver.cpp:238]     Train net output #0: loss = 0.723486 (* 1 = 0.723486 loss)
I0428 20:25:09.164804  2543 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:25:09.380998  2543 solver.cpp:219] Iteration 200 (462.572 iter/s, 0.216183s/100 iters), loss = 0.622611
I0428 20:25:09.381081  2543 solver.cpp:238]     Train net output #0: loss = 0.622611 (* 1 = 0.622611 loss)
I0428 20:25:09.381095  2543 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:25:09.594437  2543 solver.cpp:219] Iteration 300 (468.741 iter/s, 0.213337s/100 iters), loss = 0.652457
I0428 20:25:09.594501  2543 solver.cpp:238]     Train net output #0: loss = 0.652457 (* 1 = 0.652457 loss)
I0428 20:25:09.594516  2543 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:25:09.808259  2543 solver.cpp:219] Iteration 400 (467.85 iter/s, 0.213744s/100 iters), loss = 0.843584
I0428 20:25:09.808311  2543 solver.cpp:238]     Train net output #0: loss = 0.843584 (* 1 = 0.843584 loss)
I0428 20:25:09.808329  2543 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:25:10.014946  2543 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:25:10.112686  2550 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:10.116096  2543 solver.cpp:398]     Test net output #0: accuracy = 0.7629
I0428 20:25:10.116120  2543 solver.cpp:398]     Test net output #1: loss = 0.643343 (* 1 = 0.643343 loss)
I0428 20:25:10.117992  2543 solver.cpp:219] Iteration 500 (322.929 iter/s, 0.309666s/100 iters), loss = 0.833237
I0428 20:25:10.118021  2543 solver.cpp:238]     Train net output #0: loss = 0.833237 (* 1 = 0.833237 loss)
I0428 20:25:10.118029  2543 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:25:10.315933  2543 solver.cpp:219] Iteration 600 (505.32 iter/s, 0.197894s/100 iters), loss = 0.496044
I0428 20:25:10.315970  2543 solver.cpp:238]     Train net output #0: loss = 0.496044 (* 1 = 0.496044 loss)
I0428 20:25:10.315979  2543 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:25:10.524654  2543 solver.cpp:219] Iteration 700 (479.231 iter/s, 0.208668s/100 iters), loss = 0.654117
I0428 20:25:10.524695  2543 solver.cpp:238]     Train net output #0: loss = 0.654117 (* 1 = 0.654117 loss)
I0428 20:25:10.524705  2543 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:25:10.740069  2543 solver.cpp:219] Iteration 800 (464.349 iter/s, 0.215355s/100 iters), loss = 0.678467
I0428 20:25:10.740119  2543 solver.cpp:238]     Train net output #0: loss = 0.678467 (* 1 = 0.678467 loss)
I0428 20:25:10.740133  2543 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:25:10.955401  2543 solver.cpp:219] Iteration 900 (464.543 iter/s, 0.215265s/100 iters), loss = 0.627501
I0428 20:25:10.955452  2543 solver.cpp:238]     Train net output #0: loss = 0.627501 (* 1 = 0.627501 loss)
I0428 20:25:10.955466  2543 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:25:11.026676  2549 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:11.167224  2543 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:25:11.168973  2543 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:25:11.170142  2543 solver.cpp:311] Iteration 1000, loss = 0.556917
I0428 20:25:11.170171  2543 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:25:11.271312  2550 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:11.273587  2543 solver.cpp:398]     Test net output #0: accuracy = 0.7745
I0428 20:25:11.273612  2543 solver.cpp:398]     Test net output #1: loss = 0.581844 (* 1 = 0.581844 loss)
I0428 20:25:11.273617  2543 solver.cpp:316] Optimization Done.
I0428 20:25:11.273622  2543 caffe.cpp:259] Optimization Done.
