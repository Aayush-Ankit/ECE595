I0428 20:28:18.275115  3333 caffe.cpp:218] Using GPUs 0
I0428 20:28:18.312556  3333 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:18.830202  3333 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1503.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:18.830348  3333 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1503.prototxt
I0428 20:28:18.830763  3333 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:18.830783  3333 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:18.830886  3333 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:18.830966  3333 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:18.831068  3333 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:18.831094  3333 net.cpp:86] Creating Layer mnist
I0428 20:28:18.831101  3333 net.cpp:382] mnist -> data
I0428 20:28:18.831125  3333 net.cpp:382] mnist -> label
I0428 20:28:18.832221  3333 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:18.834683  3333 net.cpp:124] Setting up mnist
I0428 20:28:18.834702  3333 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:18.834710  3333 net.cpp:131] Top shape: 64 (64)
I0428 20:28:18.834713  3333 net.cpp:139] Memory required for data: 200960
I0428 20:28:18.834722  3333 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:18.834738  3333 net.cpp:86] Creating Layer conv0
I0428 20:28:18.834758  3333 net.cpp:408] conv0 <- data
I0428 20:28:18.834774  3333 net.cpp:382] conv0 -> conv0
I0428 20:28:19.129410  3333 net.cpp:124] Setting up conv0
I0428 20:28:19.129441  3333 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:19.129446  3333 net.cpp:139] Memory required for data: 14946560
I0428 20:28:19.129472  3333 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:19.129487  3333 net.cpp:86] Creating Layer pool0
I0428 20:28:19.129492  3333 net.cpp:408] pool0 <- conv0
I0428 20:28:19.129498  3333 net.cpp:382] pool0 -> pool0
I0428 20:28:19.129560  3333 net.cpp:124] Setting up pool0
I0428 20:28:19.129570  3333 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:19.129573  3333 net.cpp:139] Memory required for data: 18632960
I0428 20:28:19.129577  3333 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:19.129591  3333 net.cpp:86] Creating Layer conv1
I0428 20:28:19.129595  3333 net.cpp:408] conv1 <- pool0
I0428 20:28:19.129602  3333 net.cpp:382] conv1 -> conv1
I0428 20:28:19.132822  3333 net.cpp:124] Setting up conv1
I0428 20:28:19.132839  3333 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:19.132844  3333 net.cpp:139] Memory required for data: 18714880
I0428 20:28:19.132855  3333 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:19.132864  3333 net.cpp:86] Creating Layer pool1
I0428 20:28:19.132869  3333 net.cpp:408] pool1 <- conv1
I0428 20:28:19.132875  3333 net.cpp:382] pool1 -> pool1
I0428 20:28:19.132921  3333 net.cpp:124] Setting up pool1
I0428 20:28:19.132930  3333 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:19.132935  3333 net.cpp:139] Memory required for data: 18735360
I0428 20:28:19.132938  3333 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:19.132947  3333 net.cpp:86] Creating Layer ip1
I0428 20:28:19.132951  3333 net.cpp:408] ip1 <- pool1
I0428 20:28:19.132956  3333 net.cpp:382] ip1 -> ip1
I0428 20:28:19.133092  3333 net.cpp:124] Setting up ip1
I0428 20:28:19.133101  3333 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:19.133105  3333 net.cpp:139] Memory required for data: 18741760
I0428 20:28:19.133113  3333 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:19.133121  3333 net.cpp:86] Creating Layer relu1
I0428 20:28:19.133126  3333 net.cpp:408] relu1 <- ip1
I0428 20:28:19.133131  3333 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:19.133327  3333 net.cpp:124] Setting up relu1
I0428 20:28:19.133337  3333 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:19.133342  3333 net.cpp:139] Memory required for data: 18748160
I0428 20:28:19.133345  3333 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:19.133353  3333 net.cpp:86] Creating Layer ip2
I0428 20:28:19.133358  3333 net.cpp:408] ip2 <- ip1
I0428 20:28:19.133363  3333 net.cpp:382] ip2 -> ip2
I0428 20:28:19.133474  3333 net.cpp:124] Setting up ip2
I0428 20:28:19.133483  3333 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:19.133487  3333 net.cpp:139] Memory required for data: 18750720
I0428 20:28:19.133494  3333 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:19.133502  3333 net.cpp:86] Creating Layer relu2
I0428 20:28:19.133505  3333 net.cpp:408] relu2 <- ip2
I0428 20:28:19.133512  3333 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:19.134361  3333 net.cpp:124] Setting up relu2
I0428 20:28:19.134377  3333 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:19.134382  3333 net.cpp:139] Memory required for data: 18753280
I0428 20:28:19.134385  3333 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:19.134395  3333 net.cpp:86] Creating Layer ip3
I0428 20:28:19.134399  3333 net.cpp:408] ip3 <- ip2
I0428 20:28:19.134407  3333 net.cpp:382] ip3 -> ip3
I0428 20:28:19.134533  3333 net.cpp:124] Setting up ip3
I0428 20:28:19.134543  3333 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:19.134547  3333 net.cpp:139] Memory required for data: 18755840
I0428 20:28:19.134557  3333 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:19.134563  3333 net.cpp:86] Creating Layer relu3
I0428 20:28:19.134569  3333 net.cpp:408] relu3 <- ip3
I0428 20:28:19.134577  3333 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:19.134790  3333 net.cpp:124] Setting up relu3
I0428 20:28:19.134801  3333 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:19.134805  3333 net.cpp:139] Memory required for data: 18758400
I0428 20:28:19.134809  3333 layer_factory.hpp:77] Creating layer loss
I0428 20:28:19.134816  3333 net.cpp:86] Creating Layer loss
I0428 20:28:19.134819  3333 net.cpp:408] loss <- ip3
I0428 20:28:19.134824  3333 net.cpp:408] loss <- label
I0428 20:28:19.134832  3333 net.cpp:382] loss -> loss
I0428 20:28:19.134853  3333 layer_factory.hpp:77] Creating layer loss
I0428 20:28:19.135136  3333 net.cpp:124] Setting up loss
I0428 20:28:19.135148  3333 net.cpp:131] Top shape: (1)
I0428 20:28:19.135151  3333 net.cpp:134]     with loss weight 1
I0428 20:28:19.135167  3333 net.cpp:139] Memory required for data: 18758404
I0428 20:28:19.135172  3333 net.cpp:200] loss needs backward computation.
I0428 20:28:19.135176  3333 net.cpp:200] relu3 needs backward computation.
I0428 20:28:19.135180  3333 net.cpp:200] ip3 needs backward computation.
I0428 20:28:19.135185  3333 net.cpp:200] relu2 needs backward computation.
I0428 20:28:19.135187  3333 net.cpp:200] ip2 needs backward computation.
I0428 20:28:19.135191  3333 net.cpp:200] relu1 needs backward computation.
I0428 20:28:19.135195  3333 net.cpp:200] ip1 needs backward computation.
I0428 20:28:19.135198  3333 net.cpp:200] pool1 needs backward computation.
I0428 20:28:19.135202  3333 net.cpp:200] conv1 needs backward computation.
I0428 20:28:19.135205  3333 net.cpp:200] pool0 needs backward computation.
I0428 20:28:19.135210  3333 net.cpp:200] conv0 needs backward computation.
I0428 20:28:19.135213  3333 net.cpp:202] mnist does not need backward computation.
I0428 20:28:19.135218  3333 net.cpp:244] This network produces output loss
I0428 20:28:19.135231  3333 net.cpp:257] Network initialization done.
I0428 20:28:19.135620  3333 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1503.prototxt
I0428 20:28:19.135653  3333 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:19.135764  3333 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:19.135864  3333 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:19.135915  3333 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:19.135931  3333 net.cpp:86] Creating Layer mnist
I0428 20:28:19.135937  3333 net.cpp:382] mnist -> data
I0428 20:28:19.135946  3333 net.cpp:382] mnist -> label
I0428 20:28:19.136054  3333 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:19.138489  3333 net.cpp:124] Setting up mnist
I0428 20:28:19.138530  3333 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:19.138540  3333 net.cpp:131] Top shape: 100 (100)
I0428 20:28:19.138543  3333 net.cpp:139] Memory required for data: 314000
I0428 20:28:19.138547  3333 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:19.138561  3333 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:19.138564  3333 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:19.138571  3333 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:19.138579  3333 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:19.138691  3333 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:19.138701  3333 net.cpp:131] Top shape: 100 (100)
I0428 20:28:19.138705  3333 net.cpp:131] Top shape: 100 (100)
I0428 20:28:19.138710  3333 net.cpp:139] Memory required for data: 314800
I0428 20:28:19.138713  3333 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:19.138725  3333 net.cpp:86] Creating Layer conv0
I0428 20:28:19.138730  3333 net.cpp:408] conv0 <- data
I0428 20:28:19.138736  3333 net.cpp:382] conv0 -> conv0
I0428 20:28:19.140705  3333 net.cpp:124] Setting up conv0
I0428 20:28:19.140722  3333 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:19.140727  3333 net.cpp:139] Memory required for data: 23354800
I0428 20:28:19.140739  3333 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:19.140748  3333 net.cpp:86] Creating Layer pool0
I0428 20:28:19.140753  3333 net.cpp:408] pool0 <- conv0
I0428 20:28:19.140759  3333 net.cpp:382] pool0 -> pool0
I0428 20:28:19.140807  3333 net.cpp:124] Setting up pool0
I0428 20:28:19.140825  3333 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:19.140830  3333 net.cpp:139] Memory required for data: 29114800
I0428 20:28:19.140832  3333 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:19.140844  3333 net.cpp:86] Creating Layer conv1
I0428 20:28:19.140849  3333 net.cpp:408] conv1 <- pool0
I0428 20:28:19.140856  3333 net.cpp:382] conv1 -> conv1
I0428 20:28:19.142762  3333 net.cpp:124] Setting up conv1
I0428 20:28:19.142779  3333 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:19.142784  3333 net.cpp:139] Memory required for data: 29242800
I0428 20:28:19.142803  3333 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:19.142819  3333 net.cpp:86] Creating Layer pool1
I0428 20:28:19.142824  3333 net.cpp:408] pool1 <- conv1
I0428 20:28:19.142832  3333 net.cpp:382] pool1 -> pool1
I0428 20:28:19.142879  3333 net.cpp:124] Setting up pool1
I0428 20:28:19.142886  3333 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:19.142899  3333 net.cpp:139] Memory required for data: 29274800
I0428 20:28:19.142902  3333 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:19.142916  3333 net.cpp:86] Creating Layer ip1
I0428 20:28:19.142921  3333 net.cpp:408] ip1 <- pool1
I0428 20:28:19.142935  3333 net.cpp:382] ip1 -> ip1
I0428 20:28:19.143074  3333 net.cpp:124] Setting up ip1
I0428 20:28:19.143084  3333 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:19.143105  3333 net.cpp:139] Memory required for data: 29284800
I0428 20:28:19.143115  3333 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:19.143122  3333 net.cpp:86] Creating Layer relu1
I0428 20:28:19.143126  3333 net.cpp:408] relu1 <- ip1
I0428 20:28:19.143131  3333 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:19.143331  3333 net.cpp:124] Setting up relu1
I0428 20:28:19.143342  3333 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:19.143347  3333 net.cpp:139] Memory required for data: 29294800
I0428 20:28:19.143350  3333 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:19.143358  3333 net.cpp:86] Creating Layer ip2
I0428 20:28:19.143362  3333 net.cpp:408] ip2 <- ip1
I0428 20:28:19.143370  3333 net.cpp:382] ip2 -> ip2
I0428 20:28:19.143493  3333 net.cpp:124] Setting up ip2
I0428 20:28:19.143510  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.143514  3333 net.cpp:139] Memory required for data: 29298800
I0428 20:28:19.143522  3333 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:19.143527  3333 net.cpp:86] Creating Layer relu2
I0428 20:28:19.143532  3333 net.cpp:408] relu2 <- ip2
I0428 20:28:19.143537  3333 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:19.143728  3333 net.cpp:124] Setting up relu2
I0428 20:28:19.143739  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.143743  3333 net.cpp:139] Memory required for data: 29302800
I0428 20:28:19.143748  3333 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:19.143755  3333 net.cpp:86] Creating Layer ip3
I0428 20:28:19.143759  3333 net.cpp:408] ip3 <- ip2
I0428 20:28:19.143764  3333 net.cpp:382] ip3 -> ip3
I0428 20:28:19.143893  3333 net.cpp:124] Setting up ip3
I0428 20:28:19.143900  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.143904  3333 net.cpp:139] Memory required for data: 29306800
I0428 20:28:19.143913  3333 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:19.143919  3333 net.cpp:86] Creating Layer relu3
I0428 20:28:19.143923  3333 net.cpp:408] relu3 <- ip3
I0428 20:28:19.143929  3333 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:19.144845  3333 net.cpp:124] Setting up relu3
I0428 20:28:19.144860  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.144865  3333 net.cpp:139] Memory required for data: 29310800
I0428 20:28:19.144870  3333 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:19.144877  3333 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:19.144882  3333 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:19.144888  3333 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:19.144896  3333 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:19.144958  3333 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:19.144966  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.144971  3333 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:19.144975  3333 net.cpp:139] Memory required for data: 29318800
I0428 20:28:19.144979  3333 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:19.144985  3333 net.cpp:86] Creating Layer accuracy
I0428 20:28:19.144989  3333 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:19.144994  3333 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:19.145001  3333 net.cpp:382] accuracy -> accuracy
I0428 20:28:19.145009  3333 net.cpp:124] Setting up accuracy
I0428 20:28:19.145015  3333 net.cpp:131] Top shape: (1)
I0428 20:28:19.145017  3333 net.cpp:139] Memory required for data: 29318804
I0428 20:28:19.145021  3333 layer_factory.hpp:77] Creating layer loss
I0428 20:28:19.145026  3333 net.cpp:86] Creating Layer loss
I0428 20:28:19.145030  3333 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:19.145035  3333 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:19.145041  3333 net.cpp:382] loss -> loss
I0428 20:28:19.145048  3333 layer_factory.hpp:77] Creating layer loss
I0428 20:28:19.145344  3333 net.cpp:124] Setting up loss
I0428 20:28:19.145354  3333 net.cpp:131] Top shape: (1)
I0428 20:28:19.145359  3333 net.cpp:134]     with loss weight 1
I0428 20:28:19.145381  3333 net.cpp:139] Memory required for data: 29318808
I0428 20:28:19.145386  3333 net.cpp:200] loss needs backward computation.
I0428 20:28:19.145390  3333 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:19.145395  3333 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:19.145400  3333 net.cpp:200] relu3 needs backward computation.
I0428 20:28:19.145417  3333 net.cpp:200] ip3 needs backward computation.
I0428 20:28:19.145421  3333 net.cpp:200] relu2 needs backward computation.
I0428 20:28:19.145426  3333 net.cpp:200] ip2 needs backward computation.
I0428 20:28:19.145429  3333 net.cpp:200] relu1 needs backward computation.
I0428 20:28:19.145432  3333 net.cpp:200] ip1 needs backward computation.
I0428 20:28:19.145437  3333 net.cpp:200] pool1 needs backward computation.
I0428 20:28:19.145440  3333 net.cpp:200] conv1 needs backward computation.
I0428 20:28:19.145443  3333 net.cpp:200] pool0 needs backward computation.
I0428 20:28:19.145447  3333 net.cpp:200] conv0 needs backward computation.
I0428 20:28:19.145452  3333 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:19.145457  3333 net.cpp:202] mnist does not need backward computation.
I0428 20:28:19.145460  3333 net.cpp:244] This network produces output accuracy
I0428 20:28:19.145464  3333 net.cpp:244] This network produces output loss
I0428 20:28:19.145478  3333 net.cpp:257] Network initialization done.
I0428 20:28:19.145529  3333 solver.cpp:56] Solver scaffolding done.
I0428 20:28:19.145937  3333 caffe.cpp:248] Starting Optimization
I0428 20:28:19.145959  3333 solver.cpp:273] Solving LeNet
I0428 20:28:19.145963  3333 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:19.146157  3333 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:19.244695  3340 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:19.246115  3333 solver.cpp:398]     Test net output #0: accuracy = 0.1059
I0428 20:28:19.246150  3333 solver.cpp:398]     Test net output #1: loss = 2.31089 (* 1 = 2.31089 loss)
I0428 20:28:19.250766  3333 solver.cpp:219] Iteration 0 (2.17274 iter/s, 0.104775s/100 iters), loss = 2.29992
I0428 20:28:19.250807  3333 solver.cpp:238]     Train net output #0: loss = 2.29992 (* 1 = 2.29992 loss)
I0428 20:28:19.250818  3333 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:19.463430  3333 solver.cpp:219] Iteration 100 (470.37 iter/s, 0.212599s/100 iters), loss = 1.27115
I0428 20:28:19.463477  3333 solver.cpp:238]     Train net output #0: loss = 1.27115 (* 1 = 1.27115 loss)
I0428 20:28:19.463490  3333 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:19.685580  3333 solver.cpp:219] Iteration 200 (450.292 iter/s, 0.222078s/100 iters), loss = 1.15996
I0428 20:28:19.685629  3333 solver.cpp:238]     Train net output #0: loss = 1.15996 (* 1 = 1.15996 loss)
I0428 20:28:19.685642  3333 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:19.910574  3333 solver.cpp:219] Iteration 300 (444.585 iter/s, 0.224929s/100 iters), loss = 1.07204
I0428 20:28:19.910626  3333 solver.cpp:238]     Train net output #0: loss = 1.07204 (* 1 = 1.07204 loss)
I0428 20:28:19.910640  3333 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:20.136720  3333 solver.cpp:219] Iteration 400 (442.328 iter/s, 0.226077s/100 iters), loss = 0.885276
I0428 20:28:20.136772  3333 solver.cpp:238]     Train net output #0: loss = 0.885276 (* 1 = 0.885276 loss)
I0428 20:28:20.136787  3333 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:20.358963  3333 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:20.463690  3333 blocking_queue.cpp:49] Waiting for data
I0428 20:28:20.466660  3340 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:20.468298  3333 solver.cpp:398]     Test net output #0: accuracy = 0.6761
I0428 20:28:20.468322  3333 solver.cpp:398]     Test net output #1: loss = 0.933202 (* 1 = 0.933202 loss)
I0428 20:28:20.470333  3333 solver.cpp:219] Iteration 500 (299.811 iter/s, 0.333543s/100 iters), loss = 0.898238
I0428 20:28:20.470381  3333 solver.cpp:238]     Train net output #0: loss = 0.898238 (* 1 = 0.898238 loss)
I0428 20:28:20.470391  3333 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:20.696151  3333 solver.cpp:219] Iteration 600 (442.97 iter/s, 0.225749s/100 iters), loss = 0.740003
I0428 20:28:20.696205  3333 solver.cpp:238]     Train net output #0: loss = 0.740003 (* 1 = 0.740003 loss)
I0428 20:28:20.696219  3333 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:20.927175  3333 solver.cpp:219] Iteration 700 (432.991 iter/s, 0.230952s/100 iters), loss = 0.933528
I0428 20:28:20.927227  3333 solver.cpp:238]     Train net output #0: loss = 0.933528 (* 1 = 0.933528 loss)
I0428 20:28:20.927242  3333 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:21.148828  3333 solver.cpp:219] Iteration 800 (451.308 iter/s, 0.221578s/100 iters), loss = 0.547707
I0428 20:28:21.148869  3333 solver.cpp:238]     Train net output #0: loss = 0.547707 (* 1 = 0.547707 loss)
I0428 20:28:21.148880  3333 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:21.355564  3333 solver.cpp:219] Iteration 900 (483.847 iter/s, 0.206677s/100 iters), loss = 0.481701
I0428 20:28:21.355620  3333 solver.cpp:238]     Train net output #0: loss = 0.481701 (* 1 = 0.481701 loss)
I0428 20:28:21.355635  3333 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:21.430013  3339 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:21.578070  3333 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:21.580106  3333 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:21.581360  3333 solver.cpp:311] Iteration 1000, loss = 0.560733
I0428 20:28:21.581390  3333 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:21.683614  3340 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:21.685016  3333 solver.cpp:398]     Test net output #0: accuracy = 0.8638
I0428 20:28:21.685041  3333 solver.cpp:398]     Test net output #1: loss = 0.388389 (* 1 = 0.388389 loss)
I0428 20:28:21.685048  3333 solver.cpp:316] Optimization Done.
I0428 20:28:21.685052  3333 caffe.cpp:259] Optimization Done.
