I0428 19:48:09.068495 26412 caffe.cpp:218] Using GPUs 0
I0428 19:48:09.108698 26412 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:09.625622 26412 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test536.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:09.625763 26412 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test536.prototxt
I0428 19:48:09.626166 26412 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:09.626184 26412 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:09.626286 26412 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:09.626360 26412 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:09.626477 26412 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:09.626507 26412 net.cpp:86] Creating Layer mnist
I0428 19:48:09.626514 26412 net.cpp:382] mnist -> data
I0428 19:48:09.626536 26412 net.cpp:382] mnist -> label
I0428 19:48:09.627660 26412 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:09.630120 26412 net.cpp:124] Setting up mnist
I0428 19:48:09.630143 26412 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:09.630151 26412 net.cpp:131] Top shape: 64 (64)
I0428 19:48:09.630153 26412 net.cpp:139] Memory required for data: 200960
I0428 19:48:09.630161 26412 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:09.630177 26412 net.cpp:86] Creating Layer conv0
I0428 19:48:09.630197 26412 net.cpp:408] conv0 <- data
I0428 19:48:09.630208 26412 net.cpp:382] conv0 -> conv0
I0428 19:48:09.920874 26412 net.cpp:124] Setting up conv0
I0428 19:48:09.920905 26412 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:09.920910 26412 net.cpp:139] Memory required for data: 938240
I0428 19:48:09.920928 26412 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:09.920943 26412 net.cpp:86] Creating Layer pool0
I0428 19:48:09.920948 26412 net.cpp:408] pool0 <- conv0
I0428 19:48:09.920953 26412 net.cpp:382] pool0 -> pool0
I0428 19:48:09.921007 26412 net.cpp:124] Setting up pool0
I0428 19:48:09.921016 26412 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:09.921020 26412 net.cpp:139] Memory required for data: 1122560
I0428 19:48:09.921023 26412 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:09.921036 26412 net.cpp:86] Creating Layer conv1
I0428 19:48:09.921038 26412 net.cpp:408] conv1 <- pool0
I0428 19:48:09.921044 26412 net.cpp:382] conv1 -> conv1
I0428 19:48:09.923118 26412 net.cpp:124] Setting up conv1
I0428 19:48:09.923135 26412 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:48:09.923140 26412 net.cpp:139] Memory required for data: 1155328
I0428 19:48:09.923149 26412 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:09.923157 26412 net.cpp:86] Creating Layer pool1
I0428 19:48:09.923161 26412 net.cpp:408] pool1 <- conv1
I0428 19:48:09.923167 26412 net.cpp:382] pool1 -> pool1
I0428 19:48:09.923209 26412 net.cpp:124] Setting up pool1
I0428 19:48:09.923214 26412 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:48:09.923218 26412 net.cpp:139] Memory required for data: 1163520
I0428 19:48:09.923221 26412 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:09.923229 26412 net.cpp:86] Creating Layer ip1
I0428 19:48:09.923233 26412 net.cpp:408] ip1 <- pool1
I0428 19:48:09.923238 26412 net.cpp:382] ip1 -> ip1
I0428 19:48:09.923349 26412 net.cpp:124] Setting up ip1
I0428 19:48:09.923358 26412 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:09.923362 26412 net.cpp:139] Memory required for data: 1169920
I0428 19:48:09.923369 26412 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:09.923377 26412 net.cpp:86] Creating Layer relu1
I0428 19:48:09.923380 26412 net.cpp:408] relu1 <- ip1
I0428 19:48:09.923384 26412 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:09.923574 26412 net.cpp:124] Setting up relu1
I0428 19:48:09.923585 26412 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:09.923588 26412 net.cpp:139] Memory required for data: 1176320
I0428 19:48:09.923593 26412 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:09.923600 26412 net.cpp:86] Creating Layer ip2
I0428 19:48:09.923604 26412 net.cpp:408] ip2 <- ip1
I0428 19:48:09.923609 26412 net.cpp:382] ip2 -> ip2
I0428 19:48:09.924662 26412 net.cpp:124] Setting up ip2
I0428 19:48:09.924677 26412 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:09.924681 26412 net.cpp:139] Memory required for data: 1189120
I0428 19:48:09.924688 26412 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:09.924696 26412 net.cpp:86] Creating Layer relu2
I0428 19:48:09.924700 26412 net.cpp:408] relu2 <- ip2
I0428 19:48:09.924705 26412 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:09.925542 26412 net.cpp:124] Setting up relu2
I0428 19:48:09.925556 26412 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:09.925561 26412 net.cpp:139] Memory required for data: 1201920
I0428 19:48:09.925565 26412 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:09.925573 26412 net.cpp:86] Creating Layer ip3
I0428 19:48:09.925577 26412 net.cpp:408] ip3 <- ip2
I0428 19:48:09.925583 26412 net.cpp:382] ip3 -> ip3
I0428 19:48:09.925698 26412 net.cpp:124] Setting up ip3
I0428 19:48:09.925706 26412 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:09.925709 26412 net.cpp:139] Memory required for data: 1204480
I0428 19:48:09.925719 26412 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:09.925724 26412 net.cpp:86] Creating Layer relu3
I0428 19:48:09.925727 26412 net.cpp:408] relu3 <- ip3
I0428 19:48:09.925732 26412 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:09.925914 26412 net.cpp:124] Setting up relu3
I0428 19:48:09.925922 26412 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:09.925926 26412 net.cpp:139] Memory required for data: 1207040
I0428 19:48:09.925930 26412 layer_factory.hpp:77] Creating layer loss
I0428 19:48:09.925938 26412 net.cpp:86] Creating Layer loss
I0428 19:48:09.925942 26412 net.cpp:408] loss <- ip3
I0428 19:48:09.925946 26412 net.cpp:408] loss <- label
I0428 19:48:09.925952 26412 net.cpp:382] loss -> loss
I0428 19:48:09.925971 26412 layer_factory.hpp:77] Creating layer loss
I0428 19:48:09.926229 26412 net.cpp:124] Setting up loss
I0428 19:48:09.926239 26412 net.cpp:131] Top shape: (1)
I0428 19:48:09.926242 26412 net.cpp:134]     with loss weight 1
I0428 19:48:09.926265 26412 net.cpp:139] Memory required for data: 1207044
I0428 19:48:09.926268 26412 net.cpp:200] loss needs backward computation.
I0428 19:48:09.926272 26412 net.cpp:200] relu3 needs backward computation.
I0428 19:48:09.926275 26412 net.cpp:200] ip3 needs backward computation.
I0428 19:48:09.926278 26412 net.cpp:200] relu2 needs backward computation.
I0428 19:48:09.926281 26412 net.cpp:200] ip2 needs backward computation.
I0428 19:48:09.926285 26412 net.cpp:200] relu1 needs backward computation.
I0428 19:48:09.926287 26412 net.cpp:200] ip1 needs backward computation.
I0428 19:48:09.926290 26412 net.cpp:200] pool1 needs backward computation.
I0428 19:48:09.926295 26412 net.cpp:200] conv1 needs backward computation.
I0428 19:48:09.926297 26412 net.cpp:200] pool0 needs backward computation.
I0428 19:48:09.926301 26412 net.cpp:200] conv0 needs backward computation.
I0428 19:48:09.926304 26412 net.cpp:202] mnist does not need backward computation.
I0428 19:48:09.926307 26412 net.cpp:244] This network produces output loss
I0428 19:48:09.926318 26412 net.cpp:257] Network initialization done.
I0428 19:48:09.926673 26412 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test536.prototxt
I0428 19:48:09.926702 26412 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:09.926805 26412 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:09.926895 26412 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:09.926944 26412 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:09.926955 26412 net.cpp:86] Creating Layer mnist
I0428 19:48:09.926964 26412 net.cpp:382] mnist -> data
I0428 19:48:09.926971 26412 net.cpp:382] mnist -> label
I0428 19:48:09.927067 26412 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:09.929302 26412 net.cpp:124] Setting up mnist
I0428 19:48:09.929317 26412 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:09.929323 26412 net.cpp:131] Top shape: 100 (100)
I0428 19:48:09.929327 26412 net.cpp:139] Memory required for data: 314000
I0428 19:48:09.929330 26412 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:09.929371 26412 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:09.929376 26412 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:09.929383 26412 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:09.929389 26412 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:09.929438 26412 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:09.929446 26412 net.cpp:131] Top shape: 100 (100)
I0428 19:48:09.929450 26412 net.cpp:131] Top shape: 100 (100)
I0428 19:48:09.929453 26412 net.cpp:139] Memory required for data: 314800
I0428 19:48:09.929457 26412 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:09.929467 26412 net.cpp:86] Creating Layer conv0
I0428 19:48:09.929471 26412 net.cpp:408] conv0 <- data
I0428 19:48:09.929477 26412 net.cpp:382] conv0 -> conv0
I0428 19:48:09.931334 26412 net.cpp:124] Setting up conv0
I0428 19:48:09.931350 26412 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:09.931354 26412 net.cpp:139] Memory required for data: 1466800
I0428 19:48:09.931366 26412 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:09.931373 26412 net.cpp:86] Creating Layer pool0
I0428 19:48:09.931377 26412 net.cpp:408] pool0 <- conv0
I0428 19:48:09.931382 26412 net.cpp:382] pool0 -> pool0
I0428 19:48:09.931424 26412 net.cpp:124] Setting up pool0
I0428 19:48:09.931430 26412 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:09.931433 26412 net.cpp:139] Memory required for data: 1754800
I0428 19:48:09.931437 26412 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:09.931447 26412 net.cpp:86] Creating Layer conv1
I0428 19:48:09.931450 26412 net.cpp:408] conv1 <- pool0
I0428 19:48:09.931457 26412 net.cpp:382] conv1 -> conv1
I0428 19:48:09.933679 26412 net.cpp:124] Setting up conv1
I0428 19:48:09.933697 26412 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:48:09.933701 26412 net.cpp:139] Memory required for data: 1806000
I0428 19:48:09.933720 26412 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:09.933727 26412 net.cpp:86] Creating Layer pool1
I0428 19:48:09.933732 26412 net.cpp:408] pool1 <- conv1
I0428 19:48:09.933737 26412 net.cpp:382] pool1 -> pool1
I0428 19:48:09.933782 26412 net.cpp:124] Setting up pool1
I0428 19:48:09.933789 26412 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:48:09.933792 26412 net.cpp:139] Memory required for data: 1818800
I0428 19:48:09.933795 26412 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:09.933804 26412 net.cpp:86] Creating Layer ip1
I0428 19:48:09.933812 26412 net.cpp:408] ip1 <- pool1
I0428 19:48:09.933820 26412 net.cpp:382] ip1 -> ip1
I0428 19:48:09.933943 26412 net.cpp:124] Setting up ip1
I0428 19:48:09.933953 26412 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:09.933966 26412 net.cpp:139] Memory required for data: 1828800
I0428 19:48:09.933975 26412 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:09.933987 26412 net.cpp:86] Creating Layer relu1
I0428 19:48:09.933991 26412 net.cpp:408] relu1 <- ip1
I0428 19:48:09.933995 26412 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:09.934249 26412 net.cpp:124] Setting up relu1
I0428 19:48:09.934260 26412 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:09.934263 26412 net.cpp:139] Memory required for data: 1838800
I0428 19:48:09.934267 26412 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:09.934274 26412 net.cpp:86] Creating Layer ip2
I0428 19:48:09.934278 26412 net.cpp:408] ip2 <- ip1
I0428 19:48:09.934284 26412 net.cpp:382] ip2 -> ip2
I0428 19:48:09.934440 26412 net.cpp:124] Setting up ip2
I0428 19:48:09.934449 26412 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:09.934453 26412 net.cpp:139] Memory required for data: 1858800
I0428 19:48:09.934458 26412 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:09.934463 26412 net.cpp:86] Creating Layer relu2
I0428 19:48:09.934466 26412 net.cpp:408] relu2 <- ip2
I0428 19:48:09.934473 26412 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:09.934649 26412 net.cpp:124] Setting up relu2
I0428 19:48:09.934658 26412 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:09.934669 26412 net.cpp:139] Memory required for data: 1878800
I0428 19:48:09.934672 26412 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:09.934679 26412 net.cpp:86] Creating Layer ip3
I0428 19:48:09.934687 26412 net.cpp:408] ip3 <- ip2
I0428 19:48:09.934695 26412 net.cpp:382] ip3 -> ip3
I0428 19:48:09.934809 26412 net.cpp:124] Setting up ip3
I0428 19:48:09.934816 26412 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:09.934819 26412 net.cpp:139] Memory required for data: 1882800
I0428 19:48:09.934828 26412 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:09.934834 26412 net.cpp:86] Creating Layer relu3
I0428 19:48:09.934836 26412 net.cpp:408] relu3 <- ip3
I0428 19:48:09.934841 26412 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:09.935715 26412 net.cpp:124] Setting up relu3
I0428 19:48:09.935729 26412 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:09.935732 26412 net.cpp:139] Memory required for data: 1886800
I0428 19:48:09.935735 26412 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:09.935742 26412 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:09.935746 26412 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:09.935751 26412 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:09.935758 26412 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:09.935818 26412 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:09.935824 26412 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:09.935828 26412 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:09.935837 26412 net.cpp:139] Memory required for data: 1894800
I0428 19:48:09.935842 26412 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:09.935847 26412 net.cpp:86] Creating Layer accuracy
I0428 19:48:09.935850 26412 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:09.935855 26412 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:09.935861 26412 net.cpp:382] accuracy -> accuracy
I0428 19:48:09.935868 26412 net.cpp:124] Setting up accuracy
I0428 19:48:09.935874 26412 net.cpp:131] Top shape: (1)
I0428 19:48:09.935878 26412 net.cpp:139] Memory required for data: 1894804
I0428 19:48:09.935880 26412 layer_factory.hpp:77] Creating layer loss
I0428 19:48:09.935890 26412 net.cpp:86] Creating Layer loss
I0428 19:48:09.935894 26412 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:09.935899 26412 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:09.935909 26412 net.cpp:382] loss -> loss
I0428 19:48:09.935916 26412 layer_factory.hpp:77] Creating layer loss
I0428 19:48:09.936189 26412 net.cpp:124] Setting up loss
I0428 19:48:09.936198 26412 net.cpp:131] Top shape: (1)
I0428 19:48:09.936203 26412 net.cpp:134]     with loss weight 1
I0428 19:48:09.936209 26412 net.cpp:139] Memory required for data: 1894808
I0428 19:48:09.936223 26412 net.cpp:200] loss needs backward computation.
I0428 19:48:09.936228 26412 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:09.936233 26412 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:09.936238 26412 net.cpp:200] relu3 needs backward computation.
I0428 19:48:09.936241 26412 net.cpp:200] ip3 needs backward computation.
I0428 19:48:09.936244 26412 net.cpp:200] relu2 needs backward computation.
I0428 19:48:09.936247 26412 net.cpp:200] ip2 needs backward computation.
I0428 19:48:09.936259 26412 net.cpp:200] relu1 needs backward computation.
I0428 19:48:09.936261 26412 net.cpp:200] ip1 needs backward computation.
I0428 19:48:09.936264 26412 net.cpp:200] pool1 needs backward computation.
I0428 19:48:09.936269 26412 net.cpp:200] conv1 needs backward computation.
I0428 19:48:09.936282 26412 net.cpp:200] pool0 needs backward computation.
I0428 19:48:09.936285 26412 net.cpp:200] conv0 needs backward computation.
I0428 19:48:09.936290 26412 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:09.936295 26412 net.cpp:202] mnist does not need backward computation.
I0428 19:48:09.936296 26412 net.cpp:244] This network produces output accuracy
I0428 19:48:09.936300 26412 net.cpp:244] This network produces output loss
I0428 19:48:09.936313 26412 net.cpp:257] Network initialization done.
I0428 19:48:09.936358 26412 solver.cpp:56] Solver scaffolding done.
I0428 19:48:09.936727 26412 caffe.cpp:248] Starting Optimization
I0428 19:48:09.936734 26412 solver.cpp:273] Solving LeNet
I0428 19:48:09.936738 26412 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:09.937608 26412 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:09.941262 26412 blocking_queue.cpp:49] Waiting for data
I0428 19:48:10.012619 26419 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:10.013119 26412 solver.cpp:398]     Test net output #0: accuracy = 0.0958
I0428 19:48:10.013136 26412 solver.cpp:398]     Test net output #1: loss = 2.30774 (* 1 = 2.30774 loss)
I0428 19:48:10.014897 26412 solver.cpp:219] Iteration 0 (-4.14672e-31 iter/s, 0.0781343s/100 iters), loss = 2.29633
I0428 19:48:10.014935 26412 solver.cpp:238]     Train net output #0: loss = 2.29633 (* 1 = 2.29633 loss)
I0428 19:48:10.014950 26412 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:10.087098 26412 solver.cpp:219] Iteration 100 (1385.96 iter/s, 0.0721524s/100 iters), loss = 1.21832
I0428 19:48:10.087121 26412 solver.cpp:238]     Train net output #0: loss = 1.21832 (* 1 = 1.21832 loss)
I0428 19:48:10.087127 26412 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:10.157063 26412 solver.cpp:219] Iteration 200 (1429.98 iter/s, 0.0699311s/100 iters), loss = 1.01567
I0428 19:48:10.157085 26412 solver.cpp:238]     Train net output #0: loss = 1.01567 (* 1 = 1.01567 loss)
I0428 19:48:10.157106 26412 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:10.228870 26412 solver.cpp:219] Iteration 300 (1393.22 iter/s, 0.0717763s/100 iters), loss = 1.20925
I0428 19:48:10.228910 26412 solver.cpp:238]     Train net output #0: loss = 1.20925 (* 1 = 1.20925 loss)
I0428 19:48:10.228916 26412 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:10.302289 26412 solver.cpp:219] Iteration 400 (1362.68 iter/s, 0.073385s/100 iters), loss = 0.852511
I0428 19:48:10.302310 26412 solver.cpp:238]     Train net output #0: loss = 0.852511 (* 1 = 0.852511 loss)
I0428 19:48:10.302316 26412 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:10.372758 26412 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:10.426199 26419 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:10.426695 26412 solver.cpp:398]     Test net output #0: accuracy = 0.6356
I0428 19:48:10.426712 26412 solver.cpp:398]     Test net output #1: loss = 0.961876 (* 1 = 0.961876 loss)
I0428 19:48:10.427444 26412 solver.cpp:219] Iteration 500 (799.236 iter/s, 0.125119s/100 iters), loss = 0.859505
I0428 19:48:10.427500 26412 solver.cpp:238]     Train net output #0: loss = 0.859505 (* 1 = 0.859505 loss)
I0428 19:48:10.427520 26412 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:10.501989 26412 solver.cpp:219] Iteration 600 (1342.61 iter/s, 0.0744819s/100 iters), loss = 0.703339
I0428 19:48:10.502012 26412 solver.cpp:238]     Train net output #0: loss = 0.703339 (* 1 = 0.703339 loss)
I0428 19:48:10.502032 26412 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:10.572927 26412 solver.cpp:219] Iteration 700 (1410.32 iter/s, 0.0709059s/100 iters), loss = 0.763284
I0428 19:48:10.572950 26412 solver.cpp:238]     Train net output #0: loss = 0.763284 (* 1 = 0.763284 loss)
I0428 19:48:10.572973 26412 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:10.643265 26412 solver.cpp:219] Iteration 800 (1422.36 iter/s, 0.0703058s/100 iters), loss = 0.739563
I0428 19:48:10.643288 26412 solver.cpp:238]     Train net output #0: loss = 0.739563 (* 1 = 0.739563 loss)
I0428 19:48:10.643298 26412 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:10.713182 26412 solver.cpp:219] Iteration 900 (1430.92 iter/s, 0.0698849s/100 iters), loss = 0.669709
I0428 19:48:10.713220 26412 solver.cpp:238]     Train net output #0: loss = 0.669709 (* 1 = 0.669709 loss)
I0428 19:48:10.713241 26412 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:10.737097 26418 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:10.783367 26412 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:10.784051 26412 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:10.784536 26412 solver.cpp:311] Iteration 1000, loss = 0.874314
I0428 19:48:10.784551 26412 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:10.859405 26419 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:10.859897 26412 solver.cpp:398]     Test net output #0: accuracy = 0.7545
I0428 19:48:10.859915 26412 solver.cpp:398]     Test net output #1: loss = 0.66191 (* 1 = 0.66191 loss)
I0428 19:48:10.859920 26412 solver.cpp:316] Optimization Done.
I0428 19:48:10.859923 26412 caffe.cpp:259] Optimization Done.
