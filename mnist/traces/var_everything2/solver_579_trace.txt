I0428 19:49:34.931612 26799 caffe.cpp:218] Using GPUs 0
I0428 19:49:34.966902 26799 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:35.487363 26799 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test579.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:35.487540 26799 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test579.prototxt
I0428 19:49:35.487967 26799 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:35.487993 26799 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:35.488109 26799 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:35.488224 26799 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:35.488358 26799 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:35.488391 26799 net.cpp:86] Creating Layer mnist
I0428 19:49:35.488405 26799 net.cpp:382] mnist -> data
I0428 19:49:35.488435 26799 net.cpp:382] mnist -> label
I0428 19:49:35.489724 26799 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:35.492199 26799 net.cpp:124] Setting up mnist
I0428 19:49:35.492219 26799 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:35.492229 26799 net.cpp:131] Top shape: 64 (64)
I0428 19:49:35.492235 26799 net.cpp:139] Memory required for data: 200960
I0428 19:49:35.492245 26799 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:35.492269 26799 net.cpp:86] Creating Layer conv0
I0428 19:49:35.492295 26799 net.cpp:408] conv0 <- data
I0428 19:49:35.492316 26799 net.cpp:382] conv0 -> conv0
I0428 19:49:35.782168 26799 net.cpp:124] Setting up conv0
I0428 19:49:35.782202 26799 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:35.782208 26799 net.cpp:139] Memory required for data: 938240
I0428 19:49:35.782232 26799 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:35.782263 26799 net.cpp:86] Creating Layer pool0
I0428 19:49:35.782280 26799 net.cpp:408] pool0 <- conv0
I0428 19:49:35.782294 26799 net.cpp:382] pool0 -> pool0
I0428 19:49:35.782361 26799 net.cpp:124] Setting up pool0
I0428 19:49:35.782371 26799 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:35.782377 26799 net.cpp:139] Memory required for data: 1122560
I0428 19:49:35.782382 26799 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:35.782403 26799 net.cpp:86] Creating Layer conv1
I0428 19:49:35.782411 26799 net.cpp:408] conv1 <- pool0
I0428 19:49:35.782421 26799 net.cpp:382] conv1 -> conv1
I0428 19:49:35.784596 26799 net.cpp:124] Setting up conv1
I0428 19:49:35.784615 26799 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:35.784622 26799 net.cpp:139] Memory required for data: 1204480
I0428 19:49:35.784637 26799 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:35.784657 26799 net.cpp:86] Creating Layer pool1
I0428 19:49:35.784668 26799 net.cpp:408] pool1 <- conv1
I0428 19:49:35.784680 26799 net.cpp:382] pool1 -> pool1
I0428 19:49:35.784737 26799 net.cpp:124] Setting up pool1
I0428 19:49:35.784749 26799 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:35.784754 26799 net.cpp:139] Memory required for data: 1224960
I0428 19:49:35.784759 26799 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:35.784775 26799 net.cpp:86] Creating Layer ip1
I0428 19:49:35.784781 26799 net.cpp:408] ip1 <- pool1
I0428 19:49:35.784790 26799 net.cpp:382] ip1 -> ip1
I0428 19:49:35.785884 26799 net.cpp:124] Setting up ip1
I0428 19:49:35.785902 26799 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:35.785907 26799 net.cpp:139] Memory required for data: 1237760
I0428 19:49:35.785923 26799 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:35.785938 26799 net.cpp:86] Creating Layer relu1
I0428 19:49:35.785951 26799 net.cpp:408] relu1 <- ip1
I0428 19:49:35.785960 26799 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:35.786177 26799 net.cpp:124] Setting up relu1
I0428 19:49:35.786190 26799 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:35.786196 26799 net.cpp:139] Memory required for data: 1250560
I0428 19:49:35.786202 26799 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:35.786216 26799 net.cpp:86] Creating Layer ip2
I0428 19:49:35.786222 26799 net.cpp:408] ip2 <- ip1
I0428 19:49:35.786234 26799 net.cpp:382] ip2 -> ip2
I0428 19:49:35.786365 26799 net.cpp:124] Setting up ip2
I0428 19:49:35.786377 26799 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:35.786383 26799 net.cpp:139] Memory required for data: 1256960
I0428 19:49:35.786394 26799 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:35.786406 26799 net.cpp:86] Creating Layer relu2
I0428 19:49:35.786413 26799 net.cpp:408] relu2 <- ip2
I0428 19:49:35.786422 26799 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:35.787266 26799 net.cpp:124] Setting up relu2
I0428 19:49:35.787283 26799 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:49:35.787289 26799 net.cpp:139] Memory required for data: 1263360
I0428 19:49:35.787295 26799 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:35.787310 26799 net.cpp:86] Creating Layer ip3
I0428 19:49:35.787317 26799 net.cpp:408] ip3 <- ip2
I0428 19:49:35.787328 26799 net.cpp:382] ip3 -> ip3
I0428 19:49:35.787457 26799 net.cpp:124] Setting up ip3
I0428 19:49:35.787468 26799 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:35.787473 26799 net.cpp:139] Memory required for data: 1265920
I0428 19:49:35.787488 26799 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:35.787498 26799 net.cpp:86] Creating Layer relu3
I0428 19:49:35.787505 26799 net.cpp:408] relu3 <- ip3
I0428 19:49:35.787515 26799 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:35.787730 26799 net.cpp:124] Setting up relu3
I0428 19:49:35.787741 26799 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:35.787747 26799 net.cpp:139] Memory required for data: 1268480
I0428 19:49:35.787753 26799 layer_factory.hpp:77] Creating layer loss
I0428 19:49:35.787763 26799 net.cpp:86] Creating Layer loss
I0428 19:49:35.787770 26799 net.cpp:408] loss <- ip3
I0428 19:49:35.787776 26799 net.cpp:408] loss <- label
I0428 19:49:35.787788 26799 net.cpp:382] loss -> loss
I0428 19:49:35.787811 26799 layer_factory.hpp:77] Creating layer loss
I0428 19:49:35.788094 26799 net.cpp:124] Setting up loss
I0428 19:49:35.788106 26799 net.cpp:131] Top shape: (1)
I0428 19:49:35.788112 26799 net.cpp:134]     with loss weight 1
I0428 19:49:35.788133 26799 net.cpp:139] Memory required for data: 1268484
I0428 19:49:35.788141 26799 net.cpp:200] loss needs backward computation.
I0428 19:49:35.788147 26799 net.cpp:200] relu3 needs backward computation.
I0428 19:49:35.788153 26799 net.cpp:200] ip3 needs backward computation.
I0428 19:49:35.788159 26799 net.cpp:200] relu2 needs backward computation.
I0428 19:49:35.788166 26799 net.cpp:200] ip2 needs backward computation.
I0428 19:49:35.788172 26799 net.cpp:200] relu1 needs backward computation.
I0428 19:49:35.788177 26799 net.cpp:200] ip1 needs backward computation.
I0428 19:49:35.788182 26799 net.cpp:200] pool1 needs backward computation.
I0428 19:49:35.788188 26799 net.cpp:200] conv1 needs backward computation.
I0428 19:49:35.788194 26799 net.cpp:200] pool0 needs backward computation.
I0428 19:49:35.788200 26799 net.cpp:200] conv0 needs backward computation.
I0428 19:49:35.788208 26799 net.cpp:202] mnist does not need backward computation.
I0428 19:49:35.788213 26799 net.cpp:244] This network produces output loss
I0428 19:49:35.788231 26799 net.cpp:257] Network initialization done.
I0428 19:49:35.788607 26799 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test579.prototxt
I0428 19:49:35.788647 26799 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:35.788763 26799 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:35.788910 26799 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:35.788978 26799 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:35.789000 26799 net.cpp:86] Creating Layer mnist
I0428 19:49:35.789008 26799 net.cpp:382] mnist -> data
I0428 19:49:35.789021 26799 net.cpp:382] mnist -> label
I0428 19:49:35.789163 26799 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:35.791487 26799 net.cpp:124] Setting up mnist
I0428 19:49:35.791507 26799 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:35.791517 26799 net.cpp:131] Top shape: 100 (100)
I0428 19:49:35.791522 26799 net.cpp:139] Memory required for data: 314000
I0428 19:49:35.791528 26799 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:35.791540 26799 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:35.791546 26799 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:35.791555 26799 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:35.791568 26799 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:35.791673 26799 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:35.791683 26799 net.cpp:131] Top shape: 100 (100)
I0428 19:49:35.791692 26799 net.cpp:131] Top shape: 100 (100)
I0428 19:49:35.791697 26799 net.cpp:139] Memory required for data: 314800
I0428 19:49:35.791703 26799 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:35.791719 26799 net.cpp:86] Creating Layer conv0
I0428 19:49:35.791728 26799 net.cpp:408] conv0 <- data
I0428 19:49:35.791739 26799 net.cpp:382] conv0 -> conv0
I0428 19:49:35.793436 26799 net.cpp:124] Setting up conv0
I0428 19:49:35.793453 26799 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:35.793460 26799 net.cpp:139] Memory required for data: 1466800
I0428 19:49:35.793476 26799 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:35.793490 26799 net.cpp:86] Creating Layer pool0
I0428 19:49:35.793498 26799 net.cpp:408] pool0 <- conv0
I0428 19:49:35.793509 26799 net.cpp:382] pool0 -> pool0
I0428 19:49:35.793561 26799 net.cpp:124] Setting up pool0
I0428 19:49:35.793571 26799 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:35.793577 26799 net.cpp:139] Memory required for data: 1754800
I0428 19:49:35.793584 26799 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:35.793602 26799 net.cpp:86] Creating Layer conv1
I0428 19:49:35.793609 26799 net.cpp:408] conv1 <- pool0
I0428 19:49:35.793622 26799 net.cpp:382] conv1 -> conv1
I0428 19:49:35.796048 26799 net.cpp:124] Setting up conv1
I0428 19:49:35.796067 26799 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:35.796078 26799 net.cpp:139] Memory required for data: 1882800
I0428 19:49:35.796094 26799 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:35.796116 26799 net.cpp:86] Creating Layer pool1
I0428 19:49:35.796124 26799 net.cpp:408] pool1 <- conv1
I0428 19:49:35.796133 26799 net.cpp:382] pool1 -> pool1
I0428 19:49:35.796198 26799 net.cpp:124] Setting up pool1
I0428 19:49:35.796207 26799 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:35.796213 26799 net.cpp:139] Memory required for data: 1914800
I0428 19:49:35.796218 26799 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:35.796229 26799 net.cpp:86] Creating Layer ip1
I0428 19:49:35.796236 26799 net.cpp:408] ip1 <- pool1
I0428 19:49:35.796247 26799 net.cpp:382] ip1 -> ip1
I0428 19:49:35.796403 26799 net.cpp:124] Setting up ip1
I0428 19:49:35.796416 26799 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:35.796435 26799 net.cpp:139] Memory required for data: 1934800
I0428 19:49:35.796452 26799 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:35.796463 26799 net.cpp:86] Creating Layer relu1
I0428 19:49:35.796473 26799 net.cpp:408] relu1 <- ip1
I0428 19:49:35.796484 26799 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:35.796692 26799 net.cpp:124] Setting up relu1
I0428 19:49:35.796705 26799 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:35.796712 26799 net.cpp:139] Memory required for data: 1954800
I0428 19:49:35.796718 26799 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:35.796735 26799 net.cpp:86] Creating Layer ip2
I0428 19:49:35.796746 26799 net.cpp:408] ip2 <- ip1
I0428 19:49:35.796756 26799 net.cpp:382] ip2 -> ip2
I0428 19:49:35.796900 26799 net.cpp:124] Setting up ip2
I0428 19:49:35.796911 26799 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:35.796917 26799 net.cpp:139] Memory required for data: 1964800
I0428 19:49:35.796928 26799 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:35.796937 26799 net.cpp:86] Creating Layer relu2
I0428 19:49:35.796946 26799 net.cpp:408] relu2 <- ip2
I0428 19:49:35.796955 26799 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:35.797178 26799 net.cpp:124] Setting up relu2
I0428 19:49:35.797189 26799 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:49:35.797195 26799 net.cpp:139] Memory required for data: 1974800
I0428 19:49:35.797201 26799 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:35.797214 26799 net.cpp:86] Creating Layer ip3
I0428 19:49:35.797219 26799 net.cpp:408] ip3 <- ip2
I0428 19:49:35.797232 26799 net.cpp:382] ip3 -> ip3
I0428 19:49:35.797394 26799 net.cpp:124] Setting up ip3
I0428 19:49:35.797405 26799 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:35.797410 26799 net.cpp:139] Memory required for data: 1978800
I0428 19:49:35.797427 26799 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:35.797437 26799 net.cpp:86] Creating Layer relu3
I0428 19:49:35.797444 26799 net.cpp:408] relu3 <- ip3
I0428 19:49:35.797451 26799 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:35.798363 26799 net.cpp:124] Setting up relu3
I0428 19:49:35.798379 26799 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:35.798385 26799 net.cpp:139] Memory required for data: 1982800
I0428 19:49:35.798391 26799 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:35.798403 26799 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:35.798409 26799 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:35.798419 26799 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:35.798432 26799 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:35.798483 26799 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:35.798492 26799 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:35.798501 26799 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:35.798506 26799 net.cpp:139] Memory required for data: 1990800
I0428 19:49:35.798511 26799 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:35.798522 26799 net.cpp:86] Creating Layer accuracy
I0428 19:49:35.798528 26799 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:35.798537 26799 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:35.798544 26799 net.cpp:382] accuracy -> accuracy
I0428 19:49:35.798557 26799 net.cpp:124] Setting up accuracy
I0428 19:49:35.798565 26799 net.cpp:131] Top shape: (1)
I0428 19:49:35.798571 26799 net.cpp:139] Memory required for data: 1990804
I0428 19:49:35.798576 26799 layer_factory.hpp:77] Creating layer loss
I0428 19:49:35.798584 26799 net.cpp:86] Creating Layer loss
I0428 19:49:35.798590 26799 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:35.798598 26799 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:35.798607 26799 net.cpp:382] loss -> loss
I0428 19:49:35.798619 26799 layer_factory.hpp:77] Creating layer loss
I0428 19:49:35.798905 26799 net.cpp:124] Setting up loss
I0428 19:49:35.798918 26799 net.cpp:131] Top shape: (1)
I0428 19:49:35.798923 26799 net.cpp:134]     with loss weight 1
I0428 19:49:35.798933 26799 net.cpp:139] Memory required for data: 1990808
I0428 19:49:35.798952 26799 net.cpp:200] loss needs backward computation.
I0428 19:49:35.798960 26799 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:35.798967 26799 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:35.798974 26799 net.cpp:200] relu3 needs backward computation.
I0428 19:49:35.798979 26799 net.cpp:200] ip3 needs backward computation.
I0428 19:49:35.798985 26799 net.cpp:200] relu2 needs backward computation.
I0428 19:49:35.798991 26799 net.cpp:200] ip2 needs backward computation.
I0428 19:49:35.798996 26799 net.cpp:200] relu1 needs backward computation.
I0428 19:49:35.799002 26799 net.cpp:200] ip1 needs backward computation.
I0428 19:49:35.799008 26799 net.cpp:200] pool1 needs backward computation.
I0428 19:49:35.799015 26799 net.cpp:200] conv1 needs backward computation.
I0428 19:49:35.799021 26799 net.cpp:200] pool0 needs backward computation.
I0428 19:49:35.799026 26799 net.cpp:200] conv0 needs backward computation.
I0428 19:49:35.799033 26799 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:35.799041 26799 net.cpp:202] mnist does not need backward computation.
I0428 19:49:35.799046 26799 net.cpp:244] This network produces output accuracy
I0428 19:49:35.799052 26799 net.cpp:244] This network produces output loss
I0428 19:49:35.799072 26799 net.cpp:257] Network initialization done.
I0428 19:49:35.799130 26799 solver.cpp:56] Solver scaffolding done.
I0428 19:49:35.799523 26799 caffe.cpp:248] Starting Optimization
I0428 19:49:35.799530 26799 solver.cpp:273] Solving LeNet
I0428 19:49:35.799535 26799 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:35.800377 26799 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:35.804512 26799 blocking_queue.cpp:49] Waiting for data
I0428 19:49:35.868613 26808 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:35.869127 26799 solver.cpp:398]     Test net output #0: accuracy = 0.1052
I0428 19:49:35.869148 26799 solver.cpp:398]     Test net output #1: loss = 2.31593 (* 1 = 2.31593 loss)
I0428 19:49:35.870954 26799 solver.cpp:219] Iteration 0 (0 iter/s, 0.0713923s/100 iters), loss = 2.31944
I0428 19:49:35.870986 26799 solver.cpp:238]     Train net output #0: loss = 2.31944 (* 1 = 2.31944 loss)
I0428 19:49:35.871000 26799 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:35.946755 26799 solver.cpp:219] Iteration 100 (1320 iter/s, 0.0757574s/100 iters), loss = 0.968228
I0428 19:49:35.946779 26799 solver.cpp:238]     Train net output #0: loss = 0.968228 (* 1 = 0.968228 loss)
I0428 19:49:35.946785 26799 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:36.018281 26799 solver.cpp:219] Iteration 200 (1398.74 iter/s, 0.0714928s/100 iters), loss = 0.287649
I0428 19:49:36.018304 26799 solver.cpp:238]     Train net output #0: loss = 0.287649 (* 1 = 0.287649 loss)
I0428 19:49:36.018311 26799 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:36.089023 26799 solver.cpp:219] Iteration 300 (1414.24 iter/s, 0.0707093s/100 iters), loss = 0.325475
I0428 19:49:36.089046 26799 solver.cpp:238]     Train net output #0: loss = 0.325475 (* 1 = 0.325475 loss)
I0428 19:49:36.089067 26799 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:36.158064 26799 solver.cpp:219] Iteration 400 (1449.1 iter/s, 0.0690084s/100 iters), loss = 0.134663
I0428 19:49:36.158087 26799 solver.cpp:238]     Train net output #0: loss = 0.134663 (* 1 = 0.134663 loss)
I0428 19:49:36.158092 26799 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:36.227347 26799 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:36.296581 26808 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:36.297076 26799 solver.cpp:398]     Test net output #0: accuracy = 0.9415
I0428 19:49:36.297096 26799 solver.cpp:398]     Test net output #1: loss = 0.183724 (* 1 = 0.183724 loss)
I0428 19:49:36.297899 26799 solver.cpp:219] Iteration 500 (715.31 iter/s, 0.1398s/100 iters), loss = 0.195355
I0428 19:49:36.297936 26799 solver.cpp:238]     Train net output #0: loss = 0.195355 (* 1 = 0.195355 loss)
I0428 19:49:36.297961 26799 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:36.370791 26799 solver.cpp:219] Iteration 600 (1372.54 iter/s, 0.0728578s/100 iters), loss = 0.157191
I0428 19:49:36.370822 26799 solver.cpp:238]     Train net output #0: loss = 0.157191 (* 1 = 0.157191 loss)
I0428 19:49:36.370828 26799 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:36.441172 26799 solver.cpp:219] Iteration 700 (1421.63 iter/s, 0.0703416s/100 iters), loss = 0.237992
I0428 19:49:36.441196 26799 solver.cpp:238]     Train net output #0: loss = 0.237992 (* 1 = 0.237992 loss)
I0428 19:49:36.441202 26799 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:36.512382 26799 solver.cpp:219] Iteration 800 (1404.95 iter/s, 0.0711772s/100 iters), loss = 0.300912
I0428 19:49:36.512406 26799 solver.cpp:238]     Train net output #0: loss = 0.300912 (* 1 = 0.300912 loss)
I0428 19:49:36.512413 26799 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:36.582486 26799 solver.cpp:219] Iteration 900 (1427.14 iter/s, 0.0700704s/100 iters), loss = 0.276586
I0428 19:49:36.582510 26799 solver.cpp:238]     Train net output #0: loss = 0.276586 (* 1 = 0.276586 loss)
I0428 19:49:36.582516 26799 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:36.605566 26805 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:36.651131 26799 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:36.651901 26799 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:36.652382 26799 solver.cpp:311] Iteration 1000, loss = 0.11927
I0428 19:49:36.652398 26799 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:36.727022 26808 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:36.727952 26799 solver.cpp:398]     Test net output #0: accuracy = 0.9657
I0428 19:49:36.727994 26799 solver.cpp:398]     Test net output #1: loss = 0.10646 (* 1 = 0.10646 loss)
I0428 19:49:36.728009 26799 solver.cpp:316] Optimization Done.
I0428 19:49:36.728016 26799 caffe.cpp:259] Optimization Done.
