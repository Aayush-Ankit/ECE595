I0428 20:01:59.115831 29849 caffe.cpp:218] Using GPUs 0
I0428 20:01:59.145481 29849 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:59.593963 29849 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test917.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:59.594112 29849 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test917.prototxt
I0428 20:01:59.594480 29849 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:59.594511 29849 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:59.594596 29849 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:59.594676 29849 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:59.594758 29849 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:59.594777 29849 net.cpp:86] Creating Layer mnist
I0428 20:01:59.594784 29849 net.cpp:382] mnist -> data
I0428 20:01:59.594805 29849 net.cpp:382] mnist -> label
I0428 20:01:59.595877 29849 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:59.598150 29849 net.cpp:124] Setting up mnist
I0428 20:01:59.598166 29849 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:59.598171 29849 net.cpp:131] Top shape: 64 (64)
I0428 20:01:59.598175 29849 net.cpp:139] Memory required for data: 200960
I0428 20:01:59.598179 29849 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:59.598203 29849 net.cpp:86] Creating Layer conv0
I0428 20:01:59.598222 29849 net.cpp:408] conv0 <- data
I0428 20:01:59.598232 29849 net.cpp:382] conv0 -> conv0
I0428 20:01:59.827018 29849 net.cpp:124] Setting up conv0
I0428 20:01:59.827046 29849 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:59.827050 29849 net.cpp:139] Memory required for data: 1675520
I0428 20:01:59.827064 29849 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:59.827076 29849 net.cpp:86] Creating Layer pool0
I0428 20:01:59.827080 29849 net.cpp:408] pool0 <- conv0
I0428 20:01:59.827085 29849 net.cpp:382] pool0 -> pool0
I0428 20:01:59.827144 29849 net.cpp:124] Setting up pool0
I0428 20:01:59.827150 29849 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:59.827153 29849 net.cpp:139] Memory required for data: 2044160
I0428 20:01:59.827155 29849 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:59.827165 29849 net.cpp:86] Creating Layer conv1
I0428 20:01:59.827168 29849 net.cpp:408] conv1 <- pool0
I0428 20:01:59.827173 29849 net.cpp:382] conv1 -> conv1
I0428 20:01:59.830070 29849 net.cpp:124] Setting up conv1
I0428 20:01:59.830083 29849 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:59.830102 29849 net.cpp:139] Memory required for data: 2863360
I0428 20:01:59.830111 29849 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:59.830119 29849 net.cpp:86] Creating Layer pool1
I0428 20:01:59.830122 29849 net.cpp:408] pool1 <- conv1
I0428 20:01:59.830128 29849 net.cpp:382] pool1 -> pool1
I0428 20:01:59.830181 29849 net.cpp:124] Setting up pool1
I0428 20:01:59.830188 29849 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:59.830190 29849 net.cpp:139] Memory required for data: 3068160
I0428 20:01:59.830193 29849 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:59.830200 29849 net.cpp:86] Creating Layer ip1
I0428 20:01:59.830204 29849 net.cpp:408] ip1 <- pool1
I0428 20:01:59.830209 29849 net.cpp:382] ip1 -> ip1
I0428 20:01:59.830353 29849 net.cpp:124] Setting up ip1
I0428 20:01:59.830359 29849 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:59.830363 29849 net.cpp:139] Memory required for data: 3070720
I0428 20:01:59.830369 29849 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:59.830375 29849 net.cpp:86] Creating Layer relu1
I0428 20:01:59.830379 29849 net.cpp:408] relu1 <- ip1
I0428 20:01:59.830384 29849 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:59.830569 29849 net.cpp:124] Setting up relu1
I0428 20:01:59.830577 29849 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:59.830580 29849 net.cpp:139] Memory required for data: 3073280
I0428 20:01:59.830584 29849 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:59.830590 29849 net.cpp:86] Creating Layer ip2
I0428 20:01:59.830595 29849 net.cpp:408] ip2 <- ip1
I0428 20:01:59.830598 29849 net.cpp:382] ip2 -> ip2
I0428 20:01:59.830696 29849 net.cpp:124] Setting up ip2
I0428 20:01:59.830703 29849 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:59.830706 29849 net.cpp:139] Memory required for data: 3086080
I0428 20:01:59.830713 29849 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:59.830719 29849 net.cpp:86] Creating Layer relu2
I0428 20:01:59.830723 29849 net.cpp:408] relu2 <- ip2
I0428 20:01:59.830726 29849 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:59.831578 29849 net.cpp:124] Setting up relu2
I0428 20:01:59.831589 29849 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:59.831609 29849 net.cpp:139] Memory required for data: 3098880
I0428 20:01:59.831611 29849 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:59.831619 29849 net.cpp:86] Creating Layer ip3
I0428 20:01:59.831624 29849 net.cpp:408] ip3 <- ip2
I0428 20:01:59.831629 29849 net.cpp:382] ip3 -> ip3
I0428 20:01:59.831748 29849 net.cpp:124] Setting up ip3
I0428 20:01:59.831756 29849 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:59.831759 29849 net.cpp:139] Memory required for data: 3101440
I0428 20:01:59.831766 29849 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:59.831771 29849 net.cpp:86] Creating Layer relu3
I0428 20:01:59.831774 29849 net.cpp:408] relu3 <- ip3
I0428 20:01:59.831779 29849 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:59.831940 29849 net.cpp:124] Setting up relu3
I0428 20:01:59.831948 29849 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:59.831953 29849 net.cpp:139] Memory required for data: 3104000
I0428 20:01:59.831955 29849 layer_factory.hpp:77] Creating layer loss
I0428 20:01:59.831975 29849 net.cpp:86] Creating Layer loss
I0428 20:01:59.831979 29849 net.cpp:408] loss <- ip3
I0428 20:01:59.831982 29849 net.cpp:408] loss <- label
I0428 20:01:59.832002 29849 net.cpp:382] loss -> loss
I0428 20:01:59.832031 29849 layer_factory.hpp:77] Creating layer loss
I0428 20:01:59.832245 29849 net.cpp:124] Setting up loss
I0428 20:01:59.832253 29849 net.cpp:131] Top shape: (1)
I0428 20:01:59.832257 29849 net.cpp:134]     with loss weight 1
I0428 20:01:59.832269 29849 net.cpp:139] Memory required for data: 3104004
I0428 20:01:59.832273 29849 net.cpp:200] loss needs backward computation.
I0428 20:01:59.832276 29849 net.cpp:200] relu3 needs backward computation.
I0428 20:01:59.832278 29849 net.cpp:200] ip3 needs backward computation.
I0428 20:01:59.832281 29849 net.cpp:200] relu2 needs backward computation.
I0428 20:01:59.832284 29849 net.cpp:200] ip2 needs backward computation.
I0428 20:01:59.832286 29849 net.cpp:200] relu1 needs backward computation.
I0428 20:01:59.832289 29849 net.cpp:200] ip1 needs backward computation.
I0428 20:01:59.832293 29849 net.cpp:200] pool1 needs backward computation.
I0428 20:01:59.832295 29849 net.cpp:200] conv1 needs backward computation.
I0428 20:01:59.832298 29849 net.cpp:200] pool0 needs backward computation.
I0428 20:01:59.832301 29849 net.cpp:200] conv0 needs backward computation.
I0428 20:01:59.832304 29849 net.cpp:202] mnist does not need backward computation.
I0428 20:01:59.832306 29849 net.cpp:244] This network produces output loss
I0428 20:01:59.832315 29849 net.cpp:257] Network initialization done.
I0428 20:01:59.832653 29849 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test917.prototxt
I0428 20:01:59.832710 29849 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:59.832844 29849 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:59.832943 29849 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:59.832990 29849 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:59.833003 29849 net.cpp:86] Creating Layer mnist
I0428 20:01:59.833009 29849 net.cpp:382] mnist -> data
I0428 20:01:59.833016 29849 net.cpp:382] mnist -> label
I0428 20:01:59.833117 29849 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:59.835191 29849 net.cpp:124] Setting up mnist
I0428 20:01:59.835219 29849 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:59.835224 29849 net.cpp:131] Top shape: 100 (100)
I0428 20:01:59.835227 29849 net.cpp:139] Memory required for data: 314000
I0428 20:01:59.835232 29849 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:59.835237 29849 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:59.835240 29849 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:59.835245 29849 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:59.835266 29849 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:59.835316 29849 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:59.835321 29849 net.cpp:131] Top shape: 100 (100)
I0428 20:01:59.835325 29849 net.cpp:131] Top shape: 100 (100)
I0428 20:01:59.835327 29849 net.cpp:139] Memory required for data: 314800
I0428 20:01:59.835330 29849 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:59.835337 29849 net.cpp:86] Creating Layer conv0
I0428 20:01:59.835340 29849 net.cpp:408] conv0 <- data
I0428 20:01:59.835345 29849 net.cpp:382] conv0 -> conv0
I0428 20:01:59.837062 29849 net.cpp:124] Setting up conv0
I0428 20:01:59.837076 29849 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:59.837080 29849 net.cpp:139] Memory required for data: 2618800
I0428 20:01:59.837090 29849 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:59.837095 29849 net.cpp:86] Creating Layer pool0
I0428 20:01:59.837115 29849 net.cpp:408] pool0 <- conv0
I0428 20:01:59.837119 29849 net.cpp:382] pool0 -> pool0
I0428 20:01:59.837185 29849 net.cpp:124] Setting up pool0
I0428 20:01:59.837190 29849 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:59.837193 29849 net.cpp:139] Memory required for data: 3194800
I0428 20:01:59.837196 29849 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:59.837204 29849 net.cpp:86] Creating Layer conv1
I0428 20:01:59.837208 29849 net.cpp:408] conv1 <- pool0
I0428 20:01:59.837213 29849 net.cpp:382] conv1 -> conv1
I0428 20:01:59.838754 29849 net.cpp:124] Setting up conv1
I0428 20:01:59.838768 29849 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:59.838770 29849 net.cpp:139] Memory required for data: 4474800
I0428 20:01:59.838778 29849 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:59.838784 29849 net.cpp:86] Creating Layer pool1
I0428 20:01:59.838788 29849 net.cpp:408] pool1 <- conv1
I0428 20:01:59.838793 29849 net.cpp:382] pool1 -> pool1
I0428 20:01:59.838863 29849 net.cpp:124] Setting up pool1
I0428 20:01:59.838871 29849 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:59.838873 29849 net.cpp:139] Memory required for data: 4794800
I0428 20:01:59.838876 29849 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:59.838882 29849 net.cpp:86] Creating Layer ip1
I0428 20:01:59.838886 29849 net.cpp:408] ip1 <- pool1
I0428 20:01:59.838889 29849 net.cpp:382] ip1 -> ip1
I0428 20:01:59.839054 29849 net.cpp:124] Setting up ip1
I0428 20:01:59.839062 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.839076 29849 net.cpp:139] Memory required for data: 4798800
I0428 20:01:59.839084 29849 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:59.839089 29849 net.cpp:86] Creating Layer relu1
I0428 20:01:59.839094 29849 net.cpp:408] relu1 <- ip1
I0428 20:01:59.839098 29849 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:59.839256 29849 net.cpp:124] Setting up relu1
I0428 20:01:59.839264 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.839268 29849 net.cpp:139] Memory required for data: 4802800
I0428 20:01:59.839272 29849 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:59.839278 29849 net.cpp:86] Creating Layer ip2
I0428 20:01:59.839282 29849 net.cpp:408] ip2 <- ip1
I0428 20:01:59.839287 29849 net.cpp:382] ip2 -> ip2
I0428 20:01:59.839416 29849 net.cpp:124] Setting up ip2
I0428 20:01:59.839423 29849 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:59.839426 29849 net.cpp:139] Memory required for data: 4822800
I0428 20:01:59.839432 29849 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:59.839437 29849 net.cpp:86] Creating Layer relu2
I0428 20:01:59.839439 29849 net.cpp:408] relu2 <- ip2
I0428 20:01:59.839443 29849 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:59.839594 29849 net.cpp:124] Setting up relu2
I0428 20:01:59.839601 29849 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:59.839613 29849 net.cpp:139] Memory required for data: 4842800
I0428 20:01:59.839617 29849 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:59.839622 29849 net.cpp:86] Creating Layer ip3
I0428 20:01:59.839630 29849 net.cpp:408] ip3 <- ip2
I0428 20:01:59.839635 29849 net.cpp:382] ip3 -> ip3
I0428 20:01:59.839746 29849 net.cpp:124] Setting up ip3
I0428 20:01:59.839753 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.839756 29849 net.cpp:139] Memory required for data: 4846800
I0428 20:01:59.839764 29849 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:59.839768 29849 net.cpp:86] Creating Layer relu3
I0428 20:01:59.839771 29849 net.cpp:408] relu3 <- ip3
I0428 20:01:59.839776 29849 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:59.840649 29849 net.cpp:124] Setting up relu3
I0428 20:01:59.840662 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.840665 29849 net.cpp:139] Memory required for data: 4850800
I0428 20:01:59.840668 29849 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:59.840674 29849 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:59.840677 29849 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:59.840682 29849 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:59.840689 29849 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:59.840730 29849 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:59.840735 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.840739 29849 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:59.840741 29849 net.cpp:139] Memory required for data: 4858800
I0428 20:01:59.840744 29849 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:59.840749 29849 net.cpp:86] Creating Layer accuracy
I0428 20:01:59.840752 29849 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:59.840756 29849 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:59.840780 29849 net.cpp:382] accuracy -> accuracy
I0428 20:01:59.840786 29849 net.cpp:124] Setting up accuracy
I0428 20:01:59.840790 29849 net.cpp:131] Top shape: (1)
I0428 20:01:59.840792 29849 net.cpp:139] Memory required for data: 4858804
I0428 20:01:59.840795 29849 layer_factory.hpp:77] Creating layer loss
I0428 20:01:59.840800 29849 net.cpp:86] Creating Layer loss
I0428 20:01:59.840803 29849 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:59.840837 29849 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:59.840857 29849 net.cpp:382] loss -> loss
I0428 20:01:59.840880 29849 layer_factory.hpp:77] Creating layer loss
I0428 20:01:59.841126 29849 net.cpp:124] Setting up loss
I0428 20:01:59.841136 29849 net.cpp:131] Top shape: (1)
I0428 20:01:59.841140 29849 net.cpp:134]     with loss weight 1
I0428 20:01:59.841171 29849 net.cpp:139] Memory required for data: 4858808
I0428 20:01:59.841176 29849 net.cpp:200] loss needs backward computation.
I0428 20:01:59.841195 29849 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:59.841199 29849 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:59.841202 29849 net.cpp:200] relu3 needs backward computation.
I0428 20:01:59.841219 29849 net.cpp:200] ip3 needs backward computation.
I0428 20:01:59.841240 29849 net.cpp:200] relu2 needs backward computation.
I0428 20:01:59.841249 29849 net.cpp:200] ip2 needs backward computation.
I0428 20:01:59.841253 29849 net.cpp:200] relu1 needs backward computation.
I0428 20:01:59.841255 29849 net.cpp:200] ip1 needs backward computation.
I0428 20:01:59.841264 29849 net.cpp:200] pool1 needs backward computation.
I0428 20:01:59.841266 29849 net.cpp:200] conv1 needs backward computation.
I0428 20:01:59.841269 29849 net.cpp:200] pool0 needs backward computation.
I0428 20:01:59.841272 29849 net.cpp:200] conv0 needs backward computation.
I0428 20:01:59.841275 29849 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:59.841279 29849 net.cpp:202] mnist does not need backward computation.
I0428 20:01:59.841282 29849 net.cpp:244] This network produces output accuracy
I0428 20:01:59.841285 29849 net.cpp:244] This network produces output loss
I0428 20:01:59.841295 29849 net.cpp:257] Network initialization done.
I0428 20:01:59.841334 29849 solver.cpp:56] Solver scaffolding done.
I0428 20:01:59.841711 29849 caffe.cpp:248] Starting Optimization
I0428 20:01:59.841718 29849 solver.cpp:273] Solving LeNet
I0428 20:01:59.841722 29849 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:59.842492 29849 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:59.846544 29849 blocking_queue.cpp:49] Waiting for data
I0428 20:01:59.918637 29856 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:59.919185 29849 solver.cpp:398]     Test net output #0: accuracy = 0.1067
I0428 20:01:59.919208 29849 solver.cpp:398]     Test net output #1: loss = 2.31253 (* 1 = 2.31253 loss)
I0428 20:01:59.922446 29849 solver.cpp:219] Iteration 0 (0 iter/s, 0.0806943s/100 iters), loss = 2.31123
I0428 20:01:59.922469 29849 solver.cpp:238]     Train net output #0: loss = 2.31123 (* 1 = 2.31123 loss)
I0428 20:01:59.922497 29849 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:00.029769 29849 solver.cpp:219] Iteration 100 (932.057 iter/s, 0.10729s/100 iters), loss = 0.749638
I0428 20:02:00.029795 29849 solver.cpp:238]     Train net output #0: loss = 0.749638 (* 1 = 0.749638 loss)
I0428 20:02:00.029803 29849 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:00.140771 29849 solver.cpp:219] Iteration 200 (901.187 iter/s, 0.110965s/100 iters), loss = 0.466159
I0428 20:02:00.140817 29849 solver.cpp:238]     Train net output #0: loss = 0.466159 (* 1 = 0.466159 loss)
I0428 20:02:00.140825 29849 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:00.249259 29849 solver.cpp:219] Iteration 300 (922.067 iter/s, 0.108452s/100 iters), loss = 0.625808
I0428 20:02:00.249299 29849 solver.cpp:238]     Train net output #0: loss = 0.625808 (* 1 = 0.625808 loss)
I0428 20:02:00.249320 29849 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:00.359069 29849 solver.cpp:219] Iteration 400 (910.947 iter/s, 0.109776s/100 iters), loss = 0.782757
I0428 20:02:00.359112 29849 solver.cpp:238]     Train net output #0: loss = 0.782757 (* 1 = 0.782757 loss)
I0428 20:02:00.359119 29849 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:00.468111 29849 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:00.543545 29856 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:00.544070 29849 solver.cpp:398]     Test net output #0: accuracy = 0.7735
I0428 20:02:00.544097 29849 solver.cpp:398]     Test net output #1: loss = 0.61514 (* 1 = 0.61514 loss)
I0428 20:02:00.545176 29849 solver.cpp:219] Iteration 500 (537.444 iter/s, 0.186066s/100 iters), loss = 0.718926
I0428 20:02:00.545218 29849 solver.cpp:238]     Train net output #0: loss = 0.718926 (* 1 = 0.718926 loss)
I0428 20:02:00.545240 29849 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:00.657778 29849 solver.cpp:219] Iteration 600 (888.543 iter/s, 0.112544s/100 iters), loss = 0.469937
I0428 20:02:00.657804 29849 solver.cpp:238]     Train net output #0: loss = 0.469937 (* 1 = 0.469937 loss)
I0428 20:02:00.657810 29849 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:00.765226 29849 solver.cpp:219] Iteration 700 (930.998 iter/s, 0.107412s/100 iters), loss = 0.580913
I0428 20:02:00.765269 29849 solver.cpp:238]     Train net output #0: loss = 0.580913 (* 1 = 0.580913 loss)
I0428 20:02:00.765275 29849 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:00.874385 29849 solver.cpp:219] Iteration 800 (916.53 iter/s, 0.109107s/100 iters), loss = 0.690865
I0428 20:02:00.874428 29849 solver.cpp:238]     Train net output #0: loss = 0.690865 (* 1 = 0.690865 loss)
I0428 20:02:00.874434 29849 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:00.985283 29849 solver.cpp:219] Iteration 900 (902.161 iter/s, 0.110845s/100 iters), loss = 0.584295
I0428 20:02:00.985325 29849 solver.cpp:238]     Train net output #0: loss = 0.584295 (* 1 = 0.584295 loss)
I0428 20:02:00.985332 29849 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:01.020882 29855 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:01.091634 29849 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:01.092898 29849 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:01.093580 29849 solver.cpp:311] Iteration 1000, loss = 0.500767
I0428 20:02:01.093595 29849 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:01.168349 29856 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:01.168915 29849 solver.cpp:398]     Test net output #0: accuracy = 0.783
I0428 20:02:01.168934 29849 solver.cpp:398]     Test net output #1: loss = 0.574233 (* 1 = 0.574233 loss)
I0428 20:02:01.168939 29849 solver.cpp:316] Optimization Done.
I0428 20:02:01.168942 29849 caffe.cpp:259] Optimization Done.
