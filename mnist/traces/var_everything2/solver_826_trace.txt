I0428 19:58:41.509191 29035 caffe.cpp:218] Using GPUs 0
I0428 19:58:41.545918 29035 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:42.070067 29035 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test826.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:42.070202 29035 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test826.prototxt
I0428 19:58:42.070580 29035 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:42.070598 29035 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:42.070688 29035 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:58:42.070765 29035 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:42.070863 29035 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:42.070885 29035 net.cpp:86] Creating Layer mnist
I0428 19:58:42.070894 29035 net.cpp:382] mnist -> data
I0428 19:58:42.070916 29035 net.cpp:382] mnist -> label
I0428 19:58:42.072052 29035 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:42.074528 29035 net.cpp:124] Setting up mnist
I0428 19:58:42.074548 29035 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:42.074555 29035 net.cpp:131] Top shape: 64 (64)
I0428 19:58:42.074558 29035 net.cpp:139] Memory required for data: 200960
I0428 19:58:42.074566 29035 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:42.074584 29035 net.cpp:86] Creating Layer conv0
I0428 19:58:42.074589 29035 net.cpp:408] conv0 <- data
I0428 19:58:42.074602 29035 net.cpp:382] conv0 -> conv0
I0428 19:58:42.367297 29035 net.cpp:124] Setting up conv0
I0428 19:58:42.367329 29035 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:42.367334 29035 net.cpp:139] Memory required for data: 1675520
I0428 19:58:42.367373 29035 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:42.367388 29035 net.cpp:86] Creating Layer pool0
I0428 19:58:42.367393 29035 net.cpp:408] pool0 <- conv0
I0428 19:58:42.367398 29035 net.cpp:382] pool0 -> pool0
I0428 19:58:42.367456 29035 net.cpp:124] Setting up pool0
I0428 19:58:42.367465 29035 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:42.367470 29035 net.cpp:139] Memory required for data: 2044160
I0428 19:58:42.367472 29035 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:42.367486 29035 net.cpp:86] Creating Layer conv1
I0428 19:58:42.367489 29035 net.cpp:408] conv1 <- pool0
I0428 19:58:42.367496 29035 net.cpp:382] conv1 -> conv1
I0428 19:58:42.370687 29035 net.cpp:124] Setting up conv1
I0428 19:58:42.370707 29035 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:58:42.370713 29035 net.cpp:139] Memory required for data: 2208000
I0428 19:58:42.370728 29035 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:42.370741 29035 net.cpp:86] Creating Layer pool1
I0428 19:58:42.370748 29035 net.cpp:408] pool1 <- conv1
I0428 19:58:42.370756 29035 net.cpp:382] pool1 -> pool1
I0428 19:58:42.370818 29035 net.cpp:124] Setting up pool1
I0428 19:58:42.370832 29035 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:58:42.370839 29035 net.cpp:139] Memory required for data: 2248960
I0428 19:58:42.370846 29035 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:42.370857 29035 net.cpp:86] Creating Layer ip1
I0428 19:58:42.370863 29035 net.cpp:408] ip1 <- pool1
I0428 19:58:42.370873 29035 net.cpp:382] ip1 -> ip1
I0428 19:58:42.371081 29035 net.cpp:124] Setting up ip1
I0428 19:58:42.371095 29035 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:42.371101 29035 net.cpp:139] Memory required for data: 2255360
I0428 19:58:42.371114 29035 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:42.371125 29035 net.cpp:86] Creating Layer relu1
I0428 19:58:42.371131 29035 net.cpp:408] relu1 <- ip1
I0428 19:58:42.371140 29035 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:42.371417 29035 net.cpp:124] Setting up relu1
I0428 19:58:42.371434 29035 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:42.371441 29035 net.cpp:139] Memory required for data: 2261760
I0428 19:58:42.371448 29035 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:42.371461 29035 net.cpp:86] Creating Layer ip2
I0428 19:58:42.371469 29035 net.cpp:408] ip2 <- ip1
I0428 19:58:42.371479 29035 net.cpp:382] ip2 -> ip2
I0428 19:58:42.371655 29035 net.cpp:124] Setting up ip2
I0428 19:58:42.371671 29035 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:42.371678 29035 net.cpp:139] Memory required for data: 2264320
I0428 19:58:42.371690 29035 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:42.371702 29035 net.cpp:86] Creating Layer relu2
I0428 19:58:42.371708 29035 net.cpp:408] relu2 <- ip2
I0428 19:58:42.371717 29035 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:42.372982 29035 net.cpp:124] Setting up relu2
I0428 19:58:42.373004 29035 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:42.373013 29035 net.cpp:139] Memory required for data: 2266880
I0428 19:58:42.373019 29035 layer_factory.hpp:77] Creating layer loss
I0428 19:58:42.373030 29035 net.cpp:86] Creating Layer loss
I0428 19:58:42.373037 29035 net.cpp:408] loss <- ip2
I0428 19:58:42.373046 29035 net.cpp:408] loss <- label
I0428 19:58:42.373056 29035 net.cpp:382] loss -> loss
I0428 19:58:42.373090 29035 layer_factory.hpp:77] Creating layer loss
I0428 19:58:42.373514 29035 net.cpp:124] Setting up loss
I0428 19:58:42.373533 29035 net.cpp:131] Top shape: (1)
I0428 19:58:42.373540 29035 net.cpp:134]     with loss weight 1
I0428 19:58:42.373563 29035 net.cpp:139] Memory required for data: 2266884
I0428 19:58:42.373570 29035 net.cpp:200] loss needs backward computation.
I0428 19:58:42.373577 29035 net.cpp:200] relu2 needs backward computation.
I0428 19:58:42.373584 29035 net.cpp:200] ip2 needs backward computation.
I0428 19:58:42.373589 29035 net.cpp:200] relu1 needs backward computation.
I0428 19:58:42.373594 29035 net.cpp:200] ip1 needs backward computation.
I0428 19:58:42.373617 29035 net.cpp:200] pool1 needs backward computation.
I0428 19:58:42.373625 29035 net.cpp:200] conv1 needs backward computation.
I0428 19:58:42.373631 29035 net.cpp:200] pool0 needs backward computation.
I0428 19:58:42.373637 29035 net.cpp:200] conv0 needs backward computation.
I0428 19:58:42.373644 29035 net.cpp:202] mnist does not need backward computation.
I0428 19:58:42.373651 29035 net.cpp:244] This network produces output loss
I0428 19:58:42.373667 29035 net.cpp:257] Network initialization done.
I0428 19:58:42.374208 29035 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test826.prototxt
I0428 19:58:42.374258 29035 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:42.374420 29035 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:58:42.374543 29035 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:42.374619 29035 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:42.374641 29035 net.cpp:86] Creating Layer mnist
I0428 19:58:42.374650 29035 net.cpp:382] mnist -> data
I0428 19:58:42.374665 29035 net.cpp:382] mnist -> label
I0428 19:58:42.374812 29035 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:42.377985 29035 net.cpp:124] Setting up mnist
I0428 19:58:42.378007 29035 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:42.378017 29035 net.cpp:131] Top shape: 100 (100)
I0428 19:58:42.378024 29035 net.cpp:139] Memory required for data: 314000
I0428 19:58:42.378031 29035 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:42.378043 29035 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:42.378051 29035 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:42.378059 29035 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:42.378072 29035 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:42.378223 29035 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:42.378257 29035 net.cpp:131] Top shape: 100 (100)
I0428 19:58:42.378265 29035 net.cpp:131] Top shape: 100 (100)
I0428 19:58:42.378270 29035 net.cpp:139] Memory required for data: 314800
I0428 19:58:42.378278 29035 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:42.378293 29035 net.cpp:86] Creating Layer conv0
I0428 19:58:42.378309 29035 net.cpp:408] conv0 <- data
I0428 19:58:42.378321 29035 net.cpp:382] conv0 -> conv0
I0428 19:58:42.380792 29035 net.cpp:124] Setting up conv0
I0428 19:58:42.380821 29035 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:42.380831 29035 net.cpp:139] Memory required for data: 2618800
I0428 19:58:42.380849 29035 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:42.380861 29035 net.cpp:86] Creating Layer pool0
I0428 19:58:42.380868 29035 net.cpp:408] pool0 <- conv0
I0428 19:58:42.380877 29035 net.cpp:382] pool0 -> pool0
I0428 19:58:42.380942 29035 net.cpp:124] Setting up pool0
I0428 19:58:42.380959 29035 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:42.380966 29035 net.cpp:139] Memory required for data: 3194800
I0428 19:58:42.380973 29035 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:42.380988 29035 net.cpp:86] Creating Layer conv1
I0428 19:58:42.381002 29035 net.cpp:408] conv1 <- pool0
I0428 19:58:42.381013 29035 net.cpp:382] conv1 -> conv1
I0428 19:58:42.384477 29035 net.cpp:124] Setting up conv1
I0428 19:58:42.384498 29035 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:58:42.384505 29035 net.cpp:139] Memory required for data: 3450800
I0428 19:58:42.384521 29035 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:42.384534 29035 net.cpp:86] Creating Layer pool1
I0428 19:58:42.384542 29035 net.cpp:408] pool1 <- conv1
I0428 19:58:42.384552 29035 net.cpp:382] pool1 -> pool1
I0428 19:58:42.384658 29035 net.cpp:124] Setting up pool1
I0428 19:58:42.384675 29035 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:58:42.384682 29035 net.cpp:139] Memory required for data: 3514800
I0428 19:58:42.384688 29035 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:42.384701 29035 net.cpp:86] Creating Layer ip1
I0428 19:58:42.384707 29035 net.cpp:408] ip1 <- pool1
I0428 19:58:42.384717 29035 net.cpp:382] ip1 -> ip1
I0428 19:58:42.384955 29035 net.cpp:124] Setting up ip1
I0428 19:58:42.384976 29035 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:42.384982 29035 net.cpp:139] Memory required for data: 3524800
I0428 19:58:42.384997 29035 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:42.385007 29035 net.cpp:86] Creating Layer relu1
I0428 19:58:42.385015 29035 net.cpp:408] relu1 <- ip1
I0428 19:58:42.385023 29035 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:42.385315 29035 net.cpp:124] Setting up relu1
I0428 19:58:42.385332 29035 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:42.385339 29035 net.cpp:139] Memory required for data: 3534800
I0428 19:58:42.385345 29035 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:42.385360 29035 net.cpp:86] Creating Layer ip2
I0428 19:58:42.385367 29035 net.cpp:408] ip2 <- ip1
I0428 19:58:42.385378 29035 net.cpp:382] ip2 -> ip2
I0428 19:58:42.385597 29035 net.cpp:124] Setting up ip2
I0428 19:58:42.385614 29035 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:42.385622 29035 net.cpp:139] Memory required for data: 3538800
I0428 19:58:42.385632 29035 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:42.385643 29035 net.cpp:86] Creating Layer relu2
I0428 19:58:42.385648 29035 net.cpp:408] relu2 <- ip2
I0428 19:58:42.385658 29035 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:42.385946 29035 net.cpp:124] Setting up relu2
I0428 19:58:42.385962 29035 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:42.385969 29035 net.cpp:139] Memory required for data: 3542800
I0428 19:58:42.385975 29035 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:58:42.385985 29035 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:58:42.385993 29035 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:58:42.386001 29035 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:58:42.386029 29035 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:58:42.386091 29035 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:58:42.386106 29035 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:42.386114 29035 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:42.386121 29035 net.cpp:139] Memory required for data: 3550800
I0428 19:58:42.386126 29035 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:42.386137 29035 net.cpp:86] Creating Layer accuracy
I0428 19:58:42.386143 29035 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:58:42.386152 29035 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:42.386160 29035 net.cpp:382] accuracy -> accuracy
I0428 19:58:42.386174 29035 net.cpp:124] Setting up accuracy
I0428 19:58:42.386183 29035 net.cpp:131] Top shape: (1)
I0428 19:58:42.386189 29035 net.cpp:139] Memory required for data: 3550804
I0428 19:58:42.386195 29035 layer_factory.hpp:77] Creating layer loss
I0428 19:58:42.386204 29035 net.cpp:86] Creating Layer loss
I0428 19:58:42.386211 29035 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:58:42.386219 29035 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:42.386227 29035 net.cpp:382] loss -> loss
I0428 19:58:42.386238 29035 layer_factory.hpp:77] Creating layer loss
I0428 19:58:42.386647 29035 net.cpp:124] Setting up loss
I0428 19:58:42.386667 29035 net.cpp:131] Top shape: (1)
I0428 19:58:42.386673 29035 net.cpp:134]     with loss weight 1
I0428 19:58:42.386684 29035 net.cpp:139] Memory required for data: 3550808
I0428 19:58:42.386692 29035 net.cpp:200] loss needs backward computation.
I0428 19:58:42.386698 29035 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:42.386705 29035 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:58:42.386713 29035 net.cpp:200] relu2 needs backward computation.
I0428 19:58:42.386718 29035 net.cpp:200] ip2 needs backward computation.
I0428 19:58:42.386724 29035 net.cpp:200] relu1 needs backward computation.
I0428 19:58:42.386729 29035 net.cpp:200] ip1 needs backward computation.
I0428 19:58:42.386736 29035 net.cpp:200] pool1 needs backward computation.
I0428 19:58:42.386742 29035 net.cpp:200] conv1 needs backward computation.
I0428 19:58:42.386749 29035 net.cpp:200] pool0 needs backward computation.
I0428 19:58:42.386755 29035 net.cpp:200] conv0 needs backward computation.
I0428 19:58:42.386762 29035 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:42.386770 29035 net.cpp:202] mnist does not need backward computation.
I0428 19:58:42.386775 29035 net.cpp:244] This network produces output accuracy
I0428 19:58:42.386782 29035 net.cpp:244] This network produces output loss
I0428 19:58:42.386801 29035 net.cpp:257] Network initialization done.
I0428 19:58:42.386868 29035 solver.cpp:56] Solver scaffolding done.
I0428 19:58:42.387362 29035 caffe.cpp:248] Starting Optimization
I0428 19:58:42.387375 29035 solver.cpp:273] Solving LeNet
I0428 19:58:42.387382 29035 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:42.387614 29035 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:42.395962 29035 blocking_queue.cpp:49] Waiting for data
I0428 19:58:42.463315 29042 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:42.463840 29035 solver.cpp:398]     Test net output #0: accuracy = 0.0977
I0428 19:58:42.463866 29035 solver.cpp:398]     Test net output #1: loss = 2.31013 (* 1 = 2.31013 loss)
I0428 19:58:42.466567 29035 solver.cpp:219] Iteration 0 (0 iter/s, 0.0791524s/100 iters), loss = 2.29923
I0428 19:58:42.466595 29035 solver.cpp:238]     Train net output #0: loss = 2.29923 (* 1 = 2.29923 loss)
I0428 19:58:42.466610 29035 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:42.541322 29035 solver.cpp:219] Iteration 100 (1338.36 iter/s, 0.0747181s/100 iters), loss = 0.785132
I0428 19:58:42.541348 29035 solver.cpp:238]     Train net output #0: loss = 0.785132 (* 1 = 0.785132 loss)
I0428 19:58:42.541355 29035 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:42.612756 29035 solver.cpp:219] Iteration 200 (1400.59 iter/s, 0.0713984s/100 iters), loss = 0.392425
I0428 19:58:42.612792 29035 solver.cpp:238]     Train net output #0: loss = 0.392425 (* 1 = 0.392425 loss)
I0428 19:58:42.612797 29035 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:42.684561 29035 solver.cpp:219] Iteration 300 (1393.48 iter/s, 0.0717629s/100 iters), loss = 0.664876
I0428 19:58:42.684600 29035 solver.cpp:238]     Train net output #0: loss = 0.664876 (* 1 = 0.664876 loss)
I0428 19:58:42.684607 29035 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:42.766494 29035 solver.cpp:219] Iteration 400 (1220.99 iter/s, 0.0819005s/100 iters), loss = 0.425744
I0428 19:58:42.766531 29035 solver.cpp:238]     Train net output #0: loss = 0.425744 (* 1 = 0.425744 loss)
I0428 19:58:42.766538 29035 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:42.840170 29035 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:42.915050 29042 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:42.915573 29035 solver.cpp:398]     Test net output #0: accuracy = 0.8599
I0428 19:58:42.915640 29035 solver.cpp:398]     Test net output #1: loss = 0.381789 (* 1 = 0.381789 loss)
I0428 19:58:42.916465 29035 solver.cpp:219] Iteration 500 (666.951 iter/s, 0.149936s/100 iters), loss = 0.415564
I0428 19:58:42.916520 29035 solver.cpp:238]     Train net output #0: loss = 0.415564 (* 1 = 0.415564 loss)
I0428 19:58:42.916530 29035 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:43.004745 29035 solver.cpp:219] Iteration 600 (1133.55 iter/s, 0.0882182s/100 iters), loss = 0.307194
I0428 19:58:43.004784 29035 solver.cpp:238]     Train net output #0: loss = 0.307194 (* 1 = 0.307194 loss)
I0428 19:58:43.004791 29035 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:43.083246 29035 solver.cpp:219] Iteration 700 (1274.39 iter/s, 0.078469s/100 iters), loss = 0.3358
I0428 19:58:43.083284 29035 solver.cpp:238]     Train net output #0: loss = 0.3358 (* 1 = 0.3358 loss)
I0428 19:58:43.083290 29035 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:43.156062 29035 solver.cpp:219] Iteration 800 (1373.91 iter/s, 0.0727849s/100 iters), loss = 0.632751
I0428 19:58:43.156116 29035 solver.cpp:238]     Train net output #0: loss = 0.632751 (* 1 = 0.632751 loss)
I0428 19:58:43.156121 29035 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:43.228745 29035 solver.cpp:219] Iteration 900 (1376.99 iter/s, 0.072622s/100 iters), loss = 0.33765
I0428 19:58:43.228782 29035 solver.cpp:238]     Train net output #0: loss = 0.33765 (* 1 = 0.33765 loss)
I0428 19:58:43.228788 29035 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:43.253377 29041 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:43.301213 29035 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:43.301908 29035 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:43.302311 29035 solver.cpp:311] Iteration 1000, loss = 0.337151
I0428 19:58:43.302328 29035 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:43.377920 29042 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:43.378443 29035 solver.cpp:398]     Test net output #0: accuracy = 0.8753
I0428 19:58:43.378479 29035 solver.cpp:398]     Test net output #1: loss = 0.323961 (* 1 = 0.323961 loss)
I0428 19:58:43.378484 29035 solver.cpp:316] Optimization Done.
I0428 19:58:43.378486 29035 caffe.cpp:259] Optimization Done.
