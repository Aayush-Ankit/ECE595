I0428 19:49:07.331194 26677 caffe.cpp:218] Using GPUs 0
I0428 19:49:07.365547 26677 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:07.868325 26677 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test565.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:07.868466 26677 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test565.prototxt
I0428 19:49:07.868886 26677 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:07.868907 26677 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:07.869014 26677 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:07.869091 26677 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:07.869186 26677 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:07.869211 26677 net.cpp:86] Creating Layer mnist
I0428 19:49:07.869218 26677 net.cpp:382] mnist -> data
I0428 19:49:07.869241 26677 net.cpp:382] mnist -> label
I0428 19:49:07.870326 26677 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:07.872773 26677 net.cpp:124] Setting up mnist
I0428 19:49:07.872792 26677 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:07.872815 26677 net.cpp:131] Top shape: 64 (64)
I0428 19:49:07.872830 26677 net.cpp:139] Memory required for data: 200960
I0428 19:49:07.872838 26677 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:07.872854 26677 net.cpp:86] Creating Layer conv0
I0428 19:49:07.872874 26677 net.cpp:408] conv0 <- data
I0428 19:49:07.872887 26677 net.cpp:382] conv0 -> conv0
I0428 19:49:08.123649 26677 net.cpp:124] Setting up conv0
I0428 19:49:08.123692 26677 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:08.123695 26677 net.cpp:139] Memory required for data: 938240
I0428 19:49:08.123709 26677 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:08.123723 26677 net.cpp:86] Creating Layer pool0
I0428 19:49:08.123725 26677 net.cpp:408] pool0 <- conv0
I0428 19:49:08.123730 26677 net.cpp:382] pool0 -> pool0
I0428 19:49:08.123790 26677 net.cpp:124] Setting up pool0
I0428 19:49:08.123795 26677 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:08.123798 26677 net.cpp:139] Memory required for data: 1122560
I0428 19:49:08.123801 26677 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:08.123826 26677 net.cpp:86] Creating Layer conv1
I0428 19:49:08.123829 26677 net.cpp:408] conv1 <- pool0
I0428 19:49:08.123833 26677 net.cpp:382] conv1 -> conv1
I0428 19:49:08.125751 26677 net.cpp:124] Setting up conv1
I0428 19:49:08.125782 26677 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:08.125785 26677 net.cpp:139] Memory required for data: 1204480
I0428 19:49:08.125808 26677 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:08.125818 26677 net.cpp:86] Creating Layer pool1
I0428 19:49:08.125820 26677 net.cpp:408] pool1 <- conv1
I0428 19:49:08.125826 26677 net.cpp:382] pool1 -> pool1
I0428 19:49:08.125864 26677 net.cpp:124] Setting up pool1
I0428 19:49:08.125870 26677 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:08.125874 26677 net.cpp:139] Memory required for data: 1224960
I0428 19:49:08.125876 26677 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:08.125885 26677 net.cpp:86] Creating Layer ip1
I0428 19:49:08.125887 26677 net.cpp:408] ip1 <- pool1
I0428 19:49:08.125892 26677 net.cpp:382] ip1 -> ip1
I0428 19:49:08.126009 26677 net.cpp:124] Setting up ip1
I0428 19:49:08.126018 26677 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:08.126035 26677 net.cpp:139] Memory required for data: 1227520
I0428 19:49:08.126042 26677 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:08.126047 26677 net.cpp:86] Creating Layer relu1
I0428 19:49:08.126050 26677 net.cpp:408] relu1 <- ip1
I0428 19:49:08.126055 26677 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:08.126241 26677 net.cpp:124] Setting up relu1
I0428 19:49:08.126250 26677 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:08.126253 26677 net.cpp:139] Memory required for data: 1230080
I0428 19:49:08.126256 26677 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:08.126262 26677 net.cpp:86] Creating Layer ip2
I0428 19:49:08.126266 26677 net.cpp:408] ip2 <- ip1
I0428 19:49:08.126271 26677 net.cpp:382] ip2 -> ip2
I0428 19:49:08.126365 26677 net.cpp:124] Setting up ip2
I0428 19:49:08.126372 26677 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:08.126375 26677 net.cpp:139] Memory required for data: 1242880
I0428 19:49:08.126380 26677 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:08.126402 26677 net.cpp:86] Creating Layer relu2
I0428 19:49:08.126405 26677 net.cpp:408] relu2 <- ip2
I0428 19:49:08.126410 26677 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:08.127218 26677 net.cpp:124] Setting up relu2
I0428 19:49:08.127231 26677 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:08.127250 26677 net.cpp:139] Memory required for data: 1255680
I0428 19:49:08.127254 26677 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:08.127260 26677 net.cpp:86] Creating Layer ip3
I0428 19:49:08.127265 26677 net.cpp:408] ip3 <- ip2
I0428 19:49:08.127270 26677 net.cpp:382] ip3 -> ip3
I0428 19:49:08.127396 26677 net.cpp:124] Setting up ip3
I0428 19:49:08.127404 26677 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:08.127408 26677 net.cpp:139] Memory required for data: 1258240
I0428 19:49:08.127416 26677 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:08.127421 26677 net.cpp:86] Creating Layer relu3
I0428 19:49:08.127424 26677 net.cpp:408] relu3 <- ip3
I0428 19:49:08.127429 26677 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:08.127646 26677 net.cpp:124] Setting up relu3
I0428 19:49:08.127655 26677 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:08.127658 26677 net.cpp:139] Memory required for data: 1260800
I0428 19:49:08.127660 26677 layer_factory.hpp:77] Creating layer loss
I0428 19:49:08.127667 26677 net.cpp:86] Creating Layer loss
I0428 19:49:08.127671 26677 net.cpp:408] loss <- ip3
I0428 19:49:08.127674 26677 net.cpp:408] loss <- label
I0428 19:49:08.127679 26677 net.cpp:382] loss -> loss
I0428 19:49:08.127696 26677 layer_factory.hpp:77] Creating layer loss
I0428 19:49:08.127938 26677 net.cpp:124] Setting up loss
I0428 19:49:08.127945 26677 net.cpp:131] Top shape: (1)
I0428 19:49:08.127948 26677 net.cpp:134]     with loss weight 1
I0428 19:49:08.127980 26677 net.cpp:139] Memory required for data: 1260804
I0428 19:49:08.127984 26677 net.cpp:200] loss needs backward computation.
I0428 19:49:08.127987 26677 net.cpp:200] relu3 needs backward computation.
I0428 19:49:08.127990 26677 net.cpp:200] ip3 needs backward computation.
I0428 19:49:08.127992 26677 net.cpp:200] relu2 needs backward computation.
I0428 19:49:08.127995 26677 net.cpp:200] ip2 needs backward computation.
I0428 19:49:08.127997 26677 net.cpp:200] relu1 needs backward computation.
I0428 19:49:08.128000 26677 net.cpp:200] ip1 needs backward computation.
I0428 19:49:08.128003 26677 net.cpp:200] pool1 needs backward computation.
I0428 19:49:08.128006 26677 net.cpp:200] conv1 needs backward computation.
I0428 19:49:08.128010 26677 net.cpp:200] pool0 needs backward computation.
I0428 19:49:08.128012 26677 net.cpp:200] conv0 needs backward computation.
I0428 19:49:08.128015 26677 net.cpp:202] mnist does not need backward computation.
I0428 19:49:08.128018 26677 net.cpp:244] This network produces output loss
I0428 19:49:08.128026 26677 net.cpp:257] Network initialization done.
I0428 19:49:08.128406 26677 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test565.prototxt
I0428 19:49:08.128432 26677 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:08.128541 26677 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:08.128636 26677 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:08.128677 26677 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:08.128690 26677 net.cpp:86] Creating Layer mnist
I0428 19:49:08.128695 26677 net.cpp:382] mnist -> data
I0428 19:49:08.128702 26677 net.cpp:382] mnist -> label
I0428 19:49:08.128783 26677 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:08.131037 26677 net.cpp:124] Setting up mnist
I0428 19:49:08.131065 26677 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:08.131086 26677 net.cpp:131] Top shape: 100 (100)
I0428 19:49:08.131089 26677 net.cpp:139] Memory required for data: 314000
I0428 19:49:08.131093 26677 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:08.131117 26677 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:08.131121 26677 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:08.131129 26677 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:08.131134 26677 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:08.131176 26677 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:08.131184 26677 net.cpp:131] Top shape: 100 (100)
I0428 19:49:08.131187 26677 net.cpp:131] Top shape: 100 (100)
I0428 19:49:08.131191 26677 net.cpp:139] Memory required for data: 314800
I0428 19:49:08.131209 26677 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:08.131219 26677 net.cpp:86] Creating Layer conv0
I0428 19:49:08.131223 26677 net.cpp:408] conv0 <- data
I0428 19:49:08.131228 26677 net.cpp:382] conv0 -> conv0
I0428 19:49:08.133028 26677 net.cpp:124] Setting up conv0
I0428 19:49:08.133041 26677 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:08.133060 26677 net.cpp:139] Memory required for data: 1466800
I0428 19:49:08.133074 26677 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:08.133080 26677 net.cpp:86] Creating Layer pool0
I0428 19:49:08.133085 26677 net.cpp:408] pool0 <- conv0
I0428 19:49:08.133088 26677 net.cpp:382] pool0 -> pool0
I0428 19:49:08.133123 26677 net.cpp:124] Setting up pool0
I0428 19:49:08.133128 26677 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:08.133131 26677 net.cpp:139] Memory required for data: 1754800
I0428 19:49:08.133134 26677 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:08.133144 26677 net.cpp:86] Creating Layer conv1
I0428 19:49:08.133147 26677 net.cpp:408] conv1 <- pool0
I0428 19:49:08.133153 26677 net.cpp:382] conv1 -> conv1
I0428 19:49:08.135383 26677 net.cpp:124] Setting up conv1
I0428 19:49:08.135396 26677 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:08.135418 26677 net.cpp:139] Memory required for data: 1882800
I0428 19:49:08.135442 26677 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:08.135448 26677 net.cpp:86] Creating Layer pool1
I0428 19:49:08.135452 26677 net.cpp:408] pool1 <- conv1
I0428 19:49:08.135457 26677 net.cpp:382] pool1 -> pool1
I0428 19:49:08.135527 26677 net.cpp:124] Setting up pool1
I0428 19:49:08.135542 26677 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:08.135545 26677 net.cpp:139] Memory required for data: 1914800
I0428 19:49:08.135548 26677 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:08.135553 26677 net.cpp:86] Creating Layer ip1
I0428 19:49:08.135557 26677 net.cpp:408] ip1 <- pool1
I0428 19:49:08.135562 26677 net.cpp:382] ip1 -> ip1
I0428 19:49:08.135712 26677 net.cpp:124] Setting up ip1
I0428 19:49:08.135721 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.135735 26677 net.cpp:139] Memory required for data: 1918800
I0428 19:49:08.135743 26677 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:08.135751 26677 net.cpp:86] Creating Layer relu1
I0428 19:49:08.135754 26677 net.cpp:408] relu1 <- ip1
I0428 19:49:08.135758 26677 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:08.135964 26677 net.cpp:124] Setting up relu1
I0428 19:49:08.135972 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.135977 26677 net.cpp:139] Memory required for data: 1922800
I0428 19:49:08.135979 26677 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:08.135993 26677 net.cpp:86] Creating Layer ip2
I0428 19:49:08.135998 26677 net.cpp:408] ip2 <- ip1
I0428 19:49:08.136003 26677 net.cpp:382] ip2 -> ip2
I0428 19:49:08.136117 26677 net.cpp:124] Setting up ip2
I0428 19:49:08.136124 26677 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:08.136127 26677 net.cpp:139] Memory required for data: 1942800
I0428 19:49:08.136132 26677 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:08.136137 26677 net.cpp:86] Creating Layer relu2
I0428 19:49:08.136140 26677 net.cpp:408] relu2 <- ip2
I0428 19:49:08.136144 26677 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:08.136304 26677 net.cpp:124] Setting up relu2
I0428 19:49:08.136312 26677 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:08.136315 26677 net.cpp:139] Memory required for data: 1962800
I0428 19:49:08.136318 26677 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:08.136324 26677 net.cpp:86] Creating Layer ip3
I0428 19:49:08.136327 26677 net.cpp:408] ip3 <- ip2
I0428 19:49:08.136332 26677 net.cpp:382] ip3 -> ip3
I0428 19:49:08.136436 26677 net.cpp:124] Setting up ip3
I0428 19:49:08.136443 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.136446 26677 net.cpp:139] Memory required for data: 1966800
I0428 19:49:08.136453 26677 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:08.136457 26677 net.cpp:86] Creating Layer relu3
I0428 19:49:08.136461 26677 net.cpp:408] relu3 <- ip3
I0428 19:49:08.136464 26677 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:08.137439 26677 net.cpp:124] Setting up relu3
I0428 19:49:08.137450 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.137470 26677 net.cpp:139] Memory required for data: 1970800
I0428 19:49:08.137473 26677 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:08.137478 26677 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:08.137482 26677 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:08.137490 26677 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:08.137495 26677 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:08.137533 26677 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:08.137537 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.137542 26677 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:08.137544 26677 net.cpp:139] Memory required for data: 1978800
I0428 19:49:08.137552 26677 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:08.137557 26677 net.cpp:86] Creating Layer accuracy
I0428 19:49:08.137562 26677 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:08.137565 26677 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:08.137570 26677 net.cpp:382] accuracy -> accuracy
I0428 19:49:08.137578 26677 net.cpp:124] Setting up accuracy
I0428 19:49:08.137581 26677 net.cpp:131] Top shape: (1)
I0428 19:49:08.137583 26677 net.cpp:139] Memory required for data: 1978804
I0428 19:49:08.137586 26677 layer_factory.hpp:77] Creating layer loss
I0428 19:49:08.137593 26677 net.cpp:86] Creating Layer loss
I0428 19:49:08.137595 26677 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:08.137598 26677 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:08.137603 26677 net.cpp:382] loss -> loss
I0428 19:49:08.137609 26677 layer_factory.hpp:77] Creating layer loss
I0428 19:49:08.137862 26677 net.cpp:124] Setting up loss
I0428 19:49:08.137871 26677 net.cpp:131] Top shape: (1)
I0428 19:49:08.137874 26677 net.cpp:134]     with loss weight 1
I0428 19:49:08.137881 26677 net.cpp:139] Memory required for data: 1978808
I0428 19:49:08.137894 26677 net.cpp:200] loss needs backward computation.
I0428 19:49:08.137899 26677 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:08.137902 26677 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:08.137905 26677 net.cpp:200] relu3 needs backward computation.
I0428 19:49:08.137908 26677 net.cpp:200] ip3 needs backward computation.
I0428 19:49:08.137912 26677 net.cpp:200] relu2 needs backward computation.
I0428 19:49:08.137914 26677 net.cpp:200] ip2 needs backward computation.
I0428 19:49:08.137917 26677 net.cpp:200] relu1 needs backward computation.
I0428 19:49:08.137919 26677 net.cpp:200] ip1 needs backward computation.
I0428 19:49:08.137923 26677 net.cpp:200] pool1 needs backward computation.
I0428 19:49:08.137925 26677 net.cpp:200] conv1 needs backward computation.
I0428 19:49:08.137928 26677 net.cpp:200] pool0 needs backward computation.
I0428 19:49:08.137931 26677 net.cpp:200] conv0 needs backward computation.
I0428 19:49:08.137936 26677 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:08.137939 26677 net.cpp:202] mnist does not need backward computation.
I0428 19:49:08.137943 26677 net.cpp:244] This network produces output accuracy
I0428 19:49:08.137945 26677 net.cpp:244] This network produces output loss
I0428 19:49:08.137974 26677 net.cpp:257] Network initialization done.
I0428 19:49:08.138013 26677 solver.cpp:56] Solver scaffolding done.
I0428 19:49:08.138384 26677 caffe.cpp:248] Starting Optimization
I0428 19:49:08.138391 26677 solver.cpp:273] Solving LeNet
I0428 19:49:08.138392 26677 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:08.139325 26677 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:08.142952 26677 blocking_queue.cpp:49] Waiting for data
I0428 19:49:08.210445 26684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:08.210978 26677 solver.cpp:398]     Test net output #0: accuracy = 0.1211
I0428 19:49:08.211019 26677 solver.cpp:398]     Test net output #1: loss = 2.29677 (* 1 = 2.29677 loss)
I0428 19:49:08.212986 26677 solver.cpp:219] Iteration 0 (0 iter/s, 0.0745483s/100 iters), loss = 2.3117
I0428 19:49:08.213023 26677 solver.cpp:238]     Train net output #0: loss = 2.3117 (* 1 = 2.3117 loss)
I0428 19:49:08.213035 26677 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:08.283864 26677 solver.cpp:219] Iteration 100 (1411.54 iter/s, 0.0708444s/100 iters), loss = 1.41277
I0428 19:49:08.283887 26677 solver.cpp:238]     Train net output #0: loss = 1.41277 (* 1 = 1.41277 loss)
I0428 19:49:08.283893 26677 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:08.356118 26677 solver.cpp:219] Iteration 200 (1384.63 iter/s, 0.0722217s/100 iters), loss = 0.649988
I0428 19:49:08.356155 26677 solver.cpp:238]     Train net output #0: loss = 0.649988 (* 1 = 0.649988 loss)
I0428 19:49:08.356161 26677 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:08.427537 26677 solver.cpp:219] Iteration 300 (1400.81 iter/s, 0.0713873s/100 iters), loss = 0.537414
I0428 19:49:08.427575 26677 solver.cpp:238]     Train net output #0: loss = 0.537414 (* 1 = 0.537414 loss)
I0428 19:49:08.427582 26677 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:08.498837 26677 solver.cpp:219] Iteration 400 (1403.17 iter/s, 0.0712675s/100 iters), loss = 0.600429
I0428 19:49:08.498878 26677 solver.cpp:238]     Train net output #0: loss = 0.600429 (* 1 = 0.600429 loss)
I0428 19:49:08.498883 26677 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:08.568425 26677 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:08.621728 26684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:08.622282 26677 solver.cpp:398]     Test net output #0: accuracy = 0.9088
I0428 19:49:08.622318 26677 solver.cpp:398]     Test net output #1: loss = 0.312392 (* 1 = 0.312392 loss)
I0428 19:49:08.623132 26677 solver.cpp:219] Iteration 500 (804.776 iter/s, 0.124258s/100 iters), loss = 0.286817
I0428 19:49:08.623158 26677 solver.cpp:238]     Train net output #0: loss = 0.286817 (* 1 = 0.286817 loss)
I0428 19:49:08.623183 26677 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:08.699424 26677 solver.cpp:219] Iteration 600 (1311.35 iter/s, 0.0762574s/100 iters), loss = 0.239131
I0428 19:49:08.699465 26677 solver.cpp:238]     Train net output #0: loss = 0.239131 (* 1 = 0.239131 loss)
I0428 19:49:08.699472 26677 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:08.771584 26677 solver.cpp:219] Iteration 700 (1386.49 iter/s, 0.0721244s/100 iters), loss = 0.360896
I0428 19:49:08.771622 26677 solver.cpp:238]     Train net output #0: loss = 0.360896 (* 1 = 0.360896 loss)
I0428 19:49:08.771628 26677 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:08.842701 26677 solver.cpp:219] Iteration 800 (1406.76 iter/s, 0.0710851s/100 iters), loss = 0.461094
I0428 19:49:08.842741 26677 solver.cpp:238]     Train net output #0: loss = 0.461094 (* 1 = 0.461094 loss)
I0428 19:49:08.842747 26677 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:08.914057 26677 solver.cpp:219] Iteration 900 (1402.12 iter/s, 0.0713206s/100 iters), loss = 0.340205
I0428 19:49:08.914099 26677 solver.cpp:238]     Train net output #0: loss = 0.340205 (* 1 = 0.340205 loss)
I0428 19:49:08.914105 26677 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:08.938124 26683 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:08.984776 26677 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:08.985505 26677 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:08.985980 26677 solver.cpp:311] Iteration 1000, loss = 0.18981
I0428 19:49:08.985996 26677 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:09.059818 26684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:09.060329 26677 solver.cpp:398]     Test net output #0: accuracy = 0.9497
I0428 19:49:09.060362 26677 solver.cpp:398]     Test net output #1: loss = 0.166405 (* 1 = 0.166405 loss)
I0428 19:49:09.060369 26677 solver.cpp:316] Optimization Done.
I0428 19:49:09.060371 26677 caffe.cpp:259] Optimization Done.
