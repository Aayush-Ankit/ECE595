I0428 20:14:24.462659 32672 caffe.cpp:218] Using GPUs 0
I0428 20:14:24.498539 32672 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:24.971793 32672 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1221.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:24.971971 32672 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1221.prototxt
I0428 20:14:24.972553 32672 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:24.972579 32672 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:24.972721 32672 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:24.972861 32672 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:24.973012 32672 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:24.973042 32672 net.cpp:86] Creating Layer mnist
I0428 20:14:24.973052 32672 net.cpp:382] mnist -> data
I0428 20:14:24.973080 32672 net.cpp:382] mnist -> label
I0428 20:14:24.974508 32672 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:24.977833 32672 net.cpp:124] Setting up mnist
I0428 20:14:24.977865 32672 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:24.977876 32672 net.cpp:131] Top shape: 64 (64)
I0428 20:14:24.977881 32672 net.cpp:139] Memory required for data: 200960
I0428 20:14:24.977900 32672 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:24.977923 32672 net.cpp:86] Creating Layer conv0
I0428 20:14:24.977960 32672 net.cpp:408] conv0 <- data
I0428 20:14:24.977977 32672 net.cpp:382] conv0 -> conv0
I0428 20:14:25.277626 32672 net.cpp:124] Setting up conv0
I0428 20:14:25.277655 32672 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:25.277660 32672 net.cpp:139] Memory required for data: 7573760
I0428 20:14:25.277678 32672 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:25.277700 32672 net.cpp:86] Creating Layer pool0
I0428 20:14:25.277705 32672 net.cpp:408] pool0 <- conv0
I0428 20:14:25.277712 32672 net.cpp:382] pool0 -> pool0
I0428 20:14:25.277776 32672 net.cpp:124] Setting up pool0
I0428 20:14:25.277781 32672 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:25.277786 32672 net.cpp:139] Memory required for data: 9416960
I0428 20:14:25.277789 32672 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:25.277801 32672 net.cpp:86] Creating Layer conv1
I0428 20:14:25.277806 32672 net.cpp:408] conv1 <- pool0
I0428 20:14:25.277812 32672 net.cpp:382] conv1 -> conv1
I0428 20:14:25.279955 32672 net.cpp:124] Setting up conv1
I0428 20:14:25.279973 32672 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:25.279984 32672 net.cpp:139] Memory required for data: 9449728
I0428 20:14:25.279994 32672 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:25.280004 32672 net.cpp:86] Creating Layer pool1
I0428 20:14:25.280007 32672 net.cpp:408] pool1 <- conv1
I0428 20:14:25.280014 32672 net.cpp:382] pool1 -> pool1
I0428 20:14:25.280055 32672 net.cpp:124] Setting up pool1
I0428 20:14:25.280061 32672 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:25.280066 32672 net.cpp:139] Memory required for data: 9457920
I0428 20:14:25.280069 32672 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:25.280077 32672 net.cpp:86] Creating Layer ip1
I0428 20:14:25.280081 32672 net.cpp:408] ip1 <- pool1
I0428 20:14:25.280086 32672 net.cpp:382] ip1 -> ip1
I0428 20:14:25.280199 32672 net.cpp:124] Setting up ip1
I0428 20:14:25.280206 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.280210 32672 net.cpp:139] Memory required for data: 9460480
I0428 20:14:25.280218 32672 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:25.280225 32672 net.cpp:86] Creating Layer relu1
I0428 20:14:25.280228 32672 net.cpp:408] relu1 <- ip1
I0428 20:14:25.280233 32672 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:25.280424 32672 net.cpp:124] Setting up relu1
I0428 20:14:25.280434 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.280438 32672 net.cpp:139] Memory required for data: 9463040
I0428 20:14:25.280442 32672 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:25.280449 32672 net.cpp:86] Creating Layer ip2
I0428 20:14:25.280453 32672 net.cpp:408] ip2 <- ip1
I0428 20:14:25.280458 32672 net.cpp:382] ip2 -> ip2
I0428 20:14:25.280570 32672 net.cpp:124] Setting up ip2
I0428 20:14:25.280577 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.280580 32672 net.cpp:139] Memory required for data: 9465600
I0428 20:14:25.280587 32672 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:25.280594 32672 net.cpp:86] Creating Layer relu2
I0428 20:14:25.280597 32672 net.cpp:408] relu2 <- ip2
I0428 20:14:25.280602 32672 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:25.281450 32672 net.cpp:124] Setting up relu2
I0428 20:14:25.281464 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.281468 32672 net.cpp:139] Memory required for data: 9468160
I0428 20:14:25.281472 32672 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:25.281481 32672 net.cpp:86] Creating Layer ip3
I0428 20:14:25.281484 32672 net.cpp:408] ip3 <- ip2
I0428 20:14:25.281491 32672 net.cpp:382] ip3 -> ip3
I0428 20:14:25.281607 32672 net.cpp:124] Setting up ip3
I0428 20:14:25.281616 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.281620 32672 net.cpp:139] Memory required for data: 9470720
I0428 20:14:25.281630 32672 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:25.281635 32672 net.cpp:86] Creating Layer relu3
I0428 20:14:25.281638 32672 net.cpp:408] relu3 <- ip3
I0428 20:14:25.281643 32672 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:25.281839 32672 net.cpp:124] Setting up relu3
I0428 20:14:25.281849 32672 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:25.281853 32672 net.cpp:139] Memory required for data: 9473280
I0428 20:14:25.281857 32672 layer_factory.hpp:77] Creating layer loss
I0428 20:14:25.281864 32672 net.cpp:86] Creating Layer loss
I0428 20:14:25.281867 32672 net.cpp:408] loss <- ip3
I0428 20:14:25.281872 32672 net.cpp:408] loss <- label
I0428 20:14:25.281878 32672 net.cpp:382] loss -> loss
I0428 20:14:25.281899 32672 layer_factory.hpp:77] Creating layer loss
I0428 20:14:25.282160 32672 net.cpp:124] Setting up loss
I0428 20:14:25.282169 32672 net.cpp:131] Top shape: (1)
I0428 20:14:25.282173 32672 net.cpp:134]     with loss weight 1
I0428 20:14:25.282191 32672 net.cpp:139] Memory required for data: 9473284
I0428 20:14:25.282194 32672 net.cpp:200] loss needs backward computation.
I0428 20:14:25.282198 32672 net.cpp:200] relu3 needs backward computation.
I0428 20:14:25.282202 32672 net.cpp:200] ip3 needs backward computation.
I0428 20:14:25.282207 32672 net.cpp:200] relu2 needs backward computation.
I0428 20:14:25.282209 32672 net.cpp:200] ip2 needs backward computation.
I0428 20:14:25.282213 32672 net.cpp:200] relu1 needs backward computation.
I0428 20:14:25.282217 32672 net.cpp:200] ip1 needs backward computation.
I0428 20:14:25.282220 32672 net.cpp:200] pool1 needs backward computation.
I0428 20:14:25.282224 32672 net.cpp:200] conv1 needs backward computation.
I0428 20:14:25.282228 32672 net.cpp:200] pool0 needs backward computation.
I0428 20:14:25.282232 32672 net.cpp:200] conv0 needs backward computation.
I0428 20:14:25.282236 32672 net.cpp:202] mnist does not need backward computation.
I0428 20:14:25.282239 32672 net.cpp:244] This network produces output loss
I0428 20:14:25.282250 32672 net.cpp:257] Network initialization done.
I0428 20:14:25.282639 32672 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1221.prototxt
I0428 20:14:25.282670 32672 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:25.282783 32672 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:25.282874 32672 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:25.282924 32672 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:25.282939 32672 net.cpp:86] Creating Layer mnist
I0428 20:14:25.282944 32672 net.cpp:382] mnist -> data
I0428 20:14:25.282954 32672 net.cpp:382] mnist -> label
I0428 20:14:25.283056 32672 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:25.285223 32672 net.cpp:124] Setting up mnist
I0428 20:14:25.285245 32672 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:25.285251 32672 net.cpp:131] Top shape: 100 (100)
I0428 20:14:25.285264 32672 net.cpp:139] Memory required for data: 314000
I0428 20:14:25.285267 32672 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:25.285290 32672 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:25.285295 32672 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:25.285301 32672 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:25.285310 32672 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:25.285357 32672 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:25.285364 32672 net.cpp:131] Top shape: 100 (100)
I0428 20:14:25.285368 32672 net.cpp:131] Top shape: 100 (100)
I0428 20:14:25.285372 32672 net.cpp:139] Memory required for data: 314800
I0428 20:14:25.285377 32672 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:25.285385 32672 net.cpp:86] Creating Layer conv0
I0428 20:14:25.285389 32672 net.cpp:408] conv0 <- data
I0428 20:14:25.285395 32672 net.cpp:382] conv0 -> conv0
I0428 20:14:25.287325 32672 net.cpp:124] Setting up conv0
I0428 20:14:25.287343 32672 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:25.287346 32672 net.cpp:139] Memory required for data: 11834800
I0428 20:14:25.287358 32672 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:25.287365 32672 net.cpp:86] Creating Layer pool0
I0428 20:14:25.287370 32672 net.cpp:408] pool0 <- conv0
I0428 20:14:25.287375 32672 net.cpp:382] pool0 -> pool0
I0428 20:14:25.287417 32672 net.cpp:124] Setting up pool0
I0428 20:14:25.287423 32672 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:25.287427 32672 net.cpp:139] Memory required for data: 14714800
I0428 20:14:25.287431 32672 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:25.287441 32672 net.cpp:86] Creating Layer conv1
I0428 20:14:25.287443 32672 net.cpp:408] conv1 <- pool0
I0428 20:14:25.287449 32672 net.cpp:382] conv1 -> conv1
I0428 20:14:25.289139 32672 net.cpp:124] Setting up conv1
I0428 20:14:25.289155 32672 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:25.289158 32672 net.cpp:139] Memory required for data: 14766000
I0428 20:14:25.289170 32672 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:25.289176 32672 net.cpp:86] Creating Layer pool1
I0428 20:14:25.289181 32672 net.cpp:408] pool1 <- conv1
I0428 20:14:25.289188 32672 net.cpp:382] pool1 -> pool1
I0428 20:14:25.289232 32672 net.cpp:124] Setting up pool1
I0428 20:14:25.289249 32672 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:25.289253 32672 net.cpp:139] Memory required for data: 14778800
I0428 20:14:25.289257 32672 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:25.289263 32672 net.cpp:86] Creating Layer ip1
I0428 20:14:25.289268 32672 net.cpp:408] ip1 <- pool1
I0428 20:14:25.289273 32672 net.cpp:382] ip1 -> ip1
I0428 20:14:25.289386 32672 net.cpp:124] Setting up ip1
I0428 20:14:25.289396 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.289412 32672 net.cpp:139] Memory required for data: 14782800
I0428 20:14:25.289420 32672 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:25.289427 32672 net.cpp:86] Creating Layer relu1
I0428 20:14:25.289430 32672 net.cpp:408] relu1 <- ip1
I0428 20:14:25.289435 32672 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:25.289623 32672 net.cpp:124] Setting up relu1
I0428 20:14:25.289633 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.289638 32672 net.cpp:139] Memory required for data: 14786800
I0428 20:14:25.289641 32672 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:25.289649 32672 net.cpp:86] Creating Layer ip2
I0428 20:14:25.289654 32672 net.cpp:408] ip2 <- ip1
I0428 20:14:25.289659 32672 net.cpp:382] ip2 -> ip2
I0428 20:14:25.289772 32672 net.cpp:124] Setting up ip2
I0428 20:14:25.289779 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.289783 32672 net.cpp:139] Memory required for data: 14790800
I0428 20:14:25.289789 32672 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:25.289794 32672 net.cpp:86] Creating Layer relu2
I0428 20:14:25.289798 32672 net.cpp:408] relu2 <- ip2
I0428 20:14:25.289803 32672 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:25.290021 32672 net.cpp:124] Setting up relu2
I0428 20:14:25.290031 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.290035 32672 net.cpp:139] Memory required for data: 14794800
I0428 20:14:25.290038 32672 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:25.290045 32672 net.cpp:86] Creating Layer ip3
I0428 20:14:25.290050 32672 net.cpp:408] ip3 <- ip2
I0428 20:14:25.290055 32672 net.cpp:382] ip3 -> ip3
I0428 20:14:25.290182 32672 net.cpp:124] Setting up ip3
I0428 20:14:25.290191 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.290200 32672 net.cpp:139] Memory required for data: 14798800
I0428 20:14:25.290210 32672 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:25.290215 32672 net.cpp:86] Creating Layer relu3
I0428 20:14:25.290218 32672 net.cpp:408] relu3 <- ip3
I0428 20:14:25.290223 32672 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:25.291129 32672 net.cpp:124] Setting up relu3
I0428 20:14:25.291142 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.291146 32672 net.cpp:139] Memory required for data: 14802800
I0428 20:14:25.291151 32672 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:25.291157 32672 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:25.291160 32672 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:25.291170 32672 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:25.291178 32672 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:25.291229 32672 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:25.291235 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.291239 32672 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:25.291244 32672 net.cpp:139] Memory required for data: 14810800
I0428 20:14:25.291247 32672 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:25.291254 32672 net.cpp:86] Creating Layer accuracy
I0428 20:14:25.291259 32672 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:25.291263 32672 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:25.291270 32672 net.cpp:382] accuracy -> accuracy
I0428 20:14:25.291278 32672 net.cpp:124] Setting up accuracy
I0428 20:14:25.291282 32672 net.cpp:131] Top shape: (1)
I0428 20:14:25.291286 32672 net.cpp:139] Memory required for data: 14810804
I0428 20:14:25.291290 32672 layer_factory.hpp:77] Creating layer loss
I0428 20:14:25.291295 32672 net.cpp:86] Creating Layer loss
I0428 20:14:25.291298 32672 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:25.291302 32672 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:25.291308 32672 net.cpp:382] loss -> loss
I0428 20:14:25.291316 32672 layer_factory.hpp:77] Creating layer loss
I0428 20:14:25.291599 32672 net.cpp:124] Setting up loss
I0428 20:14:25.291609 32672 net.cpp:131] Top shape: (1)
I0428 20:14:25.291612 32672 net.cpp:134]     with loss weight 1
I0428 20:14:25.291632 32672 net.cpp:139] Memory required for data: 14810808
I0428 20:14:25.291636 32672 net.cpp:200] loss needs backward computation.
I0428 20:14:25.291641 32672 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:25.291646 32672 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:25.291649 32672 net.cpp:200] relu3 needs backward computation.
I0428 20:14:25.291653 32672 net.cpp:200] ip3 needs backward computation.
I0428 20:14:25.291664 32672 net.cpp:200] relu2 needs backward computation.
I0428 20:14:25.291667 32672 net.cpp:200] ip2 needs backward computation.
I0428 20:14:25.291671 32672 net.cpp:200] relu1 needs backward computation.
I0428 20:14:25.291674 32672 net.cpp:200] ip1 needs backward computation.
I0428 20:14:25.291678 32672 net.cpp:200] pool1 needs backward computation.
I0428 20:14:25.291682 32672 net.cpp:200] conv1 needs backward computation.
I0428 20:14:25.291685 32672 net.cpp:200] pool0 needs backward computation.
I0428 20:14:25.291689 32672 net.cpp:200] conv0 needs backward computation.
I0428 20:14:25.291693 32672 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:25.291698 32672 net.cpp:202] mnist does not need backward computation.
I0428 20:14:25.291702 32672 net.cpp:244] This network produces output accuracy
I0428 20:14:25.291707 32672 net.cpp:244] This network produces output loss
I0428 20:14:25.291720 32672 net.cpp:257] Network initialization done.
I0428 20:14:25.291769 32672 solver.cpp:56] Solver scaffolding done.
I0428 20:14:25.292201 32672 caffe.cpp:248] Starting Optimization
I0428 20:14:25.292208 32672 solver.cpp:273] Solving LeNet
I0428 20:14:25.292212 32672 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:25.293174 32672 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:25.299161 32672 blocking_queue.cpp:49] Waiting for data
I0428 20:14:25.373287 32679 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:25.374094 32672 solver.cpp:398]     Test net output #0: accuracy = 0.0948
I0428 20:14:25.374116 32672 solver.cpp:398]     Test net output #1: loss = 2.31168 (* 1 = 2.31168 loss)
I0428 20:14:25.378837 32672 solver.cpp:219] Iteration 0 (0 iter/s, 0.0865915s/100 iters), loss = 2.30118
I0428 20:14:25.378867 32672 solver.cpp:238]     Train net output #0: loss = 2.30118 (* 1 = 2.30118 loss)
I0428 20:14:25.378880 32672 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:25.501232 32672 solver.cpp:219] Iteration 100 (817.317 iter/s, 0.122352s/100 iters), loss = 1.11934
I0428 20:14:25.501262 32672 solver.cpp:238]     Train net output #0: loss = 1.11934 (* 1 = 1.11934 loss)
I0428 20:14:25.501271 32672 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:25.616876 32672 solver.cpp:219] Iteration 200 (865.064 iter/s, 0.115598s/100 iters), loss = 0.775122
I0428 20:14:25.616905 32672 solver.cpp:238]     Train net output #0: loss = 0.775122 (* 1 = 0.775122 loss)
I0428 20:14:25.616912 32672 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:25.732640 32672 solver.cpp:219] Iteration 300 (864.13 iter/s, 0.115723s/100 iters), loss = 0.456058
I0428 20:14:25.732668 32672 solver.cpp:238]     Train net output #0: loss = 0.456058 (* 1 = 0.456058 loss)
I0428 20:14:25.732676 32672 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:25.848342 32672 solver.cpp:219] Iteration 400 (864.582 iter/s, 0.115663s/100 iters), loss = 0.562791
I0428 20:14:25.848372 32672 solver.cpp:238]     Train net output #0: loss = 0.562791 (* 1 = 0.562791 loss)
I0428 20:14:25.848379 32672 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:25.962913 32672 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:26.039646 32679 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:26.040431 32672 solver.cpp:398]     Test net output #0: accuracy = 0.81
I0428 20:14:26.040451 32672 solver.cpp:398]     Test net output #1: loss = 0.525635 (* 1 = 0.525635 loss)
I0428 20:14:26.041726 32672 solver.cpp:219] Iteration 500 (517.222 iter/s, 0.193341s/100 iters), loss = 0.566395
I0428 20:14:26.041771 32672 solver.cpp:238]     Train net output #0: loss = 0.566395 (* 1 = 0.566395 loss)
I0428 20:14:26.041779 32672 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:26.172031 32672 solver.cpp:219] Iteration 600 (767.756 iter/s, 0.13025s/100 iters), loss = 0.583263
I0428 20:14:26.172072 32672 solver.cpp:238]     Train net output #0: loss = 0.583263 (* 1 = 0.583263 loss)
I0428 20:14:26.172078 32672 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:26.290284 32672 solver.cpp:219] Iteration 700 (845.897 iter/s, 0.118218s/100 iters), loss = 0.535668
I0428 20:14:26.290324 32672 solver.cpp:238]     Train net output #0: loss = 0.535668 (* 1 = 0.535668 loss)
I0428 20:14:26.290331 32672 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:26.407452 32672 solver.cpp:219] Iteration 800 (853.736 iter/s, 0.117132s/100 iters), loss = 0.524118
I0428 20:14:26.407476 32672 solver.cpp:238]     Train net output #0: loss = 0.524118 (* 1 = 0.524118 loss)
I0428 20:14:26.407482 32672 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:26.523226 32672 solver.cpp:219] Iteration 900 (864.023 iter/s, 0.115738s/100 iters), loss = 0.666507
I0428 20:14:26.523267 32672 solver.cpp:238]     Train net output #0: loss = 0.666507 (* 1 = 0.666507 loss)
I0428 20:14:26.523273 32672 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:26.562700 32678 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:26.640784 32672 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:26.641741 32672 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:26.642405 32672 solver.cpp:311] Iteration 1000, loss = 0.500751
I0428 20:14:26.642421 32672 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:26.718612 32679 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:26.719513 32672 solver.cpp:398]     Test net output #0: accuracy = 0.8226
I0428 20:14:26.719533 32672 solver.cpp:398]     Test net output #1: loss = 0.461283 (* 1 = 0.461283 loss)
I0428 20:14:26.719539 32672 solver.cpp:316] Optimization Done.
I0428 20:14:26.719542 32672 caffe.cpp:259] Optimization Done.
