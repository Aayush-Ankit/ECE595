I0428 20:33:14.742120  4265 caffe.cpp:218] Using GPUs 0
I0428 20:33:14.779693  4265 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:33:15.290130  4265 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1585.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:33:15.290273  4265 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1585.prototxt
I0428 20:33:15.290688  4265 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:33:15.290711  4265 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:33:15.290813  4265 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:33:15.290894  4265 layer_factory.hpp:77] Creating layer mnist
I0428 20:33:15.290992  4265 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:33:15.291015  4265 net.cpp:86] Creating Layer mnist
I0428 20:33:15.291024  4265 net.cpp:382] mnist -> data
I0428 20:33:15.291048  4265 net.cpp:382] mnist -> label
I0428 20:33:15.292138  4265 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:33:15.294598  4265 net.cpp:124] Setting up mnist
I0428 20:33:15.294620  4265 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:33:15.294625  4265 net.cpp:131] Top shape: 64 (64)
I0428 20:33:15.294628  4265 net.cpp:139] Memory required for data: 200960
I0428 20:33:15.294636  4265 layer_factory.hpp:77] Creating layer conv0
I0428 20:33:15.294652  4265 net.cpp:86] Creating Layer conv0
I0428 20:33:15.294672  4265 net.cpp:408] conv0 <- data
I0428 20:33:15.294684  4265 net.cpp:382] conv0 -> conv0
I0428 20:33:15.564555  4265 net.cpp:124] Setting up conv0
I0428 20:33:15.564582  4265 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:33:15.564587  4265 net.cpp:139] Memory required for data: 14946560
I0428 20:33:15.564601  4265 layer_factory.hpp:77] Creating layer pool0
I0428 20:33:15.564615  4265 net.cpp:86] Creating Layer pool0
I0428 20:33:15.564620  4265 net.cpp:408] pool0 <- conv0
I0428 20:33:15.564625  4265 net.cpp:382] pool0 -> pool0
I0428 20:33:15.564687  4265 net.cpp:124] Setting up pool0
I0428 20:33:15.564693  4265 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:33:15.564697  4265 net.cpp:139] Memory required for data: 18632960
I0428 20:33:15.564699  4265 layer_factory.hpp:77] Creating layer conv1
I0428 20:33:15.564710  4265 net.cpp:86] Creating Layer conv1
I0428 20:33:15.564715  4265 net.cpp:408] conv1 <- pool0
I0428 20:33:15.564736  4265 net.cpp:382] conv1 -> conv1
I0428 20:33:15.567096  4265 net.cpp:124] Setting up conv1
I0428 20:33:15.567126  4265 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:33:15.567129  4265 net.cpp:139] Memory required for data: 19042560
I0428 20:33:15.567138  4265 layer_factory.hpp:77] Creating layer pool1
I0428 20:33:15.567145  4265 net.cpp:86] Creating Layer pool1
I0428 20:33:15.567149  4265 net.cpp:408] pool1 <- conv1
I0428 20:33:15.567154  4265 net.cpp:382] pool1 -> pool1
I0428 20:33:15.567220  4265 net.cpp:124] Setting up pool1
I0428 20:33:15.567225  4265 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:33:15.567229  4265 net.cpp:139] Memory required for data: 19144960
I0428 20:33:15.567231  4265 layer_factory.hpp:77] Creating layer ip1
I0428 20:33:15.567239  4265 net.cpp:86] Creating Layer ip1
I0428 20:33:15.567241  4265 net.cpp:408] ip1 <- pool1
I0428 20:33:15.567245  4265 net.cpp:382] ip1 -> ip1
I0428 20:33:15.568279  4265 net.cpp:124] Setting up ip1
I0428 20:33:15.568292  4265 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:33:15.568311  4265 net.cpp:139] Memory required for data: 19151360
I0428 20:33:15.568320  4265 layer_factory.hpp:77] Creating layer relu1
I0428 20:33:15.568326  4265 net.cpp:86] Creating Layer relu1
I0428 20:33:15.568331  4265 net.cpp:408] relu1 <- ip1
I0428 20:33:15.568336  4265 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:33:15.568532  4265 net.cpp:124] Setting up relu1
I0428 20:33:15.568542  4265 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:33:15.568544  4265 net.cpp:139] Memory required for data: 19157760
I0428 20:33:15.568547  4265 layer_factory.hpp:77] Creating layer ip2
I0428 20:33:15.568554  4265 net.cpp:86] Creating Layer ip2
I0428 20:33:15.568557  4265 net.cpp:408] ip2 <- ip1
I0428 20:33:15.568562  4265 net.cpp:382] ip2 -> ip2
I0428 20:33:15.568653  4265 net.cpp:124] Setting up ip2
I0428 20:33:15.568660  4265 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:33:15.568663  4265 net.cpp:139] Memory required for data: 19164160
I0428 20:33:15.568668  4265 layer_factory.hpp:77] Creating layer relu2
I0428 20:33:15.568675  4265 net.cpp:86] Creating Layer relu2
I0428 20:33:15.568677  4265 net.cpp:408] relu2 <- ip2
I0428 20:33:15.568681  4265 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:33:15.569547  4265 net.cpp:124] Setting up relu2
I0428 20:33:15.569560  4265 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:33:15.569578  4265 net.cpp:139] Memory required for data: 19170560
I0428 20:33:15.569582  4265 layer_factory.hpp:77] Creating layer ip3
I0428 20:33:15.569588  4265 net.cpp:86] Creating Layer ip3
I0428 20:33:15.569592  4265 net.cpp:408] ip3 <- ip2
I0428 20:33:15.569597  4265 net.cpp:382] ip3 -> ip3
I0428 20:33:15.569691  4265 net.cpp:124] Setting up ip3
I0428 20:33:15.569699  4265 net.cpp:131] Top shape: 64 10 (640)
I0428 20:33:15.569701  4265 net.cpp:139] Memory required for data: 19173120
I0428 20:33:15.569710  4265 layer_factory.hpp:77] Creating layer relu3
I0428 20:33:15.569715  4265 net.cpp:86] Creating Layer relu3
I0428 20:33:15.569717  4265 net.cpp:408] relu3 <- ip3
I0428 20:33:15.569736  4265 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:33:15.569896  4265 net.cpp:124] Setting up relu3
I0428 20:33:15.569905  4265 net.cpp:131] Top shape: 64 10 (640)
I0428 20:33:15.569908  4265 net.cpp:139] Memory required for data: 19175680
I0428 20:33:15.569911  4265 layer_factory.hpp:77] Creating layer loss
I0428 20:33:15.569917  4265 net.cpp:86] Creating Layer loss
I0428 20:33:15.569921  4265 net.cpp:408] loss <- ip3
I0428 20:33:15.569924  4265 net.cpp:408] loss <- label
I0428 20:33:15.569929  4265 net.cpp:382] loss -> loss
I0428 20:33:15.569947  4265 layer_factory.hpp:77] Creating layer loss
I0428 20:33:15.570170  4265 net.cpp:124] Setting up loss
I0428 20:33:15.570179  4265 net.cpp:131] Top shape: (1)
I0428 20:33:15.570183  4265 net.cpp:134]     with loss weight 1
I0428 20:33:15.570197  4265 net.cpp:139] Memory required for data: 19175684
I0428 20:33:15.570201  4265 net.cpp:200] loss needs backward computation.
I0428 20:33:15.570205  4265 net.cpp:200] relu3 needs backward computation.
I0428 20:33:15.570209  4265 net.cpp:200] ip3 needs backward computation.
I0428 20:33:15.570211  4265 net.cpp:200] relu2 needs backward computation.
I0428 20:33:15.570214  4265 net.cpp:200] ip2 needs backward computation.
I0428 20:33:15.570216  4265 net.cpp:200] relu1 needs backward computation.
I0428 20:33:15.570219  4265 net.cpp:200] ip1 needs backward computation.
I0428 20:33:15.570222  4265 net.cpp:200] pool1 needs backward computation.
I0428 20:33:15.570225  4265 net.cpp:200] conv1 needs backward computation.
I0428 20:33:15.570230  4265 net.cpp:200] pool0 needs backward computation.
I0428 20:33:15.570232  4265 net.cpp:200] conv0 needs backward computation.
I0428 20:33:15.570235  4265 net.cpp:202] mnist does not need backward computation.
I0428 20:33:15.570252  4265 net.cpp:244] This network produces output loss
I0428 20:33:15.570261  4265 net.cpp:257] Network initialization done.
I0428 20:33:15.570639  4265 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1585.prototxt
I0428 20:33:15.570698  4265 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:33:15.570787  4265 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:33:15.570871  4265 layer_factory.hpp:77] Creating layer mnist
I0428 20:33:15.570930  4265 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:33:15.570942  4265 net.cpp:86] Creating Layer mnist
I0428 20:33:15.570947  4265 net.cpp:382] mnist -> data
I0428 20:33:15.570955  4265 net.cpp:382] mnist -> label
I0428 20:33:15.571036  4265 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:33:15.573083  4265 net.cpp:124] Setting up mnist
I0428 20:33:15.573114  4265 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:33:15.573119  4265 net.cpp:131] Top shape: 100 (100)
I0428 20:33:15.573122  4265 net.cpp:139] Memory required for data: 314000
I0428 20:33:15.573127  4265 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:33:15.573133  4265 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:33:15.573151  4265 net.cpp:408] label_mnist_1_split <- label
I0428 20:33:15.573156  4265 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:33:15.573163  4265 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:33:15.573282  4265 net.cpp:124] Setting up label_mnist_1_split
I0428 20:33:15.573292  4265 net.cpp:131] Top shape: 100 (100)
I0428 20:33:15.573295  4265 net.cpp:131] Top shape: 100 (100)
I0428 20:33:15.573298  4265 net.cpp:139] Memory required for data: 314800
I0428 20:33:15.573302  4265 layer_factory.hpp:77] Creating layer conv0
I0428 20:33:15.573309  4265 net.cpp:86] Creating Layer conv0
I0428 20:33:15.573312  4265 net.cpp:408] conv0 <- data
I0428 20:33:15.573318  4265 net.cpp:382] conv0 -> conv0
I0428 20:33:15.575021  4265 net.cpp:124] Setting up conv0
I0428 20:33:15.575036  4265 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:33:15.575038  4265 net.cpp:139] Memory required for data: 23354800
I0428 20:33:15.575047  4265 layer_factory.hpp:77] Creating layer pool0
I0428 20:33:15.575053  4265 net.cpp:86] Creating Layer pool0
I0428 20:33:15.575057  4265 net.cpp:408] pool0 <- conv0
I0428 20:33:15.575062  4265 net.cpp:382] pool0 -> pool0
I0428 20:33:15.575093  4265 net.cpp:124] Setting up pool0
I0428 20:33:15.575098  4265 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:33:15.575101  4265 net.cpp:139] Memory required for data: 29114800
I0428 20:33:15.575103  4265 layer_factory.hpp:77] Creating layer conv1
I0428 20:33:15.575111  4265 net.cpp:86] Creating Layer conv1
I0428 20:33:15.575114  4265 net.cpp:408] conv1 <- pool0
I0428 20:33:15.575119  4265 net.cpp:382] conv1 -> conv1
I0428 20:33:15.577035  4265 net.cpp:124] Setting up conv1
I0428 20:33:15.577051  4265 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:33:15.577064  4265 net.cpp:139] Memory required for data: 29754800
I0428 20:33:15.577074  4265 layer_factory.hpp:77] Creating layer pool1
I0428 20:33:15.577080  4265 net.cpp:86] Creating Layer pool1
I0428 20:33:15.577085  4265 net.cpp:408] pool1 <- conv1
I0428 20:33:15.577090  4265 net.cpp:382] pool1 -> pool1
I0428 20:33:15.577136  4265 net.cpp:124] Setting up pool1
I0428 20:33:15.577142  4265 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:33:15.577145  4265 net.cpp:139] Memory required for data: 29914800
I0428 20:33:15.577163  4265 layer_factory.hpp:77] Creating layer ip1
I0428 20:33:15.577169  4265 net.cpp:86] Creating Layer ip1
I0428 20:33:15.577172  4265 net.cpp:408] ip1 <- pool1
I0428 20:33:15.577178  4265 net.cpp:382] ip1 -> ip1
I0428 20:33:15.577343  4265 net.cpp:124] Setting up ip1
I0428 20:33:15.577363  4265 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:33:15.577365  4265 net.cpp:139] Memory required for data: 29924800
I0428 20:33:15.577373  4265 layer_factory.hpp:77] Creating layer relu1
I0428 20:33:15.577378  4265 net.cpp:86] Creating Layer relu1
I0428 20:33:15.577383  4265 net.cpp:408] relu1 <- ip1
I0428 20:33:15.577388  4265 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:33:15.577553  4265 net.cpp:124] Setting up relu1
I0428 20:33:15.577560  4265 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:33:15.577564  4265 net.cpp:139] Memory required for data: 29934800
I0428 20:33:15.577567  4265 layer_factory.hpp:77] Creating layer ip2
I0428 20:33:15.577574  4265 net.cpp:86] Creating Layer ip2
I0428 20:33:15.577577  4265 net.cpp:408] ip2 <- ip1
I0428 20:33:15.577582  4265 net.cpp:382] ip2 -> ip2
I0428 20:33:15.577674  4265 net.cpp:124] Setting up ip2
I0428 20:33:15.577682  4265 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:33:15.577685  4265 net.cpp:139] Memory required for data: 29944800
I0428 20:33:15.577690  4265 layer_factory.hpp:77] Creating layer relu2
I0428 20:33:15.577695  4265 net.cpp:86] Creating Layer relu2
I0428 20:33:15.577698  4265 net.cpp:408] relu2 <- ip2
I0428 20:33:15.577702  4265 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:33:15.577920  4265 net.cpp:124] Setting up relu2
I0428 20:33:15.577929  4265 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:33:15.577939  4265 net.cpp:139] Memory required for data: 29954800
I0428 20:33:15.577942  4265 layer_factory.hpp:77] Creating layer ip3
I0428 20:33:15.577949  4265 net.cpp:86] Creating Layer ip3
I0428 20:33:15.577951  4265 net.cpp:408] ip3 <- ip2
I0428 20:33:15.577956  4265 net.cpp:382] ip3 -> ip3
I0428 20:33:15.578109  4265 net.cpp:124] Setting up ip3
I0428 20:33:15.578117  4265 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:33:15.578121  4265 net.cpp:139] Memory required for data: 29958800
I0428 20:33:15.578130  4265 layer_factory.hpp:77] Creating layer relu3
I0428 20:33:15.578135  4265 net.cpp:86] Creating Layer relu3
I0428 20:33:15.578138  4265 net.cpp:408] relu3 <- ip3
I0428 20:33:15.578142  4265 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:33:15.578982  4265 net.cpp:124] Setting up relu3
I0428 20:33:15.578994  4265 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:33:15.578997  4265 net.cpp:139] Memory required for data: 29962800
I0428 20:33:15.579000  4265 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:33:15.579006  4265 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:33:15.579010  4265 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:33:15.579015  4265 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:33:15.579021  4265 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:33:15.579063  4265 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:33:15.579069  4265 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:33:15.579074  4265 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:33:15.579077  4265 net.cpp:139] Memory required for data: 29970800
I0428 20:33:15.579079  4265 layer_factory.hpp:77] Creating layer accuracy
I0428 20:33:15.579084  4265 net.cpp:86] Creating Layer accuracy
I0428 20:33:15.579087  4265 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:33:15.579092  4265 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:33:15.579095  4265 net.cpp:382] accuracy -> accuracy
I0428 20:33:15.579102  4265 net.cpp:124] Setting up accuracy
I0428 20:33:15.579105  4265 net.cpp:131] Top shape: (1)
I0428 20:33:15.579108  4265 net.cpp:139] Memory required for data: 29970804
I0428 20:33:15.579111  4265 layer_factory.hpp:77] Creating layer loss
I0428 20:33:15.579116  4265 net.cpp:86] Creating Layer loss
I0428 20:33:15.579119  4265 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:33:15.579123  4265 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:33:15.579126  4265 net.cpp:382] loss -> loss
I0428 20:33:15.579133  4265 layer_factory.hpp:77] Creating layer loss
I0428 20:33:15.579396  4265 net.cpp:124] Setting up loss
I0428 20:33:15.579406  4265 net.cpp:131] Top shape: (1)
I0428 20:33:15.579408  4265 net.cpp:134]     with loss weight 1
I0428 20:33:15.579422  4265 net.cpp:139] Memory required for data: 29970808
I0428 20:33:15.579427  4265 net.cpp:200] loss needs backward computation.
I0428 20:33:15.579429  4265 net.cpp:202] accuracy does not need backward computation.
I0428 20:33:15.579434  4265 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:33:15.579443  4265 net.cpp:200] relu3 needs backward computation.
I0428 20:33:15.579447  4265 net.cpp:200] ip3 needs backward computation.
I0428 20:33:15.579448  4265 net.cpp:200] relu2 needs backward computation.
I0428 20:33:15.579452  4265 net.cpp:200] ip2 needs backward computation.
I0428 20:33:15.579454  4265 net.cpp:200] relu1 needs backward computation.
I0428 20:33:15.579457  4265 net.cpp:200] ip1 needs backward computation.
I0428 20:33:15.579460  4265 net.cpp:200] pool1 needs backward computation.
I0428 20:33:15.579463  4265 net.cpp:200] conv1 needs backward computation.
I0428 20:33:15.579465  4265 net.cpp:200] pool0 needs backward computation.
I0428 20:33:15.579474  4265 net.cpp:200] conv0 needs backward computation.
I0428 20:33:15.579478  4265 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:33:15.579481  4265 net.cpp:202] mnist does not need backward computation.
I0428 20:33:15.579497  4265 net.cpp:244] This network produces output accuracy
I0428 20:33:15.579501  4265 net.cpp:244] This network produces output loss
I0428 20:33:15.579514  4265 net.cpp:257] Network initialization done.
I0428 20:33:15.579560  4265 solver.cpp:56] Solver scaffolding done.
I0428 20:33:15.579856  4265 caffe.cpp:248] Starting Optimization
I0428 20:33:15.579874  4265 solver.cpp:273] Solving LeNet
I0428 20:33:15.579879  4265 solver.cpp:274] Learning Rate Policy: inv
I0428 20:33:15.580754  4265 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:33:15.678866  4272 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:33:15.681422  4265 solver.cpp:398]     Test net output #0: accuracy = 0.0974
I0428 20:33:15.681442  4265 solver.cpp:398]     Test net output #1: loss = 2.32723 (* 1 = 2.32723 loss)
I0428 20:33:15.685935  4265 solver.cpp:219] Iteration 0 (-7.80523e-43 iter/s, 0.106006s/100 iters), loss = 2.2954
I0428 20:33:15.685959  4265 solver.cpp:238]     Train net output #0: loss = 2.2954 (* 1 = 2.2954 loss)
I0428 20:33:15.685986  4265 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:33:15.898296  4265 solver.cpp:219] Iteration 100 (471.003 iter/s, 0.212313s/100 iters), loss = 0.296933
I0428 20:33:15.898341  4265 solver.cpp:238]     Train net output #0: loss = 0.296933 (* 1 = 0.296933 loss)
I0428 20:33:15.898353  4265 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:33:16.118263  4265 solver.cpp:219] Iteration 200 (454.744 iter/s, 0.219904s/100 iters), loss = 0.179036
I0428 20:33:16.118310  4265 solver.cpp:238]     Train net output #0: loss = 0.179036 (* 1 = 0.179036 loss)
I0428 20:33:16.118324  4265 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:33:16.337160  4265 solver.cpp:219] Iteration 300 (456.963 iter/s, 0.218836s/100 iters), loss = 0.186843
I0428 20:33:16.337195  4265 solver.cpp:238]     Train net output #0: loss = 0.186843 (* 1 = 0.186843 loss)
I0428 20:33:16.337204  4265 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:33:16.550098  4265 solver.cpp:219] Iteration 400 (469.731 iter/s, 0.212888s/100 iters), loss = 0.117964
I0428 20:33:16.550134  4265 solver.cpp:238]     Train net output #0: loss = 0.117964 (* 1 = 0.117964 loss)
I0428 20:33:16.550144  4265 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:33:16.760679  4265 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:33:16.862530  4272 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:33:16.865413  4265 solver.cpp:398]     Test net output #0: accuracy = 0.9656
I0428 20:33:16.865440  4265 solver.cpp:398]     Test net output #1: loss = 0.10927 (* 1 = 0.10927 loss)
I0428 20:33:16.867455  4265 solver.cpp:219] Iteration 500 (315.156 iter/s, 0.317303s/100 iters), loss = 0.0692563
I0428 20:33:16.867483  4265 solver.cpp:238]     Train net output #0: loss = 0.0692563 (* 1 = 0.0692563 loss)
I0428 20:33:16.867509  4265 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:33:17.085064  4265 solver.cpp:219] Iteration 600 (459.641 iter/s, 0.217561s/100 iters), loss = 0.0627749
I0428 20:33:17.085125  4265 solver.cpp:238]     Train net output #0: loss = 0.0627749 (* 1 = 0.0627749 loss)
I0428 20:33:17.085139  4265 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:33:17.310263  4265 solver.cpp:219] Iteration 700 (444.205 iter/s, 0.225121s/100 iters), loss = 0.138729
I0428 20:33:17.310302  4265 solver.cpp:238]     Train net output #0: loss = 0.138729 (* 1 = 0.138729 loss)
I0428 20:33:17.310315  4265 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:33:17.527840  4265 solver.cpp:219] Iteration 800 (459.723 iter/s, 0.217522s/100 iters), loss = 0.19348
I0428 20:33:17.527875  4265 solver.cpp:238]     Train net output #0: loss = 0.19348 (* 1 = 0.19348 loss)
I0428 20:33:17.527884  4265 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:33:17.746739  4265 solver.cpp:219] Iteration 900 (456.942 iter/s, 0.218846s/100 iters), loss = 0.147293
I0428 20:33:17.746774  4265 solver.cpp:238]     Train net output #0: loss = 0.147293 (* 1 = 0.147293 loss)
I0428 20:33:17.746783  4265 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:33:17.819715  4271 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:33:17.962165  4265 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:33:17.964853  4265 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:33:17.966405  4265 solver.cpp:311] Iteration 1000, loss = 0.125825
I0428 20:33:17.966426  4265 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:33:18.065626  4272 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:33:18.068171  4265 solver.cpp:398]     Test net output #0: accuracy = 0.9759
I0428 20:33:18.068193  4265 solver.cpp:398]     Test net output #1: loss = 0.0751481 (* 1 = 0.0751481 loss)
I0428 20:33:18.068200  4265 solver.cpp:316] Optimization Done.
I0428 20:33:18.068204  4265 caffe.cpp:259] Optimization Done.
