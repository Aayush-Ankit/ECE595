I0428 19:57:07.027154 28600 caffe.cpp:218] Using GPUs 0
I0428 19:57:07.069744 28600 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:07.604185 28600 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test779.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:07.604326 28600 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test779.prototxt
I0428 19:57:07.604742 28600 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:07.604760 28600 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:07.604884 28600 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:07.604967 28600 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:07.605069 28600 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:07.605094 28600 net.cpp:86] Creating Layer mnist
I0428 19:57:07.605103 28600 net.cpp:382] mnist -> data
I0428 19:57:07.605124 28600 net.cpp:382] mnist -> label
I0428 19:57:07.606230 28600 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:07.608678 28600 net.cpp:124] Setting up mnist
I0428 19:57:07.608697 28600 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:07.608705 28600 net.cpp:131] Top shape: 64 (64)
I0428 19:57:07.608707 28600 net.cpp:139] Memory required for data: 200960
I0428 19:57:07.608714 28600 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:07.608731 28600 net.cpp:86] Creating Layer conv0
I0428 19:57:07.608750 28600 net.cpp:408] conv0 <- data
I0428 19:57:07.608763 28600 net.cpp:382] conv0 -> conv0
I0428 19:57:07.873934 28600 net.cpp:124] Setting up conv0
I0428 19:57:07.873965 28600 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:07.873970 28600 net.cpp:139] Memory required for data: 1675520
I0428 19:57:07.874004 28600 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:07.874020 28600 net.cpp:86] Creating Layer pool0
I0428 19:57:07.874027 28600 net.cpp:408] pool0 <- conv0
I0428 19:57:07.874035 28600 net.cpp:382] pool0 -> pool0
I0428 19:57:07.874089 28600 net.cpp:124] Setting up pool0
I0428 19:57:07.874099 28600 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:07.874102 28600 net.cpp:139] Memory required for data: 2044160
I0428 19:57:07.874106 28600 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:07.874120 28600 net.cpp:86] Creating Layer conv1
I0428 19:57:07.874126 28600 net.cpp:408] conv1 <- pool0
I0428 19:57:07.874133 28600 net.cpp:382] conv1 -> conv1
I0428 19:57:07.876660 28600 net.cpp:124] Setting up conv1
I0428 19:57:07.876677 28600 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:57:07.876698 28600 net.cpp:139] Memory required for data: 2076928
I0428 19:57:07.876710 28600 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:07.876723 28600 net.cpp:86] Creating Layer pool1
I0428 19:57:07.876729 28600 net.cpp:408] pool1 <- conv1
I0428 19:57:07.876735 28600 net.cpp:382] pool1 -> pool1
I0428 19:57:07.876793 28600 net.cpp:124] Setting up pool1
I0428 19:57:07.876802 28600 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:57:07.876807 28600 net.cpp:139] Memory required for data: 2085120
I0428 19:57:07.876840 28600 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:07.876850 28600 net.cpp:86] Creating Layer ip1
I0428 19:57:07.876858 28600 net.cpp:408] ip1 <- pool1
I0428 19:57:07.876881 28600 net.cpp:382] ip1 -> ip1
I0428 19:57:07.878154 28600 net.cpp:124] Setting up ip1
I0428 19:57:07.878170 28600 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:07.878177 28600 net.cpp:139] Memory required for data: 2097920
I0428 19:57:07.878190 28600 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:07.878199 28600 net.cpp:86] Creating Layer relu1
I0428 19:57:07.878206 28600 net.cpp:408] relu1 <- ip1
I0428 19:57:07.878212 28600 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:07.878445 28600 net.cpp:124] Setting up relu1
I0428 19:57:07.878456 28600 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:07.878463 28600 net.cpp:139] Memory required for data: 2110720
I0428 19:57:07.878468 28600 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:07.878494 28600 net.cpp:86] Creating Layer ip2
I0428 19:57:07.878499 28600 net.cpp:408] ip2 <- ip1
I0428 19:57:07.878507 28600 net.cpp:382] ip2 -> ip2
I0428 19:57:07.878650 28600 net.cpp:124] Setting up ip2
I0428 19:57:07.878659 28600 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:07.878664 28600 net.cpp:139] Memory required for data: 2123520
I0428 19:57:07.878672 28600 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:07.878682 28600 net.cpp:86] Creating Layer relu2
I0428 19:57:07.878689 28600 net.cpp:408] relu2 <- ip2
I0428 19:57:07.878695 28600 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:07.879779 28600 net.cpp:124] Setting up relu2
I0428 19:57:07.879796 28600 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:07.879802 28600 net.cpp:139] Memory required for data: 2136320
I0428 19:57:07.879807 28600 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:07.879832 28600 net.cpp:86] Creating Layer ip3
I0428 19:57:07.879839 28600 net.cpp:408] ip3 <- ip2
I0428 19:57:07.879848 28600 net.cpp:382] ip3 -> ip3
I0428 19:57:07.879995 28600 net.cpp:124] Setting up ip3
I0428 19:57:07.880007 28600 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:07.880012 28600 net.cpp:139] Memory required for data: 2138880
I0428 19:57:07.880024 28600 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:07.880033 28600 net.cpp:86] Creating Layer relu3
I0428 19:57:07.880039 28600 net.cpp:408] relu3 <- ip3
I0428 19:57:07.880046 28600 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:07.880271 28600 net.cpp:124] Setting up relu3
I0428 19:57:07.880282 28600 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:07.880287 28600 net.cpp:139] Memory required for data: 2141440
I0428 19:57:07.880292 28600 layer_factory.hpp:77] Creating layer loss
I0428 19:57:07.880300 28600 net.cpp:86] Creating Layer loss
I0428 19:57:07.880306 28600 net.cpp:408] loss <- ip3
I0428 19:57:07.880311 28600 net.cpp:408] loss <- label
I0428 19:57:07.880318 28600 net.cpp:382] loss -> loss
I0428 19:57:07.880338 28600 layer_factory.hpp:77] Creating layer loss
I0428 19:57:07.880642 28600 net.cpp:124] Setting up loss
I0428 19:57:07.880655 28600 net.cpp:131] Top shape: (1)
I0428 19:57:07.880661 28600 net.cpp:134]     with loss weight 1
I0428 19:57:07.880693 28600 net.cpp:139] Memory required for data: 2141444
I0428 19:57:07.880698 28600 net.cpp:200] loss needs backward computation.
I0428 19:57:07.880704 28600 net.cpp:200] relu3 needs backward computation.
I0428 19:57:07.880709 28600 net.cpp:200] ip3 needs backward computation.
I0428 19:57:07.880713 28600 net.cpp:200] relu2 needs backward computation.
I0428 19:57:07.880734 28600 net.cpp:200] ip2 needs backward computation.
I0428 19:57:07.880739 28600 net.cpp:200] relu1 needs backward computation.
I0428 19:57:07.880744 28600 net.cpp:200] ip1 needs backward computation.
I0428 19:57:07.880748 28600 net.cpp:200] pool1 needs backward computation.
I0428 19:57:07.880754 28600 net.cpp:200] conv1 needs backward computation.
I0428 19:57:07.880759 28600 net.cpp:200] pool0 needs backward computation.
I0428 19:57:07.880764 28600 net.cpp:200] conv0 needs backward computation.
I0428 19:57:07.880770 28600 net.cpp:202] mnist does not need backward computation.
I0428 19:57:07.880775 28600 net.cpp:244] This network produces output loss
I0428 19:57:07.880789 28600 net.cpp:257] Network initialization done.
I0428 19:57:07.881305 28600 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test779.prototxt
I0428 19:57:07.881345 28600 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:07.881482 28600 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:07.881603 28600 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:07.881659 28600 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:07.881674 28600 net.cpp:86] Creating Layer mnist
I0428 19:57:07.881680 28600 net.cpp:382] mnist -> data
I0428 19:57:07.881690 28600 net.cpp:382] mnist -> label
I0428 19:57:07.881822 28600 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:07.884531 28600 net.cpp:124] Setting up mnist
I0428 19:57:07.884575 28600 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:07.884583 28600 net.cpp:131] Top shape: 100 (100)
I0428 19:57:07.884588 28600 net.cpp:139] Memory required for data: 314000
I0428 19:57:07.884608 28600 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:07.884618 28600 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:07.884624 28600 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:07.884630 28600 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:07.884640 28600 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:07.884768 28600 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:07.884778 28600 net.cpp:131] Top shape: 100 (100)
I0428 19:57:07.884784 28600 net.cpp:131] Top shape: 100 (100)
I0428 19:57:07.884791 28600 net.cpp:139] Memory required for data: 314800
I0428 19:57:07.884796 28600 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:07.884809 28600 net.cpp:86] Creating Layer conv0
I0428 19:57:07.884837 28600 net.cpp:408] conv0 <- data
I0428 19:57:07.884846 28600 net.cpp:382] conv0 -> conv0
I0428 19:57:07.886893 28600 net.cpp:124] Setting up conv0
I0428 19:57:07.886924 28600 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:07.886929 28600 net.cpp:139] Memory required for data: 2618800
I0428 19:57:07.886957 28600 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:07.886967 28600 net.cpp:86] Creating Layer pool0
I0428 19:57:07.886975 28600 net.cpp:408] pool0 <- conv0
I0428 19:57:07.886982 28600 net.cpp:382] pool0 -> pool0
I0428 19:57:07.887027 28600 net.cpp:124] Setting up pool0
I0428 19:57:07.887037 28600 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:07.887042 28600 net.cpp:139] Memory required for data: 3194800
I0428 19:57:07.887048 28600 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:07.887060 28600 net.cpp:86] Creating Layer conv1
I0428 19:57:07.887066 28600 net.cpp:408] conv1 <- pool0
I0428 19:57:07.887073 28600 net.cpp:382] conv1 -> conv1
I0428 19:57:07.889760 28600 net.cpp:124] Setting up conv1
I0428 19:57:07.889776 28600 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:57:07.889782 28600 net.cpp:139] Memory required for data: 3246000
I0428 19:57:07.889809 28600 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:07.889817 28600 net.cpp:86] Creating Layer pool1
I0428 19:57:07.889823 28600 net.cpp:408] pool1 <- conv1
I0428 19:57:07.889830 28600 net.cpp:382] pool1 -> pool1
I0428 19:57:07.889930 28600 net.cpp:124] Setting up pool1
I0428 19:57:07.889941 28600 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:57:07.889947 28600 net.cpp:139] Memory required for data: 3258800
I0428 19:57:07.889952 28600 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:07.889961 28600 net.cpp:86] Creating Layer ip1
I0428 19:57:07.889966 28600 net.cpp:408] ip1 <- pool1
I0428 19:57:07.889976 28600 net.cpp:382] ip1 -> ip1
I0428 19:57:07.890116 28600 net.cpp:124] Setting up ip1
I0428 19:57:07.890130 28600 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:07.890148 28600 net.cpp:139] Memory required for data: 3278800
I0428 19:57:07.890159 28600 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:07.890166 28600 net.cpp:86] Creating Layer relu1
I0428 19:57:07.890172 28600 net.cpp:408] relu1 <- ip1
I0428 19:57:07.890177 28600 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:07.890404 28600 net.cpp:124] Setting up relu1
I0428 19:57:07.890416 28600 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:07.890422 28600 net.cpp:139] Memory required for data: 3298800
I0428 19:57:07.890427 28600 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:07.890437 28600 net.cpp:86] Creating Layer ip2
I0428 19:57:07.890442 28600 net.cpp:408] ip2 <- ip1
I0428 19:57:07.890450 28600 net.cpp:382] ip2 -> ip2
I0428 19:57:07.890592 28600 net.cpp:124] Setting up ip2
I0428 19:57:07.890602 28600 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:07.890606 28600 net.cpp:139] Memory required for data: 3318800
I0428 19:57:07.890614 28600 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:07.890621 28600 net.cpp:86] Creating Layer relu2
I0428 19:57:07.890625 28600 net.cpp:408] relu2 <- ip2
I0428 19:57:07.890632 28600 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:07.890961 28600 net.cpp:124] Setting up relu2
I0428 19:57:07.890974 28600 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:07.890995 28600 net.cpp:139] Memory required for data: 3338800
I0428 19:57:07.891000 28600 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:07.891012 28600 net.cpp:86] Creating Layer ip3
I0428 19:57:07.891017 28600 net.cpp:408] ip3 <- ip2
I0428 19:57:07.891041 28600 net.cpp:382] ip3 -> ip3
I0428 19:57:07.891171 28600 net.cpp:124] Setting up ip3
I0428 19:57:07.891181 28600 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:07.891186 28600 net.cpp:139] Memory required for data: 3342800
I0428 19:57:07.891198 28600 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:07.891206 28600 net.cpp:86] Creating Layer relu3
I0428 19:57:07.891216 28600 net.cpp:408] relu3 <- ip3
I0428 19:57:07.891245 28600 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:07.892345 28600 net.cpp:124] Setting up relu3
I0428 19:57:07.892374 28600 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:07.892379 28600 net.cpp:139] Memory required for data: 3346800
I0428 19:57:07.892385 28600 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:07.892391 28600 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:07.892396 28600 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:07.892405 28600 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:07.892413 28600 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:07.892462 28600 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:07.892469 28600 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:07.892475 28600 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:07.892480 28600 net.cpp:139] Memory required for data: 3354800
I0428 19:57:07.892496 28600 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:07.892504 28600 net.cpp:86] Creating Layer accuracy
I0428 19:57:07.892509 28600 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:07.892515 28600 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:07.892524 28600 net.cpp:382] accuracy -> accuracy
I0428 19:57:07.892532 28600 net.cpp:124] Setting up accuracy
I0428 19:57:07.892539 28600 net.cpp:131] Top shape: (1)
I0428 19:57:07.892542 28600 net.cpp:139] Memory required for data: 3354804
I0428 19:57:07.892546 28600 layer_factory.hpp:77] Creating layer loss
I0428 19:57:07.892554 28600 net.cpp:86] Creating Layer loss
I0428 19:57:07.892557 28600 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:07.892563 28600 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:07.892570 28600 net.cpp:382] loss -> loss
I0428 19:57:07.892577 28600 layer_factory.hpp:77] Creating layer loss
I0428 19:57:07.892946 28600 net.cpp:124] Setting up loss
I0428 19:57:07.892962 28600 net.cpp:131] Top shape: (1)
I0428 19:57:07.892967 28600 net.cpp:134]     with loss weight 1
I0428 19:57:07.892976 28600 net.cpp:139] Memory required for data: 3354808
I0428 19:57:07.892993 28600 net.cpp:200] loss needs backward computation.
I0428 19:57:07.892999 28600 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:07.893005 28600 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:07.893012 28600 net.cpp:200] relu3 needs backward computation.
I0428 19:57:07.893016 28600 net.cpp:200] ip3 needs backward computation.
I0428 19:57:07.893021 28600 net.cpp:200] relu2 needs backward computation.
I0428 19:57:07.893026 28600 net.cpp:200] ip2 needs backward computation.
I0428 19:57:07.893041 28600 net.cpp:200] relu1 needs backward computation.
I0428 19:57:07.893045 28600 net.cpp:200] ip1 needs backward computation.
I0428 19:57:07.893050 28600 net.cpp:200] pool1 needs backward computation.
I0428 19:57:07.893055 28600 net.cpp:200] conv1 needs backward computation.
I0428 19:57:07.893060 28600 net.cpp:200] pool0 needs backward computation.
I0428 19:57:07.893065 28600 net.cpp:200] conv0 needs backward computation.
I0428 19:57:07.893070 28600 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:07.893076 28600 net.cpp:202] mnist does not need backward computation.
I0428 19:57:07.893080 28600 net.cpp:244] This network produces output accuracy
I0428 19:57:07.893086 28600 net.cpp:244] This network produces output loss
I0428 19:57:07.893113 28600 net.cpp:257] Network initialization done.
I0428 19:57:07.893201 28600 solver.cpp:56] Solver scaffolding done.
I0428 19:57:07.893642 28600 caffe.cpp:248] Starting Optimization
I0428 19:57:07.893651 28600 solver.cpp:273] Solving LeNet
I0428 19:57:07.893656 28600 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:07.894681 28600 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:07.899515 28600 blocking_queue.cpp:49] Waiting for data
I0428 19:57:07.966295 28607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:07.966898 28600 solver.cpp:398]     Test net output #0: accuracy = 0.0872
I0428 19:57:07.966934 28600 solver.cpp:398]     Test net output #1: loss = 2.30795 (* 1 = 2.30795 loss)
I0428 19:57:07.969995 28600 solver.cpp:219] Iteration 0 (0 iter/s, 0.0763105s/100 iters), loss = 2.30035
I0428 19:57:07.970037 28600 solver.cpp:238]     Train net output #0: loss = 2.30035 (* 1 = 2.30035 loss)
I0428 19:57:07.970052 28600 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:08.055841 28600 solver.cpp:219] Iteration 100 (1165.61 iter/s, 0.0857917s/100 iters), loss = 0.889385
I0428 19:57:08.055871 28600 solver.cpp:238]     Train net output #0: loss = 0.889385 (* 1 = 0.889385 loss)
I0428 19:57:08.055879 28600 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:08.141927 28600 solver.cpp:219] Iteration 200 (1162.2 iter/s, 0.0860435s/100 iters), loss = 0.415176
I0428 19:57:08.141958 28600 solver.cpp:238]     Train net output #0: loss = 0.415176 (* 1 = 0.415176 loss)
I0428 19:57:08.141984 28600 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:08.229269 28600 solver.cpp:219] Iteration 300 (1145.45 iter/s, 0.087302s/100 iters), loss = 0.321769
I0428 19:57:08.229324 28600 solver.cpp:238]     Train net output #0: loss = 0.321769 (* 1 = 0.321769 loss)
I0428 19:57:08.229333 28600 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:08.315253 28600 solver.cpp:219] Iteration 400 (1163.89 iter/s, 0.0859187s/100 iters), loss = 0.338799
I0428 19:57:08.315296 28600 solver.cpp:238]     Train net output #0: loss = 0.338799 (* 1 = 0.338799 loss)
I0428 19:57:08.315304 28600 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:08.399492 28600 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:08.475553 28607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:08.476176 28600 solver.cpp:398]     Test net output #0: accuracy = 0.9195
I0428 19:57:08.476215 28600 solver.cpp:398]     Test net output #1: loss = 0.246898 (* 1 = 0.246898 loss)
I0428 19:57:08.477262 28600 solver.cpp:219] Iteration 500 (617.471 iter/s, 0.161951s/100 iters), loss = 0.242944
I0428 19:57:08.477305 28600 solver.cpp:238]     Train net output #0: loss = 0.242944 (* 1 = 0.242944 loss)
I0428 19:57:08.477332 28600 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:08.566371 28600 solver.cpp:219] Iteration 600 (1122.88 iter/s, 0.0890564s/100 iters), loss = 0.136206
I0428 19:57:08.566416 28600 solver.cpp:238]     Train net output #0: loss = 0.136206 (* 1 = 0.136206 loss)
I0428 19:57:08.566426 28600 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:08.653904 28600 solver.cpp:219] Iteration 700 (1143.13 iter/s, 0.0874793s/100 iters), loss = 0.277148
I0428 19:57:08.653950 28600 solver.cpp:238]     Train net output #0: loss = 0.277148 (* 1 = 0.277148 loss)
I0428 19:57:08.653959 28600 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:08.740296 28600 solver.cpp:219] Iteration 800 (1158.23 iter/s, 0.0863384s/100 iters), loss = 0.326294
I0428 19:57:08.740342 28600 solver.cpp:238]     Train net output #0: loss = 0.326294 (* 1 = 0.326294 loss)
I0428 19:57:08.740351 28600 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:08.827435 28600 solver.cpp:219] Iteration 900 (1148.34 iter/s, 0.087082s/100 iters), loss = 0.272639
I0428 19:57:08.827481 28600 solver.cpp:238]     Train net output #0: loss = 0.272639 (* 1 = 0.272639 loss)
I0428 19:57:08.827489 28600 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:08.856623 28606 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:08.916357 28600 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:08.917280 28600 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:08.917865 28600 solver.cpp:311] Iteration 1000, loss = 0.134575
I0428 19:57:08.917889 28600 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:08.992703 28607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:08.993309 28600 solver.cpp:398]     Test net output #0: accuracy = 0.9544
I0428 19:57:08.993346 28600 solver.cpp:398]     Test net output #1: loss = 0.143455 (* 1 = 0.143455 loss)
I0428 19:57:08.993355 28600 solver.cpp:316] Optimization Done.
I0428 19:57:08.993365 28600 caffe.cpp:259] Optimization Done.
