I0428 20:01:14.886492 29685 caffe.cpp:218] Using GPUs 0
I0428 20:01:14.915662 29685 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:15.359876 29685 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test898.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:15.360009 29685 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test898.prototxt
I0428 20:01:15.360303 29685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:15.360316 29685 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:15.360390 29685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:01:15.360456 29685 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:15.360533 29685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:15.360553 29685 net.cpp:86] Creating Layer mnist
I0428 20:01:15.360559 29685 net.cpp:382] mnist -> data
I0428 20:01:15.360576 29685 net.cpp:382] mnist -> label
I0428 20:01:15.361636 29685 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:15.363934 29685 net.cpp:124] Setting up mnist
I0428 20:01:15.363973 29685 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:15.363978 29685 net.cpp:131] Top shape: 64 (64)
I0428 20:01:15.363981 29685 net.cpp:139] Memory required for data: 200960
I0428 20:01:15.363986 29685 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:15.363999 29685 net.cpp:86] Creating Layer conv0
I0428 20:01:15.364003 29685 net.cpp:408] conv0 <- data
I0428 20:01:15.364012 29685 net.cpp:382] conv0 -> conv0
I0428 20:01:15.592933 29685 net.cpp:124] Setting up conv0
I0428 20:01:15.592973 29685 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:15.592978 29685 net.cpp:139] Memory required for data: 1675520
I0428 20:01:15.592993 29685 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:15.593004 29685 net.cpp:86] Creating Layer pool0
I0428 20:01:15.593008 29685 net.cpp:408] pool0 <- conv0
I0428 20:01:15.593014 29685 net.cpp:382] pool0 -> pool0
I0428 20:01:15.593075 29685 net.cpp:124] Setting up pool0
I0428 20:01:15.593080 29685 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:15.593097 29685 net.cpp:139] Memory required for data: 2044160
I0428 20:01:15.593101 29685 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:15.593111 29685 net.cpp:86] Creating Layer conv1
I0428 20:01:15.593114 29685 net.cpp:408] conv1 <- pool0
I0428 20:01:15.593119 29685 net.cpp:382] conv1 -> conv1
I0428 20:01:15.595978 29685 net.cpp:124] Setting up conv1
I0428 20:01:15.596009 29685 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:15.596011 29685 net.cpp:139] Memory required for data: 2863360
I0428 20:01:15.596020 29685 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:15.596027 29685 net.cpp:86] Creating Layer pool1
I0428 20:01:15.596031 29685 net.cpp:408] pool1 <- conv1
I0428 20:01:15.596036 29685 net.cpp:382] pool1 -> pool1
I0428 20:01:15.596089 29685 net.cpp:124] Setting up pool1
I0428 20:01:15.596094 29685 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:15.596097 29685 net.cpp:139] Memory required for data: 3068160
I0428 20:01:15.596101 29685 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:15.596108 29685 net.cpp:86] Creating Layer ip1
I0428 20:01:15.596112 29685 net.cpp:408] ip1 <- pool1
I0428 20:01:15.596117 29685 net.cpp:382] ip1 -> ip1
I0428 20:01:15.596258 29685 net.cpp:124] Setting up ip1
I0428 20:01:15.596266 29685 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:15.596269 29685 net.cpp:139] Memory required for data: 3070720
I0428 20:01:15.596276 29685 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:15.596297 29685 net.cpp:86] Creating Layer relu1
I0428 20:01:15.596300 29685 net.cpp:408] relu1 <- ip1
I0428 20:01:15.596304 29685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:15.596472 29685 net.cpp:124] Setting up relu1
I0428 20:01:15.596480 29685 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:15.596483 29685 net.cpp:139] Memory required for data: 3073280
I0428 20:01:15.596487 29685 layer_factory.hpp:77] Creating layer loss
I0428 20:01:15.596491 29685 net.cpp:86] Creating Layer loss
I0428 20:01:15.596494 29685 net.cpp:408] loss <- ip1
I0428 20:01:15.596498 29685 net.cpp:408] loss <- label
I0428 20:01:15.596503 29685 net.cpp:382] loss -> loss
I0428 20:01:15.596520 29685 layer_factory.hpp:77] Creating layer loss
I0428 20:01:15.597443 29685 net.cpp:124] Setting up loss
I0428 20:01:15.597455 29685 net.cpp:131] Top shape: (1)
I0428 20:01:15.597474 29685 net.cpp:134]     with loss weight 1
I0428 20:01:15.597487 29685 net.cpp:139] Memory required for data: 3073284
I0428 20:01:15.597491 29685 net.cpp:200] loss needs backward computation.
I0428 20:01:15.597494 29685 net.cpp:200] relu1 needs backward computation.
I0428 20:01:15.597497 29685 net.cpp:200] ip1 needs backward computation.
I0428 20:01:15.597501 29685 net.cpp:200] pool1 needs backward computation.
I0428 20:01:15.597503 29685 net.cpp:200] conv1 needs backward computation.
I0428 20:01:15.597506 29685 net.cpp:200] pool0 needs backward computation.
I0428 20:01:15.597508 29685 net.cpp:200] conv0 needs backward computation.
I0428 20:01:15.597512 29685 net.cpp:202] mnist does not need backward computation.
I0428 20:01:15.597514 29685 net.cpp:244] This network produces output loss
I0428 20:01:15.597522 29685 net.cpp:257] Network initialization done.
I0428 20:01:15.597767 29685 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test898.prototxt
I0428 20:01:15.597790 29685 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:15.597892 29685 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:01:15.597960 29685 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:15.598003 29685 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:15.598016 29685 net.cpp:86] Creating Layer mnist
I0428 20:01:15.598021 29685 net.cpp:382] mnist -> data
I0428 20:01:15.598027 29685 net.cpp:382] mnist -> label
I0428 20:01:15.598104 29685 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:15.600337 29685 net.cpp:124] Setting up mnist
I0428 20:01:15.600383 29685 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:15.600389 29685 net.cpp:131] Top shape: 100 (100)
I0428 20:01:15.600391 29685 net.cpp:139] Memory required for data: 314000
I0428 20:01:15.600395 29685 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:15.600441 29685 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:15.600445 29685 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:15.600451 29685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:15.600472 29685 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:15.600576 29685 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:15.600584 29685 net.cpp:131] Top shape: 100 (100)
I0428 20:01:15.600589 29685 net.cpp:131] Top shape: 100 (100)
I0428 20:01:15.600590 29685 net.cpp:139] Memory required for data: 314800
I0428 20:01:15.600594 29685 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:15.600602 29685 net.cpp:86] Creating Layer conv0
I0428 20:01:15.600605 29685 net.cpp:408] conv0 <- data
I0428 20:01:15.600610 29685 net.cpp:382] conv0 -> conv0
I0428 20:01:15.601495 29685 net.cpp:124] Setting up conv0
I0428 20:01:15.601506 29685 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:15.601526 29685 net.cpp:139] Memory required for data: 2618800
I0428 20:01:15.601534 29685 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:15.601541 29685 net.cpp:86] Creating Layer pool0
I0428 20:01:15.601543 29685 net.cpp:408] pool0 <- conv0
I0428 20:01:15.601548 29685 net.cpp:382] pool0 -> pool0
I0428 20:01:15.601595 29685 net.cpp:124] Setting up pool0
I0428 20:01:15.601601 29685 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:15.601604 29685 net.cpp:139] Memory required for data: 3194800
I0428 20:01:15.601608 29685 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:15.601630 29685 net.cpp:86] Creating Layer conv1
I0428 20:01:15.601634 29685 net.cpp:408] conv1 <- pool0
I0428 20:01:15.601639 29685 net.cpp:382] conv1 -> conv1
I0428 20:01:15.603351 29685 net.cpp:124] Setting up conv1
I0428 20:01:15.603364 29685 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:15.603384 29685 net.cpp:139] Memory required for data: 4474800
I0428 20:01:15.603410 29685 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:15.603416 29685 net.cpp:86] Creating Layer pool1
I0428 20:01:15.603431 29685 net.cpp:408] pool1 <- conv1
I0428 20:01:15.603437 29685 net.cpp:382] pool1 -> pool1
I0428 20:01:15.603477 29685 net.cpp:124] Setting up pool1
I0428 20:01:15.603483 29685 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:15.603487 29685 net.cpp:139] Memory required for data: 4794800
I0428 20:01:15.603490 29685 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:15.603497 29685 net.cpp:86] Creating Layer ip1
I0428 20:01:15.603500 29685 net.cpp:408] ip1 <- pool1
I0428 20:01:15.603507 29685 net.cpp:382] ip1 -> ip1
I0428 20:01:15.603667 29685 net.cpp:124] Setting up ip1
I0428 20:01:15.603675 29685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:15.603678 29685 net.cpp:139] Memory required for data: 4798800
I0428 20:01:15.603687 29685 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:15.603691 29685 net.cpp:86] Creating Layer relu1
I0428 20:01:15.603695 29685 net.cpp:408] relu1 <- ip1
I0428 20:01:15.603700 29685 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:15.604562 29685 net.cpp:124] Setting up relu1
I0428 20:01:15.604575 29685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:15.604595 29685 net.cpp:139] Memory required for data: 4802800
I0428 20:01:15.604598 29685 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:01:15.604606 29685 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:01:15.604611 29685 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:01:15.604616 29685 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:01:15.604638 29685 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:01:15.604673 29685 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:01:15.604679 29685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:15.604683 29685 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:15.604692 29685 net.cpp:139] Memory required for data: 4810800
I0428 20:01:15.604696 29685 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:15.604701 29685 net.cpp:86] Creating Layer accuracy
I0428 20:01:15.604704 29685 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:01:15.604714 29685 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:15.604723 29685 net.cpp:382] accuracy -> accuracy
I0428 20:01:15.604730 29685 net.cpp:124] Setting up accuracy
I0428 20:01:15.604734 29685 net.cpp:131] Top shape: (1)
I0428 20:01:15.604737 29685 net.cpp:139] Memory required for data: 4810804
I0428 20:01:15.604740 29685 layer_factory.hpp:77] Creating layer loss
I0428 20:01:15.604744 29685 net.cpp:86] Creating Layer loss
I0428 20:01:15.604748 29685 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:01:15.604751 29685 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:15.604756 29685 net.cpp:382] loss -> loss
I0428 20:01:15.604763 29685 layer_factory.hpp:77] Creating layer loss
I0428 20:01:15.605024 29685 net.cpp:124] Setting up loss
I0428 20:01:15.605034 29685 net.cpp:131] Top shape: (1)
I0428 20:01:15.605038 29685 net.cpp:134]     with loss weight 1
I0428 20:01:15.605046 29685 net.cpp:139] Memory required for data: 4810808
I0428 20:01:15.605049 29685 net.cpp:200] loss needs backward computation.
I0428 20:01:15.605053 29685 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:15.605057 29685 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:01:15.605060 29685 net.cpp:200] relu1 needs backward computation.
I0428 20:01:15.605063 29685 net.cpp:200] ip1 needs backward computation.
I0428 20:01:15.605067 29685 net.cpp:200] pool1 needs backward computation.
I0428 20:01:15.605070 29685 net.cpp:200] conv1 needs backward computation.
I0428 20:01:15.605073 29685 net.cpp:200] pool0 needs backward computation.
I0428 20:01:15.605077 29685 net.cpp:200] conv0 needs backward computation.
I0428 20:01:15.605082 29685 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:15.605085 29685 net.cpp:202] mnist does not need backward computation.
I0428 20:01:15.605103 29685 net.cpp:244] This network produces output accuracy
I0428 20:01:15.605108 29685 net.cpp:244] This network produces output loss
I0428 20:01:15.605128 29685 net.cpp:257] Network initialization done.
I0428 20:01:15.605162 29685 solver.cpp:56] Solver scaffolding done.
I0428 20:01:15.605401 29685 caffe.cpp:248] Starting Optimization
I0428 20:01:15.605408 29685 solver.cpp:273] Solving LeNet
I0428 20:01:15.605412 29685 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:15.605514 29685 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:15.609650 29685 blocking_queue.cpp:49] Waiting for data
I0428 20:01:15.681730 29692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:15.682202 29685 solver.cpp:398]     Test net output #0: accuracy = 0.1128
I0428 20:01:15.682220 29685 solver.cpp:398]     Test net output #1: loss = 2.30838 (* 1 = 2.30838 loss)
I0428 20:01:15.685223 29685 solver.cpp:219] Iteration 0 (0 iter/s, 0.0797891s/100 iters), loss = 2.29293
I0428 20:01:15.685262 29685 solver.cpp:238]     Train net output #0: loss = 2.29293 (* 1 = 2.29293 loss)
I0428 20:01:15.685274 29685 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:15.791625 29685 solver.cpp:219] Iteration 100 (940.123 iter/s, 0.106369s/100 iters), loss = 0.87998
I0428 20:01:15.791666 29685 solver.cpp:238]     Train net output #0: loss = 0.87998 (* 1 = 0.87998 loss)
I0428 20:01:15.791687 29685 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:15.885327 29685 solver.cpp:219] Iteration 200 (1067.61 iter/s, 0.0936673s/100 iters), loss = 0.610108
I0428 20:01:15.885354 29685 solver.cpp:238]     Train net output #0: loss = 0.610108 (* 1 = 0.610108 loss)
I0428 20:01:15.885375 29685 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:15.978891 29685 solver.cpp:219] Iteration 300 (1069.2 iter/s, 0.0935282s/100 iters), loss = 0.203155
I0428 20:01:15.978916 29685 solver.cpp:238]     Train net output #0: loss = 0.203155 (* 1 = 0.203155 loss)
I0428 20:01:15.978938 29685 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:16.071638 29685 solver.cpp:219] Iteration 400 (1078.61 iter/s, 0.0927119s/100 iters), loss = 0.0983099
I0428 20:01:16.071663 29685 solver.cpp:238]     Train net output #0: loss = 0.0983099 (* 1 = 0.0983099 loss)
I0428 20:01:16.071669 29685 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:16.160933 29685 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:16.237455 29692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:16.237931 29685 solver.cpp:398]     Test net output #0: accuracy = 0.9661
I0428 20:01:16.237951 29685 solver.cpp:398]     Test net output #1: loss = 0.114841 (* 1 = 0.114841 loss)
I0428 20:01:16.238941 29685 solver.cpp:219] Iteration 500 (597.853 iter/s, 0.167265s/100 iters), loss = 0.17102
I0428 20:01:16.238965 29685 solver.cpp:238]     Train net output #0: loss = 0.17102 (* 1 = 0.17102 loss)
I0428 20:01:16.238971 29685 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:16.343586 29685 solver.cpp:219] Iteration 600 (955.925 iter/s, 0.104611s/100 iters), loss = 0.085312
I0428 20:01:16.343612 29685 solver.cpp:238]     Train net output #0: loss = 0.085312 (* 1 = 0.085312 loss)
I0428 20:01:16.343618 29685 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:16.438966 29685 solver.cpp:219] Iteration 700 (1048.82 iter/s, 0.095345s/100 iters), loss = 0.118431
I0428 20:01:16.438993 29685 solver.cpp:238]     Train net output #0: loss = 0.118431 (* 1 = 0.118431 loss)
I0428 20:01:16.439000 29685 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:16.530264 29685 solver.cpp:219] Iteration 800 (1095.75 iter/s, 0.091262s/100 iters), loss = 0.185715
I0428 20:01:16.530306 29685 solver.cpp:238]     Train net output #0: loss = 0.185715 (* 1 = 0.185715 loss)
I0428 20:01:16.530313 29685 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:16.621134 29685 solver.cpp:219] Iteration 900 (1101.13 iter/s, 0.0908157s/100 iters), loss = 0.207053
I0428 20:01:16.621176 29685 solver.cpp:238]     Train net output #0: loss = 0.207053 (* 1 = 0.207053 loss)
I0428 20:01:16.621181 29685 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:16.651612 29691 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:16.713281 29685 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:16.714238 29685 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:16.714875 29685 solver.cpp:311] Iteration 1000, loss = 0.130194
I0428 20:01:16.714891 29685 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:16.790387 29692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:16.790853 29685 solver.cpp:398]     Test net output #0: accuracy = 0.9739
I0428 20:01:16.790874 29685 solver.cpp:398]     Test net output #1: loss = 0.0840985 (* 1 = 0.0840985 loss)
I0428 20:01:16.790879 29685 solver.cpp:316] Optimization Done.
I0428 20:01:16.790882 29685 caffe.cpp:259] Optimization Done.
