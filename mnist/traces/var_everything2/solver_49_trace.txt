I0428 19:29:08.570371 21937 caffe.cpp:218] Using GPUs 0
I0428 19:29:08.604794 21937 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:29:09.074213 21937 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test49.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:29:09.074362 21937 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test49.prototxt
I0428 19:29:09.074647 21937 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:29:09.074661 21937 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:29:09.074724 21937 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:09.074784 21937 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:09.074882 21937 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:29:09.074900 21937 net.cpp:86] Creating Layer mnist
I0428 19:29:09.074908 21937 net.cpp:382] mnist -> data
I0428 19:29:09.074926 21937 net.cpp:382] mnist -> label
I0428 19:29:09.075850 21937 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:29:09.078142 21937 net.cpp:124] Setting up mnist
I0428 19:29:09.078172 21937 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:29:09.078178 21937 net.cpp:131] Top shape: 64 (64)
I0428 19:29:09.078183 21937 net.cpp:139] Memory required for data: 200960
I0428 19:29:09.078189 21937 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:09.078202 21937 net.cpp:86] Creating Layer conv0
I0428 19:29:09.078207 21937 net.cpp:408] conv0 <- data
I0428 19:29:09.078217 21937 net.cpp:382] conv0 -> conv0
I0428 19:29:09.318615 21937 net.cpp:124] Setting up conv0
I0428 19:29:09.318658 21937 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:29:09.318662 21937 net.cpp:139] Memory required for data: 495872
I0428 19:29:09.318677 21937 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:09.318691 21937 net.cpp:86] Creating Layer pool0
I0428 19:29:09.318694 21937 net.cpp:408] pool0 <- conv0
I0428 19:29:09.318701 21937 net.cpp:382] pool0 -> pool0
I0428 19:29:09.318759 21937 net.cpp:124] Setting up pool0
I0428 19:29:09.318766 21937 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:29:09.318769 21937 net.cpp:139] Memory required for data: 569600
I0428 19:29:09.318789 21937 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:09.318797 21937 net.cpp:86] Creating Layer ip1
I0428 19:29:09.318800 21937 net.cpp:408] ip1 <- pool0
I0428 19:29:09.318805 21937 net.cpp:382] ip1 -> ip1
I0428 19:29:09.319808 21937 net.cpp:124] Setting up ip1
I0428 19:29:09.319820 21937 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:29:09.319840 21937 net.cpp:139] Memory required for data: 582400
I0428 19:29:09.319847 21937 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:09.319854 21937 net.cpp:86] Creating Layer relu1
I0428 19:29:09.319874 21937 net.cpp:408] relu1 <- ip1
I0428 19:29:09.319878 21937 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:09.320097 21937 net.cpp:124] Setting up relu1
I0428 19:29:09.320106 21937 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:29:09.320109 21937 net.cpp:139] Memory required for data: 595200
I0428 19:29:09.320113 21937 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:09.320121 21937 net.cpp:86] Creating Layer ip2
I0428 19:29:09.320124 21937 net.cpp:408] ip2 <- ip1
I0428 19:29:09.320129 21937 net.cpp:382] ip2 -> ip2
I0428 19:29:09.320231 21937 net.cpp:124] Setting up ip2
I0428 19:29:09.320238 21937 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:09.320242 21937 net.cpp:139] Memory required for data: 597760
I0428 19:29:09.320250 21937 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:09.320258 21937 net.cpp:86] Creating Layer relu2
I0428 19:29:09.320262 21937 net.cpp:408] relu2 <- ip2
I0428 19:29:09.320281 21937 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:09.321200 21937 net.cpp:124] Setting up relu2
I0428 19:29:09.321213 21937 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:09.321218 21937 net.cpp:139] Memory required for data: 600320
I0428 19:29:09.321220 21937 layer_factory.hpp:77] Creating layer loss
I0428 19:29:09.321228 21937 net.cpp:86] Creating Layer loss
I0428 19:29:09.321230 21937 net.cpp:408] loss <- ip2
I0428 19:29:09.321235 21937 net.cpp:408] loss <- label
I0428 19:29:09.321240 21937 net.cpp:382] loss -> loss
I0428 19:29:09.321259 21937 layer_factory.hpp:77] Creating layer loss
I0428 19:29:09.321491 21937 net.cpp:124] Setting up loss
I0428 19:29:09.321501 21937 net.cpp:131] Top shape: (1)
I0428 19:29:09.321503 21937 net.cpp:134]     with loss weight 1
I0428 19:29:09.321517 21937 net.cpp:139] Memory required for data: 600324
I0428 19:29:09.321521 21937 net.cpp:200] loss needs backward computation.
I0428 19:29:09.321524 21937 net.cpp:200] relu2 needs backward computation.
I0428 19:29:09.321527 21937 net.cpp:200] ip2 needs backward computation.
I0428 19:29:09.321530 21937 net.cpp:200] relu1 needs backward computation.
I0428 19:29:09.321532 21937 net.cpp:200] ip1 needs backward computation.
I0428 19:29:09.321535 21937 net.cpp:200] pool0 needs backward computation.
I0428 19:29:09.321538 21937 net.cpp:200] conv0 needs backward computation.
I0428 19:29:09.321542 21937 net.cpp:202] mnist does not need backward computation.
I0428 19:29:09.321544 21937 net.cpp:244] This network produces output loss
I0428 19:29:09.321552 21937 net.cpp:257] Network initialization done.
I0428 19:29:09.321801 21937 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test49.prototxt
I0428 19:29:09.321825 21937 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:29:09.321892 21937 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:09.321990 21937 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:09.322033 21937 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:29:09.322046 21937 net.cpp:86] Creating Layer mnist
I0428 19:29:09.322062 21937 net.cpp:382] mnist -> data
I0428 19:29:09.322069 21937 net.cpp:382] mnist -> label
I0428 19:29:09.322154 21937 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:29:09.324448 21937 net.cpp:124] Setting up mnist
I0428 19:29:09.324478 21937 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:29:09.324483 21937 net.cpp:131] Top shape: 100 (100)
I0428 19:29:09.324487 21937 net.cpp:139] Memory required for data: 314000
I0428 19:29:09.324491 21937 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:29:09.324517 21937 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:29:09.324523 21937 net.cpp:408] label_mnist_1_split <- label
I0428 19:29:09.324528 21937 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:29:09.324534 21937 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:29:09.324575 21937 net.cpp:124] Setting up label_mnist_1_split
I0428 19:29:09.324581 21937 net.cpp:131] Top shape: 100 (100)
I0428 19:29:09.324585 21937 net.cpp:131] Top shape: 100 (100)
I0428 19:29:09.324589 21937 net.cpp:139] Memory required for data: 314800
I0428 19:29:09.324591 21937 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:09.324599 21937 net.cpp:86] Creating Layer conv0
I0428 19:29:09.324618 21937 net.cpp:408] conv0 <- data
I0428 19:29:09.324630 21937 net.cpp:382] conv0 -> conv0
I0428 19:29:09.326432 21937 net.cpp:124] Setting up conv0
I0428 19:29:09.326447 21937 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:29:09.326450 21937 net.cpp:139] Memory required for data: 775600
I0428 19:29:09.326458 21937 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:09.326465 21937 net.cpp:86] Creating Layer pool0
I0428 19:29:09.326468 21937 net.cpp:408] pool0 <- conv0
I0428 19:29:09.326473 21937 net.cpp:382] pool0 -> pool0
I0428 19:29:09.326506 21937 net.cpp:124] Setting up pool0
I0428 19:29:09.326514 21937 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:29:09.326516 21937 net.cpp:139] Memory required for data: 890800
I0428 19:29:09.326519 21937 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:09.326524 21937 net.cpp:86] Creating Layer ip1
I0428 19:29:09.326527 21937 net.cpp:408] ip1 <- pool0
I0428 19:29:09.326532 21937 net.cpp:382] ip1 -> ip1
I0428 19:29:09.326714 21937 net.cpp:124] Setting up ip1
I0428 19:29:09.326721 21937 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:29:09.326725 21937 net.cpp:139] Memory required for data: 910800
I0428 19:29:09.326730 21937 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:09.326735 21937 net.cpp:86] Creating Layer relu1
I0428 19:29:09.326738 21937 net.cpp:408] relu1 <- ip1
I0428 19:29:09.326742 21937 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:09.326961 21937 net.cpp:124] Setting up relu1
I0428 19:29:09.326970 21937 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:29:09.326973 21937 net.cpp:139] Memory required for data: 930800
I0428 19:29:09.326988 21937 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:09.326994 21937 net.cpp:86] Creating Layer ip2
I0428 19:29:09.326997 21937 net.cpp:408] ip2 <- ip1
I0428 19:29:09.327003 21937 net.cpp:382] ip2 -> ip2
I0428 19:29:09.327210 21937 net.cpp:124] Setting up ip2
I0428 19:29:09.327219 21937 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:09.327236 21937 net.cpp:139] Memory required for data: 934800
I0428 19:29:09.327244 21937 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:09.327250 21937 net.cpp:86] Creating Layer relu2
I0428 19:29:09.327252 21937 net.cpp:408] relu2 <- ip2
I0428 19:29:09.327256 21937 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:09.327481 21937 net.cpp:124] Setting up relu2
I0428 19:29:09.327489 21937 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:09.327492 21937 net.cpp:139] Memory required for data: 938800
I0428 19:29:09.327497 21937 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:29:09.327502 21937 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:29:09.327505 21937 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:29:09.327510 21937 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:29:09.327517 21937 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:29:09.327549 21937 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:29:09.327555 21937 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:09.327560 21937 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:09.327563 21937 net.cpp:139] Memory required for data: 946800
I0428 19:29:09.327565 21937 layer_factory.hpp:77] Creating layer accuracy
I0428 19:29:09.327570 21937 net.cpp:86] Creating Layer accuracy
I0428 19:29:09.327574 21937 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:29:09.327577 21937 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:29:09.327581 21937 net.cpp:382] accuracy -> accuracy
I0428 19:29:09.327589 21937 net.cpp:124] Setting up accuracy
I0428 19:29:09.327595 21937 net.cpp:131] Top shape: (1)
I0428 19:29:09.327599 21937 net.cpp:139] Memory required for data: 946804
I0428 19:29:09.327601 21937 layer_factory.hpp:77] Creating layer loss
I0428 19:29:09.327611 21937 net.cpp:86] Creating Layer loss
I0428 19:29:09.327615 21937 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:29:09.327618 21937 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:29:09.327622 21937 net.cpp:382] loss -> loss
I0428 19:29:09.327628 21937 layer_factory.hpp:77] Creating layer loss
I0428 19:29:09.328670 21937 net.cpp:124] Setting up loss
I0428 19:29:09.328681 21937 net.cpp:131] Top shape: (1)
I0428 19:29:09.328685 21937 net.cpp:134]     with loss weight 1
I0428 19:29:09.328691 21937 net.cpp:139] Memory required for data: 946808
I0428 19:29:09.328694 21937 net.cpp:200] loss needs backward computation.
I0428 19:29:09.328698 21937 net.cpp:202] accuracy does not need backward computation.
I0428 19:29:09.328702 21937 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:29:09.328706 21937 net.cpp:200] relu2 needs backward computation.
I0428 19:29:09.328707 21937 net.cpp:200] ip2 needs backward computation.
I0428 19:29:09.328711 21937 net.cpp:200] relu1 needs backward computation.
I0428 19:29:09.328714 21937 net.cpp:200] ip1 needs backward computation.
I0428 19:29:09.328717 21937 net.cpp:200] pool0 needs backward computation.
I0428 19:29:09.328721 21937 net.cpp:200] conv0 needs backward computation.
I0428 19:29:09.328723 21937 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:29:09.328727 21937 net.cpp:202] mnist does not need backward computation.
I0428 19:29:09.328730 21937 net.cpp:244] This network produces output accuracy
I0428 19:29:09.328750 21937 net.cpp:244] This network produces output loss
I0428 19:29:09.328759 21937 net.cpp:257] Network initialization done.
I0428 19:29:09.328793 21937 solver.cpp:56] Solver scaffolding done.
I0428 19:29:09.329036 21937 caffe.cpp:248] Starting Optimization
I0428 19:29:09.329043 21937 solver.cpp:273] Solving LeNet
I0428 19:29:09.329046 21937 solver.cpp:274] Learning Rate Policy: inv
I0428 19:29:09.329851 21937 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:29:09.331507 21937 blocking_queue.cpp:49] Waiting for data
I0428 19:29:09.393123 21944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:09.393534 21937 solver.cpp:398]     Test net output #0: accuracy = 0.1133
I0428 19:29:09.393554 21937 solver.cpp:398]     Test net output #1: loss = 2.307 (* 1 = 2.307 loss)
I0428 19:29:09.395710 21937 solver.cpp:219] Iteration 0 (0 iter/s, 0.0666144s/100 iters), loss = 2.33112
I0428 19:29:09.395735 21937 solver.cpp:238]     Train net output #0: loss = 2.33112 (* 1 = 2.33112 loss)
I0428 19:29:09.395763 21937 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:29:09.450531 21937 solver.cpp:219] Iteration 100 (1825.19 iter/s, 0.0547887s/100 iters), loss = 0.62916
I0428 19:29:09.450561 21937 solver.cpp:238]     Train net output #0: loss = 0.62916 (* 1 = 0.62916 loss)
I0428 19:29:09.450567 21937 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:29:09.498739 21937 solver.cpp:219] Iteration 200 (2075.85 iter/s, 0.0481731s/100 iters), loss = 0.29892
I0428 19:29:09.498764 21937 solver.cpp:238]     Train net output #0: loss = 0.29892 (* 1 = 0.29892 loss)
I0428 19:29:09.498786 21937 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:29:09.550848 21937 solver.cpp:219] Iteration 300 (1920.23 iter/s, 0.0520771s/100 iters), loss = 0.279652
I0428 19:29:09.550896 21937 solver.cpp:238]     Train net output #0: loss = 0.279652 (* 1 = 0.279652 loss)
I0428 19:29:09.550904 21937 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:29:09.605090 21937 solver.cpp:219] Iteration 400 (1845.38 iter/s, 0.0541895s/100 iters), loss = 0.144125
I0428 19:29:09.605114 21937 solver.cpp:238]     Train net output #0: loss = 0.144125 (* 1 = 0.144125 loss)
I0428 19:29:09.605140 21937 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:29:09.655112 21937 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:29:09.717417 21944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:09.717803 21937 solver.cpp:398]     Test net output #0: accuracy = 0.9308
I0428 19:29:09.717821 21937 solver.cpp:398]     Test net output #1: loss = 0.2265 (* 1 = 0.2265 loss)
I0428 19:29:09.718430 21937 solver.cpp:219] Iteration 500 (882.577 iter/s, 0.113305s/100 iters), loss = 0.378296
I0428 19:29:09.718451 21937 solver.cpp:238]     Train net output #0: loss = 0.378296 (* 1 = 0.378296 loss)
I0428 19:29:09.718457 21937 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:29:09.773641 21937 solver.cpp:219] Iteration 600 (1812.14 iter/s, 0.0551833s/100 iters), loss = 0.169314
I0428 19:29:09.773681 21937 solver.cpp:238]     Train net output #0: loss = 0.169314 (* 1 = 0.169314 loss)
I0428 19:29:09.773687 21937 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:29:09.822022 21937 solver.cpp:219] Iteration 700 (2068.24 iter/s, 0.0483502s/100 iters), loss = 0.395916
I0428 19:29:09.822087 21937 solver.cpp:238]     Train net output #0: loss = 0.395916 (* 1 = 0.395916 loss)
I0428 19:29:09.822093 21937 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:29:09.873806 21937 solver.cpp:219] Iteration 800 (1933.69 iter/s, 0.0517146s/100 iters), loss = 0.299191
I0428 19:29:09.873852 21937 solver.cpp:238]     Train net output #0: loss = 0.299191 (* 1 = 0.299191 loss)
I0428 19:29:09.873859 21937 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:29:09.923701 21937 solver.cpp:219] Iteration 900 (2006.3 iter/s, 0.0498429s/100 iters), loss = 0.303638
I0428 19:29:09.923722 21937 solver.cpp:238]     Train net output #0: loss = 0.303638 (* 1 = 0.303638 loss)
I0428 19:29:09.923727 21937 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:29:09.940532 21943 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:09.973217 21937 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:29:09.974048 21937 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:29:09.974658 21937 solver.cpp:311] Iteration 1000, loss = 0.188224
I0428 19:29:09.974679 21937 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:29:10.049262 21944 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:10.049667 21937 solver.cpp:398]     Test net output #0: accuracy = 0.9502
I0428 19:29:10.049687 21937 solver.cpp:398]     Test net output #1: loss = 0.163675 (* 1 = 0.163675 loss)
I0428 19:29:10.049693 21937 solver.cpp:316] Optimization Done.
I0428 19:29:10.049697 21937 caffe.cpp:259] Optimization Done.
