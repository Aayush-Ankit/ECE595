I0428 20:05:14.046522 30567 caffe.cpp:218] Using GPUs 0
I0428 20:05:14.083609 30567 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:14.543970 30567 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test994.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:14.544137 30567 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test994.prototxt
I0428 20:05:14.544504 30567 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:14.544534 30567 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:14.544617 30567 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:14.544683 30567 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:14.544765 30567 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:14.544785 30567 net.cpp:86] Creating Layer mnist
I0428 20:05:14.544790 30567 net.cpp:382] mnist -> data
I0428 20:05:14.544813 30567 net.cpp:382] mnist -> label
I0428 20:05:14.545909 30567 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:14.548159 30567 net.cpp:124] Setting up mnist
I0428 20:05:14.548189 30567 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:14.548194 30567 net.cpp:131] Top shape: 64 (64)
I0428 20:05:14.548197 30567 net.cpp:139] Memory required for data: 200960
I0428 20:05:14.548202 30567 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:14.548225 30567 net.cpp:86] Creating Layer conv0
I0428 20:05:14.548243 30567 net.cpp:408] conv0 <- data
I0428 20:05:14.548254 30567 net.cpp:382] conv0 -> conv0
I0428 20:05:14.780009 30567 net.cpp:124] Setting up conv0
I0428 20:05:14.780036 30567 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:14.780040 30567 net.cpp:139] Memory required for data: 3887360
I0428 20:05:14.780055 30567 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:14.780066 30567 net.cpp:86] Creating Layer pool0
I0428 20:05:14.780069 30567 net.cpp:408] pool0 <- conv0
I0428 20:05:14.780074 30567 net.cpp:382] pool0 -> pool0
I0428 20:05:14.780133 30567 net.cpp:124] Setting up pool0
I0428 20:05:14.780138 30567 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:14.780140 30567 net.cpp:139] Memory required for data: 4808960
I0428 20:05:14.780143 30567 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:14.780153 30567 net.cpp:86] Creating Layer conv1
I0428 20:05:14.780156 30567 net.cpp:408] conv1 <- pool0
I0428 20:05:14.780161 30567 net.cpp:382] conv1 -> conv1
I0428 20:05:14.782968 30567 net.cpp:124] Setting up conv1
I0428 20:05:14.782982 30567 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:14.782985 30567 net.cpp:139] Memory required for data: 4841728
I0428 20:05:14.782994 30567 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:14.783001 30567 net.cpp:86] Creating Layer pool1
I0428 20:05:14.783005 30567 net.cpp:408] pool1 <- conv1
I0428 20:05:14.783025 30567 net.cpp:382] pool1 -> pool1
I0428 20:05:14.783076 30567 net.cpp:124] Setting up pool1
I0428 20:05:14.783080 30567 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:14.783083 30567 net.cpp:139] Memory required for data: 4849920
I0428 20:05:14.783087 30567 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:14.783093 30567 net.cpp:86] Creating Layer ip1
I0428 20:05:14.783097 30567 net.cpp:408] ip1 <- pool1
I0428 20:05:14.783102 30567 net.cpp:382] ip1 -> ip1
I0428 20:05:14.783187 30567 net.cpp:124] Setting up ip1
I0428 20:05:14.783195 30567 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:14.783198 30567 net.cpp:139] Memory required for data: 4852480
I0428 20:05:14.783205 30567 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:14.783210 30567 net.cpp:86] Creating Layer relu1
I0428 20:05:14.783213 30567 net.cpp:408] relu1 <- ip1
I0428 20:05:14.783217 30567 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:14.783385 30567 net.cpp:124] Setting up relu1
I0428 20:05:14.783394 30567 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:14.783397 30567 net.cpp:139] Memory required for data: 4855040
I0428 20:05:14.783401 30567 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:14.783406 30567 net.cpp:86] Creating Layer ip2
I0428 20:05:14.783409 30567 net.cpp:408] ip2 <- ip1
I0428 20:05:14.783414 30567 net.cpp:382] ip2 -> ip2
I0428 20:05:14.783502 30567 net.cpp:124] Setting up ip2
I0428 20:05:14.783509 30567 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:14.783512 30567 net.cpp:139] Memory required for data: 4867840
I0428 20:05:14.783516 30567 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:14.783522 30567 net.cpp:86] Creating Layer relu2
I0428 20:05:14.783525 30567 net.cpp:408] relu2 <- ip2
I0428 20:05:14.783529 30567 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:14.784276 30567 net.cpp:124] Setting up relu2
I0428 20:05:14.784288 30567 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:14.784307 30567 net.cpp:139] Memory required for data: 4880640
I0428 20:05:14.784309 30567 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:14.784317 30567 net.cpp:86] Creating Layer ip3
I0428 20:05:14.784319 30567 net.cpp:408] ip3 <- ip2
I0428 20:05:14.784324 30567 net.cpp:382] ip3 -> ip3
I0428 20:05:14.784431 30567 net.cpp:124] Setting up ip3
I0428 20:05:14.784438 30567 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:14.784441 30567 net.cpp:139] Memory required for data: 4883200
I0428 20:05:14.784448 30567 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:14.784453 30567 net.cpp:86] Creating Layer relu3
I0428 20:05:14.784456 30567 net.cpp:408] relu3 <- ip3
I0428 20:05:14.784461 30567 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:14.784615 30567 net.cpp:124] Setting up relu3
I0428 20:05:14.784623 30567 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:14.784626 30567 net.cpp:139] Memory required for data: 4885760
I0428 20:05:14.784629 30567 layer_factory.hpp:77] Creating layer loss
I0428 20:05:14.784634 30567 net.cpp:86] Creating Layer loss
I0428 20:05:14.784637 30567 net.cpp:408] loss <- ip3
I0428 20:05:14.784641 30567 net.cpp:408] loss <- label
I0428 20:05:14.784646 30567 net.cpp:382] loss -> loss
I0428 20:05:14.784677 30567 layer_factory.hpp:77] Creating layer loss
I0428 20:05:14.784952 30567 net.cpp:124] Setting up loss
I0428 20:05:14.784962 30567 net.cpp:131] Top shape: (1)
I0428 20:05:14.784966 30567 net.cpp:134]     with loss weight 1
I0428 20:05:14.784981 30567 net.cpp:139] Memory required for data: 4885764
I0428 20:05:14.784986 30567 net.cpp:200] loss needs backward computation.
I0428 20:05:14.784989 30567 net.cpp:200] relu3 needs backward computation.
I0428 20:05:14.784992 30567 net.cpp:200] ip3 needs backward computation.
I0428 20:05:14.784996 30567 net.cpp:200] relu2 needs backward computation.
I0428 20:05:14.784998 30567 net.cpp:200] ip2 needs backward computation.
I0428 20:05:14.785001 30567 net.cpp:200] relu1 needs backward computation.
I0428 20:05:14.785004 30567 net.cpp:200] ip1 needs backward computation.
I0428 20:05:14.785007 30567 net.cpp:200] pool1 needs backward computation.
I0428 20:05:14.785010 30567 net.cpp:200] conv1 needs backward computation.
I0428 20:05:14.785013 30567 net.cpp:200] pool0 needs backward computation.
I0428 20:05:14.785017 30567 net.cpp:200] conv0 needs backward computation.
I0428 20:05:14.785020 30567 net.cpp:202] mnist does not need backward computation.
I0428 20:05:14.785023 30567 net.cpp:244] This network produces output loss
I0428 20:05:14.785033 30567 net.cpp:257] Network initialization done.
I0428 20:05:14.785423 30567 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test994.prototxt
I0428 20:05:14.785464 30567 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:14.785552 30567 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:14.785629 30567 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:14.785687 30567 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:14.785701 30567 net.cpp:86] Creating Layer mnist
I0428 20:05:14.785704 30567 net.cpp:382] mnist -> data
I0428 20:05:14.785727 30567 net.cpp:382] mnist -> label
I0428 20:05:14.785804 30567 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:14.787793 30567 net.cpp:124] Setting up mnist
I0428 20:05:14.787806 30567 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:14.787811 30567 net.cpp:131] Top shape: 100 (100)
I0428 20:05:14.787814 30567 net.cpp:139] Memory required for data: 314000
I0428 20:05:14.787818 30567 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:14.787824 30567 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:14.787827 30567 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:14.787832 30567 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:14.787838 30567 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:14.787881 30567 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:14.787886 30567 net.cpp:131] Top shape: 100 (100)
I0428 20:05:14.787890 30567 net.cpp:131] Top shape: 100 (100)
I0428 20:05:14.787892 30567 net.cpp:139] Memory required for data: 314800
I0428 20:05:14.787895 30567 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:14.787902 30567 net.cpp:86] Creating Layer conv0
I0428 20:05:14.787905 30567 net.cpp:408] conv0 <- data
I0428 20:05:14.787910 30567 net.cpp:382] conv0 -> conv0
I0428 20:05:14.789561 30567 net.cpp:124] Setting up conv0
I0428 20:05:14.789589 30567 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:14.789593 30567 net.cpp:139] Memory required for data: 6074800
I0428 20:05:14.789602 30567 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:14.789608 30567 net.cpp:86] Creating Layer pool0
I0428 20:05:14.789626 30567 net.cpp:408] pool0 <- conv0
I0428 20:05:14.789630 30567 net.cpp:382] pool0 -> pool0
I0428 20:05:14.789664 30567 net.cpp:124] Setting up pool0
I0428 20:05:14.789669 30567 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:14.789672 30567 net.cpp:139] Memory required for data: 7514800
I0428 20:05:14.789675 30567 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:14.789682 30567 net.cpp:86] Creating Layer conv1
I0428 20:05:14.789685 30567 net.cpp:408] conv1 <- pool0
I0428 20:05:14.789690 30567 net.cpp:382] conv1 -> conv1
I0428 20:05:14.791746 30567 net.cpp:124] Setting up conv1
I0428 20:05:14.791774 30567 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:14.791779 30567 net.cpp:139] Memory required for data: 7566000
I0428 20:05:14.791811 30567 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:14.791817 30567 net.cpp:86] Creating Layer pool1
I0428 20:05:14.791821 30567 net.cpp:408] pool1 <- conv1
I0428 20:05:14.791838 30567 net.cpp:382] pool1 -> pool1
I0428 20:05:14.791921 30567 net.cpp:124] Setting up pool1
I0428 20:05:14.791929 30567 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:14.791932 30567 net.cpp:139] Memory required for data: 7578800
I0428 20:05:14.791939 30567 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:14.791947 30567 net.cpp:86] Creating Layer ip1
I0428 20:05:14.791950 30567 net.cpp:408] ip1 <- pool1
I0428 20:05:14.791970 30567 net.cpp:382] ip1 -> ip1
I0428 20:05:14.792063 30567 net.cpp:124] Setting up ip1
I0428 20:05:14.792070 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.792083 30567 net.cpp:139] Memory required for data: 7582800
I0428 20:05:14.792089 30567 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:14.792100 30567 net.cpp:86] Creating Layer relu1
I0428 20:05:14.792104 30567 net.cpp:408] relu1 <- ip1
I0428 20:05:14.792107 30567 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:14.792284 30567 net.cpp:124] Setting up relu1
I0428 20:05:14.792294 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.792296 30567 net.cpp:139] Memory required for data: 7586800
I0428 20:05:14.792300 30567 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:14.792313 30567 net.cpp:86] Creating Layer ip2
I0428 20:05:14.792316 30567 net.cpp:408] ip2 <- ip1
I0428 20:05:14.792322 30567 net.cpp:382] ip2 -> ip2
I0428 20:05:14.792421 30567 net.cpp:124] Setting up ip2
I0428 20:05:14.792429 30567 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:14.792431 30567 net.cpp:139] Memory required for data: 7606800
I0428 20:05:14.792436 30567 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:14.792441 30567 net.cpp:86] Creating Layer relu2
I0428 20:05:14.792444 30567 net.cpp:408] relu2 <- ip2
I0428 20:05:14.792449 30567 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:14.792614 30567 net.cpp:124] Setting up relu2
I0428 20:05:14.792623 30567 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:14.792626 30567 net.cpp:139] Memory required for data: 7626800
I0428 20:05:14.792629 30567 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:14.792635 30567 net.cpp:86] Creating Layer ip3
I0428 20:05:14.792637 30567 net.cpp:408] ip3 <- ip2
I0428 20:05:14.792642 30567 net.cpp:382] ip3 -> ip3
I0428 20:05:14.792763 30567 net.cpp:124] Setting up ip3
I0428 20:05:14.792770 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.792788 30567 net.cpp:139] Memory required for data: 7630800
I0428 20:05:14.792795 30567 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:14.792805 30567 net.cpp:86] Creating Layer relu3
I0428 20:05:14.792815 30567 net.cpp:408] relu3 <- ip3
I0428 20:05:14.792836 30567 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:14.793753 30567 net.cpp:124] Setting up relu3
I0428 20:05:14.793767 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.793771 30567 net.cpp:139] Memory required for data: 7634800
I0428 20:05:14.793774 30567 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:14.793781 30567 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:14.793784 30567 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:14.793789 30567 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:14.793797 30567 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:14.793855 30567 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:14.793861 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.793865 30567 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:14.793867 30567 net.cpp:139] Memory required for data: 7642800
I0428 20:05:14.793870 30567 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:14.793885 30567 net.cpp:86] Creating Layer accuracy
I0428 20:05:14.793889 30567 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:14.793892 30567 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:14.793898 30567 net.cpp:382] accuracy -> accuracy
I0428 20:05:14.793905 30567 net.cpp:124] Setting up accuracy
I0428 20:05:14.793908 30567 net.cpp:131] Top shape: (1)
I0428 20:05:14.793911 30567 net.cpp:139] Memory required for data: 7642804
I0428 20:05:14.793915 30567 layer_factory.hpp:77] Creating layer loss
I0428 20:05:14.793920 30567 net.cpp:86] Creating Layer loss
I0428 20:05:14.793922 30567 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:14.793926 30567 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:14.793952 30567 net.cpp:382] loss -> loss
I0428 20:05:14.793958 30567 layer_factory.hpp:77] Creating layer loss
I0428 20:05:14.794191 30567 net.cpp:124] Setting up loss
I0428 20:05:14.794199 30567 net.cpp:131] Top shape: (1)
I0428 20:05:14.794203 30567 net.cpp:134]     with loss weight 1
I0428 20:05:14.794209 30567 net.cpp:139] Memory required for data: 7642808
I0428 20:05:14.794226 30567 net.cpp:200] loss needs backward computation.
I0428 20:05:14.794235 30567 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:14.794239 30567 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:14.794241 30567 net.cpp:200] relu3 needs backward computation.
I0428 20:05:14.794245 30567 net.cpp:200] ip3 needs backward computation.
I0428 20:05:14.794246 30567 net.cpp:200] relu2 needs backward computation.
I0428 20:05:14.794250 30567 net.cpp:200] ip2 needs backward computation.
I0428 20:05:14.794257 30567 net.cpp:200] relu1 needs backward computation.
I0428 20:05:14.794260 30567 net.cpp:200] ip1 needs backward computation.
I0428 20:05:14.794262 30567 net.cpp:200] pool1 needs backward computation.
I0428 20:05:14.794271 30567 net.cpp:200] conv1 needs backward computation.
I0428 20:05:14.794279 30567 net.cpp:200] pool0 needs backward computation.
I0428 20:05:14.794282 30567 net.cpp:200] conv0 needs backward computation.
I0428 20:05:14.794286 30567 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:14.794294 30567 net.cpp:202] mnist does not need backward computation.
I0428 20:05:14.794296 30567 net.cpp:244] This network produces output accuracy
I0428 20:05:14.794299 30567 net.cpp:244] This network produces output loss
I0428 20:05:14.794311 30567 net.cpp:257] Network initialization done.
I0428 20:05:14.794350 30567 solver.cpp:56] Solver scaffolding done.
I0428 20:05:14.794678 30567 caffe.cpp:248] Starting Optimization
I0428 20:05:14.794684 30567 solver.cpp:273] Solving LeNet
I0428 20:05:14.794687 30567 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:14.795557 30567 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:14.801035 30567 blocking_queue.cpp:49] Waiting for data
I0428 20:05:14.872817 30574 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:14.873478 30567 solver.cpp:398]     Test net output #0: accuracy = 0.1033
I0428 20:05:14.873513 30567 solver.cpp:398]     Test net output #1: loss = 2.30349 (* 1 = 2.30349 loss)
I0428 20:05:14.876674 30567 solver.cpp:219] Iteration 0 (-1.30209e-31 iter/s, 0.081961s/100 iters), loss = 2.30426
I0428 20:05:14.876713 30567 solver.cpp:238]     Train net output #0: loss = 2.30426 (* 1 = 2.30426 loss)
I0428 20:05:14.876724 30567 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:14.975651 30567 solver.cpp:219] Iteration 100 (1010.72 iter/s, 0.0989389s/100 iters), loss = 0.521274
I0428 20:05:14.975675 30567 solver.cpp:238]     Train net output #0: loss = 0.521274 (* 1 = 0.521274 loss)
I0428 20:05:14.975682 30567 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:15.067282 30567 solver.cpp:219] Iteration 200 (1091.74 iter/s, 0.0915968s/100 iters), loss = 0.36729
I0428 20:05:15.067306 30567 solver.cpp:238]     Train net output #0: loss = 0.36729 (* 1 = 0.36729 loss)
I0428 20:05:15.067311 30567 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:15.154141 30567 solver.cpp:219] Iteration 300 (1151.72 iter/s, 0.086827s/100 iters), loss = 0.230423
I0428 20:05:15.154165 30567 solver.cpp:238]     Train net output #0: loss = 0.230423 (* 1 = 0.230423 loss)
I0428 20:05:15.154170 30567 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:15.243165 30567 solver.cpp:219] Iteration 400 (1123.73 iter/s, 0.0889897s/100 iters), loss = 0.285561
I0428 20:05:15.243188 30567 solver.cpp:238]     Train net output #0: loss = 0.285561 (* 1 = 0.285561 loss)
I0428 20:05:15.243193 30567 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:15.330814 30567 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:15.407413 30574 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:15.408010 30567 solver.cpp:398]     Test net output #0: accuracy = 0.9306
I0428 20:05:15.408043 30567 solver.cpp:398]     Test net output #1: loss = 0.22376 (* 1 = 0.22376 loss)
I0428 20:05:15.408963 30567 solver.cpp:219] Iteration 500 (603.275 iter/s, 0.165762s/100 iters), loss = 0.447762
I0428 20:05:15.409004 30567 solver.cpp:238]     Train net output #0: loss = 0.447762 (* 1 = 0.447762 loss)
I0428 20:05:15.409011 30567 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:15.506047 30567 solver.cpp:219] Iteration 600 (1030.57 iter/s, 0.0970332s/100 iters), loss = 0.114184
I0428 20:05:15.506072 30567 solver.cpp:238]     Train net output #0: loss = 0.114184 (* 1 = 0.114184 loss)
I0428 20:05:15.506078 30567 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:15.601971 30567 solver.cpp:219] Iteration 700 (1042.88 iter/s, 0.0958884s/100 iters), loss = 0.22637
I0428 20:05:15.601996 30567 solver.cpp:238]     Train net output #0: loss = 0.22637 (* 1 = 0.22637 loss)
I0428 20:05:15.602002 30567 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:15.697019 30567 solver.cpp:219] Iteration 800 (1052.48 iter/s, 0.0950137s/100 iters), loss = 0.379882
I0428 20:05:15.697072 30567 solver.cpp:238]     Train net output #0: loss = 0.379882 (* 1 = 0.379882 loss)
I0428 20:05:15.697077 30567 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:15.793757 30567 solver.cpp:219] Iteration 900 (1034.21 iter/s, 0.0966921s/100 iters), loss = 0.300902
I0428 20:05:15.793781 30567 solver.cpp:238]     Train net output #0: loss = 0.300902 (* 1 = 0.300902 loss)
I0428 20:05:15.793787 30567 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:15.824455 30573 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:15.884207 30567 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:15.885025 30567 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:15.885599 30567 solver.cpp:311] Iteration 1000, loss = 0.118516
I0428 20:05:15.885614 30567 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:15.962301 30574 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:15.962904 30567 solver.cpp:398]     Test net output #0: accuracy = 0.9379
I0428 20:05:15.962939 30567 solver.cpp:398]     Test net output #1: loss = 0.207833 (* 1 = 0.207833 loss)
I0428 20:05:15.962947 30567 solver.cpp:316] Optimization Done.
I0428 20:05:15.962950 30567 caffe.cpp:259] Optimization Done.
