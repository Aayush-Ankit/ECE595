I0428 19:36:03.946482 23635 caffe.cpp:218] Using GPUs 0
I0428 19:36:03.983397 23635 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:36:04.439002 23635 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test237.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:36:04.439144 23635 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test237.prototxt
I0428 19:36:04.439406 23635 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:36:04.439424 23635 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:36:04.439489 23635 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:04.439582 23635 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:04.439692 23635 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:36:04.439719 23635 net.cpp:86] Creating Layer mnist
I0428 19:36:04.439729 23635 net.cpp:382] mnist -> data
I0428 19:36:04.439754 23635 net.cpp:382] mnist -> label
I0428 19:36:04.440845 23635 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:36:04.442991 23635 net.cpp:124] Setting up mnist
I0428 19:36:04.443008 23635 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:36:04.443017 23635 net.cpp:131] Top shape: 64 (64)
I0428 19:36:04.443022 23635 net.cpp:139] Memory required for data: 200960
I0428 19:36:04.443030 23635 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:04.443051 23635 net.cpp:86] Creating Layer conv0
I0428 19:36:04.443060 23635 net.cpp:408] conv0 <- data
I0428 19:36:04.443078 23635 net.cpp:382] conv0 -> conv0
I0428 19:36:04.678637 23635 net.cpp:124] Setting up conv0
I0428 19:36:04.678666 23635 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:36:04.678671 23635 net.cpp:139] Memory required for data: 14946560
I0428 19:36:04.678721 23635 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:04.678738 23635 net.cpp:86] Creating Layer pool0
I0428 19:36:04.678745 23635 net.cpp:408] pool0 <- conv0
I0428 19:36:04.678753 23635 net.cpp:382] pool0 -> pool0
I0428 19:36:04.678814 23635 net.cpp:124] Setting up pool0
I0428 19:36:04.678823 23635 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:36:04.678828 23635 net.cpp:139] Memory required for data: 18632960
I0428 19:36:04.678853 23635 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:04.678864 23635 net.cpp:86] Creating Layer ip1
I0428 19:36:04.678871 23635 net.cpp:408] ip1 <- pool0
I0428 19:36:04.678879 23635 net.cpp:382] ip1 -> ip1
I0428 19:36:04.680629 23635 net.cpp:124] Setting up ip1
I0428 19:36:04.680644 23635 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:04.680649 23635 net.cpp:139] Memory required for data: 18635520
I0428 19:36:04.680661 23635 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:04.680672 23635 net.cpp:86] Creating Layer relu1
I0428 19:36:04.680678 23635 net.cpp:408] relu1 <- ip1
I0428 19:36:04.680685 23635 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:04.680867 23635 net.cpp:124] Setting up relu1
I0428 19:36:04.680878 23635 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:04.680883 23635 net.cpp:139] Memory required for data: 18638080
I0428 19:36:04.680889 23635 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:04.680899 23635 net.cpp:86] Creating Layer ip2
I0428 19:36:04.680904 23635 net.cpp:408] ip2 <- ip1
I0428 19:36:04.680913 23635 net.cpp:382] ip2 -> ip2
I0428 19:36:04.681011 23635 net.cpp:124] Setting up ip2
I0428 19:36:04.681020 23635 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:04.681025 23635 net.cpp:139] Memory required for data: 18640640
I0428 19:36:04.681037 23635 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:04.681048 23635 net.cpp:86] Creating Layer relu2
I0428 19:36:04.681053 23635 net.cpp:408] relu2 <- ip2
I0428 19:36:04.681061 23635 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:04.681818 23635 net.cpp:124] Setting up relu2
I0428 19:36:04.681835 23635 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:04.681841 23635 net.cpp:139] Memory required for data: 18643200
I0428 19:36:04.681848 23635 layer_factory.hpp:77] Creating layer loss
I0428 19:36:04.681857 23635 net.cpp:86] Creating Layer loss
I0428 19:36:04.681864 23635 net.cpp:408] loss <- ip2
I0428 19:36:04.681871 23635 net.cpp:408] loss <- label
I0428 19:36:04.681880 23635 net.cpp:382] loss -> loss
I0428 19:36:04.681901 23635 layer_factory.hpp:77] Creating layer loss
I0428 19:36:04.682152 23635 net.cpp:124] Setting up loss
I0428 19:36:04.682163 23635 net.cpp:131] Top shape: (1)
I0428 19:36:04.682168 23635 net.cpp:134]     with loss weight 1
I0428 19:36:04.682188 23635 net.cpp:139] Memory required for data: 18643204
I0428 19:36:04.682195 23635 net.cpp:200] loss needs backward computation.
I0428 19:36:04.682201 23635 net.cpp:200] relu2 needs backward computation.
I0428 19:36:04.682206 23635 net.cpp:200] ip2 needs backward computation.
I0428 19:36:04.682211 23635 net.cpp:200] relu1 needs backward computation.
I0428 19:36:04.682215 23635 net.cpp:200] ip1 needs backward computation.
I0428 19:36:04.682221 23635 net.cpp:200] pool0 needs backward computation.
I0428 19:36:04.682226 23635 net.cpp:200] conv0 needs backward computation.
I0428 19:36:04.682232 23635 net.cpp:202] mnist does not need backward computation.
I0428 19:36:04.682236 23635 net.cpp:244] This network produces output loss
I0428 19:36:04.682248 23635 net.cpp:257] Network initialization done.
I0428 19:36:04.682492 23635 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test237.prototxt
I0428 19:36:04.682521 23635 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:36:04.682600 23635 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:04.682695 23635 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:04.682770 23635 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:36:04.682787 23635 net.cpp:86] Creating Layer mnist
I0428 19:36:04.682796 23635 net.cpp:382] mnist -> data
I0428 19:36:04.682807 23635 net.cpp:382] mnist -> label
I0428 19:36:04.682922 23635 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:36:04.684290 23635 net.cpp:124] Setting up mnist
I0428 19:36:04.684320 23635 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:36:04.684329 23635 net.cpp:131] Top shape: 100 (100)
I0428 19:36:04.684348 23635 net.cpp:139] Memory required for data: 314000
I0428 19:36:04.684353 23635 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:36:04.684363 23635 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:36:04.684368 23635 net.cpp:408] label_mnist_1_split <- label
I0428 19:36:04.684376 23635 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:36:04.684386 23635 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:36:04.684471 23635 net.cpp:124] Setting up label_mnist_1_split
I0428 19:36:04.684480 23635 net.cpp:131] Top shape: 100 (100)
I0428 19:36:04.684486 23635 net.cpp:131] Top shape: 100 (100)
I0428 19:36:04.684490 23635 net.cpp:139] Memory required for data: 314800
I0428 19:36:04.684495 23635 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:04.684509 23635 net.cpp:86] Creating Layer conv0
I0428 19:36:04.684514 23635 net.cpp:408] conv0 <- data
I0428 19:36:04.684523 23635 net.cpp:382] conv0 -> conv0
I0428 19:36:04.686161 23635 net.cpp:124] Setting up conv0
I0428 19:36:04.686177 23635 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:36:04.686183 23635 net.cpp:139] Memory required for data: 23354800
I0428 19:36:04.686197 23635 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:04.686208 23635 net.cpp:86] Creating Layer pool0
I0428 19:36:04.686213 23635 net.cpp:408] pool0 <- conv0
I0428 19:36:04.686221 23635 net.cpp:382] pool0 -> pool0
I0428 19:36:04.686264 23635 net.cpp:124] Setting up pool0
I0428 19:36:04.686273 23635 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:36:04.686293 23635 net.cpp:139] Memory required for data: 29114800
I0428 19:36:04.686298 23635 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:04.686308 23635 net.cpp:86] Creating Layer ip1
I0428 19:36:04.686313 23635 net.cpp:408] ip1 <- pool0
I0428 19:36:04.686321 23635 net.cpp:382] ip1 -> ip1
I0428 19:36:04.688186 23635 net.cpp:124] Setting up ip1
I0428 19:36:04.688201 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.688207 23635 net.cpp:139] Memory required for data: 29118800
I0428 19:36:04.688221 23635 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:04.688230 23635 net.cpp:86] Creating Layer relu1
I0428 19:36:04.688236 23635 net.cpp:408] relu1 <- ip1
I0428 19:36:04.688244 23635 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:04.688529 23635 net.cpp:124] Setting up relu1
I0428 19:36:04.688539 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.688561 23635 net.cpp:139] Memory required for data: 29122800
I0428 19:36:04.688568 23635 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:04.688577 23635 net.cpp:86] Creating Layer ip2
I0428 19:36:04.688585 23635 net.cpp:408] ip2 <- ip1
I0428 19:36:04.688593 23635 net.cpp:382] ip2 -> ip2
I0428 19:36:04.688707 23635 net.cpp:124] Setting up ip2
I0428 19:36:04.688715 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.688720 23635 net.cpp:139] Memory required for data: 29126800
I0428 19:36:04.688732 23635 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:04.688740 23635 net.cpp:86] Creating Layer relu2
I0428 19:36:04.688745 23635 net.cpp:408] relu2 <- ip2
I0428 19:36:04.688751 23635 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:04.688946 23635 net.cpp:124] Setting up relu2
I0428 19:36:04.688957 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.688963 23635 net.cpp:139] Memory required for data: 29130800
I0428 19:36:04.688969 23635 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:36:04.688978 23635 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:36:04.688984 23635 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:36:04.688992 23635 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:36:04.689002 23635 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:36:04.689044 23635 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:36:04.689052 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.689060 23635 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:04.689065 23635 net.cpp:139] Memory required for data: 29138800
I0428 19:36:04.689090 23635 layer_factory.hpp:77] Creating layer accuracy
I0428 19:36:04.689098 23635 net.cpp:86] Creating Layer accuracy
I0428 19:36:04.689105 23635 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:36:04.689111 23635 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:36:04.689121 23635 net.cpp:382] accuracy -> accuracy
I0428 19:36:04.689146 23635 net.cpp:124] Setting up accuracy
I0428 19:36:04.689154 23635 net.cpp:131] Top shape: (1)
I0428 19:36:04.689159 23635 net.cpp:139] Memory required for data: 29138804
I0428 19:36:04.689164 23635 layer_factory.hpp:77] Creating layer loss
I0428 19:36:04.689173 23635 net.cpp:86] Creating Layer loss
I0428 19:36:04.689178 23635 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:36:04.689185 23635 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:36:04.689193 23635 net.cpp:382] loss -> loss
I0428 19:36:04.689203 23635 layer_factory.hpp:77] Creating layer loss
I0428 19:36:04.690181 23635 net.cpp:124] Setting up loss
I0428 19:36:04.690193 23635 net.cpp:131] Top shape: (1)
I0428 19:36:04.690199 23635 net.cpp:134]     with loss weight 1
I0428 19:36:04.690209 23635 net.cpp:139] Memory required for data: 29138808
I0428 19:36:04.690215 23635 net.cpp:200] loss needs backward computation.
I0428 19:36:04.690222 23635 net.cpp:202] accuracy does not need backward computation.
I0428 19:36:04.690228 23635 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:36:04.690234 23635 net.cpp:200] relu2 needs backward computation.
I0428 19:36:04.690240 23635 net.cpp:200] ip2 needs backward computation.
I0428 19:36:04.690253 23635 net.cpp:200] relu1 needs backward computation.
I0428 19:36:04.690259 23635 net.cpp:200] ip1 needs backward computation.
I0428 19:36:04.690265 23635 net.cpp:200] pool0 needs backward computation.
I0428 19:36:04.690270 23635 net.cpp:200] conv0 needs backward computation.
I0428 19:36:04.690276 23635 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:36:04.690282 23635 net.cpp:202] mnist does not need backward computation.
I0428 19:36:04.690287 23635 net.cpp:244] This network produces output accuracy
I0428 19:36:04.690294 23635 net.cpp:244] This network produces output loss
I0428 19:36:04.690309 23635 net.cpp:257] Network initialization done.
I0428 19:36:04.690363 23635 solver.cpp:56] Solver scaffolding done.
I0428 19:36:04.690606 23635 caffe.cpp:248] Starting Optimization
I0428 19:36:04.690623 23635 solver.cpp:273] Solving LeNet
I0428 19:36:04.690641 23635 solver.cpp:274] Learning Rate Policy: inv
I0428 19:36:04.691457 23635 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:36:04.848333 23642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:04.852753 23635 solver.cpp:398]     Test net output #0: accuracy = 0.1194
I0428 19:36:04.852792 23635 solver.cpp:398]     Test net output #1: loss = 2.30961 (* 1 = 2.30961 loss)
I0428 19:36:04.857759 23635 solver.cpp:219] Iteration 0 (0 iter/s, 0.16707s/100 iters), loss = 2.31471
I0428 19:36:04.857787 23635 solver.cpp:238]     Train net output #0: loss = 2.31471 (* 1 = 2.31471 loss)
I0428 19:36:04.857820 23635 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:36:05.078876 23635 solver.cpp:219] Iteration 100 (452.338 iter/s, 0.221074s/100 iters), loss = 0.589482
I0428 19:36:05.078908 23635 solver.cpp:238]     Train net output #0: loss = 0.589482 (* 1 = 0.589482 loss)
I0428 19:36:05.078922 23635 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:36:05.299860 23635 solver.cpp:219] Iteration 200 (452.617 iter/s, 0.220937s/100 iters), loss = 0.337043
I0428 19:36:05.299892 23635 solver.cpp:238]     Train net output #0: loss = 0.337043 (* 1 = 0.337043 loss)
I0428 19:36:05.299904 23635 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:36:05.519788 23635 solver.cpp:219] Iteration 300 (454.786 iter/s, 0.219884s/100 iters), loss = 0.297504
I0428 19:36:05.519819 23635 solver.cpp:238]     Train net output #0: loss = 0.297504 (* 1 = 0.297504 loss)
I0428 19:36:05.519845 23635 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:36:05.737545 23635 solver.cpp:219] Iteration 400 (459.323 iter/s, 0.217712s/100 iters), loss = 0.165617
I0428 19:36:05.737576 23635 solver.cpp:238]     Train net output #0: loss = 0.165617 (* 1 = 0.165617 loss)
I0428 19:36:05.737588 23635 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:36:05.953997 23635 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:36:06.108506 23642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:06.112895 23635 solver.cpp:398]     Test net output #0: accuracy = 0.9442
I0428 19:36:06.112922 23635 solver.cpp:398]     Test net output #1: loss = 0.191437 (* 1 = 0.191437 loss)
I0428 19:36:06.115131 23635 solver.cpp:219] Iteration 500 (264.877 iter/s, 0.377533s/100 iters), loss = 0.280833
I0428 19:36:06.115175 23635 solver.cpp:238]     Train net output #0: loss = 0.280833 (* 1 = 0.280833 loss)
I0428 19:36:06.115221 23635 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:36:06.336040 23635 solver.cpp:219] Iteration 600 (452.766 iter/s, 0.220865s/100 iters), loss = 0.164217
I0428 19:36:06.336074 23635 solver.cpp:238]     Train net output #0: loss = 0.164217 (* 1 = 0.164217 loss)
I0428 19:36:06.336086 23635 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:36:06.555526 23635 solver.cpp:219] Iteration 700 (455.712 iter/s, 0.219437s/100 iters), loss = 0.188574
I0428 19:36:06.555558 23635 solver.cpp:238]     Train net output #0: loss = 0.188574 (* 1 = 0.188574 loss)
I0428 19:36:06.555570 23635 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:36:06.776146 23635 solver.cpp:219] Iteration 800 (453.359 iter/s, 0.220576s/100 iters), loss = 0.32848
I0428 19:36:06.776181 23635 solver.cpp:238]     Train net output #0: loss = 0.32848 (* 1 = 0.32848 loss)
I0428 19:36:06.776195 23635 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:36:06.997107 23635 solver.cpp:219] Iteration 900 (452.672 iter/s, 0.220911s/100 iters), loss = 0.236043
I0428 19:36:06.997141 23635 solver.cpp:238]     Train net output #0: loss = 0.236043 (* 1 = 0.236043 loss)
I0428 19:36:06.997154 23635 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:36:07.069646 23641 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:07.215068 23635 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:36:07.219053 23635 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:36:07.221562 23635 solver.cpp:311] Iteration 1000, loss = 0.134986
I0428 19:36:07.221580 23635 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:36:07.376168 23642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:07.380607 23635 solver.cpp:398]     Test net output #0: accuracy = 0.9605
I0428 19:36:07.380632 23635 solver.cpp:398]     Test net output #1: loss = 0.126402 (* 1 = 0.126402 loss)
I0428 19:36:07.380643 23635 solver.cpp:316] Optimization Done.
I0428 19:36:07.380650 23635 caffe.cpp:259] Optimization Done.
