I0428 19:28:52.390960 21845 caffe.cpp:218] Using GPUs 0
I0428 19:28:52.426188 21845 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:28:52.870795 21845 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test40.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:28:52.870928 21845 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test40.prototxt
I0428 19:28:52.871148 21845 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:28:52.871161 21845 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:28:52.871218 21845 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:28:52.871279 21845 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:52.871382 21845 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:28:52.871425 21845 net.cpp:86] Creating Layer mnist
I0428 19:28:52.871434 21845 net.cpp:382] mnist -> data
I0428 19:28:52.871459 21845 net.cpp:382] mnist -> label
I0428 19:28:52.872347 21845 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:28:52.874879 21845 net.cpp:124] Setting up mnist
I0428 19:28:52.874913 21845 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:28:52.874938 21845 net.cpp:131] Top shape: 64 (64)
I0428 19:28:52.874944 21845 net.cpp:139] Memory required for data: 200960
I0428 19:28:52.874953 21845 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:52.874972 21845 net.cpp:86] Creating Layer conv0
I0428 19:28:52.874982 21845 net.cpp:408] conv0 <- data
I0428 19:28:52.874997 21845 net.cpp:382] conv0 -> conv0
I0428 19:28:53.095744 21845 net.cpp:124] Setting up conv0
I0428 19:28:53.095772 21845 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:28:53.095777 21845 net.cpp:139] Memory required for data: 495872
I0428 19:28:53.095813 21845 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:53.095830 21845 net.cpp:86] Creating Layer pool0
I0428 19:28:53.095841 21845 net.cpp:408] pool0 <- conv0
I0428 19:28:53.095850 21845 net.cpp:382] pool0 -> pool0
I0428 19:28:53.095904 21845 net.cpp:124] Setting up pool0
I0428 19:28:53.095913 21845 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:28:53.095917 21845 net.cpp:139] Memory required for data: 569600
I0428 19:28:53.095922 21845 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:53.095933 21845 net.cpp:86] Creating Layer ip1
I0428 19:28:53.095957 21845 net.cpp:408] ip1 <- pool0
I0428 19:28:53.095964 21845 net.cpp:382] ip1 -> ip1
I0428 19:28:53.096904 21845 net.cpp:124] Setting up ip1
I0428 19:28:53.096920 21845 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:53.096948 21845 net.cpp:139] Memory required for data: 572160
I0428 19:28:53.096963 21845 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:53.096976 21845 net.cpp:86] Creating Layer relu1
I0428 19:28:53.096982 21845 net.cpp:408] relu1 <- ip1
I0428 19:28:53.096990 21845 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:53.097203 21845 net.cpp:124] Setting up relu1
I0428 19:28:53.097213 21845 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:53.097218 21845 net.cpp:139] Memory required for data: 574720
I0428 19:28:53.097223 21845 layer_factory.hpp:77] Creating layer loss
I0428 19:28:53.097231 21845 net.cpp:86] Creating Layer loss
I0428 19:28:53.097237 21845 net.cpp:408] loss <- ip1
I0428 19:28:53.097244 21845 net.cpp:408] loss <- label
I0428 19:28:53.097250 21845 net.cpp:382] loss -> loss
I0428 19:28:53.097272 21845 layer_factory.hpp:77] Creating layer loss
I0428 19:28:53.098115 21845 net.cpp:124] Setting up loss
I0428 19:28:53.098146 21845 net.cpp:131] Top shape: (1)
I0428 19:28:53.098152 21845 net.cpp:134]     with loss weight 1
I0428 19:28:53.098172 21845 net.cpp:139] Memory required for data: 574724
I0428 19:28:53.098178 21845 net.cpp:200] loss needs backward computation.
I0428 19:28:53.098186 21845 net.cpp:200] relu1 needs backward computation.
I0428 19:28:53.098191 21845 net.cpp:200] ip1 needs backward computation.
I0428 19:28:53.098196 21845 net.cpp:200] pool0 needs backward computation.
I0428 19:28:53.098201 21845 net.cpp:200] conv0 needs backward computation.
I0428 19:28:53.098206 21845 net.cpp:202] mnist does not need backward computation.
I0428 19:28:53.098212 21845 net.cpp:244] This network produces output loss
I0428 19:28:53.098222 21845 net.cpp:257] Network initialization done.
I0428 19:28:53.098464 21845 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test40.prototxt
I0428 19:28:53.098491 21845 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:28:53.098559 21845 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:28:53.098634 21845 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:53.098690 21845 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:28:53.098707 21845 net.cpp:86] Creating Layer mnist
I0428 19:28:53.098716 21845 net.cpp:382] mnist -> data
I0428 19:28:53.098726 21845 net.cpp:382] mnist -> label
I0428 19:28:53.098888 21845 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:28:53.101023 21845 net.cpp:124] Setting up mnist
I0428 19:28:53.101040 21845 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:28:53.101049 21845 net.cpp:131] Top shape: 100 (100)
I0428 19:28:53.101055 21845 net.cpp:139] Memory required for data: 314000
I0428 19:28:53.101075 21845 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:28:53.101091 21845 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:28:53.101099 21845 net.cpp:408] label_mnist_1_split <- label
I0428 19:28:53.101124 21845 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:28:53.101135 21845 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:28:53.101217 21845 net.cpp:124] Setting up label_mnist_1_split
I0428 19:28:53.101240 21845 net.cpp:131] Top shape: 100 (100)
I0428 19:28:53.101248 21845 net.cpp:131] Top shape: 100 (100)
I0428 19:28:53.101254 21845 net.cpp:139] Memory required for data: 314800
I0428 19:28:53.101259 21845 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:53.101274 21845 net.cpp:86] Creating Layer conv0
I0428 19:28:53.101280 21845 net.cpp:408] conv0 <- data
I0428 19:28:53.101305 21845 net.cpp:382] conv0 -> conv0
I0428 19:28:53.102722 21845 net.cpp:124] Setting up conv0
I0428 19:28:53.102737 21845 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:28:53.102742 21845 net.cpp:139] Memory required for data: 775600
I0428 19:28:53.102756 21845 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:53.102764 21845 net.cpp:86] Creating Layer pool0
I0428 19:28:53.102771 21845 net.cpp:408] pool0 <- conv0
I0428 19:28:53.102794 21845 net.cpp:382] pool0 -> pool0
I0428 19:28:53.102834 21845 net.cpp:124] Setting up pool0
I0428 19:28:53.102841 21845 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:28:53.102864 21845 net.cpp:139] Memory required for data: 890800
I0428 19:28:53.102869 21845 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:53.102880 21845 net.cpp:86] Creating Layer ip1
I0428 19:28:53.102885 21845 net.cpp:408] ip1 <- pool0
I0428 19:28:53.102895 21845 net.cpp:382] ip1 -> ip1
I0428 19:28:53.103045 21845 net.cpp:124] Setting up ip1
I0428 19:28:53.103055 21845 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:53.103060 21845 net.cpp:139] Memory required for data: 894800
I0428 19:28:53.103070 21845 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:53.103078 21845 net.cpp:86] Creating Layer relu1
I0428 19:28:53.103085 21845 net.cpp:408] relu1 <- ip1
I0428 19:28:53.103091 21845 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:53.103338 21845 net.cpp:124] Setting up relu1
I0428 19:28:53.103349 21845 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:53.103354 21845 net.cpp:139] Memory required for data: 898800
I0428 19:28:53.103360 21845 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:28:53.103369 21845 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:28:53.103374 21845 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:28:53.103381 21845 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:28:53.103391 21845 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:28:53.103446 21845 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:28:53.103454 21845 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:53.103462 21845 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:53.103467 21845 net.cpp:139] Memory required for data: 906800
I0428 19:28:53.103472 21845 layer_factory.hpp:77] Creating layer accuracy
I0428 19:28:53.103482 21845 net.cpp:86] Creating Layer accuracy
I0428 19:28:53.103488 21845 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:28:53.103497 21845 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:28:53.103503 21845 net.cpp:382] accuracy -> accuracy
I0428 19:28:53.103514 21845 net.cpp:124] Setting up accuracy
I0428 19:28:53.103523 21845 net.cpp:131] Top shape: (1)
I0428 19:28:53.103529 21845 net.cpp:139] Memory required for data: 906804
I0428 19:28:53.103534 21845 layer_factory.hpp:77] Creating layer loss
I0428 19:28:53.103543 21845 net.cpp:86] Creating Layer loss
I0428 19:28:53.103549 21845 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:28:53.103555 21845 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:28:53.103564 21845 net.cpp:382] loss -> loss
I0428 19:28:53.103574 21845 layer_factory.hpp:77] Creating layer loss
I0428 19:28:53.103832 21845 net.cpp:124] Setting up loss
I0428 19:28:53.103852 21845 net.cpp:131] Top shape: (1)
I0428 19:28:53.103857 21845 net.cpp:134]     with loss weight 1
I0428 19:28:53.103866 21845 net.cpp:139] Memory required for data: 906808
I0428 19:28:53.103871 21845 net.cpp:200] loss needs backward computation.
I0428 19:28:53.103878 21845 net.cpp:202] accuracy does not need backward computation.
I0428 19:28:53.103885 21845 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:28:53.103890 21845 net.cpp:200] relu1 needs backward computation.
I0428 19:28:53.103895 21845 net.cpp:200] ip1 needs backward computation.
I0428 19:28:53.103900 21845 net.cpp:200] pool0 needs backward computation.
I0428 19:28:53.103905 21845 net.cpp:200] conv0 needs backward computation.
I0428 19:28:53.103911 21845 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:28:53.103919 21845 net.cpp:202] mnist does not need backward computation.
I0428 19:28:53.103924 21845 net.cpp:244] This network produces output accuracy
I0428 19:28:53.103929 21845 net.cpp:244] This network produces output loss
I0428 19:28:53.103940 21845 net.cpp:257] Network initialization done.
I0428 19:28:53.103972 21845 solver.cpp:56] Solver scaffolding done.
I0428 19:28:53.104117 21845 caffe.cpp:248] Starting Optimization
I0428 19:28:53.104125 21845 solver.cpp:273] Solving LeNet
I0428 19:28:53.104128 21845 solver.cpp:274] Learning Rate Policy: inv
I0428 19:28:53.104941 21845 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:28:53.106700 21845 blocking_queue.cpp:49] Waiting for data
I0428 19:28:53.183398 21852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:53.183759 21845 solver.cpp:398]     Test net output #0: accuracy = 0.1283
I0428 19:28:53.183779 21845 solver.cpp:398]     Test net output #1: loss = 2.29905 (* 1 = 2.29905 loss)
I0428 19:28:53.185168 21845 solver.cpp:219] Iteration 0 (2.8106 iter/s, 0.0809963s/100 iters), loss = 2.30346
I0428 19:28:53.185207 21845 solver.cpp:238]     Train net output #0: loss = 2.30346 (* 1 = 2.30346 loss)
I0428 19:28:53.185223 21845 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:28:53.241202 21845 solver.cpp:219] Iteration 100 (1785.92 iter/s, 0.0559936s/100 iters), loss = 0.519087
I0428 19:28:53.241230 21845 solver.cpp:238]     Train net output #0: loss = 0.519087 (* 1 = 0.519087 loss)
I0428 19:28:53.241256 21845 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:28:53.286135 21845 solver.cpp:219] Iteration 200 (2227.16 iter/s, 0.0449003s/100 iters), loss = 0.508579
I0428 19:28:53.286196 21845 solver.cpp:238]     Train net output #0: loss = 0.508579 (* 1 = 0.508579 loss)
I0428 19:28:53.286213 21845 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:28:53.326944 21845 solver.cpp:219] Iteration 300 (2453.48 iter/s, 0.0407584s/100 iters), loss = 0.49229
I0428 19:28:53.327005 21845 solver.cpp:238]     Train net output #0: loss = 0.49229 (* 1 = 0.49229 loss)
I0428 19:28:53.327015 21845 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:28:53.371846 21845 solver.cpp:219] Iteration 400 (2230.21 iter/s, 0.0448388s/100 iters), loss = 0.235504
I0428 19:28:53.371878 21845 solver.cpp:238]     Train net output #0: loss = 0.235504 (* 1 = 0.235504 loss)
I0428 19:28:53.371891 21845 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:28:53.417297 21845 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:28:53.486285 21852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:53.486757 21845 solver.cpp:398]     Test net output #0: accuracy = 0.9151
I0428 19:28:53.486784 21845 solver.cpp:398]     Test net output #1: loss = 0.29461 (* 1 = 0.29461 loss)
I0428 19:28:53.487349 21845 solver.cpp:219] Iteration 500 (866.138 iter/s, 0.115455s/100 iters), loss = 0.330892
I0428 19:28:53.487396 21845 solver.cpp:238]     Train net output #0: loss = 0.330892 (* 1 = 0.330892 loss)
I0428 19:28:53.487411 21845 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:28:53.542047 21845 solver.cpp:219] Iteration 600 (1830.04 iter/s, 0.0546437s/100 iters), loss = 0.189088
I0428 19:28:53.542078 21845 solver.cpp:238]     Train net output #0: loss = 0.189088 (* 1 = 0.189088 loss)
I0428 19:28:53.542111 21845 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:28:53.587469 21845 solver.cpp:219] Iteration 700 (2203.44 iter/s, 0.0453836s/100 iters), loss = 0.392261
I0428 19:28:53.587499 21845 solver.cpp:238]     Train net output #0: loss = 0.392261 (* 1 = 0.392261 loss)
I0428 19:28:53.587517 21845 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:28:53.639541 21845 solver.cpp:219] Iteration 800 (1921.88 iter/s, 0.0520325s/100 iters), loss = 0.418802
I0428 19:28:53.639585 21845 solver.cpp:238]     Train net output #0: loss = 0.418802 (* 1 = 0.418802 loss)
I0428 19:28:53.639602 21845 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:28:53.687638 21845 solver.cpp:219] Iteration 900 (2081.29 iter/s, 0.048047s/100 iters), loss = 0.396261
I0428 19:28:53.687667 21845 solver.cpp:238]     Train net output #0: loss = 0.396261 (* 1 = 0.396261 loss)
I0428 19:28:53.687687 21845 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:28:53.703045 21851 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:53.732962 21845 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:28:53.733429 21845 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:28:53.733767 21845 solver.cpp:311] Iteration 1000, loss = 0.322823
I0428 19:28:53.733788 21845 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:28:53.786686 21852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:53.787120 21845 solver.cpp:398]     Test net output #0: accuracy = 0.9284
I0428 19:28:53.787156 21845 solver.cpp:398]     Test net output #1: loss = 0.2389 (* 1 = 0.2389 loss)
I0428 19:28:53.787165 21845 solver.cpp:316] Optimization Done.
I0428 19:28:53.787170 21845 caffe.cpp:259] Optimization Done.
