I0428 20:14:03.536706 32594 caffe.cpp:218] Using GPUs 0
I0428 20:14:03.566967 32594 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:04.012955 32594 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1212.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:04.013080 32594 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1212.prototxt
I0428 20:14:04.013411 32594 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:04.013425 32594 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:04.013499 32594 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:04.013559 32594 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:04.013643 32594 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:04.013664 32594 net.cpp:86] Creating Layer mnist
I0428 20:14:04.013670 32594 net.cpp:382] mnist -> data
I0428 20:14:04.013689 32594 net.cpp:382] mnist -> label
I0428 20:14:04.014626 32594 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:04.016871 32594 net.cpp:124] Setting up mnist
I0428 20:14:04.016897 32594 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:04.016903 32594 net.cpp:131] Top shape: 64 (64)
I0428 20:14:04.016906 32594 net.cpp:139] Memory required for data: 200960
I0428 20:14:04.016912 32594 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:04.016927 32594 net.cpp:86] Creating Layer conv0
I0428 20:14:04.016932 32594 net.cpp:408] conv0 <- data
I0428 20:14:04.016944 32594 net.cpp:382] conv0 -> conv0
I0428 20:14:04.245268 32594 net.cpp:124] Setting up conv0
I0428 20:14:04.245296 32594 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:04.245299 32594 net.cpp:139] Memory required for data: 7573760
I0428 20:14:04.245331 32594 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:04.245342 32594 net.cpp:86] Creating Layer pool0
I0428 20:14:04.245347 32594 net.cpp:408] pool0 <- conv0
I0428 20:14:04.245368 32594 net.cpp:382] pool0 -> pool0
I0428 20:14:04.245414 32594 net.cpp:124] Setting up pool0
I0428 20:14:04.245419 32594 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:04.245421 32594 net.cpp:139] Memory required for data: 9416960
I0428 20:14:04.245424 32594 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:04.245434 32594 net.cpp:86] Creating Layer conv1
I0428 20:14:04.245437 32594 net.cpp:408] conv1 <- pool0
I0428 20:14:04.245442 32594 net.cpp:382] conv1 -> conv1
I0428 20:14:04.247371 32594 net.cpp:124] Setting up conv1
I0428 20:14:04.247401 32594 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:04.247406 32594 net.cpp:139] Memory required for data: 9449728
I0428 20:14:04.247414 32594 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:04.247423 32594 net.cpp:86] Creating Layer pool1
I0428 20:14:04.247426 32594 net.cpp:408] pool1 <- conv1
I0428 20:14:04.247431 32594 net.cpp:382] pool1 -> pool1
I0428 20:14:04.247469 32594 net.cpp:124] Setting up pool1
I0428 20:14:04.247474 32594 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:04.247478 32594 net.cpp:139] Memory required for data: 9457920
I0428 20:14:04.247480 32594 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:04.247488 32594 net.cpp:86] Creating Layer ip1
I0428 20:14:04.247491 32594 net.cpp:408] ip1 <- pool1
I0428 20:14:04.247496 32594 net.cpp:382] ip1 -> ip1
I0428 20:14:04.247604 32594 net.cpp:124] Setting up ip1
I0428 20:14:04.247611 32594 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:04.247615 32594 net.cpp:139] Memory required for data: 9460480
I0428 20:14:04.247622 32594 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:04.247627 32594 net.cpp:86] Creating Layer relu1
I0428 20:14:04.247630 32594 net.cpp:408] relu1 <- ip1
I0428 20:14:04.247634 32594 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:04.247820 32594 net.cpp:124] Setting up relu1
I0428 20:14:04.247829 32594 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:04.247833 32594 net.cpp:139] Memory required for data: 9463040
I0428 20:14:04.247835 32594 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:04.247843 32594 net.cpp:86] Creating Layer ip2
I0428 20:14:04.247845 32594 net.cpp:408] ip2 <- ip1
I0428 20:14:04.247851 32594 net.cpp:382] ip2 -> ip2
I0428 20:14:04.247951 32594 net.cpp:124] Setting up ip2
I0428 20:14:04.247959 32594 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:04.247961 32594 net.cpp:139] Memory required for data: 9465600
I0428 20:14:04.247967 32594 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:04.247973 32594 net.cpp:86] Creating Layer relu2
I0428 20:14:04.247977 32594 net.cpp:408] relu2 <- ip2
I0428 20:14:04.247982 32594 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:04.248738 32594 net.cpp:124] Setting up relu2
I0428 20:14:04.248749 32594 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:04.248767 32594 net.cpp:139] Memory required for data: 9468160
I0428 20:14:04.248770 32594 layer_factory.hpp:77] Creating layer loss
I0428 20:14:04.248776 32594 net.cpp:86] Creating Layer loss
I0428 20:14:04.248780 32594 net.cpp:408] loss <- ip2
I0428 20:14:04.248785 32594 net.cpp:408] loss <- label
I0428 20:14:04.248806 32594 net.cpp:382] loss -> loss
I0428 20:14:04.248847 32594 layer_factory.hpp:77] Creating layer loss
I0428 20:14:04.249150 32594 net.cpp:124] Setting up loss
I0428 20:14:04.249161 32594 net.cpp:131] Top shape: (1)
I0428 20:14:04.249164 32594 net.cpp:134]     with loss weight 1
I0428 20:14:04.249212 32594 net.cpp:139] Memory required for data: 9468164
I0428 20:14:04.249215 32594 net.cpp:200] loss needs backward computation.
I0428 20:14:04.249219 32594 net.cpp:200] relu2 needs backward computation.
I0428 20:14:04.249236 32594 net.cpp:200] ip2 needs backward computation.
I0428 20:14:04.249239 32594 net.cpp:200] relu1 needs backward computation.
I0428 20:14:04.249243 32594 net.cpp:200] ip1 needs backward computation.
I0428 20:14:04.249254 32594 net.cpp:200] pool1 needs backward computation.
I0428 20:14:04.249258 32594 net.cpp:200] conv1 needs backward computation.
I0428 20:14:04.249260 32594 net.cpp:200] pool0 needs backward computation.
I0428 20:14:04.249264 32594 net.cpp:200] conv0 needs backward computation.
I0428 20:14:04.249266 32594 net.cpp:202] mnist does not need backward computation.
I0428 20:14:04.249269 32594 net.cpp:244] This network produces output loss
I0428 20:14:04.249279 32594 net.cpp:257] Network initialization done.
I0428 20:14:04.249570 32594 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1212.prototxt
I0428 20:14:04.249594 32594 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:04.249676 32594 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:04.249758 32594 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:04.249816 32594 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:04.249830 32594 net.cpp:86] Creating Layer mnist
I0428 20:14:04.249833 32594 net.cpp:382] mnist -> data
I0428 20:14:04.249842 32594 net.cpp:382] mnist -> label
I0428 20:14:04.249951 32594 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:04.251989 32594 net.cpp:124] Setting up mnist
I0428 20:14:04.252017 32594 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:04.252022 32594 net.cpp:131] Top shape: 100 (100)
I0428 20:14:04.252024 32594 net.cpp:139] Memory required for data: 314000
I0428 20:14:04.252028 32594 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:04.252049 32594 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:04.252053 32594 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:04.252058 32594 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:04.252066 32594 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:04.252125 32594 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:04.252143 32594 net.cpp:131] Top shape: 100 (100)
I0428 20:14:04.252147 32594 net.cpp:131] Top shape: 100 (100)
I0428 20:14:04.252151 32594 net.cpp:139] Memory required for data: 314800
I0428 20:14:04.252153 32594 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:04.252164 32594 net.cpp:86] Creating Layer conv0
I0428 20:14:04.252167 32594 net.cpp:408] conv0 <- data
I0428 20:14:04.252183 32594 net.cpp:382] conv0 -> conv0
I0428 20:14:04.254024 32594 net.cpp:124] Setting up conv0
I0428 20:14:04.254051 32594 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:04.254055 32594 net.cpp:139] Memory required for data: 11834800
I0428 20:14:04.254066 32594 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:04.254073 32594 net.cpp:86] Creating Layer pool0
I0428 20:14:04.254076 32594 net.cpp:408] pool0 <- conv0
I0428 20:14:04.254082 32594 net.cpp:382] pool0 -> pool0
I0428 20:14:04.254117 32594 net.cpp:124] Setting up pool0
I0428 20:14:04.254124 32594 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:04.254127 32594 net.cpp:139] Memory required for data: 14714800
I0428 20:14:04.254130 32594 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:04.254138 32594 net.cpp:86] Creating Layer conv1
I0428 20:14:04.254142 32594 net.cpp:408] conv1 <- pool0
I0428 20:14:04.254146 32594 net.cpp:382] conv1 -> conv1
I0428 20:14:04.255722 32594 net.cpp:124] Setting up conv1
I0428 20:14:04.255734 32594 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:04.255753 32594 net.cpp:139] Memory required for data: 14766000
I0428 20:14:04.255779 32594 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:04.255791 32594 net.cpp:86] Creating Layer pool1
I0428 20:14:04.255815 32594 net.cpp:408] pool1 <- conv1
I0428 20:14:04.255821 32594 net.cpp:382] pool1 -> pool1
I0428 20:14:04.255861 32594 net.cpp:124] Setting up pool1
I0428 20:14:04.255877 32594 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:04.255880 32594 net.cpp:139] Memory required for data: 14778800
I0428 20:14:04.255883 32594 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:04.255892 32594 net.cpp:86] Creating Layer ip1
I0428 20:14:04.255895 32594 net.cpp:408] ip1 <- pool1
I0428 20:14:04.255901 32594 net.cpp:382] ip1 -> ip1
I0428 20:14:04.256013 32594 net.cpp:124] Setting up ip1
I0428 20:14:04.256021 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256026 32594 net.cpp:139] Memory required for data: 14782800
I0428 20:14:04.256033 32594 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:04.256039 32594 net.cpp:86] Creating Layer relu1
I0428 20:14:04.256042 32594 net.cpp:408] relu1 <- ip1
I0428 20:14:04.256048 32594 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:04.256242 32594 net.cpp:124] Setting up relu1
I0428 20:14:04.256249 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256253 32594 net.cpp:139] Memory required for data: 14786800
I0428 20:14:04.256256 32594 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:04.256271 32594 net.cpp:86] Creating Layer ip2
I0428 20:14:04.256274 32594 net.cpp:408] ip2 <- ip1
I0428 20:14:04.256280 32594 net.cpp:382] ip2 -> ip2
I0428 20:14:04.256377 32594 net.cpp:124] Setting up ip2
I0428 20:14:04.256386 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256388 32594 net.cpp:139] Memory required for data: 14790800
I0428 20:14:04.256393 32594 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:04.256400 32594 net.cpp:86] Creating Layer relu2
I0428 20:14:04.256403 32594 net.cpp:408] relu2 <- ip2
I0428 20:14:04.256407 32594 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:04.256579 32594 net.cpp:124] Setting up relu2
I0428 20:14:04.256587 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256592 32594 net.cpp:139] Memory required for data: 14794800
I0428 20:14:04.256594 32594 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:14:04.256600 32594 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:14:04.256604 32594 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:14:04.256608 32594 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:14:04.256624 32594 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:14:04.256680 32594 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:14:04.256687 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256691 32594 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:04.256695 32594 net.cpp:139] Memory required for data: 14802800
I0428 20:14:04.256697 32594 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:04.256702 32594 net.cpp:86] Creating Layer accuracy
I0428 20:14:04.256705 32594 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:14:04.256711 32594 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:04.256716 32594 net.cpp:382] accuracy -> accuracy
I0428 20:14:04.256723 32594 net.cpp:124] Setting up accuracy
I0428 20:14:04.256727 32594 net.cpp:131] Top shape: (1)
I0428 20:14:04.256729 32594 net.cpp:139] Memory required for data: 14802804
I0428 20:14:04.256732 32594 layer_factory.hpp:77] Creating layer loss
I0428 20:14:04.256737 32594 net.cpp:86] Creating Layer loss
I0428 20:14:04.256741 32594 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:14:04.256743 32594 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:04.256749 32594 net.cpp:382] loss -> loss
I0428 20:14:04.256754 32594 layer_factory.hpp:77] Creating layer loss
I0428 20:14:04.257086 32594 net.cpp:124] Setting up loss
I0428 20:14:04.257097 32594 net.cpp:131] Top shape: (1)
I0428 20:14:04.257102 32594 net.cpp:134]     with loss weight 1
I0428 20:14:04.257107 32594 net.cpp:139] Memory required for data: 14802808
I0428 20:14:04.257112 32594 net.cpp:200] loss needs backward computation.
I0428 20:14:04.257117 32594 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:04.257122 32594 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:14:04.257125 32594 net.cpp:200] relu2 needs backward computation.
I0428 20:14:04.257128 32594 net.cpp:200] ip2 needs backward computation.
I0428 20:14:04.257150 32594 net.cpp:200] relu1 needs backward computation.
I0428 20:14:04.257153 32594 net.cpp:200] ip1 needs backward computation.
I0428 20:14:04.257156 32594 net.cpp:200] pool1 needs backward computation.
I0428 20:14:04.257175 32594 net.cpp:200] conv1 needs backward computation.
I0428 20:14:04.257179 32594 net.cpp:200] pool0 needs backward computation.
I0428 20:14:04.257182 32594 net.cpp:200] conv0 needs backward computation.
I0428 20:14:04.257186 32594 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:04.257189 32594 net.cpp:202] mnist does not need backward computation.
I0428 20:14:04.257192 32594 net.cpp:244] This network produces output accuracy
I0428 20:14:04.257212 32594 net.cpp:244] This network produces output loss
I0428 20:14:04.257223 32594 net.cpp:257] Network initialization done.
I0428 20:14:04.257259 32594 solver.cpp:56] Solver scaffolding done.
I0428 20:14:04.257537 32594 caffe.cpp:248] Starting Optimization
I0428 20:14:04.257544 32594 solver.cpp:273] Solving LeNet
I0428 20:14:04.257547 32594 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:04.258345 32594 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:04.263842 32594 blocking_queue.cpp:49] Waiting for data
I0428 20:14:04.334517 32601 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:04.335214 32594 solver.cpp:398]     Test net output #0: accuracy = 0.1012
I0428 20:14:04.335247 32594 solver.cpp:398]     Test net output #1: loss = 2.3831 (* 1 = 2.3831 loss)
I0428 20:14:04.339467 32594 solver.cpp:219] Iteration 0 (0 iter/s, 0.0818934s/100 iters), loss = 2.36208
I0428 20:14:04.339490 32594 solver.cpp:238]     Train net output #0: loss = 2.36208 (* 1 = 2.36208 loss)
I0428 20:14:04.339500 32594 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:04.446262 32594 solver.cpp:219] Iteration 100 (936.83 iter/s, 0.106743s/100 iters), loss = 1.29903
I0428 20:14:04.446321 32594 solver.cpp:238]     Train net output #0: loss = 1.29903 (* 1 = 1.29903 loss)
I0428 20:14:04.446328 32594 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:04.553491 32594 solver.cpp:219] Iteration 200 (933.232 iter/s, 0.107154s/100 iters), loss = 1.09017
I0428 20:14:04.553573 32594 solver.cpp:238]     Train net output #0: loss = 1.09017 (* 1 = 1.09017 loss)
I0428 20:14:04.553587 32594 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:04.666940 32594 solver.cpp:219] Iteration 300 (882.138 iter/s, 0.113361s/100 iters), loss = 0.804222
I0428 20:14:04.666970 32594 solver.cpp:238]     Train net output #0: loss = 0.804222 (* 1 = 0.804222 loss)
I0428 20:14:04.666977 32594 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:04.775449 32594 solver.cpp:219] Iteration 400 (921.929 iter/s, 0.108468s/100 iters), loss = 0.839417
I0428 20:14:04.775480 32594 solver.cpp:238]     Train net output #0: loss = 0.839417 (* 1 = 0.839417 loss)
I0428 20:14:04.775487 32594 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:04.884088 32594 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:04.948580 32601 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:04.950706 32594 solver.cpp:398]     Test net output #0: accuracy = 0.7118
I0428 20:14:04.950727 32594 solver.cpp:398]     Test net output #1: loss = 0.785417 (* 1 = 0.785417 loss)
I0428 20:14:04.951797 32594 solver.cpp:219] Iteration 500 (567.201 iter/s, 0.176304s/100 iters), loss = 0.824312
I0428 20:14:04.951822 32594 solver.cpp:238]     Train net output #0: loss = 0.824312 (* 1 = 0.824312 loss)
I0428 20:14:04.951833 32594 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:05.060695 32594 solver.cpp:219] Iteration 600 (918.591 iter/s, 0.108862s/100 iters), loss = 0.974607
I0428 20:14:05.060724 32594 solver.cpp:238]     Train net output #0: loss = 0.974607 (* 1 = 0.974607 loss)
I0428 20:14:05.060735 32594 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:05.170490 32594 solver.cpp:219] Iteration 700 (911.126 iter/s, 0.109754s/100 iters), loss = 0.786752
I0428 20:14:05.170524 32594 solver.cpp:238]     Train net output #0: loss = 0.786752 (* 1 = 0.786752 loss)
I0428 20:14:05.170532 32594 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:05.280241 32594 solver.cpp:219] Iteration 800 (911.533 iter/s, 0.109705s/100 iters), loss = 0.627204
I0428 20:14:05.280272 32594 solver.cpp:238]     Train net output #0: loss = 0.627204 (* 1 = 0.627204 loss)
I0428 20:14:05.280279 32594 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:05.393079 32594 solver.cpp:219] Iteration 900 (886.633 iter/s, 0.112786s/100 iters), loss = 0.562737
I0428 20:14:05.393116 32594 solver.cpp:238]     Train net output #0: loss = 0.562737 (* 1 = 0.562737 loss)
I0428 20:14:05.393123 32594 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:05.430289 32600 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:05.503279 32594 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:05.504204 32594 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:05.504928 32594 solver.cpp:311] Iteration 1000, loss = 0.632078
I0428 20:14:05.504943 32594 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:05.566916 32601 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:05.568552 32594 solver.cpp:398]     Test net output #0: accuracy = 0.7382
I0428 20:14:05.568585 32594 solver.cpp:398]     Test net output #1: loss = 0.674369 (* 1 = 0.674369 loss)
I0428 20:14:05.568593 32594 solver.cpp:316] Optimization Done.
I0428 20:14:05.568596 32594 caffe.cpp:259] Optimization Done.
