I0428 20:10:32.073074 31858 caffe.cpp:218] Using GPUs 0
I0428 20:10:32.107148 31858 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:10:32.557401 31858 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1137.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:10:32.557560 31858 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1137.prototxt
I0428 20:10:32.557881 31858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:10:32.557895 31858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:10:32.557967 31858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:32.558032 31858 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:32.558115 31858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:10:32.558132 31858 net.cpp:86] Creating Layer mnist
I0428 20:10:32.558140 31858 net.cpp:382] mnist -> data
I0428 20:10:32.558158 31858 net.cpp:382] mnist -> label
I0428 20:10:32.559108 31858 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:10:32.561446 31858 net.cpp:124] Setting up mnist
I0428 20:10:32.561477 31858 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:10:32.561482 31858 net.cpp:131] Top shape: 64 (64)
I0428 20:10:32.561486 31858 net.cpp:139] Memory required for data: 200960
I0428 20:10:32.561491 31858 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:32.561506 31858 net.cpp:86] Creating Layer conv0
I0428 20:10:32.561511 31858 net.cpp:408] conv0 <- data
I0428 20:10:32.561520 31858 net.cpp:382] conv0 -> conv0
I0428 20:10:32.786583 31858 net.cpp:124] Setting up conv0
I0428 20:10:32.786610 31858 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:10:32.786630 31858 net.cpp:139] Memory required for data: 3887360
I0428 20:10:32.786664 31858 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:32.786692 31858 net.cpp:86] Creating Layer pool0
I0428 20:10:32.786696 31858 net.cpp:408] pool0 <- conv0
I0428 20:10:32.786702 31858 net.cpp:382] pool0 -> pool0
I0428 20:10:32.786746 31858 net.cpp:124] Setting up pool0
I0428 20:10:32.786751 31858 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:10:32.786754 31858 net.cpp:139] Memory required for data: 4808960
I0428 20:10:32.786757 31858 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:32.786767 31858 net.cpp:86] Creating Layer conv1
I0428 20:10:32.786770 31858 net.cpp:408] conv1 <- pool0
I0428 20:10:32.786775 31858 net.cpp:382] conv1 -> conv1
I0428 20:10:32.788779 31858 net.cpp:124] Setting up conv1
I0428 20:10:32.788815 31858 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:10:32.788835 31858 net.cpp:139] Memory required for data: 5628160
I0428 20:10:32.788858 31858 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:32.788882 31858 net.cpp:86] Creating Layer pool1
I0428 20:10:32.788885 31858 net.cpp:408] pool1 <- conv1
I0428 20:10:32.788908 31858 net.cpp:382] pool1 -> pool1
I0428 20:10:32.788956 31858 net.cpp:124] Setting up pool1
I0428 20:10:32.788965 31858 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:10:32.788969 31858 net.cpp:139] Memory required for data: 5832960
I0428 20:10:32.788972 31858 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:32.788980 31858 net.cpp:86] Creating Layer ip1
I0428 20:10:32.788983 31858 net.cpp:408] ip1 <- pool1
I0428 20:10:32.788990 31858 net.cpp:382] ip1 -> ip1
I0428 20:10:32.789264 31858 net.cpp:124] Setting up ip1
I0428 20:10:32.789271 31858 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:10:32.789274 31858 net.cpp:139] Memory required for data: 5839360
I0428 20:10:32.789281 31858 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:32.789288 31858 net.cpp:86] Creating Layer relu1
I0428 20:10:32.789290 31858 net.cpp:408] relu1 <- ip1
I0428 20:10:32.789294 31858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:32.789471 31858 net.cpp:124] Setting up relu1
I0428 20:10:32.789480 31858 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:10:32.789484 31858 net.cpp:139] Memory required for data: 5845760
I0428 20:10:32.789486 31858 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:32.789492 31858 net.cpp:86] Creating Layer ip2
I0428 20:10:32.789495 31858 net.cpp:408] ip2 <- ip1
I0428 20:10:32.789500 31858 net.cpp:382] ip2 -> ip2
I0428 20:10:32.789600 31858 net.cpp:124] Setting up ip2
I0428 20:10:32.789607 31858 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:32.789609 31858 net.cpp:139] Memory required for data: 5848320
I0428 20:10:32.789615 31858 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:32.789620 31858 net.cpp:86] Creating Layer relu2
I0428 20:10:32.789623 31858 net.cpp:408] relu2 <- ip2
I0428 20:10:32.789628 31858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:32.790426 31858 net.cpp:124] Setting up relu2
I0428 20:10:32.790438 31858 net.cpp:131] Top shape: 64 10 (640)
I0428 20:10:32.790457 31858 net.cpp:139] Memory required for data: 5850880
I0428 20:10:32.790460 31858 layer_factory.hpp:77] Creating layer loss
I0428 20:10:32.790467 31858 net.cpp:86] Creating Layer loss
I0428 20:10:32.790469 31858 net.cpp:408] loss <- ip2
I0428 20:10:32.790474 31858 net.cpp:408] loss <- label
I0428 20:10:32.790479 31858 net.cpp:382] loss -> loss
I0428 20:10:32.790499 31858 layer_factory.hpp:77] Creating layer loss
I0428 20:10:32.790714 31858 net.cpp:124] Setting up loss
I0428 20:10:32.790740 31858 net.cpp:131] Top shape: (1)
I0428 20:10:32.790742 31858 net.cpp:134]     with loss weight 1
I0428 20:10:32.790756 31858 net.cpp:139] Memory required for data: 5850884
I0428 20:10:32.790760 31858 net.cpp:200] loss needs backward computation.
I0428 20:10:32.790763 31858 net.cpp:200] relu2 needs backward computation.
I0428 20:10:32.790766 31858 net.cpp:200] ip2 needs backward computation.
I0428 20:10:32.790769 31858 net.cpp:200] relu1 needs backward computation.
I0428 20:10:32.790771 31858 net.cpp:200] ip1 needs backward computation.
I0428 20:10:32.790784 31858 net.cpp:200] pool1 needs backward computation.
I0428 20:10:32.790788 31858 net.cpp:200] conv1 needs backward computation.
I0428 20:10:32.790791 31858 net.cpp:200] pool0 needs backward computation.
I0428 20:10:32.790794 31858 net.cpp:200] conv0 needs backward computation.
I0428 20:10:32.790797 31858 net.cpp:202] mnist does not need backward computation.
I0428 20:10:32.790801 31858 net.cpp:244] This network produces output loss
I0428 20:10:32.790808 31858 net.cpp:257] Network initialization done.
I0428 20:10:32.791119 31858 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1137.prototxt
I0428 20:10:32.791143 31858 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:10:32.791242 31858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:10:32.791322 31858 layer_factory.hpp:77] Creating layer mnist
I0428 20:10:32.791370 31858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:10:32.791383 31858 net.cpp:86] Creating Layer mnist
I0428 20:10:32.791388 31858 net.cpp:382] mnist -> data
I0428 20:10:32.791411 31858 net.cpp:382] mnist -> label
I0428 20:10:32.791494 31858 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:10:32.793547 31858 net.cpp:124] Setting up mnist
I0428 20:10:32.793577 31858 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:10:32.793582 31858 net.cpp:131] Top shape: 100 (100)
I0428 20:10:32.793586 31858 net.cpp:139] Memory required for data: 314000
I0428 20:10:32.793603 31858 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:10:32.793614 31858 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:10:32.793617 31858 net.cpp:408] label_mnist_1_split <- label
I0428 20:10:32.793622 31858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:10:32.793628 31858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:10:32.793699 31858 net.cpp:124] Setting up label_mnist_1_split
I0428 20:10:32.793704 31858 net.cpp:131] Top shape: 100 (100)
I0428 20:10:32.793707 31858 net.cpp:131] Top shape: 100 (100)
I0428 20:10:32.793710 31858 net.cpp:139] Memory required for data: 314800
I0428 20:10:32.793714 31858 layer_factory.hpp:77] Creating layer conv0
I0428 20:10:32.793721 31858 net.cpp:86] Creating Layer conv0
I0428 20:10:32.793725 31858 net.cpp:408] conv0 <- data
I0428 20:10:32.793730 31858 net.cpp:382] conv0 -> conv0
I0428 20:10:32.795536 31858 net.cpp:124] Setting up conv0
I0428 20:10:32.795550 31858 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:10:32.795554 31858 net.cpp:139] Memory required for data: 6074800
I0428 20:10:32.795563 31858 layer_factory.hpp:77] Creating layer pool0
I0428 20:10:32.795569 31858 net.cpp:86] Creating Layer pool0
I0428 20:10:32.795572 31858 net.cpp:408] pool0 <- conv0
I0428 20:10:32.795577 31858 net.cpp:382] pool0 -> pool0
I0428 20:10:32.795611 31858 net.cpp:124] Setting up pool0
I0428 20:10:32.795616 31858 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:10:32.795619 31858 net.cpp:139] Memory required for data: 7514800
I0428 20:10:32.795622 31858 layer_factory.hpp:77] Creating layer conv1
I0428 20:10:32.795630 31858 net.cpp:86] Creating Layer conv1
I0428 20:10:32.795634 31858 net.cpp:408] conv1 <- pool0
I0428 20:10:32.795637 31858 net.cpp:382] conv1 -> conv1
I0428 20:10:32.797395 31858 net.cpp:124] Setting up conv1
I0428 20:10:32.797423 31858 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:10:32.797427 31858 net.cpp:139] Memory required for data: 8794800
I0428 20:10:32.797436 31858 layer_factory.hpp:77] Creating layer pool1
I0428 20:10:32.797442 31858 net.cpp:86] Creating Layer pool1
I0428 20:10:32.797446 31858 net.cpp:408] pool1 <- conv1
I0428 20:10:32.797451 31858 net.cpp:382] pool1 -> pool1
I0428 20:10:32.797500 31858 net.cpp:124] Setting up pool1
I0428 20:10:32.797507 31858 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:10:32.797509 31858 net.cpp:139] Memory required for data: 9114800
I0428 20:10:32.797513 31858 layer_factory.hpp:77] Creating layer ip1
I0428 20:10:32.797519 31858 net.cpp:86] Creating Layer ip1
I0428 20:10:32.797523 31858 net.cpp:408] ip1 <- pool1
I0428 20:10:32.797528 31858 net.cpp:382] ip1 -> ip1
I0428 20:10:32.797777 31858 net.cpp:124] Setting up ip1
I0428 20:10:32.797801 31858 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:10:32.797804 31858 net.cpp:139] Memory required for data: 9124800
I0428 20:10:32.797811 31858 layer_factory.hpp:77] Creating layer relu1
I0428 20:10:32.797823 31858 net.cpp:86] Creating Layer relu1
I0428 20:10:32.797827 31858 net.cpp:408] relu1 <- ip1
I0428 20:10:32.797830 31858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:10:32.797982 31858 net.cpp:124] Setting up relu1
I0428 20:10:32.797991 31858 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:10:32.797994 31858 net.cpp:139] Memory required for data: 9134800
I0428 20:10:32.797997 31858 layer_factory.hpp:77] Creating layer ip2
I0428 20:10:32.798003 31858 net.cpp:86] Creating Layer ip2
I0428 20:10:32.798007 31858 net.cpp:408] ip2 <- ip1
I0428 20:10:32.798012 31858 net.cpp:382] ip2 -> ip2
I0428 20:10:32.798115 31858 net.cpp:124] Setting up ip2
I0428 20:10:32.798122 31858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:32.798126 31858 net.cpp:139] Memory required for data: 9138800
I0428 20:10:32.798131 31858 layer_factory.hpp:77] Creating layer relu2
I0428 20:10:32.798142 31858 net.cpp:86] Creating Layer relu2
I0428 20:10:32.798146 31858 net.cpp:408] relu2 <- ip2
I0428 20:10:32.798149 31858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:10:32.798319 31858 net.cpp:124] Setting up relu2
I0428 20:10:32.798328 31858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:32.798331 31858 net.cpp:139] Memory required for data: 9142800
I0428 20:10:32.798334 31858 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:10:32.798346 31858 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:10:32.798348 31858 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:10:32.798357 31858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:10:32.798372 31858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:10:32.798405 31858 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:10:32.798410 31858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:32.798413 31858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:10:32.798416 31858 net.cpp:139] Memory required for data: 9150800
I0428 20:10:32.798419 31858 layer_factory.hpp:77] Creating layer accuracy
I0428 20:10:32.798424 31858 net.cpp:86] Creating Layer accuracy
I0428 20:10:32.798427 31858 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:10:32.798436 31858 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:10:32.798441 31858 net.cpp:382] accuracy -> accuracy
I0428 20:10:32.798447 31858 net.cpp:124] Setting up accuracy
I0428 20:10:32.798451 31858 net.cpp:131] Top shape: (1)
I0428 20:10:32.798454 31858 net.cpp:139] Memory required for data: 9150804
I0428 20:10:32.798456 31858 layer_factory.hpp:77] Creating layer loss
I0428 20:10:32.798460 31858 net.cpp:86] Creating Layer loss
I0428 20:10:32.798463 31858 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:10:32.798466 31858 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:10:32.798470 31858 net.cpp:382] loss -> loss
I0428 20:10:32.798475 31858 layer_factory.hpp:77] Creating layer loss
I0428 20:10:32.798754 31858 net.cpp:124] Setting up loss
I0428 20:10:32.798763 31858 net.cpp:131] Top shape: (1)
I0428 20:10:32.798768 31858 net.cpp:134]     with loss weight 1
I0428 20:10:32.798774 31858 net.cpp:139] Memory required for data: 9150808
I0428 20:10:32.798776 31858 net.cpp:200] loss needs backward computation.
I0428 20:10:32.798780 31858 net.cpp:202] accuracy does not need backward computation.
I0428 20:10:32.798784 31858 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:10:32.798787 31858 net.cpp:200] relu2 needs backward computation.
I0428 20:10:32.798790 31858 net.cpp:200] ip2 needs backward computation.
I0428 20:10:32.798794 31858 net.cpp:200] relu1 needs backward computation.
I0428 20:10:32.798795 31858 net.cpp:200] ip1 needs backward computation.
I0428 20:10:32.798799 31858 net.cpp:200] pool1 needs backward computation.
I0428 20:10:32.798802 31858 net.cpp:200] conv1 needs backward computation.
I0428 20:10:32.798805 31858 net.cpp:200] pool0 needs backward computation.
I0428 20:10:32.798809 31858 net.cpp:200] conv0 needs backward computation.
I0428 20:10:32.798811 31858 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:10:32.798815 31858 net.cpp:202] mnist does not need backward computation.
I0428 20:10:32.798817 31858 net.cpp:244] This network produces output accuracy
I0428 20:10:32.798821 31858 net.cpp:244] This network produces output loss
I0428 20:10:32.798830 31858 net.cpp:257] Network initialization done.
I0428 20:10:32.798882 31858 solver.cpp:56] Solver scaffolding done.
I0428 20:10:32.799266 31858 caffe.cpp:248] Starting Optimization
I0428 20:10:32.799273 31858 solver.cpp:273] Solving LeNet
I0428 20:10:32.799276 31858 solver.cpp:274] Learning Rate Policy: inv
I0428 20:10:32.800076 31858 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:10:32.806035 31858 blocking_queue.cpp:49] Waiting for data
I0428 20:10:32.880513 31865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:32.881163 31858 solver.cpp:398]     Test net output #0: accuracy = 0.0961
I0428 20:10:32.881184 31858 solver.cpp:398]     Test net output #1: loss = 2.32216 (* 1 = 2.32216 loss)
I0428 20:10:32.884935 31858 solver.cpp:219] Iteration 0 (-1.14242e-31 iter/s, 0.0856346s/100 iters), loss = 2.32303
I0428 20:10:32.884959 31858 solver.cpp:238]     Train net output #0: loss = 2.32303 (* 1 = 2.32303 loss)
I0428 20:10:32.884971 31858 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:10:33.000315 31858 solver.cpp:219] Iteration 100 (866.969 iter/s, 0.115344s/100 iters), loss = 0.555183
I0428 20:10:33.000341 31858 solver.cpp:238]     Train net output #0: loss = 0.555183 (* 1 = 0.555183 loss)
I0428 20:10:33.000349 31858 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:10:33.114506 31858 solver.cpp:219] Iteration 200 (876.012 iter/s, 0.114154s/100 iters), loss = 0.878027
I0428 20:10:33.114531 31858 solver.cpp:238]     Train net output #0: loss = 0.878027 (* 1 = 0.878027 loss)
I0428 20:10:33.114537 31858 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:10:33.228727 31858 solver.cpp:219] Iteration 300 (875.754 iter/s, 0.114187s/100 iters), loss = 0.596781
I0428 20:10:33.228751 31858 solver.cpp:238]     Train net output #0: loss = 0.596781 (* 1 = 0.596781 loss)
I0428 20:10:33.228757 31858 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:10:33.342819 31858 solver.cpp:219] Iteration 400 (876.746 iter/s, 0.114058s/100 iters), loss = 0.7803
I0428 20:10:33.342844 31858 solver.cpp:238]     Train net output #0: loss = 0.7803 (* 1 = 0.7803 loss)
I0428 20:10:33.342864 31858 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:10:33.456295 31858 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:10:33.511523 31865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:33.512142 31858 solver.cpp:398]     Test net output #0: accuracy = 0.8451
I0428 20:10:33.512161 31858 solver.cpp:398]     Test net output #1: loss = 0.573134 (* 1 = 0.573134 loss)
I0428 20:10:33.513309 31858 solver.cpp:219] Iteration 500 (586.676 iter/s, 0.170452s/100 iters), loss = 0.548143
I0428 20:10:33.513373 31858 solver.cpp:238]     Train net output #0: loss = 0.548143 (* 1 = 0.548143 loss)
I0428 20:10:33.513382 31858 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:10:33.644178 31858 solver.cpp:219] Iteration 600 (764.56 iter/s, 0.130794s/100 iters), loss = 0.579196
I0428 20:10:33.644202 31858 solver.cpp:238]     Train net output #0: loss = 0.579196 (* 1 = 0.579196 loss)
I0428 20:10:33.644224 31858 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:10:33.774642 31858 solver.cpp:219] Iteration 700 (766.707 iter/s, 0.130428s/100 iters), loss = 0.516297
I0428 20:10:33.774667 31858 solver.cpp:238]     Train net output #0: loss = 0.516297 (* 1 = 0.516297 loss)
I0428 20:10:33.774672 31858 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:10:33.905508 31858 solver.cpp:219] Iteration 800 (764.361 iter/s, 0.130828s/100 iters), loss = 0.729044
I0428 20:10:33.905532 31858 solver.cpp:238]     Train net output #0: loss = 0.729044 (* 1 = 0.729044 loss)
I0428 20:10:33.905556 31858 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:10:34.032369 31858 solver.cpp:219] Iteration 900 (788.491 iter/s, 0.126824s/100 iters), loss = 0.820686
I0428 20:10:34.032397 31858 solver.cpp:238]     Train net output #0: loss = 0.820686 (* 1 = 0.820686 loss)
I0428 20:10:34.032423 31858 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:10:34.070891 31864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:34.146864 31858 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:10:34.148463 31858 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:10:34.149490 31858 solver.cpp:311] Iteration 1000, loss = 0.564155
I0428 20:10:34.149507 31858 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:10:34.205569 31865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:10:34.206189 31858 solver.cpp:398]     Test net output #0: accuracy = 0.8686
I0428 20:10:34.206207 31858 solver.cpp:398]     Test net output #1: loss = 0.541707 (* 1 = 0.541707 loss)
I0428 20:10:34.206212 31858 solver.cpp:316] Optimization Done.
I0428 20:10:34.206215 31858 caffe.cpp:259] Optimization Done.
