I0428 20:34:34.282992  4491 caffe.cpp:218] Using GPUs 0
I0428 20:34:34.320405  4491 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:34:34.832857  4491 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1607.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:34:34.832998  4491 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1607.prototxt
I0428 20:34:34.833372  4491 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:34:34.833390  4491 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:34:34.833480  4491 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:34.833555  4491 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:34.833653  4491 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:34:34.833678  4491 net.cpp:86] Creating Layer mnist
I0428 20:34:34.833684  4491 net.cpp:382] mnist -> data
I0428 20:34:34.833706  4491 net.cpp:382] mnist -> label
I0428 20:34:34.834805  4491 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:34:34.837499  4491 net.cpp:124] Setting up mnist
I0428 20:34:34.837517  4491 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:34:34.837525  4491 net.cpp:131] Top shape: 64 (64)
I0428 20:34:34.837528  4491 net.cpp:139] Memory required for data: 200960
I0428 20:34:34.837535  4491 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:34.837550  4491 net.cpp:86] Creating Layer conv0
I0428 20:34:34.837555  4491 net.cpp:408] conv0 <- data
I0428 20:34:34.837568  4491 net.cpp:382] conv0 -> conv0
I0428 20:34:35.100566  4491 net.cpp:124] Setting up conv0
I0428 20:34:35.100592  4491 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:34:35.100596  4491 net.cpp:139] Memory required for data: 14946560
I0428 20:34:35.100627  4491 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:35.100641  4491 net.cpp:86] Creating Layer pool0
I0428 20:34:35.100644  4491 net.cpp:408] pool0 <- conv0
I0428 20:34:35.100664  4491 net.cpp:382] pool0 -> pool0
I0428 20:34:35.100709  4491 net.cpp:124] Setting up pool0
I0428 20:34:35.100715  4491 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:34:35.100718  4491 net.cpp:139] Memory required for data: 18632960
I0428 20:34:35.100720  4491 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:35.100730  4491 net.cpp:86] Creating Layer conv1
I0428 20:34:35.100733  4491 net.cpp:408] conv1 <- pool0
I0428 20:34:35.100739  4491 net.cpp:382] conv1 -> conv1
I0428 20:34:35.104039  4491 net.cpp:124] Setting up conv1
I0428 20:34:35.104053  4491 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:34:35.104073  4491 net.cpp:139] Memory required for data: 19452160
I0428 20:34:35.104080  4491 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:35.104087  4491 net.cpp:86] Creating Layer pool1
I0428 20:34:35.104090  4491 net.cpp:408] pool1 <- conv1
I0428 20:34:35.104095  4491 net.cpp:382] pool1 -> pool1
I0428 20:34:35.104162  4491 net.cpp:124] Setting up pool1
I0428 20:34:35.104167  4491 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:34:35.104171  4491 net.cpp:139] Memory required for data: 19656960
I0428 20:34:35.104173  4491 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:35.104181  4491 net.cpp:86] Creating Layer ip1
I0428 20:34:35.104183  4491 net.cpp:408] ip1 <- pool1
I0428 20:34:35.104187  4491 net.cpp:382] ip1 -> ip1
I0428 20:34:35.104409  4491 net.cpp:124] Setting up ip1
I0428 20:34:35.104418  4491 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:34:35.104420  4491 net.cpp:139] Memory required for data: 19663360
I0428 20:34:35.104427  4491 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:35.104432  4491 net.cpp:86] Creating Layer relu1
I0428 20:34:35.104435  4491 net.cpp:408] relu1 <- ip1
I0428 20:34:35.104439  4491 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:35.104604  4491 net.cpp:124] Setting up relu1
I0428 20:34:35.104611  4491 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:34:35.104614  4491 net.cpp:139] Memory required for data: 19669760
I0428 20:34:35.104616  4491 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:35.104622  4491 net.cpp:86] Creating Layer ip2
I0428 20:34:35.104625  4491 net.cpp:408] ip2 <- ip1
I0428 20:34:35.104629  4491 net.cpp:382] ip2 -> ip2
I0428 20:34:35.104714  4491 net.cpp:124] Setting up ip2
I0428 20:34:35.104722  4491 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:35.104724  4491 net.cpp:139] Memory required for data: 19672320
I0428 20:34:35.104729  4491 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:35.104734  4491 net.cpp:86] Creating Layer relu2
I0428 20:34:35.104737  4491 net.cpp:408] relu2 <- ip2
I0428 20:34:35.104742  4491 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:35.105540  4491 net.cpp:124] Setting up relu2
I0428 20:34:35.105567  4491 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:35.105571  4491 net.cpp:139] Memory required for data: 19674880
I0428 20:34:35.105574  4491 layer_factory.hpp:77] Creating layer loss
I0428 20:34:35.105594  4491 net.cpp:86] Creating Layer loss
I0428 20:34:35.105598  4491 net.cpp:408] loss <- ip2
I0428 20:34:35.105602  4491 net.cpp:408] loss <- label
I0428 20:34:35.105607  4491 net.cpp:382] loss -> loss
I0428 20:34:35.105623  4491 layer_factory.hpp:77] Creating layer loss
I0428 20:34:35.105855  4491 net.cpp:124] Setting up loss
I0428 20:34:35.105866  4491 net.cpp:131] Top shape: (1)
I0428 20:34:35.105870  4491 net.cpp:134]     with loss weight 1
I0428 20:34:35.105883  4491 net.cpp:139] Memory required for data: 19674884
I0428 20:34:35.105886  4491 net.cpp:200] loss needs backward computation.
I0428 20:34:35.105890  4491 net.cpp:200] relu2 needs backward computation.
I0428 20:34:35.105893  4491 net.cpp:200] ip2 needs backward computation.
I0428 20:34:35.105896  4491 net.cpp:200] relu1 needs backward computation.
I0428 20:34:35.105900  4491 net.cpp:200] ip1 needs backward computation.
I0428 20:34:35.105912  4491 net.cpp:200] pool1 needs backward computation.
I0428 20:34:35.105916  4491 net.cpp:200] conv1 needs backward computation.
I0428 20:34:35.105918  4491 net.cpp:200] pool0 needs backward computation.
I0428 20:34:35.105921  4491 net.cpp:200] conv0 needs backward computation.
I0428 20:34:35.105926  4491 net.cpp:202] mnist does not need backward computation.
I0428 20:34:35.105928  4491 net.cpp:244] This network produces output loss
I0428 20:34:35.105938  4491 net.cpp:257] Network initialization done.
I0428 20:34:35.106220  4491 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1607.prototxt
I0428 20:34:35.106261  4491 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:34:35.106356  4491 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:35.106420  4491 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:35.106464  4491 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:34:35.106474  4491 net.cpp:86] Creating Layer mnist
I0428 20:34:35.106479  4491 net.cpp:382] mnist -> data
I0428 20:34:35.106487  4491 net.cpp:382] mnist -> label
I0428 20:34:35.106567  4491 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:34:35.107717  4491 net.cpp:124] Setting up mnist
I0428 20:34:35.107761  4491 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:34:35.107769  4491 net.cpp:131] Top shape: 100 (100)
I0428 20:34:35.107785  4491 net.cpp:139] Memory required for data: 314000
I0428 20:34:35.107790  4491 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:34:35.107796  4491 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:34:35.107800  4491 net.cpp:408] label_mnist_1_split <- label
I0428 20:34:35.107805  4491 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:34:35.107810  4491 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:34:35.107924  4491 net.cpp:124] Setting up label_mnist_1_split
I0428 20:34:35.107933  4491 net.cpp:131] Top shape: 100 (100)
I0428 20:34:35.107936  4491 net.cpp:131] Top shape: 100 (100)
I0428 20:34:35.107939  4491 net.cpp:139] Memory required for data: 314800
I0428 20:34:35.107942  4491 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:35.107951  4491 net.cpp:86] Creating Layer conv0
I0428 20:34:35.107954  4491 net.cpp:408] conv0 <- data
I0428 20:34:35.107961  4491 net.cpp:382] conv0 -> conv0
I0428 20:34:35.109738  4491 net.cpp:124] Setting up conv0
I0428 20:34:35.109767  4491 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:34:35.109771  4491 net.cpp:139] Memory required for data: 23354800
I0428 20:34:35.109781  4491 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:35.109788  4491 net.cpp:86] Creating Layer pool0
I0428 20:34:35.109792  4491 net.cpp:408] pool0 <- conv0
I0428 20:34:35.109797  4491 net.cpp:382] pool0 -> pool0
I0428 20:34:35.109849  4491 net.cpp:124] Setting up pool0
I0428 20:34:35.109855  4491 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:34:35.109858  4491 net.cpp:139] Memory required for data: 29114800
I0428 20:34:35.109861  4491 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:35.109872  4491 net.cpp:86] Creating Layer conv1
I0428 20:34:35.109875  4491 net.cpp:408] conv1 <- pool0
I0428 20:34:35.109881  4491 net.cpp:382] conv1 -> conv1
I0428 20:34:35.113179  4491 net.cpp:124] Setting up conv1
I0428 20:34:35.113193  4491 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:34:35.113211  4491 net.cpp:139] Memory required for data: 30394800
I0428 20:34:35.113234  4491 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:35.113241  4491 net.cpp:86] Creating Layer pool1
I0428 20:34:35.113245  4491 net.cpp:408] pool1 <- conv1
I0428 20:34:35.113250  4491 net.cpp:382] pool1 -> pool1
I0428 20:34:35.113299  4491 net.cpp:124] Setting up pool1
I0428 20:34:35.113306  4491 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:34:35.113308  4491 net.cpp:139] Memory required for data: 30714800
I0428 20:34:35.113310  4491 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:35.113318  4491 net.cpp:86] Creating Layer ip1
I0428 20:34:35.113322  4491 net.cpp:408] ip1 <- pool1
I0428 20:34:35.113325  4491 net.cpp:382] ip1 -> ip1
I0428 20:34:35.113533  4491 net.cpp:124] Setting up ip1
I0428 20:34:35.113540  4491 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:34:35.113543  4491 net.cpp:139] Memory required for data: 30724800
I0428 20:34:35.113550  4491 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:35.113556  4491 net.cpp:86] Creating Layer relu1
I0428 20:34:35.113559  4491 net.cpp:408] relu1 <- ip1
I0428 20:34:35.113564  4491 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:35.113716  4491 net.cpp:124] Setting up relu1
I0428 20:34:35.113725  4491 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:34:35.113729  4491 net.cpp:139] Memory required for data: 30734800
I0428 20:34:35.113732  4491 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:35.113740  4491 net.cpp:86] Creating Layer ip2
I0428 20:34:35.113744  4491 net.cpp:408] ip2 <- ip1
I0428 20:34:35.113750  4491 net.cpp:382] ip2 -> ip2
I0428 20:34:35.113847  4491 net.cpp:124] Setting up ip2
I0428 20:34:35.113853  4491 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:35.113857  4491 net.cpp:139] Memory required for data: 30738800
I0428 20:34:35.113862  4491 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:35.113867  4491 net.cpp:86] Creating Layer relu2
I0428 20:34:35.113869  4491 net.cpp:408] relu2 <- ip2
I0428 20:34:35.113873  4491 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:35.114095  4491 net.cpp:124] Setting up relu2
I0428 20:34:35.114104  4491 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:35.114107  4491 net.cpp:139] Memory required for data: 30742800
I0428 20:34:35.114110  4491 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:34:35.114115  4491 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:34:35.114118  4491 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:34:35.114123  4491 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:34:35.114140  4491 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:34:35.114179  4491 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:34:35.114186  4491 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:35.114189  4491 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:35.114192  4491 net.cpp:139] Memory required for data: 30750800
I0428 20:34:35.114195  4491 layer_factory.hpp:77] Creating layer accuracy
I0428 20:34:35.114202  4491 net.cpp:86] Creating Layer accuracy
I0428 20:34:35.114205  4491 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:34:35.114209  4491 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:34:35.114213  4491 net.cpp:382] accuracy -> accuracy
I0428 20:34:35.114222  4491 net.cpp:124] Setting up accuracy
I0428 20:34:35.114225  4491 net.cpp:131] Top shape: (1)
I0428 20:34:35.114228  4491 net.cpp:139] Memory required for data: 30750804
I0428 20:34:35.114238  4491 layer_factory.hpp:77] Creating layer loss
I0428 20:34:35.114241  4491 net.cpp:86] Creating Layer loss
I0428 20:34:35.114260  4491 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:34:35.114264  4491 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:34:35.114269  4491 net.cpp:382] loss -> loss
I0428 20:34:35.114274  4491 layer_factory.hpp:77] Creating layer loss
I0428 20:34:35.114547  4491 net.cpp:124] Setting up loss
I0428 20:34:35.114555  4491 net.cpp:131] Top shape: (1)
I0428 20:34:35.114559  4491 net.cpp:134]     with loss weight 1
I0428 20:34:35.114567  4491 net.cpp:139] Memory required for data: 30750808
I0428 20:34:35.114570  4491 net.cpp:200] loss needs backward computation.
I0428 20:34:35.114574  4491 net.cpp:202] accuracy does not need backward computation.
I0428 20:34:35.114578  4491 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:34:35.114581  4491 net.cpp:200] relu2 needs backward computation.
I0428 20:34:35.114583  4491 net.cpp:200] ip2 needs backward computation.
I0428 20:34:35.114586  4491 net.cpp:200] relu1 needs backward computation.
I0428 20:34:35.114589  4491 net.cpp:200] ip1 needs backward computation.
I0428 20:34:35.114593  4491 net.cpp:200] pool1 needs backward computation.
I0428 20:34:35.114595  4491 net.cpp:200] conv1 needs backward computation.
I0428 20:34:35.114599  4491 net.cpp:200] pool0 needs backward computation.
I0428 20:34:35.114603  4491 net.cpp:200] conv0 needs backward computation.
I0428 20:34:35.114606  4491 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:34:35.114610  4491 net.cpp:202] mnist does not need backward computation.
I0428 20:34:35.114614  4491 net.cpp:244] This network produces output accuracy
I0428 20:34:35.114616  4491 net.cpp:244] This network produces output loss
I0428 20:34:35.114626  4491 net.cpp:257] Network initialization done.
I0428 20:34:35.114662  4491 solver.cpp:56] Solver scaffolding done.
I0428 20:34:35.114935  4491 caffe.cpp:248] Starting Optimization
I0428 20:34:35.114943  4491 solver.cpp:273] Solving LeNet
I0428 20:34:35.114944  4491 solver.cpp:274] Learning Rate Policy: inv
I0428 20:34:35.115187  4491 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:34:35.224336  4498 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:35.227196  4491 solver.cpp:398]     Test net output #0: accuracy = 0.1224
I0428 20:34:35.227231  4491 solver.cpp:398]     Test net output #1: loss = 2.3016 (* 1 = 2.3016 loss)
I0428 20:34:35.231678  4491 solver.cpp:219] Iteration 0 (-1.25405e-31 iter/s, 0.116706s/100 iters), loss = 2.30383
I0428 20:34:35.231717  4491 solver.cpp:238]     Train net output #0: loss = 2.30383 (* 1 = 2.30383 loss)
I0428 20:34:35.231729  4491 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:34:35.458618  4491 solver.cpp:219] Iteration 100 (440.731 iter/s, 0.226896s/100 iters), loss = 0.798652
I0428 20:34:35.458663  4491 solver.cpp:238]     Train net output #0: loss = 0.798652 (* 1 = 0.798652 loss)
I0428 20:34:35.458670  4491 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:34:35.686247  4491 solver.cpp:219] Iteration 200 (439.429 iter/s, 0.227568s/100 iters), loss = 0.672859
I0428 20:34:35.686286  4491 solver.cpp:238]     Train net output #0: loss = 0.672859 (* 1 = 0.672859 loss)
I0428 20:34:35.686292  4491 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:34:35.917250  4491 solver.cpp:219] Iteration 300 (432.996 iter/s, 0.230949s/100 iters), loss = 0.418434
I0428 20:34:35.917291  4491 solver.cpp:238]     Train net output #0: loss = 0.418434 (* 1 = 0.418434 loss)
I0428 20:34:35.917299  4491 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:34:36.149933  4491 solver.cpp:219] Iteration 400 (429.848 iter/s, 0.232641s/100 iters), loss = 0.683882
I0428 20:34:36.149960  4491 solver.cpp:238]     Train net output #0: loss = 0.683882 (* 1 = 0.683882 loss)
I0428 20:34:36.149966  4491 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:34:36.376010  4491 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:34:36.481619  4498 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:36.484382  4491 solver.cpp:398]     Test net output #0: accuracy = 0.7905
I0428 20:34:36.484418  4491 solver.cpp:398]     Test net output #1: loss = 0.548156 (* 1 = 0.548156 loss)
I0428 20:34:36.486646  4491 solver.cpp:219] Iteration 500 (297.043 iter/s, 0.336651s/100 iters), loss = 0.765651
I0428 20:34:36.486685  4491 solver.cpp:238]     Train net output #0: loss = 0.765651 (* 1 = 0.765651 loss)
I0428 20:34:36.486706  4491 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:34:36.718668  4491 solver.cpp:219] Iteration 600 (431.104 iter/s, 0.231963s/100 iters), loss = 0.319872
I0428 20:34:36.718719  4491 solver.cpp:238]     Train net output #0: loss = 0.319872 (* 1 = 0.319872 loss)
I0428 20:34:36.718725  4491 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:34:36.952289  4491 solver.cpp:219] Iteration 700 (428.135 iter/s, 0.233571s/100 iters), loss = 0.670159
I0428 20:34:36.952338  4491 solver.cpp:238]     Train net output #0: loss = 0.670159 (* 1 = 0.670159 loss)
I0428 20:34:36.952347  4491 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:34:37.186316  4491 solver.cpp:219] Iteration 800 (427.421 iter/s, 0.233961s/100 iters), loss = 0.518085
I0428 20:34:37.186343  4491 solver.cpp:238]     Train net output #0: loss = 0.518085 (* 1 = 0.518085 loss)
I0428 20:34:37.186350  4491 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:34:37.417817  4491 solver.cpp:219] Iteration 900 (432.046 iter/s, 0.231457s/100 iters), loss = 0.285476
I0428 20:34:37.417860  4491 solver.cpp:238]     Train net output #0: loss = 0.285476 (* 1 = 0.285476 loss)
I0428 20:34:37.417867  4491 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:34:37.493422  4497 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:37.642809  4491 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:34:37.647119  4491 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:34:37.649116  4491 solver.cpp:311] Iteration 1000, loss = 0.455544
I0428 20:34:37.649148  4491 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:34:37.757503  4498 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:37.761344  4491 solver.cpp:398]     Test net output #0: accuracy = 0.7971
I0428 20:34:37.761384  4491 solver.cpp:398]     Test net output #1: loss = 0.502466 (* 1 = 0.502466 loss)
I0428 20:34:37.761389  4491 solver.cpp:316] Optimization Done.
I0428 20:34:37.761391  4491 caffe.cpp:259] Optimization Done.
