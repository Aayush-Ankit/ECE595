I0428 19:42:16.865059 25030 caffe.cpp:218] Using GPUs 0
I0428 19:42:16.900316 25030 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:17.406433 25030 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test389.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:17.406584 25030 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test389.prototxt
I0428 19:42:17.407011 25030 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:17.407030 25030 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:17.407135 25030 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:42:17.407215 25030 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:17.407317 25030 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:17.407341 25030 net.cpp:86] Creating Layer mnist
I0428 19:42:17.407351 25030 net.cpp:382] mnist -> data
I0428 19:42:17.407372 25030 net.cpp:382] mnist -> label
I0428 19:42:17.408463 25030 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:17.410933 25030 net.cpp:124] Setting up mnist
I0428 19:42:17.410950 25030 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:17.410956 25030 net.cpp:131] Top shape: 64 (64)
I0428 19:42:17.410960 25030 net.cpp:139] Memory required for data: 200960
I0428 19:42:17.410967 25030 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:17.411012 25030 net.cpp:86] Creating Layer conv0
I0428 19:42:17.411034 25030 net.cpp:408] conv0 <- data
I0428 19:42:17.411048 25030 net.cpp:382] conv0 -> conv0
I0428 19:42:17.692461 25030 net.cpp:124] Setting up conv0
I0428 19:42:17.692487 25030 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:17.692492 25030 net.cpp:139] Memory required for data: 495872
I0428 19:42:17.692507 25030 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:17.692530 25030 net.cpp:86] Creating Layer pool0
I0428 19:42:17.692534 25030 net.cpp:408] pool0 <- conv0
I0428 19:42:17.692539 25030 net.cpp:382] pool0 -> pool0
I0428 19:42:17.692584 25030 net.cpp:124] Setting up pool0
I0428 19:42:17.692592 25030 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:17.692595 25030 net.cpp:139] Memory required for data: 569600
I0428 19:42:17.692598 25030 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:17.692608 25030 net.cpp:86] Creating Layer conv1
I0428 19:42:17.692611 25030 net.cpp:408] conv1 <- pool0
I0428 19:42:17.692616 25030 net.cpp:382] conv1 -> conv1
I0428 19:42:17.694504 25030 net.cpp:124] Setting up conv1
I0428 19:42:17.694519 25030 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:42:17.694524 25030 net.cpp:139] Memory required for data: 733440
I0428 19:42:17.694532 25030 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:17.694540 25030 net.cpp:86] Creating Layer pool1
I0428 19:42:17.694545 25030 net.cpp:408] pool1 <- conv1
I0428 19:42:17.694550 25030 net.cpp:382] pool1 -> pool1
I0428 19:42:17.694587 25030 net.cpp:124] Setting up pool1
I0428 19:42:17.694594 25030 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:42:17.694597 25030 net.cpp:139] Memory required for data: 774400
I0428 19:42:17.694600 25030 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:17.694607 25030 net.cpp:86] Creating Layer ip1
I0428 19:42:17.694612 25030 net.cpp:408] ip1 <- pool1
I0428 19:42:17.694617 25030 net.cpp:382] ip1 -> ip1
I0428 19:42:17.695613 25030 net.cpp:124] Setting up ip1
I0428 19:42:17.695637 25030 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:17.695641 25030 net.cpp:139] Memory required for data: 787200
I0428 19:42:17.695649 25030 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:17.695655 25030 net.cpp:86] Creating Layer relu1
I0428 19:42:17.695658 25030 net.cpp:408] relu1 <- ip1
I0428 19:42:17.695663 25030 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:17.695837 25030 net.cpp:124] Setting up relu1
I0428 19:42:17.695847 25030 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:17.695849 25030 net.cpp:139] Memory required for data: 800000
I0428 19:42:17.695853 25030 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:17.695859 25030 net.cpp:86] Creating Layer ip2
I0428 19:42:17.695863 25030 net.cpp:408] ip2 <- ip1
I0428 19:42:17.695868 25030 net.cpp:382] ip2 -> ip2
I0428 19:42:17.696836 25030 net.cpp:124] Setting up ip2
I0428 19:42:17.696849 25030 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:17.696853 25030 net.cpp:139] Memory required for data: 812800
I0428 19:42:17.696861 25030 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:17.696883 25030 net.cpp:86] Creating Layer relu2
I0428 19:42:17.696887 25030 net.cpp:408] relu2 <- ip2
I0428 19:42:17.696892 25030 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:17.697675 25030 net.cpp:124] Setting up relu2
I0428 19:42:17.697688 25030 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:42:17.697692 25030 net.cpp:139] Memory required for data: 825600
I0428 19:42:17.697696 25030 layer_factory.hpp:77] Creating layer ip3
I0428 19:42:17.697703 25030 net.cpp:86] Creating Layer ip3
I0428 19:42:17.697706 25030 net.cpp:408] ip3 <- ip2
I0428 19:42:17.697712 25030 net.cpp:382] ip3 -> ip3
I0428 19:42:17.697818 25030 net.cpp:124] Setting up ip3
I0428 19:42:17.697826 25030 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:17.697829 25030 net.cpp:139] Memory required for data: 828160
I0428 19:42:17.697837 25030 layer_factory.hpp:77] Creating layer relu3
I0428 19:42:17.697842 25030 net.cpp:86] Creating Layer relu3
I0428 19:42:17.697845 25030 net.cpp:408] relu3 <- ip3
I0428 19:42:17.697849 25030 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:42:17.698029 25030 net.cpp:124] Setting up relu3
I0428 19:42:17.698037 25030 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:17.698040 25030 net.cpp:139] Memory required for data: 830720
I0428 19:42:17.698043 25030 layer_factory.hpp:77] Creating layer loss
I0428 19:42:17.698050 25030 net.cpp:86] Creating Layer loss
I0428 19:42:17.698052 25030 net.cpp:408] loss <- ip3
I0428 19:42:17.698056 25030 net.cpp:408] loss <- label
I0428 19:42:17.698061 25030 net.cpp:382] loss -> loss
I0428 19:42:17.698096 25030 layer_factory.hpp:77] Creating layer loss
I0428 19:42:17.698360 25030 net.cpp:124] Setting up loss
I0428 19:42:17.698370 25030 net.cpp:131] Top shape: (1)
I0428 19:42:17.698374 25030 net.cpp:134]     with loss weight 1
I0428 19:42:17.698388 25030 net.cpp:139] Memory required for data: 830724
I0428 19:42:17.698406 25030 net.cpp:200] loss needs backward computation.
I0428 19:42:17.698410 25030 net.cpp:200] relu3 needs backward computation.
I0428 19:42:17.698413 25030 net.cpp:200] ip3 needs backward computation.
I0428 19:42:17.698416 25030 net.cpp:200] relu2 needs backward computation.
I0428 19:42:17.698418 25030 net.cpp:200] ip2 needs backward computation.
I0428 19:42:17.698421 25030 net.cpp:200] relu1 needs backward computation.
I0428 19:42:17.698424 25030 net.cpp:200] ip1 needs backward computation.
I0428 19:42:17.698427 25030 net.cpp:200] pool1 needs backward computation.
I0428 19:42:17.698431 25030 net.cpp:200] conv1 needs backward computation.
I0428 19:42:17.698433 25030 net.cpp:200] pool0 needs backward computation.
I0428 19:42:17.698436 25030 net.cpp:200] conv0 needs backward computation.
I0428 19:42:17.698439 25030 net.cpp:202] mnist does not need backward computation.
I0428 19:42:17.698442 25030 net.cpp:244] This network produces output loss
I0428 19:42:17.698467 25030 net.cpp:257] Network initialization done.
I0428 19:42:17.698875 25030 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test389.prototxt
I0428 19:42:17.698904 25030 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:17.698997 25030 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:42:17.699074 25030 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:17.699116 25030 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:17.699131 25030 net.cpp:86] Creating Layer mnist
I0428 19:42:17.699136 25030 net.cpp:382] mnist -> data
I0428 19:42:17.699143 25030 net.cpp:382] mnist -> label
I0428 19:42:17.699280 25030 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:17.701390 25030 net.cpp:124] Setting up mnist
I0428 19:42:17.701406 25030 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:17.701426 25030 net.cpp:131] Top shape: 100 (100)
I0428 19:42:17.701429 25030 net.cpp:139] Memory required for data: 314000
I0428 19:42:17.701450 25030 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:17.701457 25030 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:17.701462 25030 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:17.701467 25030 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:17.701473 25030 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:17.701556 25030 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:17.701565 25030 net.cpp:131] Top shape: 100 (100)
I0428 19:42:17.701570 25030 net.cpp:131] Top shape: 100 (100)
I0428 19:42:17.701573 25030 net.cpp:139] Memory required for data: 314800
I0428 19:42:17.701576 25030 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:17.701586 25030 net.cpp:86] Creating Layer conv0
I0428 19:42:17.701589 25030 net.cpp:408] conv0 <- data
I0428 19:42:17.701594 25030 net.cpp:382] conv0 -> conv0
I0428 19:42:17.703191 25030 net.cpp:124] Setting up conv0
I0428 19:42:17.703203 25030 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:17.703223 25030 net.cpp:139] Memory required for data: 775600
I0428 19:42:17.703232 25030 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:17.703238 25030 net.cpp:86] Creating Layer pool0
I0428 19:42:17.703241 25030 net.cpp:408] pool0 <- conv0
I0428 19:42:17.703246 25030 net.cpp:382] pool0 -> pool0
I0428 19:42:17.703280 25030 net.cpp:124] Setting up pool0
I0428 19:42:17.703286 25030 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:17.703289 25030 net.cpp:139] Memory required for data: 890800
I0428 19:42:17.703292 25030 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:17.703300 25030 net.cpp:86] Creating Layer conv1
I0428 19:42:17.703303 25030 net.cpp:408] conv1 <- pool0
I0428 19:42:17.703308 25030 net.cpp:382] conv1 -> conv1
I0428 19:42:17.704797 25030 net.cpp:124] Setting up conv1
I0428 19:42:17.704831 25030 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:42:17.704851 25030 net.cpp:139] Memory required for data: 1146800
I0428 19:42:17.704862 25030 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:17.704869 25030 net.cpp:86] Creating Layer pool1
I0428 19:42:17.704872 25030 net.cpp:408] pool1 <- conv1
I0428 19:42:17.704879 25030 net.cpp:382] pool1 -> pool1
I0428 19:42:17.704933 25030 net.cpp:124] Setting up pool1
I0428 19:42:17.704938 25030 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:42:17.704942 25030 net.cpp:139] Memory required for data: 1210800
I0428 19:42:17.704946 25030 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:17.704952 25030 net.cpp:86] Creating Layer ip1
I0428 19:42:17.704955 25030 net.cpp:408] ip1 <- pool1
I0428 19:42:17.704962 25030 net.cpp:382] ip1 -> ip1
I0428 19:42:17.705122 25030 net.cpp:124] Setting up ip1
I0428 19:42:17.705132 25030 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:17.705147 25030 net.cpp:139] Memory required for data: 1230800
I0428 19:42:17.705155 25030 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:17.705168 25030 net.cpp:86] Creating Layer relu1
I0428 19:42:17.705171 25030 net.cpp:408] relu1 <- ip1
I0428 19:42:17.705178 25030 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:17.705366 25030 net.cpp:124] Setting up relu1
I0428 19:42:17.705376 25030 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:17.705379 25030 net.cpp:139] Memory required for data: 1250800
I0428 19:42:17.705384 25030 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:17.705392 25030 net.cpp:86] Creating Layer ip2
I0428 19:42:17.705395 25030 net.cpp:408] ip2 <- ip1
I0428 19:42:17.705402 25030 net.cpp:382] ip2 -> ip2
I0428 19:42:17.705540 25030 net.cpp:124] Setting up ip2
I0428 19:42:17.705548 25030 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:17.705550 25030 net.cpp:139] Memory required for data: 1270800
I0428 19:42:17.705555 25030 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:17.705560 25030 net.cpp:86] Creating Layer relu2
I0428 19:42:17.705564 25030 net.cpp:408] relu2 <- ip2
I0428 19:42:17.705567 25030 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:17.705857 25030 net.cpp:124] Setting up relu2
I0428 19:42:17.705880 25030 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:42:17.705883 25030 net.cpp:139] Memory required for data: 1290800
I0428 19:42:17.705888 25030 layer_factory.hpp:77] Creating layer ip3
I0428 19:42:17.705910 25030 net.cpp:86] Creating Layer ip3
I0428 19:42:17.705914 25030 net.cpp:408] ip3 <- ip2
I0428 19:42:17.705919 25030 net.cpp:382] ip3 -> ip3
I0428 19:42:17.706050 25030 net.cpp:124] Setting up ip3
I0428 19:42:17.706058 25030 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:17.706061 25030 net.cpp:139] Memory required for data: 1294800
I0428 19:42:17.706069 25030 layer_factory.hpp:77] Creating layer relu3
I0428 19:42:17.706073 25030 net.cpp:86] Creating Layer relu3
I0428 19:42:17.706077 25030 net.cpp:408] relu3 <- ip3
I0428 19:42:17.706082 25030 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:42:17.706957 25030 net.cpp:124] Setting up relu3
I0428 19:42:17.706969 25030 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:17.706989 25030 net.cpp:139] Memory required for data: 1298800
I0428 19:42:17.706991 25030 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:42:17.706997 25030 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:42:17.707001 25030 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:42:17.707010 25030 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:42:17.707015 25030 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:42:17.707073 25030 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:42:17.707082 25030 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:17.707085 25030 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:17.707094 25030 net.cpp:139] Memory required for data: 1306800
I0428 19:42:17.707098 25030 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:17.707108 25030 net.cpp:86] Creating Layer accuracy
I0428 19:42:17.707111 25030 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:42:17.707115 25030 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:17.707121 25030 net.cpp:382] accuracy -> accuracy
I0428 19:42:17.707129 25030 net.cpp:124] Setting up accuracy
I0428 19:42:17.707134 25030 net.cpp:131] Top shape: (1)
I0428 19:42:17.707136 25030 net.cpp:139] Memory required for data: 1306804
I0428 19:42:17.707139 25030 layer_factory.hpp:77] Creating layer loss
I0428 19:42:17.707144 25030 net.cpp:86] Creating Layer loss
I0428 19:42:17.707147 25030 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:42:17.707151 25030 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:17.707155 25030 net.cpp:382] loss -> loss
I0428 19:42:17.707161 25030 layer_factory.hpp:77] Creating layer loss
I0428 19:42:17.707424 25030 net.cpp:124] Setting up loss
I0428 19:42:17.707435 25030 net.cpp:131] Top shape: (1)
I0428 19:42:17.707439 25030 net.cpp:134]     with loss weight 1
I0428 19:42:17.707445 25030 net.cpp:139] Memory required for data: 1306808
I0428 19:42:17.707458 25030 net.cpp:200] loss needs backward computation.
I0428 19:42:17.707463 25030 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:17.707466 25030 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:42:17.707469 25030 net.cpp:200] relu3 needs backward computation.
I0428 19:42:17.707473 25030 net.cpp:200] ip3 needs backward computation.
I0428 19:42:17.707475 25030 net.cpp:200] relu2 needs backward computation.
I0428 19:42:17.707484 25030 net.cpp:200] ip2 needs backward computation.
I0428 19:42:17.707489 25030 net.cpp:200] relu1 needs backward computation.
I0428 19:42:17.707490 25030 net.cpp:200] ip1 needs backward computation.
I0428 19:42:17.707494 25030 net.cpp:200] pool1 needs backward computation.
I0428 19:42:17.707496 25030 net.cpp:200] conv1 needs backward computation.
I0428 19:42:17.707499 25030 net.cpp:200] pool0 needs backward computation.
I0428 19:42:17.707502 25030 net.cpp:200] conv0 needs backward computation.
I0428 19:42:17.707506 25030 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:17.707510 25030 net.cpp:202] mnist does not need backward computation.
I0428 19:42:17.707512 25030 net.cpp:244] This network produces output accuracy
I0428 19:42:17.707516 25030 net.cpp:244] This network produces output loss
I0428 19:42:17.707528 25030 net.cpp:257] Network initialization done.
I0428 19:42:17.707571 25030 solver.cpp:56] Solver scaffolding done.
I0428 19:42:17.707967 25030 caffe.cpp:248] Starting Optimization
I0428 19:42:17.707973 25030 solver.cpp:273] Solving LeNet
I0428 19:42:17.707975 25030 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:17.708968 25030 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:17.711675 25030 blocking_queue.cpp:49] Waiting for data
I0428 19:42:17.783691 25037 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:17.784155 25030 solver.cpp:398]     Test net output #0: accuracy = 0.1125
I0428 19:42:17.784190 25030 solver.cpp:398]     Test net output #1: loss = 2.30174 (* 1 = 2.30174 loss)
I0428 19:42:17.786128 25030 solver.cpp:219] Iteration 0 (0 iter/s, 0.0781003s/100 iters), loss = 2.31324
I0428 19:42:17.786166 25030 solver.cpp:238]     Train net output #0: loss = 2.31324 (* 1 = 2.31324 loss)
I0428 19:42:17.786177 25030 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:17.857957 25030 solver.cpp:219] Iteration 100 (1392.9 iter/s, 0.0717927s/100 iters), loss = 0.793489
I0428 19:42:17.857998 25030 solver.cpp:238]     Train net output #0: loss = 0.793489 (* 1 = 0.793489 loss)
I0428 19:42:17.858005 25030 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:17.929579 25030 solver.cpp:219] Iteration 200 (1396.95 iter/s, 0.0715848s/100 iters), loss = 0.755933
I0428 19:42:17.929618 25030 solver.cpp:238]     Train net output #0: loss = 0.755933 (* 1 = 0.755933 loss)
I0428 19:42:17.929625 25030 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:18.002046 25030 solver.cpp:219] Iteration 300 (1380.95 iter/s, 0.0724141s/100 iters), loss = 0.47593
I0428 19:42:18.002085 25030 solver.cpp:238]     Train net output #0: loss = 0.47593 (* 1 = 0.47593 loss)
I0428 19:42:18.002091 25030 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:18.077904 25030 solver.cpp:219] Iteration 400 (1318.88 iter/s, 0.0758221s/100 iters), loss = 0.397463
I0428 19:42:18.077944 25030 solver.cpp:238]     Train net output #0: loss = 0.397463 (* 1 = 0.397463 loss)
I0428 19:42:18.077965 25030 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:18.150981 25030 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:18.203542 25037 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:18.203981 25030 solver.cpp:398]     Test net output #0: accuracy = 0.8343
I0428 19:42:18.204000 25030 solver.cpp:398]     Test net output #1: loss = 0.44946 (* 1 = 0.44946 loss)
I0428 19:42:18.204835 25030 solver.cpp:219] Iteration 500 (788.218 iter/s, 0.126869s/100 iters), loss = 0.55425
I0428 19:42:18.204859 25030 solver.cpp:238]     Train net output #0: loss = 0.55425 (* 1 = 0.55425 loss)
I0428 19:42:18.204890 25030 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:18.281919 25030 solver.cpp:219] Iteration 600 (1298.05 iter/s, 0.0770388s/100 iters), loss = 0.254538
I0428 19:42:18.281950 25030 solver.cpp:238]     Train net output #0: loss = 0.254538 (* 1 = 0.254538 loss)
I0428 19:42:18.281957 25030 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:18.354091 25030 solver.cpp:219] Iteration 700 (1386.37 iter/s, 0.0721306s/100 iters), loss = 0.307329
I0428 19:42:18.354116 25030 solver.cpp:238]     Train net output #0: loss = 0.307329 (* 1 = 0.307329 loss)
I0428 19:42:18.354137 25030 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:18.425079 25030 solver.cpp:219] Iteration 800 (1409.45 iter/s, 0.0709499s/100 iters), loss = 0.300573
I0428 19:42:18.425103 25030 solver.cpp:238]     Train net output #0: loss = 0.300573 (* 1 = 0.300573 loss)
I0428 19:42:18.425125 25030 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:18.495285 25030 solver.cpp:219] Iteration 900 (1425.16 iter/s, 0.0701675s/100 iters), loss = 0.197358
I0428 19:42:18.495311 25030 solver.cpp:238]     Train net output #0: loss = 0.197358 (* 1 = 0.197358 loss)
I0428 19:42:18.495333 25030 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:18.519153 25036 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:18.566028 25030 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:18.566879 25030 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:18.567428 25030 solver.cpp:311] Iteration 1000, loss = 0.0938853
I0428 19:42:18.567443 25030 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:18.642918 25037 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:18.643383 25030 solver.cpp:398]     Test net output #0: accuracy = 0.9694
I0428 19:42:18.643419 25030 solver.cpp:398]     Test net output #1: loss = 0.0965807 (* 1 = 0.0965807 loss)
I0428 19:42:18.643424 25030 solver.cpp:316] Optimization Done.
I0428 19:42:18.643426 25030 caffe.cpp:259] Optimization Done.
