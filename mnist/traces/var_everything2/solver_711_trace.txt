I0428 19:54:26.498518 27995 caffe.cpp:218] Using GPUs 0
I0428 19:54:26.532784 27995 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:27.038542 27995 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test711.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:27.038684 27995 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test711.prototxt
I0428 19:54:27.039058 27995 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:27.039075 27995 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:27.039166 27995 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:27.039242 27995 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:27.039342 27995 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:27.039368 27995 net.cpp:86] Creating Layer mnist
I0428 19:54:27.039376 27995 net.cpp:382] mnist -> data
I0428 19:54:27.039399 27995 net.cpp:382] mnist -> label
I0428 19:54:27.040505 27995 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:27.043268 27995 net.cpp:124] Setting up mnist
I0428 19:54:27.043287 27995 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:27.043298 27995 net.cpp:131] Top shape: 64 (64)
I0428 19:54:27.043303 27995 net.cpp:139] Memory required for data: 200960
I0428 19:54:27.043309 27995 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:27.043329 27995 net.cpp:86] Creating Layer conv0
I0428 19:54:27.043335 27995 net.cpp:408] conv0 <- data
I0428 19:54:27.043347 27995 net.cpp:382] conv0 -> conv0
I0428 19:54:27.316103 27995 net.cpp:124] Setting up conv0
I0428 19:54:27.316144 27995 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:27.316149 27995 net.cpp:139] Memory required for data: 938240
I0428 19:54:27.316182 27995 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:27.316211 27995 net.cpp:86] Creating Layer pool0
I0428 19:54:27.316215 27995 net.cpp:408] pool0 <- conv0
I0428 19:54:27.316221 27995 net.cpp:382] pool0 -> pool0
I0428 19:54:27.316268 27995 net.cpp:124] Setting up pool0
I0428 19:54:27.316278 27995 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:27.316282 27995 net.cpp:139] Memory required for data: 1122560
I0428 19:54:27.316284 27995 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:27.316294 27995 net.cpp:86] Creating Layer conv1
I0428 19:54:27.316298 27995 net.cpp:408] conv1 <- pool0
I0428 19:54:27.316303 27995 net.cpp:382] conv1 -> conv1
I0428 19:54:27.319247 27995 net.cpp:124] Setting up conv1
I0428 19:54:27.319277 27995 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:27.319280 27995 net.cpp:139] Memory required for data: 2760960
I0428 19:54:27.319289 27995 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:27.319296 27995 net.cpp:86] Creating Layer pool1
I0428 19:54:27.319300 27995 net.cpp:408] pool1 <- conv1
I0428 19:54:27.319308 27995 net.cpp:382] pool1 -> pool1
I0428 19:54:27.319363 27995 net.cpp:124] Setting up pool1
I0428 19:54:27.319370 27995 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:27.319372 27995 net.cpp:139] Memory required for data: 3170560
I0428 19:54:27.319375 27995 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:27.319382 27995 net.cpp:86] Creating Layer ip1
I0428 19:54:27.319386 27995 net.cpp:408] ip1 <- pool1
I0428 19:54:27.319391 27995 net.cpp:382] ip1 -> ip1
I0428 19:54:27.320960 27995 net.cpp:124] Setting up ip1
I0428 19:54:27.320976 27995 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:27.320981 27995 net.cpp:139] Memory required for data: 3183360
I0428 19:54:27.320989 27995 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:27.320996 27995 net.cpp:86] Creating Layer relu1
I0428 19:54:27.321000 27995 net.cpp:408] relu1 <- ip1
I0428 19:54:27.321005 27995 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:27.321224 27995 net.cpp:124] Setting up relu1
I0428 19:54:27.321234 27995 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:27.321238 27995 net.cpp:139] Memory required for data: 3196160
I0428 19:54:27.321241 27995 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:27.321249 27995 net.cpp:86] Creating Layer ip2
I0428 19:54:27.321251 27995 net.cpp:408] ip2 <- ip1
I0428 19:54:27.321257 27995 net.cpp:382] ip2 -> ip2
I0428 19:54:27.321396 27995 net.cpp:124] Setting up ip2
I0428 19:54:27.321405 27995 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:27.321408 27995 net.cpp:139] Memory required for data: 3198720
I0428 19:54:27.321415 27995 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:27.321429 27995 net.cpp:86] Creating Layer relu2
I0428 19:54:27.321434 27995 net.cpp:408] relu2 <- ip2
I0428 19:54:27.321439 27995 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:27.322182 27995 net.cpp:124] Setting up relu2
I0428 19:54:27.322196 27995 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:27.322216 27995 net.cpp:139] Memory required for data: 3201280
I0428 19:54:27.322221 27995 layer_factory.hpp:77] Creating layer loss
I0428 19:54:27.322229 27995 net.cpp:86] Creating Layer loss
I0428 19:54:27.322233 27995 net.cpp:408] loss <- ip2
I0428 19:54:27.322237 27995 net.cpp:408] loss <- label
I0428 19:54:27.322243 27995 net.cpp:382] loss -> loss
I0428 19:54:27.322263 27995 layer_factory.hpp:77] Creating layer loss
I0428 19:54:27.322566 27995 net.cpp:124] Setting up loss
I0428 19:54:27.322576 27995 net.cpp:131] Top shape: (1)
I0428 19:54:27.322579 27995 net.cpp:134]     with loss weight 1
I0428 19:54:27.322593 27995 net.cpp:139] Memory required for data: 3201284
I0428 19:54:27.322597 27995 net.cpp:200] loss needs backward computation.
I0428 19:54:27.322602 27995 net.cpp:200] relu2 needs backward computation.
I0428 19:54:27.322603 27995 net.cpp:200] ip2 needs backward computation.
I0428 19:54:27.322607 27995 net.cpp:200] relu1 needs backward computation.
I0428 19:54:27.322609 27995 net.cpp:200] ip1 needs backward computation.
I0428 19:54:27.322623 27995 net.cpp:200] pool1 needs backward computation.
I0428 19:54:27.322625 27995 net.cpp:200] conv1 needs backward computation.
I0428 19:54:27.322629 27995 net.cpp:200] pool0 needs backward computation.
I0428 19:54:27.322633 27995 net.cpp:200] conv0 needs backward computation.
I0428 19:54:27.322636 27995 net.cpp:202] mnist does not need backward computation.
I0428 19:54:27.322638 27995 net.cpp:244] This network produces output loss
I0428 19:54:27.322648 27995 net.cpp:257] Network initialization done.
I0428 19:54:27.322931 27995 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test711.prototxt
I0428 19:54:27.322955 27995 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:27.323037 27995 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:27.323099 27995 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:27.323144 27995 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:27.323155 27995 net.cpp:86] Creating Layer mnist
I0428 19:54:27.323160 27995 net.cpp:382] mnist -> data
I0428 19:54:27.323168 27995 net.cpp:382] mnist -> label
I0428 19:54:27.323284 27995 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:27.324455 27995 net.cpp:124] Setting up mnist
I0428 19:54:27.324483 27995 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:27.324488 27995 net.cpp:131] Top shape: 100 (100)
I0428 19:54:27.324491 27995 net.cpp:139] Memory required for data: 314000
I0428 19:54:27.324496 27995 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:27.324506 27995 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:27.324509 27995 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:27.324514 27995 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:27.324520 27995 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:27.324625 27995 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:27.324635 27995 net.cpp:131] Top shape: 100 (100)
I0428 19:54:27.324637 27995 net.cpp:131] Top shape: 100 (100)
I0428 19:54:27.324640 27995 net.cpp:139] Memory required for data: 314800
I0428 19:54:27.324643 27995 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:27.324651 27995 net.cpp:86] Creating Layer conv0
I0428 19:54:27.324654 27995 net.cpp:408] conv0 <- data
I0428 19:54:27.324659 27995 net.cpp:382] conv0 -> conv0
I0428 19:54:27.326328 27995 net.cpp:124] Setting up conv0
I0428 19:54:27.326342 27995 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:27.326345 27995 net.cpp:139] Memory required for data: 1466800
I0428 19:54:27.326354 27995 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:27.326359 27995 net.cpp:86] Creating Layer pool0
I0428 19:54:27.326362 27995 net.cpp:408] pool0 <- conv0
I0428 19:54:27.326367 27995 net.cpp:382] pool0 -> pool0
I0428 19:54:27.326416 27995 net.cpp:124] Setting up pool0
I0428 19:54:27.326421 27995 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:27.326423 27995 net.cpp:139] Memory required for data: 1754800
I0428 19:54:27.326426 27995 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:27.326434 27995 net.cpp:86] Creating Layer conv1
I0428 19:54:27.326437 27995 net.cpp:408] conv1 <- pool0
I0428 19:54:27.326442 27995 net.cpp:382] conv1 -> conv1
I0428 19:54:27.327980 27995 net.cpp:124] Setting up conv1
I0428 19:54:27.328008 27995 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:27.328012 27995 net.cpp:139] Memory required for data: 4314800
I0428 19:54:27.328021 27995 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:27.328027 27995 net.cpp:86] Creating Layer pool1
I0428 19:54:27.328030 27995 net.cpp:408] pool1 <- conv1
I0428 19:54:27.328037 27995 net.cpp:382] pool1 -> pool1
I0428 19:54:27.328069 27995 net.cpp:124] Setting up pool1
I0428 19:54:27.328075 27995 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:27.328078 27995 net.cpp:139] Memory required for data: 4954800
I0428 19:54:27.328081 27995 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:27.328088 27995 net.cpp:86] Creating Layer ip1
I0428 19:54:27.328092 27995 net.cpp:408] ip1 <- pool1
I0428 19:54:27.328100 27995 net.cpp:382] ip1 -> ip1
I0428 19:54:27.328725 27995 net.cpp:124] Setting up ip1
I0428 19:54:27.328735 27995 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:27.328754 27995 net.cpp:139] Memory required for data: 4974800
I0428 19:54:27.328761 27995 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:27.328766 27995 net.cpp:86] Creating Layer relu1
I0428 19:54:27.328770 27995 net.cpp:408] relu1 <- ip1
I0428 19:54:27.328775 27995 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:27.329066 27995 net.cpp:124] Setting up relu1
I0428 19:54:27.329078 27995 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:27.329082 27995 net.cpp:139] Memory required for data: 4994800
I0428 19:54:27.329087 27995 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:27.329094 27995 net.cpp:86] Creating Layer ip2
I0428 19:54:27.329098 27995 net.cpp:408] ip2 <- ip1
I0428 19:54:27.329103 27995 net.cpp:382] ip2 -> ip2
I0428 19:54:27.329258 27995 net.cpp:124] Setting up ip2
I0428 19:54:27.329267 27995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:27.329270 27995 net.cpp:139] Memory required for data: 4998800
I0428 19:54:27.329275 27995 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:27.329280 27995 net.cpp:86] Creating Layer relu2
I0428 19:54:27.329283 27995 net.cpp:408] relu2 <- ip2
I0428 19:54:27.329288 27995 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:27.329457 27995 net.cpp:124] Setting up relu2
I0428 19:54:27.329471 27995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:27.329478 27995 net.cpp:139] Memory required for data: 5002800
I0428 19:54:27.329483 27995 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:54:27.329490 27995 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:54:27.329510 27995 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:54:27.329517 27995 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:54:27.329535 27995 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:54:27.329571 27995 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:54:27.329578 27995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:27.329582 27995 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:27.329586 27995 net.cpp:139] Memory required for data: 5010800
I0428 19:54:27.329588 27995 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:27.329593 27995 net.cpp:86] Creating Layer accuracy
I0428 19:54:27.329597 27995 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:54:27.329602 27995 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:27.329605 27995 net.cpp:382] accuracy -> accuracy
I0428 19:54:27.329612 27995 net.cpp:124] Setting up accuracy
I0428 19:54:27.329615 27995 net.cpp:131] Top shape: (1)
I0428 19:54:27.329619 27995 net.cpp:139] Memory required for data: 5010804
I0428 19:54:27.329622 27995 layer_factory.hpp:77] Creating layer loss
I0428 19:54:27.329625 27995 net.cpp:86] Creating Layer loss
I0428 19:54:27.329628 27995 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:54:27.329632 27995 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:27.329637 27995 net.cpp:382] loss -> loss
I0428 19:54:27.329643 27995 layer_factory.hpp:77] Creating layer loss
I0428 19:54:27.329882 27995 net.cpp:124] Setting up loss
I0428 19:54:27.329892 27995 net.cpp:131] Top shape: (1)
I0428 19:54:27.329896 27995 net.cpp:134]     with loss weight 1
I0428 19:54:27.329902 27995 net.cpp:139] Memory required for data: 5010808
I0428 19:54:27.329905 27995 net.cpp:200] loss needs backward computation.
I0428 19:54:27.329910 27995 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:27.329913 27995 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:54:27.329916 27995 net.cpp:200] relu2 needs backward computation.
I0428 19:54:27.329919 27995 net.cpp:200] ip2 needs backward computation.
I0428 19:54:27.329922 27995 net.cpp:200] relu1 needs backward computation.
I0428 19:54:27.329924 27995 net.cpp:200] ip1 needs backward computation.
I0428 19:54:27.329928 27995 net.cpp:200] pool1 needs backward computation.
I0428 19:54:27.329931 27995 net.cpp:200] conv1 needs backward computation.
I0428 19:54:27.329936 27995 net.cpp:200] pool0 needs backward computation.
I0428 19:54:27.329939 27995 net.cpp:200] conv0 needs backward computation.
I0428 19:54:27.329942 27995 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:27.329946 27995 net.cpp:202] mnist does not need backward computation.
I0428 19:54:27.329949 27995 net.cpp:244] This network produces output accuracy
I0428 19:54:27.329952 27995 net.cpp:244] This network produces output loss
I0428 19:54:27.329962 27995 net.cpp:257] Network initialization done.
I0428 19:54:27.329999 27995 solver.cpp:56] Solver scaffolding done.
I0428 19:54:27.330281 27995 caffe.cpp:248] Starting Optimization
I0428 19:54:27.330288 27995 solver.cpp:273] Solving LeNet
I0428 19:54:27.330291 27995 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:27.331084 27995 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:27.336181 27995 blocking_queue.cpp:49] Waiting for data
I0428 19:54:27.409639 28002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:27.410230 27995 solver.cpp:398]     Test net output #0: accuracy = 0.0608
I0428 19:54:27.410267 27995 solver.cpp:398]     Test net output #1: loss = 2.37886 (* 1 = 2.37886 loss)
I0428 19:54:27.413957 27995 solver.cpp:219] Iteration 0 (0 iter/s, 0.0836415s/100 iters), loss = 2.38085
I0428 19:54:27.413995 27995 solver.cpp:238]     Train net output #0: loss = 2.38085 (* 1 = 2.38085 loss)
I0428 19:54:27.414007 27995 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:27.558682 27995 solver.cpp:219] Iteration 100 (691.138 iter/s, 0.144689s/100 iters), loss = 0.449802
I0428 19:54:27.558713 27995 solver.cpp:238]     Train net output #0: loss = 0.449802 (* 1 = 0.449802 loss)
I0428 19:54:27.558722 27995 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:27.700986 27995 solver.cpp:219] Iteration 200 (702.937 iter/s, 0.14226s/100 iters), loss = 0.169641
I0428 19:54:27.701030 27995 solver.cpp:238]     Train net output #0: loss = 0.169641 (* 1 = 0.169641 loss)
I0428 19:54:27.701037 27995 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:27.855645 27995 solver.cpp:219] Iteration 300 (646.824 iter/s, 0.154601s/100 iters), loss = 0.243179
I0428 19:54:27.855684 27995 solver.cpp:238]     Train net output #0: loss = 0.243179 (* 1 = 0.243179 loss)
I0428 19:54:27.855692 27995 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:28.013005 27995 solver.cpp:219] Iteration 400 (635.688 iter/s, 0.15731s/100 iters), loss = 0.126592
I0428 19:54:28.013046 27995 solver.cpp:238]     Train net output #0: loss = 0.126592 (* 1 = 0.126592 loss)
I0428 19:54:28.013052 27995 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:28.160799 27995 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:28.211066 28002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:28.212836 27995 solver.cpp:398]     Test net output #0: accuracy = 0.9587
I0428 19:54:28.212870 27995 solver.cpp:398]     Test net output #1: loss = 0.133925 (* 1 = 0.133925 loss)
I0428 19:54:28.214320 27995 solver.cpp:219] Iteration 500 (496.842 iter/s, 0.201271s/100 iters), loss = 0.115261
I0428 19:54:28.214359 27995 solver.cpp:238]     Train net output #0: loss = 0.115261 (* 1 = 0.115261 loss)
I0428 19:54:28.214366 27995 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:28.356740 27995 solver.cpp:219] Iteration 600 (702.33 iter/s, 0.142383s/100 iters), loss = 0.139772
I0428 19:54:28.356781 27995 solver.cpp:238]     Train net output #0: loss = 0.139772 (* 1 = 0.139772 loss)
I0428 19:54:28.356788 27995 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:28.500572 27995 solver.cpp:219] Iteration 700 (695.443 iter/s, 0.143793s/100 iters), loss = 0.11056
I0428 19:54:28.500598 27995 solver.cpp:238]     Train net output #0: loss = 0.11056 (* 1 = 0.11056 loss)
I0428 19:54:28.500604 27995 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:28.655481 27995 solver.cpp:219] Iteration 800 (645.712 iter/s, 0.154868s/100 iters), loss = 0.206236
I0428 19:54:28.655527 27995 solver.cpp:238]     Train net output #0: loss = 0.206236 (* 1 = 0.206236 loss)
I0428 19:54:28.655536 27995 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:28.806511 27995 solver.cpp:219] Iteration 900 (662.319 iter/s, 0.150985s/100 iters), loss = 0.178249
I0428 19:54:28.806545 27995 solver.cpp:238]     Train net output #0: loss = 0.178249 (* 1 = 0.178249 loss)
I0428 19:54:28.806552 27995 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:28.854399 28001 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:28.948462 27995 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:28.950892 27995 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:28.952082 27995 solver.cpp:311] Iteration 1000, loss = 0.11562
I0428 19:54:28.952105 27995 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:29.019145 28002 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:29.019754 27995 solver.cpp:398]     Test net output #0: accuracy = 0.9767
I0428 19:54:29.019789 27995 solver.cpp:398]     Test net output #1: loss = 0.0735694 (* 1 = 0.0735694 loss)
I0428 19:54:29.019794 27995 solver.cpp:316] Optimization Done.
I0428 19:54:29.019798 27995 caffe.cpp:259] Optimization Done.
