I0428 20:05:41.998805 30675 caffe.cpp:218] Using GPUs 0
I0428 20:05:42.040520 30675 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:42.642607 30675 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1007.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:42.642783 30675 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1007.prototxt
I0428 20:05:42.643368 30675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:42.643394 30675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:42.643539 30675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:42.643646 30675 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:42.643764 30675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:42.643795 30675 net.cpp:86] Creating Layer mnist
I0428 20:05:42.643805 30675 net.cpp:382] mnist -> data
I0428 20:05:42.643833 30675 net.cpp:382] mnist -> label
I0428 20:05:42.645246 30675 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:42.648478 30675 net.cpp:124] Setting up mnist
I0428 20:05:42.648500 30675 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:42.648509 30675 net.cpp:131] Top shape: 64 (64)
I0428 20:05:42.648514 30675 net.cpp:139] Memory required for data: 200960
I0428 20:05:42.648524 30675 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:42.648545 30675 net.cpp:86] Creating Layer conv0
I0428 20:05:42.648571 30675 net.cpp:408] conv0 <- data
I0428 20:05:42.648586 30675 net.cpp:382] conv0 -> conv0
I0428 20:05:42.999918 30675 net.cpp:124] Setting up conv0
I0428 20:05:42.999951 30675 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:42.999956 30675 net.cpp:139] Memory required for data: 3887360
I0428 20:05:42.999975 30675 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:42.999991 30675 net.cpp:86] Creating Layer pool0
I0428 20:05:42.999996 30675 net.cpp:408] pool0 <- conv0
I0428 20:05:43.000007 30675 net.cpp:382] pool0 -> pool0
I0428 20:05:43.000063 30675 net.cpp:124] Setting up pool0
I0428 20:05:43.000072 30675 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:43.000077 30675 net.cpp:139] Memory required for data: 4808960
I0428 20:05:43.000080 30675 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:43.000094 30675 net.cpp:86] Creating Layer conv1
I0428 20:05:43.000099 30675 net.cpp:408] conv1 <- pool0
I0428 20:05:43.000107 30675 net.cpp:382] conv1 -> conv1
I0428 20:05:43.003476 30675 net.cpp:124] Setting up conv1
I0428 20:05:43.003495 30675 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:43.003500 30675 net.cpp:139] Memory required for data: 4841728
I0428 20:05:43.003511 30675 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:43.003521 30675 net.cpp:86] Creating Layer pool1
I0428 20:05:43.003525 30675 net.cpp:408] pool1 <- conv1
I0428 20:05:43.003532 30675 net.cpp:382] pool1 -> pool1
I0428 20:05:43.003578 30675 net.cpp:124] Setting up pool1
I0428 20:05:43.003587 30675 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:43.003592 30675 net.cpp:139] Memory required for data: 4849920
I0428 20:05:43.003595 30675 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:43.003604 30675 net.cpp:86] Creating Layer ip1
I0428 20:05:43.003608 30675 net.cpp:408] ip1 <- pool1
I0428 20:05:43.003615 30675 net.cpp:382] ip1 -> ip1
I0428 20:05:43.003752 30675 net.cpp:124] Setting up ip1
I0428 20:05:43.003762 30675 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:43.003765 30675 net.cpp:139] Memory required for data: 4862720
I0428 20:05:43.003774 30675 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:43.003784 30675 net.cpp:86] Creating Layer relu1
I0428 20:05:43.003788 30675 net.cpp:408] relu1 <- ip1
I0428 20:05:43.003794 30675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:43.004006 30675 net.cpp:124] Setting up relu1
I0428 20:05:43.004016 30675 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:43.004020 30675 net.cpp:139] Memory required for data: 4875520
I0428 20:05:43.004024 30675 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:43.004032 30675 net.cpp:86] Creating Layer ip2
I0428 20:05:43.004036 30675 net.cpp:408] ip2 <- ip1
I0428 20:05:43.004042 30675 net.cpp:382] ip2 -> ip2
I0428 20:05:43.004174 30675 net.cpp:124] Setting up ip2
I0428 20:05:43.004182 30675 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:43.004186 30675 net.cpp:139] Memory required for data: 4878080
I0428 20:05:43.004194 30675 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:43.004201 30675 net.cpp:86] Creating Layer relu2
I0428 20:05:43.004206 30675 net.cpp:408] relu2 <- ip2
I0428 20:05:43.004211 30675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:43.006338 30675 net.cpp:124] Setting up relu2
I0428 20:05:43.006357 30675 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:43.006363 30675 net.cpp:139] Memory required for data: 4880640
I0428 20:05:43.006368 30675 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:43.006377 30675 net.cpp:86] Creating Layer ip3
I0428 20:05:43.006382 30675 net.cpp:408] ip3 <- ip2
I0428 20:05:43.006391 30675 net.cpp:382] ip3 -> ip3
I0428 20:05:43.006525 30675 net.cpp:124] Setting up ip3
I0428 20:05:43.006534 30675 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:43.006538 30675 net.cpp:139] Memory required for data: 4883200
I0428 20:05:43.006549 30675 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:43.006557 30675 net.cpp:86] Creating Layer relu3
I0428 20:05:43.006561 30675 net.cpp:408] relu3 <- ip3
I0428 20:05:43.006567 30675 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:43.006786 30675 net.cpp:124] Setting up relu3
I0428 20:05:43.006798 30675 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:43.006801 30675 net.cpp:139] Memory required for data: 4885760
I0428 20:05:43.006805 30675 layer_factory.hpp:77] Creating layer loss
I0428 20:05:43.006813 30675 net.cpp:86] Creating Layer loss
I0428 20:05:43.006817 30675 net.cpp:408] loss <- ip3
I0428 20:05:43.006822 30675 net.cpp:408] loss <- label
I0428 20:05:43.006829 30675 net.cpp:382] loss -> loss
I0428 20:05:43.006853 30675 layer_factory.hpp:77] Creating layer loss
I0428 20:05:43.007164 30675 net.cpp:124] Setting up loss
I0428 20:05:43.007174 30675 net.cpp:131] Top shape: (1)
I0428 20:05:43.007179 30675 net.cpp:134]     with loss weight 1
I0428 20:05:43.007199 30675 net.cpp:139] Memory required for data: 4885764
I0428 20:05:43.007203 30675 net.cpp:200] loss needs backward computation.
I0428 20:05:43.007208 30675 net.cpp:200] relu3 needs backward computation.
I0428 20:05:43.007211 30675 net.cpp:200] ip3 needs backward computation.
I0428 20:05:43.007215 30675 net.cpp:200] relu2 needs backward computation.
I0428 20:05:43.007220 30675 net.cpp:200] ip2 needs backward computation.
I0428 20:05:43.007223 30675 net.cpp:200] relu1 needs backward computation.
I0428 20:05:43.007227 30675 net.cpp:200] ip1 needs backward computation.
I0428 20:05:43.007231 30675 net.cpp:200] pool1 needs backward computation.
I0428 20:05:43.007235 30675 net.cpp:200] conv1 needs backward computation.
I0428 20:05:43.007239 30675 net.cpp:200] pool0 needs backward computation.
I0428 20:05:43.007243 30675 net.cpp:200] conv0 needs backward computation.
I0428 20:05:43.007248 30675 net.cpp:202] mnist does not need backward computation.
I0428 20:05:43.007251 30675 net.cpp:244] This network produces output loss
I0428 20:05:43.007263 30675 net.cpp:257] Network initialization done.
I0428 20:05:43.007675 30675 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1007.prototxt
I0428 20:05:43.007709 30675 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:43.007824 30675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:43.007923 30675 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:43.007978 30675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:43.007993 30675 net.cpp:86] Creating Layer mnist
I0428 20:05:43.007999 30675 net.cpp:382] mnist -> data
I0428 20:05:43.008009 30675 net.cpp:382] mnist -> label
I0428 20:05:43.008124 30675 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:43.010713 30675 net.cpp:124] Setting up mnist
I0428 20:05:43.010730 30675 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:43.010737 30675 net.cpp:131] Top shape: 100 (100)
I0428 20:05:43.010740 30675 net.cpp:139] Memory required for data: 314000
I0428 20:05:43.010746 30675 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:43.010753 30675 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:43.010757 30675 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:43.010766 30675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:43.010774 30675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:43.010857 30675 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:43.010876 30675 net.cpp:131] Top shape: 100 (100)
I0428 20:05:43.010881 30675 net.cpp:131] Top shape: 100 (100)
I0428 20:05:43.010885 30675 net.cpp:139] Memory required for data: 314800
I0428 20:05:43.010890 30675 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:43.010901 30675 net.cpp:86] Creating Layer conv0
I0428 20:05:43.010907 30675 net.cpp:408] conv0 <- data
I0428 20:05:43.010915 30675 net.cpp:382] conv0 -> conv0
I0428 20:05:43.012992 30675 net.cpp:124] Setting up conv0
I0428 20:05:43.013010 30675 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:43.013020 30675 net.cpp:139] Memory required for data: 6074800
I0428 20:05:43.013031 30675 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:43.013041 30675 net.cpp:86] Creating Layer pool0
I0428 20:05:43.013046 30675 net.cpp:408] pool0 <- conv0
I0428 20:05:43.013051 30675 net.cpp:382] pool0 -> pool0
I0428 20:05:43.013100 30675 net.cpp:124] Setting up pool0
I0428 20:05:43.013109 30675 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:43.013113 30675 net.cpp:139] Memory required for data: 7514800
I0428 20:05:43.013118 30675 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:43.013128 30675 net.cpp:86] Creating Layer conv1
I0428 20:05:43.013134 30675 net.cpp:408] conv1 <- pool0
I0428 20:05:43.013142 30675 net.cpp:382] conv1 -> conv1
I0428 20:05:43.015674 30675 net.cpp:124] Setting up conv1
I0428 20:05:43.015691 30675 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:43.015697 30675 net.cpp:139] Memory required for data: 7566000
I0428 20:05:43.015709 30675 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:43.015717 30675 net.cpp:86] Creating Layer pool1
I0428 20:05:43.015729 30675 net.cpp:408] pool1 <- conv1
I0428 20:05:43.015735 30675 net.cpp:382] pool1 -> pool1
I0428 20:05:43.015802 30675 net.cpp:124] Setting up pool1
I0428 20:05:43.015810 30675 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:43.015815 30675 net.cpp:139] Memory required for data: 7578800
I0428 20:05:43.015818 30675 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:43.015830 30675 net.cpp:86] Creating Layer ip1
I0428 20:05:43.015835 30675 net.cpp:408] ip1 <- pool1
I0428 20:05:43.015841 30675 net.cpp:382] ip1 -> ip1
I0428 20:05:43.016002 30675 net.cpp:124] Setting up ip1
I0428 20:05:43.016013 30675 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:43.016037 30675 net.cpp:139] Memory required for data: 7598800
I0428 20:05:43.016047 30675 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:43.016057 30675 net.cpp:86] Creating Layer relu1
I0428 20:05:43.016072 30675 net.cpp:408] relu1 <- ip1
I0428 20:05:43.016078 30675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:43.016306 30675 net.cpp:124] Setting up relu1
I0428 20:05:43.016325 30675 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:43.016332 30675 net.cpp:139] Memory required for data: 7618800
I0428 20:05:43.016337 30675 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:43.016346 30675 net.cpp:86] Creating Layer ip2
I0428 20:05:43.016351 30675 net.cpp:408] ip2 <- ip1
I0428 20:05:43.016360 30675 net.cpp:382] ip2 -> ip2
I0428 20:05:43.016502 30675 net.cpp:124] Setting up ip2
I0428 20:05:43.016510 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.016515 30675 net.cpp:139] Memory required for data: 7622800
I0428 20:05:43.016522 30675 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:43.016531 30675 net.cpp:86] Creating Layer relu2
I0428 20:05:43.016537 30675 net.cpp:408] relu2 <- ip2
I0428 20:05:43.016543 30675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:43.016791 30675 net.cpp:124] Setting up relu2
I0428 20:05:43.016803 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.016806 30675 net.cpp:139] Memory required for data: 7626800
I0428 20:05:43.016819 30675 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:43.016831 30675 net.cpp:86] Creating Layer ip3
I0428 20:05:43.016836 30675 net.cpp:408] ip3 <- ip2
I0428 20:05:43.016844 30675 net.cpp:382] ip3 -> ip3
I0428 20:05:43.016980 30675 net.cpp:124] Setting up ip3
I0428 20:05:43.016990 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.016994 30675 net.cpp:139] Memory required for data: 7630800
I0428 20:05:43.017005 30675 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:43.017014 30675 net.cpp:86] Creating Layer relu3
I0428 20:05:43.017016 30675 net.cpp:408] relu3 <- ip3
I0428 20:05:43.017026 30675 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:43.018028 30675 net.cpp:124] Setting up relu3
I0428 20:05:43.018043 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.018056 30675 net.cpp:139] Memory required for data: 7634800
I0428 20:05:43.018061 30675 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:43.018067 30675 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:43.018071 30675 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:43.018080 30675 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:43.018088 30675 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:43.018136 30675 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:43.018146 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.018151 30675 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:43.018154 30675 net.cpp:139] Memory required for data: 7642800
I0428 20:05:43.018157 30675 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:43.018170 30675 net.cpp:86] Creating Layer accuracy
I0428 20:05:43.018174 30675 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:43.018179 30675 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:43.018185 30675 net.cpp:382] accuracy -> accuracy
I0428 20:05:43.018193 30675 net.cpp:124] Setting up accuracy
I0428 20:05:43.018198 30675 net.cpp:131] Top shape: (1)
I0428 20:05:43.018203 30675 net.cpp:139] Memory required for data: 7642804
I0428 20:05:43.018205 30675 layer_factory.hpp:77] Creating layer loss
I0428 20:05:43.018213 30675 net.cpp:86] Creating Layer loss
I0428 20:05:43.018218 30675 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:43.018223 30675 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:43.018229 30675 net.cpp:382] loss -> loss
I0428 20:05:43.018235 30675 layer_factory.hpp:77] Creating layer loss
I0428 20:05:43.018548 30675 net.cpp:124] Setting up loss
I0428 20:05:43.018558 30675 net.cpp:131] Top shape: (1)
I0428 20:05:43.018563 30675 net.cpp:134]     with loss weight 1
I0428 20:05:43.018570 30675 net.cpp:139] Memory required for data: 7642808
I0428 20:05:43.018586 30675 net.cpp:200] loss needs backward computation.
I0428 20:05:43.018591 30675 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:43.018596 30675 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:43.018600 30675 net.cpp:200] relu3 needs backward computation.
I0428 20:05:43.018604 30675 net.cpp:200] ip3 needs backward computation.
I0428 20:05:43.018607 30675 net.cpp:200] relu2 needs backward computation.
I0428 20:05:43.018611 30675 net.cpp:200] ip2 needs backward computation.
I0428 20:05:43.018615 30675 net.cpp:200] relu1 needs backward computation.
I0428 20:05:43.018618 30675 net.cpp:200] ip1 needs backward computation.
I0428 20:05:43.018623 30675 net.cpp:200] pool1 needs backward computation.
I0428 20:05:43.018626 30675 net.cpp:200] conv1 needs backward computation.
I0428 20:05:43.018637 30675 net.cpp:200] pool0 needs backward computation.
I0428 20:05:43.018641 30675 net.cpp:200] conv0 needs backward computation.
I0428 20:05:43.018648 30675 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:43.018652 30675 net.cpp:202] mnist does not need backward computation.
I0428 20:05:43.018656 30675 net.cpp:244] This network produces output accuracy
I0428 20:05:43.018661 30675 net.cpp:244] This network produces output loss
I0428 20:05:43.018676 30675 net.cpp:257] Network initialization done.
I0428 20:05:43.018729 30675 solver.cpp:56] Solver scaffolding done.
I0428 20:05:43.019202 30675 caffe.cpp:248] Starting Optimization
I0428 20:05:43.019209 30675 solver.cpp:273] Solving LeNet
I0428 20:05:43.019212 30675 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:43.020149 30675 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:43.026535 30675 blocking_queue.cpp:49] Waiting for data
I0428 20:05:43.095299 30682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:43.095924 30675 solver.cpp:398]     Test net output #0: accuracy = 0.1025
I0428 20:05:43.095952 30675 solver.cpp:398]     Test net output #1: loss = 2.30101 (* 1 = 2.30101 loss)
I0428 20:05:43.099215 30675 solver.cpp:219] Iteration 0 (-1.03416e-42 iter/s, 0.0799683s/100 iters), loss = 2.3021
I0428 20:05:43.099243 30675 solver.cpp:238]     Train net output #0: loss = 2.3021 (* 1 = 2.3021 loss)
I0428 20:05:43.099256 30675 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:43.190373 30675 solver.cpp:219] Iteration 100 (1097.53 iter/s, 0.0911135s/100 iters), loss = 1.34895
I0428 20:05:43.190403 30675 solver.cpp:238]     Train net output #0: loss = 1.34895 (* 1 = 1.34895 loss)
I0428 20:05:43.190420 30675 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:43.280756 30675 solver.cpp:219] Iteration 200 (1106.89 iter/s, 0.0903434s/100 iters), loss = 0.938276
I0428 20:05:43.280786 30675 solver.cpp:238]     Train net output #0: loss = 0.938276 (* 1 = 0.938276 loss)
I0428 20:05:43.280793 30675 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:43.370043 30675 solver.cpp:219] Iteration 300 (1120.5 iter/s, 0.0892457s/100 iters), loss = 1.02969
I0428 20:05:43.370071 30675 solver.cpp:238]     Train net output #0: loss = 1.02969 (* 1 = 1.02969 loss)
I0428 20:05:43.370079 30675 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:43.459265 30675 solver.cpp:219] Iteration 400 (1121.28 iter/s, 0.0891834s/100 iters), loss = 0.73796
I0428 20:05:43.459295 30675 solver.cpp:238]     Train net output #0: loss = 0.73796 (* 1 = 0.73796 loss)
I0428 20:05:43.459301 30675 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:43.547835 30675 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:43.631665 30682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:43.632319 30675 solver.cpp:398]     Test net output #0: accuracy = 0.7491
I0428 20:05:43.632341 30675 solver.cpp:398]     Test net output #1: loss = 0.703402 (* 1 = 0.703402 loss)
I0428 20:05:43.633332 30675 solver.cpp:219] Iteration 500 (574.634 iter/s, 0.174024s/100 iters), loss = 0.713006
I0428 20:05:43.633358 30675 solver.cpp:238]     Train net output #0: loss = 0.713006 (* 1 = 0.713006 loss)
I0428 20:05:43.633381 30675 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:43.725011 30675 solver.cpp:219] Iteration 600 (1091.18 iter/s, 0.0916439s/100 iters), loss = 0.570868
I0428 20:05:43.725041 30675 solver.cpp:238]     Train net output #0: loss = 0.570868 (* 1 = 0.570868 loss)
I0428 20:05:43.725049 30675 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:43.815340 30675 solver.cpp:219] Iteration 700 (1107.58 iter/s, 0.0902871s/100 iters), loss = 0.57
I0428 20:05:43.815371 30675 solver.cpp:238]     Train net output #0: loss = 0.57 (* 1 = 0.57 loss)
I0428 20:05:43.815377 30675 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:43.904870 30675 solver.cpp:219] Iteration 800 (1117.44 iter/s, 0.0894904s/100 iters), loss = 0.946933
I0428 20:05:43.904896 30675 solver.cpp:238]     Train net output #0: loss = 0.946933 (* 1 = 0.946933 loss)
I0428 20:05:43.904902 30675 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:43.991889 30675 solver.cpp:219] Iteration 900 (1149.65 iter/s, 0.0869827s/100 iters), loss = 0.585829
I0428 20:05:43.991914 30675 solver.cpp:238]     Train net output #0: loss = 0.585829 (* 1 = 0.585829 loss)
I0428 20:05:43.991920 30675 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:44.020603 30681 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:44.081177 30675 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:44.081960 30675 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:44.082517 30675 solver.cpp:311] Iteration 1000, loss = 0.605312
I0428 20:05:44.082532 30675 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:44.158666 30682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:44.159337 30675 solver.cpp:398]     Test net output #0: accuracy = 0.7668
I0428 20:05:44.159373 30675 solver.cpp:398]     Test net output #1: loss = 0.613572 (* 1 = 0.613572 loss)
I0428 20:05:44.159377 30675 solver.cpp:316] Optimization Done.
I0428 20:05:44.159380 30675 caffe.cpp:259] Optimization Done.
