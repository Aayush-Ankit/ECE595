I0428 20:24:32.825809  2423 caffe.cpp:218] Using GPUs 0
I0428 20:24:32.864760  2423 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:24:33.381013  2423 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1439.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:24:33.381155  2423 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1439.prototxt
I0428 20:24:33.381570  2423 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:24:33.381589  2423 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:24:33.381695  2423 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:24:33.381778  2423 layer_factory.hpp:77] Creating layer mnist
I0428 20:24:33.381877  2423 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:24:33.381901  2423 net.cpp:86] Creating Layer mnist
I0428 20:24:33.381908  2423 net.cpp:382] mnist -> data
I0428 20:24:33.381932  2423 net.cpp:382] mnist -> label
I0428 20:24:33.383028  2423 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:24:33.385489  2423 net.cpp:124] Setting up mnist
I0428 20:24:33.385507  2423 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:24:33.385514  2423 net.cpp:131] Top shape: 64 (64)
I0428 20:24:33.385516  2423 net.cpp:139] Memory required for data: 200960
I0428 20:24:33.385524  2423 layer_factory.hpp:77] Creating layer conv0
I0428 20:24:33.385576  2423 net.cpp:86] Creating Layer conv0
I0428 20:24:33.385597  2423 net.cpp:408] conv0 <- data
I0428 20:24:33.385610  2423 net.cpp:382] conv0 -> conv0
I0428 20:24:33.675384  2423 net.cpp:124] Setting up conv0
I0428 20:24:33.675411  2423 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:24:33.675416  2423 net.cpp:139] Memory required for data: 7573760
I0428 20:24:33.675433  2423 layer_factory.hpp:77] Creating layer pool0
I0428 20:24:33.675447  2423 net.cpp:86] Creating Layer pool0
I0428 20:24:33.675452  2423 net.cpp:408] pool0 <- conv0
I0428 20:24:33.675457  2423 net.cpp:382] pool0 -> pool0
I0428 20:24:33.675510  2423 net.cpp:124] Setting up pool0
I0428 20:24:33.675516  2423 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:24:33.675519  2423 net.cpp:139] Memory required for data: 9416960
I0428 20:24:33.675523  2423 layer_factory.hpp:77] Creating layer conv1
I0428 20:24:33.675535  2423 net.cpp:86] Creating Layer conv1
I0428 20:24:33.675539  2423 net.cpp:408] conv1 <- pool0
I0428 20:24:33.675546  2423 net.cpp:382] conv1 -> conv1
I0428 20:24:33.679056  2423 net.cpp:124] Setting up conv1
I0428 20:24:33.679072  2423 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:24:33.679076  2423 net.cpp:139] Memory required for data: 11055360
I0428 20:24:33.679085  2423 layer_factory.hpp:77] Creating layer pool1
I0428 20:24:33.679093  2423 net.cpp:86] Creating Layer pool1
I0428 20:24:33.679097  2423 net.cpp:408] pool1 <- conv1
I0428 20:24:33.679102  2423 net.cpp:382] pool1 -> pool1
I0428 20:24:33.679141  2423 net.cpp:124] Setting up pool1
I0428 20:24:33.679147  2423 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:24:33.679150  2423 net.cpp:139] Memory required for data: 11464960
I0428 20:24:33.679153  2423 layer_factory.hpp:77] Creating layer ip1
I0428 20:24:33.679160  2423 net.cpp:86] Creating Layer ip1
I0428 20:24:33.679163  2423 net.cpp:408] ip1 <- pool1
I0428 20:24:33.679168  2423 net.cpp:382] ip1 -> ip1
I0428 20:24:33.679741  2423 net.cpp:124] Setting up ip1
I0428 20:24:33.679749  2423 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:24:33.679752  2423 net.cpp:139] Memory required for data: 11477760
I0428 20:24:33.679759  2423 layer_factory.hpp:77] Creating layer relu1
I0428 20:24:33.679764  2423 net.cpp:86] Creating Layer relu1
I0428 20:24:33.679769  2423 net.cpp:408] relu1 <- ip1
I0428 20:24:33.679772  2423 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:24:33.679944  2423 net.cpp:124] Setting up relu1
I0428 20:24:33.679953  2423 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:24:33.679956  2423 net.cpp:139] Memory required for data: 11490560
I0428 20:24:33.679960  2423 layer_factory.hpp:77] Creating layer ip2
I0428 20:24:33.679966  2423 net.cpp:86] Creating Layer ip2
I0428 20:24:33.679970  2423 net.cpp:408] ip2 <- ip1
I0428 20:24:33.679975  2423 net.cpp:382] ip2 -> ip2
I0428 20:24:33.680084  2423 net.cpp:124] Setting up ip2
I0428 20:24:33.680091  2423 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:24:33.680094  2423 net.cpp:139] Memory required for data: 11496960
I0428 20:24:33.680100  2423 layer_factory.hpp:77] Creating layer relu2
I0428 20:24:33.680106  2423 net.cpp:86] Creating Layer relu2
I0428 20:24:33.680109  2423 net.cpp:408] relu2 <- ip2
I0428 20:24:33.680114  2423 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:24:33.680882  2423 net.cpp:124] Setting up relu2
I0428 20:24:33.680896  2423 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:24:33.680899  2423 net.cpp:139] Memory required for data: 11503360
I0428 20:24:33.680902  2423 layer_factory.hpp:77] Creating layer ip3
I0428 20:24:33.680909  2423 net.cpp:86] Creating Layer ip3
I0428 20:24:33.680913  2423 net.cpp:408] ip3 <- ip2
I0428 20:24:33.680918  2423 net.cpp:382] ip3 -> ip3
I0428 20:24:33.681017  2423 net.cpp:124] Setting up ip3
I0428 20:24:33.681025  2423 net.cpp:131] Top shape: 64 10 (640)
I0428 20:24:33.681028  2423 net.cpp:139] Memory required for data: 11505920
I0428 20:24:33.681036  2423 layer_factory.hpp:77] Creating layer relu3
I0428 20:24:33.681041  2423 net.cpp:86] Creating Layer relu3
I0428 20:24:33.681044  2423 net.cpp:408] relu3 <- ip3
I0428 20:24:33.681048  2423 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:24:33.681216  2423 net.cpp:124] Setting up relu3
I0428 20:24:33.681224  2423 net.cpp:131] Top shape: 64 10 (640)
I0428 20:24:33.681227  2423 net.cpp:139] Memory required for data: 11508480
I0428 20:24:33.681231  2423 layer_factory.hpp:77] Creating layer loss
I0428 20:24:33.681236  2423 net.cpp:86] Creating Layer loss
I0428 20:24:33.681241  2423 net.cpp:408] loss <- ip3
I0428 20:24:33.681244  2423 net.cpp:408] loss <- label
I0428 20:24:33.681249  2423 net.cpp:382] loss -> loss
I0428 20:24:33.681267  2423 layer_factory.hpp:77] Creating layer loss
I0428 20:24:33.681489  2423 net.cpp:124] Setting up loss
I0428 20:24:33.681499  2423 net.cpp:131] Top shape: (1)
I0428 20:24:33.681502  2423 net.cpp:134]     with loss weight 1
I0428 20:24:33.681521  2423 net.cpp:139] Memory required for data: 11508484
I0428 20:24:33.681524  2423 net.cpp:200] loss needs backward computation.
I0428 20:24:33.681529  2423 net.cpp:200] relu3 needs backward computation.
I0428 20:24:33.681531  2423 net.cpp:200] ip3 needs backward computation.
I0428 20:24:33.681535  2423 net.cpp:200] relu2 needs backward computation.
I0428 20:24:33.681537  2423 net.cpp:200] ip2 needs backward computation.
I0428 20:24:33.681540  2423 net.cpp:200] relu1 needs backward computation.
I0428 20:24:33.681542  2423 net.cpp:200] ip1 needs backward computation.
I0428 20:24:33.681545  2423 net.cpp:200] pool1 needs backward computation.
I0428 20:24:33.681548  2423 net.cpp:200] conv1 needs backward computation.
I0428 20:24:33.681552  2423 net.cpp:200] pool0 needs backward computation.
I0428 20:24:33.681555  2423 net.cpp:200] conv0 needs backward computation.
I0428 20:24:33.681558  2423 net.cpp:202] mnist does not need backward computation.
I0428 20:24:33.681561  2423 net.cpp:244] This network produces output loss
I0428 20:24:33.681571  2423 net.cpp:257] Network initialization done.
I0428 20:24:33.681900  2423 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1439.prototxt
I0428 20:24:33.681926  2423 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:24:33.682018  2423 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:24:33.682097  2423 layer_factory.hpp:77] Creating layer mnist
I0428 20:24:33.682142  2423 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:24:33.682153  2423 net.cpp:86] Creating Layer mnist
I0428 20:24:33.682158  2423 net.cpp:382] mnist -> data
I0428 20:24:33.682166  2423 net.cpp:382] mnist -> label
I0428 20:24:33.682252  2423 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:24:33.683501  2423 net.cpp:124] Setting up mnist
I0428 20:24:33.683513  2423 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:24:33.683518  2423 net.cpp:131] Top shape: 100 (100)
I0428 20:24:33.683521  2423 net.cpp:139] Memory required for data: 314000
I0428 20:24:33.683526  2423 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:24:33.683535  2423 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:24:33.683538  2423 net.cpp:408] label_mnist_1_split <- label
I0428 20:24:33.683543  2423 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:24:33.683550  2423 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:24:33.683588  2423 net.cpp:124] Setting up label_mnist_1_split
I0428 20:24:33.683593  2423 net.cpp:131] Top shape: 100 (100)
I0428 20:24:33.683596  2423 net.cpp:131] Top shape: 100 (100)
I0428 20:24:33.683599  2423 net.cpp:139] Memory required for data: 314800
I0428 20:24:33.683603  2423 layer_factory.hpp:77] Creating layer conv0
I0428 20:24:33.683610  2423 net.cpp:86] Creating Layer conv0
I0428 20:24:33.683614  2423 net.cpp:408] conv0 <- data
I0428 20:24:33.683619  2423 net.cpp:382] conv0 -> conv0
I0428 20:24:33.685308  2423 net.cpp:124] Setting up conv0
I0428 20:24:33.685323  2423 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:24:33.685328  2423 net.cpp:139] Memory required for data: 11834800
I0428 20:24:33.685336  2423 layer_factory.hpp:77] Creating layer pool0
I0428 20:24:33.685343  2423 net.cpp:86] Creating Layer pool0
I0428 20:24:33.685346  2423 net.cpp:408] pool0 <- conv0
I0428 20:24:33.685351  2423 net.cpp:382] pool0 -> pool0
I0428 20:24:33.685387  2423 net.cpp:124] Setting up pool0
I0428 20:24:33.685392  2423 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:24:33.685395  2423 net.cpp:139] Memory required for data: 14714800
I0428 20:24:33.685398  2423 layer_factory.hpp:77] Creating layer conv1
I0428 20:24:33.685406  2423 net.cpp:86] Creating Layer conv1
I0428 20:24:33.685410  2423 net.cpp:408] conv1 <- pool0
I0428 20:24:33.685415  2423 net.cpp:382] conv1 -> conv1
I0428 20:24:33.688411  2423 net.cpp:124] Setting up conv1
I0428 20:24:33.688426  2423 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:24:33.688431  2423 net.cpp:139] Memory required for data: 17274800
I0428 20:24:33.688438  2423 layer_factory.hpp:77] Creating layer pool1
I0428 20:24:33.688452  2423 net.cpp:86] Creating Layer pool1
I0428 20:24:33.688455  2423 net.cpp:408] pool1 <- conv1
I0428 20:24:33.688462  2423 net.cpp:382] pool1 -> pool1
I0428 20:24:33.688498  2423 net.cpp:124] Setting up pool1
I0428 20:24:33.688503  2423 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:24:33.688505  2423 net.cpp:139] Memory required for data: 17914800
I0428 20:24:33.688514  2423 layer_factory.hpp:77] Creating layer ip1
I0428 20:24:33.688521  2423 net.cpp:86] Creating Layer ip1
I0428 20:24:33.688524  2423 net.cpp:408] ip1 <- pool1
I0428 20:24:33.688529  2423 net.cpp:382] ip1 -> ip1
I0428 20:24:33.689100  2423 net.cpp:124] Setting up ip1
I0428 20:24:33.689119  2423 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:24:33.689122  2423 net.cpp:139] Memory required for data: 17934800
I0428 20:24:33.689131  2423 layer_factory.hpp:77] Creating layer relu1
I0428 20:24:33.689136  2423 net.cpp:86] Creating Layer relu1
I0428 20:24:33.689138  2423 net.cpp:408] relu1 <- ip1
I0428 20:24:33.689142  2423 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:24:33.689388  2423 net.cpp:124] Setting up relu1
I0428 20:24:33.689398  2423 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:24:33.689401  2423 net.cpp:139] Memory required for data: 17954800
I0428 20:24:33.689404  2423 layer_factory.hpp:77] Creating layer ip2
I0428 20:24:33.689411  2423 net.cpp:86] Creating Layer ip2
I0428 20:24:33.689414  2423 net.cpp:408] ip2 <- ip1
I0428 20:24:33.689419  2423 net.cpp:382] ip2 -> ip2
I0428 20:24:33.689525  2423 net.cpp:124] Setting up ip2
I0428 20:24:33.689532  2423 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:24:33.689543  2423 net.cpp:139] Memory required for data: 17964800
I0428 20:24:33.689548  2423 layer_factory.hpp:77] Creating layer relu2
I0428 20:24:33.689553  2423 net.cpp:86] Creating Layer relu2
I0428 20:24:33.689555  2423 net.cpp:408] relu2 <- ip2
I0428 20:24:33.689559  2423 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:24:33.689719  2423 net.cpp:124] Setting up relu2
I0428 20:24:33.689728  2423 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:24:33.689731  2423 net.cpp:139] Memory required for data: 17974800
I0428 20:24:33.689734  2423 layer_factory.hpp:77] Creating layer ip3
I0428 20:24:33.689740  2423 net.cpp:86] Creating Layer ip3
I0428 20:24:33.689743  2423 net.cpp:408] ip3 <- ip2
I0428 20:24:33.689749  2423 net.cpp:382] ip3 -> ip3
I0428 20:24:33.689843  2423 net.cpp:124] Setting up ip3
I0428 20:24:33.689849  2423 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:24:33.689852  2423 net.cpp:139] Memory required for data: 17978800
I0428 20:24:33.689867  2423 layer_factory.hpp:77] Creating layer relu3
I0428 20:24:33.689872  2423 net.cpp:86] Creating Layer relu3
I0428 20:24:33.689874  2423 net.cpp:408] relu3 <- ip3
I0428 20:24:33.689878  2423 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:24:33.690670  2423 net.cpp:124] Setting up relu3
I0428 20:24:33.690683  2423 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:24:33.690686  2423 net.cpp:139] Memory required for data: 17982800
I0428 20:24:33.690690  2423 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:24:33.690696  2423 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:24:33.690698  2423 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:24:33.690703  2423 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:24:33.690709  2423 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:24:33.690752  2423 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:24:33.690757  2423 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:24:33.690760  2423 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:24:33.690763  2423 net.cpp:139] Memory required for data: 17990800
I0428 20:24:33.690767  2423 layer_factory.hpp:77] Creating layer accuracy
I0428 20:24:33.690771  2423 net.cpp:86] Creating Layer accuracy
I0428 20:24:33.690775  2423 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:24:33.690779  2423 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:24:33.690783  2423 net.cpp:382] accuracy -> accuracy
I0428 20:24:33.690790  2423 net.cpp:124] Setting up accuracy
I0428 20:24:33.690794  2423 net.cpp:131] Top shape: (1)
I0428 20:24:33.690798  2423 net.cpp:139] Memory required for data: 17990804
I0428 20:24:33.690800  2423 layer_factory.hpp:77] Creating layer loss
I0428 20:24:33.690804  2423 net.cpp:86] Creating Layer loss
I0428 20:24:33.690809  2423 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:24:33.690811  2423 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:24:33.690822  2423 net.cpp:382] loss -> loss
I0428 20:24:33.690829  2423 layer_factory.hpp:77] Creating layer loss
I0428 20:24:33.691057  2423 net.cpp:124] Setting up loss
I0428 20:24:33.691066  2423 net.cpp:131] Top shape: (1)
I0428 20:24:33.691071  2423 net.cpp:134]     with loss weight 1
I0428 20:24:33.691087  2423 net.cpp:139] Memory required for data: 17990808
I0428 20:24:33.691090  2423 net.cpp:200] loss needs backward computation.
I0428 20:24:33.691093  2423 net.cpp:202] accuracy does not need backward computation.
I0428 20:24:33.691098  2423 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:24:33.691108  2423 net.cpp:200] relu3 needs backward computation.
I0428 20:24:33.691112  2423 net.cpp:200] ip3 needs backward computation.
I0428 20:24:33.691114  2423 net.cpp:200] relu2 needs backward computation.
I0428 20:24:33.691118  2423 net.cpp:200] ip2 needs backward computation.
I0428 20:24:33.691120  2423 net.cpp:200] relu1 needs backward computation.
I0428 20:24:33.691123  2423 net.cpp:200] ip1 needs backward computation.
I0428 20:24:33.691125  2423 net.cpp:200] pool1 needs backward computation.
I0428 20:24:33.691129  2423 net.cpp:200] conv1 needs backward computation.
I0428 20:24:33.691138  2423 net.cpp:200] pool0 needs backward computation.
I0428 20:24:33.691141  2423 net.cpp:200] conv0 needs backward computation.
I0428 20:24:33.691145  2423 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:24:33.691149  2423 net.cpp:202] mnist does not need backward computation.
I0428 20:24:33.691151  2423 net.cpp:244] This network produces output accuracy
I0428 20:24:33.691155  2423 net.cpp:244] This network produces output loss
I0428 20:24:33.691165  2423 net.cpp:257] Network initialization done.
I0428 20:24:33.691207  2423 solver.cpp:56] Solver scaffolding done.
I0428 20:24:33.691540  2423 caffe.cpp:248] Starting Optimization
I0428 20:24:33.691546  2423 solver.cpp:273] Solving LeNet
I0428 20:24:33.691550  2423 solver.cpp:274] Learning Rate Policy: inv
I0428 20:24:33.691795  2423 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:24:33.782558  2430 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:24:33.784871  2423 solver.cpp:398]     Test net output #0: accuracy = 0.1775
I0428 20:24:33.784893  2423 solver.cpp:398]     Test net output #1: loss = 2.29052 (* 1 = 2.29052 loss)
I0428 20:24:33.790477  2423 solver.cpp:219] Iteration 0 (0 iter/s, 0.0988959s/100 iters), loss = 2.27846
I0428 20:24:33.790500  2423 solver.cpp:238]     Train net output #0: loss = 2.27846 (* 1 = 2.27846 loss)
I0428 20:24:33.790511  2423 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:24:34.020403  2423 solver.cpp:219] Iteration 100 (435.006 iter/s, 0.229882s/100 iters), loss = 0.216126
I0428 20:24:34.020444  2423 solver.cpp:238]     Train net output #0: loss = 0.216126 (* 1 = 0.216126 loss)
I0428 20:24:34.020455  2423 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:24:34.246752  2423 solver.cpp:219] Iteration 200 (441.913 iter/s, 0.226289s/100 iters), loss = 0.142995
I0428 20:24:34.246798  2423 solver.cpp:238]     Train net output #0: loss = 0.142995 (* 1 = 0.142995 loss)
I0428 20:24:34.246809  2423 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:24:34.482517  2423 solver.cpp:219] Iteration 300 (424.262 iter/s, 0.235703s/100 iters), loss = 0.187787
I0428 20:24:34.482550  2423 solver.cpp:238]     Train net output #0: loss = 0.187787 (* 1 = 0.187787 loss)
I0428 20:24:34.482558  2423 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:24:34.710304  2423 solver.cpp:219] Iteration 400 (439.102 iter/s, 0.227738s/100 iters), loss = 0.092883
I0428 20:24:34.710338  2423 solver.cpp:238]     Train net output #0: loss = 0.092883 (* 1 = 0.092883 loss)
I0428 20:24:34.710346  2423 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:24:34.939007  2423 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:24:35.031576  2430 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:24:35.034191  2423 solver.cpp:398]     Test net output #0: accuracy = 0.9708
I0428 20:24:35.034219  2423 solver.cpp:398]     Test net output #1: loss = 0.0915477 (* 1 = 0.0915477 loss)
I0428 20:24:35.036461  2423 solver.cpp:219] Iteration 500 (306.652 iter/s, 0.326103s/100 iters), loss = 0.0864911
I0428 20:24:35.036490  2423 solver.cpp:238]     Train net output #0: loss = 0.0864911 (* 1 = 0.0864911 loss)
I0428 20:24:35.036514  2423 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:24:35.274793  2423 solver.cpp:219] Iteration 600 (419.668 iter/s, 0.238284s/100 iters), loss = 0.0645893
I0428 20:24:35.274828  2423 solver.cpp:238]     Train net output #0: loss = 0.0645893 (* 1 = 0.0645893 loss)
I0428 20:24:35.274837  2423 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:24:35.512619  2423 solver.cpp:219] Iteration 700 (420.57 iter/s, 0.237773s/100 iters), loss = 0.104104
I0428 20:24:35.512658  2423 solver.cpp:238]     Train net output #0: loss = 0.104104 (* 1 = 0.104104 loss)
I0428 20:24:35.512667  2423 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:24:35.749560  2423 solver.cpp:219] Iteration 800 (422.142 iter/s, 0.236887s/100 iters), loss = 0.252017
I0428 20:24:35.749593  2423 solver.cpp:238]     Train net output #0: loss = 0.252017 (* 1 = 0.252017 loss)
I0428 20:24:35.749601  2423 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:24:35.984853  2423 solver.cpp:219] Iteration 900 (425.093 iter/s, 0.235242s/100 iters), loss = 0.155338
I0428 20:24:35.984885  2423 solver.cpp:238]     Train net output #0: loss = 0.155338 (* 1 = 0.155338 loss)
I0428 20:24:35.984894  2423 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:24:36.060750  2429 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:24:36.210975  2423 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:24:36.218133  2423 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:24:36.221395  2423 solver.cpp:311] Iteration 1000, loss = 0.108873
I0428 20:24:36.221422  2423 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:24:36.317142  2430 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:24:36.319582  2423 solver.cpp:398]     Test net output #0: accuracy = 0.9801
I0428 20:24:36.319605  2423 solver.cpp:398]     Test net output #1: loss = 0.0626503 (* 1 = 0.0626503 loss)
I0428 20:24:36.319619  2423 solver.cpp:316] Optimization Done.
I0428 20:24:36.319623  2423 caffe.cpp:259] Optimization Done.
