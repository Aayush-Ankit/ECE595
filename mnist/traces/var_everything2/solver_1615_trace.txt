I0428 20:35:04.514961  4569 caffe.cpp:218] Using GPUs 0
I0428 20:35:04.551985  4569 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:35:05.061033  4569 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1615.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:35:05.061607  4569 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1615.prototxt
I0428 20:35:05.062363  4569 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:35:05.062397  4569 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:35:05.062580  4569 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:05.062706  4569 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:05.062850  4569 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:35:05.062885  4569 net.cpp:86] Creating Layer mnist
I0428 20:35:05.062896  4569 net.cpp:382] mnist -> data
I0428 20:35:05.062930  4569 net.cpp:382] mnist -> label
I0428 20:35:05.064640  4569 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:35:05.068884  4569 net.cpp:124] Setting up mnist
I0428 20:35:05.068915  4569 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:35:05.068927  4569 net.cpp:131] Top shape: 64 (64)
I0428 20:35:05.068933  4569 net.cpp:139] Memory required for data: 200960
I0428 20:35:05.068944  4569 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:05.068980  4569 net.cpp:86] Creating Layer conv0
I0428 20:35:05.069031  4569 net.cpp:408] conv0 <- data
I0428 20:35:05.069067  4569 net.cpp:382] conv0 -> conv0
I0428 20:35:05.386282  4569 net.cpp:124] Setting up conv0
I0428 20:35:05.386315  4569 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:35:05.386320  4569 net.cpp:139] Memory required for data: 14946560
I0428 20:35:05.386338  4569 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:05.386355  4569 net.cpp:86] Creating Layer pool0
I0428 20:35:05.386360  4569 net.cpp:408] pool0 <- conv0
I0428 20:35:05.386368  4569 net.cpp:382] pool0 -> pool0
I0428 20:35:05.386447  4569 net.cpp:124] Setting up pool0
I0428 20:35:05.386463  4569 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:35:05.386471  4569 net.cpp:139] Memory required for data: 18632960
I0428 20:35:05.386476  4569 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:05.386497  4569 net.cpp:86] Creating Layer conv1
I0428 20:35:05.386508  4569 net.cpp:408] conv1 <- pool0
I0428 20:35:05.386518  4569 net.cpp:382] conv1 -> conv1
I0428 20:35:05.391080  4569 net.cpp:124] Setting up conv1
I0428 20:35:05.391099  4569 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:35:05.391104  4569 net.cpp:139] Memory required for data: 19452160
I0428 20:35:05.391115  4569 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:05.391124  4569 net.cpp:86] Creating Layer pool1
I0428 20:35:05.391129  4569 net.cpp:408] pool1 <- conv1
I0428 20:35:05.391134  4569 net.cpp:382] pool1 -> pool1
I0428 20:35:05.391192  4569 net.cpp:124] Setting up pool1
I0428 20:35:05.391206  4569 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:35:05.391211  4569 net.cpp:139] Memory required for data: 19656960
I0428 20:35:05.391217  4569 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:05.391232  4569 net.cpp:86] Creating Layer ip1
I0428 20:35:05.391238  4569 net.cpp:408] ip1 <- pool1
I0428 20:35:05.391248  4569 net.cpp:382] ip1 -> ip1
I0428 20:35:05.392933  4569 net.cpp:124] Setting up ip1
I0428 20:35:05.392956  4569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:05.392962  4569 net.cpp:139] Memory required for data: 19659520
I0428 20:35:05.392980  4569 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:05.392992  4569 net.cpp:86] Creating Layer relu1
I0428 20:35:05.392998  4569 net.cpp:408] relu1 <- ip1
I0428 20:35:05.393007  4569 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:05.393301  4569 net.cpp:124] Setting up relu1
I0428 20:35:05.393318  4569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:05.393324  4569 net.cpp:139] Memory required for data: 19662080
I0428 20:35:05.393332  4569 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:05.393343  4569 net.cpp:86] Creating Layer ip2
I0428 20:35:05.393350  4569 net.cpp:408] ip2 <- ip1
I0428 20:35:05.393360  4569 net.cpp:382] ip2 -> ip2
I0428 20:35:05.393518  4569 net.cpp:124] Setting up ip2
I0428 20:35:05.393530  4569 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:05.393537  4569 net.cpp:139] Memory required for data: 19668480
I0428 20:35:05.393548  4569 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:05.393559  4569 net.cpp:86] Creating Layer relu2
I0428 20:35:05.393565  4569 net.cpp:408] relu2 <- ip2
I0428 20:35:05.393574  4569 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:05.394801  4569 net.cpp:124] Setting up relu2
I0428 20:35:05.394822  4569 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:05.394830  4569 net.cpp:139] Memory required for data: 19674880
I0428 20:35:05.394837  4569 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:05.394850  4569 net.cpp:86] Creating Layer ip3
I0428 20:35:05.394857  4569 net.cpp:408] ip3 <- ip2
I0428 20:35:05.394867  4569 net.cpp:382] ip3 -> ip3
I0428 20:35:05.395025  4569 net.cpp:124] Setting up ip3
I0428 20:35:05.395040  4569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:05.395045  4569 net.cpp:139] Memory required for data: 19677440
I0428 20:35:05.395061  4569 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:05.395071  4569 net.cpp:86] Creating Layer relu3
I0428 20:35:05.395077  4569 net.cpp:408] relu3 <- ip3
I0428 20:35:05.395087  4569 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:05.395365  4569 net.cpp:124] Setting up relu3
I0428 20:35:05.395382  4569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:05.395390  4569 net.cpp:139] Memory required for data: 19680000
I0428 20:35:05.395396  4569 layer_factory.hpp:77] Creating layer loss
I0428 20:35:05.395406  4569 net.cpp:86] Creating Layer loss
I0428 20:35:05.395413  4569 net.cpp:408] loss <- ip3
I0428 20:35:05.395421  4569 net.cpp:408] loss <- label
I0428 20:35:05.395431  4569 net.cpp:382] loss -> loss
I0428 20:35:05.395460  4569 layer_factory.hpp:77] Creating layer loss
I0428 20:35:05.395844  4569 net.cpp:124] Setting up loss
I0428 20:35:05.395862  4569 net.cpp:131] Top shape: (1)
I0428 20:35:05.395869  4569 net.cpp:134]     with loss weight 1
I0428 20:35:05.395895  4569 net.cpp:139] Memory required for data: 19680004
I0428 20:35:05.395901  4569 net.cpp:200] loss needs backward computation.
I0428 20:35:05.395908  4569 net.cpp:200] relu3 needs backward computation.
I0428 20:35:05.395915  4569 net.cpp:200] ip3 needs backward computation.
I0428 20:35:05.395921  4569 net.cpp:200] relu2 needs backward computation.
I0428 20:35:05.395927  4569 net.cpp:200] ip2 needs backward computation.
I0428 20:35:05.395933  4569 net.cpp:200] relu1 needs backward computation.
I0428 20:35:05.395939  4569 net.cpp:200] ip1 needs backward computation.
I0428 20:35:05.395946  4569 net.cpp:200] pool1 needs backward computation.
I0428 20:35:05.395951  4569 net.cpp:200] conv1 needs backward computation.
I0428 20:35:05.395958  4569 net.cpp:200] pool0 needs backward computation.
I0428 20:35:05.395964  4569 net.cpp:200] conv0 needs backward computation.
I0428 20:35:05.395972  4569 net.cpp:202] mnist does not need backward computation.
I0428 20:35:05.395977  4569 net.cpp:244] This network produces output loss
I0428 20:35:05.395994  4569 net.cpp:257] Network initialization done.
I0428 20:35:05.396605  4569 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1615.prototxt
I0428 20:35:05.396656  4569 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:35:05.396839  4569 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:05.396986  4569 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:05.397058  4569 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:35:05.397078  4569 net.cpp:86] Creating Layer mnist
I0428 20:35:05.397086  4569 net.cpp:382] mnist -> data
I0428 20:35:05.397100  4569 net.cpp:382] mnist -> label
I0428 20:35:05.397238  4569 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:35:05.399158  4569 net.cpp:124] Setting up mnist
I0428 20:35:05.399178  4569 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:35:05.399188  4569 net.cpp:131] Top shape: 100 (100)
I0428 20:35:05.399194  4569 net.cpp:139] Memory required for data: 314000
I0428 20:35:05.399201  4569 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:35:05.399214  4569 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:35:05.399221  4569 net.cpp:408] label_mnist_1_split <- label
I0428 20:35:05.399230  4569 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:35:05.399243  4569 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:35:05.399397  4569 net.cpp:124] Setting up label_mnist_1_split
I0428 20:35:05.399412  4569 net.cpp:131] Top shape: 100 (100)
I0428 20:35:05.399421  4569 net.cpp:131] Top shape: 100 (100)
I0428 20:35:05.399428  4569 net.cpp:139] Memory required for data: 314800
I0428 20:35:05.399435  4569 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:05.399451  4569 net.cpp:86] Creating Layer conv0
I0428 20:35:05.399457  4569 net.cpp:408] conv0 <- data
I0428 20:35:05.399467  4569 net.cpp:382] conv0 -> conv0
I0428 20:35:05.401469  4569 net.cpp:124] Setting up conv0
I0428 20:35:05.401494  4569 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:35:05.401501  4569 net.cpp:139] Memory required for data: 23354800
I0428 20:35:05.401518  4569 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:05.401531  4569 net.cpp:86] Creating Layer pool0
I0428 20:35:05.401538  4569 net.cpp:408] pool0 <- conv0
I0428 20:35:05.401547  4569 net.cpp:382] pool0 -> pool0
I0428 20:35:05.401604  4569 net.cpp:124] Setting up pool0
I0428 20:35:05.401620  4569 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:35:05.401626  4569 net.cpp:139] Memory required for data: 29114800
I0428 20:35:05.401633  4569 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:05.401648  4569 net.cpp:86] Creating Layer conv1
I0428 20:35:05.401655  4569 net.cpp:408] conv1 <- pool0
I0428 20:35:05.401666  4569 net.cpp:382] conv1 -> conv1
I0428 20:35:05.405843  4569 net.cpp:124] Setting up conv1
I0428 20:35:05.405860  4569 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:35:05.405864  4569 net.cpp:139] Memory required for data: 30394800
I0428 20:35:05.405875  4569 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:05.405884  4569 net.cpp:86] Creating Layer pool1
I0428 20:35:05.405890  4569 net.cpp:408] pool1 <- conv1
I0428 20:35:05.405902  4569 net.cpp:382] pool1 -> pool1
I0428 20:35:05.405961  4569 net.cpp:124] Setting up pool1
I0428 20:35:05.405980  4569 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:35:05.405987  4569 net.cpp:139] Memory required for data: 30714800
I0428 20:35:05.405993  4569 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:05.406004  4569 net.cpp:86] Creating Layer ip1
I0428 20:35:05.406011  4569 net.cpp:408] ip1 <- pool1
I0428 20:35:05.406021  4569 net.cpp:382] ip1 -> ip1
I0428 20:35:05.406276  4569 net.cpp:124] Setting up ip1
I0428 20:35:05.406308  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.406316  4569 net.cpp:139] Memory required for data: 30718800
I0428 20:35:05.406329  4569 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:05.406339  4569 net.cpp:86] Creating Layer relu1
I0428 20:35:05.406354  4569 net.cpp:408] relu1 <- ip1
I0428 20:35:05.406364  4569 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:05.406668  4569 net.cpp:124] Setting up relu1
I0428 20:35:05.406683  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.406690  4569 net.cpp:139] Memory required for data: 30722800
I0428 20:35:05.406697  4569 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:05.406709  4569 net.cpp:86] Creating Layer ip2
I0428 20:35:05.406716  4569 net.cpp:408] ip2 <- ip1
I0428 20:35:05.406725  4569 net.cpp:382] ip2 -> ip2
I0428 20:35:05.406888  4569 net.cpp:124] Setting up ip2
I0428 20:35:05.406903  4569 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:05.406910  4569 net.cpp:139] Memory required for data: 30732800
I0428 20:35:05.406921  4569 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:05.406930  4569 net.cpp:86] Creating Layer relu2
I0428 20:35:05.406936  4569 net.cpp:408] relu2 <- ip2
I0428 20:35:05.406945  4569 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:05.407207  4569 net.cpp:124] Setting up relu2
I0428 20:35:05.407222  4569 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:05.407229  4569 net.cpp:139] Memory required for data: 30742800
I0428 20:35:05.407235  4569 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:05.407246  4569 net.cpp:86] Creating Layer ip3
I0428 20:35:05.407253  4569 net.cpp:408] ip3 <- ip2
I0428 20:35:05.407263  4569 net.cpp:382] ip3 -> ip3
I0428 20:35:05.407424  4569 net.cpp:124] Setting up ip3
I0428 20:35:05.407439  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.407445  4569 net.cpp:139] Memory required for data: 30746800
I0428 20:35:05.407460  4569 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:05.407469  4569 net.cpp:86] Creating Layer relu3
I0428 20:35:05.407476  4569 net.cpp:408] relu3 <- ip3
I0428 20:35:05.407485  4569 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:05.408725  4569 net.cpp:124] Setting up relu3
I0428 20:35:05.408746  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.408753  4569 net.cpp:139] Memory required for data: 30750800
I0428 20:35:05.408761  4569 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:35:05.408769  4569 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:35:05.408776  4569 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:35:05.408787  4569 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:35:05.408797  4569 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:35:05.408865  4569 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:35:05.408879  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.408886  4569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:05.408892  4569 net.cpp:139] Memory required for data: 30758800
I0428 20:35:05.408900  4569 layer_factory.hpp:77] Creating layer accuracy
I0428 20:35:05.408908  4569 net.cpp:86] Creating Layer accuracy
I0428 20:35:05.408915  4569 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:35:05.408922  4569 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:35:05.408931  4569 net.cpp:382] accuracy -> accuracy
I0428 20:35:05.408943  4569 net.cpp:124] Setting up accuracy
I0428 20:35:05.408951  4569 net.cpp:131] Top shape: (1)
I0428 20:35:05.408957  4569 net.cpp:139] Memory required for data: 30758804
I0428 20:35:05.408963  4569 layer_factory.hpp:77] Creating layer loss
I0428 20:35:05.408972  4569 net.cpp:86] Creating Layer loss
I0428 20:35:05.408977  4569 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:35:05.408985  4569 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:35:05.408993  4569 net.cpp:382] loss -> loss
I0428 20:35:05.409003  4569 layer_factory.hpp:77] Creating layer loss
I0428 20:35:05.409377  4569 net.cpp:124] Setting up loss
I0428 20:35:05.409395  4569 net.cpp:131] Top shape: (1)
I0428 20:35:05.409402  4569 net.cpp:134]     with loss weight 1
I0428 20:35:05.409428  4569 net.cpp:139] Memory required for data: 30758808
I0428 20:35:05.409435  4569 net.cpp:200] loss needs backward computation.
I0428 20:35:05.409442  4569 net.cpp:202] accuracy does not need backward computation.
I0428 20:35:05.409451  4569 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:35:05.409456  4569 net.cpp:200] relu3 needs backward computation.
I0428 20:35:05.409462  4569 net.cpp:200] ip3 needs backward computation.
I0428 20:35:05.409468  4569 net.cpp:200] relu2 needs backward computation.
I0428 20:35:05.409474  4569 net.cpp:200] ip2 needs backward computation.
I0428 20:35:05.409481  4569 net.cpp:200] relu1 needs backward computation.
I0428 20:35:05.409487  4569 net.cpp:200] ip1 needs backward computation.
I0428 20:35:05.409492  4569 net.cpp:200] pool1 needs backward computation.
I0428 20:35:05.409498  4569 net.cpp:200] conv1 needs backward computation.
I0428 20:35:05.409505  4569 net.cpp:200] pool0 needs backward computation.
I0428 20:35:05.409512  4569 net.cpp:200] conv0 needs backward computation.
I0428 20:35:05.409518  4569 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:35:05.409525  4569 net.cpp:202] mnist does not need backward computation.
I0428 20:35:05.409531  4569 net.cpp:244] This network produces output accuracy
I0428 20:35:05.409538  4569 net.cpp:244] This network produces output loss
I0428 20:35:05.409557  4569 net.cpp:257] Network initialization done.
I0428 20:35:05.409631  4569 solver.cpp:56] Solver scaffolding done.
I0428 20:35:05.410202  4569 caffe.cpp:248] Starting Optimization
I0428 20:35:05.410212  4569 solver.cpp:273] Solving LeNet
I0428 20:35:05.410219  4569 solver.cpp:274] Learning Rate Policy: inv
I0428 20:35:05.410506  4569 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:35:05.524966  4576 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:05.528237  4569 solver.cpp:398]     Test net output #0: accuracy = 0.118
I0428 20:35:05.528262  4569 solver.cpp:398]     Test net output #1: loss = 2.29833 (* 1 = 2.29833 loss)
I0428 20:35:05.534303  4569 solver.cpp:219] Iteration 0 (-5.16135e-31 iter/s, 0.12405s/100 iters), loss = 2.2949
I0428 20:35:05.534333  4569 solver.cpp:238]     Train net output #0: loss = 2.2949 (* 1 = 2.2949 loss)
I0428 20:35:05.534348  4569 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:35:05.764075  4569 solver.cpp:219] Iteration 100 (435.307 iter/s, 0.229723s/100 iters), loss = 0.520972
I0428 20:35:05.764112  4569 solver.cpp:238]     Train net output #0: loss = 0.520972 (* 1 = 0.520972 loss)
I0428 20:35:05.764122  4569 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:35:06.000387  4569 solver.cpp:219] Iteration 200 (423.267 iter/s, 0.236257s/100 iters), loss = 0.330918
I0428 20:35:06.000432  4569 solver.cpp:238]     Train net output #0: loss = 0.330918 (* 1 = 0.330918 loss)
I0428 20:35:06.000444  4569 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:35:06.247247  4569 solver.cpp:219] Iteration 300 (405.189 iter/s, 0.246798s/100 iters), loss = 0.391575
I0428 20:35:06.247292  4569 solver.cpp:238]     Train net output #0: loss = 0.391575 (* 1 = 0.391575 loss)
I0428 20:35:06.247304  4569 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:35:06.491629  4569 solver.cpp:219] Iteration 400 (409.301 iter/s, 0.244319s/100 iters), loss = 0.555278
I0428 20:35:06.491673  4569 solver.cpp:238]     Train net output #0: loss = 0.555278 (* 1 = 0.555278 loss)
I0428 20:35:06.491686  4569 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:35:06.735458  4569 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:35:06.850502  4576 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:06.853811  4569 solver.cpp:398]     Test net output #0: accuracy = 0.8708
I0428 20:35:06.853837  4569 solver.cpp:398]     Test net output #1: loss = 0.344108 (* 1 = 0.344108 loss)
I0428 20:35:06.856217  4569 solver.cpp:219] Iteration 500 (274.332 iter/s, 0.364522s/100 iters), loss = 0.472378
I0428 20:35:06.856245  4569 solver.cpp:238]     Train net output #0: loss = 0.472378 (* 1 = 0.472378 loss)
I0428 20:35:06.856272  4569 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:35:07.093485  4569 solver.cpp:219] Iteration 600 (421.546 iter/s, 0.237222s/100 iters), loss = 0.173289
I0428 20:35:07.093520  4569 solver.cpp:238]     Train net output #0: loss = 0.173289 (* 1 = 0.173289 loss)
I0428 20:35:07.093529  4569 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:35:07.333472  4569 solver.cpp:219] Iteration 700 (416.777 iter/s, 0.239936s/100 iters), loss = 0.303275
I0428 20:35:07.333505  4569 solver.cpp:238]     Train net output #0: loss = 0.303275 (* 1 = 0.303275 loss)
I0428 20:35:07.333513  4569 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:35:07.575806  4569 solver.cpp:219] Iteration 800 (412.738 iter/s, 0.242284s/100 iters), loss = 0.443632
I0428 20:35:07.575844  4569 solver.cpp:238]     Train net output #0: loss = 0.443632 (* 1 = 0.443632 loss)
I0428 20:35:07.575851  4569 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:35:07.824622  4569 solver.cpp:219] Iteration 900 (401.988 iter/s, 0.248763s/100 iters), loss = 0.200438
I0428 20:35:07.824682  4569 solver.cpp:238]     Train net output #0: loss = 0.200438 (* 1 = 0.200438 loss)
I0428 20:35:07.824694  4569 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:35:07.909452  4575 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:08.077291  4569 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:35:08.082698  4569 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:35:08.085345  4569 solver.cpp:311] Iteration 1000, loss = 0.183625
I0428 20:35:08.085371  4569 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:35:08.198084  4576 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:08.202145  4569 solver.cpp:398]     Test net output #0: accuracy = 0.8776
I0428 20:35:08.202168  4569 solver.cpp:398]     Test net output #1: loss = 0.315799 (* 1 = 0.315799 loss)
I0428 20:35:08.202174  4569 solver.cpp:316] Optimization Done.
I0428 20:35:08.202178  4569 caffe.cpp:259] Optimization Done.
