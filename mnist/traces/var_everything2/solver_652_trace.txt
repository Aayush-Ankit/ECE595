I0428 19:52:05.421430 27433 caffe.cpp:218] Using GPUs 0
I0428 19:52:05.451371 27433 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:52:05.899972 27433 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test652.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:52:05.900137 27433 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test652.prototxt
I0428 19:52:05.900476 27433 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:52:05.900506 27433 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:52:05.900584 27433 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:05.900647 27433 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:05.900724 27433 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:52:05.900743 27433 net.cpp:86] Creating Layer mnist
I0428 19:52:05.900751 27433 net.cpp:382] mnist -> data
I0428 19:52:05.900770 27433 net.cpp:382] mnist -> label
I0428 19:52:05.901777 27433 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:52:05.903933 27433 net.cpp:124] Setting up mnist
I0428 19:52:05.903973 27433 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:52:05.903980 27433 net.cpp:131] Top shape: 64 (64)
I0428 19:52:05.903981 27433 net.cpp:139] Memory required for data: 200960
I0428 19:52:05.903987 27433 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:05.904001 27433 net.cpp:86] Creating Layer conv0
I0428 19:52:05.904019 27433 net.cpp:408] conv0 <- data
I0428 19:52:05.904031 27433 net.cpp:382] conv0 -> conv0
I0428 19:52:06.134989 27433 net.cpp:124] Setting up conv0
I0428 19:52:06.135030 27433 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:52:06.135035 27433 net.cpp:139] Memory required for data: 938240
I0428 19:52:06.135048 27433 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:06.135061 27433 net.cpp:86] Creating Layer pool0
I0428 19:52:06.135066 27433 net.cpp:408] pool0 <- conv0
I0428 19:52:06.135071 27433 net.cpp:382] pool0 -> pool0
I0428 19:52:06.135133 27433 net.cpp:124] Setting up pool0
I0428 19:52:06.135149 27433 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:52:06.135151 27433 net.cpp:139] Memory required for data: 1122560
I0428 19:52:06.135154 27433 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:06.135164 27433 net.cpp:86] Creating Layer conv1
I0428 19:52:06.135169 27433 net.cpp:408] conv1 <- pool0
I0428 19:52:06.135172 27433 net.cpp:382] conv1 -> conv1
I0428 19:52:06.138111 27433 net.cpp:124] Setting up conv1
I0428 19:52:06.138128 27433 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:52:06.138131 27433 net.cpp:139] Memory required for data: 1532160
I0428 19:52:06.138154 27433 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:06.138161 27433 net.cpp:86] Creating Layer pool1
I0428 19:52:06.138165 27433 net.cpp:408] pool1 <- conv1
I0428 19:52:06.138171 27433 net.cpp:382] pool1 -> pool1
I0428 19:52:06.138211 27433 net.cpp:124] Setting up pool1
I0428 19:52:06.138218 27433 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:52:06.138221 27433 net.cpp:139] Memory required for data: 1634560
I0428 19:52:06.138224 27433 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:06.138231 27433 net.cpp:86] Creating Layer ip1
I0428 19:52:06.138234 27433 net.cpp:408] ip1 <- pool1
I0428 19:52:06.138239 27433 net.cpp:382] ip1 -> ip1
I0428 19:52:06.139269 27433 net.cpp:124] Setting up ip1
I0428 19:52:06.139283 27433 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:06.139286 27433 net.cpp:139] Memory required for data: 1640960
I0428 19:52:06.139295 27433 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:06.139302 27433 net.cpp:86] Creating Layer relu1
I0428 19:52:06.139305 27433 net.cpp:408] relu1 <- ip1
I0428 19:52:06.139310 27433 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:06.139489 27433 net.cpp:124] Setting up relu1
I0428 19:52:06.139498 27433 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:06.139503 27433 net.cpp:139] Memory required for data: 1647360
I0428 19:52:06.139505 27433 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:06.139515 27433 net.cpp:86] Creating Layer ip2
I0428 19:52:06.139518 27433 net.cpp:408] ip2 <- ip1
I0428 19:52:06.139524 27433 net.cpp:382] ip2 -> ip2
I0428 19:52:06.139637 27433 net.cpp:124] Setting up ip2
I0428 19:52:06.139644 27433 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:52:06.139647 27433 net.cpp:139] Memory required for data: 1660160
I0428 19:52:06.139652 27433 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:06.139659 27433 net.cpp:86] Creating Layer relu2
I0428 19:52:06.139662 27433 net.cpp:408] relu2 <- ip2
I0428 19:52:06.139667 27433 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:06.140431 27433 net.cpp:124] Setting up relu2
I0428 19:52:06.140444 27433 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:52:06.140463 27433 net.cpp:139] Memory required for data: 1672960
I0428 19:52:06.140467 27433 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:06.140476 27433 net.cpp:86] Creating Layer ip3
I0428 19:52:06.140480 27433 net.cpp:408] ip3 <- ip2
I0428 19:52:06.140485 27433 net.cpp:382] ip3 -> ip3
I0428 19:52:06.140595 27433 net.cpp:124] Setting up ip3
I0428 19:52:06.140604 27433 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:06.140606 27433 net.cpp:139] Memory required for data: 1675520
I0428 19:52:06.140614 27433 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:06.140620 27433 net.cpp:86] Creating Layer relu3
I0428 19:52:06.140624 27433 net.cpp:408] relu3 <- ip3
I0428 19:52:06.140627 27433 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:06.140830 27433 net.cpp:124] Setting up relu3
I0428 19:52:06.140841 27433 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:06.140844 27433 net.cpp:139] Memory required for data: 1678080
I0428 19:52:06.140847 27433 layer_factory.hpp:77] Creating layer loss
I0428 19:52:06.140854 27433 net.cpp:86] Creating Layer loss
I0428 19:52:06.140858 27433 net.cpp:408] loss <- ip3
I0428 19:52:06.140862 27433 net.cpp:408] loss <- label
I0428 19:52:06.140867 27433 net.cpp:382] loss -> loss
I0428 19:52:06.140885 27433 layer_factory.hpp:77] Creating layer loss
I0428 19:52:06.141165 27433 net.cpp:124] Setting up loss
I0428 19:52:06.141173 27433 net.cpp:131] Top shape: (1)
I0428 19:52:06.141176 27433 net.cpp:134]     with loss weight 1
I0428 19:52:06.141189 27433 net.cpp:139] Memory required for data: 1678084
I0428 19:52:06.141192 27433 net.cpp:200] loss needs backward computation.
I0428 19:52:06.141196 27433 net.cpp:200] relu3 needs backward computation.
I0428 19:52:06.141199 27433 net.cpp:200] ip3 needs backward computation.
I0428 19:52:06.141202 27433 net.cpp:200] relu2 needs backward computation.
I0428 19:52:06.141204 27433 net.cpp:200] ip2 needs backward computation.
I0428 19:52:06.141207 27433 net.cpp:200] relu1 needs backward computation.
I0428 19:52:06.141211 27433 net.cpp:200] ip1 needs backward computation.
I0428 19:52:06.141213 27433 net.cpp:200] pool1 needs backward computation.
I0428 19:52:06.141216 27433 net.cpp:200] conv1 needs backward computation.
I0428 19:52:06.141218 27433 net.cpp:200] pool0 needs backward computation.
I0428 19:52:06.141222 27433 net.cpp:200] conv0 needs backward computation.
I0428 19:52:06.141224 27433 net.cpp:202] mnist does not need backward computation.
I0428 19:52:06.141227 27433 net.cpp:244] This network produces output loss
I0428 19:52:06.141237 27433 net.cpp:257] Network initialization done.
I0428 19:52:06.141597 27433 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test652.prototxt
I0428 19:52:06.141639 27433 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:52:06.141744 27433 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:06.141827 27433 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:06.141870 27433 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:52:06.141882 27433 net.cpp:86] Creating Layer mnist
I0428 19:52:06.141888 27433 net.cpp:382] mnist -> data
I0428 19:52:06.141896 27433 net.cpp:382] mnist -> label
I0428 19:52:06.141983 27433 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:52:06.144147 27433 net.cpp:124] Setting up mnist
I0428 19:52:06.144174 27433 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:52:06.144196 27433 net.cpp:131] Top shape: 100 (100)
I0428 19:52:06.144198 27433 net.cpp:139] Memory required for data: 314000
I0428 19:52:06.144202 27433 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:52:06.144215 27433 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:52:06.144219 27433 net.cpp:408] label_mnist_1_split <- label
I0428 19:52:06.144235 27433 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:52:06.144243 27433 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:52:06.144348 27433 net.cpp:124] Setting up label_mnist_1_split
I0428 19:52:06.144357 27433 net.cpp:131] Top shape: 100 (100)
I0428 19:52:06.144361 27433 net.cpp:131] Top shape: 100 (100)
I0428 19:52:06.144364 27433 net.cpp:139] Memory required for data: 314800
I0428 19:52:06.144367 27433 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:06.144378 27433 net.cpp:86] Creating Layer conv0
I0428 19:52:06.144381 27433 net.cpp:408] conv0 <- data
I0428 19:52:06.144387 27433 net.cpp:382] conv0 -> conv0
I0428 19:52:06.146157 27433 net.cpp:124] Setting up conv0
I0428 19:52:06.146188 27433 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:52:06.146193 27433 net.cpp:139] Memory required for data: 1466800
I0428 19:52:06.146201 27433 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:06.146208 27433 net.cpp:86] Creating Layer pool0
I0428 19:52:06.146210 27433 net.cpp:408] pool0 <- conv0
I0428 19:52:06.146215 27433 net.cpp:382] pool0 -> pool0
I0428 19:52:06.146251 27433 net.cpp:124] Setting up pool0
I0428 19:52:06.146257 27433 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:52:06.146260 27433 net.cpp:139] Memory required for data: 1754800
I0428 19:52:06.146262 27433 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:06.146271 27433 net.cpp:86] Creating Layer conv1
I0428 19:52:06.146275 27433 net.cpp:408] conv1 <- pool0
I0428 19:52:06.146280 27433 net.cpp:382] conv1 -> conv1
I0428 19:52:06.148319 27433 net.cpp:124] Setting up conv1
I0428 19:52:06.148349 27433 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:52:06.148352 27433 net.cpp:139] Memory required for data: 2394800
I0428 19:52:06.148360 27433 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:06.148367 27433 net.cpp:86] Creating Layer pool1
I0428 19:52:06.148370 27433 net.cpp:408] pool1 <- conv1
I0428 19:52:06.148375 27433 net.cpp:382] pool1 -> pool1
I0428 19:52:06.148439 27433 net.cpp:124] Setting up pool1
I0428 19:52:06.148444 27433 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:52:06.148447 27433 net.cpp:139] Memory required for data: 2554800
I0428 19:52:06.148450 27433 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:06.148457 27433 net.cpp:86] Creating Layer ip1
I0428 19:52:06.148459 27433 net.cpp:408] ip1 <- pool1
I0428 19:52:06.148475 27433 net.cpp:382] ip1 -> ip1
I0428 19:52:06.148639 27433 net.cpp:124] Setting up ip1
I0428 19:52:06.148648 27433 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:06.148660 27433 net.cpp:139] Memory required for data: 2564800
I0428 19:52:06.148668 27433 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:06.148674 27433 net.cpp:86] Creating Layer relu1
I0428 19:52:06.148677 27433 net.cpp:408] relu1 <- ip1
I0428 19:52:06.148681 27433 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:06.148910 27433 net.cpp:124] Setting up relu1
I0428 19:52:06.148921 27433 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:06.148924 27433 net.cpp:139] Memory required for data: 2574800
I0428 19:52:06.148928 27433 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:06.148941 27433 net.cpp:86] Creating Layer ip2
I0428 19:52:06.148946 27433 net.cpp:408] ip2 <- ip1
I0428 19:52:06.148950 27433 net.cpp:382] ip2 -> ip2
I0428 19:52:06.149063 27433 net.cpp:124] Setting up ip2
I0428 19:52:06.149071 27433 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:52:06.149075 27433 net.cpp:139] Memory required for data: 2594800
I0428 19:52:06.149080 27433 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:06.149085 27433 net.cpp:86] Creating Layer relu2
I0428 19:52:06.149088 27433 net.cpp:408] relu2 <- ip2
I0428 19:52:06.149094 27433 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:06.149276 27433 net.cpp:124] Setting up relu2
I0428 19:52:06.149284 27433 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:52:06.149287 27433 net.cpp:139] Memory required for data: 2614800
I0428 19:52:06.149291 27433 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:06.149296 27433 net.cpp:86] Creating Layer ip3
I0428 19:52:06.149300 27433 net.cpp:408] ip3 <- ip2
I0428 19:52:06.149307 27433 net.cpp:382] ip3 -> ip3
I0428 19:52:06.149415 27433 net.cpp:124] Setting up ip3
I0428 19:52:06.149423 27433 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:06.149426 27433 net.cpp:139] Memory required for data: 2618800
I0428 19:52:06.149433 27433 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:06.149438 27433 net.cpp:86] Creating Layer relu3
I0428 19:52:06.149442 27433 net.cpp:408] relu3 <- ip3
I0428 19:52:06.149446 27433 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:06.150259 27433 net.cpp:124] Setting up relu3
I0428 19:52:06.150285 27433 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:06.150290 27433 net.cpp:139] Memory required for data: 2622800
I0428 19:52:06.150292 27433 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:52:06.150300 27433 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:52:06.150305 27433 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:52:06.150310 27433 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:52:06.150316 27433 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:52:06.150368 27433 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:52:06.150374 27433 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:06.150378 27433 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:06.150382 27433 net.cpp:139] Memory required for data: 2630800
I0428 19:52:06.150384 27433 layer_factory.hpp:77] Creating layer accuracy
I0428 19:52:06.150391 27433 net.cpp:86] Creating Layer accuracy
I0428 19:52:06.150399 27433 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:52:06.150403 27433 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:52:06.150408 27433 net.cpp:382] accuracy -> accuracy
I0428 19:52:06.150415 27433 net.cpp:124] Setting up accuracy
I0428 19:52:06.150419 27433 net.cpp:131] Top shape: (1)
I0428 19:52:06.150424 27433 net.cpp:139] Memory required for data: 2630804
I0428 19:52:06.150426 27433 layer_factory.hpp:77] Creating layer loss
I0428 19:52:06.150434 27433 net.cpp:86] Creating Layer loss
I0428 19:52:06.150436 27433 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:52:06.150440 27433 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:52:06.150444 27433 net.cpp:382] loss -> loss
I0428 19:52:06.150450 27433 layer_factory.hpp:77] Creating layer loss
I0428 19:52:06.150707 27433 net.cpp:124] Setting up loss
I0428 19:52:06.150728 27433 net.cpp:131] Top shape: (1)
I0428 19:52:06.150732 27433 net.cpp:134]     with loss weight 1
I0428 19:52:06.150737 27433 net.cpp:139] Memory required for data: 2630808
I0428 19:52:06.150749 27433 net.cpp:200] loss needs backward computation.
I0428 19:52:06.150753 27433 net.cpp:202] accuracy does not need backward computation.
I0428 19:52:06.150758 27433 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:52:06.150760 27433 net.cpp:200] relu3 needs backward computation.
I0428 19:52:06.150763 27433 net.cpp:200] ip3 needs backward computation.
I0428 19:52:06.150765 27433 net.cpp:200] relu2 needs backward computation.
I0428 19:52:06.150779 27433 net.cpp:200] ip2 needs backward computation.
I0428 19:52:06.150781 27433 net.cpp:200] relu1 needs backward computation.
I0428 19:52:06.150784 27433 net.cpp:200] ip1 needs backward computation.
I0428 19:52:06.150802 27433 net.cpp:200] pool1 needs backward computation.
I0428 19:52:06.150806 27433 net.cpp:200] conv1 needs backward computation.
I0428 19:52:06.150810 27433 net.cpp:200] pool0 needs backward computation.
I0428 19:52:06.150812 27433 net.cpp:200] conv0 needs backward computation.
I0428 19:52:06.150832 27433 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:52:06.150835 27433 net.cpp:202] mnist does not need backward computation.
I0428 19:52:06.150838 27433 net.cpp:244] This network produces output accuracy
I0428 19:52:06.150842 27433 net.cpp:244] This network produces output loss
I0428 19:52:06.150854 27433 net.cpp:257] Network initialization done.
I0428 19:52:06.150904 27433 solver.cpp:56] Solver scaffolding done.
I0428 19:52:06.151350 27433 caffe.cpp:248] Starting Optimization
I0428 19:52:06.151355 27433 solver.cpp:273] Solving LeNet
I0428 19:52:06.151357 27433 solver.cpp:274] Learning Rate Policy: inv
I0428 19:52:06.152196 27433 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:52:06.155937 27433 blocking_queue.cpp:49] Waiting for data
I0428 19:52:06.228240 27440 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:06.228785 27433 solver.cpp:398]     Test net output #0: accuracy = 0.101
I0428 19:52:06.228827 27433 solver.cpp:398]     Test net output #1: loss = 2.31308 (* 1 = 2.31308 loss)
I0428 19:52:06.230630 27433 solver.cpp:219] Iteration 0 (0 iter/s, 0.0792259s/100 iters), loss = 2.3024
I0428 19:52:06.230675 27433 solver.cpp:238]     Train net output #0: loss = 2.3024 (* 1 = 2.3024 loss)
I0428 19:52:06.230687 27433 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:52:06.329093 27433 solver.cpp:219] Iteration 100 (1016.21 iter/s, 0.0984045s/100 iters), loss = 1.00935
I0428 19:52:06.329134 27433 solver.cpp:238]     Train net output #0: loss = 1.00935 (* 1 = 1.00935 loss)
I0428 19:52:06.329141 27433 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:52:06.424792 27433 solver.cpp:219] Iteration 200 (1045.36 iter/s, 0.0956611s/100 iters), loss = 1.04666
I0428 19:52:06.424840 27433 solver.cpp:238]     Train net output #0: loss = 1.04666 (* 1 = 1.04666 loss)
I0428 19:52:06.424847 27433 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:52:06.514580 27433 solver.cpp:219] Iteration 300 (1114.45 iter/s, 0.08973s/100 iters), loss = 0.983317
I0428 19:52:06.514622 27433 solver.cpp:238]     Train net output #0: loss = 0.983317 (* 1 = 0.983317 loss)
I0428 19:52:06.514628 27433 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:52:06.602501 27433 solver.cpp:219] Iteration 400 (1137.83 iter/s, 0.0878868s/100 iters), loss = 0.771931
I0428 19:52:06.602541 27433 solver.cpp:238]     Train net output #0: loss = 0.771931 (* 1 = 0.771931 loss)
I0428 19:52:06.602548 27433 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:52:06.688458 27433 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:52:06.764595 27440 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:06.765135 27433 solver.cpp:398]     Test net output #0: accuracy = 0.6744
I0428 19:52:06.765171 27433 solver.cpp:398]     Test net output #1: loss = 0.803696 (* 1 = 0.803696 loss)
I0428 19:52:06.766139 27433 solver.cpp:219] Iteration 500 (611.291 iter/s, 0.163588s/100 iters), loss = 0.547986
I0428 19:52:06.766175 27433 solver.cpp:238]     Train net output #0: loss = 0.547986 (* 1 = 0.547986 loss)
I0428 19:52:06.766197 27433 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:52:06.863256 27433 solver.cpp:219] Iteration 600 (1030.02 iter/s, 0.0970854s/100 iters), loss = 0.778504
I0428 19:52:06.863298 27433 solver.cpp:238]     Train net output #0: loss = 0.778504 (* 1 = 0.778504 loss)
I0428 19:52:06.863306 27433 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:52:06.951607 27433 solver.cpp:219] Iteration 700 (1132.51 iter/s, 0.0882995s/100 iters), loss = 0.92686
I0428 19:52:06.951648 27433 solver.cpp:238]     Train net output #0: loss = 0.92686 (* 1 = 0.92686 loss)
I0428 19:52:06.951655 27433 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:52:07.039182 27433 solver.cpp:219] Iteration 800 (1142.34 iter/s, 0.0875398s/100 iters), loss = 0.848594
I0428 19:52:07.039222 27433 solver.cpp:238]     Train net output #0: loss = 0.848594 (* 1 = 0.848594 loss)
I0428 19:52:07.039227 27433 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:52:07.128008 27433 solver.cpp:219] Iteration 900 (1126.2 iter/s, 0.0887941s/100 iters), loss = 1.11073
I0428 19:52:07.128048 27433 solver.cpp:238]     Train net output #0: loss = 1.11073 (* 1 = 1.11073 loss)
I0428 19:52:07.128054 27433 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:52:07.157038 27439 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:07.214608 27433 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:52:07.215597 27433 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:52:07.216157 27433 solver.cpp:311] Iteration 1000, loss = 0.886396
I0428 19:52:07.216187 27433 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:52:07.292721 27440 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:07.293311 27433 solver.cpp:398]     Test net output #0: accuracy = 0.6787
I0428 19:52:07.293346 27433 solver.cpp:398]     Test net output #1: loss = 0.770992 (* 1 = 0.770992 loss)
I0428 19:52:07.293352 27433 solver.cpp:316] Optimization Done.
I0428 19:52:07.293355 27433 caffe.cpp:259] Optimization Done.
