I0428 19:40:05.279044 24463 caffe.cpp:218] Using GPUs 0
I0428 19:40:05.317169 24463 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:05.918629 24463 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test324.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:05.918803 24463 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test324.prototxt
I0428 19:40:05.919431 24463 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:05.919457 24463 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:05.919598 24463 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:05.919709 24463 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:05.919827 24463 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:05.919859 24463 net.cpp:86] Creating Layer mnist
I0428 19:40:05.919869 24463 net.cpp:382] mnist -> data
I0428 19:40:05.919909 24463 net.cpp:382] mnist -> label
I0428 19:40:05.921325 24463 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:05.924816 24463 net.cpp:124] Setting up mnist
I0428 19:40:05.924839 24463 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:05.924850 24463 net.cpp:131] Top shape: 64 (64)
I0428 19:40:05.924856 24463 net.cpp:139] Memory required for data: 200960
I0428 19:40:05.924875 24463 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:05.924903 24463 net.cpp:86] Creating Layer conv0
I0428 19:40:05.924928 24463 net.cpp:408] conv0 <- data
I0428 19:40:05.924947 24463 net.cpp:382] conv0 -> conv0
I0428 19:40:06.293936 24463 net.cpp:124] Setting up conv0
I0428 19:40:06.293973 24463 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:06.293980 24463 net.cpp:139] Memory required for data: 495872
I0428 19:40:06.294003 24463 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:06.294020 24463 net.cpp:86] Creating Layer pool0
I0428 19:40:06.294028 24463 net.cpp:408] pool0 <- conv0
I0428 19:40:06.294037 24463 net.cpp:382] pool0 -> pool0
I0428 19:40:06.294107 24463 net.cpp:124] Setting up pool0
I0428 19:40:06.294119 24463 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:06.294126 24463 net.cpp:139] Memory required for data: 569600
I0428 19:40:06.294131 24463 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:06.294147 24463 net.cpp:86] Creating Layer conv1
I0428 19:40:06.294153 24463 net.cpp:408] conv1 <- pool0
I0428 19:40:06.294162 24463 net.cpp:382] conv1 -> conv1
I0428 19:40:06.297793 24463 net.cpp:124] Setting up conv1
I0428 19:40:06.297818 24463 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:06.297824 24463 net.cpp:139] Memory required for data: 651520
I0428 19:40:06.297838 24463 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:06.297849 24463 net.cpp:86] Creating Layer pool1
I0428 19:40:06.297857 24463 net.cpp:408] pool1 <- conv1
I0428 19:40:06.297865 24463 net.cpp:382] pool1 -> pool1
I0428 19:40:06.297919 24463 net.cpp:124] Setting up pool1
I0428 19:40:06.297933 24463 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:06.297938 24463 net.cpp:139] Memory required for data: 672000
I0428 19:40:06.297945 24463 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:06.297956 24463 net.cpp:86] Creating Layer ip1
I0428 19:40:06.297961 24463 net.cpp:408] ip1 <- pool1
I0428 19:40:06.297969 24463 net.cpp:382] ip1 -> ip1
I0428 19:40:06.298117 24463 net.cpp:124] Setting up ip1
I0428 19:40:06.298130 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.298136 24463 net.cpp:139] Memory required for data: 674560
I0428 19:40:06.298148 24463 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:06.298157 24463 net.cpp:86] Creating Layer relu1
I0428 19:40:06.298171 24463 net.cpp:408] relu1 <- ip1
I0428 19:40:06.298178 24463 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:06.298427 24463 net.cpp:124] Setting up relu1
I0428 19:40:06.298441 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.298449 24463 net.cpp:139] Memory required for data: 677120
I0428 19:40:06.298454 24463 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:06.298467 24463 net.cpp:86] Creating Layer ip2
I0428 19:40:06.298475 24463 net.cpp:408] ip2 <- ip1
I0428 19:40:06.298482 24463 net.cpp:382] ip2 -> ip2
I0428 19:40:06.298629 24463 net.cpp:124] Setting up ip2
I0428 19:40:06.298640 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.298647 24463 net.cpp:139] Memory required for data: 679680
I0428 19:40:06.298657 24463 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:06.298668 24463 net.cpp:86] Creating Layer relu2
I0428 19:40:06.298676 24463 net.cpp:408] relu2 <- ip2
I0428 19:40:06.298683 24463 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:06.299811 24463 net.cpp:124] Setting up relu2
I0428 19:40:06.299829 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.299836 24463 net.cpp:139] Memory required for data: 682240
I0428 19:40:06.299842 24463 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:06.299854 24463 net.cpp:86] Creating Layer ip3
I0428 19:40:06.299862 24463 net.cpp:408] ip3 <- ip2
I0428 19:40:06.299872 24463 net.cpp:382] ip3 -> ip3
I0428 19:40:06.300020 24463 net.cpp:124] Setting up ip3
I0428 19:40:06.300032 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.300040 24463 net.cpp:139] Memory required for data: 684800
I0428 19:40:06.300053 24463 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:06.300063 24463 net.cpp:86] Creating Layer relu3
I0428 19:40:06.300071 24463 net.cpp:408] relu3 <- ip3
I0428 19:40:06.300077 24463 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:06.300330 24463 net.cpp:124] Setting up relu3
I0428 19:40:06.300343 24463 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:06.300350 24463 net.cpp:139] Memory required for data: 687360
I0428 19:40:06.300356 24463 layer_factory.hpp:77] Creating layer loss
I0428 19:40:06.300365 24463 net.cpp:86] Creating Layer loss
I0428 19:40:06.300372 24463 net.cpp:408] loss <- ip3
I0428 19:40:06.300379 24463 net.cpp:408] loss <- label
I0428 19:40:06.300390 24463 net.cpp:382] loss -> loss
I0428 19:40:06.300417 24463 layer_factory.hpp:77] Creating layer loss
I0428 19:40:06.300753 24463 net.cpp:124] Setting up loss
I0428 19:40:06.300767 24463 net.cpp:131] Top shape: (1)
I0428 19:40:06.300775 24463 net.cpp:134]     with loss weight 1
I0428 19:40:06.300796 24463 net.cpp:139] Memory required for data: 687364
I0428 19:40:06.300803 24463 net.cpp:200] loss needs backward computation.
I0428 19:40:06.300820 24463 net.cpp:200] relu3 needs backward computation.
I0428 19:40:06.300829 24463 net.cpp:200] ip3 needs backward computation.
I0428 19:40:06.300834 24463 net.cpp:200] relu2 needs backward computation.
I0428 19:40:06.300853 24463 net.cpp:200] ip2 needs backward computation.
I0428 19:40:06.300858 24463 net.cpp:200] relu1 needs backward computation.
I0428 19:40:06.300863 24463 net.cpp:200] ip1 needs backward computation.
I0428 19:40:06.300869 24463 net.cpp:200] pool1 needs backward computation.
I0428 19:40:06.300874 24463 net.cpp:200] conv1 needs backward computation.
I0428 19:40:06.300880 24463 net.cpp:200] pool0 needs backward computation.
I0428 19:40:06.300889 24463 net.cpp:200] conv0 needs backward computation.
I0428 19:40:06.300894 24463 net.cpp:202] mnist does not need backward computation.
I0428 19:40:06.300901 24463 net.cpp:244] This network produces output loss
I0428 19:40:06.300916 24463 net.cpp:257] Network initialization done.
I0428 19:40:06.301461 24463 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test324.prototxt
I0428 19:40:06.301506 24463 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:06.301659 24463 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:06.301795 24463 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:06.301859 24463 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:06.301877 24463 net.cpp:86] Creating Layer mnist
I0428 19:40:06.301885 24463 net.cpp:382] mnist -> data
I0428 19:40:06.301898 24463 net.cpp:382] mnist -> label
I0428 19:40:06.302022 24463 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:06.304846 24463 net.cpp:124] Setting up mnist
I0428 19:40:06.304874 24463 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:06.304883 24463 net.cpp:131] Top shape: 100 (100)
I0428 19:40:06.304894 24463 net.cpp:139] Memory required for data: 314000
I0428 19:40:06.304901 24463 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:06.304916 24463 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:06.304924 24463 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:06.304932 24463 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:06.304944 24463 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:06.305052 24463 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:06.305065 24463 net.cpp:131] Top shape: 100 (100)
I0428 19:40:06.305073 24463 net.cpp:131] Top shape: 100 (100)
I0428 19:40:06.305078 24463 net.cpp:139] Memory required for data: 314800
I0428 19:40:06.305084 24463 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:06.305099 24463 net.cpp:86] Creating Layer conv0
I0428 19:40:06.305119 24463 net.cpp:408] conv0 <- data
I0428 19:40:06.305127 24463 net.cpp:382] conv0 -> conv0
I0428 19:40:06.307653 24463 net.cpp:124] Setting up conv0
I0428 19:40:06.307673 24463 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:06.307679 24463 net.cpp:139] Memory required for data: 775600
I0428 19:40:06.307704 24463 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:06.307715 24463 net.cpp:86] Creating Layer pool0
I0428 19:40:06.307723 24463 net.cpp:408] pool0 <- conv0
I0428 19:40:06.307731 24463 net.cpp:382] pool0 -> pool0
I0428 19:40:06.307785 24463 net.cpp:124] Setting up pool0
I0428 19:40:06.307795 24463 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:06.307801 24463 net.cpp:139] Memory required for data: 890800
I0428 19:40:06.307806 24463 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:06.307819 24463 net.cpp:86] Creating Layer conv1
I0428 19:40:06.307826 24463 net.cpp:408] conv1 <- pool0
I0428 19:40:06.307835 24463 net.cpp:382] conv1 -> conv1
I0428 19:40:06.310102 24463 net.cpp:124] Setting up conv1
I0428 19:40:06.310125 24463 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:06.310133 24463 net.cpp:139] Memory required for data: 1018800
I0428 19:40:06.310159 24463 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:06.310169 24463 net.cpp:86] Creating Layer pool1
I0428 19:40:06.310194 24463 net.cpp:408] pool1 <- conv1
I0428 19:40:06.310202 24463 net.cpp:382] pool1 -> pool1
I0428 19:40:06.310261 24463 net.cpp:124] Setting up pool1
I0428 19:40:06.310271 24463 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:06.310277 24463 net.cpp:139] Memory required for data: 1050800
I0428 19:40:06.310282 24463 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:06.310303 24463 net.cpp:86] Creating Layer ip1
I0428 19:40:06.310309 24463 net.cpp:408] ip1 <- pool1
I0428 19:40:06.310317 24463 net.cpp:382] ip1 -> ip1
I0428 19:40:06.310469 24463 net.cpp:124] Setting up ip1
I0428 19:40:06.310493 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.310514 24463 net.cpp:139] Memory required for data: 1054800
I0428 19:40:06.310528 24463 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:06.310539 24463 net.cpp:86] Creating Layer relu1
I0428 19:40:06.310545 24463 net.cpp:408] relu1 <- ip1
I0428 19:40:06.310552 24463 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:06.310879 24463 net.cpp:124] Setting up relu1
I0428 19:40:06.310894 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.310899 24463 net.cpp:139] Memory required for data: 1058800
I0428 19:40:06.310905 24463 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:06.310920 24463 net.cpp:86] Creating Layer ip2
I0428 19:40:06.310927 24463 net.cpp:408] ip2 <- ip1
I0428 19:40:06.310938 24463 net.cpp:382] ip2 -> ip2
I0428 19:40:06.311096 24463 net.cpp:124] Setting up ip2
I0428 19:40:06.311121 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.311130 24463 net.cpp:139] Memory required for data: 1062800
I0428 19:40:06.311139 24463 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:06.311147 24463 net.cpp:86] Creating Layer relu2
I0428 19:40:06.311180 24463 net.cpp:408] relu2 <- ip2
I0428 19:40:06.311188 24463 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:06.311460 24463 net.cpp:124] Setting up relu2
I0428 19:40:06.311486 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.311491 24463 net.cpp:139] Memory required for data: 1066800
I0428 19:40:06.311496 24463 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:06.311506 24463 net.cpp:86] Creating Layer ip3
I0428 19:40:06.311512 24463 net.cpp:408] ip3 <- ip2
I0428 19:40:06.311522 24463 net.cpp:382] ip3 -> ip3
I0428 19:40:06.311676 24463 net.cpp:124] Setting up ip3
I0428 19:40:06.311686 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.311691 24463 net.cpp:139] Memory required for data: 1070800
I0428 19:40:06.311708 24463 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:06.311717 24463 net.cpp:86] Creating Layer relu3
I0428 19:40:06.311722 24463 net.cpp:408] relu3 <- ip3
I0428 19:40:06.311729 24463 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:06.312898 24463 net.cpp:124] Setting up relu3
I0428 19:40:06.312916 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.312922 24463 net.cpp:139] Memory required for data: 1074800
I0428 19:40:06.312928 24463 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:06.312937 24463 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:06.312942 24463 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:06.312952 24463 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:06.312963 24463 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:06.313019 24463 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:06.313030 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.313037 24463 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:06.313043 24463 net.cpp:139] Memory required for data: 1082800
I0428 19:40:06.313048 24463 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:06.313057 24463 net.cpp:86] Creating Layer accuracy
I0428 19:40:06.313063 24463 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:06.313071 24463 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:06.313077 24463 net.cpp:382] accuracy -> accuracy
I0428 19:40:06.313091 24463 net.cpp:124] Setting up accuracy
I0428 19:40:06.313097 24463 net.cpp:131] Top shape: (1)
I0428 19:40:06.313102 24463 net.cpp:139] Memory required for data: 1082804
I0428 19:40:06.313108 24463 layer_factory.hpp:77] Creating layer loss
I0428 19:40:06.313115 24463 net.cpp:86] Creating Layer loss
I0428 19:40:06.313122 24463 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:06.313127 24463 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:06.313135 24463 net.cpp:382] loss -> loss
I0428 19:40:06.313144 24463 layer_factory.hpp:77] Creating layer loss
I0428 19:40:06.313527 24463 net.cpp:124] Setting up loss
I0428 19:40:06.313542 24463 net.cpp:131] Top shape: (1)
I0428 19:40:06.313549 24463 net.cpp:134]     with loss weight 1
I0428 19:40:06.313557 24463 net.cpp:139] Memory required for data: 1082808
I0428 19:40:06.313578 24463 net.cpp:200] loss needs backward computation.
I0428 19:40:06.313585 24463 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:06.313591 24463 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:06.313597 24463 net.cpp:200] relu3 needs backward computation.
I0428 19:40:06.313602 24463 net.cpp:200] ip3 needs backward computation.
I0428 19:40:06.313607 24463 net.cpp:200] relu2 needs backward computation.
I0428 19:40:06.313612 24463 net.cpp:200] ip2 needs backward computation.
I0428 19:40:06.313617 24463 net.cpp:200] relu1 needs backward computation.
I0428 19:40:06.313622 24463 net.cpp:200] ip1 needs backward computation.
I0428 19:40:06.313628 24463 net.cpp:200] pool1 needs backward computation.
I0428 19:40:06.313633 24463 net.cpp:200] conv1 needs backward computation.
I0428 19:40:06.313639 24463 net.cpp:200] pool0 needs backward computation.
I0428 19:40:06.313644 24463 net.cpp:200] conv0 needs backward computation.
I0428 19:40:06.313650 24463 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:06.313666 24463 net.cpp:202] mnist does not need backward computation.
I0428 19:40:06.313673 24463 net.cpp:244] This network produces output accuracy
I0428 19:40:06.313678 24463 net.cpp:244] This network produces output loss
I0428 19:40:06.313696 24463 net.cpp:257] Network initialization done.
I0428 19:40:06.313761 24463 solver.cpp:56] Solver scaffolding done.
I0428 19:40:06.314275 24463 caffe.cpp:248] Starting Optimization
I0428 19:40:06.314285 24463 solver.cpp:273] Solving LeNet
I0428 19:40:06.314290 24463 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:06.315451 24463 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:06.369031 24470 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:06.370790 24463 solver.cpp:398]     Test net output #0: accuracy = 0.0841
I0428 19:40:06.370816 24463 solver.cpp:398]     Test net output #1: loss = 2.32067 (* 1 = 2.32067 loss)
I0428 19:40:06.373183 24463 solver.cpp:219] Iteration 0 (-1.4041e-42 iter/s, 0.0588596s/100 iters), loss = 2.31364
I0428 19:40:06.373217 24463 solver.cpp:238]     Train net output #0: loss = 2.31364 (* 1 = 2.31364 loss)
I0428 19:40:06.373252 24463 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:06.473922 24463 solver.cpp:219] Iteration 100 (993.138 iter/s, 0.100691s/100 iters), loss = 1.56402
I0428 19:40:06.473958 24463 solver.cpp:238]     Train net output #0: loss = 1.56402 (* 1 = 1.56402 loss)
I0428 19:40:06.473976 24463 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:06.562228 24463 solver.cpp:219] Iteration 200 (1132.98 iter/s, 0.0882628s/100 iters), loss = 1.03952
I0428 19:40:06.562255 24463 solver.cpp:238]     Train net output #0: loss = 1.03952 (* 1 = 1.03952 loss)
I0428 19:40:06.562278 24463 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:06.645723 24463 solver.cpp:219] Iteration 300 (1198.19 iter/s, 0.0834591s/100 iters), loss = 1.14577
I0428 19:40:06.645752 24463 solver.cpp:238]     Train net output #0: loss = 1.14577 (* 1 = 1.14577 loss)
I0428 19:40:06.645777 24463 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:06.729926 24463 solver.cpp:219] Iteration 400 (1188.14 iter/s, 0.0841654s/100 iters), loss = 0.816238
I0428 19:40:06.729954 24463 solver.cpp:238]     Train net output #0: loss = 0.816238 (* 1 = 0.816238 loss)
I0428 19:40:06.729977 24463 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:06.814877 24463 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:06.819311 24463 blocking_queue.cpp:49] Waiting for data
I0428 19:40:06.877009 24470 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:06.877585 24463 solver.cpp:398]     Test net output #0: accuracy = 0.7374
I0428 19:40:06.877621 24463 solver.cpp:398]     Test net output #1: loss = 0.727963 (* 1 = 0.727963 loss)
I0428 19:40:06.878558 24463 solver.cpp:219] Iteration 500 (672.986 iter/s, 0.148592s/100 iters), loss = 0.618399
I0428 19:40:06.878624 24463 solver.cpp:238]     Train net output #0: loss = 0.618399 (* 1 = 0.618399 loss)
I0428 19:40:06.878649 24463 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:06.963770 24463 solver.cpp:219] Iteration 600 (1174.53 iter/s, 0.0851402s/100 iters), loss = 0.788864
I0428 19:40:06.963814 24463 solver.cpp:238]     Train net output #0: loss = 0.788864 (* 1 = 0.788864 loss)
I0428 19:40:06.963821 24463 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:07.048272 24463 solver.cpp:219] Iteration 700 (1184.14 iter/s, 0.0844493s/100 iters), loss = 0.935102
I0428 19:40:07.048317 24463 solver.cpp:238]     Train net output #0: loss = 0.935102 (* 1 = 0.935102 loss)
I0428 19:40:07.048326 24463 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:07.132956 24463 solver.cpp:219] Iteration 800 (1181.62 iter/s, 0.0846295s/100 iters), loss = 0.998212
I0428 19:40:07.132998 24463 solver.cpp:238]     Train net output #0: loss = 0.998212 (* 1 = 0.998212 loss)
I0428 19:40:07.133007 24463 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:07.217422 24463 solver.cpp:219] Iteration 900 (1184.42 iter/s, 0.0844298s/100 iters), loss = 0.817038
I0428 19:40:07.217450 24463 solver.cpp:238]     Train net output #0: loss = 0.817038 (* 1 = 0.817038 loss)
I0428 19:40:07.217459 24463 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:07.246383 24469 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:07.301278 24463 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:07.302045 24463 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:07.302645 24463 solver.cpp:311] Iteration 1000, loss = 0.808575
I0428 19:40:07.302664 24463 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:07.363219 24470 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:07.363711 24463 solver.cpp:398]     Test net output #0: accuracy = 0.7551
I0428 19:40:07.363744 24463 solver.cpp:398]     Test net output #1: loss = 0.645107 (* 1 = 0.645107 loss)
I0428 19:40:07.363749 24463 solver.cpp:316] Optimization Done.
I0428 19:40:07.363751 24463 caffe.cpp:259] Optimization Done.
