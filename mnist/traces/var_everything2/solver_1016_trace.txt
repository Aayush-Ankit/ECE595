I0428 20:06:01.269840 30775 caffe.cpp:218] Using GPUs 0
I0428 20:06:01.305868 30775 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:01.758088 30775 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1016.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:01.758218 30775 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1016.prototxt
I0428 20:06:01.758486 30775 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:01.758499 30775 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:01.758563 30775 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:06:01.758616 30775 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:01.758700 30775 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:01.758734 30775 net.cpp:86] Creating Layer mnist
I0428 20:06:01.758743 30775 net.cpp:382] mnist -> data
I0428 20:06:01.758792 30775 net.cpp:382] mnist -> label
I0428 20:06:01.759786 30775 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:01.762138 30775 net.cpp:124] Setting up mnist
I0428 20:06:01.762169 30775 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:01.762176 30775 net.cpp:131] Top shape: 64 (64)
I0428 20:06:01.762177 30775 net.cpp:139] Memory required for data: 200960
I0428 20:06:01.762184 30775 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:01.762199 30775 net.cpp:86] Creating Layer conv0
I0428 20:06:01.762204 30775 net.cpp:408] conv0 <- data
I0428 20:06:01.762215 30775 net.cpp:382] conv0 -> conv0
I0428 20:06:01.993559 30775 net.cpp:124] Setting up conv0
I0428 20:06:01.993584 30775 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:01.993588 30775 net.cpp:139] Memory required for data: 3887360
I0428 20:06:01.993602 30775 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:01.993615 30775 net.cpp:86] Creating Layer pool0
I0428 20:06:01.993618 30775 net.cpp:408] pool0 <- conv0
I0428 20:06:01.993624 30775 net.cpp:382] pool0 -> pool0
I0428 20:06:01.993682 30775 net.cpp:124] Setting up pool0
I0428 20:06:01.993687 30775 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:01.993706 30775 net.cpp:139] Memory required for data: 4808960
I0428 20:06:01.993710 30775 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:01.993719 30775 net.cpp:86] Creating Layer conv1
I0428 20:06:01.993723 30775 net.cpp:408] conv1 <- pool0
I0428 20:06:01.993728 30775 net.cpp:382] conv1 -> conv1
I0428 20:06:01.996466 30775 net.cpp:124] Setting up conv1
I0428 20:06:01.996496 30775 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:01.996500 30775 net.cpp:139] Memory required for data: 4890880
I0428 20:06:01.996508 30775 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:01.996515 30775 net.cpp:86] Creating Layer pool1
I0428 20:06:01.996520 30775 net.cpp:408] pool1 <- conv1
I0428 20:06:01.996523 30775 net.cpp:382] pool1 -> pool1
I0428 20:06:01.996574 30775 net.cpp:124] Setting up pool1
I0428 20:06:01.996579 30775 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:01.996582 30775 net.cpp:139] Memory required for data: 4911360
I0428 20:06:01.996585 30775 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:01.996592 30775 net.cpp:86] Creating Layer ip1
I0428 20:06:01.996595 30775 net.cpp:408] ip1 <- pool1
I0428 20:06:01.996599 30775 net.cpp:382] ip1 -> ip1
I0428 20:06:01.996690 30775 net.cpp:124] Setting up ip1
I0428 20:06:01.996697 30775 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:01.996701 30775 net.cpp:139] Memory required for data: 4913920
I0428 20:06:01.996707 30775 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:01.996714 30775 net.cpp:86] Creating Layer relu1
I0428 20:06:01.996717 30775 net.cpp:408] relu1 <- ip1
I0428 20:06:01.996721 30775 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:01.996918 30775 net.cpp:124] Setting up relu1
I0428 20:06:01.996928 30775 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:01.996932 30775 net.cpp:139] Memory required for data: 4916480
I0428 20:06:01.996935 30775 layer_factory.hpp:77] Creating layer loss
I0428 20:06:01.996942 30775 net.cpp:86] Creating Layer loss
I0428 20:06:01.996944 30775 net.cpp:408] loss <- ip1
I0428 20:06:01.996948 30775 net.cpp:408] loss <- label
I0428 20:06:01.996953 30775 net.cpp:382] loss -> loss
I0428 20:06:01.996973 30775 layer_factory.hpp:77] Creating layer loss
I0428 20:06:01.997889 30775 net.cpp:124] Setting up loss
I0428 20:06:01.997901 30775 net.cpp:131] Top shape: (1)
I0428 20:06:01.997920 30775 net.cpp:134]     with loss weight 1
I0428 20:06:01.997949 30775 net.cpp:139] Memory required for data: 4916484
I0428 20:06:01.997953 30775 net.cpp:200] loss needs backward computation.
I0428 20:06:01.997957 30775 net.cpp:200] relu1 needs backward computation.
I0428 20:06:01.997961 30775 net.cpp:200] ip1 needs backward computation.
I0428 20:06:01.997963 30775 net.cpp:200] pool1 needs backward computation.
I0428 20:06:01.997966 30775 net.cpp:200] conv1 needs backward computation.
I0428 20:06:01.997968 30775 net.cpp:200] pool0 needs backward computation.
I0428 20:06:01.997972 30775 net.cpp:200] conv0 needs backward computation.
I0428 20:06:01.997974 30775 net.cpp:202] mnist does not need backward computation.
I0428 20:06:01.997977 30775 net.cpp:244] This network produces output loss
I0428 20:06:01.997984 30775 net.cpp:257] Network initialization done.
I0428 20:06:01.998229 30775 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1016.prototxt
I0428 20:06:01.998252 30775 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:01.998323 30775 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:06:01.998390 30775 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:01.998450 30775 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:01.998463 30775 net.cpp:86] Creating Layer mnist
I0428 20:06:01.998468 30775 net.cpp:382] mnist -> data
I0428 20:06:01.998476 30775 net.cpp:382] mnist -> label
I0428 20:06:01.998554 30775 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:02.000538 30775 net.cpp:124] Setting up mnist
I0428 20:06:02.000567 30775 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:02.000573 30775 net.cpp:131] Top shape: 100 (100)
I0428 20:06:02.000577 30775 net.cpp:139] Memory required for data: 314000
I0428 20:06:02.000581 30775 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:02.000589 30775 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:02.000592 30775 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:02.000598 30775 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:02.000617 30775 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:02.000730 30775 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:02.000740 30775 net.cpp:131] Top shape: 100 (100)
I0428 20:06:02.000743 30775 net.cpp:131] Top shape: 100 (100)
I0428 20:06:02.000746 30775 net.cpp:139] Memory required for data: 314800
I0428 20:06:02.000749 30775 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:02.000758 30775 net.cpp:86] Creating Layer conv0
I0428 20:06:02.000761 30775 net.cpp:408] conv0 <- data
I0428 20:06:02.000766 30775 net.cpp:382] conv0 -> conv0
I0428 20:06:02.001600 30775 net.cpp:124] Setting up conv0
I0428 20:06:02.001612 30775 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:02.001631 30775 net.cpp:139] Memory required for data: 6074800
I0428 20:06:02.001641 30775 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:02.001646 30775 net.cpp:86] Creating Layer pool0
I0428 20:06:02.001664 30775 net.cpp:408] pool0 <- conv0
I0428 20:06:02.001668 30775 net.cpp:382] pool0 -> pool0
I0428 20:06:02.001731 30775 net.cpp:124] Setting up pool0
I0428 20:06:02.001736 30775 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:02.001739 30775 net.cpp:139] Memory required for data: 7514800
I0428 20:06:02.001741 30775 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:02.001749 30775 net.cpp:86] Creating Layer conv1
I0428 20:06:02.001752 30775 net.cpp:408] conv1 <- pool0
I0428 20:06:02.001757 30775 net.cpp:382] conv1 -> conv1
I0428 20:06:02.003762 30775 net.cpp:124] Setting up conv1
I0428 20:06:02.003793 30775 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:02.003796 30775 net.cpp:139] Memory required for data: 7642800
I0428 20:06:02.003805 30775 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:02.003813 30775 net.cpp:86] Creating Layer pool1
I0428 20:06:02.003828 30775 net.cpp:408] pool1 <- conv1
I0428 20:06:02.003834 30775 net.cpp:382] pool1 -> pool1
I0428 20:06:02.003887 30775 net.cpp:124] Setting up pool1
I0428 20:06:02.003893 30775 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:02.003896 30775 net.cpp:139] Memory required for data: 7674800
I0428 20:06:02.003900 30775 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:02.003906 30775 net.cpp:86] Creating Layer ip1
I0428 20:06:02.003908 30775 net.cpp:408] ip1 <- pool1
I0428 20:06:02.003913 30775 net.cpp:382] ip1 -> ip1
I0428 20:06:02.004007 30775 net.cpp:124] Setting up ip1
I0428 20:06:02.004016 30775 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:02.004020 30775 net.cpp:139] Memory required for data: 7678800
I0428 20:06:02.004027 30775 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:02.004040 30775 net.cpp:86] Creating Layer relu1
I0428 20:06:02.004043 30775 net.cpp:408] relu1 <- ip1
I0428 20:06:02.004048 30775 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:02.004932 30775 net.cpp:124] Setting up relu1
I0428 20:06:02.004946 30775 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:02.004951 30775 net.cpp:139] Memory required for data: 7682800
I0428 20:06:02.004956 30775 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:06:02.004962 30775 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:06:02.004966 30775 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:06:02.004972 30775 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:06:02.004979 30775 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:06:02.005045 30775 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:06:02.005054 30775 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:02.005059 30775 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:02.005062 30775 net.cpp:139] Memory required for data: 7690800
I0428 20:06:02.005065 30775 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:02.005071 30775 net.cpp:86] Creating Layer accuracy
I0428 20:06:02.005075 30775 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:06:02.005079 30775 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:02.005084 30775 net.cpp:382] accuracy -> accuracy
I0428 20:06:02.005091 30775 net.cpp:124] Setting up accuracy
I0428 20:06:02.005096 30775 net.cpp:131] Top shape: (1)
I0428 20:06:02.005100 30775 net.cpp:139] Memory required for data: 7690804
I0428 20:06:02.005102 30775 layer_factory.hpp:77] Creating layer loss
I0428 20:06:02.005107 30775 net.cpp:86] Creating Layer loss
I0428 20:06:02.005125 30775 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:06:02.005131 30775 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:02.005149 30775 net.cpp:382] loss -> loss
I0428 20:06:02.005161 30775 layer_factory.hpp:77] Creating layer loss
I0428 20:06:02.005388 30775 net.cpp:124] Setting up loss
I0428 20:06:02.005398 30775 net.cpp:131] Top shape: (1)
I0428 20:06:02.005400 30775 net.cpp:134]     with loss weight 1
I0428 20:06:02.005406 30775 net.cpp:139] Memory required for data: 7690808
I0428 20:06:02.005410 30775 net.cpp:200] loss needs backward computation.
I0428 20:06:02.005424 30775 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:02.005427 30775 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:06:02.005430 30775 net.cpp:200] relu1 needs backward computation.
I0428 20:06:02.005434 30775 net.cpp:200] ip1 needs backward computation.
I0428 20:06:02.005436 30775 net.cpp:200] pool1 needs backward computation.
I0428 20:06:02.005439 30775 net.cpp:200] conv1 needs backward computation.
I0428 20:06:02.005444 30775 net.cpp:200] pool0 needs backward computation.
I0428 20:06:02.005446 30775 net.cpp:200] conv0 needs backward computation.
I0428 20:06:02.005450 30775 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:02.005455 30775 net.cpp:202] mnist does not need backward computation.
I0428 20:06:02.005457 30775 net.cpp:244] This network produces output accuracy
I0428 20:06:02.005460 30775 net.cpp:244] This network produces output loss
I0428 20:06:02.005480 30775 net.cpp:257] Network initialization done.
I0428 20:06:02.005513 30775 solver.cpp:56] Solver scaffolding done.
I0428 20:06:02.005710 30775 caffe.cpp:248] Starting Optimization
I0428 20:06:02.005717 30775 solver.cpp:273] Solving LeNet
I0428 20:06:02.005722 30775 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:02.006479 30775 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:02.010711 30775 blocking_queue.cpp:49] Waiting for data
I0428 20:06:02.082823 30782 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:02.083385 30775 solver.cpp:398]     Test net output #0: accuracy = 0.0568
I0428 20:06:02.083421 30775 solver.cpp:398]     Test net output #1: loss = 2.44416 (* 1 = 2.44416 loss)
I0428 20:06:02.086839 30775 solver.cpp:219] Iteration 0 (-1.00193e-42 iter/s, 0.0810936s/100 iters), loss = 2.4055
I0428 20:06:02.086879 30775 solver.cpp:238]     Train net output #0: loss = 2.4055 (* 1 = 2.4055 loss)
I0428 20:06:02.086891 30775 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:02.173439 30775 solver.cpp:219] Iteration 100 (1155.38 iter/s, 0.0865516s/100 iters), loss = 0.311442
I0428 20:06:02.173465 30775 solver.cpp:238]     Train net output #0: loss = 0.311442 (* 1 = 0.311442 loss)
I0428 20:06:02.173471 30775 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:02.248402 30775 solver.cpp:219] Iteration 200 (1334.7 iter/s, 0.074923s/100 iters), loss = 0.214184
I0428 20:06:02.248426 30775 solver.cpp:238]     Train net output #0: loss = 0.214184 (* 1 = 0.214184 loss)
I0428 20:06:02.248436 30775 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:02.322934 30775 solver.cpp:219] Iteration 300 (1342.28 iter/s, 0.0744999s/100 iters), loss = 0.259888
I0428 20:06:02.322957 30775 solver.cpp:238]     Train net output #0: loss = 0.259888 (* 1 = 0.259888 loss)
I0428 20:06:02.322963 30775 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:02.397702 30775 solver.cpp:219] Iteration 400 (1338.03 iter/s, 0.0747366s/100 iters), loss = 0.159395
I0428 20:06:02.397724 30775 solver.cpp:238]     Train net output #0: loss = 0.159395 (* 1 = 0.159395 loss)
I0428 20:06:02.397747 30775 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:02.471722 30775 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:02.547323 30782 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:02.547863 30775 solver.cpp:398]     Test net output #0: accuracy = 0.9573
I0428 20:06:02.547899 30775 solver.cpp:398]     Test net output #1: loss = 0.143398 (* 1 = 0.143398 loss)
I0428 20:06:02.548755 30775 solver.cpp:219] Iteration 500 (662.175 iter/s, 0.151017s/100 iters), loss = 0.183387
I0428 20:06:02.548794 30775 solver.cpp:238]     Train net output #0: loss = 0.183387 (* 1 = 0.183387 loss)
I0428 20:06:02.548830 30775 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:02.635936 30775 solver.cpp:219] Iteration 600 (1147.68 iter/s, 0.0871322s/100 iters), loss = 0.183798
I0428 20:06:02.635975 30775 solver.cpp:238]     Train net output #0: loss = 0.183797 (* 1 = 0.183797 loss)
I0428 20:06:02.635983 30775 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:02.715776 30775 solver.cpp:219] Iteration 700 (1253.03 iter/s, 0.0798067s/100 iters), loss = 0.34551
I0428 20:06:02.715802 30775 solver.cpp:238]     Train net output #0: loss = 0.34551 (* 1 = 0.34551 loss)
I0428 20:06:02.715826 30775 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:02.790344 30775 solver.cpp:219] Iteration 800 (1341.71 iter/s, 0.0745318s/100 iters), loss = 0.237478
I0428 20:06:02.790369 30775 solver.cpp:238]     Train net output #0: loss = 0.237478 (* 1 = 0.237478 loss)
I0428 20:06:02.790395 30775 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:02.864758 30775 solver.cpp:219] Iteration 900 (1344.44 iter/s, 0.0743802s/100 iters), loss = 0.337613
I0428 20:06:02.864783 30775 solver.cpp:238]     Train net output #0: loss = 0.337613 (* 1 = 0.337613 loss)
I0428 20:06:02.864805 30775 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:02.889736 30781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:02.938534 30775 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:02.939163 30775 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:02.939676 30775 solver.cpp:311] Iteration 1000, loss = 0.0864143
I0428 20:06:02.939707 30775 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:03.014878 30782 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:03.015435 30775 solver.cpp:398]     Test net output #0: accuracy = 0.9697
I0428 20:06:03.015473 30775 solver.cpp:398]     Test net output #1: loss = 0.0977883 (* 1 = 0.0977883 loss)
I0428 20:06:03.015480 30775 solver.cpp:316] Optimization Done.
I0428 20:06:03.015482 30775 caffe.cpp:259] Optimization Done.
