I0428 20:17:50.002636   999 caffe.cpp:218] Using GPUs 0
I0428 20:17:50.044585   999 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:50.644644   999 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1304.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:50.644820   999 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1304.prototxt
I0428 20:17:50.645411   999 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:50.645437   999 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:50.645582   999 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:17:50.645687   999 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:50.645807   999 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:50.645838   999 net.cpp:86] Creating Layer mnist
I0428 20:17:50.645849   999 net.cpp:382] mnist -> data
I0428 20:17:50.645877   999 net.cpp:382] mnist -> label
I0428 20:17:50.647287   999 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:50.650478   999 net.cpp:124] Setting up mnist
I0428 20:17:50.650501   999 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:50.650509   999 net.cpp:131] Top shape: 64 (64)
I0428 20:17:50.650516   999 net.cpp:139] Memory required for data: 200960
I0428 20:17:50.650524   999 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:50.650548   999 net.cpp:86] Creating Layer conv0
I0428 20:17:50.650574   999 net.cpp:408] conv0 <- data
I0428 20:17:50.650593   999 net.cpp:382] conv0 -> conv0
I0428 20:17:50.972049   999 net.cpp:124] Setting up conv0
I0428 20:17:50.972098   999 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:50.972103   999 net.cpp:139] Memory required for data: 7573760
I0428 20:17:50.972122   999 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:50.972137   999 net.cpp:86] Creating Layer pool0
I0428 20:17:50.972158   999 net.cpp:408] pool0 <- conv0
I0428 20:17:50.972165   999 net.cpp:382] pool0 -> pool0
I0428 20:17:50.972221   999 net.cpp:124] Setting up pool0
I0428 20:17:50.972231   999 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:50.972236   999 net.cpp:139] Memory required for data: 9416960
I0428 20:17:50.972240   999 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:50.972254   999 net.cpp:86] Creating Layer conv1
I0428 20:17:50.972259   999 net.cpp:408] conv1 <- pool0
I0428 20:17:50.972265   999 net.cpp:382] conv1 -> conv1
I0428 20:17:50.975910   999 net.cpp:124] Setting up conv1
I0428 20:17:50.975942   999 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:50.975947   999 net.cpp:139] Memory required for data: 9580800
I0428 20:17:50.975960   999 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:50.975968   999 net.cpp:86] Creating Layer pool1
I0428 20:17:50.975973   999 net.cpp:408] pool1 <- conv1
I0428 20:17:50.975996   999 net.cpp:382] pool1 -> pool1
I0428 20:17:50.976053   999 net.cpp:124] Setting up pool1
I0428 20:17:50.976063   999 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:50.976068   999 net.cpp:139] Memory required for data: 9621760
I0428 20:17:50.976073   999 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:50.976081   999 net.cpp:86] Creating Layer ip1
I0428 20:17:50.976086   999 net.cpp:408] ip1 <- pool1
I0428 20:17:50.976092   999 net.cpp:382] ip1 -> ip1
I0428 20:17:50.976227   999 net.cpp:124] Setting up ip1
I0428 20:17:50.976236   999 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:50.976241   999 net.cpp:139] Memory required for data: 9624320
I0428 20:17:50.976251   999 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:50.976258   999 net.cpp:86] Creating Layer relu1
I0428 20:17:50.976263   999 net.cpp:408] relu1 <- ip1
I0428 20:17:50.976269   999 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:50.976466   999 net.cpp:124] Setting up relu1
I0428 20:17:50.976478   999 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:50.976482   999 net.cpp:139] Memory required for data: 9626880
I0428 20:17:50.976487   999 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:50.976495   999 net.cpp:86] Creating Layer ip2
I0428 20:17:50.976500   999 net.cpp:408] ip2 <- ip1
I0428 20:17:50.976506   999 net.cpp:382] ip2 -> ip2
I0428 20:17:50.976622   999 net.cpp:124] Setting up ip2
I0428 20:17:50.976632   999 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:50.976637   999 net.cpp:139] Memory required for data: 9633280
I0428 20:17:50.976644   999 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:50.976652   999 net.cpp:86] Creating Layer relu2
I0428 20:17:50.976656   999 net.cpp:408] relu2 <- ip2
I0428 20:17:50.976662   999 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:50.977715   999 net.cpp:124] Setting up relu2
I0428 20:17:50.977746   999 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:50.977751   999 net.cpp:139] Memory required for data: 9639680
I0428 20:17:50.977756   999 layer_factory.hpp:77] Creating layer ip3
I0428 20:17:50.977766   999 net.cpp:86] Creating Layer ip3
I0428 20:17:50.977771   999 net.cpp:408] ip3 <- ip2
I0428 20:17:50.977778   999 net.cpp:382] ip3 -> ip3
I0428 20:17:50.977918   999 net.cpp:124] Setting up ip3
I0428 20:17:50.977929   999 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:50.977933   999 net.cpp:139] Memory required for data: 9642240
I0428 20:17:50.977946   999 layer_factory.hpp:77] Creating layer relu3
I0428 20:17:50.977952   999 net.cpp:86] Creating Layer relu3
I0428 20:17:50.977957   999 net.cpp:408] relu3 <- ip3
I0428 20:17:50.977963   999 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:17:50.978168   999 net.cpp:124] Setting up relu3
I0428 20:17:50.978194   999 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:50.978199   999 net.cpp:139] Memory required for data: 9644800
I0428 20:17:50.978204   999 layer_factory.hpp:77] Creating layer loss
I0428 20:17:50.978210   999 net.cpp:86] Creating Layer loss
I0428 20:17:50.978215   999 net.cpp:408] loss <- ip3
I0428 20:17:50.978220   999 net.cpp:408] loss <- label
I0428 20:17:50.978227   999 net.cpp:382] loss -> loss
I0428 20:17:50.978248   999 layer_factory.hpp:77] Creating layer loss
I0428 20:17:50.978595   999 net.cpp:124] Setting up loss
I0428 20:17:50.978606   999 net.cpp:131] Top shape: (1)
I0428 20:17:50.978627   999 net.cpp:134]     with loss weight 1
I0428 20:17:50.978646   999 net.cpp:139] Memory required for data: 9644804
I0428 20:17:50.978651   999 net.cpp:200] loss needs backward computation.
I0428 20:17:50.978657   999 net.cpp:200] relu3 needs backward computation.
I0428 20:17:50.978662   999 net.cpp:200] ip3 needs backward computation.
I0428 20:17:50.978667   999 net.cpp:200] relu2 needs backward computation.
I0428 20:17:50.978672   999 net.cpp:200] ip2 needs backward computation.
I0428 20:17:50.978677   999 net.cpp:200] relu1 needs backward computation.
I0428 20:17:50.978682   999 net.cpp:200] ip1 needs backward computation.
I0428 20:17:50.978687   999 net.cpp:200] pool1 needs backward computation.
I0428 20:17:50.978691   999 net.cpp:200] conv1 needs backward computation.
I0428 20:17:50.978698   999 net.cpp:200] pool0 needs backward computation.
I0428 20:17:50.978703   999 net.cpp:200] conv0 needs backward computation.
I0428 20:17:50.978708   999 net.cpp:202] mnist does not need backward computation.
I0428 20:17:50.978713   999 net.cpp:244] This network produces output loss
I0428 20:17:50.978740   999 net.cpp:257] Network initialization done.
I0428 20:17:50.979212   999 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1304.prototxt
I0428 20:17:50.979264   999 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:50.979393   999 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:17:50.979511   999 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:50.979567   999 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:50.979581   999 net.cpp:86] Creating Layer mnist
I0428 20:17:50.979588   999 net.cpp:382] mnist -> data
I0428 20:17:50.979598   999 net.cpp:382] mnist -> label
I0428 20:17:50.979733   999 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:50.982477   999 net.cpp:124] Setting up mnist
I0428 20:17:50.982508   999 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:50.982516   999 net.cpp:131] Top shape: 100 (100)
I0428 20:17:50.982520   999 net.cpp:139] Memory required for data: 314000
I0428 20:17:50.982525   999 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:50.982558   999 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:50.982563   999 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:50.982569   999 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:50.982578   999 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:50.982635   999 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:50.982643   999 net.cpp:131] Top shape: 100 (100)
I0428 20:17:50.982648   999 net.cpp:131] Top shape: 100 (100)
I0428 20:17:50.982653   999 net.cpp:139] Memory required for data: 314800
I0428 20:17:50.982657   999 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:50.982668   999 net.cpp:86] Creating Layer conv0
I0428 20:17:50.982672   999 net.cpp:408] conv0 <- data
I0428 20:17:50.982679   999 net.cpp:382] conv0 -> conv0
I0428 20:17:50.984943   999 net.cpp:124] Setting up conv0
I0428 20:17:50.984961   999 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:50.984967   999 net.cpp:139] Memory required for data: 11834800
I0428 20:17:50.984980   999 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:50.984989   999 net.cpp:86] Creating Layer pool0
I0428 20:17:50.984994   999 net.cpp:408] pool0 <- conv0
I0428 20:17:50.985002   999 net.cpp:382] pool0 -> pool0
I0428 20:17:50.985049   999 net.cpp:124] Setting up pool0
I0428 20:17:50.985057   999 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:50.985062   999 net.cpp:139] Memory required for data: 14714800
I0428 20:17:50.985067   999 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:50.985086   999 net.cpp:86] Creating Layer conv1
I0428 20:17:50.985091   999 net.cpp:408] conv1 <- pool0
I0428 20:17:50.985098   999 net.cpp:382] conv1 -> conv1
I0428 20:17:50.987376   999 net.cpp:124] Setting up conv1
I0428 20:17:50.987406   999 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:50.987412   999 net.cpp:139] Memory required for data: 14970800
I0428 20:17:50.987440   999 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:50.987448   999 net.cpp:86] Creating Layer pool1
I0428 20:17:50.987454   999 net.cpp:408] pool1 <- conv1
I0428 20:17:50.987462   999 net.cpp:382] pool1 -> pool1
I0428 20:17:50.987516   999 net.cpp:124] Setting up pool1
I0428 20:17:50.987537   999 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:50.987542   999 net.cpp:139] Memory required for data: 15034800
I0428 20:17:50.987547   999 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:50.987555   999 net.cpp:86] Creating Layer ip1
I0428 20:17:50.987568   999 net.cpp:408] ip1 <- pool1
I0428 20:17:50.987576   999 net.cpp:382] ip1 -> ip1
I0428 20:17:50.987716   999 net.cpp:124] Setting up ip1
I0428 20:17:50.987727   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.987746   999 net.cpp:139] Memory required for data: 15038800
I0428 20:17:50.987764   999 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:50.987787   999 net.cpp:86] Creating Layer relu1
I0428 20:17:50.987798   999 net.cpp:408] relu1 <- ip1
I0428 20:17:50.987804   999 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:50.988014   999 net.cpp:124] Setting up relu1
I0428 20:17:50.988026   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.988031   999 net.cpp:139] Memory required for data: 15042800
I0428 20:17:50.988035   999 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:50.988044   999 net.cpp:86] Creating Layer ip2
I0428 20:17:50.988056   999 net.cpp:408] ip2 <- ip1
I0428 20:17:50.988064   999 net.cpp:382] ip2 -> ip2
I0428 20:17:50.988180   999 net.cpp:124] Setting up ip2
I0428 20:17:50.988190   999 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:50.988195   999 net.cpp:139] Memory required for data: 15052800
I0428 20:17:50.988209   999 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:50.988215   999 net.cpp:86] Creating Layer relu2
I0428 20:17:50.988220   999 net.cpp:408] relu2 <- ip2
I0428 20:17:50.988226   999 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:50.988528   999 net.cpp:124] Setting up relu2
I0428 20:17:50.988539   999 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:50.988544   999 net.cpp:139] Memory required for data: 15062800
I0428 20:17:50.988548   999 layer_factory.hpp:77] Creating layer ip3
I0428 20:17:50.988555   999 net.cpp:86] Creating Layer ip3
I0428 20:17:50.988566   999 net.cpp:408] ip3 <- ip2
I0428 20:17:50.988590   999 net.cpp:382] ip3 -> ip3
I0428 20:17:50.988719   999 net.cpp:124] Setting up ip3
I0428 20:17:50.988729   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.988734   999 net.cpp:139] Memory required for data: 15066800
I0428 20:17:50.988744   999 layer_factory.hpp:77] Creating layer relu3
I0428 20:17:50.988750   999 net.cpp:86] Creating Layer relu3
I0428 20:17:50.988762   999 net.cpp:408] relu3 <- ip3
I0428 20:17:50.988770   999 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:17:50.989997   999 net.cpp:124] Setting up relu3
I0428 20:17:50.990015   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.990020   999 net.cpp:139] Memory required for data: 15070800
I0428 20:17:50.990025   999 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:17:50.990033   999 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:17:50.990038   999 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:17:50.990047   999 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:17:50.990056   999 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:17:50.990106   999 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:17:50.990123   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.990144   999 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:50.990149   999 net.cpp:139] Memory required for data: 15078800
I0428 20:17:50.990152   999 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:50.990161   999 net.cpp:86] Creating Layer accuracy
I0428 20:17:50.990188   999 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:17:50.990195   999 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:50.990201   999 net.cpp:382] accuracy -> accuracy
I0428 20:17:50.990216   999 net.cpp:124] Setting up accuracy
I0428 20:17:50.990222   999 net.cpp:131] Top shape: (1)
I0428 20:17:50.990227   999 net.cpp:139] Memory required for data: 15078804
I0428 20:17:50.990231   999 layer_factory.hpp:77] Creating layer loss
I0428 20:17:50.990237   999 net.cpp:86] Creating Layer loss
I0428 20:17:50.990242   999 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:17:50.990247   999 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:50.990253   999 net.cpp:382] loss -> loss
I0428 20:17:50.990262   999 layer_factory.hpp:77] Creating layer loss
I0428 20:17:50.990563   999 net.cpp:124] Setting up loss
I0428 20:17:50.990576   999 net.cpp:131] Top shape: (1)
I0428 20:17:50.990581   999 net.cpp:134]     with loss weight 1
I0428 20:17:50.990600   999 net.cpp:139] Memory required for data: 15078808
I0428 20:17:50.990607   999 net.cpp:200] loss needs backward computation.
I0428 20:17:50.990612   999 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:50.990617   999 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:17:50.990622   999 net.cpp:200] relu3 needs backward computation.
I0428 20:17:50.990625   999 net.cpp:200] ip3 needs backward computation.
I0428 20:17:50.990638   999 net.cpp:200] relu2 needs backward computation.
I0428 20:17:50.990641   999 net.cpp:200] ip2 needs backward computation.
I0428 20:17:50.990646   999 net.cpp:200] relu1 needs backward computation.
I0428 20:17:50.990650   999 net.cpp:200] ip1 needs backward computation.
I0428 20:17:50.990661   999 net.cpp:200] pool1 needs backward computation.
I0428 20:17:50.990665   999 net.cpp:200] conv1 needs backward computation.
I0428 20:17:50.990670   999 net.cpp:200] pool0 needs backward computation.
I0428 20:17:50.990675   999 net.cpp:200] conv0 needs backward computation.
I0428 20:17:50.990680   999 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:50.990692   999 net.cpp:202] mnist does not need backward computation.
I0428 20:17:50.990696   999 net.cpp:244] This network produces output accuracy
I0428 20:17:50.990701   999 net.cpp:244] This network produces output loss
I0428 20:17:50.990723   999 net.cpp:257] Network initialization done.
I0428 20:17:50.990778   999 solver.cpp:56] Solver scaffolding done.
I0428 20:17:50.991328   999 caffe.cpp:248] Starting Optimization
I0428 20:17:50.991336   999 solver.cpp:273] Solving LeNet
I0428 20:17:50.991340   999 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:50.991540   999 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:51.001411   999 blocking_queue.cpp:49] Waiting for data
I0428 20:17:51.071848  1006 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:51.073125   999 solver.cpp:398]     Test net output #0: accuracy = 0.1099
I0428 20:17:51.073165   999 solver.cpp:398]     Test net output #1: loss = 2.3031 (* 1 = 2.3031 loss)
I0428 20:17:51.078912   999 solver.cpp:219] Iteration 0 (0 iter/s, 0.0875356s/100 iters), loss = 2.30095
I0428 20:17:51.078940   999 solver.cpp:238]     Train net output #0: loss = 2.30095 (* 1 = 2.30095 loss)
I0428 20:17:51.078970   999 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:51.207332   999 solver.cpp:219] Iteration 100 (778.957 iter/s, 0.128377s/100 iters), loss = 1.37256
I0428 20:17:51.207361   999 solver.cpp:238]     Train net output #0: loss = 1.37256 (* 1 = 1.37256 loss)
I0428 20:17:51.207386   999 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:51.339215   999 solver.cpp:219] Iteration 200 (758.489 iter/s, 0.131841s/100 iters), loss = 1.24069
I0428 20:17:51.339242   999 solver.cpp:238]     Train net output #0: loss = 1.24069 (* 1 = 1.24069 loss)
I0428 20:17:51.339249   999 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:51.477253   999 solver.cpp:219] Iteration 300 (724.657 iter/s, 0.137996s/100 iters), loss = 0.699428
I0428 20:17:51.477289   999 solver.cpp:238]     Train net output #0: loss = 0.699428 (* 1 = 0.699428 loss)
I0428 20:17:51.477298   999 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:51.612292   999 solver.cpp:219] Iteration 400 (740.792 iter/s, 0.134991s/100 iters), loss = 1.09252
I0428 20:17:51.612323   999 solver.cpp:238]     Train net output #0: loss = 1.09252 (* 1 = 1.09252 loss)
I0428 20:17:51.612331   999 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:51.736821   999 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:51.802191  1006 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:51.803845   999 solver.cpp:398]     Test net output #0: accuracy = 0.5753
I0428 20:17:51.803864   999 solver.cpp:398]     Test net output #1: loss = 1.08253 (* 1 = 1.08253 loss)
I0428 20:17:51.805016   999 solver.cpp:219] Iteration 500 (518.995 iter/s, 0.19268s/100 iters), loss = 1.31813
I0428 20:17:51.805055   999 solver.cpp:238]     Train net output #0: loss = 1.31813 (* 1 = 1.31813 loss)
I0428 20:17:51.805063   999 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:51.932113   999 solver.cpp:219] Iteration 600 (787.112 iter/s, 0.127047s/100 iters), loss = 1.00743
I0428 20:17:51.932137   999 solver.cpp:238]     Train net output #0: loss = 1.00743 (* 1 = 1.00743 loss)
I0428 20:17:51.932143   999 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:52.051304   999 solver.cpp:219] Iteration 700 (839.231 iter/s, 0.119157s/100 iters), loss = 1.03645
I0428 20:17:52.051328   999 solver.cpp:238]     Train net output #0: loss = 1.03645 (* 1 = 1.03645 loss)
I0428 20:17:52.051352   999 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:52.170377   999 solver.cpp:219] Iteration 800 (840.075 iter/s, 0.119037s/100 iters), loss = 1.00539
I0428 20:17:52.170399   999 solver.cpp:238]     Train net output #0: loss = 1.00539 (* 1 = 1.00539 loss)
I0428 20:17:52.170421   999 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:52.290381   999 solver.cpp:219] Iteration 900 (833.529 iter/s, 0.119972s/100 iters), loss = 0.708027
I0428 20:17:52.290405   999 solver.cpp:238]     Train net output #0: loss = 0.708027 (* 1 = 0.708027 loss)
I0428 20:17:52.290426   999 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:52.330596  1005 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:52.409857   999 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:52.410951   999 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:52.411725   999 solver.cpp:311] Iteration 1000, loss = 0.970641
I0428 20:17:52.411741   999 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:52.488571  1006 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:52.489329   999 solver.cpp:398]     Test net output #0: accuracy = 0.5833
I0428 20:17:52.489348   999 solver.cpp:398]     Test net output #1: loss = 1.01178 (* 1 = 1.01178 loss)
I0428 20:17:52.489353   999 solver.cpp:316] Optimization Done.
I0428 20:17:52.489357   999 caffe.cpp:259] Optimization Done.
