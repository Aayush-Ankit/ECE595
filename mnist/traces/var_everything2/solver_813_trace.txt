I0428 19:58:15.074800 28928 caffe.cpp:218] Using GPUs 0
I0428 19:58:15.105026 28928 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:15.556352 28928 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test813.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:15.556483 28928 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test813.prototxt
I0428 19:58:15.556815 28928 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:15.556851 28928 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:15.556952 28928 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:15.557019 28928 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:15.557122 28928 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:15.557142 28928 net.cpp:86] Creating Layer mnist
I0428 19:58:15.557150 28928 net.cpp:382] mnist -> data
I0428 19:58:15.557199 28928 net.cpp:382] mnist -> label
I0428 19:58:15.558117 28928 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:15.560484 28928 net.cpp:124] Setting up mnist
I0428 19:58:15.560515 28928 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:15.560520 28928 net.cpp:131] Top shape: 64 (64)
I0428 19:58:15.560523 28928 net.cpp:139] Memory required for data: 200960
I0428 19:58:15.560529 28928 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:15.560544 28928 net.cpp:86] Creating Layer conv0
I0428 19:58:15.560562 28928 net.cpp:408] conv0 <- data
I0428 19:58:15.560575 28928 net.cpp:382] conv0 -> conv0
I0428 19:58:15.782888 28928 net.cpp:124] Setting up conv0
I0428 19:58:15.782912 28928 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:15.782917 28928 net.cpp:139] Memory required for data: 1675520
I0428 19:58:15.782930 28928 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:15.782943 28928 net.cpp:86] Creating Layer pool0
I0428 19:58:15.782945 28928 net.cpp:408] pool0 <- conv0
I0428 19:58:15.782951 28928 net.cpp:382] pool0 -> pool0
I0428 19:58:15.783011 28928 net.cpp:124] Setting up pool0
I0428 19:58:15.783016 28928 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:15.783020 28928 net.cpp:139] Memory required for data: 2044160
I0428 19:58:15.783021 28928 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:15.783032 28928 net.cpp:86] Creating Layer conv1
I0428 19:58:15.783035 28928 net.cpp:408] conv1 <- pool0
I0428 19:58:15.783041 28928 net.cpp:382] conv1 -> conv1
I0428 19:58:15.785811 28928 net.cpp:124] Setting up conv1
I0428 19:58:15.785826 28928 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:15.785830 28928 net.cpp:139] Memory required for data: 2126080
I0428 19:58:15.785838 28928 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:15.785848 28928 net.cpp:86] Creating Layer pool1
I0428 19:58:15.785851 28928 net.cpp:408] pool1 <- conv1
I0428 19:58:15.785856 28928 net.cpp:382] pool1 -> pool1
I0428 19:58:15.785894 28928 net.cpp:124] Setting up pool1
I0428 19:58:15.785912 28928 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:15.785914 28928 net.cpp:139] Memory required for data: 2146560
I0428 19:58:15.785917 28928 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:15.785923 28928 net.cpp:86] Creating Layer ip1
I0428 19:58:15.785928 28928 net.cpp:408] ip1 <- pool1
I0428 19:58:15.785931 28928 net.cpp:382] ip1 -> ip1
I0428 19:58:15.786052 28928 net.cpp:124] Setting up ip1
I0428 19:58:15.786059 28928 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:15.786062 28928 net.cpp:139] Memory required for data: 2159360
I0428 19:58:15.786069 28928 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:15.786074 28928 net.cpp:86] Creating Layer relu1
I0428 19:58:15.786077 28928 net.cpp:408] relu1 <- ip1
I0428 19:58:15.786082 28928 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:15.786288 28928 net.cpp:124] Setting up relu1
I0428 19:58:15.786296 28928 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:15.786299 28928 net.cpp:139] Memory required for data: 2172160
I0428 19:58:15.786303 28928 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:15.786310 28928 net.cpp:86] Creating Layer ip2
I0428 19:58:15.786314 28928 net.cpp:408] ip2 <- ip1
I0428 19:58:15.786319 28928 net.cpp:382] ip2 -> ip2
I0428 19:58:15.786433 28928 net.cpp:124] Setting up ip2
I0428 19:58:15.786440 28928 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:15.786443 28928 net.cpp:139] Memory required for data: 2178560
I0428 19:58:15.786449 28928 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:15.786458 28928 net.cpp:86] Creating Layer relu2
I0428 19:58:15.786460 28928 net.cpp:408] relu2 <- ip2
I0428 19:58:15.786464 28928 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:15.787266 28928 net.cpp:124] Setting up relu2
I0428 19:58:15.787277 28928 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:15.787297 28928 net.cpp:139] Memory required for data: 2184960
I0428 19:58:15.787299 28928 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:15.787307 28928 net.cpp:86] Creating Layer ip3
I0428 19:58:15.787309 28928 net.cpp:408] ip3 <- ip2
I0428 19:58:15.787314 28928 net.cpp:382] ip3 -> ip3
I0428 19:58:15.787413 28928 net.cpp:124] Setting up ip3
I0428 19:58:15.787420 28928 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:15.787423 28928 net.cpp:139] Memory required for data: 2187520
I0428 19:58:15.787431 28928 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:15.787436 28928 net.cpp:86] Creating Layer relu3
I0428 19:58:15.787439 28928 net.cpp:408] relu3 <- ip3
I0428 19:58:15.787443 28928 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:15.787623 28928 net.cpp:124] Setting up relu3
I0428 19:58:15.787631 28928 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:15.787634 28928 net.cpp:139] Memory required for data: 2190080
I0428 19:58:15.787637 28928 layer_factory.hpp:77] Creating layer loss
I0428 19:58:15.787642 28928 net.cpp:86] Creating Layer loss
I0428 19:58:15.787645 28928 net.cpp:408] loss <- ip3
I0428 19:58:15.787648 28928 net.cpp:408] loss <- label
I0428 19:58:15.787654 28928 net.cpp:382] loss -> loss
I0428 19:58:15.787672 28928 layer_factory.hpp:77] Creating layer loss
I0428 19:58:15.787900 28928 net.cpp:124] Setting up loss
I0428 19:58:15.787909 28928 net.cpp:131] Top shape: (1)
I0428 19:58:15.787912 28928 net.cpp:134]     with loss weight 1
I0428 19:58:15.787925 28928 net.cpp:139] Memory required for data: 2190084
I0428 19:58:15.787928 28928 net.cpp:200] loss needs backward computation.
I0428 19:58:15.787932 28928 net.cpp:200] relu3 needs backward computation.
I0428 19:58:15.787935 28928 net.cpp:200] ip3 needs backward computation.
I0428 19:58:15.787937 28928 net.cpp:200] relu2 needs backward computation.
I0428 19:58:15.787940 28928 net.cpp:200] ip2 needs backward computation.
I0428 19:58:15.787942 28928 net.cpp:200] relu1 needs backward computation.
I0428 19:58:15.787945 28928 net.cpp:200] ip1 needs backward computation.
I0428 19:58:15.787948 28928 net.cpp:200] pool1 needs backward computation.
I0428 19:58:15.787951 28928 net.cpp:200] conv1 needs backward computation.
I0428 19:58:15.787955 28928 net.cpp:200] pool0 needs backward computation.
I0428 19:58:15.787957 28928 net.cpp:200] conv0 needs backward computation.
I0428 19:58:15.787961 28928 net.cpp:202] mnist does not need backward computation.
I0428 19:58:15.787962 28928 net.cpp:244] This network produces output loss
I0428 19:58:15.787986 28928 net.cpp:257] Network initialization done.
I0428 19:58:15.788336 28928 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test813.prototxt
I0428 19:58:15.788372 28928 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:15.788463 28928 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:15.788568 28928 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:15.788609 28928 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:15.788620 28928 net.cpp:86] Creating Layer mnist
I0428 19:58:15.788627 28928 net.cpp:382] mnist -> data
I0428 19:58:15.788635 28928 net.cpp:382] mnist -> label
I0428 19:58:15.788714 28928 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:15.790624 28928 net.cpp:124] Setting up mnist
I0428 19:58:15.790668 28928 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:15.790673 28928 net.cpp:131] Top shape: 100 (100)
I0428 19:58:15.790676 28928 net.cpp:139] Memory required for data: 314000
I0428 19:58:15.790680 28928 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:15.790715 28928 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:15.790720 28928 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:15.790725 28928 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:15.790732 28928 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:15.790779 28928 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:15.790786 28928 net.cpp:131] Top shape: 100 (100)
I0428 19:58:15.790789 28928 net.cpp:131] Top shape: 100 (100)
I0428 19:58:15.790792 28928 net.cpp:139] Memory required for data: 314800
I0428 19:58:15.790796 28928 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:15.790804 28928 net.cpp:86] Creating Layer conv0
I0428 19:58:15.790808 28928 net.cpp:408] conv0 <- data
I0428 19:58:15.790815 28928 net.cpp:382] conv0 -> conv0
I0428 19:58:15.792527 28928 net.cpp:124] Setting up conv0
I0428 19:58:15.792541 28928 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:15.792559 28928 net.cpp:139] Memory required for data: 2618800
I0428 19:58:15.792568 28928 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:15.792577 28928 net.cpp:86] Creating Layer pool0
I0428 19:58:15.792579 28928 net.cpp:408] pool0 <- conv0
I0428 19:58:15.792583 28928 net.cpp:382] pool0 -> pool0
I0428 19:58:15.792630 28928 net.cpp:124] Setting up pool0
I0428 19:58:15.792636 28928 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:15.792639 28928 net.cpp:139] Memory required for data: 3194800
I0428 19:58:15.792642 28928 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:15.792650 28928 net.cpp:86] Creating Layer conv1
I0428 19:58:15.792654 28928 net.cpp:408] conv1 <- pool0
I0428 19:58:15.792659 28928 net.cpp:382] conv1 -> conv1
I0428 19:58:15.794775 28928 net.cpp:124] Setting up conv1
I0428 19:58:15.794806 28928 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:15.794811 28928 net.cpp:139] Memory required for data: 3322800
I0428 19:58:15.794818 28928 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:15.794826 28928 net.cpp:86] Creating Layer pool1
I0428 19:58:15.794829 28928 net.cpp:408] pool1 <- conv1
I0428 19:58:15.794834 28928 net.cpp:382] pool1 -> pool1
I0428 19:58:15.794878 28928 net.cpp:124] Setting up pool1
I0428 19:58:15.794883 28928 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:15.794886 28928 net.cpp:139] Memory required for data: 3354800
I0428 19:58:15.794888 28928 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:15.794898 28928 net.cpp:86] Creating Layer ip1
I0428 19:58:15.794900 28928 net.cpp:408] ip1 <- pool1
I0428 19:58:15.794904 28928 net.cpp:382] ip1 -> ip1
I0428 19:58:15.795079 28928 net.cpp:124] Setting up ip1
I0428 19:58:15.795089 28928 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:15.795100 28928 net.cpp:139] Memory required for data: 3374800
I0428 19:58:15.795109 28928 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:15.795114 28928 net.cpp:86] Creating Layer relu1
I0428 19:58:15.795117 28928 net.cpp:408] relu1 <- ip1
I0428 19:58:15.795122 28928 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:15.795292 28928 net.cpp:124] Setting up relu1
I0428 19:58:15.795302 28928 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:15.795305 28928 net.cpp:139] Memory required for data: 3394800
I0428 19:58:15.795310 28928 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:15.795315 28928 net.cpp:86] Creating Layer ip2
I0428 19:58:15.795318 28928 net.cpp:408] ip2 <- ip1
I0428 19:58:15.795331 28928 net.cpp:382] ip2 -> ip2
I0428 19:58:15.795440 28928 net.cpp:124] Setting up ip2
I0428 19:58:15.795449 28928 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:15.795451 28928 net.cpp:139] Memory required for data: 3404800
I0428 19:58:15.795456 28928 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:15.795466 28928 net.cpp:86] Creating Layer relu2
I0428 19:58:15.795469 28928 net.cpp:408] relu2 <- ip2
I0428 19:58:15.795473 28928 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:15.795624 28928 net.cpp:124] Setting up relu2
I0428 19:58:15.795631 28928 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:15.795634 28928 net.cpp:139] Memory required for data: 3414800
I0428 19:58:15.795637 28928 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:15.795644 28928 net.cpp:86] Creating Layer ip3
I0428 19:58:15.795647 28928 net.cpp:408] ip3 <- ip2
I0428 19:58:15.795652 28928 net.cpp:382] ip3 -> ip3
I0428 19:58:15.795749 28928 net.cpp:124] Setting up ip3
I0428 19:58:15.795756 28928 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:15.795758 28928 net.cpp:139] Memory required for data: 3418800
I0428 19:58:15.795766 28928 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:15.795770 28928 net.cpp:86] Creating Layer relu3
I0428 19:58:15.795778 28928 net.cpp:408] relu3 <- ip3
I0428 19:58:15.795783 28928 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:15.796610 28928 net.cpp:124] Setting up relu3
I0428 19:58:15.796622 28928 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:15.796641 28928 net.cpp:139] Memory required for data: 3422800
I0428 19:58:15.796644 28928 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:15.796649 28928 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:15.796653 28928 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:15.796661 28928 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:15.796667 28928 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:15.796705 28928 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:15.796711 28928 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:15.796715 28928 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:15.796717 28928 net.cpp:139] Memory required for data: 3430800
I0428 19:58:15.796720 28928 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:15.796725 28928 net.cpp:86] Creating Layer accuracy
I0428 19:58:15.796728 28928 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:15.796732 28928 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:15.796736 28928 net.cpp:382] accuracy -> accuracy
I0428 19:58:15.796743 28928 net.cpp:124] Setting up accuracy
I0428 19:58:15.796746 28928 net.cpp:131] Top shape: (1)
I0428 19:58:15.796749 28928 net.cpp:139] Memory required for data: 3430804
I0428 19:58:15.796752 28928 layer_factory.hpp:77] Creating layer loss
I0428 19:58:15.796757 28928 net.cpp:86] Creating Layer loss
I0428 19:58:15.796761 28928 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:15.796764 28928 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:15.796768 28928 net.cpp:382] loss -> loss
I0428 19:58:15.796774 28928 layer_factory.hpp:77] Creating layer loss
I0428 19:58:15.797055 28928 net.cpp:124] Setting up loss
I0428 19:58:15.797065 28928 net.cpp:131] Top shape: (1)
I0428 19:58:15.797068 28928 net.cpp:134]     with loss weight 1
I0428 19:58:15.797075 28928 net.cpp:139] Memory required for data: 3430808
I0428 19:58:15.797092 28928 net.cpp:200] loss needs backward computation.
I0428 19:58:15.797097 28928 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:15.797101 28928 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:15.797103 28928 net.cpp:200] relu3 needs backward computation.
I0428 19:58:15.797106 28928 net.cpp:200] ip3 needs backward computation.
I0428 19:58:15.797109 28928 net.cpp:200] relu2 needs backward computation.
I0428 19:58:15.797112 28928 net.cpp:200] ip2 needs backward computation.
I0428 19:58:15.797116 28928 net.cpp:200] relu1 needs backward computation.
I0428 19:58:15.797117 28928 net.cpp:200] ip1 needs backward computation.
I0428 19:58:15.797121 28928 net.cpp:200] pool1 needs backward computation.
I0428 19:58:15.797124 28928 net.cpp:200] conv1 needs backward computation.
I0428 19:58:15.797128 28928 net.cpp:200] pool0 needs backward computation.
I0428 19:58:15.797132 28928 net.cpp:200] conv0 needs backward computation.
I0428 19:58:15.797158 28928 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:15.797161 28928 net.cpp:202] mnist does not need backward computation.
I0428 19:58:15.797164 28928 net.cpp:244] This network produces output accuracy
I0428 19:58:15.797171 28928 net.cpp:244] This network produces output loss
I0428 19:58:15.797183 28928 net.cpp:257] Network initialization done.
I0428 19:58:15.797222 28928 solver.cpp:56] Solver scaffolding done.
I0428 19:58:15.797638 28928 caffe.cpp:248] Starting Optimization
I0428 19:58:15.797658 28928 solver.cpp:273] Solving LeNet
I0428 19:58:15.797662 28928 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:15.797926 28928 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:15.802011 28928 blocking_queue.cpp:49] Waiting for data
I0428 19:58:15.864261 28935 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:15.864787 28928 solver.cpp:398]     Test net output #0: accuracy = 0.0795
I0428 19:58:15.864825 28928 solver.cpp:398]     Test net output #1: loss = 2.31382 (* 1 = 2.31382 loss)
I0428 19:58:15.867259 28928 solver.cpp:219] Iteration 0 (0 iter/s, 0.0695521s/100 iters), loss = 2.3206
I0428 19:58:15.867312 28928 solver.cpp:238]     Train net output #0: loss = 2.3206 (* 1 = 2.3206 loss)
I0428 19:58:15.867324 28928 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:15.943747 28928 solver.cpp:219] Iteration 100 (1308.22 iter/s, 0.0764395s/100 iters), loss = 1.68257
I0428 19:58:15.943785 28928 solver.cpp:238]     Train net output #0: loss = 1.68257 (* 1 = 1.68257 loss)
I0428 19:58:15.943791 28928 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:16.017091 28928 solver.cpp:219] Iteration 200 (1364.03 iter/s, 0.0733122s/100 iters), loss = 1.01601
I0428 19:58:16.017128 28928 solver.cpp:238]     Train net output #0: loss = 1.01601 (* 1 = 1.01601 loss)
I0428 19:58:16.017134 28928 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:16.090910 28928 solver.cpp:219] Iteration 300 (1355.23 iter/s, 0.0737884s/100 iters), loss = 0.852316
I0428 19:58:16.090948 28928 solver.cpp:238]     Train net output #0: loss = 0.852316 (* 1 = 0.852316 loss)
I0428 19:58:16.090953 28928 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:16.164528 28928 solver.cpp:219] Iteration 400 (1358.93 iter/s, 0.0735875s/100 iters), loss = 0.711794
I0428 19:58:16.164566 28928 solver.cpp:238]     Train net output #0: loss = 0.711794 (* 1 = 0.711794 loss)
I0428 19:58:16.164572 28928 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:16.237267 28928 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:16.282266 28935 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:16.282802 28928 solver.cpp:398]     Test net output #0: accuracy = 0.8322
I0428 19:58:16.282820 28928 solver.cpp:398]     Test net output #1: loss = 0.611615 (* 1 = 0.611615 loss)
I0428 19:58:16.283679 28928 solver.cpp:219] Iteration 500 (839.512 iter/s, 0.119117s/100 iters), loss = 0.546219
I0428 19:58:16.283725 28928 solver.cpp:238]     Train net output #0: loss = 0.546219 (* 1 = 0.546219 loss)
I0428 19:58:16.283746 28928 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:16.365286 28928 solver.cpp:219] Iteration 600 (1225.95 iter/s, 0.0815693s/100 iters), loss = 0.603347
I0428 19:58:16.365325 28928 solver.cpp:238]     Train net output #0: loss = 0.603347 (* 1 = 0.603347 loss)
I0428 19:58:16.365331 28928 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:16.443079 28928 solver.cpp:219] Iteration 700 (1285.98 iter/s, 0.0777615s/100 iters), loss = 0.682586
I0428 19:58:16.443119 28928 solver.cpp:238]     Train net output #0: loss = 0.682586 (* 1 = 0.682586 loss)
I0428 19:58:16.443125 28928 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:16.518339 28928 solver.cpp:219] Iteration 800 (1329.31 iter/s, 0.0752271s/100 iters), loss = 0.625866
I0428 19:58:16.518394 28928 solver.cpp:238]     Train net output #0: loss = 0.625866 (* 1 = 0.625866 loss)
I0428 19:58:16.518401 28928 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:16.596549 28928 solver.cpp:219] Iteration 900 (1279.43 iter/s, 0.0781599s/100 iters), loss = 0.718007
I0428 19:58:16.596587 28928 solver.cpp:238]     Train net output #0: loss = 0.718007 (* 1 = 0.718007 loss)
I0428 19:58:16.596593 28928 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:16.622488 28934 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:16.673028 28928 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:16.673811 28928 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:16.674310 28928 solver.cpp:311] Iteration 1000, loss = 0.641938
I0428 19:58:16.674324 28928 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:16.733196 28935 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:16.735136 28928 solver.cpp:398]     Test net output #0: accuracy = 0.8615
I0428 19:58:16.735179 28928 solver.cpp:398]     Test net output #1: loss = 0.556361 (* 1 = 0.556361 loss)
I0428 19:58:16.735188 28928 solver.cpp:316] Optimization Done.
I0428 19:58:16.735193 28928 caffe.cpp:259] Optimization Done.
