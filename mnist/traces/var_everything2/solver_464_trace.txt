I0428 19:45:06.053237 25739 caffe.cpp:218] Using GPUs 0
I0428 19:45:06.094543 25739 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:06.597779 25739 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test464.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:06.597898 25739 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test464.prototxt
I0428 19:45:06.598222 25739 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:06.598237 25739 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:06.598315 25739 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:06.598394 25739 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:06.598479 25739 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:06.598498 25739 net.cpp:86] Creating Layer mnist
I0428 19:45:06.598507 25739 net.cpp:382] mnist -> data
I0428 19:45:06.598526 25739 net.cpp:382] mnist -> label
I0428 19:45:06.599436 25739 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:06.601609 25739 net.cpp:124] Setting up mnist
I0428 19:45:06.601656 25739 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:06.601676 25739 net.cpp:131] Top shape: 64 (64)
I0428 19:45:06.601680 25739 net.cpp:139] Memory required for data: 200960
I0428 19:45:06.601686 25739 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:06.601701 25739 net.cpp:86] Creating Layer conv0
I0428 19:45:06.601717 25739 net.cpp:408] conv0 <- data
I0428 19:45:06.601727 25739 net.cpp:382] conv0 -> conv0
I0428 19:45:06.825197 25739 net.cpp:124] Setting up conv0
I0428 19:45:06.825222 25739 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:06.825227 25739 net.cpp:139] Memory required for data: 495872
I0428 19:45:06.825239 25739 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:06.825253 25739 net.cpp:86] Creating Layer pool0
I0428 19:45:06.825256 25739 net.cpp:408] pool0 <- conv0
I0428 19:45:06.825260 25739 net.cpp:382] pool0 -> pool0
I0428 19:45:06.825320 25739 net.cpp:124] Setting up pool0
I0428 19:45:06.825340 25739 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:06.825343 25739 net.cpp:139] Memory required for data: 569600
I0428 19:45:06.825346 25739 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:06.825358 25739 net.cpp:86] Creating Layer conv1
I0428 19:45:06.825361 25739 net.cpp:408] conv1 <- pool0
I0428 19:45:06.825366 25739 net.cpp:382] conv1 -> conv1
I0428 19:45:06.828218 25739 net.cpp:124] Setting up conv1
I0428 19:45:06.828248 25739 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:45:06.828251 25739 net.cpp:139] Memory required for data: 1388800
I0428 19:45:06.828259 25739 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:06.828268 25739 net.cpp:86] Creating Layer pool1
I0428 19:45:06.828270 25739 net.cpp:408] pool1 <- conv1
I0428 19:45:06.828276 25739 net.cpp:382] pool1 -> pool1
I0428 19:45:06.828332 25739 net.cpp:124] Setting up pool1
I0428 19:45:06.828338 25739 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:45:06.828341 25739 net.cpp:139] Memory required for data: 1593600
I0428 19:45:06.828343 25739 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:06.828351 25739 net.cpp:86] Creating Layer ip1
I0428 19:45:06.828354 25739 net.cpp:408] ip1 <- pool1
I0428 19:45:06.828358 25739 net.cpp:382] ip1 -> ip1
I0428 19:45:06.828701 25739 net.cpp:124] Setting up ip1
I0428 19:45:06.828709 25739 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:06.828727 25739 net.cpp:139] Memory required for data: 1606400
I0428 19:45:06.828734 25739 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:06.828739 25739 net.cpp:86] Creating Layer relu1
I0428 19:45:06.828742 25739 net.cpp:408] relu1 <- ip1
I0428 19:45:06.828749 25739 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:06.828994 25739 net.cpp:124] Setting up relu1
I0428 19:45:06.829005 25739 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:06.829007 25739 net.cpp:139] Memory required for data: 1619200
I0428 19:45:06.829010 25739 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:06.829018 25739 net.cpp:86] Creating Layer ip2
I0428 19:45:06.829021 25739 net.cpp:408] ip2 <- ip1
I0428 19:45:06.829026 25739 net.cpp:382] ip2 -> ip2
I0428 19:45:06.829167 25739 net.cpp:124] Setting up ip2
I0428 19:45:06.829174 25739 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:06.829177 25739 net.cpp:139] Memory required for data: 1625600
I0428 19:45:06.829182 25739 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:06.829203 25739 net.cpp:86] Creating Layer relu2
I0428 19:45:06.829206 25739 net.cpp:408] relu2 <- ip2
I0428 19:45:06.829210 25739 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:06.830041 25739 net.cpp:124] Setting up relu2
I0428 19:45:06.830054 25739 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:06.830073 25739 net.cpp:139] Memory required for data: 1632000
I0428 19:45:06.830076 25739 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:06.830083 25739 net.cpp:86] Creating Layer ip3
I0428 19:45:06.830087 25739 net.cpp:408] ip3 <- ip2
I0428 19:45:06.830093 25739 net.cpp:382] ip3 -> ip3
I0428 19:45:06.830211 25739 net.cpp:124] Setting up ip3
I0428 19:45:06.830219 25739 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:06.830222 25739 net.cpp:139] Memory required for data: 1634560
I0428 19:45:06.830231 25739 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:06.830236 25739 net.cpp:86] Creating Layer relu3
I0428 19:45:06.830240 25739 net.cpp:408] relu3 <- ip3
I0428 19:45:06.830245 25739 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:06.830416 25739 net.cpp:124] Setting up relu3
I0428 19:45:06.830425 25739 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:06.830427 25739 net.cpp:139] Memory required for data: 1637120
I0428 19:45:06.830431 25739 layer_factory.hpp:77] Creating layer loss
I0428 19:45:06.830436 25739 net.cpp:86] Creating Layer loss
I0428 19:45:06.830440 25739 net.cpp:408] loss <- ip3
I0428 19:45:06.830456 25739 net.cpp:408] loss <- label
I0428 19:45:06.830461 25739 net.cpp:382] loss -> loss
I0428 19:45:06.830474 25739 layer_factory.hpp:77] Creating layer loss
I0428 19:45:06.830704 25739 net.cpp:124] Setting up loss
I0428 19:45:06.830729 25739 net.cpp:131] Top shape: (1)
I0428 19:45:06.830731 25739 net.cpp:134]     with loss weight 1
I0428 19:45:06.830745 25739 net.cpp:139] Memory required for data: 1637124
I0428 19:45:06.830749 25739 net.cpp:200] loss needs backward computation.
I0428 19:45:06.830752 25739 net.cpp:200] relu3 needs backward computation.
I0428 19:45:06.830756 25739 net.cpp:200] ip3 needs backward computation.
I0428 19:45:06.830759 25739 net.cpp:200] relu2 needs backward computation.
I0428 19:45:06.830761 25739 net.cpp:200] ip2 needs backward computation.
I0428 19:45:06.830765 25739 net.cpp:200] relu1 needs backward computation.
I0428 19:45:06.830767 25739 net.cpp:200] ip1 needs backward computation.
I0428 19:45:06.830770 25739 net.cpp:200] pool1 needs backward computation.
I0428 19:45:06.830773 25739 net.cpp:200] conv1 needs backward computation.
I0428 19:45:06.830776 25739 net.cpp:200] pool0 needs backward computation.
I0428 19:45:06.830780 25739 net.cpp:200] conv0 needs backward computation.
I0428 19:45:06.830782 25739 net.cpp:202] mnist does not need backward computation.
I0428 19:45:06.830785 25739 net.cpp:244] This network produces output loss
I0428 19:45:06.830796 25739 net.cpp:257] Network initialization done.
I0428 19:45:06.831199 25739 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test464.prototxt
I0428 19:45:06.831239 25739 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:06.831327 25739 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:06.831424 25739 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:06.831468 25739 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:06.831480 25739 net.cpp:86] Creating Layer mnist
I0428 19:45:06.831486 25739 net.cpp:382] mnist -> data
I0428 19:45:06.831493 25739 net.cpp:382] mnist -> label
I0428 19:45:06.831578 25739 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:06.833634 25739 net.cpp:124] Setting up mnist
I0428 19:45:06.833663 25739 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:06.833668 25739 net.cpp:131] Top shape: 100 (100)
I0428 19:45:06.833672 25739 net.cpp:139] Memory required for data: 314000
I0428 19:45:06.833674 25739 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:06.833705 25739 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:06.833709 25739 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:06.833714 25739 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:06.833720 25739 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:06.833760 25739 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:06.833766 25739 net.cpp:131] Top shape: 100 (100)
I0428 19:45:06.833770 25739 net.cpp:131] Top shape: 100 (100)
I0428 19:45:06.833772 25739 net.cpp:139] Memory required for data: 314800
I0428 19:45:06.833775 25739 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:06.833798 25739 net.cpp:86] Creating Layer conv0
I0428 19:45:06.833801 25739 net.cpp:408] conv0 <- data
I0428 19:45:06.833807 25739 net.cpp:382] conv0 -> conv0
I0428 19:45:06.835394 25739 net.cpp:124] Setting up conv0
I0428 19:45:06.835407 25739 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:06.835412 25739 net.cpp:139] Memory required for data: 775600
I0428 19:45:06.835422 25739 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:06.835427 25739 net.cpp:86] Creating Layer pool0
I0428 19:45:06.835430 25739 net.cpp:408] pool0 <- conv0
I0428 19:45:06.835435 25739 net.cpp:382] pool0 -> pool0
I0428 19:45:06.835469 25739 net.cpp:124] Setting up pool0
I0428 19:45:06.835474 25739 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:06.835477 25739 net.cpp:139] Memory required for data: 890800
I0428 19:45:06.835480 25739 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:06.835489 25739 net.cpp:86] Creating Layer conv1
I0428 19:45:06.835491 25739 net.cpp:408] conv1 <- pool0
I0428 19:45:06.835497 25739 net.cpp:382] conv1 -> conv1
I0428 19:45:06.837134 25739 net.cpp:124] Setting up conv1
I0428 19:45:06.837148 25739 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:45:06.837152 25739 net.cpp:139] Memory required for data: 2170800
I0428 19:45:06.837162 25739 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:06.837182 25739 net.cpp:86] Creating Layer pool1
I0428 19:45:06.837186 25739 net.cpp:408] pool1 <- conv1
I0428 19:45:06.837208 25739 net.cpp:382] pool1 -> pool1
I0428 19:45:06.837244 25739 net.cpp:124] Setting up pool1
I0428 19:45:06.837249 25739 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:45:06.837260 25739 net.cpp:139] Memory required for data: 2490800
I0428 19:45:06.837262 25739 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:06.837270 25739 net.cpp:86] Creating Layer ip1
I0428 19:45:06.837272 25739 net.cpp:408] ip1 <- pool1
I0428 19:45:06.837277 25739 net.cpp:382] ip1 -> ip1
I0428 19:45:06.837656 25739 net.cpp:124] Setting up ip1
I0428 19:45:06.837664 25739 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:06.837677 25739 net.cpp:139] Memory required for data: 2510800
I0428 19:45:06.837685 25739 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:06.837692 25739 net.cpp:86] Creating Layer relu1
I0428 19:45:06.837695 25739 net.cpp:408] relu1 <- ip1
I0428 19:45:06.837699 25739 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:06.837889 25739 net.cpp:124] Setting up relu1
I0428 19:45:06.837898 25739 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:06.837900 25739 net.cpp:139] Memory required for data: 2530800
I0428 19:45:06.837903 25739 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:06.837918 25739 net.cpp:86] Creating Layer ip2
I0428 19:45:06.837920 25739 net.cpp:408] ip2 <- ip1
I0428 19:45:06.837931 25739 net.cpp:382] ip2 -> ip2
I0428 19:45:06.838091 25739 net.cpp:124] Setting up ip2
I0428 19:45:06.838099 25739 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:06.838101 25739 net.cpp:139] Memory required for data: 2540800
I0428 19:45:06.838106 25739 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:06.838111 25739 net.cpp:86] Creating Layer relu2
I0428 19:45:06.838114 25739 net.cpp:408] relu2 <- ip2
I0428 19:45:06.838119 25739 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:06.838416 25739 net.cpp:124] Setting up relu2
I0428 19:45:06.838424 25739 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:06.838428 25739 net.cpp:139] Memory required for data: 2550800
I0428 19:45:06.838430 25739 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:06.838435 25739 net.cpp:86] Creating Layer ip3
I0428 19:45:06.838438 25739 net.cpp:408] ip3 <- ip2
I0428 19:45:06.838443 25739 net.cpp:382] ip3 -> ip3
I0428 19:45:06.838583 25739 net.cpp:124] Setting up ip3
I0428 19:45:06.838591 25739 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:06.838594 25739 net.cpp:139] Memory required for data: 2554800
I0428 19:45:06.838603 25739 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:06.838606 25739 net.cpp:86] Creating Layer relu3
I0428 19:45:06.838609 25739 net.cpp:408] relu3 <- ip3
I0428 19:45:06.838615 25739 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:06.839399 25739 net.cpp:124] Setting up relu3
I0428 19:45:06.839411 25739 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:06.839414 25739 net.cpp:139] Memory required for data: 2558800
I0428 19:45:06.839418 25739 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:45:06.839423 25739 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:45:06.839426 25739 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:45:06.839432 25739 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:45:06.839439 25739 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:45:06.839481 25739 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:45:06.839488 25739 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:06.839490 25739 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:06.839493 25739 net.cpp:139] Memory required for data: 2566800
I0428 19:45:06.839496 25739 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:06.839503 25739 net.cpp:86] Creating Layer accuracy
I0428 19:45:06.839505 25739 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:45:06.839509 25739 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:06.839514 25739 net.cpp:382] accuracy -> accuracy
I0428 19:45:06.839521 25739 net.cpp:124] Setting up accuracy
I0428 19:45:06.839525 25739 net.cpp:131] Top shape: (1)
I0428 19:45:06.839529 25739 net.cpp:139] Memory required for data: 2566804
I0428 19:45:06.839531 25739 layer_factory.hpp:77] Creating layer loss
I0428 19:45:06.839535 25739 net.cpp:86] Creating Layer loss
I0428 19:45:06.839539 25739 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:45:06.839542 25739 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:06.839546 25739 net.cpp:382] loss -> loss
I0428 19:45:06.839552 25739 layer_factory.hpp:77] Creating layer loss
I0428 19:45:06.839839 25739 net.cpp:124] Setting up loss
I0428 19:45:06.839848 25739 net.cpp:131] Top shape: (1)
I0428 19:45:06.839851 25739 net.cpp:134]     with loss weight 1
I0428 19:45:06.839857 25739 net.cpp:139] Memory required for data: 2566808
I0428 19:45:06.839876 25739 net.cpp:200] loss needs backward computation.
I0428 19:45:06.839886 25739 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:06.839890 25739 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:45:06.839907 25739 net.cpp:200] relu3 needs backward computation.
I0428 19:45:06.839910 25739 net.cpp:200] ip3 needs backward computation.
I0428 19:45:06.839917 25739 net.cpp:200] relu2 needs backward computation.
I0428 19:45:06.839920 25739 net.cpp:200] ip2 needs backward computation.
I0428 19:45:06.839922 25739 net.cpp:200] relu1 needs backward computation.
I0428 19:45:06.839926 25739 net.cpp:200] ip1 needs backward computation.
I0428 19:45:06.839928 25739 net.cpp:200] pool1 needs backward computation.
I0428 19:45:06.839931 25739 net.cpp:200] conv1 needs backward computation.
I0428 19:45:06.839939 25739 net.cpp:200] pool0 needs backward computation.
I0428 19:45:06.839941 25739 net.cpp:200] conv0 needs backward computation.
I0428 19:45:06.839946 25739 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:06.839948 25739 net.cpp:202] mnist does not need backward computation.
I0428 19:45:06.839951 25739 net.cpp:244] This network produces output accuracy
I0428 19:45:06.839954 25739 net.cpp:244] This network produces output loss
I0428 19:45:06.839965 25739 net.cpp:257] Network initialization done.
I0428 19:45:06.840004 25739 solver.cpp:56] Solver scaffolding done.
I0428 19:45:06.840338 25739 caffe.cpp:248] Starting Optimization
I0428 19:45:06.840345 25739 solver.cpp:273] Solving LeNet
I0428 19:45:06.840348 25739 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:06.840554 25739 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:06.844799 25739 blocking_queue.cpp:49] Waiting for data
I0428 19:45:06.919474 25746 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:06.920194 25739 solver.cpp:398]     Test net output #0: accuracy = 0.1128
I0428 19:45:06.920239 25739 solver.cpp:398]     Test net output #1: loss = 2.29357 (* 1 = 2.29357 loss)
I0428 19:45:06.924496 25739 solver.cpp:219] Iteration 0 (-2.25762e-31 iter/s, 0.0841093s/100 iters), loss = 2.28077
I0428 19:45:06.924543 25739 solver.cpp:238]     Train net output #0: loss = 2.28077 (* 1 = 2.28077 loss)
I0428 19:45:06.924563 25739 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:07.043529 25739 solver.cpp:219] Iteration 100 (840.531 iter/s, 0.118972s/100 iters), loss = 0.454789
I0428 19:45:07.043567 25739 solver.cpp:238]     Train net output #0: loss = 0.454789 (* 1 = 0.454789 loss)
I0428 19:45:07.043576 25739 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:07.149476 25739 solver.cpp:219] Iteration 200 (944.296 iter/s, 0.105899s/100 iters), loss = 0.632613
I0428 19:45:07.149502 25739 solver.cpp:238]     Train net output #0: loss = 0.632613 (* 1 = 0.632613 loss)
I0428 19:45:07.149508 25739 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:07.258069 25739 solver.cpp:219] Iteration 300 (921.19 iter/s, 0.108555s/100 iters), loss = 0.401848
I0428 19:45:07.258105 25739 solver.cpp:238]     Train net output #0: loss = 0.401848 (* 1 = 0.401848 loss)
I0428 19:45:07.258113 25739 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:07.369695 25739 solver.cpp:219] Iteration 400 (896.233 iter/s, 0.111578s/100 iters), loss = 0.411703
I0428 19:45:07.369735 25739 solver.cpp:238]     Train net output #0: loss = 0.411703 (* 1 = 0.411703 loss)
I0428 19:45:07.369750 25739 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:07.484724 25739 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:07.538097 25746 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:07.538607 25739 solver.cpp:398]     Test net output #0: accuracy = 0.8543
I0428 19:45:07.538632 25739 solver.cpp:398]     Test net output #1: loss = 0.386607 (* 1 = 0.386607 loss)
I0428 19:45:07.539744 25739 solver.cpp:219] Iteration 500 (588.245 iter/s, 0.169997s/100 iters), loss = 0.346223
I0428 19:45:07.539799 25739 solver.cpp:238]     Train net output #0: loss = 0.346223 (* 1 = 0.346223 loss)
I0428 19:45:07.539813 25739 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:07.651356 25739 solver.cpp:219] Iteration 600 (896.595 iter/s, 0.111533s/100 iters), loss = 0.418528
I0428 19:45:07.651423 25739 solver.cpp:238]     Train net output #0: loss = 0.418528 (* 1 = 0.418528 loss)
I0428 19:45:07.651445 25739 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:07.775712 25739 solver.cpp:219] Iteration 700 (804.63 iter/s, 0.124281s/100 iters), loss = 0.298853
I0428 19:45:07.775746 25739 solver.cpp:238]     Train net output #0: loss = 0.298853 (* 1 = 0.298853 loss)
I0428 19:45:07.775755 25739 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:07.888941 25739 solver.cpp:219] Iteration 800 (883.559 iter/s, 0.113179s/100 iters), loss = 0.538384
I0428 19:45:07.888978 25739 solver.cpp:238]     Train net output #0: loss = 0.538383 (* 1 = 0.538383 loss)
I0428 19:45:07.888990 25739 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:08.011487 25739 solver.cpp:219] Iteration 900 (816.367 iter/s, 0.122494s/100 iters), loss = 0.630498
I0428 19:45:08.011525 25739 solver.cpp:238]     Train net output #0: loss = 0.630498 (* 1 = 0.630498 loss)
I0428 19:45:08.011535 25739 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:08.052178 25745 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:08.131479 25739 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:08.133476 25739 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:08.134639 25739 solver.cpp:311] Iteration 1000, loss = 0.368283
I0428 19:45:08.134660 25739 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:08.211331 25746 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:08.211984 25739 solver.cpp:398]     Test net output #0: accuracy = 0.874
I0428 19:45:08.212010 25739 solver.cpp:398]     Test net output #1: loss = 0.323499 (* 1 = 0.323499 loss)
I0428 19:45:08.212018 25739 solver.cpp:316] Optimization Done.
I0428 19:45:08.212024 25739 caffe.cpp:259] Optimization Done.
