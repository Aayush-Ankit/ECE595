I0428 20:01:17.057289 29693 caffe.cpp:218] Using GPUs 0
I0428 20:01:17.091119 29693 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:17.609091 29693 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test899.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:17.609263 29693 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test899.prototxt
I0428 20:01:17.609683 29693 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:17.609714 29693 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:17.609833 29693 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:01:17.609920 29693 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:17.610026 29693 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:17.610051 29693 net.cpp:86] Creating Layer mnist
I0428 20:01:17.610060 29693 net.cpp:382] mnist -> data
I0428 20:01:17.610085 29693 net.cpp:382] mnist -> label
I0428 20:01:17.611354 29693 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:17.614497 29693 net.cpp:124] Setting up mnist
I0428 20:01:17.614547 29693 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:17.614554 29693 net.cpp:131] Top shape: 64 (64)
I0428 20:01:17.614560 29693 net.cpp:139] Memory required for data: 200960
I0428 20:01:17.614568 29693 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:17.614600 29693 net.cpp:86] Creating Layer conv0
I0428 20:01:17.614608 29693 net.cpp:408] conv0 <- data
I0428 20:01:17.614619 29693 net.cpp:382] conv0 -> conv0
I0428 20:01:17.904093 29693 net.cpp:124] Setting up conv0
I0428 20:01:17.904124 29693 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:17.904129 29693 net.cpp:139] Memory required for data: 1675520
I0428 20:01:17.904147 29693 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:17.904163 29693 net.cpp:86] Creating Layer pool0
I0428 20:01:17.904168 29693 net.cpp:408] pool0 <- conv0
I0428 20:01:17.904175 29693 net.cpp:382] pool0 -> pool0
I0428 20:01:17.904249 29693 net.cpp:124] Setting up pool0
I0428 20:01:17.904263 29693 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:17.904284 29693 net.cpp:139] Memory required for data: 2044160
I0428 20:01:17.904289 29693 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:17.904304 29693 net.cpp:86] Creating Layer conv1
I0428 20:01:17.904309 29693 net.cpp:408] conv1 <- pool0
I0428 20:01:17.904315 29693 net.cpp:382] conv1 -> conv1
I0428 20:01:17.908079 29693 net.cpp:124] Setting up conv1
I0428 20:01:17.908112 29693 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:17.908116 29693 net.cpp:139] Memory required for data: 2863360
I0428 20:01:17.908141 29693 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:17.908151 29693 net.cpp:86] Creating Layer pool1
I0428 20:01:17.908156 29693 net.cpp:408] pool1 <- conv1
I0428 20:01:17.908177 29693 net.cpp:382] pool1 -> pool1
I0428 20:01:17.908222 29693 net.cpp:124] Setting up pool1
I0428 20:01:17.908231 29693 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:17.908236 29693 net.cpp:139] Memory required for data: 3068160
I0428 20:01:17.908241 29693 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:17.908249 29693 net.cpp:86] Creating Layer ip1
I0428 20:01:17.908254 29693 net.cpp:408] ip1 <- pool1
I0428 20:01:17.908260 29693 net.cpp:382] ip1 -> ip1
I0428 20:01:17.908447 29693 net.cpp:124] Setting up ip1
I0428 20:01:17.908457 29693 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:17.908460 29693 net.cpp:139] Memory required for data: 3070720
I0428 20:01:17.908470 29693 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:17.908478 29693 net.cpp:86] Creating Layer relu1
I0428 20:01:17.908483 29693 net.cpp:408] relu1 <- ip1
I0428 20:01:17.908489 29693 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:17.908686 29693 net.cpp:124] Setting up relu1
I0428 20:01:17.908697 29693 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:17.908701 29693 net.cpp:139] Memory required for data: 3073280
I0428 20:01:17.908706 29693 layer_factory.hpp:77] Creating layer loss
I0428 20:01:17.908715 29693 net.cpp:86] Creating Layer loss
I0428 20:01:17.908718 29693 net.cpp:408] loss <- ip1
I0428 20:01:17.908725 29693 net.cpp:408] loss <- label
I0428 20:01:17.908731 29693 net.cpp:382] loss -> loss
I0428 20:01:17.908752 29693 layer_factory.hpp:77] Creating layer loss
I0428 20:01:17.910053 29693 net.cpp:124] Setting up loss
I0428 20:01:17.910068 29693 net.cpp:131] Top shape: (1)
I0428 20:01:17.910089 29693 net.cpp:134]     with loss weight 1
I0428 20:01:17.910107 29693 net.cpp:139] Memory required for data: 3073284
I0428 20:01:17.910114 29693 net.cpp:200] loss needs backward computation.
I0428 20:01:17.910120 29693 net.cpp:200] relu1 needs backward computation.
I0428 20:01:17.910125 29693 net.cpp:200] ip1 needs backward computation.
I0428 20:01:17.910130 29693 net.cpp:200] pool1 needs backward computation.
I0428 20:01:17.910135 29693 net.cpp:200] conv1 needs backward computation.
I0428 20:01:17.910140 29693 net.cpp:200] pool0 needs backward computation.
I0428 20:01:17.910145 29693 net.cpp:200] conv0 needs backward computation.
I0428 20:01:17.910150 29693 net.cpp:202] mnist does not need backward computation.
I0428 20:01:17.910154 29693 net.cpp:244] This network produces output loss
I0428 20:01:17.910164 29693 net.cpp:257] Network initialization done.
I0428 20:01:17.910560 29693 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test899.prototxt
I0428 20:01:17.910607 29693 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:17.910709 29693 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:01:17.910804 29693 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:17.910861 29693 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:17.910876 29693 net.cpp:86] Creating Layer mnist
I0428 20:01:17.910882 29693 net.cpp:382] mnist -> data
I0428 20:01:17.910893 29693 net.cpp:382] mnist -> label
I0428 20:01:17.910995 29693 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:17.913640 29693 net.cpp:124] Setting up mnist
I0428 20:01:17.913686 29693 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:17.913692 29693 net.cpp:131] Top shape: 100 (100)
I0428 20:01:17.913697 29693 net.cpp:139] Memory required for data: 314000
I0428 20:01:17.913702 29693 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:17.913739 29693 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:17.913745 29693 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:17.913753 29693 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:17.913761 29693 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:17.913862 29693 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:17.913872 29693 net.cpp:131] Top shape: 100 (100)
I0428 20:01:17.913877 29693 net.cpp:131] Top shape: 100 (100)
I0428 20:01:17.913882 29693 net.cpp:139] Memory required for data: 314800
I0428 20:01:17.913885 29693 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:17.913897 29693 net.cpp:86] Creating Layer conv0
I0428 20:01:17.913902 29693 net.cpp:408] conv0 <- data
I0428 20:01:17.913908 29693 net.cpp:382] conv0 -> conv0
I0428 20:01:17.914973 29693 net.cpp:124] Setting up conv0
I0428 20:01:17.915004 29693 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:17.915009 29693 net.cpp:139] Memory required for data: 2618800
I0428 20:01:17.915020 29693 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:17.915029 29693 net.cpp:86] Creating Layer pool0
I0428 20:01:17.915033 29693 net.cpp:408] pool0 <- conv0
I0428 20:01:17.915040 29693 net.cpp:382] pool0 -> pool0
I0428 20:01:17.915081 29693 net.cpp:124] Setting up pool0
I0428 20:01:17.915089 29693 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:17.915093 29693 net.cpp:139] Memory required for data: 3194800
I0428 20:01:17.915097 29693 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:17.915108 29693 net.cpp:86] Creating Layer conv1
I0428 20:01:17.915112 29693 net.cpp:408] conv1 <- pool0
I0428 20:01:17.915134 29693 net.cpp:382] conv1 -> conv1
I0428 20:01:17.917242 29693 net.cpp:124] Setting up conv1
I0428 20:01:17.917273 29693 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:17.917279 29693 net.cpp:139] Memory required for data: 4474800
I0428 20:01:17.917289 29693 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:17.917297 29693 net.cpp:86] Creating Layer pool1
I0428 20:01:17.917330 29693 net.cpp:408] pool1 <- conv1
I0428 20:01:17.917337 29693 net.cpp:382] pool1 -> pool1
I0428 20:01:17.917385 29693 net.cpp:124] Setting up pool1
I0428 20:01:17.917397 29693 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:17.917402 29693 net.cpp:139] Memory required for data: 4794800
I0428 20:01:17.917407 29693 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:17.917415 29693 net.cpp:86] Creating Layer ip1
I0428 20:01:17.917419 29693 net.cpp:408] ip1 <- pool1
I0428 20:01:17.917428 29693 net.cpp:382] ip1 -> ip1
I0428 20:01:17.917631 29693 net.cpp:124] Setting up ip1
I0428 20:01:17.917642 29693 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:17.917649 29693 net.cpp:139] Memory required for data: 4798800
I0428 20:01:17.917675 29693 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:17.917681 29693 net.cpp:86] Creating Layer relu1
I0428 20:01:17.917687 29693 net.cpp:408] relu1 <- ip1
I0428 20:01:17.917696 29693 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:17.918792 29693 net.cpp:124] Setting up relu1
I0428 20:01:17.918822 29693 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:17.918829 29693 net.cpp:139] Memory required for data: 4802800
I0428 20:01:17.918834 29693 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:01:17.918844 29693 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:01:17.918849 29693 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:01:17.918856 29693 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:01:17.918865 29693 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:01:17.918911 29693 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:01:17.918926 29693 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:17.918931 29693 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:17.918937 29693 net.cpp:139] Memory required for data: 4810800
I0428 20:01:17.918942 29693 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:17.918949 29693 net.cpp:86] Creating Layer accuracy
I0428 20:01:17.918954 29693 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:01:17.918961 29693 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:17.918967 29693 net.cpp:382] accuracy -> accuracy
I0428 20:01:17.918977 29693 net.cpp:124] Setting up accuracy
I0428 20:01:17.918983 29693 net.cpp:131] Top shape: (1)
I0428 20:01:17.918988 29693 net.cpp:139] Memory required for data: 4810804
I0428 20:01:17.918992 29693 layer_factory.hpp:77] Creating layer loss
I0428 20:01:17.919010 29693 net.cpp:86] Creating Layer loss
I0428 20:01:17.919016 29693 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:01:17.919023 29693 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:17.919028 29693 net.cpp:382] loss -> loss
I0428 20:01:17.919037 29693 layer_factory.hpp:77] Creating layer loss
I0428 20:01:17.919349 29693 net.cpp:124] Setting up loss
I0428 20:01:17.919384 29693 net.cpp:131] Top shape: (1)
I0428 20:01:17.919389 29693 net.cpp:134]     with loss weight 1
I0428 20:01:17.919414 29693 net.cpp:139] Memory required for data: 4810808
I0428 20:01:17.919420 29693 net.cpp:200] loss needs backward computation.
I0428 20:01:17.919425 29693 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:17.919431 29693 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:01:17.919436 29693 net.cpp:200] relu1 needs backward computation.
I0428 20:01:17.919440 29693 net.cpp:200] ip1 needs backward computation.
I0428 20:01:17.919445 29693 net.cpp:200] pool1 needs backward computation.
I0428 20:01:17.919450 29693 net.cpp:200] conv1 needs backward computation.
I0428 20:01:17.919456 29693 net.cpp:200] pool0 needs backward computation.
I0428 20:01:17.919461 29693 net.cpp:200] conv0 needs backward computation.
I0428 20:01:17.919466 29693 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:17.919472 29693 net.cpp:202] mnist does not need backward computation.
I0428 20:01:17.919476 29693 net.cpp:244] This network produces output accuracy
I0428 20:01:17.919481 29693 net.cpp:244] This network produces output loss
I0428 20:01:17.919507 29693 net.cpp:257] Network initialization done.
I0428 20:01:17.919551 29693 solver.cpp:56] Solver scaffolding done.
I0428 20:01:17.919829 29693 caffe.cpp:248] Starting Optimization
I0428 20:01:17.919838 29693 solver.cpp:273] Solving LeNet
I0428 20:01:17.919842 29693 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:17.920012 29693 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:17.926774 29693 blocking_queue.cpp:49] Waiting for data
I0428 20:01:17.977108 29701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:17.977640 29693 solver.cpp:398]     Test net output #0: accuracy = 0.0362
I0428 20:01:17.977677 29693 solver.cpp:398]     Test net output #1: loss = 2.37408 (* 1 = 2.37408 loss)
I0428 20:01:17.981297 29693 solver.cpp:219] Iteration 0 (-1.34665e-42 iter/s, 0.06141s/100 iters), loss = 2.37057
I0428 20:01:17.981341 29693 solver.cpp:238]     Train net output #0: loss = 2.37057 (* 1 = 2.37057 loss)
I0428 20:01:17.981358 29693 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:18.090229 29693 solver.cpp:219] Iteration 100 (918.478 iter/s, 0.108876s/100 iters), loss = 1.2045
I0428 20:01:18.090281 29693 solver.cpp:238]     Train net output #0: loss = 1.2045 (* 1 = 1.2045 loss)
I0428 20:01:18.090292 29693 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:18.197623 29693 solver.cpp:219] Iteration 200 (931.638 iter/s, 0.107338s/100 iters), loss = 0.959358
I0428 20:01:18.197670 29693 solver.cpp:238]     Train net output #0: loss = 0.959358 (* 1 = 0.959358 loss)
I0428 20:01:18.197685 29693 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:18.303295 29693 solver.cpp:219] Iteration 300 (946.832 iter/s, 0.105615s/100 iters), loss = 0.874437
I0428 20:01:18.303340 29693 solver.cpp:238]     Train net output #0: loss = 0.874437 (* 1 = 0.874437 loss)
I0428 20:01:18.303354 29693 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:18.408753 29693 solver.cpp:219] Iteration 400 (948.736 iter/s, 0.105403s/100 iters), loss = 0.68081
I0428 20:01:18.408793 29693 solver.cpp:238]     Train net output #0: loss = 0.68081 (* 1 = 0.68081 loss)
I0428 20:01:18.408807 29693 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:18.514212 29693 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:18.560480 29701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:18.561017 29693 solver.cpp:398]     Test net output #0: accuracy = 0.6592
I0428 20:01:18.561044 29693 solver.cpp:398]     Test net output #1: loss = 0.850262 (* 1 = 0.850262 loss)
I0428 20:01:18.562072 29693 solver.cpp:219] Iteration 500 (652.455 iter/s, 0.153267s/100 iters), loss = 0.798689
I0428 20:01:18.562122 29693 solver.cpp:238]     Train net output #0: loss = 0.798689 (* 1 = 0.798689 loss)
I0428 20:01:18.562132 29693 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:18.667629 29693 solver.cpp:219] Iteration 600 (947.891 iter/s, 0.105497s/100 iters), loss = 0.914044
I0428 20:01:18.667670 29693 solver.cpp:238]     Train net output #0: loss = 0.914044 (* 1 = 0.914044 loss)
I0428 20:01:18.667680 29693 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:18.771510 29693 solver.cpp:219] Iteration 700 (963.07 iter/s, 0.103835s/100 iters), loss = 0.944034
I0428 20:01:18.771553 29693 solver.cpp:238]     Train net output #0: loss = 0.944034 (* 1 = 0.944034 loss)
I0428 20:01:18.771565 29693 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:18.878715 29693 solver.cpp:219] Iteration 800 (933.258 iter/s, 0.107152s/100 iters), loss = 0.897382
I0428 20:01:18.878762 29693 solver.cpp:238]     Train net output #0: loss = 0.897382 (* 1 = 0.897382 loss)
I0428 20:01:18.878774 29693 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:18.986275 29693 solver.cpp:219] Iteration 900 (930.201 iter/s, 0.107504s/100 iters), loss = 0.988302
I0428 20:01:18.986322 29693 solver.cpp:238]     Train net output #0: loss = 0.988302 (* 1 = 0.988302 loss)
I0428 20:01:18.986335 29693 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:19.021831 29699 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:19.091996 29693 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:19.093273 29693 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:19.094141 29693 solver.cpp:311] Iteration 1000, loss = 0.920713
I0428 20:01:19.094166 29693 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:19.145995 29701 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:19.146493 29693 solver.cpp:398]     Test net output #0: accuracy = 0.6723
I0428 20:01:19.146519 29693 solver.cpp:398]     Test net output #1: loss = 0.799919 (* 1 = 0.799919 loss)
I0428 20:01:19.146529 29693 solver.cpp:316] Optimization Done.
I0428 20:01:19.146534 29693 caffe.cpp:259] Optimization Done.
