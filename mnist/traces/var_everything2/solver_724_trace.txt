I0428 19:55:03.394686 28103 caffe.cpp:218] Using GPUs 0
I0428 19:55:03.431242 28103 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:03.947453 28103 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test724.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:03.947628 28103 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test724.prototxt
I0428 19:55:03.948055 28103 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:03.948084 28103 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:03.948196 28103 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:03.948312 28103 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:03.948443 28103 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:03.948477 28103 net.cpp:86] Creating Layer mnist
I0428 19:55:03.948492 28103 net.cpp:382] mnist -> data
I0428 19:55:03.948521 28103 net.cpp:382] mnist -> label
I0428 19:55:03.949798 28103 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:03.952466 28103 net.cpp:124] Setting up mnist
I0428 19:55:03.952487 28103 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:03.952498 28103 net.cpp:131] Top shape: 64 (64)
I0428 19:55:03.952504 28103 net.cpp:139] Memory required for data: 200960
I0428 19:55:03.952514 28103 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:03.952538 28103 net.cpp:86] Creating Layer conv0
I0428 19:55:03.952563 28103 net.cpp:408] conv0 <- data
I0428 19:55:03.952585 28103 net.cpp:382] conv0 -> conv0
I0428 19:55:04.244318 28103 net.cpp:124] Setting up conv0
I0428 19:55:04.244354 28103 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:04.244360 28103 net.cpp:139] Memory required for data: 938240
I0428 19:55:04.244386 28103 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:04.244406 28103 net.cpp:86] Creating Layer pool0
I0428 19:55:04.244424 28103 net.cpp:408] pool0 <- conv0
I0428 19:55:04.244437 28103 net.cpp:382] pool0 -> pool0
I0428 19:55:04.244505 28103 net.cpp:124] Setting up pool0
I0428 19:55:04.244518 28103 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:04.244524 28103 net.cpp:139] Memory required for data: 1122560
I0428 19:55:04.244530 28103 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:04.244549 28103 net.cpp:86] Creating Layer conv1
I0428 19:55:04.244557 28103 net.cpp:408] conv1 <- pool0
I0428 19:55:04.244568 28103 net.cpp:382] conv1 -> conv1
I0428 19:55:04.247807 28103 net.cpp:124] Setting up conv1
I0428 19:55:04.247826 28103 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:04.247833 28103 net.cpp:139] Memory required for data: 2760960
I0428 19:55:04.247849 28103 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:04.247864 28103 net.cpp:86] Creating Layer pool1
I0428 19:55:04.247870 28103 net.cpp:408] pool1 <- conv1
I0428 19:55:04.247880 28103 net.cpp:382] pool1 -> pool1
I0428 19:55:04.247936 28103 net.cpp:124] Setting up pool1
I0428 19:55:04.247949 28103 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:04.247956 28103 net.cpp:139] Memory required for data: 3170560
I0428 19:55:04.247961 28103 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:04.247975 28103 net.cpp:86] Creating Layer ip1
I0428 19:55:04.247987 28103 net.cpp:408] ip1 <- pool1
I0428 19:55:04.247998 28103 net.cpp:382] ip1 -> ip1
I0428 19:55:04.248399 28103 net.cpp:124] Setting up ip1
I0428 19:55:04.248411 28103 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:04.248419 28103 net.cpp:139] Memory required for data: 3176960
I0428 19:55:04.248432 28103 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:04.248448 28103 net.cpp:86] Creating Layer relu1
I0428 19:55:04.248459 28103 net.cpp:408] relu1 <- ip1
I0428 19:55:04.248468 28103 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:04.248674 28103 net.cpp:124] Setting up relu1
I0428 19:55:04.248687 28103 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:04.248694 28103 net.cpp:139] Memory required for data: 3183360
I0428 19:55:04.248700 28103 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:04.248713 28103 net.cpp:86] Creating Layer ip2
I0428 19:55:04.248719 28103 net.cpp:408] ip2 <- ip1
I0428 19:55:04.248729 28103 net.cpp:382] ip2 -> ip2
I0428 19:55:04.248864 28103 net.cpp:124] Setting up ip2
I0428 19:55:04.248878 28103 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:04.248884 28103 net.cpp:139] Memory required for data: 3185920
I0428 19:55:04.248895 28103 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:04.248908 28103 net.cpp:86] Creating Layer relu2
I0428 19:55:04.248915 28103 net.cpp:408] relu2 <- ip2
I0428 19:55:04.248924 28103 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:04.249788 28103 net.cpp:124] Setting up relu2
I0428 19:55:04.249805 28103 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:04.249811 28103 net.cpp:139] Memory required for data: 3188480
I0428 19:55:04.249819 28103 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:04.249831 28103 net.cpp:86] Creating Layer ip3
I0428 19:55:04.249838 28103 net.cpp:408] ip3 <- ip2
I0428 19:55:04.249850 28103 net.cpp:382] ip3 -> ip3
I0428 19:55:04.249979 28103 net.cpp:124] Setting up ip3
I0428 19:55:04.249992 28103 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:04.249999 28103 net.cpp:139] Memory required for data: 3191040
I0428 19:55:04.250015 28103 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:04.250027 28103 net.cpp:86] Creating Layer relu3
I0428 19:55:04.250036 28103 net.cpp:408] relu3 <- ip3
I0428 19:55:04.250046 28103 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:04.250253 28103 net.cpp:124] Setting up relu3
I0428 19:55:04.250267 28103 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:04.250272 28103 net.cpp:139] Memory required for data: 3193600
I0428 19:55:04.250279 28103 layer_factory.hpp:77] Creating layer loss
I0428 19:55:04.250290 28103 net.cpp:86] Creating Layer loss
I0428 19:55:04.250296 28103 net.cpp:408] loss <- ip3
I0428 19:55:04.250304 28103 net.cpp:408] loss <- label
I0428 19:55:04.250314 28103 net.cpp:382] loss -> loss
I0428 19:55:04.250342 28103 layer_factory.hpp:77] Creating layer loss
I0428 19:55:04.250638 28103 net.cpp:124] Setting up loss
I0428 19:55:04.250653 28103 net.cpp:131] Top shape: (1)
I0428 19:55:04.250660 28103 net.cpp:134]     with loss weight 1
I0428 19:55:04.250684 28103 net.cpp:139] Memory required for data: 3193604
I0428 19:55:04.250691 28103 net.cpp:200] loss needs backward computation.
I0428 19:55:04.250699 28103 net.cpp:200] relu3 needs backward computation.
I0428 19:55:04.250705 28103 net.cpp:200] ip3 needs backward computation.
I0428 19:55:04.250710 28103 net.cpp:200] relu2 needs backward computation.
I0428 19:55:04.250716 28103 net.cpp:200] ip2 needs backward computation.
I0428 19:55:04.250721 28103 net.cpp:200] relu1 needs backward computation.
I0428 19:55:04.250727 28103 net.cpp:200] ip1 needs backward computation.
I0428 19:55:04.250733 28103 net.cpp:200] pool1 needs backward computation.
I0428 19:55:04.250740 28103 net.cpp:200] conv1 needs backward computation.
I0428 19:55:04.250746 28103 net.cpp:200] pool0 needs backward computation.
I0428 19:55:04.250751 28103 net.cpp:200] conv0 needs backward computation.
I0428 19:55:04.250758 28103 net.cpp:202] mnist does not need backward computation.
I0428 19:55:04.250764 28103 net.cpp:244] This network produces output loss
I0428 19:55:04.250780 28103 net.cpp:257] Network initialization done.
I0428 19:55:04.251176 28103 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test724.prototxt
I0428 19:55:04.251219 28103 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:04.251338 28103 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:04.251488 28103 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:04.251560 28103 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:04.251580 28103 net.cpp:86] Creating Layer mnist
I0428 19:55:04.251591 28103 net.cpp:382] mnist -> data
I0428 19:55:04.251605 28103 net.cpp:382] mnist -> label
I0428 19:55:04.251758 28103 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:04.254148 28103 net.cpp:124] Setting up mnist
I0428 19:55:04.254168 28103 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:04.254178 28103 net.cpp:131] Top shape: 100 (100)
I0428 19:55:04.254184 28103 net.cpp:139] Memory required for data: 314000
I0428 19:55:04.254190 28103 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:04.254202 28103 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:04.254209 28103 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:04.254221 28103 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:04.254235 28103 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:04.254362 28103 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:04.254376 28103 net.cpp:131] Top shape: 100 (100)
I0428 19:55:04.254384 28103 net.cpp:131] Top shape: 100 (100)
I0428 19:55:04.254390 28103 net.cpp:139] Memory required for data: 314800
I0428 19:55:04.254396 28103 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:04.254413 28103 net.cpp:86] Creating Layer conv0
I0428 19:55:04.254422 28103 net.cpp:408] conv0 <- data
I0428 19:55:04.254433 28103 net.cpp:382] conv0 -> conv0
I0428 19:55:04.256196 28103 net.cpp:124] Setting up conv0
I0428 19:55:04.256214 28103 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:04.256222 28103 net.cpp:139] Memory required for data: 1466800
I0428 19:55:04.256239 28103 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:04.256252 28103 net.cpp:86] Creating Layer pool0
I0428 19:55:04.256259 28103 net.cpp:408] pool0 <- conv0
I0428 19:55:04.256273 28103 net.cpp:382] pool0 -> pool0
I0428 19:55:04.256326 28103 net.cpp:124] Setting up pool0
I0428 19:55:04.256340 28103 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:04.256345 28103 net.cpp:139] Memory required for data: 1754800
I0428 19:55:04.256351 28103 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:04.256372 28103 net.cpp:86] Creating Layer conv1
I0428 19:55:04.256379 28103 net.cpp:408] conv1 <- pool0
I0428 19:55:04.256392 28103 net.cpp:382] conv1 -> conv1
I0428 19:55:04.258285 28103 net.cpp:124] Setting up conv1
I0428 19:55:04.258304 28103 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:04.258314 28103 net.cpp:139] Memory required for data: 4314800
I0428 19:55:04.258330 28103 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:04.258342 28103 net.cpp:86] Creating Layer pool1
I0428 19:55:04.258349 28103 net.cpp:408] pool1 <- conv1
I0428 19:55:04.258359 28103 net.cpp:382] pool1 -> pool1
I0428 19:55:04.258421 28103 net.cpp:124] Setting up pool1
I0428 19:55:04.258435 28103 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:04.258441 28103 net.cpp:139] Memory required for data: 4954800
I0428 19:55:04.258448 28103 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:04.258460 28103 net.cpp:86] Creating Layer ip1
I0428 19:55:04.258466 28103 net.cpp:408] ip1 <- pool1
I0428 19:55:04.258483 28103 net.cpp:382] ip1 -> ip1
I0428 19:55:04.258905 28103 net.cpp:124] Setting up ip1
I0428 19:55:04.258918 28103 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:04.258939 28103 net.cpp:139] Memory required for data: 4964800
I0428 19:55:04.258955 28103 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:04.258968 28103 net.cpp:86] Creating Layer relu1
I0428 19:55:04.258977 28103 net.cpp:408] relu1 <- ip1
I0428 19:55:04.258986 28103 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:04.259287 28103 net.cpp:124] Setting up relu1
I0428 19:55:04.259300 28103 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:04.259307 28103 net.cpp:139] Memory required for data: 4974800
I0428 19:55:04.259313 28103 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:04.259331 28103 net.cpp:86] Creating Layer ip2
I0428 19:55:04.259342 28103 net.cpp:408] ip2 <- ip1
I0428 19:55:04.259354 28103 net.cpp:382] ip2 -> ip2
I0428 19:55:04.259490 28103 net.cpp:124] Setting up ip2
I0428 19:55:04.259502 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.259508 28103 net.cpp:139] Memory required for data: 4978800
I0428 19:55:04.259519 28103 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:04.259531 28103 net.cpp:86] Creating Layer relu2
I0428 19:55:04.259541 28103 net.cpp:408] relu2 <- ip2
I0428 19:55:04.259552 28103 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:04.259749 28103 net.cpp:124] Setting up relu2
I0428 19:55:04.259763 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.259768 28103 net.cpp:139] Memory required for data: 4982800
I0428 19:55:04.259774 28103 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:04.259788 28103 net.cpp:86] Creating Layer ip3
I0428 19:55:04.259794 28103 net.cpp:408] ip3 <- ip2
I0428 19:55:04.259805 28103 net.cpp:382] ip3 -> ip3
I0428 19:55:04.259937 28103 net.cpp:124] Setting up ip3
I0428 19:55:04.259948 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.259955 28103 net.cpp:139] Memory required for data: 4986800
I0428 19:55:04.259971 28103 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:04.259982 28103 net.cpp:86] Creating Layer relu3
I0428 19:55:04.259995 28103 net.cpp:408] relu3 <- ip3
I0428 19:55:04.260004 28103 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:04.261023 28103 net.cpp:124] Setting up relu3
I0428 19:55:04.261040 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.261046 28103 net.cpp:139] Memory required for data: 4990800
I0428 19:55:04.261054 28103 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:04.261063 28103 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:04.261070 28103 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:04.261085 28103 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:04.261098 28103 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:04.261153 28103 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:04.261167 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.261174 28103 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:04.261180 28103 net.cpp:139] Memory required for data: 4998800
I0428 19:55:04.261186 28103 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:04.261196 28103 net.cpp:86] Creating Layer accuracy
I0428 19:55:04.261203 28103 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:04.261210 28103 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:04.261219 28103 net.cpp:382] accuracy -> accuracy
I0428 19:55:04.261234 28103 net.cpp:124] Setting up accuracy
I0428 19:55:04.261243 28103 net.cpp:131] Top shape: (1)
I0428 19:55:04.261250 28103 net.cpp:139] Memory required for data: 4998804
I0428 19:55:04.261255 28103 layer_factory.hpp:77] Creating layer loss
I0428 19:55:04.261266 28103 net.cpp:86] Creating Layer loss
I0428 19:55:04.261273 28103 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:04.261281 28103 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:04.261289 28103 net.cpp:382] loss -> loss
I0428 19:55:04.261301 28103 layer_factory.hpp:77] Creating layer loss
I0428 19:55:04.261605 28103 net.cpp:124] Setting up loss
I0428 19:55:04.261620 28103 net.cpp:131] Top shape: (1)
I0428 19:55:04.261626 28103 net.cpp:134]     with loss weight 1
I0428 19:55:04.261649 28103 net.cpp:139] Memory required for data: 4998808
I0428 19:55:04.261657 28103 net.cpp:200] loss needs backward computation.
I0428 19:55:04.261665 28103 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:04.261672 28103 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:04.261678 28103 net.cpp:200] relu3 needs backward computation.
I0428 19:55:04.261684 28103 net.cpp:200] ip3 needs backward computation.
I0428 19:55:04.261690 28103 net.cpp:200] relu2 needs backward computation.
I0428 19:55:04.261695 28103 net.cpp:200] ip2 needs backward computation.
I0428 19:55:04.261701 28103 net.cpp:200] relu1 needs backward computation.
I0428 19:55:04.261708 28103 net.cpp:200] ip1 needs backward computation.
I0428 19:55:04.261713 28103 net.cpp:200] pool1 needs backward computation.
I0428 19:55:04.261719 28103 net.cpp:200] conv1 needs backward computation.
I0428 19:55:04.261725 28103 net.cpp:200] pool0 needs backward computation.
I0428 19:55:04.261731 28103 net.cpp:200] conv0 needs backward computation.
I0428 19:55:04.261739 28103 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:04.261749 28103 net.cpp:202] mnist does not need backward computation.
I0428 19:55:04.261754 28103 net.cpp:244] This network produces output accuracy
I0428 19:55:04.261761 28103 net.cpp:244] This network produces output loss
I0428 19:55:04.261782 28103 net.cpp:257] Network initialization done.
I0428 19:55:04.261837 28103 solver.cpp:56] Solver scaffolding done.
I0428 19:55:04.262295 28103 caffe.cpp:248] Starting Optimization
I0428 19:55:04.262303 28103 solver.cpp:273] Solving LeNet
I0428 19:55:04.262308 28103 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:04.262521 28103 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:04.268584 28103 blocking_queue.cpp:49] Waiting for data
I0428 19:55:04.338512 28110 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:04.339093 28103 solver.cpp:398]     Test net output #0: accuracy = 0.1007
I0428 19:55:04.339115 28103 solver.cpp:398]     Test net output #1: loss = 2.31608 (* 1 = 2.31608 loss)
I0428 19:55:04.342963 28103 solver.cpp:219] Iteration 0 (0 iter/s, 0.0806124s/100 iters), loss = 2.33874
I0428 19:55:04.342990 28103 solver.cpp:238]     Train net output #0: loss = 2.33874 (* 1 = 2.33874 loss)
I0428 19:55:04.343022 28103 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:04.492009 28103 solver.cpp:219] Iteration 100 (671.122 iter/s, 0.149004s/100 iters), loss = 0.623217
I0428 19:55:04.492039 28103 solver.cpp:238]     Train net output #0: loss = 0.623217 (* 1 = 0.623217 loss)
I0428 19:55:04.492050 28103 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:04.641355 28103 solver.cpp:219] Iteration 200 (669.773 iter/s, 0.149304s/100 iters), loss = 0.323247
I0428 19:55:04.641387 28103 solver.cpp:238]     Train net output #0: loss = 0.323247 (* 1 = 0.323247 loss)
I0428 19:55:04.641398 28103 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:04.792166 28103 solver.cpp:219] Iteration 300 (663.263 iter/s, 0.15077s/100 iters), loss = 0.55549
I0428 19:55:04.792197 28103 solver.cpp:238]     Train net output #0: loss = 0.55549 (* 1 = 0.55549 loss)
I0428 19:55:04.792208 28103 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:04.941874 28103 solver.cpp:219] Iteration 400 (668.155 iter/s, 0.149666s/100 iters), loss = 0.50894
I0428 19:55:04.941906 28103 solver.cpp:238]     Train net output #0: loss = 0.50894 (* 1 = 0.50894 loss)
I0428 19:55:04.941917 28103 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:05.089166 28103 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:05.142457 28110 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:05.144271 28103 solver.cpp:398]     Test net output #0: accuracy = 0.8672
I0428 19:55:05.144294 28103 solver.cpp:398]     Test net output #1: loss = 0.365458 (* 1 = 0.365458 loss)
I0428 19:55:05.145625 28103 solver.cpp:219] Iteration 500 (490.9 iter/s, 0.203707s/100 iters), loss = 0.441266
I0428 19:55:05.145655 28103 solver.cpp:238]     Train net output #0: loss = 0.441266 (* 1 = 0.441266 loss)
I0428 19:55:05.145685 28103 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:05.292958 28103 solver.cpp:219] Iteration 600 (678.918 iter/s, 0.147293s/100 iters), loss = 0.416486
I0428 19:55:05.292990 28103 solver.cpp:238]     Train net output #0: loss = 0.416486 (* 1 = 0.416486 loss)
I0428 19:55:05.293011 28103 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:05.458987 28103 solver.cpp:219] Iteration 700 (602.467 iter/s, 0.165984s/100 iters), loss = 0.430634
I0428 19:55:05.459028 28103 solver.cpp:238]     Train net output #0: loss = 0.430634 (* 1 = 0.430634 loss)
I0428 19:55:05.459050 28103 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:05.634225 28103 solver.cpp:219] Iteration 800 (570.819 iter/s, 0.175187s/100 iters), loss = 0.506289
I0428 19:55:05.634268 28103 solver.cpp:238]     Train net output #0: loss = 0.506289 (* 1 = 0.506289 loss)
I0428 19:55:05.634292 28103 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:05.809823 28103 solver.cpp:219] Iteration 900 (569.661 iter/s, 0.175543s/100 iters), loss = 0.424334
I0428 19:55:05.809862 28103 solver.cpp:238]     Train net output #0: loss = 0.424334 (* 1 = 0.424334 loss)
I0428 19:55:05.809872 28103 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:05.869076 28109 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:05.986460 28103 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:05.989003 28103 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:05.990267 28103 solver.cpp:311] Iteration 1000, loss = 0.376904
I0428 19:55:05.990290 28103 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:06.049723 28110 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:06.051630 28103 solver.cpp:398]     Test net output #0: accuracy = 0.8806
I0428 19:55:06.051653 28103 solver.cpp:398]     Test net output #1: loss = 0.314824 (* 1 = 0.314824 loss)
I0428 19:55:06.051659 28103 solver.cpp:316] Optimization Done.
I0428 19:55:06.051662 28103 caffe.cpp:259] Optimization Done.
