I0428 20:15:52.236698   536 caffe.cpp:218] Using GPUs 0
I0428 20:15:52.274497   536 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:52.805577   536 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1257.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:52.805724   536 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1257.prototxt
I0428 20:15:52.806112   536 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:52.806135   536 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:52.806234   536 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:52.806313   536 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:52.806407   536 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:52.806432   536 net.cpp:86] Creating Layer mnist
I0428 20:15:52.806439   536 net.cpp:382] mnist -> data
I0428 20:15:52.806460   536 net.cpp:382] mnist -> label
I0428 20:15:52.807543   536 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:52.809998   536 net.cpp:124] Setting up mnist
I0428 20:15:52.810014   536 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:52.810024   536 net.cpp:131] Top shape: 64 (64)
I0428 20:15:52.810029   536 net.cpp:139] Memory required for data: 200960
I0428 20:15:52.810034   536 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:52.810050   536 net.cpp:86] Creating Layer conv0
I0428 20:15:52.810055   536 net.cpp:408] conv0 <- data
I0428 20:15:52.810068   536 net.cpp:382] conv0 -> conv0
I0428 20:15:53.102768   536 net.cpp:124] Setting up conv0
I0428 20:15:53.102800   536 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:53.102805   536 net.cpp:139] Memory required for data: 7573760
I0428 20:15:53.102854   536 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:53.102869   536 net.cpp:86] Creating Layer pool0
I0428 20:15:53.102874   536 net.cpp:408] pool0 <- conv0
I0428 20:15:53.102880   536 net.cpp:382] pool0 -> pool0
I0428 20:15:53.102936   536 net.cpp:124] Setting up pool0
I0428 20:15:53.102946   536 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:53.102949   536 net.cpp:139] Memory required for data: 9416960
I0428 20:15:53.102953   536 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:53.102967   536 net.cpp:86] Creating Layer conv1
I0428 20:15:53.102972   536 net.cpp:408] conv1 <- pool0
I0428 20:15:53.102977   536 net.cpp:382] conv1 -> conv1
I0428 20:15:53.106149   536 net.cpp:124] Setting up conv1
I0428 20:15:53.106168   536 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:53.106171   536 net.cpp:139] Memory required for data: 9498880
I0428 20:15:53.106182   536 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:53.106191   536 net.cpp:86] Creating Layer pool1
I0428 20:15:53.106196   536 net.cpp:408] pool1 <- conv1
I0428 20:15:53.106202   536 net.cpp:382] pool1 -> pool1
I0428 20:15:53.106245   536 net.cpp:124] Setting up pool1
I0428 20:15:53.106252   536 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:53.106256   536 net.cpp:139] Memory required for data: 9519360
I0428 20:15:53.106259   536 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:53.106267   536 net.cpp:86] Creating Layer ip1
I0428 20:15:53.106271   536 net.cpp:408] ip1 <- pool1
I0428 20:15:53.106277   536 net.cpp:382] ip1 -> ip1
I0428 20:15:53.106421   536 net.cpp:124] Setting up ip1
I0428 20:15:53.106431   536 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:53.106434   536 net.cpp:139] Memory required for data: 9532160
I0428 20:15:53.106442   536 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:53.106449   536 net.cpp:86] Creating Layer relu1
I0428 20:15:53.106453   536 net.cpp:408] relu1 <- ip1
I0428 20:15:53.106458   536 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:53.106655   536 net.cpp:124] Setting up relu1
I0428 20:15:53.106667   536 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:53.106670   536 net.cpp:139] Memory required for data: 9544960
I0428 20:15:53.106674   536 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:53.106681   536 net.cpp:86] Creating Layer ip2
I0428 20:15:53.106685   536 net.cpp:408] ip2 <- ip1
I0428 20:15:53.106691   536 net.cpp:382] ip2 -> ip2
I0428 20:15:53.106808   536 net.cpp:124] Setting up ip2
I0428 20:15:53.106817   536 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:53.106820   536 net.cpp:139] Memory required for data: 9547520
I0428 20:15:53.106827   536 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:53.106834   536 net.cpp:86] Creating Layer relu2
I0428 20:15:53.106838   536 net.cpp:408] relu2 <- ip2
I0428 20:15:53.106843   536 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:53.107683   536 net.cpp:124] Setting up relu2
I0428 20:15:53.107697   536 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:53.107702   536 net.cpp:139] Memory required for data: 9550080
I0428 20:15:53.107707   536 layer_factory.hpp:77] Creating layer loss
I0428 20:15:53.107713   536 net.cpp:86] Creating Layer loss
I0428 20:15:53.107717   536 net.cpp:408] loss <- ip2
I0428 20:15:53.107723   536 net.cpp:408] loss <- label
I0428 20:15:53.107729   536 net.cpp:382] loss -> loss
I0428 20:15:53.107751   536 layer_factory.hpp:77] Creating layer loss
I0428 20:15:53.108024   536 net.cpp:124] Setting up loss
I0428 20:15:53.108036   536 net.cpp:131] Top shape: (1)
I0428 20:15:53.108039   536 net.cpp:134]     with loss weight 1
I0428 20:15:53.108057   536 net.cpp:139] Memory required for data: 9550084
I0428 20:15:53.108060   536 net.cpp:200] loss needs backward computation.
I0428 20:15:53.108065   536 net.cpp:200] relu2 needs backward computation.
I0428 20:15:53.108069   536 net.cpp:200] ip2 needs backward computation.
I0428 20:15:53.108072   536 net.cpp:200] relu1 needs backward computation.
I0428 20:15:53.108075   536 net.cpp:200] ip1 needs backward computation.
I0428 20:15:53.108091   536 net.cpp:200] pool1 needs backward computation.
I0428 20:15:53.108095   536 net.cpp:200] conv1 needs backward computation.
I0428 20:15:53.108099   536 net.cpp:200] pool0 needs backward computation.
I0428 20:15:53.108103   536 net.cpp:200] conv0 needs backward computation.
I0428 20:15:53.108108   536 net.cpp:202] mnist does not need backward computation.
I0428 20:15:53.108111   536 net.cpp:244] This network produces output loss
I0428 20:15:53.108121   536 net.cpp:257] Network initialization done.
I0428 20:15:53.108461   536 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1257.prototxt
I0428 20:15:53.108492   536 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:53.108589   536 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:53.108666   536 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:53.108719   536 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:53.108734   536 net.cpp:86] Creating Layer mnist
I0428 20:15:53.108741   536 net.cpp:382] mnist -> data
I0428 20:15:53.108749   536 net.cpp:382] mnist -> label
I0428 20:15:53.108860   536 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:53.111044   536 net.cpp:124] Setting up mnist
I0428 20:15:53.111059   536 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:53.111065   536 net.cpp:131] Top shape: 100 (100)
I0428 20:15:53.111069   536 net.cpp:139] Memory required for data: 314000
I0428 20:15:53.111074   536 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:53.111086   536 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:53.111090   536 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:53.111096   536 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:53.111104   536 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:53.111150   536 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:53.111168   536 net.cpp:131] Top shape: 100 (100)
I0428 20:15:53.111173   536 net.cpp:131] Top shape: 100 (100)
I0428 20:15:53.111176   536 net.cpp:139] Memory required for data: 314800
I0428 20:15:53.111181   536 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:53.111191   536 net.cpp:86] Creating Layer conv0
I0428 20:15:53.111194   536 net.cpp:408] conv0 <- data
I0428 20:15:53.111201   536 net.cpp:382] conv0 -> conv0
I0428 20:15:53.113096   536 net.cpp:124] Setting up conv0
I0428 20:15:53.113113   536 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:53.113118   536 net.cpp:139] Memory required for data: 11834800
I0428 20:15:53.113129   536 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:53.113137   536 net.cpp:86] Creating Layer pool0
I0428 20:15:53.113142   536 net.cpp:408] pool0 <- conv0
I0428 20:15:53.113147   536 net.cpp:382] pool0 -> pool0
I0428 20:15:53.113189   536 net.cpp:124] Setting up pool0
I0428 20:15:53.113196   536 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:53.113199   536 net.cpp:139] Memory required for data: 14714800
I0428 20:15:53.113204   536 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:53.113214   536 net.cpp:86] Creating Layer conv1
I0428 20:15:53.113217   536 net.cpp:408] conv1 <- pool0
I0428 20:15:53.113224   536 net.cpp:382] conv1 -> conv1
I0428 20:15:53.114933   536 net.cpp:124] Setting up conv1
I0428 20:15:53.114949   536 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:53.114954   536 net.cpp:139] Memory required for data: 14842800
I0428 20:15:53.114964   536 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:53.114972   536 net.cpp:86] Creating Layer pool1
I0428 20:15:53.114977   536 net.cpp:408] pool1 <- conv1
I0428 20:15:53.114982   536 net.cpp:382] pool1 -> pool1
I0428 20:15:53.115025   536 net.cpp:124] Setting up pool1
I0428 20:15:53.115031   536 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:53.115036   536 net.cpp:139] Memory required for data: 14874800
I0428 20:15:53.115038   536 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:53.115046   536 net.cpp:86] Creating Layer ip1
I0428 20:15:53.115049   536 net.cpp:408] ip1 <- pool1
I0428 20:15:53.115056   536 net.cpp:382] ip1 -> ip1
I0428 20:15:53.115197   536 net.cpp:124] Setting up ip1
I0428 20:15:53.115207   536 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:53.115211   536 net.cpp:139] Memory required for data: 14894800
I0428 20:15:53.115219   536 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:53.115224   536 net.cpp:86] Creating Layer relu1
I0428 20:15:53.115228   536 net.cpp:408] relu1 <- ip1
I0428 20:15:53.115233   536 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:53.115419   536 net.cpp:124] Setting up relu1
I0428 20:15:53.115429   536 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:53.115433   536 net.cpp:139] Memory required for data: 14914800
I0428 20:15:53.115447   536 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:53.115455   536 net.cpp:86] Creating Layer ip2
I0428 20:15:53.115459   536 net.cpp:408] ip2 <- ip1
I0428 20:15:53.115465   536 net.cpp:382] ip2 -> ip2
I0428 20:15:53.115586   536 net.cpp:124] Setting up ip2
I0428 20:15:53.115593   536 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:53.115598   536 net.cpp:139] Memory required for data: 14918800
I0428 20:15:53.115604   536 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:53.115622   536 net.cpp:86] Creating Layer relu2
I0428 20:15:53.115627   536 net.cpp:408] relu2 <- ip2
I0428 20:15:53.115631   536 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:53.115849   536 net.cpp:124] Setting up relu2
I0428 20:15:53.115859   536 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:53.115864   536 net.cpp:139] Memory required for data: 14922800
I0428 20:15:53.115867   536 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:15:53.115873   536 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:15:53.115876   536 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:15:53.115882   536 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:15:53.115901   536 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:15:53.115963   536 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:15:53.115972   536 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:53.115977   536 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:53.115980   536 net.cpp:139] Memory required for data: 14930800
I0428 20:15:53.115983   536 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:53.115990   536 net.cpp:86] Creating Layer accuracy
I0428 20:15:53.115994   536 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:15:53.115999   536 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:53.116004   536 net.cpp:382] accuracy -> accuracy
I0428 20:15:53.116019   536 net.cpp:124] Setting up accuracy
I0428 20:15:53.116024   536 net.cpp:131] Top shape: (1)
I0428 20:15:53.116027   536 net.cpp:139] Memory required for data: 14930804
I0428 20:15:53.116031   536 layer_factory.hpp:77] Creating layer loss
I0428 20:15:53.116044   536 net.cpp:86] Creating Layer loss
I0428 20:15:53.116046   536 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:15:53.116051   536 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:53.116056   536 net.cpp:382] loss -> loss
I0428 20:15:53.116063   536 layer_factory.hpp:77] Creating layer loss
I0428 20:15:53.116335   536 net.cpp:124] Setting up loss
I0428 20:15:53.116346   536 net.cpp:131] Top shape: (1)
I0428 20:15:53.116350   536 net.cpp:134]     with loss weight 1
I0428 20:15:53.116358   536 net.cpp:139] Memory required for data: 14930808
I0428 20:15:53.116364   536 net.cpp:200] loss needs backward computation.
I0428 20:15:53.116379   536 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:53.116384   536 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:15:53.116399   536 net.cpp:200] relu2 needs backward computation.
I0428 20:15:53.116402   536 net.cpp:200] ip2 needs backward computation.
I0428 20:15:53.116405   536 net.cpp:200] relu1 needs backward computation.
I0428 20:15:53.116410   536 net.cpp:200] ip1 needs backward computation.
I0428 20:15:53.116413   536 net.cpp:200] pool1 needs backward computation.
I0428 20:15:53.116416   536 net.cpp:200] conv1 needs backward computation.
I0428 20:15:53.116426   536 net.cpp:200] pool0 needs backward computation.
I0428 20:15:53.116430   536 net.cpp:200] conv0 needs backward computation.
I0428 20:15:53.116435   536 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:53.116439   536 net.cpp:202] mnist does not need backward computation.
I0428 20:15:53.116442   536 net.cpp:244] This network produces output accuracy
I0428 20:15:53.116452   536 net.cpp:244] This network produces output loss
I0428 20:15:53.116464   536 net.cpp:257] Network initialization done.
I0428 20:15:53.116508   536 solver.cpp:56] Solver scaffolding done.
I0428 20:15:53.116829   536 caffe.cpp:248] Starting Optimization
I0428 20:15:53.116838   536 solver.cpp:273] Solving LeNet
I0428 20:15:53.116843   536 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:53.117710   536 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:53.124403   536 blocking_queue.cpp:49] Waiting for data
I0428 20:15:53.191732   544 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:53.192541   536 solver.cpp:398]     Test net output #0: accuracy = 0.1397
I0428 20:15:53.192562   536 solver.cpp:398]     Test net output #1: loss = 2.29262 (* 1 = 2.29262 loss)
I0428 20:15:53.196760   536 solver.cpp:219] Iteration 0 (-1.01734e-42 iter/s, 0.0798925s/100 iters), loss = 2.25288
I0428 20:15:53.196786   536 solver.cpp:238]     Train net output #0: loss = 2.25288 (* 1 = 2.25288 loss)
I0428 20:15:53.196799   536 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:53.304778   536 solver.cpp:219] Iteration 100 (926.082 iter/s, 0.107982s/100 iters), loss = 0.236167
I0428 20:15:53.304805   536 solver.cpp:238]     Train net output #0: loss = 0.236167 (* 1 = 0.236167 loss)
I0428 20:15:53.304833   536 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:53.412606   536 solver.cpp:219] Iteration 200 (927.71 iter/s, 0.107792s/100 iters), loss = 0.271541
I0428 20:15:53.412631   536 solver.cpp:238]     Train net output #0: loss = 0.271541 (* 1 = 0.271541 loss)
I0428 20:15:53.412652   536 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:53.520362   536 solver.cpp:219] Iteration 300 (928.309 iter/s, 0.107723s/100 iters), loss = 0.312637
I0428 20:15:53.520387   536 solver.cpp:238]     Train net output #0: loss = 0.312637 (* 1 = 0.312637 loss)
I0428 20:15:53.520409   536 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:53.635857   536 solver.cpp:219] Iteration 400 (866.133 iter/s, 0.115456s/100 iters), loss = 0.108811
I0428 20:15:53.635900   536 solver.cpp:238]     Train net output #0: loss = 0.108811 (* 1 = 0.108811 loss)
I0428 20:15:53.635928   536 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:53.750030   536 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:53.813942   544 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:53.816077   536 solver.cpp:398]     Test net output #0: accuracy = 0.9559
I0428 20:15:53.816102   536 solver.cpp:398]     Test net output #1: loss = 0.139466 (* 1 = 0.139466 loss)
I0428 20:15:53.817163   536 solver.cpp:219] Iteration 500 (551.715 iter/s, 0.181253s/100 iters), loss = 0.249662
I0428 20:15:53.817191   536 solver.cpp:238]     Train net output #0: loss = 0.249662 (* 1 = 0.249662 loss)
I0428 20:15:53.817203   536 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:53.934584   536 solver.cpp:219] Iteration 600 (851.925 iter/s, 0.117381s/100 iters), loss = 0.131996
I0428 20:15:53.934618   536 solver.cpp:238]     Train net output #0: loss = 0.131996 (* 1 = 0.131996 loss)
I0428 20:15:53.934628   536 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:54.051395   536 solver.cpp:219] Iteration 700 (856.408 iter/s, 0.116767s/100 iters), loss = 0.225432
I0428 20:15:54.051429   536 solver.cpp:238]     Train net output #0: loss = 0.225432 (* 1 = 0.225432 loss)
I0428 20:15:54.051450   536 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:54.167531   536 solver.cpp:219] Iteration 800 (861.395 iter/s, 0.116091s/100 iters), loss = 0.262799
I0428 20:15:54.167563   536 solver.cpp:238]     Train net output #0: loss = 0.2628 (* 1 = 0.2628 loss)
I0428 20:15:54.167572   536 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:54.282712   536 solver.cpp:219] Iteration 900 (868.518 iter/s, 0.115139s/100 iters), loss = 0.18885
I0428 20:15:54.282743   536 solver.cpp:238]     Train net output #0: loss = 0.18885 (* 1 = 0.18885 loss)
I0428 20:15:54.282763   536 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:54.322696   542 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:54.403630   536 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:54.404664   536 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:54.405477   536 solver.cpp:311] Iteration 1000, loss = 0.0926109
I0428 20:15:54.405498   536 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:54.471504   544 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:54.473791   536 solver.cpp:398]     Test net output #0: accuracy = 0.9731
I0428 20:15:54.473814   536 solver.cpp:398]     Test net output #1: loss = 0.0870804 (* 1 = 0.0870804 loss)
I0428 20:15:54.473834   536 solver.cpp:316] Optimization Done.
I0428 20:15:54.473837   536 caffe.cpp:259] Optimization Done.
