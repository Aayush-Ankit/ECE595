I0428 19:59:08.808960 29169 caffe.cpp:218] Using GPUs 0
I0428 19:59:08.844135 29169 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:59:09.354086 29169 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test839.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:59:09.354228 29169 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test839.prototxt
I0428 19:59:09.354640 29169 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:59:09.354660 29169 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:59:09.354763 29169 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:59:09.354845 29169 layer_factory.hpp:77] Creating layer mnist
I0428 19:59:09.354943 29169 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:59:09.354967 29169 net.cpp:86] Creating Layer mnist
I0428 19:59:09.354976 29169 net.cpp:382] mnist -> data
I0428 19:59:09.354998 29169 net.cpp:382] mnist -> label
I0428 19:59:09.356091 29169 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:59:09.358573 29169 net.cpp:124] Setting up mnist
I0428 19:59:09.358597 29169 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:59:09.358603 29169 net.cpp:131] Top shape: 64 (64)
I0428 19:59:09.358606 29169 net.cpp:139] Memory required for data: 200960
I0428 19:59:09.358613 29169 layer_factory.hpp:77] Creating layer conv0
I0428 19:59:09.358629 29169 net.cpp:86] Creating Layer conv0
I0428 19:59:09.358650 29169 net.cpp:408] conv0 <- data
I0428 19:59:09.358662 29169 net.cpp:382] conv0 -> conv0
I0428 19:59:09.612908 29169 net.cpp:124] Setting up conv0
I0428 19:59:09.612951 29169 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:59:09.612954 29169 net.cpp:139] Memory required for data: 1675520
I0428 19:59:09.612984 29169 layer_factory.hpp:77] Creating layer pool0
I0428 19:59:09.612998 29169 net.cpp:86] Creating Layer pool0
I0428 19:59:09.613001 29169 net.cpp:408] pool0 <- conv0
I0428 19:59:09.613008 29169 net.cpp:382] pool0 -> pool0
I0428 19:59:09.613054 29169 net.cpp:124] Setting up pool0
I0428 19:59:09.613062 29169 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:59:09.613065 29169 net.cpp:139] Memory required for data: 2044160
I0428 19:59:09.613068 29169 layer_factory.hpp:77] Creating layer conv1
I0428 19:59:09.613080 29169 net.cpp:86] Creating Layer conv1
I0428 19:59:09.613085 29169 net.cpp:408] conv1 <- pool0
I0428 19:59:09.613091 29169 net.cpp:382] conv1 -> conv1
I0428 19:59:09.615823 29169 net.cpp:124] Setting up conv1
I0428 19:59:09.615852 29169 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:59:09.615856 29169 net.cpp:139] Memory required for data: 2208000
I0428 19:59:09.615864 29169 layer_factory.hpp:77] Creating layer pool1
I0428 19:59:09.615872 29169 net.cpp:86] Creating Layer pool1
I0428 19:59:09.615876 29169 net.cpp:408] pool1 <- conv1
I0428 19:59:09.615880 29169 net.cpp:382] pool1 -> pool1
I0428 19:59:09.615932 29169 net.cpp:124] Setting up pool1
I0428 19:59:09.615942 29169 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:59:09.615944 29169 net.cpp:139] Memory required for data: 2248960
I0428 19:59:09.615947 29169 layer_factory.hpp:77] Creating layer ip1
I0428 19:59:09.615954 29169 net.cpp:86] Creating Layer ip1
I0428 19:59:09.615957 29169 net.cpp:408] ip1 <- pool1
I0428 19:59:09.615962 29169 net.cpp:382] ip1 -> ip1
I0428 19:59:09.616066 29169 net.cpp:124] Setting up ip1
I0428 19:59:09.616073 29169 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:09.616077 29169 net.cpp:139] Memory required for data: 2251520
I0428 19:59:09.616084 29169 layer_factory.hpp:77] Creating layer relu1
I0428 19:59:09.616089 29169 net.cpp:86] Creating Layer relu1
I0428 19:59:09.616092 29169 net.cpp:408] relu1 <- ip1
I0428 19:59:09.616096 29169 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:59:09.616261 29169 net.cpp:124] Setting up relu1
I0428 19:59:09.616271 29169 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:09.616273 29169 net.cpp:139] Memory required for data: 2254080
I0428 19:59:09.616276 29169 layer_factory.hpp:77] Creating layer ip2
I0428 19:59:09.616282 29169 net.cpp:86] Creating Layer ip2
I0428 19:59:09.616286 29169 net.cpp:408] ip2 <- ip1
I0428 19:59:09.616291 29169 net.cpp:382] ip2 -> ip2
I0428 19:59:09.616385 29169 net.cpp:124] Setting up ip2
I0428 19:59:09.616392 29169 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:59:09.616395 29169 net.cpp:139] Memory required for data: 2266880
I0428 19:59:09.616400 29169 layer_factory.hpp:77] Creating layer relu2
I0428 19:59:09.616405 29169 net.cpp:86] Creating Layer relu2
I0428 19:59:09.616410 29169 net.cpp:408] relu2 <- ip2
I0428 19:59:09.616413 29169 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:59:09.617168 29169 net.cpp:124] Setting up relu2
I0428 19:59:09.617197 29169 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:59:09.617199 29169 net.cpp:139] Memory required for data: 2279680
I0428 19:59:09.617203 29169 layer_factory.hpp:77] Creating layer ip3
I0428 19:59:09.617210 29169 net.cpp:86] Creating Layer ip3
I0428 19:59:09.617213 29169 net.cpp:408] ip3 <- ip2
I0428 19:59:09.617218 29169 net.cpp:382] ip3 -> ip3
I0428 19:59:09.617316 29169 net.cpp:124] Setting up ip3
I0428 19:59:09.617324 29169 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:09.617327 29169 net.cpp:139] Memory required for data: 2282240
I0428 19:59:09.617334 29169 layer_factory.hpp:77] Creating layer relu3
I0428 19:59:09.617339 29169 net.cpp:86] Creating Layer relu3
I0428 19:59:09.617342 29169 net.cpp:408] relu3 <- ip3
I0428 19:59:09.617347 29169 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:59:09.617507 29169 net.cpp:124] Setting up relu3
I0428 19:59:09.617516 29169 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:09.617518 29169 net.cpp:139] Memory required for data: 2284800
I0428 19:59:09.617522 29169 layer_factory.hpp:77] Creating layer loss
I0428 19:59:09.617527 29169 net.cpp:86] Creating Layer loss
I0428 19:59:09.617529 29169 net.cpp:408] loss <- ip3
I0428 19:59:09.617533 29169 net.cpp:408] loss <- label
I0428 19:59:09.617538 29169 net.cpp:382] loss -> loss
I0428 19:59:09.617552 29169 layer_factory.hpp:77] Creating layer loss
I0428 19:59:09.617765 29169 net.cpp:124] Setting up loss
I0428 19:59:09.617774 29169 net.cpp:131] Top shape: (1)
I0428 19:59:09.617776 29169 net.cpp:134]     with loss weight 1
I0428 19:59:09.617792 29169 net.cpp:139] Memory required for data: 2284804
I0428 19:59:09.617795 29169 net.cpp:200] loss needs backward computation.
I0428 19:59:09.617799 29169 net.cpp:200] relu3 needs backward computation.
I0428 19:59:09.617802 29169 net.cpp:200] ip3 needs backward computation.
I0428 19:59:09.617805 29169 net.cpp:200] relu2 needs backward computation.
I0428 19:59:09.617807 29169 net.cpp:200] ip2 needs backward computation.
I0428 19:59:09.617810 29169 net.cpp:200] relu1 needs backward computation.
I0428 19:59:09.617812 29169 net.cpp:200] ip1 needs backward computation.
I0428 19:59:09.617815 29169 net.cpp:200] pool1 needs backward computation.
I0428 19:59:09.617818 29169 net.cpp:200] conv1 needs backward computation.
I0428 19:59:09.617822 29169 net.cpp:200] pool0 needs backward computation.
I0428 19:59:09.617825 29169 net.cpp:200] conv0 needs backward computation.
I0428 19:59:09.617828 29169 net.cpp:202] mnist does not need backward computation.
I0428 19:59:09.617831 29169 net.cpp:244] This network produces output loss
I0428 19:59:09.617839 29169 net.cpp:257] Network initialization done.
I0428 19:59:09.618158 29169 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test839.prototxt
I0428 19:59:09.618199 29169 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:59:09.618285 29169 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:59:09.618357 29169 layer_factory.hpp:77] Creating layer mnist
I0428 19:59:09.618399 29169 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:59:09.618412 29169 net.cpp:86] Creating Layer mnist
I0428 19:59:09.618417 29169 net.cpp:382] mnist -> data
I0428 19:59:09.618423 29169 net.cpp:382] mnist -> label
I0428 19:59:09.618502 29169 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:59:09.620476 29169 net.cpp:124] Setting up mnist
I0428 19:59:09.620504 29169 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:59:09.620509 29169 net.cpp:131] Top shape: 100 (100)
I0428 19:59:09.620513 29169 net.cpp:139] Memory required for data: 314000
I0428 19:59:09.620517 29169 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:59:09.620523 29169 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:59:09.620527 29169 net.cpp:408] label_mnist_1_split <- label
I0428 19:59:09.620530 29169 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:59:09.620537 29169 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:59:09.620571 29169 net.cpp:124] Setting up label_mnist_1_split
I0428 19:59:09.620575 29169 net.cpp:131] Top shape: 100 (100)
I0428 19:59:09.620579 29169 net.cpp:131] Top shape: 100 (100)
I0428 19:59:09.620581 29169 net.cpp:139] Memory required for data: 314800
I0428 19:59:09.620584 29169 layer_factory.hpp:77] Creating layer conv0
I0428 19:59:09.620592 29169 net.cpp:86] Creating Layer conv0
I0428 19:59:09.620595 29169 net.cpp:408] conv0 <- data
I0428 19:59:09.620600 29169 net.cpp:382] conv0 -> conv0
I0428 19:59:09.622210 29169 net.cpp:124] Setting up conv0
I0428 19:59:09.622225 29169 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:59:09.622227 29169 net.cpp:139] Memory required for data: 2618800
I0428 19:59:09.622236 29169 layer_factory.hpp:77] Creating layer pool0
I0428 19:59:09.622242 29169 net.cpp:86] Creating Layer pool0
I0428 19:59:09.622246 29169 net.cpp:408] pool0 <- conv0
I0428 19:59:09.622251 29169 net.cpp:382] pool0 -> pool0
I0428 19:59:09.622287 29169 net.cpp:124] Setting up pool0
I0428 19:59:09.622294 29169 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:59:09.622298 29169 net.cpp:139] Memory required for data: 3194800
I0428 19:59:09.622299 29169 layer_factory.hpp:77] Creating layer conv1
I0428 19:59:09.622309 29169 net.cpp:86] Creating Layer conv1
I0428 19:59:09.622328 29169 net.cpp:408] conv1 <- pool0
I0428 19:59:09.622333 29169 net.cpp:382] conv1 -> conv1
I0428 19:59:09.624290 29169 net.cpp:124] Setting up conv1
I0428 19:59:09.624305 29169 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:59:09.624308 29169 net.cpp:139] Memory required for data: 3450800
I0428 19:59:09.624317 29169 layer_factory.hpp:77] Creating layer pool1
I0428 19:59:09.624325 29169 net.cpp:86] Creating Layer pool1
I0428 19:59:09.624330 29169 net.cpp:408] pool1 <- conv1
I0428 19:59:09.624335 29169 net.cpp:382] pool1 -> pool1
I0428 19:59:09.624380 29169 net.cpp:124] Setting up pool1
I0428 19:59:09.624387 29169 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:59:09.624390 29169 net.cpp:139] Memory required for data: 3514800
I0428 19:59:09.624393 29169 layer_factory.hpp:77] Creating layer ip1
I0428 19:59:09.624399 29169 net.cpp:86] Creating Layer ip1
I0428 19:59:09.624402 29169 net.cpp:408] ip1 <- pool1
I0428 19:59:09.624413 29169 net.cpp:382] ip1 -> ip1
I0428 19:59:09.624579 29169 net.cpp:124] Setting up ip1
I0428 19:59:09.624588 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.624603 29169 net.cpp:139] Memory required for data: 3518800
I0428 19:59:09.624610 29169 layer_factory.hpp:77] Creating layer relu1
I0428 19:59:09.624615 29169 net.cpp:86] Creating Layer relu1
I0428 19:59:09.624619 29169 net.cpp:408] relu1 <- ip1
I0428 19:59:09.624634 29169 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:59:09.624832 29169 net.cpp:124] Setting up relu1
I0428 19:59:09.624842 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.624846 29169 net.cpp:139] Memory required for data: 3522800
I0428 19:59:09.624850 29169 layer_factory.hpp:77] Creating layer ip2
I0428 19:59:09.624856 29169 net.cpp:86] Creating Layer ip2
I0428 19:59:09.624861 29169 net.cpp:408] ip2 <- ip1
I0428 19:59:09.624866 29169 net.cpp:382] ip2 -> ip2
I0428 19:59:09.624990 29169 net.cpp:124] Setting up ip2
I0428 19:59:09.624999 29169 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:59:09.625001 29169 net.cpp:139] Memory required for data: 3542800
I0428 19:59:09.625007 29169 layer_factory.hpp:77] Creating layer relu2
I0428 19:59:09.625020 29169 net.cpp:86] Creating Layer relu2
I0428 19:59:09.625023 29169 net.cpp:408] relu2 <- ip2
I0428 19:59:09.625027 29169 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:59:09.625231 29169 net.cpp:124] Setting up relu2
I0428 19:59:09.625239 29169 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:59:09.625242 29169 net.cpp:139] Memory required for data: 3562800
I0428 19:59:09.625246 29169 layer_factory.hpp:77] Creating layer ip3
I0428 19:59:09.625252 29169 net.cpp:86] Creating Layer ip3
I0428 19:59:09.625255 29169 net.cpp:408] ip3 <- ip2
I0428 19:59:09.625259 29169 net.cpp:382] ip3 -> ip3
I0428 19:59:09.625381 29169 net.cpp:124] Setting up ip3
I0428 19:59:09.625391 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.625393 29169 net.cpp:139] Memory required for data: 3566800
I0428 19:59:09.625401 29169 layer_factory.hpp:77] Creating layer relu3
I0428 19:59:09.625407 29169 net.cpp:86] Creating Layer relu3
I0428 19:59:09.625411 29169 net.cpp:408] relu3 <- ip3
I0428 19:59:09.625414 29169 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:59:09.626251 29169 net.cpp:124] Setting up relu3
I0428 19:59:09.626263 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.626266 29169 net.cpp:139] Memory required for data: 3570800
I0428 19:59:09.626271 29169 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:59:09.626276 29169 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:59:09.626279 29169 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:59:09.626284 29169 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:59:09.626291 29169 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:59:09.626330 29169 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:59:09.626338 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.626341 29169 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:09.626344 29169 net.cpp:139] Memory required for data: 3578800
I0428 19:59:09.626348 29169 layer_factory.hpp:77] Creating layer accuracy
I0428 19:59:09.626353 29169 net.cpp:86] Creating Layer accuracy
I0428 19:59:09.626356 29169 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:59:09.626370 29169 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:59:09.626375 29169 net.cpp:382] accuracy -> accuracy
I0428 19:59:09.626382 29169 net.cpp:124] Setting up accuracy
I0428 19:59:09.626386 29169 net.cpp:131] Top shape: (1)
I0428 19:59:09.626389 29169 net.cpp:139] Memory required for data: 3578804
I0428 19:59:09.626392 29169 layer_factory.hpp:77] Creating layer loss
I0428 19:59:09.626397 29169 net.cpp:86] Creating Layer loss
I0428 19:59:09.626401 29169 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:59:09.626405 29169 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:59:09.626408 29169 net.cpp:382] loss -> loss
I0428 19:59:09.626415 29169 layer_factory.hpp:77] Creating layer loss
I0428 19:59:09.626662 29169 net.cpp:124] Setting up loss
I0428 19:59:09.626672 29169 net.cpp:131] Top shape: (1)
I0428 19:59:09.626675 29169 net.cpp:134]     with loss weight 1
I0428 19:59:09.626691 29169 net.cpp:139] Memory required for data: 3578808
I0428 19:59:09.626695 29169 net.cpp:200] loss needs backward computation.
I0428 19:59:09.626699 29169 net.cpp:202] accuracy does not need backward computation.
I0428 19:59:09.626703 29169 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:59:09.626705 29169 net.cpp:200] relu3 needs backward computation.
I0428 19:59:09.626708 29169 net.cpp:200] ip3 needs backward computation.
I0428 19:59:09.626711 29169 net.cpp:200] relu2 needs backward computation.
I0428 19:59:09.626714 29169 net.cpp:200] ip2 needs backward computation.
I0428 19:59:09.626718 29169 net.cpp:200] relu1 needs backward computation.
I0428 19:59:09.626719 29169 net.cpp:200] ip1 needs backward computation.
I0428 19:59:09.626723 29169 net.cpp:200] pool1 needs backward computation.
I0428 19:59:09.626734 29169 net.cpp:200] conv1 needs backward computation.
I0428 19:59:09.626736 29169 net.cpp:200] pool0 needs backward computation.
I0428 19:59:09.626739 29169 net.cpp:200] conv0 needs backward computation.
I0428 19:59:09.626744 29169 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:59:09.626747 29169 net.cpp:202] mnist does not need backward computation.
I0428 19:59:09.626751 29169 net.cpp:244] This network produces output accuracy
I0428 19:59:09.626754 29169 net.cpp:244] This network produces output loss
I0428 19:59:09.626765 29169 net.cpp:257] Network initialization done.
I0428 19:59:09.626806 29169 solver.cpp:56] Solver scaffolding done.
I0428 19:59:09.627182 29169 caffe.cpp:248] Starting Optimization
I0428 19:59:09.627187 29169 solver.cpp:273] Solving LeNet
I0428 19:59:09.627190 29169 solver.cpp:274] Learning Rate Policy: inv
I0428 19:59:09.627980 29169 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:59:09.632419 29169 blocking_queue.cpp:49] Waiting for data
I0428 19:59:09.683025 29176 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:09.683550 29169 solver.cpp:398]     Test net output #0: accuracy = 0.0987
I0428 19:59:09.683570 29169 solver.cpp:398]     Test net output #1: loss = 2.33004 (* 1 = 2.33004 loss)
I0428 19:59:09.686101 29169 solver.cpp:219] Iteration 0 (-2.25341e-31 iter/s, 0.0588822s/100 iters), loss = 2.32565
I0428 19:59:09.686125 29169 solver.cpp:238]     Train net output #0: loss = 2.32565 (* 1 = 2.32565 loss)
I0428 19:59:09.686136 29169 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:59:09.763839 29169 solver.cpp:219] Iteration 100 (1286.97 iter/s, 0.0777021s/100 iters), loss = 1.42572
I0428 19:59:09.763864 29169 solver.cpp:238]     Train net output #0: loss = 1.42572 (* 1 = 1.42572 loss)
I0428 19:59:09.763885 29169 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:59:09.841634 29169 solver.cpp:219] Iteration 200 (1286 iter/s, 0.0777605s/100 iters), loss = 1.31693
I0428 19:59:09.841656 29169 solver.cpp:238]     Train net output #0: loss = 1.31693 (* 1 = 1.31693 loss)
I0428 19:59:09.841662 29169 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:59:09.919920 29169 solver.cpp:219] Iteration 300 (1277.89 iter/s, 0.0782543s/100 iters), loss = 1.22921
I0428 19:59:09.919944 29169 solver.cpp:238]     Train net output #0: loss = 1.22921 (* 1 = 1.22921 loss)
I0428 19:59:09.919950 29169 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:59:09.998157 29169 solver.cpp:219] Iteration 400 (1278.69 iter/s, 0.0782049s/100 iters), loss = 1.35015
I0428 19:59:09.998180 29169 solver.cpp:238]     Train net output #0: loss = 1.35015 (* 1 = 1.35015 loss)
I0428 19:59:09.998186 29169 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:59:10.073745 29169 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:59:10.119895 29176 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:10.120437 29169 solver.cpp:398]     Test net output #0: accuracy = 0.5716
I0428 19:59:10.120455 29169 solver.cpp:398]     Test net output #1: loss = 1.23707 (* 1 = 1.23707 loss)
I0428 19:59:10.121295 29169 solver.cpp:219] Iteration 500 (812.333 iter/s, 0.123102s/100 iters), loss = 1.18402
I0428 19:59:10.121351 29169 solver.cpp:238]     Train net output #0: loss = 1.18402 (* 1 = 1.18402 loss)
I0428 19:59:10.121378 29169 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:59:10.210360 29169 solver.cpp:219] Iteration 600 (1123.41 iter/s, 0.0890146s/100 iters), loss = 1.27445
I0428 19:59:10.210384 29169 solver.cpp:238]     Train net output #0: loss = 1.27445 (* 1 = 1.27445 loss)
I0428 19:59:10.210391 29169 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:59:10.304087 29169 solver.cpp:219] Iteration 700 (1067.3 iter/s, 0.093694s/100 iters), loss = 1.44926
I0428 19:59:10.304111 29169 solver.cpp:238]     Train net output #0: loss = 1.44926 (* 1 = 1.44926 loss)
I0428 19:59:10.304121 29169 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:59:10.386472 29169 solver.cpp:219] Iteration 800 (1214.51 iter/s, 0.0823377s/100 iters), loss = 1.36875
I0428 19:59:10.386498 29169 solver.cpp:238]     Train net output #0: loss = 1.36875 (* 1 = 1.36875 loss)
I0428 19:59:10.386504 29169 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:59:10.466506 29169 solver.cpp:219] Iteration 900 (1250.03 iter/s, 0.079998s/100 iters), loss = 1.45069
I0428 19:59:10.466531 29169 solver.cpp:238]     Train net output #0: loss = 1.45069 (* 1 = 1.45069 loss)
I0428 19:59:10.466536 29169 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:59:10.492470 29175 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:10.543409 29169 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:59:10.544211 29169 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:59:10.544744 29169 solver.cpp:311] Iteration 1000, loss = 1.37036
I0428 19:59:10.544760 29169 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:59:10.619477 29176 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:10.620014 29169 solver.cpp:398]     Test net output #0: accuracy = 0.5888
I0428 19:59:10.620034 29169 solver.cpp:398]     Test net output #1: loss = 1.19814 (* 1 = 1.19814 loss)
I0428 19:59:10.620045 29169 solver.cpp:316] Optimization Done.
I0428 19:59:10.620049 29169 caffe.cpp:259] Optimization Done.
