I0428 20:02:15.408754 29905 caffe.cpp:218] Using GPUs 0
I0428 20:02:15.445693 29905 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:15.907258 29905 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test924.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:15.907377 29905 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test924.prototxt
I0428 20:02:15.907707 29905 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:15.907723 29905 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:15.907804 29905 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:15.907868 29905 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:15.907948 29905 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:15.907968 29905 net.cpp:86] Creating Layer mnist
I0428 20:02:15.907974 29905 net.cpp:382] mnist -> data
I0428 20:02:15.907994 29905 net.cpp:382] mnist -> label
I0428 20:02:15.909008 29905 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:15.911273 29905 net.cpp:124] Setting up mnist
I0428 20:02:15.911288 29905 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:15.911295 29905 net.cpp:131] Top shape: 64 (64)
I0428 20:02:15.911298 29905 net.cpp:139] Memory required for data: 200960
I0428 20:02:15.911304 29905 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:15.911334 29905 net.cpp:86] Creating Layer conv0
I0428 20:02:15.911351 29905 net.cpp:408] conv0 <- data
I0428 20:02:15.911365 29905 net.cpp:382] conv0 -> conv0
I0428 20:02:16.146469 29905 net.cpp:124] Setting up conv0
I0428 20:02:16.146512 29905 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:16.146517 29905 net.cpp:139] Memory required for data: 1675520
I0428 20:02:16.146548 29905 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:16.146560 29905 net.cpp:86] Creating Layer pool0
I0428 20:02:16.146565 29905 net.cpp:408] pool0 <- conv0
I0428 20:02:16.146570 29905 net.cpp:382] pool0 -> pool0
I0428 20:02:16.146647 29905 net.cpp:124] Setting up pool0
I0428 20:02:16.146653 29905 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:16.146656 29905 net.cpp:139] Memory required for data: 2044160
I0428 20:02:16.146661 29905 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:16.146670 29905 net.cpp:86] Creating Layer conv1
I0428 20:02:16.146673 29905 net.cpp:408] conv1 <- pool0
I0428 20:02:16.146678 29905 net.cpp:382] conv1 -> conv1
I0428 20:02:16.149574 29905 net.cpp:124] Setting up conv1
I0428 20:02:16.149605 29905 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:16.149608 29905 net.cpp:139] Memory required for data: 2863360
I0428 20:02:16.149617 29905 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:16.149626 29905 net.cpp:86] Creating Layer pool1
I0428 20:02:16.149629 29905 net.cpp:408] pool1 <- conv1
I0428 20:02:16.149634 29905 net.cpp:382] pool1 -> pool1
I0428 20:02:16.149704 29905 net.cpp:124] Setting up pool1
I0428 20:02:16.149710 29905 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:16.149713 29905 net.cpp:139] Memory required for data: 3068160
I0428 20:02:16.149716 29905 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:16.149724 29905 net.cpp:86] Creating Layer ip1
I0428 20:02:16.149726 29905 net.cpp:408] ip1 <- pool1
I0428 20:02:16.149731 29905 net.cpp:382] ip1 -> ip1
I0428 20:02:16.149950 29905 net.cpp:124] Setting up ip1
I0428 20:02:16.149958 29905 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:16.149961 29905 net.cpp:139] Memory required for data: 3074560
I0428 20:02:16.149968 29905 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:16.149974 29905 net.cpp:86] Creating Layer relu1
I0428 20:02:16.149977 29905 net.cpp:408] relu1 <- ip1
I0428 20:02:16.149981 29905 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:16.150146 29905 net.cpp:124] Setting up relu1
I0428 20:02:16.150154 29905 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:16.150157 29905 net.cpp:139] Memory required for data: 3080960
I0428 20:02:16.150161 29905 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:16.150166 29905 net.cpp:86] Creating Layer ip2
I0428 20:02:16.150171 29905 net.cpp:408] ip2 <- ip1
I0428 20:02:16.150174 29905 net.cpp:382] ip2 -> ip2
I0428 20:02:16.151195 29905 net.cpp:124] Setting up ip2
I0428 20:02:16.151206 29905 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:16.151226 29905 net.cpp:139] Memory required for data: 3093760
I0428 20:02:16.151232 29905 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:16.151239 29905 net.cpp:86] Creating Layer relu2
I0428 20:02:16.151243 29905 net.cpp:408] relu2 <- ip2
I0428 20:02:16.151247 29905 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:16.152093 29905 net.cpp:124] Setting up relu2
I0428 20:02:16.152107 29905 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:16.152125 29905 net.cpp:139] Memory required for data: 3106560
I0428 20:02:16.152129 29905 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:16.152137 29905 net.cpp:86] Creating Layer ip3
I0428 20:02:16.152140 29905 net.cpp:408] ip3 <- ip2
I0428 20:02:16.152146 29905 net.cpp:382] ip3 -> ip3
I0428 20:02:16.152257 29905 net.cpp:124] Setting up ip3
I0428 20:02:16.152266 29905 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:16.152268 29905 net.cpp:139] Memory required for data: 3109120
I0428 20:02:16.152276 29905 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:16.152282 29905 net.cpp:86] Creating Layer relu3
I0428 20:02:16.152285 29905 net.cpp:408] relu3 <- ip3
I0428 20:02:16.152289 29905 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:16.152480 29905 net.cpp:124] Setting up relu3
I0428 20:02:16.152489 29905 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:16.152493 29905 net.cpp:139] Memory required for data: 3111680
I0428 20:02:16.152496 29905 layer_factory.hpp:77] Creating layer loss
I0428 20:02:16.152501 29905 net.cpp:86] Creating Layer loss
I0428 20:02:16.152520 29905 net.cpp:408] loss <- ip3
I0428 20:02:16.152525 29905 net.cpp:408] loss <- label
I0428 20:02:16.152530 29905 net.cpp:382] loss -> loss
I0428 20:02:16.152545 29905 layer_factory.hpp:77] Creating layer loss
I0428 20:02:16.152794 29905 net.cpp:124] Setting up loss
I0428 20:02:16.152803 29905 net.cpp:131] Top shape: (1)
I0428 20:02:16.152807 29905 net.cpp:134]     with loss weight 1
I0428 20:02:16.152844 29905 net.cpp:139] Memory required for data: 3111684
I0428 20:02:16.152848 29905 net.cpp:200] loss needs backward computation.
I0428 20:02:16.152853 29905 net.cpp:200] relu3 needs backward computation.
I0428 20:02:16.152855 29905 net.cpp:200] ip3 needs backward computation.
I0428 20:02:16.152858 29905 net.cpp:200] relu2 needs backward computation.
I0428 20:02:16.152861 29905 net.cpp:200] ip2 needs backward computation.
I0428 20:02:16.152864 29905 net.cpp:200] relu1 needs backward computation.
I0428 20:02:16.152868 29905 net.cpp:200] ip1 needs backward computation.
I0428 20:02:16.152870 29905 net.cpp:200] pool1 needs backward computation.
I0428 20:02:16.152873 29905 net.cpp:200] conv1 needs backward computation.
I0428 20:02:16.152878 29905 net.cpp:200] pool0 needs backward computation.
I0428 20:02:16.152880 29905 net.cpp:200] conv0 needs backward computation.
I0428 20:02:16.152884 29905 net.cpp:202] mnist does not need backward computation.
I0428 20:02:16.152886 29905 net.cpp:244] This network produces output loss
I0428 20:02:16.152897 29905 net.cpp:257] Network initialization done.
I0428 20:02:16.153290 29905 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test924.prototxt
I0428 20:02:16.153332 29905 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:16.153460 29905 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:16.153545 29905 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:16.153591 29905 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:16.153604 29905 net.cpp:86] Creating Layer mnist
I0428 20:02:16.153609 29905 net.cpp:382] mnist -> data
I0428 20:02:16.153615 29905 net.cpp:382] mnist -> label
I0428 20:02:16.153704 29905 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:16.155833 29905 net.cpp:124] Setting up mnist
I0428 20:02:16.155879 29905 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:16.155884 29905 net.cpp:131] Top shape: 100 (100)
I0428 20:02:16.155887 29905 net.cpp:139] Memory required for data: 314000
I0428 20:02:16.155890 29905 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:16.155897 29905 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:16.155900 29905 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:16.155905 29905 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:16.155912 29905 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:16.155966 29905 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:16.155972 29905 net.cpp:131] Top shape: 100 (100)
I0428 20:02:16.155975 29905 net.cpp:131] Top shape: 100 (100)
I0428 20:02:16.155978 29905 net.cpp:139] Memory required for data: 314800
I0428 20:02:16.155982 29905 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:16.155990 29905 net.cpp:86] Creating Layer conv0
I0428 20:02:16.155995 29905 net.cpp:408] conv0 <- data
I0428 20:02:16.156000 29905 net.cpp:382] conv0 -> conv0
I0428 20:02:16.157877 29905 net.cpp:124] Setting up conv0
I0428 20:02:16.157891 29905 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:16.157896 29905 net.cpp:139] Memory required for data: 2618800
I0428 20:02:16.157904 29905 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:16.157928 29905 net.cpp:86] Creating Layer pool0
I0428 20:02:16.157932 29905 net.cpp:408] pool0 <- conv0
I0428 20:02:16.157938 29905 net.cpp:382] pool0 -> pool0
I0428 20:02:16.157977 29905 net.cpp:124] Setting up pool0
I0428 20:02:16.157982 29905 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:16.157985 29905 net.cpp:139] Memory required for data: 3194800
I0428 20:02:16.157989 29905 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:16.157999 29905 net.cpp:86] Creating Layer conv1
I0428 20:02:16.158001 29905 net.cpp:408] conv1 <- pool0
I0428 20:02:16.158008 29905 net.cpp:382] conv1 -> conv1
I0428 20:02:16.159865 29905 net.cpp:124] Setting up conv1
I0428 20:02:16.159879 29905 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:16.159894 29905 net.cpp:139] Memory required for data: 4474800
I0428 20:02:16.159904 29905 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:16.159911 29905 net.cpp:86] Creating Layer pool1
I0428 20:02:16.159914 29905 net.cpp:408] pool1 <- conv1
I0428 20:02:16.159921 29905 net.cpp:382] pool1 -> pool1
I0428 20:02:16.159960 29905 net.cpp:124] Setting up pool1
I0428 20:02:16.159966 29905 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:16.159970 29905 net.cpp:139] Memory required for data: 4794800
I0428 20:02:16.159972 29905 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:16.159979 29905 net.cpp:86] Creating Layer ip1
I0428 20:02:16.159983 29905 net.cpp:408] ip1 <- pool1
I0428 20:02:16.159989 29905 net.cpp:382] ip1 -> ip1
I0428 20:02:16.160238 29905 net.cpp:124] Setting up ip1
I0428 20:02:16.160245 29905 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:16.160259 29905 net.cpp:139] Memory required for data: 4804800
I0428 20:02:16.160266 29905 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:16.160272 29905 net.cpp:86] Creating Layer relu1
I0428 20:02:16.160275 29905 net.cpp:408] relu1 <- ip1
I0428 20:02:16.160280 29905 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:16.160467 29905 net.cpp:124] Setting up relu1
I0428 20:02:16.160476 29905 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:16.160480 29905 net.cpp:139] Memory required for data: 4814800
I0428 20:02:16.160483 29905 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:16.160490 29905 net.cpp:86] Creating Layer ip2
I0428 20:02:16.160501 29905 net.cpp:408] ip2 <- ip1
I0428 20:02:16.160507 29905 net.cpp:382] ip2 -> ip2
I0428 20:02:16.160650 29905 net.cpp:124] Setting up ip2
I0428 20:02:16.160658 29905 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:16.160661 29905 net.cpp:139] Memory required for data: 4834800
I0428 20:02:16.160666 29905 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:16.160671 29905 net.cpp:86] Creating Layer relu2
I0428 20:02:16.160675 29905 net.cpp:408] relu2 <- ip2
I0428 20:02:16.160681 29905 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:16.160869 29905 net.cpp:124] Setting up relu2
I0428 20:02:16.160878 29905 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:16.160882 29905 net.cpp:139] Memory required for data: 4854800
I0428 20:02:16.160887 29905 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:16.160893 29905 net.cpp:86] Creating Layer ip3
I0428 20:02:16.160897 29905 net.cpp:408] ip3 <- ip2
I0428 20:02:16.160902 29905 net.cpp:382] ip3 -> ip3
I0428 20:02:16.161037 29905 net.cpp:124] Setting up ip3
I0428 20:02:16.161044 29905 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:16.161047 29905 net.cpp:139] Memory required for data: 4858800
I0428 20:02:16.161056 29905 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:16.161062 29905 net.cpp:86] Creating Layer relu3
I0428 20:02:16.161064 29905 net.cpp:408] relu3 <- ip3
I0428 20:02:16.161068 29905 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:16.161973 29905 net.cpp:124] Setting up relu3
I0428 20:02:16.161985 29905 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:16.161990 29905 net.cpp:139] Memory required for data: 4862800
I0428 20:02:16.161994 29905 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:16.161999 29905 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:16.162003 29905 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:16.162008 29905 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:16.162014 29905 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:16.162055 29905 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:16.162068 29905 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:16.162072 29905 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:16.162075 29905 net.cpp:139] Memory required for data: 4870800
I0428 20:02:16.162078 29905 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:16.162088 29905 net.cpp:86] Creating Layer accuracy
I0428 20:02:16.162091 29905 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:16.162096 29905 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:16.162101 29905 net.cpp:382] accuracy -> accuracy
I0428 20:02:16.162107 29905 net.cpp:124] Setting up accuracy
I0428 20:02:16.162111 29905 net.cpp:131] Top shape: (1)
I0428 20:02:16.162120 29905 net.cpp:139] Memory required for data: 4870804
I0428 20:02:16.162122 29905 layer_factory.hpp:77] Creating layer loss
I0428 20:02:16.162127 29905 net.cpp:86] Creating Layer loss
I0428 20:02:16.162130 29905 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:16.162134 29905 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:16.162145 29905 net.cpp:382] loss -> loss
I0428 20:02:16.162151 29905 layer_factory.hpp:77] Creating layer loss
I0428 20:02:16.162426 29905 net.cpp:124] Setting up loss
I0428 20:02:16.162436 29905 net.cpp:131] Top shape: (1)
I0428 20:02:16.162439 29905 net.cpp:134]     with loss weight 1
I0428 20:02:16.162456 29905 net.cpp:139] Memory required for data: 4870808
I0428 20:02:16.162461 29905 net.cpp:200] loss needs backward computation.
I0428 20:02:16.162466 29905 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:16.162470 29905 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:16.162473 29905 net.cpp:200] relu3 needs backward computation.
I0428 20:02:16.162477 29905 net.cpp:200] ip3 needs backward computation.
I0428 20:02:16.162479 29905 net.cpp:200] relu2 needs backward computation.
I0428 20:02:16.162482 29905 net.cpp:200] ip2 needs backward computation.
I0428 20:02:16.162487 29905 net.cpp:200] relu1 needs backward computation.
I0428 20:02:16.162489 29905 net.cpp:200] ip1 needs backward computation.
I0428 20:02:16.162499 29905 net.cpp:200] pool1 needs backward computation.
I0428 20:02:16.162503 29905 net.cpp:200] conv1 needs backward computation.
I0428 20:02:16.162513 29905 net.cpp:200] pool0 needs backward computation.
I0428 20:02:16.162515 29905 net.cpp:200] conv0 needs backward computation.
I0428 20:02:16.162519 29905 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:16.162523 29905 net.cpp:202] mnist does not need backward computation.
I0428 20:02:16.162526 29905 net.cpp:244] This network produces output accuracy
I0428 20:02:16.162530 29905 net.cpp:244] This network produces output loss
I0428 20:02:16.162559 29905 net.cpp:257] Network initialization done.
I0428 20:02:16.162618 29905 solver.cpp:56] Solver scaffolding done.
I0428 20:02:16.162956 29905 caffe.cpp:248] Starting Optimization
I0428 20:02:16.162962 29905 solver.cpp:273] Solving LeNet
I0428 20:02:16.162966 29905 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:16.163837 29905 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:16.168401 29905 blocking_queue.cpp:49] Waiting for data
I0428 20:02:16.239547 29912 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:16.240064 29905 solver.cpp:398]     Test net output #0: accuracy = 0.1389
I0428 20:02:16.240085 29905 solver.cpp:398]     Test net output #1: loss = 2.29017 (* 1 = 2.29017 loss)
I0428 20:02:16.243229 29905 solver.cpp:219] Iteration 0 (0 iter/s, 0.0802365s/100 iters), loss = 2.29612
I0428 20:02:16.243252 29905 solver.cpp:238]     Train net output #0: loss = 2.29612 (* 1 = 2.29612 loss)
I0428 20:02:16.243279 29905 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:16.348428 29905 solver.cpp:219] Iteration 100 (950.916 iter/s, 0.105162s/100 iters), loss = 1.17804
I0428 20:02:16.348450 29905 solver.cpp:238]     Train net output #0: loss = 1.17804 (* 1 = 1.17804 loss)
I0428 20:02:16.348456 29905 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:16.454236 29905 solver.cpp:219] Iteration 200 (945.419 iter/s, 0.105773s/100 iters), loss = 1.26353
I0428 20:02:16.454260 29905 solver.cpp:238]     Train net output #0: loss = 1.26353 (* 1 = 1.26353 loss)
I0428 20:02:16.454267 29905 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:16.559105 29905 solver.cpp:219] Iteration 300 (953.889 iter/s, 0.104834s/100 iters), loss = 0.878482
I0428 20:02:16.559145 29905 solver.cpp:238]     Train net output #0: loss = 0.878482 (* 1 = 0.878482 loss)
I0428 20:02:16.559151 29905 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:16.665180 29905 solver.cpp:219] Iteration 400 (943.037 iter/s, 0.10604s/100 iters), loss = 1.13662
I0428 20:02:16.665204 29905 solver.cpp:238]     Train net output #0: loss = 1.13662 (* 1 = 1.13662 loss)
I0428 20:02:16.665210 29905 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:16.769384 29905 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:16.822326 29912 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:16.822836 29905 solver.cpp:398]     Test net output #0: accuracy = 0.5875
I0428 20:02:16.822855 29905 solver.cpp:398]     Test net output #1: loss = 1.02441 (* 1 = 1.02441 loss)
I0428 20:02:16.823962 29905 solver.cpp:219] Iteration 500 (629.947 iter/s, 0.158744s/100 iters), loss = 1.08248
I0428 20:02:16.823995 29905 solver.cpp:238]     Train net output #0: loss = 1.08248 (* 1 = 1.08248 loss)
I0428 20:02:16.824017 29905 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:16.939232 29905 solver.cpp:219] Iteration 600 (867.855 iter/s, 0.115227s/100 iters), loss = 0.94452
I0428 20:02:16.939260 29905 solver.cpp:238]     Train net output #0: loss = 0.94452 (* 1 = 0.94452 loss)
I0428 20:02:16.939266 29905 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:17.050840 29905 solver.cpp:219] Iteration 700 (896.299 iter/s, 0.11157s/100 iters), loss = 1.06256
I0428 20:02:17.050866 29905 solver.cpp:238]     Train net output #0: loss = 1.06256 (* 1 = 1.06256 loss)
I0428 20:02:17.050874 29905 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:17.156939 29905 solver.cpp:219] Iteration 800 (942.855 iter/s, 0.106061s/100 iters), loss = 0.987347
I0428 20:02:17.156962 29905 solver.cpp:238]     Train net output #0: loss = 0.987347 (* 1 = 0.987347 loss)
I0428 20:02:17.156968 29905 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:17.263528 29905 solver.cpp:219] Iteration 900 (938.47 iter/s, 0.106556s/100 iters), loss = 1.0866
I0428 20:02:17.263569 29905 solver.cpp:238]     Train net output #0: loss = 1.0866 (* 1 = 1.0866 loss)
I0428 20:02:17.263576 29905 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:17.299077 29911 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:17.368507 29905 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:17.369976 29905 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:17.370757 29905 solver.cpp:311] Iteration 1000, loss = 0.851539
I0428 20:02:17.370771 29905 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:17.445822 29912 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:17.446365 29905 solver.cpp:398]     Test net output #0: accuracy = 0.6949
I0428 20:02:17.446384 29905 solver.cpp:398]     Test net output #1: loss = 0.761028 (* 1 = 0.761028 loss)
I0428 20:02:17.446390 29905 solver.cpp:316] Optimization Done.
I0428 20:02:17.446393 29905 caffe.cpp:259] Optimization Done.
