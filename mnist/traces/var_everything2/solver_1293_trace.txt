I0428 20:17:22.726625   858 caffe.cpp:218] Using GPUs 0
I0428 20:17:22.763021   858 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:23.221995   858 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1293.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:23.222133   858 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1293.prototxt
I0428 20:17:23.222453   858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:23.222470   858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:23.222543   858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:23.222617   858 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:23.222697   858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:23.222718   858 net.cpp:86] Creating Layer mnist
I0428 20:17:23.222723   858 net.cpp:382] mnist -> data
I0428 20:17:23.222743   858 net.cpp:382] mnist -> label
I0428 20:17:23.223634   858 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:23.225787   858 net.cpp:124] Setting up mnist
I0428 20:17:23.225822   858 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:23.225841   858 net.cpp:131] Top shape: 64 (64)
I0428 20:17:23.225847   858 net.cpp:139] Memory required for data: 200960
I0428 20:17:23.225852   858 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:23.225865   858 net.cpp:86] Creating Layer conv0
I0428 20:17:23.225881   858 net.cpp:408] conv0 <- data
I0428 20:17:23.225890   858 net.cpp:382] conv0 -> conv0
I0428 20:17:23.458041   858 net.cpp:124] Setting up conv0
I0428 20:17:23.458081   858 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:23.458086   858 net.cpp:139] Memory required for data: 7573760
I0428 20:17:23.458118   858 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:23.458147   858 net.cpp:86] Creating Layer pool0
I0428 20:17:23.458149   858 net.cpp:408] pool0 <- conv0
I0428 20:17:23.458154   858 net.cpp:382] pool0 -> pool0
I0428 20:17:23.458201   858 net.cpp:124] Setting up pool0
I0428 20:17:23.458216   858 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:23.458220   858 net.cpp:139] Memory required for data: 9416960
I0428 20:17:23.458222   858 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:23.458232   858 net.cpp:86] Creating Layer conv1
I0428 20:17:23.458235   858 net.cpp:408] conv1 <- pool0
I0428 20:17:23.458240   858 net.cpp:382] conv1 -> conv1
I0428 20:17:23.461153   858 net.cpp:124] Setting up conv1
I0428 20:17:23.461181   858 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:23.461185   858 net.cpp:139] Memory required for data: 9580800
I0428 20:17:23.461194   858 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:23.461202   858 net.cpp:86] Creating Layer pool1
I0428 20:17:23.461205   858 net.cpp:408] pool1 <- conv1
I0428 20:17:23.461211   858 net.cpp:382] pool1 -> pool1
I0428 20:17:23.461247   858 net.cpp:124] Setting up pool1
I0428 20:17:23.461252   858 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:23.461254   858 net.cpp:139] Memory required for data: 9621760
I0428 20:17:23.461257   858 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:23.461266   858 net.cpp:86] Creating Layer ip1
I0428 20:17:23.461268   858 net.cpp:408] ip1 <- pool1
I0428 20:17:23.461272   858 net.cpp:382] ip1 -> ip1
I0428 20:17:23.461393   858 net.cpp:124] Setting up ip1
I0428 20:17:23.461400   858 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:23.461403   858 net.cpp:139] Memory required for data: 9628160
I0428 20:17:23.461410   858 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:23.461418   858 net.cpp:86] Creating Layer relu1
I0428 20:17:23.461421   858 net.cpp:408] relu1 <- ip1
I0428 20:17:23.461426   858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:23.461589   858 net.cpp:124] Setting up relu1
I0428 20:17:23.461601   858 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:17:23.461603   858 net.cpp:139] Memory required for data: 9634560
I0428 20:17:23.461606   858 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:23.461612   858 net.cpp:86] Creating Layer ip2
I0428 20:17:23.461616   858 net.cpp:408] ip2 <- ip1
I0428 20:17:23.461621   858 net.cpp:382] ip2 -> ip2
I0428 20:17:23.461714   858 net.cpp:124] Setting up ip2
I0428 20:17:23.461720   858 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:23.461722   858 net.cpp:139] Memory required for data: 9637120
I0428 20:17:23.461729   858 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:23.461735   858 net.cpp:86] Creating Layer relu2
I0428 20:17:23.461737   858 net.cpp:408] relu2 <- ip2
I0428 20:17:23.461742   858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:23.462545   858 net.cpp:124] Setting up relu2
I0428 20:17:23.462558   858 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:23.462560   858 net.cpp:139] Memory required for data: 9639680
I0428 20:17:23.462563   858 layer_factory.hpp:77] Creating layer loss
I0428 20:17:23.462569   858 net.cpp:86] Creating Layer loss
I0428 20:17:23.462589   858 net.cpp:408] loss <- ip2
I0428 20:17:23.462592   858 net.cpp:408] loss <- label
I0428 20:17:23.462599   858 net.cpp:382] loss -> loss
I0428 20:17:23.462616   858 layer_factory.hpp:77] Creating layer loss
I0428 20:17:23.462858   858 net.cpp:124] Setting up loss
I0428 20:17:23.462867   858 net.cpp:131] Top shape: (1)
I0428 20:17:23.462870   858 net.cpp:134]     with loss weight 1
I0428 20:17:23.462884   858 net.cpp:139] Memory required for data: 9639684
I0428 20:17:23.462888   858 net.cpp:200] loss needs backward computation.
I0428 20:17:23.462891   858 net.cpp:200] relu2 needs backward computation.
I0428 20:17:23.462893   858 net.cpp:200] ip2 needs backward computation.
I0428 20:17:23.462896   858 net.cpp:200] relu1 needs backward computation.
I0428 20:17:23.462899   858 net.cpp:200] ip1 needs backward computation.
I0428 20:17:23.462911   858 net.cpp:200] pool1 needs backward computation.
I0428 20:17:23.462914   858 net.cpp:200] conv1 needs backward computation.
I0428 20:17:23.462918   858 net.cpp:200] pool0 needs backward computation.
I0428 20:17:23.462920   858 net.cpp:200] conv0 needs backward computation.
I0428 20:17:23.462924   858 net.cpp:202] mnist does not need backward computation.
I0428 20:17:23.462926   858 net.cpp:244] This network produces output loss
I0428 20:17:23.462935   858 net.cpp:257] Network initialization done.
I0428 20:17:23.463229   858 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1293.prototxt
I0428 20:17:23.463253   858 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:23.463368   858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:23.463474   858 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:23.463521   858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:23.463536   858 net.cpp:86] Creating Layer mnist
I0428 20:17:23.463541   858 net.cpp:382] mnist -> data
I0428 20:17:23.463549   858 net.cpp:382] mnist -> label
I0428 20:17:23.463642   858 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:23.465693   858 net.cpp:124] Setting up mnist
I0428 20:17:23.465723   858 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:23.465728   858 net.cpp:131] Top shape: 100 (100)
I0428 20:17:23.465730   858 net.cpp:139] Memory required for data: 314000
I0428 20:17:23.465734   858 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:23.465780   858 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:23.465798   858 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:23.465803   858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:23.465813   858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:23.465865   858 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:23.465873   858 net.cpp:131] Top shape: 100 (100)
I0428 20:17:23.465875   858 net.cpp:131] Top shape: 100 (100)
I0428 20:17:23.465878   858 net.cpp:139] Memory required for data: 314800
I0428 20:17:23.465881   858 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:23.465890   858 net.cpp:86] Creating Layer conv0
I0428 20:17:23.465893   858 net.cpp:408] conv0 <- data
I0428 20:17:23.465899   858 net.cpp:382] conv0 -> conv0
I0428 20:17:23.467794   858 net.cpp:124] Setting up conv0
I0428 20:17:23.467809   858 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:23.467813   858 net.cpp:139] Memory required for data: 11834800
I0428 20:17:23.467821   858 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:23.467828   858 net.cpp:86] Creating Layer pool0
I0428 20:17:23.467830   858 net.cpp:408] pool0 <- conv0
I0428 20:17:23.467834   858 net.cpp:382] pool0 -> pool0
I0428 20:17:23.467869   858 net.cpp:124] Setting up pool0
I0428 20:17:23.467875   858 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:23.467877   858 net.cpp:139] Memory required for data: 14714800
I0428 20:17:23.467880   858 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:23.467890   858 net.cpp:86] Creating Layer conv1
I0428 20:17:23.467893   858 net.cpp:408] conv1 <- pool0
I0428 20:17:23.467897   858 net.cpp:382] conv1 -> conv1
I0428 20:17:23.469671   858 net.cpp:124] Setting up conv1
I0428 20:17:23.469686   858 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:23.469689   858 net.cpp:139] Memory required for data: 14970800
I0428 20:17:23.469697   858 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:23.469727   858 net.cpp:86] Creating Layer pool1
I0428 20:17:23.469730   858 net.cpp:408] pool1 <- conv1
I0428 20:17:23.469736   858 net.cpp:382] pool1 -> pool1
I0428 20:17:23.469772   858 net.cpp:124] Setting up pool1
I0428 20:17:23.469779   858 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:23.469781   858 net.cpp:139] Memory required for data: 15034800
I0428 20:17:23.469784   858 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:23.469790   858 net.cpp:86] Creating Layer ip1
I0428 20:17:23.469794   858 net.cpp:408] ip1 <- pool1
I0428 20:17:23.469799   858 net.cpp:382] ip1 -> ip1
I0428 20:17:23.469921   858 net.cpp:124] Setting up ip1
I0428 20:17:23.469929   858 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:23.469933   858 net.cpp:139] Memory required for data: 15044800
I0428 20:17:23.469940   858 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:23.469945   858 net.cpp:86] Creating Layer relu1
I0428 20:17:23.469949   858 net.cpp:408] relu1 <- ip1
I0428 20:17:23.469954   858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:23.470124   858 net.cpp:124] Setting up relu1
I0428 20:17:23.470134   858 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:17:23.470136   858 net.cpp:139] Memory required for data: 15054800
I0428 20:17:23.470139   858 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:23.470146   858 net.cpp:86] Creating Layer ip2
I0428 20:17:23.470149   858 net.cpp:408] ip2 <- ip1
I0428 20:17:23.470154   858 net.cpp:382] ip2 -> ip2
I0428 20:17:23.470248   858 net.cpp:124] Setting up ip2
I0428 20:17:23.470255   858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:23.470258   858 net.cpp:139] Memory required for data: 15058800
I0428 20:17:23.470270   858 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:23.470275   858 net.cpp:86] Creating Layer relu2
I0428 20:17:23.470278   858 net.cpp:408] relu2 <- ip2
I0428 20:17:23.470288   858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:23.470438   858 net.cpp:124] Setting up relu2
I0428 20:17:23.470446   858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:23.470454   858 net.cpp:139] Memory required for data: 15062800
I0428 20:17:23.470458   858 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:23.470463   858 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:23.470466   858 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:23.470471   858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:23.470486   858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:23.470521   858 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:23.470542   858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:23.470546   858 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:23.470548   858 net.cpp:139] Memory required for data: 15070800
I0428 20:17:23.470551   858 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:23.470562   858 net.cpp:86] Creating Layer accuracy
I0428 20:17:23.470566   858 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:23.470569   858 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:23.470590   858 net.cpp:382] accuracy -> accuracy
I0428 20:17:23.470597   858 net.cpp:124] Setting up accuracy
I0428 20:17:23.470602   858 net.cpp:131] Top shape: (1)
I0428 20:17:23.470604   858 net.cpp:139] Memory required for data: 15070804
I0428 20:17:23.470607   858 layer_factory.hpp:77] Creating layer loss
I0428 20:17:23.470612   858 net.cpp:86] Creating Layer loss
I0428 20:17:23.470620   858 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:23.470623   858 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:23.470628   858 net.cpp:382] loss -> loss
I0428 20:17:23.470633   858 layer_factory.hpp:77] Creating layer loss
I0428 20:17:23.470988   858 net.cpp:124] Setting up loss
I0428 20:17:23.470998   858 net.cpp:131] Top shape: (1)
I0428 20:17:23.471001   858 net.cpp:134]     with loss weight 1
I0428 20:17:23.471007   858 net.cpp:139] Memory required for data: 15070808
I0428 20:17:23.471010   858 net.cpp:200] loss needs backward computation.
I0428 20:17:23.471014   858 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:23.471017   858 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:23.471020   858 net.cpp:200] relu2 needs backward computation.
I0428 20:17:23.471024   858 net.cpp:200] ip2 needs backward computation.
I0428 20:17:23.471026   858 net.cpp:200] relu1 needs backward computation.
I0428 20:17:23.471029   858 net.cpp:200] ip1 needs backward computation.
I0428 20:17:23.471031   858 net.cpp:200] pool1 needs backward computation.
I0428 20:17:23.471035   858 net.cpp:200] conv1 needs backward computation.
I0428 20:17:23.471037   858 net.cpp:200] pool0 needs backward computation.
I0428 20:17:23.471040   858 net.cpp:200] conv0 needs backward computation.
I0428 20:17:23.471043   858 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:23.471046   858 net.cpp:202] mnist does not need backward computation.
I0428 20:17:23.471050   858 net.cpp:244] This network produces output accuracy
I0428 20:17:23.471052   858 net.cpp:244] This network produces output loss
I0428 20:17:23.471062   858 net.cpp:257] Network initialization done.
I0428 20:17:23.471098   858 solver.cpp:56] Solver scaffolding done.
I0428 20:17:23.471357   858 caffe.cpp:248] Starting Optimization
I0428 20:17:23.471364   858 solver.cpp:273] Solving LeNet
I0428 20:17:23.471366   858 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:23.471509   858 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:23.478304   858 blocking_queue.cpp:49] Waiting for data
I0428 20:17:23.550318   865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:23.551017   858 solver.cpp:398]     Test net output #0: accuracy = 0.1222
I0428 20:17:23.551036   858 solver.cpp:398]     Test net output #1: loss = 2.30078 (* 1 = 2.30078 loss)
I0428 20:17:23.555413   858 solver.cpp:219] Iteration 0 (-9.83712e-43 iter/s, 0.0840152s/100 iters), loss = 2.32145
I0428 20:17:23.555439   858 solver.cpp:238]     Train net output #0: loss = 2.32145 (* 1 = 2.32145 loss)
I0428 20:17:23.555469   858 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:23.682600   858 solver.cpp:219] Iteration 100 (786.478 iter/s, 0.127149s/100 iters), loss = 0.32208
I0428 20:17:23.682642   858 solver.cpp:238]     Train net output #0: loss = 0.32208 (* 1 = 0.32208 loss)
I0428 20:17:23.682648   858 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:23.797248   858 solver.cpp:219] Iteration 200 (872.64 iter/s, 0.114595s/100 iters), loss = 0.155018
I0428 20:17:23.797289   858 solver.cpp:238]     Train net output #0: loss = 0.155018 (* 1 = 0.155018 loss)
I0428 20:17:23.797297   858 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:23.909389   858 solver.cpp:219] Iteration 300 (892.025 iter/s, 0.112104s/100 iters), loss = 0.191867
I0428 20:17:23.909430   858 solver.cpp:238]     Train net output #0: loss = 0.191867 (* 1 = 0.191867 loss)
I0428 20:17:23.909436   858 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:24.022580   858 solver.cpp:219] Iteration 400 (883.864 iter/s, 0.11314s/100 iters), loss = 0.0490442
I0428 20:17:24.022606   858 solver.cpp:238]     Train net output #0: loss = 0.0490442 (* 1 = 0.0490442 loss)
I0428 20:17:24.022613   858 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:24.133421   858 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:24.195045   865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:24.196591   858 solver.cpp:398]     Test net output #0: accuracy = 0.9585
I0428 20:17:24.196611   858 solver.cpp:398]     Test net output #1: loss = 0.130183 (* 1 = 0.130183 loss)
I0428 20:17:24.197748   858 solver.cpp:219] Iteration 500 (571.006 iter/s, 0.17513s/100 iters), loss = 0.107519
I0428 20:17:24.197787   858 solver.cpp:238]     Train net output #0: loss = 0.107519 (* 1 = 0.107519 loss)
I0428 20:17:24.197793   858 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:24.323473   858 solver.cpp:219] Iteration 600 (795.7 iter/s, 0.125676s/100 iters), loss = 0.0961509
I0428 20:17:24.323501   858 solver.cpp:238]     Train net output #0: loss = 0.0961509 (* 1 = 0.0961509 loss)
I0428 20:17:24.323525   858 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:24.436280   858 solver.cpp:219] Iteration 700 (886.769 iter/s, 0.112769s/100 iters), loss = 0.196296
I0428 20:17:24.436302   858 solver.cpp:238]     Train net output #0: loss = 0.196296 (* 1 = 0.196296 loss)
I0428 20:17:24.436326   858 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:24.548686   858 solver.cpp:219] Iteration 800 (889.912 iter/s, 0.112371s/100 iters), loss = 0.203683
I0428 20:17:24.548712   858 solver.cpp:238]     Train net output #0: loss = 0.203683 (* 1 = 0.203683 loss)
I0428 20:17:24.548718   858 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:24.660445   858 solver.cpp:219] Iteration 900 (895.083 iter/s, 0.111721s/100 iters), loss = 0.178757
I0428 20:17:24.660470   858 solver.cpp:238]     Train net output #0: loss = 0.178757 (* 1 = 0.178757 loss)
I0428 20:17:24.660492   858 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:24.697783   864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:24.771821   858 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:24.772977   858 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:24.773732   858 solver.cpp:311] Iteration 1000, loss = 0.120316
I0428 20:17:24.773747   858 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:24.835800   865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:24.838048   858 solver.cpp:398]     Test net output #0: accuracy = 0.9732
I0428 20:17:24.838068   858 solver.cpp:398]     Test net output #1: loss = 0.0887507 (* 1 = 0.0887507 loss)
I0428 20:17:24.838088   858 solver.cpp:316] Optimization Done.
I0428 20:17:24.838091   858 caffe.cpp:259] Optimization Done.
