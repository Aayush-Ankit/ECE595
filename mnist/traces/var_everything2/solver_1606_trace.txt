I0428 20:34:30.647603  4482 caffe.cpp:218] Using GPUs 0
I0428 20:34:30.684415  4482 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:34:31.139880  4482 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1606.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:34:31.140010  4482 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1606.prototxt
I0428 20:34:31.140326  4482 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:34:31.140341  4482 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:34:31.140411  4482 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:31.140471  4482 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:31.140565  4482 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:34:31.140584  4482 net.cpp:86] Creating Layer mnist
I0428 20:34:31.140594  4482 net.cpp:382] mnist -> data
I0428 20:34:31.140611  4482 net.cpp:382] mnist -> label
I0428 20:34:31.141706  4482 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:34:31.143980  4482 net.cpp:124] Setting up mnist
I0428 20:34:31.144026  4482 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:34:31.144031  4482 net.cpp:131] Top shape: 64 (64)
I0428 20:34:31.144033  4482 net.cpp:139] Memory required for data: 200960
I0428 20:34:31.144039  4482 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:31.144054  4482 net.cpp:86] Creating Layer conv0
I0428 20:34:31.144058  4482 net.cpp:408] conv0 <- data
I0428 20:34:31.144069  4482 net.cpp:382] conv0 -> conv0
I0428 20:34:31.378177  4482 net.cpp:124] Setting up conv0
I0428 20:34:31.378204  4482 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:34:31.378208  4482 net.cpp:139] Memory required for data: 14946560
I0428 20:34:31.378257  4482 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:31.378271  4482 net.cpp:86] Creating Layer pool0
I0428 20:34:31.378274  4482 net.cpp:408] pool0 <- conv0
I0428 20:34:31.378280  4482 net.cpp:382] pool0 -> pool0
I0428 20:34:31.378340  4482 net.cpp:124] Setting up pool0
I0428 20:34:31.378348  4482 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:34:31.378351  4482 net.cpp:139] Memory required for data: 18632960
I0428 20:34:31.378355  4482 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:31.378365  4482 net.cpp:86] Creating Layer conv1
I0428 20:34:31.378368  4482 net.cpp:408] conv1 <- pool0
I0428 20:34:31.378372  4482 net.cpp:382] conv1 -> conv1
I0428 20:34:31.381889  4482 net.cpp:124] Setting up conv1
I0428 20:34:31.381903  4482 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:34:31.381907  4482 net.cpp:139] Memory required for data: 19452160
I0428 20:34:31.381916  4482 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:31.381922  4482 net.cpp:86] Creating Layer pool1
I0428 20:34:31.381927  4482 net.cpp:408] pool1 <- conv1
I0428 20:34:31.381932  4482 net.cpp:382] pool1 -> pool1
I0428 20:34:31.381964  4482 net.cpp:124] Setting up pool1
I0428 20:34:31.381973  4482 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:34:31.381974  4482 net.cpp:139] Memory required for data: 19656960
I0428 20:34:31.381978  4482 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:31.381983  4482 net.cpp:86] Creating Layer ip1
I0428 20:34:31.382002  4482 net.cpp:408] ip1 <- pool1
I0428 20:34:31.382007  4482 net.cpp:382] ip1 -> ip1
I0428 20:34:31.382205  4482 net.cpp:124] Setting up ip1
I0428 20:34:31.382213  4482 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:34:31.382216  4482 net.cpp:139] Memory required for data: 19663360
I0428 20:34:31.382222  4482 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:31.382228  4482 net.cpp:86] Creating Layer relu1
I0428 20:34:31.382231  4482 net.cpp:408] relu1 <- ip1
I0428 20:34:31.382236  4482 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:31.382407  4482 net.cpp:124] Setting up relu1
I0428 20:34:31.382416  4482 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:34:31.382418  4482 net.cpp:139] Memory required for data: 19669760
I0428 20:34:31.382421  4482 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:31.382427  4482 net.cpp:86] Creating Layer ip2
I0428 20:34:31.382431  4482 net.cpp:408] ip2 <- ip1
I0428 20:34:31.382436  4482 net.cpp:382] ip2 -> ip2
I0428 20:34:31.382521  4482 net.cpp:124] Setting up ip2
I0428 20:34:31.382529  4482 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:31.382531  4482 net.cpp:139] Memory required for data: 19672320
I0428 20:34:31.382536  4482 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:31.382542  4482 net.cpp:86] Creating Layer relu2
I0428 20:34:31.382545  4482 net.cpp:408] relu2 <- ip2
I0428 20:34:31.382549  4482 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:31.383332  4482 net.cpp:124] Setting up relu2
I0428 20:34:31.383343  4482 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:31.383347  4482 net.cpp:139] Memory required for data: 19674880
I0428 20:34:31.383350  4482 layer_factory.hpp:77] Creating layer loss
I0428 20:34:31.383357  4482 net.cpp:86] Creating Layer loss
I0428 20:34:31.383360  4482 net.cpp:408] loss <- ip2
I0428 20:34:31.383364  4482 net.cpp:408] loss <- label
I0428 20:34:31.383369  4482 net.cpp:382] loss -> loss
I0428 20:34:31.383389  4482 layer_factory.hpp:77] Creating layer loss
I0428 20:34:31.383642  4482 net.cpp:124] Setting up loss
I0428 20:34:31.383658  4482 net.cpp:131] Top shape: (1)
I0428 20:34:31.383661  4482 net.cpp:134]     with loss weight 1
I0428 20:34:31.383675  4482 net.cpp:139] Memory required for data: 19674884
I0428 20:34:31.383678  4482 net.cpp:200] loss needs backward computation.
I0428 20:34:31.383682  4482 net.cpp:200] relu2 needs backward computation.
I0428 20:34:31.383685  4482 net.cpp:200] ip2 needs backward computation.
I0428 20:34:31.383688  4482 net.cpp:200] relu1 needs backward computation.
I0428 20:34:31.383692  4482 net.cpp:200] ip1 needs backward computation.
I0428 20:34:31.383704  4482 net.cpp:200] pool1 needs backward computation.
I0428 20:34:31.383708  4482 net.cpp:200] conv1 needs backward computation.
I0428 20:34:31.383711  4482 net.cpp:200] pool0 needs backward computation.
I0428 20:34:31.383714  4482 net.cpp:200] conv0 needs backward computation.
I0428 20:34:31.383718  4482 net.cpp:202] mnist does not need backward computation.
I0428 20:34:31.383721  4482 net.cpp:244] This network produces output loss
I0428 20:34:31.383729  4482 net.cpp:257] Network initialization done.
I0428 20:34:31.384042  4482 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1606.prototxt
I0428 20:34:31.384065  4482 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:34:31.384145  4482 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:34:31.384204  4482 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:31.384248  4482 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:34:31.384259  4482 net.cpp:86] Creating Layer mnist
I0428 20:34:31.384263  4482 net.cpp:382] mnist -> data
I0428 20:34:31.384270  4482 net.cpp:382] mnist -> label
I0428 20:34:31.384346  4482 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:34:31.385484  4482 net.cpp:124] Setting up mnist
I0428 20:34:31.385514  4482 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:34:31.385519  4482 net.cpp:131] Top shape: 100 (100)
I0428 20:34:31.385522  4482 net.cpp:139] Memory required for data: 314000
I0428 20:34:31.385525  4482 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:34:31.385550  4482 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:34:31.385556  4482 net.cpp:408] label_mnist_1_split <- label
I0428 20:34:31.385561  4482 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:34:31.385568  4482 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:34:31.385663  4482 net.cpp:124] Setting up label_mnist_1_split
I0428 20:34:31.385671  4482 net.cpp:131] Top shape: 100 (100)
I0428 20:34:31.385674  4482 net.cpp:131] Top shape: 100 (100)
I0428 20:34:31.385677  4482 net.cpp:139] Memory required for data: 314800
I0428 20:34:31.385680  4482 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:31.385689  4482 net.cpp:86] Creating Layer conv0
I0428 20:34:31.385692  4482 net.cpp:408] conv0 <- data
I0428 20:34:31.385697  4482 net.cpp:382] conv0 -> conv0
I0428 20:34:31.387464  4482 net.cpp:124] Setting up conv0
I0428 20:34:31.387477  4482 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:34:31.387481  4482 net.cpp:139] Memory required for data: 23354800
I0428 20:34:31.387490  4482 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:31.387495  4482 net.cpp:86] Creating Layer pool0
I0428 20:34:31.387514  4482 net.cpp:408] pool0 <- conv0
I0428 20:34:31.387519  4482 net.cpp:382] pool0 -> pool0
I0428 20:34:31.387569  4482 net.cpp:124] Setting up pool0
I0428 20:34:31.387576  4482 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:34:31.387579  4482 net.cpp:139] Memory required for data: 29114800
I0428 20:34:31.387583  4482 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:31.387591  4482 net.cpp:86] Creating Layer conv1
I0428 20:34:31.387594  4482 net.cpp:408] conv1 <- pool0
I0428 20:34:31.387599  4482 net.cpp:382] conv1 -> conv1
I0428 20:34:31.390900  4482 net.cpp:124] Setting up conv1
I0428 20:34:31.390929  4482 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:34:31.390933  4482 net.cpp:139] Memory required for data: 30394800
I0428 20:34:31.390941  4482 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:31.390947  4482 net.cpp:86] Creating Layer pool1
I0428 20:34:31.390951  4482 net.cpp:408] pool1 <- conv1
I0428 20:34:31.390956  4482 net.cpp:382] pool1 -> pool1
I0428 20:34:31.391006  4482 net.cpp:124] Setting up pool1
I0428 20:34:31.391012  4482 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:34:31.391016  4482 net.cpp:139] Memory required for data: 30714800
I0428 20:34:31.391018  4482 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:31.391023  4482 net.cpp:86] Creating Layer ip1
I0428 20:34:31.391027  4482 net.cpp:408] ip1 <- pool1
I0428 20:34:31.391033  4482 net.cpp:382] ip1 -> ip1
I0428 20:34:31.391269  4482 net.cpp:124] Setting up ip1
I0428 20:34:31.391278  4482 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:34:31.391281  4482 net.cpp:139] Memory required for data: 30724800
I0428 20:34:31.391293  4482 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:31.391296  4482 net.cpp:86] Creating Layer relu1
I0428 20:34:31.391316  4482 net.cpp:408] relu1 <- ip1
I0428 20:34:31.391321  4482 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:31.391486  4482 net.cpp:124] Setting up relu1
I0428 20:34:31.391495  4482 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:34:31.391499  4482 net.cpp:139] Memory required for data: 30734800
I0428 20:34:31.391502  4482 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:31.391510  4482 net.cpp:86] Creating Layer ip2
I0428 20:34:31.391513  4482 net.cpp:408] ip2 <- ip1
I0428 20:34:31.391518  4482 net.cpp:382] ip2 -> ip2
I0428 20:34:31.391618  4482 net.cpp:124] Setting up ip2
I0428 20:34:31.391625  4482 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:31.391628  4482 net.cpp:139] Memory required for data: 30738800
I0428 20:34:31.391633  4482 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:31.391638  4482 net.cpp:86] Creating Layer relu2
I0428 20:34:31.391640  4482 net.cpp:408] relu2 <- ip2
I0428 20:34:31.391659  4482 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:31.391873  4482 net.cpp:124] Setting up relu2
I0428 20:34:31.391881  4482 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:31.391885  4482 net.cpp:139] Memory required for data: 30742800
I0428 20:34:31.391888  4482 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:34:31.391898  4482 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:34:31.391901  4482 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:34:31.391906  4482 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:34:31.391927  4482 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:34:31.391993  4482 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:34:31.392000  4482 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:31.392004  4482 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:31.392007  4482 net.cpp:139] Memory required for data: 30750800
I0428 20:34:31.392010  4482 layer_factory.hpp:77] Creating layer accuracy
I0428 20:34:31.392016  4482 net.cpp:86] Creating Layer accuracy
I0428 20:34:31.392020  4482 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:34:31.392025  4482 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:34:31.392030  4482 net.cpp:382] accuracy -> accuracy
I0428 20:34:31.392037  4482 net.cpp:124] Setting up accuracy
I0428 20:34:31.392041  4482 net.cpp:131] Top shape: (1)
I0428 20:34:31.392045  4482 net.cpp:139] Memory required for data: 30750804
I0428 20:34:31.392047  4482 layer_factory.hpp:77] Creating layer loss
I0428 20:34:31.392051  4482 net.cpp:86] Creating Layer loss
I0428 20:34:31.392055  4482 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:34:31.392058  4482 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:34:31.392062  4482 net.cpp:382] loss -> loss
I0428 20:34:31.392068  4482 layer_factory.hpp:77] Creating layer loss
I0428 20:34:31.392333  4482 net.cpp:124] Setting up loss
I0428 20:34:31.392343  4482 net.cpp:131] Top shape: (1)
I0428 20:34:31.392346  4482 net.cpp:134]     with loss weight 1
I0428 20:34:31.392354  4482 net.cpp:139] Memory required for data: 30750808
I0428 20:34:31.392357  4482 net.cpp:200] loss needs backward computation.
I0428 20:34:31.392362  4482 net.cpp:202] accuracy does not need backward computation.
I0428 20:34:31.392380  4482 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:34:31.392383  4482 net.cpp:200] relu2 needs backward computation.
I0428 20:34:31.392386  4482 net.cpp:200] ip2 needs backward computation.
I0428 20:34:31.392390  4482 net.cpp:200] relu1 needs backward computation.
I0428 20:34:31.392392  4482 net.cpp:200] ip1 needs backward computation.
I0428 20:34:31.392396  4482 net.cpp:200] pool1 needs backward computation.
I0428 20:34:31.392400  4482 net.cpp:200] conv1 needs backward computation.
I0428 20:34:31.392403  4482 net.cpp:200] pool0 needs backward computation.
I0428 20:34:31.392406  4482 net.cpp:200] conv0 needs backward computation.
I0428 20:34:31.392410  4482 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:34:31.392415  4482 net.cpp:202] mnist does not need backward computation.
I0428 20:34:31.392417  4482 net.cpp:244] This network produces output accuracy
I0428 20:34:31.392421  4482 net.cpp:244] This network produces output loss
I0428 20:34:31.392431  4482 net.cpp:257] Network initialization done.
I0428 20:34:31.392467  4482 solver.cpp:56] Solver scaffolding done.
I0428 20:34:31.392756  4482 caffe.cpp:248] Starting Optimization
I0428 20:34:31.392762  4482 solver.cpp:273] Solving LeNet
I0428 20:34:31.392765  4482 solver.cpp:274] Learning Rate Policy: inv
I0428 20:34:31.393077  4482 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:34:31.497359  4490 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:31.500073  4482 solver.cpp:398]     Test net output #0: accuracy = 0.1061
I0428 20:34:31.500108  4482 solver.cpp:398]     Test net output #1: loss = 2.32351 (* 1 = 2.32351 loss)
I0428 20:34:31.504582  4482 solver.cpp:219] Iteration 0 (0 iter/s, 0.111783s/100 iters), loss = 2.31312
I0428 20:34:31.504621  4482 solver.cpp:238]     Train net output #0: loss = 2.31312 (* 1 = 2.31312 loss)
I0428 20:34:31.504632  4482 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:34:31.725005  4482 solver.cpp:219] Iteration 100 (453.755 iter/s, 0.220383s/100 iters), loss = 0.652953
I0428 20:34:31.725049  4482 solver.cpp:238]     Train net output #0: loss = 0.652953 (* 1 = 0.652953 loss)
I0428 20:34:31.725055  4482 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:34:31.944540  4482 solver.cpp:219] Iteration 200 (455.601 iter/s, 0.21949s/100 iters), loss = 0.82406
I0428 20:34:31.944594  4482 solver.cpp:238]     Train net output #0: loss = 0.82406 (* 1 = 0.82406 loss)
I0428 20:34:31.944602  4482 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:34:32.166066  4482 solver.cpp:219] Iteration 300 (451.552 iter/s, 0.221458s/100 iters), loss = 0.607055
I0428 20:34:32.166092  4482 solver.cpp:238]     Train net output #0: loss = 0.607055 (* 1 = 0.607055 loss)
I0428 20:34:32.166098  4482 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:34:32.389324  4482 solver.cpp:219] Iteration 400 (447.995 iter/s, 0.223217s/100 iters), loss = 0.77829
I0428 20:34:32.389374  4482 solver.cpp:238]     Train net output #0: loss = 0.77829 (* 1 = 0.77829 loss)
I0428 20:34:32.389381  4482 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:34:32.609800  4482 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:34:32.713838  4490 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:32.717622  4482 solver.cpp:398]     Test net output #0: accuracy = 0.8502
I0428 20:34:32.717658  4482 solver.cpp:398]     Test net output #1: loss = 0.573383 (* 1 = 0.573383 loss)
I0428 20:34:32.719821  4482 solver.cpp:219] Iteration 500 (302.622 iter/s, 0.330445s/100 iters), loss = 0.513267
I0428 20:34:32.719844  4482 solver.cpp:238]     Train net output #0: loss = 0.513267 (* 1 = 0.513267 loss)
I0428 20:34:32.719851  4482 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:34:32.950150  4482 solver.cpp:219] Iteration 600 (434.235 iter/s, 0.23029s/100 iters), loss = 0.58478
I0428 20:34:32.950193  4482 solver.cpp:238]     Train net output #0: loss = 0.58478 (* 1 = 0.58478 loss)
I0428 20:34:32.950199  4482 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:34:33.179477  4482 solver.cpp:219] Iteration 700 (436.137 iter/s, 0.229286s/100 iters), loss = 0.479494
I0428 20:34:33.179519  4482 solver.cpp:238]     Train net output #0: loss = 0.479494 (* 1 = 0.479494 loss)
I0428 20:34:33.179525  4482 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:34:33.410210  4482 solver.cpp:219] Iteration 800 (433.481 iter/s, 0.230691s/100 iters), loss = 0.74616
I0428 20:34:33.410235  4482 solver.cpp:238]     Train net output #0: loss = 0.74616 (* 1 = 0.74616 loss)
I0428 20:34:33.410241  4482 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:34:33.642506  4482 solver.cpp:219] Iteration 900 (430.564 iter/s, 0.232253s/100 iters), loss = 0.76217
I0428 20:34:33.642539  4482 solver.cpp:238]     Train net output #0: loss = 0.76217 (* 1 = 0.76217 loss)
I0428 20:34:33.642546  4482 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:34:33.720662  4489 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:33.876417  4482 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:34:33.880635  4482 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:34:33.882719  4482 solver.cpp:311] Iteration 1000, loss = 0.594211
I0428 20:34:33.882733  4482 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:34:33.989392  4490 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:33.993062  4482 solver.cpp:398]     Test net output #0: accuracy = 0.8699
I0428 20:34:33.993094  4482 solver.cpp:398]     Test net output #1: loss = 0.545947 (* 1 = 0.545947 loss)
I0428 20:34:33.993099  4482 solver.cpp:316] Optimization Done.
I0428 20:34:33.993103  4482 caffe.cpp:259] Optimization Done.
