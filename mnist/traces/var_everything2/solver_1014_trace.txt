I0428 20:05:57.243223 30758 caffe.cpp:218] Using GPUs 0
I0428 20:05:57.279713 30758 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:57.787856 30758 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1014.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:57.787995 30758 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1014.prototxt
I0428 20:05:57.788334 30758 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:57.788350 30758 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:57.788430 30758 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:05:57.788496 30758 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:57.788600 30758 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:57.788625 30758 net.cpp:86] Creating Layer mnist
I0428 20:05:57.788631 30758 net.cpp:382] mnist -> data
I0428 20:05:57.788653 30758 net.cpp:382] mnist -> label
I0428 20:05:57.789763 30758 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:57.792220 30758 net.cpp:124] Setting up mnist
I0428 20:05:57.792237 30758 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:57.792243 30758 net.cpp:131] Top shape: 64 (64)
I0428 20:05:57.792248 30758 net.cpp:139] Memory required for data: 200960
I0428 20:05:57.792255 30758 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:57.792271 30758 net.cpp:86] Creating Layer conv0
I0428 20:05:57.792276 30758 net.cpp:408] conv0 <- data
I0428 20:05:57.792289 30758 net.cpp:382] conv0 -> conv0
I0428 20:05:58.059433 30758 net.cpp:124] Setting up conv0
I0428 20:05:58.059458 30758 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:58.059463 30758 net.cpp:139] Memory required for data: 3887360
I0428 20:05:58.059476 30758 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:58.059489 30758 net.cpp:86] Creating Layer pool0
I0428 20:05:58.059492 30758 net.cpp:408] pool0 <- conv0
I0428 20:05:58.059497 30758 net.cpp:382] pool0 -> pool0
I0428 20:05:58.059556 30758 net.cpp:124] Setting up pool0
I0428 20:05:58.059561 30758 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:58.059579 30758 net.cpp:139] Memory required for data: 4808960
I0428 20:05:58.059582 30758 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:58.059593 30758 net.cpp:86] Creating Layer conv1
I0428 20:05:58.059597 30758 net.cpp:408] conv1 <- pool0
I0428 20:05:58.059600 30758 net.cpp:382] conv1 -> conv1
I0428 20:05:58.062412 30758 net.cpp:124] Setting up conv1
I0428 20:05:58.062425 30758 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:05:58.062429 30758 net.cpp:139] Memory required for data: 4890880
I0428 20:05:58.062438 30758 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:58.062458 30758 net.cpp:86] Creating Layer pool1
I0428 20:05:58.062463 30758 net.cpp:408] pool1 <- conv1
I0428 20:05:58.062482 30758 net.cpp:382] pool1 -> pool1
I0428 20:05:58.062515 30758 net.cpp:124] Setting up pool1
I0428 20:05:58.062521 30758 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:05:58.062523 30758 net.cpp:139] Memory required for data: 4911360
I0428 20:05:58.062526 30758 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:58.062533 30758 net.cpp:86] Creating Layer ip1
I0428 20:05:58.062536 30758 net.cpp:408] ip1 <- pool1
I0428 20:05:58.062541 30758 net.cpp:382] ip1 -> ip1
I0428 20:05:58.062633 30758 net.cpp:124] Setting up ip1
I0428 20:05:58.062640 30758 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:58.062643 30758 net.cpp:139] Memory required for data: 4913920
I0428 20:05:58.062649 30758 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:58.062654 30758 net.cpp:86] Creating Layer relu1
I0428 20:05:58.062657 30758 net.cpp:408] relu1 <- ip1
I0428 20:05:58.062661 30758 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:58.062810 30758 net.cpp:124] Setting up relu1
I0428 20:05:58.062819 30758 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:58.062821 30758 net.cpp:139] Memory required for data: 4916480
I0428 20:05:58.062824 30758 layer_factory.hpp:77] Creating layer loss
I0428 20:05:58.062829 30758 net.cpp:86] Creating Layer loss
I0428 20:05:58.062832 30758 net.cpp:408] loss <- ip1
I0428 20:05:58.062836 30758 net.cpp:408] loss <- label
I0428 20:05:58.062840 30758 net.cpp:382] loss -> loss
I0428 20:05:58.062854 30758 layer_factory.hpp:77] Creating layer loss
I0428 20:05:58.063681 30758 net.cpp:124] Setting up loss
I0428 20:05:58.063694 30758 net.cpp:131] Top shape: (1)
I0428 20:05:58.063697 30758 net.cpp:134]     with loss weight 1
I0428 20:05:58.063711 30758 net.cpp:139] Memory required for data: 4916484
I0428 20:05:58.063715 30758 net.cpp:200] loss needs backward computation.
I0428 20:05:58.063719 30758 net.cpp:200] relu1 needs backward computation.
I0428 20:05:58.063722 30758 net.cpp:200] ip1 needs backward computation.
I0428 20:05:58.063725 30758 net.cpp:200] pool1 needs backward computation.
I0428 20:05:58.063729 30758 net.cpp:200] conv1 needs backward computation.
I0428 20:05:58.063731 30758 net.cpp:200] pool0 needs backward computation.
I0428 20:05:58.063735 30758 net.cpp:200] conv0 needs backward computation.
I0428 20:05:58.063737 30758 net.cpp:202] mnist does not need backward computation.
I0428 20:05:58.063740 30758 net.cpp:244] This network produces output loss
I0428 20:05:58.063748 30758 net.cpp:257] Network initialization done.
I0428 20:05:58.064013 30758 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1014.prototxt
I0428 20:05:58.064035 30758 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:58.064106 30758 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:05:58.064172 30758 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:58.064213 30758 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:58.064224 30758 net.cpp:86] Creating Layer mnist
I0428 20:05:58.064229 30758 net.cpp:382] mnist -> data
I0428 20:05:58.064236 30758 net.cpp:382] mnist -> label
I0428 20:05:58.064313 30758 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:58.066373 30758 net.cpp:124] Setting up mnist
I0428 20:05:58.066401 30758 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:58.066406 30758 net.cpp:131] Top shape: 100 (100)
I0428 20:05:58.066411 30758 net.cpp:139] Memory required for data: 314000
I0428 20:05:58.066413 30758 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:58.066421 30758 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:58.066423 30758 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:58.066428 30758 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:58.066435 30758 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:58.066488 30758 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:58.066495 30758 net.cpp:131] Top shape: 100 (100)
I0428 20:05:58.066499 30758 net.cpp:131] Top shape: 100 (100)
I0428 20:05:58.066503 30758 net.cpp:139] Memory required for data: 314800
I0428 20:05:58.066505 30758 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:58.066514 30758 net.cpp:86] Creating Layer conv0
I0428 20:05:58.066531 30758 net.cpp:408] conv0 <- data
I0428 20:05:58.066537 30758 net.cpp:382] conv0 -> conv0
I0428 20:05:58.067493 30758 net.cpp:124] Setting up conv0
I0428 20:05:58.067504 30758 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:58.067508 30758 net.cpp:139] Memory required for data: 6074800
I0428 20:05:58.067517 30758 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:58.067522 30758 net.cpp:86] Creating Layer pool0
I0428 20:05:58.067524 30758 net.cpp:408] pool0 <- conv0
I0428 20:05:58.067545 30758 net.cpp:382] pool0 -> pool0
I0428 20:05:58.067579 30758 net.cpp:124] Setting up pool0
I0428 20:05:58.067594 30758 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:58.067596 30758 net.cpp:139] Memory required for data: 7514800
I0428 20:05:58.067600 30758 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:58.067610 30758 net.cpp:86] Creating Layer conv1
I0428 20:05:58.067628 30758 net.cpp:408] conv1 <- pool0
I0428 20:05:58.067633 30758 net.cpp:382] conv1 -> conv1
I0428 20:05:58.069931 30758 net.cpp:124] Setting up conv1
I0428 20:05:58.069946 30758 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:05:58.069949 30758 net.cpp:139] Memory required for data: 7642800
I0428 20:05:58.069958 30758 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:58.069983 30758 net.cpp:86] Creating Layer pool1
I0428 20:05:58.069998 30758 net.cpp:408] pool1 <- conv1
I0428 20:05:58.070003 30758 net.cpp:382] pool1 -> pool1
I0428 20:05:58.070058 30758 net.cpp:124] Setting up pool1
I0428 20:05:58.070066 30758 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:05:58.070070 30758 net.cpp:139] Memory required for data: 7674800
I0428 20:05:58.070072 30758 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:58.070080 30758 net.cpp:86] Creating Layer ip1
I0428 20:05:58.070098 30758 net.cpp:408] ip1 <- pool1
I0428 20:05:58.070103 30758 net.cpp:382] ip1 -> ip1
I0428 20:05:58.070231 30758 net.cpp:124] Setting up ip1
I0428 20:05:58.070240 30758 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:58.070242 30758 net.cpp:139] Memory required for data: 7678800
I0428 20:05:58.070250 30758 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:58.070255 30758 net.cpp:86] Creating Layer relu1
I0428 20:05:58.070260 30758 net.cpp:408] relu1 <- ip1
I0428 20:05:58.070264 30758 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:58.071085 30758 net.cpp:124] Setting up relu1
I0428 20:05:58.071113 30758 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:58.071117 30758 net.cpp:139] Memory required for data: 7682800
I0428 20:05:58.071120 30758 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:05:58.071130 30758 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:05:58.071133 30758 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:05:58.071138 30758 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:05:58.071144 30758 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:05:58.071189 30758 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:05:58.071195 30758 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:58.071199 30758 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:58.071202 30758 net.cpp:139] Memory required for data: 7690800
I0428 20:05:58.071207 30758 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:58.071211 30758 net.cpp:86] Creating Layer accuracy
I0428 20:05:58.071214 30758 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:05:58.071218 30758 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:58.071224 30758 net.cpp:382] accuracy -> accuracy
I0428 20:05:58.071233 30758 net.cpp:124] Setting up accuracy
I0428 20:05:58.071236 30758 net.cpp:131] Top shape: (1)
I0428 20:05:58.071239 30758 net.cpp:139] Memory required for data: 7690804
I0428 20:05:58.071243 30758 layer_factory.hpp:77] Creating layer loss
I0428 20:05:58.071247 30758 net.cpp:86] Creating Layer loss
I0428 20:05:58.071250 30758 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:05:58.071254 30758 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:58.071259 30758 net.cpp:382] loss -> loss
I0428 20:05:58.071266 30758 layer_factory.hpp:77] Creating layer loss
I0428 20:05:58.071530 30758 net.cpp:124] Setting up loss
I0428 20:05:58.071539 30758 net.cpp:131] Top shape: (1)
I0428 20:05:58.071542 30758 net.cpp:134]     with loss weight 1
I0428 20:05:58.071549 30758 net.cpp:139] Memory required for data: 7690808
I0428 20:05:58.071552 30758 net.cpp:200] loss needs backward computation.
I0428 20:05:58.071557 30758 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:58.071559 30758 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:05:58.071564 30758 net.cpp:200] relu1 needs backward computation.
I0428 20:05:58.071568 30758 net.cpp:200] ip1 needs backward computation.
I0428 20:05:58.071571 30758 net.cpp:200] pool1 needs backward computation.
I0428 20:05:58.071574 30758 net.cpp:200] conv1 needs backward computation.
I0428 20:05:58.071584 30758 net.cpp:200] pool0 needs backward computation.
I0428 20:05:58.071588 30758 net.cpp:200] conv0 needs backward computation.
I0428 20:05:58.071591 30758 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:58.071594 30758 net.cpp:202] mnist does not need backward computation.
I0428 20:05:58.071602 30758 net.cpp:244] This network produces output accuracy
I0428 20:05:58.071605 30758 net.cpp:244] This network produces output loss
I0428 20:05:58.071624 30758 net.cpp:257] Network initialization done.
I0428 20:05:58.071657 30758 solver.cpp:56] Solver scaffolding done.
I0428 20:05:58.071854 30758 caffe.cpp:248] Starting Optimization
I0428 20:05:58.071861 30758 solver.cpp:273] Solving LeNet
I0428 20:05:58.071864 30758 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:58.072710 30758 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:58.077450 30758 blocking_queue.cpp:49] Waiting for data
I0428 20:05:58.149085 30765 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:58.149624 30758 solver.cpp:398]     Test net output #0: accuracy = 0.0839
I0428 20:05:58.149662 30758 solver.cpp:398]     Test net output #1: loss = 2.34227 (* 1 = 2.34227 loss)
I0428 20:05:58.153401 30758 solver.cpp:219] Iteration 0 (-1.01454e-42 iter/s, 0.0815133s/100 iters), loss = 2.33184
I0428 20:05:58.153439 30758 solver.cpp:238]     Train net output #0: loss = 2.33184 (* 1 = 2.33184 loss)
I0428 20:05:58.153450 30758 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:58.227239 30758 solver.cpp:219] Iteration 100 (1355.21 iter/s, 0.0737893s/100 iters), loss = 0.803789
I0428 20:05:58.227278 30758 solver.cpp:238]     Train net output #0: loss = 0.803789 (* 1 = 0.803789 loss)
I0428 20:05:58.227284 30758 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:58.300781 30758 solver.cpp:219] Iteration 200 (1360.66 iter/s, 0.0734937s/100 iters), loss = 0.408836
I0428 20:05:58.300842 30758 solver.cpp:238]     Train net output #0: loss = 0.408836 (* 1 = 0.408836 loss)
I0428 20:05:58.300848 30758 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:58.373735 30758 solver.cpp:219] Iteration 300 (1371.77 iter/s, 0.0728986s/100 iters), loss = 0.211439
I0428 20:05:58.373773 30758 solver.cpp:238]     Train net output #0: loss = 0.211439 (* 1 = 0.211439 loss)
I0428 20:05:58.373780 30758 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:58.446996 30758 solver.cpp:219] Iteration 400 (1365.55 iter/s, 0.0732303s/100 iters), loss = 0.201012
I0428 20:05:58.447036 30758 solver.cpp:238]     Train net output #0: loss = 0.201012 (* 1 = 0.201012 loss)
I0428 20:05:58.447041 30758 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:58.519443 30758 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:58.572482 30765 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:58.573017 30758 solver.cpp:398]     Test net output #0: accuracy = 0.9489
I0428 20:05:58.573052 30758 solver.cpp:398]     Test net output #1: loss = 0.169796 (* 1 = 0.169796 loss)
I0428 20:05:58.573808 30758 solver.cpp:219] Iteration 500 (788.784 iter/s, 0.126777s/100 iters), loss = 0.286605
I0428 20:05:58.573830 30758 solver.cpp:238]     Train net output #0: loss = 0.286605 (* 1 = 0.286605 loss)
I0428 20:05:58.573837 30758 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:58.647500 30758 solver.cpp:219] Iteration 600 (1357.58 iter/s, 0.0736604s/100 iters), loss = 0.154004
I0428 20:05:58.647539 30758 solver.cpp:238]     Train net output #0: loss = 0.154004 (* 1 = 0.154004 loss)
I0428 20:05:58.647545 30758 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:58.721910 30758 solver.cpp:219] Iteration 700 (1344.5 iter/s, 0.0743773s/100 iters), loss = 0.22219
I0428 20:05:58.721935 30758 solver.cpp:238]     Train net output #0: loss = 0.222189 (* 1 = 0.222189 loss)
I0428 20:05:58.721941 30758 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:58.795275 30758 solver.cpp:219] Iteration 800 (1363.67 iter/s, 0.0733316s/100 iters), loss = 0.343719
I0428 20:05:58.795298 30758 solver.cpp:238]     Train net output #0: loss = 0.343719 (* 1 = 0.343719 loss)
I0428 20:05:58.795305 30758 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:58.868669 30758 solver.cpp:219] Iteration 900 (1363.11 iter/s, 0.0733614s/100 iters), loss = 0.214827
I0428 20:05:58.868707 30758 solver.cpp:238]     Train net output #0: loss = 0.214827 (* 1 = 0.214827 loss)
I0428 20:05:58.868712 30758 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:58.893360 30764 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:58.941983 30758 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:58.942615 30758 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:58.943207 30758 solver.cpp:311] Iteration 1000, loss = 0.124301
I0428 20:05:58.943238 30758 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:58.990785 30765 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:58.991348 30758 solver.cpp:398]     Test net output #0: accuracy = 0.9657
I0428 20:05:58.991382 30758 solver.cpp:398]     Test net output #1: loss = 0.114191 (* 1 = 0.114191 loss)
I0428 20:05:58.991387 30758 solver.cpp:316] Optimization Done.
I0428 20:05:58.991390 30758 caffe.cpp:259] Optimization Done.
