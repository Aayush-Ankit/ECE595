I0428 19:45:36.048405 25834 caffe.cpp:218] Using GPUs 0
I0428 19:45:36.089572 25834 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:36.610790 25834 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test475.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:36.610939 25834 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test475.prototxt
I0428 19:45:36.611668 25834 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:36.611685 25834 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:36.611773 25834 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:36.611841 25834 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:36.611943 25834 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:36.611968 25834 net.cpp:86] Creating Layer mnist
I0428 19:45:36.611977 25834 net.cpp:382] mnist -> data
I0428 19:45:36.612001 25834 net.cpp:382] mnist -> label
I0428 19:45:36.613108 25834 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:36.615561 25834 net.cpp:124] Setting up mnist
I0428 19:45:36.615578 25834 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:36.615587 25834 net.cpp:131] Top shape: 64 (64)
I0428 19:45:36.615592 25834 net.cpp:139] Memory required for data: 200960
I0428 19:45:36.615598 25834 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:36.615613 25834 net.cpp:86] Creating Layer conv0
I0428 19:45:36.615618 25834 net.cpp:408] conv0 <- data
I0428 19:45:36.615629 25834 net.cpp:382] conv0 -> conv0
I0428 19:45:36.906960 25834 net.cpp:124] Setting up conv0
I0428 19:45:36.906991 25834 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:36.906996 25834 net.cpp:139] Memory required for data: 495872
I0428 19:45:36.907038 25834 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:36.907054 25834 net.cpp:86] Creating Layer pool0
I0428 19:45:36.907058 25834 net.cpp:408] pool0 <- conv0
I0428 19:45:36.907065 25834 net.cpp:382] pool0 -> pool0
I0428 19:45:36.907121 25834 net.cpp:124] Setting up pool0
I0428 19:45:36.907131 25834 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:36.907135 25834 net.cpp:139] Memory required for data: 569600
I0428 19:45:36.907138 25834 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:36.907151 25834 net.cpp:86] Creating Layer conv1
I0428 19:45:36.907155 25834 net.cpp:408] conv1 <- pool0
I0428 19:45:36.907160 25834 net.cpp:382] conv1 -> conv1
I0428 19:45:36.910347 25834 net.cpp:124] Setting up conv1
I0428 19:45:36.910367 25834 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:36.910370 25834 net.cpp:139] Memory required for data: 2208000
I0428 19:45:36.910380 25834 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:36.910389 25834 net.cpp:86] Creating Layer pool1
I0428 19:45:36.910393 25834 net.cpp:408] pool1 <- conv1
I0428 19:45:36.910400 25834 net.cpp:382] pool1 -> pool1
I0428 19:45:36.910445 25834 net.cpp:124] Setting up pool1
I0428 19:45:36.910451 25834 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:36.910455 25834 net.cpp:139] Memory required for data: 2617600
I0428 19:45:36.910459 25834 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:36.910467 25834 net.cpp:86] Creating Layer ip1
I0428 19:45:36.910470 25834 net.cpp:408] ip1 <- pool1
I0428 19:45:36.910475 25834 net.cpp:382] ip1 -> ip1
I0428 19:45:36.910864 25834 net.cpp:124] Setting up ip1
I0428 19:45:36.910873 25834 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:36.910877 25834 net.cpp:139] Memory required for data: 2624000
I0428 19:45:36.910886 25834 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:36.910892 25834 net.cpp:86] Creating Layer relu1
I0428 19:45:36.910895 25834 net.cpp:408] relu1 <- ip1
I0428 19:45:36.910900 25834 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:36.911098 25834 net.cpp:124] Setting up relu1
I0428 19:45:36.911108 25834 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:45:36.911113 25834 net.cpp:139] Memory required for data: 2630400
I0428 19:45:36.911116 25834 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:36.911123 25834 net.cpp:86] Creating Layer ip2
I0428 19:45:36.911128 25834 net.cpp:408] ip2 <- ip1
I0428 19:45:36.911134 25834 net.cpp:382] ip2 -> ip2
I0428 19:45:36.911244 25834 net.cpp:124] Setting up ip2
I0428 19:45:36.911253 25834 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:36.911257 25834 net.cpp:139] Memory required for data: 2632960
I0428 19:45:36.911263 25834 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:36.911270 25834 net.cpp:86] Creating Layer relu2
I0428 19:45:36.911273 25834 net.cpp:408] relu2 <- ip2
I0428 19:45:36.911278 25834 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:36.912124 25834 net.cpp:124] Setting up relu2
I0428 19:45:36.912139 25834 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:36.912143 25834 net.cpp:139] Memory required for data: 2635520
I0428 19:45:36.912147 25834 layer_factory.hpp:77] Creating layer loss
I0428 19:45:36.912155 25834 net.cpp:86] Creating Layer loss
I0428 19:45:36.912159 25834 net.cpp:408] loss <- ip2
I0428 19:45:36.912165 25834 net.cpp:408] loss <- label
I0428 19:45:36.912171 25834 net.cpp:382] loss -> loss
I0428 19:45:36.912195 25834 layer_factory.hpp:77] Creating layer loss
I0428 19:45:36.912477 25834 net.cpp:124] Setting up loss
I0428 19:45:36.912487 25834 net.cpp:131] Top shape: (1)
I0428 19:45:36.912492 25834 net.cpp:134]     with loss weight 1
I0428 19:45:36.912508 25834 net.cpp:139] Memory required for data: 2635524
I0428 19:45:36.912511 25834 net.cpp:200] loss needs backward computation.
I0428 19:45:36.912515 25834 net.cpp:200] relu2 needs backward computation.
I0428 19:45:36.912519 25834 net.cpp:200] ip2 needs backward computation.
I0428 19:45:36.912523 25834 net.cpp:200] relu1 needs backward computation.
I0428 19:45:36.912525 25834 net.cpp:200] ip1 needs backward computation.
I0428 19:45:36.912541 25834 net.cpp:200] pool1 needs backward computation.
I0428 19:45:36.912545 25834 net.cpp:200] conv1 needs backward computation.
I0428 19:45:36.912549 25834 net.cpp:200] pool0 needs backward computation.
I0428 19:45:36.912554 25834 net.cpp:200] conv0 needs backward computation.
I0428 19:45:36.912557 25834 net.cpp:202] mnist does not need backward computation.
I0428 19:45:36.912560 25834 net.cpp:244] This network produces output loss
I0428 19:45:36.912571 25834 net.cpp:257] Network initialization done.
I0428 19:45:36.912930 25834 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test475.prototxt
I0428 19:45:36.912961 25834 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:36.913059 25834 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:36.913134 25834 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:36.913185 25834 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:36.913199 25834 net.cpp:86] Creating Layer mnist
I0428 19:45:36.913205 25834 net.cpp:382] mnist -> data
I0428 19:45:36.913214 25834 net.cpp:382] mnist -> label
I0428 19:45:36.913322 25834 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:36.915525 25834 net.cpp:124] Setting up mnist
I0428 19:45:36.915540 25834 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:36.915546 25834 net.cpp:131] Top shape: 100 (100)
I0428 19:45:36.915549 25834 net.cpp:139] Memory required for data: 314000
I0428 19:45:36.915554 25834 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:36.915565 25834 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:36.915570 25834 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:36.915590 25834 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:36.915598 25834 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:36.915653 25834 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:36.915684 25834 net.cpp:131] Top shape: 100 (100)
I0428 19:45:36.915689 25834 net.cpp:131] Top shape: 100 (100)
I0428 19:45:36.915693 25834 net.cpp:139] Memory required for data: 314800
I0428 19:45:36.915698 25834 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:36.915709 25834 net.cpp:86] Creating Layer conv0
I0428 19:45:36.915712 25834 net.cpp:408] conv0 <- data
I0428 19:45:36.915719 25834 net.cpp:382] conv0 -> conv0
I0428 19:45:36.917845 25834 net.cpp:124] Setting up conv0
I0428 19:45:36.917861 25834 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:36.917865 25834 net.cpp:139] Memory required for data: 775600
I0428 19:45:36.917877 25834 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:36.917884 25834 net.cpp:86] Creating Layer pool0
I0428 19:45:36.917888 25834 net.cpp:408] pool0 <- conv0
I0428 19:45:36.917896 25834 net.cpp:382] pool0 -> pool0
I0428 19:45:36.917939 25834 net.cpp:124] Setting up pool0
I0428 19:45:36.917946 25834 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:36.917949 25834 net.cpp:139] Memory required for data: 890800
I0428 19:45:36.917953 25834 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:36.917968 25834 net.cpp:86] Creating Layer conv1
I0428 19:45:36.917973 25834 net.cpp:408] conv1 <- pool0
I0428 19:45:36.917979 25834 net.cpp:382] conv1 -> conv1
I0428 19:45:36.919899 25834 net.cpp:124] Setting up conv1
I0428 19:45:36.919915 25834 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:36.919919 25834 net.cpp:139] Memory required for data: 3450800
I0428 19:45:36.919930 25834 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:36.919939 25834 net.cpp:86] Creating Layer pool1
I0428 19:45:36.919944 25834 net.cpp:408] pool1 <- conv1
I0428 19:45:36.919950 25834 net.cpp:382] pool1 -> pool1
I0428 19:45:36.919996 25834 net.cpp:124] Setting up pool1
I0428 19:45:36.920003 25834 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:36.920006 25834 net.cpp:139] Memory required for data: 4090800
I0428 19:45:36.920011 25834 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:36.920017 25834 net.cpp:86] Creating Layer ip1
I0428 19:45:36.920022 25834 net.cpp:408] ip1 <- pool1
I0428 19:45:36.920028 25834 net.cpp:382] ip1 -> ip1
I0428 19:45:36.920431 25834 net.cpp:124] Setting up ip1
I0428 19:45:36.920440 25834 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:36.920444 25834 net.cpp:139] Memory required for data: 4100800
I0428 19:45:36.920452 25834 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:36.920459 25834 net.cpp:86] Creating Layer relu1
I0428 19:45:36.920464 25834 net.cpp:408] relu1 <- ip1
I0428 19:45:36.920469 25834 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:36.920666 25834 net.cpp:124] Setting up relu1
I0428 19:45:36.920678 25834 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:45:36.920682 25834 net.cpp:139] Memory required for data: 4110800
I0428 19:45:36.920686 25834 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:36.920696 25834 net.cpp:86] Creating Layer ip2
I0428 19:45:36.920699 25834 net.cpp:408] ip2 <- ip1
I0428 19:45:36.920706 25834 net.cpp:382] ip2 -> ip2
I0428 19:45:36.920871 25834 net.cpp:124] Setting up ip2
I0428 19:45:36.920881 25834 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:36.920883 25834 net.cpp:139] Memory required for data: 4114800
I0428 19:45:36.920891 25834 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:36.920898 25834 net.cpp:86] Creating Layer relu2
I0428 19:45:36.920902 25834 net.cpp:408] relu2 <- ip2
I0428 19:45:36.920907 25834 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:36.921149 25834 net.cpp:124] Setting up relu2
I0428 19:45:36.921159 25834 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:36.921164 25834 net.cpp:139] Memory required for data: 4118800
I0428 19:45:36.921167 25834 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:45:36.921175 25834 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:45:36.921178 25834 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:45:36.921185 25834 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:45:36.921202 25834 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:45:36.921249 25834 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:45:36.921257 25834 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:36.921269 25834 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:36.921273 25834 net.cpp:139] Memory required for data: 4126800
I0428 19:45:36.921277 25834 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:36.921283 25834 net.cpp:86] Creating Layer accuracy
I0428 19:45:36.921289 25834 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:45:36.921293 25834 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:36.921299 25834 net.cpp:382] accuracy -> accuracy
I0428 19:45:36.921308 25834 net.cpp:124] Setting up accuracy
I0428 19:45:36.921314 25834 net.cpp:131] Top shape: (1)
I0428 19:45:36.921316 25834 net.cpp:139] Memory required for data: 4126804
I0428 19:45:36.921324 25834 layer_factory.hpp:77] Creating layer loss
I0428 19:45:36.921330 25834 net.cpp:86] Creating Layer loss
I0428 19:45:36.921334 25834 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:45:36.921339 25834 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:36.921345 25834 net.cpp:382] loss -> loss
I0428 19:45:36.921352 25834 layer_factory.hpp:77] Creating layer loss
I0428 19:45:36.921639 25834 net.cpp:124] Setting up loss
I0428 19:45:36.921650 25834 net.cpp:131] Top shape: (1)
I0428 19:45:36.921654 25834 net.cpp:134]     with loss weight 1
I0428 19:45:36.921663 25834 net.cpp:139] Memory required for data: 4126808
I0428 19:45:36.921666 25834 net.cpp:200] loss needs backward computation.
I0428 19:45:36.921670 25834 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:36.921674 25834 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:45:36.921679 25834 net.cpp:200] relu2 needs backward computation.
I0428 19:45:36.921681 25834 net.cpp:200] ip2 needs backward computation.
I0428 19:45:36.921685 25834 net.cpp:200] relu1 needs backward computation.
I0428 19:45:36.921689 25834 net.cpp:200] ip1 needs backward computation.
I0428 19:45:36.921694 25834 net.cpp:200] pool1 needs backward computation.
I0428 19:45:36.921697 25834 net.cpp:200] conv1 needs backward computation.
I0428 19:45:36.921701 25834 net.cpp:200] pool0 needs backward computation.
I0428 19:45:36.921705 25834 net.cpp:200] conv0 needs backward computation.
I0428 19:45:36.921710 25834 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:36.921713 25834 net.cpp:202] mnist does not need backward computation.
I0428 19:45:36.921716 25834 net.cpp:244] This network produces output accuracy
I0428 19:45:36.921720 25834 net.cpp:244] This network produces output loss
I0428 19:45:36.921733 25834 net.cpp:257] Network initialization done.
I0428 19:45:36.921777 25834 solver.cpp:56] Solver scaffolding done.
I0428 19:45:36.922138 25834 caffe.cpp:248] Starting Optimization
I0428 19:45:36.922144 25834 solver.cpp:273] Solving LeNet
I0428 19:45:36.922147 25834 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:36.922425 25834 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:36.927752 25834 blocking_queue.cpp:49] Waiting for data
I0428 19:45:37.001572 25841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:37.002176 25834 solver.cpp:398]     Test net output #0: accuracy = 0.1029
I0428 19:45:37.002200 25834 solver.cpp:398]     Test net output #1: loss = 2.32687 (* 1 = 2.32687 loss)
I0428 19:45:37.006192 25834 solver.cpp:219] Iteration 0 (0 iter/s, 0.0839997s/100 iters), loss = 2.35533
I0428 19:45:37.006224 25834 solver.cpp:238]     Train net output #0: loss = 2.35533 (* 1 = 2.35533 loss)
I0428 19:45:37.006238 25834 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:37.155792 25834 solver.cpp:219] Iteration 100 (668.686 iter/s, 0.149547s/100 iters), loss = 0.836777
I0428 19:45:37.155827 25834 solver.cpp:238]     Train net output #0: loss = 0.836777 (* 1 = 0.836777 loss)
I0428 19:45:37.155834 25834 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:37.291978 25834 solver.cpp:219] Iteration 200 (734.534 iter/s, 0.136141s/100 iters), loss = 0.491036
I0428 19:45:37.292021 25834 solver.cpp:238]     Train net output #0: loss = 0.491036 (* 1 = 0.491036 loss)
I0428 19:45:37.292029 25834 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:37.468663 25834 solver.cpp:219] Iteration 300 (566.169 iter/s, 0.176626s/100 iters), loss = 0.905762
I0428 19:45:37.468714 25834 solver.cpp:238]     Train net output #0: loss = 0.905762 (* 1 = 0.905762 loss)
I0428 19:45:37.468727 25834 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:37.647616 25834 solver.cpp:219] Iteration 400 (559.01 iter/s, 0.178888s/100 iters), loss = 0.525457
I0428 19:45:37.647668 25834 solver.cpp:238]     Train net output #0: loss = 0.525457 (* 1 = 0.525457 loss)
I0428 19:45:37.647682 25834 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:37.827173 25834 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:37.890697 25841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:37.892622 25834 solver.cpp:398]     Test net output #0: accuracy = 0.7738
I0428 19:45:37.892657 25834 solver.cpp:398]     Test net output #1: loss = 0.584308 (* 1 = 0.584308 loss)
I0428 19:45:37.894192 25834 solver.cpp:219] Iteration 500 (405.664 iter/s, 0.24651s/100 iters), loss = 0.584966
I0428 19:45:37.894227 25834 solver.cpp:238]     Train net output #0: loss = 0.584966 (* 1 = 0.584966 loss)
I0428 19:45:37.894235 25834 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:38.063544 25834 solver.cpp:219] Iteration 600 (590.657 iter/s, 0.169303s/100 iters), loss = 0.605556
I0428 19:45:38.063586 25834 solver.cpp:238]     Train net output #0: loss = 0.605556 (* 1 = 0.605556 loss)
I0428 19:45:38.063596 25834 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:38.235718 25834 solver.cpp:219] Iteration 700 (580.997 iter/s, 0.172118s/100 iters), loss = 0.470584
I0428 19:45:38.235772 25834 solver.cpp:238]     Train net output #0: loss = 0.470584 (* 1 = 0.470584 loss)
I0428 19:45:38.235783 25834 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:38.406204 25834 solver.cpp:219] Iteration 800 (586.759 iter/s, 0.170428s/100 iters), loss = 0.464531
I0428 19:45:38.406245 25834 solver.cpp:238]     Train net output #0: loss = 0.464531 (* 1 = 0.464531 loss)
I0428 19:45:38.406256 25834 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:38.575122 25834 solver.cpp:219] Iteration 900 (592.197 iter/s, 0.168863s/100 iters), loss = 0.549966
I0428 19:45:38.575166 25834 solver.cpp:238]     Train net output #0: loss = 0.549966 (* 1 = 0.549966 loss)
I0428 19:45:38.575179 25834 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:38.631990 25840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:38.745227 25834 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:38.747505 25834 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:38.748643 25834 solver.cpp:311] Iteration 1000, loss = 0.484804
I0428 19:45:38.748667 25834 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:38.809597 25841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:38.811610 25834 solver.cpp:398]     Test net output #0: accuracy = 0.8789
I0428 19:45:38.811652 25834 solver.cpp:398]     Test net output #1: loss = 0.329842 (* 1 = 0.329842 loss)
I0428 19:45:38.811661 25834 solver.cpp:316] Optimization Done.
I0428 19:45:38.811666 25834 caffe.cpp:259] Optimization Done.
