I0428 19:49:57.216225 26895 caffe.cpp:218] Using GPUs 0
I0428 19:49:57.247076 26895 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:57.694774 26895 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test590.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:57.694917 26895 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test590.prototxt
I0428 19:49:57.695241 26895 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:57.695256 26895 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:57.695332 26895 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:49:57.695391 26895 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:57.695473 26895 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:57.695494 26895 net.cpp:86] Creating Layer mnist
I0428 19:49:57.695502 26895 net.cpp:382] mnist -> data
I0428 19:49:57.695519 26895 net.cpp:382] mnist -> label
I0428 19:49:57.696522 26895 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:57.698791 26895 net.cpp:124] Setting up mnist
I0428 19:49:57.698807 26895 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:57.698812 26895 net.cpp:131] Top shape: 64 (64)
I0428 19:49:57.698815 26895 net.cpp:139] Memory required for data: 200960
I0428 19:49:57.698822 26895 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:57.698837 26895 net.cpp:86] Creating Layer conv0
I0428 19:49:57.698840 26895 net.cpp:408] conv0 <- data
I0428 19:49:57.698850 26895 net.cpp:382] conv0 -> conv0
I0428 19:49:57.934007 26895 net.cpp:124] Setting up conv0
I0428 19:49:57.934033 26895 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:57.934037 26895 net.cpp:139] Memory required for data: 938240
I0428 19:49:57.934084 26895 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:57.934099 26895 net.cpp:86] Creating Layer pool0
I0428 19:49:57.934103 26895 net.cpp:408] pool0 <- conv0
I0428 19:49:57.934108 26895 net.cpp:382] pool0 -> pool0
I0428 19:49:57.934155 26895 net.cpp:124] Setting up pool0
I0428 19:49:57.934162 26895 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:57.934165 26895 net.cpp:139] Memory required for data: 1122560
I0428 19:49:57.934170 26895 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:57.934181 26895 net.cpp:86] Creating Layer conv1
I0428 19:49:57.934185 26895 net.cpp:408] conv1 <- pool0
I0428 19:49:57.934190 26895 net.cpp:382] conv1 -> conv1
I0428 19:49:57.937036 26895 net.cpp:124] Setting up conv1
I0428 19:49:57.937052 26895 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:49:57.937055 26895 net.cpp:139] Memory required for data: 1286400
I0428 19:49:57.937063 26895 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:57.937070 26895 net.cpp:86] Creating Layer pool1
I0428 19:49:57.937074 26895 net.cpp:408] pool1 <- conv1
I0428 19:49:57.937079 26895 net.cpp:382] pool1 -> pool1
I0428 19:49:57.937114 26895 net.cpp:124] Setting up pool1
I0428 19:49:57.937121 26895 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:49:57.937124 26895 net.cpp:139] Memory required for data: 1327360
I0428 19:49:57.937127 26895 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:57.937134 26895 net.cpp:86] Creating Layer ip1
I0428 19:49:57.937137 26895 net.cpp:408] ip1 <- pool1
I0428 19:49:57.937141 26895 net.cpp:382] ip1 -> ip1
I0428 19:49:57.937245 26895 net.cpp:124] Setting up ip1
I0428 19:49:57.937252 26895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:57.937255 26895 net.cpp:139] Memory required for data: 1329920
I0428 19:49:57.937263 26895 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:57.937268 26895 net.cpp:86] Creating Layer relu1
I0428 19:49:57.937270 26895 net.cpp:408] relu1 <- ip1
I0428 19:49:57.937274 26895 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:57.937427 26895 net.cpp:124] Setting up relu1
I0428 19:49:57.937436 26895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:57.937439 26895 net.cpp:139] Memory required for data: 1332480
I0428 19:49:57.937443 26895 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:57.937448 26895 net.cpp:86] Creating Layer ip2
I0428 19:49:57.937451 26895 net.cpp:408] ip2 <- ip1
I0428 19:49:57.937455 26895 net.cpp:382] ip2 -> ip2
I0428 19:49:57.937542 26895 net.cpp:124] Setting up ip2
I0428 19:49:57.937549 26895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:57.937552 26895 net.cpp:139] Memory required for data: 1335040
I0428 19:49:57.937557 26895 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:57.937562 26895 net.cpp:86] Creating Layer relu2
I0428 19:49:57.937566 26895 net.cpp:408] relu2 <- ip2
I0428 19:49:57.937569 26895 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:57.938288 26895 net.cpp:124] Setting up relu2
I0428 19:49:57.938300 26895 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:57.938303 26895 net.cpp:139] Memory required for data: 1337600
I0428 19:49:57.938307 26895 layer_factory.hpp:77] Creating layer loss
I0428 19:49:57.938313 26895 net.cpp:86] Creating Layer loss
I0428 19:49:57.938316 26895 net.cpp:408] loss <- ip2
I0428 19:49:57.938320 26895 net.cpp:408] loss <- label
I0428 19:49:57.938325 26895 net.cpp:382] loss -> loss
I0428 19:49:57.938344 26895 layer_factory.hpp:77] Creating layer loss
I0428 19:49:57.938568 26895 net.cpp:124] Setting up loss
I0428 19:49:57.938593 26895 net.cpp:131] Top shape: (1)
I0428 19:49:57.938596 26895 net.cpp:134]     with loss weight 1
I0428 19:49:57.938611 26895 net.cpp:139] Memory required for data: 1337604
I0428 19:49:57.938616 26895 net.cpp:200] loss needs backward computation.
I0428 19:49:57.938619 26895 net.cpp:200] relu2 needs backward computation.
I0428 19:49:57.938622 26895 net.cpp:200] ip2 needs backward computation.
I0428 19:49:57.938626 26895 net.cpp:200] relu1 needs backward computation.
I0428 19:49:57.938627 26895 net.cpp:200] ip1 needs backward computation.
I0428 19:49:57.938640 26895 net.cpp:200] pool1 needs backward computation.
I0428 19:49:57.938644 26895 net.cpp:200] conv1 needs backward computation.
I0428 19:49:57.938647 26895 net.cpp:200] pool0 needs backward computation.
I0428 19:49:57.938650 26895 net.cpp:200] conv0 needs backward computation.
I0428 19:49:57.938653 26895 net.cpp:202] mnist does not need backward computation.
I0428 19:49:57.938657 26895 net.cpp:244] This network produces output loss
I0428 19:49:57.938665 26895 net.cpp:257] Network initialization done.
I0428 19:49:57.938963 26895 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test590.prototxt
I0428 19:49:57.938988 26895 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:57.939067 26895 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:49:57.939139 26895 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:57.939182 26895 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:57.939193 26895 net.cpp:86] Creating Layer mnist
I0428 19:49:57.939198 26895 net.cpp:382] mnist -> data
I0428 19:49:57.939204 26895 net.cpp:382] mnist -> label
I0428 19:49:57.939281 26895 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:57.941334 26895 net.cpp:124] Setting up mnist
I0428 19:49:57.941346 26895 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:57.941367 26895 net.cpp:131] Top shape: 100 (100)
I0428 19:49:57.941370 26895 net.cpp:139] Memory required for data: 314000
I0428 19:49:57.941375 26895 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:57.941383 26895 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:57.941387 26895 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:57.941392 26895 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:57.941398 26895 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:57.941506 26895 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:57.941524 26895 net.cpp:131] Top shape: 100 (100)
I0428 19:49:57.941529 26895 net.cpp:131] Top shape: 100 (100)
I0428 19:49:57.941531 26895 net.cpp:139] Memory required for data: 314800
I0428 19:49:57.941534 26895 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:57.941543 26895 net.cpp:86] Creating Layer conv0
I0428 19:49:57.941546 26895 net.cpp:408] conv0 <- data
I0428 19:49:57.941551 26895 net.cpp:382] conv0 -> conv0
I0428 19:49:57.943198 26895 net.cpp:124] Setting up conv0
I0428 19:49:57.943228 26895 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:57.943231 26895 net.cpp:139] Memory required for data: 1466800
I0428 19:49:57.943241 26895 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:57.943248 26895 net.cpp:86] Creating Layer pool0
I0428 19:49:57.943253 26895 net.cpp:408] pool0 <- conv0
I0428 19:49:57.943256 26895 net.cpp:382] pool0 -> pool0
I0428 19:49:57.943292 26895 net.cpp:124] Setting up pool0
I0428 19:49:57.943298 26895 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:57.943301 26895 net.cpp:139] Memory required for data: 1754800
I0428 19:49:57.943305 26895 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:57.943312 26895 net.cpp:86] Creating Layer conv1
I0428 19:49:57.943315 26895 net.cpp:408] conv1 <- pool0
I0428 19:49:57.943320 26895 net.cpp:382] conv1 -> conv1
I0428 19:49:57.945477 26895 net.cpp:124] Setting up conv1
I0428 19:49:57.945505 26895 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:49:57.945509 26895 net.cpp:139] Memory required for data: 2010800
I0428 19:49:57.945518 26895 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:57.945524 26895 net.cpp:86] Creating Layer pool1
I0428 19:49:57.945528 26895 net.cpp:408] pool1 <- conv1
I0428 19:49:57.945533 26895 net.cpp:382] pool1 -> pool1
I0428 19:49:57.945590 26895 net.cpp:124] Setting up pool1
I0428 19:49:57.945611 26895 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:49:57.945613 26895 net.cpp:139] Memory required for data: 2074800
I0428 19:49:57.945617 26895 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:57.945623 26895 net.cpp:86] Creating Layer ip1
I0428 19:49:57.945626 26895 net.cpp:408] ip1 <- pool1
I0428 19:49:57.945631 26895 net.cpp:382] ip1 -> ip1
I0428 19:49:57.945765 26895 net.cpp:124] Setting up ip1
I0428 19:49:57.945773 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.945781 26895 net.cpp:139] Memory required for data: 2078800
I0428 19:49:57.945788 26895 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:57.945793 26895 net.cpp:86] Creating Layer relu1
I0428 19:49:57.945796 26895 net.cpp:408] relu1 <- ip1
I0428 19:49:57.945801 26895 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:57.945961 26895 net.cpp:124] Setting up relu1
I0428 19:49:57.945971 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.945974 26895 net.cpp:139] Memory required for data: 2082800
I0428 19:49:57.945977 26895 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:57.945984 26895 net.cpp:86] Creating Layer ip2
I0428 19:49:57.945988 26895 net.cpp:408] ip2 <- ip1
I0428 19:49:57.945999 26895 net.cpp:382] ip2 -> ip2
I0428 19:49:57.946121 26895 net.cpp:124] Setting up ip2
I0428 19:49:57.946128 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.946131 26895 net.cpp:139] Memory required for data: 2086800
I0428 19:49:57.946141 26895 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:57.946146 26895 net.cpp:86] Creating Layer relu2
I0428 19:49:57.946149 26895 net.cpp:408] relu2 <- ip2
I0428 19:49:57.946153 26895 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:57.946300 26895 net.cpp:124] Setting up relu2
I0428 19:49:57.946308 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.946311 26895 net.cpp:139] Memory required for data: 2090800
I0428 19:49:57.946315 26895 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:49:57.946324 26895 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:49:57.946327 26895 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:49:57.946331 26895 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:49:57.946347 26895 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:49:57.946398 26895 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:49:57.946420 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.946445 26895 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:57.946449 26895 net.cpp:139] Memory required for data: 2098800
I0428 19:49:57.946452 26895 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:57.946457 26895 net.cpp:86] Creating Layer accuracy
I0428 19:49:57.946461 26895 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:49:57.946470 26895 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:57.946473 26895 net.cpp:382] accuracy -> accuracy
I0428 19:49:57.946486 26895 net.cpp:124] Setting up accuracy
I0428 19:49:57.946491 26895 net.cpp:131] Top shape: (1)
I0428 19:49:57.946502 26895 net.cpp:139] Memory required for data: 2098804
I0428 19:49:57.946506 26895 layer_factory.hpp:77] Creating layer loss
I0428 19:49:57.946509 26895 net.cpp:86] Creating Layer loss
I0428 19:49:57.946513 26895 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:49:57.946516 26895 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:57.946521 26895 net.cpp:382] loss -> loss
I0428 19:49:57.946527 26895 layer_factory.hpp:77] Creating layer loss
I0428 19:49:57.946877 26895 net.cpp:124] Setting up loss
I0428 19:49:57.946887 26895 net.cpp:131] Top shape: (1)
I0428 19:49:57.946905 26895 net.cpp:134]     with loss weight 1
I0428 19:49:57.946912 26895 net.cpp:139] Memory required for data: 2098808
I0428 19:49:57.946934 26895 net.cpp:200] loss needs backward computation.
I0428 19:49:57.946938 26895 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:57.946943 26895 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:49:57.946945 26895 net.cpp:200] relu2 needs backward computation.
I0428 19:49:57.946949 26895 net.cpp:200] ip2 needs backward computation.
I0428 19:49:57.946951 26895 net.cpp:200] relu1 needs backward computation.
I0428 19:49:57.946954 26895 net.cpp:200] ip1 needs backward computation.
I0428 19:49:57.946961 26895 net.cpp:200] pool1 needs backward computation.
I0428 19:49:57.946979 26895 net.cpp:200] conv1 needs backward computation.
I0428 19:49:57.946982 26895 net.cpp:200] pool0 needs backward computation.
I0428 19:49:57.946990 26895 net.cpp:200] conv0 needs backward computation.
I0428 19:49:57.946998 26895 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:57.947002 26895 net.cpp:202] mnist does not need backward computation.
I0428 19:49:57.947005 26895 net.cpp:244] This network produces output accuracy
I0428 19:49:57.947008 26895 net.cpp:244] This network produces output loss
I0428 19:49:57.947018 26895 net.cpp:257] Network initialization done.
I0428 19:49:57.947072 26895 solver.cpp:56] Solver scaffolding done.
I0428 19:49:57.947376 26895 caffe.cpp:248] Starting Optimization
I0428 19:49:57.947382 26895 solver.cpp:273] Solving LeNet
I0428 19:49:57.947405 26895 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:57.947561 26895 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:57.951138 26895 blocking_queue.cpp:49] Waiting for data
I0428 19:49:58.020475 26902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:58.020985 26895 solver.cpp:398]     Test net output #0: accuracy = 0.1055
I0428 19:49:58.021005 26895 solver.cpp:398]     Test net output #1: loss = 2.32028 (* 1 = 2.32028 loss)
I0428 19:49:58.022778 26895 solver.cpp:219] Iteration 0 (0 iter/s, 0.0753332s/100 iters), loss = 2.33434
I0428 19:49:58.022815 26895 solver.cpp:238]     Train net output #0: loss = 2.33434 (* 1 = 2.33434 loss)
I0428 19:49:58.022828 26895 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:58.095137 26895 solver.cpp:219] Iteration 100 (1382.63 iter/s, 0.0723261s/100 iters), loss = 1.29436
I0428 19:49:58.095170 26895 solver.cpp:238]     Train net output #0: loss = 1.29436 (* 1 = 1.29436 loss)
I0428 19:49:58.095180 26895 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:58.168717 26895 solver.cpp:219] Iteration 200 (1359.83 iter/s, 0.0735384s/100 iters), loss = 0.821484
I0428 19:49:58.168758 26895 solver.cpp:238]     Train net output #0: loss = 0.821484 (* 1 = 0.821484 loss)
I0428 19:49:58.168766 26895 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:58.236312 26895 solver.cpp:219] Iteration 300 (1480.47 iter/s, 0.0675461s/100 iters), loss = 0.329028
I0428 19:49:58.236351 26895 solver.cpp:238]     Train net output #0: loss = 0.329028 (* 1 = 0.329028 loss)
I0428 19:49:58.236356 26895 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:58.302726 26895 solver.cpp:219] Iteration 400 (1506.41 iter/s, 0.0663828s/100 iters), loss = 0.279184
I0428 19:49:58.302763 26895 solver.cpp:238]     Train net output #0: loss = 0.279184 (* 1 = 0.279184 loss)
I0428 19:49:58.302785 26895 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:58.369231 26895 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:58.422941 26902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:58.423476 26895 solver.cpp:398]     Test net output #0: accuracy = 0.9359
I0428 19:49:58.423511 26895 solver.cpp:398]     Test net output #1: loss = 0.21284 (* 1 = 0.21284 loss)
I0428 19:49:58.424230 26895 solver.cpp:219] Iteration 500 (823.235 iter/s, 0.121472s/100 iters), loss = 0.211476
I0428 19:49:58.424268 26895 solver.cpp:238]     Train net output #0: loss = 0.211475 (* 1 = 0.211475 loss)
I0428 19:49:58.424276 26895 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:58.490530 26895 solver.cpp:219] Iteration 600 (1508.97 iter/s, 0.0662702s/100 iters), loss = 0.1238
I0428 19:49:58.490569 26895 solver.cpp:238]     Train net output #0: loss = 0.1238 (* 1 = 0.1238 loss)
I0428 19:49:58.490576 26895 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:58.557107 26895 solver.cpp:219] Iteration 700 (1502.75 iter/s, 0.0665446s/100 iters), loss = 0.350481
I0428 19:49:58.557128 26895 solver.cpp:238]     Train net output #0: loss = 0.350481 (* 1 = 0.350481 loss)
I0428 19:49:58.557134 26895 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:58.624117 26895 solver.cpp:219] Iteration 800 (1492.99 iter/s, 0.0669798s/100 iters), loss = 0.302969
I0428 19:49:58.624155 26895 solver.cpp:238]     Train net output #0: loss = 0.302969 (* 1 = 0.302969 loss)
I0428 19:49:58.624161 26895 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:58.690912 26895 solver.cpp:219] Iteration 900 (1497.8 iter/s, 0.0667648s/100 iters), loss = 0.227276
I0428 19:49:58.690949 26895 solver.cpp:238]     Train net output #0: loss = 0.227276 (* 1 = 0.227276 loss)
I0428 19:49:58.690955 26895 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:58.713397 26901 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:58.757344 26895 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:58.757932 26895 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:58.758347 26895 solver.cpp:311] Iteration 1000, loss = 0.0877304
I0428 19:49:58.758361 26895 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:58.811425 26902 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:58.811921 26895 solver.cpp:398]     Test net output #0: accuracy = 0.9618
I0428 19:49:58.811940 26895 solver.cpp:398]     Test net output #1: loss = 0.124056 (* 1 = 0.124056 loss)
I0428 19:49:58.811946 26895 solver.cpp:316] Optimization Done.
I0428 19:49:58.811950 26895 caffe.cpp:259] Optimization Done.
