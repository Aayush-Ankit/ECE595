I0428 20:04:11.542644 30338 caffe.cpp:218] Using GPUs 0
I0428 20:04:11.579535 30338 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:04:12.080879 30338 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test967.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:04:12.081022 30338 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test967.prototxt
I0428 20:04:12.081439 30338 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:04:12.081459 30338 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:04:12.081564 30338 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:04:12.081645 30338 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:12.081744 30338 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:04:12.081768 30338 net.cpp:86] Creating Layer mnist
I0428 20:04:12.081779 30338 net.cpp:382] mnist -> data
I0428 20:04:12.081800 30338 net.cpp:382] mnist -> label
I0428 20:04:12.082901 30338 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:04:12.085355 30338 net.cpp:124] Setting up mnist
I0428 20:04:12.085373 30338 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:04:12.085381 30338 net.cpp:131] Top shape: 64 (64)
I0428 20:04:12.085383 30338 net.cpp:139] Memory required for data: 200960
I0428 20:04:12.085391 30338 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:12.085408 30338 net.cpp:86] Creating Layer conv0
I0428 20:04:12.085428 30338 net.cpp:408] conv0 <- data
I0428 20:04:12.085449 30338 net.cpp:382] conv0 -> conv0
I0428 20:04:12.371513 30338 net.cpp:124] Setting up conv0
I0428 20:04:12.371542 30338 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:04:12.371547 30338 net.cpp:139] Memory required for data: 1675520
I0428 20:04:12.371562 30338 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:12.371577 30338 net.cpp:86] Creating Layer pool0
I0428 20:04:12.371582 30338 net.cpp:408] pool0 <- conv0
I0428 20:04:12.371587 30338 net.cpp:382] pool0 -> pool0
I0428 20:04:12.371634 30338 net.cpp:124] Setting up pool0
I0428 20:04:12.371639 30338 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:04:12.371642 30338 net.cpp:139] Memory required for data: 2044160
I0428 20:04:12.371645 30338 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:12.371656 30338 net.cpp:86] Creating Layer conv1
I0428 20:04:12.371659 30338 net.cpp:408] conv1 <- pool0
I0428 20:04:12.371665 30338 net.cpp:382] conv1 -> conv1
I0428 20:04:12.373663 30338 net.cpp:124] Setting up conv1
I0428 20:04:12.373678 30338 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:04:12.373682 30338 net.cpp:139] Memory required for data: 3682560
I0428 20:04:12.373692 30338 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:12.373699 30338 net.cpp:86] Creating Layer pool1
I0428 20:04:12.373703 30338 net.cpp:408] pool1 <- conv1
I0428 20:04:12.373708 30338 net.cpp:382] pool1 -> pool1
I0428 20:04:12.373745 30338 net.cpp:124] Setting up pool1
I0428 20:04:12.373751 30338 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:04:12.373754 30338 net.cpp:139] Memory required for data: 4092160
I0428 20:04:12.373757 30338 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:12.373764 30338 net.cpp:86] Creating Layer ip1
I0428 20:04:12.373767 30338 net.cpp:408] ip1 <- pool1
I0428 20:04:12.373772 30338 net.cpp:382] ip1 -> ip1
I0428 20:04:12.375170 30338 net.cpp:124] Setting up ip1
I0428 20:04:12.375185 30338 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:04:12.375190 30338 net.cpp:139] Memory required for data: 4104960
I0428 20:04:12.375197 30338 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:12.375203 30338 net.cpp:86] Creating Layer relu1
I0428 20:04:12.375207 30338 net.cpp:408] relu1 <- ip1
I0428 20:04:12.375212 30338 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:12.375382 30338 net.cpp:124] Setting up relu1
I0428 20:04:12.375391 30338 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:04:12.375394 30338 net.cpp:139] Memory required for data: 4117760
I0428 20:04:12.375398 30338 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:12.375406 30338 net.cpp:86] Creating Layer ip2
I0428 20:04:12.375408 30338 net.cpp:408] ip2 <- ip1
I0428 20:04:12.375413 30338 net.cpp:382] ip2 -> ip2
I0428 20:04:12.375516 30338 net.cpp:124] Setting up ip2
I0428 20:04:12.375527 30338 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:12.375530 30338 net.cpp:139] Memory required for data: 4120320
I0428 20:04:12.375536 30338 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:12.375542 30338 net.cpp:86] Creating Layer relu2
I0428 20:04:12.375545 30338 net.cpp:408] relu2 <- ip2
I0428 20:04:12.375550 30338 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:12.376281 30338 net.cpp:124] Setting up relu2
I0428 20:04:12.376294 30338 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:12.376298 30338 net.cpp:139] Memory required for data: 4122880
I0428 20:04:12.376302 30338 layer_factory.hpp:77] Creating layer ip3
I0428 20:04:12.376309 30338 net.cpp:86] Creating Layer ip3
I0428 20:04:12.376313 30338 net.cpp:408] ip3 <- ip2
I0428 20:04:12.376318 30338 net.cpp:382] ip3 -> ip3
I0428 20:04:12.376416 30338 net.cpp:124] Setting up ip3
I0428 20:04:12.376425 30338 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:12.376427 30338 net.cpp:139] Memory required for data: 4125440
I0428 20:04:12.376436 30338 layer_factory.hpp:77] Creating layer relu3
I0428 20:04:12.376441 30338 net.cpp:86] Creating Layer relu3
I0428 20:04:12.376444 30338 net.cpp:408] relu3 <- ip3
I0428 20:04:12.376448 30338 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:04:12.376616 30338 net.cpp:124] Setting up relu3
I0428 20:04:12.376628 30338 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:12.376633 30338 net.cpp:139] Memory required for data: 4128000
I0428 20:04:12.376639 30338 layer_factory.hpp:77] Creating layer loss
I0428 20:04:12.376652 30338 net.cpp:86] Creating Layer loss
I0428 20:04:12.376657 30338 net.cpp:408] loss <- ip3
I0428 20:04:12.376660 30338 net.cpp:408] loss <- label
I0428 20:04:12.376667 30338 net.cpp:382] loss -> loss
I0428 20:04:12.376680 30338 layer_factory.hpp:77] Creating layer loss
I0428 20:04:12.376924 30338 net.cpp:124] Setting up loss
I0428 20:04:12.376935 30338 net.cpp:131] Top shape: (1)
I0428 20:04:12.376937 30338 net.cpp:134]     with loss weight 1
I0428 20:04:12.376951 30338 net.cpp:139] Memory required for data: 4128004
I0428 20:04:12.376955 30338 net.cpp:200] loss needs backward computation.
I0428 20:04:12.376958 30338 net.cpp:200] relu3 needs backward computation.
I0428 20:04:12.376961 30338 net.cpp:200] ip3 needs backward computation.
I0428 20:04:12.376965 30338 net.cpp:200] relu2 needs backward computation.
I0428 20:04:12.376967 30338 net.cpp:200] ip2 needs backward computation.
I0428 20:04:12.376971 30338 net.cpp:200] relu1 needs backward computation.
I0428 20:04:12.376972 30338 net.cpp:200] ip1 needs backward computation.
I0428 20:04:12.376976 30338 net.cpp:200] pool1 needs backward computation.
I0428 20:04:12.376979 30338 net.cpp:200] conv1 needs backward computation.
I0428 20:04:12.376982 30338 net.cpp:200] pool0 needs backward computation.
I0428 20:04:12.376986 30338 net.cpp:200] conv0 needs backward computation.
I0428 20:04:12.376988 30338 net.cpp:202] mnist does not need backward computation.
I0428 20:04:12.376991 30338 net.cpp:244] This network produces output loss
I0428 20:04:12.377002 30338 net.cpp:257] Network initialization done.
I0428 20:04:12.377331 30338 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test967.prototxt
I0428 20:04:12.377359 30338 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:04:12.377454 30338 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:04:12.377542 30338 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:12.377585 30338 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:04:12.377599 30338 net.cpp:86] Creating Layer mnist
I0428 20:04:12.377604 30338 net.cpp:382] mnist -> data
I0428 20:04:12.377611 30338 net.cpp:382] mnist -> label
I0428 20:04:12.377701 30338 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:04:12.378782 30338 net.cpp:124] Setting up mnist
I0428 20:04:12.378794 30338 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:04:12.378799 30338 net.cpp:131] Top shape: 100 (100)
I0428 20:04:12.378803 30338 net.cpp:139] Memory required for data: 314000
I0428 20:04:12.378806 30338 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:04:12.378813 30338 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:04:12.378816 30338 net.cpp:408] label_mnist_1_split <- label
I0428 20:04:12.378844 30338 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:04:12.378851 30338 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:04:12.378893 30338 net.cpp:124] Setting up label_mnist_1_split
I0428 20:04:12.378901 30338 net.cpp:131] Top shape: 100 (100)
I0428 20:04:12.378904 30338 net.cpp:131] Top shape: 100 (100)
I0428 20:04:12.378907 30338 net.cpp:139] Memory required for data: 314800
I0428 20:04:12.378911 30338 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:12.378922 30338 net.cpp:86] Creating Layer conv0
I0428 20:04:12.378926 30338 net.cpp:408] conv0 <- data
I0428 20:04:12.378931 30338 net.cpp:382] conv0 -> conv0
I0428 20:04:12.380630 30338 net.cpp:124] Setting up conv0
I0428 20:04:12.380643 30338 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:04:12.380647 30338 net.cpp:139] Memory required for data: 2618800
I0428 20:04:12.380656 30338 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:12.380664 30338 net.cpp:86] Creating Layer pool0
I0428 20:04:12.380667 30338 net.cpp:408] pool0 <- conv0
I0428 20:04:12.380672 30338 net.cpp:382] pool0 -> pool0
I0428 20:04:12.380709 30338 net.cpp:124] Setting up pool0
I0428 20:04:12.380722 30338 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:04:12.380724 30338 net.cpp:139] Memory required for data: 3194800
I0428 20:04:12.380728 30338 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:12.380736 30338 net.cpp:86] Creating Layer conv1
I0428 20:04:12.380739 30338 net.cpp:408] conv1 <- pool0
I0428 20:04:12.380748 30338 net.cpp:382] conv1 -> conv1
I0428 20:04:12.382477 30338 net.cpp:124] Setting up conv1
I0428 20:04:12.382494 30338 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:04:12.382498 30338 net.cpp:139] Memory required for data: 5754800
I0428 20:04:12.382506 30338 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:12.382513 30338 net.cpp:86] Creating Layer pool1
I0428 20:04:12.382517 30338 net.cpp:408] pool1 <- conv1
I0428 20:04:12.382522 30338 net.cpp:382] pool1 -> pool1
I0428 20:04:12.382560 30338 net.cpp:124] Setting up pool1
I0428 20:04:12.382567 30338 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:04:12.382570 30338 net.cpp:139] Memory required for data: 6394800
I0428 20:04:12.382573 30338 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:12.382580 30338 net.cpp:86] Creating Layer ip1
I0428 20:04:12.382585 30338 net.cpp:408] ip1 <- pool1
I0428 20:04:12.382588 30338 net.cpp:382] ip1 -> ip1
I0428 20:04:12.383147 30338 net.cpp:124] Setting up ip1
I0428 20:04:12.383154 30338 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:04:12.383167 30338 net.cpp:139] Memory required for data: 6414800
I0428 20:04:12.383177 30338 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:12.383183 30338 net.cpp:86] Creating Layer relu1
I0428 20:04:12.383188 30338 net.cpp:408] relu1 <- ip1
I0428 20:04:12.383191 30338 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:12.383422 30338 net.cpp:124] Setting up relu1
I0428 20:04:12.383431 30338 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:04:12.383435 30338 net.cpp:139] Memory required for data: 6434800
I0428 20:04:12.383437 30338 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:12.383445 30338 net.cpp:86] Creating Layer ip2
I0428 20:04:12.383450 30338 net.cpp:408] ip2 <- ip1
I0428 20:04:12.383455 30338 net.cpp:382] ip2 -> ip2
I0428 20:04:12.383569 30338 net.cpp:124] Setting up ip2
I0428 20:04:12.383579 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.383581 30338 net.cpp:139] Memory required for data: 6438800
I0428 20:04:12.383586 30338 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:12.383592 30338 net.cpp:86] Creating Layer relu2
I0428 20:04:12.383595 30338 net.cpp:408] relu2 <- ip2
I0428 20:04:12.383599 30338 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:12.383756 30338 net.cpp:124] Setting up relu2
I0428 20:04:12.383765 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.383769 30338 net.cpp:139] Memory required for data: 6442800
I0428 20:04:12.383771 30338 layer_factory.hpp:77] Creating layer ip3
I0428 20:04:12.383776 30338 net.cpp:86] Creating Layer ip3
I0428 20:04:12.383780 30338 net.cpp:408] ip3 <- ip2
I0428 20:04:12.383785 30338 net.cpp:382] ip3 -> ip3
I0428 20:04:12.383882 30338 net.cpp:124] Setting up ip3
I0428 20:04:12.383888 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.383891 30338 net.cpp:139] Memory required for data: 6446800
I0428 20:04:12.383900 30338 layer_factory.hpp:77] Creating layer relu3
I0428 20:04:12.383904 30338 net.cpp:86] Creating Layer relu3
I0428 20:04:12.383908 30338 net.cpp:408] relu3 <- ip3
I0428 20:04:12.383913 30338 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:04:12.384788 30338 net.cpp:124] Setting up relu3
I0428 20:04:12.384802 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.384806 30338 net.cpp:139] Memory required for data: 6450800
I0428 20:04:12.384815 30338 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:04:12.384821 30338 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:04:12.384825 30338 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:04:12.384832 30338 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:04:12.384838 30338 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:04:12.384905 30338 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:04:12.384913 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.384917 30338 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:12.384920 30338 net.cpp:139] Memory required for data: 6458800
I0428 20:04:12.384923 30338 layer_factory.hpp:77] Creating layer accuracy
I0428 20:04:12.384930 30338 net.cpp:86] Creating Layer accuracy
I0428 20:04:12.384933 30338 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:04:12.384938 30338 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:04:12.384943 30338 net.cpp:382] accuracy -> accuracy
I0428 20:04:12.384951 30338 net.cpp:124] Setting up accuracy
I0428 20:04:12.384955 30338 net.cpp:131] Top shape: (1)
I0428 20:04:12.384958 30338 net.cpp:139] Memory required for data: 6458804
I0428 20:04:12.384961 30338 layer_factory.hpp:77] Creating layer loss
I0428 20:04:12.384966 30338 net.cpp:86] Creating Layer loss
I0428 20:04:12.384969 30338 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:04:12.384974 30338 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:04:12.384977 30338 net.cpp:382] loss -> loss
I0428 20:04:12.384984 30338 layer_factory.hpp:77] Creating layer loss
I0428 20:04:12.385264 30338 net.cpp:124] Setting up loss
I0428 20:04:12.385274 30338 net.cpp:131] Top shape: (1)
I0428 20:04:12.385277 30338 net.cpp:134]     with loss weight 1
I0428 20:04:12.385293 30338 net.cpp:139] Memory required for data: 6458808
I0428 20:04:12.385298 30338 net.cpp:200] loss needs backward computation.
I0428 20:04:12.385300 30338 net.cpp:202] accuracy does not need backward computation.
I0428 20:04:12.385304 30338 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:04:12.385308 30338 net.cpp:200] relu3 needs backward computation.
I0428 20:04:12.385311 30338 net.cpp:200] ip3 needs backward computation.
I0428 20:04:12.385313 30338 net.cpp:200] relu2 needs backward computation.
I0428 20:04:12.385316 30338 net.cpp:200] ip2 needs backward computation.
I0428 20:04:12.385319 30338 net.cpp:200] relu1 needs backward computation.
I0428 20:04:12.385323 30338 net.cpp:200] ip1 needs backward computation.
I0428 20:04:12.385325 30338 net.cpp:200] pool1 needs backward computation.
I0428 20:04:12.385329 30338 net.cpp:200] conv1 needs backward computation.
I0428 20:04:12.385331 30338 net.cpp:200] pool0 needs backward computation.
I0428 20:04:12.385334 30338 net.cpp:200] conv0 needs backward computation.
I0428 20:04:12.385344 30338 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:04:12.385347 30338 net.cpp:202] mnist does not need backward computation.
I0428 20:04:12.385349 30338 net.cpp:244] This network produces output accuracy
I0428 20:04:12.385354 30338 net.cpp:244] This network produces output loss
I0428 20:04:12.385363 30338 net.cpp:257] Network initialization done.
I0428 20:04:12.385404 30338 solver.cpp:56] Solver scaffolding done.
I0428 20:04:12.385771 30338 caffe.cpp:248] Starting Optimization
I0428 20:04:12.385776 30338 solver.cpp:273] Solving LeNet
I0428 20:04:12.385779 30338 solver.cpp:274] Learning Rate Policy: inv
I0428 20:04:12.386737 30338 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:04:12.391979 30338 blocking_queue.cpp:49] Waiting for data
I0428 20:04:12.462412 30345 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:12.463047 30338 solver.cpp:398]     Test net output #0: accuracy = 0.1141
I0428 20:04:12.463069 30338 solver.cpp:398]     Test net output #1: loss = 2.31901 (* 1 = 2.31901 loss)
I0428 20:04:12.466903 30338 solver.cpp:219] Iteration 0 (0 iter/s, 0.0810865s/100 iters), loss = 2.31578
I0428 20:04:12.466927 30338 solver.cpp:238]     Train net output #0: loss = 2.31578 (* 1 = 2.31578 loss)
I0428 20:04:12.466938 30338 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:04:12.621562 30338 solver.cpp:219] Iteration 100 (646.756 iter/s, 0.154618s/100 iters), loss = 0.797822
I0428 20:04:12.621600 30338 solver.cpp:238]     Train net output #0: loss = 0.797822 (* 1 = 0.797822 loss)
I0428 20:04:12.621606 30338 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:04:12.775960 30338 solver.cpp:219] Iteration 200 (647.888 iter/s, 0.154348s/100 iters), loss = 0.765997
I0428 20:04:12.775986 30338 solver.cpp:238]     Train net output #0: loss = 0.765997 (* 1 = 0.765997 loss)
I0428 20:04:12.775993 30338 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:04:12.929700 30338 solver.cpp:219] Iteration 300 (650.616 iter/s, 0.1537s/100 iters), loss = 0.703283
I0428 20:04:12.929740 30338 solver.cpp:238]     Train net output #0: loss = 0.703283 (* 1 = 0.703283 loss)
I0428 20:04:12.929746 30338 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:04:13.084122 30338 solver.cpp:219] Iteration 400 (647.798 iter/s, 0.154369s/100 iters), loss = 0.625847
I0428 20:04:13.084148 30338 solver.cpp:238]     Train net output #0: loss = 0.625847 (* 1 = 0.625847 loss)
I0428 20:04:13.084154 30338 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:04:13.236120 30338 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:04:13.292402 30345 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:13.294309 30338 solver.cpp:398]     Test net output #0: accuracy = 0.8629
I0428 20:04:13.294328 30338 solver.cpp:398]     Test net output #1: loss = 0.564079 (* 1 = 0.564079 loss)
I0428 20:04:13.295707 30338 solver.cpp:219] Iteration 500 (472.717 iter/s, 0.211543s/100 iters), loss = 0.409328
I0428 20:04:13.295747 30338 solver.cpp:238]     Train net output #0: loss = 0.409328 (* 1 = 0.409328 loss)
I0428 20:04:13.295768 30338 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:04:13.451719 30338 solver.cpp:219] Iteration 600 (641.185 iter/s, 0.155961s/100 iters), loss = 0.401504
I0428 20:04:13.451745 30338 solver.cpp:238]     Train net output #0: loss = 0.401504 (* 1 = 0.401504 loss)
I0428 20:04:13.451750 30338 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:04:13.602601 30338 solver.cpp:219] Iteration 700 (662.939 iter/s, 0.150843s/100 iters), loss = 0.78172
I0428 20:04:13.602638 30338 solver.cpp:238]     Train net output #0: loss = 0.78172 (* 1 = 0.78172 loss)
I0428 20:04:13.602644 30338 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:04:13.757860 30338 solver.cpp:219] Iteration 800 (644.23 iter/s, 0.155224s/100 iters), loss = 0.639827
I0428 20:04:13.757895 30338 solver.cpp:238]     Train net output #0: loss = 0.639827 (* 1 = 0.639827 loss)
I0428 20:04:13.757901 30338 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:04:13.916049 30338 solver.cpp:219] Iteration 900 (632.305 iter/s, 0.158151s/100 iters), loss = 0.62315
I0428 20:04:13.916090 30338 solver.cpp:238]     Train net output #0: loss = 0.62315 (* 1 = 0.62315 loss)
I0428 20:04:13.916095 30338 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:04:13.966408 30344 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:14.066401 30338 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:04:14.069145 30338 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:04:14.070492 30338 solver.cpp:311] Iteration 1000, loss = 0.691454
I0428 20:04:14.070508 30338 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:04:14.126576 30345 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:14.128475 30338 solver.cpp:398]     Test net output #0: accuracy = 0.8766
I0428 20:04:14.128494 30338 solver.cpp:398]     Test net output #1: loss = 0.53324 (* 1 = 0.53324 loss)
I0428 20:04:14.128499 30338 solver.cpp:316] Optimization Done.
I0428 20:04:14.128502 30338 caffe.cpp:259] Optimization Done.
