I0428 19:52:45.563809 27622 caffe.cpp:218] Using GPUs 0
I0428 19:52:45.595826 27622 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:52:46.103845 27622 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test670.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:52:46.103988 27622 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test670.prototxt
I0428 19:52:46.104373 27622 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:52:46.104393 27622 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:52:46.104482 27622 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:52:46.104559 27622 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:46.104666 27622 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:52:46.104691 27622 net.cpp:86] Creating Layer mnist
I0428 19:52:46.104701 27622 net.cpp:382] mnist -> data
I0428 19:52:46.104722 27622 net.cpp:382] mnist -> label
I0428 19:52:46.105821 27622 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:52:46.108409 27622 net.cpp:124] Setting up mnist
I0428 19:52:46.108428 27622 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:52:46.108435 27622 net.cpp:131] Top shape: 64 (64)
I0428 19:52:46.108438 27622 net.cpp:139] Memory required for data: 200960
I0428 19:52:46.108445 27622 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:46.108463 27622 net.cpp:86] Creating Layer conv0
I0428 19:52:46.108469 27622 net.cpp:408] conv0 <- data
I0428 19:52:46.108481 27622 net.cpp:382] conv0 -> conv0
I0428 19:52:46.357709 27622 net.cpp:124] Setting up conv0
I0428 19:52:46.357749 27622 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:52:46.357753 27622 net.cpp:139] Memory required for data: 938240
I0428 19:52:46.357789 27622 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:46.357802 27622 net.cpp:86] Creating Layer pool0
I0428 19:52:46.357806 27622 net.cpp:408] pool0 <- conv0
I0428 19:52:46.357812 27622 net.cpp:382] pool0 -> pool0
I0428 19:52:46.357877 27622 net.cpp:124] Setting up pool0
I0428 19:52:46.357885 27622 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:52:46.357888 27622 net.cpp:139] Memory required for data: 1122560
I0428 19:52:46.357892 27622 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:46.357903 27622 net.cpp:86] Creating Layer conv1
I0428 19:52:46.357908 27622 net.cpp:408] conv1 <- pool0
I0428 19:52:46.357914 27622 net.cpp:382] conv1 -> conv1
I0428 19:52:46.360905 27622 net.cpp:124] Setting up conv1
I0428 19:52:46.360937 27622 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:52:46.360940 27622 net.cpp:139] Memory required for data: 1941760
I0428 19:52:46.360949 27622 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:46.360957 27622 net.cpp:86] Creating Layer pool1
I0428 19:52:46.360960 27622 net.cpp:408] pool1 <- conv1
I0428 19:52:46.360965 27622 net.cpp:382] pool1 -> pool1
I0428 19:52:46.361026 27622 net.cpp:124] Setting up pool1
I0428 19:52:46.361032 27622 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:52:46.361035 27622 net.cpp:139] Memory required for data: 2146560
I0428 19:52:46.361038 27622 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:46.361045 27622 net.cpp:86] Creating Layer ip1
I0428 19:52:46.361052 27622 net.cpp:408] ip1 <- pool1
I0428 19:52:46.361071 27622 net.cpp:382] ip1 -> ip1
I0428 19:52:46.361304 27622 net.cpp:124] Setting up ip1
I0428 19:52:46.361328 27622 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:46.361331 27622 net.cpp:139] Memory required for data: 2152960
I0428 19:52:46.361338 27622 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:46.361344 27622 net.cpp:86] Creating Layer relu1
I0428 19:52:46.361347 27622 net.cpp:408] relu1 <- ip1
I0428 19:52:46.361351 27622 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:46.361572 27622 net.cpp:124] Setting up relu1
I0428 19:52:46.361603 27622 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:52:46.361611 27622 net.cpp:139] Memory required for data: 2159360
I0428 19:52:46.361615 27622 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:46.361623 27622 net.cpp:86] Creating Layer ip2
I0428 19:52:46.361626 27622 net.cpp:408] ip2 <- ip1
I0428 19:52:46.361631 27622 net.cpp:382] ip2 -> ip2
I0428 19:52:46.361747 27622 net.cpp:124] Setting up ip2
I0428 19:52:46.361754 27622 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:46.361757 27622 net.cpp:139] Memory required for data: 2161920
I0428 19:52:46.361763 27622 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:46.361769 27622 net.cpp:86] Creating Layer relu2
I0428 19:52:46.361773 27622 net.cpp:408] relu2 <- ip2
I0428 19:52:46.361776 27622 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:46.362571 27622 net.cpp:124] Setting up relu2
I0428 19:52:46.362582 27622 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:46.362602 27622 net.cpp:139] Memory required for data: 2164480
I0428 19:52:46.362606 27622 layer_factory.hpp:77] Creating layer loss
I0428 19:52:46.362612 27622 net.cpp:86] Creating Layer loss
I0428 19:52:46.362617 27622 net.cpp:408] loss <- ip2
I0428 19:52:46.362620 27622 net.cpp:408] loss <- label
I0428 19:52:46.362627 27622 net.cpp:382] loss -> loss
I0428 19:52:46.362643 27622 layer_factory.hpp:77] Creating layer loss
I0428 19:52:46.362948 27622 net.cpp:124] Setting up loss
I0428 19:52:46.362960 27622 net.cpp:131] Top shape: (1)
I0428 19:52:46.362964 27622 net.cpp:134]     with loss weight 1
I0428 19:52:46.362979 27622 net.cpp:139] Memory required for data: 2164484
I0428 19:52:46.362983 27622 net.cpp:200] loss needs backward computation.
I0428 19:52:46.362987 27622 net.cpp:200] relu2 needs backward computation.
I0428 19:52:46.363005 27622 net.cpp:200] ip2 needs backward computation.
I0428 19:52:46.363008 27622 net.cpp:200] relu1 needs backward computation.
I0428 19:52:46.363011 27622 net.cpp:200] ip1 needs backward computation.
I0428 19:52:46.363026 27622 net.cpp:200] pool1 needs backward computation.
I0428 19:52:46.363029 27622 net.cpp:200] conv1 needs backward computation.
I0428 19:52:46.363034 27622 net.cpp:200] pool0 needs backward computation.
I0428 19:52:46.363036 27622 net.cpp:200] conv0 needs backward computation.
I0428 19:52:46.363040 27622 net.cpp:202] mnist does not need backward computation.
I0428 19:52:46.363044 27622 net.cpp:244] This network produces output loss
I0428 19:52:46.363051 27622 net.cpp:257] Network initialization done.
I0428 19:52:46.363387 27622 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test670.prototxt
I0428 19:52:46.363430 27622 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:52:46.363529 27622 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:52:46.363597 27622 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:46.363644 27622 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:52:46.363656 27622 net.cpp:86] Creating Layer mnist
I0428 19:52:46.363662 27622 net.cpp:382] mnist -> data
I0428 19:52:46.363669 27622 net.cpp:382] mnist -> label
I0428 19:52:46.363754 27622 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:52:46.366030 27622 net.cpp:124] Setting up mnist
I0428 19:52:46.366044 27622 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:52:46.366065 27622 net.cpp:131] Top shape: 100 (100)
I0428 19:52:46.366068 27622 net.cpp:139] Memory required for data: 314000
I0428 19:52:46.366086 27622 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:52:46.366093 27622 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:52:46.366097 27622 net.cpp:408] label_mnist_1_split <- label
I0428 19:52:46.366101 27622 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:52:46.366124 27622 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:52:46.366204 27622 net.cpp:124] Setting up label_mnist_1_split
I0428 19:52:46.366224 27622 net.cpp:131] Top shape: 100 (100)
I0428 19:52:46.366230 27622 net.cpp:131] Top shape: 100 (100)
I0428 19:52:46.366231 27622 net.cpp:139] Memory required for data: 314800
I0428 19:52:46.366235 27622 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:46.366245 27622 net.cpp:86] Creating Layer conv0
I0428 19:52:46.366247 27622 net.cpp:408] conv0 <- data
I0428 19:52:46.366252 27622 net.cpp:382] conv0 -> conv0
I0428 19:52:46.368018 27622 net.cpp:124] Setting up conv0
I0428 19:52:46.368048 27622 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:52:46.368052 27622 net.cpp:139] Memory required for data: 1466800
I0428 19:52:46.368062 27622 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:46.368068 27622 net.cpp:86] Creating Layer pool0
I0428 19:52:46.368083 27622 net.cpp:408] pool0 <- conv0
I0428 19:52:46.368088 27622 net.cpp:382] pool0 -> pool0
I0428 19:52:46.368139 27622 net.cpp:124] Setting up pool0
I0428 19:52:46.368157 27622 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:52:46.368160 27622 net.cpp:139] Memory required for data: 1754800
I0428 19:52:46.368163 27622 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:46.368172 27622 net.cpp:86] Creating Layer conv1
I0428 19:52:46.368176 27622 net.cpp:408] conv1 <- pool0
I0428 19:52:46.368181 27622 net.cpp:382] conv1 -> conv1
I0428 19:52:46.369928 27622 net.cpp:124] Setting up conv1
I0428 19:52:46.369943 27622 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:52:46.369947 27622 net.cpp:139] Memory required for data: 3034800
I0428 19:52:46.369957 27622 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:46.369964 27622 net.cpp:86] Creating Layer pool1
I0428 19:52:46.369968 27622 net.cpp:408] pool1 <- conv1
I0428 19:52:46.369974 27622 net.cpp:382] pool1 -> pool1
I0428 19:52:46.370013 27622 net.cpp:124] Setting up pool1
I0428 19:52:46.370021 27622 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:52:46.370024 27622 net.cpp:139] Memory required for data: 3354800
I0428 19:52:46.370028 27622 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:46.370034 27622 net.cpp:86] Creating Layer ip1
I0428 19:52:46.370039 27622 net.cpp:408] ip1 <- pool1
I0428 19:52:46.370044 27622 net.cpp:382] ip1 -> ip1
I0428 19:52:46.370281 27622 net.cpp:124] Setting up ip1
I0428 19:52:46.370290 27622 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:46.370293 27622 net.cpp:139] Memory required for data: 3364800
I0428 19:52:46.370301 27622 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:46.370306 27622 net.cpp:86] Creating Layer relu1
I0428 19:52:46.370309 27622 net.cpp:408] relu1 <- ip1
I0428 19:52:46.370314 27622 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:46.370481 27622 net.cpp:124] Setting up relu1
I0428 19:52:46.370489 27622 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:52:46.370492 27622 net.cpp:139] Memory required for data: 3374800
I0428 19:52:46.370496 27622 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:46.370502 27622 net.cpp:86] Creating Layer ip2
I0428 19:52:46.370507 27622 net.cpp:408] ip2 <- ip1
I0428 19:52:46.370510 27622 net.cpp:382] ip2 -> ip2
I0428 19:52:46.370648 27622 net.cpp:124] Setting up ip2
I0428 19:52:46.370657 27622 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:46.370661 27622 net.cpp:139] Memory required for data: 3378800
I0428 19:52:46.370669 27622 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:46.370677 27622 net.cpp:86] Creating Layer relu2
I0428 19:52:46.370682 27622 net.cpp:408] relu2 <- ip2
I0428 19:52:46.370687 27622 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:46.370942 27622 net.cpp:124] Setting up relu2
I0428 19:52:46.370959 27622 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:46.370964 27622 net.cpp:139] Memory required for data: 3382800
I0428 19:52:46.370966 27622 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:52:46.370972 27622 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:52:46.370976 27622 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:52:46.370981 27622 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:52:46.371008 27622 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:52:46.371052 27622 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:52:46.371059 27622 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:46.371063 27622 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:46.371065 27622 net.cpp:139] Memory required for data: 3390800
I0428 19:52:46.371069 27622 layer_factory.hpp:77] Creating layer accuracy
I0428 19:52:46.371074 27622 net.cpp:86] Creating Layer accuracy
I0428 19:52:46.371078 27622 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:52:46.371081 27622 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:52:46.371088 27622 net.cpp:382] accuracy -> accuracy
I0428 19:52:46.371094 27622 net.cpp:124] Setting up accuracy
I0428 19:52:46.371098 27622 net.cpp:131] Top shape: (1)
I0428 19:52:46.371101 27622 net.cpp:139] Memory required for data: 3390804
I0428 19:52:46.371104 27622 layer_factory.hpp:77] Creating layer loss
I0428 19:52:46.371124 27622 net.cpp:86] Creating Layer loss
I0428 19:52:46.371127 27622 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:52:46.371132 27622 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:52:46.371137 27622 net.cpp:382] loss -> loss
I0428 19:52:46.371143 27622 layer_factory.hpp:77] Creating layer loss
I0428 19:52:46.371419 27622 net.cpp:124] Setting up loss
I0428 19:52:46.371461 27622 net.cpp:131] Top shape: (1)
I0428 19:52:46.371466 27622 net.cpp:134]     with loss weight 1
I0428 19:52:46.371489 27622 net.cpp:139] Memory required for data: 3390808
I0428 19:52:46.371505 27622 net.cpp:200] loss needs backward computation.
I0428 19:52:46.371528 27622 net.cpp:202] accuracy does not need backward computation.
I0428 19:52:46.371536 27622 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:52:46.371541 27622 net.cpp:200] relu2 needs backward computation.
I0428 19:52:46.371546 27622 net.cpp:200] ip2 needs backward computation.
I0428 19:52:46.371549 27622 net.cpp:200] relu1 needs backward computation.
I0428 19:52:46.371552 27622 net.cpp:200] ip1 needs backward computation.
I0428 19:52:46.371556 27622 net.cpp:200] pool1 needs backward computation.
I0428 19:52:46.371559 27622 net.cpp:200] conv1 needs backward computation.
I0428 19:52:46.371562 27622 net.cpp:200] pool0 needs backward computation.
I0428 19:52:46.371565 27622 net.cpp:200] conv0 needs backward computation.
I0428 19:52:46.371569 27622 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:52:46.371573 27622 net.cpp:202] mnist does not need backward computation.
I0428 19:52:46.371575 27622 net.cpp:244] This network produces output accuracy
I0428 19:52:46.371579 27622 net.cpp:244] This network produces output loss
I0428 19:52:46.371592 27622 net.cpp:257] Network initialization done.
I0428 19:52:46.371630 27622 solver.cpp:56] Solver scaffolding done.
I0428 19:52:46.371963 27622 caffe.cpp:248] Starting Optimization
I0428 19:52:46.371969 27622 solver.cpp:273] Solving LeNet
I0428 19:52:46.371973 27622 solver.cpp:274] Learning Rate Policy: inv
I0428 19:52:46.372165 27622 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:52:46.376850 27622 blocking_queue.cpp:49] Waiting for data
I0428 19:52:46.444747 27629 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:46.445315 27622 solver.cpp:398]     Test net output #0: accuracy = 0.0847
I0428 19:52:46.445351 27622 solver.cpp:398]     Test net output #1: loss = 2.30771 (* 1 = 2.30771 loss)
I0428 19:52:46.448575 27622 solver.cpp:219] Iteration 0 (0 iter/s, 0.0765737s/100 iters), loss = 2.28474
I0428 19:52:46.448614 27622 solver.cpp:238]     Train net output #0: loss = 2.28474 (* 1 = 2.28474 loss)
I0428 19:52:46.448626 27622 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:52:46.546852 27622 solver.cpp:219] Iteration 100 (1017.9 iter/s, 0.0982414s/100 iters), loss = 0.912691
I0428 19:52:46.546895 27622 solver.cpp:238]     Train net output #0: loss = 0.912691 (* 1 = 0.912691 loss)
I0428 19:52:46.546901 27622 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:52:46.650285 27622 solver.cpp:219] Iteration 200 (967.411 iter/s, 0.103369s/100 iters), loss = 0.860081
I0428 19:52:46.650353 27622 solver.cpp:238]     Train net output #0: loss = 0.860081 (* 1 = 0.860081 loss)
I0428 19:52:46.650367 27622 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:52:46.759814 27622 solver.cpp:219] Iteration 300 (913.623 iter/s, 0.109454s/100 iters), loss = 0.955536
I0428 19:52:46.759847 27622 solver.cpp:238]     Train net output #0: loss = 0.955536 (* 1 = 0.955536 loss)
I0428 19:52:46.759855 27622 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:52:46.862928 27622 solver.cpp:219] Iteration 400 (970.2 iter/s, 0.103072s/100 iters), loss = 0.778836
I0428 19:52:46.862959 27622 solver.cpp:238]     Train net output #0: loss = 0.778836 (* 1 = 0.778836 loss)
I0428 19:52:46.862967 27622 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:52:46.973052 27622 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:52:47.019158 27629 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:47.019673 27622 solver.cpp:398]     Test net output #0: accuracy = 0.676
I0428 19:52:47.019697 27622 solver.cpp:398]     Test net output #1: loss = 0.805782 (* 1 = 0.805782 loss)
I0428 19:52:47.020695 27622 solver.cpp:219] Iteration 500 (634.024 iter/s, 0.157723s/100 iters), loss = 0.705457
I0428 19:52:47.020730 27622 solver.cpp:238]     Train net output #0: loss = 0.705457 (* 1 = 0.705457 loss)
I0428 19:52:47.020738 27622 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:52:47.121974 27622 solver.cpp:219] Iteration 600 (987.799 iter/s, 0.101235s/100 iters), loss = 0.990192
I0428 19:52:47.122014 27622 solver.cpp:238]     Train net output #0: loss = 0.990192 (* 1 = 0.990192 loss)
I0428 19:52:47.122022 27622 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:52:47.226658 27622 solver.cpp:219] Iteration 700 (955.625 iter/s, 0.104644s/100 iters), loss = 0.812127
I0428 19:52:47.226701 27622 solver.cpp:238]     Train net output #0: loss = 0.812127 (* 1 = 0.812127 loss)
I0428 19:52:47.226708 27622 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:52:47.333585 27622 solver.cpp:219] Iteration 800 (935.611 iter/s, 0.106882s/100 iters), loss = 1.03289
I0428 19:52:47.333632 27622 solver.cpp:238]     Train net output #0: loss = 1.03289 (* 1 = 1.03289 loss)
I0428 19:52:47.333642 27622 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:52:47.439296 27622 solver.cpp:219] Iteration 900 (946.419 iter/s, 0.105661s/100 iters), loss = 1.18713
I0428 19:52:47.439347 27622 solver.cpp:238]     Train net output #0: loss = 1.18713 (* 1 = 1.18713 loss)
I0428 19:52:47.439357 27622 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:52:47.474764 27628 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:47.544620 27622 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:52:47.546010 27622 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:52:47.546862 27622 solver.cpp:311] Iteration 1000, loss = 0.7846
I0428 19:52:47.546883 27622 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:52:47.594269 27629 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:47.594810 27622 solver.cpp:398]     Test net output #0: accuracy = 0.6843
I0428 19:52:47.594846 27622 solver.cpp:398]     Test net output #1: loss = 0.763324 (* 1 = 0.763324 loss)
I0428 19:52:47.594856 27622 solver.cpp:316] Optimization Done.
I0428 19:52:47.594861 27622 caffe.cpp:259] Optimization Done.
