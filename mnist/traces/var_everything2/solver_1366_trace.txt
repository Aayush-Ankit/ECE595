I0428 20:20:34.942296  1580 caffe.cpp:218] Using GPUs 0
I0428 20:20:34.972551  1580 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:20:35.490149  1580 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1366.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:20:35.490286  1580 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1366.prototxt
I0428 20:20:35.490641  1580 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:20:35.490658  1580 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:20:35.490738  1580 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:20:35.490808  1580 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:35.490905  1580 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:20:35.490926  1580 net.cpp:86] Creating Layer mnist
I0428 20:20:35.490934  1580 net.cpp:382] mnist -> data
I0428 20:20:35.490957  1580 net.cpp:382] mnist -> label
I0428 20:20:35.492041  1580 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:20:35.494488  1580 net.cpp:124] Setting up mnist
I0428 20:20:35.494504  1580 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:20:35.494513  1580 net.cpp:131] Top shape: 64 (64)
I0428 20:20:35.494516  1580 net.cpp:139] Memory required for data: 200960
I0428 20:20:35.494523  1580 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:35.494539  1580 net.cpp:86] Creating Layer conv0
I0428 20:20:35.494547  1580 net.cpp:408] conv0 <- data
I0428 20:20:35.494560  1580 net.cpp:382] conv0 -> conv0
I0428 20:20:35.788931  1580 net.cpp:124] Setting up conv0
I0428 20:20:35.788962  1580 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:20:35.788967  1580 net.cpp:139] Memory required for data: 7573760
I0428 20:20:35.788986  1580 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:35.789001  1580 net.cpp:86] Creating Layer pool0
I0428 20:20:35.789006  1580 net.cpp:408] pool0 <- conv0
I0428 20:20:35.789013  1580 net.cpp:382] pool0 -> pool0
I0428 20:20:35.789069  1580 net.cpp:124] Setting up pool0
I0428 20:20:35.789077  1580 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:20:35.789100  1580 net.cpp:139] Memory required for data: 9416960
I0428 20:20:35.789104  1580 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:35.789118  1580 net.cpp:86] Creating Layer conv1
I0428 20:20:35.789122  1580 net.cpp:408] conv1 <- pool0
I0428 20:20:35.789129  1580 net.cpp:382] conv1 -> conv1
I0428 20:20:35.791726  1580 net.cpp:124] Setting up conv1
I0428 20:20:35.791743  1580 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:20:35.791749  1580 net.cpp:139] Memory required for data: 10236160
I0428 20:20:35.791759  1580 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:35.791770  1580 net.cpp:86] Creating Layer pool1
I0428 20:20:35.791774  1580 net.cpp:408] pool1 <- conv1
I0428 20:20:35.791780  1580 net.cpp:382] pool1 -> pool1
I0428 20:20:35.791834  1580 net.cpp:124] Setting up pool1
I0428 20:20:35.791842  1580 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:20:35.791846  1580 net.cpp:139] Memory required for data: 10440960
I0428 20:20:35.791851  1580 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:35.791859  1580 net.cpp:86] Creating Layer ip1
I0428 20:20:35.791865  1580 net.cpp:408] ip1 <- pool1
I0428 20:20:35.791879  1580 net.cpp:382] ip1 -> ip1
I0428 20:20:35.793051  1580 net.cpp:124] Setting up ip1
I0428 20:20:35.793067  1580 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:35.793071  1580 net.cpp:139] Memory required for data: 10443520
I0428 20:20:35.793083  1580 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:35.793090  1580 net.cpp:86] Creating Layer relu1
I0428 20:20:35.793094  1580 net.cpp:408] relu1 <- ip1
I0428 20:20:35.793100  1580 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:35.793318  1580 net.cpp:124] Setting up relu1
I0428 20:20:35.793328  1580 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:35.793331  1580 net.cpp:139] Memory required for data: 10446080
I0428 20:20:35.793335  1580 layer_factory.hpp:77] Creating layer loss
I0428 20:20:35.793342  1580 net.cpp:86] Creating Layer loss
I0428 20:20:35.793346  1580 net.cpp:408] loss <- ip1
I0428 20:20:35.793351  1580 net.cpp:408] loss <- label
I0428 20:20:35.793357  1580 net.cpp:382] loss -> loss
I0428 20:20:35.793373  1580 layer_factory.hpp:77] Creating layer loss
I0428 20:20:35.794340  1580 net.cpp:124] Setting up loss
I0428 20:20:35.794358  1580 net.cpp:131] Top shape: (1)
I0428 20:20:35.794361  1580 net.cpp:134]     with loss weight 1
I0428 20:20:35.794378  1580 net.cpp:139] Memory required for data: 10446084
I0428 20:20:35.794384  1580 net.cpp:200] loss needs backward computation.
I0428 20:20:35.794387  1580 net.cpp:200] relu1 needs backward computation.
I0428 20:20:35.794391  1580 net.cpp:200] ip1 needs backward computation.
I0428 20:20:35.794395  1580 net.cpp:200] pool1 needs backward computation.
I0428 20:20:35.794399  1580 net.cpp:200] conv1 needs backward computation.
I0428 20:20:35.794402  1580 net.cpp:200] pool0 needs backward computation.
I0428 20:20:35.794405  1580 net.cpp:200] conv0 needs backward computation.
I0428 20:20:35.794409  1580 net.cpp:202] mnist does not need backward computation.
I0428 20:20:35.794414  1580 net.cpp:244] This network produces output loss
I0428 20:20:35.794422  1580 net.cpp:257] Network initialization done.
I0428 20:20:35.794726  1580 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1366.prototxt
I0428 20:20:35.794754  1580 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:20:35.794857  1580 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:20:35.794946  1580 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:35.795001  1580 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:20:35.795017  1580 net.cpp:86] Creating Layer mnist
I0428 20:20:35.795022  1580 net.cpp:382] mnist -> data
I0428 20:20:35.795030  1580 net.cpp:382] mnist -> label
I0428 20:20:35.795138  1580 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:20:35.797593  1580 net.cpp:124] Setting up mnist
I0428 20:20:35.797610  1580 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:20:35.797617  1580 net.cpp:131] Top shape: 100 (100)
I0428 20:20:35.797621  1580 net.cpp:139] Memory required for data: 314000
I0428 20:20:35.797626  1580 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:20:35.797633  1580 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:20:35.797637  1580 net.cpp:408] label_mnist_1_split <- label
I0428 20:20:35.797643  1580 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:20:35.797652  1580 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:20:35.797709  1580 net.cpp:124] Setting up label_mnist_1_split
I0428 20:20:35.797715  1580 net.cpp:131] Top shape: 100 (100)
I0428 20:20:35.797720  1580 net.cpp:131] Top shape: 100 (100)
I0428 20:20:35.797724  1580 net.cpp:139] Memory required for data: 314800
I0428 20:20:35.797727  1580 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:35.797739  1580 net.cpp:86] Creating Layer conv0
I0428 20:20:35.797745  1580 net.cpp:408] conv0 <- data
I0428 20:20:35.797754  1580 net.cpp:382] conv0 -> conv0
I0428 20:20:35.798836  1580 net.cpp:124] Setting up conv0
I0428 20:20:35.798851  1580 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:20:35.798856  1580 net.cpp:139] Memory required for data: 11834800
I0428 20:20:35.798868  1580 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:35.798877  1580 net.cpp:86] Creating Layer pool0
I0428 20:20:35.798882  1580 net.cpp:408] pool0 <- conv0
I0428 20:20:35.798887  1580 net.cpp:382] pool0 -> pool0
I0428 20:20:35.798933  1580 net.cpp:124] Setting up pool0
I0428 20:20:35.798940  1580 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:20:35.798944  1580 net.cpp:139] Memory required for data: 14714800
I0428 20:20:35.798948  1580 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:35.798959  1580 net.cpp:86] Creating Layer conv1
I0428 20:20:35.798964  1580 net.cpp:408] conv1 <- pool0
I0428 20:20:35.798970  1580 net.cpp:382] conv1 -> conv1
I0428 20:20:35.801154  1580 net.cpp:124] Setting up conv1
I0428 20:20:35.801170  1580 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:20:35.801175  1580 net.cpp:139] Memory required for data: 15994800
I0428 20:20:35.801185  1580 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:35.801193  1580 net.cpp:86] Creating Layer pool1
I0428 20:20:35.801211  1580 net.cpp:408] pool1 <- conv1
I0428 20:20:35.801218  1580 net.cpp:382] pool1 -> pool1
I0428 20:20:35.801270  1580 net.cpp:124] Setting up pool1
I0428 20:20:35.801278  1580 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:20:35.801282  1580 net.cpp:139] Memory required for data: 16314800
I0428 20:20:35.801287  1580 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:35.801295  1580 net.cpp:86] Creating Layer ip1
I0428 20:20:35.801301  1580 net.cpp:408] ip1 <- pool1
I0428 20:20:35.801307  1580 net.cpp:382] ip1 -> ip1
I0428 20:20:35.801472  1580 net.cpp:124] Setting up ip1
I0428 20:20:35.801481  1580 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:35.801484  1580 net.cpp:139] Memory required for data: 16318800
I0428 20:20:35.801493  1580 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:35.801501  1580 net.cpp:86] Creating Layer relu1
I0428 20:20:35.801504  1580 net.cpp:408] relu1 <- ip1
I0428 20:20:35.801509  1580 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:35.802436  1580 net.cpp:124] Setting up relu1
I0428 20:20:35.802451  1580 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:35.802455  1580 net.cpp:139] Memory required for data: 16322800
I0428 20:20:35.802459  1580 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:20:35.802467  1580 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:20:35.802472  1580 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:20:35.802479  1580 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:20:35.802486  1580 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:20:35.802532  1580 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:20:35.802539  1580 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:35.802543  1580 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:35.802547  1580 net.cpp:139] Memory required for data: 16330800
I0428 20:20:35.802551  1580 layer_factory.hpp:77] Creating layer accuracy
I0428 20:20:35.802557  1580 net.cpp:86] Creating Layer accuracy
I0428 20:20:35.802561  1580 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:20:35.802567  1580 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:20:35.802572  1580 net.cpp:382] accuracy -> accuracy
I0428 20:20:35.802579  1580 net.cpp:124] Setting up accuracy
I0428 20:20:35.802585  1580 net.cpp:131] Top shape: (1)
I0428 20:20:35.802589  1580 net.cpp:139] Memory required for data: 16330804
I0428 20:20:35.802592  1580 layer_factory.hpp:77] Creating layer loss
I0428 20:20:35.802598  1580 net.cpp:86] Creating Layer loss
I0428 20:20:35.802603  1580 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:20:35.802608  1580 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:20:35.802613  1580 net.cpp:382] loss -> loss
I0428 20:20:35.802619  1580 layer_factory.hpp:77] Creating layer loss
I0428 20:20:35.802898  1580 net.cpp:124] Setting up loss
I0428 20:20:35.802909  1580 net.cpp:131] Top shape: (1)
I0428 20:20:35.802916  1580 net.cpp:134]     with loss weight 1
I0428 20:20:35.802924  1580 net.cpp:139] Memory required for data: 16330808
I0428 20:20:35.802928  1580 net.cpp:200] loss needs backward computation.
I0428 20:20:35.802933  1580 net.cpp:202] accuracy does not need backward computation.
I0428 20:20:35.802937  1580 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:20:35.802942  1580 net.cpp:200] relu1 needs backward computation.
I0428 20:20:35.802945  1580 net.cpp:200] ip1 needs backward computation.
I0428 20:20:35.802949  1580 net.cpp:200] pool1 needs backward computation.
I0428 20:20:35.802953  1580 net.cpp:200] conv1 needs backward computation.
I0428 20:20:35.802958  1580 net.cpp:200] pool0 needs backward computation.
I0428 20:20:35.802961  1580 net.cpp:200] conv0 needs backward computation.
I0428 20:20:35.802966  1580 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:20:35.802970  1580 net.cpp:202] mnist does not need backward computation.
I0428 20:20:35.802974  1580 net.cpp:244] This network produces output accuracy
I0428 20:20:35.802978  1580 net.cpp:244] This network produces output loss
I0428 20:20:35.803002  1580 net.cpp:257] Network initialization done.
I0428 20:20:35.803046  1580 solver.cpp:56] Solver scaffolding done.
I0428 20:20:35.803294  1580 caffe.cpp:248] Starting Optimization
I0428 20:20:35.803302  1580 solver.cpp:273] Solving LeNet
I0428 20:20:35.803305  1580 solver.cpp:274] Learning Rate Policy: inv
I0428 20:20:35.803547  1580 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:20:35.811844  1580 blocking_queue.cpp:49] Waiting for data
I0428 20:20:35.882841  1591 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:35.883821  1580 solver.cpp:398]     Test net output #0: accuracy = 0.1003
I0428 20:20:35.883846  1580 solver.cpp:398]     Test net output #1: loss = 2.40514 (* 1 = 2.40514 loss)
I0428 20:20:35.888491  1580 solver.cpp:219] Iteration 0 (2.67342 iter/s, 0.0851528s/100 iters), loss = 2.42079
I0428 20:20:35.888520  1580 solver.cpp:238]     Train net output #0: loss = 2.42079 (* 1 = 2.42079 loss)
I0428 20:20:35.888533  1580 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:20:36.033663  1580 solver.cpp:219] Iteration 100 (689.045 iter/s, 0.145128s/100 iters), loss = 1.02538
I0428 20:20:36.033694  1580 solver.cpp:238]     Train net output #0: loss = 1.02538 (* 1 = 1.02538 loss)
I0428 20:20:36.033702  1580 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:20:36.178742  1580 solver.cpp:219] Iteration 200 (689.487 iter/s, 0.145035s/100 iters), loss = 0.505498
I0428 20:20:36.178773  1580 solver.cpp:238]     Train net output #0: loss = 0.505498 (* 1 = 0.505498 loss)
I0428 20:20:36.178781  1580 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:20:36.326692  1580 solver.cpp:219] Iteration 300 (676.103 iter/s, 0.147907s/100 iters), loss = 0.439243
I0428 20:20:36.326725  1580 solver.cpp:238]     Train net output #0: loss = 0.439243 (* 1 = 0.439243 loss)
I0428 20:20:36.326735  1580 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:20:36.476433  1580 solver.cpp:219] Iteration 400 (668.041 iter/s, 0.149691s/100 iters), loss = 0.0865327
I0428 20:20:36.476477  1580 solver.cpp:238]     Train net output #0: loss = 0.0865327 (* 1 = 0.0865327 loss)
I0428 20:20:36.476490  1580 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:20:36.624615  1580 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:20:36.701792  1591 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:36.702800  1580 solver.cpp:398]     Test net output #0: accuracy = 0.9681
I0428 20:20:36.702828  1580 solver.cpp:398]     Test net output #1: loss = 0.105769 (* 1 = 0.105769 loss)
I0428 20:20:36.704355  1580 solver.cpp:219] Iteration 500 (438.857 iter/s, 0.227865s/100 iters), loss = 0.173671
I0428 20:20:36.704391  1580 solver.cpp:238]     Train net output #0: loss = 0.173671 (* 1 = 0.173671 loss)
I0428 20:20:36.704399  1580 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:20:36.848788  1580 solver.cpp:219] Iteration 600 (692.549 iter/s, 0.144394s/100 iters), loss = 0.0806618
I0428 20:20:36.848819  1580 solver.cpp:238]     Train net output #0: loss = 0.0806618 (* 1 = 0.0806618 loss)
I0428 20:20:36.848826  1580 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:20:36.989275  1580 solver.cpp:219] Iteration 700 (711.993 iter/s, 0.140451s/100 iters), loss = 0.179265
I0428 20:20:36.989317  1580 solver.cpp:238]     Train net output #0: loss = 0.179265 (* 1 = 0.179265 loss)
I0428 20:20:36.989325  1580 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:20:37.129925  1580 solver.cpp:219] Iteration 800 (711.174 iter/s, 0.140613s/100 iters), loss = 0.24119
I0428 20:20:37.129966  1580 solver.cpp:238]     Train net output #0: loss = 0.24119 (* 1 = 0.24119 loss)
I0428 20:20:37.129972  1580 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:20:37.273651  1580 solver.cpp:219] Iteration 900 (695.944 iter/s, 0.14369s/100 iters), loss = 0.174094
I0428 20:20:37.273676  1580 solver.cpp:238]     Train net output #0: loss = 0.174094 (* 1 = 0.174094 loss)
I0428 20:20:37.273684  1580 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:20:37.320842  1590 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:37.415107  1580 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:20:37.416946  1580 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:20:37.418131  1580 solver.cpp:311] Iteration 1000, loss = 0.0821953
I0428 20:20:37.418145  1580 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:20:37.496042  1591 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:37.496953  1580 solver.cpp:398]     Test net output #0: accuracy = 0.9761
I0428 20:20:37.496989  1580 solver.cpp:398]     Test net output #1: loss = 0.0729132 (* 1 = 0.0729132 loss)
I0428 20:20:37.496995  1580 solver.cpp:316] Optimization Done.
I0428 20:20:37.496999  1580 caffe.cpp:259] Optimization Done.
