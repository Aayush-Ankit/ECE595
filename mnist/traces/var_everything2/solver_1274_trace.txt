I0428 20:16:34.784373   688 caffe.cpp:218] Using GPUs 0
I0428 20:16:34.825482   688 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:35.376876   688 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1274.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:35.377018   688 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1274.prototxt
I0428 20:16:35.377421   688 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:35.377439   688 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:35.377537   688 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:35.377614   688 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:35.377712   688 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:35.377734   688 net.cpp:86] Creating Layer mnist
I0428 20:16:35.377743   688 net.cpp:382] mnist -> data
I0428 20:16:35.377764   688 net.cpp:382] mnist -> label
I0428 20:16:35.378860   688 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:35.381319   688 net.cpp:124] Setting up mnist
I0428 20:16:35.381336   688 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:35.381345   688 net.cpp:131] Top shape: 64 (64)
I0428 20:16:35.381347   688 net.cpp:139] Memory required for data: 200960
I0428 20:16:35.381355   688 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:35.381369   688 net.cpp:86] Creating Layer conv0
I0428 20:16:35.381388   688 net.cpp:408] conv0 <- data
I0428 20:16:35.381402   688 net.cpp:382] conv0 -> conv0
I0428 20:16:35.671682   688 net.cpp:124] Setting up conv0
I0428 20:16:35.671716   688 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:35.671721   688 net.cpp:139] Memory required for data: 7573760
I0428 20:16:35.671739   688 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:35.671754   688 net.cpp:86] Creating Layer pool0
I0428 20:16:35.671759   688 net.cpp:408] pool0 <- conv0
I0428 20:16:35.671766   688 net.cpp:382] pool0 -> pool0
I0428 20:16:35.671826   688 net.cpp:124] Setting up pool0
I0428 20:16:35.671845   688 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:35.671849   688 net.cpp:139] Memory required for data: 9416960
I0428 20:16:35.671854   688 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:35.671866   688 net.cpp:86] Creating Layer conv1
I0428 20:16:35.671869   688 net.cpp:408] conv1 <- pool0
I0428 20:16:35.671875   688 net.cpp:382] conv1 -> conv1
I0428 20:16:35.675051   688 net.cpp:124] Setting up conv1
I0428 20:16:35.675070   688 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:35.675074   688 net.cpp:139] Memory required for data: 9498880
I0428 20:16:35.675086   688 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:35.675094   688 net.cpp:86] Creating Layer pool1
I0428 20:16:35.675098   688 net.cpp:408] pool1 <- conv1
I0428 20:16:35.675104   688 net.cpp:382] pool1 -> pool1
I0428 20:16:35.675149   688 net.cpp:124] Setting up pool1
I0428 20:16:35.675156   688 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:35.675160   688 net.cpp:139] Memory required for data: 9519360
I0428 20:16:35.675163   688 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:35.675176   688 net.cpp:86] Creating Layer ip1
I0428 20:16:35.675180   688 net.cpp:408] ip1 <- pool1
I0428 20:16:35.675186   688 net.cpp:382] ip1 -> ip1
I0428 20:16:35.675320   688 net.cpp:124] Setting up ip1
I0428 20:16:35.675330   688 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:35.675334   688 net.cpp:139] Memory required for data: 9525760
I0428 20:16:35.675343   688 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:35.675349   688 net.cpp:86] Creating Layer relu1
I0428 20:16:35.675354   688 net.cpp:408] relu1 <- ip1
I0428 20:16:35.675359   688 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:35.675556   688 net.cpp:124] Setting up relu1
I0428 20:16:35.675567   688 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:35.675571   688 net.cpp:139] Memory required for data: 9532160
I0428 20:16:35.675575   688 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:35.675583   688 net.cpp:86] Creating Layer ip2
I0428 20:16:35.675586   688 net.cpp:408] ip2 <- ip1
I0428 20:16:35.675592   688 net.cpp:382] ip2 -> ip2
I0428 20:16:35.675709   688 net.cpp:124] Setting up ip2
I0428 20:16:35.675717   688 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:35.675721   688 net.cpp:139] Memory required for data: 9538560
I0428 20:16:35.675727   688 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:35.675734   688 net.cpp:86] Creating Layer relu2
I0428 20:16:35.675739   688 net.cpp:408] relu2 <- ip2
I0428 20:16:35.675743   688 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:35.676590   688 net.cpp:124] Setting up relu2
I0428 20:16:35.676606   688 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:35.676610   688 net.cpp:139] Memory required for data: 9544960
I0428 20:16:35.676615   688 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:35.676623   688 net.cpp:86] Creating Layer ip3
I0428 20:16:35.676627   688 net.cpp:408] ip3 <- ip2
I0428 20:16:35.676633   688 net.cpp:382] ip3 -> ip3
I0428 20:16:35.676837   688 net.cpp:124] Setting up ip3
I0428 20:16:35.676854   688 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:35.676861   688 net.cpp:139] Memory required for data: 9547520
I0428 20:16:35.676873   688 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:35.676883   688 net.cpp:86] Creating Layer relu3
I0428 20:16:35.676889   688 net.cpp:408] relu3 <- ip3
I0428 20:16:35.676895   688 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:35.677103   688 net.cpp:124] Setting up relu3
I0428 20:16:35.677114   688 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:35.677119   688 net.cpp:139] Memory required for data: 9550080
I0428 20:16:35.677122   688 layer_factory.hpp:77] Creating layer loss
I0428 20:16:35.677129   688 net.cpp:86] Creating Layer loss
I0428 20:16:35.677134   688 net.cpp:408] loss <- ip3
I0428 20:16:35.677137   688 net.cpp:408] loss <- label
I0428 20:16:35.677145   688 net.cpp:382] loss -> loss
I0428 20:16:35.677166   688 layer_factory.hpp:77] Creating layer loss
I0428 20:16:35.677435   688 net.cpp:124] Setting up loss
I0428 20:16:35.677446   688 net.cpp:131] Top shape: (1)
I0428 20:16:35.677450   688 net.cpp:134]     with loss weight 1
I0428 20:16:35.677466   688 net.cpp:139] Memory required for data: 9550084
I0428 20:16:35.677471   688 net.cpp:200] loss needs backward computation.
I0428 20:16:35.677475   688 net.cpp:200] relu3 needs backward computation.
I0428 20:16:35.677479   688 net.cpp:200] ip3 needs backward computation.
I0428 20:16:35.677484   688 net.cpp:200] relu2 needs backward computation.
I0428 20:16:35.677486   688 net.cpp:200] ip2 needs backward computation.
I0428 20:16:35.677489   688 net.cpp:200] relu1 needs backward computation.
I0428 20:16:35.677494   688 net.cpp:200] ip1 needs backward computation.
I0428 20:16:35.677496   688 net.cpp:200] pool1 needs backward computation.
I0428 20:16:35.677500   688 net.cpp:200] conv1 needs backward computation.
I0428 20:16:35.677505   688 net.cpp:200] pool0 needs backward computation.
I0428 20:16:35.677508   688 net.cpp:200] conv0 needs backward computation.
I0428 20:16:35.677512   688 net.cpp:202] mnist does not need backward computation.
I0428 20:16:35.677515   688 net.cpp:244] This network produces output loss
I0428 20:16:35.677526   688 net.cpp:257] Network initialization done.
I0428 20:16:35.677907   688 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1274.prototxt
I0428 20:16:35.677940   688 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:35.678048   688 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:35.678140   688 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:35.678189   688 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:35.678202   688 net.cpp:86] Creating Layer mnist
I0428 20:16:35.678207   688 net.cpp:382] mnist -> data
I0428 20:16:35.678216   688 net.cpp:382] mnist -> label
I0428 20:16:35.678318   688 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:35.680685   688 net.cpp:124] Setting up mnist
I0428 20:16:35.680702   688 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:35.680708   688 net.cpp:131] Top shape: 100 (100)
I0428 20:16:35.680712   688 net.cpp:139] Memory required for data: 314000
I0428 20:16:35.680716   688 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:35.680728   688 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:35.680733   688 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:35.680738   688 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:35.680747   688 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:35.680816   688 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:35.680825   688 net.cpp:131] Top shape: 100 (100)
I0428 20:16:35.680830   688 net.cpp:131] Top shape: 100 (100)
I0428 20:16:35.680833   688 net.cpp:139] Memory required for data: 314800
I0428 20:16:35.680837   688 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:35.680847   688 net.cpp:86] Creating Layer conv0
I0428 20:16:35.680851   688 net.cpp:408] conv0 <- data
I0428 20:16:35.680857   688 net.cpp:382] conv0 -> conv0
I0428 20:16:35.682740   688 net.cpp:124] Setting up conv0
I0428 20:16:35.682757   688 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:35.682761   688 net.cpp:139] Memory required for data: 11834800
I0428 20:16:35.682772   688 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:35.682780   688 net.cpp:86] Creating Layer pool0
I0428 20:16:35.682785   688 net.cpp:408] pool0 <- conv0
I0428 20:16:35.682790   688 net.cpp:382] pool0 -> pool0
I0428 20:16:35.682833   688 net.cpp:124] Setting up pool0
I0428 20:16:35.682840   688 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:35.682843   688 net.cpp:139] Memory required for data: 14714800
I0428 20:16:35.682847   688 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:35.682857   688 net.cpp:86] Creating Layer conv1
I0428 20:16:35.682860   688 net.cpp:408] conv1 <- pool0
I0428 20:16:35.682867   688 net.cpp:382] conv1 -> conv1
I0428 20:16:35.684729   688 net.cpp:124] Setting up conv1
I0428 20:16:35.684747   688 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:35.684751   688 net.cpp:139] Memory required for data: 14842800
I0428 20:16:35.684762   688 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:35.684770   688 net.cpp:86] Creating Layer pool1
I0428 20:16:35.684774   688 net.cpp:408] pool1 <- conv1
I0428 20:16:35.684780   688 net.cpp:382] pool1 -> pool1
I0428 20:16:35.684833   688 net.cpp:124] Setting up pool1
I0428 20:16:35.684840   688 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:35.684844   688 net.cpp:139] Memory required for data: 14874800
I0428 20:16:35.684849   688 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:35.684855   688 net.cpp:86] Creating Layer ip1
I0428 20:16:35.684859   688 net.cpp:408] ip1 <- pool1
I0428 20:16:35.684864   688 net.cpp:382] ip1 -> ip1
I0428 20:16:35.684991   688 net.cpp:124] Setting up ip1
I0428 20:16:35.685003   688 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:35.685019   688 net.cpp:139] Memory required for data: 14884800
I0428 20:16:35.685030   688 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:35.685036   688 net.cpp:86] Creating Layer relu1
I0428 20:16:35.685040   688 net.cpp:408] relu1 <- ip1
I0428 20:16:35.685045   688 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:35.685322   688 net.cpp:124] Setting up relu1
I0428 20:16:35.685334   688 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:35.685338   688 net.cpp:139] Memory required for data: 14894800
I0428 20:16:35.685343   688 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:35.685350   688 net.cpp:86] Creating Layer ip2
I0428 20:16:35.685354   688 net.cpp:408] ip2 <- ip1
I0428 20:16:35.685360   688 net.cpp:382] ip2 -> ip2
I0428 20:16:35.685484   688 net.cpp:124] Setting up ip2
I0428 20:16:35.685494   688 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:35.685499   688 net.cpp:139] Memory required for data: 14904800
I0428 20:16:35.685505   688 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:35.685511   688 net.cpp:86] Creating Layer relu2
I0428 20:16:35.685514   688 net.cpp:408] relu2 <- ip2
I0428 20:16:35.685520   688 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:35.685714   688 net.cpp:124] Setting up relu2
I0428 20:16:35.685724   688 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:35.685727   688 net.cpp:139] Memory required for data: 14914800
I0428 20:16:35.685732   688 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:35.685740   688 net.cpp:86] Creating Layer ip3
I0428 20:16:35.685745   688 net.cpp:408] ip3 <- ip2
I0428 20:16:35.685750   688 net.cpp:382] ip3 -> ip3
I0428 20:16:35.685868   688 net.cpp:124] Setting up ip3
I0428 20:16:35.685878   688 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:35.685881   688 net.cpp:139] Memory required for data: 14918800
I0428 20:16:35.685891   688 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:35.685896   688 net.cpp:86] Creating Layer relu3
I0428 20:16:35.685900   688 net.cpp:408] relu3 <- ip3
I0428 20:16:35.685905   688 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:35.686828   688 net.cpp:124] Setting up relu3
I0428 20:16:35.686843   688 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:35.686847   688 net.cpp:139] Memory required for data: 14922800
I0428 20:16:35.686851   688 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:35.686857   688 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:35.686861   688 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:35.686868   688 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:35.686877   688 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:35.686923   688 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:35.686929   688 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:35.686933   688 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:35.686944   688 net.cpp:139] Memory required for data: 14930800
I0428 20:16:35.686947   688 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:35.686956   688 net.cpp:86] Creating Layer accuracy
I0428 20:16:35.686960   688 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:35.686965   688 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:35.686970   688 net.cpp:382] accuracy -> accuracy
I0428 20:16:35.686980   688 net.cpp:124] Setting up accuracy
I0428 20:16:35.686983   688 net.cpp:131] Top shape: (1)
I0428 20:16:35.686987   688 net.cpp:139] Memory required for data: 14930804
I0428 20:16:35.686991   688 layer_factory.hpp:77] Creating layer loss
I0428 20:16:35.686997   688 net.cpp:86] Creating Layer loss
I0428 20:16:35.687001   688 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:35.687006   688 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:35.687011   688 net.cpp:382] loss -> loss
I0428 20:16:35.687018   688 layer_factory.hpp:77] Creating layer loss
I0428 20:16:35.687307   688 net.cpp:124] Setting up loss
I0428 20:16:35.687319   688 net.cpp:131] Top shape: (1)
I0428 20:16:35.687322   688 net.cpp:134]     with loss weight 1
I0428 20:16:35.687340   688 net.cpp:139] Memory required for data: 14930808
I0428 20:16:35.687345   688 net.cpp:200] loss needs backward computation.
I0428 20:16:35.687350   688 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:35.687355   688 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:35.687360   688 net.cpp:200] relu3 needs backward computation.
I0428 20:16:35.687362   688 net.cpp:200] ip3 needs backward computation.
I0428 20:16:35.687366   688 net.cpp:200] relu2 needs backward computation.
I0428 20:16:35.687369   688 net.cpp:200] ip2 needs backward computation.
I0428 20:16:35.687373   688 net.cpp:200] relu1 needs backward computation.
I0428 20:16:35.687376   688 net.cpp:200] ip1 needs backward computation.
I0428 20:16:35.687381   688 net.cpp:200] pool1 needs backward computation.
I0428 20:16:35.687384   688 net.cpp:200] conv1 needs backward computation.
I0428 20:16:35.687388   688 net.cpp:200] pool0 needs backward computation.
I0428 20:16:35.687391   688 net.cpp:200] conv0 needs backward computation.
I0428 20:16:35.687397   688 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:35.687402   688 net.cpp:202] mnist does not need backward computation.
I0428 20:16:35.687404   688 net.cpp:244] This network produces output accuracy
I0428 20:16:35.687408   688 net.cpp:244] This network produces output loss
I0428 20:16:35.687423   688 net.cpp:257] Network initialization done.
I0428 20:16:35.687475   688 solver.cpp:56] Solver scaffolding done.
I0428 20:16:35.687922   688 caffe.cpp:248] Starting Optimization
I0428 20:16:35.687930   688 solver.cpp:273] Solving LeNet
I0428 20:16:35.687933   688 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:35.688802   688 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:35.761777   695 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:35.763660   688 solver.cpp:398]     Test net output #0: accuracy = 0.0965
I0428 20:16:35.763685   688 solver.cpp:398]     Test net output #1: loss = 2.30224 (* 1 = 2.30224 loss)
I0428 20:16:35.768295   688 solver.cpp:219] Iteration 0 (0 iter/s, 0.0803278s/100 iters), loss = 2.30071
I0428 20:16:35.768324   688 solver.cpp:238]     Train net output #0: loss = 2.30071 (* 1 = 2.30071 loss)
I0428 20:16:35.768338   688 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:35.891968   688 solver.cpp:219] Iteration 100 (808.915 iter/s, 0.123622s/100 iters), loss = 0.48091
I0428 20:16:35.892004   688 solver.cpp:238]     Train net output #0: loss = 0.48091 (* 1 = 0.48091 loss)
I0428 20:16:35.892014   688 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:36.012550   688 solver.cpp:219] Iteration 200 (829.627 iter/s, 0.120536s/100 iters), loss = 0.303154
I0428 20:16:36.012586   688 solver.cpp:238]     Train net output #0: loss = 0.303154 (* 1 = 0.303154 loss)
I0428 20:16:36.012595   688 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:36.132805   688 solver.cpp:219] Iteration 300 (831.889 iter/s, 0.120208s/100 iters), loss = 0.280867
I0428 20:16:36.132846   688 solver.cpp:238]     Train net output #0: loss = 0.280867 (* 1 = 0.280867 loss)
I0428 20:16:36.132855   688 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:36.252429   688 solver.cpp:219] Iteration 400 (836.327 iter/s, 0.11957s/100 iters), loss = 0.150099
I0428 20:16:36.252461   688 solver.cpp:238]     Train net output #0: loss = 0.150099 (* 1 = 0.150099 loss)
I0428 20:16:36.252470   688 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:36.374552   688 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:36.444540   695 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:36.447516   688 solver.cpp:398]     Test net output #0: accuracy = 0.9501
I0428 20:16:36.447567   688 solver.cpp:398]     Test net output #1: loss = 0.163004 (* 1 = 0.163004 loss)
I0428 20:16:36.448899   688 solver.cpp:219] Iteration 500 (509.117 iter/s, 0.196419s/100 iters), loss = 0.112889
I0428 20:16:36.448942   688 solver.cpp:238]     Train net output #0: loss = 0.112889 (* 1 = 0.112889 loss)
I0428 20:16:36.448982   688 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:36.576825   688 solver.cpp:219] Iteration 600 (782.045 iter/s, 0.12787s/100 iters), loss = 0.14975
I0428 20:16:36.576863   688 solver.cpp:238]     Train net output #0: loss = 0.14975 (* 1 = 0.14975 loss)
I0428 20:16:36.576871   688 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:36.691679   688 solver.cpp:219] Iteration 700 (871.021 iter/s, 0.114808s/100 iters), loss = 0.179846
I0428 20:16:36.691720   688 solver.cpp:238]     Train net output #0: loss = 0.179846 (* 1 = 0.179846 loss)
I0428 20:16:36.691726   688 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:36.809196   688 solver.cpp:219] Iteration 800 (851.316 iter/s, 0.117465s/100 iters), loss = 0.2511
I0428 20:16:36.809238   688 solver.cpp:238]     Train net output #0: loss = 0.2511 (* 1 = 0.2511 loss)
I0428 20:16:36.809244   688 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:36.928166   688 solver.cpp:219] Iteration 900 (840.849 iter/s, 0.118927s/100 iters), loss = 0.177437
I0428 20:16:36.928225   688 solver.cpp:238]     Train net output #0: loss = 0.177437 (* 1 = 0.177437 loss)
I0428 20:16:36.928237   688 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:36.971396   694 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:37.050372   688 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:37.051400   688 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:37.052129   688 solver.cpp:311] Iteration 1000, loss = 0.177202
I0428 20:16:37.052146   688 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:37.119776   695 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:37.122176   688 solver.cpp:398]     Test net output #0: accuracy = 0.9704
I0428 20:16:37.122200   688 solver.cpp:398]     Test net output #1: loss = 0.0917943 (* 1 = 0.0917943 loss)
I0428 20:16:37.122213   688 solver.cpp:316] Optimization Done.
I0428 20:16:37.122216   688 caffe.cpp:259] Optimization Done.
