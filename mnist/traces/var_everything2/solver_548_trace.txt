I0428 19:48:33.925058 26512 caffe.cpp:218] Using GPUs 0
I0428 19:48:33.961889 26512 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:34.469861 26512 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test548.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:34.470028 26512 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test548.prototxt
I0428 19:48:34.470376 26512 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:34.470398 26512 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:34.470489 26512 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:48:34.470589 26512 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:34.470723 26512 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:34.470757 26512 net.cpp:86] Creating Layer mnist
I0428 19:48:34.470770 26512 net.cpp:382] mnist -> data
I0428 19:48:34.470800 26512 net.cpp:382] mnist -> label
I0428 19:48:34.472000 26512 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:34.474476 26512 net.cpp:124] Setting up mnist
I0428 19:48:34.474495 26512 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:34.474506 26512 net.cpp:131] Top shape: 64 (64)
I0428 19:48:34.474512 26512 net.cpp:139] Memory required for data: 200960
I0428 19:48:34.474524 26512 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:34.474547 26512 net.cpp:86] Creating Layer conv0
I0428 19:48:34.474558 26512 net.cpp:408] conv0 <- data
I0428 19:48:34.474576 26512 net.cpp:382] conv0 -> conv0
I0428 19:48:34.747632 26512 net.cpp:124] Setting up conv0
I0428 19:48:34.747658 26512 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:34.747663 26512 net.cpp:139] Memory required for data: 938240
I0428 19:48:34.747697 26512 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:34.747714 26512 net.cpp:86] Creating Layer pool0
I0428 19:48:34.747730 26512 net.cpp:408] pool0 <- conv0
I0428 19:48:34.747738 26512 net.cpp:382] pool0 -> pool0
I0428 19:48:34.747793 26512 net.cpp:124] Setting up pool0
I0428 19:48:34.747802 26512 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:34.747824 26512 net.cpp:139] Memory required for data: 1122560
I0428 19:48:34.747831 26512 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:34.747846 26512 net.cpp:86] Creating Layer conv1
I0428 19:48:34.747853 26512 net.cpp:408] conv1 <- pool0
I0428 19:48:34.747860 26512 net.cpp:382] conv1 -> conv1
I0428 19:48:34.749711 26512 net.cpp:124] Setting up conv1
I0428 19:48:34.749727 26512 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:34.749733 26512 net.cpp:139] Memory required for data: 1204480
I0428 19:48:34.749747 26512 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:34.749757 26512 net.cpp:86] Creating Layer pool1
I0428 19:48:34.749763 26512 net.cpp:408] pool1 <- conv1
I0428 19:48:34.749770 26512 net.cpp:382] pool1 -> pool1
I0428 19:48:34.749831 26512 net.cpp:124] Setting up pool1
I0428 19:48:34.749840 26512 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:34.749845 26512 net.cpp:139] Memory required for data: 1224960
I0428 19:48:34.749850 26512 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:34.749861 26512 net.cpp:86] Creating Layer ip1
I0428 19:48:34.749866 26512 net.cpp:408] ip1 <- pool1
I0428 19:48:34.749874 26512 net.cpp:382] ip1 -> ip1
I0428 19:48:34.749989 26512 net.cpp:124] Setting up ip1
I0428 19:48:34.749997 26512 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:34.750002 26512 net.cpp:139] Memory required for data: 1227520
I0428 19:48:34.750013 26512 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:34.750022 26512 net.cpp:86] Creating Layer relu1
I0428 19:48:34.750028 26512 net.cpp:408] relu1 <- ip1
I0428 19:48:34.750036 26512 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:34.750202 26512 net.cpp:124] Setting up relu1
I0428 19:48:34.750211 26512 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:34.750216 26512 net.cpp:139] Memory required for data: 1230080
I0428 19:48:34.750221 26512 layer_factory.hpp:77] Creating layer loss
I0428 19:48:34.750229 26512 net.cpp:86] Creating Layer loss
I0428 19:48:34.750236 26512 net.cpp:408] loss <- ip1
I0428 19:48:34.750243 26512 net.cpp:408] loss <- label
I0428 19:48:34.750252 26512 net.cpp:382] loss -> loss
I0428 19:48:34.750268 26512 layer_factory.hpp:77] Creating layer loss
I0428 19:48:34.751091 26512 net.cpp:124] Setting up loss
I0428 19:48:34.751106 26512 net.cpp:131] Top shape: (1)
I0428 19:48:34.751111 26512 net.cpp:134]     with loss weight 1
I0428 19:48:34.751130 26512 net.cpp:139] Memory required for data: 1230084
I0428 19:48:34.751137 26512 net.cpp:200] loss needs backward computation.
I0428 19:48:34.751142 26512 net.cpp:200] relu1 needs backward computation.
I0428 19:48:34.751147 26512 net.cpp:200] ip1 needs backward computation.
I0428 19:48:34.751152 26512 net.cpp:200] pool1 needs backward computation.
I0428 19:48:34.751157 26512 net.cpp:200] conv1 needs backward computation.
I0428 19:48:34.751163 26512 net.cpp:200] pool0 needs backward computation.
I0428 19:48:34.751168 26512 net.cpp:200] conv0 needs backward computation.
I0428 19:48:34.751173 26512 net.cpp:202] mnist does not need backward computation.
I0428 19:48:34.751178 26512 net.cpp:244] This network produces output loss
I0428 19:48:34.751193 26512 net.cpp:257] Network initialization done.
I0428 19:48:34.751451 26512 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test548.prototxt
I0428 19:48:34.751480 26512 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:34.751556 26512 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:48:34.751685 26512 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:34.751745 26512 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:34.751765 26512 net.cpp:86] Creating Layer mnist
I0428 19:48:34.751772 26512 net.cpp:382] mnist -> data
I0428 19:48:34.751785 26512 net.cpp:382] mnist -> label
I0428 19:48:34.751905 26512 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:34.754009 26512 net.cpp:124] Setting up mnist
I0428 19:48:34.754040 26512 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:34.754050 26512 net.cpp:131] Top shape: 100 (100)
I0428 19:48:34.754070 26512 net.cpp:139] Memory required for data: 314000
I0428 19:48:34.754091 26512 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:34.754117 26512 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:34.754122 26512 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:34.754143 26512 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:34.754153 26512 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:34.754231 26512 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:34.754241 26512 net.cpp:131] Top shape: 100 (100)
I0428 19:48:34.754247 26512 net.cpp:131] Top shape: 100 (100)
I0428 19:48:34.754252 26512 net.cpp:139] Memory required for data: 314800
I0428 19:48:34.754257 26512 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:34.754271 26512 net.cpp:86] Creating Layer conv0
I0428 19:48:34.754278 26512 net.cpp:408] conv0 <- data
I0428 19:48:34.754288 26512 net.cpp:382] conv0 -> conv0
I0428 19:48:34.755151 26512 net.cpp:124] Setting up conv0
I0428 19:48:34.755180 26512 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:34.755187 26512 net.cpp:139] Memory required for data: 1466800
I0428 19:48:34.755215 26512 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:34.755225 26512 net.cpp:86] Creating Layer pool0
I0428 19:48:34.755233 26512 net.cpp:408] pool0 <- conv0
I0428 19:48:34.755240 26512 net.cpp:382] pool0 -> pool0
I0428 19:48:34.755283 26512 net.cpp:124] Setting up pool0
I0428 19:48:34.755291 26512 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:34.755297 26512 net.cpp:139] Memory required for data: 1754800
I0428 19:48:34.755302 26512 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:34.755316 26512 net.cpp:86] Creating Layer conv1
I0428 19:48:34.755322 26512 net.cpp:408] conv1 <- pool0
I0428 19:48:34.755331 26512 net.cpp:382] conv1 -> conv1
I0428 19:48:34.757550 26512 net.cpp:124] Setting up conv1
I0428 19:48:34.757565 26512 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:34.757571 26512 net.cpp:139] Memory required for data: 1882800
I0428 19:48:34.757599 26512 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:34.757609 26512 net.cpp:86] Creating Layer pool1
I0428 19:48:34.757627 26512 net.cpp:408] pool1 <- conv1
I0428 19:48:34.757647 26512 net.cpp:382] pool1 -> pool1
I0428 19:48:34.757716 26512 net.cpp:124] Setting up pool1
I0428 19:48:34.757726 26512 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:34.757731 26512 net.cpp:139] Memory required for data: 1914800
I0428 19:48:34.757737 26512 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:34.757747 26512 net.cpp:86] Creating Layer ip1
I0428 19:48:34.757767 26512 net.cpp:408] ip1 <- pool1
I0428 19:48:34.757776 26512 net.cpp:382] ip1 -> ip1
I0428 19:48:34.757916 26512 net.cpp:124] Setting up ip1
I0428 19:48:34.757926 26512 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:34.757932 26512 net.cpp:139] Memory required for data: 1918800
I0428 19:48:34.757944 26512 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:34.757954 26512 net.cpp:86] Creating Layer relu1
I0428 19:48:34.757961 26512 net.cpp:408] relu1 <- ip1
I0428 19:48:34.757968 26512 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:34.758834 26512 net.cpp:124] Setting up relu1
I0428 19:48:34.758848 26512 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:34.758854 26512 net.cpp:139] Memory required for data: 1922800
I0428 19:48:34.758860 26512 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:48:34.758870 26512 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:48:34.758877 26512 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:48:34.758886 26512 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:48:34.758896 26512 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:48:34.758956 26512 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:48:34.758965 26512 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:34.758981 26512 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:34.758986 26512 net.cpp:139] Memory required for data: 1930800
I0428 19:48:34.758993 26512 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:34.759001 26512 net.cpp:86] Creating Layer accuracy
I0428 19:48:34.759006 26512 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:48:34.759013 26512 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:34.759021 26512 net.cpp:382] accuracy -> accuracy
I0428 19:48:34.759033 26512 net.cpp:124] Setting up accuracy
I0428 19:48:34.759042 26512 net.cpp:131] Top shape: (1)
I0428 19:48:34.759047 26512 net.cpp:139] Memory required for data: 1930804
I0428 19:48:34.759052 26512 layer_factory.hpp:77] Creating layer loss
I0428 19:48:34.759058 26512 net.cpp:86] Creating Layer loss
I0428 19:48:34.759064 26512 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:48:34.759070 26512 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:34.759078 26512 net.cpp:382] loss -> loss
I0428 19:48:34.759088 26512 layer_factory.hpp:77] Creating layer loss
I0428 19:48:34.759344 26512 net.cpp:124] Setting up loss
I0428 19:48:34.759358 26512 net.cpp:131] Top shape: (1)
I0428 19:48:34.759364 26512 net.cpp:134]     with loss weight 1
I0428 19:48:34.759374 26512 net.cpp:139] Memory required for data: 1930808
I0428 19:48:34.759380 26512 net.cpp:200] loss needs backward computation.
I0428 19:48:34.759387 26512 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:34.759393 26512 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:48:34.759399 26512 net.cpp:200] relu1 needs backward computation.
I0428 19:48:34.759404 26512 net.cpp:200] ip1 needs backward computation.
I0428 19:48:34.759410 26512 net.cpp:200] pool1 needs backward computation.
I0428 19:48:34.759418 26512 net.cpp:200] conv1 needs backward computation.
I0428 19:48:34.759423 26512 net.cpp:200] pool0 needs backward computation.
I0428 19:48:34.759428 26512 net.cpp:200] conv0 needs backward computation.
I0428 19:48:34.759434 26512 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:34.759441 26512 net.cpp:202] mnist does not need backward computation.
I0428 19:48:34.759448 26512 net.cpp:244] This network produces output accuracy
I0428 19:48:34.759454 26512 net.cpp:244] This network produces output loss
I0428 19:48:34.759469 26512 net.cpp:257] Network initialization done.
I0428 19:48:34.759519 26512 solver.cpp:56] Solver scaffolding done.
I0428 19:48:34.759789 26512 caffe.cpp:248] Starting Optimization
I0428 19:48:34.759796 26512 solver.cpp:273] Solving LeNet
I0428 19:48:34.759801 26512 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:34.760573 26512 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:34.763818 26512 blocking_queue.cpp:49] Waiting for data
I0428 19:48:34.835904 26522 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:34.836374 26512 solver.cpp:398]     Test net output #0: accuracy = 0.0704
I0428 19:48:34.836393 26512 solver.cpp:398]     Test net output #1: loss = 2.37786 (* 1 = 2.37786 loss)
I0428 19:48:34.837960 26512 solver.cpp:219] Iteration 0 (-2.16395e-31 iter/s, 0.078121s/100 iters), loss = 2.35005
I0428 19:48:34.838006 26512 solver.cpp:238]     Train net output #0: loss = 2.35005 (* 1 = 2.35005 loss)
I0428 19:48:34.838026 26512 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:34.899425 26512 solver.cpp:219] Iteration 100 (1628.2 iter/s, 0.0614175s/100 iters), loss = 1.25468
I0428 19:48:34.899456 26512 solver.cpp:238]     Train net output #0: loss = 1.25468 (* 1 = 1.25468 loss)
I0428 19:48:34.899480 26512 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:34.954890 26512 solver.cpp:219] Iteration 200 (1804.1 iter/s, 0.0554293s/100 iters), loss = 1.63441
I0428 19:48:34.954917 26512 solver.cpp:238]     Train net output #0: loss = 1.63441 (* 1 = 1.63441 loss)
I0428 19:48:34.954942 26512 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:35.024899 26512 solver.cpp:219] Iteration 300 (1429.08 iter/s, 0.0699751s/100 iters), loss = 1.49327
I0428 19:48:35.024927 26512 solver.cpp:238]     Train net output #0: loss = 1.49327 (* 1 = 1.49327 loss)
I0428 19:48:35.024953 26512 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:35.090119 26512 solver.cpp:219] Iteration 400 (1534.08 iter/s, 0.0651858s/100 iters), loss = 1.74048
I0428 19:48:35.090147 26512 solver.cpp:238]     Train net output #0: loss = 1.74048 (* 1 = 1.74048 loss)
I0428 19:48:35.090157 26512 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:35.146167 26512 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:35.221318 26522 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:35.221781 26512 solver.cpp:398]     Test net output #0: accuracy = 0.4766
I0428 19:48:35.221804 26512 solver.cpp:398]     Test net output #1: loss = 1.47798 (* 1 = 1.47798 loss)
I0428 19:48:35.222506 26512 solver.cpp:219] Iteration 500 (755.578 iter/s, 0.132349s/100 iters), loss = 1.45251
I0428 19:48:35.222535 26512 solver.cpp:238]     Train net output #0: loss = 1.45251 (* 1 = 1.45251 loss)
I0428 19:48:35.222546 26512 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:35.283051 26512 solver.cpp:219] Iteration 600 (1652.61 iter/s, 0.0605102s/100 iters), loss = 1.3949
I0428 19:48:35.283079 26512 solver.cpp:238]     Train net output #0: loss = 1.3949 (* 1 = 1.3949 loss)
I0428 19:48:35.283089 26512 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:35.339089 26512 solver.cpp:219] Iteration 700 (1785.57 iter/s, 0.0560046s/100 iters), loss = 1.52464
I0428 19:48:35.339118 26512 solver.cpp:238]     Train net output #0: loss = 1.52464 (* 1 = 1.52464 loss)
I0428 19:48:35.339128 26512 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:35.394788 26512 solver.cpp:219] Iteration 800 (1796.5 iter/s, 0.0556637s/100 iters), loss = 1.27777
I0428 19:48:35.394814 26512 solver.cpp:238]     Train net output #0: loss = 1.27777 (* 1 = 1.27777 loss)
I0428 19:48:35.394824 26512 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:35.450083 26512 solver.cpp:219] Iteration 900 (1809.49 iter/s, 0.0552643s/100 iters), loss = 0.736059
I0428 19:48:35.450110 26512 solver.cpp:238]     Train net output #0: loss = 0.736059 (* 1 = 0.736059 loss)
I0428 19:48:35.450136 26512 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:35.468755 26519 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:35.512691 26512 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:35.513278 26512 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:35.513643 26512 solver.cpp:311] Iteration 1000, loss = 0.438073
I0428 19:48:35.513659 26512 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:35.588346 26522 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:35.588842 26512 solver.cpp:398]     Test net output #0: accuracy = 0.8462
I0428 19:48:35.588863 26512 solver.cpp:398]     Test net output #1: loss = 0.441081 (* 1 = 0.441081 loss)
I0428 19:48:35.588874 26512 solver.cpp:316] Optimization Done.
I0428 19:48:35.588887 26512 caffe.cpp:259] Optimization Done.
