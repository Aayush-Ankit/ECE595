I0428 19:34:16.097641 23299 caffe.cpp:218] Using GPUs 0
I0428 19:34:16.138473 23299 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:16.602031 23299 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test200.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:16.602144 23299 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test200.prototxt
I0428 19:34:16.602434 23299 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:16.602447 23299 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:16.602512 23299 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:16.602584 23299 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:16.602721 23299 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:16.602751 23299 net.cpp:86] Creating Layer mnist
I0428 19:34:16.602759 23299 net.cpp:382] mnist -> data
I0428 19:34:16.602779 23299 net.cpp:382] mnist -> label
I0428 19:34:16.603893 23299 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:16.606202 23299 net.cpp:124] Setting up mnist
I0428 19:34:16.606232 23299 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:16.606237 23299 net.cpp:131] Top shape: 64 (64)
I0428 19:34:16.606240 23299 net.cpp:139] Memory required for data: 200960
I0428 19:34:16.606246 23299 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:16.606261 23299 net.cpp:86] Creating Layer conv0
I0428 19:34:16.606266 23299 net.cpp:408] conv0 <- data
I0428 19:34:16.606276 23299 net.cpp:382] conv0 -> conv0
I0428 19:34:16.835651 23299 net.cpp:124] Setting up conv0
I0428 19:34:16.835677 23299 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:16.835681 23299 net.cpp:139] Memory required for data: 7573760
I0428 19:34:16.835695 23299 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:16.835706 23299 net.cpp:86] Creating Layer pool0
I0428 19:34:16.835711 23299 net.cpp:408] pool0 <- conv0
I0428 19:34:16.835716 23299 net.cpp:382] pool0 -> pool0
I0428 19:34:16.835793 23299 net.cpp:124] Setting up pool0
I0428 19:34:16.835798 23299 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:16.835800 23299 net.cpp:139] Memory required for data: 9416960
I0428 19:34:16.835822 23299 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:16.835832 23299 net.cpp:86] Creating Layer ip1
I0428 19:34:16.835835 23299 net.cpp:408] ip1 <- pool0
I0428 19:34:16.835839 23299 net.cpp:382] ip1 -> ip1
I0428 19:34:16.837257 23299 net.cpp:124] Setting up ip1
I0428 19:34:16.837270 23299 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:16.837290 23299 net.cpp:139] Memory required for data: 9419520
I0428 19:34:16.837297 23299 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:16.837306 23299 net.cpp:86] Creating Layer relu1
I0428 19:34:16.837308 23299 net.cpp:408] relu1 <- ip1
I0428 19:34:16.837313 23299 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:16.837483 23299 net.cpp:124] Setting up relu1
I0428 19:34:16.837493 23299 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:16.837497 23299 net.cpp:139] Memory required for data: 9422080
I0428 19:34:16.837501 23299 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:16.837507 23299 net.cpp:86] Creating Layer ip2
I0428 19:34:16.837524 23299 net.cpp:408] ip2 <- ip1
I0428 19:34:16.837530 23299 net.cpp:382] ip2 -> ip2
I0428 19:34:16.837635 23299 net.cpp:124] Setting up ip2
I0428 19:34:16.837641 23299 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:16.837644 23299 net.cpp:139] Memory required for data: 9424640
I0428 19:34:16.837651 23299 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:16.837656 23299 net.cpp:86] Creating Layer relu2
I0428 19:34:16.837659 23299 net.cpp:408] relu2 <- ip2
I0428 19:34:16.837664 23299 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:16.838474 23299 net.cpp:124] Setting up relu2
I0428 19:34:16.838486 23299 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:16.838505 23299 net.cpp:139] Memory required for data: 9427200
I0428 19:34:16.838508 23299 layer_factory.hpp:77] Creating layer loss
I0428 19:34:16.838515 23299 net.cpp:86] Creating Layer loss
I0428 19:34:16.838517 23299 net.cpp:408] loss <- ip2
I0428 19:34:16.838522 23299 net.cpp:408] loss <- label
I0428 19:34:16.838527 23299 net.cpp:382] loss -> loss
I0428 19:34:16.838544 23299 layer_factory.hpp:77] Creating layer loss
I0428 19:34:16.838847 23299 net.cpp:124] Setting up loss
I0428 19:34:16.838857 23299 net.cpp:131] Top shape: (1)
I0428 19:34:16.838860 23299 net.cpp:134]     with loss weight 1
I0428 19:34:16.838874 23299 net.cpp:139] Memory required for data: 9427204
I0428 19:34:16.838878 23299 net.cpp:200] loss needs backward computation.
I0428 19:34:16.838881 23299 net.cpp:200] relu2 needs backward computation.
I0428 19:34:16.838884 23299 net.cpp:200] ip2 needs backward computation.
I0428 19:34:16.838887 23299 net.cpp:200] relu1 needs backward computation.
I0428 19:34:16.838891 23299 net.cpp:200] ip1 needs backward computation.
I0428 19:34:16.838893 23299 net.cpp:200] pool0 needs backward computation.
I0428 19:34:16.838896 23299 net.cpp:200] conv0 needs backward computation.
I0428 19:34:16.838899 23299 net.cpp:202] mnist does not need backward computation.
I0428 19:34:16.838902 23299 net.cpp:244] This network produces output loss
I0428 19:34:16.838910 23299 net.cpp:257] Network initialization done.
I0428 19:34:16.839202 23299 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test200.prototxt
I0428 19:34:16.839226 23299 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:16.839299 23299 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:16.839371 23299 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:16.839431 23299 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:16.839444 23299 net.cpp:86] Creating Layer mnist
I0428 19:34:16.839448 23299 net.cpp:382] mnist -> data
I0428 19:34:16.839455 23299 net.cpp:382] mnist -> label
I0428 19:34:16.839540 23299 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:16.840925 23299 net.cpp:124] Setting up mnist
I0428 19:34:16.840970 23299 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:16.840975 23299 net.cpp:131] Top shape: 100 (100)
I0428 19:34:16.840978 23299 net.cpp:139] Memory required for data: 314000
I0428 19:34:16.840996 23299 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:16.841039 23299 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:16.841044 23299 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:16.841048 23299 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:16.841056 23299 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:16.841101 23299 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:16.841109 23299 net.cpp:131] Top shape: 100 (100)
I0428 19:34:16.841112 23299 net.cpp:131] Top shape: 100 (100)
I0428 19:34:16.841114 23299 net.cpp:139] Memory required for data: 314800
I0428 19:34:16.841117 23299 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:16.841141 23299 net.cpp:86] Creating Layer conv0
I0428 19:34:16.841145 23299 net.cpp:408] conv0 <- data
I0428 19:34:16.841151 23299 net.cpp:382] conv0 -> conv0
I0428 19:34:16.843237 23299 net.cpp:124] Setting up conv0
I0428 19:34:16.843250 23299 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:16.843269 23299 net.cpp:139] Memory required for data: 11834800
I0428 19:34:16.843277 23299 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:16.843286 23299 net.cpp:86] Creating Layer pool0
I0428 19:34:16.843288 23299 net.cpp:408] pool0 <- conv0
I0428 19:34:16.843294 23299 net.cpp:382] pool0 -> pool0
I0428 19:34:16.843328 23299 net.cpp:124] Setting up pool0
I0428 19:34:16.843333 23299 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:16.843336 23299 net.cpp:139] Memory required for data: 14714800
I0428 19:34:16.843338 23299 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:16.843346 23299 net.cpp:86] Creating Layer ip1
I0428 19:34:16.843349 23299 net.cpp:408] ip1 <- pool0
I0428 19:34:16.843353 23299 net.cpp:382] ip1 -> ip1
I0428 19:34:16.843915 23299 net.cpp:124] Setting up ip1
I0428 19:34:16.843924 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.843926 23299 net.cpp:139] Memory required for data: 14718800
I0428 19:34:16.843935 23299 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:16.843940 23299 net.cpp:86] Creating Layer relu1
I0428 19:34:16.843943 23299 net.cpp:408] relu1 <- ip1
I0428 19:34:16.843947 23299 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:16.844244 23299 net.cpp:124] Setting up relu1
I0428 19:34:16.844251 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.844295 23299 net.cpp:139] Memory required for data: 14722800
I0428 19:34:16.844298 23299 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:16.844305 23299 net.cpp:86] Creating Layer ip2
I0428 19:34:16.844310 23299 net.cpp:408] ip2 <- ip1
I0428 19:34:16.844316 23299 net.cpp:382] ip2 -> ip2
I0428 19:34:16.844413 23299 net.cpp:124] Setting up ip2
I0428 19:34:16.844421 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.844430 23299 net.cpp:139] Memory required for data: 14726800
I0428 19:34:16.844439 23299 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:16.844444 23299 net.cpp:86] Creating Layer relu2
I0428 19:34:16.844446 23299 net.cpp:408] relu2 <- ip2
I0428 19:34:16.844451 23299 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:16.844609 23299 net.cpp:124] Setting up relu2
I0428 19:34:16.844616 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.844620 23299 net.cpp:139] Memory required for data: 14730800
I0428 19:34:16.844624 23299 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:16.844630 23299 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:16.844632 23299 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:16.844637 23299 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:16.844643 23299 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:16.844678 23299 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:16.844684 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.844688 23299 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:16.844691 23299 net.cpp:139] Memory required for data: 14738800
I0428 19:34:16.844693 23299 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:16.844699 23299 net.cpp:86] Creating Layer accuracy
I0428 19:34:16.844703 23299 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:16.844707 23299 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:16.844712 23299 net.cpp:382] accuracy -> accuracy
I0428 19:34:16.844718 23299 net.cpp:124] Setting up accuracy
I0428 19:34:16.844722 23299 net.cpp:131] Top shape: (1)
I0428 19:34:16.844725 23299 net.cpp:139] Memory required for data: 14738804
I0428 19:34:16.844727 23299 layer_factory.hpp:77] Creating layer loss
I0428 19:34:16.844732 23299 net.cpp:86] Creating Layer loss
I0428 19:34:16.844734 23299 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:16.844738 23299 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:16.844743 23299 net.cpp:382] loss -> loss
I0428 19:34:16.844763 23299 layer_factory.hpp:77] Creating layer loss
I0428 19:34:16.845880 23299 net.cpp:124] Setting up loss
I0428 19:34:16.845892 23299 net.cpp:131] Top shape: (1)
I0428 19:34:16.845913 23299 net.cpp:134]     with loss weight 1
I0428 19:34:16.845919 23299 net.cpp:139] Memory required for data: 14738808
I0428 19:34:16.845922 23299 net.cpp:200] loss needs backward computation.
I0428 19:34:16.845927 23299 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:16.845930 23299 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:16.845933 23299 net.cpp:200] relu2 needs backward computation.
I0428 19:34:16.845937 23299 net.cpp:200] ip2 needs backward computation.
I0428 19:34:16.845939 23299 net.cpp:200] relu1 needs backward computation.
I0428 19:34:16.845942 23299 net.cpp:200] ip1 needs backward computation.
I0428 19:34:16.845944 23299 net.cpp:200] pool0 needs backward computation.
I0428 19:34:16.845949 23299 net.cpp:200] conv0 needs backward computation.
I0428 19:34:16.845952 23299 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:16.845955 23299 net.cpp:202] mnist does not need backward computation.
I0428 19:34:16.845959 23299 net.cpp:244] This network produces output accuracy
I0428 19:34:16.845963 23299 net.cpp:244] This network produces output loss
I0428 19:34:16.845988 23299 net.cpp:257] Network initialization done.
I0428 19:34:16.846020 23299 solver.cpp:56] Solver scaffolding done.
I0428 19:34:16.846228 23299 caffe.cpp:248] Starting Optimization
I0428 19:34:16.846236 23299 solver.cpp:273] Solving LeNet
I0428 19:34:16.846249 23299 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:16.847053 23299 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:16.857851 23299 blocking_queue.cpp:49] Waiting for data
I0428 19:34:16.944470 23306 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:16.945933 23299 solver.cpp:398]     Test net output #0: accuracy = 0.0662
I0428 19:34:16.945968 23299 solver.cpp:398]     Test net output #1: loss = 2.29916 (* 1 = 2.29916 loss)
I0428 19:34:16.950275 23299 solver.cpp:219] Iteration 0 (0 iter/s, 0.103999s/100 iters), loss = 2.29018
I0428 19:34:16.950299 23299 solver.cpp:238]     Train net output #0: loss = 2.29018 (* 1 = 2.29018 loss)
I0428 19:34:16.950309 23299 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:17.089375 23299 solver.cpp:219] Iteration 100 (719.113 iter/s, 0.13906s/100 iters), loss = 1.0408
I0428 19:34:17.089416 23299 solver.cpp:238]     Train net output #0: loss = 1.0408 (* 1 = 1.0408 loss)
I0428 19:34:17.089423 23299 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:17.228345 23299 solver.cpp:219] Iteration 200 (719.855 iter/s, 0.138917s/100 iters), loss = 0.935632
I0428 19:34:17.228370 23299 solver.cpp:238]     Train net output #0: loss = 0.935632 (* 1 = 0.935632 loss)
I0428 19:34:17.228376 23299 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:17.364473 23299 solver.cpp:219] Iteration 300 (734.799 iter/s, 0.136092s/100 iters), loss = 0.957989
I0428 19:34:17.364496 23299 solver.cpp:238]     Train net output #0: loss = 0.957989 (* 1 = 0.957989 loss)
I0428 19:34:17.364502 23299 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:17.498906 23299 solver.cpp:219] Iteration 400 (744.059 iter/s, 0.134398s/100 iters), loss = 0.659442
I0428 19:34:17.498931 23299 solver.cpp:238]     Train net output #0: loss = 0.659442 (* 1 = 0.659442 loss)
I0428 19:34:17.498937 23299 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:17.636169 23299 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:17.728642 23306 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:17.731104 23299 solver.cpp:398]     Test net output #0: accuracy = 0.6824
I0428 19:34:17.731123 23299 solver.cpp:398]     Test net output #1: loss = 0.831205 (* 1 = 0.831205 loss)
I0428 19:34:17.732426 23299 solver.cpp:219] Iteration 500 (428.307 iter/s, 0.233477s/100 iters), loss = 0.87858
I0428 19:34:17.732465 23299 solver.cpp:238]     Train net output #0: loss = 0.87858 (* 1 = 0.87858 loss)
I0428 19:34:17.732471 23299 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:17.871875 23299 solver.cpp:219] Iteration 600 (717.291 iter/s, 0.139413s/100 iters), loss = 0.772574
I0428 19:34:17.871917 23299 solver.cpp:238]     Train net output #0: loss = 0.772574 (* 1 = 0.772574 loss)
I0428 19:34:17.871922 23299 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:18.010246 23299 solver.cpp:219] Iteration 700 (722.973 iter/s, 0.138318s/100 iters), loss = 1.26575
I0428 19:34:18.010287 23299 solver.cpp:238]     Train net output #0: loss = 1.26575 (* 1 = 1.26575 loss)
I0428 19:34:18.010293 23299 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:18.144846 23299 solver.cpp:219] Iteration 800 (743.227 iter/s, 0.134548s/100 iters), loss = 0.875084
I0428 19:34:18.144871 23299 solver.cpp:238]     Train net output #0: loss = 0.875084 (* 1 = 0.875084 loss)
I0428 19:34:18.144877 23299 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:18.289667 23299 solver.cpp:219] Iteration 900 (690.707 iter/s, 0.144779s/100 iters), loss = 0.669343
I0428 19:34:18.289705 23299 solver.cpp:238]     Train net output #0: loss = 0.669343 (* 1 = 0.669343 loss)
I0428 19:34:18.289713 23299 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:18.335100 23305 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:18.423426 23299 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:18.425446 23299 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:18.427527 23299 solver.cpp:311] Iteration 1000, loss = 0.530222
I0428 19:34:18.427558 23299 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:18.530912 23306 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:18.534373 23299 solver.cpp:398]     Test net output #0: accuracy = 0.8554
I0428 19:34:18.534396 23299 solver.cpp:398]     Test net output #1: loss = 0.414261 (* 1 = 0.414261 loss)
I0428 19:34:18.534401 23299 solver.cpp:316] Optimization Done.
I0428 19:34:18.534405 23299 caffe.cpp:259] Optimization Done.
