I0428 19:36:07.650152 23643 caffe.cpp:218] Using GPUs 0
I0428 19:36:07.691237 23643 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:36:08.201890 23643 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test238.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:36:08.202026 23643 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test238.prototxt
I0428 19:36:08.202361 23643 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:36:08.202376 23643 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:36:08.202455 23643 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:08.202522 23643 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:08.202625 23643 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:36:08.202649 23643 net.cpp:86] Creating Layer mnist
I0428 19:36:08.202661 23643 net.cpp:382] mnist -> data
I0428 19:36:08.202682 23643 net.cpp:382] mnist -> label
I0428 19:36:08.203748 23643 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:36:08.206367 23643 net.cpp:124] Setting up mnist
I0428 19:36:08.206384 23643 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:36:08.206392 23643 net.cpp:131] Top shape: 64 (64)
I0428 19:36:08.206394 23643 net.cpp:139] Memory required for data: 200960
I0428 19:36:08.206401 23643 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:08.206441 23643 net.cpp:86] Creating Layer conv0
I0428 19:36:08.206449 23643 net.cpp:408] conv0 <- data
I0428 19:36:08.206461 23643 net.cpp:382] conv0 -> conv0
I0428 19:36:08.487365 23643 net.cpp:124] Setting up conv0
I0428 19:36:08.487391 23643 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:36:08.487396 23643 net.cpp:139] Memory required for data: 14946560
I0428 19:36:08.487411 23643 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:08.487422 23643 net.cpp:86] Creating Layer pool0
I0428 19:36:08.487426 23643 net.cpp:408] pool0 <- conv0
I0428 19:36:08.487432 23643 net.cpp:382] pool0 -> pool0
I0428 19:36:08.487493 23643 net.cpp:124] Setting up pool0
I0428 19:36:08.487499 23643 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:36:08.487502 23643 net.cpp:139] Memory required for data: 18632960
I0428 19:36:08.487521 23643 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:08.487529 23643 net.cpp:86] Creating Layer ip1
I0428 19:36:08.487534 23643 net.cpp:408] ip1 <- pool0
I0428 19:36:08.487538 23643 net.cpp:382] ip1 -> ip1
I0428 19:36:08.489357 23643 net.cpp:124] Setting up ip1
I0428 19:36:08.489387 23643 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:08.489405 23643 net.cpp:139] Memory required for data: 18635520
I0428 19:36:08.489414 23643 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:08.489421 23643 net.cpp:86] Creating Layer relu1
I0428 19:36:08.489425 23643 net.cpp:408] relu1 <- ip1
I0428 19:36:08.489430 23643 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:08.489603 23643 net.cpp:124] Setting up relu1
I0428 19:36:08.489614 23643 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:08.489616 23643 net.cpp:139] Memory required for data: 18638080
I0428 19:36:08.489620 23643 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:08.489626 23643 net.cpp:86] Creating Layer ip2
I0428 19:36:08.489630 23643 net.cpp:408] ip2 <- ip1
I0428 19:36:08.489635 23643 net.cpp:382] ip2 -> ip2
I0428 19:36:08.489740 23643 net.cpp:124] Setting up ip2
I0428 19:36:08.489748 23643 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:08.489750 23643 net.cpp:139] Memory required for data: 18640640
I0428 19:36:08.489758 23643 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:08.489763 23643 net.cpp:86] Creating Layer relu2
I0428 19:36:08.489766 23643 net.cpp:408] relu2 <- ip2
I0428 19:36:08.489771 23643 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:08.490512 23643 net.cpp:124] Setting up relu2
I0428 19:36:08.490540 23643 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:08.490545 23643 net.cpp:139] Memory required for data: 18643200
I0428 19:36:08.490547 23643 layer_factory.hpp:77] Creating layer loss
I0428 19:36:08.490569 23643 net.cpp:86] Creating Layer loss
I0428 19:36:08.490572 23643 net.cpp:408] loss <- ip2
I0428 19:36:08.490577 23643 net.cpp:408] loss <- label
I0428 19:36:08.490582 23643 net.cpp:382] loss -> loss
I0428 19:36:08.490597 23643 layer_factory.hpp:77] Creating layer loss
I0428 19:36:08.490830 23643 net.cpp:124] Setting up loss
I0428 19:36:08.490839 23643 net.cpp:131] Top shape: (1)
I0428 19:36:08.490844 23643 net.cpp:134]     with loss weight 1
I0428 19:36:08.490856 23643 net.cpp:139] Memory required for data: 18643204
I0428 19:36:08.490859 23643 net.cpp:200] loss needs backward computation.
I0428 19:36:08.490864 23643 net.cpp:200] relu2 needs backward computation.
I0428 19:36:08.490866 23643 net.cpp:200] ip2 needs backward computation.
I0428 19:36:08.490869 23643 net.cpp:200] relu1 needs backward computation.
I0428 19:36:08.490871 23643 net.cpp:200] ip1 needs backward computation.
I0428 19:36:08.490875 23643 net.cpp:200] pool0 needs backward computation.
I0428 19:36:08.490878 23643 net.cpp:200] conv0 needs backward computation.
I0428 19:36:08.490881 23643 net.cpp:202] mnist does not need backward computation.
I0428 19:36:08.490885 23643 net.cpp:244] This network produces output loss
I0428 19:36:08.490891 23643 net.cpp:257] Network initialization done.
I0428 19:36:08.491153 23643 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test238.prototxt
I0428 19:36:08.491178 23643 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:36:08.491248 23643 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:08.491317 23643 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:08.491360 23643 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:36:08.491372 23643 net.cpp:86] Creating Layer mnist
I0428 19:36:08.491377 23643 net.cpp:382] mnist -> data
I0428 19:36:08.491384 23643 net.cpp:382] mnist -> label
I0428 19:36:08.491466 23643 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:36:08.492588 23643 net.cpp:124] Setting up mnist
I0428 19:36:08.492599 23643 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:36:08.492620 23643 net.cpp:131] Top shape: 100 (100)
I0428 19:36:08.492624 23643 net.cpp:139] Memory required for data: 314000
I0428 19:36:08.492627 23643 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:36:08.492635 23643 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:36:08.492638 23643 net.cpp:408] label_mnist_1_split <- label
I0428 19:36:08.492643 23643 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:36:08.492650 23643 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:36:08.492686 23643 net.cpp:124] Setting up label_mnist_1_split
I0428 19:36:08.492692 23643 net.cpp:131] Top shape: 100 (100)
I0428 19:36:08.492697 23643 net.cpp:131] Top shape: 100 (100)
I0428 19:36:08.492699 23643 net.cpp:139] Memory required for data: 314800
I0428 19:36:08.492702 23643 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:08.492710 23643 net.cpp:86] Creating Layer conv0
I0428 19:36:08.492714 23643 net.cpp:408] conv0 <- data
I0428 19:36:08.492719 23643 net.cpp:382] conv0 -> conv0
I0428 19:36:08.494554 23643 net.cpp:124] Setting up conv0
I0428 19:36:08.494585 23643 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:36:08.494590 23643 net.cpp:139] Memory required for data: 23354800
I0428 19:36:08.494601 23643 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:08.494607 23643 net.cpp:86] Creating Layer pool0
I0428 19:36:08.494611 23643 net.cpp:408] pool0 <- conv0
I0428 19:36:08.494616 23643 net.cpp:382] pool0 -> pool0
I0428 19:36:08.494655 23643 net.cpp:124] Setting up pool0
I0428 19:36:08.494663 23643 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:36:08.494665 23643 net.cpp:139] Memory required for data: 29114800
I0428 19:36:08.494668 23643 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:08.494674 23643 net.cpp:86] Creating Layer ip1
I0428 19:36:08.494678 23643 net.cpp:408] ip1 <- pool0
I0428 19:36:08.494699 23643 net.cpp:382] ip1 -> ip1
I0428 19:36:08.496500 23643 net.cpp:124] Setting up ip1
I0428 19:36:08.496513 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.496532 23643 net.cpp:139] Memory required for data: 29118800
I0428 19:36:08.496541 23643 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:08.496546 23643 net.cpp:86] Creating Layer relu1
I0428 19:36:08.496551 23643 net.cpp:408] relu1 <- ip1
I0428 19:36:08.496556 23643 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:08.496803 23643 net.cpp:124] Setting up relu1
I0428 19:36:08.496835 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.496850 23643 net.cpp:139] Memory required for data: 29122800
I0428 19:36:08.496853 23643 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:08.496861 23643 net.cpp:86] Creating Layer ip2
I0428 19:36:08.496881 23643 net.cpp:408] ip2 <- ip1
I0428 19:36:08.496888 23643 net.cpp:382] ip2 -> ip2
I0428 19:36:08.497014 23643 net.cpp:124] Setting up ip2
I0428 19:36:08.497023 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.497027 23643 net.cpp:139] Memory required for data: 29126800
I0428 19:36:08.497036 23643 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:08.497041 23643 net.cpp:86] Creating Layer relu2
I0428 19:36:08.497045 23643 net.cpp:408] relu2 <- ip2
I0428 19:36:08.497051 23643 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:08.497282 23643 net.cpp:124] Setting up relu2
I0428 19:36:08.497294 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.497298 23643 net.cpp:139] Memory required for data: 29130800
I0428 19:36:08.497301 23643 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:36:08.497308 23643 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:36:08.497311 23643 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:36:08.497316 23643 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:36:08.497323 23643 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:36:08.497359 23643 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:36:08.497366 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.497370 23643 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:08.497373 23643 net.cpp:139] Memory required for data: 29138800
I0428 19:36:08.497376 23643 layer_factory.hpp:77] Creating layer accuracy
I0428 19:36:08.497382 23643 net.cpp:86] Creating Layer accuracy
I0428 19:36:08.497395 23643 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:36:08.497398 23643 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:36:08.497403 23643 net.cpp:382] accuracy -> accuracy
I0428 19:36:08.497411 23643 net.cpp:124] Setting up accuracy
I0428 19:36:08.497416 23643 net.cpp:131] Top shape: (1)
I0428 19:36:08.497423 23643 net.cpp:139] Memory required for data: 29138804
I0428 19:36:08.497426 23643 layer_factory.hpp:77] Creating layer loss
I0428 19:36:08.497431 23643 net.cpp:86] Creating Layer loss
I0428 19:36:08.497436 23643 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:36:08.497440 23643 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:36:08.497444 23643 net.cpp:382] loss -> loss
I0428 19:36:08.497450 23643 layer_factory.hpp:77] Creating layer loss
I0428 19:36:08.498437 23643 net.cpp:124] Setting up loss
I0428 19:36:08.498464 23643 net.cpp:131] Top shape: (1)
I0428 19:36:08.498483 23643 net.cpp:134]     with loss weight 1
I0428 19:36:08.498491 23643 net.cpp:139] Memory required for data: 29138808
I0428 19:36:08.498493 23643 net.cpp:200] loss needs backward computation.
I0428 19:36:08.498499 23643 net.cpp:202] accuracy does not need backward computation.
I0428 19:36:08.498503 23643 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:36:08.498507 23643 net.cpp:200] relu2 needs backward computation.
I0428 19:36:08.498509 23643 net.cpp:200] ip2 needs backward computation.
I0428 19:36:08.498512 23643 net.cpp:200] relu1 needs backward computation.
I0428 19:36:08.498517 23643 net.cpp:200] ip1 needs backward computation.
I0428 19:36:08.498519 23643 net.cpp:200] pool0 needs backward computation.
I0428 19:36:08.498522 23643 net.cpp:200] conv0 needs backward computation.
I0428 19:36:08.498527 23643 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:36:08.498530 23643 net.cpp:202] mnist does not need backward computation.
I0428 19:36:08.498533 23643 net.cpp:244] This network produces output accuracy
I0428 19:36:08.498536 23643 net.cpp:244] This network produces output loss
I0428 19:36:08.498548 23643 net.cpp:257] Network initialization done.
I0428 19:36:08.498581 23643 solver.cpp:56] Solver scaffolding done.
I0428 19:36:08.498790 23643 caffe.cpp:248] Starting Optimization
I0428 19:36:08.498796 23643 solver.cpp:273] Solving LeNet
I0428 19:36:08.498809 23643 solver.cpp:274] Learning Rate Policy: inv
I0428 19:36:08.499568 23643 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:36:08.656119 23650 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:08.660456 23643 solver.cpp:398]     Test net output #0: accuracy = 0.0913
I0428 19:36:08.660492 23643 solver.cpp:398]     Test net output #1: loss = 2.32751 (* 1 = 2.32751 loss)
I0428 19:36:08.665402 23643 solver.cpp:219] Iteration 0 (-3.38224e-31 iter/s, 0.16656s/100 iters), loss = 2.34432
I0428 19:36:08.665453 23643 solver.cpp:238]     Train net output #0: loss = 2.34432 (* 1 = 2.34432 loss)
I0428 19:36:08.665465 23643 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:36:08.884124 23643 solver.cpp:219] Iteration 100 (457.318 iter/s, 0.218666s/100 iters), loss = 0.412773
I0428 19:36:08.884153 23643 solver.cpp:238]     Train net output #0: loss = 0.412773 (* 1 = 0.412773 loss)
I0428 19:36:08.884160 23643 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:36:09.102092 23643 solver.cpp:219] Iteration 200 (458.879 iter/s, 0.217922s/100 iters), loss = 0.361397
I0428 19:36:09.102118 23643 solver.cpp:238]     Train net output #0: loss = 0.361397 (* 1 = 0.361397 loss)
I0428 19:36:09.102124 23643 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:36:09.323839 23643 solver.cpp:219] Iteration 300 (451.056 iter/s, 0.221702s/100 iters), loss = 0.191849
I0428 19:36:09.323892 23643 solver.cpp:238]     Train net output #0: loss = 0.191849 (* 1 = 0.191849 loss)
I0428 19:36:09.323899 23643 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:36:09.545219 23643 solver.cpp:219] Iteration 400 (451.855 iter/s, 0.22131s/100 iters), loss = 0.169664
I0428 19:36:09.545248 23643 solver.cpp:238]     Train net output #0: loss = 0.169663 (* 1 = 0.169663 loss)
I0428 19:36:09.545254 23643 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:36:09.765856 23643 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:36:09.920632 23650 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:09.924952 23643 solver.cpp:398]     Test net output #0: accuracy = 0.9412
I0428 19:36:09.924989 23643 solver.cpp:398]     Test net output #1: loss = 0.199349 (* 1 = 0.199349 loss)
I0428 19:36:09.927139 23643 solver.cpp:219] Iteration 500 (261.871 iter/s, 0.381868s/100 iters), loss = 0.268048
I0428 19:36:09.927193 23643 solver.cpp:238]     Train net output #0: loss = 0.268048 (* 1 = 0.268048 loss)
I0428 19:36:09.927199 23643 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:36:10.148010 23643 solver.cpp:219] Iteration 600 (452.867 iter/s, 0.220815s/100 iters), loss = 0.168513
I0428 19:36:10.148046 23643 solver.cpp:238]     Train net output #0: loss = 0.168513 (* 1 = 0.168513 loss)
I0428 19:36:10.148052 23643 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:36:10.369949 23643 solver.cpp:219] Iteration 700 (450.683 iter/s, 0.221885s/100 iters), loss = 0.327049
I0428 19:36:10.369987 23643 solver.cpp:238]     Train net output #0: loss = 0.327049 (* 1 = 0.327049 loss)
I0428 19:36:10.369998 23643 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:36:10.594311 23643 solver.cpp:219] Iteration 800 (445.813 iter/s, 0.224309s/100 iters), loss = 0.269292
I0428 19:36:10.594355 23643 solver.cpp:238]     Train net output #0: loss = 0.269292 (* 1 = 0.269292 loss)
I0428 19:36:10.594364 23643 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:36:10.813969 23643 solver.cpp:219] Iteration 900 (455.376 iter/s, 0.219599s/100 iters), loss = 0.174787
I0428 19:36:10.814008 23643 solver.cpp:238]     Train net output #0: loss = 0.174787 (* 1 = 0.174787 loss)
I0428 19:36:10.814014 23643 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:36:10.885864 23649 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:11.029170 23643 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:36:11.033066 23643 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:36:11.035559 23643 solver.cpp:311] Iteration 1000, loss = 0.192283
I0428 19:36:11.035578 23643 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:36:11.192579 23650 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:11.196662 23643 solver.cpp:398]     Test net output #0: accuracy = 0.9604
I0428 19:36:11.196713 23643 solver.cpp:398]     Test net output #1: loss = 0.139088 (* 1 = 0.139088 loss)
I0428 19:36:11.196718 23643 solver.cpp:316] Optimization Done.
I0428 19:36:11.196722 23643 caffe.cpp:259] Optimization Done.
