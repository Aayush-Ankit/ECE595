I0428 19:56:28.358503 28443 caffe.cpp:218] Using GPUs 0
I0428 19:56:28.388371 28443 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:28.827682 28443 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test760.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:28.827843 28443 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test760.prototxt
I0428 19:56:28.828173 28443 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:28.828202 28443 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:28.828294 28443 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:28.828353 28443 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:28.828449 28443 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:28.828467 28443 net.cpp:86] Creating Layer mnist
I0428 19:56:28.828474 28443 net.cpp:382] mnist -> data
I0428 19:56:28.828490 28443 net.cpp:382] mnist -> label
I0428 19:56:28.829424 28443 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:28.831549 28443 net.cpp:124] Setting up mnist
I0428 19:56:28.831578 28443 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:28.831583 28443 net.cpp:131] Top shape: 64 (64)
I0428 19:56:28.831588 28443 net.cpp:139] Memory required for data: 200960
I0428 19:56:28.831609 28443 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:28.831622 28443 net.cpp:86] Creating Layer conv0
I0428 19:56:28.831640 28443 net.cpp:408] conv0 <- data
I0428 19:56:28.831650 28443 net.cpp:382] conv0 -> conv0
I0428 19:56:29.064697 28443 net.cpp:124] Setting up conv0
I0428 19:56:29.064738 28443 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:29.064743 28443 net.cpp:139] Memory required for data: 1675520
I0428 19:56:29.064756 28443 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:29.064769 28443 net.cpp:86] Creating Layer pool0
I0428 19:56:29.064772 28443 net.cpp:408] pool0 <- conv0
I0428 19:56:29.064777 28443 net.cpp:382] pool0 -> pool0
I0428 19:56:29.064842 28443 net.cpp:124] Setting up pool0
I0428 19:56:29.064848 28443 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:29.064851 28443 net.cpp:139] Memory required for data: 2044160
I0428 19:56:29.064854 28443 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:29.064864 28443 net.cpp:86] Creating Layer conv1
I0428 19:56:29.064867 28443 net.cpp:408] conv1 <- pool0
I0428 19:56:29.064872 28443 net.cpp:382] conv1 -> conv1
I0428 19:56:29.066808 28443 net.cpp:124] Setting up conv1
I0428 19:56:29.066853 28443 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:29.066856 28443 net.cpp:139] Memory required for data: 2076928
I0428 19:56:29.066864 28443 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:29.066872 28443 net.cpp:86] Creating Layer pool1
I0428 19:56:29.066875 28443 net.cpp:408] pool1 <- conv1
I0428 19:56:29.066881 28443 net.cpp:382] pool1 -> pool1
I0428 19:56:29.066918 28443 net.cpp:124] Setting up pool1
I0428 19:56:29.066923 28443 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:29.066926 28443 net.cpp:139] Memory required for data: 2085120
I0428 19:56:29.066929 28443 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:29.066937 28443 net.cpp:86] Creating Layer ip1
I0428 19:56:29.066941 28443 net.cpp:408] ip1 <- pool1
I0428 19:56:29.066946 28443 net.cpp:382] ip1 -> ip1
I0428 19:56:29.067071 28443 net.cpp:124] Setting up ip1
I0428 19:56:29.067078 28443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:29.067081 28443 net.cpp:139] Memory required for data: 2087680
I0428 19:56:29.067088 28443 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:29.067093 28443 net.cpp:86] Creating Layer relu1
I0428 19:56:29.067096 28443 net.cpp:408] relu1 <- ip1
I0428 19:56:29.067101 28443 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:29.067260 28443 net.cpp:124] Setting up relu1
I0428 19:56:29.067268 28443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:29.067271 28443 net.cpp:139] Memory required for data: 2090240
I0428 19:56:29.067275 28443 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:29.067281 28443 net.cpp:86] Creating Layer ip2
I0428 19:56:29.067284 28443 net.cpp:408] ip2 <- ip1
I0428 19:56:29.067289 28443 net.cpp:382] ip2 -> ip2
I0428 19:56:29.067401 28443 net.cpp:124] Setting up ip2
I0428 19:56:29.067409 28443 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:29.067410 28443 net.cpp:139] Memory required for data: 2103040
I0428 19:56:29.067416 28443 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:29.067421 28443 net.cpp:86] Creating Layer relu2
I0428 19:56:29.067425 28443 net.cpp:408] relu2 <- ip2
I0428 19:56:29.067430 28443 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:29.068320 28443 net.cpp:124] Setting up relu2
I0428 19:56:29.068332 28443 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:29.068336 28443 net.cpp:139] Memory required for data: 2115840
I0428 19:56:29.068339 28443 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:29.068351 28443 net.cpp:86] Creating Layer ip3
I0428 19:56:29.068356 28443 net.cpp:408] ip3 <- ip2
I0428 19:56:29.068362 28443 net.cpp:382] ip3 -> ip3
I0428 19:56:29.068485 28443 net.cpp:124] Setting up ip3
I0428 19:56:29.068492 28443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:29.068511 28443 net.cpp:139] Memory required for data: 2118400
I0428 19:56:29.068518 28443 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:29.068524 28443 net.cpp:86] Creating Layer relu3
I0428 19:56:29.068528 28443 net.cpp:408] relu3 <- ip3
I0428 19:56:29.068531 28443 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:29.068712 28443 net.cpp:124] Setting up relu3
I0428 19:56:29.068722 28443 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:29.068724 28443 net.cpp:139] Memory required for data: 2120960
I0428 19:56:29.068728 28443 layer_factory.hpp:77] Creating layer loss
I0428 19:56:29.068735 28443 net.cpp:86] Creating Layer loss
I0428 19:56:29.068738 28443 net.cpp:408] loss <- ip3
I0428 19:56:29.068742 28443 net.cpp:408] loss <- label
I0428 19:56:29.068747 28443 net.cpp:382] loss -> loss
I0428 19:56:29.068760 28443 layer_factory.hpp:77] Creating layer loss
I0428 19:56:29.069092 28443 net.cpp:124] Setting up loss
I0428 19:56:29.069102 28443 net.cpp:131] Top shape: (1)
I0428 19:56:29.069119 28443 net.cpp:134]     with loss weight 1
I0428 19:56:29.069147 28443 net.cpp:139] Memory required for data: 2120964
I0428 19:56:29.069150 28443 net.cpp:200] loss needs backward computation.
I0428 19:56:29.069154 28443 net.cpp:200] relu3 needs backward computation.
I0428 19:56:29.069156 28443 net.cpp:200] ip3 needs backward computation.
I0428 19:56:29.069159 28443 net.cpp:200] relu2 needs backward computation.
I0428 19:56:29.069161 28443 net.cpp:200] ip2 needs backward computation.
I0428 19:56:29.069164 28443 net.cpp:200] relu1 needs backward computation.
I0428 19:56:29.069166 28443 net.cpp:200] ip1 needs backward computation.
I0428 19:56:29.069183 28443 net.cpp:200] pool1 needs backward computation.
I0428 19:56:29.069186 28443 net.cpp:200] conv1 needs backward computation.
I0428 19:56:29.069190 28443 net.cpp:200] pool0 needs backward computation.
I0428 19:56:29.069191 28443 net.cpp:200] conv0 needs backward computation.
I0428 19:56:29.069195 28443 net.cpp:202] mnist does not need backward computation.
I0428 19:56:29.069196 28443 net.cpp:244] This network produces output loss
I0428 19:56:29.069206 28443 net.cpp:257] Network initialization done.
I0428 19:56:29.069504 28443 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test760.prototxt
I0428 19:56:29.069530 28443 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:29.069653 28443 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:29.069753 28443 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:29.069813 28443 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:29.069826 28443 net.cpp:86] Creating Layer mnist
I0428 19:56:29.069830 28443 net.cpp:382] mnist -> data
I0428 19:56:29.069840 28443 net.cpp:382] mnist -> label
I0428 19:56:29.069931 28443 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:29.072011 28443 net.cpp:124] Setting up mnist
I0428 19:56:29.072041 28443 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:29.072046 28443 net.cpp:131] Top shape: 100 (100)
I0428 19:56:29.072048 28443 net.cpp:139] Memory required for data: 314000
I0428 19:56:29.072052 28443 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:29.072058 28443 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:29.072062 28443 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:29.072111 28443 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:29.072120 28443 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:29.072168 28443 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:29.072175 28443 net.cpp:131] Top shape: 100 (100)
I0428 19:56:29.072180 28443 net.cpp:131] Top shape: 100 (100)
I0428 19:56:29.072182 28443 net.cpp:139] Memory required for data: 314800
I0428 19:56:29.072185 28443 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:29.072196 28443 net.cpp:86] Creating Layer conv0
I0428 19:56:29.072198 28443 net.cpp:408] conv0 <- data
I0428 19:56:29.072204 28443 net.cpp:382] conv0 -> conv0
I0428 19:56:29.074017 28443 net.cpp:124] Setting up conv0
I0428 19:56:29.074030 28443 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:29.074034 28443 net.cpp:139] Memory required for data: 2618800
I0428 19:56:29.074043 28443 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:29.074048 28443 net.cpp:86] Creating Layer pool0
I0428 19:56:29.074050 28443 net.cpp:408] pool0 <- conv0
I0428 19:56:29.074056 28443 net.cpp:382] pool0 -> pool0
I0428 19:56:29.074090 28443 net.cpp:124] Setting up pool0
I0428 19:56:29.074095 28443 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:29.074097 28443 net.cpp:139] Memory required for data: 3194800
I0428 19:56:29.074100 28443 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:29.074108 28443 net.cpp:86] Creating Layer conv1
I0428 19:56:29.074111 28443 net.cpp:408] conv1 <- pool0
I0428 19:56:29.074115 28443 net.cpp:382] conv1 -> conv1
I0428 19:56:29.076275 28443 net.cpp:124] Setting up conv1
I0428 19:56:29.076288 28443 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:29.076292 28443 net.cpp:139] Memory required for data: 3246000
I0428 19:56:29.076300 28443 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:29.076333 28443 net.cpp:86] Creating Layer pool1
I0428 19:56:29.076336 28443 net.cpp:408] pool1 <- conv1
I0428 19:56:29.076340 28443 net.cpp:382] pool1 -> pool1
I0428 19:56:29.076395 28443 net.cpp:124] Setting up pool1
I0428 19:56:29.076400 28443 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:29.076403 28443 net.cpp:139] Memory required for data: 3258800
I0428 19:56:29.076407 28443 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:29.076413 28443 net.cpp:86] Creating Layer ip1
I0428 19:56:29.076416 28443 net.cpp:408] ip1 <- pool1
I0428 19:56:29.076424 28443 net.cpp:382] ip1 -> ip1
I0428 19:56:29.076527 28443 net.cpp:124] Setting up ip1
I0428 19:56:29.076535 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.076555 28443 net.cpp:139] Memory required for data: 3262800
I0428 19:56:29.076563 28443 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:29.076568 28443 net.cpp:86] Creating Layer relu1
I0428 19:56:29.076573 28443 net.cpp:408] relu1 <- ip1
I0428 19:56:29.076577 28443 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:29.076853 28443 net.cpp:124] Setting up relu1
I0428 19:56:29.076863 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.076865 28443 net.cpp:139] Memory required for data: 3266800
I0428 19:56:29.076880 28443 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:29.076889 28443 net.cpp:86] Creating Layer ip2
I0428 19:56:29.076891 28443 net.cpp:408] ip2 <- ip1
I0428 19:56:29.076896 28443 net.cpp:382] ip2 -> ip2
I0428 19:56:29.077051 28443 net.cpp:124] Setting up ip2
I0428 19:56:29.077067 28443 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:29.077070 28443 net.cpp:139] Memory required for data: 3286800
I0428 19:56:29.077075 28443 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:29.077080 28443 net.cpp:86] Creating Layer relu2
I0428 19:56:29.077083 28443 net.cpp:408] relu2 <- ip2
I0428 19:56:29.077095 28443 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:29.077283 28443 net.cpp:124] Setting up relu2
I0428 19:56:29.077291 28443 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:29.077293 28443 net.cpp:139] Memory required for data: 3306800
I0428 19:56:29.077296 28443 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:29.077302 28443 net.cpp:86] Creating Layer ip3
I0428 19:56:29.077306 28443 net.cpp:408] ip3 <- ip2
I0428 19:56:29.077327 28443 net.cpp:382] ip3 -> ip3
I0428 19:56:29.077436 28443 net.cpp:124] Setting up ip3
I0428 19:56:29.077445 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.077447 28443 net.cpp:139] Memory required for data: 3310800
I0428 19:56:29.077471 28443 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:29.077476 28443 net.cpp:86] Creating Layer relu3
I0428 19:56:29.077479 28443 net.cpp:408] relu3 <- ip3
I0428 19:56:29.077483 28443 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:29.078320 28443 net.cpp:124] Setting up relu3
I0428 19:56:29.078331 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.078336 28443 net.cpp:139] Memory required for data: 3314800
I0428 19:56:29.078338 28443 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:56:29.078344 28443 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:56:29.078347 28443 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:56:29.078352 28443 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:56:29.078359 28443 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:56:29.078398 28443 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:56:29.078403 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.078408 28443 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:29.078409 28443 net.cpp:139] Memory required for data: 3322800
I0428 19:56:29.078413 28443 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:29.078418 28443 net.cpp:86] Creating Layer accuracy
I0428 19:56:29.078421 28443 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:56:29.078430 28443 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:29.078434 28443 net.cpp:382] accuracy -> accuracy
I0428 19:56:29.078447 28443 net.cpp:124] Setting up accuracy
I0428 19:56:29.078450 28443 net.cpp:131] Top shape: (1)
I0428 19:56:29.078454 28443 net.cpp:139] Memory required for data: 3322804
I0428 19:56:29.078456 28443 layer_factory.hpp:77] Creating layer loss
I0428 19:56:29.078462 28443 net.cpp:86] Creating Layer loss
I0428 19:56:29.078465 28443 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:56:29.078469 28443 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:29.078472 28443 net.cpp:382] loss -> loss
I0428 19:56:29.078477 28443 layer_factory.hpp:77] Creating layer loss
I0428 19:56:29.078729 28443 net.cpp:124] Setting up loss
I0428 19:56:29.078737 28443 net.cpp:131] Top shape: (1)
I0428 19:56:29.078740 28443 net.cpp:134]     with loss weight 1
I0428 19:56:29.078747 28443 net.cpp:139] Memory required for data: 3322808
I0428 19:56:29.078759 28443 net.cpp:200] loss needs backward computation.
I0428 19:56:29.078770 28443 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:29.078773 28443 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:56:29.078776 28443 net.cpp:200] relu3 needs backward computation.
I0428 19:56:29.078778 28443 net.cpp:200] ip3 needs backward computation.
I0428 19:56:29.078788 28443 net.cpp:200] relu2 needs backward computation.
I0428 19:56:29.078789 28443 net.cpp:200] ip2 needs backward computation.
I0428 19:56:29.078793 28443 net.cpp:200] relu1 needs backward computation.
I0428 19:56:29.078794 28443 net.cpp:200] ip1 needs backward computation.
I0428 19:56:29.078797 28443 net.cpp:200] pool1 needs backward computation.
I0428 19:56:29.078800 28443 net.cpp:200] conv1 needs backward computation.
I0428 19:56:29.078804 28443 net.cpp:200] pool0 needs backward computation.
I0428 19:56:29.078806 28443 net.cpp:200] conv0 needs backward computation.
I0428 19:56:29.078809 28443 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:29.078814 28443 net.cpp:202] mnist does not need backward computation.
I0428 19:56:29.078815 28443 net.cpp:244] This network produces output accuracy
I0428 19:56:29.078819 28443 net.cpp:244] This network produces output loss
I0428 19:56:29.078830 28443 net.cpp:257] Network initialization done.
I0428 19:56:29.078869 28443 solver.cpp:56] Solver scaffolding done.
I0428 19:56:29.079186 28443 caffe.cpp:248] Starting Optimization
I0428 19:56:29.079192 28443 solver.cpp:273] Solving LeNet
I0428 19:56:29.079195 28443 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:29.080096 28443 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:29.083768 28443 blocking_queue.cpp:49] Waiting for data
I0428 19:56:29.154924 28450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:29.155450 28443 solver.cpp:398]     Test net output #0: accuracy = 0.167
I0428 19:56:29.155468 28443 solver.cpp:398]     Test net output #1: loss = 2.2874 (* 1 = 2.2874 loss)
I0428 19:56:29.157956 28443 solver.cpp:219] Iteration 0 (0 iter/s, 0.0787376s/100 iters), loss = 2.29242
I0428 19:56:29.157979 28443 solver.cpp:238]     Train net output #0: loss = 2.29242 (* 1 = 2.29242 loss)
I0428 19:56:29.158005 28443 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:29.239318 28443 solver.cpp:219] Iteration 100 (1229.62 iter/s, 0.0813261s/100 iters), loss = 0.748752
I0428 19:56:29.239342 28443 solver.cpp:238]     Train net output #0: loss = 0.748752 (* 1 = 0.748752 loss)
I0428 19:56:29.239348 28443 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:29.314415 28443 solver.cpp:219] Iteration 200 (1332.19 iter/s, 0.0750642s/100 iters), loss = 0.458888
I0428 19:56:29.314455 28443 solver.cpp:238]     Train net output #0: loss = 0.458888 (* 1 = 0.458888 loss)
I0428 19:56:29.314460 28443 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:29.390055 28443 solver.cpp:219] Iteration 300 (1322.61 iter/s, 0.0756081s/100 iters), loss = 0.310761
I0428 19:56:29.390095 28443 solver.cpp:238]     Train net output #0: loss = 0.310761 (* 1 = 0.310761 loss)
I0428 19:56:29.390101 28443 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:29.465574 28443 solver.cpp:219] Iteration 400 (1324.75 iter/s, 0.0754862s/100 iters), loss = 0.348573
I0428 19:56:29.465615 28443 solver.cpp:238]     Train net output #0: loss = 0.348573 (* 1 = 0.348573 loss)
I0428 19:56:29.465620 28443 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:29.547379 28443 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:29.621881 28450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:29.622380 28443 solver.cpp:398]     Test net output #0: accuracy = 0.9089
I0428 19:56:29.622398 28443 solver.cpp:398]     Test net output #1: loss = 0.290578 (* 1 = 0.290578 loss)
I0428 19:56:29.623194 28443 solver.cpp:219] Iteration 500 (634.585 iter/s, 0.157583s/100 iters), loss = 0.23974
I0428 19:56:29.623219 28443 solver.cpp:238]     Train net output #0: loss = 0.23974 (* 1 = 0.23974 loss)
I0428 19:56:29.623240 28443 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:29.703310 28443 solver.cpp:219] Iteration 600 (1248.74 iter/s, 0.0800809s/100 iters), loss = 0.355938
I0428 19:56:29.703332 28443 solver.cpp:238]     Train net output #0: loss = 0.355938 (* 1 = 0.355938 loss)
I0428 19:56:29.703354 28443 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:29.778285 28443 solver.cpp:219] Iteration 700 (1334.34 iter/s, 0.0749435s/100 iters), loss = 0.492584
I0428 19:56:29.778326 28443 solver.cpp:238]     Train net output #0: loss = 0.492584 (* 1 = 0.492584 loss)
I0428 19:56:29.778331 28443 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:29.852037 28443 solver.cpp:219] Iteration 800 (1356.79 iter/s, 0.0737034s/100 iters), loss = 0.23922
I0428 19:56:29.852077 28443 solver.cpp:238]     Train net output #0: loss = 0.23922 (* 1 = 0.23922 loss)
I0428 19:56:29.852082 28443 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:29.928367 28443 solver.cpp:219] Iteration 900 (1310.65 iter/s, 0.0762983s/100 iters), loss = 0.29512
I0428 19:56:29.928406 28443 solver.cpp:238]     Train net output #0: loss = 0.29512 (* 1 = 0.29512 loss)
I0428 19:56:29.928411 28443 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:29.954072 28449 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:30.003273 28443 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:30.003988 28443 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:30.004485 28443 solver.cpp:311] Iteration 1000, loss = 0.151723
I0428 19:56:30.004500 28443 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:30.079136 28450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:30.079634 28443 solver.cpp:398]     Test net output #0: accuracy = 0.9362
I0428 19:56:30.079684 28443 solver.cpp:398]     Test net output #1: loss = 0.200603 (* 1 = 0.200603 loss)
I0428 19:56:30.079689 28443 solver.cpp:316] Optimization Done.
I0428 19:56:30.079692 28443 caffe.cpp:259] Optimization Done.
