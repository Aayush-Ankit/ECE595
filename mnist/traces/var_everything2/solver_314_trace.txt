I0428 19:39:45.755395 24379 caffe.cpp:218] Using GPUs 0
I0428 19:39:45.795475 24379 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:46.260593 24379 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test314.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:46.260736 24379 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test314.prototxt
I0428 19:39:46.261104 24379 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:46.261133 24379 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:46.261242 24379 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:46.261292 24379 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:46.261385 24379 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:46.261423 24379 net.cpp:86] Creating Layer mnist
I0428 19:39:46.261430 24379 net.cpp:382] mnist -> data
I0428 19:39:46.261451 24379 net.cpp:382] mnist -> label
I0428 19:39:46.262487 24379 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:46.264741 24379 net.cpp:124] Setting up mnist
I0428 19:39:46.264771 24379 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:46.264777 24379 net.cpp:131] Top shape: 64 (64)
I0428 19:39:46.264780 24379 net.cpp:139] Memory required for data: 200960
I0428 19:39:46.264786 24379 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:46.264801 24379 net.cpp:86] Creating Layer conv0
I0428 19:39:46.264807 24379 net.cpp:408] conv0 <- data
I0428 19:39:46.264843 24379 net.cpp:382] conv0 -> conv0
I0428 19:39:46.492566 24379 net.cpp:124] Setting up conv0
I0428 19:39:46.492593 24379 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:46.492596 24379 net.cpp:139] Memory required for data: 495872
I0428 19:39:46.492609 24379 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:46.492622 24379 net.cpp:86] Creating Layer pool0
I0428 19:39:46.492626 24379 net.cpp:408] pool0 <- conv0
I0428 19:39:46.492631 24379 net.cpp:382] pool0 -> pool0
I0428 19:39:46.492691 24379 net.cpp:124] Setting up pool0
I0428 19:39:46.492696 24379 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:46.492713 24379 net.cpp:139] Memory required for data: 569600
I0428 19:39:46.492717 24379 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:46.492727 24379 net.cpp:86] Creating Layer conv1
I0428 19:39:46.492730 24379 net.cpp:408] conv1 <- pool0
I0428 19:39:46.492735 24379 net.cpp:382] conv1 -> conv1
I0428 19:39:46.494621 24379 net.cpp:124] Setting up conv1
I0428 19:39:46.494652 24379 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:39:46.494655 24379 net.cpp:139] Memory required for data: 651520
I0428 19:39:46.494678 24379 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:46.494686 24379 net.cpp:86] Creating Layer pool1
I0428 19:39:46.494690 24379 net.cpp:408] pool1 <- conv1
I0428 19:39:46.494695 24379 net.cpp:382] pool1 -> pool1
I0428 19:39:46.494734 24379 net.cpp:124] Setting up pool1
I0428 19:39:46.494740 24379 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:39:46.494742 24379 net.cpp:139] Memory required for data: 672000
I0428 19:39:46.494745 24379 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:46.494752 24379 net.cpp:86] Creating Layer ip1
I0428 19:39:46.494755 24379 net.cpp:408] ip1 <- pool1
I0428 19:39:46.494760 24379 net.cpp:382] ip1 -> ip1
I0428 19:39:46.494858 24379 net.cpp:124] Setting up ip1
I0428 19:39:46.494865 24379 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:46.494868 24379 net.cpp:139] Memory required for data: 674560
I0428 19:39:46.494889 24379 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:46.494894 24379 net.cpp:86] Creating Layer relu1
I0428 19:39:46.494897 24379 net.cpp:408] relu1 <- ip1
I0428 19:39:46.494902 24379 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:46.495079 24379 net.cpp:124] Setting up relu1
I0428 19:39:46.495087 24379 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:46.495090 24379 net.cpp:139] Memory required for data: 677120
I0428 19:39:46.495093 24379 layer_factory.hpp:77] Creating layer loss
I0428 19:39:46.495098 24379 net.cpp:86] Creating Layer loss
I0428 19:39:46.495101 24379 net.cpp:408] loss <- ip1
I0428 19:39:46.495105 24379 net.cpp:408] loss <- label
I0428 19:39:46.495110 24379 net.cpp:382] loss -> loss
I0428 19:39:46.495122 24379 layer_factory.hpp:77] Creating layer loss
I0428 19:39:46.496039 24379 net.cpp:124] Setting up loss
I0428 19:39:46.496068 24379 net.cpp:131] Top shape: (1)
I0428 19:39:46.496070 24379 net.cpp:134]     with loss weight 1
I0428 19:39:46.496098 24379 net.cpp:139] Memory required for data: 677124
I0428 19:39:46.496103 24379 net.cpp:200] loss needs backward computation.
I0428 19:39:46.496105 24379 net.cpp:200] relu1 needs backward computation.
I0428 19:39:46.496109 24379 net.cpp:200] ip1 needs backward computation.
I0428 19:39:46.496111 24379 net.cpp:200] pool1 needs backward computation.
I0428 19:39:46.496114 24379 net.cpp:200] conv1 needs backward computation.
I0428 19:39:46.496117 24379 net.cpp:200] pool0 needs backward computation.
I0428 19:39:46.496120 24379 net.cpp:200] conv0 needs backward computation.
I0428 19:39:46.496124 24379 net.cpp:202] mnist does not need backward computation.
I0428 19:39:46.496126 24379 net.cpp:244] This network produces output loss
I0428 19:39:46.496134 24379 net.cpp:257] Network initialization done.
I0428 19:39:46.496415 24379 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test314.prototxt
I0428 19:39:46.496439 24379 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:46.496513 24379 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:46.496609 24379 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:46.496652 24379 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:46.496665 24379 net.cpp:86] Creating Layer mnist
I0428 19:39:46.496668 24379 net.cpp:382] mnist -> data
I0428 19:39:46.496675 24379 net.cpp:382] mnist -> label
I0428 19:39:46.496757 24379 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:46.498869 24379 net.cpp:124] Setting up mnist
I0428 19:39:46.498914 24379 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:46.498919 24379 net.cpp:131] Top shape: 100 (100)
I0428 19:39:46.498922 24379 net.cpp:139] Memory required for data: 314000
I0428 19:39:46.498926 24379 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:46.498934 24379 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:46.498936 24379 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:46.498957 24379 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:46.498965 24379 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:46.499039 24379 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:46.499052 24379 net.cpp:131] Top shape: 100 (100)
I0428 19:39:46.499054 24379 net.cpp:131] Top shape: 100 (100)
I0428 19:39:46.499058 24379 net.cpp:139] Memory required for data: 314800
I0428 19:39:46.499060 24379 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:46.499068 24379 net.cpp:86] Creating Layer conv0
I0428 19:39:46.499071 24379 net.cpp:408] conv0 <- data
I0428 19:39:46.499076 24379 net.cpp:382] conv0 -> conv0
I0428 19:39:46.500067 24379 net.cpp:124] Setting up conv0
I0428 19:39:46.500097 24379 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:46.500100 24379 net.cpp:139] Memory required for data: 775600
I0428 19:39:46.500109 24379 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:46.500116 24379 net.cpp:86] Creating Layer pool0
I0428 19:39:46.500119 24379 net.cpp:408] pool0 <- conv0
I0428 19:39:46.500125 24379 net.cpp:382] pool0 -> pool0
I0428 19:39:46.500191 24379 net.cpp:124] Setting up pool0
I0428 19:39:46.500197 24379 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:46.500200 24379 net.cpp:139] Memory required for data: 890800
I0428 19:39:46.500203 24379 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:46.500213 24379 net.cpp:86] Creating Layer conv1
I0428 19:39:46.500216 24379 net.cpp:408] conv1 <- pool0
I0428 19:39:46.500221 24379 net.cpp:382] conv1 -> conv1
I0428 19:39:46.501869 24379 net.cpp:124] Setting up conv1
I0428 19:39:46.501899 24379 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:39:46.501902 24379 net.cpp:139] Memory required for data: 1018800
I0428 19:39:46.501919 24379 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:46.501925 24379 net.cpp:86] Creating Layer pool1
I0428 19:39:46.501940 24379 net.cpp:408] pool1 <- conv1
I0428 19:39:46.501945 24379 net.cpp:382] pool1 -> pool1
I0428 19:39:46.501981 24379 net.cpp:124] Setting up pool1
I0428 19:39:46.501987 24379 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:39:46.501991 24379 net.cpp:139] Memory required for data: 1050800
I0428 19:39:46.501994 24379 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:46.502001 24379 net.cpp:86] Creating Layer ip1
I0428 19:39:46.502003 24379 net.cpp:408] ip1 <- pool1
I0428 19:39:46.502008 24379 net.cpp:382] ip1 -> ip1
I0428 19:39:46.502162 24379 net.cpp:124] Setting up ip1
I0428 19:39:46.502185 24379 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:46.502189 24379 net.cpp:139] Memory required for data: 1054800
I0428 19:39:46.502197 24379 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:46.502202 24379 net.cpp:86] Creating Layer relu1
I0428 19:39:46.502205 24379 net.cpp:408] relu1 <- ip1
I0428 19:39:46.502212 24379 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:46.503072 24379 net.cpp:124] Setting up relu1
I0428 19:39:46.503100 24379 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:46.503103 24379 net.cpp:139] Memory required for data: 1058800
I0428 19:39:46.503108 24379 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:39:46.503113 24379 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:39:46.503118 24379 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:39:46.503123 24379 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:39:46.503145 24379 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:39:46.503207 24379 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:39:46.503216 24379 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:46.503221 24379 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:46.503234 24379 net.cpp:139] Memory required for data: 1066800
I0428 19:39:46.503237 24379 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:46.503244 24379 net.cpp:86] Creating Layer accuracy
I0428 19:39:46.503247 24379 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:39:46.503252 24379 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:46.503257 24379 net.cpp:382] accuracy -> accuracy
I0428 19:39:46.503264 24379 net.cpp:124] Setting up accuracy
I0428 19:39:46.503268 24379 net.cpp:131] Top shape: (1)
I0428 19:39:46.503270 24379 net.cpp:139] Memory required for data: 1066804
I0428 19:39:46.503273 24379 layer_factory.hpp:77] Creating layer loss
I0428 19:39:46.503278 24379 net.cpp:86] Creating Layer loss
I0428 19:39:46.503281 24379 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:39:46.503298 24379 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:46.503301 24379 net.cpp:382] loss -> loss
I0428 19:39:46.503309 24379 layer_factory.hpp:77] Creating layer loss
I0428 19:39:46.503607 24379 net.cpp:124] Setting up loss
I0428 19:39:46.503617 24379 net.cpp:131] Top shape: (1)
I0428 19:39:46.503619 24379 net.cpp:134]     with loss weight 1
I0428 19:39:46.503626 24379 net.cpp:139] Memory required for data: 1066808
I0428 19:39:46.503629 24379 net.cpp:200] loss needs backward computation.
I0428 19:39:46.503633 24379 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:46.503643 24379 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:39:46.503646 24379 net.cpp:200] relu1 needs backward computation.
I0428 19:39:46.503649 24379 net.cpp:200] ip1 needs backward computation.
I0428 19:39:46.503653 24379 net.cpp:200] pool1 needs backward computation.
I0428 19:39:46.503654 24379 net.cpp:200] conv1 needs backward computation.
I0428 19:39:46.503662 24379 net.cpp:200] pool0 needs backward computation.
I0428 19:39:46.503665 24379 net.cpp:200] conv0 needs backward computation.
I0428 19:39:46.503669 24379 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:46.503672 24379 net.cpp:202] mnist does not need backward computation.
I0428 19:39:46.503679 24379 net.cpp:244] This network produces output accuracy
I0428 19:39:46.503682 24379 net.cpp:244] This network produces output loss
I0428 19:39:46.503691 24379 net.cpp:257] Network initialization done.
I0428 19:39:46.503732 24379 solver.cpp:56] Solver scaffolding done.
I0428 19:39:46.503935 24379 caffe.cpp:248] Starting Optimization
I0428 19:39:46.503942 24379 solver.cpp:273] Solving LeNet
I0428 19:39:46.503945 24379 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:46.504770 24379 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:46.506604 24379 blocking_queue.cpp:49] Waiting for data
I0428 19:39:46.560694 24386 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:46.561136 24379 solver.cpp:398]     Test net output #0: accuracy = 0.0866
I0428 19:39:46.561172 24379 solver.cpp:398]     Test net output #1: loss = 2.32213 (* 1 = 2.32213 loss)
I0428 19:39:46.562885 24379 solver.cpp:219] Iteration 0 (-2.79616e-38 iter/s, 0.0589129s/100 iters), loss = 2.33492
I0428 19:39:46.562914 24379 solver.cpp:238]     Train net output #0: loss = 2.33492 (* 1 = 2.33492 loss)
I0428 19:39:46.562927 24379 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:46.621081 24379 solver.cpp:219] Iteration 100 (1719.54 iter/s, 0.0581551s/100 iters), loss = 1.76012
I0428 19:39:46.621107 24379 solver.cpp:238]     Train net output #0: loss = 1.76012 (* 1 = 1.76012 loss)
I0428 19:39:46.621114 24379 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:46.683262 24379 solver.cpp:219] Iteration 200 (1609.11 iter/s, 0.0621463s/100 iters), loss = 1.03128
I0428 19:39:46.683289 24379 solver.cpp:238]     Train net output #0: loss = 1.03128 (* 1 = 1.03128 loss)
I0428 19:39:46.683298 24379 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:46.739337 24379 solver.cpp:219] Iteration 300 (1784.52 iter/s, 0.0560374s/100 iters), loss = 0.976909
I0428 19:39:46.739378 24379 solver.cpp:238]     Train net output #0: loss = 0.976909 (* 1 = 0.976909 loss)
I0428 19:39:46.739385 24379 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:46.796015 24379 solver.cpp:219] Iteration 400 (1766.1 iter/s, 0.0566221s/100 iters), loss = 0.894497
I0428 19:39:46.796039 24379 solver.cpp:238]     Train net output #0: loss = 0.894497 (* 1 = 0.894497 loss)
I0428 19:39:46.796046 24379 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:46.852053 24379 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:46.926726 24386 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:46.927150 24379 solver.cpp:398]     Test net output #0: accuracy = 0.7536
I0428 19:39:46.927186 24379 solver.cpp:398]     Test net output #1: loss = 0.675559 (* 1 = 0.675559 loss)
I0428 19:39:46.927906 24379 solver.cpp:219] Iteration 500 (758.407 iter/s, 0.131855s/100 iters), loss = 0.851945
I0428 19:39:46.927930 24379 solver.cpp:238]     Train net output #0: loss = 0.851945 (* 1 = 0.851945 loss)
I0428 19:39:46.927937 24379 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:46.987133 24379 solver.cpp:219] Iteration 600 (1689.44 iter/s, 0.0591913s/100 iters), loss = 0.568769
I0428 19:39:46.987172 24379 solver.cpp:238]     Train net output #0: loss = 0.568769 (* 1 = 0.568769 loss)
I0428 19:39:46.987179 24379 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:47.045686 24379 solver.cpp:219] Iteration 700 (1709.34 iter/s, 0.058502s/100 iters), loss = 0.613407
I0428 19:39:47.045729 24379 solver.cpp:238]     Train net output #0: loss = 0.613407 (* 1 = 0.613407 loss)
I0428 19:39:47.045737 24379 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:47.101641 24379 solver.cpp:219] Iteration 800 (1788.84 iter/s, 0.0559022s/100 iters), loss = 0.76496
I0428 19:39:47.101683 24379 solver.cpp:238]     Train net output #0: loss = 0.76496 (* 1 = 0.76496 loss)
I0428 19:39:47.101691 24379 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:47.158082 24379 solver.cpp:219] Iteration 900 (1772.96 iter/s, 0.0564029s/100 iters), loss = 0.427233
I0428 19:39:47.158108 24379 solver.cpp:238]     Train net output #0: loss = 0.427233 (* 1 = 0.427233 loss)
I0428 19:39:47.158115 24379 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:47.180344 24385 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:47.216727 24379 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:47.217272 24379 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:47.217579 24379 solver.cpp:311] Iteration 1000, loss = 0.360792
I0428 19:39:47.217595 24379 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:47.292008 24386 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:47.292428 24379 solver.cpp:398]     Test net output #0: accuracy = 0.8579
I0428 19:39:47.292464 24379 solver.cpp:398]     Test net output #1: loss = 0.404115 (* 1 = 0.404115 loss)
I0428 19:39:47.292472 24379 solver.cpp:316] Optimization Done.
I0428 19:39:47.292475 24379 caffe.cpp:259] Optimization Done.
