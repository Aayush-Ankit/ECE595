I0428 19:45:51.049859 25901 caffe.cpp:218] Using GPUs 0
I0428 19:45:51.081862 25901 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:51.590690 25901 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test480.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:51.590828 25901 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test480.prototxt
I0428 19:45:51.591245 25901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:51.591265 25901 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:51.591367 25901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:51.591446 25901 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:51.591545 25901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:51.591568 25901 net.cpp:86] Creating Layer mnist
I0428 19:45:51.591578 25901 net.cpp:382] mnist -> data
I0428 19:45:51.591600 25901 net.cpp:382] mnist -> label
I0428 19:45:51.592694 25901 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:51.595154 25901 net.cpp:124] Setting up mnist
I0428 19:45:51.595170 25901 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:51.595176 25901 net.cpp:131] Top shape: 64 (64)
I0428 19:45:51.595180 25901 net.cpp:139] Memory required for data: 200960
I0428 19:45:51.595186 25901 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:51.595203 25901 net.cpp:86] Creating Layer conv0
I0428 19:45:51.595223 25901 net.cpp:408] conv0 <- data
I0428 19:45:51.595237 25901 net.cpp:382] conv0 -> conv0
I0428 19:45:51.840127 25901 net.cpp:124] Setting up conv0
I0428 19:45:51.840154 25901 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:51.840158 25901 net.cpp:139] Memory required for data: 495872
I0428 19:45:51.840173 25901 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:51.840185 25901 net.cpp:86] Creating Layer pool0
I0428 19:45:51.840189 25901 net.cpp:408] pool0 <- conv0
I0428 19:45:51.840194 25901 net.cpp:382] pool0 -> pool0
I0428 19:45:51.840283 25901 net.cpp:124] Setting up pool0
I0428 19:45:51.840289 25901 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:51.840292 25901 net.cpp:139] Memory required for data: 569600
I0428 19:45:51.840296 25901 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:51.840306 25901 net.cpp:86] Creating Layer conv1
I0428 19:45:51.840311 25901 net.cpp:408] conv1 <- pool0
I0428 19:45:51.840315 25901 net.cpp:382] conv1 -> conv1
I0428 19:45:51.843783 25901 net.cpp:124] Setting up conv1
I0428 19:45:51.843814 25901 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:51.843819 25901 net.cpp:139] Memory required for data: 2208000
I0428 19:45:51.843844 25901 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:51.843853 25901 net.cpp:86] Creating Layer pool1
I0428 19:45:51.843858 25901 net.cpp:408] pool1 <- conv1
I0428 19:45:51.843880 25901 net.cpp:382] pool1 -> pool1
I0428 19:45:51.843922 25901 net.cpp:124] Setting up pool1
I0428 19:45:51.843940 25901 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:51.843945 25901 net.cpp:139] Memory required for data: 2617600
I0428 19:45:51.843948 25901 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:51.843957 25901 net.cpp:86] Creating Layer ip1
I0428 19:45:51.843961 25901 net.cpp:408] ip1 <- pool1
I0428 19:45:51.843968 25901 net.cpp:382] ip1 -> ip1
I0428 19:45:51.844220 25901 net.cpp:124] Setting up ip1
I0428 19:45:51.844229 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.844234 25901 net.cpp:139] Memory required for data: 2620160
I0428 19:45:51.844244 25901 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:51.844250 25901 net.cpp:86] Creating Layer relu1
I0428 19:45:51.844254 25901 net.cpp:408] relu1 <- ip1
I0428 19:45:51.844260 25901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:51.844452 25901 net.cpp:124] Setting up relu1
I0428 19:45:51.844463 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.844467 25901 net.cpp:139] Memory required for data: 2622720
I0428 19:45:51.844471 25901 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:51.844480 25901 net.cpp:86] Creating Layer ip2
I0428 19:45:51.844485 25901 net.cpp:408] ip2 <- ip1
I0428 19:45:51.844491 25901 net.cpp:382] ip2 -> ip2
I0428 19:45:51.844599 25901 net.cpp:124] Setting up ip2
I0428 19:45:51.844607 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.844631 25901 net.cpp:139] Memory required for data: 2625280
I0428 19:45:51.844638 25901 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:51.844646 25901 net.cpp:86] Creating Layer relu2
I0428 19:45:51.844650 25901 net.cpp:408] relu2 <- ip2
I0428 19:45:51.844656 25901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:51.845736 25901 net.cpp:124] Setting up relu2
I0428 19:45:51.845767 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.845772 25901 net.cpp:139] Memory required for data: 2627840
I0428 19:45:51.845777 25901 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:51.845785 25901 net.cpp:86] Creating Layer ip3
I0428 19:45:51.845790 25901 net.cpp:408] ip3 <- ip2
I0428 19:45:51.845798 25901 net.cpp:382] ip3 -> ip3
I0428 19:45:51.845924 25901 net.cpp:124] Setting up ip3
I0428 19:45:51.845934 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.845939 25901 net.cpp:139] Memory required for data: 2630400
I0428 19:45:51.845950 25901 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:51.845957 25901 net.cpp:86] Creating Layer relu3
I0428 19:45:51.845963 25901 net.cpp:408] relu3 <- ip3
I0428 19:45:51.845969 25901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:51.846216 25901 net.cpp:124] Setting up relu3
I0428 19:45:51.846227 25901 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:51.846231 25901 net.cpp:139] Memory required for data: 2632960
I0428 19:45:51.846236 25901 layer_factory.hpp:77] Creating layer loss
I0428 19:45:51.846259 25901 net.cpp:86] Creating Layer loss
I0428 19:45:51.846264 25901 net.cpp:408] loss <- ip3
I0428 19:45:51.846271 25901 net.cpp:408] loss <- label
I0428 19:45:51.846277 25901 net.cpp:382] loss -> loss
I0428 19:45:51.846299 25901 layer_factory.hpp:77] Creating layer loss
I0428 19:45:51.846637 25901 net.cpp:124] Setting up loss
I0428 19:45:51.846647 25901 net.cpp:131] Top shape: (1)
I0428 19:45:51.846667 25901 net.cpp:134]     with loss weight 1
I0428 19:45:51.846683 25901 net.cpp:139] Memory required for data: 2632964
I0428 19:45:51.846688 25901 net.cpp:200] loss needs backward computation.
I0428 19:45:51.846693 25901 net.cpp:200] relu3 needs backward computation.
I0428 19:45:51.846696 25901 net.cpp:200] ip3 needs backward computation.
I0428 19:45:51.846700 25901 net.cpp:200] relu2 needs backward computation.
I0428 19:45:51.846704 25901 net.cpp:200] ip2 needs backward computation.
I0428 19:45:51.846709 25901 net.cpp:200] relu1 needs backward computation.
I0428 19:45:51.846711 25901 net.cpp:200] ip1 needs backward computation.
I0428 19:45:51.846716 25901 net.cpp:200] pool1 needs backward computation.
I0428 19:45:51.846720 25901 net.cpp:200] conv1 needs backward computation.
I0428 19:45:51.846724 25901 net.cpp:200] pool0 needs backward computation.
I0428 19:45:51.846729 25901 net.cpp:200] conv0 needs backward computation.
I0428 19:45:51.846734 25901 net.cpp:202] mnist does not need backward computation.
I0428 19:45:51.846737 25901 net.cpp:244] This network produces output loss
I0428 19:45:51.846750 25901 net.cpp:257] Network initialization done.
I0428 19:45:51.847352 25901 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test480.prototxt
I0428 19:45:51.847417 25901 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:51.847568 25901 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:51.847685 25901 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:51.847764 25901 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:51.847779 25901 net.cpp:86] Creating Layer mnist
I0428 19:45:51.847784 25901 net.cpp:382] mnist -> data
I0428 19:45:51.847795 25901 net.cpp:382] mnist -> label
I0428 19:45:51.847898 25901 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:51.850757 25901 net.cpp:124] Setting up mnist
I0428 19:45:51.850788 25901 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:51.850795 25901 net.cpp:131] Top shape: 100 (100)
I0428 19:45:51.850800 25901 net.cpp:139] Memory required for data: 314000
I0428 19:45:51.850806 25901 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:51.850826 25901 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:51.850844 25901 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:51.850850 25901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:51.850888 25901 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:51.850956 25901 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:51.850966 25901 net.cpp:131] Top shape: 100 (100)
I0428 19:45:51.850972 25901 net.cpp:131] Top shape: 100 (100)
I0428 19:45:51.850976 25901 net.cpp:139] Memory required for data: 314800
I0428 19:45:51.850980 25901 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:51.850994 25901 net.cpp:86] Creating Layer conv0
I0428 19:45:51.850998 25901 net.cpp:408] conv0 <- data
I0428 19:45:51.851006 25901 net.cpp:382] conv0 -> conv0
I0428 19:45:51.853075 25901 net.cpp:124] Setting up conv0
I0428 19:45:51.853091 25901 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:51.853096 25901 net.cpp:139] Memory required for data: 775600
I0428 19:45:51.853107 25901 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:51.853117 25901 net.cpp:86] Creating Layer pool0
I0428 19:45:51.853122 25901 net.cpp:408] pool0 <- conv0
I0428 19:45:51.853130 25901 net.cpp:382] pool0 -> pool0
I0428 19:45:51.853219 25901 net.cpp:124] Setting up pool0
I0428 19:45:51.853229 25901 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:51.853232 25901 net.cpp:139] Memory required for data: 890800
I0428 19:45:51.853237 25901 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:51.853250 25901 net.cpp:86] Creating Layer conv1
I0428 19:45:51.853255 25901 net.cpp:408] conv1 <- pool0
I0428 19:45:51.853305 25901 net.cpp:382] conv1 -> conv1
I0428 19:45:51.855517 25901 net.cpp:124] Setting up conv1
I0428 19:45:51.855546 25901 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:51.855552 25901 net.cpp:139] Memory required for data: 3450800
I0428 19:45:51.855579 25901 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:51.855588 25901 net.cpp:86] Creating Layer pool1
I0428 19:45:51.855594 25901 net.cpp:408] pool1 <- conv1
I0428 19:45:51.855618 25901 net.cpp:382] pool1 -> pool1
I0428 19:45:51.855666 25901 net.cpp:124] Setting up pool1
I0428 19:45:51.855677 25901 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:51.855682 25901 net.cpp:139] Memory required for data: 4090800
I0428 19:45:51.855686 25901 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:51.855696 25901 net.cpp:86] Creating Layer ip1
I0428 19:45:51.855701 25901 net.cpp:408] ip1 <- pool1
I0428 19:45:51.855710 25901 net.cpp:382] ip1 -> ip1
I0428 19:45:51.856029 25901 net.cpp:124] Setting up ip1
I0428 19:45:51.856037 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.856068 25901 net.cpp:139] Memory required for data: 4094800
I0428 19:45:51.856078 25901 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:51.856086 25901 net.cpp:86] Creating Layer relu1
I0428 19:45:51.856089 25901 net.cpp:408] relu1 <- ip1
I0428 19:45:51.856098 25901 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:51.856353 25901 net.cpp:124] Setting up relu1
I0428 19:45:51.856365 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.856369 25901 net.cpp:139] Memory required for data: 4098800
I0428 19:45:51.856374 25901 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:51.856384 25901 net.cpp:86] Creating Layer ip2
I0428 19:45:51.856389 25901 net.cpp:408] ip2 <- ip1
I0428 19:45:51.856396 25901 net.cpp:382] ip2 -> ip2
I0428 19:45:51.856535 25901 net.cpp:124] Setting up ip2
I0428 19:45:51.856555 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.856560 25901 net.cpp:139] Memory required for data: 4102800
I0428 19:45:51.856568 25901 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:51.856575 25901 net.cpp:86] Creating Layer relu2
I0428 19:45:51.856580 25901 net.cpp:408] relu2 <- ip2
I0428 19:45:51.856587 25901 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:51.856796 25901 net.cpp:124] Setting up relu2
I0428 19:45:51.856806 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.856834 25901 net.cpp:139] Memory required for data: 4106800
I0428 19:45:51.856839 25901 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:51.856848 25901 net.cpp:86] Creating Layer ip3
I0428 19:45:51.856853 25901 net.cpp:408] ip3 <- ip2
I0428 19:45:51.856860 25901 net.cpp:382] ip3 -> ip3
I0428 19:45:51.856997 25901 net.cpp:124] Setting up ip3
I0428 19:45:51.857007 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.857018 25901 net.cpp:139] Memory required for data: 4110800
I0428 19:45:51.857030 25901 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:51.857038 25901 net.cpp:86] Creating Layer relu3
I0428 19:45:51.857043 25901 net.cpp:408] relu3 <- ip3
I0428 19:45:51.857049 25901 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:51.858219 25901 net.cpp:124] Setting up relu3
I0428 19:45:51.858249 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.858254 25901 net.cpp:139] Memory required for data: 4114800
I0428 19:45:51.858259 25901 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:45:51.858266 25901 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:45:51.858271 25901 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:45:51.858279 25901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:45:51.858288 25901 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:45:51.858335 25901 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:45:51.858352 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.858358 25901 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:51.858362 25901 net.cpp:139] Memory required for data: 4122800
I0428 19:45:51.858366 25901 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:51.858373 25901 net.cpp:86] Creating Layer accuracy
I0428 19:45:51.858378 25901 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:45:51.858384 25901 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:51.858392 25901 net.cpp:382] accuracy -> accuracy
I0428 19:45:51.858412 25901 net.cpp:124] Setting up accuracy
I0428 19:45:51.858418 25901 net.cpp:131] Top shape: (1)
I0428 19:45:51.858423 25901 net.cpp:139] Memory required for data: 4122804
I0428 19:45:51.858428 25901 layer_factory.hpp:77] Creating layer loss
I0428 19:45:51.858436 25901 net.cpp:86] Creating Layer loss
I0428 19:45:51.858441 25901 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:45:51.858446 25901 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:51.858453 25901 net.cpp:382] loss -> loss
I0428 19:45:51.858461 25901 layer_factory.hpp:77] Creating layer loss
I0428 19:45:51.858788 25901 net.cpp:124] Setting up loss
I0428 19:45:51.858808 25901 net.cpp:131] Top shape: (1)
I0428 19:45:51.858814 25901 net.cpp:134]     with loss weight 1
I0428 19:45:51.858835 25901 net.cpp:139] Memory required for data: 4122808
I0428 19:45:51.858851 25901 net.cpp:200] loss needs backward computation.
I0428 19:45:51.858857 25901 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:51.858862 25901 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:45:51.858867 25901 net.cpp:200] relu3 needs backward computation.
I0428 19:45:51.858871 25901 net.cpp:200] ip3 needs backward computation.
I0428 19:45:51.858876 25901 net.cpp:200] relu2 needs backward computation.
I0428 19:45:51.858881 25901 net.cpp:200] ip2 needs backward computation.
I0428 19:45:51.858886 25901 net.cpp:200] relu1 needs backward computation.
I0428 19:45:51.858889 25901 net.cpp:200] ip1 needs backward computation.
I0428 19:45:51.858901 25901 net.cpp:200] pool1 needs backward computation.
I0428 19:45:51.858906 25901 net.cpp:200] conv1 needs backward computation.
I0428 19:45:51.858911 25901 net.cpp:200] pool0 needs backward computation.
I0428 19:45:51.858921 25901 net.cpp:200] conv0 needs backward computation.
I0428 19:45:51.858930 25901 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:51.858935 25901 net.cpp:202] mnist does not need backward computation.
I0428 19:45:51.858939 25901 net.cpp:244] This network produces output accuracy
I0428 19:45:51.858944 25901 net.cpp:244] This network produces output loss
I0428 19:45:51.858960 25901 net.cpp:257] Network initialization done.
I0428 19:45:51.859014 25901 solver.cpp:56] Solver scaffolding done.
I0428 19:45:51.859541 25901 caffe.cpp:248] Starting Optimization
I0428 19:45:51.859549 25901 solver.cpp:273] Solving LeNet
I0428 19:45:51.859568 25901 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:51.859822 25901 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:51.865803 25901 blocking_queue.cpp:49] Waiting for data
I0428 19:45:51.935565 25908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:51.936241 25901 solver.cpp:398]     Test net output #0: accuracy = 0.1602
I0428 19:45:51.936278 25901 solver.cpp:398]     Test net output #1: loss = 2.31963 (* 1 = 2.31963 loss)
I0428 19:45:51.940668 25901 solver.cpp:219] Iteration 0 (0 iter/s, 0.0810501s/100 iters), loss = 2.30694
I0428 19:45:51.940711 25901 solver.cpp:238]     Train net output #0: loss = 2.30694 (* 1 = 2.30694 loss)
I0428 19:45:51.940724 25901 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:52.094288 25901 solver.cpp:219] Iteration 100 (651.203 iter/s, 0.153562s/100 iters), loss = 1.12657
I0428 19:45:52.094318 25901 solver.cpp:238]     Train net output #0: loss = 1.12657 (* 1 = 1.12657 loss)
I0428 19:45:52.094326 25901 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:52.246773 25901 solver.cpp:219] Iteration 200 (655.993 iter/s, 0.152441s/100 iters), loss = 1.26225
I0428 19:45:52.246815 25901 solver.cpp:238]     Train net output #0: loss = 1.26225 (* 1 = 1.26225 loss)
I0428 19:45:52.246824 25901 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:52.423506 25901 solver.cpp:219] Iteration 300 (566.025 iter/s, 0.176671s/100 iters), loss = 0.996109
I0428 19:45:52.423557 25901 solver.cpp:238]     Train net output #0: loss = 0.996109 (* 1 = 0.996109 loss)
I0428 19:45:52.423570 25901 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:52.604544 25901 solver.cpp:219] Iteration 400 (552.576 iter/s, 0.180971s/100 iters), loss = 1.02277
I0428 19:45:52.604596 25901 solver.cpp:238]     Train net output #0: loss = 1.02277 (* 1 = 1.02277 loss)
I0428 19:45:52.604609 25901 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:52.785161 25901 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:52.849233 25908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:52.851287 25901 solver.cpp:398]     Test net output #0: accuracy = 0.7433
I0428 19:45:52.851328 25901 solver.cpp:398]     Test net output #1: loss = 0.899951 (* 1 = 0.899951 loss)
I0428 19:45:52.852840 25901 solver.cpp:219] Iteration 500 (402.856 iter/s, 0.248228s/100 iters), loss = 0.760326
I0428 19:45:52.852883 25901 solver.cpp:238]     Train net output #0: loss = 0.760326 (* 1 = 0.760326 loss)
I0428 19:45:52.852912 25901 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:53.020315 25901 solver.cpp:219] Iteration 600 (597.279 iter/s, 0.167426s/100 iters), loss = 0.711439
I0428 19:45:53.020365 25901 solver.cpp:238]     Train net output #0: loss = 0.711439 (* 1 = 0.711439 loss)
I0428 19:45:53.020376 25901 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:53.188351 25901 solver.cpp:219] Iteration 700 (595.334 iter/s, 0.167973s/100 iters), loss = 0.954288
I0428 19:45:53.188401 25901 solver.cpp:238]     Train net output #0: loss = 0.954288 (* 1 = 0.954288 loss)
I0428 19:45:53.188411 25901 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:53.358422 25901 solver.cpp:219] Iteration 800 (588.181 iter/s, 0.170016s/100 iters), loss = 0.901776
I0428 19:45:53.358474 25901 solver.cpp:238]     Train net output #0: loss = 0.901776 (* 1 = 0.901776 loss)
I0428 19:45:53.358485 25901 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:53.527537 25901 solver.cpp:219] Iteration 900 (591.512 iter/s, 0.169058s/100 iters), loss = 0.974127
I0428 19:45:53.527585 25901 solver.cpp:238]     Train net output #0: loss = 0.974127 (* 1 = 0.974127 loss)
I0428 19:45:53.527595 25901 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:53.582820 25907 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:53.692713 25901 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:53.694535 25901 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:53.695392 25901 solver.cpp:311] Iteration 1000, loss = 1.00101
I0428 19:45:53.695413 25901 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:53.751384 25908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:53.753279 25901 solver.cpp:398]     Test net output #0: accuracy = 0.769
I0428 19:45:53.753303 25901 solver.cpp:398]     Test net output #1: loss = 0.802481 (* 1 = 0.802481 loss)
I0428 19:45:53.753315 25901 solver.cpp:316] Optimization Done.
I0428 19:45:53.753319 25901 caffe.cpp:259] Optimization Done.
