I0428 19:48:02.982220 26388 caffe.cpp:218] Using GPUs 0
I0428 19:48:03.022552 26388 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:03.484176 26388 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test533.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:03.484338 26388 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test533.prototxt
I0428 19:48:03.484674 26388 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:03.484704 26388 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:03.484781 26388 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:03.484877 26388 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:03.484961 26388 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:03.484989 26388 net.cpp:86] Creating Layer mnist
I0428 19:48:03.484997 26388 net.cpp:382] mnist -> data
I0428 19:48:03.485033 26388 net.cpp:382] mnist -> label
I0428 19:48:03.490932 26388 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:03.493309 26388 net.cpp:124] Setting up mnist
I0428 19:48:03.493322 26388 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:03.493327 26388 net.cpp:131] Top shape: 64 (64)
I0428 19:48:03.493330 26388 net.cpp:139] Memory required for data: 200960
I0428 19:48:03.493336 26388 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:03.493350 26388 net.cpp:86] Creating Layer conv0
I0428 19:48:03.493381 26388 net.cpp:408] conv0 <- data
I0428 19:48:03.493391 26388 net.cpp:382] conv0 -> conv0
I0428 19:48:03.730422 26388 net.cpp:124] Setting up conv0
I0428 19:48:03.730448 26388 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:03.730453 26388 net.cpp:139] Memory required for data: 938240
I0428 19:48:03.730482 26388 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:03.730496 26388 net.cpp:86] Creating Layer pool0
I0428 19:48:03.730500 26388 net.cpp:408] pool0 <- conv0
I0428 19:48:03.730505 26388 net.cpp:382] pool0 -> pool0
I0428 19:48:03.730553 26388 net.cpp:124] Setting up pool0
I0428 19:48:03.730561 26388 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:03.730564 26388 net.cpp:139] Memory required for data: 1122560
I0428 19:48:03.730567 26388 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:03.730577 26388 net.cpp:86] Creating Layer conv1
I0428 19:48:03.730581 26388 net.cpp:408] conv1 <- pool0
I0428 19:48:03.730584 26388 net.cpp:382] conv1 -> conv1
I0428 19:48:03.732468 26388 net.cpp:124] Setting up conv1
I0428 19:48:03.732483 26388 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:48:03.732488 26388 net.cpp:139] Memory required for data: 1155328
I0428 19:48:03.732497 26388 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:03.732506 26388 net.cpp:86] Creating Layer pool1
I0428 19:48:03.732511 26388 net.cpp:408] pool1 <- conv1
I0428 19:48:03.732517 26388 net.cpp:382] pool1 -> pool1
I0428 19:48:03.732556 26388 net.cpp:124] Setting up pool1
I0428 19:48:03.732564 26388 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:48:03.732568 26388 net.cpp:139] Memory required for data: 1163520
I0428 19:48:03.732571 26388 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:03.732578 26388 net.cpp:86] Creating Layer ip1
I0428 19:48:03.732581 26388 net.cpp:408] ip1 <- pool1
I0428 19:48:03.732586 26388 net.cpp:382] ip1 -> ip1
I0428 19:48:03.732714 26388 net.cpp:124] Setting up ip1
I0428 19:48:03.732722 26388 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:03.732725 26388 net.cpp:139] Memory required for data: 1169920
I0428 19:48:03.732733 26388 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:03.732738 26388 net.cpp:86] Creating Layer relu1
I0428 19:48:03.732741 26388 net.cpp:408] relu1 <- ip1
I0428 19:48:03.732745 26388 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:03.732961 26388 net.cpp:124] Setting up relu1
I0428 19:48:03.732972 26388 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:03.732975 26388 net.cpp:139] Memory required for data: 1176320
I0428 19:48:03.732978 26388 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:03.732985 26388 net.cpp:86] Creating Layer ip2
I0428 19:48:03.732990 26388 net.cpp:408] ip2 <- ip1
I0428 19:48:03.732995 26388 net.cpp:382] ip2 -> ip2
I0428 19:48:03.733113 26388 net.cpp:124] Setting up ip2
I0428 19:48:03.733119 26388 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:03.733124 26388 net.cpp:139] Memory required for data: 1182720
I0428 19:48:03.733129 26388 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:03.733135 26388 net.cpp:86] Creating Layer relu2
I0428 19:48:03.733139 26388 net.cpp:408] relu2 <- ip2
I0428 19:48:03.733144 26388 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:03.733960 26388 net.cpp:124] Setting up relu2
I0428 19:48:03.733973 26388 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:48:03.733978 26388 net.cpp:139] Memory required for data: 1189120
I0428 19:48:03.733980 26388 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:03.733988 26388 net.cpp:86] Creating Layer ip3
I0428 19:48:03.733991 26388 net.cpp:408] ip3 <- ip2
I0428 19:48:03.733997 26388 net.cpp:382] ip3 -> ip3
I0428 19:48:03.734099 26388 net.cpp:124] Setting up ip3
I0428 19:48:03.734108 26388 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:03.734112 26388 net.cpp:139] Memory required for data: 1191680
I0428 19:48:03.734119 26388 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:03.734124 26388 net.cpp:86] Creating Layer relu3
I0428 19:48:03.734127 26388 net.cpp:408] relu3 <- ip3
I0428 19:48:03.734133 26388 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:03.734324 26388 net.cpp:124] Setting up relu3
I0428 19:48:03.734333 26388 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:03.734336 26388 net.cpp:139] Memory required for data: 1194240
I0428 19:48:03.734339 26388 layer_factory.hpp:77] Creating layer loss
I0428 19:48:03.734345 26388 net.cpp:86] Creating Layer loss
I0428 19:48:03.734349 26388 net.cpp:408] loss <- ip3
I0428 19:48:03.734352 26388 net.cpp:408] loss <- label
I0428 19:48:03.734357 26388 net.cpp:382] loss -> loss
I0428 19:48:03.734374 26388 layer_factory.hpp:77] Creating layer loss
I0428 19:48:03.734621 26388 net.cpp:124] Setting up loss
I0428 19:48:03.734629 26388 net.cpp:131] Top shape: (1)
I0428 19:48:03.734633 26388 net.cpp:134]     with loss weight 1
I0428 19:48:03.734647 26388 net.cpp:139] Memory required for data: 1194244
I0428 19:48:03.734652 26388 net.cpp:200] loss needs backward computation.
I0428 19:48:03.734655 26388 net.cpp:200] relu3 needs backward computation.
I0428 19:48:03.734658 26388 net.cpp:200] ip3 needs backward computation.
I0428 19:48:03.734661 26388 net.cpp:200] relu2 needs backward computation.
I0428 19:48:03.734664 26388 net.cpp:200] ip2 needs backward computation.
I0428 19:48:03.734668 26388 net.cpp:200] relu1 needs backward computation.
I0428 19:48:03.734671 26388 net.cpp:200] ip1 needs backward computation.
I0428 19:48:03.734674 26388 net.cpp:200] pool1 needs backward computation.
I0428 19:48:03.734678 26388 net.cpp:200] conv1 needs backward computation.
I0428 19:48:03.734680 26388 net.cpp:200] pool0 needs backward computation.
I0428 19:48:03.734684 26388 net.cpp:200] conv0 needs backward computation.
I0428 19:48:03.734688 26388 net.cpp:202] mnist does not need backward computation.
I0428 19:48:03.734690 26388 net.cpp:244] This network produces output loss
I0428 19:48:03.734700 26388 net.cpp:257] Network initialization done.
I0428 19:48:03.735153 26388 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test533.prototxt
I0428 19:48:03.735183 26388 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:03.735275 26388 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:03.735380 26388 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:03.735425 26388 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:03.735438 26388 net.cpp:86] Creating Layer mnist
I0428 19:48:03.735443 26388 net.cpp:382] mnist -> data
I0428 19:48:03.735450 26388 net.cpp:382] mnist -> label
I0428 19:48:03.735545 26388 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:03.737632 26388 net.cpp:124] Setting up mnist
I0428 19:48:03.737663 26388 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:03.737668 26388 net.cpp:131] Top shape: 100 (100)
I0428 19:48:03.737671 26388 net.cpp:139] Memory required for data: 314000
I0428 19:48:03.737675 26388 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:03.737687 26388 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:03.737691 26388 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:03.737697 26388 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:03.737704 26388 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:03.737778 26388 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:03.737787 26388 net.cpp:131] Top shape: 100 (100)
I0428 19:48:03.737790 26388 net.cpp:131] Top shape: 100 (100)
I0428 19:48:03.737793 26388 net.cpp:139] Memory required for data: 314800
I0428 19:48:03.737810 26388 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:03.737819 26388 net.cpp:86] Creating Layer conv0
I0428 19:48:03.737823 26388 net.cpp:408] conv0 <- data
I0428 19:48:03.737828 26388 net.cpp:382] conv0 -> conv0
I0428 19:48:03.739500 26388 net.cpp:124] Setting up conv0
I0428 19:48:03.739528 26388 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:03.739532 26388 net.cpp:139] Memory required for data: 1466800
I0428 19:48:03.739542 26388 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:03.739547 26388 net.cpp:86] Creating Layer pool0
I0428 19:48:03.739552 26388 net.cpp:408] pool0 <- conv0
I0428 19:48:03.739555 26388 net.cpp:382] pool0 -> pool0
I0428 19:48:03.739589 26388 net.cpp:124] Setting up pool0
I0428 19:48:03.739595 26388 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:03.739598 26388 net.cpp:139] Memory required for data: 1754800
I0428 19:48:03.739601 26388 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:03.739609 26388 net.cpp:86] Creating Layer conv1
I0428 19:48:03.739612 26388 net.cpp:408] conv1 <- pool0
I0428 19:48:03.739617 26388 net.cpp:382] conv1 -> conv1
I0428 19:48:03.741814 26388 net.cpp:124] Setting up conv1
I0428 19:48:03.741828 26388 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:48:03.741848 26388 net.cpp:139] Memory required for data: 1806000
I0428 19:48:03.741856 26388 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:03.741870 26388 net.cpp:86] Creating Layer pool1
I0428 19:48:03.741874 26388 net.cpp:408] pool1 <- conv1
I0428 19:48:03.741878 26388 net.cpp:382] pool1 -> pool1
I0428 19:48:03.741942 26388 net.cpp:124] Setting up pool1
I0428 19:48:03.741955 26388 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:48:03.741958 26388 net.cpp:139] Memory required for data: 1818800
I0428 19:48:03.741961 26388 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:03.741967 26388 net.cpp:86] Creating Layer ip1
I0428 19:48:03.741971 26388 net.cpp:408] ip1 <- pool1
I0428 19:48:03.741976 26388 net.cpp:382] ip1 -> ip1
I0428 19:48:03.742118 26388 net.cpp:124] Setting up ip1
I0428 19:48:03.742133 26388 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:03.742148 26388 net.cpp:139] Memory required for data: 1828800
I0428 19:48:03.742156 26388 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:03.742161 26388 net.cpp:86] Creating Layer relu1
I0428 19:48:03.742166 26388 net.cpp:408] relu1 <- ip1
I0428 19:48:03.742171 26388 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:03.742352 26388 net.cpp:124] Setting up relu1
I0428 19:48:03.742362 26388 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:03.742367 26388 net.cpp:139] Memory required for data: 1838800
I0428 19:48:03.742370 26388 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:03.742377 26388 net.cpp:86] Creating Layer ip2
I0428 19:48:03.742383 26388 net.cpp:408] ip2 <- ip1
I0428 19:48:03.742388 26388 net.cpp:382] ip2 -> ip2
I0428 19:48:03.742516 26388 net.cpp:124] Setting up ip2
I0428 19:48:03.742523 26388 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:03.742527 26388 net.cpp:139] Memory required for data: 1848800
I0428 19:48:03.742532 26388 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:03.742537 26388 net.cpp:86] Creating Layer relu2
I0428 19:48:03.742542 26388 net.cpp:408] relu2 <- ip2
I0428 19:48:03.742545 26388 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:03.742694 26388 net.cpp:124] Setting up relu2
I0428 19:48:03.742704 26388 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:48:03.742708 26388 net.cpp:139] Memory required for data: 1858800
I0428 19:48:03.742712 26388 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:03.742717 26388 net.cpp:86] Creating Layer ip3
I0428 19:48:03.742719 26388 net.cpp:408] ip3 <- ip2
I0428 19:48:03.742724 26388 net.cpp:382] ip3 -> ip3
I0428 19:48:03.742835 26388 net.cpp:124] Setting up ip3
I0428 19:48:03.742842 26388 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:03.742846 26388 net.cpp:139] Memory required for data: 1862800
I0428 19:48:03.742853 26388 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:03.742858 26388 net.cpp:86] Creating Layer relu3
I0428 19:48:03.742861 26388 net.cpp:408] relu3 <- ip3
I0428 19:48:03.742882 26388 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:03.743743 26388 net.cpp:124] Setting up relu3
I0428 19:48:03.743754 26388 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:03.743773 26388 net.cpp:139] Memory required for data: 1866800
I0428 19:48:03.743777 26388 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:03.743782 26388 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:03.743787 26388 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:03.743791 26388 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:03.743798 26388 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:03.743871 26388 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:03.743878 26388 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:03.743882 26388 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:03.743885 26388 net.cpp:139] Memory required for data: 1874800
I0428 19:48:03.743888 26388 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:03.743893 26388 net.cpp:86] Creating Layer accuracy
I0428 19:48:03.743896 26388 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:03.743901 26388 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:03.743906 26388 net.cpp:382] accuracy -> accuracy
I0428 19:48:03.743912 26388 net.cpp:124] Setting up accuracy
I0428 19:48:03.743917 26388 net.cpp:131] Top shape: (1)
I0428 19:48:03.743919 26388 net.cpp:139] Memory required for data: 1874804
I0428 19:48:03.743928 26388 layer_factory.hpp:77] Creating layer loss
I0428 19:48:03.743932 26388 net.cpp:86] Creating Layer loss
I0428 19:48:03.743935 26388 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:03.743939 26388 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:03.743943 26388 net.cpp:382] loss -> loss
I0428 19:48:03.743949 26388 layer_factory.hpp:77] Creating layer loss
I0428 19:48:03.744164 26388 net.cpp:124] Setting up loss
I0428 19:48:03.744174 26388 net.cpp:131] Top shape: (1)
I0428 19:48:03.744179 26388 net.cpp:134]     with loss weight 1
I0428 19:48:03.744201 26388 net.cpp:139] Memory required for data: 1874808
I0428 19:48:03.744215 26388 net.cpp:200] loss needs backward computation.
I0428 19:48:03.744220 26388 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:03.744230 26388 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:03.744233 26388 net.cpp:200] relu3 needs backward computation.
I0428 19:48:03.744236 26388 net.cpp:200] ip3 needs backward computation.
I0428 19:48:03.744240 26388 net.cpp:200] relu2 needs backward computation.
I0428 19:48:03.744243 26388 net.cpp:200] ip2 needs backward computation.
I0428 19:48:03.744246 26388 net.cpp:200] relu1 needs backward computation.
I0428 19:48:03.744251 26388 net.cpp:200] ip1 needs backward computation.
I0428 19:48:03.744253 26388 net.cpp:200] pool1 needs backward computation.
I0428 19:48:03.744271 26388 net.cpp:200] conv1 needs backward computation.
I0428 19:48:03.744276 26388 net.cpp:200] pool0 needs backward computation.
I0428 19:48:03.744280 26388 net.cpp:200] conv0 needs backward computation.
I0428 19:48:03.744284 26388 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:03.744288 26388 net.cpp:202] mnist does not need backward computation.
I0428 19:48:03.744292 26388 net.cpp:244] This network produces output accuracy
I0428 19:48:03.744295 26388 net.cpp:244] This network produces output loss
I0428 19:48:03.744307 26388 net.cpp:257] Network initialization done.
I0428 19:48:03.744376 26388 solver.cpp:56] Solver scaffolding done.
I0428 19:48:03.744765 26388 caffe.cpp:248] Starting Optimization
I0428 19:48:03.744771 26388 solver.cpp:273] Solving LeNet
I0428 19:48:03.744773 26388 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:03.745687 26388 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:03.751631 26388 blocking_queue.cpp:49] Waiting for data
I0428 19:48:03.820374 26395 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:03.820962 26388 solver.cpp:398]     Test net output #0: accuracy = 0.1051
I0428 19:48:03.820991 26388 solver.cpp:398]     Test net output #1: loss = 2.30198 (* 1 = 2.30198 loss)
I0428 19:48:03.823281 26388 solver.cpp:219] Iteration 0 (0 iter/s, 0.078462s/100 iters), loss = 2.29673
I0428 19:48:03.823314 26388 solver.cpp:238]     Train net output #0: loss = 2.29673 (* 1 = 2.29673 loss)
I0428 19:48:03.823330 26388 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:03.900528 26388 solver.cpp:219] Iteration 100 (1295.26 iter/s, 0.0772045s/100 iters), loss = 1.28784
I0428 19:48:03.900560 26388 solver.cpp:238]     Train net output #0: loss = 1.28784 (* 1 = 1.28784 loss)
I0428 19:48:03.900568 26388 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:03.974822 26388 solver.cpp:219] Iteration 200 (1346.76 iter/s, 0.0742523s/100 iters), loss = 0.465785
I0428 19:48:03.974851 26388 solver.cpp:238]     Train net output #0: loss = 0.465785 (* 1 = 0.465785 loss)
I0428 19:48:03.974859 26388 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:04.050700 26388 solver.cpp:219] Iteration 300 (1318.56 iter/s, 0.0758405s/100 iters), loss = 0.478254
I0428 19:48:04.050730 26388 solver.cpp:238]     Train net output #0: loss = 0.478254 (* 1 = 0.478254 loss)
I0428 19:48:04.050739 26388 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:04.124562 26388 solver.cpp:219] Iteration 400 (1354.61 iter/s, 0.0738222s/100 iters), loss = 0.215394
I0428 19:48:04.124590 26388 solver.cpp:238]     Train net output #0: loss = 0.215394 (* 1 = 0.215394 loss)
I0428 19:48:04.124598 26388 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:04.198665 26388 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:04.251529 26395 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:04.252049 26388 solver.cpp:398]     Test net output #0: accuracy = 0.9122
I0428 19:48:04.252074 26388 solver.cpp:398]     Test net output #1: loss = 0.286234 (* 1 = 0.286234 loss)
I0428 19:48:04.252845 26388 solver.cpp:219] Iteration 500 (779.784 iter/s, 0.128241s/100 iters), loss = 0.34816
I0428 19:48:04.252882 26388 solver.cpp:238]     Train net output #0: loss = 0.34816 (* 1 = 0.34816 loss)
I0428 19:48:04.252909 26388 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:04.327636 26388 solver.cpp:219] Iteration 600 (1337.96 iter/s, 0.0747407s/100 iters), loss = 0.238787
I0428 19:48:04.327664 26388 solver.cpp:238]     Train net output #0: loss = 0.238787 (* 1 = 0.238787 loss)
I0428 19:48:04.327672 26388 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:04.401821 26388 solver.cpp:219] Iteration 700 (1348.66 iter/s, 0.0741478s/100 iters), loss = 0.555119
I0428 19:48:04.401849 26388 solver.cpp:238]     Train net output #0: loss = 0.555119 (* 1 = 0.555119 loss)
I0428 19:48:04.401856 26388 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:04.472769 26388 solver.cpp:219] Iteration 800 (1410.2 iter/s, 0.0709119s/100 iters), loss = 0.276463
I0428 19:48:04.472792 26388 solver.cpp:238]     Train net output #0: loss = 0.276463 (* 1 = 0.276463 loss)
I0428 19:48:04.472800 26388 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:04.542148 26388 solver.cpp:219] Iteration 900 (1442.02 iter/s, 0.0693473s/100 iters), loss = 0.437377
I0428 19:48:04.542187 26388 solver.cpp:238]     Train net output #0: loss = 0.437377 (* 1 = 0.437377 loss)
I0428 19:48:04.542193 26388 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:04.565853 26394 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:04.611234 26388 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:04.611918 26388 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:04.612437 26388 solver.cpp:311] Iteration 1000, loss = 0.288038
I0428 19:48:04.612452 26388 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:04.658267 26395 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:04.658766 26388 solver.cpp:398]     Test net output #0: accuracy = 0.9401
I0428 19:48:04.658799 26388 solver.cpp:398]     Test net output #1: loss = 0.197498 (* 1 = 0.197498 loss)
I0428 19:48:04.658804 26388 solver.cpp:316] Optimization Done.
I0428 19:48:04.658807 26388 caffe.cpp:259] Optimization Done.
