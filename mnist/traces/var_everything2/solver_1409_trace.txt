I0428 20:22:42.193055  2045 caffe.cpp:218] Using GPUs 0
I0428 20:22:42.229647  2045 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:22:42.749455  2045 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1409.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:22:42.749595  2045 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1409.prototxt
I0428 20:22:42.749980  2045 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:22:42.750000  2045 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:22:42.750088  2045 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:22:42.750165  2045 layer_factory.hpp:77] Creating layer mnist
I0428 20:22:42.750264  2045 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:22:42.750288  2045 net.cpp:86] Creating Layer mnist
I0428 20:22:42.750296  2045 net.cpp:382] mnist -> data
I0428 20:22:42.750319  2045 net.cpp:382] mnist -> label
I0428 20:22:42.751408  2045 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:22:42.753865  2045 net.cpp:124] Setting up mnist
I0428 20:22:42.753882  2045 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:22:42.753890  2045 net.cpp:131] Top shape: 64 (64)
I0428 20:22:42.753892  2045 net.cpp:139] Memory required for data: 200960
I0428 20:22:42.753900  2045 layer_factory.hpp:77] Creating layer conv0
I0428 20:22:42.753916  2045 net.cpp:86] Creating Layer conv0
I0428 20:22:42.753921  2045 net.cpp:408] conv0 <- data
I0428 20:22:42.753934  2045 net.cpp:382] conv0 -> conv0
I0428 20:22:43.049549  2045 net.cpp:124] Setting up conv0
I0428 20:22:43.049582  2045 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:22:43.049587  2045 net.cpp:139] Memory required for data: 7573760
I0428 20:22:43.049626  2045 layer_factory.hpp:77] Creating layer pool0
I0428 20:22:43.049643  2045 net.cpp:86] Creating Layer pool0
I0428 20:22:43.049646  2045 net.cpp:408] pool0 <- conv0
I0428 20:22:43.049654  2045 net.cpp:382] pool0 -> pool0
I0428 20:22:43.049710  2045 net.cpp:124] Setting up pool0
I0428 20:22:43.049720  2045 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:22:43.049722  2045 net.cpp:139] Memory required for data: 9416960
I0428 20:22:43.049726  2045 layer_factory.hpp:77] Creating layer conv1
I0428 20:22:43.049739  2045 net.cpp:86] Creating Layer conv1
I0428 20:22:43.049743  2045 net.cpp:408] conv1 <- pool0
I0428 20:22:43.049749  2045 net.cpp:382] conv1 -> conv1
I0428 20:22:43.053709  2045 net.cpp:124] Setting up conv1
I0428 20:22:43.053727  2045 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:22:43.053732  2045 net.cpp:139] Memory required for data: 11055360
I0428 20:22:43.053742  2045 layer_factory.hpp:77] Creating layer pool1
I0428 20:22:43.053751  2045 net.cpp:86] Creating Layer pool1
I0428 20:22:43.053757  2045 net.cpp:408] pool1 <- conv1
I0428 20:22:43.053763  2045 net.cpp:382] pool1 -> pool1
I0428 20:22:43.053807  2045 net.cpp:124] Setting up pool1
I0428 20:22:43.053812  2045 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:22:43.053817  2045 net.cpp:139] Memory required for data: 11464960
I0428 20:22:43.053819  2045 layer_factory.hpp:77] Creating layer ip1
I0428 20:22:43.053828  2045 net.cpp:86] Creating Layer ip1
I0428 20:22:43.053833  2045 net.cpp:408] ip1 <- pool1
I0428 20:22:43.053838  2045 net.cpp:382] ip1 -> ip1
I0428 20:22:43.055032  2045 net.cpp:124] Setting up ip1
I0428 20:22:43.055047  2045 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:43.055052  2045 net.cpp:139] Memory required for data: 11467520
I0428 20:22:43.055061  2045 layer_factory.hpp:77] Creating layer relu1
I0428 20:22:43.055069  2045 net.cpp:86] Creating Layer relu1
I0428 20:22:43.055073  2045 net.cpp:408] relu1 <- ip1
I0428 20:22:43.055079  2045 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:22:43.055299  2045 net.cpp:124] Setting up relu1
I0428 20:22:43.055310  2045 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:43.055313  2045 net.cpp:139] Memory required for data: 11470080
I0428 20:22:43.055316  2045 layer_factory.hpp:77] Creating layer ip2
I0428 20:22:43.055325  2045 net.cpp:86] Creating Layer ip2
I0428 20:22:43.055328  2045 net.cpp:408] ip2 <- ip1
I0428 20:22:43.055335  2045 net.cpp:382] ip2 -> ip2
I0428 20:22:43.055439  2045 net.cpp:124] Setting up ip2
I0428 20:22:43.055449  2045 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:43.055451  2045 net.cpp:139] Memory required for data: 11472640
I0428 20:22:43.055457  2045 layer_factory.hpp:77] Creating layer relu2
I0428 20:22:43.055464  2045 net.cpp:86] Creating Layer relu2
I0428 20:22:43.055467  2045 net.cpp:408] relu2 <- ip2
I0428 20:22:43.055472  2045 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:22:43.056288  2045 net.cpp:124] Setting up relu2
I0428 20:22:43.056301  2045 net.cpp:131] Top shape: 64 10 (640)
I0428 20:22:43.056305  2045 net.cpp:139] Memory required for data: 11475200
I0428 20:22:43.056309  2045 layer_factory.hpp:77] Creating layer loss
I0428 20:22:43.056316  2045 net.cpp:86] Creating Layer loss
I0428 20:22:43.056320  2045 net.cpp:408] loss <- ip2
I0428 20:22:43.056325  2045 net.cpp:408] loss <- label
I0428 20:22:43.056331  2045 net.cpp:382] loss -> loss
I0428 20:22:43.056349  2045 layer_factory.hpp:77] Creating layer loss
I0428 20:22:43.056610  2045 net.cpp:124] Setting up loss
I0428 20:22:43.056622  2045 net.cpp:131] Top shape: (1)
I0428 20:22:43.056627  2045 net.cpp:134]     with loss weight 1
I0428 20:22:43.056643  2045 net.cpp:139] Memory required for data: 11475204
I0428 20:22:43.056646  2045 net.cpp:200] loss needs backward computation.
I0428 20:22:43.056650  2045 net.cpp:200] relu2 needs backward computation.
I0428 20:22:43.056654  2045 net.cpp:200] ip2 needs backward computation.
I0428 20:22:43.056658  2045 net.cpp:200] relu1 needs backward computation.
I0428 20:22:43.056661  2045 net.cpp:200] ip1 needs backward computation.
I0428 20:22:43.056676  2045 net.cpp:200] pool1 needs backward computation.
I0428 20:22:43.056680  2045 net.cpp:200] conv1 needs backward computation.
I0428 20:22:43.056684  2045 net.cpp:200] pool0 needs backward computation.
I0428 20:22:43.056689  2045 net.cpp:200] conv0 needs backward computation.
I0428 20:22:43.056692  2045 net.cpp:202] mnist does not need backward computation.
I0428 20:22:43.056695  2045 net.cpp:244] This network produces output loss
I0428 20:22:43.056705  2045 net.cpp:257] Network initialization done.
I0428 20:22:43.057049  2045 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1409.prototxt
I0428 20:22:43.057080  2045 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:22:43.057179  2045 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:22:43.057252  2045 layer_factory.hpp:77] Creating layer mnist
I0428 20:22:43.057304  2045 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:22:43.057318  2045 net.cpp:86] Creating Layer mnist
I0428 20:22:43.057323  2045 net.cpp:382] mnist -> data
I0428 20:22:43.057332  2045 net.cpp:382] mnist -> label
I0428 20:22:43.057428  2045 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:22:43.058626  2045 net.cpp:124] Setting up mnist
I0428 20:22:43.058641  2045 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:22:43.058647  2045 net.cpp:131] Top shape: 100 (100)
I0428 20:22:43.058650  2045 net.cpp:139] Memory required for data: 314000
I0428 20:22:43.058655  2045 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:22:43.058661  2045 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:22:43.058665  2045 net.cpp:408] label_mnist_1_split <- label
I0428 20:22:43.058671  2045 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:22:43.058678  2045 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:22:43.058768  2045 net.cpp:124] Setting up label_mnist_1_split
I0428 20:22:43.058778  2045 net.cpp:131] Top shape: 100 (100)
I0428 20:22:43.058782  2045 net.cpp:131] Top shape: 100 (100)
I0428 20:22:43.058785  2045 net.cpp:139] Memory required for data: 314800
I0428 20:22:43.058789  2045 layer_factory.hpp:77] Creating layer conv0
I0428 20:22:43.058799  2045 net.cpp:86] Creating Layer conv0
I0428 20:22:43.058802  2045 net.cpp:408] conv0 <- data
I0428 20:22:43.058809  2045 net.cpp:382] conv0 -> conv0
I0428 20:22:43.060447  2045 net.cpp:124] Setting up conv0
I0428 20:22:43.060466  2045 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:22:43.060470  2045 net.cpp:139] Memory required for data: 11834800
I0428 20:22:43.060480  2045 layer_factory.hpp:77] Creating layer pool0
I0428 20:22:43.060488  2045 net.cpp:86] Creating Layer pool0
I0428 20:22:43.060492  2045 net.cpp:408] pool0 <- conv0
I0428 20:22:43.060498  2045 net.cpp:382] pool0 -> pool0
I0428 20:22:43.060542  2045 net.cpp:124] Setting up pool0
I0428 20:22:43.060549  2045 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:22:43.060552  2045 net.cpp:139] Memory required for data: 14714800
I0428 20:22:43.060556  2045 layer_factory.hpp:77] Creating layer conv1
I0428 20:22:43.060570  2045 net.cpp:86] Creating Layer conv1
I0428 20:22:43.060575  2045 net.cpp:408] conv1 <- pool0
I0428 20:22:43.060580  2045 net.cpp:382] conv1 -> conv1
I0428 20:22:43.064007  2045 net.cpp:124] Setting up conv1
I0428 20:22:43.064023  2045 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:22:43.064028  2045 net.cpp:139] Memory required for data: 17274800
I0428 20:22:43.064038  2045 layer_factory.hpp:77] Creating layer pool1
I0428 20:22:43.064047  2045 net.cpp:86] Creating Layer pool1
I0428 20:22:43.064052  2045 net.cpp:408] pool1 <- conv1
I0428 20:22:43.064059  2045 net.cpp:382] pool1 -> pool1
I0428 20:22:43.064103  2045 net.cpp:124] Setting up pool1
I0428 20:22:43.064110  2045 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:22:43.064112  2045 net.cpp:139] Memory required for data: 17914800
I0428 20:22:43.064116  2045 layer_factory.hpp:77] Creating layer ip1
I0428 20:22:43.064124  2045 net.cpp:86] Creating Layer ip1
I0428 20:22:43.064128  2045 net.cpp:408] ip1 <- pool1
I0428 20:22:43.064133  2045 net.cpp:382] ip1 -> ip1
I0428 20:22:43.064348  2045 net.cpp:124] Setting up ip1
I0428 20:22:43.064358  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.064362  2045 net.cpp:139] Memory required for data: 17918800
I0428 20:22:43.064369  2045 layer_factory.hpp:77] Creating layer relu1
I0428 20:22:43.064375  2045 net.cpp:86] Creating Layer relu1
I0428 20:22:43.064378  2045 net.cpp:408] relu1 <- ip1
I0428 20:22:43.064385  2045 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:22:43.064571  2045 net.cpp:124] Setting up relu1
I0428 20:22:43.064581  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.064585  2045 net.cpp:139] Memory required for data: 17922800
I0428 20:22:43.064589  2045 layer_factory.hpp:77] Creating layer ip2
I0428 20:22:43.064596  2045 net.cpp:86] Creating Layer ip2
I0428 20:22:43.064599  2045 net.cpp:408] ip2 <- ip1
I0428 20:22:43.064606  2045 net.cpp:382] ip2 -> ip2
I0428 20:22:43.064720  2045 net.cpp:124] Setting up ip2
I0428 20:22:43.064728  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.064733  2045 net.cpp:139] Memory required for data: 17926800
I0428 20:22:43.064738  2045 layer_factory.hpp:77] Creating layer relu2
I0428 20:22:43.064744  2045 net.cpp:86] Creating Layer relu2
I0428 20:22:43.064749  2045 net.cpp:408] relu2 <- ip2
I0428 20:22:43.064754  2045 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:22:43.064940  2045 net.cpp:124] Setting up relu2
I0428 20:22:43.064950  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.064954  2045 net.cpp:139] Memory required for data: 17930800
I0428 20:22:43.064957  2045 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:22:43.064963  2045 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:22:43.064968  2045 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:22:43.064973  2045 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:22:43.064991  2045 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:22:43.065033  2045 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:22:43.065042  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.065045  2045 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:22:43.065049  2045 net.cpp:139] Memory required for data: 17938800
I0428 20:22:43.065052  2045 layer_factory.hpp:77] Creating layer accuracy
I0428 20:22:43.065058  2045 net.cpp:86] Creating Layer accuracy
I0428 20:22:43.065062  2045 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:22:43.065066  2045 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:22:43.065071  2045 net.cpp:382] accuracy -> accuracy
I0428 20:22:43.065079  2045 net.cpp:124] Setting up accuracy
I0428 20:22:43.065083  2045 net.cpp:131] Top shape: (1)
I0428 20:22:43.065086  2045 net.cpp:139] Memory required for data: 17938804
I0428 20:22:43.065089  2045 layer_factory.hpp:77] Creating layer loss
I0428 20:22:43.065096  2045 net.cpp:86] Creating Layer loss
I0428 20:22:43.065099  2045 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:22:43.065104  2045 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:22:43.065109  2045 net.cpp:382] loss -> loss
I0428 20:22:43.065114  2045 layer_factory.hpp:77] Creating layer loss
I0428 20:22:43.065384  2045 net.cpp:124] Setting up loss
I0428 20:22:43.065395  2045 net.cpp:131] Top shape: (1)
I0428 20:22:43.065399  2045 net.cpp:134]     with loss weight 1
I0428 20:22:43.065407  2045 net.cpp:139] Memory required for data: 17938808
I0428 20:22:43.065410  2045 net.cpp:200] loss needs backward computation.
I0428 20:22:43.065414  2045 net.cpp:202] accuracy does not need backward computation.
I0428 20:22:43.065419  2045 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:22:43.065423  2045 net.cpp:200] relu2 needs backward computation.
I0428 20:22:43.065426  2045 net.cpp:200] ip2 needs backward computation.
I0428 20:22:43.065429  2045 net.cpp:200] relu1 needs backward computation.
I0428 20:22:43.065433  2045 net.cpp:200] ip1 needs backward computation.
I0428 20:22:43.065436  2045 net.cpp:200] pool1 needs backward computation.
I0428 20:22:43.065440  2045 net.cpp:200] conv1 needs backward computation.
I0428 20:22:43.065444  2045 net.cpp:200] pool0 needs backward computation.
I0428 20:22:43.065448  2045 net.cpp:200] conv0 needs backward computation.
I0428 20:22:43.065452  2045 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:22:43.065456  2045 net.cpp:202] mnist does not need backward computation.
I0428 20:22:43.065459  2045 net.cpp:244] This network produces output accuracy
I0428 20:22:43.065464  2045 net.cpp:244] This network produces output loss
I0428 20:22:43.065474  2045 net.cpp:257] Network initialization done.
I0428 20:22:43.065516  2045 solver.cpp:56] Solver scaffolding done.
I0428 20:22:43.065817  2045 caffe.cpp:248] Starting Optimization
I0428 20:22:43.065824  2045 solver.cpp:273] Solving LeNet
I0428 20:22:43.065827  2045 solver.cpp:274] Learning Rate Policy: inv
I0428 20:22:43.065989  2045 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:22:43.084147  2045 blocking_queue.cpp:49] Waiting for data
I0428 20:22:43.158131  2064 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:43.159104  2045 solver.cpp:398]     Test net output #0: accuracy = 0.1187
I0428 20:22:43.159140  2045 solver.cpp:398]     Test net output #1: loss = 2.30137 (* 1 = 2.30137 loss)
I0428 20:22:43.165974  2045 solver.cpp:219] Iteration 0 (0 iter/s, 0.100121s/100 iters), loss = 2.2971
I0428 20:22:43.166013  2045 solver.cpp:238]     Train net output #0: loss = 2.2971 (* 1 = 2.2971 loss)
I0428 20:22:43.166025  2045 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:22:43.375617  2045 solver.cpp:219] Iteration 100 (477.098 iter/s, 0.209601s/100 iters), loss = 0.382971
I0428 20:22:43.375661  2045 solver.cpp:238]     Train net output #0: loss = 0.382971 (* 1 = 0.382971 loss)
I0428 20:22:43.375672  2045 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:22:43.594267  2045 solver.cpp:219] Iteration 200 (457.473 iter/s, 0.218592s/100 iters), loss = 0.171983
I0428 20:22:43.594300  2045 solver.cpp:238]     Train net output #0: loss = 0.171983 (* 1 = 0.171983 loss)
I0428 20:22:43.594307  2045 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:22:43.807819  2045 solver.cpp:219] Iteration 300 (468.382 iter/s, 0.213501s/100 iters), loss = 0.199628
I0428 20:22:43.807864  2045 solver.cpp:238]     Train net output #0: loss = 0.199628 (* 1 = 0.199628 loss)
I0428 20:22:43.807875  2045 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:22:44.027747  2045 solver.cpp:219] Iteration 400 (454.818 iter/s, 0.219868s/100 iters), loss = 0.141232
I0428 20:22:44.027783  2045 solver.cpp:238]     Train net output #0: loss = 0.141231 (* 1 = 0.141231 loss)
I0428 20:22:44.027791  2045 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:22:44.244292  2045 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:22:44.331377  2064 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:44.332706  2045 solver.cpp:398]     Test net output #0: accuracy = 0.9679
I0428 20:22:44.332734  2045 solver.cpp:398]     Test net output #1: loss = 0.109902 (* 1 = 0.109902 loss)
I0428 20:22:44.334893  2045 solver.cpp:219] Iteration 500 (325.638 iter/s, 0.307089s/100 iters), loss = 0.15037
I0428 20:22:44.334923  2045 solver.cpp:238]     Train net output #0: loss = 0.15037 (* 1 = 0.15037 loss)
I0428 20:22:44.334930  2045 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:22:44.551573  2045 solver.cpp:219] Iteration 600 (461.616 iter/s, 0.21663s/100 iters), loss = 0.089124
I0428 20:22:44.551615  2045 solver.cpp:238]     Train net output #0: loss = 0.0891238 (* 1 = 0.0891238 loss)
I0428 20:22:44.551625  2045 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:22:44.770364  2045 solver.cpp:219] Iteration 700 (457.186 iter/s, 0.218729s/100 iters), loss = 0.114068
I0428 20:22:44.770406  2045 solver.cpp:238]     Train net output #0: loss = 0.114067 (* 1 = 0.114067 loss)
I0428 20:22:44.770414  2045 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:22:44.981716  2045 solver.cpp:219] Iteration 800 (473.283 iter/s, 0.21129s/100 iters), loss = 0.249148
I0428 20:22:44.981760  2045 solver.cpp:238]     Train net output #0: loss = 0.249148 (* 1 = 0.249148 loss)
I0428 20:22:44.981768  2045 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:22:45.200232  2045 solver.cpp:219] Iteration 900 (457.76 iter/s, 0.218455s/100 iters), loss = 0.153981
I0428 20:22:45.200278  2045 solver.cpp:238]     Train net output #0: loss = 0.153981 (* 1 = 0.153981 loss)
I0428 20:22:45.200290  2045 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:22:45.274282  2063 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:45.415019  2045 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:22:45.419050  2045 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:22:45.420744  2045 solver.cpp:311] Iteration 1000, loss = 0.111291
I0428 20:22:45.420761  2045 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:22:45.506626  2064 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:22:45.507705  2045 solver.cpp:398]     Test net output #0: accuracy = 0.9759
I0428 20:22:45.507733  2045 solver.cpp:398]     Test net output #1: loss = 0.0821299 (* 1 = 0.0821299 loss)
I0428 20:22:45.507755  2045 solver.cpp:316] Optimization Done.
I0428 20:22:45.507758  2045 caffe.cpp:259] Optimization Done.
