I0428 20:30:13.072288  3691 caffe.cpp:218] Using GPUs 0
I0428 20:30:13.113876  3691 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:30:13.650080  3691 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1535.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:30:13.650233  3691 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1535.prototxt
I0428 20:30:13.650655  3691 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:30:13.650674  3691 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:30:13.650776  3691 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:13.650856  3691 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:13.650954  3691 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:30:13.650976  3691 net.cpp:86] Creating Layer mnist
I0428 20:30:13.650985  3691 net.cpp:382] mnist -> data
I0428 20:30:13.651007  3691 net.cpp:382] mnist -> label
I0428 20:30:13.652099  3691 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:30:13.654570  3691 net.cpp:124] Setting up mnist
I0428 20:30:13.654588  3691 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:30:13.654595  3691 net.cpp:131] Top shape: 64 (64)
I0428 20:30:13.654599  3691 net.cpp:139] Memory required for data: 200960
I0428 20:30:13.654606  3691 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:13.654624  3691 net.cpp:86] Creating Layer conv0
I0428 20:30:13.654645  3691 net.cpp:408] conv0 <- data
I0428 20:30:13.654659  3691 net.cpp:382] conv0 -> conv0
I0428 20:30:13.944631  3691 net.cpp:124] Setting up conv0
I0428 20:30:13.944665  3691 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:30:13.944670  3691 net.cpp:139] Memory required for data: 14946560
I0428 20:30:13.944689  3691 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:13.944705  3691 net.cpp:86] Creating Layer pool0
I0428 20:30:13.944710  3691 net.cpp:408] pool0 <- conv0
I0428 20:30:13.944715  3691 net.cpp:382] pool0 -> pool0
I0428 20:30:13.944777  3691 net.cpp:124] Setting up pool0
I0428 20:30:13.944793  3691 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:30:13.944797  3691 net.cpp:139] Memory required for data: 18632960
I0428 20:30:13.944802  3691 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:13.944821  3691 net.cpp:86] Creating Layer conv1
I0428 20:30:13.944825  3691 net.cpp:408] conv1 <- pool0
I0428 20:30:13.944833  3691 net.cpp:382] conv1 -> conv1
I0428 20:30:13.947145  3691 net.cpp:124] Setting up conv1
I0428 20:30:13.947162  3691 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:30:13.947167  3691 net.cpp:139] Memory required for data: 18796800
I0428 20:30:13.947178  3691 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:13.947187  3691 net.cpp:86] Creating Layer pool1
I0428 20:30:13.947191  3691 net.cpp:408] pool1 <- conv1
I0428 20:30:13.947197  3691 net.cpp:382] pool1 -> pool1
I0428 20:30:13.947242  3691 net.cpp:124] Setting up pool1
I0428 20:30:13.947248  3691 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:30:13.947252  3691 net.cpp:139] Memory required for data: 18837760
I0428 20:30:13.947255  3691 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:13.947268  3691 net.cpp:86] Creating Layer ip1
I0428 20:30:13.947273  3691 net.cpp:408] ip1 <- pool1
I0428 20:30:13.947278  3691 net.cpp:382] ip1 -> ip1
I0428 20:30:13.947407  3691 net.cpp:124] Setting up ip1
I0428 20:30:13.947415  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.947419  3691 net.cpp:139] Memory required for data: 18840320
I0428 20:30:13.947427  3691 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:13.947434  3691 net.cpp:86] Creating Layer relu1
I0428 20:30:13.947438  3691 net.cpp:408] relu1 <- ip1
I0428 20:30:13.947443  3691 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:13.947640  3691 net.cpp:124] Setting up relu1
I0428 20:30:13.947651  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.947654  3691 net.cpp:139] Memory required for data: 18842880
I0428 20:30:13.947659  3691 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:13.947666  3691 net.cpp:86] Creating Layer ip2
I0428 20:30:13.947670  3691 net.cpp:408] ip2 <- ip1
I0428 20:30:13.947675  3691 net.cpp:382] ip2 -> ip2
I0428 20:30:13.947787  3691 net.cpp:124] Setting up ip2
I0428 20:30:13.947795  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.947798  3691 net.cpp:139] Memory required for data: 18845440
I0428 20:30:13.947805  3691 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:13.947813  3691 net.cpp:86] Creating Layer relu2
I0428 20:30:13.947816  3691 net.cpp:408] relu2 <- ip2
I0428 20:30:13.947820  3691 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:13.948669  3691 net.cpp:124] Setting up relu2
I0428 20:30:13.948684  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.948688  3691 net.cpp:139] Memory required for data: 18848000
I0428 20:30:13.948693  3691 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:13.948701  3691 net.cpp:86] Creating Layer ip3
I0428 20:30:13.948705  3691 net.cpp:408] ip3 <- ip2
I0428 20:30:13.948711  3691 net.cpp:382] ip3 -> ip3
I0428 20:30:13.948837  3691 net.cpp:124] Setting up ip3
I0428 20:30:13.948848  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.948851  3691 net.cpp:139] Memory required for data: 18850560
I0428 20:30:13.948860  3691 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:13.948868  3691 net.cpp:86] Creating Layer relu3
I0428 20:30:13.948870  3691 net.cpp:408] relu3 <- ip3
I0428 20:30:13.948875  3691 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:13.949077  3691 net.cpp:124] Setting up relu3
I0428 20:30:13.949089  3691 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:13.949092  3691 net.cpp:139] Memory required for data: 18853120
I0428 20:30:13.949096  3691 layer_factory.hpp:77] Creating layer loss
I0428 20:30:13.949105  3691 net.cpp:86] Creating Layer loss
I0428 20:30:13.949108  3691 net.cpp:408] loss <- ip3
I0428 20:30:13.949112  3691 net.cpp:408] loss <- label
I0428 20:30:13.949120  3691 net.cpp:382] loss -> loss
I0428 20:30:13.949139  3691 layer_factory.hpp:77] Creating layer loss
I0428 20:30:13.949415  3691 net.cpp:124] Setting up loss
I0428 20:30:13.949425  3691 net.cpp:131] Top shape: (1)
I0428 20:30:13.949429  3691 net.cpp:134]     with loss weight 1
I0428 20:30:13.949445  3691 net.cpp:139] Memory required for data: 18853124
I0428 20:30:13.949450  3691 net.cpp:200] loss needs backward computation.
I0428 20:30:13.949453  3691 net.cpp:200] relu3 needs backward computation.
I0428 20:30:13.949457  3691 net.cpp:200] ip3 needs backward computation.
I0428 20:30:13.949460  3691 net.cpp:200] relu2 needs backward computation.
I0428 20:30:13.949463  3691 net.cpp:200] ip2 needs backward computation.
I0428 20:30:13.949467  3691 net.cpp:200] relu1 needs backward computation.
I0428 20:30:13.949470  3691 net.cpp:200] ip1 needs backward computation.
I0428 20:30:13.949473  3691 net.cpp:200] pool1 needs backward computation.
I0428 20:30:13.949477  3691 net.cpp:200] conv1 needs backward computation.
I0428 20:30:13.949481  3691 net.cpp:200] pool0 needs backward computation.
I0428 20:30:13.949484  3691 net.cpp:200] conv0 needs backward computation.
I0428 20:30:13.949488  3691 net.cpp:202] mnist does not need backward computation.
I0428 20:30:13.949491  3691 net.cpp:244] This network produces output loss
I0428 20:30:13.949503  3691 net.cpp:257] Network initialization done.
I0428 20:30:13.949887  3691 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1535.prototxt
I0428 20:30:13.949920  3691 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:30:13.950033  3691 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:13.950134  3691 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:13.950186  3691 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:30:13.950201  3691 net.cpp:86] Creating Layer mnist
I0428 20:30:13.950207  3691 net.cpp:382] mnist -> data
I0428 20:30:13.950217  3691 net.cpp:382] mnist -> label
I0428 20:30:13.950325  3691 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:30:13.952517  3691 net.cpp:124] Setting up mnist
I0428 20:30:13.952533  3691 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:30:13.952539  3691 net.cpp:131] Top shape: 100 (100)
I0428 20:30:13.952543  3691 net.cpp:139] Memory required for data: 314000
I0428 20:30:13.952546  3691 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:30:13.952560  3691 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:30:13.952564  3691 net.cpp:408] label_mnist_1_split <- label
I0428 20:30:13.952602  3691 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:30:13.952612  3691 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:30:13.952729  3691 net.cpp:124] Setting up label_mnist_1_split
I0428 20:30:13.952739  3691 net.cpp:131] Top shape: 100 (100)
I0428 20:30:13.952742  3691 net.cpp:131] Top shape: 100 (100)
I0428 20:30:13.952745  3691 net.cpp:139] Memory required for data: 314800
I0428 20:30:13.952749  3691 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:13.952760  3691 net.cpp:86] Creating Layer conv0
I0428 20:30:13.952764  3691 net.cpp:408] conv0 <- data
I0428 20:30:13.952771  3691 net.cpp:382] conv0 -> conv0
I0428 20:30:13.954639  3691 net.cpp:124] Setting up conv0
I0428 20:30:13.954660  3691 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:30:13.954664  3691 net.cpp:139] Memory required for data: 23354800
I0428 20:30:13.954675  3691 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:13.954684  3691 net.cpp:86] Creating Layer pool0
I0428 20:30:13.954687  3691 net.cpp:408] pool0 <- conv0
I0428 20:30:13.954694  3691 net.cpp:382] pool0 -> pool0
I0428 20:30:13.954737  3691 net.cpp:124] Setting up pool0
I0428 20:30:13.954744  3691 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:30:13.954747  3691 net.cpp:139] Memory required for data: 29114800
I0428 20:30:13.954751  3691 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:13.954763  3691 net.cpp:86] Creating Layer conv1
I0428 20:30:13.954767  3691 net.cpp:408] conv1 <- pool0
I0428 20:30:13.954773  3691 net.cpp:382] conv1 -> conv1
I0428 20:30:13.956782  3691 net.cpp:124] Setting up conv1
I0428 20:30:13.956799  3691 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:30:13.956804  3691 net.cpp:139] Memory required for data: 29370800
I0428 20:30:13.956825  3691 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:13.956833  3691 net.cpp:86] Creating Layer pool1
I0428 20:30:13.956837  3691 net.cpp:408] pool1 <- conv1
I0428 20:30:13.956843  3691 net.cpp:382] pool1 -> pool1
I0428 20:30:13.956890  3691 net.cpp:124] Setting up pool1
I0428 20:30:13.956897  3691 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:30:13.956902  3691 net.cpp:139] Memory required for data: 29434800
I0428 20:30:13.956904  3691 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:13.956912  3691 net.cpp:86] Creating Layer ip1
I0428 20:30:13.956915  3691 net.cpp:408] ip1 <- pool1
I0428 20:30:13.956921  3691 net.cpp:382] ip1 -> ip1
I0428 20:30:13.957051  3691 net.cpp:124] Setting up ip1
I0428 20:30:13.957062  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.957077  3691 net.cpp:139] Memory required for data: 29438800
I0428 20:30:13.957087  3691 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:13.957094  3691 net.cpp:86] Creating Layer relu1
I0428 20:30:13.957098  3691 net.cpp:408] relu1 <- ip1
I0428 20:30:13.957113  3691 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:13.957310  3691 net.cpp:124] Setting up relu1
I0428 20:30:13.957330  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.957334  3691 net.cpp:139] Memory required for data: 29442800
I0428 20:30:13.957339  3691 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:13.957347  3691 net.cpp:86] Creating Layer ip2
I0428 20:30:13.957351  3691 net.cpp:408] ip2 <- ip1
I0428 20:30:13.957357  3691 net.cpp:382] ip2 -> ip2
I0428 20:30:13.957473  3691 net.cpp:124] Setting up ip2
I0428 20:30:13.957481  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.957485  3691 net.cpp:139] Memory required for data: 29446800
I0428 20:30:13.957492  3691 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:13.957499  3691 net.cpp:86] Creating Layer relu2
I0428 20:30:13.957504  3691 net.cpp:408] relu2 <- ip2
I0428 20:30:13.957509  3691 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:13.957715  3691 net.cpp:124] Setting up relu2
I0428 20:30:13.957726  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.957728  3691 net.cpp:139] Memory required for data: 29450800
I0428 20:30:13.957732  3691 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:13.957741  3691 net.cpp:86] Creating Layer ip3
I0428 20:30:13.957743  3691 net.cpp:408] ip3 <- ip2
I0428 20:30:13.957751  3691 net.cpp:382] ip3 -> ip3
I0428 20:30:13.957880  3691 net.cpp:124] Setting up ip3
I0428 20:30:13.957890  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.957893  3691 net.cpp:139] Memory required for data: 29454800
I0428 20:30:13.957902  3691 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:13.957907  3691 net.cpp:86] Creating Layer relu3
I0428 20:30:13.957911  3691 net.cpp:408] relu3 <- ip3
I0428 20:30:13.957916  3691 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:13.958844  3691 net.cpp:124] Setting up relu3
I0428 20:30:13.958861  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.958865  3691 net.cpp:139] Memory required for data: 29458800
I0428 20:30:13.958869  3691 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:30:13.958876  3691 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:30:13.958880  3691 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:30:13.958887  3691 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:30:13.958894  3691 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:30:13.958940  3691 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:30:13.958956  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.958961  3691 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:13.958964  3691 net.cpp:139] Memory required for data: 29466800
I0428 20:30:13.958967  3691 layer_factory.hpp:77] Creating layer accuracy
I0428 20:30:13.958983  3691 net.cpp:86] Creating Layer accuracy
I0428 20:30:13.958987  3691 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:30:13.958992  3691 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:30:13.958997  3691 net.cpp:382] accuracy -> accuracy
I0428 20:30:13.959005  3691 net.cpp:124] Setting up accuracy
I0428 20:30:13.959010  3691 net.cpp:131] Top shape: (1)
I0428 20:30:13.959013  3691 net.cpp:139] Memory required for data: 29466804
I0428 20:30:13.959022  3691 layer_factory.hpp:77] Creating layer loss
I0428 20:30:13.959029  3691 net.cpp:86] Creating Layer loss
I0428 20:30:13.959033  3691 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:30:13.959038  3691 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:30:13.959043  3691 net.cpp:382] loss -> loss
I0428 20:30:13.959050  3691 layer_factory.hpp:77] Creating layer loss
I0428 20:30:13.959341  3691 net.cpp:124] Setting up loss
I0428 20:30:13.959352  3691 net.cpp:131] Top shape: (1)
I0428 20:30:13.959355  3691 net.cpp:134]     with loss weight 1
I0428 20:30:13.959374  3691 net.cpp:139] Memory required for data: 29466808
I0428 20:30:13.959379  3691 net.cpp:200] loss needs backward computation.
I0428 20:30:13.959384  3691 net.cpp:202] accuracy does not need backward computation.
I0428 20:30:13.959388  3691 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:30:13.959393  3691 net.cpp:200] relu3 needs backward computation.
I0428 20:30:13.959395  3691 net.cpp:200] ip3 needs backward computation.
I0428 20:30:13.959399  3691 net.cpp:200] relu2 needs backward computation.
I0428 20:30:13.959403  3691 net.cpp:200] ip2 needs backward computation.
I0428 20:30:13.959406  3691 net.cpp:200] relu1 needs backward computation.
I0428 20:30:13.959409  3691 net.cpp:200] ip1 needs backward computation.
I0428 20:30:13.959414  3691 net.cpp:200] pool1 needs backward computation.
I0428 20:30:13.959416  3691 net.cpp:200] conv1 needs backward computation.
I0428 20:30:13.959429  3691 net.cpp:200] pool0 needs backward computation.
I0428 20:30:13.959434  3691 net.cpp:200] conv0 needs backward computation.
I0428 20:30:13.959437  3691 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:30:13.959442  3691 net.cpp:202] mnist does not need backward computation.
I0428 20:30:13.959446  3691 net.cpp:244] This network produces output accuracy
I0428 20:30:13.959450  3691 net.cpp:244] This network produces output loss
I0428 20:30:13.959465  3691 net.cpp:257] Network initialization done.
I0428 20:30:13.959522  3691 solver.cpp:56] Solver scaffolding done.
I0428 20:30:13.959945  3691 caffe.cpp:248] Starting Optimization
I0428 20:30:13.959952  3691 solver.cpp:273] Solving LeNet
I0428 20:30:13.959956  3691 solver.cpp:274] Learning Rate Policy: inv
I0428 20:30:13.960276  3691 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:30:14.060412  3698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:14.063177  3691 solver.cpp:398]     Test net output #0: accuracy = 0.0863
I0428 20:30:14.063204  3691 solver.cpp:398]     Test net output #1: loss = 2.31132 (* 1 = 2.31132 loss)
I0428 20:30:14.068075  3691 solver.cpp:219] Iteration 0 (0 iter/s, 0.108074s/100 iters), loss = 2.31508
I0428 20:30:14.068106  3691 solver.cpp:238]     Train net output #0: loss = 2.31508 (* 1 = 2.31508 loss)
I0428 20:30:14.068125  3691 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:30:14.279520  3691 solver.cpp:219] Iteration 100 (473.053 iter/s, 0.211393s/100 iters), loss = 0.609522
I0428 20:30:14.279559  3691 solver.cpp:238]     Train net output #0: loss = 0.609522 (* 1 = 0.609522 loss)
I0428 20:30:14.279568  3691 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:30:14.490258  3691 solver.cpp:219] Iteration 200 (474.645 iter/s, 0.210684s/100 iters), loss = 0.272366
I0428 20:30:14.490296  3691 solver.cpp:238]     Train net output #0: loss = 0.272366 (* 1 = 0.272366 loss)
I0428 20:30:14.490306  3691 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:30:14.703115  3691 solver.cpp:219] Iteration 300 (469.919 iter/s, 0.212803s/100 iters), loss = 0.230237
I0428 20:30:14.703151  3691 solver.cpp:238]     Train net output #0: loss = 0.230237 (* 1 = 0.230237 loss)
I0428 20:30:14.703161  3691 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:30:14.909420  3691 solver.cpp:219] Iteration 400 (484.856 iter/s, 0.206247s/100 iters), loss = 0.190606
I0428 20:30:14.909477  3691 solver.cpp:238]     Train net output #0: loss = 0.190606 (* 1 = 0.190606 loss)
I0428 20:30:14.909492  3691 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:30:15.136380  3691 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:30:15.244931  3698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:15.247593  3691 solver.cpp:398]     Test net output #0: accuracy = 0.9517
I0428 20:30:15.247627  3691 solver.cpp:398]     Test net output #1: loss = 0.15981 (* 1 = 0.15981 loss)
I0428 20:30:15.249624  3691 solver.cpp:219] Iteration 500 (294.005 iter/s, 0.340131s/100 iters), loss = 0.0768291
I0428 20:30:15.249660  3691 solver.cpp:238]     Train net output #0: loss = 0.0768291 (* 1 = 0.0768291 loss)
I0428 20:30:15.249696  3691 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:30:15.465613  3691 solver.cpp:219] Iteration 600 (463.098 iter/s, 0.215937s/100 iters), loss = 0.094066
I0428 20:30:15.465675  3691 solver.cpp:238]     Train net output #0: loss = 0.094066 (* 1 = 0.094066 loss)
I0428 20:30:15.465697  3691 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:30:15.688892  3691 solver.cpp:219] Iteration 700 (448.022 iter/s, 0.223203s/100 iters), loss = 0.257441
I0428 20:30:15.688958  3691 solver.cpp:238]     Train net output #0: loss = 0.257441 (* 1 = 0.257441 loss)
I0428 20:30:15.688978  3691 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:30:15.917661  3691 solver.cpp:219] Iteration 800 (437.27 iter/s, 0.228692s/100 iters), loss = 0.214636
I0428 20:30:15.917719  3691 solver.cpp:238]     Train net output #0: loss = 0.214636 (* 1 = 0.214636 loss)
I0428 20:30:15.917739  3691 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:30:16.144645  3691 solver.cpp:219] Iteration 900 (440.693 iter/s, 0.226915s/100 iters), loss = 0.254868
I0428 20:30:16.144698  3691 solver.cpp:238]     Train net output #0: loss = 0.254868 (* 1 = 0.254868 loss)
I0428 20:30:16.144716  3691 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:30:16.218602  3697 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:16.364078  3691 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:30:16.366215  3691 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:30:16.367528  3691 solver.cpp:311] Iteration 1000, loss = 0.109903
I0428 20:30:16.367557  3691 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:30:16.467840  3698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:16.470203  3691 solver.cpp:398]     Test net output #0: accuracy = 0.9693
I0428 20:30:16.470232  3691 solver.cpp:398]     Test net output #1: loss = 0.0953175 (* 1 = 0.0953175 loss)
I0428 20:30:16.470248  3691 solver.cpp:316] Optimization Done.
I0428 20:30:16.470258  3691 caffe.cpp:259] Optimization Done.
