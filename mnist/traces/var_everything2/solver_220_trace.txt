I0428 19:35:12.690485 23465 caffe.cpp:218] Using GPUs 0
I0428 19:35:12.729732 23465 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:35:13.246282 23465 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test220.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:35:13.246454 23465 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test220.prototxt
I0428 19:35:13.246831 23465 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:35:13.246855 23465 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:35:13.246958 23465 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:13.247067 23465 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:13.247198 23465 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:35:13.247231 23465 net.cpp:86] Creating Layer mnist
I0428 19:35:13.247246 23465 net.cpp:382] mnist -> data
I0428 19:35:13.247277 23465 net.cpp:382] mnist -> label
I0428 19:35:13.248502 23465 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:35:13.250988 23465 net.cpp:124] Setting up mnist
I0428 19:35:13.251009 23465 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:35:13.251019 23465 net.cpp:131] Top shape: 64 (64)
I0428 19:35:13.251025 23465 net.cpp:139] Memory required for data: 200960
I0428 19:35:13.251036 23465 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:13.251061 23465 net.cpp:86] Creating Layer conv0
I0428 19:35:13.251072 23465 net.cpp:408] conv0 <- data
I0428 19:35:13.251092 23465 net.cpp:382] conv0 -> conv0
I0428 19:35:13.538658 23465 net.cpp:124] Setting up conv0
I0428 19:35:13.538689 23465 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:35:13.538696 23465 net.cpp:139] Memory required for data: 7573760
I0428 19:35:13.538717 23465 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:13.538734 23465 net.cpp:86] Creating Layer pool0
I0428 19:35:13.538758 23465 net.cpp:408] pool0 <- conv0
I0428 19:35:13.538767 23465 net.cpp:382] pool0 -> pool0
I0428 19:35:13.538825 23465 net.cpp:124] Setting up pool0
I0428 19:35:13.538833 23465 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:35:13.538838 23465 net.cpp:139] Memory required for data: 9416960
I0428 19:35:13.538844 23465 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:13.538856 23465 net.cpp:86] Creating Layer ip1
I0428 19:35:13.538866 23465 net.cpp:408] ip1 <- pool0
I0428 19:35:13.538874 23465 net.cpp:382] ip1 -> ip1
I0428 19:35:13.540794 23465 net.cpp:124] Setting up ip1
I0428 19:35:13.540817 23465 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:13.540822 23465 net.cpp:139] Memory required for data: 9423360
I0428 19:35:13.540853 23465 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:13.540879 23465 net.cpp:86] Creating Layer relu1
I0428 19:35:13.540885 23465 net.cpp:408] relu1 <- ip1
I0428 19:35:13.540908 23465 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:13.541086 23465 net.cpp:124] Setting up relu1
I0428 19:35:13.541097 23465 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:13.541102 23465 net.cpp:139] Memory required for data: 9429760
I0428 19:35:13.541107 23465 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:13.541118 23465 net.cpp:86] Creating Layer ip2
I0428 19:35:13.541124 23465 net.cpp:408] ip2 <- ip1
I0428 19:35:13.541132 23465 net.cpp:382] ip2 -> ip2
I0428 19:35:13.541249 23465 net.cpp:124] Setting up ip2
I0428 19:35:13.541257 23465 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:13.541263 23465 net.cpp:139] Memory required for data: 9436160
I0428 19:35:13.541275 23465 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:13.541286 23465 net.cpp:86] Creating Layer relu2
I0428 19:35:13.541291 23465 net.cpp:408] relu2 <- ip2
I0428 19:35:13.541299 23465 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:13.542027 23465 net.cpp:124] Setting up relu2
I0428 19:35:13.542042 23465 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:13.542047 23465 net.cpp:139] Memory required for data: 9442560
I0428 19:35:13.542053 23465 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:13.542063 23465 net.cpp:86] Creating Layer ip3
I0428 19:35:13.542069 23465 net.cpp:408] ip3 <- ip2
I0428 19:35:13.542078 23465 net.cpp:382] ip3 -> ip3
I0428 19:35:13.542181 23465 net.cpp:124] Setting up ip3
I0428 19:35:13.542191 23465 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:13.542196 23465 net.cpp:139] Memory required for data: 9445120
I0428 19:35:13.542204 23465 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:13.542215 23465 net.cpp:86] Creating Layer relu3
I0428 19:35:13.542222 23465 net.cpp:408] relu3 <- ip3
I0428 19:35:13.542229 23465 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:13.542384 23465 net.cpp:124] Setting up relu3
I0428 19:35:13.542393 23465 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:13.542398 23465 net.cpp:139] Memory required for data: 9447680
I0428 19:35:13.542403 23465 layer_factory.hpp:77] Creating layer loss
I0428 19:35:13.542412 23465 net.cpp:86] Creating Layer loss
I0428 19:35:13.542418 23465 net.cpp:408] loss <- ip3
I0428 19:35:13.542425 23465 net.cpp:408] loss <- label
I0428 19:35:13.542433 23465 net.cpp:382] loss -> loss
I0428 19:35:13.542459 23465 layer_factory.hpp:77] Creating layer loss
I0428 19:35:13.542686 23465 net.cpp:124] Setting up loss
I0428 19:35:13.542697 23465 net.cpp:131] Top shape: (1)
I0428 19:35:13.542702 23465 net.cpp:134]     with loss weight 1
I0428 19:35:13.542722 23465 net.cpp:139] Memory required for data: 9447684
I0428 19:35:13.542728 23465 net.cpp:200] loss needs backward computation.
I0428 19:35:13.542734 23465 net.cpp:200] relu3 needs backward computation.
I0428 19:35:13.542739 23465 net.cpp:200] ip3 needs backward computation.
I0428 19:35:13.542744 23465 net.cpp:200] relu2 needs backward computation.
I0428 19:35:13.542749 23465 net.cpp:200] ip2 needs backward computation.
I0428 19:35:13.542754 23465 net.cpp:200] relu1 needs backward computation.
I0428 19:35:13.542759 23465 net.cpp:200] ip1 needs backward computation.
I0428 19:35:13.542775 23465 net.cpp:200] pool0 needs backward computation.
I0428 19:35:13.542780 23465 net.cpp:200] conv0 needs backward computation.
I0428 19:35:13.542786 23465 net.cpp:202] mnist does not need backward computation.
I0428 19:35:13.542791 23465 net.cpp:244] This network produces output loss
I0428 19:35:13.542804 23465 net.cpp:257] Network initialization done.
I0428 19:35:13.543140 23465 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test220.prototxt
I0428 19:35:13.543176 23465 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:35:13.543272 23465 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:13.543382 23465 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:13.543442 23465 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:35:13.543465 23465 net.cpp:86] Creating Layer mnist
I0428 19:35:13.543474 23465 net.cpp:382] mnist -> data
I0428 19:35:13.543488 23465 net.cpp:382] mnist -> label
I0428 19:35:13.543614 23465 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:35:13.544855 23465 net.cpp:124] Setting up mnist
I0428 19:35:13.544872 23465 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:35:13.544880 23465 net.cpp:131] Top shape: 100 (100)
I0428 19:35:13.544886 23465 net.cpp:139] Memory required for data: 314000
I0428 19:35:13.544908 23465 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:35:13.544922 23465 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:35:13.544941 23465 net.cpp:408] label_mnist_1_split <- label
I0428 19:35:13.544950 23465 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:35:13.544960 23465 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:35:13.545053 23465 net.cpp:124] Setting up label_mnist_1_split
I0428 19:35:13.545061 23465 net.cpp:131] Top shape: 100 (100)
I0428 19:35:13.545068 23465 net.cpp:131] Top shape: 100 (100)
I0428 19:35:13.545073 23465 net.cpp:139] Memory required for data: 314800
I0428 19:35:13.545091 23465 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:13.545106 23465 net.cpp:86] Creating Layer conv0
I0428 19:35:13.545114 23465 net.cpp:408] conv0 <- data
I0428 19:35:13.545122 23465 net.cpp:382] conv0 -> conv0
I0428 19:35:13.546658 23465 net.cpp:124] Setting up conv0
I0428 19:35:13.546674 23465 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:35:13.546679 23465 net.cpp:139] Memory required for data: 11834800
I0428 19:35:13.546694 23465 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:13.546705 23465 net.cpp:86] Creating Layer pool0
I0428 19:35:13.546710 23465 net.cpp:408] pool0 <- conv0
I0428 19:35:13.546720 23465 net.cpp:382] pool0 -> pool0
I0428 19:35:13.546762 23465 net.cpp:124] Setting up pool0
I0428 19:35:13.546771 23465 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:35:13.546777 23465 net.cpp:139] Memory required for data: 14714800
I0428 19:35:13.546782 23465 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:13.546792 23465 net.cpp:86] Creating Layer ip1
I0428 19:35:13.546798 23465 net.cpp:408] ip1 <- pool0
I0428 19:35:13.546818 23465 net.cpp:382] ip1 -> ip1
I0428 19:35:13.548905 23465 net.cpp:124] Setting up ip1
I0428 19:35:13.548921 23465 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:13.548928 23465 net.cpp:139] Memory required for data: 14724800
I0428 19:35:13.548957 23465 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:13.548966 23465 net.cpp:86] Creating Layer relu1
I0428 19:35:13.548974 23465 net.cpp:408] relu1 <- ip1
I0428 19:35:13.548982 23465 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:13.549165 23465 net.cpp:124] Setting up relu1
I0428 19:35:13.549177 23465 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:13.549183 23465 net.cpp:139] Memory required for data: 14734800
I0428 19:35:13.549190 23465 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:13.549199 23465 net.cpp:86] Creating Layer ip2
I0428 19:35:13.549206 23465 net.cpp:408] ip2 <- ip1
I0428 19:35:13.549216 23465 net.cpp:382] ip2 -> ip2
I0428 19:35:13.549357 23465 net.cpp:124] Setting up ip2
I0428 19:35:13.549366 23465 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:13.549371 23465 net.cpp:139] Memory required for data: 14744800
I0428 19:35:13.549384 23465 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:13.549393 23465 net.cpp:86] Creating Layer relu2
I0428 19:35:13.549401 23465 net.cpp:408] relu2 <- ip2
I0428 19:35:13.549408 23465 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:13.550256 23465 net.cpp:124] Setting up relu2
I0428 19:35:13.550269 23465 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:13.550276 23465 net.cpp:139] Memory required for data: 14754800
I0428 19:35:13.550282 23465 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:13.550305 23465 net.cpp:86] Creating Layer ip3
I0428 19:35:13.550312 23465 net.cpp:408] ip3 <- ip2
I0428 19:35:13.550323 23465 net.cpp:382] ip3 -> ip3
I0428 19:35:13.550493 23465 net.cpp:124] Setting up ip3
I0428 19:35:13.550503 23465 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:13.550508 23465 net.cpp:139] Memory required for data: 14758800
I0428 19:35:13.550518 23465 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:13.550526 23465 net.cpp:86] Creating Layer relu3
I0428 19:35:13.550532 23465 net.cpp:408] relu3 <- ip3
I0428 19:35:13.550540 23465 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:13.550735 23465 net.cpp:124] Setting up relu3
I0428 19:35:13.550745 23465 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:13.550750 23465 net.cpp:139] Memory required for data: 14762800
I0428 19:35:13.550756 23465 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:35:13.550765 23465 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:35:13.550771 23465 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:35:13.550781 23465 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:35:13.550791 23465 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:35:13.550832 23465 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:35:13.550840 23465 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:13.550861 23465 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:13.550868 23465 net.cpp:139] Memory required for data: 14770800
I0428 19:35:13.550873 23465 layer_factory.hpp:77] Creating layer accuracy
I0428 19:35:13.550881 23465 net.cpp:86] Creating Layer accuracy
I0428 19:35:13.550887 23465 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:35:13.550895 23465 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:35:13.550920 23465 net.cpp:382] accuracy -> accuracy
I0428 19:35:13.550933 23465 net.cpp:124] Setting up accuracy
I0428 19:35:13.550947 23465 net.cpp:131] Top shape: (1)
I0428 19:35:13.550952 23465 net.cpp:139] Memory required for data: 14770804
I0428 19:35:13.550958 23465 layer_factory.hpp:77] Creating layer loss
I0428 19:35:13.550966 23465 net.cpp:86] Creating Layer loss
I0428 19:35:13.550971 23465 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:35:13.550987 23465 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:35:13.550994 23465 net.cpp:382] loss -> loss
I0428 19:35:13.551020 23465 layer_factory.hpp:77] Creating layer loss
I0428 19:35:13.551322 23465 net.cpp:124] Setting up loss
I0428 19:35:13.551333 23465 net.cpp:131] Top shape: (1)
I0428 19:35:13.551339 23465 net.cpp:134]     with loss weight 1
I0428 19:35:13.551349 23465 net.cpp:139] Memory required for data: 14770808
I0428 19:35:13.551357 23465 net.cpp:200] loss needs backward computation.
I0428 19:35:13.551363 23465 net.cpp:202] accuracy does not need backward computation.
I0428 19:35:13.551370 23465 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:35:13.551390 23465 net.cpp:200] relu3 needs backward computation.
I0428 19:35:13.551396 23465 net.cpp:200] ip3 needs backward computation.
I0428 19:35:13.551401 23465 net.cpp:200] relu2 needs backward computation.
I0428 19:35:13.551407 23465 net.cpp:200] ip2 needs backward computation.
I0428 19:35:13.551412 23465 net.cpp:200] relu1 needs backward computation.
I0428 19:35:13.551419 23465 net.cpp:200] ip1 needs backward computation.
I0428 19:35:13.551424 23465 net.cpp:200] pool0 needs backward computation.
I0428 19:35:13.551429 23465 net.cpp:200] conv0 needs backward computation.
I0428 19:35:13.551436 23465 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:35:13.551456 23465 net.cpp:202] mnist does not need backward computation.
I0428 19:35:13.551461 23465 net.cpp:244] This network produces output accuracy
I0428 19:35:13.551467 23465 net.cpp:244] This network produces output loss
I0428 19:35:13.551482 23465 net.cpp:257] Network initialization done.
I0428 19:35:13.551525 23465 solver.cpp:56] Solver scaffolding done.
I0428 19:35:13.551810 23465 caffe.cpp:248] Starting Optimization
I0428 19:35:13.551817 23465 solver.cpp:273] Solving LeNet
I0428 19:35:13.551826 23465 solver.cpp:274] Learning Rate Policy: inv
I0428 19:35:13.553316 23465 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:35:13.650216 23472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:13.652776 23465 solver.cpp:398]     Test net output #0: accuracy = 0.0758
I0428 19:35:13.652798 23465 solver.cpp:398]     Test net output #1: loss = 2.31691 (* 1 = 2.31691 loss)
I0428 19:35:13.657097 23465 solver.cpp:219] Iteration 0 (2.16311 iter/s, 0.105241s/100 iters), loss = 2.3035
I0428 19:35:13.657124 23465 solver.cpp:238]     Train net output #0: loss = 2.3035 (* 1 = 2.3035 loss)
I0428 19:35:13.657171 23465 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:35:13.796566 23465 solver.cpp:219] Iteration 100 (717.206 iter/s, 0.13943s/100 iters), loss = 0.356422
I0428 19:35:13.796594 23465 solver.cpp:238]     Train net output #0: loss = 0.356422 (* 1 = 0.356422 loss)
I0428 19:35:13.796619 23465 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:35:13.935693 23465 solver.cpp:219] Iteration 200 (718.965 iter/s, 0.139089s/100 iters), loss = 0.235352
I0428 19:35:13.935734 23465 solver.cpp:238]     Train net output #0: loss = 0.235352 (* 1 = 0.235352 loss)
I0428 19:35:13.935758 23465 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:35:14.075630 23465 solver.cpp:219] Iteration 300 (714.87 iter/s, 0.139886s/100 iters), loss = 0.195423
I0428 19:35:14.075673 23465 solver.cpp:238]     Train net output #0: loss = 0.195423 (* 1 = 0.195423 loss)
I0428 19:35:14.075700 23465 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:35:14.214453 23465 solver.cpp:219] Iteration 400 (720.604 iter/s, 0.138772s/100 iters), loss = 0.114282
I0428 19:35:14.214481 23465 solver.cpp:238]     Train net output #0: loss = 0.114282 (* 1 = 0.114282 loss)
I0428 19:35:14.214507 23465 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:35:14.353919 23465 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:35:14.449831 23472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:14.453362 23465 solver.cpp:398]     Test net output #0: accuracy = 0.949
I0428 19:35:14.453383 23465 solver.cpp:398]     Test net output #1: loss = 0.163807 (* 1 = 0.163807 loss)
I0428 19:35:14.454735 23465 solver.cpp:219] Iteration 500 (416.253 iter/s, 0.240239s/100 iters), loss = 0.263075
I0428 19:35:14.454776 23465 solver.cpp:238]     Train net output #0: loss = 0.263075 (* 1 = 0.263075 loss)
I0428 19:35:14.454802 23465 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:35:14.596247 23465 solver.cpp:219] Iteration 600 (706.835 iter/s, 0.141476s/100 iters), loss = 0.14572
I0428 19:35:14.596274 23465 solver.cpp:238]     Train net output #0: loss = 0.145721 (* 1 = 0.145721 loss)
I0428 19:35:14.596284 23465 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:35:14.738957 23465 solver.cpp:219] Iteration 700 (700.904 iter/s, 0.142673s/100 iters), loss = 0.273785
I0428 19:35:14.738984 23465 solver.cpp:238]     Train net output #0: loss = 0.273785 (* 1 = 0.273785 loss)
I0428 19:35:14.739011 23465 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:35:14.879401 23465 solver.cpp:219] Iteration 800 (712.216 iter/s, 0.140407s/100 iters), loss = 0.315384
I0428 19:35:14.879427 23465 solver.cpp:238]     Train net output #0: loss = 0.315384 (* 1 = 0.315384 loss)
I0428 19:35:14.879452 23465 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:35:15.019295 23465 solver.cpp:219] Iteration 900 (715.074 iter/s, 0.139846s/100 iters), loss = 0.201706
I0428 19:35:15.019323 23465 solver.cpp:238]     Train net output #0: loss = 0.201707 (* 1 = 0.201707 loss)
I0428 19:35:15.019333 23465 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:35:15.065296 23471 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:15.156781 23465 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:35:15.160722 23465 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:35:15.163018 23465 solver.cpp:311] Iteration 1000, loss = 0.101569
I0428 19:35:15.163048 23465 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:35:15.242967 23465 blocking_queue.cpp:49] Waiting for data
I0428 19:35:15.263862 23472 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:15.265384 23465 solver.cpp:398]     Test net output #0: accuracy = 0.9664
I0428 19:35:15.265424 23465 solver.cpp:398]     Test net output #1: loss = 0.104611 (* 1 = 0.104611 loss)
I0428 19:35:15.265445 23465 solver.cpp:316] Optimization Done.
I0428 19:35:15.265449 23465 caffe.cpp:259] Optimization Done.
