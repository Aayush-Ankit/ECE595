I0428 20:03:05.902091 30121 caffe.cpp:218] Using GPUs 0
I0428 20:03:05.938801 30121 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:03:06.391285 30121 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test944.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:03:06.391453 30121 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test944.prototxt
I0428 20:03:06.391774 30121 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:03:06.391789 30121 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:03:06.391865 30121 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:03:06.391924 30121 layer_factory.hpp:77] Creating layer mnist
I0428 20:03:06.392006 30121 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:03:06.392025 30121 net.cpp:86] Creating Layer mnist
I0428 20:03:06.392032 30121 net.cpp:382] mnist -> data
I0428 20:03:06.392050 30121 net.cpp:382] mnist -> label
I0428 20:03:06.393084 30121 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:03:06.395515 30121 net.cpp:124] Setting up mnist
I0428 20:03:06.395545 30121 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:03:06.395551 30121 net.cpp:131] Top shape: 64 (64)
I0428 20:03:06.395555 30121 net.cpp:139] Memory required for data: 200960
I0428 20:03:06.395560 30121 layer_factory.hpp:77] Creating layer conv0
I0428 20:03:06.395572 30121 net.cpp:86] Creating Layer conv0
I0428 20:03:06.395576 30121 net.cpp:408] conv0 <- data
I0428 20:03:06.395587 30121 net.cpp:382] conv0 -> conv0
I0428 20:03:06.628582 30121 net.cpp:124] Setting up conv0
I0428 20:03:06.628624 30121 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:03:06.628629 30121 net.cpp:139] Memory required for data: 1675520
I0428 20:03:06.628662 30121 layer_factory.hpp:77] Creating layer pool0
I0428 20:03:06.628691 30121 net.cpp:86] Creating Layer pool0
I0428 20:03:06.628695 30121 net.cpp:408] pool0 <- conv0
I0428 20:03:06.628700 30121 net.cpp:382] pool0 -> pool0
I0428 20:03:06.628747 30121 net.cpp:124] Setting up pool0
I0428 20:03:06.628756 30121 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:03:06.628758 30121 net.cpp:139] Memory required for data: 2044160
I0428 20:03:06.628762 30121 layer_factory.hpp:77] Creating layer conv1
I0428 20:03:06.628772 30121 net.cpp:86] Creating Layer conv1
I0428 20:03:06.628775 30121 net.cpp:408] conv1 <- pool0
I0428 20:03:06.628780 30121 net.cpp:382] conv1 -> conv1
I0428 20:03:06.630951 30121 net.cpp:124] Setting up conv1
I0428 20:03:06.630981 30121 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:03:06.630985 30121 net.cpp:139] Memory required for data: 3682560
I0428 20:03:06.631008 30121 layer_factory.hpp:77] Creating layer pool1
I0428 20:03:06.631016 30121 net.cpp:86] Creating Layer pool1
I0428 20:03:06.631021 30121 net.cpp:408] pool1 <- conv1
I0428 20:03:06.631041 30121 net.cpp:382] pool1 -> pool1
I0428 20:03:06.631099 30121 net.cpp:124] Setting up pool1
I0428 20:03:06.631108 30121 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:03:06.631110 30121 net.cpp:139] Memory required for data: 4092160
I0428 20:03:06.631114 30121 layer_factory.hpp:77] Creating layer ip1
I0428 20:03:06.631121 30121 net.cpp:86] Creating Layer ip1
I0428 20:03:06.631124 30121 net.cpp:408] ip1 <- pool1
I0428 20:03:06.631129 30121 net.cpp:382] ip1 -> ip1
I0428 20:03:06.631497 30121 net.cpp:124] Setting up ip1
I0428 20:03:06.631516 30121 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:03:06.631534 30121 net.cpp:139] Memory required for data: 4098560
I0428 20:03:06.631541 30121 layer_factory.hpp:77] Creating layer relu1
I0428 20:03:06.631547 30121 net.cpp:86] Creating Layer relu1
I0428 20:03:06.631551 30121 net.cpp:408] relu1 <- ip1
I0428 20:03:06.631556 30121 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:03:06.631712 30121 net.cpp:124] Setting up relu1
I0428 20:03:06.631721 30121 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:03:06.631724 30121 net.cpp:139] Memory required for data: 4104960
I0428 20:03:06.631727 30121 layer_factory.hpp:77] Creating layer ip2
I0428 20:03:06.631733 30121 net.cpp:86] Creating Layer ip2
I0428 20:03:06.631736 30121 net.cpp:408] ip2 <- ip1
I0428 20:03:06.631742 30121 net.cpp:382] ip2 -> ip2
I0428 20:03:06.631832 30121 net.cpp:124] Setting up ip2
I0428 20:03:06.631839 30121 net.cpp:131] Top shape: 64 10 (640)
I0428 20:03:06.631842 30121 net.cpp:139] Memory required for data: 4107520
I0428 20:03:06.631849 30121 layer_factory.hpp:77] Creating layer relu2
I0428 20:03:06.631855 30121 net.cpp:86] Creating Layer relu2
I0428 20:03:06.631858 30121 net.cpp:408] relu2 <- ip2
I0428 20:03:06.631862 30121 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:03:06.632712 30121 net.cpp:124] Setting up relu2
I0428 20:03:06.632725 30121 net.cpp:131] Top shape: 64 10 (640)
I0428 20:03:06.632743 30121 net.cpp:139] Memory required for data: 4110080
I0428 20:03:06.632747 30121 layer_factory.hpp:77] Creating layer loss
I0428 20:03:06.632753 30121 net.cpp:86] Creating Layer loss
I0428 20:03:06.632757 30121 net.cpp:408] loss <- ip2
I0428 20:03:06.632761 30121 net.cpp:408] loss <- label
I0428 20:03:06.632767 30121 net.cpp:382] loss -> loss
I0428 20:03:06.632786 30121 layer_factory.hpp:77] Creating layer loss
I0428 20:03:06.633035 30121 net.cpp:124] Setting up loss
I0428 20:03:06.633046 30121 net.cpp:131] Top shape: (1)
I0428 20:03:06.633050 30121 net.cpp:134]     with loss weight 1
I0428 20:03:06.633064 30121 net.cpp:139] Memory required for data: 4110084
I0428 20:03:06.633069 30121 net.cpp:200] loss needs backward computation.
I0428 20:03:06.633072 30121 net.cpp:200] relu2 needs backward computation.
I0428 20:03:06.633075 30121 net.cpp:200] ip2 needs backward computation.
I0428 20:03:06.633078 30121 net.cpp:200] relu1 needs backward computation.
I0428 20:03:06.633081 30121 net.cpp:200] ip1 needs backward computation.
I0428 20:03:06.633095 30121 net.cpp:200] pool1 needs backward computation.
I0428 20:03:06.633100 30121 net.cpp:200] conv1 needs backward computation.
I0428 20:03:06.633102 30121 net.cpp:200] pool0 needs backward computation.
I0428 20:03:06.633105 30121 net.cpp:200] conv0 needs backward computation.
I0428 20:03:06.633110 30121 net.cpp:202] mnist does not need backward computation.
I0428 20:03:06.633112 30121 net.cpp:244] This network produces output loss
I0428 20:03:06.633121 30121 net.cpp:257] Network initialization done.
I0428 20:03:06.633489 30121 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test944.prototxt
I0428 20:03:06.633533 30121 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:03:06.633635 30121 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:03:06.633707 30121 layer_factory.hpp:77] Creating layer mnist
I0428 20:03:06.633769 30121 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:03:06.633781 30121 net.cpp:86] Creating Layer mnist
I0428 20:03:06.633786 30121 net.cpp:382] mnist -> data
I0428 20:03:06.633795 30121 net.cpp:382] mnist -> label
I0428 20:03:06.633894 30121 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:03:06.636008 30121 net.cpp:124] Setting up mnist
I0428 20:03:06.636037 30121 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:03:06.636044 30121 net.cpp:131] Top shape: 100 (100)
I0428 20:03:06.636046 30121 net.cpp:139] Memory required for data: 314000
I0428 20:03:06.636050 30121 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:03:06.636082 30121 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:03:06.636087 30121 net.cpp:408] label_mnist_1_split <- label
I0428 20:03:06.636092 30121 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:03:06.636111 30121 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:03:06.636212 30121 net.cpp:124] Setting up label_mnist_1_split
I0428 20:03:06.636220 30121 net.cpp:131] Top shape: 100 (100)
I0428 20:03:06.636224 30121 net.cpp:131] Top shape: 100 (100)
I0428 20:03:06.636227 30121 net.cpp:139] Memory required for data: 314800
I0428 20:03:06.636230 30121 layer_factory.hpp:77] Creating layer conv0
I0428 20:03:06.636238 30121 net.cpp:86] Creating Layer conv0
I0428 20:03:06.636242 30121 net.cpp:408] conv0 <- data
I0428 20:03:06.636247 30121 net.cpp:382] conv0 -> conv0
I0428 20:03:06.638027 30121 net.cpp:124] Setting up conv0
I0428 20:03:06.638041 30121 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:03:06.638046 30121 net.cpp:139] Memory required for data: 2618800
I0428 20:03:06.638054 30121 layer_factory.hpp:77] Creating layer pool0
I0428 20:03:06.638061 30121 net.cpp:86] Creating Layer pool0
I0428 20:03:06.638064 30121 net.cpp:408] pool0 <- conv0
I0428 20:03:06.638069 30121 net.cpp:382] pool0 -> pool0
I0428 20:03:06.638103 30121 net.cpp:124] Setting up pool0
I0428 20:03:06.638111 30121 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:03:06.638113 30121 net.cpp:139] Memory required for data: 3194800
I0428 20:03:06.638116 30121 layer_factory.hpp:77] Creating layer conv1
I0428 20:03:06.638125 30121 net.cpp:86] Creating Layer conv1
I0428 20:03:06.638128 30121 net.cpp:408] conv1 <- pool0
I0428 20:03:06.638134 30121 net.cpp:382] conv1 -> conv1
I0428 20:03:06.640063 30121 net.cpp:124] Setting up conv1
I0428 20:03:06.640075 30121 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:03:06.640079 30121 net.cpp:139] Memory required for data: 5754800
I0428 20:03:06.640086 30121 layer_factory.hpp:77] Creating layer pool1
I0428 20:03:06.640110 30121 net.cpp:86] Creating Layer pool1
I0428 20:03:06.640115 30121 net.cpp:408] pool1 <- conv1
I0428 20:03:06.640135 30121 net.cpp:382] pool1 -> pool1
I0428 20:03:06.640171 30121 net.cpp:124] Setting up pool1
I0428 20:03:06.640177 30121 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:03:06.640179 30121 net.cpp:139] Memory required for data: 6394800
I0428 20:03:06.640182 30121 layer_factory.hpp:77] Creating layer ip1
I0428 20:03:06.640189 30121 net.cpp:86] Creating Layer ip1
I0428 20:03:06.640192 30121 net.cpp:408] ip1 <- pool1
I0428 20:03:06.640197 30121 net.cpp:382] ip1 -> ip1
I0428 20:03:06.640554 30121 net.cpp:124] Setting up ip1
I0428 20:03:06.640563 30121 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:03:06.640566 30121 net.cpp:139] Memory required for data: 6404800
I0428 20:03:06.640573 30121 layer_factory.hpp:77] Creating layer relu1
I0428 20:03:06.640581 30121 net.cpp:86] Creating Layer relu1
I0428 20:03:06.640584 30121 net.cpp:408] relu1 <- ip1
I0428 20:03:06.640588 30121 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:03:06.640750 30121 net.cpp:124] Setting up relu1
I0428 20:03:06.640759 30121 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:03:06.640763 30121 net.cpp:139] Memory required for data: 6414800
I0428 20:03:06.640766 30121 layer_factory.hpp:77] Creating layer ip2
I0428 20:03:06.640774 30121 net.cpp:86] Creating Layer ip2
I0428 20:03:06.640777 30121 net.cpp:408] ip2 <- ip1
I0428 20:03:06.640790 30121 net.cpp:382] ip2 -> ip2
I0428 20:03:06.640933 30121 net.cpp:124] Setting up ip2
I0428 20:03:06.640943 30121 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:06.640946 30121 net.cpp:139] Memory required for data: 6418800
I0428 20:03:06.640959 30121 layer_factory.hpp:77] Creating layer relu2
I0428 20:03:06.640964 30121 net.cpp:86] Creating Layer relu2
I0428 20:03:06.640966 30121 net.cpp:408] relu2 <- ip2
I0428 20:03:06.640971 30121 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:03:06.641244 30121 net.cpp:124] Setting up relu2
I0428 20:03:06.641254 30121 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:06.641258 30121 net.cpp:139] Memory required for data: 6422800
I0428 20:03:06.641261 30121 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:03:06.641266 30121 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:03:06.641269 30121 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:03:06.641274 30121 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:03:06.641291 30121 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:03:06.641345 30121 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:03:06.641355 30121 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:06.641358 30121 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:06.641361 30121 net.cpp:139] Memory required for data: 6430800
I0428 20:03:06.641365 30121 layer_factory.hpp:77] Creating layer accuracy
I0428 20:03:06.641369 30121 net.cpp:86] Creating Layer accuracy
I0428 20:03:06.641373 30121 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:03:06.641377 30121 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:03:06.641386 30121 net.cpp:382] accuracy -> accuracy
I0428 20:03:06.641393 30121 net.cpp:124] Setting up accuracy
I0428 20:03:06.641397 30121 net.cpp:131] Top shape: (1)
I0428 20:03:06.641400 30121 net.cpp:139] Memory required for data: 6430804
I0428 20:03:06.641404 30121 layer_factory.hpp:77] Creating layer loss
I0428 20:03:06.641410 30121 net.cpp:86] Creating Layer loss
I0428 20:03:06.641413 30121 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:03:06.641418 30121 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:03:06.641422 30121 net.cpp:382] loss -> loss
I0428 20:03:06.641428 30121 layer_factory.hpp:77] Creating layer loss
I0428 20:03:06.641697 30121 net.cpp:124] Setting up loss
I0428 20:03:06.641706 30121 net.cpp:131] Top shape: (1)
I0428 20:03:06.641716 30121 net.cpp:134]     with loss weight 1
I0428 20:03:06.641722 30121 net.cpp:139] Memory required for data: 6430808
I0428 20:03:06.641731 30121 net.cpp:200] loss needs backward computation.
I0428 20:03:06.641733 30121 net.cpp:202] accuracy does not need backward computation.
I0428 20:03:06.641737 30121 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:03:06.641741 30121 net.cpp:200] relu2 needs backward computation.
I0428 20:03:06.641742 30121 net.cpp:200] ip2 needs backward computation.
I0428 20:03:06.641746 30121 net.cpp:200] relu1 needs backward computation.
I0428 20:03:06.641748 30121 net.cpp:200] ip1 needs backward computation.
I0428 20:03:06.641752 30121 net.cpp:200] pool1 needs backward computation.
I0428 20:03:06.641754 30121 net.cpp:200] conv1 needs backward computation.
I0428 20:03:06.641757 30121 net.cpp:200] pool0 needs backward computation.
I0428 20:03:06.641760 30121 net.cpp:200] conv0 needs backward computation.
I0428 20:03:06.641764 30121 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:03:06.641767 30121 net.cpp:202] mnist does not need backward computation.
I0428 20:03:06.641769 30121 net.cpp:244] This network produces output accuracy
I0428 20:03:06.641773 30121 net.cpp:244] This network produces output loss
I0428 20:03:06.641784 30121 net.cpp:257] Network initialization done.
I0428 20:03:06.641841 30121 solver.cpp:56] Solver scaffolding done.
I0428 20:03:06.642128 30121 caffe.cpp:248] Starting Optimization
I0428 20:03:06.642135 30121 solver.cpp:273] Solving LeNet
I0428 20:03:06.642145 30121 solver.cpp:274] Learning Rate Policy: inv
I0428 20:03:06.642362 30121 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:03:06.648206 30121 blocking_queue.cpp:49] Waiting for data
I0428 20:03:06.710583 30128 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:06.711199 30121 solver.cpp:398]     Test net output #0: accuracy = 0.1618
I0428 20:03:06.711217 30121 solver.cpp:398]     Test net output #1: loss = 2.31047 (* 1 = 2.31047 loss)
I0428 20:03:06.714953 30121 solver.cpp:219] Iteration 0 (0 iter/s, 0.0727818s/100 iters), loss = 2.27651
I0428 20:03:06.714974 30121 solver.cpp:238]     Train net output #0: loss = 2.27651 (* 1 = 2.27651 loss)
I0428 20:03:06.715000 30121 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:03:06.867990 30121 solver.cpp:219] Iteration 100 (653.604 iter/s, 0.152998s/100 iters), loss = 0.593793
I0428 20:03:06.868032 30121 solver.cpp:238]     Train net output #0: loss = 0.593793 (* 1 = 0.593793 loss)
I0428 20:03:06.868039 30121 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:03:07.023449 30121 solver.cpp:219] Iteration 200 (643.483 iter/s, 0.155404s/100 iters), loss = 0.161639
I0428 20:03:07.023478 30121 solver.cpp:238]     Train net output #0: loss = 0.161639 (* 1 = 0.161639 loss)
I0428 20:03:07.023484 30121 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:03:07.167839 30121 solver.cpp:219] Iteration 300 (692.765 iter/s, 0.144349s/100 iters), loss = 0.20708
I0428 20:03:07.167878 30121 solver.cpp:238]     Train net output #0: loss = 0.20708 (* 1 = 0.20708 loss)
I0428 20:03:07.167884 30121 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:03:07.311905 30121 solver.cpp:219] Iteration 400 (694.296 iter/s, 0.144031s/100 iters), loss = 0.108272
I0428 20:03:07.311929 30121 solver.cpp:238]     Train net output #0: loss = 0.108272 (* 1 = 0.108272 loss)
I0428 20:03:07.311935 30121 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:03:07.451999 30121 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:03:07.518841 30128 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:07.519435 30121 solver.cpp:398]     Test net output #0: accuracy = 0.9626
I0428 20:03:07.519455 30121 solver.cpp:398]     Test net output #1: loss = 0.118869 (* 1 = 0.118869 loss)
I0428 20:03:07.521060 30121 solver.cpp:219] Iteration 500 (478.241 iter/s, 0.2091s/100 iters), loss = 0.0634739
I0428 20:03:07.521090 30121 solver.cpp:238]     Train net output #0: loss = 0.0634738 (* 1 = 0.0634738 loss)
I0428 20:03:07.521098 30121 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:03:07.673393 30121 solver.cpp:219] Iteration 600 (656.642 iter/s, 0.15229s/100 iters), loss = 0.111432
I0428 20:03:07.673420 30121 solver.cpp:238]     Train net output #0: loss = 0.111432 (* 1 = 0.111432 loss)
I0428 20:03:07.673427 30121 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:03:07.823274 30121 solver.cpp:219] Iteration 700 (667.371 iter/s, 0.149842s/100 iters), loss = 0.112019
I0428 20:03:07.823312 30121 solver.cpp:238]     Train net output #0: loss = 0.112019 (* 1 = 0.112019 loss)
I0428 20:03:07.823319 30121 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:03:07.971806 30121 solver.cpp:219] Iteration 800 (673.417 iter/s, 0.148496s/100 iters), loss = 0.303444
I0428 20:03:07.971848 30121 solver.cpp:238]     Train net output #0: loss = 0.303444 (* 1 = 0.303444 loss)
I0428 20:03:07.971853 30121 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:03:08.122331 30121 solver.cpp:219] Iteration 900 (664.582 iter/s, 0.15047s/100 iters), loss = 0.154617
I0428 20:03:08.122361 30121 solver.cpp:238]     Train net output #0: loss = 0.154616 (* 1 = 0.154616 loss)
I0428 20:03:08.122370 30121 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:03:08.172678 30127 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:08.273018 30121 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:03:08.275164 30121 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:03:08.276293 30121 solver.cpp:311] Iteration 1000, loss = 0.0984748
I0428 20:03:08.276309 30121 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:03:08.341743 30128 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:08.342341 30121 solver.cpp:398]     Test net output #0: accuracy = 0.9804
I0428 20:03:08.342375 30121 solver.cpp:398]     Test net output #1: loss = 0.0652006 (* 1 = 0.0652006 loss)
I0428 20:03:08.342380 30121 solver.cpp:316] Optimization Done.
I0428 20:03:08.342382 30121 caffe.cpp:259] Optimization Done.
