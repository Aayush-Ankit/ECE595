I0428 19:57:02.937288 28582 caffe.cpp:218] Using GPUs 0
I0428 19:57:02.974442 28582 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:03.427865 28582 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test777.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:03.427989 28582 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test777.prototxt
I0428 19:57:03.428355 28582 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:03.428385 28582 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:03.428465 28582 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:03.428525 28582 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:03.428623 28582 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:03.428656 28582 net.cpp:86] Creating Layer mnist
I0428 19:57:03.428663 28582 net.cpp:382] mnist -> data
I0428 19:57:03.428681 28582 net.cpp:382] mnist -> label
I0428 19:57:03.429679 28582 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:03.432067 28582 net.cpp:124] Setting up mnist
I0428 19:57:03.432097 28582 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:03.432102 28582 net.cpp:131] Top shape: 64 (64)
I0428 19:57:03.432106 28582 net.cpp:139] Memory required for data: 200960
I0428 19:57:03.432112 28582 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:03.432126 28582 net.cpp:86] Creating Layer conv0
I0428 19:57:03.432142 28582 net.cpp:408] conv0 <- data
I0428 19:57:03.432152 28582 net.cpp:382] conv0 -> conv0
I0428 19:57:03.665520 28582 net.cpp:124] Setting up conv0
I0428 19:57:03.665546 28582 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:03.665550 28582 net.cpp:139] Memory required for data: 1675520
I0428 19:57:03.665565 28582 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:03.665577 28582 net.cpp:86] Creating Layer pool0
I0428 19:57:03.665581 28582 net.cpp:408] pool0 <- conv0
I0428 19:57:03.665586 28582 net.cpp:382] pool0 -> pool0
I0428 19:57:03.665645 28582 net.cpp:124] Setting up pool0
I0428 19:57:03.665652 28582 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:03.665655 28582 net.cpp:139] Memory required for data: 2044160
I0428 19:57:03.665658 28582 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:03.665668 28582 net.cpp:86] Creating Layer conv1
I0428 19:57:03.665671 28582 net.cpp:408] conv1 <- pool0
I0428 19:57:03.665676 28582 net.cpp:382] conv1 -> conv1
I0428 19:57:03.667577 28582 net.cpp:124] Setting up conv1
I0428 19:57:03.667590 28582 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:57:03.667610 28582 net.cpp:139] Memory required for data: 2076928
I0428 19:57:03.667619 28582 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:03.667626 28582 net.cpp:86] Creating Layer pool1
I0428 19:57:03.667630 28582 net.cpp:408] pool1 <- conv1
I0428 19:57:03.667635 28582 net.cpp:382] pool1 -> pool1
I0428 19:57:03.667673 28582 net.cpp:124] Setting up pool1
I0428 19:57:03.667680 28582 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:57:03.667683 28582 net.cpp:139] Memory required for data: 2085120
I0428 19:57:03.667686 28582 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:03.667693 28582 net.cpp:86] Creating Layer ip1
I0428 19:57:03.667696 28582 net.cpp:408] ip1 <- pool1
I0428 19:57:03.667701 28582 net.cpp:382] ip1 -> ip1
I0428 19:57:03.668758 28582 net.cpp:124] Setting up ip1
I0428 19:57:03.668771 28582 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:03.668786 28582 net.cpp:139] Memory required for data: 2097920
I0428 19:57:03.668793 28582 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:03.668800 28582 net.cpp:86] Creating Layer relu1
I0428 19:57:03.668803 28582 net.cpp:408] relu1 <- ip1
I0428 19:57:03.668831 28582 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:03.669029 28582 net.cpp:124] Setting up relu1
I0428 19:57:03.669039 28582 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:03.669044 28582 net.cpp:139] Memory required for data: 2110720
I0428 19:57:03.669047 28582 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:03.669054 28582 net.cpp:86] Creating Layer ip2
I0428 19:57:03.669060 28582 net.cpp:408] ip2 <- ip1
I0428 19:57:03.669067 28582 net.cpp:382] ip2 -> ip2
I0428 19:57:03.669198 28582 net.cpp:124] Setting up ip2
I0428 19:57:03.669204 28582 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:03.669208 28582 net.cpp:139] Memory required for data: 2123520
I0428 19:57:03.669212 28582 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:03.669219 28582 net.cpp:86] Creating Layer relu2
I0428 19:57:03.669224 28582 net.cpp:408] relu2 <- ip2
I0428 19:57:03.669227 28582 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:03.670042 28582 net.cpp:124] Setting up relu2
I0428 19:57:03.670054 28582 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:03.670058 28582 net.cpp:139] Memory required for data: 2136320
I0428 19:57:03.670061 28582 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:03.670068 28582 net.cpp:86] Creating Layer ip3
I0428 19:57:03.670071 28582 net.cpp:408] ip3 <- ip2
I0428 19:57:03.670076 28582 net.cpp:382] ip3 -> ip3
I0428 19:57:03.670176 28582 net.cpp:124] Setting up ip3
I0428 19:57:03.670183 28582 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:03.670187 28582 net.cpp:139] Memory required for data: 2138880
I0428 19:57:03.670194 28582 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:03.670202 28582 net.cpp:86] Creating Layer relu3
I0428 19:57:03.670220 28582 net.cpp:408] relu3 <- ip3
I0428 19:57:03.670224 28582 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:03.670392 28582 net.cpp:124] Setting up relu3
I0428 19:57:03.670400 28582 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:03.670403 28582 net.cpp:139] Memory required for data: 2141440
I0428 19:57:03.670408 28582 layer_factory.hpp:77] Creating layer loss
I0428 19:57:03.670413 28582 net.cpp:86] Creating Layer loss
I0428 19:57:03.670416 28582 net.cpp:408] loss <- ip3
I0428 19:57:03.670420 28582 net.cpp:408] loss <- label
I0428 19:57:03.670425 28582 net.cpp:382] loss -> loss
I0428 19:57:03.670440 28582 layer_factory.hpp:77] Creating layer loss
I0428 19:57:03.670682 28582 net.cpp:124] Setting up loss
I0428 19:57:03.670691 28582 net.cpp:131] Top shape: (1)
I0428 19:57:03.670694 28582 net.cpp:134]     with loss weight 1
I0428 19:57:03.670709 28582 net.cpp:139] Memory required for data: 2141444
I0428 19:57:03.670712 28582 net.cpp:200] loss needs backward computation.
I0428 19:57:03.670717 28582 net.cpp:200] relu3 needs backward computation.
I0428 19:57:03.670719 28582 net.cpp:200] ip3 needs backward computation.
I0428 19:57:03.670722 28582 net.cpp:200] relu2 needs backward computation.
I0428 19:57:03.670724 28582 net.cpp:200] ip2 needs backward computation.
I0428 19:57:03.670727 28582 net.cpp:200] relu1 needs backward computation.
I0428 19:57:03.670730 28582 net.cpp:200] ip1 needs backward computation.
I0428 19:57:03.670733 28582 net.cpp:200] pool1 needs backward computation.
I0428 19:57:03.670737 28582 net.cpp:200] conv1 needs backward computation.
I0428 19:57:03.670739 28582 net.cpp:200] pool0 needs backward computation.
I0428 19:57:03.670743 28582 net.cpp:200] conv0 needs backward computation.
I0428 19:57:03.670747 28582 net.cpp:202] mnist does not need backward computation.
I0428 19:57:03.670749 28582 net.cpp:244] This network produces output loss
I0428 19:57:03.670758 28582 net.cpp:257] Network initialization done.
I0428 19:57:03.671114 28582 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test777.prototxt
I0428 19:57:03.671156 28582 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:03.671247 28582 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:03.671341 28582 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:03.671387 28582 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:03.671399 28582 net.cpp:86] Creating Layer mnist
I0428 19:57:03.671403 28582 net.cpp:382] mnist -> data
I0428 19:57:03.671411 28582 net.cpp:382] mnist -> label
I0428 19:57:03.671491 28582 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:03.673580 28582 net.cpp:124] Setting up mnist
I0428 19:57:03.673593 28582 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:03.673599 28582 net.cpp:131] Top shape: 100 (100)
I0428 19:57:03.673601 28582 net.cpp:139] Memory required for data: 314000
I0428 19:57:03.673605 28582 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:03.673611 28582 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:03.673614 28582 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:03.673619 28582 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:03.673626 28582 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:03.673720 28582 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:03.673728 28582 net.cpp:131] Top shape: 100 (100)
I0428 19:57:03.673732 28582 net.cpp:131] Top shape: 100 (100)
I0428 19:57:03.673734 28582 net.cpp:139] Memory required for data: 314800
I0428 19:57:03.673738 28582 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:03.673763 28582 net.cpp:86] Creating Layer conv0
I0428 19:57:03.673765 28582 net.cpp:408] conv0 <- data
I0428 19:57:03.673770 28582 net.cpp:382] conv0 -> conv0
I0428 19:57:03.675638 28582 net.cpp:124] Setting up conv0
I0428 19:57:03.675652 28582 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:03.675670 28582 net.cpp:139] Memory required for data: 2618800
I0428 19:57:03.675680 28582 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:03.675686 28582 net.cpp:86] Creating Layer pool0
I0428 19:57:03.675689 28582 net.cpp:408] pool0 <- conv0
I0428 19:57:03.675695 28582 net.cpp:382] pool0 -> pool0
I0428 19:57:03.675745 28582 net.cpp:124] Setting up pool0
I0428 19:57:03.675750 28582 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:03.675753 28582 net.cpp:139] Memory required for data: 3194800
I0428 19:57:03.675756 28582 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:03.675765 28582 net.cpp:86] Creating Layer conv1
I0428 19:57:03.675768 28582 net.cpp:408] conv1 <- pool0
I0428 19:57:03.675772 28582 net.cpp:382] conv1 -> conv1
I0428 19:57:03.677899 28582 net.cpp:124] Setting up conv1
I0428 19:57:03.677911 28582 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:57:03.677916 28582 net.cpp:139] Memory required for data: 3246000
I0428 19:57:03.677924 28582 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:03.677930 28582 net.cpp:86] Creating Layer pool1
I0428 19:57:03.677933 28582 net.cpp:408] pool1 <- conv1
I0428 19:57:03.677938 28582 net.cpp:382] pool1 -> pool1
I0428 19:57:03.678053 28582 net.cpp:124] Setting up pool1
I0428 19:57:03.678061 28582 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:57:03.678064 28582 net.cpp:139] Memory required for data: 3258800
I0428 19:57:03.678067 28582 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:03.678073 28582 net.cpp:86] Creating Layer ip1
I0428 19:57:03.678077 28582 net.cpp:408] ip1 <- pool1
I0428 19:57:03.678082 28582 net.cpp:382] ip1 -> ip1
I0428 19:57:03.678201 28582 net.cpp:124] Setting up ip1
I0428 19:57:03.678210 28582 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:03.678222 28582 net.cpp:139] Memory required for data: 3278800
I0428 19:57:03.678230 28582 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:03.678236 28582 net.cpp:86] Creating Layer relu1
I0428 19:57:03.678239 28582 net.cpp:408] relu1 <- ip1
I0428 19:57:03.678244 28582 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:03.678433 28582 net.cpp:124] Setting up relu1
I0428 19:57:03.678445 28582 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:03.678449 28582 net.cpp:139] Memory required for data: 3298800
I0428 19:57:03.678452 28582 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:03.678459 28582 net.cpp:86] Creating Layer ip2
I0428 19:57:03.678463 28582 net.cpp:408] ip2 <- ip1
I0428 19:57:03.678469 28582 net.cpp:382] ip2 -> ip2
I0428 19:57:03.678594 28582 net.cpp:124] Setting up ip2
I0428 19:57:03.678601 28582 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:03.678604 28582 net.cpp:139] Memory required for data: 3318800
I0428 19:57:03.678609 28582 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:03.678616 28582 net.cpp:86] Creating Layer relu2
I0428 19:57:03.678618 28582 net.cpp:408] relu2 <- ip2
I0428 19:57:03.678622 28582 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:03.678848 28582 net.cpp:124] Setting up relu2
I0428 19:57:03.678858 28582 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:03.678860 28582 net.cpp:139] Memory required for data: 3338800
I0428 19:57:03.678864 28582 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:03.678870 28582 net.cpp:86] Creating Layer ip3
I0428 19:57:03.678874 28582 net.cpp:408] ip3 <- ip2
I0428 19:57:03.678879 28582 net.cpp:382] ip3 -> ip3
I0428 19:57:03.679011 28582 net.cpp:124] Setting up ip3
I0428 19:57:03.679018 28582 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:03.679023 28582 net.cpp:139] Memory required for data: 3342800
I0428 19:57:03.679038 28582 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:03.679042 28582 net.cpp:86] Creating Layer relu3
I0428 19:57:03.679045 28582 net.cpp:408] relu3 <- ip3
I0428 19:57:03.679049 28582 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:03.679872 28582 net.cpp:124] Setting up relu3
I0428 19:57:03.679884 28582 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:03.679898 28582 net.cpp:139] Memory required for data: 3346800
I0428 19:57:03.679903 28582 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:03.679908 28582 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:03.679911 28582 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:03.679918 28582 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:03.679924 28582 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:03.679963 28582 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:03.679975 28582 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:03.679980 28582 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:03.679981 28582 net.cpp:139] Memory required for data: 3354800
I0428 19:57:03.679985 28582 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:03.679989 28582 net.cpp:86] Creating Layer accuracy
I0428 19:57:03.679992 28582 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:03.679996 28582 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:03.680001 28582 net.cpp:382] accuracy -> accuracy
I0428 19:57:03.680008 28582 net.cpp:124] Setting up accuracy
I0428 19:57:03.680011 28582 net.cpp:131] Top shape: (1)
I0428 19:57:03.680014 28582 net.cpp:139] Memory required for data: 3354804
I0428 19:57:03.680017 28582 layer_factory.hpp:77] Creating layer loss
I0428 19:57:03.680022 28582 net.cpp:86] Creating Layer loss
I0428 19:57:03.680027 28582 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:03.680029 28582 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:03.680033 28582 net.cpp:382] loss -> loss
I0428 19:57:03.680039 28582 layer_factory.hpp:77] Creating layer loss
I0428 19:57:03.680341 28582 net.cpp:124] Setting up loss
I0428 19:57:03.680349 28582 net.cpp:131] Top shape: (1)
I0428 19:57:03.680352 28582 net.cpp:134]     with loss weight 1
I0428 19:57:03.680357 28582 net.cpp:139] Memory required for data: 3354808
I0428 19:57:03.680371 28582 net.cpp:200] loss needs backward computation.
I0428 19:57:03.680375 28582 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:03.680379 28582 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:03.680382 28582 net.cpp:200] relu3 needs backward computation.
I0428 19:57:03.680384 28582 net.cpp:200] ip3 needs backward computation.
I0428 19:57:03.680387 28582 net.cpp:200] relu2 needs backward computation.
I0428 19:57:03.680389 28582 net.cpp:200] ip2 needs backward computation.
I0428 19:57:03.680392 28582 net.cpp:200] relu1 needs backward computation.
I0428 19:57:03.680394 28582 net.cpp:200] ip1 needs backward computation.
I0428 19:57:03.680397 28582 net.cpp:200] pool1 needs backward computation.
I0428 19:57:03.680400 28582 net.cpp:200] conv1 needs backward computation.
I0428 19:57:03.680403 28582 net.cpp:200] pool0 needs backward computation.
I0428 19:57:03.680407 28582 net.cpp:200] conv0 needs backward computation.
I0428 19:57:03.680409 28582 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:03.680413 28582 net.cpp:202] mnist does not need backward computation.
I0428 19:57:03.680415 28582 net.cpp:244] This network produces output accuracy
I0428 19:57:03.680420 28582 net.cpp:244] This network produces output loss
I0428 19:57:03.680430 28582 net.cpp:257] Network initialization done.
I0428 19:57:03.680506 28582 solver.cpp:56] Solver scaffolding done.
I0428 19:57:03.680888 28582 caffe.cpp:248] Starting Optimization
I0428 19:57:03.680896 28582 solver.cpp:273] Solving LeNet
I0428 19:57:03.680898 28582 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:03.681731 28582 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:03.685775 28582 blocking_queue.cpp:49] Waiting for data
I0428 19:57:03.749938 28589 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:03.750465 28582 solver.cpp:398]     Test net output #0: accuracy = 0.0878
I0428 19:57:03.750500 28582 solver.cpp:398]     Test net output #1: loss = 2.32272 (* 1 = 2.32272 loss)
I0428 19:57:03.752928 28582 solver.cpp:219] Iteration 0 (0 iter/s, 0.0719911s/100 iters), loss = 2.32378
I0428 19:57:03.752967 28582 solver.cpp:238]     Train net output #0: loss = 2.32378 (* 1 = 2.32378 loss)
I0428 19:57:03.752979 28582 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:03.829551 28582 solver.cpp:219] Iteration 100 (1305.69 iter/s, 0.0765881s/100 iters), loss = 1.35861
I0428 19:57:03.829591 28582 solver.cpp:238]     Train net output #0: loss = 1.35861 (* 1 = 1.35861 loss)
I0428 19:57:03.829596 28582 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:03.906455 28582 solver.cpp:219] Iteration 200 (1300.9 iter/s, 0.0768696s/100 iters), loss = 1.08944
I0428 19:57:03.906496 28582 solver.cpp:238]     Train net output #0: loss = 1.08944 (* 1 = 1.08944 loss)
I0428 19:57:03.906502 28582 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:03.981452 28582 solver.cpp:219] Iteration 300 (1333.97 iter/s, 0.074964s/100 iters), loss = 0.959445
I0428 19:57:03.981475 28582 solver.cpp:238]     Train net output #0: loss = 0.959445 (* 1 = 0.959445 loss)
I0428 19:57:03.981482 28582 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:04.064297 28582 solver.cpp:219] Iteration 400 (1207.54 iter/s, 0.0828129s/100 iters), loss = 0.996755
I0428 19:57:04.064338 28582 solver.cpp:238]     Train net output #0: loss = 0.996755 (* 1 = 0.996755 loss)
I0428 19:57:04.064344 28582 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:04.137725 28582 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:04.191486 28589 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:04.192013 28582 solver.cpp:398]     Test net output #0: accuracy = 0.7363
I0428 19:57:04.192049 28582 solver.cpp:398]     Test net output #1: loss = 0.721386 (* 1 = 0.721386 loss)
I0428 19:57:04.192836 28582 solver.cpp:219] Iteration 500 (778.312 iter/s, 0.128483s/100 iters), loss = 0.96894
I0428 19:57:04.192876 28582 solver.cpp:238]     Train net output #0: loss = 0.96894 (* 1 = 0.96894 loss)
I0428 19:57:04.192899 28582 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:04.271847 28582 solver.cpp:219] Iteration 600 (1266.4 iter/s, 0.0789637s/100 iters), loss = 0.67189
I0428 19:57:04.271885 28582 solver.cpp:238]     Train net output #0: loss = 0.67189 (* 1 = 0.67189 loss)
I0428 19:57:04.271891 28582 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:04.347421 28582 solver.cpp:219] Iteration 700 (1323.76 iter/s, 0.0755425s/100 iters), loss = 0.712278
I0428 19:57:04.347460 28582 solver.cpp:238]     Train net output #0: loss = 0.712278 (* 1 = 0.712278 loss)
I0428 19:57:04.347466 28582 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:04.424366 28582 solver.cpp:219] Iteration 800 (1300.18 iter/s, 0.0769126s/100 iters), loss = 0.403007
I0428 19:57:04.424420 28582 solver.cpp:238]     Train net output #0: loss = 0.403007 (* 1 = 0.403007 loss)
I0428 19:57:04.424427 28582 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:04.499068 28582 solver.cpp:219] Iteration 900 (1339.52 iter/s, 0.0746537s/100 iters), loss = 0.55907
I0428 19:57:04.499090 28582 solver.cpp:238]     Train net output #0: loss = 0.55907 (* 1 = 0.55907 loss)
I0428 19:57:04.499096 28582 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:04.524336 28588 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:04.574175 28582 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:04.574954 28582 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:04.575445 28582 solver.cpp:311] Iteration 1000, loss = 0.591616
I0428 19:57:04.575490 28582 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:04.628872 28589 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:04.629390 28582 solver.cpp:398]     Test net output #0: accuracy = 0.8394
I0428 19:57:04.629407 28582 solver.cpp:398]     Test net output #1: loss = 0.427393 (* 1 = 0.427393 loss)
I0428 19:57:04.629427 28582 solver.cpp:316] Optimization Done.
I0428 19:57:04.629431 28582 caffe.cpp:259] Optimization Done.
