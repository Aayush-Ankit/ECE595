I0428 20:02:03.751169 29865 caffe.cpp:218] Using GPUs 0
I0428 20:02:03.780062 29865 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:04.226471 29865 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test919.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:04.226624 29865 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test919.prototxt
I0428 20:02:04.226974 29865 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:04.227005 29865 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:04.227087 29865 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:04.227150 29865 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:04.227231 29865 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:04.227252 29865 net.cpp:86] Creating Layer mnist
I0428 20:02:04.227258 29865 net.cpp:382] mnist -> data
I0428 20:02:04.227277 29865 net.cpp:382] mnist -> label
I0428 20:02:04.228262 29865 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:04.230556 29865 net.cpp:124] Setting up mnist
I0428 20:02:04.230588 29865 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:04.230594 29865 net.cpp:131] Top shape: 64 (64)
I0428 20:02:04.230597 29865 net.cpp:139] Memory required for data: 200960
I0428 20:02:04.230603 29865 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:04.230617 29865 net.cpp:86] Creating Layer conv0
I0428 20:02:04.230633 29865 net.cpp:408] conv0 <- data
I0428 20:02:04.230643 29865 net.cpp:382] conv0 -> conv0
I0428 20:02:04.461400 29865 net.cpp:124] Setting up conv0
I0428 20:02:04.461443 29865 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:04.461463 29865 net.cpp:139] Memory required for data: 1675520
I0428 20:02:04.461478 29865 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:04.461493 29865 net.cpp:86] Creating Layer pool0
I0428 20:02:04.461496 29865 net.cpp:408] pool0 <- conv0
I0428 20:02:04.461500 29865 net.cpp:382] pool0 -> pool0
I0428 20:02:04.461562 29865 net.cpp:124] Setting up pool0
I0428 20:02:04.461567 29865 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:04.461570 29865 net.cpp:139] Memory required for data: 2044160
I0428 20:02:04.461573 29865 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:04.461585 29865 net.cpp:86] Creating Layer conv1
I0428 20:02:04.461587 29865 net.cpp:408] conv1 <- pool0
I0428 20:02:04.461592 29865 net.cpp:382] conv1 -> conv1
I0428 20:02:04.464404 29865 net.cpp:124] Setting up conv1
I0428 20:02:04.464433 29865 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:04.464437 29865 net.cpp:139] Memory required for data: 2863360
I0428 20:02:04.464445 29865 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:04.464452 29865 net.cpp:86] Creating Layer pool1
I0428 20:02:04.464455 29865 net.cpp:408] pool1 <- conv1
I0428 20:02:04.464460 29865 net.cpp:382] pool1 -> pool1
I0428 20:02:04.464511 29865 net.cpp:124] Setting up pool1
I0428 20:02:04.464516 29865 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:04.464519 29865 net.cpp:139] Memory required for data: 3068160
I0428 20:02:04.464524 29865 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:04.464530 29865 net.cpp:86] Creating Layer ip1
I0428 20:02:04.464534 29865 net.cpp:408] ip1 <- pool1
I0428 20:02:04.464539 29865 net.cpp:382] ip1 -> ip1
I0428 20:02:04.464772 29865 net.cpp:124] Setting up ip1
I0428 20:02:04.464781 29865 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:04.464783 29865 net.cpp:139] Memory required for data: 3074560
I0428 20:02:04.464790 29865 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:04.464797 29865 net.cpp:86] Creating Layer relu1
I0428 20:02:04.464800 29865 net.cpp:408] relu1 <- ip1
I0428 20:02:04.464804 29865 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:04.465045 29865 net.cpp:124] Setting up relu1
I0428 20:02:04.465054 29865 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:04.465059 29865 net.cpp:139] Memory required for data: 3080960
I0428 20:02:04.465061 29865 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:04.465068 29865 net.cpp:86] Creating Layer ip2
I0428 20:02:04.465071 29865 net.cpp:408] ip2 <- ip1
I0428 20:02:04.465076 29865 net.cpp:382] ip2 -> ip2
I0428 20:02:04.465195 29865 net.cpp:124] Setting up ip2
I0428 20:02:04.465203 29865 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:04.465205 29865 net.cpp:139] Memory required for data: 3083520
I0428 20:02:04.465210 29865 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:04.465227 29865 net.cpp:86] Creating Layer relu2
I0428 20:02:04.465230 29865 net.cpp:408] relu2 <- ip2
I0428 20:02:04.465250 29865 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:04.466030 29865 net.cpp:124] Setting up relu2
I0428 20:02:04.466042 29865 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:04.466061 29865 net.cpp:139] Memory required for data: 3086080
I0428 20:02:04.466065 29865 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:04.466073 29865 net.cpp:86] Creating Layer ip3
I0428 20:02:04.466091 29865 net.cpp:408] ip3 <- ip2
I0428 20:02:04.466096 29865 net.cpp:382] ip3 -> ip3
I0428 20:02:04.466212 29865 net.cpp:124] Setting up ip3
I0428 20:02:04.466219 29865 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:04.466223 29865 net.cpp:139] Memory required for data: 3088640
I0428 20:02:04.466229 29865 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:04.466245 29865 net.cpp:86] Creating Layer relu3
I0428 20:02:04.466249 29865 net.cpp:408] relu3 <- ip3
I0428 20:02:04.466253 29865 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:04.466423 29865 net.cpp:124] Setting up relu3
I0428 20:02:04.466431 29865 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:04.466434 29865 net.cpp:139] Memory required for data: 3091200
I0428 20:02:04.466437 29865 layer_factory.hpp:77] Creating layer loss
I0428 20:02:04.466444 29865 net.cpp:86] Creating Layer loss
I0428 20:02:04.466446 29865 net.cpp:408] loss <- ip3
I0428 20:02:04.466450 29865 net.cpp:408] loss <- label
I0428 20:02:04.466456 29865 net.cpp:382] loss -> loss
I0428 20:02:04.466473 29865 layer_factory.hpp:77] Creating layer loss
I0428 20:02:04.466713 29865 net.cpp:124] Setting up loss
I0428 20:02:04.466722 29865 net.cpp:131] Top shape: (1)
I0428 20:02:04.466724 29865 net.cpp:134]     with loss weight 1
I0428 20:02:04.466751 29865 net.cpp:139] Memory required for data: 3091204
I0428 20:02:04.466754 29865 net.cpp:200] loss needs backward computation.
I0428 20:02:04.466758 29865 net.cpp:200] relu3 needs backward computation.
I0428 20:02:04.466761 29865 net.cpp:200] ip3 needs backward computation.
I0428 20:02:04.466764 29865 net.cpp:200] relu2 needs backward computation.
I0428 20:02:04.466768 29865 net.cpp:200] ip2 needs backward computation.
I0428 20:02:04.466769 29865 net.cpp:200] relu1 needs backward computation.
I0428 20:02:04.466773 29865 net.cpp:200] ip1 needs backward computation.
I0428 20:02:04.466775 29865 net.cpp:200] pool1 needs backward computation.
I0428 20:02:04.466778 29865 net.cpp:200] conv1 needs backward computation.
I0428 20:02:04.466781 29865 net.cpp:200] pool0 needs backward computation.
I0428 20:02:04.466784 29865 net.cpp:200] conv0 needs backward computation.
I0428 20:02:04.466787 29865 net.cpp:202] mnist does not need backward computation.
I0428 20:02:04.466790 29865 net.cpp:244] This network produces output loss
I0428 20:02:04.466800 29865 net.cpp:257] Network initialization done.
I0428 20:02:04.467197 29865 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test919.prototxt
I0428 20:02:04.467238 29865 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:04.467325 29865 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:04.467420 29865 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:04.467464 29865 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:04.467478 29865 net.cpp:86] Creating Layer mnist
I0428 20:02:04.467483 29865 net.cpp:382] mnist -> data
I0428 20:02:04.467489 29865 net.cpp:382] mnist -> label
I0428 20:02:04.467574 29865 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:04.469802 29865 net.cpp:124] Setting up mnist
I0428 20:02:04.469849 29865 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:04.469854 29865 net.cpp:131] Top shape: 100 (100)
I0428 20:02:04.469857 29865 net.cpp:139] Memory required for data: 314000
I0428 20:02:04.469861 29865 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:04.469887 29865 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:04.469890 29865 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:04.469895 29865 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:04.469902 29865 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:04.470000 29865 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:04.470022 29865 net.cpp:131] Top shape: 100 (100)
I0428 20:02:04.470026 29865 net.cpp:131] Top shape: 100 (100)
I0428 20:02:04.470038 29865 net.cpp:139] Memory required for data: 314800
I0428 20:02:04.470041 29865 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:04.470051 29865 net.cpp:86] Creating Layer conv0
I0428 20:02:04.470057 29865 net.cpp:408] conv0 <- data
I0428 20:02:04.470065 29865 net.cpp:382] conv0 -> conv0
I0428 20:02:04.471817 29865 net.cpp:124] Setting up conv0
I0428 20:02:04.471846 29865 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:04.471849 29865 net.cpp:139] Memory required for data: 2618800
I0428 20:02:04.471858 29865 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:04.471865 29865 net.cpp:86] Creating Layer pool0
I0428 20:02:04.471885 29865 net.cpp:408] pool0 <- conv0
I0428 20:02:04.471890 29865 net.cpp:382] pool0 -> pool0
I0428 20:02:04.471926 29865 net.cpp:124] Setting up pool0
I0428 20:02:04.471933 29865 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:04.471935 29865 net.cpp:139] Memory required for data: 3194800
I0428 20:02:04.471940 29865 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:04.471948 29865 net.cpp:86] Creating Layer conv1
I0428 20:02:04.471952 29865 net.cpp:408] conv1 <- pool0
I0428 20:02:04.471958 29865 net.cpp:382] conv1 -> conv1
I0428 20:02:04.473749 29865 net.cpp:124] Setting up conv1
I0428 20:02:04.473779 29865 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:04.473799 29865 net.cpp:139] Memory required for data: 4474800
I0428 20:02:04.473809 29865 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:04.473815 29865 net.cpp:86] Creating Layer pool1
I0428 20:02:04.473819 29865 net.cpp:408] pool1 <- conv1
I0428 20:02:04.473826 29865 net.cpp:382] pool1 -> pool1
I0428 20:02:04.473865 29865 net.cpp:124] Setting up pool1
I0428 20:02:04.473872 29865 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:04.473876 29865 net.cpp:139] Memory required for data: 4794800
I0428 20:02:04.473879 29865 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:04.473886 29865 net.cpp:86] Creating Layer ip1
I0428 20:02:04.473891 29865 net.cpp:408] ip1 <- pool1
I0428 20:02:04.473897 29865 net.cpp:382] ip1 -> ip1
I0428 20:02:04.474143 29865 net.cpp:124] Setting up ip1
I0428 20:02:04.474150 29865 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:04.474164 29865 net.cpp:139] Memory required for data: 4804800
I0428 20:02:04.474187 29865 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:04.474195 29865 net.cpp:86] Creating Layer relu1
I0428 20:02:04.474198 29865 net.cpp:408] relu1 <- ip1
I0428 20:02:04.474202 29865 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:04.474426 29865 net.cpp:124] Setting up relu1
I0428 20:02:04.474436 29865 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:04.474438 29865 net.cpp:139] Memory required for data: 4814800
I0428 20:02:04.474442 29865 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:04.474464 29865 net.cpp:86] Creating Layer ip2
I0428 20:02:04.474468 29865 net.cpp:408] ip2 <- ip1
I0428 20:02:04.474490 29865 net.cpp:382] ip2 -> ip2
I0428 20:02:04.474611 29865 net.cpp:124] Setting up ip2
I0428 20:02:04.474618 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.474622 29865 net.cpp:139] Memory required for data: 4818800
I0428 20:02:04.474628 29865 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:04.474633 29865 net.cpp:86] Creating Layer relu2
I0428 20:02:04.474648 29865 net.cpp:408] relu2 <- ip2
I0428 20:02:04.474653 29865 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:04.474864 29865 net.cpp:124] Setting up relu2
I0428 20:02:04.474874 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.474876 29865 net.cpp:139] Memory required for data: 4822800
I0428 20:02:04.474880 29865 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:04.474887 29865 net.cpp:86] Creating Layer ip3
I0428 20:02:04.474891 29865 net.cpp:408] ip3 <- ip2
I0428 20:02:04.474896 29865 net.cpp:382] ip3 -> ip3
I0428 20:02:04.475014 29865 net.cpp:124] Setting up ip3
I0428 20:02:04.475020 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.475023 29865 net.cpp:139] Memory required for data: 4826800
I0428 20:02:04.475031 29865 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:04.475038 29865 net.cpp:86] Creating Layer relu3
I0428 20:02:04.475040 29865 net.cpp:408] relu3 <- ip3
I0428 20:02:04.475045 29865 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:04.476011 29865 net.cpp:124] Setting up relu3
I0428 20:02:04.476023 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.476043 29865 net.cpp:139] Memory required for data: 4830800
I0428 20:02:04.476047 29865 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:04.476054 29865 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:04.476058 29865 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:04.476063 29865 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:04.476070 29865 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:04.476110 29865 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:04.476117 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.476121 29865 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:04.476125 29865 net.cpp:139] Memory required for data: 4838800
I0428 20:02:04.476128 29865 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:04.476132 29865 net.cpp:86] Creating Layer accuracy
I0428 20:02:04.476136 29865 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:04.476141 29865 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:04.476147 29865 net.cpp:382] accuracy -> accuracy
I0428 20:02:04.476155 29865 net.cpp:124] Setting up accuracy
I0428 20:02:04.476161 29865 net.cpp:131] Top shape: (1)
I0428 20:02:04.476163 29865 net.cpp:139] Memory required for data: 4838804
I0428 20:02:04.476167 29865 layer_factory.hpp:77] Creating layer loss
I0428 20:02:04.476171 29865 net.cpp:86] Creating Layer loss
I0428 20:02:04.476174 29865 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:04.476178 29865 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:04.476184 29865 net.cpp:382] loss -> loss
I0428 20:02:04.476205 29865 layer_factory.hpp:77] Creating layer loss
I0428 20:02:04.476457 29865 net.cpp:124] Setting up loss
I0428 20:02:04.476465 29865 net.cpp:131] Top shape: (1)
I0428 20:02:04.476469 29865 net.cpp:134]     with loss weight 1
I0428 20:02:04.476485 29865 net.cpp:139] Memory required for data: 4838808
I0428 20:02:04.476490 29865 net.cpp:200] loss needs backward computation.
I0428 20:02:04.476493 29865 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:04.476496 29865 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:04.476500 29865 net.cpp:200] relu3 needs backward computation.
I0428 20:02:04.476502 29865 net.cpp:200] ip3 needs backward computation.
I0428 20:02:04.476505 29865 net.cpp:200] relu2 needs backward computation.
I0428 20:02:04.476507 29865 net.cpp:200] ip2 needs backward computation.
I0428 20:02:04.476511 29865 net.cpp:200] relu1 needs backward computation.
I0428 20:02:04.476513 29865 net.cpp:200] ip1 needs backward computation.
I0428 20:02:04.476516 29865 net.cpp:200] pool1 needs backward computation.
I0428 20:02:04.476519 29865 net.cpp:200] conv1 needs backward computation.
I0428 20:02:04.476522 29865 net.cpp:200] pool0 needs backward computation.
I0428 20:02:04.476526 29865 net.cpp:200] conv0 needs backward computation.
I0428 20:02:04.476529 29865 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:04.476532 29865 net.cpp:202] mnist does not need backward computation.
I0428 20:02:04.476536 29865 net.cpp:244] This network produces output accuracy
I0428 20:02:04.476538 29865 net.cpp:244] This network produces output loss
I0428 20:02:04.476549 29865 net.cpp:257] Network initialization done.
I0428 20:02:04.476605 29865 solver.cpp:56] Solver scaffolding done.
I0428 20:02:04.477079 29865 caffe.cpp:248] Starting Optimization
I0428 20:02:04.477087 29865 solver.cpp:273] Solving LeNet
I0428 20:02:04.477089 29865 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:04.477378 29865 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:04.482712 29865 blocking_queue.cpp:49] Waiting for data
I0428 20:02:04.542246 29872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:04.542776 29865 solver.cpp:398]     Test net output #0: accuracy = 0.0781
I0428 20:02:04.542810 29865 solver.cpp:398]     Test net output #1: loss = 2.35181 (* 1 = 2.35181 loss)
I0428 20:02:04.545991 29865 solver.cpp:219] Iteration 0 (-5.29224e-31 iter/s, 0.0688435s/100 iters), loss = 2.34052
I0428 20:02:04.546030 29865 solver.cpp:238]     Train net output #0: loss = 2.34052 (* 1 = 2.34052 loss)
I0428 20:02:04.546041 29865 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:04.652864 29865 solver.cpp:219] Iteration 100 (936.013 iter/s, 0.106836s/100 iters), loss = 0.919942
I0428 20:02:04.652906 29865 solver.cpp:238]     Train net output #0: loss = 0.919942 (* 1 = 0.919942 loss)
I0428 20:02:04.652912 29865 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:04.763262 29865 solver.cpp:219] Iteration 200 (906.256 iter/s, 0.110344s/100 iters), loss = 0.413167
I0428 20:02:04.763286 29865 solver.cpp:238]     Train net output #0: loss = 0.413167 (* 1 = 0.413167 loss)
I0428 20:02:04.763293 29865 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:04.874565 29865 solver.cpp:219] Iteration 300 (898.749 iter/s, 0.111266s/100 iters), loss = 0.515843
I0428 20:02:04.874593 29865 solver.cpp:238]     Train net output #0: loss = 0.515843 (* 1 = 0.515843 loss)
I0428 20:02:04.874600 29865 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:04.980729 29865 solver.cpp:219] Iteration 400 (942.274 iter/s, 0.106126s/100 iters), loss = 0.39126
I0428 20:02:04.980756 29865 solver.cpp:238]     Train net output #0: loss = 0.39126 (* 1 = 0.39126 loss)
I0428 20:02:04.980778 29865 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:05.087390 29865 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:05.140718 29872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:05.141291 29865 solver.cpp:398]     Test net output #0: accuracy = 0.8601
I0428 20:02:05.141330 29865 solver.cpp:398]     Test net output #1: loss = 0.388994 (* 1 = 0.388994 loss)
I0428 20:02:05.142392 29865 solver.cpp:219] Iteration 500 (618.724 iter/s, 0.161623s/100 iters), loss = 0.386737
I0428 20:02:05.142455 29865 solver.cpp:238]     Train net output #0: loss = 0.386736 (* 1 = 0.386736 loss)
I0428 20:02:05.142465 29865 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:05.255719 29865 solver.cpp:219] Iteration 600 (882.961 iter/s, 0.113255s/100 iters), loss = 0.40211
I0428 20:02:05.255762 29865 solver.cpp:238]     Train net output #0: loss = 0.40211 (* 1 = 0.40211 loss)
I0428 20:02:05.255769 29865 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:05.364542 29865 solver.cpp:219] Iteration 700 (919.247 iter/s, 0.108785s/100 iters), loss = 0.386114
I0428 20:02:05.364568 29865 solver.cpp:238]     Train net output #0: loss = 0.386114 (* 1 = 0.386114 loss)
I0428 20:02:05.364591 29865 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:05.478127 29865 solver.cpp:219] Iteration 800 (880.683 iter/s, 0.113548s/100 iters), loss = 0.524257
I0428 20:02:05.478169 29865 solver.cpp:238]     Train net output #0: loss = 0.524257 (* 1 = 0.524257 loss)
I0428 20:02:05.478176 29865 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:05.593592 29865 solver.cpp:219] Iteration 900 (866.338 iter/s, 0.115428s/100 iters), loss = 0.517719
I0428 20:02:05.593619 29865 solver.cpp:238]     Train net output #0: loss = 0.517719 (* 1 = 0.517719 loss)
I0428 20:02:05.593641 29865 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:05.629387 29871 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:05.698757 29865 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:05.700184 29865 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:05.700961 29865 solver.cpp:311] Iteration 1000, loss = 0.433661
I0428 20:02:05.700978 29865 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:05.776681 29872 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:05.777231 29865 solver.cpp:398]     Test net output #0: accuracy = 0.8768
I0428 20:02:05.777269 29865 solver.cpp:398]     Test net output #1: loss = 0.323394 (* 1 = 0.323394 loss)
I0428 20:02:05.777274 29865 solver.cpp:316] Optimization Done.
I0428 20:02:05.777277 29865 caffe.cpp:259] Optimization Done.
