I0428 19:53:04.566082 27689 caffe.cpp:218] Using GPUs 0
I0428 19:53:04.594847 27689 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:05.037955 27689 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test678.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:05.038089 27689 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test678.prototxt
I0428 19:53:05.038419 27689 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:05.038434 27689 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:05.038511 27689 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:05.038570 27689 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:05.038652 27689 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:05.038672 27689 net.cpp:86] Creating Layer mnist
I0428 19:53:05.038678 27689 net.cpp:382] mnist -> data
I0428 19:53:05.038697 27689 net.cpp:382] mnist -> label
I0428 19:53:05.039664 27689 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:05.042199 27689 net.cpp:124] Setting up mnist
I0428 19:53:05.042229 27689 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:05.042234 27689 net.cpp:131] Top shape: 64 (64)
I0428 19:53:05.042238 27689 net.cpp:139] Memory required for data: 200960
I0428 19:53:05.042246 27689 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:05.042264 27689 net.cpp:86] Creating Layer conv0
I0428 19:53:05.042289 27689 net.cpp:408] conv0 <- data
I0428 19:53:05.042320 27689 net.cpp:382] conv0 -> conv0
I0428 19:53:05.271481 27689 net.cpp:124] Setting up conv0
I0428 19:53:05.271505 27689 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:05.271508 27689 net.cpp:139] Memory required for data: 938240
I0428 19:53:05.271522 27689 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:05.271534 27689 net.cpp:86] Creating Layer pool0
I0428 19:53:05.271538 27689 net.cpp:408] pool0 <- conv0
I0428 19:53:05.271543 27689 net.cpp:382] pool0 -> pool0
I0428 19:53:05.271605 27689 net.cpp:124] Setting up pool0
I0428 19:53:05.271610 27689 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:05.271613 27689 net.cpp:139] Memory required for data: 1122560
I0428 19:53:05.271616 27689 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:05.271626 27689 net.cpp:86] Creating Layer conv1
I0428 19:53:05.271630 27689 net.cpp:408] conv1 <- pool0
I0428 19:53:05.271634 27689 net.cpp:382] conv1 -> conv1
I0428 19:53:05.274394 27689 net.cpp:124] Setting up conv1
I0428 19:53:05.274408 27689 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:05.274412 27689 net.cpp:139] Memory required for data: 1941760
I0428 19:53:05.274420 27689 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:05.274444 27689 net.cpp:86] Creating Layer pool1
I0428 19:53:05.274448 27689 net.cpp:408] pool1 <- conv1
I0428 19:53:05.274453 27689 net.cpp:382] pool1 -> pool1
I0428 19:53:05.274493 27689 net.cpp:124] Setting up pool1
I0428 19:53:05.274518 27689 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:05.274521 27689 net.cpp:139] Memory required for data: 2146560
I0428 19:53:05.274524 27689 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:05.274530 27689 net.cpp:86] Creating Layer ip1
I0428 19:53:05.274533 27689 net.cpp:408] ip1 <- pool1
I0428 19:53:05.274539 27689 net.cpp:382] ip1 -> ip1
I0428 19:53:05.274678 27689 net.cpp:124] Setting up ip1
I0428 19:53:05.274686 27689 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:05.274688 27689 net.cpp:139] Memory required for data: 2149120
I0428 19:53:05.274695 27689 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:05.274701 27689 net.cpp:86] Creating Layer relu1
I0428 19:53:05.274705 27689 net.cpp:408] relu1 <- ip1
I0428 19:53:05.274710 27689 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:05.274871 27689 net.cpp:124] Setting up relu1
I0428 19:53:05.274880 27689 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:05.274883 27689 net.cpp:139] Memory required for data: 2151680
I0428 19:53:05.274886 27689 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:05.274893 27689 net.cpp:86] Creating Layer ip2
I0428 19:53:05.274895 27689 net.cpp:408] ip2 <- ip1
I0428 19:53:05.274900 27689 net.cpp:382] ip2 -> ip2
I0428 19:53:05.274998 27689 net.cpp:124] Setting up ip2
I0428 19:53:05.275005 27689 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:05.275008 27689 net.cpp:139] Memory required for data: 2158080
I0428 19:53:05.275013 27689 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:05.275020 27689 net.cpp:86] Creating Layer relu2
I0428 19:53:05.275024 27689 net.cpp:408] relu2 <- ip2
I0428 19:53:05.275027 27689 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:05.275799 27689 net.cpp:124] Setting up relu2
I0428 19:53:05.275812 27689 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:05.275831 27689 net.cpp:139] Memory required for data: 2164480
I0428 19:53:05.275835 27689 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:05.275842 27689 net.cpp:86] Creating Layer ip3
I0428 19:53:05.275847 27689 net.cpp:408] ip3 <- ip2
I0428 19:53:05.275852 27689 net.cpp:382] ip3 -> ip3
I0428 19:53:05.275949 27689 net.cpp:124] Setting up ip3
I0428 19:53:05.275957 27689 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:05.275962 27689 net.cpp:139] Memory required for data: 2167040
I0428 19:53:05.275974 27689 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:05.275979 27689 net.cpp:86] Creating Layer relu3
I0428 19:53:05.275982 27689 net.cpp:408] relu3 <- ip3
I0428 19:53:05.275986 27689 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:05.276151 27689 net.cpp:124] Setting up relu3
I0428 19:53:05.276160 27689 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:05.276163 27689 net.cpp:139] Memory required for data: 2169600
I0428 19:53:05.276166 27689 layer_factory.hpp:77] Creating layer loss
I0428 19:53:05.276171 27689 net.cpp:86] Creating Layer loss
I0428 19:53:05.276175 27689 net.cpp:408] loss <- ip3
I0428 19:53:05.276178 27689 net.cpp:408] loss <- label
I0428 19:53:05.276183 27689 net.cpp:382] loss -> loss
I0428 19:53:05.276201 27689 layer_factory.hpp:77] Creating layer loss
I0428 19:53:05.276465 27689 net.cpp:124] Setting up loss
I0428 19:53:05.276475 27689 net.cpp:131] Top shape: (1)
I0428 19:53:05.276479 27689 net.cpp:134]     with loss weight 1
I0428 19:53:05.276492 27689 net.cpp:139] Memory required for data: 2169604
I0428 19:53:05.276495 27689 net.cpp:200] loss needs backward computation.
I0428 19:53:05.276499 27689 net.cpp:200] relu3 needs backward computation.
I0428 19:53:05.276504 27689 net.cpp:200] ip3 needs backward computation.
I0428 19:53:05.276509 27689 net.cpp:200] relu2 needs backward computation.
I0428 19:53:05.276512 27689 net.cpp:200] ip2 needs backward computation.
I0428 19:53:05.276517 27689 net.cpp:200] relu1 needs backward computation.
I0428 19:53:05.276536 27689 net.cpp:200] ip1 needs backward computation.
I0428 19:53:05.276541 27689 net.cpp:200] pool1 needs backward computation.
I0428 19:53:05.276547 27689 net.cpp:200] conv1 needs backward computation.
I0428 19:53:05.276552 27689 net.cpp:200] pool0 needs backward computation.
I0428 19:53:05.276557 27689 net.cpp:200] conv0 needs backward computation.
I0428 19:53:05.276562 27689 net.cpp:202] mnist does not need backward computation.
I0428 19:53:05.276567 27689 net.cpp:244] This network produces output loss
I0428 19:53:05.276582 27689 net.cpp:257] Network initialization done.
I0428 19:53:05.276985 27689 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test678.prototxt
I0428 19:53:05.277030 27689 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:05.277132 27689 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:05.277262 27689 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:05.277312 27689 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:05.277324 27689 net.cpp:86] Creating Layer mnist
I0428 19:53:05.277330 27689 net.cpp:382] mnist -> data
I0428 19:53:05.277338 27689 net.cpp:382] mnist -> label
I0428 19:53:05.277423 27689 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:05.279414 27689 net.cpp:124] Setting up mnist
I0428 19:53:05.279443 27689 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:05.279448 27689 net.cpp:131] Top shape: 100 (100)
I0428 19:53:05.279451 27689 net.cpp:139] Memory required for data: 314000
I0428 19:53:05.279454 27689 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:05.279511 27689 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:05.279516 27689 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:05.279521 27689 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:05.279528 27689 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:05.279577 27689 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:05.279585 27689 net.cpp:131] Top shape: 100 (100)
I0428 19:53:05.279588 27689 net.cpp:131] Top shape: 100 (100)
I0428 19:53:05.279592 27689 net.cpp:139] Memory required for data: 314800
I0428 19:53:05.279594 27689 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:05.279603 27689 net.cpp:86] Creating Layer conv0
I0428 19:53:05.279606 27689 net.cpp:408] conv0 <- data
I0428 19:53:05.279613 27689 net.cpp:382] conv0 -> conv0
I0428 19:53:05.281229 27689 net.cpp:124] Setting up conv0
I0428 19:53:05.281242 27689 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:05.281246 27689 net.cpp:139] Memory required for data: 1466800
I0428 19:53:05.281255 27689 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:05.281276 27689 net.cpp:86] Creating Layer pool0
I0428 19:53:05.281280 27689 net.cpp:408] pool0 <- conv0
I0428 19:53:05.281286 27689 net.cpp:382] pool0 -> pool0
I0428 19:53:05.281342 27689 net.cpp:124] Setting up pool0
I0428 19:53:05.281358 27689 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:05.281360 27689 net.cpp:139] Memory required for data: 1754800
I0428 19:53:05.281363 27689 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:05.281373 27689 net.cpp:86] Creating Layer conv1
I0428 19:53:05.281376 27689 net.cpp:408] conv1 <- pool0
I0428 19:53:05.281380 27689 net.cpp:382] conv1 -> conv1
I0428 19:53:05.283042 27689 net.cpp:124] Setting up conv1
I0428 19:53:05.283057 27689 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:05.283061 27689 net.cpp:139] Memory required for data: 3034800
I0428 19:53:05.283071 27689 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:05.283077 27689 net.cpp:86] Creating Layer pool1
I0428 19:53:05.283095 27689 net.cpp:408] pool1 <- conv1
I0428 19:53:05.283102 27689 net.cpp:382] pool1 -> pool1
I0428 19:53:05.283143 27689 net.cpp:124] Setting up pool1
I0428 19:53:05.283149 27689 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:05.283152 27689 net.cpp:139] Memory required for data: 3354800
I0428 19:53:05.283155 27689 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:05.283160 27689 net.cpp:86] Creating Layer ip1
I0428 19:53:05.283164 27689 net.cpp:408] ip1 <- pool1
I0428 19:53:05.283170 27689 net.cpp:382] ip1 -> ip1
I0428 19:53:05.283329 27689 net.cpp:124] Setting up ip1
I0428 19:53:05.283337 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.283354 27689 net.cpp:139] Memory required for data: 3358800
I0428 19:53:05.283362 27689 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:05.283370 27689 net.cpp:86] Creating Layer relu1
I0428 19:53:05.283372 27689 net.cpp:408] relu1 <- ip1
I0428 19:53:05.283377 27689 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:05.283557 27689 net.cpp:124] Setting up relu1
I0428 19:53:05.283566 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.283570 27689 net.cpp:139] Memory required for data: 3362800
I0428 19:53:05.283578 27689 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:05.283588 27689 net.cpp:86] Creating Layer ip2
I0428 19:53:05.283594 27689 net.cpp:408] ip2 <- ip1
I0428 19:53:05.283607 27689 net.cpp:382] ip2 -> ip2
I0428 19:53:05.283710 27689 net.cpp:124] Setting up ip2
I0428 19:53:05.283716 27689 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:05.283720 27689 net.cpp:139] Memory required for data: 3372800
I0428 19:53:05.283725 27689 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:05.283730 27689 net.cpp:86] Creating Layer relu2
I0428 19:53:05.283733 27689 net.cpp:408] relu2 <- ip2
I0428 19:53:05.283737 27689 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:05.283898 27689 net.cpp:124] Setting up relu2
I0428 19:53:05.283906 27689 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:05.283910 27689 net.cpp:139] Memory required for data: 3382800
I0428 19:53:05.283912 27689 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:05.283926 27689 net.cpp:86] Creating Layer ip3
I0428 19:53:05.283928 27689 net.cpp:408] ip3 <- ip2
I0428 19:53:05.283933 27689 net.cpp:382] ip3 -> ip3
I0428 19:53:05.284098 27689 net.cpp:124] Setting up ip3
I0428 19:53:05.284108 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.284111 27689 net.cpp:139] Memory required for data: 3386800
I0428 19:53:05.284118 27689 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:05.284123 27689 net.cpp:86] Creating Layer relu3
I0428 19:53:05.284126 27689 net.cpp:408] relu3 <- ip3
I0428 19:53:05.284132 27689 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:05.285017 27689 net.cpp:124] Setting up relu3
I0428 19:53:05.285032 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.285049 27689 net.cpp:139] Memory required for data: 3390800
I0428 19:53:05.285058 27689 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:05.285064 27689 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:05.285068 27689 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:05.285074 27689 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:05.285081 27689 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:05.285131 27689 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:05.285146 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.285151 27689 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:05.285154 27689 net.cpp:139] Memory required for data: 3398800
I0428 19:53:05.285164 27689 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:05.285184 27689 net.cpp:86] Creating Layer accuracy
I0428 19:53:05.285187 27689 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:05.285192 27689 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:05.285197 27689 net.cpp:382] accuracy -> accuracy
I0428 19:53:05.285204 27689 net.cpp:124] Setting up accuracy
I0428 19:53:05.285223 27689 net.cpp:131] Top shape: (1)
I0428 19:53:05.285226 27689 net.cpp:139] Memory required for data: 3398804
I0428 19:53:05.285234 27689 layer_factory.hpp:77] Creating layer loss
I0428 19:53:05.285240 27689 net.cpp:86] Creating Layer loss
I0428 19:53:05.285244 27689 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:05.285248 27689 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:05.285253 27689 net.cpp:382] loss -> loss
I0428 19:53:05.285259 27689 layer_factory.hpp:77] Creating layer loss
I0428 19:53:05.285547 27689 net.cpp:124] Setting up loss
I0428 19:53:05.285557 27689 net.cpp:131] Top shape: (1)
I0428 19:53:05.285562 27689 net.cpp:134]     with loss weight 1
I0428 19:53:05.285567 27689 net.cpp:139] Memory required for data: 3398808
I0428 19:53:05.285579 27689 net.cpp:200] loss needs backward computation.
I0428 19:53:05.285584 27689 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:05.285588 27689 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:05.285590 27689 net.cpp:200] relu3 needs backward computation.
I0428 19:53:05.285593 27689 net.cpp:200] ip3 needs backward computation.
I0428 19:53:05.285604 27689 net.cpp:200] relu2 needs backward computation.
I0428 19:53:05.285606 27689 net.cpp:200] ip2 needs backward computation.
I0428 19:53:05.285609 27689 net.cpp:200] relu1 needs backward computation.
I0428 19:53:05.285611 27689 net.cpp:200] ip1 needs backward computation.
I0428 19:53:05.285614 27689 net.cpp:200] pool1 needs backward computation.
I0428 19:53:05.285624 27689 net.cpp:200] conv1 needs backward computation.
I0428 19:53:05.285626 27689 net.cpp:200] pool0 needs backward computation.
I0428 19:53:05.285629 27689 net.cpp:200] conv0 needs backward computation.
I0428 19:53:05.285632 27689 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:05.285641 27689 net.cpp:202] mnist does not need backward computation.
I0428 19:53:05.285645 27689 net.cpp:244] This network produces output accuracy
I0428 19:53:05.285648 27689 net.cpp:244] This network produces output loss
I0428 19:53:05.285660 27689 net.cpp:257] Network initialization done.
I0428 19:53:05.285701 27689 solver.cpp:56] Solver scaffolding done.
I0428 19:53:05.286017 27689 caffe.cpp:248] Starting Optimization
I0428 19:53:05.286025 27689 solver.cpp:273] Solving LeNet
I0428 19:53:05.286027 27689 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:05.286243 27689 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:05.290752 27689 blocking_queue.cpp:49] Waiting for data
I0428 19:53:05.361579 27696 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:05.362123 27689 solver.cpp:398]     Test net output #0: accuracy = 0.0886
I0428 19:53:05.362150 27689 solver.cpp:398]     Test net output #1: loss = 2.32489 (* 1 = 2.32489 loss)
I0428 19:53:05.365272 27689 solver.cpp:219] Iteration 0 (0 iter/s, 0.0792096s/100 iters), loss = 2.3385
I0428 19:53:05.365303 27689 solver.cpp:238]     Train net output #0: loss = 2.3385 (* 1 = 2.3385 loss)
I0428 19:53:05.365316 27689 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:05.470070 27689 solver.cpp:219] Iteration 100 (954.608 iter/s, 0.104755s/100 iters), loss = 1.11221
I0428 19:53:05.470099 27689 solver.cpp:238]     Train net output #0: loss = 1.11221 (* 1 = 1.11221 loss)
I0428 19:53:05.470106 27689 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:05.580945 27689 solver.cpp:219] Iteration 200 (902.245 iter/s, 0.110835s/100 iters), loss = 0.34461
I0428 19:53:05.580972 27689 solver.cpp:238]     Train net output #0: loss = 0.34461 (* 1 = 0.34461 loss)
I0428 19:53:05.580979 27689 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:05.682884 27689 solver.cpp:219] Iteration 300 (981.34 iter/s, 0.101902s/100 iters), loss = 0.266578
I0428 19:53:05.682909 27689 solver.cpp:238]     Train net output #0: loss = 0.266578 (* 1 = 0.266578 loss)
I0428 19:53:05.682914 27689 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:05.782634 27689 solver.cpp:219] Iteration 400 (1002.86 iter/s, 0.0997149s/100 iters), loss = 0.132508
I0428 19:53:05.782672 27689 solver.cpp:238]     Train net output #0: loss = 0.132508 (* 1 = 0.132508 loss)
I0428 19:53:05.782696 27689 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:05.883697 27689 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:05.941411 27696 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:05.942023 27689 solver.cpp:398]     Test net output #0: accuracy = 0.9531
I0428 19:53:05.942054 27689 solver.cpp:398]     Test net output #1: loss = 0.157899 (* 1 = 0.157899 loss)
I0428 19:53:05.943359 27689 solver.cpp:219] Iteration 500 (622.387 iter/s, 0.160672s/100 iters), loss = 0.1879
I0428 19:53:05.943397 27689 solver.cpp:238]     Train net output #0: loss = 0.1879 (* 1 = 0.1879 loss)
I0428 19:53:05.943433 27689 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:06.052604 27689 solver.cpp:219] Iteration 600 (915.772 iter/s, 0.109198s/100 iters), loss = 0.140457
I0428 19:53:06.052633 27689 solver.cpp:238]     Train net output #0: loss = 0.140457 (* 1 = 0.140457 loss)
I0428 19:53:06.052640 27689 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:06.160567 27689 solver.cpp:219] Iteration 700 (926.602 iter/s, 0.107921s/100 iters), loss = 0.194675
I0428 19:53:06.160609 27689 solver.cpp:238]     Train net output #0: loss = 0.194675 (* 1 = 0.194675 loss)
I0428 19:53:06.160619 27689 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:06.270790 27689 solver.cpp:219] Iteration 800 (907.662 iter/s, 0.110173s/100 iters), loss = 0.205576
I0428 19:53:06.270819 27689 solver.cpp:238]     Train net output #0: loss = 0.205576 (* 1 = 0.205576 loss)
I0428 19:53:06.270826 27689 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:06.378502 27689 solver.cpp:219] Iteration 900 (928.777 iter/s, 0.107668s/100 iters), loss = 0.160672
I0428 19:53:06.378541 27689 solver.cpp:238]     Train net output #0: loss = 0.160672 (* 1 = 0.160672 loss)
I0428 19:53:06.378551 27689 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:06.415069 27695 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:06.485409 27689 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:06.486652 27689 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:06.487334 27689 solver.cpp:311] Iteration 1000, loss = 0.133437
I0428 19:53:06.487356 27689 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:06.590618 27696 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:06.591330 27689 solver.cpp:398]     Test net output #0: accuracy = 0.9713
I0428 19:53:06.591361 27689 solver.cpp:398]     Test net output #1: loss = 0.0905308 (* 1 = 0.0905308 loss)
I0428 19:53:06.591377 27689 solver.cpp:316] Optimization Done.
I0428 19:53:06.591382 27689 caffe.cpp:259] Optimization Done.
