I0428 19:57:23.161553 28667 caffe.cpp:218] Using GPUs 0
I0428 19:57:23.198690 28667 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:23.702347 28667 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test787.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:23.702483 28667 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test787.prototxt
I0428 19:57:23.702857 28667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:23.702874 28667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:23.702965 28667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:23.703037 28667 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:23.703133 28667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:23.703156 28667 net.cpp:86] Creating Layer mnist
I0428 19:57:23.703163 28667 net.cpp:382] mnist -> data
I0428 19:57:23.703186 28667 net.cpp:382] mnist -> label
I0428 19:57:23.704257 28667 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:23.706689 28667 net.cpp:124] Setting up mnist
I0428 19:57:23.706708 28667 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:23.706714 28667 net.cpp:131] Top shape: 64 (64)
I0428 19:57:23.706718 28667 net.cpp:139] Memory required for data: 200960
I0428 19:57:23.706725 28667 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:23.706742 28667 net.cpp:86] Creating Layer conv0
I0428 19:57:23.706748 28667 net.cpp:408] conv0 <- data
I0428 19:57:23.706759 28667 net.cpp:382] conv0 -> conv0
I0428 19:57:23.960175 28667 net.cpp:124] Setting up conv0
I0428 19:57:23.960217 28667 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:23.960222 28667 net.cpp:139] Memory required for data: 1675520
I0428 19:57:23.960270 28667 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:23.960299 28667 net.cpp:86] Creating Layer pool0
I0428 19:57:23.960302 28667 net.cpp:408] pool0 <- conv0
I0428 19:57:23.960309 28667 net.cpp:382] pool0 -> pool0
I0428 19:57:23.960355 28667 net.cpp:124] Setting up pool0
I0428 19:57:23.960360 28667 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:23.960362 28667 net.cpp:139] Memory required for data: 2044160
I0428 19:57:23.960366 28667 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:23.960376 28667 net.cpp:86] Creating Layer conv1
I0428 19:57:23.960379 28667 net.cpp:408] conv1 <- pool0
I0428 19:57:23.960383 28667 net.cpp:382] conv1 -> conv1
I0428 19:57:23.963364 28667 net.cpp:124] Setting up conv1
I0428 19:57:23.963393 28667 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:23.963397 28667 net.cpp:139] Memory required for data: 2126080
I0428 19:57:23.963404 28667 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:23.963413 28667 net.cpp:86] Creating Layer pool1
I0428 19:57:23.963415 28667 net.cpp:408] pool1 <- conv1
I0428 19:57:23.963420 28667 net.cpp:382] pool1 -> pool1
I0428 19:57:23.963455 28667 net.cpp:124] Setting up pool1
I0428 19:57:23.963459 28667 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:23.963462 28667 net.cpp:139] Memory required for data: 2146560
I0428 19:57:23.963465 28667 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:23.963474 28667 net.cpp:86] Creating Layer ip1
I0428 19:57:23.963476 28667 net.cpp:408] ip1 <- pool1
I0428 19:57:23.963485 28667 net.cpp:382] ip1 -> ip1
I0428 19:57:23.963587 28667 net.cpp:124] Setting up ip1
I0428 19:57:23.963594 28667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:23.963598 28667 net.cpp:139] Memory required for data: 2152960
I0428 19:57:23.963604 28667 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:23.963609 28667 net.cpp:86] Creating Layer relu1
I0428 19:57:23.963613 28667 net.cpp:408] relu1 <- ip1
I0428 19:57:23.963616 28667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:23.963796 28667 net.cpp:124] Setting up relu1
I0428 19:57:23.963804 28667 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:23.963807 28667 net.cpp:139] Memory required for data: 2159360
I0428 19:57:23.963810 28667 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:23.963819 28667 net.cpp:86] Creating Layer ip2
I0428 19:57:23.963821 28667 net.cpp:408] ip2 <- ip1
I0428 19:57:23.963827 28667 net.cpp:382] ip2 -> ip2
I0428 19:57:23.963940 28667 net.cpp:124] Setting up ip2
I0428 19:57:23.963948 28667 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:23.963951 28667 net.cpp:139] Memory required for data: 2161920
I0428 19:57:23.963973 28667 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:23.963979 28667 net.cpp:86] Creating Layer relu2
I0428 19:57:23.963982 28667 net.cpp:408] relu2 <- ip2
I0428 19:57:23.963986 28667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:23.964776 28667 net.cpp:124] Setting up relu2
I0428 19:57:23.964787 28667 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:23.964805 28667 net.cpp:139] Memory required for data: 2164480
I0428 19:57:23.964813 28667 layer_factory.hpp:77] Creating layer loss
I0428 19:57:23.964833 28667 net.cpp:86] Creating Layer loss
I0428 19:57:23.964835 28667 net.cpp:408] loss <- ip2
I0428 19:57:23.964839 28667 net.cpp:408] loss <- label
I0428 19:57:23.964844 28667 net.cpp:382] loss -> loss
I0428 19:57:23.964879 28667 layer_factory.hpp:77] Creating layer loss
I0428 19:57:23.965170 28667 net.cpp:124] Setting up loss
I0428 19:57:23.965179 28667 net.cpp:131] Top shape: (1)
I0428 19:57:23.965183 28667 net.cpp:134]     with loss weight 1
I0428 19:57:23.965198 28667 net.cpp:139] Memory required for data: 2164484
I0428 19:57:23.965201 28667 net.cpp:200] loss needs backward computation.
I0428 19:57:23.965205 28667 net.cpp:200] relu2 needs backward computation.
I0428 19:57:23.965209 28667 net.cpp:200] ip2 needs backward computation.
I0428 19:57:23.965212 28667 net.cpp:200] relu1 needs backward computation.
I0428 19:57:23.965215 28667 net.cpp:200] ip1 needs backward computation.
I0428 19:57:23.965230 28667 net.cpp:200] pool1 needs backward computation.
I0428 19:57:23.965234 28667 net.cpp:200] conv1 needs backward computation.
I0428 19:57:23.965237 28667 net.cpp:200] pool0 needs backward computation.
I0428 19:57:23.965240 28667 net.cpp:200] conv0 needs backward computation.
I0428 19:57:23.965243 28667 net.cpp:202] mnist does not need backward computation.
I0428 19:57:23.965246 28667 net.cpp:244] This network produces output loss
I0428 19:57:23.965271 28667 net.cpp:257] Network initialization done.
I0428 19:57:23.965598 28667 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test787.prototxt
I0428 19:57:23.965638 28667 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:23.965723 28667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:23.965822 28667 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:23.965868 28667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:23.965883 28667 net.cpp:86] Creating Layer mnist
I0428 19:57:23.965889 28667 net.cpp:382] mnist -> data
I0428 19:57:23.965896 28667 net.cpp:382] mnist -> label
I0428 19:57:23.965987 28667 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:23.968060 28667 net.cpp:124] Setting up mnist
I0428 19:57:23.968087 28667 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:23.968108 28667 net.cpp:131] Top shape: 100 (100)
I0428 19:57:23.968111 28667 net.cpp:139] Memory required for data: 314000
I0428 19:57:23.968116 28667 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:23.968145 28667 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:23.968150 28667 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:23.968154 28667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:23.968161 28667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:23.968207 28667 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:23.968224 28667 net.cpp:131] Top shape: 100 (100)
I0428 19:57:23.968227 28667 net.cpp:131] Top shape: 100 (100)
I0428 19:57:23.968245 28667 net.cpp:139] Memory required for data: 314800
I0428 19:57:23.968248 28667 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:23.968258 28667 net.cpp:86] Creating Layer conv0
I0428 19:57:23.968261 28667 net.cpp:408] conv0 <- data
I0428 19:57:23.968271 28667 net.cpp:382] conv0 -> conv0
I0428 19:57:23.970207 28667 net.cpp:124] Setting up conv0
I0428 19:57:23.970237 28667 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:23.970240 28667 net.cpp:139] Memory required for data: 2618800
I0428 19:57:23.970249 28667 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:23.970257 28667 net.cpp:86] Creating Layer pool0
I0428 19:57:23.970262 28667 net.cpp:408] pool0 <- conv0
I0428 19:57:23.970265 28667 net.cpp:382] pool0 -> pool0
I0428 19:57:23.970301 28667 net.cpp:124] Setting up pool0
I0428 19:57:23.970306 28667 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:23.970309 28667 net.cpp:139] Memory required for data: 3194800
I0428 19:57:23.970311 28667 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:23.970321 28667 net.cpp:86] Creating Layer conv1
I0428 19:57:23.970324 28667 net.cpp:408] conv1 <- pool0
I0428 19:57:23.970330 28667 net.cpp:382] conv1 -> conv1
I0428 19:57:23.972566 28667 net.cpp:124] Setting up conv1
I0428 19:57:23.972578 28667 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:23.972599 28667 net.cpp:139] Memory required for data: 3322800
I0428 19:57:23.972609 28667 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:23.972630 28667 net.cpp:86] Creating Layer pool1
I0428 19:57:23.972633 28667 net.cpp:408] pool1 <- conv1
I0428 19:57:23.972656 28667 net.cpp:382] pool1 -> pool1
I0428 19:57:23.972697 28667 net.cpp:124] Setting up pool1
I0428 19:57:23.972702 28667 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:23.972705 28667 net.cpp:139] Memory required for data: 3354800
I0428 19:57:23.972708 28667 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:23.972715 28667 net.cpp:86] Creating Layer ip1
I0428 19:57:23.972719 28667 net.cpp:408] ip1 <- pool1
I0428 19:57:23.972723 28667 net.cpp:382] ip1 -> ip1
I0428 19:57:23.972890 28667 net.cpp:124] Setting up ip1
I0428 19:57:23.972899 28667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:23.972903 28667 net.cpp:139] Memory required for data: 3364800
I0428 19:57:23.972910 28667 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:23.972919 28667 net.cpp:86] Creating Layer relu1
I0428 19:57:23.972923 28667 net.cpp:408] relu1 <- ip1
I0428 19:57:23.972929 28667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:23.973121 28667 net.cpp:124] Setting up relu1
I0428 19:57:23.973130 28667 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:23.973134 28667 net.cpp:139] Memory required for data: 3374800
I0428 19:57:23.973139 28667 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:23.973146 28667 net.cpp:86] Creating Layer ip2
I0428 19:57:23.973150 28667 net.cpp:408] ip2 <- ip1
I0428 19:57:23.973155 28667 net.cpp:382] ip2 -> ip2
I0428 19:57:23.973273 28667 net.cpp:124] Setting up ip2
I0428 19:57:23.973280 28667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:23.973284 28667 net.cpp:139] Memory required for data: 3378800
I0428 19:57:23.973289 28667 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:23.973294 28667 net.cpp:86] Creating Layer relu2
I0428 19:57:23.973297 28667 net.cpp:408] relu2 <- ip2
I0428 19:57:23.973301 28667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:23.973461 28667 net.cpp:124] Setting up relu2
I0428 19:57:23.973469 28667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:23.973472 28667 net.cpp:139] Memory required for data: 3382800
I0428 19:57:23.973475 28667 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:23.973479 28667 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:23.973482 28667 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:23.973486 28667 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:23.973503 28667 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:23.973543 28667 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:23.973549 28667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:23.973553 28667 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:23.973556 28667 net.cpp:139] Memory required for data: 3390800
I0428 19:57:23.973565 28667 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:23.973572 28667 net.cpp:86] Creating Layer accuracy
I0428 19:57:23.973575 28667 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:23.973579 28667 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:23.973583 28667 net.cpp:382] accuracy -> accuracy
I0428 19:57:23.973589 28667 net.cpp:124] Setting up accuracy
I0428 19:57:23.973593 28667 net.cpp:131] Top shape: (1)
I0428 19:57:23.973597 28667 net.cpp:139] Memory required for data: 3390804
I0428 19:57:23.973599 28667 layer_factory.hpp:77] Creating layer loss
I0428 19:57:23.973604 28667 net.cpp:86] Creating Layer loss
I0428 19:57:23.973608 28667 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:23.973611 28667 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:23.973615 28667 net.cpp:382] loss -> loss
I0428 19:57:23.973620 28667 layer_factory.hpp:77] Creating layer loss
I0428 19:57:23.973924 28667 net.cpp:124] Setting up loss
I0428 19:57:23.973933 28667 net.cpp:131] Top shape: (1)
I0428 19:57:23.973937 28667 net.cpp:134]     with loss weight 1
I0428 19:57:23.973944 28667 net.cpp:139] Memory required for data: 3390808
I0428 19:57:23.973948 28667 net.cpp:200] loss needs backward computation.
I0428 19:57:23.973951 28667 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:23.973955 28667 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:23.973958 28667 net.cpp:200] relu2 needs backward computation.
I0428 19:57:23.973963 28667 net.cpp:200] ip2 needs backward computation.
I0428 19:57:23.973966 28667 net.cpp:200] relu1 needs backward computation.
I0428 19:57:23.973969 28667 net.cpp:200] ip1 needs backward computation.
I0428 19:57:23.973973 28667 net.cpp:200] pool1 needs backward computation.
I0428 19:57:23.973975 28667 net.cpp:200] conv1 needs backward computation.
I0428 19:57:23.973985 28667 net.cpp:200] pool0 needs backward computation.
I0428 19:57:23.973989 28667 net.cpp:200] conv0 needs backward computation.
I0428 19:57:23.973995 28667 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:23.973999 28667 net.cpp:202] mnist does not need backward computation.
I0428 19:57:23.974002 28667 net.cpp:244] This network produces output accuracy
I0428 19:57:23.974005 28667 net.cpp:244] This network produces output loss
I0428 19:57:23.974015 28667 net.cpp:257] Network initialization done.
I0428 19:57:23.974083 28667 solver.cpp:56] Solver scaffolding done.
I0428 19:57:23.974356 28667 caffe.cpp:248] Starting Optimization
I0428 19:57:23.974362 28667 solver.cpp:273] Solving LeNet
I0428 19:57:23.974376 28667 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:23.974540 28667 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:23.978374 28667 blocking_queue.cpp:49] Waiting for data
I0428 19:57:24.051163 28674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:24.051668 28667 solver.cpp:398]     Test net output #0: accuracy = 0.126
I0428 19:57:24.051704 28667 solver.cpp:398]     Test net output #1: loss = 2.32496 (* 1 = 2.32496 loss)
I0428 19:57:24.054250 28667 solver.cpp:219] Iteration 0 (0 iter/s, 0.0798372s/100 iters), loss = 2.32067
I0428 19:57:24.054289 28667 solver.cpp:238]     Train net output #0: loss = 2.32067 (* 1 = 2.32067 loss)
I0428 19:57:24.054301 28667 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:24.138733 28667 solver.cpp:219] Iteration 100 (1184.46 iter/s, 0.0844268s/100 iters), loss = 0.582462
I0428 19:57:24.138783 28667 solver.cpp:238]     Train net output #0: loss = 0.582462 (* 1 = 0.582462 loss)
I0428 19:57:24.138792 28667 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:24.214526 28667 solver.cpp:219] Iteration 200 (1320.45 iter/s, 0.075732s/100 iters), loss = 0.659844
I0428 19:57:24.214604 28667 solver.cpp:238]     Train net output #0: loss = 0.659844 (* 1 = 0.659844 loss)
I0428 19:57:24.214630 28667 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:24.296211 28667 solver.cpp:219] Iteration 300 (1225.51 iter/s, 0.0815985s/100 iters), loss = 0.495798
I0428 19:57:24.296243 28667 solver.cpp:238]     Train net output #0: loss = 0.495798 (* 1 = 0.495798 loss)
I0428 19:57:24.296252 28667 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:24.367300 28667 solver.cpp:219] Iteration 400 (1407.52 iter/s, 0.0710472s/100 iters), loss = 0.277155
I0428 19:57:24.367339 28667 solver.cpp:238]     Train net output #0: loss = 0.277155 (* 1 = 0.277155 loss)
I0428 19:57:24.367347 28667 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:24.437386 28667 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:24.483330 28674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:24.483842 28667 solver.cpp:398]     Test net output #0: accuracy = 0.9492
I0428 19:57:24.483867 28667 solver.cpp:398]     Test net output #1: loss = 0.164225 (* 1 = 0.164225 loss)
I0428 19:57:24.484654 28667 solver.cpp:219] Iteration 500 (852.403 iter/s, 0.117315s/100 iters), loss = 0.138974
I0428 19:57:24.484701 28667 solver.cpp:238]     Train net output #0: loss = 0.138974 (* 1 = 0.138974 loss)
I0428 19:57:24.484709 28667 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:24.559315 28667 solver.cpp:219] Iteration 600 (1340.13 iter/s, 0.0746198s/100 iters), loss = 0.189956
I0428 19:57:24.559345 28667 solver.cpp:238]     Train net output #0: loss = 0.189956 (* 1 = 0.189956 loss)
I0428 19:57:24.559355 28667 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:24.629451 28667 solver.cpp:219] Iteration 700 (1426.58 iter/s, 0.0700979s/100 iters), loss = 0.265839
I0428 19:57:24.629479 28667 solver.cpp:238]     Train net output #0: loss = 0.265839 (* 1 = 0.265839 loss)
I0428 19:57:24.629490 28667 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:24.699702 28667 solver.cpp:219] Iteration 800 (1424.22 iter/s, 0.0702136s/100 iters), loss = 0.30692
I0428 19:57:24.699729 28667 solver.cpp:238]     Train net output #0: loss = 0.30692 (* 1 = 0.30692 loss)
I0428 19:57:24.699738 28667 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:24.770354 28667 solver.cpp:219] Iteration 900 (1416.13 iter/s, 0.0706151s/100 iters), loss = 0.307024
I0428 19:57:24.770382 28667 solver.cpp:238]     Train net output #0: loss = 0.307024 (* 1 = 0.307024 loss)
I0428 19:57:24.770390 28667 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:24.794041 28673 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:24.840101 28667 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:24.840793 28667 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:24.841251 28667 solver.cpp:311] Iteration 1000, loss = 0.174366
I0428 19:57:24.841269 28667 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:24.908803 28674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:24.909297 28667 solver.cpp:398]     Test net output #0: accuracy = 0.966
I0428 19:57:24.909319 28667 solver.cpp:398]     Test net output #1: loss = 0.104007 (* 1 = 0.104007 loss)
I0428 19:57:24.909325 28667 solver.cpp:316] Optimization Done.
I0428 19:57:24.909332 28667 caffe.cpp:259] Optimization Done.
