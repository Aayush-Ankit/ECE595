I0428 19:58:13.183256 28920 caffe.cpp:218] Using GPUs 0
I0428 19:58:13.213953 28920 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:13.661296 28920 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test812.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:13.661418 28920 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test812.prototxt
I0428 19:58:13.661775 28920 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:13.661808 28920 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:13.661900 28920 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:13.661968 28920 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:13.662065 28920 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:13.662086 28920 net.cpp:86] Creating Layer mnist
I0428 19:58:13.662093 28920 net.cpp:382] mnist -> data
I0428 19:58:13.662111 28920 net.cpp:382] mnist -> label
I0428 19:58:13.663111 28920 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:13.665369 28920 net.cpp:124] Setting up mnist
I0428 19:58:13.665383 28920 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:13.665390 28920 net.cpp:131] Top shape: 64 (64)
I0428 19:58:13.665391 28920 net.cpp:139] Memory required for data: 200960
I0428 19:58:13.665397 28920 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:13.665410 28920 net.cpp:86] Creating Layer conv0
I0428 19:58:13.665427 28920 net.cpp:408] conv0 <- data
I0428 19:58:13.665436 28920 net.cpp:382] conv0 -> conv0
I0428 19:58:13.895612 28920 net.cpp:124] Setting up conv0
I0428 19:58:13.895638 28920 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:13.895642 28920 net.cpp:139] Memory required for data: 1675520
I0428 19:58:13.895671 28920 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:13.895699 28920 net.cpp:86] Creating Layer pool0
I0428 19:58:13.895707 28920 net.cpp:408] pool0 <- conv0
I0428 19:58:13.895712 28920 net.cpp:382] pool0 -> pool0
I0428 19:58:13.895756 28920 net.cpp:124] Setting up pool0
I0428 19:58:13.895762 28920 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:13.895766 28920 net.cpp:139] Memory required for data: 2044160
I0428 19:58:13.895768 28920 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:13.895778 28920 net.cpp:86] Creating Layer conv1
I0428 19:58:13.895781 28920 net.cpp:408] conv1 <- pool0
I0428 19:58:13.895787 28920 net.cpp:382] conv1 -> conv1
I0428 19:58:13.898536 28920 net.cpp:124] Setting up conv1
I0428 19:58:13.898550 28920 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:13.898555 28920 net.cpp:139] Memory required for data: 2126080
I0428 19:58:13.898581 28920 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:13.898591 28920 net.cpp:86] Creating Layer pool1
I0428 19:58:13.898597 28920 net.cpp:408] pool1 <- conv1
I0428 19:58:13.898602 28920 net.cpp:382] pool1 -> pool1
I0428 19:58:13.898636 28920 net.cpp:124] Setting up pool1
I0428 19:58:13.898643 28920 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:13.898663 28920 net.cpp:139] Memory required for data: 2146560
I0428 19:58:13.898666 28920 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:13.898674 28920 net.cpp:86] Creating Layer ip1
I0428 19:58:13.898676 28920 net.cpp:408] ip1 <- pool1
I0428 19:58:13.898681 28920 net.cpp:382] ip1 -> ip1
I0428 19:58:13.898805 28920 net.cpp:124] Setting up ip1
I0428 19:58:13.898813 28920 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:13.898815 28920 net.cpp:139] Memory required for data: 2159360
I0428 19:58:13.898823 28920 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:13.898828 28920 net.cpp:86] Creating Layer relu1
I0428 19:58:13.898831 28920 net.cpp:408] relu1 <- ip1
I0428 19:58:13.898835 28920 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:13.899008 28920 net.cpp:124] Setting up relu1
I0428 19:58:13.899016 28920 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:13.899019 28920 net.cpp:139] Memory required for data: 2172160
I0428 19:58:13.899022 28920 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:13.899029 28920 net.cpp:86] Creating Layer ip2
I0428 19:58:13.899031 28920 net.cpp:408] ip2 <- ip1
I0428 19:58:13.899035 28920 net.cpp:382] ip2 -> ip2
I0428 19:58:13.899127 28920 net.cpp:124] Setting up ip2
I0428 19:58:13.899134 28920 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:13.899137 28920 net.cpp:139] Memory required for data: 2174720
I0428 19:58:13.899142 28920 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:13.899147 28920 net.cpp:86] Creating Layer relu2
I0428 19:58:13.899150 28920 net.cpp:408] relu2 <- ip2
I0428 19:58:13.899155 28920 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:13.899932 28920 net.cpp:124] Setting up relu2
I0428 19:58:13.899945 28920 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:13.899948 28920 net.cpp:139] Memory required for data: 2177280
I0428 19:58:13.899951 28920 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:13.899958 28920 net.cpp:86] Creating Layer ip3
I0428 19:58:13.899961 28920 net.cpp:408] ip3 <- ip2
I0428 19:58:13.899967 28920 net.cpp:382] ip3 -> ip3
I0428 19:58:13.900075 28920 net.cpp:124] Setting up ip3
I0428 19:58:13.900082 28920 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:13.900085 28920 net.cpp:139] Memory required for data: 2179840
I0428 19:58:13.900092 28920 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:13.900097 28920 net.cpp:86] Creating Layer relu3
I0428 19:58:13.900099 28920 net.cpp:408] relu3 <- ip3
I0428 19:58:13.900104 28920 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:13.900274 28920 net.cpp:124] Setting up relu3
I0428 19:58:13.900280 28920 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:13.900283 28920 net.cpp:139] Memory required for data: 2182400
I0428 19:58:13.900286 28920 layer_factory.hpp:77] Creating layer loss
I0428 19:58:13.900292 28920 net.cpp:86] Creating Layer loss
I0428 19:58:13.900295 28920 net.cpp:408] loss <- ip3
I0428 19:58:13.900298 28920 net.cpp:408] loss <- label
I0428 19:58:13.900303 28920 net.cpp:382] loss -> loss
I0428 19:58:13.900321 28920 layer_factory.hpp:77] Creating layer loss
I0428 19:58:13.900570 28920 net.cpp:124] Setting up loss
I0428 19:58:13.900578 28920 net.cpp:131] Top shape: (1)
I0428 19:58:13.900581 28920 net.cpp:134]     with loss weight 1
I0428 19:58:13.900596 28920 net.cpp:139] Memory required for data: 2182404
I0428 19:58:13.900600 28920 net.cpp:200] loss needs backward computation.
I0428 19:58:13.900604 28920 net.cpp:200] relu3 needs backward computation.
I0428 19:58:13.900606 28920 net.cpp:200] ip3 needs backward computation.
I0428 19:58:13.900609 28920 net.cpp:200] relu2 needs backward computation.
I0428 19:58:13.900612 28920 net.cpp:200] ip2 needs backward computation.
I0428 19:58:13.900615 28920 net.cpp:200] relu1 needs backward computation.
I0428 19:58:13.900617 28920 net.cpp:200] ip1 needs backward computation.
I0428 19:58:13.900620 28920 net.cpp:200] pool1 needs backward computation.
I0428 19:58:13.900624 28920 net.cpp:200] conv1 needs backward computation.
I0428 19:58:13.900626 28920 net.cpp:200] pool0 needs backward computation.
I0428 19:58:13.900629 28920 net.cpp:200] conv0 needs backward computation.
I0428 19:58:13.900634 28920 net.cpp:202] mnist does not need backward computation.
I0428 19:58:13.900635 28920 net.cpp:244] This network produces output loss
I0428 19:58:13.900645 28920 net.cpp:257] Network initialization done.
I0428 19:58:13.901049 28920 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test812.prototxt
I0428 19:58:13.901094 28920 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:13.901235 28920 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:13.901314 28920 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:13.901356 28920 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:13.901368 28920 net.cpp:86] Creating Layer mnist
I0428 19:58:13.901387 28920 net.cpp:382] mnist -> data
I0428 19:58:13.901394 28920 net.cpp:382] mnist -> label
I0428 19:58:13.901487 28920 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:13.903501 28920 net.cpp:124] Setting up mnist
I0428 19:58:13.903515 28920 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:13.903535 28920 net.cpp:131] Top shape: 100 (100)
I0428 19:58:13.903538 28920 net.cpp:139] Memory required for data: 314000
I0428 19:58:13.903542 28920 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:13.903553 28920 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:13.903556 28920 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:13.903561 28920 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:13.903568 28920 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:13.903610 28920 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:13.903615 28920 net.cpp:131] Top shape: 100 (100)
I0428 19:58:13.903620 28920 net.cpp:131] Top shape: 100 (100)
I0428 19:58:13.903621 28920 net.cpp:139] Memory required for data: 314800
I0428 19:58:13.903625 28920 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:13.903633 28920 net.cpp:86] Creating Layer conv0
I0428 19:58:13.903636 28920 net.cpp:408] conv0 <- data
I0428 19:58:13.903642 28920 net.cpp:382] conv0 -> conv0
I0428 19:58:13.905236 28920 net.cpp:124] Setting up conv0
I0428 19:58:13.905264 28920 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:13.905268 28920 net.cpp:139] Memory required for data: 2618800
I0428 19:58:13.905278 28920 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:13.905285 28920 net.cpp:86] Creating Layer pool0
I0428 19:58:13.905304 28920 net.cpp:408] pool0 <- conv0
I0428 19:58:13.905309 28920 net.cpp:382] pool0 -> pool0
I0428 19:58:13.905397 28920 net.cpp:124] Setting up pool0
I0428 19:58:13.905407 28920 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:13.905411 28920 net.cpp:139] Memory required for data: 3194800
I0428 19:58:13.905416 28920 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:13.905426 28920 net.cpp:86] Creating Layer conv1
I0428 19:58:13.905428 28920 net.cpp:408] conv1 <- pool0
I0428 19:58:13.905436 28920 net.cpp:382] conv1 -> conv1
I0428 19:58:13.907629 28920 net.cpp:124] Setting up conv1
I0428 19:58:13.907657 28920 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:13.907661 28920 net.cpp:139] Memory required for data: 3322800
I0428 19:58:13.907670 28920 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:13.907676 28920 net.cpp:86] Creating Layer pool1
I0428 19:58:13.907680 28920 net.cpp:408] pool1 <- conv1
I0428 19:58:13.907687 28920 net.cpp:382] pool1 -> pool1
I0428 19:58:13.907768 28920 net.cpp:124] Setting up pool1
I0428 19:58:13.907775 28920 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:13.907778 28920 net.cpp:139] Memory required for data: 3354800
I0428 19:58:13.907781 28920 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:13.907806 28920 net.cpp:86] Creating Layer ip1
I0428 19:58:13.907809 28920 net.cpp:408] ip1 <- pool1
I0428 19:58:13.907830 28920 net.cpp:382] ip1 -> ip1
I0428 19:58:13.907956 28920 net.cpp:124] Setting up ip1
I0428 19:58:13.907964 28920 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:13.907979 28920 net.cpp:139] Memory required for data: 3374800
I0428 19:58:13.907986 28920 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:13.907991 28920 net.cpp:86] Creating Layer relu1
I0428 19:58:13.907994 28920 net.cpp:408] relu1 <- ip1
I0428 19:58:13.908000 28920 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:13.908190 28920 net.cpp:124] Setting up relu1
I0428 19:58:13.908200 28920 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:13.908202 28920 net.cpp:139] Memory required for data: 3394800
I0428 19:58:13.908205 28920 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:13.908215 28920 net.cpp:86] Creating Layer ip2
I0428 19:58:13.908218 28920 net.cpp:408] ip2 <- ip1
I0428 19:58:13.908238 28920 net.cpp:382] ip2 -> ip2
I0428 19:58:13.908371 28920 net.cpp:124] Setting up ip2
I0428 19:58:13.908380 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.908385 28920 net.cpp:139] Memory required for data: 3398800
I0428 19:58:13.908390 28920 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:13.908396 28920 net.cpp:86] Creating Layer relu2
I0428 19:58:13.908398 28920 net.cpp:408] relu2 <- ip2
I0428 19:58:13.908403 28920 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:13.908607 28920 net.cpp:124] Setting up relu2
I0428 19:58:13.908617 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.908622 28920 net.cpp:139] Memory required for data: 3402800
I0428 19:58:13.908624 28920 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:13.908632 28920 net.cpp:86] Creating Layer ip3
I0428 19:58:13.908634 28920 net.cpp:408] ip3 <- ip2
I0428 19:58:13.908639 28920 net.cpp:382] ip3 -> ip3
I0428 19:58:13.908747 28920 net.cpp:124] Setting up ip3
I0428 19:58:13.908756 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.908759 28920 net.cpp:139] Memory required for data: 3406800
I0428 19:58:13.908767 28920 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:13.908774 28920 net.cpp:86] Creating Layer relu3
I0428 19:58:13.908777 28920 net.cpp:408] relu3 <- ip3
I0428 19:58:13.908782 28920 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:13.909673 28920 net.cpp:124] Setting up relu3
I0428 19:58:13.909687 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.909692 28920 net.cpp:139] Memory required for data: 3410800
I0428 19:58:13.909695 28920 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:13.909700 28920 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:13.909704 28920 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:13.909709 28920 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:13.909715 28920 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:13.909757 28920 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:13.909762 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.909766 28920 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:13.909770 28920 net.cpp:139] Memory required for data: 3418800
I0428 19:58:13.909772 28920 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:13.909778 28920 net.cpp:86] Creating Layer accuracy
I0428 19:58:13.909781 28920 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:13.909785 28920 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:13.909791 28920 net.cpp:382] accuracy -> accuracy
I0428 19:58:13.909798 28920 net.cpp:124] Setting up accuracy
I0428 19:58:13.909802 28920 net.cpp:131] Top shape: (1)
I0428 19:58:13.909806 28920 net.cpp:139] Memory required for data: 3418804
I0428 19:58:13.909808 28920 layer_factory.hpp:77] Creating layer loss
I0428 19:58:13.909814 28920 net.cpp:86] Creating Layer loss
I0428 19:58:13.909817 28920 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:13.909821 28920 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:13.909826 28920 net.cpp:382] loss -> loss
I0428 19:58:13.909832 28920 layer_factory.hpp:77] Creating layer loss
I0428 19:58:13.910089 28920 net.cpp:124] Setting up loss
I0428 19:58:13.910097 28920 net.cpp:131] Top shape: (1)
I0428 19:58:13.910100 28920 net.cpp:134]     with loss weight 1
I0428 19:58:13.910107 28920 net.cpp:139] Memory required for data: 3418808
I0428 19:58:13.910121 28920 net.cpp:200] loss needs backward computation.
I0428 19:58:13.910125 28920 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:13.910130 28920 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:13.910132 28920 net.cpp:200] relu3 needs backward computation.
I0428 19:58:13.910136 28920 net.cpp:200] ip3 needs backward computation.
I0428 19:58:13.910140 28920 net.cpp:200] relu2 needs backward computation.
I0428 19:58:13.910142 28920 net.cpp:200] ip2 needs backward computation.
I0428 19:58:13.910145 28920 net.cpp:200] relu1 needs backward computation.
I0428 19:58:13.910148 28920 net.cpp:200] ip1 needs backward computation.
I0428 19:58:13.910151 28920 net.cpp:200] pool1 needs backward computation.
I0428 19:58:13.910154 28920 net.cpp:200] conv1 needs backward computation.
I0428 19:58:13.910157 28920 net.cpp:200] pool0 needs backward computation.
I0428 19:58:13.910161 28920 net.cpp:200] conv0 needs backward computation.
I0428 19:58:13.910166 28920 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:13.910169 28920 net.cpp:202] mnist does not need backward computation.
I0428 19:58:13.910172 28920 net.cpp:244] This network produces output accuracy
I0428 19:58:13.910176 28920 net.cpp:244] This network produces output loss
I0428 19:58:13.910188 28920 net.cpp:257] Network initialization done.
I0428 19:58:13.910233 28920 solver.cpp:56] Solver scaffolding done.
I0428 19:58:13.910614 28920 caffe.cpp:248] Starting Optimization
I0428 19:58:13.910620 28920 solver.cpp:273] Solving LeNet
I0428 19:58:13.910624 28920 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:13.911453 28920 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:13.917611 28920 blocking_queue.cpp:49] Waiting for data
I0428 19:58:13.966195 28927 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:13.966704 28920 solver.cpp:398]     Test net output #0: accuracy = 0.0962
I0428 19:58:13.966738 28920 solver.cpp:398]     Test net output #1: loss = 2.30735 (* 1 = 2.30735 loss)
I0428 19:58:13.969207 28920 solver.cpp:219] Iteration 0 (-1.41251e-42 iter/s, 0.0585431s/100 iters), loss = 2.3275
I0428 19:58:13.969245 28920 solver.cpp:238]     Train net output #0: loss = 2.3275 (* 1 = 2.3275 loss)
I0428 19:58:13.969256 28920 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:14.046046 28920 solver.cpp:219] Iteration 100 (1302.01 iter/s, 0.0768042s/100 iters), loss = 0.96197
I0428 19:58:14.046083 28920 solver.cpp:238]     Train net output #0: loss = 0.96197 (* 1 = 0.96197 loss)
I0428 19:58:14.046089 28920 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:14.124022 28920 solver.cpp:219] Iteration 200 (1282.97 iter/s, 0.077944s/100 iters), loss = 0.372109
I0428 19:58:14.124059 28920 solver.cpp:238]     Train net output #0: loss = 0.372109 (* 1 = 0.372109 loss)
I0428 19:58:14.124065 28920 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:14.199031 28920 solver.cpp:219] Iteration 300 (1333.72 iter/s, 0.0749783s/100 iters), loss = 0.417065
I0428 19:58:14.199067 28920 solver.cpp:238]     Train net output #0: loss = 0.417065 (* 1 = 0.417065 loss)
I0428 19:58:14.199074 28920 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:14.271339 28920 solver.cpp:219] Iteration 400 (1383.55 iter/s, 0.072278s/100 iters), loss = 0.234037
I0428 19:58:14.271376 28920 solver.cpp:238]     Train net output #0: loss = 0.234037 (* 1 = 0.234037 loss)
I0428 19:58:14.271383 28920 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:14.344290 28920 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:14.389300 28927 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:14.389854 28920 solver.cpp:398]     Test net output #0: accuracy = 0.9454
I0428 19:58:14.389871 28920 solver.cpp:398]     Test net output #1: loss = 0.185546 (* 1 = 0.185546 loss)
I0428 19:58:14.390606 28920 solver.cpp:219] Iteration 500 (838.683 iter/s, 0.119235s/100 iters), loss = 0.119617
I0428 19:58:14.390645 28920 solver.cpp:238]     Train net output #0: loss = 0.119617 (* 1 = 0.119617 loss)
I0428 19:58:14.390666 28920 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:14.464572 28920 solver.cpp:219] Iteration 600 (1352.54 iter/s, 0.0739348s/100 iters), loss = 0.227888
I0428 19:58:14.464612 28920 solver.cpp:238]     Train net output #0: loss = 0.227888 (* 1 = 0.227888 loss)
I0428 19:58:14.464617 28920 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:14.538655 28920 solver.cpp:219] Iteration 700 (1350.45 iter/s, 0.0740495s/100 iters), loss = 0.19568
I0428 19:58:14.538681 28920 solver.cpp:238]     Train net output #0: loss = 0.19568 (* 1 = 0.19568 loss)
I0428 19:58:14.538687 28920 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:14.613361 28920 solver.cpp:219] Iteration 800 (1339.17 iter/s, 0.0746731s/100 iters), loss = 0.189511
I0428 19:58:14.613384 28920 solver.cpp:238]     Train net output #0: loss = 0.189511 (* 1 = 0.189511 loss)
I0428 19:58:14.613390 28920 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:14.687860 28920 solver.cpp:219] Iteration 900 (1342.89 iter/s, 0.0744663s/100 iters), loss = 0.242871
I0428 19:58:14.687883 28920 solver.cpp:238]     Train net output #0: loss = 0.242871 (* 1 = 0.242871 loss)
I0428 19:58:14.687889 28920 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:14.712775 28926 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:14.761593 28920 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:14.762411 28920 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:14.762909 28920 solver.cpp:311] Iteration 1000, loss = 0.243297
I0428 19:58:14.762939 28920 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:14.809515 28927 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:14.810000 28920 solver.cpp:398]     Test net output #0: accuracy = 0.9564
I0428 19:58:14.810019 28920 solver.cpp:398]     Test net output #1: loss = 0.138194 (* 1 = 0.138194 loss)
I0428 19:58:14.810024 28920 solver.cpp:316] Optimization Done.
I0428 19:58:14.810026 28920 caffe.cpp:259] Optimization Done.
