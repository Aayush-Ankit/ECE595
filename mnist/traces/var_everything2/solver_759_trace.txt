I0428 19:56:26.405928 28435 caffe.cpp:218] Using GPUs 0
I0428 19:56:26.443497 28435 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:26.898579 28435 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test759.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:26.898715 28435 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test759.prototxt
I0428 19:56:26.899029 28435 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:26.899042 28435 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:26.899117 28435 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:26.899176 28435 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:26.899256 28435 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:26.899291 28435 net.cpp:86] Creating Layer mnist
I0428 19:56:26.899297 28435 net.cpp:382] mnist -> data
I0428 19:56:26.899317 28435 net.cpp:382] mnist -> label
I0428 19:56:26.900213 28435 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:26.902456 28435 net.cpp:124] Setting up mnist
I0428 19:56:26.902485 28435 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:26.902490 28435 net.cpp:131] Top shape: 64 (64)
I0428 19:56:26.902493 28435 net.cpp:139] Memory required for data: 200960
I0428 19:56:26.902499 28435 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:26.902511 28435 net.cpp:86] Creating Layer conv0
I0428 19:56:26.902561 28435 net.cpp:408] conv0 <- data
I0428 19:56:26.902571 28435 net.cpp:382] conv0 -> conv0
I0428 19:56:27.134223 28435 net.cpp:124] Setting up conv0
I0428 19:56:27.134264 28435 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:27.134268 28435 net.cpp:139] Memory required for data: 1675520
I0428 19:56:27.134282 28435 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:27.134294 28435 net.cpp:86] Creating Layer pool0
I0428 19:56:27.134299 28435 net.cpp:408] pool0 <- conv0
I0428 19:56:27.134304 28435 net.cpp:382] pool0 -> pool0
I0428 19:56:27.134366 28435 net.cpp:124] Setting up pool0
I0428 19:56:27.134371 28435 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:27.134374 28435 net.cpp:139] Memory required for data: 2044160
I0428 19:56:27.134377 28435 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:27.134387 28435 net.cpp:86] Creating Layer conv1
I0428 19:56:27.134392 28435 net.cpp:408] conv1 <- pool0
I0428 19:56:27.134395 28435 net.cpp:382] conv1 -> conv1
I0428 19:56:27.136267 28435 net.cpp:124] Setting up conv1
I0428 19:56:27.136296 28435 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:27.136301 28435 net.cpp:139] Memory required for data: 2076928
I0428 19:56:27.136308 28435 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:27.136315 28435 net.cpp:86] Creating Layer pool1
I0428 19:56:27.136319 28435 net.cpp:408] pool1 <- conv1
I0428 19:56:27.136324 28435 net.cpp:382] pool1 -> pool1
I0428 19:56:27.136392 28435 net.cpp:124] Setting up pool1
I0428 19:56:27.136397 28435 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:27.136400 28435 net.cpp:139] Memory required for data: 2085120
I0428 19:56:27.136404 28435 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:27.136410 28435 net.cpp:86] Creating Layer ip1
I0428 19:56:27.136414 28435 net.cpp:408] ip1 <- pool1
I0428 19:56:27.136418 28435 net.cpp:382] ip1 -> ip1
I0428 19:56:27.136523 28435 net.cpp:124] Setting up ip1
I0428 19:56:27.136530 28435 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:27.136533 28435 net.cpp:139] Memory required for data: 2087680
I0428 19:56:27.136540 28435 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:27.136545 28435 net.cpp:86] Creating Layer relu1
I0428 19:56:27.136549 28435 net.cpp:408] relu1 <- ip1
I0428 19:56:27.136554 28435 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:27.136725 28435 net.cpp:124] Setting up relu1
I0428 19:56:27.136734 28435 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:27.136736 28435 net.cpp:139] Memory required for data: 2090240
I0428 19:56:27.136739 28435 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:27.136745 28435 net.cpp:86] Creating Layer ip2
I0428 19:56:27.136749 28435 net.cpp:408] ip2 <- ip1
I0428 19:56:27.136754 28435 net.cpp:382] ip2 -> ip2
I0428 19:56:27.136883 28435 net.cpp:124] Setting up ip2
I0428 19:56:27.136891 28435 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:27.136894 28435 net.cpp:139] Memory required for data: 2103040
I0428 19:56:27.136900 28435 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:27.136906 28435 net.cpp:86] Creating Layer relu2
I0428 19:56:27.136909 28435 net.cpp:408] relu2 <- ip2
I0428 19:56:27.136914 28435 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:27.137677 28435 net.cpp:124] Setting up relu2
I0428 19:56:27.137689 28435 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:27.137708 28435 net.cpp:139] Memory required for data: 2115840
I0428 19:56:27.137712 28435 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:27.137734 28435 net.cpp:86] Creating Layer ip3
I0428 19:56:27.137738 28435 net.cpp:408] ip3 <- ip2
I0428 19:56:27.137743 28435 net.cpp:382] ip3 -> ip3
I0428 19:56:27.137852 28435 net.cpp:124] Setting up ip3
I0428 19:56:27.137861 28435 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:27.137863 28435 net.cpp:139] Memory required for data: 2118400
I0428 19:56:27.137871 28435 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:27.137876 28435 net.cpp:86] Creating Layer relu3
I0428 19:56:27.137879 28435 net.cpp:408] relu3 <- ip3
I0428 19:56:27.137883 28435 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:27.138072 28435 net.cpp:124] Setting up relu3
I0428 19:56:27.138079 28435 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:27.138082 28435 net.cpp:139] Memory required for data: 2120960
I0428 19:56:27.138085 28435 layer_factory.hpp:77] Creating layer loss
I0428 19:56:27.138092 28435 net.cpp:86] Creating Layer loss
I0428 19:56:27.138094 28435 net.cpp:408] loss <- ip3
I0428 19:56:27.138098 28435 net.cpp:408] loss <- label
I0428 19:56:27.138103 28435 net.cpp:382] loss -> loss
I0428 19:56:27.138120 28435 layer_factory.hpp:77] Creating layer loss
I0428 19:56:27.138325 28435 net.cpp:124] Setting up loss
I0428 19:56:27.138334 28435 net.cpp:131] Top shape: (1)
I0428 19:56:27.138337 28435 net.cpp:134]     with loss weight 1
I0428 19:56:27.138350 28435 net.cpp:139] Memory required for data: 2120964
I0428 19:56:27.138353 28435 net.cpp:200] loss needs backward computation.
I0428 19:56:27.138357 28435 net.cpp:200] relu3 needs backward computation.
I0428 19:56:27.138360 28435 net.cpp:200] ip3 needs backward computation.
I0428 19:56:27.138362 28435 net.cpp:200] relu2 needs backward computation.
I0428 19:56:27.138365 28435 net.cpp:200] ip2 needs backward computation.
I0428 19:56:27.138368 28435 net.cpp:200] relu1 needs backward computation.
I0428 19:56:27.138371 28435 net.cpp:200] ip1 needs backward computation.
I0428 19:56:27.138373 28435 net.cpp:200] pool1 needs backward computation.
I0428 19:56:27.138376 28435 net.cpp:200] conv1 needs backward computation.
I0428 19:56:27.138381 28435 net.cpp:200] pool0 needs backward computation.
I0428 19:56:27.138382 28435 net.cpp:200] conv0 needs backward computation.
I0428 19:56:27.138386 28435 net.cpp:202] mnist does not need backward computation.
I0428 19:56:27.138389 28435 net.cpp:244] This network produces output loss
I0428 19:56:27.138397 28435 net.cpp:257] Network initialization done.
I0428 19:56:27.138769 28435 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test759.prototxt
I0428 19:56:27.138828 28435 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:27.138931 28435 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:27.139005 28435 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:27.139047 28435 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:27.139060 28435 net.cpp:86] Creating Layer mnist
I0428 19:56:27.139065 28435 net.cpp:382] mnist -> data
I0428 19:56:27.139071 28435 net.cpp:382] mnist -> label
I0428 19:56:27.139168 28435 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:27.141477 28435 net.cpp:124] Setting up mnist
I0428 19:56:27.141505 28435 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:27.141510 28435 net.cpp:131] Top shape: 100 (100)
I0428 19:56:27.141513 28435 net.cpp:139] Memory required for data: 314000
I0428 19:56:27.141516 28435 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:27.141527 28435 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:27.141531 28435 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:27.141535 28435 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:27.141541 28435 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:27.141574 28435 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:27.141579 28435 net.cpp:131] Top shape: 100 (100)
I0428 19:56:27.141582 28435 net.cpp:131] Top shape: 100 (100)
I0428 19:56:27.141587 28435 net.cpp:139] Memory required for data: 314800
I0428 19:56:27.141588 28435 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:27.141597 28435 net.cpp:86] Creating Layer conv0
I0428 19:56:27.141598 28435 net.cpp:408] conv0 <- data
I0428 19:56:27.141603 28435 net.cpp:382] conv0 -> conv0
I0428 19:56:27.143256 28435 net.cpp:124] Setting up conv0
I0428 19:56:27.143270 28435 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:27.143273 28435 net.cpp:139] Memory required for data: 2618800
I0428 19:56:27.143281 28435 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:27.143287 28435 net.cpp:86] Creating Layer pool0
I0428 19:56:27.143291 28435 net.cpp:408] pool0 <- conv0
I0428 19:56:27.143296 28435 net.cpp:382] pool0 -> pool0
I0428 19:56:27.143328 28435 net.cpp:124] Setting up pool0
I0428 19:56:27.143332 28435 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:27.143335 28435 net.cpp:139] Memory required for data: 3194800
I0428 19:56:27.143338 28435 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:27.143345 28435 net.cpp:86] Creating Layer conv1
I0428 19:56:27.143348 28435 net.cpp:408] conv1 <- pool0
I0428 19:56:27.143353 28435 net.cpp:382] conv1 -> conv1
I0428 19:56:27.145491 28435 net.cpp:124] Setting up conv1
I0428 19:56:27.145503 28435 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:27.145508 28435 net.cpp:139] Memory required for data: 3246000
I0428 19:56:27.145516 28435 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:27.145522 28435 net.cpp:86] Creating Layer pool1
I0428 19:56:27.145540 28435 net.cpp:408] pool1 <- conv1
I0428 19:56:27.145545 28435 net.cpp:382] pool1 -> pool1
I0428 19:56:27.145579 28435 net.cpp:124] Setting up pool1
I0428 19:56:27.145584 28435 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:27.145587 28435 net.cpp:139] Memory required for data: 3258800
I0428 19:56:27.145591 28435 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:27.145596 28435 net.cpp:86] Creating Layer ip1
I0428 19:56:27.145598 28435 net.cpp:408] ip1 <- pool1
I0428 19:56:27.145603 28435 net.cpp:382] ip1 -> ip1
I0428 19:56:27.145694 28435 net.cpp:124] Setting up ip1
I0428 19:56:27.145700 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.145714 28435 net.cpp:139] Memory required for data: 3262800
I0428 19:56:27.145720 28435 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:27.145741 28435 net.cpp:86] Creating Layer relu1
I0428 19:56:27.145745 28435 net.cpp:408] relu1 <- ip1
I0428 19:56:27.145750 28435 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:27.145918 28435 net.cpp:124] Setting up relu1
I0428 19:56:27.145927 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.145931 28435 net.cpp:139] Memory required for data: 3266800
I0428 19:56:27.145933 28435 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:27.145941 28435 net.cpp:86] Creating Layer ip2
I0428 19:56:27.145943 28435 net.cpp:408] ip2 <- ip1
I0428 19:56:27.145948 28435 net.cpp:382] ip2 -> ip2
I0428 19:56:27.146039 28435 net.cpp:124] Setting up ip2
I0428 19:56:27.146046 28435 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:27.146049 28435 net.cpp:139] Memory required for data: 3286800
I0428 19:56:27.146054 28435 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:27.146059 28435 net.cpp:86] Creating Layer relu2
I0428 19:56:27.146070 28435 net.cpp:408] relu2 <- ip2
I0428 19:56:27.146075 28435 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:27.146230 28435 net.cpp:124] Setting up relu2
I0428 19:56:27.146239 28435 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:27.146241 28435 net.cpp:139] Memory required for data: 3306800
I0428 19:56:27.146245 28435 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:27.146250 28435 net.cpp:86] Creating Layer ip3
I0428 19:56:27.146260 28435 net.cpp:408] ip3 <- ip2
I0428 19:56:27.146265 28435 net.cpp:382] ip3 -> ip3
I0428 19:56:27.146365 28435 net.cpp:124] Setting up ip3
I0428 19:56:27.146373 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.146375 28435 net.cpp:139] Memory required for data: 3310800
I0428 19:56:27.146383 28435 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:27.146387 28435 net.cpp:86] Creating Layer relu3
I0428 19:56:27.146390 28435 net.cpp:408] relu3 <- ip3
I0428 19:56:27.146394 28435 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:27.147264 28435 net.cpp:124] Setting up relu3
I0428 19:56:27.147275 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.147279 28435 net.cpp:139] Memory required for data: 3314800
I0428 19:56:27.147284 28435 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:56:27.147289 28435 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:56:27.147292 28435 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:56:27.147297 28435 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:56:27.147305 28435 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:56:27.147346 28435 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:56:27.147351 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.147354 28435 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:27.147357 28435 net.cpp:139] Memory required for data: 3322800
I0428 19:56:27.147361 28435 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:27.147366 28435 net.cpp:86] Creating Layer accuracy
I0428 19:56:27.147370 28435 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:56:27.147374 28435 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:27.147379 28435 net.cpp:382] accuracy -> accuracy
I0428 19:56:27.147385 28435 net.cpp:124] Setting up accuracy
I0428 19:56:27.147390 28435 net.cpp:131] Top shape: (1)
I0428 19:56:27.147392 28435 net.cpp:139] Memory required for data: 3322804
I0428 19:56:27.147395 28435 layer_factory.hpp:77] Creating layer loss
I0428 19:56:27.147410 28435 net.cpp:86] Creating Layer loss
I0428 19:56:27.147414 28435 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:56:27.147418 28435 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:27.147423 28435 net.cpp:382] loss -> loss
I0428 19:56:27.147428 28435 layer_factory.hpp:77] Creating layer loss
I0428 19:56:27.147683 28435 net.cpp:124] Setting up loss
I0428 19:56:27.147691 28435 net.cpp:131] Top shape: (1)
I0428 19:56:27.147696 28435 net.cpp:134]     with loss weight 1
I0428 19:56:27.147701 28435 net.cpp:139] Memory required for data: 3322808
I0428 19:56:27.147713 28435 net.cpp:200] loss needs backward computation.
I0428 19:56:27.147724 28435 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:27.147743 28435 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:56:27.147747 28435 net.cpp:200] relu3 needs backward computation.
I0428 19:56:27.147749 28435 net.cpp:200] ip3 needs backward computation.
I0428 19:56:27.147752 28435 net.cpp:200] relu2 needs backward computation.
I0428 19:56:27.147754 28435 net.cpp:200] ip2 needs backward computation.
I0428 19:56:27.147763 28435 net.cpp:200] relu1 needs backward computation.
I0428 19:56:27.147765 28435 net.cpp:200] ip1 needs backward computation.
I0428 19:56:27.147768 28435 net.cpp:200] pool1 needs backward computation.
I0428 19:56:27.147771 28435 net.cpp:200] conv1 needs backward computation.
I0428 19:56:27.147774 28435 net.cpp:200] pool0 needs backward computation.
I0428 19:56:27.147783 28435 net.cpp:200] conv0 needs backward computation.
I0428 19:56:27.147786 28435 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:27.147789 28435 net.cpp:202] mnist does not need backward computation.
I0428 19:56:27.147792 28435 net.cpp:244] This network produces output accuracy
I0428 19:56:27.147800 28435 net.cpp:244] This network produces output loss
I0428 19:56:27.147810 28435 net.cpp:257] Network initialization done.
I0428 19:56:27.147848 28435 solver.cpp:56] Solver scaffolding done.
I0428 19:56:27.148169 28435 caffe.cpp:248] Starting Optimization
I0428 19:56:27.148175 28435 solver.cpp:273] Solving LeNet
I0428 19:56:27.148177 28435 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:27.149021 28435 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:27.152941 28435 blocking_queue.cpp:49] Waiting for data
I0428 19:56:27.224900 28442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:27.225396 28435 solver.cpp:398]     Test net output #0: accuracy = 0.0654
I0428 19:56:27.225414 28435 solver.cpp:398]     Test net output #1: loss = 2.31404 (* 1 = 2.31404 loss)
I0428 19:56:27.227915 28435 solver.cpp:219] Iteration 0 (-2.82306e-31 iter/s, 0.0797133s/100 iters), loss = 2.3318
I0428 19:56:27.227953 28435 solver.cpp:238]     Train net output #0: loss = 2.3318 (* 1 = 2.3318 loss)
I0428 19:56:27.227979 28435 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:27.315675 28435 solver.cpp:219] Iteration 100 (1140.1 iter/s, 0.0877117s/100 iters), loss = 1.04653
I0428 19:56:27.315699 28435 solver.cpp:238]     Train net output #0: loss = 1.04653 (* 1 = 1.04653 loss)
I0428 19:56:27.315721 28435 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:27.390157 28435 solver.cpp:219] Iteration 200 (1343.24 iter/s, 0.0744468s/100 iters), loss = 0.59935
I0428 19:56:27.390182 28435 solver.cpp:238]     Train net output #0: loss = 0.59935 (* 1 = 0.59935 loss)
I0428 19:56:27.390204 28435 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:27.468983 28435 solver.cpp:219] Iteration 300 (1269.17 iter/s, 0.0787917s/100 iters), loss = 0.834973
I0428 19:56:27.469007 28435 solver.cpp:238]     Train net output #0: loss = 0.834973 (* 1 = 0.834973 loss)
I0428 19:56:27.469028 28435 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:27.543833 28435 solver.cpp:219] Iteration 400 (1336.6 iter/s, 0.0748165s/100 iters), loss = 0.52508
I0428 19:56:27.543854 28435 solver.cpp:238]     Train net output #0: loss = 0.52508 (* 1 = 0.52508 loss)
I0428 19:56:27.543876 28435 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:27.618433 28435 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:27.671996 28442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:27.672518 28435 solver.cpp:398]     Test net output #0: accuracy = 0.8402
I0428 19:56:27.672536 28435 solver.cpp:398]     Test net output #1: loss = 0.475275 (* 1 = 0.475275 loss)
I0428 19:56:27.673321 28435 solver.cpp:219] Iteration 500 (772.481 iter/s, 0.129453s/100 iters), loss = 0.459937
I0428 19:56:27.673357 28435 solver.cpp:238]     Train net output #0: loss = 0.459937 (* 1 = 0.459937 loss)
I0428 19:56:27.673378 28435 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:27.751880 28435 solver.cpp:219] Iteration 600 (1273.63 iter/s, 0.0785156s/100 iters), loss = 0.288477
I0428 19:56:27.751904 28435 solver.cpp:238]     Train net output #0: loss = 0.288477 (* 1 = 0.288477 loss)
I0428 19:56:27.751925 28435 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:27.826875 28435 solver.cpp:219] Iteration 700 (1333.97 iter/s, 0.074964s/100 iters), loss = 0.492349
I0428 19:56:27.826897 28435 solver.cpp:238]     Train net output #0: loss = 0.492349 (* 1 = 0.492349 loss)
I0428 19:56:27.826920 28435 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:27.901828 28435 solver.cpp:219] Iteration 800 (1334.76 iter/s, 0.0749199s/100 iters), loss = 0.787061
I0428 19:56:27.901852 28435 solver.cpp:238]     Train net output #0: loss = 0.787061 (* 1 = 0.787061 loss)
I0428 19:56:27.901875 28435 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:27.976845 28435 solver.cpp:219] Iteration 900 (1333.63 iter/s, 0.0749832s/100 iters), loss = 0.51276
I0428 19:56:27.976867 28435 solver.cpp:238]     Train net output #0: loss = 0.51276 (* 1 = 0.51276 loss)
I0428 19:56:27.976888 28435 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:28.001819 28441 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:28.050618 28435 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:28.051273 28435 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:28.051676 28435 solver.cpp:311] Iteration 1000, loss = 0.355338
I0428 19:56:28.051693 28435 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:28.104605 28442 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:28.105118 28435 solver.cpp:398]     Test net output #0: accuracy = 0.8524
I0428 19:56:28.105136 28435 solver.cpp:398]     Test net output #1: loss = 0.418713 (* 1 = 0.418713 loss)
I0428 19:56:28.105142 28435 solver.cpp:316] Optimization Done.
I0428 19:56:28.105146 28435 caffe.cpp:259] Optimization Done.
