I0428 20:01:28.678586 29735 caffe.cpp:218] Using GPUs 0
I0428 20:01:28.715411 29735 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:29.224581 29735 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test904.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:29.224719 29735 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test904.prototxt
I0428 20:01:29.225112 29735 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:29.225133 29735 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:29.225224 29735 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:01:29.225298 29735 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:29.225399 29735 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:29.225425 29735 net.cpp:86] Creating Layer mnist
I0428 20:01:29.225432 29735 net.cpp:382] mnist -> data
I0428 20:01:29.225455 29735 net.cpp:382] mnist -> label
I0428 20:01:29.226548 29735 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:29.229012 29735 net.cpp:124] Setting up mnist
I0428 20:01:29.229030 29735 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:29.229037 29735 net.cpp:131] Top shape: 64 (64)
I0428 20:01:29.229040 29735 net.cpp:139] Memory required for data: 200960
I0428 20:01:29.229048 29735 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:29.229099 29735 net.cpp:86] Creating Layer conv0
I0428 20:01:29.229106 29735 net.cpp:408] conv0 <- data
I0428 20:01:29.229118 29735 net.cpp:382] conv0 -> conv0
I0428 20:01:29.521266 29735 net.cpp:124] Setting up conv0
I0428 20:01:29.521296 29735 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:29.521301 29735 net.cpp:139] Memory required for data: 1675520
I0428 20:01:29.521337 29735 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:29.521353 29735 net.cpp:86] Creating Layer pool0
I0428 20:01:29.521356 29735 net.cpp:408] pool0 <- conv0
I0428 20:01:29.521363 29735 net.cpp:382] pool0 -> pool0
I0428 20:01:29.521414 29735 net.cpp:124] Setting up pool0
I0428 20:01:29.521432 29735 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:29.521436 29735 net.cpp:139] Memory required for data: 2044160
I0428 20:01:29.521440 29735 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:29.521451 29735 net.cpp:86] Creating Layer conv1
I0428 20:01:29.521455 29735 net.cpp:408] conv1 <- pool0
I0428 20:01:29.521461 29735 net.cpp:382] conv1 -> conv1
I0428 20:01:29.524418 29735 net.cpp:124] Setting up conv1
I0428 20:01:29.524435 29735 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:29.524440 29735 net.cpp:139] Memory required for data: 2863360
I0428 20:01:29.524448 29735 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:29.524456 29735 net.cpp:86] Creating Layer pool1
I0428 20:01:29.524461 29735 net.cpp:408] pool1 <- conv1
I0428 20:01:29.524466 29735 net.cpp:382] pool1 -> pool1
I0428 20:01:29.524507 29735 net.cpp:124] Setting up pool1
I0428 20:01:29.524513 29735 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:29.524515 29735 net.cpp:139] Memory required for data: 3068160
I0428 20:01:29.524518 29735 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:29.524525 29735 net.cpp:86] Creating Layer ip1
I0428 20:01:29.524528 29735 net.cpp:408] ip1 <- pool1
I0428 20:01:29.524533 29735 net.cpp:382] ip1 -> ip1
I0428 20:01:29.524765 29735 net.cpp:124] Setting up ip1
I0428 20:01:29.524775 29735 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:29.524777 29735 net.cpp:139] Memory required for data: 3074560
I0428 20:01:29.524785 29735 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:29.524791 29735 net.cpp:86] Creating Layer relu1
I0428 20:01:29.524796 29735 net.cpp:408] relu1 <- ip1
I0428 20:01:29.524799 29735 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:29.524989 29735 net.cpp:124] Setting up relu1
I0428 20:01:29.525001 29735 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:29.525004 29735 net.cpp:139] Memory required for data: 3080960
I0428 20:01:29.525007 29735 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:29.525014 29735 net.cpp:86] Creating Layer ip2
I0428 20:01:29.525018 29735 net.cpp:408] ip2 <- ip1
I0428 20:01:29.525023 29735 net.cpp:382] ip2 -> ip2
I0428 20:01:29.525122 29735 net.cpp:124] Setting up ip2
I0428 20:01:29.525130 29735 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:29.525133 29735 net.cpp:139] Memory required for data: 3083520
I0428 20:01:29.525140 29735 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:29.525146 29735 net.cpp:86] Creating Layer relu2
I0428 20:01:29.525149 29735 net.cpp:408] relu2 <- ip2
I0428 20:01:29.525153 29735 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:29.525930 29735 net.cpp:124] Setting up relu2
I0428 20:01:29.525944 29735 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:29.525948 29735 net.cpp:139] Memory required for data: 3086080
I0428 20:01:29.525951 29735 layer_factory.hpp:77] Creating layer loss
I0428 20:01:29.525959 29735 net.cpp:86] Creating Layer loss
I0428 20:01:29.525961 29735 net.cpp:408] loss <- ip2
I0428 20:01:29.525966 29735 net.cpp:408] loss <- label
I0428 20:01:29.525972 29735 net.cpp:382] loss -> loss
I0428 20:01:29.525990 29735 layer_factory.hpp:77] Creating layer loss
I0428 20:01:29.526238 29735 net.cpp:124] Setting up loss
I0428 20:01:29.526249 29735 net.cpp:131] Top shape: (1)
I0428 20:01:29.526253 29735 net.cpp:134]     with loss weight 1
I0428 20:01:29.526268 29735 net.cpp:139] Memory required for data: 3086084
I0428 20:01:29.526273 29735 net.cpp:200] loss needs backward computation.
I0428 20:01:29.526276 29735 net.cpp:200] relu2 needs backward computation.
I0428 20:01:29.526279 29735 net.cpp:200] ip2 needs backward computation.
I0428 20:01:29.526283 29735 net.cpp:200] relu1 needs backward computation.
I0428 20:01:29.526285 29735 net.cpp:200] ip1 needs backward computation.
I0428 20:01:29.526300 29735 net.cpp:200] pool1 needs backward computation.
I0428 20:01:29.526304 29735 net.cpp:200] conv1 needs backward computation.
I0428 20:01:29.526307 29735 net.cpp:200] pool0 needs backward computation.
I0428 20:01:29.526310 29735 net.cpp:200] conv0 needs backward computation.
I0428 20:01:29.526314 29735 net.cpp:202] mnist does not need backward computation.
I0428 20:01:29.526317 29735 net.cpp:244] This network produces output loss
I0428 20:01:29.526327 29735 net.cpp:257] Network initialization done.
I0428 20:01:29.526655 29735 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test904.prototxt
I0428 20:01:29.526682 29735 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:29.526775 29735 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:01:29.526845 29735 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:29.526892 29735 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:29.526906 29735 net.cpp:86] Creating Layer mnist
I0428 20:01:29.526912 29735 net.cpp:382] mnist -> data
I0428 20:01:29.526921 29735 net.cpp:382] mnist -> label
I0428 20:01:29.527010 29735 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:29.529287 29735 net.cpp:124] Setting up mnist
I0428 20:01:29.529302 29735 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:29.529309 29735 net.cpp:131] Top shape: 100 (100)
I0428 20:01:29.529311 29735 net.cpp:139] Memory required for data: 314000
I0428 20:01:29.529315 29735 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:29.529323 29735 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:29.529327 29735 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:29.529332 29735 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:29.529340 29735 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:29.529417 29735 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:29.529423 29735 net.cpp:131] Top shape: 100 (100)
I0428 20:01:29.529427 29735 net.cpp:131] Top shape: 100 (100)
I0428 20:01:29.529429 29735 net.cpp:139] Memory required for data: 314800
I0428 20:01:29.529433 29735 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:29.529441 29735 net.cpp:86] Creating Layer conv0
I0428 20:01:29.529445 29735 net.cpp:408] conv0 <- data
I0428 20:01:29.529450 29735 net.cpp:382] conv0 -> conv0
I0428 20:01:29.531266 29735 net.cpp:124] Setting up conv0
I0428 20:01:29.531281 29735 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:29.531285 29735 net.cpp:139] Memory required for data: 2618800
I0428 20:01:29.531294 29735 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:29.531303 29735 net.cpp:86] Creating Layer pool0
I0428 20:01:29.531306 29735 net.cpp:408] pool0 <- conv0
I0428 20:01:29.531313 29735 net.cpp:382] pool0 -> pool0
I0428 20:01:29.531354 29735 net.cpp:124] Setting up pool0
I0428 20:01:29.531360 29735 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:29.531363 29735 net.cpp:139] Memory required for data: 3194800
I0428 20:01:29.531366 29735 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:29.531376 29735 net.cpp:86] Creating Layer conv1
I0428 20:01:29.531380 29735 net.cpp:408] conv1 <- pool0
I0428 20:01:29.531386 29735 net.cpp:382] conv1 -> conv1
I0428 20:01:29.533025 29735 net.cpp:124] Setting up conv1
I0428 20:01:29.533041 29735 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:29.533052 29735 net.cpp:139] Memory required for data: 4474800
I0428 20:01:29.533061 29735 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:29.533068 29735 net.cpp:86] Creating Layer pool1
I0428 20:01:29.533072 29735 net.cpp:408] pool1 <- conv1
I0428 20:01:29.533078 29735 net.cpp:382] pool1 -> pool1
I0428 20:01:29.533118 29735 net.cpp:124] Setting up pool1
I0428 20:01:29.533125 29735 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:29.533128 29735 net.cpp:139] Memory required for data: 4794800
I0428 20:01:29.533131 29735 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:29.533138 29735 net.cpp:86] Creating Layer ip1
I0428 20:01:29.533141 29735 net.cpp:408] ip1 <- pool1
I0428 20:01:29.533146 29735 net.cpp:382] ip1 -> ip1
I0428 20:01:29.533371 29735 net.cpp:124] Setting up ip1
I0428 20:01:29.533380 29735 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:29.533382 29735 net.cpp:139] Memory required for data: 4804800
I0428 20:01:29.533390 29735 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:29.533396 29735 net.cpp:86] Creating Layer relu1
I0428 20:01:29.533398 29735 net.cpp:408] relu1 <- ip1
I0428 20:01:29.533403 29735 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:29.533573 29735 net.cpp:124] Setting up relu1
I0428 20:01:29.533583 29735 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:29.533594 29735 net.cpp:139] Memory required for data: 4814800
I0428 20:01:29.533597 29735 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:29.533607 29735 net.cpp:86] Creating Layer ip2
I0428 20:01:29.533609 29735 net.cpp:408] ip2 <- ip1
I0428 20:01:29.533623 29735 net.cpp:382] ip2 -> ip2
I0428 20:01:29.533730 29735 net.cpp:124] Setting up ip2
I0428 20:01:29.533737 29735 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:29.533740 29735 net.cpp:139] Memory required for data: 4818800
I0428 20:01:29.533746 29735 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:29.533752 29735 net.cpp:86] Creating Layer relu2
I0428 20:01:29.533756 29735 net.cpp:408] relu2 <- ip2
I0428 20:01:29.533759 29735 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:29.533922 29735 net.cpp:124] Setting up relu2
I0428 20:01:29.533931 29735 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:29.533936 29735 net.cpp:139] Memory required for data: 4822800
I0428 20:01:29.533938 29735 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:01:29.533944 29735 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:01:29.533947 29735 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:01:29.533952 29735 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:01:29.533969 29735 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:01:29.534011 29735 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:01:29.534016 29735 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:29.534020 29735 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:29.534024 29735 net.cpp:139] Memory required for data: 4830800
I0428 20:01:29.534026 29735 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:29.534032 29735 net.cpp:86] Creating Layer accuracy
I0428 20:01:29.534035 29735 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:01:29.534039 29735 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:29.534051 29735 net.cpp:382] accuracy -> accuracy
I0428 20:01:29.534059 29735 net.cpp:124] Setting up accuracy
I0428 20:01:29.534062 29735 net.cpp:131] Top shape: (1)
I0428 20:01:29.534065 29735 net.cpp:139] Memory required for data: 4830804
I0428 20:01:29.534068 29735 layer_factory.hpp:77] Creating layer loss
I0428 20:01:29.534073 29735 net.cpp:86] Creating Layer loss
I0428 20:01:29.534076 29735 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:01:29.534080 29735 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:29.534085 29735 net.cpp:382] loss -> loss
I0428 20:01:29.534091 29735 layer_factory.hpp:77] Creating layer loss
I0428 20:01:29.534387 29735 net.cpp:124] Setting up loss
I0428 20:01:29.534399 29735 net.cpp:131] Top shape: (1)
I0428 20:01:29.534401 29735 net.cpp:134]     with loss weight 1
I0428 20:01:29.534409 29735 net.cpp:139] Memory required for data: 4830808
I0428 20:01:29.534411 29735 net.cpp:200] loss needs backward computation.
I0428 20:01:29.534415 29735 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:29.534426 29735 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:01:29.534430 29735 net.cpp:200] relu2 needs backward computation.
I0428 20:01:29.534431 29735 net.cpp:200] ip2 needs backward computation.
I0428 20:01:29.534435 29735 net.cpp:200] relu1 needs backward computation.
I0428 20:01:29.534442 29735 net.cpp:200] ip1 needs backward computation.
I0428 20:01:29.534446 29735 net.cpp:200] pool1 needs backward computation.
I0428 20:01:29.534449 29735 net.cpp:200] conv1 needs backward computation.
I0428 20:01:29.534452 29735 net.cpp:200] pool0 needs backward computation.
I0428 20:01:29.534456 29735 net.cpp:200] conv0 needs backward computation.
I0428 20:01:29.534459 29735 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:29.534463 29735 net.cpp:202] mnist does not need backward computation.
I0428 20:01:29.534466 29735 net.cpp:244] This network produces output accuracy
I0428 20:01:29.534469 29735 net.cpp:244] This network produces output loss
I0428 20:01:29.534487 29735 net.cpp:257] Network initialization done.
I0428 20:01:29.534525 29735 solver.cpp:56] Solver scaffolding done.
I0428 20:01:29.534799 29735 caffe.cpp:248] Starting Optimization
I0428 20:01:29.534806 29735 solver.cpp:273] Solving LeNet
I0428 20:01:29.534809 29735 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:29.534962 29735 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:29.539676 29735 blocking_queue.cpp:49] Waiting for data
I0428 20:01:29.610659 29742 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:29.611160 29735 solver.cpp:398]     Test net output #0: accuracy = 0.1215
I0428 20:01:29.611178 29735 solver.cpp:398]     Test net output #1: loss = 2.36122 (* 1 = 2.36122 loss)
I0428 20:01:29.614495 29735 solver.cpp:219] Iteration 0 (-7.02404e-31 iter/s, 0.0796592s/100 iters), loss = 2.33761
I0428 20:01:29.614517 29735 solver.cpp:238]     Train net output #0: loss = 2.33761 (* 1 = 2.33761 loss)
I0428 20:01:29.614529 29735 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:29.717485 29735 solver.cpp:219] Iteration 100 (971.308 iter/s, 0.102954s/100 iters), loss = 0.640678
I0428 20:01:29.717512 29735 solver.cpp:238]     Train net output #0: loss = 0.640678 (* 1 = 0.640678 loss)
I0428 20:01:29.717535 29735 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:29.821077 29735 solver.cpp:219] Iteration 200 (965.67 iter/s, 0.103555s/100 iters), loss = 0.450022
I0428 20:01:29.821102 29735 solver.cpp:238]     Train net output #0: loss = 0.450022 (* 1 = 0.450022 loss)
I0428 20:01:29.821108 29735 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:29.927815 29735 solver.cpp:219] Iteration 300 (937.209 iter/s, 0.1067s/100 iters), loss = 0.653088
I0428 20:01:29.927851 29735 solver.cpp:238]     Train net output #0: loss = 0.653088 (* 1 = 0.653088 loss)
I0428 20:01:29.927860 29735 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:30.033310 29735 solver.cpp:219] Iteration 400 (948.322 iter/s, 0.105449s/100 iters), loss = 0.4837
I0428 20:01:30.033339 29735 solver.cpp:238]     Train net output #0: loss = 0.4837 (* 1 = 0.4837 loss)
I0428 20:01:30.033345 29735 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:30.138664 29735 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:30.215849 29742 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:30.216343 29735 solver.cpp:398]     Test net output #0: accuracy = 0.7792
I0428 20:01:30.216365 29735 solver.cpp:398]     Test net output #1: loss = 0.565797 (* 1 = 0.565797 loss)
I0428 20:01:30.217401 29735 solver.cpp:219] Iteration 500 (543.338 iter/s, 0.184048s/100 iters), loss = 0.548741
I0428 20:01:30.217439 29735 solver.cpp:238]     Train net output #0: loss = 0.548741 (* 1 = 0.548741 loss)
I0428 20:01:30.217447 29735 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:30.330195 29735 solver.cpp:219] Iteration 600 (886.961 iter/s, 0.112745s/100 iters), loss = 0.658007
I0428 20:01:30.330247 29735 solver.cpp:238]     Train net output #0: loss = 0.658007 (* 1 = 0.658007 loss)
I0428 20:01:30.330269 29735 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:30.433737 29735 solver.cpp:219] Iteration 700 (966.233 iter/s, 0.103495s/100 iters), loss = 0.592935
I0428 20:01:30.433763 29735 solver.cpp:238]     Train net output #0: loss = 0.592935 (* 1 = 0.592935 loss)
I0428 20:01:30.433769 29735 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:30.537977 29735 solver.cpp:219] Iteration 800 (959.691 iter/s, 0.1042s/100 iters), loss = 0.768599
I0428 20:01:30.538018 29735 solver.cpp:238]     Train net output #0: loss = 0.768599 (* 1 = 0.768599 loss)
I0428 20:01:30.538031 29735 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:30.647244 29735 solver.cpp:219] Iteration 900 (915.602 iter/s, 0.109218s/100 iters), loss = 0.527966
I0428 20:01:30.647274 29735 solver.cpp:238]     Train net output #0: loss = 0.527966 (* 1 = 0.527966 loss)
I0428 20:01:30.647281 29735 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:30.681298 29741 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:30.757385 29735 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:30.758903 29735 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:30.759727 29735 solver.cpp:311] Iteration 1000, loss = 0.563311
I0428 20:01:30.759748 29735 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:30.835064 29742 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:30.835561 29735 solver.cpp:398]     Test net output #0: accuracy = 0.7934
I0428 20:01:30.835580 29735 solver.cpp:398]     Test net output #1: loss = 0.517324 (* 1 = 0.517324 loss)
I0428 20:01:30.835585 29735 solver.cpp:316] Optimization Done.
I0428 20:01:30.835589 29735 caffe.cpp:259] Optimization Done.
