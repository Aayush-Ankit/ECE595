I0428 19:31:25.887364 22577 caffe.cpp:218] Using GPUs 0
I0428 19:31:25.923247 22577 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:31:26.435449 22577 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test122.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:31:26.435617 22577 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test122.prototxt
I0428 19:31:26.435956 22577 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:31:26.435976 22577 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:31:26.436064 22577 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:26.436163 22577 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:26.436295 22577 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:31:26.436327 22577 net.cpp:86] Creating Layer mnist
I0428 19:31:26.436342 22577 net.cpp:382] mnist -> data
I0428 19:31:26.436372 22577 net.cpp:382] mnist -> label
I0428 19:31:26.437571 22577 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:31:26.440028 22577 net.cpp:124] Setting up mnist
I0428 19:31:26.440071 22577 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:31:26.440084 22577 net.cpp:131] Top shape: 64 (64)
I0428 19:31:26.440090 22577 net.cpp:139] Memory required for data: 200960
I0428 19:31:26.440101 22577 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:26.440126 22577 net.cpp:86] Creating Layer conv0
I0428 19:31:26.440135 22577 net.cpp:408] conv0 <- data
I0428 19:31:26.440152 22577 net.cpp:382] conv0 -> conv0
I0428 19:31:26.715224 22577 net.cpp:124] Setting up conv0
I0428 19:31:26.715252 22577 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:31:26.715258 22577 net.cpp:139] Memory required for data: 1675520
I0428 19:31:26.715278 22577 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:26.715294 22577 net.cpp:86] Creating Layer pool0
I0428 19:31:26.715308 22577 net.cpp:408] pool0 <- conv0
I0428 19:31:26.715318 22577 net.cpp:382] pool0 -> pool0
I0428 19:31:26.715373 22577 net.cpp:124] Setting up pool0
I0428 19:31:26.715381 22577 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:31:26.715386 22577 net.cpp:139] Memory required for data: 2044160
I0428 19:31:26.715409 22577 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:26.715420 22577 net.cpp:86] Creating Layer ip1
I0428 19:31:26.715426 22577 net.cpp:408] ip1 <- pool0
I0428 19:31:26.715435 22577 net.cpp:382] ip1 -> ip1
I0428 19:31:26.716425 22577 net.cpp:124] Setting up ip1
I0428 19:31:26.716439 22577 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:26.716445 22577 net.cpp:139] Memory required for data: 2046720
I0428 19:31:26.716459 22577 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:26.716469 22577 net.cpp:86] Creating Layer relu1
I0428 19:31:26.716478 22577 net.cpp:408] relu1 <- ip1
I0428 19:31:26.716486 22577 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:26.716686 22577 net.cpp:124] Setting up relu1
I0428 19:31:26.716709 22577 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:26.716714 22577 net.cpp:139] Memory required for data: 2049280
I0428 19:31:26.716719 22577 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:26.716729 22577 net.cpp:86] Creating Layer ip2
I0428 19:31:26.716734 22577 net.cpp:408] ip2 <- ip1
I0428 19:31:26.716742 22577 net.cpp:382] ip2 -> ip2
I0428 19:31:26.716842 22577 net.cpp:124] Setting up ip2
I0428 19:31:26.716868 22577 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:26.716872 22577 net.cpp:139] Memory required for data: 2051840
I0428 19:31:26.716884 22577 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:26.716908 22577 net.cpp:86] Creating Layer relu2
I0428 19:31:26.716915 22577 net.cpp:408] relu2 <- ip2
I0428 19:31:26.716923 22577 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:26.717701 22577 net.cpp:124] Setting up relu2
I0428 19:31:26.717715 22577 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:26.717721 22577 net.cpp:139] Memory required for data: 2054400
I0428 19:31:26.717726 22577 layer_factory.hpp:77] Creating layer loss
I0428 19:31:26.717736 22577 net.cpp:86] Creating Layer loss
I0428 19:31:26.717742 22577 net.cpp:408] loss <- ip2
I0428 19:31:26.717749 22577 net.cpp:408] loss <- label
I0428 19:31:26.717772 22577 net.cpp:382] loss -> loss
I0428 19:31:26.717797 22577 layer_factory.hpp:77] Creating layer loss
I0428 19:31:26.718032 22577 net.cpp:124] Setting up loss
I0428 19:31:26.718044 22577 net.cpp:131] Top shape: (1)
I0428 19:31:26.718049 22577 net.cpp:134]     with loss weight 1
I0428 19:31:26.718067 22577 net.cpp:139] Memory required for data: 2054404
I0428 19:31:26.718073 22577 net.cpp:200] loss needs backward computation.
I0428 19:31:26.718080 22577 net.cpp:200] relu2 needs backward computation.
I0428 19:31:26.718085 22577 net.cpp:200] ip2 needs backward computation.
I0428 19:31:26.718089 22577 net.cpp:200] relu1 needs backward computation.
I0428 19:31:26.718094 22577 net.cpp:200] ip1 needs backward computation.
I0428 19:31:26.718099 22577 net.cpp:200] pool0 needs backward computation.
I0428 19:31:26.718104 22577 net.cpp:200] conv0 needs backward computation.
I0428 19:31:26.718109 22577 net.cpp:202] mnist does not need backward computation.
I0428 19:31:26.718116 22577 net.cpp:244] This network produces output loss
I0428 19:31:26.718127 22577 net.cpp:257] Network initialization done.
I0428 19:31:26.718389 22577 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test122.prototxt
I0428 19:31:26.718418 22577 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:31:26.718497 22577 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:26.718613 22577 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:26.718685 22577 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:31:26.718706 22577 net.cpp:86] Creating Layer mnist
I0428 19:31:26.718714 22577 net.cpp:382] mnist -> data
I0428 19:31:26.718725 22577 net.cpp:382] mnist -> label
I0428 19:31:26.718840 22577 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:31:26.720754 22577 net.cpp:124] Setting up mnist
I0428 19:31:26.720784 22577 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:31:26.720793 22577 net.cpp:131] Top shape: 100 (100)
I0428 19:31:26.720798 22577 net.cpp:139] Memory required for data: 314000
I0428 19:31:26.720803 22577 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:31:26.720818 22577 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:31:26.720825 22577 net.cpp:408] label_mnist_1_split <- label
I0428 19:31:26.720834 22577 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:31:26.720844 22577 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:31:26.720937 22577 net.cpp:124] Setting up label_mnist_1_split
I0428 19:31:26.720945 22577 net.cpp:131] Top shape: 100 (100)
I0428 19:31:26.720952 22577 net.cpp:131] Top shape: 100 (100)
I0428 19:31:26.720957 22577 net.cpp:139] Memory required for data: 314800
I0428 19:31:26.720962 22577 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:26.720974 22577 net.cpp:86] Creating Layer conv0
I0428 19:31:26.720981 22577 net.cpp:408] conv0 <- data
I0428 19:31:26.720990 22577 net.cpp:382] conv0 -> conv0
I0428 19:31:26.722682 22577 net.cpp:124] Setting up conv0
I0428 19:31:26.722697 22577 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:31:26.722702 22577 net.cpp:139] Memory required for data: 2618800
I0428 19:31:26.722717 22577 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:26.722728 22577 net.cpp:86] Creating Layer pool0
I0428 19:31:26.722734 22577 net.cpp:408] pool0 <- conv0
I0428 19:31:26.722744 22577 net.cpp:382] pool0 -> pool0
I0428 19:31:26.722787 22577 net.cpp:124] Setting up pool0
I0428 19:31:26.722795 22577 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:31:26.722800 22577 net.cpp:139] Memory required for data: 3194800
I0428 19:31:26.722805 22577 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:26.722816 22577 net.cpp:86] Creating Layer ip1
I0428 19:31:26.722823 22577 net.cpp:408] ip1 <- pool0
I0428 19:31:26.722831 22577 net.cpp:382] ip1 -> ip1
I0428 19:31:26.723004 22577 net.cpp:124] Setting up ip1
I0428 19:31:26.723012 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723017 22577 net.cpp:139] Memory required for data: 3198800
I0428 19:31:26.723028 22577 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:26.723037 22577 net.cpp:86] Creating Layer relu1
I0428 19:31:26.723043 22577 net.cpp:408] relu1 <- ip1
I0428 19:31:26.723050 22577 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:26.723287 22577 net.cpp:124] Setting up relu1
I0428 19:31:26.723299 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723318 22577 net.cpp:139] Memory required for data: 3202800
I0428 19:31:26.723325 22577 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:26.723338 22577 net.cpp:86] Creating Layer ip2
I0428 19:31:26.723345 22577 net.cpp:408] ip2 <- ip1
I0428 19:31:26.723358 22577 net.cpp:382] ip2 -> ip2
I0428 19:31:26.723590 22577 net.cpp:124] Setting up ip2
I0428 19:31:26.723599 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723604 22577 net.cpp:139] Memory required for data: 3206800
I0428 19:31:26.723618 22577 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:26.723626 22577 net.cpp:86] Creating Layer relu2
I0428 19:31:26.723633 22577 net.cpp:408] relu2 <- ip2
I0428 19:31:26.723641 22577 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:26.723801 22577 net.cpp:124] Setting up relu2
I0428 19:31:26.723812 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723816 22577 net.cpp:139] Memory required for data: 3210800
I0428 19:31:26.723821 22577 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:31:26.723830 22577 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:31:26.723835 22577 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:31:26.723845 22577 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:31:26.723855 22577 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:31:26.723914 22577 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:31:26.723923 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723929 22577 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:26.723934 22577 net.cpp:139] Memory required for data: 3218800
I0428 19:31:26.723939 22577 layer_factory.hpp:77] Creating layer accuracy
I0428 19:31:26.723949 22577 net.cpp:86] Creating Layer accuracy
I0428 19:31:26.723954 22577 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:31:26.723961 22577 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:31:26.723970 22577 net.cpp:382] accuracy -> accuracy
I0428 19:31:26.723980 22577 net.cpp:124] Setting up accuracy
I0428 19:31:26.724004 22577 net.cpp:131] Top shape: (1)
I0428 19:31:26.724009 22577 net.cpp:139] Memory required for data: 3218804
I0428 19:31:26.724014 22577 layer_factory.hpp:77] Creating layer loss
I0428 19:31:26.724021 22577 net.cpp:86] Creating Layer loss
I0428 19:31:26.724027 22577 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:31:26.724033 22577 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:31:26.724041 22577 net.cpp:382] loss -> loss
I0428 19:31:26.724051 22577 layer_factory.hpp:77] Creating layer loss
I0428 19:31:26.725100 22577 net.cpp:124] Setting up loss
I0428 19:31:26.725118 22577 net.cpp:131] Top shape: (1)
I0428 19:31:26.725124 22577 net.cpp:134]     with loss weight 1
I0428 19:31:26.725133 22577 net.cpp:139] Memory required for data: 3218808
I0428 19:31:26.725139 22577 net.cpp:200] loss needs backward computation.
I0428 19:31:26.725145 22577 net.cpp:202] accuracy does not need backward computation.
I0428 19:31:26.725152 22577 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:31:26.725159 22577 net.cpp:200] relu2 needs backward computation.
I0428 19:31:26.725163 22577 net.cpp:200] ip2 needs backward computation.
I0428 19:31:26.725184 22577 net.cpp:200] relu1 needs backward computation.
I0428 19:31:26.725189 22577 net.cpp:200] ip1 needs backward computation.
I0428 19:31:26.725209 22577 net.cpp:200] pool0 needs backward computation.
I0428 19:31:26.725214 22577 net.cpp:200] conv0 needs backward computation.
I0428 19:31:26.725235 22577 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:31:26.725241 22577 net.cpp:202] mnist does not need backward computation.
I0428 19:31:26.725246 22577 net.cpp:244] This network produces output accuracy
I0428 19:31:26.725252 22577 net.cpp:244] This network produces output loss
I0428 19:31:26.725267 22577 net.cpp:257] Network initialization done.
I0428 19:31:26.725306 22577 solver.cpp:56] Solver scaffolding done.
I0428 19:31:26.725519 22577 caffe.cpp:248] Starting Optimization
I0428 19:31:26.725525 22577 solver.cpp:273] Solving LeNet
I0428 19:31:26.725543 22577 solver.cpp:274] Learning Rate Policy: inv
I0428 19:31:26.725651 22577 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:31:26.729249 22577 blocking_queue.cpp:49] Waiting for data
I0428 19:31:26.801484 22584 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:26.801969 22577 solver.cpp:398]     Test net output #0: accuracy = 0.1097
I0428 19:31:26.801990 22577 solver.cpp:398]     Test net output #1: loss = 2.31785 (* 1 = 2.31785 loss)
I0428 19:31:26.804141 22577 solver.cpp:219] Iteration 0 (-1.03416e-42 iter/s, 0.0785674s/100 iters), loss = 2.32443
I0428 19:31:26.804195 22577 solver.cpp:238]     Train net output #0: loss = 2.32443 (* 1 = 2.32443 loss)
I0428 19:31:26.804214 22577 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:31:26.862274 22577 solver.cpp:219] Iteration 100 (1721.97 iter/s, 0.058073s/100 iters), loss = 1.18625
I0428 19:31:26.862316 22577 solver.cpp:238]     Train net output #0: loss = 1.18625 (* 1 = 1.18625 loss)
I0428 19:31:26.862327 22577 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:31:26.917948 22577 solver.cpp:219] Iteration 200 (1797.69 iter/s, 0.0556268s/100 iters), loss = 0.931702
I0428 19:31:26.917978 22577 solver.cpp:238]     Train net output #0: loss = 0.931702 (* 1 = 0.931702 loss)
I0428 19:31:26.917986 22577 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:31:26.976060 22577 solver.cpp:219] Iteration 300 (1721.77 iter/s, 0.0580797s/100 iters), loss = 1.06556
I0428 19:31:26.976088 22577 solver.cpp:238]     Train net output #0: loss = 1.06556 (* 1 = 1.06556 loss)
I0428 19:31:26.976096 22577 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:31:27.035534 22577 solver.cpp:219] Iteration 400 (1682.34 iter/s, 0.059441s/100 iters), loss = 0.879413
I0428 19:31:27.035559 22577 solver.cpp:238]     Train net output #0: loss = 0.879413 (* 1 = 0.879413 loss)
I0428 19:31:27.035569 22577 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:31:27.091954 22577 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:31:27.166805 22584 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:27.167274 22577 solver.cpp:398]     Test net output #0: accuracy = 0.6606
I0428 19:31:27.167294 22577 solver.cpp:398]     Test net output #1: loss = 0.904557 (* 1 = 0.904557 loss)
I0428 19:31:27.167964 22577 solver.cpp:219] Iteration 500 (755.316 iter/s, 0.132395s/100 iters), loss = 0.970923
I0428 19:31:27.167989 22577 solver.cpp:238]     Train net output #0: loss = 0.970923 (* 1 = 0.970923 loss)
I0428 19:31:27.167997 22577 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:31:27.225989 22577 solver.cpp:219] Iteration 600 (1724.31 iter/s, 0.0579942s/100 iters), loss = 0.903607
I0428 19:31:27.226034 22577 solver.cpp:238]     Train net output #0: loss = 0.903607 (* 1 = 0.903607 loss)
I0428 19:31:27.226044 22577 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:31:27.281929 22577 solver.cpp:219] Iteration 700 (1789.2 iter/s, 0.0558909s/100 iters), loss = 0.765021
I0428 19:31:27.281956 22577 solver.cpp:238]     Train net output #0: loss = 0.765021 (* 1 = 0.765021 loss)
I0428 19:31:27.281965 22577 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:31:27.342150 22577 solver.cpp:219] Iteration 800 (1661.58 iter/s, 0.0601836s/100 iters), loss = 1.15074
I0428 19:31:27.342178 22577 solver.cpp:238]     Train net output #0: loss = 1.15074 (* 1 = 1.15074 loss)
I0428 19:31:27.342187 22577 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:31:27.401387 22577 solver.cpp:219] Iteration 900 (1689.12 iter/s, 0.0592026s/100 iters), loss = 0.873006
I0428 19:31:27.401413 22577 solver.cpp:238]     Train net output #0: loss = 0.873006 (* 1 = 0.873006 loss)
I0428 19:31:27.401423 22577 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:31:27.421800 22583 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:27.460063 22577 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:31:27.460801 22577 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:31:27.461382 22577 solver.cpp:311] Iteration 1000, loss = 0.867557
I0428 19:31:27.461396 22577 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:31:27.536286 22584 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:27.536782 22577 solver.cpp:398]     Test net output #0: accuracy = 0.674
I0428 19:31:27.536801 22577 solver.cpp:398]     Test net output #1: loss = 0.840053 (* 1 = 0.840053 loss)
I0428 19:31:27.536808 22577 solver.cpp:316] Optimization Done.
I0428 19:31:27.536823 22577 caffe.cpp:259] Optimization Done.
