I0428 19:57:40.968399 28742 caffe.cpp:218] Using GPUs 0
I0428 19:57:41.005647 28742 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:41.460047 28742 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test796.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:41.460209 28742 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test796.prototxt
I0428 19:57:41.460572 28742 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:41.460597 28742 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:41.460681 28742 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:41.460747 28742 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:41.460868 28742 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:41.460906 28742 net.cpp:86] Creating Layer mnist
I0428 19:57:41.460914 28742 net.cpp:382] mnist -> data
I0428 19:57:41.460934 28742 net.cpp:382] mnist -> label
I0428 19:57:41.461933 28742 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:41.464308 28742 net.cpp:124] Setting up mnist
I0428 19:57:41.464339 28742 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:41.464345 28742 net.cpp:131] Top shape: 64 (64)
I0428 19:57:41.464349 28742 net.cpp:139] Memory required for data: 200960
I0428 19:57:41.464354 28742 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:41.464395 28742 net.cpp:86] Creating Layer conv0
I0428 19:57:41.464411 28742 net.cpp:408] conv0 <- data
I0428 19:57:41.464421 28742 net.cpp:382] conv0 -> conv0
I0428 19:57:41.692041 28742 net.cpp:124] Setting up conv0
I0428 19:57:41.692083 28742 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:41.692087 28742 net.cpp:139] Memory required for data: 1675520
I0428 19:57:41.692102 28742 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:41.692128 28742 net.cpp:86] Creating Layer pool0
I0428 19:57:41.692132 28742 net.cpp:408] pool0 <- conv0
I0428 19:57:41.692152 28742 net.cpp:382] pool0 -> pool0
I0428 19:57:41.692198 28742 net.cpp:124] Setting up pool0
I0428 19:57:41.692210 28742 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:41.692214 28742 net.cpp:139] Memory required for data: 2044160
I0428 19:57:41.692216 28742 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:41.692226 28742 net.cpp:86] Creating Layer conv1
I0428 19:57:41.692229 28742 net.cpp:408] conv1 <- pool0
I0428 19:57:41.692234 28742 net.cpp:382] conv1 -> conv1
I0428 19:57:41.695024 28742 net.cpp:124] Setting up conv1
I0428 19:57:41.695053 28742 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:41.695057 28742 net.cpp:139] Memory required for data: 2126080
I0428 19:57:41.695066 28742 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:41.695073 28742 net.cpp:86] Creating Layer pool1
I0428 19:57:41.695077 28742 net.cpp:408] pool1 <- conv1
I0428 19:57:41.695082 28742 net.cpp:382] pool1 -> pool1
I0428 19:57:41.695152 28742 net.cpp:124] Setting up pool1
I0428 19:57:41.695158 28742 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:41.695159 28742 net.cpp:139] Memory required for data: 2146560
I0428 19:57:41.695163 28742 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:41.695170 28742 net.cpp:86] Creating Layer ip1
I0428 19:57:41.695174 28742 net.cpp:408] ip1 <- pool1
I0428 19:57:41.695178 28742 net.cpp:382] ip1 -> ip1
I0428 19:57:41.695277 28742 net.cpp:124] Setting up ip1
I0428 19:57:41.695284 28742 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:41.695288 28742 net.cpp:139] Memory required for data: 2149120
I0428 19:57:41.695296 28742 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:41.695300 28742 net.cpp:86] Creating Layer relu1
I0428 19:57:41.695303 28742 net.cpp:408] relu1 <- ip1
I0428 19:57:41.695308 28742 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:41.695488 28742 net.cpp:124] Setting up relu1
I0428 19:57:41.695497 28742 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:41.695500 28742 net.cpp:139] Memory required for data: 2151680
I0428 19:57:41.695503 28742 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:41.695509 28742 net.cpp:86] Creating Layer ip2
I0428 19:57:41.695513 28742 net.cpp:408] ip2 <- ip1
I0428 19:57:41.695518 28742 net.cpp:382] ip2 -> ip2
I0428 19:57:41.695611 28742 net.cpp:124] Setting up ip2
I0428 19:57:41.695617 28742 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:41.695621 28742 net.cpp:139] Memory required for data: 2158080
I0428 19:57:41.695626 28742 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:41.695631 28742 net.cpp:86] Creating Layer relu2
I0428 19:57:41.695634 28742 net.cpp:408] relu2 <- ip2
I0428 19:57:41.695638 28742 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:41.696365 28742 net.cpp:124] Setting up relu2
I0428 19:57:41.696377 28742 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:41.696398 28742 net.cpp:139] Memory required for data: 2164480
I0428 19:57:41.696400 28742 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:41.696408 28742 net.cpp:86] Creating Layer ip3
I0428 19:57:41.696411 28742 net.cpp:408] ip3 <- ip2
I0428 19:57:41.696418 28742 net.cpp:382] ip3 -> ip3
I0428 19:57:41.696537 28742 net.cpp:124] Setting up ip3
I0428 19:57:41.696543 28742 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:41.696547 28742 net.cpp:139] Memory required for data: 2167040
I0428 19:57:41.696554 28742 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:41.696559 28742 net.cpp:86] Creating Layer relu3
I0428 19:57:41.696563 28742 net.cpp:408] relu3 <- ip3
I0428 19:57:41.696566 28742 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:41.696761 28742 net.cpp:124] Setting up relu3
I0428 19:57:41.696770 28742 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:41.696774 28742 net.cpp:139] Memory required for data: 2169600
I0428 19:57:41.696776 28742 layer_factory.hpp:77] Creating layer loss
I0428 19:57:41.696782 28742 net.cpp:86] Creating Layer loss
I0428 19:57:41.696785 28742 net.cpp:408] loss <- ip3
I0428 19:57:41.696789 28742 net.cpp:408] loss <- label
I0428 19:57:41.696796 28742 net.cpp:382] loss -> loss
I0428 19:57:41.696838 28742 layer_factory.hpp:77] Creating layer loss
I0428 19:57:41.697093 28742 net.cpp:124] Setting up loss
I0428 19:57:41.697103 28742 net.cpp:131] Top shape: (1)
I0428 19:57:41.697120 28742 net.cpp:134]     with loss weight 1
I0428 19:57:41.697149 28742 net.cpp:139] Memory required for data: 2169604
I0428 19:57:41.697154 28742 net.cpp:200] loss needs backward computation.
I0428 19:57:41.697157 28742 net.cpp:200] relu3 needs backward computation.
I0428 19:57:41.697160 28742 net.cpp:200] ip3 needs backward computation.
I0428 19:57:41.697163 28742 net.cpp:200] relu2 needs backward computation.
I0428 19:57:41.697165 28742 net.cpp:200] ip2 needs backward computation.
I0428 19:57:41.697168 28742 net.cpp:200] relu1 needs backward computation.
I0428 19:57:41.697170 28742 net.cpp:200] ip1 needs backward computation.
I0428 19:57:41.697173 28742 net.cpp:200] pool1 needs backward computation.
I0428 19:57:41.697176 28742 net.cpp:200] conv1 needs backward computation.
I0428 19:57:41.697180 28742 net.cpp:200] pool0 needs backward computation.
I0428 19:57:41.697182 28742 net.cpp:200] conv0 needs backward computation.
I0428 19:57:41.697199 28742 net.cpp:202] mnist does not need backward computation.
I0428 19:57:41.697202 28742 net.cpp:244] This network produces output loss
I0428 19:57:41.697214 28742 net.cpp:257] Network initialization done.
I0428 19:57:41.697576 28742 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test796.prototxt
I0428 19:57:41.697633 28742 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:41.697721 28742 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:41.697819 28742 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:41.697862 28742 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:41.697875 28742 net.cpp:86] Creating Layer mnist
I0428 19:57:41.697880 28742 net.cpp:382] mnist -> data
I0428 19:57:41.697886 28742 net.cpp:382] mnist -> label
I0428 19:57:41.697971 28742 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:41.700001 28742 net.cpp:124] Setting up mnist
I0428 19:57:41.700031 28742 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:41.700037 28742 net.cpp:131] Top shape: 100 (100)
I0428 19:57:41.700039 28742 net.cpp:139] Memory required for data: 314000
I0428 19:57:41.700042 28742 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:41.700048 28742 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:41.700052 28742 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:41.700057 28742 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:41.700062 28742 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:41.700114 28742 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:41.700120 28742 net.cpp:131] Top shape: 100 (100)
I0428 19:57:41.700124 28742 net.cpp:131] Top shape: 100 (100)
I0428 19:57:41.700126 28742 net.cpp:139] Memory required for data: 314800
I0428 19:57:41.700129 28742 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:41.700137 28742 net.cpp:86] Creating Layer conv0
I0428 19:57:41.700140 28742 net.cpp:408] conv0 <- data
I0428 19:57:41.700146 28742 net.cpp:382] conv0 -> conv0
I0428 19:57:41.701915 28742 net.cpp:124] Setting up conv0
I0428 19:57:41.701928 28742 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:41.701932 28742 net.cpp:139] Memory required for data: 2618800
I0428 19:57:41.701941 28742 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:41.701963 28742 net.cpp:86] Creating Layer pool0
I0428 19:57:41.701967 28742 net.cpp:408] pool0 <- conv0
I0428 19:57:41.701972 28742 net.cpp:382] pool0 -> pool0
I0428 19:57:41.702033 28742 net.cpp:124] Setting up pool0
I0428 19:57:41.702039 28742 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:41.702040 28742 net.cpp:139] Memory required for data: 3194800
I0428 19:57:41.702044 28742 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:41.702051 28742 net.cpp:86] Creating Layer conv1
I0428 19:57:41.702054 28742 net.cpp:408] conv1 <- pool0
I0428 19:57:41.702059 28742 net.cpp:382] conv1 -> conv1
I0428 19:57:41.704192 28742 net.cpp:124] Setting up conv1
I0428 19:57:41.704221 28742 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:41.704232 28742 net.cpp:139] Memory required for data: 3322800
I0428 19:57:41.704257 28742 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:41.704264 28742 net.cpp:86] Creating Layer pool1
I0428 19:57:41.704273 28742 net.cpp:408] pool1 <- conv1
I0428 19:57:41.704279 28742 net.cpp:382] pool1 -> pool1
I0428 19:57:41.704329 28742 net.cpp:124] Setting up pool1
I0428 19:57:41.704345 28742 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:41.704349 28742 net.cpp:139] Memory required for data: 3354800
I0428 19:57:41.704351 28742 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:41.704365 28742 net.cpp:86] Creating Layer ip1
I0428 19:57:41.704367 28742 net.cpp:408] ip1 <- pool1
I0428 19:57:41.704371 28742 net.cpp:382] ip1 -> ip1
I0428 19:57:41.704495 28742 net.cpp:124] Setting up ip1
I0428 19:57:41.704502 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.704514 28742 net.cpp:139] Memory required for data: 3358800
I0428 19:57:41.704521 28742 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:41.704527 28742 net.cpp:86] Creating Layer relu1
I0428 19:57:41.704530 28742 net.cpp:408] relu1 <- ip1
I0428 19:57:41.704535 28742 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:41.704800 28742 net.cpp:124] Setting up relu1
I0428 19:57:41.704813 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.704843 28742 net.cpp:139] Memory required for data: 3362800
I0428 19:57:41.704852 28742 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:41.704860 28742 net.cpp:86] Creating Layer ip2
I0428 19:57:41.704864 28742 net.cpp:408] ip2 <- ip1
I0428 19:57:41.704869 28742 net.cpp:382] ip2 -> ip2
I0428 19:57:41.704970 28742 net.cpp:124] Setting up ip2
I0428 19:57:41.704977 28742 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:41.705001 28742 net.cpp:139] Memory required for data: 3372800
I0428 19:57:41.705018 28742 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:41.705024 28742 net.cpp:86] Creating Layer relu2
I0428 19:57:41.705026 28742 net.cpp:408] relu2 <- ip2
I0428 19:57:41.705030 28742 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:41.705205 28742 net.cpp:124] Setting up relu2
I0428 19:57:41.705214 28742 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:41.705216 28742 net.cpp:139] Memory required for data: 3382800
I0428 19:57:41.705219 28742 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:41.705224 28742 net.cpp:86] Creating Layer ip3
I0428 19:57:41.705227 28742 net.cpp:408] ip3 <- ip2
I0428 19:57:41.705234 28742 net.cpp:382] ip3 -> ip3
I0428 19:57:41.705363 28742 net.cpp:124] Setting up ip3
I0428 19:57:41.705368 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.705371 28742 net.cpp:139] Memory required for data: 3386800
I0428 19:57:41.705379 28742 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:41.705382 28742 net.cpp:86] Creating Layer relu3
I0428 19:57:41.705385 28742 net.cpp:408] relu3 <- ip3
I0428 19:57:41.705390 28742 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:41.706301 28742 net.cpp:124] Setting up relu3
I0428 19:57:41.706313 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.706322 28742 net.cpp:139] Memory required for data: 3390800
I0428 19:57:41.706326 28742 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:41.706331 28742 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:41.706334 28742 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:41.706341 28742 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:41.706347 28742 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:41.706390 28742 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:41.706395 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.706415 28742 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:41.706418 28742 net.cpp:139] Memory required for data: 3398800
I0428 19:57:41.706420 28742 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:41.706426 28742 net.cpp:86] Creating Layer accuracy
I0428 19:57:41.706429 28742 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:41.706434 28742 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:41.706439 28742 net.cpp:382] accuracy -> accuracy
I0428 19:57:41.706445 28742 net.cpp:124] Setting up accuracy
I0428 19:57:41.706449 28742 net.cpp:131] Top shape: (1)
I0428 19:57:41.706451 28742 net.cpp:139] Memory required for data: 3398804
I0428 19:57:41.706454 28742 layer_factory.hpp:77] Creating layer loss
I0428 19:57:41.706457 28742 net.cpp:86] Creating Layer loss
I0428 19:57:41.706460 28742 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:41.706465 28742 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:41.706468 28742 net.cpp:382] loss -> loss
I0428 19:57:41.706473 28742 layer_factory.hpp:77] Creating layer loss
I0428 19:57:41.706791 28742 net.cpp:124] Setting up loss
I0428 19:57:41.706801 28742 net.cpp:131] Top shape: (1)
I0428 19:57:41.706805 28742 net.cpp:134]     with loss weight 1
I0428 19:57:41.706811 28742 net.cpp:139] Memory required for data: 3398808
I0428 19:57:41.706826 28742 net.cpp:200] loss needs backward computation.
I0428 19:57:41.706837 28742 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:41.706842 28742 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:41.706845 28742 net.cpp:200] relu3 needs backward computation.
I0428 19:57:41.706848 28742 net.cpp:200] ip3 needs backward computation.
I0428 19:57:41.706858 28742 net.cpp:200] relu2 needs backward computation.
I0428 19:57:41.706861 28742 net.cpp:200] ip2 needs backward computation.
I0428 19:57:41.706864 28742 net.cpp:200] relu1 needs backward computation.
I0428 19:57:41.706867 28742 net.cpp:200] ip1 needs backward computation.
I0428 19:57:41.706876 28742 net.cpp:200] pool1 needs backward computation.
I0428 19:57:41.706879 28742 net.cpp:200] conv1 needs backward computation.
I0428 19:57:41.706882 28742 net.cpp:200] pool0 needs backward computation.
I0428 19:57:41.706885 28742 net.cpp:200] conv0 needs backward computation.
I0428 19:57:41.706890 28742 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:41.706905 28742 net.cpp:202] mnist does not need backward computation.
I0428 19:57:41.706907 28742 net.cpp:244] This network produces output accuracy
I0428 19:57:41.706912 28742 net.cpp:244] This network produces output loss
I0428 19:57:41.706923 28742 net.cpp:257] Network initialization done.
I0428 19:57:41.706993 28742 solver.cpp:56] Solver scaffolding done.
I0428 19:57:41.707324 28742 caffe.cpp:248] Starting Optimization
I0428 19:57:41.707330 28742 solver.cpp:273] Solving LeNet
I0428 19:57:41.707334 28742 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:41.708158 28742 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:41.711900 28742 blocking_queue.cpp:49] Waiting for data
I0428 19:57:41.783375 28749 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:41.783881 28742 solver.cpp:398]     Test net output #0: accuracy = 0.0965
I0428 19:57:41.783900 28742 solver.cpp:398]     Test net output #1: loss = 2.34668 (* 1 = 2.34668 loss)
I0428 19:57:41.786507 28742 solver.cpp:219] Iteration 0 (0 iter/s, 0.079146s/100 iters), loss = 2.31727
I0428 19:57:41.786530 28742 solver.cpp:238]     Train net output #0: loss = 2.31727 (* 1 = 2.31727 loss)
I0428 19:57:41.786556 28742 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:41.864001 28742 solver.cpp:219] Iteration 100 (1291 iter/s, 0.0774596s/100 iters), loss = 0.865987
I0428 19:57:41.864025 28742 solver.cpp:238]     Train net output #0: loss = 0.865987 (* 1 = 0.865987 loss)
I0428 19:57:41.864047 28742 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:41.941602 28742 solver.cpp:219] Iteration 200 (1289.19 iter/s, 0.0775682s/100 iters), loss = 0.523364
I0428 19:57:41.941625 28742 solver.cpp:238]     Train net output #0: loss = 0.523364 (* 1 = 0.523364 loss)
I0428 19:57:41.941646 28742 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:42.018463 28742 solver.cpp:219] Iteration 300 (1301.58 iter/s, 0.0768297s/100 iters), loss = 0.449443
I0428 19:57:42.018486 28742 solver.cpp:238]     Train net output #0: loss = 0.449443 (* 1 = 0.449443 loss)
I0428 19:57:42.018491 28742 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:42.095571 28742 solver.cpp:219] Iteration 400 (1297.5 iter/s, 0.0770715s/100 iters), loss = 0.651199
I0428 19:57:42.095602 28742 solver.cpp:238]     Train net output #0: loss = 0.651199 (* 1 = 0.651199 loss)
I0428 19:57:42.095629 28742 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:42.172279 28742 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:42.225975 28749 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:42.226482 28742 solver.cpp:398]     Test net output #0: accuracy = 0.9159
I0428 19:57:42.226501 28742 solver.cpp:398]     Test net output #1: loss = 0.287056 (* 1 = 0.287056 loss)
I0428 19:57:42.227308 28742 solver.cpp:219] Iteration 500 (759.322 iter/s, 0.131696s/100 iters), loss = 0.232357
I0428 19:57:42.227332 28742 solver.cpp:238]     Train net output #0: loss = 0.232357 (* 1 = 0.232357 loss)
I0428 19:57:42.227358 28742 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:42.320293 28742 solver.cpp:219] Iteration 600 (1075.82 iter/s, 0.0929526s/100 iters), loss = 0.112138
I0428 19:57:42.320317 28742 solver.cpp:238]     Train net output #0: loss = 0.112138 (* 1 = 0.112138 loss)
I0428 19:57:42.320338 28742 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:42.398059 28742 solver.cpp:219] Iteration 700 (1286.46 iter/s, 0.0777329s/100 iters), loss = 0.244524
I0428 19:57:42.398087 28742 solver.cpp:238]     Train net output #0: loss = 0.244524 (* 1 = 0.244524 loss)
I0428 19:57:42.398093 28742 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:42.476001 28742 solver.cpp:219] Iteration 800 (1283.6 iter/s, 0.0779059s/100 iters), loss = 0.235272
I0428 19:57:42.476024 28742 solver.cpp:238]     Train net output #0: loss = 0.235272 (* 1 = 0.235272 loss)
I0428 19:57:42.476045 28742 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:42.551949 28742 solver.cpp:219] Iteration 900 (1317.26 iter/s, 0.0759153s/100 iters), loss = 0.253022
I0428 19:57:42.551973 28742 solver.cpp:238]     Train net output #0: loss = 0.253022 (* 1 = 0.253022 loss)
I0428 19:57:42.551995 28742 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:42.577347 28748 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:42.626839 28742 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:42.627573 28742 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:42.628048 28742 solver.cpp:311] Iteration 1000, loss = 0.219427
I0428 19:57:42.628063 28742 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:42.702469 28749 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:42.703037 28742 solver.cpp:398]     Test net output #0: accuracy = 0.9572
I0428 19:57:42.703054 28742 solver.cpp:398]     Test net output #1: loss = 0.13915 (* 1 = 0.13915 loss)
I0428 19:57:42.703059 28742 solver.cpp:316] Optimization Done.
I0428 19:57:42.703063 28742 caffe.cpp:259] Optimization Done.
