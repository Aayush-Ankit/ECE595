I0428 19:31:35.753093 22620 caffe.cpp:218] Using GPUs 0
I0428 19:31:35.790562 22620 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:31:36.310818 22620 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test127.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:31:36.310945 22620 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test127.prototxt
I0428 19:31:36.311259 22620 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:31:36.311275 22620 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:31:36.311353 22620 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:36.311417 22620 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:36.311517 22620 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:31:36.311539 22620 net.cpp:86] Creating Layer mnist
I0428 19:31:36.311547 22620 net.cpp:382] mnist -> data
I0428 19:31:36.311568 22620 net.cpp:382] mnist -> label
I0428 19:31:36.312605 22620 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:31:36.315008 22620 net.cpp:124] Setting up mnist
I0428 19:31:36.315027 22620 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:31:36.315034 22620 net.cpp:131] Top shape: 64 (64)
I0428 19:31:36.315037 22620 net.cpp:139] Memory required for data: 200960
I0428 19:31:36.315044 22620 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:36.315071 22620 net.cpp:86] Creating Layer conv0
I0428 19:31:36.315078 22620 net.cpp:408] conv0 <- data
I0428 19:31:36.315089 22620 net.cpp:382] conv0 -> conv0
I0428 19:31:36.591922 22620 net.cpp:124] Setting up conv0
I0428 19:31:36.591948 22620 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:31:36.591953 22620 net.cpp:139] Memory required for data: 1675520
I0428 19:31:36.591967 22620 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:36.591979 22620 net.cpp:86] Creating Layer pool0
I0428 19:31:36.591984 22620 net.cpp:408] pool0 <- conv0
I0428 19:31:36.591989 22620 net.cpp:382] pool0 -> pool0
I0428 19:31:36.592033 22620 net.cpp:124] Setting up pool0
I0428 19:31:36.592038 22620 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:31:36.592041 22620 net.cpp:139] Memory required for data: 2044160
I0428 19:31:36.592059 22620 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:36.592067 22620 net.cpp:86] Creating Layer ip1
I0428 19:31:36.592072 22620 net.cpp:408] ip1 <- pool0
I0428 19:31:36.592075 22620 net.cpp:382] ip1 -> ip1
I0428 19:31:36.593533 22620 net.cpp:124] Setting up ip1
I0428 19:31:36.593561 22620 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:31:36.593564 22620 net.cpp:139] Memory required for data: 2056960
I0428 19:31:36.593574 22620 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:36.593580 22620 net.cpp:86] Creating Layer relu1
I0428 19:31:36.593583 22620 net.cpp:408] relu1 <- ip1
I0428 19:31:36.593587 22620 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:36.593767 22620 net.cpp:124] Setting up relu1
I0428 19:31:36.593777 22620 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:31:36.593780 22620 net.cpp:139] Memory required for data: 2069760
I0428 19:31:36.593783 22620 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:36.593791 22620 net.cpp:86] Creating Layer ip2
I0428 19:31:36.593794 22620 net.cpp:408] ip2 <- ip1
I0428 19:31:36.593798 22620 net.cpp:382] ip2 -> ip2
I0428 19:31:36.593916 22620 net.cpp:124] Setting up ip2
I0428 19:31:36.593924 22620 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:36.593927 22620 net.cpp:139] Memory required for data: 2072320
I0428 19:31:36.593935 22620 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:36.593941 22620 net.cpp:86] Creating Layer relu2
I0428 19:31:36.593945 22620 net.cpp:408] relu2 <- ip2
I0428 19:31:36.593950 22620 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:36.594745 22620 net.cpp:124] Setting up relu2
I0428 19:31:36.594774 22620 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:36.594777 22620 net.cpp:139] Memory required for data: 2074880
I0428 19:31:36.594781 22620 layer_factory.hpp:77] Creating layer loss
I0428 19:31:36.594787 22620 net.cpp:86] Creating Layer loss
I0428 19:31:36.594791 22620 net.cpp:408] loss <- ip2
I0428 19:31:36.594795 22620 net.cpp:408] loss <- label
I0428 19:31:36.594801 22620 net.cpp:382] loss -> loss
I0428 19:31:36.594815 22620 layer_factory.hpp:77] Creating layer loss
I0428 19:31:36.595065 22620 net.cpp:124] Setting up loss
I0428 19:31:36.595077 22620 net.cpp:131] Top shape: (1)
I0428 19:31:36.595079 22620 net.cpp:134]     with loss weight 1
I0428 19:31:36.595093 22620 net.cpp:139] Memory required for data: 2074884
I0428 19:31:36.595096 22620 net.cpp:200] loss needs backward computation.
I0428 19:31:36.595100 22620 net.cpp:200] relu2 needs backward computation.
I0428 19:31:36.595103 22620 net.cpp:200] ip2 needs backward computation.
I0428 19:31:36.595105 22620 net.cpp:200] relu1 needs backward computation.
I0428 19:31:36.595108 22620 net.cpp:200] ip1 needs backward computation.
I0428 19:31:36.595111 22620 net.cpp:200] pool0 needs backward computation.
I0428 19:31:36.595114 22620 net.cpp:200] conv0 needs backward computation.
I0428 19:31:36.595118 22620 net.cpp:202] mnist does not need backward computation.
I0428 19:31:36.595120 22620 net.cpp:244] This network produces output loss
I0428 19:31:36.595127 22620 net.cpp:257] Network initialization done.
I0428 19:31:36.595402 22620 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test127.prototxt
I0428 19:31:36.595427 22620 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:31:36.595502 22620 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:36.595582 22620 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:36.595626 22620 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:31:36.595640 22620 net.cpp:86] Creating Layer mnist
I0428 19:31:36.595645 22620 net.cpp:382] mnist -> data
I0428 19:31:36.595652 22620 net.cpp:382] mnist -> label
I0428 19:31:36.595754 22620 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:31:36.597106 22620 net.cpp:124] Setting up mnist
I0428 19:31:36.597121 22620 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:31:36.597126 22620 net.cpp:131] Top shape: 100 (100)
I0428 19:31:36.597129 22620 net.cpp:139] Memory required for data: 314000
I0428 19:31:36.597132 22620 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:31:36.597141 22620 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:31:36.597144 22620 net.cpp:408] label_mnist_1_split <- label
I0428 19:31:36.597163 22620 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:31:36.597169 22620 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:31:36.597259 22620 net.cpp:124] Setting up label_mnist_1_split
I0428 19:31:36.597266 22620 net.cpp:131] Top shape: 100 (100)
I0428 19:31:36.597270 22620 net.cpp:131] Top shape: 100 (100)
I0428 19:31:36.597273 22620 net.cpp:139] Memory required for data: 314800
I0428 19:31:36.597276 22620 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:36.597285 22620 net.cpp:86] Creating Layer conv0
I0428 19:31:36.597291 22620 net.cpp:408] conv0 <- data
I0428 19:31:36.597314 22620 net.cpp:382] conv0 -> conv0
I0428 19:31:36.599122 22620 net.cpp:124] Setting up conv0
I0428 19:31:36.599134 22620 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:31:36.599138 22620 net.cpp:139] Memory required for data: 2618800
I0428 19:31:36.599148 22620 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:36.599159 22620 net.cpp:86] Creating Layer pool0
I0428 19:31:36.599164 22620 net.cpp:408] pool0 <- conv0
I0428 19:31:36.599169 22620 net.cpp:382] pool0 -> pool0
I0428 19:31:36.599205 22620 net.cpp:124] Setting up pool0
I0428 19:31:36.599211 22620 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:31:36.599215 22620 net.cpp:139] Memory required for data: 3194800
I0428 19:31:36.599217 22620 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:36.599231 22620 net.cpp:86] Creating Layer ip1
I0428 19:31:36.599236 22620 net.cpp:408] ip1 <- pool0
I0428 19:31:36.599239 22620 net.cpp:382] ip1 -> ip1
I0428 19:31:36.599752 22620 net.cpp:124] Setting up ip1
I0428 19:31:36.599759 22620 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:31:36.599762 22620 net.cpp:139] Memory required for data: 3214800
I0428 19:31:36.599786 22620 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:36.599793 22620 net.cpp:86] Creating Layer relu1
I0428 19:31:36.599797 22620 net.cpp:408] relu1 <- ip1
I0428 19:31:36.599802 22620 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:36.600119 22620 net.cpp:124] Setting up relu1
I0428 19:31:36.600142 22620 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:31:36.600158 22620 net.cpp:139] Memory required for data: 3234800
I0428 19:31:36.600162 22620 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:36.600169 22620 net.cpp:86] Creating Layer ip2
I0428 19:31:36.600172 22620 net.cpp:408] ip2 <- ip1
I0428 19:31:36.600178 22620 net.cpp:382] ip2 -> ip2
I0428 19:31:36.600301 22620 net.cpp:124] Setting up ip2
I0428 19:31:36.600308 22620 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:36.600311 22620 net.cpp:139] Memory required for data: 3238800
I0428 19:31:36.600319 22620 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:36.600325 22620 net.cpp:86] Creating Layer relu2
I0428 19:31:36.600329 22620 net.cpp:408] relu2 <- ip2
I0428 19:31:36.600338 22620 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:36.600494 22620 net.cpp:124] Setting up relu2
I0428 19:31:36.600502 22620 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:36.600505 22620 net.cpp:139] Memory required for data: 3242800
I0428 19:31:36.600509 22620 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:31:36.600514 22620 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:31:36.600517 22620 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:31:36.600522 22620 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:31:36.600535 22620 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:31:36.600571 22620 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:31:36.600577 22620 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:36.600580 22620 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:36.600584 22620 net.cpp:139] Memory required for data: 3250800
I0428 19:31:36.600586 22620 layer_factory.hpp:77] Creating layer accuracy
I0428 19:31:36.600596 22620 net.cpp:86] Creating Layer accuracy
I0428 19:31:36.600600 22620 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:31:36.600603 22620 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:31:36.600613 22620 net.cpp:382] accuracy -> accuracy
I0428 19:31:36.600621 22620 net.cpp:124] Setting up accuracy
I0428 19:31:36.600642 22620 net.cpp:131] Top shape: (1)
I0428 19:31:36.600646 22620 net.cpp:139] Memory required for data: 3250804
I0428 19:31:36.600648 22620 layer_factory.hpp:77] Creating layer loss
I0428 19:31:36.600653 22620 net.cpp:86] Creating Layer loss
I0428 19:31:36.600656 22620 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:31:36.600659 22620 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:31:36.600663 22620 net.cpp:382] loss -> loss
I0428 19:31:36.600669 22620 layer_factory.hpp:77] Creating layer loss
I0428 19:31:36.601699 22620 net.cpp:124] Setting up loss
I0428 19:31:36.601711 22620 net.cpp:131] Top shape: (1)
I0428 19:31:36.601714 22620 net.cpp:134]     with loss weight 1
I0428 19:31:36.601721 22620 net.cpp:139] Memory required for data: 3250808
I0428 19:31:36.601724 22620 net.cpp:200] loss needs backward computation.
I0428 19:31:36.601728 22620 net.cpp:202] accuracy does not need backward computation.
I0428 19:31:36.601732 22620 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:31:36.601735 22620 net.cpp:200] relu2 needs backward computation.
I0428 19:31:36.601739 22620 net.cpp:200] ip2 needs backward computation.
I0428 19:31:36.601742 22620 net.cpp:200] relu1 needs backward computation.
I0428 19:31:36.601745 22620 net.cpp:200] ip1 needs backward computation.
I0428 19:31:36.601749 22620 net.cpp:200] pool0 needs backward computation.
I0428 19:31:36.601752 22620 net.cpp:200] conv0 needs backward computation.
I0428 19:31:36.601757 22620 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:31:36.601759 22620 net.cpp:202] mnist does not need backward computation.
I0428 19:31:36.601763 22620 net.cpp:244] This network produces output accuracy
I0428 19:31:36.601766 22620 net.cpp:244] This network produces output loss
I0428 19:31:36.601776 22620 net.cpp:257] Network initialization done.
I0428 19:31:36.601809 22620 solver.cpp:56] Solver scaffolding done.
I0428 19:31:36.602031 22620 caffe.cpp:248] Starting Optimization
I0428 19:31:36.602036 22620 solver.cpp:273] Solving LeNet
I0428 19:31:36.602051 22620 solver.cpp:274] Learning Rate Policy: inv
I0428 19:31:36.602779 22620 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:31:36.605998 22620 blocking_queue.cpp:49] Waiting for data
I0428 19:31:36.678130 22627 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:36.678633 22620 solver.cpp:398]     Test net output #0: accuracy = 0.1389
I0428 19:31:36.678655 22620 solver.cpp:398]     Test net output #1: loss = 2.3175 (* 1 = 2.3175 loss)
I0428 19:31:36.681573 22620 solver.cpp:219] Iteration 0 (0 iter/s, 0.0794947s/100 iters), loss = 2.30313
I0428 19:31:36.681627 22620 solver.cpp:238]     Train net output #0: loss = 2.30313 (* 1 = 2.30313 loss)
I0428 19:31:36.681641 22620 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:31:36.749287 22620 solver.cpp:219] Iteration 100 (1478.11 iter/s, 0.0676538s/100 iters), loss = 0.33094
I0428 19:31:36.749312 22620 solver.cpp:238]     Train net output #0: loss = 0.33094 (* 1 = 0.33094 loss)
I0428 19:31:36.749318 22620 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:31:36.814828 22620 solver.cpp:219] Iteration 200 (1526.52 iter/s, 0.0655084s/100 iters), loss = 0.222121
I0428 19:31:36.814867 22620 solver.cpp:238]     Train net output #0: loss = 0.222121 (* 1 = 0.222121 loss)
I0428 19:31:36.814873 22620 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:31:36.880867 22620 solver.cpp:219] Iteration 300 (1515.08 iter/s, 0.066003s/100 iters), loss = 0.291717
I0428 19:31:36.880906 22620 solver.cpp:238]     Train net output #0: loss = 0.291717 (* 1 = 0.291717 loss)
I0428 19:31:36.880913 22620 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:31:36.946765 22620 solver.cpp:219] Iteration 400 (1518.21 iter/s, 0.065867s/100 iters), loss = 0.150484
I0428 19:31:36.946805 22620 solver.cpp:238]     Train net output #0: loss = 0.150484 (* 1 = 0.150484 loss)
I0428 19:31:36.946810 22620 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:31:37.011616 22620 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:31:37.064977 22627 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:37.065475 22620 solver.cpp:398]     Test net output #0: accuracy = 0.9439
I0428 19:31:37.065510 22620 solver.cpp:398]     Test net output #1: loss = 0.185072 (* 1 = 0.185072 loss)
I0428 19:31:37.066248 22620 solver.cpp:219] Iteration 500 (837.18 iter/s, 0.119449s/100 iters), loss = 0.273525
I0428 19:31:37.066288 22620 solver.cpp:238]     Train net output #0: loss = 0.273525 (* 1 = 0.273525 loss)
I0428 19:31:37.066295 22620 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:31:37.133183 22620 solver.cpp:219] Iteration 600 (1494.7 iter/s, 0.066903s/100 iters), loss = 0.187201
I0428 19:31:37.133222 22620 solver.cpp:238]     Train net output #0: loss = 0.187201 (* 1 = 0.187201 loss)
I0428 19:31:37.133229 22620 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:31:37.198765 22620 solver.cpp:219] Iteration 700 (1525.55 iter/s, 0.0655503s/100 iters), loss = 0.276496
I0428 19:31:37.198804 22620 solver.cpp:238]     Train net output #0: loss = 0.276496 (* 1 = 0.276496 loss)
I0428 19:31:37.198810 22620 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:31:37.264801 22620 solver.cpp:219] Iteration 800 (1515.06 iter/s, 0.0660039s/100 iters), loss = 0.277365
I0428 19:31:37.264860 22620 solver.cpp:238]     Train net output #0: loss = 0.277365 (* 1 = 0.277365 loss)
I0428 19:31:37.264868 22620 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:31:37.330690 22620 solver.cpp:219] Iteration 900 (1518.9 iter/s, 0.0658372s/100 iters), loss = 0.202802
I0428 19:31:37.330729 22620 solver.cpp:238]     Train net output #0: loss = 0.202802 (* 1 = 0.202802 loss)
I0428 19:31:37.330735 22620 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:31:37.354085 22626 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:37.402961 22620 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:31:37.404848 22620 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:31:37.406050 22620 solver.cpp:311] Iteration 1000, loss = 0.17804
I0428 19:31:37.406069 22620 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:31:37.458541 22627 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:37.459033 22620 solver.cpp:398]     Test net output #0: accuracy = 0.9653
I0428 19:31:37.459053 22620 solver.cpp:398]     Test net output #1: loss = 0.114986 (* 1 = 0.114986 loss)
I0428 19:31:37.459059 22620 solver.cpp:316] Optimization Done.
I0428 19:31:37.459062 22620 caffe.cpp:259] Optimization Done.
