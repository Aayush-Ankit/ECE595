I0428 19:58:27.142074 28977 caffe.cpp:218] Using GPUs 0
I0428 19:58:27.183090 28977 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:27.753891 28977 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test819.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:27.754032 28977 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test819.prototxt
I0428 19:58:27.754372 28977 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:27.754387 28977 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:27.754467 28977 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:27.754529 28977 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:27.754631 28977 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:27.754657 28977 net.cpp:86] Creating Layer mnist
I0428 19:58:27.754663 28977 net.cpp:382] mnist -> data
I0428 19:58:27.754686 28977 net.cpp:382] mnist -> label
I0428 19:58:27.755774 28977 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:27.758251 28977 net.cpp:124] Setting up mnist
I0428 19:58:27.758276 28977 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:27.758282 28977 net.cpp:131] Top shape: 64 (64)
I0428 19:58:27.758286 28977 net.cpp:139] Memory required for data: 200960
I0428 19:58:27.758294 28977 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:27.758309 28977 net.cpp:86] Creating Layer conv0
I0428 19:58:27.758323 28977 net.cpp:408] conv0 <- data
I0428 19:58:27.758335 28977 net.cpp:382] conv0 -> conv0
I0428 19:58:28.020172 28977 net.cpp:124] Setting up conv0
I0428 19:58:28.020198 28977 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:28.020202 28977 net.cpp:139] Memory required for data: 1675520
I0428 19:58:28.020217 28977 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:28.020231 28977 net.cpp:86] Creating Layer pool0
I0428 19:58:28.020234 28977 net.cpp:408] pool0 <- conv0
I0428 19:58:28.020239 28977 net.cpp:382] pool0 -> pool0
I0428 19:58:28.020301 28977 net.cpp:124] Setting up pool0
I0428 19:58:28.020308 28977 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:28.020328 28977 net.cpp:139] Memory required for data: 2044160
I0428 19:58:28.020331 28977 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:28.020342 28977 net.cpp:86] Creating Layer conv1
I0428 19:58:28.020346 28977 net.cpp:408] conv1 <- pool0
I0428 19:58:28.020352 28977 net.cpp:382] conv1 -> conv1
I0428 19:58:28.023105 28977 net.cpp:124] Setting up conv1
I0428 19:58:28.023136 28977 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:58:28.023140 28977 net.cpp:139] Memory required for data: 2208000
I0428 19:58:28.023149 28977 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:28.023155 28977 net.cpp:86] Creating Layer pool1
I0428 19:58:28.023159 28977 net.cpp:408] pool1 <- conv1
I0428 19:58:28.023180 28977 net.cpp:382] pool1 -> pool1
I0428 19:58:28.023216 28977 net.cpp:124] Setting up pool1
I0428 19:58:28.023223 28977 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:58:28.023226 28977 net.cpp:139] Memory required for data: 2248960
I0428 19:58:28.023229 28977 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:28.023236 28977 net.cpp:86] Creating Layer ip1
I0428 19:58:28.023239 28977 net.cpp:408] ip1 <- pool1
I0428 19:58:28.023244 28977 net.cpp:382] ip1 -> ip1
I0428 19:58:28.023360 28977 net.cpp:124] Setting up ip1
I0428 19:58:28.023366 28977 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:28.023370 28977 net.cpp:139] Memory required for data: 2251520
I0428 19:58:28.023376 28977 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:28.023381 28977 net.cpp:86] Creating Layer relu1
I0428 19:58:28.023385 28977 net.cpp:408] relu1 <- ip1
I0428 19:58:28.023389 28977 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:28.023558 28977 net.cpp:124] Setting up relu1
I0428 19:58:28.023567 28977 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:28.023571 28977 net.cpp:139] Memory required for data: 2254080
I0428 19:58:28.023573 28977 layer_factory.hpp:77] Creating layer loss
I0428 19:58:28.023579 28977 net.cpp:86] Creating Layer loss
I0428 19:58:28.023582 28977 net.cpp:408] loss <- ip1
I0428 19:58:28.023586 28977 net.cpp:408] loss <- label
I0428 19:58:28.023591 28977 net.cpp:382] loss -> loss
I0428 19:58:28.023608 28977 layer_factory.hpp:77] Creating layer loss
I0428 19:58:28.024446 28977 net.cpp:124] Setting up loss
I0428 19:58:28.024457 28977 net.cpp:131] Top shape: (1)
I0428 19:58:28.024477 28977 net.cpp:134]     with loss weight 1
I0428 19:58:28.024508 28977 net.cpp:139] Memory required for data: 2254084
I0428 19:58:28.024513 28977 net.cpp:200] loss needs backward computation.
I0428 19:58:28.024515 28977 net.cpp:200] relu1 needs backward computation.
I0428 19:58:28.024518 28977 net.cpp:200] ip1 needs backward computation.
I0428 19:58:28.024536 28977 net.cpp:200] pool1 needs backward computation.
I0428 19:58:28.024539 28977 net.cpp:200] conv1 needs backward computation.
I0428 19:58:28.024541 28977 net.cpp:200] pool0 needs backward computation.
I0428 19:58:28.024544 28977 net.cpp:200] conv0 needs backward computation.
I0428 19:58:28.024547 28977 net.cpp:202] mnist does not need backward computation.
I0428 19:58:28.024550 28977 net.cpp:244] This network produces output loss
I0428 19:58:28.024559 28977 net.cpp:257] Network initialization done.
I0428 19:58:28.024803 28977 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test819.prototxt
I0428 19:58:28.024848 28977 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:28.024921 28977 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:28.025007 28977 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:28.025053 28977 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:28.025065 28977 net.cpp:86] Creating Layer mnist
I0428 19:58:28.025070 28977 net.cpp:382] mnist -> data
I0428 19:58:28.025079 28977 net.cpp:382] mnist -> label
I0428 19:58:28.025176 28977 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:28.027088 28977 net.cpp:124] Setting up mnist
I0428 19:58:28.027128 28977 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:28.027133 28977 net.cpp:131] Top shape: 100 (100)
I0428 19:58:28.027153 28977 net.cpp:139] Memory required for data: 314000
I0428 19:58:28.027158 28977 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:28.027184 28977 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:28.027187 28977 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:28.027192 28977 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:28.027199 28977 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:28.027289 28977 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:28.027297 28977 net.cpp:131] Top shape: 100 (100)
I0428 19:58:28.027302 28977 net.cpp:131] Top shape: 100 (100)
I0428 19:58:28.027304 28977 net.cpp:139] Memory required for data: 314800
I0428 19:58:28.027307 28977 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:28.027317 28977 net.cpp:86] Creating Layer conv0
I0428 19:58:28.027320 28977 net.cpp:408] conv0 <- data
I0428 19:58:28.027325 28977 net.cpp:382] conv0 -> conv0
I0428 19:58:28.028084 28977 net.cpp:124] Setting up conv0
I0428 19:58:28.028095 28977 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:28.028098 28977 net.cpp:139] Memory required for data: 2618800
I0428 19:58:28.028122 28977 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:28.028128 28977 net.cpp:86] Creating Layer pool0
I0428 19:58:28.028131 28977 net.cpp:408] pool0 <- conv0
I0428 19:58:28.028136 28977 net.cpp:382] pool0 -> pool0
I0428 19:58:28.028170 28977 net.cpp:124] Setting up pool0
I0428 19:58:28.028178 28977 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:28.028182 28977 net.cpp:139] Memory required for data: 3194800
I0428 19:58:28.028184 28977 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:28.028192 28977 net.cpp:86] Creating Layer conv1
I0428 19:58:28.028194 28977 net.cpp:408] conv1 <- pool0
I0428 19:58:28.028199 28977 net.cpp:382] conv1 -> conv1
I0428 19:58:28.030391 28977 net.cpp:124] Setting up conv1
I0428 19:58:28.030405 28977 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:58:28.030410 28977 net.cpp:139] Memory required for data: 3450800
I0428 19:58:28.030433 28977 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:28.030442 28977 net.cpp:86] Creating Layer pool1
I0428 19:58:28.030457 28977 net.cpp:408] pool1 <- conv1
I0428 19:58:28.030463 28977 net.cpp:382] pool1 -> pool1
I0428 19:58:28.030516 28977 net.cpp:124] Setting up pool1
I0428 19:58:28.030524 28977 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:58:28.030526 28977 net.cpp:139] Memory required for data: 3514800
I0428 19:58:28.030529 28977 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:28.030534 28977 net.cpp:86] Creating Layer ip1
I0428 19:58:28.030539 28977 net.cpp:408] ip1 <- pool1
I0428 19:58:28.030553 28977 net.cpp:382] ip1 -> ip1
I0428 19:58:28.030707 28977 net.cpp:124] Setting up ip1
I0428 19:58:28.030715 28977 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:28.030719 28977 net.cpp:139] Memory required for data: 3518800
I0428 19:58:28.030732 28977 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:28.030738 28977 net.cpp:86] Creating Layer relu1
I0428 19:58:28.030741 28977 net.cpp:408] relu1 <- ip1
I0428 19:58:28.030746 28977 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:28.031548 28977 net.cpp:124] Setting up relu1
I0428 19:58:28.031559 28977 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:28.031563 28977 net.cpp:139] Memory required for data: 3522800
I0428 19:58:28.031568 28977 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:58:28.031574 28977 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:58:28.031579 28977 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:58:28.031584 28977 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:58:28.031589 28977 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:58:28.031631 28977 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:58:28.031638 28977 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:28.031641 28977 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:28.031644 28977 net.cpp:139] Memory required for data: 3530800
I0428 19:58:28.031647 28977 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:28.031652 28977 net.cpp:86] Creating Layer accuracy
I0428 19:58:28.031656 28977 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:58:28.031661 28977 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:28.031664 28977 net.cpp:382] accuracy -> accuracy
I0428 19:58:28.031672 28977 net.cpp:124] Setting up accuracy
I0428 19:58:28.031675 28977 net.cpp:131] Top shape: (1)
I0428 19:58:28.031678 28977 net.cpp:139] Memory required for data: 3530804
I0428 19:58:28.031682 28977 layer_factory.hpp:77] Creating layer loss
I0428 19:58:28.031685 28977 net.cpp:86] Creating Layer loss
I0428 19:58:28.031689 28977 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:58:28.031693 28977 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:28.031697 28977 net.cpp:382] loss -> loss
I0428 19:58:28.031710 28977 layer_factory.hpp:77] Creating layer loss
I0428 19:58:28.031957 28977 net.cpp:124] Setting up loss
I0428 19:58:28.031966 28977 net.cpp:131] Top shape: (1)
I0428 19:58:28.031970 28977 net.cpp:134]     with loss weight 1
I0428 19:58:28.031975 28977 net.cpp:139] Memory required for data: 3530808
I0428 19:58:28.031980 28977 net.cpp:200] loss needs backward computation.
I0428 19:58:28.031982 28977 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:28.031986 28977 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:58:28.031990 28977 net.cpp:200] relu1 needs backward computation.
I0428 19:58:28.031992 28977 net.cpp:200] ip1 needs backward computation.
I0428 19:58:28.031996 28977 net.cpp:200] pool1 needs backward computation.
I0428 19:58:28.031998 28977 net.cpp:200] conv1 needs backward computation.
I0428 19:58:28.032002 28977 net.cpp:200] pool0 needs backward computation.
I0428 19:58:28.032006 28977 net.cpp:200] conv0 needs backward computation.
I0428 19:58:28.032009 28977 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:28.032013 28977 net.cpp:202] mnist does not need backward computation.
I0428 19:58:28.032016 28977 net.cpp:244] This network produces output accuracy
I0428 19:58:28.032019 28977 net.cpp:244] This network produces output loss
I0428 19:58:28.032037 28977 net.cpp:257] Network initialization done.
I0428 19:58:28.032069 28977 solver.cpp:56] Solver scaffolding done.
I0428 19:58:28.032280 28977 caffe.cpp:248] Starting Optimization
I0428 19:58:28.032286 28977 solver.cpp:273] Solving LeNet
I0428 19:58:28.032289 28977 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:28.032389 28977 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:28.036367 28977 blocking_queue.cpp:49] Waiting for data
I0428 19:58:28.106464 28984 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:28.106937 28977 solver.cpp:398]     Test net output #0: accuracy = 0.0765
I0428 19:58:28.106966 28977 solver.cpp:398]     Test net output #1: loss = 2.30727 (* 1 = 2.30727 loss)
I0428 19:58:28.109297 28977 solver.cpp:219] Iteration 0 (0 iter/s, 0.0769821s/100 iters), loss = 2.30034
I0428 19:58:28.109329 28977 solver.cpp:238]     Train net output #0: loss = 2.30034 (* 1 = 2.30034 loss)
I0428 19:58:28.109349 28977 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:28.187758 28977 solver.cpp:219] Iteration 100 (1275.13 iter/s, 0.0784232s/100 iters), loss = 0.433228
I0428 19:58:28.187788 28977 solver.cpp:238]     Train net output #0: loss = 0.433228 (* 1 = 0.433228 loss)
I0428 19:58:28.187815 28977 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:28.264412 28977 solver.cpp:219] Iteration 200 (1305.18 iter/s, 0.0766176s/100 iters), loss = 0.214224
I0428 19:58:28.264441 28977 solver.cpp:238]     Train net output #0: loss = 0.214224 (* 1 = 0.214224 loss)
I0428 19:58:28.264467 28977 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:28.331491 28977 solver.cpp:219] Iteration 300 (1491.57 iter/s, 0.0670433s/100 iters), loss = 0.251753
I0428 19:58:28.331522 28977 solver.cpp:238]     Train net output #0: loss = 0.251753 (* 1 = 0.251753 loss)
I0428 19:58:28.331533 28977 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:28.394641 28977 solver.cpp:219] Iteration 400 (1584.45 iter/s, 0.0631134s/100 iters), loss = 0.123287
I0428 19:58:28.394670 28977 solver.cpp:238]     Train net output #0: loss = 0.123287 (* 1 = 0.123287 loss)
I0428 19:58:28.394695 28977 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:28.457147 28977 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:28.533185 28984 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:28.533746 28977 solver.cpp:398]     Test net output #0: accuracy = 0.959
I0428 19:58:28.533783 28977 solver.cpp:398]     Test net output #1: loss = 0.13588 (* 1 = 0.13588 loss)
I0428 19:58:28.534703 28977 solver.cpp:219] Iteration 500 (714.19 iter/s, 0.140019s/100 iters), loss = 0.174476
I0428 19:58:28.534755 28977 solver.cpp:238]     Train net output #0: loss = 0.174476 (* 1 = 0.174476 loss)
I0428 19:58:28.534767 28977 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:28.606788 28977 solver.cpp:219] Iteration 600 (1388.46 iter/s, 0.072022s/100 iters), loss = 0.1386
I0428 19:58:28.606822 28977 solver.cpp:238]     Train net output #0: loss = 0.1386 (* 1 = 0.1386 loss)
I0428 19:58:28.606832 28977 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:28.673226 28977 solver.cpp:219] Iteration 700 (1506.11 iter/s, 0.0663962s/100 iters), loss = 0.267371
I0428 19:58:28.673259 28977 solver.cpp:238]     Train net output #0: loss = 0.267371 (* 1 = 0.267371 loss)
I0428 19:58:28.673265 28977 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:28.749238 28977 solver.cpp:219] Iteration 800 (1316.33 iter/s, 0.0759685s/100 iters), loss = 0.214782
I0428 19:58:28.749279 28977 solver.cpp:238]     Train net output #0: loss = 0.214782 (* 1 = 0.214782 loss)
I0428 19:58:28.749289 28977 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:28.826328 28977 solver.cpp:219] Iteration 900 (1297.98 iter/s, 0.0770426s/100 iters), loss = 0.24518
I0428 19:58:28.826360 28977 solver.cpp:238]     Train net output #0: loss = 0.24518 (* 1 = 0.24518 loss)
I0428 19:58:28.826369 28977 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:28.853251 28983 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:28.905326 28977 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:28.905984 28977 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:28.906409 28977 solver.cpp:311] Iteration 1000, loss = 0.125777
I0428 19:58:28.906425 28977 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:28.981714 28984 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:28.982264 28977 solver.cpp:398]     Test net output #0: accuracy = 0.9682
I0428 19:58:28.982298 28977 solver.cpp:398]     Test net output #1: loss = 0.0997465 (* 1 = 0.0997465 loss)
I0428 19:58:28.982311 28977 solver.cpp:316] Optimization Done.
I0428 19:58:28.982319 28977 caffe.cpp:259] Optimization Done.
