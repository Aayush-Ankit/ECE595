I0428 19:44:34.778547 25633 caffe.cpp:218] Using GPUs 0
I0428 19:44:34.817459 25633 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:35.337522 25633 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test451.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:35.337657 25633 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test451.prototxt
I0428 19:44:35.338073 25633 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:35.338091 25633 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:35.338193 25633 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:35.338274 25633 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:35.338377 25633 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:35.338400 25633 net.cpp:86] Creating Layer mnist
I0428 19:44:35.338410 25633 net.cpp:382] mnist -> data
I0428 19:44:35.338433 25633 net.cpp:382] mnist -> label
I0428 19:44:35.339529 25633 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:35.341979 25633 net.cpp:124] Setting up mnist
I0428 19:44:35.341997 25633 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:35.342003 25633 net.cpp:131] Top shape: 64 (64)
I0428 19:44:35.342006 25633 net.cpp:139] Memory required for data: 200960
I0428 19:44:35.342015 25633 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:35.342061 25633 net.cpp:86] Creating Layer conv0
I0428 19:44:35.342084 25633 net.cpp:408] conv0 <- data
I0428 19:44:35.342097 25633 net.cpp:382] conv0 -> conv0
I0428 19:44:35.632629 25633 net.cpp:124] Setting up conv0
I0428 19:44:35.632660 25633 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:35.632665 25633 net.cpp:139] Memory required for data: 495872
I0428 19:44:35.632683 25633 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:35.632699 25633 net.cpp:86] Creating Layer pool0
I0428 19:44:35.632704 25633 net.cpp:408] pool0 <- conv0
I0428 19:44:35.632710 25633 net.cpp:382] pool0 -> pool0
I0428 19:44:35.632766 25633 net.cpp:124] Setting up pool0
I0428 19:44:35.632772 25633 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:35.632776 25633 net.cpp:139] Memory required for data: 569600
I0428 19:44:35.632779 25633 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:35.632793 25633 net.cpp:86] Creating Layer conv1
I0428 19:44:35.632797 25633 net.cpp:408] conv1 <- pool0
I0428 19:44:35.632802 25633 net.cpp:382] conv1 -> conv1
I0428 19:44:35.635896 25633 net.cpp:124] Setting up conv1
I0428 19:44:35.635915 25633 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:35.635918 25633 net.cpp:139] Memory required for data: 1388800
I0428 19:44:35.635928 25633 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:35.635937 25633 net.cpp:86] Creating Layer pool1
I0428 19:44:35.635941 25633 net.cpp:408] pool1 <- conv1
I0428 19:44:35.635947 25633 net.cpp:382] pool1 -> pool1
I0428 19:44:35.635990 25633 net.cpp:124] Setting up pool1
I0428 19:44:35.635996 25633 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:35.635999 25633 net.cpp:139] Memory required for data: 1593600
I0428 19:44:35.636003 25633 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:35.636010 25633 net.cpp:86] Creating Layer ip1
I0428 19:44:35.636014 25633 net.cpp:408] ip1 <- pool1
I0428 19:44:35.636019 25633 net.cpp:382] ip1 -> ip1
I0428 19:44:35.636255 25633 net.cpp:124] Setting up ip1
I0428 19:44:35.636265 25633 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:35.636267 25633 net.cpp:139] Memory required for data: 1600000
I0428 19:44:35.636276 25633 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:35.636282 25633 net.cpp:86] Creating Layer relu1
I0428 19:44:35.636286 25633 net.cpp:408] relu1 <- ip1
I0428 19:44:35.636291 25633 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:35.636477 25633 net.cpp:124] Setting up relu1
I0428 19:44:35.636488 25633 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:35.636492 25633 net.cpp:139] Memory required for data: 1606400
I0428 19:44:35.636495 25633 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:35.636503 25633 net.cpp:86] Creating Layer ip2
I0428 19:44:35.636507 25633 net.cpp:408] ip2 <- ip1
I0428 19:44:35.636512 25633 net.cpp:382] ip2 -> ip2
I0428 19:44:35.636620 25633 net.cpp:124] Setting up ip2
I0428 19:44:35.636627 25633 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:35.636631 25633 net.cpp:139] Memory required for data: 1608960
I0428 19:44:35.636637 25633 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:35.636644 25633 net.cpp:86] Creating Layer relu2
I0428 19:44:35.636648 25633 net.cpp:408] relu2 <- ip2
I0428 19:44:35.636652 25633 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:35.637471 25633 net.cpp:124] Setting up relu2
I0428 19:44:35.637485 25633 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:35.637490 25633 net.cpp:139] Memory required for data: 1611520
I0428 19:44:35.637493 25633 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:35.637501 25633 net.cpp:86] Creating Layer ip3
I0428 19:44:35.637506 25633 net.cpp:408] ip3 <- ip2
I0428 19:44:35.637511 25633 net.cpp:382] ip3 -> ip3
I0428 19:44:35.637629 25633 net.cpp:124] Setting up ip3
I0428 19:44:35.637639 25633 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:35.637641 25633 net.cpp:139] Memory required for data: 1614080
I0428 19:44:35.637651 25633 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:35.637656 25633 net.cpp:86] Creating Layer relu3
I0428 19:44:35.637660 25633 net.cpp:408] relu3 <- ip3
I0428 19:44:35.637665 25633 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:35.637852 25633 net.cpp:124] Setting up relu3
I0428 19:44:35.637862 25633 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:35.637866 25633 net.cpp:139] Memory required for data: 1616640
I0428 19:44:35.637871 25633 layer_factory.hpp:77] Creating layer loss
I0428 19:44:35.637876 25633 net.cpp:86] Creating Layer loss
I0428 19:44:35.637881 25633 net.cpp:408] loss <- ip3
I0428 19:44:35.637884 25633 net.cpp:408] loss <- label
I0428 19:44:35.637890 25633 net.cpp:382] loss -> loss
I0428 19:44:35.637912 25633 layer_factory.hpp:77] Creating layer loss
I0428 19:44:35.638165 25633 net.cpp:124] Setting up loss
I0428 19:44:35.638176 25633 net.cpp:131] Top shape: (1)
I0428 19:44:35.638180 25633 net.cpp:134]     with loss weight 1
I0428 19:44:35.638195 25633 net.cpp:139] Memory required for data: 1616644
I0428 19:44:35.638200 25633 net.cpp:200] loss needs backward computation.
I0428 19:44:35.638203 25633 net.cpp:200] relu3 needs backward computation.
I0428 19:44:35.638207 25633 net.cpp:200] ip3 needs backward computation.
I0428 19:44:35.638211 25633 net.cpp:200] relu2 needs backward computation.
I0428 19:44:35.638213 25633 net.cpp:200] ip2 needs backward computation.
I0428 19:44:35.638216 25633 net.cpp:200] relu1 needs backward computation.
I0428 19:44:35.638219 25633 net.cpp:200] ip1 needs backward computation.
I0428 19:44:35.638223 25633 net.cpp:200] pool1 needs backward computation.
I0428 19:44:35.638226 25633 net.cpp:200] conv1 needs backward computation.
I0428 19:44:35.638231 25633 net.cpp:200] pool0 needs backward computation.
I0428 19:44:35.638234 25633 net.cpp:200] conv0 needs backward computation.
I0428 19:44:35.638238 25633 net.cpp:202] mnist does not need backward computation.
I0428 19:44:35.638242 25633 net.cpp:244] This network produces output loss
I0428 19:44:35.638252 25633 net.cpp:257] Network initialization done.
I0428 19:44:35.638619 25633 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test451.prototxt
I0428 19:44:35.638649 25633 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:35.638753 25633 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:35.638842 25633 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:35.638892 25633 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:35.638906 25633 net.cpp:86] Creating Layer mnist
I0428 19:44:35.638911 25633 net.cpp:382] mnist -> data
I0428 19:44:35.638921 25633 net.cpp:382] mnist -> label
I0428 19:44:35.639016 25633 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:35.641144 25633 net.cpp:124] Setting up mnist
I0428 19:44:35.641160 25633 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:35.641165 25633 net.cpp:131] Top shape: 100 (100)
I0428 19:44:35.641168 25633 net.cpp:139] Memory required for data: 314000
I0428 19:44:35.641172 25633 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:35.641180 25633 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:35.641185 25633 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:35.641191 25633 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:35.641198 25633 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:35.641254 25633 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:35.641261 25633 net.cpp:131] Top shape: 100 (100)
I0428 19:44:35.641265 25633 net.cpp:131] Top shape: 100 (100)
I0428 19:44:35.641268 25633 net.cpp:139] Memory required for data: 314800
I0428 19:44:35.641271 25633 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:35.641281 25633 net.cpp:86] Creating Layer conv0
I0428 19:44:35.641284 25633 net.cpp:408] conv0 <- data
I0428 19:44:35.641290 25633 net.cpp:382] conv0 -> conv0
I0428 19:44:35.643174 25633 net.cpp:124] Setting up conv0
I0428 19:44:35.643191 25633 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:35.643195 25633 net.cpp:139] Memory required for data: 775600
I0428 19:44:35.643206 25633 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:35.643214 25633 net.cpp:86] Creating Layer pool0
I0428 19:44:35.643218 25633 net.cpp:408] pool0 <- conv0
I0428 19:44:35.643224 25633 net.cpp:382] pool0 -> pool0
I0428 19:44:35.643263 25633 net.cpp:124] Setting up pool0
I0428 19:44:35.643270 25633 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:35.643273 25633 net.cpp:139] Memory required for data: 890800
I0428 19:44:35.643276 25633 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:35.643285 25633 net.cpp:86] Creating Layer conv1
I0428 19:44:35.643290 25633 net.cpp:408] conv1 <- pool0
I0428 19:44:35.643296 25633 net.cpp:382] conv1 -> conv1
I0428 19:44:35.644991 25633 net.cpp:124] Setting up conv1
I0428 19:44:35.645007 25633 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:35.645011 25633 net.cpp:139] Memory required for data: 2170800
I0428 19:44:35.645021 25633 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:35.645028 25633 net.cpp:86] Creating Layer pool1
I0428 19:44:35.645040 25633 net.cpp:408] pool1 <- conv1
I0428 19:44:35.645046 25633 net.cpp:382] pool1 -> pool1
I0428 19:44:35.645087 25633 net.cpp:124] Setting up pool1
I0428 19:44:35.645094 25633 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:35.645104 25633 net.cpp:139] Memory required for data: 2490800
I0428 19:44:35.645108 25633 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:35.645114 25633 net.cpp:86] Creating Layer ip1
I0428 19:44:35.645119 25633 net.cpp:408] ip1 <- pool1
I0428 19:44:35.645124 25633 net.cpp:382] ip1 -> ip1
I0428 19:44:35.645368 25633 net.cpp:124] Setting up ip1
I0428 19:44:35.645378 25633 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:35.645393 25633 net.cpp:139] Memory required for data: 2500800
I0428 19:44:35.645403 25633 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:35.645409 25633 net.cpp:86] Creating Layer relu1
I0428 19:44:35.645412 25633 net.cpp:408] relu1 <- ip1
I0428 19:44:35.645417 25633 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:35.645594 25633 net.cpp:124] Setting up relu1
I0428 19:44:35.645604 25633 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:35.645608 25633 net.cpp:139] Memory required for data: 2510800
I0428 19:44:35.645619 25633 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:35.645627 25633 net.cpp:86] Creating Layer ip2
I0428 19:44:35.645637 25633 net.cpp:408] ip2 <- ip1
I0428 19:44:35.645642 25633 net.cpp:382] ip2 -> ip2
I0428 19:44:35.645752 25633 net.cpp:124] Setting up ip2
I0428 19:44:35.645761 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.645764 25633 net.cpp:139] Memory required for data: 2514800
I0428 19:44:35.645771 25633 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:35.645776 25633 net.cpp:86] Creating Layer relu2
I0428 19:44:35.645781 25633 net.cpp:408] relu2 <- ip2
I0428 19:44:35.645784 25633 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:35.646001 25633 net.cpp:124] Setting up relu2
I0428 19:44:35.646011 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.646015 25633 net.cpp:139] Memory required for data: 2518800
I0428 19:44:35.646018 25633 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:35.646024 25633 net.cpp:86] Creating Layer ip3
I0428 19:44:35.646028 25633 net.cpp:408] ip3 <- ip2
I0428 19:44:35.646034 25633 net.cpp:382] ip3 -> ip3
I0428 19:44:35.646173 25633 net.cpp:124] Setting up ip3
I0428 19:44:35.646181 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.646185 25633 net.cpp:139] Memory required for data: 2522800
I0428 19:44:35.646194 25633 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:35.646199 25633 net.cpp:86] Creating Layer relu3
I0428 19:44:35.646203 25633 net.cpp:408] relu3 <- ip3
I0428 19:44:35.646208 25633 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:35.647086 25633 net.cpp:124] Setting up relu3
I0428 19:44:35.647101 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.647105 25633 net.cpp:139] Memory required for data: 2526800
I0428 19:44:35.647109 25633 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:35.647115 25633 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:35.647119 25633 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:35.647125 25633 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:35.647132 25633 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:35.647179 25633 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:35.647186 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.647189 25633 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:35.647193 25633 net.cpp:139] Memory required for data: 2534800
I0428 19:44:35.647197 25633 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:35.647202 25633 net.cpp:86] Creating Layer accuracy
I0428 19:44:35.647207 25633 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:35.647210 25633 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:35.647215 25633 net.cpp:382] accuracy -> accuracy
I0428 19:44:35.647230 25633 net.cpp:124] Setting up accuracy
I0428 19:44:35.647235 25633 net.cpp:131] Top shape: (1)
I0428 19:44:35.647239 25633 net.cpp:139] Memory required for data: 2534804
I0428 19:44:35.647243 25633 layer_factory.hpp:77] Creating layer loss
I0428 19:44:35.647248 25633 net.cpp:86] Creating Layer loss
I0428 19:44:35.647251 25633 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:35.647255 25633 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:35.647260 25633 net.cpp:382] loss -> loss
I0428 19:44:35.647274 25633 layer_factory.hpp:77] Creating layer loss
I0428 19:44:35.647532 25633 net.cpp:124] Setting up loss
I0428 19:44:35.647544 25633 net.cpp:131] Top shape: (1)
I0428 19:44:35.647548 25633 net.cpp:134]     with loss weight 1
I0428 19:44:35.647555 25633 net.cpp:139] Memory required for data: 2534808
I0428 19:44:35.647570 25633 net.cpp:200] loss needs backward computation.
I0428 19:44:35.647577 25633 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:35.647580 25633 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:35.647583 25633 net.cpp:200] relu3 needs backward computation.
I0428 19:44:35.647588 25633 net.cpp:200] ip3 needs backward computation.
I0428 19:44:35.647590 25633 net.cpp:200] relu2 needs backward computation.
I0428 19:44:35.647593 25633 net.cpp:200] ip2 needs backward computation.
I0428 19:44:35.647598 25633 net.cpp:200] relu1 needs backward computation.
I0428 19:44:35.647600 25633 net.cpp:200] ip1 needs backward computation.
I0428 19:44:35.647624 25633 net.cpp:200] pool1 needs backward computation.
I0428 19:44:35.647627 25633 net.cpp:200] conv1 needs backward computation.
I0428 19:44:35.647637 25633 net.cpp:200] pool0 needs backward computation.
I0428 19:44:35.647640 25633 net.cpp:200] conv0 needs backward computation.
I0428 19:44:35.647645 25633 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:35.647660 25633 net.cpp:202] mnist does not need backward computation.
I0428 19:44:35.647663 25633 net.cpp:244] This network produces output accuracy
I0428 19:44:35.647673 25633 net.cpp:244] This network produces output loss
I0428 19:44:35.647686 25633 net.cpp:257] Network initialization done.
I0428 19:44:35.647733 25633 solver.cpp:56] Solver scaffolding done.
I0428 19:44:35.648110 25633 caffe.cpp:248] Starting Optimization
I0428 19:44:35.648118 25633 solver.cpp:273] Solving LeNet
I0428 19:44:35.648121 25633 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:35.648402 25633 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:35.652735 25633 blocking_queue.cpp:49] Waiting for data
I0428 19:44:35.719591 25640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:35.720053 25633 solver.cpp:398]     Test net output #0: accuracy = 0.0776
I0428 19:44:35.720072 25633 solver.cpp:398]     Test net output #1: loss = 2.34374 (* 1 = 2.34374 loss)
I0428 19:44:35.722237 25633 solver.cpp:219] Iteration 0 (0 iter/s, 0.0740914s/100 iters), loss = 2.36807
I0428 19:44:35.722264 25633 solver.cpp:238]     Train net output #0: loss = 2.36807 (* 1 = 2.36807 loss)
I0428 19:44:35.722275 25633 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:35.827883 25633 solver.cpp:219] Iteration 100 (946.889 iter/s, 0.105609s/100 iters), loss = 0.796839
I0428 19:44:35.827908 25633 solver.cpp:238]     Train net output #0: loss = 0.796839 (* 1 = 0.796839 loss)
I0428 19:44:35.827914 25633 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:35.934347 25633 solver.cpp:219] Iteration 200 (939.59 iter/s, 0.106429s/100 iters), loss = 0.348414
I0428 19:44:35.934372 25633 solver.cpp:238]     Train net output #0: loss = 0.348414 (* 1 = 0.348414 loss)
I0428 19:44:35.934378 25633 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:36.037494 25633 solver.cpp:219] Iteration 300 (969.812 iter/s, 0.103113s/100 iters), loss = 0.202307
I0428 19:44:36.037518 25633 solver.cpp:238]     Train net output #0: loss = 0.202307 (* 1 = 0.202307 loss)
I0428 19:44:36.037539 25633 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:36.140280 25633 solver.cpp:219] Iteration 400 (973.224 iter/s, 0.102751s/100 iters), loss = 0.259859
I0428 19:44:36.140303 25633 solver.cpp:238]     Train net output #0: loss = 0.259859 (* 1 = 0.259859 loss)
I0428 19:44:36.140310 25633 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:36.242827 25633 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:36.295920 25640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:36.296418 25633 solver.cpp:398]     Test net output #0: accuracy = 0.9452
I0428 19:44:36.296440 25633 solver.cpp:398]     Test net output #1: loss = 0.172602 (* 1 = 0.172602 loss)
I0428 19:44:36.297495 25633 solver.cpp:219] Iteration 500 (636.222 iter/s, 0.157178s/100 iters), loss = 0.127274
I0428 19:44:36.297536 25633 solver.cpp:238]     Train net output #0: loss = 0.127274 (* 1 = 0.127274 loss)
I0428 19:44:36.297559 25633 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:36.404939 25633 solver.cpp:219] Iteration 600 (931.181 iter/s, 0.10739s/100 iters), loss = 0.158281
I0428 19:44:36.404965 25633 solver.cpp:238]     Train net output #0: loss = 0.158281 (* 1 = 0.158281 loss)
I0428 19:44:36.404990 25633 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:36.513308 25633 solver.cpp:219] Iteration 700 (923.14 iter/s, 0.108326s/100 iters), loss = 0.111976
I0428 19:44:36.513342 25633 solver.cpp:238]     Train net output #0: loss = 0.111976 (* 1 = 0.111976 loss)
I0428 19:44:36.513353 25633 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:36.622975 25633 solver.cpp:219] Iteration 800 (912.232 iter/s, 0.109621s/100 iters), loss = 0.357277
I0428 19:44:36.623004 25633 solver.cpp:238]     Train net output #0: loss = 0.357277 (* 1 = 0.357277 loss)
I0428 19:44:36.623011 25633 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:36.727939 25633 solver.cpp:219] Iteration 900 (953.125 iter/s, 0.104918s/100 iters), loss = 0.209706
I0428 19:44:36.727964 25633 solver.cpp:238]     Train net output #0: loss = 0.209706 (* 1 = 0.209706 loss)
I0428 19:44:36.727972 25633 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:36.761623 25639 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:36.829022 25633 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:36.830246 25633 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:36.830907 25633 solver.cpp:311] Iteration 1000, loss = 0.190129
I0428 19:44:36.830924 25633 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:36.905941 25640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:36.906414 25633 solver.cpp:398]     Test net output #0: accuracy = 0.968
I0428 19:44:36.906433 25633 solver.cpp:398]     Test net output #1: loss = 0.103883 (* 1 = 0.103883 loss)
I0428 19:44:36.906438 25633 solver.cpp:316] Optimization Done.
I0428 19:44:36.906441 25633 caffe.cpp:259] Optimization Done.
