I0428 20:15:01.403081   348 caffe.cpp:218] Using GPUs 0
I0428 20:15:01.438920   348 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:01.893887   348 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1236.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:01.894016   348 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1236.prototxt
I0428 20:15:01.894343   348 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:01.894358   348 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:01.894438   348 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:15:01.894515   348 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:01.894596   348 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:01.894615   348 net.cpp:86] Creating Layer mnist
I0428 20:15:01.894623   348 net.cpp:382] mnist -> data
I0428 20:15:01.894640   348 net.cpp:382] mnist -> label
I0428 20:15:01.895655   348 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:01.897776   348 net.cpp:124] Setting up mnist
I0428 20:15:01.897821   348 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:01.897826   348 net.cpp:131] Top shape: 64 (64)
I0428 20:15:01.897830   348 net.cpp:139] Memory required for data: 200960
I0428 20:15:01.897835   348 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:01.897871   348 net.cpp:86] Creating Layer conv0
I0428 20:15:01.897888   348 net.cpp:408] conv0 <- data
I0428 20:15:01.897899   348 net.cpp:382] conv0 -> conv0
I0428 20:15:02.135411   348 net.cpp:124] Setting up conv0
I0428 20:15:02.135437   348 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:02.135442   348 net.cpp:139] Memory required for data: 7573760
I0428 20:15:02.135455   348 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:02.135466   348 net.cpp:86] Creating Layer pool0
I0428 20:15:02.135471   348 net.cpp:408] pool0 <- conv0
I0428 20:15:02.135476   348 net.cpp:382] pool0 -> pool0
I0428 20:15:02.135536   348 net.cpp:124] Setting up pool0
I0428 20:15:02.135541   348 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:02.135545   348 net.cpp:139] Memory required for data: 9416960
I0428 20:15:02.135547   348 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:02.135557   348 net.cpp:86] Creating Layer conv1
I0428 20:15:02.135561   348 net.cpp:408] conv1 <- pool0
I0428 20:15:02.135566   348 net.cpp:382] conv1 -> conv1
I0428 20:15:02.137490   348 net.cpp:124] Setting up conv1
I0428 20:15:02.137521   348 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:15:02.137523   348 net.cpp:139] Memory required for data: 9449728
I0428 20:15:02.137532   348 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:02.137540   348 net.cpp:86] Creating Layer pool1
I0428 20:15:02.137543   348 net.cpp:408] pool1 <- conv1
I0428 20:15:02.137548   348 net.cpp:382] pool1 -> pool1
I0428 20:15:02.137599   348 net.cpp:124] Setting up pool1
I0428 20:15:02.137604   348 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:15:02.137608   348 net.cpp:139] Memory required for data: 9457920
I0428 20:15:02.137610   348 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:02.137617   348 net.cpp:86] Creating Layer ip1
I0428 20:15:02.137620   348 net.cpp:408] ip1 <- pool1
I0428 20:15:02.137624   348 net.cpp:382] ip1 -> ip1
I0428 20:15:02.137742   348 net.cpp:124] Setting up ip1
I0428 20:15:02.137751   348 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:15:02.137754   348 net.cpp:139] Memory required for data: 9464320
I0428 20:15:02.137761   348 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:02.137768   348 net.cpp:86] Creating Layer relu1
I0428 20:15:02.137770   348 net.cpp:408] relu1 <- ip1
I0428 20:15:02.137774   348 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:02.137944   348 net.cpp:124] Setting up relu1
I0428 20:15:02.137953   348 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:15:02.137956   348 net.cpp:139] Memory required for data: 9470720
I0428 20:15:02.137974   348 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:02.137980   348 net.cpp:86] Creating Layer ip2
I0428 20:15:02.137984   348 net.cpp:408] ip2 <- ip1
I0428 20:15:02.137989   348 net.cpp:382] ip2 -> ip2
I0428 20:15:02.138106   348 net.cpp:124] Setting up ip2
I0428 20:15:02.138113   348 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:02.138116   348 net.cpp:139] Memory required for data: 9483520
I0428 20:15:02.138123   348 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:02.138128   348 net.cpp:86] Creating Layer relu2
I0428 20:15:02.138134   348 net.cpp:408] relu2 <- ip2
I0428 20:15:02.138141   348 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:02.138916   348 net.cpp:124] Setting up relu2
I0428 20:15:02.138939   348 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:02.138942   348 net.cpp:139] Memory required for data: 9496320
I0428 20:15:02.138947   348 layer_factory.hpp:77] Creating layer ip3
I0428 20:15:02.138968   348 net.cpp:86] Creating Layer ip3
I0428 20:15:02.138972   348 net.cpp:408] ip3 <- ip2
I0428 20:15:02.138977   348 net.cpp:382] ip3 -> ip3
I0428 20:15:02.139091   348 net.cpp:124] Setting up ip3
I0428 20:15:02.139098   348 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:02.139101   348 net.cpp:139] Memory required for data: 9498880
I0428 20:15:02.139109   348 layer_factory.hpp:77] Creating layer relu3
I0428 20:15:02.139114   348 net.cpp:86] Creating Layer relu3
I0428 20:15:02.139117   348 net.cpp:408] relu3 <- ip3
I0428 20:15:02.139122   348 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:15:02.139300   348 net.cpp:124] Setting up relu3
I0428 20:15:02.139309   348 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:02.139312   348 net.cpp:139] Memory required for data: 9501440
I0428 20:15:02.139315   348 layer_factory.hpp:77] Creating layer loss
I0428 20:15:02.139320   348 net.cpp:86] Creating Layer loss
I0428 20:15:02.139323   348 net.cpp:408] loss <- ip3
I0428 20:15:02.139328   348 net.cpp:408] loss <- label
I0428 20:15:02.139333   348 net.cpp:382] loss -> loss
I0428 20:15:02.139345   348 layer_factory.hpp:77] Creating layer loss
I0428 20:15:02.139562   348 net.cpp:124] Setting up loss
I0428 20:15:02.139572   348 net.cpp:131] Top shape: (1)
I0428 20:15:02.139575   348 net.cpp:134]     with loss weight 1
I0428 20:15:02.139588   348 net.cpp:139] Memory required for data: 9501444
I0428 20:15:02.139592   348 net.cpp:200] loss needs backward computation.
I0428 20:15:02.139595   348 net.cpp:200] relu3 needs backward computation.
I0428 20:15:02.139598   348 net.cpp:200] ip3 needs backward computation.
I0428 20:15:02.139601   348 net.cpp:200] relu2 needs backward computation.
I0428 20:15:02.139603   348 net.cpp:200] ip2 needs backward computation.
I0428 20:15:02.139607   348 net.cpp:200] relu1 needs backward computation.
I0428 20:15:02.139611   348 net.cpp:200] ip1 needs backward computation.
I0428 20:15:02.139613   348 net.cpp:200] pool1 needs backward computation.
I0428 20:15:02.139616   348 net.cpp:200] conv1 needs backward computation.
I0428 20:15:02.139619   348 net.cpp:200] pool0 needs backward computation.
I0428 20:15:02.139623   348 net.cpp:200] conv0 needs backward computation.
I0428 20:15:02.139627   348 net.cpp:202] mnist does not need backward computation.
I0428 20:15:02.139629   348 net.cpp:244] This network produces output loss
I0428 20:15:02.139638   348 net.cpp:257] Network initialization done.
I0428 20:15:02.139993   348 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1236.prototxt
I0428 20:15:02.140035   348 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:02.140139   348 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:15:02.140215   348 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:02.140259   348 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:02.140272   348 net.cpp:86] Creating Layer mnist
I0428 20:15:02.140276   348 net.cpp:382] mnist -> data
I0428 20:15:02.140285   348 net.cpp:382] mnist -> label
I0428 20:15:02.140386   348 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:02.142503   348 net.cpp:124] Setting up mnist
I0428 20:15:02.142546   348 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:02.142551   348 net.cpp:131] Top shape: 100 (100)
I0428 20:15:02.142570   348 net.cpp:139] Memory required for data: 314000
I0428 20:15:02.142573   348 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:02.142580   348 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:02.142582   348 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:02.142603   348 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:02.142609   348 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:02.142665   348 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:02.142671   348 net.cpp:131] Top shape: 100 (100)
I0428 20:15:02.142674   348 net.cpp:131] Top shape: 100 (100)
I0428 20:15:02.142678   348 net.cpp:139] Memory required for data: 314800
I0428 20:15:02.142680   348 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:02.142688   348 net.cpp:86] Creating Layer conv0
I0428 20:15:02.142690   348 net.cpp:408] conv0 <- data
I0428 20:15:02.142695   348 net.cpp:382] conv0 -> conv0
I0428 20:15:02.144224   348 net.cpp:124] Setting up conv0
I0428 20:15:02.144237   348 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:02.144242   348 net.cpp:139] Memory required for data: 11834800
I0428 20:15:02.144249   348 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:02.144256   348 net.cpp:86] Creating Layer pool0
I0428 20:15:02.144259   348 net.cpp:408] pool0 <- conv0
I0428 20:15:02.144263   348 net.cpp:382] pool0 -> pool0
I0428 20:15:02.144296   348 net.cpp:124] Setting up pool0
I0428 20:15:02.144301   348 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:02.144304   348 net.cpp:139] Memory required for data: 14714800
I0428 20:15:02.144306   348 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:02.144315   348 net.cpp:86] Creating Layer conv1
I0428 20:15:02.144317   348 net.cpp:408] conv1 <- pool0
I0428 20:15:02.144321   348 net.cpp:382] conv1 -> conv1
I0428 20:15:02.146044   348 net.cpp:124] Setting up conv1
I0428 20:15:02.146059   348 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:15:02.146062   348 net.cpp:139] Memory required for data: 14766000
I0428 20:15:02.146071   348 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:02.146078   348 net.cpp:86] Creating Layer pool1
I0428 20:15:02.146097   348 net.cpp:408] pool1 <- conv1
I0428 20:15:02.146102   348 net.cpp:382] pool1 -> pool1
I0428 20:15:02.146138   348 net.cpp:124] Setting up pool1
I0428 20:15:02.146143   348 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:15:02.146147   348 net.cpp:139] Memory required for data: 14778800
I0428 20:15:02.146150   348 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:02.146155   348 net.cpp:86] Creating Layer ip1
I0428 20:15:02.146158   348 net.cpp:408] ip1 <- pool1
I0428 20:15:02.146176   348 net.cpp:382] ip1 -> ip1
I0428 20:15:02.146282   348 net.cpp:124] Setting up ip1
I0428 20:15:02.146291   348 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:15:02.146304   348 net.cpp:139] Memory required for data: 14788800
I0428 20:15:02.146322   348 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:02.146333   348 net.cpp:86] Creating Layer relu1
I0428 20:15:02.146337   348 net.cpp:408] relu1 <- ip1
I0428 20:15:02.146348   348 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:02.146514   348 net.cpp:124] Setting up relu1
I0428 20:15:02.146523   348 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:15:02.146526   348 net.cpp:139] Memory required for data: 14798800
I0428 20:15:02.146529   348 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:02.146544   348 net.cpp:86] Creating Layer ip2
I0428 20:15:02.146548   348 net.cpp:408] ip2 <- ip1
I0428 20:15:02.146551   348 net.cpp:382] ip2 -> ip2
I0428 20:15:02.146673   348 net.cpp:124] Setting up ip2
I0428 20:15:02.146682   348 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:02.146684   348 net.cpp:139] Memory required for data: 14818800
I0428 20:15:02.146689   348 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:02.146694   348 net.cpp:86] Creating Layer relu2
I0428 20:15:02.146697   348 net.cpp:408] relu2 <- ip2
I0428 20:15:02.146708   348 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:02.146889   348 net.cpp:124] Setting up relu2
I0428 20:15:02.146914   348 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:02.146919   348 net.cpp:139] Memory required for data: 14838800
I0428 20:15:02.146936   348 layer_factory.hpp:77] Creating layer ip3
I0428 20:15:02.146944   348 net.cpp:86] Creating Layer ip3
I0428 20:15:02.146947   348 net.cpp:408] ip3 <- ip2
I0428 20:15:02.146952   348 net.cpp:382] ip3 -> ip3
I0428 20:15:02.147056   348 net.cpp:124] Setting up ip3
I0428 20:15:02.147063   348 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:02.147066   348 net.cpp:139] Memory required for data: 14842800
I0428 20:15:02.147075   348 layer_factory.hpp:77] Creating layer relu3
I0428 20:15:02.147079   348 net.cpp:86] Creating Layer relu3
I0428 20:15:02.147083   348 net.cpp:408] relu3 <- ip3
I0428 20:15:02.147086   348 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:15:02.147860   348 net.cpp:124] Setting up relu3
I0428 20:15:02.147874   348 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:02.147879   348 net.cpp:139] Memory required for data: 14846800
I0428 20:15:02.147882   348 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:15:02.147903   348 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:15:02.147907   348 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:15:02.147912   348 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:15:02.147918   348 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:15:02.147965   348 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:15:02.147971   348 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:02.147975   348 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:02.147979   348 net.cpp:139] Memory required for data: 14854800
I0428 20:15:02.147981   348 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:02.147986   348 net.cpp:86] Creating Layer accuracy
I0428 20:15:02.147995   348 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:15:02.148000   348 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:02.148003   348 net.cpp:382] accuracy -> accuracy
I0428 20:15:02.148010   348 net.cpp:124] Setting up accuracy
I0428 20:15:02.148030   348 net.cpp:131] Top shape: (1)
I0428 20:15:02.148032   348 net.cpp:139] Memory required for data: 14854804
I0428 20:15:02.148036   348 layer_factory.hpp:77] Creating layer loss
I0428 20:15:02.148041   348 net.cpp:86] Creating Layer loss
I0428 20:15:02.148043   348 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:15:02.148046   348 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:02.148051   348 net.cpp:382] loss -> loss
I0428 20:15:02.148056   348 layer_factory.hpp:77] Creating layer loss
I0428 20:15:02.148321   348 net.cpp:124] Setting up loss
I0428 20:15:02.148332   348 net.cpp:131] Top shape: (1)
I0428 20:15:02.148335   348 net.cpp:134]     with loss weight 1
I0428 20:15:02.148350   348 net.cpp:139] Memory required for data: 14854808
I0428 20:15:02.148353   348 net.cpp:200] loss needs backward computation.
I0428 20:15:02.148356   348 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:02.148360   348 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:15:02.148365   348 net.cpp:200] relu3 needs backward computation.
I0428 20:15:02.148366   348 net.cpp:200] ip3 needs backward computation.
I0428 20:15:02.148370   348 net.cpp:200] relu2 needs backward computation.
I0428 20:15:02.148372   348 net.cpp:200] ip2 needs backward computation.
I0428 20:15:02.148383   348 net.cpp:200] relu1 needs backward computation.
I0428 20:15:02.148386   348 net.cpp:200] ip1 needs backward computation.
I0428 20:15:02.148389   348 net.cpp:200] pool1 needs backward computation.
I0428 20:15:02.148392   348 net.cpp:200] conv1 needs backward computation.
I0428 20:15:02.148396   348 net.cpp:200] pool0 needs backward computation.
I0428 20:15:02.148398   348 net.cpp:200] conv0 needs backward computation.
I0428 20:15:02.148401   348 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:02.148406   348 net.cpp:202] mnist does not need backward computation.
I0428 20:15:02.148407   348 net.cpp:244] This network produces output accuracy
I0428 20:15:02.148411   348 net.cpp:244] This network produces output loss
I0428 20:15:02.148422   348 net.cpp:257] Network initialization done.
I0428 20:15:02.148461   348 solver.cpp:56] Solver scaffolding done.
I0428 20:15:02.148775   348 caffe.cpp:248] Starting Optimization
I0428 20:15:02.148782   348 solver.cpp:273] Solving LeNet
I0428 20:15:02.148792   348 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:02.149655   348 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:02.156201   348 blocking_queue.cpp:49] Waiting for data
I0428 20:15:02.224313   355 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:02.225177   348 solver.cpp:398]     Test net output #0: accuracy = 0.1144
I0428 20:15:02.225196   348 solver.cpp:398]     Test net output #1: loss = 2.31787 (* 1 = 2.31787 loss)
I0428 20:15:02.229501   348 solver.cpp:219] Iteration 0 (-2.88946e-31 iter/s, 0.0806461s/100 iters), loss = 2.31839
I0428 20:15:02.229542   348 solver.cpp:238]     Train net output #0: loss = 2.31839 (* 1 = 2.31839 loss)
I0428 20:15:02.229569   348 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:02.343245   348 solver.cpp:219] Iteration 100 (879.58 iter/s, 0.113691s/100 iters), loss = 0.429109
I0428 20:15:02.343269   348 solver.cpp:238]     Train net output #0: loss = 0.429109 (* 1 = 0.429109 loss)
I0428 20:15:02.343276   348 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:02.454800   348 solver.cpp:219] Iteration 200 (896.694 iter/s, 0.111521s/100 iters), loss = 0.363002
I0428 20:15:02.454824   348 solver.cpp:238]     Train net output #0: loss = 0.363002 (* 1 = 0.363002 loss)
I0428 20:15:02.454846   348 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:02.567121   348 solver.cpp:219] Iteration 300 (890.585 iter/s, 0.112286s/100 iters), loss = 0.30259
I0428 20:15:02.567147   348 solver.cpp:238]     Train net output #0: loss = 0.30259 (* 1 = 0.30259 loss)
I0428 20:15:02.567154   348 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:02.678572   348 solver.cpp:219] Iteration 400 (897.551 iter/s, 0.111414s/100 iters), loss = 0.250791
I0428 20:15:02.678596   348 solver.cpp:238]     Train net output #0: loss = 0.250791 (* 1 = 0.250791 loss)
I0428 20:15:02.678602   348 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:02.788764   348 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:02.852078   355 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:02.853713   348 solver.cpp:398]     Test net output #0: accuracy = 0.9354
I0428 20:15:02.853731   348 solver.cpp:398]     Test net output #1: loss = 0.203945 (* 1 = 0.203945 loss)
I0428 20:15:02.854893   348 solver.cpp:219] Iteration 500 (567.274 iter/s, 0.176282s/100 iters), loss = 0.147235
I0428 20:15:02.854950   348 solver.cpp:238]     Train net output #0: loss = 0.147235 (* 1 = 0.147235 loss)
I0428 20:15:02.854975   348 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:02.985556   348 solver.cpp:219] Iteration 600 (765.632 iter/s, 0.130611s/100 iters), loss = 0.166505
I0428 20:15:02.985581   348 solver.cpp:238]     Train net output #0: loss = 0.166505 (* 1 = 0.166505 loss)
I0428 20:15:02.985605   348 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:03.106850   348 solver.cpp:219] Iteration 700 (824.772 iter/s, 0.121246s/100 iters), loss = 0.15874
I0428 20:15:03.106876   348 solver.cpp:238]     Train net output #0: loss = 0.15874 (* 1 = 0.15874 loss)
I0428 20:15:03.106884   348 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:03.217280   348 solver.cpp:219] Iteration 800 (905.851 iter/s, 0.110393s/100 iters), loss = 0.331584
I0428 20:15:03.217321   348 solver.cpp:238]     Train net output #0: loss = 0.331584 (* 1 = 0.331584 loss)
I0428 20:15:03.217346   348 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:03.328238   348 solver.cpp:219] Iteration 900 (901.678 iter/s, 0.110904s/100 iters), loss = 0.197002
I0428 20:15:03.328263   348 solver.cpp:238]     Train net output #0: loss = 0.197002 (* 1 = 0.197002 loss)
I0428 20:15:03.328286   348 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:03.367993   354 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:03.445788   348 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:03.446727   348 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:03.447399   348 solver.cpp:311] Iteration 1000, loss = 0.174131
I0428 20:15:03.447414   348 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:03.524277   355 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:03.525064   348 solver.cpp:398]     Test net output #0: accuracy = 0.9528
I0428 20:15:03.525087   348 solver.cpp:398]     Test net output #1: loss = 0.149023 (* 1 = 0.149023 loss)
I0428 20:15:03.525092   348 solver.cpp:316] Optimization Done.
I0428 20:15:03.525096   348 caffe.cpp:259] Optimization Done.
