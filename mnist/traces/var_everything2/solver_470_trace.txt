I0428 19:45:21.537451 25790 caffe.cpp:218] Using GPUs 0
I0428 19:45:21.574748 25790 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:22.076323 25790 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test470.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:22.076457 25790 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test470.prototxt
I0428 19:45:22.076793 25790 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:22.076815 25790 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:22.076898 25790 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:45:22.076967 25790 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:22.077069 25790 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:22.077092 25790 net.cpp:86] Creating Layer mnist
I0428 19:45:22.077101 25790 net.cpp:382] mnist -> data
I0428 19:45:22.077121 25790 net.cpp:382] mnist -> label
I0428 19:45:22.078171 25790 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:22.080549 25790 net.cpp:124] Setting up mnist
I0428 19:45:22.080567 25790 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:22.080574 25790 net.cpp:131] Top shape: 64 (64)
I0428 19:45:22.080577 25790 net.cpp:139] Memory required for data: 200960
I0428 19:45:22.080584 25790 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:22.080636 25790 net.cpp:86] Creating Layer conv0
I0428 19:45:22.080642 25790 net.cpp:408] conv0 <- data
I0428 19:45:22.080653 25790 net.cpp:382] conv0 -> conv0
I0428 19:45:22.366300 25790 net.cpp:124] Setting up conv0
I0428 19:45:22.366330 25790 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:22.366334 25790 net.cpp:139] Memory required for data: 495872
I0428 19:45:22.366353 25790 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:22.366367 25790 net.cpp:86] Creating Layer pool0
I0428 19:45:22.366372 25790 net.cpp:408] pool0 <- conv0
I0428 19:45:22.366379 25790 net.cpp:382] pool0 -> pool0
I0428 19:45:22.366430 25790 net.cpp:124] Setting up pool0
I0428 19:45:22.366436 25790 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:22.366454 25790 net.cpp:139] Memory required for data: 569600
I0428 19:45:22.366458 25790 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:22.366470 25790 net.cpp:86] Creating Layer conv1
I0428 19:45:22.366474 25790 net.cpp:408] conv1 <- pool0
I0428 19:45:22.366479 25790 net.cpp:382] conv1 -> conv1
I0428 19:45:22.369380 25790 net.cpp:124] Setting up conv1
I0428 19:45:22.369396 25790 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:22.369400 25790 net.cpp:139] Memory required for data: 2208000
I0428 19:45:22.369410 25790 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:22.369417 25790 net.cpp:86] Creating Layer pool1
I0428 19:45:22.369421 25790 net.cpp:408] pool1 <- conv1
I0428 19:45:22.369427 25790 net.cpp:382] pool1 -> pool1
I0428 19:45:22.369467 25790 net.cpp:124] Setting up pool1
I0428 19:45:22.369472 25790 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:22.369475 25790 net.cpp:139] Memory required for data: 2617600
I0428 19:45:22.369478 25790 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:22.369485 25790 net.cpp:86] Creating Layer ip1
I0428 19:45:22.369489 25790 net.cpp:408] ip1 <- pool1
I0428 19:45:22.369493 25790 net.cpp:382] ip1 -> ip1
I0428 19:45:22.369685 25790 net.cpp:124] Setting up ip1
I0428 19:45:22.369693 25790 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:22.369696 25790 net.cpp:139] Memory required for data: 2620160
I0428 19:45:22.369704 25790 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:22.369709 25790 net.cpp:86] Creating Layer relu1
I0428 19:45:22.369714 25790 net.cpp:408] relu1 <- ip1
I0428 19:45:22.369717 25790 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:22.369894 25790 net.cpp:124] Setting up relu1
I0428 19:45:22.369904 25790 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:22.369907 25790 net.cpp:139] Memory required for data: 2622720
I0428 19:45:22.369910 25790 layer_factory.hpp:77] Creating layer loss
I0428 19:45:22.369916 25790 net.cpp:86] Creating Layer loss
I0428 19:45:22.369920 25790 net.cpp:408] loss <- ip1
I0428 19:45:22.369923 25790 net.cpp:408] loss <- label
I0428 19:45:22.369928 25790 net.cpp:382] loss -> loss
I0428 19:45:22.369947 25790 layer_factory.hpp:77] Creating layer loss
I0428 19:45:22.370795 25790 net.cpp:124] Setting up loss
I0428 19:45:22.370810 25790 net.cpp:131] Top shape: (1)
I0428 19:45:22.370815 25790 net.cpp:134]     with loss weight 1
I0428 19:45:22.370829 25790 net.cpp:139] Memory required for data: 2622724
I0428 19:45:22.370832 25790 net.cpp:200] loss needs backward computation.
I0428 19:45:22.370836 25790 net.cpp:200] relu1 needs backward computation.
I0428 19:45:22.370839 25790 net.cpp:200] ip1 needs backward computation.
I0428 19:45:22.370843 25790 net.cpp:200] pool1 needs backward computation.
I0428 19:45:22.370846 25790 net.cpp:200] conv1 needs backward computation.
I0428 19:45:22.370849 25790 net.cpp:200] pool0 needs backward computation.
I0428 19:45:22.370853 25790 net.cpp:200] conv0 needs backward computation.
I0428 19:45:22.370857 25790 net.cpp:202] mnist does not need backward computation.
I0428 19:45:22.370859 25790 net.cpp:244] This network produces output loss
I0428 19:45:22.370867 25790 net.cpp:257] Network initialization done.
I0428 19:45:22.371137 25790 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test470.prototxt
I0428 19:45:22.371162 25790 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:22.371242 25790 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:45:22.371312 25790 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:22.371358 25790 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:22.371371 25790 net.cpp:86] Creating Layer mnist
I0428 19:45:22.371376 25790 net.cpp:382] mnist -> data
I0428 19:45:22.371383 25790 net.cpp:382] mnist -> label
I0428 19:45:22.371470 25790 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:22.373515 25790 net.cpp:124] Setting up mnist
I0428 19:45:22.373530 25790 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:22.373536 25790 net.cpp:131] Top shape: 100 (100)
I0428 19:45:22.373539 25790 net.cpp:139] Memory required for data: 314000
I0428 19:45:22.373543 25790 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:22.373550 25790 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:22.373554 25790 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:22.373559 25790 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:22.373566 25790 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:22.373616 25790 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:22.373621 25790 net.cpp:131] Top shape: 100 (100)
I0428 19:45:22.373625 25790 net.cpp:131] Top shape: 100 (100)
I0428 19:45:22.373628 25790 net.cpp:139] Memory required for data: 314800
I0428 19:45:22.373631 25790 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:22.373639 25790 net.cpp:86] Creating Layer conv0
I0428 19:45:22.373644 25790 net.cpp:408] conv0 <- data
I0428 19:45:22.373649 25790 net.cpp:382] conv0 -> conv0
I0428 19:45:22.374608 25790 net.cpp:124] Setting up conv0
I0428 19:45:22.374620 25790 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:22.374624 25790 net.cpp:139] Memory required for data: 775600
I0428 19:45:22.374634 25790 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:22.374639 25790 net.cpp:86] Creating Layer pool0
I0428 19:45:22.374642 25790 net.cpp:408] pool0 <- conv0
I0428 19:45:22.374647 25790 net.cpp:382] pool0 -> pool0
I0428 19:45:22.374685 25790 net.cpp:124] Setting up pool0
I0428 19:45:22.374691 25790 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:22.374692 25790 net.cpp:139] Memory required for data: 890800
I0428 19:45:22.374696 25790 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:22.374704 25790 net.cpp:86] Creating Layer conv1
I0428 19:45:22.374707 25790 net.cpp:408] conv1 <- pool0
I0428 19:45:22.374712 25790 net.cpp:382] conv1 -> conv1
I0428 19:45:22.376253 25790 net.cpp:124] Setting up conv1
I0428 19:45:22.376271 25790 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:22.376276 25790 net.cpp:139] Memory required for data: 3450800
I0428 19:45:22.376283 25790 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:22.376291 25790 net.cpp:86] Creating Layer pool1
I0428 19:45:22.376304 25790 net.cpp:408] pool1 <- conv1
I0428 19:45:22.376312 25790 net.cpp:382] pool1 -> pool1
I0428 19:45:22.376350 25790 net.cpp:124] Setting up pool1
I0428 19:45:22.376356 25790 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:22.376360 25790 net.cpp:139] Memory required for data: 4090800
I0428 19:45:22.376363 25790 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:22.376369 25790 net.cpp:86] Creating Layer ip1
I0428 19:45:22.376372 25790 net.cpp:408] ip1 <- pool1
I0428 19:45:22.376377 25790 net.cpp:382] ip1 -> ip1
I0428 19:45:22.376569 25790 net.cpp:124] Setting up ip1
I0428 19:45:22.376579 25790 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:22.376581 25790 net.cpp:139] Memory required for data: 4094800
I0428 19:45:22.376590 25790 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:22.376603 25790 net.cpp:86] Creating Layer relu1
I0428 19:45:22.376607 25790 net.cpp:408] relu1 <- ip1
I0428 19:45:22.376611 25790 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:22.377480 25790 net.cpp:124] Setting up relu1
I0428 19:45:22.377493 25790 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:22.377497 25790 net.cpp:139] Memory required for data: 4098800
I0428 19:45:22.377501 25790 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:45:22.377508 25790 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:45:22.377511 25790 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:45:22.377517 25790 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:45:22.377524 25790 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:45:22.377568 25790 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:45:22.377573 25790 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:22.377576 25790 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:22.377579 25790 net.cpp:139] Memory required for data: 4106800
I0428 19:45:22.377583 25790 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:22.377588 25790 net.cpp:86] Creating Layer accuracy
I0428 19:45:22.377591 25790 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:45:22.377595 25790 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:22.377599 25790 net.cpp:382] accuracy -> accuracy
I0428 19:45:22.377607 25790 net.cpp:124] Setting up accuracy
I0428 19:45:22.377611 25790 net.cpp:131] Top shape: (1)
I0428 19:45:22.377614 25790 net.cpp:139] Memory required for data: 4106804
I0428 19:45:22.377617 25790 layer_factory.hpp:77] Creating layer loss
I0428 19:45:22.377621 25790 net.cpp:86] Creating Layer loss
I0428 19:45:22.377624 25790 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:45:22.377629 25790 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:22.377634 25790 net.cpp:382] loss -> loss
I0428 19:45:22.377640 25790 layer_factory.hpp:77] Creating layer loss
I0428 19:45:22.377879 25790 net.cpp:124] Setting up loss
I0428 19:45:22.377890 25790 net.cpp:131] Top shape: (1)
I0428 19:45:22.377894 25790 net.cpp:134]     with loss weight 1
I0428 19:45:22.377902 25790 net.cpp:139] Memory required for data: 4106808
I0428 19:45:22.377905 25790 net.cpp:200] loss needs backward computation.
I0428 19:45:22.377909 25790 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:22.377913 25790 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:45:22.377918 25790 net.cpp:200] relu1 needs backward computation.
I0428 19:45:22.377928 25790 net.cpp:200] ip1 needs backward computation.
I0428 19:45:22.377936 25790 net.cpp:200] pool1 needs backward computation.
I0428 19:45:22.377939 25790 net.cpp:200] conv1 needs backward computation.
I0428 19:45:22.377943 25790 net.cpp:200] pool0 needs backward computation.
I0428 19:45:22.377946 25790 net.cpp:200] conv0 needs backward computation.
I0428 19:45:22.377950 25790 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:22.377954 25790 net.cpp:202] mnist does not need backward computation.
I0428 19:45:22.377962 25790 net.cpp:244] This network produces output accuracy
I0428 19:45:22.377966 25790 net.cpp:244] This network produces output loss
I0428 19:45:22.377986 25790 net.cpp:257] Network initialization done.
I0428 19:45:22.378021 25790 solver.cpp:56] Solver scaffolding done.
I0428 19:45:22.378242 25790 caffe.cpp:248] Starting Optimization
I0428 19:45:22.378248 25790 solver.cpp:273] Solving LeNet
I0428 19:45:22.378252 25790 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:22.378357 25790 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:22.382105 25790 blocking_queue.cpp:49] Waiting for data
I0428 19:45:22.455649 25797 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:22.456193 25790 solver.cpp:398]     Test net output #0: accuracy = 0.1026
I0428 19:45:22.456229 25790 solver.cpp:398]     Test net output #1: loss = 2.49461 (* 1 = 2.49461 loss)
I0428 19:45:22.459730 25790 solver.cpp:219] Iteration 0 (0 iter/s, 0.0814541s/100 iters), loss = 2.52664
I0428 19:45:22.459753 25790 solver.cpp:238]     Train net output #0: loss = 2.52664 (* 1 = 2.52664 loss)
I0428 19:45:22.459766 25790 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:22.603561 25790 solver.cpp:219] Iteration 100 (695.458 iter/s, 0.14379s/100 iters), loss = 0.999698
I0428 19:45:22.603607 25790 solver.cpp:238]     Train net output #0: loss = 0.999698 (* 1 = 0.999698 loss)
I0428 19:45:22.603619 25790 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:22.757490 25790 solver.cpp:219] Iteration 200 (649.898 iter/s, 0.15387s/100 iters), loss = 0.900156
I0428 19:45:22.757539 25790 solver.cpp:238]     Train net output #0: loss = 0.900156 (* 1 = 0.900156 loss)
I0428 19:45:22.757553 25790 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:22.913297 25790 solver.cpp:219] Iteration 300 (642.07 iter/s, 0.155746s/100 iters), loss = 0.892799
I0428 19:45:22.913347 25790 solver.cpp:238]     Train net output #0: loss = 0.892799 (* 1 = 0.892799 loss)
I0428 19:45:22.913362 25790 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:23.071069 25790 solver.cpp:219] Iteration 400 (634.086 iter/s, 0.157707s/100 iters), loss = 0.880458
I0428 19:45:23.071120 25790 solver.cpp:238]     Train net output #0: loss = 0.880458 (* 1 = 0.880458 loss)
I0428 19:45:23.071135 25790 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:23.228675 25790 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:23.304796 25797 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:23.305413 25790 solver.cpp:398]     Test net output #0: accuracy = 0.7428
I0428 19:45:23.305449 25790 solver.cpp:398]     Test net output #1: loss = 0.831733 (* 1 = 0.831733 loss)
I0428 19:45:23.306910 25790 solver.cpp:219] Iteration 500 (424.132 iter/s, 0.235776s/100 iters), loss = 0.717353
I0428 19:45:23.306948 25790 solver.cpp:238]     Train net output #0: loss = 0.717353 (* 1 = 0.717353 loss)
I0428 19:45:23.306959 25790 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:23.457365 25790 solver.cpp:219] Iteration 600 (664.888 iter/s, 0.150401s/100 iters), loss = 0.760685
I0428 19:45:23.457417 25790 solver.cpp:238]     Train net output #0: loss = 0.760685 (* 1 = 0.760685 loss)
I0428 19:45:23.457430 25790 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:23.618538 25790 solver.cpp:219] Iteration 700 (620.702 iter/s, 0.161108s/100 iters), loss = 0.962761
I0428 19:45:23.618593 25790 solver.cpp:238]     Train net output #0: loss = 0.962761 (* 1 = 0.962761 loss)
I0428 19:45:23.618608 25790 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:23.776836 25790 solver.cpp:219] Iteration 800 (632.054 iter/s, 0.158214s/100 iters), loss = 0.879519
I0428 19:45:23.776892 25790 solver.cpp:238]     Train net output #0: loss = 0.879519 (* 1 = 0.879519 loss)
I0428 19:45:23.776907 25790 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:23.936292 25790 solver.cpp:219] Iteration 900 (627.405 iter/s, 0.159387s/100 iters), loss = 0.679211
I0428 19:45:23.936347 25790 solver.cpp:238]     Train net output #0: loss = 0.679211 (* 1 = 0.679211 loss)
I0428 19:45:23.936360 25790 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:23.988080 25796 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:24.093276 25790 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:24.094986 25790 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:24.095894 25790 solver.cpp:311] Iteration 1000, loss = 0.883832
I0428 19:45:24.095929 25790 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:24.153194 25797 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:24.153779 25790 solver.cpp:398]     Test net output #0: accuracy = 0.7785
I0428 19:45:24.153806 25790 solver.cpp:398]     Test net output #1: loss = 0.787066 (* 1 = 0.787066 loss)
I0428 19:45:24.153815 25790 solver.cpp:316] Optimization Done.
I0428 19:45:24.153818 25790 caffe.cpp:259] Optimization Done.
