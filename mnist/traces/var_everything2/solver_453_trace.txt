I0428 19:44:39.486692 25649 caffe.cpp:218] Using GPUs 0
I0428 19:44:39.524963 25649 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:40.034886 25649 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test453.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:40.035027 25649 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test453.prototxt
I0428 19:44:40.035445 25649 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:40.035466 25649 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:40.035569 25649 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:40.035651 25649 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:40.035753 25649 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:40.035775 25649 net.cpp:86] Creating Layer mnist
I0428 19:44:40.035785 25649 net.cpp:382] mnist -> data
I0428 19:44:40.035807 25649 net.cpp:382] mnist -> label
I0428 19:44:40.036911 25649 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:40.039353 25649 net.cpp:124] Setting up mnist
I0428 19:44:40.039371 25649 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:40.039377 25649 net.cpp:131] Top shape: 64 (64)
I0428 19:44:40.039381 25649 net.cpp:139] Memory required for data: 200960
I0428 19:44:40.039388 25649 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:40.039405 25649 net.cpp:86] Creating Layer conv0
I0428 19:44:40.039427 25649 net.cpp:408] conv0 <- data
I0428 19:44:40.039440 25649 net.cpp:382] conv0 -> conv0
I0428 19:44:40.328356 25649 net.cpp:124] Setting up conv0
I0428 19:44:40.328384 25649 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:40.328389 25649 net.cpp:139] Memory required for data: 495872
I0428 19:44:40.328404 25649 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:40.328418 25649 net.cpp:86] Creating Layer pool0
I0428 19:44:40.328423 25649 net.cpp:408] pool0 <- conv0
I0428 19:44:40.328428 25649 net.cpp:382] pool0 -> pool0
I0428 19:44:40.328477 25649 net.cpp:124] Setting up pool0
I0428 19:44:40.328485 25649 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:40.328487 25649 net.cpp:139] Memory required for data: 569600
I0428 19:44:40.328491 25649 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:40.328502 25649 net.cpp:86] Creating Layer conv1
I0428 19:44:40.328506 25649 net.cpp:408] conv1 <- pool0
I0428 19:44:40.328511 25649 net.cpp:382] conv1 -> conv1
I0428 19:44:40.331305 25649 net.cpp:124] Setting up conv1
I0428 19:44:40.331321 25649 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:40.331326 25649 net.cpp:139] Memory required for data: 1388800
I0428 19:44:40.331334 25649 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:40.331342 25649 net.cpp:86] Creating Layer pool1
I0428 19:44:40.331346 25649 net.cpp:408] pool1 <- conv1
I0428 19:44:40.331352 25649 net.cpp:382] pool1 -> pool1
I0428 19:44:40.331393 25649 net.cpp:124] Setting up pool1
I0428 19:44:40.331398 25649 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:40.331401 25649 net.cpp:139] Memory required for data: 1593600
I0428 19:44:40.331405 25649 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:40.331413 25649 net.cpp:86] Creating Layer ip1
I0428 19:44:40.331415 25649 net.cpp:408] ip1 <- pool1
I0428 19:44:40.331420 25649 net.cpp:382] ip1 -> ip1
I0428 19:44:40.331640 25649 net.cpp:124] Setting up ip1
I0428 19:44:40.331650 25649 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:40.331652 25649 net.cpp:139] Memory required for data: 1600000
I0428 19:44:40.331660 25649 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:40.331666 25649 net.cpp:86] Creating Layer relu1
I0428 19:44:40.331670 25649 net.cpp:408] relu1 <- ip1
I0428 19:44:40.331674 25649 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:40.331851 25649 net.cpp:124] Setting up relu1
I0428 19:44:40.331861 25649 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:40.331863 25649 net.cpp:139] Memory required for data: 1606400
I0428 19:44:40.331867 25649 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:40.331873 25649 net.cpp:86] Creating Layer ip2
I0428 19:44:40.331877 25649 net.cpp:408] ip2 <- ip1
I0428 19:44:40.331882 25649 net.cpp:382] ip2 -> ip2
I0428 19:44:40.331984 25649 net.cpp:124] Setting up ip2
I0428 19:44:40.331991 25649 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:40.331995 25649 net.cpp:139] Memory required for data: 1612800
I0428 19:44:40.332000 25649 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:40.332006 25649 net.cpp:86] Creating Layer relu2
I0428 19:44:40.332010 25649 net.cpp:408] relu2 <- ip2
I0428 19:44:40.332015 25649 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:40.332767 25649 net.cpp:124] Setting up relu2
I0428 19:44:40.332780 25649 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:40.332784 25649 net.cpp:139] Memory required for data: 1619200
I0428 19:44:40.332788 25649 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:40.332795 25649 net.cpp:86] Creating Layer ip3
I0428 19:44:40.332799 25649 net.cpp:408] ip3 <- ip2
I0428 19:44:40.332805 25649 net.cpp:382] ip3 -> ip3
I0428 19:44:40.332919 25649 net.cpp:124] Setting up ip3
I0428 19:44:40.332928 25649 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:40.332931 25649 net.cpp:139] Memory required for data: 1621760
I0428 19:44:40.332939 25649 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:40.332945 25649 net.cpp:86] Creating Layer relu3
I0428 19:44:40.332948 25649 net.cpp:408] relu3 <- ip3
I0428 19:44:40.332953 25649 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:40.333128 25649 net.cpp:124] Setting up relu3
I0428 19:44:40.333138 25649 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:40.333142 25649 net.cpp:139] Memory required for data: 1624320
I0428 19:44:40.333145 25649 layer_factory.hpp:77] Creating layer loss
I0428 19:44:40.333158 25649 net.cpp:86] Creating Layer loss
I0428 19:44:40.333161 25649 net.cpp:408] loss <- ip3
I0428 19:44:40.333165 25649 net.cpp:408] loss <- label
I0428 19:44:40.333171 25649 net.cpp:382] loss -> loss
I0428 19:44:40.333185 25649 layer_factory.hpp:77] Creating layer loss
I0428 19:44:40.333443 25649 net.cpp:124] Setting up loss
I0428 19:44:40.333453 25649 net.cpp:131] Top shape: (1)
I0428 19:44:40.333456 25649 net.cpp:134]     with loss weight 1
I0428 19:44:40.333472 25649 net.cpp:139] Memory required for data: 1624324
I0428 19:44:40.333474 25649 net.cpp:200] loss needs backward computation.
I0428 19:44:40.333478 25649 net.cpp:200] relu3 needs backward computation.
I0428 19:44:40.333482 25649 net.cpp:200] ip3 needs backward computation.
I0428 19:44:40.333484 25649 net.cpp:200] relu2 needs backward computation.
I0428 19:44:40.333487 25649 net.cpp:200] ip2 needs backward computation.
I0428 19:44:40.333490 25649 net.cpp:200] relu1 needs backward computation.
I0428 19:44:40.333492 25649 net.cpp:200] ip1 needs backward computation.
I0428 19:44:40.333497 25649 net.cpp:200] pool1 needs backward computation.
I0428 19:44:40.333499 25649 net.cpp:200] conv1 needs backward computation.
I0428 19:44:40.333503 25649 net.cpp:200] pool0 needs backward computation.
I0428 19:44:40.333505 25649 net.cpp:200] conv0 needs backward computation.
I0428 19:44:40.333508 25649 net.cpp:202] mnist does not need backward computation.
I0428 19:44:40.333511 25649 net.cpp:244] This network produces output loss
I0428 19:44:40.333521 25649 net.cpp:257] Network initialization done.
I0428 19:44:40.333914 25649 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test453.prototxt
I0428 19:44:40.333951 25649 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:40.334067 25649 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:40.334172 25649 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:40.334216 25649 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:40.334229 25649 net.cpp:86] Creating Layer mnist
I0428 19:44:40.334235 25649 net.cpp:382] mnist -> data
I0428 19:44:40.334244 25649 net.cpp:382] mnist -> label
I0428 19:44:40.334332 25649 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:40.336251 25649 net.cpp:124] Setting up mnist
I0428 19:44:40.336266 25649 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:40.336271 25649 net.cpp:131] Top shape: 100 (100)
I0428 19:44:40.336273 25649 net.cpp:139] Memory required for data: 314000
I0428 19:44:40.336277 25649 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:40.336284 25649 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:40.336288 25649 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:40.336310 25649 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:40.336318 25649 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:40.336359 25649 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:40.336365 25649 net.cpp:131] Top shape: 100 (100)
I0428 19:44:40.336370 25649 net.cpp:131] Top shape: 100 (100)
I0428 19:44:40.336374 25649 net.cpp:139] Memory required for data: 314800
I0428 19:44:40.336376 25649 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:40.336385 25649 net.cpp:86] Creating Layer conv0
I0428 19:44:40.336390 25649 net.cpp:408] conv0 <- data
I0428 19:44:40.336395 25649 net.cpp:382] conv0 -> conv0
I0428 19:44:40.338186 25649 net.cpp:124] Setting up conv0
I0428 19:44:40.338199 25649 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:40.338203 25649 net.cpp:139] Memory required for data: 775600
I0428 19:44:40.338212 25649 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:40.338222 25649 net.cpp:86] Creating Layer pool0
I0428 19:44:40.338224 25649 net.cpp:408] pool0 <- conv0
I0428 19:44:40.338229 25649 net.cpp:382] pool0 -> pool0
I0428 19:44:40.338268 25649 net.cpp:124] Setting up pool0
I0428 19:44:40.338274 25649 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:40.338276 25649 net.cpp:139] Memory required for data: 890800
I0428 19:44:40.338280 25649 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:40.338290 25649 net.cpp:86] Creating Layer conv1
I0428 19:44:40.338294 25649 net.cpp:408] conv1 <- pool0
I0428 19:44:40.338299 25649 net.cpp:382] conv1 -> conv1
I0428 19:44:40.339918 25649 net.cpp:124] Setting up conv1
I0428 19:44:40.339932 25649 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:40.339937 25649 net.cpp:139] Memory required for data: 2170800
I0428 19:44:40.339946 25649 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:40.339954 25649 net.cpp:86] Creating Layer pool1
I0428 19:44:40.339957 25649 net.cpp:408] pool1 <- conv1
I0428 19:44:40.339974 25649 net.cpp:382] pool1 -> pool1
I0428 19:44:40.340013 25649 net.cpp:124] Setting up pool1
I0428 19:44:40.340029 25649 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:40.340031 25649 net.cpp:139] Memory required for data: 2490800
I0428 19:44:40.340034 25649 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:40.340041 25649 net.cpp:86] Creating Layer ip1
I0428 19:44:40.340045 25649 net.cpp:408] ip1 <- pool1
I0428 19:44:40.340049 25649 net.cpp:382] ip1 -> ip1
I0428 19:44:40.340268 25649 net.cpp:124] Setting up ip1
I0428 19:44:40.340276 25649 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:40.340296 25649 net.cpp:139] Memory required for data: 2500800
I0428 19:44:40.340306 25649 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:40.340312 25649 net.cpp:86] Creating Layer relu1
I0428 19:44:40.340322 25649 net.cpp:408] relu1 <- ip1
I0428 19:44:40.340325 25649 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:40.340493 25649 net.cpp:124] Setting up relu1
I0428 19:44:40.340503 25649 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:40.340507 25649 net.cpp:139] Memory required for data: 2510800
I0428 19:44:40.340510 25649 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:40.340518 25649 net.cpp:86] Creating Layer ip2
I0428 19:44:40.340522 25649 net.cpp:408] ip2 <- ip1
I0428 19:44:40.340528 25649 net.cpp:382] ip2 -> ip2
I0428 19:44:40.340636 25649 net.cpp:124] Setting up ip2
I0428 19:44:40.340643 25649 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:40.340646 25649 net.cpp:139] Memory required for data: 2520800
I0428 19:44:40.340651 25649 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:40.340656 25649 net.cpp:86] Creating Layer relu2
I0428 19:44:40.340659 25649 net.cpp:408] relu2 <- ip2
I0428 19:44:40.340663 25649 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:40.340900 25649 net.cpp:124] Setting up relu2
I0428 19:44:40.340912 25649 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:40.340915 25649 net.cpp:139] Memory required for data: 2530800
I0428 19:44:40.340919 25649 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:40.340925 25649 net.cpp:86] Creating Layer ip3
I0428 19:44:40.340929 25649 net.cpp:408] ip3 <- ip2
I0428 19:44:40.340934 25649 net.cpp:382] ip3 -> ip3
I0428 19:44:40.341089 25649 net.cpp:124] Setting up ip3
I0428 19:44:40.341097 25649 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:40.341100 25649 net.cpp:139] Memory required for data: 2534800
I0428 19:44:40.341110 25649 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:40.341116 25649 net.cpp:86] Creating Layer relu3
I0428 19:44:40.341130 25649 net.cpp:408] relu3 <- ip3
I0428 19:44:40.341136 25649 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:40.341966 25649 net.cpp:124] Setting up relu3
I0428 19:44:40.341979 25649 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:40.341982 25649 net.cpp:139] Memory required for data: 2538800
I0428 19:44:40.341985 25649 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:40.341991 25649 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:40.341995 25649 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:40.342001 25649 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:40.342008 25649 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:40.342074 25649 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:40.342082 25649 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:40.342087 25649 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:40.342089 25649 net.cpp:139] Memory required for data: 2546800
I0428 19:44:40.342092 25649 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:40.342099 25649 net.cpp:86] Creating Layer accuracy
I0428 19:44:40.342103 25649 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:40.342108 25649 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:40.342113 25649 net.cpp:382] accuracy -> accuracy
I0428 19:44:40.342121 25649 net.cpp:124] Setting up accuracy
I0428 19:44:40.342130 25649 net.cpp:131] Top shape: (1)
I0428 19:44:40.342133 25649 net.cpp:139] Memory required for data: 2546804
I0428 19:44:40.342136 25649 layer_factory.hpp:77] Creating layer loss
I0428 19:44:40.342141 25649 net.cpp:86] Creating Layer loss
I0428 19:44:40.342150 25649 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:40.342154 25649 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:40.342159 25649 net.cpp:382] loss -> loss
I0428 19:44:40.342170 25649 layer_factory.hpp:77] Creating layer loss
I0428 19:44:40.342433 25649 net.cpp:124] Setting up loss
I0428 19:44:40.342444 25649 net.cpp:131] Top shape: (1)
I0428 19:44:40.342448 25649 net.cpp:134]     with loss weight 1
I0428 19:44:40.342454 25649 net.cpp:139] Memory required for data: 2546808
I0428 19:44:40.342469 25649 net.cpp:200] loss needs backward computation.
I0428 19:44:40.342485 25649 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:40.342489 25649 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:40.342492 25649 net.cpp:200] relu3 needs backward computation.
I0428 19:44:40.342495 25649 net.cpp:200] ip3 needs backward computation.
I0428 19:44:40.342499 25649 net.cpp:200] relu2 needs backward computation.
I0428 19:44:40.342501 25649 net.cpp:200] ip2 needs backward computation.
I0428 19:44:40.342510 25649 net.cpp:200] relu1 needs backward computation.
I0428 19:44:40.342514 25649 net.cpp:200] ip1 needs backward computation.
I0428 19:44:40.342516 25649 net.cpp:200] pool1 needs backward computation.
I0428 19:44:40.342520 25649 net.cpp:200] conv1 needs backward computation.
I0428 19:44:40.342523 25649 net.cpp:200] pool0 needs backward computation.
I0428 19:44:40.342527 25649 net.cpp:200] conv0 needs backward computation.
I0428 19:44:40.342531 25649 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:40.342535 25649 net.cpp:202] mnist does not need backward computation.
I0428 19:44:40.342537 25649 net.cpp:244] This network produces output accuracy
I0428 19:44:40.342541 25649 net.cpp:244] This network produces output loss
I0428 19:44:40.342553 25649 net.cpp:257] Network initialization done.
I0428 19:44:40.342597 25649 solver.cpp:56] Solver scaffolding done.
I0428 19:44:40.342952 25649 caffe.cpp:248] Starting Optimization
I0428 19:44:40.342960 25649 solver.cpp:273] Solving LeNet
I0428 19:44:40.342964 25649 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:40.343806 25649 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:40.347291 25649 blocking_queue.cpp:49] Waiting for data
I0428 19:44:40.414281 25656 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:40.414789 25649 solver.cpp:398]     Test net output #0: accuracy = 0.0664
I0428 19:44:40.414809 25649 solver.cpp:398]     Test net output #1: loss = 2.31804 (* 1 = 2.31804 loss)
I0428 19:44:40.417003 25649 solver.cpp:219] Iteration 0 (-1.25715e-33 iter/s, 0.0740065s/100 iters), loss = 2.30695
I0428 19:44:40.417029 25649 solver.cpp:238]     Train net output #0: loss = 2.30695 (* 1 = 2.30695 loss)
I0428 19:44:40.417042 25649 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:40.526970 25649 solver.cpp:219] Iteration 100 (909.693 iter/s, 0.109927s/100 iters), loss = 0.741961
I0428 19:44:40.526995 25649 solver.cpp:238]     Train net output #0: loss = 0.741961 (* 1 = 0.741961 loss)
I0428 19:44:40.527016 25649 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:40.636041 25649 solver.cpp:219] Iteration 200 (917.175 iter/s, 0.10903s/100 iters), loss = 0.532583
I0428 19:44:40.636067 25649 solver.cpp:238]     Train net output #0: loss = 0.532583 (* 1 = 0.532583 loss)
I0428 19:44:40.636075 25649 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:40.744177 25649 solver.cpp:219] Iteration 300 (925.091 iter/s, 0.108097s/100 iters), loss = 0.421283
I0428 19:44:40.744204 25649 solver.cpp:238]     Train net output #0: loss = 0.421283 (* 1 = 0.421283 loss)
I0428 19:44:40.744215 25649 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:40.850972 25649 solver.cpp:219] Iteration 400 (936.725 iter/s, 0.106755s/100 iters), loss = 0.358048
I0428 19:44:40.850998 25649 solver.cpp:238]     Train net output #0: loss = 0.358048 (* 1 = 0.358048 loss)
I0428 19:44:40.851021 25649 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:40.952345 25649 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:41.027930 25656 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:41.028445 25649 solver.cpp:398]     Test net output #0: accuracy = 0.8614
I0428 19:44:41.028467 25649 solver.cpp:398]     Test net output #1: loss = 0.379319 (* 1 = 0.379319 loss)
I0428 19:44:41.029526 25649 solver.cpp:219] Iteration 500 (560.18 iter/s, 0.178514s/100 iters), loss = 0.33928
I0428 19:44:41.029579 25649 solver.cpp:238]     Train net output #0: loss = 0.33928 (* 1 = 0.33928 loss)
I0428 19:44:41.029602 25649 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:41.137665 25649 solver.cpp:219] Iteration 600 (925.34 iter/s, 0.108068s/100 iters), loss = 0.0877845
I0428 19:44:41.137706 25649 solver.cpp:238]     Train net output #0: loss = 0.0877845 (* 1 = 0.0877845 loss)
I0428 19:44:41.137728 25649 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:41.241853 25649 solver.cpp:219] Iteration 700 (960.285 iter/s, 0.104136s/100 iters), loss = 0.212021
I0428 19:44:41.241897 25649 solver.cpp:238]     Train net output #0: loss = 0.212021 (* 1 = 0.212021 loss)
I0428 19:44:41.241904 25649 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:41.348788 25649 solver.cpp:219] Iteration 800 (935.637 iter/s, 0.106879s/100 iters), loss = 0.237597
I0428 19:44:41.348820 25649 solver.cpp:238]     Train net output #0: loss = 0.237597 (* 1 = 0.237597 loss)
I0428 19:44:41.348827 25649 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:41.458492 25649 solver.cpp:219] Iteration 900 (911.942 iter/s, 0.109656s/100 iters), loss = 0.131033
I0428 19:44:41.458534 25649 solver.cpp:238]     Train net output #0: loss = 0.131034 (* 1 = 0.131034 loss)
I0428 19:44:41.458540 25649 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:41.494120 25655 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:41.561077 25649 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:41.562350 25649 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:41.563031 25649 solver.cpp:311] Iteration 1000, loss = 0.0835615
I0428 19:44:41.563045 25649 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:41.638092 25656 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:41.638584 25649 solver.cpp:398]     Test net output #0: accuracy = 0.966
I0428 19:44:41.638604 25649 solver.cpp:398]     Test net output #1: loss = 0.105735 (* 1 = 0.105735 loss)
I0428 19:44:41.638609 25649 solver.cpp:316] Optimization Done.
I0428 19:44:41.638612 25649 caffe.cpp:259] Optimization Done.
