I0428 19:38:29.388604 24029 caffe.cpp:218] Using GPUs 0
I0428 19:38:29.428830 24029 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:38:29.936050 24029 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test275.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:38:29.936189 24029 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test275.prototxt
I0428 19:38:29.936519 24029 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:38:29.936535 24029 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:38:29.936614 24029 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:38:29.936686 24029 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:29.936779 24029 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:38:29.936801 24029 net.cpp:86] Creating Layer mnist
I0428 19:38:29.936818 24029 net.cpp:382] mnist -> data
I0428 19:38:29.936842 24029 net.cpp:382] mnist -> label
I0428 19:38:29.937896 24029 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:38:29.940280 24029 net.cpp:124] Setting up mnist
I0428 19:38:29.940310 24029 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:38:29.940316 24029 net.cpp:131] Top shape: 64 (64)
I0428 19:38:29.940320 24029 net.cpp:139] Memory required for data: 200960
I0428 19:38:29.940326 24029 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:29.940342 24029 net.cpp:86] Creating Layer conv0
I0428 19:38:29.940348 24029 net.cpp:408] conv0 <- data
I0428 19:38:29.940359 24029 net.cpp:382] conv0 -> conv0
I0428 19:38:30.226783 24029 net.cpp:124] Setting up conv0
I0428 19:38:30.226810 24029 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:38:30.226814 24029 net.cpp:139] Memory required for data: 495872
I0428 19:38:30.226830 24029 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:30.226841 24029 net.cpp:86] Creating Layer pool0
I0428 19:38:30.226846 24029 net.cpp:408] pool0 <- conv0
I0428 19:38:30.226852 24029 net.cpp:382] pool0 -> pool0
I0428 19:38:30.226898 24029 net.cpp:124] Setting up pool0
I0428 19:38:30.226903 24029 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:38:30.226922 24029 net.cpp:139] Memory required for data: 569600
I0428 19:38:30.226927 24029 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:30.226938 24029 net.cpp:86] Creating Layer conv1
I0428 19:38:30.226940 24029 net.cpp:408] conv1 <- pool0
I0428 19:38:30.226946 24029 net.cpp:382] conv1 -> conv1
I0428 19:38:30.228765 24029 net.cpp:124] Setting up conv1
I0428 19:38:30.228780 24029 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:38:30.228782 24029 net.cpp:139] Memory required for data: 602368
I0428 19:38:30.228791 24029 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:30.228799 24029 net.cpp:86] Creating Layer pool1
I0428 19:38:30.228802 24029 net.cpp:408] pool1 <- conv1
I0428 19:38:30.228807 24029 net.cpp:382] pool1 -> pool1
I0428 19:38:30.228868 24029 net.cpp:124] Setting up pool1
I0428 19:38:30.228873 24029 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:38:30.228876 24029 net.cpp:139] Memory required for data: 610560
I0428 19:38:30.228880 24029 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:30.228888 24029 net.cpp:86] Creating Layer ip1
I0428 19:38:30.228890 24029 net.cpp:408] ip1 <- pool1
I0428 19:38:30.228895 24029 net.cpp:382] ip1 -> ip1
I0428 19:38:30.228992 24029 net.cpp:124] Setting up ip1
I0428 19:38:30.229001 24029 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:30.229003 24029 net.cpp:139] Memory required for data: 613120
I0428 19:38:30.229010 24029 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:30.229017 24029 net.cpp:86] Creating Layer relu1
I0428 19:38:30.229027 24029 net.cpp:408] relu1 <- ip1
I0428 19:38:30.229032 24029 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:30.229212 24029 net.cpp:124] Setting up relu1
I0428 19:38:30.229221 24029 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:30.229224 24029 net.cpp:139] Memory required for data: 615680
I0428 19:38:30.229228 24029 layer_factory.hpp:77] Creating layer loss
I0428 19:38:30.229233 24029 net.cpp:86] Creating Layer loss
I0428 19:38:30.229236 24029 net.cpp:408] loss <- ip1
I0428 19:38:30.229240 24029 net.cpp:408] loss <- label
I0428 19:38:30.229246 24029 net.cpp:382] loss -> loss
I0428 19:38:30.229264 24029 layer_factory.hpp:77] Creating layer loss
I0428 19:38:30.230068 24029 net.cpp:124] Setting up loss
I0428 19:38:30.230082 24029 net.cpp:131] Top shape: (1)
I0428 19:38:30.230084 24029 net.cpp:134]     with loss weight 1
I0428 19:38:30.230098 24029 net.cpp:139] Memory required for data: 615684
I0428 19:38:30.230103 24029 net.cpp:200] loss needs backward computation.
I0428 19:38:30.230106 24029 net.cpp:200] relu1 needs backward computation.
I0428 19:38:30.230109 24029 net.cpp:200] ip1 needs backward computation.
I0428 19:38:30.230113 24029 net.cpp:200] pool1 needs backward computation.
I0428 19:38:30.230115 24029 net.cpp:200] conv1 needs backward computation.
I0428 19:38:30.230120 24029 net.cpp:200] pool0 needs backward computation.
I0428 19:38:30.230124 24029 net.cpp:200] conv0 needs backward computation.
I0428 19:38:30.230129 24029 net.cpp:202] mnist does not need backward computation.
I0428 19:38:30.230130 24029 net.cpp:244] This network produces output loss
I0428 19:38:30.230139 24029 net.cpp:257] Network initialization done.
I0428 19:38:30.230398 24029 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test275.prototxt
I0428 19:38:30.230422 24029 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:38:30.230499 24029 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:38:30.230571 24029 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:30.230618 24029 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:38:30.230631 24029 net.cpp:86] Creating Layer mnist
I0428 19:38:30.230635 24029 net.cpp:382] mnist -> data
I0428 19:38:30.230643 24029 net.cpp:382] mnist -> label
I0428 19:38:30.230728 24029 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:38:30.232805 24029 net.cpp:124] Setting up mnist
I0428 19:38:30.232823 24029 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:38:30.232828 24029 net.cpp:131] Top shape: 100 (100)
I0428 19:38:30.232831 24029 net.cpp:139] Memory required for data: 314000
I0428 19:38:30.232836 24029 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:38:30.232846 24029 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:38:30.232849 24029 net.cpp:408] label_mnist_1_split <- label
I0428 19:38:30.232854 24029 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:38:30.232861 24029 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:38:30.232921 24029 net.cpp:124] Setting up label_mnist_1_split
I0428 19:38:30.232926 24029 net.cpp:131] Top shape: 100 (100)
I0428 19:38:30.232930 24029 net.cpp:131] Top shape: 100 (100)
I0428 19:38:30.232933 24029 net.cpp:139] Memory required for data: 314800
I0428 19:38:30.232936 24029 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:30.232945 24029 net.cpp:86] Creating Layer conv0
I0428 19:38:30.232949 24029 net.cpp:408] conv0 <- data
I0428 19:38:30.232954 24029 net.cpp:382] conv0 -> conv0
I0428 19:38:30.233912 24029 net.cpp:124] Setting up conv0
I0428 19:38:30.233924 24029 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:38:30.233928 24029 net.cpp:139] Memory required for data: 775600
I0428 19:38:30.233937 24029 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:30.233943 24029 net.cpp:86] Creating Layer pool0
I0428 19:38:30.233947 24029 net.cpp:408] pool0 <- conv0
I0428 19:38:30.233952 24029 net.cpp:382] pool0 -> pool0
I0428 19:38:30.233985 24029 net.cpp:124] Setting up pool0
I0428 19:38:30.233990 24029 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:38:30.233994 24029 net.cpp:139] Memory required for data: 890800
I0428 19:38:30.233996 24029 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:30.234004 24029 net.cpp:86] Creating Layer conv1
I0428 19:38:30.234007 24029 net.cpp:408] conv1 <- pool0
I0428 19:38:30.234012 24029 net.cpp:382] conv1 -> conv1
I0428 19:38:30.235446 24029 net.cpp:124] Setting up conv1
I0428 19:38:30.235460 24029 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:38:30.235463 24029 net.cpp:139] Memory required for data: 942000
I0428 19:38:30.235472 24029 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:30.235478 24029 net.cpp:86] Creating Layer pool1
I0428 19:38:30.235492 24029 net.cpp:408] pool1 <- conv1
I0428 19:38:30.235498 24029 net.cpp:382] pool1 -> pool1
I0428 19:38:30.235535 24029 net.cpp:124] Setting up pool1
I0428 19:38:30.235540 24029 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:38:30.235543 24029 net.cpp:139] Memory required for data: 954800
I0428 19:38:30.235546 24029 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:30.235553 24029 net.cpp:86] Creating Layer ip1
I0428 19:38:30.235555 24029 net.cpp:408] ip1 <- pool1
I0428 19:38:30.235560 24029 net.cpp:382] ip1 -> ip1
I0428 19:38:30.235661 24029 net.cpp:124] Setting up ip1
I0428 19:38:30.235668 24029 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:30.235671 24029 net.cpp:139] Memory required for data: 958800
I0428 19:38:30.235678 24029 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:30.235684 24029 net.cpp:86] Creating Layer relu1
I0428 19:38:30.235687 24029 net.cpp:408] relu1 <- ip1
I0428 19:38:30.235692 24029 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:30.236490 24029 net.cpp:124] Setting up relu1
I0428 19:38:30.236501 24029 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:30.236505 24029 net.cpp:139] Memory required for data: 962800
I0428 19:38:30.236508 24029 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:38:30.236515 24029 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:38:30.236518 24029 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:38:30.236523 24029 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:38:30.236531 24029 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:38:30.236572 24029 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:38:30.236577 24029 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:30.236580 24029 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:30.236583 24029 net.cpp:139] Memory required for data: 970800
I0428 19:38:30.236587 24029 layer_factory.hpp:77] Creating layer accuracy
I0428 19:38:30.236590 24029 net.cpp:86] Creating Layer accuracy
I0428 19:38:30.236595 24029 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:38:30.236599 24029 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:38:30.236603 24029 net.cpp:382] accuracy -> accuracy
I0428 19:38:30.236610 24029 net.cpp:124] Setting up accuracy
I0428 19:38:30.236614 24029 net.cpp:131] Top shape: (1)
I0428 19:38:30.236618 24029 net.cpp:139] Memory required for data: 970804
I0428 19:38:30.236620 24029 layer_factory.hpp:77] Creating layer loss
I0428 19:38:30.236624 24029 net.cpp:86] Creating Layer loss
I0428 19:38:30.236629 24029 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:38:30.236632 24029 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:38:30.236637 24029 net.cpp:382] loss -> loss
I0428 19:38:30.236642 24029 layer_factory.hpp:77] Creating layer loss
I0428 19:38:30.236887 24029 net.cpp:124] Setting up loss
I0428 19:38:30.236897 24029 net.cpp:131] Top shape: (1)
I0428 19:38:30.236901 24029 net.cpp:134]     with loss weight 1
I0428 19:38:30.236907 24029 net.cpp:139] Memory required for data: 970808
I0428 19:38:30.236909 24029 net.cpp:200] loss needs backward computation.
I0428 19:38:30.236913 24029 net.cpp:202] accuracy does not need backward computation.
I0428 19:38:30.236917 24029 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:38:30.236920 24029 net.cpp:200] relu1 needs backward computation.
I0428 19:38:30.236923 24029 net.cpp:200] ip1 needs backward computation.
I0428 19:38:30.236927 24029 net.cpp:200] pool1 needs backward computation.
I0428 19:38:30.236929 24029 net.cpp:200] conv1 needs backward computation.
I0428 19:38:30.236933 24029 net.cpp:200] pool0 needs backward computation.
I0428 19:38:30.236937 24029 net.cpp:200] conv0 needs backward computation.
I0428 19:38:30.236939 24029 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:38:30.236943 24029 net.cpp:202] mnist does not need backward computation.
I0428 19:38:30.236946 24029 net.cpp:244] This network produces output accuracy
I0428 19:38:30.236949 24029 net.cpp:244] This network produces output loss
I0428 19:38:30.236959 24029 net.cpp:257] Network initialization done.
I0428 19:38:30.237004 24029 solver.cpp:56] Solver scaffolding done.
I0428 19:38:30.237212 24029 caffe.cpp:248] Starting Optimization
I0428 19:38:30.237220 24029 solver.cpp:273] Solving LeNet
I0428 19:38:30.237221 24029 solver.cpp:274] Learning Rate Policy: inv
I0428 19:38:30.237931 24029 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:38:30.238066 24029 blocking_queue.cpp:49] Waiting for data
I0428 19:38:30.313562 24036 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:30.313946 24029 solver.cpp:398]     Test net output #0: accuracy = 0.1573
I0428 19:38:30.313968 24029 solver.cpp:398]     Test net output #1: loss = 2.29694 (* 1 = 2.29694 loss)
I0428 19:38:30.315616 24029 solver.cpp:219] Iteration 0 (-7.35286e-39 iter/s, 0.0783641s/100 iters), loss = 2.32614
I0428 19:38:30.315641 24029 solver.cpp:238]     Train net output #0: loss = 2.32614 (* 1 = 2.32614 loss)
I0428 19:38:30.315654 24029 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:38:30.368249 24029 solver.cpp:219] Iteration 100 (1901.23 iter/s, 0.0525976s/100 iters), loss = 0.725482
I0428 19:38:30.368273 24029 solver.cpp:238]     Train net output #0: loss = 0.725482 (* 1 = 0.725482 loss)
I0428 19:38:30.368279 24029 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:38:30.420836 24029 solver.cpp:219] Iteration 200 (1902.74 iter/s, 0.0525558s/100 iters), loss = 0.659229
I0428 19:38:30.420859 24029 solver.cpp:238]     Train net output #0: loss = 0.659229 (* 1 = 0.659229 loss)
I0428 19:38:30.420866 24029 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:38:30.474231 24029 solver.cpp:219] Iteration 300 (1873.93 iter/s, 0.0533637s/100 iters), loss = 0.326158
I0428 19:38:30.474268 24029 solver.cpp:238]     Train net output #0: loss = 0.326158 (* 1 = 0.326158 loss)
I0428 19:38:30.474274 24029 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:38:30.527578 24029 solver.cpp:219] Iteration 400 (1875.52 iter/s, 0.0533185s/100 iters), loss = 0.41375
I0428 19:38:30.527616 24029 solver.cpp:238]     Train net output #0: loss = 0.41375 (* 1 = 0.41375 loss)
I0428 19:38:30.527621 24029 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:38:30.579887 24029 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:38:30.624464 24036 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:30.624866 24029 solver.cpp:398]     Test net output #0: accuracy = 0.8339
I0428 19:38:30.624886 24029 solver.cpp:398]     Test net output #1: loss = 0.514139 (* 1 = 0.514139 loss)
I0428 19:38:30.625514 24029 solver.cpp:219] Iteration 500 (1021.57 iter/s, 0.0978882s/100 iters), loss = 0.594624
I0428 19:38:30.625550 24029 solver.cpp:238]     Train net output #0: loss = 0.594624 (* 1 = 0.594624 loss)
I0428 19:38:30.625556 24029 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:38:30.682828 24029 solver.cpp:219] Iteration 600 (1745.83 iter/s, 0.0572795s/100 iters), loss = 0.365707
I0428 19:38:30.682888 24029 solver.cpp:238]     Train net output #0: loss = 0.365707 (* 1 = 0.365707 loss)
I0428 19:38:30.682900 24029 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:38:30.752964 24029 solver.cpp:219] Iteration 700 (1427.18 iter/s, 0.0700684s/100 iters), loss = 0.759133
I0428 19:38:30.752996 24029 solver.cpp:238]     Train net output #0: loss = 0.759133 (* 1 = 0.759133 loss)
I0428 19:38:30.753012 24029 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:38:30.812481 24029 solver.cpp:219] Iteration 800 (1681.32 iter/s, 0.0594772s/100 iters), loss = 0.694633
I0428 19:38:30.812510 24029 solver.cpp:238]     Train net output #0: loss = 0.694633 (* 1 = 0.694633 loss)
I0428 19:38:30.812520 24029 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:38:30.870704 24029 solver.cpp:219] Iteration 900 (1718.6 iter/s, 0.0581868s/100 iters), loss = 0.442426
I0428 19:38:30.870733 24029 solver.cpp:238]     Train net output #0: loss = 0.442426 (* 1 = 0.442426 loss)
I0428 19:38:30.870748 24029 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:38:30.890211 24035 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:30.928098 24029 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:38:30.928625 24029 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:38:30.929013 24029 solver.cpp:311] Iteration 1000, loss = 0.616493
I0428 19:38:30.929033 24029 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:38:30.975447 24036 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:30.975993 24029 solver.cpp:398]     Test net output #0: accuracy = 0.8414
I0428 19:38:30.976038 24029 solver.cpp:398]     Test net output #1: loss = 0.465261 (* 1 = 0.465261 loss)
I0428 19:38:30.976055 24029 solver.cpp:316] Optimization Done.
I0428 19:38:30.976063 24029 caffe.cpp:259] Optimization Done.
