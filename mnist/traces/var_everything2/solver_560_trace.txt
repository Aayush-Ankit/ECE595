I0428 19:48:57.526715 26637 caffe.cpp:218] Using GPUs 0
I0428 19:48:57.559844 26637 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:58.088068 26637 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test560.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:58.088213 26637 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test560.prototxt
I0428 19:48:58.088627 26637 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:58.088649 26637 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:58.088750 26637 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:58.088841 26637 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:58.088943 26637 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:58.088966 26637 net.cpp:86] Creating Layer mnist
I0428 19:48:58.088976 26637 net.cpp:382] mnist -> data
I0428 19:48:58.088999 26637 net.cpp:382] mnist -> label
I0428 19:48:58.090086 26637 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:58.092532 26637 net.cpp:124] Setting up mnist
I0428 19:48:58.092552 26637 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:58.092558 26637 net.cpp:131] Top shape: 64 (64)
I0428 19:48:58.092561 26637 net.cpp:139] Memory required for data: 200960
I0428 19:48:58.092568 26637 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:58.092586 26637 net.cpp:86] Creating Layer conv0
I0428 19:48:58.092607 26637 net.cpp:408] conv0 <- data
I0428 19:48:58.092619 26637 net.cpp:382] conv0 -> conv0
I0428 19:48:58.383378 26637 net.cpp:124] Setting up conv0
I0428 19:48:58.383410 26637 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:58.383415 26637 net.cpp:139] Memory required for data: 938240
I0428 19:48:58.383433 26637 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:58.383448 26637 net.cpp:86] Creating Layer pool0
I0428 19:48:58.383453 26637 net.cpp:408] pool0 <- conv0
I0428 19:48:58.383460 26637 net.cpp:382] pool0 -> pool0
I0428 19:48:58.383515 26637 net.cpp:124] Setting up pool0
I0428 19:48:58.383522 26637 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:58.383525 26637 net.cpp:139] Memory required for data: 1122560
I0428 19:48:58.383529 26637 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:58.383543 26637 net.cpp:86] Creating Layer conv1
I0428 19:48:58.383545 26637 net.cpp:408] conv1 <- pool0
I0428 19:48:58.383551 26637 net.cpp:382] conv1 -> conv1
I0428 19:48:58.385757 26637 net.cpp:124] Setting up conv1
I0428 19:48:58.385774 26637 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:58.385779 26637 net.cpp:139] Memory required for data: 1204480
I0428 19:48:58.385789 26637 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:58.385799 26637 net.cpp:86] Creating Layer pool1
I0428 19:48:58.385804 26637 net.cpp:408] pool1 <- conv1
I0428 19:48:58.385810 26637 net.cpp:382] pool1 -> pool1
I0428 19:48:58.385857 26637 net.cpp:124] Setting up pool1
I0428 19:48:58.385864 26637 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:58.385867 26637 net.cpp:139] Memory required for data: 1224960
I0428 19:48:58.385870 26637 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:58.385879 26637 net.cpp:86] Creating Layer ip1
I0428 19:48:58.385884 26637 net.cpp:408] ip1 <- pool1
I0428 19:48:58.385890 26637 net.cpp:382] ip1 -> ip1
I0428 19:48:58.386018 26637 net.cpp:124] Setting up ip1
I0428 19:48:58.386026 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.386030 26637 net.cpp:139] Memory required for data: 1227520
I0428 19:48:58.386039 26637 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:58.386045 26637 net.cpp:86] Creating Layer relu1
I0428 19:48:58.386049 26637 net.cpp:408] relu1 <- ip1
I0428 19:48:58.386055 26637 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:58.386265 26637 net.cpp:124] Setting up relu1
I0428 19:48:58.386276 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.386279 26637 net.cpp:139] Memory required for data: 1230080
I0428 19:48:58.386283 26637 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:58.386291 26637 net.cpp:86] Creating Layer ip2
I0428 19:48:58.386294 26637 net.cpp:408] ip2 <- ip1
I0428 19:48:58.386301 26637 net.cpp:382] ip2 -> ip2
I0428 19:48:58.386422 26637 net.cpp:124] Setting up ip2
I0428 19:48:58.386431 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.386435 26637 net.cpp:139] Memory required for data: 1232640
I0428 19:48:58.386441 26637 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:58.386449 26637 net.cpp:86] Creating Layer relu2
I0428 19:48:58.386453 26637 net.cpp:408] relu2 <- ip2
I0428 19:48:58.386458 26637 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:58.387317 26637 net.cpp:124] Setting up relu2
I0428 19:48:58.387332 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.387336 26637 net.cpp:139] Memory required for data: 1235200
I0428 19:48:58.387341 26637 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:58.387351 26637 net.cpp:86] Creating Layer ip3
I0428 19:48:58.387356 26637 net.cpp:408] ip3 <- ip2
I0428 19:48:58.387362 26637 net.cpp:382] ip3 -> ip3
I0428 19:48:58.387485 26637 net.cpp:124] Setting up ip3
I0428 19:48:58.387497 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.387501 26637 net.cpp:139] Memory required for data: 1237760
I0428 19:48:58.387511 26637 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:58.387516 26637 net.cpp:86] Creating Layer relu3
I0428 19:48:58.387521 26637 net.cpp:408] relu3 <- ip3
I0428 19:48:58.387524 26637 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:58.387735 26637 net.cpp:124] Setting up relu3
I0428 19:48:58.387747 26637 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:58.387750 26637 net.cpp:139] Memory required for data: 1240320
I0428 19:48:58.387753 26637 layer_factory.hpp:77] Creating layer loss
I0428 19:48:58.387761 26637 net.cpp:86] Creating Layer loss
I0428 19:48:58.387764 26637 net.cpp:408] loss <- ip3
I0428 19:48:58.387769 26637 net.cpp:408] loss <- label
I0428 19:48:58.387775 26637 net.cpp:382] loss -> loss
I0428 19:48:58.387796 26637 layer_factory.hpp:77] Creating layer loss
I0428 19:48:58.388082 26637 net.cpp:124] Setting up loss
I0428 19:48:58.388093 26637 net.cpp:131] Top shape: (1)
I0428 19:48:58.388098 26637 net.cpp:134]     with loss weight 1
I0428 19:48:58.388114 26637 net.cpp:139] Memory required for data: 1240324
I0428 19:48:58.388118 26637 net.cpp:200] loss needs backward computation.
I0428 19:48:58.388123 26637 net.cpp:200] relu3 needs backward computation.
I0428 19:48:58.388126 26637 net.cpp:200] ip3 needs backward computation.
I0428 19:48:58.388129 26637 net.cpp:200] relu2 needs backward computation.
I0428 19:48:58.388133 26637 net.cpp:200] ip2 needs backward computation.
I0428 19:48:58.388136 26637 net.cpp:200] relu1 needs backward computation.
I0428 19:48:58.388139 26637 net.cpp:200] ip1 needs backward computation.
I0428 19:48:58.388142 26637 net.cpp:200] pool1 needs backward computation.
I0428 19:48:58.388145 26637 net.cpp:200] conv1 needs backward computation.
I0428 19:48:58.388149 26637 net.cpp:200] pool0 needs backward computation.
I0428 19:48:58.388152 26637 net.cpp:200] conv0 needs backward computation.
I0428 19:48:58.388156 26637 net.cpp:202] mnist does not need backward computation.
I0428 19:48:58.388159 26637 net.cpp:244] This network produces output loss
I0428 19:48:58.388170 26637 net.cpp:257] Network initialization done.
I0428 19:48:58.388557 26637 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test560.prototxt
I0428 19:48:58.388589 26637 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:58.388702 26637 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:58.388803 26637 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:58.388865 26637 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:58.388881 26637 net.cpp:86] Creating Layer mnist
I0428 19:48:58.388888 26637 net.cpp:382] mnist -> data
I0428 19:48:58.388898 26637 net.cpp:382] mnist -> label
I0428 19:48:58.389003 26637 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:58.391206 26637 net.cpp:124] Setting up mnist
I0428 19:48:58.391222 26637 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:58.391227 26637 net.cpp:131] Top shape: 100 (100)
I0428 19:48:58.391230 26637 net.cpp:139] Memory required for data: 314000
I0428 19:48:58.391234 26637 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:58.391270 26637 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:58.391275 26637 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:58.391281 26637 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:58.391289 26637 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:58.391343 26637 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:58.391350 26637 net.cpp:131] Top shape: 100 (100)
I0428 19:48:58.391355 26637 net.cpp:131] Top shape: 100 (100)
I0428 19:48:58.391357 26637 net.cpp:139] Memory required for data: 314800
I0428 19:48:58.391361 26637 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:58.391372 26637 net.cpp:86] Creating Layer conv0
I0428 19:48:58.391376 26637 net.cpp:408] conv0 <- data
I0428 19:48:58.391383 26637 net.cpp:382] conv0 -> conv0
I0428 19:48:58.393791 26637 net.cpp:124] Setting up conv0
I0428 19:48:58.393822 26637 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:58.393832 26637 net.cpp:139] Memory required for data: 1466800
I0428 19:48:58.393851 26637 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:58.393874 26637 net.cpp:86] Creating Layer pool0
I0428 19:48:58.393882 26637 net.cpp:408] pool0 <- conv0
I0428 19:48:58.393893 26637 net.cpp:382] pool0 -> pool0
I0428 19:48:58.394050 26637 net.cpp:124] Setting up pool0
I0428 19:48:58.394068 26637 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:58.394073 26637 net.cpp:139] Memory required for data: 1754800
I0428 19:48:58.394080 26637 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:58.394100 26637 net.cpp:86] Creating Layer conv1
I0428 19:48:58.394110 26637 net.cpp:408] conv1 <- pool0
I0428 19:48:58.394121 26637 net.cpp:382] conv1 -> conv1
I0428 19:48:58.397894 26637 net.cpp:124] Setting up conv1
I0428 19:48:58.397919 26637 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:58.397927 26637 net.cpp:139] Memory required for data: 1882800
I0428 19:48:58.397948 26637 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:58.397960 26637 net.cpp:86] Creating Layer pool1
I0428 19:48:58.397967 26637 net.cpp:408] pool1 <- conv1
I0428 19:48:58.397979 26637 net.cpp:382] pool1 -> pool1
I0428 19:48:58.398079 26637 net.cpp:124] Setting up pool1
I0428 19:48:58.398095 26637 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:58.398102 26637 net.cpp:139] Memory required for data: 1914800
I0428 19:48:58.398108 26637 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:58.398121 26637 net.cpp:86] Creating Layer ip1
I0428 19:48:58.398128 26637 net.cpp:408] ip1 <- pool1
I0428 19:48:58.398138 26637 net.cpp:382] ip1 -> ip1
I0428 19:48:58.398349 26637 net.cpp:124] Setting up ip1
I0428 19:48:58.398366 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.398394 26637 net.cpp:139] Memory required for data: 1918800
I0428 19:48:58.398411 26637 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:58.398429 26637 net.cpp:86] Creating Layer relu1
I0428 19:48:58.398442 26637 net.cpp:408] relu1 <- ip1
I0428 19:48:58.398452 26637 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:58.398795 26637 net.cpp:124] Setting up relu1
I0428 19:48:58.398811 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.398818 26637 net.cpp:139] Memory required for data: 1922800
I0428 19:48:58.398823 26637 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:58.398839 26637 net.cpp:86] Creating Layer ip2
I0428 19:48:58.398845 26637 net.cpp:408] ip2 <- ip1
I0428 19:48:58.398857 26637 net.cpp:382] ip2 -> ip2
I0428 19:48:58.399138 26637 net.cpp:124] Setting up ip2
I0428 19:48:58.399153 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.399159 26637 net.cpp:139] Memory required for data: 1926800
I0428 19:48:58.399171 26637 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:58.399181 26637 net.cpp:86] Creating Layer relu2
I0428 19:48:58.399188 26637 net.cpp:408] relu2 <- ip2
I0428 19:48:58.399196 26637 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:58.399513 26637 net.cpp:124] Setting up relu2
I0428 19:48:58.399528 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.399534 26637 net.cpp:139] Memory required for data: 1930800
I0428 19:48:58.399539 26637 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:58.399550 26637 net.cpp:86] Creating Layer ip3
I0428 19:48:58.399555 26637 net.cpp:408] ip3 <- ip2
I0428 19:48:58.399567 26637 net.cpp:382] ip3 -> ip3
I0428 19:48:58.399760 26637 net.cpp:124] Setting up ip3
I0428 19:48:58.399773 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.399780 26637 net.cpp:139] Memory required for data: 1934800
I0428 19:48:58.399796 26637 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:58.399803 26637 net.cpp:86] Creating Layer relu3
I0428 19:48:58.399816 26637 net.cpp:408] relu3 <- ip3
I0428 19:48:58.399824 26637 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:58.401237 26637 net.cpp:124] Setting up relu3
I0428 19:48:58.401262 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.401268 26637 net.cpp:139] Memory required for data: 1938800
I0428 19:48:58.401274 26637 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:58.401284 26637 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:58.401290 26637 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:58.401304 26637 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:58.401319 26637 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:58.401394 26637 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:58.401409 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.401418 26637 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:58.401423 26637 net.cpp:139] Memory required for data: 1946800
I0428 19:48:58.401429 26637 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:58.401438 26637 net.cpp:86] Creating Layer accuracy
I0428 19:48:58.401444 26637 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:58.401453 26637 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:58.401463 26637 net.cpp:382] accuracy -> accuracy
I0428 19:48:58.401477 26637 net.cpp:124] Setting up accuracy
I0428 19:48:58.401485 26637 net.cpp:131] Top shape: (1)
I0428 19:48:58.401491 26637 net.cpp:139] Memory required for data: 1946804
I0428 19:48:58.401496 26637 layer_factory.hpp:77] Creating layer loss
I0428 19:48:58.401505 26637 net.cpp:86] Creating Layer loss
I0428 19:48:58.401511 26637 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:58.401520 26637 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:58.401527 26637 net.cpp:382] loss -> loss
I0428 19:48:58.401538 26637 layer_factory.hpp:77] Creating layer loss
I0428 19:48:58.402012 26637 net.cpp:124] Setting up loss
I0428 19:48:58.402029 26637 net.cpp:131] Top shape: (1)
I0428 19:48:58.402035 26637 net.cpp:134]     with loss weight 1
I0428 19:48:58.402047 26637 net.cpp:139] Memory required for data: 1946808
I0428 19:48:58.402072 26637 net.cpp:200] loss needs backward computation.
I0428 19:48:58.402081 26637 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:58.402087 26637 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:58.402093 26637 net.cpp:200] relu3 needs backward computation.
I0428 19:48:58.402098 26637 net.cpp:200] ip3 needs backward computation.
I0428 19:48:58.402104 26637 net.cpp:200] relu2 needs backward computation.
I0428 19:48:58.402109 26637 net.cpp:200] ip2 needs backward computation.
I0428 19:48:58.402114 26637 net.cpp:200] relu1 needs backward computation.
I0428 19:48:58.402119 26637 net.cpp:200] ip1 needs backward computation.
I0428 19:48:58.402125 26637 net.cpp:200] pool1 needs backward computation.
I0428 19:48:58.402132 26637 net.cpp:200] conv1 needs backward computation.
I0428 19:48:58.402137 26637 net.cpp:200] pool0 needs backward computation.
I0428 19:48:58.402143 26637 net.cpp:200] conv0 needs backward computation.
I0428 19:48:58.402150 26637 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:58.402158 26637 net.cpp:202] mnist does not need backward computation.
I0428 19:48:58.402163 26637 net.cpp:244] This network produces output accuracy
I0428 19:48:58.402168 26637 net.cpp:244] This network produces output loss
I0428 19:48:58.402191 26637 net.cpp:257] Network initialization done.
I0428 19:48:58.402273 26637 solver.cpp:56] Solver scaffolding done.
I0428 19:48:58.402930 26637 caffe.cpp:248] Starting Optimization
I0428 19:48:58.402941 26637 solver.cpp:273] Solving LeNet
I0428 19:48:58.402946 26637 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:58.404307 26637 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:58.411569 26637 blocking_queue.cpp:49] Waiting for data
I0428 19:48:58.478905 26644 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:58.479496 26637 solver.cpp:398]     Test net output #0: accuracy = 0.1023
I0428 19:48:58.479522 26637 solver.cpp:398]     Test net output #1: loss = 2.2803 (* 1 = 2.2803 loss)
I0428 19:48:58.481729 26637 solver.cpp:219] Iteration 0 (0 iter/s, 0.0787466s/100 iters), loss = 2.27642
I0428 19:48:58.481761 26637 solver.cpp:238]     Train net output #0: loss = 2.27642 (* 1 = 2.27642 loss)
I0428 19:48:58.481776 26637 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:58.557215 26637 solver.cpp:219] Iteration 100 (1325.52 iter/s, 0.0754422s/100 iters), loss = 1.76631
I0428 19:48:58.557241 26637 solver.cpp:238]     Train net output #0: loss = 1.76631 (* 1 = 1.76631 loss)
I0428 19:48:58.557247 26637 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:58.626195 26637 solver.cpp:219] Iteration 200 (1450.41 iter/s, 0.068946s/100 iters), loss = 1.16846
I0428 19:48:58.626233 26637 solver.cpp:238]     Train net output #0: loss = 1.16846 (* 1 = 1.16846 loss)
I0428 19:48:58.626238 26637 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:58.696292 26637 solver.cpp:219] Iteration 300 (1427.22 iter/s, 0.0700662s/100 iters), loss = 0.962974
I0428 19:48:58.696331 26637 solver.cpp:238]     Train net output #0: loss = 0.962974 (* 1 = 0.962974 loss)
I0428 19:48:58.696336 26637 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:58.766146 26637 solver.cpp:219] Iteration 400 (1432.2 iter/s, 0.0698225s/100 iters), loss = 0.950824
I0428 19:48:58.766185 26637 solver.cpp:238]     Train net output #0: loss = 0.950824 (* 1 = 0.950824 loss)
I0428 19:48:58.766189 26637 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:58.835474 26637 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:58.888381 26644 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:58.888886 26637 solver.cpp:398]     Test net output #0: accuracy = 0.8405
I0428 19:48:58.888923 26637 solver.cpp:398]     Test net output #1: loss = 0.60702 (* 1 = 0.60702 loss)
I0428 19:48:58.889744 26637 solver.cpp:219] Iteration 500 (809.31 iter/s, 0.123562s/100 iters), loss = 0.643397
I0428 19:48:58.889768 26637 solver.cpp:238]     Train net output #0: loss = 0.643397 (* 1 = 0.643397 loss)
I0428 19:48:58.889817 26637 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:58.965675 26637 solver.cpp:219] Iteration 600 (1317.54 iter/s, 0.0758989s/100 iters), loss = 0.456402
I0428 19:48:58.965715 26637 solver.cpp:238]     Train net output #0: loss = 0.456402 (* 1 = 0.456402 loss)
I0428 19:48:58.965721 26637 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:59.037480 26637 solver.cpp:219] Iteration 700 (1393.44 iter/s, 0.071765s/100 iters), loss = 0.598475
I0428 19:48:59.037534 26637 solver.cpp:238]     Train net output #0: loss = 0.598475 (* 1 = 0.598475 loss)
I0428 19:48:59.037547 26637 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:59.129143 26637 solver.cpp:219] Iteration 800 (1091.68 iter/s, 0.0916021s/100 iters), loss = 0.473749
I0428 19:48:59.129176 26637 solver.cpp:238]     Train net output #0: loss = 0.473749 (* 1 = 0.473749 loss)
I0428 19:48:59.129184 26637 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:59.203889 26637 solver.cpp:219] Iteration 900 (1338.6 iter/s, 0.0747049s/100 iters), loss = 0.478444
I0428 19:48:59.203918 26637 solver.cpp:238]     Train net output #0: loss = 0.478444 (* 1 = 0.478444 loss)
I0428 19:48:59.203925 26637 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:59.228638 26643 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:59.277349 26637 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:59.278055 26637 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:59.278764 26637 solver.cpp:311] Iteration 1000, loss = 0.457391
I0428 19:48:59.278798 26637 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:59.338742 26644 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:59.340459 26637 solver.cpp:398]     Test net output #0: accuracy = 0.9245
I0428 19:48:59.340489 26637 solver.cpp:398]     Test net output #1: loss = 0.400554 (* 1 = 0.400554 loss)
I0428 19:48:59.340497 26637 solver.cpp:316] Optimization Done.
I0428 19:48:59.340502 26637 caffe.cpp:259] Optimization Done.
