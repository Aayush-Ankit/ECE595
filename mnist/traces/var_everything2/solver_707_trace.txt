I0428 19:54:14.983840 27961 caffe.cpp:218] Using GPUs 0
I0428 19:54:15.020587 27961 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:15.534966 27961 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test707.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:15.535110 27961 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test707.prototxt
I0428 19:54:15.535486 27961 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:15.535506 27961 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:15.535596 27961 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:15.535673 27961 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:15.535773 27961 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:15.535797 27961 net.cpp:86] Creating Layer mnist
I0428 19:54:15.535806 27961 net.cpp:382] mnist -> data
I0428 19:54:15.535828 27961 net.cpp:382] mnist -> label
I0428 19:54:15.536924 27961 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:15.539386 27961 net.cpp:124] Setting up mnist
I0428 19:54:15.539402 27961 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:15.539409 27961 net.cpp:131] Top shape: 64 (64)
I0428 19:54:15.539412 27961 net.cpp:139] Memory required for data: 200960
I0428 19:54:15.539419 27961 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:15.539463 27961 net.cpp:86] Creating Layer conv0
I0428 19:54:15.539470 27961 net.cpp:408] conv0 <- data
I0428 19:54:15.539484 27961 net.cpp:382] conv0 -> conv0
I0428 19:54:15.794957 27961 net.cpp:124] Setting up conv0
I0428 19:54:15.794983 27961 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:15.794987 27961 net.cpp:139] Memory required for data: 938240
I0428 19:54:15.795020 27961 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:15.795032 27961 net.cpp:86] Creating Layer pool0
I0428 19:54:15.795037 27961 net.cpp:408] pool0 <- conv0
I0428 19:54:15.795042 27961 net.cpp:382] pool0 -> pool0
I0428 19:54:15.795085 27961 net.cpp:124] Setting up pool0
I0428 19:54:15.795094 27961 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:15.795096 27961 net.cpp:139] Memory required for data: 1122560
I0428 19:54:15.795099 27961 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:15.795109 27961 net.cpp:86] Creating Layer conv1
I0428 19:54:15.795111 27961 net.cpp:408] conv1 <- pool0
I0428 19:54:15.795116 27961 net.cpp:382] conv1 -> conv1
I0428 19:54:15.797794 27961 net.cpp:124] Setting up conv1
I0428 19:54:15.797824 27961 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:15.797828 27961 net.cpp:139] Memory required for data: 2760960
I0428 19:54:15.797837 27961 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:15.797843 27961 net.cpp:86] Creating Layer pool1
I0428 19:54:15.797847 27961 net.cpp:408] pool1 <- conv1
I0428 19:54:15.797852 27961 net.cpp:382] pool1 -> pool1
I0428 19:54:15.797904 27961 net.cpp:124] Setting up pool1
I0428 19:54:15.797909 27961 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:15.797912 27961 net.cpp:139] Memory required for data: 3170560
I0428 19:54:15.797915 27961 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:15.797924 27961 net.cpp:86] Creating Layer ip1
I0428 19:54:15.797926 27961 net.cpp:408] ip1 <- pool1
I0428 19:54:15.797930 27961 net.cpp:382] ip1 -> ip1
I0428 19:54:15.798141 27961 net.cpp:124] Setting up ip1
I0428 19:54:15.798148 27961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:15.798151 27961 net.cpp:139] Memory required for data: 3173120
I0428 19:54:15.798158 27961 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:15.798163 27961 net.cpp:86] Creating Layer relu1
I0428 19:54:15.798166 27961 net.cpp:408] relu1 <- ip1
I0428 19:54:15.798171 27961 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:15.798338 27961 net.cpp:124] Setting up relu1
I0428 19:54:15.798346 27961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:15.798351 27961 net.cpp:139] Memory required for data: 3175680
I0428 19:54:15.798353 27961 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:15.798359 27961 net.cpp:86] Creating Layer ip2
I0428 19:54:15.798362 27961 net.cpp:408] ip2 <- ip1
I0428 19:54:15.798367 27961 net.cpp:382] ip2 -> ip2
I0428 19:54:15.798454 27961 net.cpp:124] Setting up ip2
I0428 19:54:15.798461 27961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:15.798465 27961 net.cpp:139] Memory required for data: 3178240
I0428 19:54:15.798470 27961 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:15.798475 27961 net.cpp:86] Creating Layer relu2
I0428 19:54:15.798478 27961 net.cpp:408] relu2 <- ip2
I0428 19:54:15.798481 27961 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:15.799247 27961 net.cpp:124] Setting up relu2
I0428 19:54:15.799260 27961 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:15.799279 27961 net.cpp:139] Memory required for data: 3180800
I0428 19:54:15.799283 27961 layer_factory.hpp:77] Creating layer loss
I0428 19:54:15.799289 27961 net.cpp:86] Creating Layer loss
I0428 19:54:15.799293 27961 net.cpp:408] loss <- ip2
I0428 19:54:15.799299 27961 net.cpp:408] loss <- label
I0428 19:54:15.799304 27961 net.cpp:382] loss -> loss
I0428 19:54:15.799321 27961 layer_factory.hpp:77] Creating layer loss
I0428 19:54:15.799588 27961 net.cpp:124] Setting up loss
I0428 19:54:15.799598 27961 net.cpp:131] Top shape: (1)
I0428 19:54:15.799602 27961 net.cpp:134]     with loss weight 1
I0428 19:54:15.799615 27961 net.cpp:139] Memory required for data: 3180804
I0428 19:54:15.799618 27961 net.cpp:200] loss needs backward computation.
I0428 19:54:15.799623 27961 net.cpp:200] relu2 needs backward computation.
I0428 19:54:15.799625 27961 net.cpp:200] ip2 needs backward computation.
I0428 19:54:15.799628 27961 net.cpp:200] relu1 needs backward computation.
I0428 19:54:15.799630 27961 net.cpp:200] ip1 needs backward computation.
I0428 19:54:15.799643 27961 net.cpp:200] pool1 needs backward computation.
I0428 19:54:15.799646 27961 net.cpp:200] conv1 needs backward computation.
I0428 19:54:15.799650 27961 net.cpp:200] pool0 needs backward computation.
I0428 19:54:15.799654 27961 net.cpp:200] conv0 needs backward computation.
I0428 19:54:15.799656 27961 net.cpp:202] mnist does not need backward computation.
I0428 19:54:15.799659 27961 net.cpp:244] This network produces output loss
I0428 19:54:15.799667 27961 net.cpp:257] Network initialization done.
I0428 19:54:15.799976 27961 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test707.prototxt
I0428 19:54:15.800001 27961 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:15.800086 27961 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:15.800154 27961 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:15.800199 27961 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:15.800211 27961 net.cpp:86] Creating Layer mnist
I0428 19:54:15.800216 27961 net.cpp:382] mnist -> data
I0428 19:54:15.800223 27961 net.cpp:382] mnist -> label
I0428 19:54:15.800321 27961 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:15.802323 27961 net.cpp:124] Setting up mnist
I0428 19:54:15.802367 27961 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:15.802372 27961 net.cpp:131] Top shape: 100 (100)
I0428 19:54:15.802376 27961 net.cpp:139] Memory required for data: 314000
I0428 19:54:15.802379 27961 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:15.802386 27961 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:15.802389 27961 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:15.802394 27961 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:15.802402 27961 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:15.802454 27961 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:15.802485 27961 net.cpp:131] Top shape: 100 (100)
I0428 19:54:15.802489 27961 net.cpp:131] Top shape: 100 (100)
I0428 19:54:15.802491 27961 net.cpp:139] Memory required for data: 314800
I0428 19:54:15.802495 27961 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:15.802505 27961 net.cpp:86] Creating Layer conv0
I0428 19:54:15.802508 27961 net.cpp:408] conv0 <- data
I0428 19:54:15.802513 27961 net.cpp:382] conv0 -> conv0
I0428 19:54:15.804249 27961 net.cpp:124] Setting up conv0
I0428 19:54:15.804278 27961 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:15.804283 27961 net.cpp:139] Memory required for data: 1466800
I0428 19:54:15.804311 27961 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:15.804322 27961 net.cpp:86] Creating Layer pool0
I0428 19:54:15.804327 27961 net.cpp:408] pool0 <- conv0
I0428 19:54:15.804335 27961 net.cpp:382] pool0 -> pool0
I0428 19:54:15.804397 27961 net.cpp:124] Setting up pool0
I0428 19:54:15.804405 27961 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:15.804409 27961 net.cpp:139] Memory required for data: 1754800
I0428 19:54:15.804411 27961 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:15.804422 27961 net.cpp:86] Creating Layer conv1
I0428 19:54:15.804425 27961 net.cpp:408] conv1 <- pool0
I0428 19:54:15.804432 27961 net.cpp:382] conv1 -> conv1
I0428 19:54:15.806254 27961 net.cpp:124] Setting up conv1
I0428 19:54:15.806268 27961 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:15.806288 27961 net.cpp:139] Memory required for data: 4314800
I0428 19:54:15.806313 27961 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:15.806334 27961 net.cpp:86] Creating Layer pool1
I0428 19:54:15.806336 27961 net.cpp:408] pool1 <- conv1
I0428 19:54:15.806344 27961 net.cpp:382] pool1 -> pool1
I0428 19:54:15.806380 27961 net.cpp:124] Setting up pool1
I0428 19:54:15.806386 27961 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:15.806391 27961 net.cpp:139] Memory required for data: 4954800
I0428 19:54:15.806393 27961 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:15.806401 27961 net.cpp:86] Creating Layer ip1
I0428 19:54:15.806403 27961 net.cpp:408] ip1 <- pool1
I0428 19:54:15.806409 27961 net.cpp:382] ip1 -> ip1
I0428 19:54:15.806610 27961 net.cpp:124] Setting up ip1
I0428 19:54:15.806619 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.806622 27961 net.cpp:139] Memory required for data: 4958800
I0428 19:54:15.806630 27961 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:15.806637 27961 net.cpp:86] Creating Layer relu1
I0428 19:54:15.806639 27961 net.cpp:408] relu1 <- ip1
I0428 19:54:15.806644 27961 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:15.806835 27961 net.cpp:124] Setting up relu1
I0428 19:54:15.806845 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.806849 27961 net.cpp:139] Memory required for data: 4962800
I0428 19:54:15.806851 27961 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:15.806857 27961 net.cpp:86] Creating Layer ip2
I0428 19:54:15.806860 27961 net.cpp:408] ip2 <- ip1
I0428 19:54:15.806866 27961 net.cpp:382] ip2 -> ip2
I0428 19:54:15.806962 27961 net.cpp:124] Setting up ip2
I0428 19:54:15.806968 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.806972 27961 net.cpp:139] Memory required for data: 4966800
I0428 19:54:15.806984 27961 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:15.806988 27961 net.cpp:86] Creating Layer relu2
I0428 19:54:15.806991 27961 net.cpp:408] relu2 <- ip2
I0428 19:54:15.806996 27961 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:15.807307 27961 net.cpp:124] Setting up relu2
I0428 19:54:15.807317 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.807335 27961 net.cpp:139] Memory required for data: 4970800
I0428 19:54:15.807339 27961 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:54:15.807344 27961 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:54:15.807348 27961 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:54:15.807358 27961 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:54:15.807386 27961 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:54:15.807440 27961 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:54:15.807446 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.807453 27961 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:15.807456 27961 net.cpp:139] Memory required for data: 4978800
I0428 19:54:15.807459 27961 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:15.807464 27961 net.cpp:86] Creating Layer accuracy
I0428 19:54:15.807468 27961 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:54:15.807472 27961 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:15.807477 27961 net.cpp:382] accuracy -> accuracy
I0428 19:54:15.807483 27961 net.cpp:124] Setting up accuracy
I0428 19:54:15.807487 27961 net.cpp:131] Top shape: (1)
I0428 19:54:15.807490 27961 net.cpp:139] Memory required for data: 4978804
I0428 19:54:15.807493 27961 layer_factory.hpp:77] Creating layer loss
I0428 19:54:15.807499 27961 net.cpp:86] Creating Layer loss
I0428 19:54:15.807507 27961 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:54:15.807512 27961 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:15.807515 27961 net.cpp:382] loss -> loss
I0428 19:54:15.807521 27961 layer_factory.hpp:77] Creating layer loss
I0428 19:54:15.807771 27961 net.cpp:124] Setting up loss
I0428 19:54:15.807782 27961 net.cpp:131] Top shape: (1)
I0428 19:54:15.807785 27961 net.cpp:134]     with loss weight 1
I0428 19:54:15.807791 27961 net.cpp:139] Memory required for data: 4978808
I0428 19:54:15.807795 27961 net.cpp:200] loss needs backward computation.
I0428 19:54:15.807799 27961 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:15.807802 27961 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:54:15.807827 27961 net.cpp:200] relu2 needs backward computation.
I0428 19:54:15.807831 27961 net.cpp:200] ip2 needs backward computation.
I0428 19:54:15.807833 27961 net.cpp:200] relu1 needs backward computation.
I0428 19:54:15.807837 27961 net.cpp:200] ip1 needs backward computation.
I0428 19:54:15.807840 27961 net.cpp:200] pool1 needs backward computation.
I0428 19:54:15.807844 27961 net.cpp:200] conv1 needs backward computation.
I0428 19:54:15.807847 27961 net.cpp:200] pool0 needs backward computation.
I0428 19:54:15.807850 27961 net.cpp:200] conv0 needs backward computation.
I0428 19:54:15.807854 27961 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:15.807858 27961 net.cpp:202] mnist does not need backward computation.
I0428 19:54:15.807862 27961 net.cpp:244] This network produces output accuracy
I0428 19:54:15.807865 27961 net.cpp:244] This network produces output loss
I0428 19:54:15.807876 27961 net.cpp:257] Network initialization done.
I0428 19:54:15.807929 27961 solver.cpp:56] Solver scaffolding done.
I0428 19:54:15.808212 27961 caffe.cpp:248] Starting Optimization
I0428 19:54:15.808233 27961 solver.cpp:273] Solving LeNet
I0428 19:54:15.808235 27961 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:15.808425 27961 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:15.814079 27961 blocking_queue.cpp:49] Waiting for data
I0428 19:54:15.884459 27968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:15.885074 27961 solver.cpp:398]     Test net output #0: accuracy = 0.057
I0428 19:54:15.885109 27961 solver.cpp:398]     Test net output #1: loss = 2.32267 (* 1 = 2.32267 loss)
I0428 19:54:15.888772 27961 solver.cpp:219] Iteration 0 (-3.10166e-31 iter/s, 0.0804905s/100 iters), loss = 2.34958
I0428 19:54:15.888815 27961 solver.cpp:238]     Train net output #0: loss = 2.34958 (* 1 = 2.34958 loss)
I0428 19:54:15.888844 27961 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:16.036733 27961 solver.cpp:219] Iteration 100 (676.032 iter/s, 0.147922s/100 iters), loss = 0.877977
I0428 19:54:16.036761 27961 solver.cpp:238]     Train net output #0: loss = 0.877977 (* 1 = 0.877977 loss)
I0428 19:54:16.036782 27961 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:16.171792 27961 solver.cpp:219] Iteration 200 (740.65 iter/s, 0.135016s/100 iters), loss = 0.553943
I0428 19:54:16.171815 27961 solver.cpp:238]     Train net output #0: loss = 0.553943 (* 1 = 0.553943 loss)
I0428 19:54:16.171838 27961 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:16.327744 27961 solver.cpp:219] Iteration 300 (641.387 iter/s, 0.155912s/100 iters), loss = 0.242066
I0428 19:54:16.327786 27961 solver.cpp:238]     Train net output #0: loss = 0.242066 (* 1 = 0.242066 loss)
I0428 19:54:16.327797 27961 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:16.478329 27961 solver.cpp:219] Iteration 400 (664.315 iter/s, 0.150531s/100 iters), loss = 0.157516
I0428 19:54:16.478360 27961 solver.cpp:238]     Train net output #0: loss = 0.157516 (* 1 = 0.157516 loss)
I0428 19:54:16.478368 27961 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:16.623967 27961 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:16.699192 27968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:16.699790 27961 solver.cpp:398]     Test net output #0: accuracy = 0.9464
I0428 19:54:16.699816 27961 solver.cpp:398]     Test net output #1: loss = 0.188662 (* 1 = 0.188662 loss)
I0428 19:54:16.701288 27961 solver.cpp:219] Iteration 500 (448.609 iter/s, 0.222911s/100 iters), loss = 0.196018
I0428 19:54:16.701333 27961 solver.cpp:238]     Train net output #0: loss = 0.196018 (* 1 = 0.196018 loss)
I0428 19:54:16.701342 27961 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:16.847266 27961 solver.cpp:219] Iteration 600 (685.29 iter/s, 0.145924s/100 iters), loss = 0.106905
I0428 19:54:16.847301 27961 solver.cpp:238]     Train net output #0: loss = 0.106905 (* 1 = 0.106905 loss)
I0428 19:54:16.847309 27961 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:16.998714 27961 solver.cpp:219] Iteration 700 (660.514 iter/s, 0.151397s/100 iters), loss = 0.170917
I0428 19:54:16.998752 27961 solver.cpp:238]     Train net output #0: loss = 0.170917 (* 1 = 0.170917 loss)
I0428 19:54:16.998761 27961 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:17.150496 27961 solver.cpp:219] Iteration 800 (659.069 iter/s, 0.151729s/100 iters), loss = 0.30448
I0428 19:54:17.150530 27961 solver.cpp:238]     Train net output #0: loss = 0.30448 (* 1 = 0.30448 loss)
I0428 19:54:17.150538 27961 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:17.294663 27961 solver.cpp:219] Iteration 900 (693.862 iter/s, 0.144121s/100 iters), loss = 0.0826621
I0428 19:54:17.294698 27961 solver.cpp:238]     Train net output #0: loss = 0.0826621 (* 1 = 0.0826621 loss)
I0428 19:54:17.294706 27961 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:17.342514 27967 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:17.442337 27961 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:17.444083 27961 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:17.445112 27961 solver.cpp:311] Iteration 1000, loss = 0.199229
I0428 19:54:17.445149 27961 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:17.551904 27968 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:17.552661 27961 solver.cpp:398]     Test net output #0: accuracy = 0.9691
I0428 19:54:17.552693 27961 solver.cpp:398]     Test net output #1: loss = 0.100431 (* 1 = 0.100431 loss)
I0428 19:54:17.552702 27961 solver.cpp:316] Optimization Done.
I0428 19:54:17.552708 27961 caffe.cpp:259] Optimization Done.
