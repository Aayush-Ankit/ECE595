I0428 19:42:20.816016 25046 caffe.cpp:218] Using GPUs 0
I0428 19:42:20.856739 25046 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:21.376899 25046 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test391.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:21.377079 25046 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test391.prototxt
I0428 19:42:21.377429 25046 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:21.377450 25046 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:21.377542 25046 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:42:21.377645 25046 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:21.377780 25046 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:21.377813 25046 net.cpp:86] Creating Layer mnist
I0428 19:42:21.377826 25046 net.cpp:382] mnist -> data
I0428 19:42:21.377857 25046 net.cpp:382] mnist -> label
I0428 19:42:21.379065 25046 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:21.381542 25046 net.cpp:124] Setting up mnist
I0428 19:42:21.381562 25046 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:21.381572 25046 net.cpp:131] Top shape: 64 (64)
I0428 19:42:21.381578 25046 net.cpp:139] Memory required for data: 200960
I0428 19:42:21.381589 25046 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:21.381614 25046 net.cpp:86] Creating Layer conv0
I0428 19:42:21.381624 25046 net.cpp:408] conv0 <- data
I0428 19:42:21.381644 25046 net.cpp:382] conv0 -> conv0
I0428 19:42:21.649078 25046 net.cpp:124] Setting up conv0
I0428 19:42:21.649106 25046 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:21.649111 25046 net.cpp:139] Memory required for data: 495872
I0428 19:42:21.649174 25046 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:21.649190 25046 net.cpp:86] Creating Layer pool0
I0428 19:42:21.649201 25046 net.cpp:408] pool0 <- conv0
I0428 19:42:21.649210 25046 net.cpp:382] pool0 -> pool0
I0428 19:42:21.649266 25046 net.cpp:124] Setting up pool0
I0428 19:42:21.649273 25046 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:21.649294 25046 net.cpp:139] Memory required for data: 569600
I0428 19:42:21.649300 25046 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:21.649315 25046 net.cpp:86] Creating Layer conv1
I0428 19:42:21.649322 25046 net.cpp:408] conv1 <- pool0
I0428 19:42:21.649329 25046 net.cpp:382] conv1 -> conv1
I0428 19:42:21.652209 25046 net.cpp:124] Setting up conv1
I0428 19:42:21.652225 25046 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:42:21.652230 25046 net.cpp:139] Memory required for data: 979200
I0428 19:42:21.652257 25046 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:21.652268 25046 net.cpp:86] Creating Layer pool1
I0428 19:42:21.652289 25046 net.cpp:408] pool1 <- conv1
I0428 19:42:21.652299 25046 net.cpp:382] pool1 -> pool1
I0428 19:42:21.652359 25046 net.cpp:124] Setting up pool1
I0428 19:42:21.652367 25046 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:42:21.652371 25046 net.cpp:139] Memory required for data: 1081600
I0428 19:42:21.652376 25046 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:21.652390 25046 net.cpp:86] Creating Layer ip1
I0428 19:42:21.652398 25046 net.cpp:408] ip1 <- pool1
I0428 19:42:21.652408 25046 net.cpp:382] ip1 -> ip1
I0428 19:42:21.652551 25046 net.cpp:124] Setting up ip1
I0428 19:42:21.652561 25046 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:21.652566 25046 net.cpp:139] Memory required for data: 1084160
I0428 19:42:21.652577 25046 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:21.652586 25046 net.cpp:86] Creating Layer relu1
I0428 19:42:21.652592 25046 net.cpp:408] relu1 <- ip1
I0428 19:42:21.652600 25046 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:21.652793 25046 net.cpp:124] Setting up relu1
I0428 19:42:21.652803 25046 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:21.652808 25046 net.cpp:139] Memory required for data: 1086720
I0428 19:42:21.652835 25046 layer_factory.hpp:77] Creating layer loss
I0428 19:42:21.652845 25046 net.cpp:86] Creating Layer loss
I0428 19:42:21.652851 25046 net.cpp:408] loss <- ip1
I0428 19:42:21.652858 25046 net.cpp:408] loss <- label
I0428 19:42:21.652882 25046 net.cpp:382] loss -> loss
I0428 19:42:21.652905 25046 layer_factory.hpp:77] Creating layer loss
I0428 19:42:21.653815 25046 net.cpp:124] Setting up loss
I0428 19:42:21.653827 25046 net.cpp:131] Top shape: (1)
I0428 19:42:21.653832 25046 net.cpp:134]     with loss weight 1
I0428 19:42:21.653867 25046 net.cpp:139] Memory required for data: 1086724
I0428 19:42:21.653872 25046 net.cpp:200] loss needs backward computation.
I0428 19:42:21.653878 25046 net.cpp:200] relu1 needs backward computation.
I0428 19:42:21.653883 25046 net.cpp:200] ip1 needs backward computation.
I0428 19:42:21.653887 25046 net.cpp:200] pool1 needs backward computation.
I0428 19:42:21.653892 25046 net.cpp:200] conv1 needs backward computation.
I0428 19:42:21.653898 25046 net.cpp:200] pool0 needs backward computation.
I0428 19:42:21.653903 25046 net.cpp:200] conv0 needs backward computation.
I0428 19:42:21.653908 25046 net.cpp:202] mnist does not need backward computation.
I0428 19:42:21.653913 25046 net.cpp:244] This network produces output loss
I0428 19:42:21.653923 25046 net.cpp:257] Network initialization done.
I0428 19:42:21.654201 25046 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test391.prototxt
I0428 19:42:21.654232 25046 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:21.654310 25046 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:42:21.654417 25046 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:21.654492 25046 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:21.654510 25046 net.cpp:86] Creating Layer mnist
I0428 19:42:21.654518 25046 net.cpp:382] mnist -> data
I0428 19:42:21.654528 25046 net.cpp:382] mnist -> label
I0428 19:42:21.654683 25046 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:21.656788 25046 net.cpp:124] Setting up mnist
I0428 19:42:21.656839 25046 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:21.656867 25046 net.cpp:131] Top shape: 100 (100)
I0428 19:42:21.656872 25046 net.cpp:139] Memory required for data: 314000
I0428 19:42:21.656879 25046 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:21.656890 25046 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:21.656896 25046 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:21.656904 25046 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:21.656915 25046 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:21.656991 25046 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:21.657001 25046 net.cpp:131] Top shape: 100 (100)
I0428 19:42:21.657007 25046 net.cpp:131] Top shape: 100 (100)
I0428 19:42:21.657013 25046 net.cpp:139] Memory required for data: 314800
I0428 19:42:21.657018 25046 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:21.657034 25046 net.cpp:86] Creating Layer conv0
I0428 19:42:21.657042 25046 net.cpp:408] conv0 <- data
I0428 19:42:21.657068 25046 net.cpp:382] conv0 -> conv0
I0428 19:42:21.657975 25046 net.cpp:124] Setting up conv0
I0428 19:42:21.657991 25046 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:21.657996 25046 net.cpp:139] Memory required for data: 775600
I0428 19:42:21.658025 25046 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:21.658035 25046 net.cpp:86] Creating Layer pool0
I0428 19:42:21.658051 25046 net.cpp:408] pool0 <- conv0
I0428 19:42:21.658058 25046 net.cpp:382] pool0 -> pool0
I0428 19:42:21.658098 25046 net.cpp:124] Setting up pool0
I0428 19:42:21.658107 25046 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:21.658110 25046 net.cpp:139] Memory required for data: 890800
I0428 19:42:21.658114 25046 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:21.658129 25046 net.cpp:86] Creating Layer conv1
I0428 19:42:21.658135 25046 net.cpp:408] conv1 <- pool0
I0428 19:42:21.658143 25046 net.cpp:382] conv1 -> conv1
I0428 19:42:21.659725 25046 net.cpp:124] Setting up conv1
I0428 19:42:21.659739 25046 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:42:21.659745 25046 net.cpp:139] Memory required for data: 1530800
I0428 19:42:21.659759 25046 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:21.659768 25046 net.cpp:86] Creating Layer pool1
I0428 19:42:21.659785 25046 net.cpp:408] pool1 <- conv1
I0428 19:42:21.659796 25046 net.cpp:382] pool1 -> pool1
I0428 19:42:21.659858 25046 net.cpp:124] Setting up pool1
I0428 19:42:21.659869 25046 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:42:21.659874 25046 net.cpp:139] Memory required for data: 1690800
I0428 19:42:21.659886 25046 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:21.659911 25046 net.cpp:86] Creating Layer ip1
I0428 19:42:21.659917 25046 net.cpp:408] ip1 <- pool1
I0428 19:42:21.659929 25046 net.cpp:382] ip1 -> ip1
I0428 19:42:21.660097 25046 net.cpp:124] Setting up ip1
I0428 19:42:21.660109 25046 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:21.660114 25046 net.cpp:139] Memory required for data: 1694800
I0428 19:42:21.660130 25046 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:21.660140 25046 net.cpp:86] Creating Layer relu1
I0428 19:42:21.660146 25046 net.cpp:408] relu1 <- ip1
I0428 19:42:21.660156 25046 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:21.661031 25046 net.cpp:124] Setting up relu1
I0428 19:42:21.661049 25046 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:21.661063 25046 net.cpp:139] Memory required for data: 1698800
I0428 19:42:21.661078 25046 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:42:21.661089 25046 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:42:21.661097 25046 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:42:21.661114 25046 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:42:21.661128 25046 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:42:21.661175 25046 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:42:21.661185 25046 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:21.661192 25046 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:21.661197 25046 net.cpp:139] Memory required for data: 1706800
I0428 19:42:21.661203 25046 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:21.661218 25046 net.cpp:86] Creating Layer accuracy
I0428 19:42:21.661226 25046 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:42:21.661247 25046 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:21.661269 25046 net.cpp:382] accuracy -> accuracy
I0428 19:42:21.661296 25046 net.cpp:124] Setting up accuracy
I0428 19:42:21.661319 25046 net.cpp:131] Top shape: (1)
I0428 19:42:21.661324 25046 net.cpp:139] Memory required for data: 1706804
I0428 19:42:21.661329 25046 layer_factory.hpp:77] Creating layer loss
I0428 19:42:21.661335 25046 net.cpp:86] Creating Layer loss
I0428 19:42:21.661340 25046 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:42:21.661346 25046 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:21.661352 25046 net.cpp:382] loss -> loss
I0428 19:42:21.661361 25046 layer_factory.hpp:77] Creating layer loss
I0428 19:42:21.661623 25046 net.cpp:124] Setting up loss
I0428 19:42:21.661633 25046 net.cpp:131] Top shape: (1)
I0428 19:42:21.661639 25046 net.cpp:134]     with loss weight 1
I0428 19:42:21.661648 25046 net.cpp:139] Memory required for data: 1706808
I0428 19:42:21.661654 25046 net.cpp:200] loss needs backward computation.
I0428 19:42:21.661660 25046 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:21.661666 25046 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:42:21.661671 25046 net.cpp:200] relu1 needs backward computation.
I0428 19:42:21.661684 25046 net.cpp:200] ip1 needs backward computation.
I0428 19:42:21.661689 25046 net.cpp:200] pool1 needs backward computation.
I0428 19:42:21.661695 25046 net.cpp:200] conv1 needs backward computation.
I0428 19:42:21.661701 25046 net.cpp:200] pool0 needs backward computation.
I0428 19:42:21.661706 25046 net.cpp:200] conv0 needs backward computation.
I0428 19:42:21.661711 25046 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:21.661717 25046 net.cpp:202] mnist does not need backward computation.
I0428 19:42:21.661722 25046 net.cpp:244] This network produces output accuracy
I0428 19:42:21.661727 25046 net.cpp:244] This network produces output loss
I0428 19:42:21.661753 25046 net.cpp:257] Network initialization done.
I0428 19:42:21.661792 25046 solver.cpp:56] Solver scaffolding done.
I0428 19:42:21.662015 25046 caffe.cpp:248] Starting Optimization
I0428 19:42:21.662037 25046 solver.cpp:273] Solving LeNet
I0428 19:42:21.662042 25046 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:21.662194 25046 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:21.664723 25046 blocking_queue.cpp:49] Waiting for data
I0428 19:42:21.770998 25053 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:21.771522 25046 solver.cpp:398]     Test net output #0: accuracy = 0.1667
I0428 19:42:21.771562 25046 solver.cpp:398]     Test net output #1: loss = 2.26148 (* 1 = 2.26148 loss)
I0428 19:42:21.772928 25046 solver.cpp:219] Iteration 0 (-9.74226e-31 iter/s, 0.11085s/100 iters), loss = 2.22909
I0428 19:42:21.773016 25046 solver.cpp:238]     Train net output #0: loss = 2.22909 (* 1 = 2.22909 loss)
I0428 19:42:21.773043 25046 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:21.851634 25046 solver.cpp:219] Iteration 100 (1272.08 iter/s, 0.0786111s/100 iters), loss = 0.403791
I0428 19:42:21.851675 25046 solver.cpp:238]     Train net output #0: loss = 0.403791 (* 1 = 0.403791 loss)
I0428 19:42:21.851688 25046 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:21.921931 25046 solver.cpp:219] Iteration 200 (1423.44 iter/s, 0.0702525s/100 iters), loss = 0.198793
I0428 19:42:21.921962 25046 solver.cpp:238]     Train net output #0: loss = 0.198793 (* 1 = 0.198793 loss)
I0428 19:42:21.921973 25046 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:21.998189 25046 solver.cpp:219] Iteration 300 (1312.23 iter/s, 0.0762061s/100 iters), loss = 0.21203
I0428 19:42:21.998240 25046 solver.cpp:238]     Train net output #0: loss = 0.21203 (* 1 = 0.21203 loss)
I0428 19:42:21.998258 25046 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:22.077847 25046 solver.cpp:219] Iteration 400 (1256.24 iter/s, 0.0796027s/100 iters), loss = 0.147333
I0428 19:42:22.077883 25046 solver.cpp:238]     Train net output #0: loss = 0.147333 (* 1 = 0.147333 loss)
I0428 19:42:22.077898 25046 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:22.148393 25046 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:22.255435 25053 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:22.255851 25046 solver.cpp:398]     Test net output #0: accuracy = 0.9572
I0428 19:42:22.255878 25046 solver.cpp:398]     Test net output #1: loss = 0.139634 (* 1 = 0.139634 loss)
I0428 19:42:22.256568 25046 solver.cpp:219] Iteration 500 (559.683 iter/s, 0.178673s/100 iters), loss = 0.137529
I0428 19:42:22.256631 25046 solver.cpp:238]     Train net output #0: loss = 0.137529 (* 1 = 0.137529 loss)
I0428 19:42:22.256645 25046 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:22.338230 25046 solver.cpp:219] Iteration 600 (1225.59 iter/s, 0.0815934s/100 iters), loss = 0.19492
I0428 19:42:22.338265 25046 solver.cpp:238]     Train net output #0: loss = 0.19492 (* 1 = 0.19492 loss)
I0428 19:42:22.338281 25046 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:22.407665 25046 solver.cpp:219] Iteration 700 (1441.02 iter/s, 0.0693955s/100 iters), loss = 0.198918
I0428 19:42:22.407693 25046 solver.cpp:238]     Train net output #0: loss = 0.198918 (* 1 = 0.198918 loss)
I0428 19:42:22.407719 25046 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:22.474243 25046 solver.cpp:219] Iteration 800 (1502.82 iter/s, 0.0665416s/100 iters), loss = 0.210305
I0428 19:42:22.474272 25046 solver.cpp:238]     Train net output #0: loss = 0.210305 (* 1 = 0.210305 loss)
I0428 19:42:22.474280 25046 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:22.557283 25046 solver.cpp:219] Iteration 900 (1204.89 iter/s, 0.0829952s/100 iters), loss = 0.207399
I0428 19:42:22.557324 25046 solver.cpp:238]     Train net output #0: loss = 0.207399 (* 1 = 0.207399 loss)
I0428 19:42:22.557335 25046 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:22.586138 25052 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:22.641451 25046 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:22.642212 25046 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:22.642879 25046 solver.cpp:311] Iteration 1000, loss = 0.0987682
I0428 19:42:22.642911 25046 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:22.722218 25053 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:22.722712 25046 solver.cpp:398]     Test net output #0: accuracy = 0.9711
I0428 19:42:22.722741 25046 solver.cpp:398]     Test net output #1: loss = 0.0979513 (* 1 = 0.0979513 loss)
I0428 19:42:22.722749 25046 solver.cpp:316] Optimization Done.
I0428 19:42:22.722754 25046 caffe.cpp:259] Optimization Done.
