I0428 19:44:32.311013 25625 caffe.cpp:218] Using GPUs 0
I0428 19:44:32.352115 25625 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:32.869133 25625 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test450.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:32.869307 25625 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test450.prototxt
I0428 19:44:32.869735 25625 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:32.869761 25625 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:32.869884 25625 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:32.869998 25625 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:32.870131 25625 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:32.870163 25625 net.cpp:86] Creating Layer mnist
I0428 19:44:32.870174 25625 net.cpp:382] mnist -> data
I0428 19:44:32.870204 25625 net.cpp:382] mnist -> label
I0428 19:44:32.871472 25625 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:32.873944 25625 net.cpp:124] Setting up mnist
I0428 19:44:32.873965 25625 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:32.873975 25625 net.cpp:131] Top shape: 64 (64)
I0428 19:44:32.873981 25625 net.cpp:139] Memory required for data: 200960
I0428 19:44:32.873991 25625 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:32.874030 25625 net.cpp:86] Creating Layer conv0
I0428 19:44:32.874053 25625 net.cpp:408] conv0 <- data
I0428 19:44:32.874073 25625 net.cpp:382] conv0 -> conv0
I0428 19:44:33.161314 25625 net.cpp:124] Setting up conv0
I0428 19:44:33.161350 25625 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:33.161356 25625 net.cpp:139] Memory required for data: 495872
I0428 19:44:33.161381 25625 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:33.161402 25625 net.cpp:86] Creating Layer pool0
I0428 19:44:33.161420 25625 net.cpp:408] pool0 <- conv0
I0428 19:44:33.161432 25625 net.cpp:382] pool0 -> pool0
I0428 19:44:33.161500 25625 net.cpp:124] Setting up pool0
I0428 19:44:33.161512 25625 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:33.161519 25625 net.cpp:139] Memory required for data: 569600
I0428 19:44:33.161525 25625 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:33.161543 25625 net.cpp:86] Creating Layer conv1
I0428 19:44:33.161551 25625 net.cpp:408] conv1 <- pool0
I0428 19:44:33.161562 25625 net.cpp:382] conv1 -> conv1
I0428 19:44:33.164701 25625 net.cpp:124] Setting up conv1
I0428 19:44:33.164721 25625 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:33.164728 25625 net.cpp:139] Memory required for data: 1388800
I0428 19:44:33.164744 25625 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:33.164757 25625 net.cpp:86] Creating Layer pool1
I0428 19:44:33.164764 25625 net.cpp:408] pool1 <- conv1
I0428 19:44:33.164774 25625 net.cpp:382] pool1 -> pool1
I0428 19:44:33.164837 25625 net.cpp:124] Setting up pool1
I0428 19:44:33.164849 25625 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:33.164855 25625 net.cpp:139] Memory required for data: 1593600
I0428 19:44:33.164861 25625 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:33.164875 25625 net.cpp:86] Creating Layer ip1
I0428 19:44:33.164881 25625 net.cpp:408] ip1 <- pool1
I0428 19:44:33.164892 25625 net.cpp:382] ip1 -> ip1
I0428 19:44:33.165150 25625 net.cpp:124] Setting up ip1
I0428 19:44:33.165161 25625 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:33.165169 25625 net.cpp:139] Memory required for data: 1600000
I0428 19:44:33.165184 25625 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:33.165199 25625 net.cpp:86] Creating Layer relu1
I0428 19:44:33.165210 25625 net.cpp:408] relu1 <- ip1
I0428 19:44:33.165220 25625 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:33.165431 25625 net.cpp:124] Setting up relu1
I0428 19:44:33.165443 25625 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:33.165449 25625 net.cpp:139] Memory required for data: 1606400
I0428 19:44:33.165457 25625 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:33.165467 25625 net.cpp:86] Creating Layer ip2
I0428 19:44:33.165474 25625 net.cpp:408] ip2 <- ip1
I0428 19:44:33.165484 25625 net.cpp:382] ip2 -> ip2
I0428 19:44:33.165608 25625 net.cpp:124] Setting up ip2
I0428 19:44:33.165618 25625 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:33.165624 25625 net.cpp:139] Memory required for data: 1608960
I0428 19:44:33.165637 25625 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:33.165647 25625 net.cpp:86] Creating Layer relu2
I0428 19:44:33.165658 25625 net.cpp:408] relu2 <- ip2
I0428 19:44:33.165668 25625 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:33.166525 25625 net.cpp:124] Setting up relu2
I0428 19:44:33.166543 25625 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:33.166549 25625 net.cpp:139] Memory required for data: 1611520
I0428 19:44:33.166556 25625 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:33.166569 25625 net.cpp:86] Creating Layer ip3
I0428 19:44:33.166576 25625 net.cpp:408] ip3 <- ip2
I0428 19:44:33.166587 25625 net.cpp:382] ip3 -> ip3
I0428 19:44:33.166718 25625 net.cpp:124] Setting up ip3
I0428 19:44:33.166729 25625 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:33.166735 25625 net.cpp:139] Memory required for data: 1614080
I0428 19:44:33.166750 25625 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:33.166761 25625 net.cpp:86] Creating Layer relu3
I0428 19:44:33.166769 25625 net.cpp:408] relu3 <- ip3
I0428 19:44:33.166777 25625 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:33.166980 25625 net.cpp:124] Setting up relu3
I0428 19:44:33.166993 25625 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:33.166999 25625 net.cpp:139] Memory required for data: 1616640
I0428 19:44:33.167006 25625 layer_factory.hpp:77] Creating layer loss
I0428 19:44:33.167016 25625 net.cpp:86] Creating Layer loss
I0428 19:44:33.167023 25625 net.cpp:408] loss <- ip3
I0428 19:44:33.167032 25625 net.cpp:408] loss <- label
I0428 19:44:33.167042 25625 net.cpp:382] loss -> loss
I0428 19:44:33.167067 25625 layer_factory.hpp:77] Creating layer loss
I0428 19:44:33.167341 25625 net.cpp:124] Setting up loss
I0428 19:44:33.167354 25625 net.cpp:131] Top shape: (1)
I0428 19:44:33.167361 25625 net.cpp:134]     with loss weight 1
I0428 19:44:33.167384 25625 net.cpp:139] Memory required for data: 1616644
I0428 19:44:33.167392 25625 net.cpp:200] loss needs backward computation.
I0428 19:44:33.167398 25625 net.cpp:200] relu3 needs backward computation.
I0428 19:44:33.167407 25625 net.cpp:200] ip3 needs backward computation.
I0428 19:44:33.167412 25625 net.cpp:200] relu2 needs backward computation.
I0428 19:44:33.167418 25625 net.cpp:200] ip2 needs backward computation.
I0428 19:44:33.167424 25625 net.cpp:200] relu1 needs backward computation.
I0428 19:44:33.167430 25625 net.cpp:200] ip1 needs backward computation.
I0428 19:44:33.167436 25625 net.cpp:200] pool1 needs backward computation.
I0428 19:44:33.167443 25625 net.cpp:200] conv1 needs backward computation.
I0428 19:44:33.167449 25625 net.cpp:200] pool0 needs backward computation.
I0428 19:44:33.167456 25625 net.cpp:200] conv0 needs backward computation.
I0428 19:44:33.167464 25625 net.cpp:202] mnist does not need backward computation.
I0428 19:44:33.167469 25625 net.cpp:244] This network produces output loss
I0428 19:44:33.167486 25625 net.cpp:257] Network initialization done.
I0428 19:44:33.167878 25625 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test450.prototxt
I0428 19:44:33.167918 25625 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:33.168037 25625 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:33.168174 25625 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:33.168246 25625 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:33.168267 25625 net.cpp:86] Creating Layer mnist
I0428 19:44:33.168275 25625 net.cpp:382] mnist -> data
I0428 19:44:33.168290 25625 net.cpp:382] mnist -> label
I0428 19:44:33.168432 25625 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:33.170819 25625 net.cpp:124] Setting up mnist
I0428 19:44:33.170838 25625 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:33.170848 25625 net.cpp:131] Top shape: 100 (100)
I0428 19:44:33.170855 25625 net.cpp:139] Memory required for data: 314000
I0428 19:44:33.170861 25625 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:33.170873 25625 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:33.170881 25625 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:33.170889 25625 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:33.170902 25625 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:33.171036 25625 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:33.171046 25625 net.cpp:131] Top shape: 100 (100)
I0428 19:44:33.171054 25625 net.cpp:131] Top shape: 100 (100)
I0428 19:44:33.171061 25625 net.cpp:139] Memory required for data: 314800
I0428 19:44:33.171067 25625 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:33.171083 25625 net.cpp:86] Creating Layer conv0
I0428 19:44:33.171092 25625 net.cpp:408] conv0 <- data
I0428 19:44:33.171103 25625 net.cpp:382] conv0 -> conv0
I0428 19:44:33.172747 25625 net.cpp:124] Setting up conv0
I0428 19:44:33.172767 25625 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:33.172775 25625 net.cpp:139] Memory required for data: 775600
I0428 19:44:33.172791 25625 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:33.172803 25625 net.cpp:86] Creating Layer pool0
I0428 19:44:33.172821 25625 net.cpp:408] pool0 <- conv0
I0428 19:44:33.172832 25625 net.cpp:382] pool0 -> pool0
I0428 19:44:33.172890 25625 net.cpp:124] Setting up pool0
I0428 19:44:33.172901 25625 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:33.172907 25625 net.cpp:139] Memory required for data: 890800
I0428 19:44:33.172914 25625 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:33.172930 25625 net.cpp:86] Creating Layer conv1
I0428 19:44:33.172937 25625 net.cpp:408] conv1 <- pool0
I0428 19:44:33.172947 25625 net.cpp:382] conv1 -> conv1
I0428 19:44:33.174813 25625 net.cpp:124] Setting up conv1
I0428 19:44:33.174832 25625 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:33.174839 25625 net.cpp:139] Memory required for data: 2170800
I0428 19:44:33.174856 25625 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:33.174868 25625 net.cpp:86] Creating Layer pool1
I0428 19:44:33.174875 25625 net.cpp:408] pool1 <- conv1
I0428 19:44:33.174885 25625 net.cpp:382] pool1 -> pool1
I0428 19:44:33.174937 25625 net.cpp:124] Setting up pool1
I0428 19:44:33.174947 25625 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:33.174953 25625 net.cpp:139] Memory required for data: 2490800
I0428 19:44:33.174960 25625 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:33.174971 25625 net.cpp:86] Creating Layer ip1
I0428 19:44:33.174988 25625 net.cpp:408] ip1 <- pool1
I0428 19:44:33.174999 25625 net.cpp:382] ip1 -> ip1
I0428 19:44:33.175264 25625 net.cpp:124] Setting up ip1
I0428 19:44:33.175276 25625 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:33.175297 25625 net.cpp:139] Memory required for data: 2500800
I0428 19:44:33.175319 25625 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:33.175329 25625 net.cpp:86] Creating Layer relu1
I0428 19:44:33.175338 25625 net.cpp:408] relu1 <- ip1
I0428 19:44:33.175348 25625 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:33.175547 25625 net.cpp:124] Setting up relu1
I0428 19:44:33.175559 25625 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:33.175567 25625 net.cpp:139] Memory required for data: 2510800
I0428 19:44:33.175575 25625 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:33.175587 25625 net.cpp:86] Creating Layer ip2
I0428 19:44:33.175595 25625 net.cpp:408] ip2 <- ip1
I0428 19:44:33.175609 25625 net.cpp:382] ip2 -> ip2
I0428 19:44:33.175758 25625 net.cpp:124] Setting up ip2
I0428 19:44:33.175770 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.175776 25625 net.cpp:139] Memory required for data: 2514800
I0428 19:44:33.175787 25625 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:33.175796 25625 net.cpp:86] Creating Layer relu2
I0428 19:44:33.175803 25625 net.cpp:408] relu2 <- ip2
I0428 19:44:33.175812 25625 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:33.176069 25625 net.cpp:124] Setting up relu2
I0428 19:44:33.176082 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.176089 25625 net.cpp:139] Memory required for data: 2518800
I0428 19:44:33.176096 25625 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:33.176110 25625 net.cpp:86] Creating Layer ip3
I0428 19:44:33.176116 25625 net.cpp:408] ip3 <- ip2
I0428 19:44:33.176129 25625 net.cpp:382] ip3 -> ip3
I0428 19:44:33.176262 25625 net.cpp:124] Setting up ip3
I0428 19:44:33.176273 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.176280 25625 net.cpp:139] Memory required for data: 2522800
I0428 19:44:33.176300 25625 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:33.176311 25625 net.cpp:86] Creating Layer relu3
I0428 19:44:33.176316 25625 net.cpp:408] relu3 <- ip3
I0428 19:44:33.176326 25625 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:33.177269 25625 net.cpp:124] Setting up relu3
I0428 19:44:33.177287 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.177295 25625 net.cpp:139] Memory required for data: 2526800
I0428 19:44:33.177302 25625 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:33.177311 25625 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:33.177317 25625 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:33.177330 25625 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:33.177343 25625 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:33.177400 25625 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:33.177412 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.177424 25625 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:33.177433 25625 net.cpp:139] Memory required for data: 2534800
I0428 19:44:33.177438 25625 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:33.177450 25625 net.cpp:86] Creating Layer accuracy
I0428 19:44:33.177461 25625 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:33.177469 25625 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:33.177479 25625 net.cpp:382] accuracy -> accuracy
I0428 19:44:33.177497 25625 net.cpp:124] Setting up accuracy
I0428 19:44:33.177507 25625 net.cpp:131] Top shape: (1)
I0428 19:44:33.177513 25625 net.cpp:139] Memory required for data: 2534804
I0428 19:44:33.177520 25625 layer_factory.hpp:77] Creating layer loss
I0428 19:44:33.177531 25625 net.cpp:86] Creating Layer loss
I0428 19:44:33.177538 25625 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:33.177547 25625 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:33.177556 25625 net.cpp:382] loss -> loss
I0428 19:44:33.177569 25625 layer_factory.hpp:77] Creating layer loss
I0428 19:44:33.177880 25625 net.cpp:124] Setting up loss
I0428 19:44:33.177898 25625 net.cpp:131] Top shape: (1)
I0428 19:44:33.177904 25625 net.cpp:134]     with loss weight 1
I0428 19:44:33.177917 25625 net.cpp:139] Memory required for data: 2534808
I0428 19:44:33.177937 25625 net.cpp:200] loss needs backward computation.
I0428 19:44:33.177945 25625 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:33.177953 25625 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:33.177959 25625 net.cpp:200] relu3 needs backward computation.
I0428 19:44:33.177966 25625 net.cpp:200] ip3 needs backward computation.
I0428 19:44:33.177974 25625 net.cpp:200] relu2 needs backward computation.
I0428 19:44:33.177981 25625 net.cpp:200] ip2 needs backward computation.
I0428 19:44:33.177987 25625 net.cpp:200] relu1 needs backward computation.
I0428 19:44:33.177994 25625 net.cpp:200] ip1 needs backward computation.
I0428 19:44:33.177999 25625 net.cpp:200] pool1 needs backward computation.
I0428 19:44:33.178006 25625 net.cpp:200] conv1 needs backward computation.
I0428 19:44:33.178012 25625 net.cpp:200] pool0 needs backward computation.
I0428 19:44:33.178019 25625 net.cpp:200] conv0 needs backward computation.
I0428 19:44:33.178026 25625 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:33.178035 25625 net.cpp:202] mnist does not need backward computation.
I0428 19:44:33.178041 25625 net.cpp:244] This network produces output accuracy
I0428 19:44:33.178048 25625 net.cpp:244] This network produces output loss
I0428 19:44:33.178071 25625 net.cpp:257] Network initialization done.
I0428 19:44:33.178129 25625 solver.cpp:56] Solver scaffolding done.
I0428 19:44:33.178601 25625 caffe.cpp:248] Starting Optimization
I0428 19:44:33.178611 25625 solver.cpp:273] Solving LeNet
I0428 19:44:33.178616 25625 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:33.178833 25625 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:33.183285 25625 blocking_queue.cpp:49] Waiting for data
I0428 19:44:33.254310 25632 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:33.254812 25625 solver.cpp:398]     Test net output #0: accuracy = 0.1203
I0428 19:44:33.254840 25625 solver.cpp:398]     Test net output #1: loss = 2.29409 (* 1 = 2.29409 loss)
I0428 19:44:33.257045 25625 solver.cpp:219] Iteration 0 (-1.03696e-42 iter/s, 0.0783903s/100 iters), loss = 2.28385
I0428 19:44:33.257081 25625 solver.cpp:238]     Train net output #0: loss = 2.28385 (* 1 = 2.28385 loss)
I0428 19:44:33.257099 25625 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:33.365206 25625 solver.cpp:219] Iteration 100 (925.012 iter/s, 0.108107s/100 iters), loss = 0.606151
I0428 19:44:33.365265 25625 solver.cpp:238]     Train net output #0: loss = 0.606151 (* 1 = 0.606151 loss)
I0428 19:44:33.365283 25625 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:33.478116 25625 solver.cpp:219] Iteration 200 (886.165 iter/s, 0.112846s/100 iters), loss = 0.557581
I0428 19:44:33.478157 25625 solver.cpp:238]     Train net output #0: loss = 0.557581 (* 1 = 0.557581 loss)
I0428 19:44:33.478170 25625 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:33.583226 25625 solver.cpp:219] Iteration 300 (951.806 iter/s, 0.105063s/100 iters), loss = 0.526617
I0428 19:44:33.583257 25625 solver.cpp:238]     Train net output #0: loss = 0.526617 (* 1 = 0.526617 loss)
I0428 19:44:33.583267 25625 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:33.692387 25625 solver.cpp:219] Iteration 400 (916.505 iter/s, 0.10911s/100 iters), loss = 0.293679
I0428 19:44:33.692454 25625 solver.cpp:238]     Train net output #0: loss = 0.293679 (* 1 = 0.293679 loss)
I0428 19:44:33.692471 25625 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:33.801811 25625 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:33.878737 25632 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:33.879392 25625 solver.cpp:398]     Test net output #0: accuracy = 0.861
I0428 19:44:33.879421 25625 solver.cpp:398]     Test net output #1: loss = 0.382616 (* 1 = 0.382616 loss)
I0428 19:44:33.880739 25625 solver.cpp:219] Iteration 500 (531.107 iter/s, 0.188286s/100 iters), loss = 0.3596
I0428 19:44:33.880800 25625 solver.cpp:238]     Train net output #0: loss = 0.3596 (* 1 = 0.3596 loss)
I0428 19:44:33.880851 25625 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:33.987932 25625 solver.cpp:219] Iteration 600 (933.504 iter/s, 0.107123s/100 iters), loss = 0.381919
I0428 19:44:33.987967 25625 solver.cpp:238]     Train net output #0: loss = 0.381919 (* 1 = 0.381919 loss)
I0428 19:44:33.987974 25625 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:34.099635 25625 solver.cpp:219] Iteration 700 (895.666 iter/s, 0.111649s/100 iters), loss = 0.358114
I0428 19:44:34.099689 25625 solver.cpp:238]     Train net output #0: loss = 0.358114 (* 1 = 0.358114 loss)
I0428 19:44:34.099702 25625 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:34.214140 25625 solver.cpp:219] Iteration 800 (873.873 iter/s, 0.114433s/100 iters), loss = 0.529337
I0428 19:44:34.214179 25625 solver.cpp:238]     Train net output #0: loss = 0.529337 (* 1 = 0.529337 loss)
I0428 19:44:34.214186 25625 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:34.320677 25625 solver.cpp:219] Iteration 900 (939.084 iter/s, 0.106487s/100 iters), loss = 0.189789
I0428 19:44:34.320711 25625 solver.cpp:238]     Train net output #0: loss = 0.189789 (* 1 = 0.189789 loss)
I0428 19:44:34.320719 25625 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:34.356281 25631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:34.426590 25625 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:34.427925 25625 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:34.428848 25625 solver.cpp:311] Iteration 1000, loss = 0.387506
I0428 19:44:34.428882 25625 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:34.487654 25632 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:34.488387 25625 solver.cpp:398]     Test net output #0: accuracy = 0.8737
I0428 19:44:34.488417 25625 solver.cpp:398]     Test net output #1: loss = 0.327839 (* 1 = 0.327839 loss)
I0428 19:44:34.488426 25625 solver.cpp:316] Optimization Done.
I0428 19:44:34.488430 25625 caffe.cpp:259] Optimization Done.
