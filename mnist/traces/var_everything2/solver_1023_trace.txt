I0428 20:06:16.272186 30833 caffe.cpp:218] Using GPUs 0
I0428 20:06:16.300647 30833 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:16.744566 30833 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1023.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:16.744729 30833 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1023.prototxt
I0428 20:06:16.745097 30833 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:16.745127 30833 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:16.745214 30833 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:16.745275 30833 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:16.745358 30833 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:16.745380 30833 net.cpp:86] Creating Layer mnist
I0428 20:06:16.745388 30833 net.cpp:382] mnist -> data
I0428 20:06:16.745404 30833 net.cpp:382] mnist -> label
I0428 20:06:16.746454 30833 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:16.748878 30833 net.cpp:124] Setting up mnist
I0428 20:06:16.748896 30833 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:16.748903 30833 net.cpp:131] Top shape: 64 (64)
I0428 20:06:16.748905 30833 net.cpp:139] Memory required for data: 200960
I0428 20:06:16.748911 30833 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:16.748926 30833 net.cpp:86] Creating Layer conv0
I0428 20:06:16.748931 30833 net.cpp:408] conv0 <- data
I0428 20:06:16.748940 30833 net.cpp:382] conv0 -> conv0
I0428 20:06:16.976011 30833 net.cpp:124] Setting up conv0
I0428 20:06:16.976052 30833 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:16.976056 30833 net.cpp:139] Memory required for data: 3887360
I0428 20:06:16.976124 30833 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:16.976136 30833 net.cpp:86] Creating Layer pool0
I0428 20:06:16.976145 30833 net.cpp:408] pool0 <- conv0
I0428 20:06:16.976151 30833 net.cpp:382] pool0 -> pool0
I0428 20:06:16.976196 30833 net.cpp:124] Setting up pool0
I0428 20:06:16.976202 30833 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:16.976205 30833 net.cpp:139] Memory required for data: 4808960
I0428 20:06:16.976208 30833 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:16.976219 30833 net.cpp:86] Creating Layer conv1
I0428 20:06:16.976222 30833 net.cpp:408] conv1 <- pool0
I0428 20:06:16.976227 30833 net.cpp:382] conv1 -> conv1
I0428 20:06:16.979015 30833 net.cpp:124] Setting up conv1
I0428 20:06:16.979029 30833 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:16.979033 30833 net.cpp:139] Memory required for data: 4890880
I0428 20:06:16.979041 30833 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:16.979048 30833 net.cpp:86] Creating Layer pool1
I0428 20:06:16.979051 30833 net.cpp:408] pool1 <- conv1
I0428 20:06:16.979056 30833 net.cpp:382] pool1 -> pool1
I0428 20:06:16.979109 30833 net.cpp:124] Setting up pool1
I0428 20:06:16.979115 30833 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:16.979117 30833 net.cpp:139] Memory required for data: 4911360
I0428 20:06:16.979120 30833 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:16.979127 30833 net.cpp:86] Creating Layer ip1
I0428 20:06:16.979130 30833 net.cpp:408] ip1 <- pool1
I0428 20:06:16.979135 30833 net.cpp:382] ip1 -> ip1
I0428 20:06:16.979254 30833 net.cpp:124] Setting up ip1
I0428 20:06:16.979262 30833 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:06:16.979264 30833 net.cpp:139] Memory required for data: 4924160
I0428 20:06:16.979271 30833 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:16.979276 30833 net.cpp:86] Creating Layer relu1
I0428 20:06:16.979279 30833 net.cpp:408] relu1 <- ip1
I0428 20:06:16.979284 30833 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:16.979447 30833 net.cpp:124] Setting up relu1
I0428 20:06:16.979455 30833 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:06:16.979459 30833 net.cpp:139] Memory required for data: 4936960
I0428 20:06:16.979461 30833 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:16.979468 30833 net.cpp:86] Creating Layer ip2
I0428 20:06:16.979471 30833 net.cpp:408] ip2 <- ip1
I0428 20:06:16.979492 30833 net.cpp:382] ip2 -> ip2
I0428 20:06:16.979593 30833 net.cpp:124] Setting up ip2
I0428 20:06:16.979600 30833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:16.979604 30833 net.cpp:139] Memory required for data: 4939520
I0428 20:06:16.979609 30833 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:16.979614 30833 net.cpp:86] Creating Layer relu2
I0428 20:06:16.979617 30833 net.cpp:408] relu2 <- ip2
I0428 20:06:16.979620 30833 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:16.980388 30833 net.cpp:124] Setting up relu2
I0428 20:06:16.980401 30833 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:16.980420 30833 net.cpp:139] Memory required for data: 4942080
I0428 20:06:16.980424 30833 layer_factory.hpp:77] Creating layer loss
I0428 20:06:16.980432 30833 net.cpp:86] Creating Layer loss
I0428 20:06:16.980434 30833 net.cpp:408] loss <- ip2
I0428 20:06:16.980438 30833 net.cpp:408] loss <- label
I0428 20:06:16.980444 30833 net.cpp:382] loss -> loss
I0428 20:06:16.980459 30833 layer_factory.hpp:77] Creating layer loss
I0428 20:06:16.980731 30833 net.cpp:124] Setting up loss
I0428 20:06:16.980756 30833 net.cpp:131] Top shape: (1)
I0428 20:06:16.980758 30833 net.cpp:134]     with loss weight 1
I0428 20:06:16.980788 30833 net.cpp:139] Memory required for data: 4942084
I0428 20:06:16.980792 30833 net.cpp:200] loss needs backward computation.
I0428 20:06:16.980795 30833 net.cpp:200] relu2 needs backward computation.
I0428 20:06:16.980798 30833 net.cpp:200] ip2 needs backward computation.
I0428 20:06:16.980801 30833 net.cpp:200] relu1 needs backward computation.
I0428 20:06:16.980804 30833 net.cpp:200] ip1 needs backward computation.
I0428 20:06:16.980850 30833 net.cpp:200] pool1 needs backward computation.
I0428 20:06:16.980854 30833 net.cpp:200] conv1 needs backward computation.
I0428 20:06:16.980857 30833 net.cpp:200] pool0 needs backward computation.
I0428 20:06:16.980860 30833 net.cpp:200] conv0 needs backward computation.
I0428 20:06:16.980880 30833 net.cpp:202] mnist does not need backward computation.
I0428 20:06:16.980881 30833 net.cpp:244] This network produces output loss
I0428 20:06:16.980892 30833 net.cpp:257] Network initialization done.
I0428 20:06:16.981216 30833 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1023.prototxt
I0428 20:06:16.981256 30833 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:16.981345 30833 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:16.981425 30833 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:16.981490 30833 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:16.981504 30833 net.cpp:86] Creating Layer mnist
I0428 20:06:16.981508 30833 net.cpp:382] mnist -> data
I0428 20:06:16.981516 30833 net.cpp:382] mnist -> label
I0428 20:06:16.981600 30833 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:16.983706 30833 net.cpp:124] Setting up mnist
I0428 20:06:16.983734 30833 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:16.983739 30833 net.cpp:131] Top shape: 100 (100)
I0428 20:06:16.983742 30833 net.cpp:139] Memory required for data: 314000
I0428 20:06:16.983745 30833 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:16.983752 30833 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:16.983755 30833 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:16.983760 30833 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:16.983768 30833 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:16.983837 30833 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:16.983856 30833 net.cpp:131] Top shape: 100 (100)
I0428 20:06:16.983860 30833 net.cpp:131] Top shape: 100 (100)
I0428 20:06:16.983863 30833 net.cpp:139] Memory required for data: 314800
I0428 20:06:16.983866 30833 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:16.983877 30833 net.cpp:86] Creating Layer conv0
I0428 20:06:16.983883 30833 net.cpp:408] conv0 <- data
I0428 20:06:16.983889 30833 net.cpp:382] conv0 -> conv0
I0428 20:06:16.985731 30833 net.cpp:124] Setting up conv0
I0428 20:06:16.985761 30833 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:16.985764 30833 net.cpp:139] Memory required for data: 6074800
I0428 20:06:16.985774 30833 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:16.985781 30833 net.cpp:86] Creating Layer pool0
I0428 20:06:16.985785 30833 net.cpp:408] pool0 <- conv0
I0428 20:06:16.985790 30833 net.cpp:382] pool0 -> pool0
I0428 20:06:16.985826 30833 net.cpp:124] Setting up pool0
I0428 20:06:16.985832 30833 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:16.985836 30833 net.cpp:139] Memory required for data: 7514800
I0428 20:06:16.985837 30833 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:16.985847 30833 net.cpp:86] Creating Layer conv1
I0428 20:06:16.985851 30833 net.cpp:408] conv1 <- pool0
I0428 20:06:16.985857 30833 net.cpp:382] conv1 -> conv1
I0428 20:06:16.988023 30833 net.cpp:124] Setting up conv1
I0428 20:06:16.988036 30833 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:16.988056 30833 net.cpp:139] Memory required for data: 7642800
I0428 20:06:16.988065 30833 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:16.988071 30833 net.cpp:86] Creating Layer pool1
I0428 20:06:16.988076 30833 net.cpp:408] pool1 <- conv1
I0428 20:06:16.988097 30833 net.cpp:382] pool1 -> pool1
I0428 20:06:16.988137 30833 net.cpp:124] Setting up pool1
I0428 20:06:16.988144 30833 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:16.988147 30833 net.cpp:139] Memory required for data: 7674800
I0428 20:06:16.988150 30833 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:16.988157 30833 net.cpp:86] Creating Layer ip1
I0428 20:06:16.988159 30833 net.cpp:408] ip1 <- pool1
I0428 20:06:16.988180 30833 net.cpp:382] ip1 -> ip1
I0428 20:06:16.988312 30833 net.cpp:124] Setting up ip1
I0428 20:06:16.988318 30833 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:06:16.988322 30833 net.cpp:139] Memory required for data: 7694800
I0428 20:06:16.988329 30833 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:16.988334 30833 net.cpp:86] Creating Layer relu1
I0428 20:06:16.988337 30833 net.cpp:408] relu1 <- ip1
I0428 20:06:16.988343 30833 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:16.988646 30833 net.cpp:124] Setting up relu1
I0428 20:06:16.988656 30833 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:06:16.988674 30833 net.cpp:139] Memory required for data: 7714800
I0428 20:06:16.988677 30833 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:16.988685 30833 net.cpp:86] Creating Layer ip2
I0428 20:06:16.988690 30833 net.cpp:408] ip2 <- ip1
I0428 20:06:16.988694 30833 net.cpp:382] ip2 -> ip2
I0428 20:06:16.988802 30833 net.cpp:124] Setting up ip2
I0428 20:06:16.988834 30833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:16.988838 30833 net.cpp:139] Memory required for data: 7718800
I0428 20:06:16.988843 30833 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:16.988848 30833 net.cpp:86] Creating Layer relu2
I0428 20:06:16.988852 30833 net.cpp:408] relu2 <- ip2
I0428 20:06:16.988857 30833 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:16.989025 30833 net.cpp:124] Setting up relu2
I0428 20:06:16.989034 30833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:16.989037 30833 net.cpp:139] Memory required for data: 7722800
I0428 20:06:16.989040 30833 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:06:16.989045 30833 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:06:16.989048 30833 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:06:16.989054 30833 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:06:16.989070 30833 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:06:16.989109 30833 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:06:16.989115 30833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:16.989118 30833 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:16.989123 30833 net.cpp:139] Memory required for data: 7730800
I0428 20:06:16.989127 30833 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:16.989151 30833 net.cpp:86] Creating Layer accuracy
I0428 20:06:16.989157 30833 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:06:16.989163 30833 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:16.989171 30833 net.cpp:382] accuracy -> accuracy
I0428 20:06:16.989182 30833 net.cpp:124] Setting up accuracy
I0428 20:06:16.989205 30833 net.cpp:131] Top shape: (1)
I0428 20:06:16.989224 30833 net.cpp:139] Memory required for data: 7730804
I0428 20:06:16.989230 30833 layer_factory.hpp:77] Creating layer loss
I0428 20:06:16.989239 30833 net.cpp:86] Creating Layer loss
I0428 20:06:16.989244 30833 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:06:16.989248 30833 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:16.989253 30833 net.cpp:382] loss -> loss
I0428 20:06:16.989260 30833 layer_factory.hpp:77] Creating layer loss
I0428 20:06:16.989518 30833 net.cpp:124] Setting up loss
I0428 20:06:16.989542 30833 net.cpp:131] Top shape: (1)
I0428 20:06:16.989545 30833 net.cpp:134]     with loss weight 1
I0428 20:06:16.989552 30833 net.cpp:139] Memory required for data: 7730808
I0428 20:06:16.989554 30833 net.cpp:200] loss needs backward computation.
I0428 20:06:16.989558 30833 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:16.989562 30833 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:06:16.989564 30833 net.cpp:200] relu2 needs backward computation.
I0428 20:06:16.989567 30833 net.cpp:200] ip2 needs backward computation.
I0428 20:06:16.989570 30833 net.cpp:200] relu1 needs backward computation.
I0428 20:06:16.989573 30833 net.cpp:200] ip1 needs backward computation.
I0428 20:06:16.989575 30833 net.cpp:200] pool1 needs backward computation.
I0428 20:06:16.989578 30833 net.cpp:200] conv1 needs backward computation.
I0428 20:06:16.989581 30833 net.cpp:200] pool0 needs backward computation.
I0428 20:06:16.989584 30833 net.cpp:200] conv0 needs backward computation.
I0428 20:06:16.989588 30833 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:16.989591 30833 net.cpp:202] mnist does not need backward computation.
I0428 20:06:16.989594 30833 net.cpp:244] This network produces output accuracy
I0428 20:06:16.989598 30833 net.cpp:244] This network produces output loss
I0428 20:06:16.989608 30833 net.cpp:257] Network initialization done.
I0428 20:06:16.989644 30833 solver.cpp:56] Solver scaffolding done.
I0428 20:06:16.989902 30833 caffe.cpp:248] Starting Optimization
I0428 20:06:16.989909 30833 solver.cpp:273] Solving LeNet
I0428 20:06:16.989912 30833 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:16.990743 30833 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:16.995663 30833 blocking_queue.cpp:49] Waiting for data
I0428 20:06:17.067276 30840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:17.067838 30833 solver.cpp:398]     Test net output #0: accuracy = 0.0854
I0428 20:06:17.067874 30833 solver.cpp:398]     Test net output #1: loss = 2.38831 (* 1 = 2.38831 loss)
I0428 20:06:17.071547 30833 solver.cpp:219] Iteration 0 (0 iter/s, 0.0816069s/100 iters), loss = 2.34904
I0428 20:06:17.071588 30833 solver.cpp:238]     Train net output #0: loss = 2.34904 (* 1 = 2.34904 loss)
I0428 20:06:17.071599 30833 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:17.165737 30833 solver.cpp:219] Iteration 100 (1062.12 iter/s, 0.0941517s/100 iters), loss = 1.10979
I0428 20:06:17.165778 30833 solver.cpp:238]     Train net output #0: loss = 1.10979 (* 1 = 1.10979 loss)
I0428 20:06:17.165786 30833 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:17.249735 30833 solver.cpp:219] Iteration 200 (1191.21 iter/s, 0.0839485s/100 iters), loss = 0.401563
I0428 20:06:17.249789 30833 solver.cpp:238]     Train net output #0: loss = 0.401563 (* 1 = 0.401563 loss)
I0428 20:06:17.249796 30833 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:17.332037 30833 solver.cpp:219] Iteration 300 (1215.75 iter/s, 0.0822538s/100 iters), loss = 0.620384
I0428 20:06:17.332077 30833 solver.cpp:238]     Train net output #0: loss = 0.620384 (* 1 = 0.620384 loss)
I0428 20:06:17.332083 30833 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:17.416126 30833 solver.cpp:219] Iteration 400 (1189.7 iter/s, 0.084055s/100 iters), loss = 0.467691
I0428 20:06:17.416151 30833 solver.cpp:238]     Train net output #0: loss = 0.467691 (* 1 = 0.467691 loss)
I0428 20:06:17.416157 30833 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:17.498613 30833 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:17.575330 30840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:17.575942 30833 solver.cpp:398]     Test net output #0: accuracy = 0.7693
I0428 20:06:17.575979 30833 solver.cpp:398]     Test net output #1: loss = 0.582545 (* 1 = 0.582545 loss)
I0428 20:06:17.576933 30833 solver.cpp:219] Iteration 500 (622.014 iter/s, 0.160768s/100 iters), loss = 0.533952
I0428 20:06:17.576972 30833 solver.cpp:238]     Train net output #0: loss = 0.533952 (* 1 = 0.533952 loss)
I0428 20:06:17.576979 30833 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:17.670716 30833 solver.cpp:219] Iteration 600 (1066.85 iter/s, 0.0937337s/100 iters), loss = 0.639264
I0428 20:06:17.670758 30833 solver.cpp:238]     Train net output #0: loss = 0.639264 (* 1 = 0.639264 loss)
I0428 20:06:17.670763 30833 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:17.754930 30833 solver.cpp:219] Iteration 700 (1187.96 iter/s, 0.0841779s/100 iters), loss = 0.646542
I0428 20:06:17.754969 30833 solver.cpp:238]     Train net output #0: loss = 0.646542 (* 1 = 0.646542 loss)
I0428 20:06:17.754976 30833 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:17.838016 30833 solver.cpp:219] Iteration 800 (1204.06 iter/s, 0.0830525s/100 iters), loss = 0.557254
I0428 20:06:17.838057 30833 solver.cpp:238]     Train net output #0: loss = 0.557254 (* 1 = 0.557254 loss)
I0428 20:06:17.838063 30833 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:17.921425 30833 solver.cpp:219] Iteration 900 (1199.4 iter/s, 0.0833751s/100 iters), loss = 0.496797
I0428 20:06:17.921465 30833 solver.cpp:238]     Train net output #0: loss = 0.496797 (* 1 = 0.496797 loss)
I0428 20:06:17.921471 30833 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:17.949709 30839 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:18.012208 30833 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:18.013063 30833 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:18.013610 30833 solver.cpp:311] Iteration 1000, loss = 0.496457
I0428 20:06:18.013626 30833 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:18.089035 30840 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:18.089630 30833 solver.cpp:398]     Test net output #0: accuracy = 0.7837
I0428 20:06:18.089665 30833 solver.cpp:398]     Test net output #1: loss = 0.529806 (* 1 = 0.529806 loss)
I0428 20:06:18.089670 30833 solver.cpp:316] Optimization Done.
I0428 20:06:18.089673 30833 caffe.cpp:259] Optimization Done.
