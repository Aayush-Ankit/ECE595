I0428 19:57:17.164777 28640 caffe.cpp:218] Using GPUs 0
I0428 19:57:17.200655 28640 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:17.649682 28640 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test784.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:17.649819 28640 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test784.prototxt
I0428 19:57:17.650171 28640 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:17.650197 28640 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:17.650286 28640 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:17.650347 28640 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:17.650444 28640 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:17.650463 28640 net.cpp:86] Creating Layer mnist
I0428 19:57:17.650470 28640 net.cpp:382] mnist -> data
I0428 19:57:17.650487 28640 net.cpp:382] mnist -> label
I0428 19:57:17.651496 28640 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:17.653784 28640 net.cpp:124] Setting up mnist
I0428 19:57:17.653817 28640 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:17.653822 28640 net.cpp:131] Top shape: 64 (64)
I0428 19:57:17.653825 28640 net.cpp:139] Memory required for data: 200960
I0428 19:57:17.653831 28640 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:17.653844 28640 net.cpp:86] Creating Layer conv0
I0428 19:57:17.653849 28640 net.cpp:408] conv0 <- data
I0428 19:57:17.653859 28640 net.cpp:382] conv0 -> conv0
I0428 19:57:17.879899 28640 net.cpp:124] Setting up conv0
I0428 19:57:17.879926 28640 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:17.879930 28640 net.cpp:139] Memory required for data: 1675520
I0428 19:57:17.879978 28640 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:17.880007 28640 net.cpp:86] Creating Layer pool0
I0428 19:57:17.880010 28640 net.cpp:408] pool0 <- conv0
I0428 19:57:17.880017 28640 net.cpp:382] pool0 -> pool0
I0428 19:57:17.880064 28640 net.cpp:124] Setting up pool0
I0428 19:57:17.880070 28640 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:17.880074 28640 net.cpp:139] Memory required for data: 2044160
I0428 19:57:17.880076 28640 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:17.880087 28640 net.cpp:86] Creating Layer conv1
I0428 19:57:17.880091 28640 net.cpp:408] conv1 <- pool0
I0428 19:57:17.880096 28640 net.cpp:382] conv1 -> conv1
I0428 19:57:17.882966 28640 net.cpp:124] Setting up conv1
I0428 19:57:17.882994 28640 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:17.882997 28640 net.cpp:139] Memory required for data: 2126080
I0428 19:57:17.883007 28640 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:17.883029 28640 net.cpp:86] Creating Layer pool1
I0428 19:57:17.883033 28640 net.cpp:408] pool1 <- conv1
I0428 19:57:17.883038 28640 net.cpp:382] pool1 -> pool1
I0428 19:57:17.883075 28640 net.cpp:124] Setting up pool1
I0428 19:57:17.883082 28640 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:17.883085 28640 net.cpp:139] Memory required for data: 2146560
I0428 19:57:17.883088 28640 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:17.883095 28640 net.cpp:86] Creating Layer ip1
I0428 19:57:17.883100 28640 net.cpp:408] ip1 <- pool1
I0428 19:57:17.883103 28640 net.cpp:382] ip1 -> ip1
I0428 19:57:17.883201 28640 net.cpp:124] Setting up ip1
I0428 19:57:17.883208 28640 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:17.883211 28640 net.cpp:139] Memory required for data: 2149120
I0428 19:57:17.883219 28640 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:17.883224 28640 net.cpp:86] Creating Layer relu1
I0428 19:57:17.883227 28640 net.cpp:408] relu1 <- ip1
I0428 19:57:17.883231 28640 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:17.883411 28640 net.cpp:124] Setting up relu1
I0428 19:57:17.883421 28640 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:17.883424 28640 net.cpp:139] Memory required for data: 2151680
I0428 19:57:17.883429 28640 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:17.883435 28640 net.cpp:86] Creating Layer ip2
I0428 19:57:17.883437 28640 net.cpp:408] ip2 <- ip1
I0428 19:57:17.883442 28640 net.cpp:382] ip2 -> ip2
I0428 19:57:17.883538 28640 net.cpp:124] Setting up ip2
I0428 19:57:17.883544 28640 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:17.883548 28640 net.cpp:139] Memory required for data: 2154240
I0428 19:57:17.883553 28640 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:17.883559 28640 net.cpp:86] Creating Layer relu2
I0428 19:57:17.883563 28640 net.cpp:408] relu2 <- ip2
I0428 19:57:17.883566 28640 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:17.884402 28640 net.cpp:124] Setting up relu2
I0428 19:57:17.884428 28640 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:17.884443 28640 net.cpp:139] Memory required for data: 2156800
I0428 19:57:17.884446 28640 layer_factory.hpp:77] Creating layer loss
I0428 19:57:17.884452 28640 net.cpp:86] Creating Layer loss
I0428 19:57:17.884456 28640 net.cpp:408] loss <- ip2
I0428 19:57:17.884460 28640 net.cpp:408] loss <- label
I0428 19:57:17.884465 28640 net.cpp:382] loss -> loss
I0428 19:57:17.884485 28640 layer_factory.hpp:77] Creating layer loss
I0428 19:57:17.884745 28640 net.cpp:124] Setting up loss
I0428 19:57:17.884757 28640 net.cpp:131] Top shape: (1)
I0428 19:57:17.884760 28640 net.cpp:134]     with loss weight 1
I0428 19:57:17.884774 28640 net.cpp:139] Memory required for data: 2156804
I0428 19:57:17.884778 28640 net.cpp:200] loss needs backward computation.
I0428 19:57:17.884789 28640 net.cpp:200] relu2 needs backward computation.
I0428 19:57:17.884793 28640 net.cpp:200] ip2 needs backward computation.
I0428 19:57:17.884795 28640 net.cpp:200] relu1 needs backward computation.
I0428 19:57:17.884799 28640 net.cpp:200] ip1 needs backward computation.
I0428 19:57:17.884820 28640 net.cpp:200] pool1 needs backward computation.
I0428 19:57:17.884824 28640 net.cpp:200] conv1 needs backward computation.
I0428 19:57:17.884827 28640 net.cpp:200] pool0 needs backward computation.
I0428 19:57:17.884830 28640 net.cpp:200] conv0 needs backward computation.
I0428 19:57:17.884834 28640 net.cpp:202] mnist does not need backward computation.
I0428 19:57:17.884836 28640 net.cpp:244] This network produces output loss
I0428 19:57:17.884860 28640 net.cpp:257] Network initialization done.
I0428 19:57:17.885185 28640 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test784.prototxt
I0428 19:57:17.885226 28640 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:17.885309 28640 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:17.885370 28640 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:17.885414 28640 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:17.885442 28640 net.cpp:86] Creating Layer mnist
I0428 19:57:17.885447 28640 net.cpp:382] mnist -> data
I0428 19:57:17.885454 28640 net.cpp:382] mnist -> label
I0428 19:57:17.885591 28640 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:17.887622 28640 net.cpp:124] Setting up mnist
I0428 19:57:17.887646 28640 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:17.887667 28640 net.cpp:131] Top shape: 100 (100)
I0428 19:57:17.887671 28640 net.cpp:139] Memory required for data: 314000
I0428 19:57:17.887676 28640 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:17.887681 28640 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:17.887686 28640 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:17.887691 28640 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:17.887697 28640 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:17.887766 28640 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:17.887790 28640 net.cpp:131] Top shape: 100 (100)
I0428 19:57:17.887794 28640 net.cpp:131] Top shape: 100 (100)
I0428 19:57:17.887797 28640 net.cpp:139] Memory required for data: 314800
I0428 19:57:17.887800 28640 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:17.887809 28640 net.cpp:86] Creating Layer conv0
I0428 19:57:17.887812 28640 net.cpp:408] conv0 <- data
I0428 19:57:17.887817 28640 net.cpp:382] conv0 -> conv0
I0428 19:57:17.889556 28640 net.cpp:124] Setting up conv0
I0428 19:57:17.889569 28640 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:17.889574 28640 net.cpp:139] Memory required for data: 2618800
I0428 19:57:17.889597 28640 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:17.889605 28640 net.cpp:86] Creating Layer pool0
I0428 19:57:17.889607 28640 net.cpp:408] pool0 <- conv0
I0428 19:57:17.889612 28640 net.cpp:382] pool0 -> pool0
I0428 19:57:17.889647 28640 net.cpp:124] Setting up pool0
I0428 19:57:17.889652 28640 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:17.889654 28640 net.cpp:139] Memory required for data: 3194800
I0428 19:57:17.889657 28640 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:17.889667 28640 net.cpp:86] Creating Layer conv1
I0428 19:57:17.889669 28640 net.cpp:408] conv1 <- pool0
I0428 19:57:17.889678 28640 net.cpp:382] conv1 -> conv1
I0428 19:57:17.891849 28640 net.cpp:124] Setting up conv1
I0428 19:57:17.891862 28640 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:17.891865 28640 net.cpp:139] Memory required for data: 3322800
I0428 19:57:17.891875 28640 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:17.891897 28640 net.cpp:86] Creating Layer pool1
I0428 19:57:17.891901 28640 net.cpp:408] pool1 <- conv1
I0428 19:57:17.891906 28640 net.cpp:382] pool1 -> pool1
I0428 19:57:17.891958 28640 net.cpp:124] Setting up pool1
I0428 19:57:17.891963 28640 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:17.891966 28640 net.cpp:139] Memory required for data: 3354800
I0428 19:57:17.891969 28640 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:17.891975 28640 net.cpp:86] Creating Layer ip1
I0428 19:57:17.891978 28640 net.cpp:408] ip1 <- pool1
I0428 19:57:17.891983 28640 net.cpp:382] ip1 -> ip1
I0428 19:57:17.892102 28640 net.cpp:124] Setting up ip1
I0428 19:57:17.892110 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892113 28640 net.cpp:139] Memory required for data: 3358800
I0428 19:57:17.892120 28640 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:17.892127 28640 net.cpp:86] Creating Layer relu1
I0428 19:57:17.892130 28640 net.cpp:408] relu1 <- ip1
I0428 19:57:17.892135 28640 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:17.892318 28640 net.cpp:124] Setting up relu1
I0428 19:57:17.892326 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892329 28640 net.cpp:139] Memory required for data: 3362800
I0428 19:57:17.892340 28640 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:17.892349 28640 net.cpp:86] Creating Layer ip2
I0428 19:57:17.892367 28640 net.cpp:408] ip2 <- ip1
I0428 19:57:17.892372 28640 net.cpp:382] ip2 -> ip2
I0428 19:57:17.892475 28640 net.cpp:124] Setting up ip2
I0428 19:57:17.892483 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892487 28640 net.cpp:139] Memory required for data: 3366800
I0428 19:57:17.892513 28640 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:17.892524 28640 net.cpp:86] Creating Layer relu2
I0428 19:57:17.892526 28640 net.cpp:408] relu2 <- ip2
I0428 19:57:17.892529 28640 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:17.892688 28640 net.cpp:124] Setting up relu2
I0428 19:57:17.892696 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892699 28640 net.cpp:139] Memory required for data: 3370800
I0428 19:57:17.892702 28640 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:17.892707 28640 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:17.892710 28640 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:17.892715 28640 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:17.892735 28640 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:17.892781 28640 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:17.892786 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892789 28640 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:17.892792 28640 net.cpp:139] Memory required for data: 3378800
I0428 19:57:17.892794 28640 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:17.892803 28640 net.cpp:86] Creating Layer accuracy
I0428 19:57:17.892841 28640 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:17.892845 28640 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:17.892865 28640 net.cpp:382] accuracy -> accuracy
I0428 19:57:17.892874 28640 net.cpp:124] Setting up accuracy
I0428 19:57:17.892879 28640 net.cpp:131] Top shape: (1)
I0428 19:57:17.892881 28640 net.cpp:139] Memory required for data: 3378804
I0428 19:57:17.892884 28640 layer_factory.hpp:77] Creating layer loss
I0428 19:57:17.892904 28640 net.cpp:86] Creating Layer loss
I0428 19:57:17.892909 28640 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:17.892912 28640 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:17.892916 28640 net.cpp:382] loss -> loss
I0428 19:57:17.892922 28640 layer_factory.hpp:77] Creating layer loss
I0428 19:57:17.893256 28640 net.cpp:124] Setting up loss
I0428 19:57:17.893266 28640 net.cpp:131] Top shape: (1)
I0428 19:57:17.893270 28640 net.cpp:134]     with loss weight 1
I0428 19:57:17.893276 28640 net.cpp:139] Memory required for data: 3378808
I0428 19:57:17.893280 28640 net.cpp:200] loss needs backward computation.
I0428 19:57:17.893283 28640 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:17.893286 28640 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:17.893290 28640 net.cpp:200] relu2 needs backward computation.
I0428 19:57:17.893292 28640 net.cpp:200] ip2 needs backward computation.
I0428 19:57:17.893296 28640 net.cpp:200] relu1 needs backward computation.
I0428 19:57:17.893297 28640 net.cpp:200] ip1 needs backward computation.
I0428 19:57:17.893301 28640 net.cpp:200] pool1 needs backward computation.
I0428 19:57:17.893303 28640 net.cpp:200] conv1 needs backward computation.
I0428 19:57:17.893306 28640 net.cpp:200] pool0 needs backward computation.
I0428 19:57:17.893309 28640 net.cpp:200] conv0 needs backward computation.
I0428 19:57:17.893312 28640 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:17.893316 28640 net.cpp:202] mnist does not need backward computation.
I0428 19:57:17.893318 28640 net.cpp:244] This network produces output accuracy
I0428 19:57:17.893322 28640 net.cpp:244] This network produces output loss
I0428 19:57:17.893332 28640 net.cpp:257] Network initialization done.
I0428 19:57:17.893368 28640 solver.cpp:56] Solver scaffolding done.
I0428 19:57:17.893700 28640 caffe.cpp:248] Starting Optimization
I0428 19:57:17.893712 28640 solver.cpp:273] Solving LeNet
I0428 19:57:17.893714 28640 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:17.894525 28640 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:17.897341 28640 blocking_queue.cpp:49] Waiting for data
I0428 19:57:17.970384 28648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:17.970892 28640 solver.cpp:398]     Test net output #0: accuracy = 0.0658
I0428 19:57:17.970912 28640 solver.cpp:398]     Test net output #1: loss = 2.31494 (* 1 = 2.31494 loss)
I0428 19:57:17.973428 28640 solver.cpp:219] Iteration 0 (-2.0467e-31 iter/s, 0.0796874s/100 iters), loss = 2.30977
I0428 19:57:17.973449 28640 solver.cpp:238]     Train net output #0: loss = 2.30977 (* 1 = 2.30977 loss)
I0428 19:57:17.973477 28640 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:18.054914 28640 solver.cpp:219] Iteration 100 (1227.7 iter/s, 0.0814531s/100 iters), loss = 1.39444
I0428 19:57:18.054940 28640 solver.cpp:238]     Train net output #0: loss = 1.39444 (* 1 = 1.39444 loss)
I0428 19:57:18.054962 28640 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:18.134143 28640 solver.cpp:219] Iteration 200 (1262.7 iter/s, 0.0791951s/100 iters), loss = 0.738512
I0428 19:57:18.134197 28640 solver.cpp:238]     Train net output #0: loss = 0.738512 (* 1 = 0.738512 loss)
I0428 19:57:18.134203 28640 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:18.205230 28640 solver.cpp:219] Iteration 300 (1407.62 iter/s, 0.071042s/100 iters), loss = 1.11365
I0428 19:57:18.205271 28640 solver.cpp:238]     Train net output #0: loss = 1.11365 (* 1 = 1.11365 loss)
I0428 19:57:18.205276 28640 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:18.275565 28640 solver.cpp:219] Iteration 400 (1422.44 iter/s, 0.0703018s/100 iters), loss = 0.984056
I0428 19:57:18.275604 28640 solver.cpp:238]     Train net output #0: loss = 0.984056 (* 1 = 0.984056 loss)
I0428 19:57:18.275609 28640 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:18.353313 28640 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:18.428097 28648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:18.428573 28640 solver.cpp:398]     Test net output #0: accuracy = 0.75
I0428 19:57:18.428596 28640 solver.cpp:398]     Test net output #1: loss = 0.671887 (* 1 = 0.671887 loss)
I0428 19:57:18.429414 28640 solver.cpp:219] Iteration 500 (650.14 iter/s, 0.153813s/100 iters), loss = 0.711354
I0428 19:57:18.429460 28640 solver.cpp:238]     Train net output #0: loss = 0.711354 (* 1 = 0.711354 loss)
I0428 19:57:18.429469 28640 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:18.510798 28640 solver.cpp:219] Iteration 600 (1229.59 iter/s, 0.0813281s/100 iters), loss = 0.312554
I0428 19:57:18.510839 28640 solver.cpp:238]     Train net output #0: loss = 0.312554 (* 1 = 0.312554 loss)
I0428 19:57:18.510845 28640 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:18.592690 28640 solver.cpp:219] Iteration 700 (1221.62 iter/s, 0.0818585s/100 iters), loss = 0.467558
I0428 19:57:18.592730 28640 solver.cpp:238]     Train net output #0: loss = 0.467558 (* 1 = 0.467558 loss)
I0428 19:57:18.592736 28640 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:18.663966 28640 solver.cpp:219] Iteration 800 (1403.69 iter/s, 0.0712407s/100 iters), loss = 0.575951
I0428 19:57:18.663998 28640 solver.cpp:238]     Train net output #0: loss = 0.575951 (* 1 = 0.575951 loss)
I0428 19:57:18.664005 28640 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:18.749380 28640 solver.cpp:219] Iteration 900 (1171.32 iter/s, 0.085374s/100 iters), loss = 0.365939
I0428 19:57:18.749403 28640 solver.cpp:238]     Train net output #0: loss = 0.365939 (* 1 = 0.365939 loss)
I0428 19:57:18.749409 28640 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:18.774310 28647 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:18.821460 28640 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:18.822731 28640 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:18.823422 28640 solver.cpp:311] Iteration 1000, loss = 0.334942
I0428 19:57:18.823451 28640 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:18.898491 28648 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:18.899039 28640 solver.cpp:398]     Test net output #0: accuracy = 0.8648
I0428 19:57:18.899068 28640 solver.cpp:398]     Test net output #1: loss = 0.370908 (* 1 = 0.370908 loss)
I0428 19:57:18.899077 28640 solver.cpp:316] Optimization Done.
I0428 19:57:18.899082 28640 caffe.cpp:259] Optimization Done.
