I0428 19:57:13.233541 28624 caffe.cpp:218] Using GPUs 0
I0428 19:57:13.268478 28624 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:13.804502 28624 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test782.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:13.804657 28624 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test782.prototxt
I0428 19:57:13.805065 28624 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:13.805084 28624 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:13.805181 28624 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:13.805255 28624 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:13.805375 28624 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:13.805403 28624 net.cpp:86] Creating Layer mnist
I0428 19:57:13.805413 28624 net.cpp:382] mnist -> data
I0428 19:57:13.805438 28624 net.cpp:382] mnist -> label
I0428 19:57:13.806752 28624 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:13.809685 28624 net.cpp:124] Setting up mnist
I0428 19:57:13.809706 28624 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:13.809713 28624 net.cpp:131] Top shape: 64 (64)
I0428 19:57:13.809718 28624 net.cpp:139] Memory required for data: 200960
I0428 19:57:13.809726 28624 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:13.809743 28624 net.cpp:86] Creating Layer conv0
I0428 19:57:13.809751 28624 net.cpp:408] conv0 <- data
I0428 19:57:13.809762 28624 net.cpp:382] conv0 -> conv0
I0428 19:57:14.100466 28624 net.cpp:124] Setting up conv0
I0428 19:57:14.100495 28624 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:14.100500 28624 net.cpp:139] Memory required for data: 1675520
I0428 19:57:14.100517 28624 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:14.100531 28624 net.cpp:86] Creating Layer pool0
I0428 19:57:14.100536 28624 net.cpp:408] pool0 <- conv0
I0428 19:57:14.100543 28624 net.cpp:382] pool0 -> pool0
I0428 19:57:14.100596 28624 net.cpp:124] Setting up pool0
I0428 19:57:14.100605 28624 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:14.100627 28624 net.cpp:139] Memory required for data: 2044160
I0428 19:57:14.100631 28624 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:14.100644 28624 net.cpp:86] Creating Layer conv1
I0428 19:57:14.100649 28624 net.cpp:408] conv1 <- pool0
I0428 19:57:14.100656 28624 net.cpp:382] conv1 -> conv1
I0428 19:57:14.103735 28624 net.cpp:124] Setting up conv1
I0428 19:57:14.103754 28624 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:14.103759 28624 net.cpp:139] Memory required for data: 2126080
I0428 19:57:14.103768 28624 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:14.103776 28624 net.cpp:86] Creating Layer pool1
I0428 19:57:14.103780 28624 net.cpp:408] pool1 <- conv1
I0428 19:57:14.103786 28624 net.cpp:382] pool1 -> pool1
I0428 19:57:14.103830 28624 net.cpp:124] Setting up pool1
I0428 19:57:14.103838 28624 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:14.103842 28624 net.cpp:139] Memory required for data: 2146560
I0428 19:57:14.103847 28624 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:14.103854 28624 net.cpp:86] Creating Layer ip1
I0428 19:57:14.103857 28624 net.cpp:408] ip1 <- pool1
I0428 19:57:14.103863 28624 net.cpp:382] ip1 -> ip1
I0428 19:57:14.103981 28624 net.cpp:124] Setting up ip1
I0428 19:57:14.103988 28624 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:14.103992 28624 net.cpp:139] Memory required for data: 2149120
I0428 19:57:14.104001 28624 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:14.104007 28624 net.cpp:86] Creating Layer relu1
I0428 19:57:14.104010 28624 net.cpp:408] relu1 <- ip1
I0428 19:57:14.104015 28624 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:14.104210 28624 net.cpp:124] Setting up relu1
I0428 19:57:14.104219 28624 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:14.104223 28624 net.cpp:139] Memory required for data: 2151680
I0428 19:57:14.104226 28624 layer_factory.hpp:77] Creating layer loss
I0428 19:57:14.104239 28624 net.cpp:86] Creating Layer loss
I0428 19:57:14.104244 28624 net.cpp:408] loss <- ip1
I0428 19:57:14.104249 28624 net.cpp:408] loss <- label
I0428 19:57:14.104255 28624 net.cpp:382] loss -> loss
I0428 19:57:14.104269 28624 layer_factory.hpp:77] Creating layer loss
I0428 19:57:14.105209 28624 net.cpp:124] Setting up loss
I0428 19:57:14.105224 28624 net.cpp:131] Top shape: (1)
I0428 19:57:14.105229 28624 net.cpp:134]     with loss weight 1
I0428 19:57:14.105244 28624 net.cpp:139] Memory required for data: 2151684
I0428 19:57:14.105248 28624 net.cpp:200] loss needs backward computation.
I0428 19:57:14.105253 28624 net.cpp:200] relu1 needs backward computation.
I0428 19:57:14.105257 28624 net.cpp:200] ip1 needs backward computation.
I0428 19:57:14.105260 28624 net.cpp:200] pool1 needs backward computation.
I0428 19:57:14.105263 28624 net.cpp:200] conv1 needs backward computation.
I0428 19:57:14.105268 28624 net.cpp:200] pool0 needs backward computation.
I0428 19:57:14.105270 28624 net.cpp:200] conv0 needs backward computation.
I0428 19:57:14.105275 28624 net.cpp:202] mnist does not need backward computation.
I0428 19:57:14.105278 28624 net.cpp:244] This network produces output loss
I0428 19:57:14.105288 28624 net.cpp:257] Network initialization done.
I0428 19:57:14.105588 28624 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test782.prototxt
I0428 19:57:14.105615 28624 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:14.105700 28624 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:14.105780 28624 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:14.105828 28624 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:14.105842 28624 net.cpp:86] Creating Layer mnist
I0428 19:57:14.105847 28624 net.cpp:382] mnist -> data
I0428 19:57:14.105856 28624 net.cpp:382] mnist -> label
I0428 19:57:14.105957 28624 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:14.108106 28624 net.cpp:124] Setting up mnist
I0428 19:57:14.108121 28624 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:14.108127 28624 net.cpp:131] Top shape: 100 (100)
I0428 19:57:14.108131 28624 net.cpp:139] Memory required for data: 314000
I0428 19:57:14.108135 28624 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:14.108144 28624 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:14.108147 28624 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:14.108152 28624 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:14.108160 28624 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:14.108278 28624 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:14.108288 28624 net.cpp:131] Top shape: 100 (100)
I0428 19:57:14.108291 28624 net.cpp:131] Top shape: 100 (100)
I0428 19:57:14.108295 28624 net.cpp:139] Memory required for data: 314800
I0428 19:57:14.108299 28624 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:14.108309 28624 net.cpp:86] Creating Layer conv0
I0428 19:57:14.108316 28624 net.cpp:408] conv0 <- data
I0428 19:57:14.108322 28624 net.cpp:382] conv0 -> conv0
I0428 19:57:14.109252 28624 net.cpp:124] Setting up conv0
I0428 19:57:14.109267 28624 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:14.109272 28624 net.cpp:139] Memory required for data: 2618800
I0428 19:57:14.109282 28624 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:14.109288 28624 net.cpp:86] Creating Layer pool0
I0428 19:57:14.109292 28624 net.cpp:408] pool0 <- conv0
I0428 19:57:14.109298 28624 net.cpp:382] pool0 -> pool0
I0428 19:57:14.109339 28624 net.cpp:124] Setting up pool0
I0428 19:57:14.109347 28624 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:14.109351 28624 net.cpp:139] Memory required for data: 3194800
I0428 19:57:14.109354 28624 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:14.109364 28624 net.cpp:86] Creating Layer conv1
I0428 19:57:14.109367 28624 net.cpp:408] conv1 <- pool0
I0428 19:57:14.109374 28624 net.cpp:382] conv1 -> conv1
I0428 19:57:14.111683 28624 net.cpp:124] Setting up conv1
I0428 19:57:14.111698 28624 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:14.111702 28624 net.cpp:139] Memory required for data: 3322800
I0428 19:57:14.111712 28624 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:14.111723 28624 net.cpp:86] Creating Layer pool1
I0428 19:57:14.111739 28624 net.cpp:408] pool1 <- conv1
I0428 19:57:14.111747 28624 net.cpp:382] pool1 -> pool1
I0428 19:57:14.111855 28624 net.cpp:124] Setting up pool1
I0428 19:57:14.111865 28624 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:14.111867 28624 net.cpp:139] Memory required for data: 3354800
I0428 19:57:14.111871 28624 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:14.111879 28624 net.cpp:86] Creating Layer ip1
I0428 19:57:14.111882 28624 net.cpp:408] ip1 <- pool1
I0428 19:57:14.111889 28624 net.cpp:382] ip1 -> ip1
I0428 19:57:14.112022 28624 net.cpp:124] Setting up ip1
I0428 19:57:14.112031 28624 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:14.112035 28624 net.cpp:139] Memory required for data: 3358800
I0428 19:57:14.112045 28624 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:14.112053 28624 net.cpp:86] Creating Layer relu1
I0428 19:57:14.112064 28624 net.cpp:408] relu1 <- ip1
I0428 19:57:14.112071 28624 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:14.113003 28624 net.cpp:124] Setting up relu1
I0428 19:57:14.113018 28624 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:14.113021 28624 net.cpp:139] Memory required for data: 3362800
I0428 19:57:14.113025 28624 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:57:14.113034 28624 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:57:14.113037 28624 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:57:14.113044 28624 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:57:14.113050 28624 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:57:14.113097 28624 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:57:14.113106 28624 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:14.113109 28624 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:14.113113 28624 net.cpp:139] Memory required for data: 3370800
I0428 19:57:14.113116 28624 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:14.113121 28624 net.cpp:86] Creating Layer accuracy
I0428 19:57:14.113126 28624 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:57:14.113131 28624 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:14.113137 28624 net.cpp:382] accuracy -> accuracy
I0428 19:57:14.113144 28624 net.cpp:124] Setting up accuracy
I0428 19:57:14.113149 28624 net.cpp:131] Top shape: (1)
I0428 19:57:14.113153 28624 net.cpp:139] Memory required for data: 3370804
I0428 19:57:14.113157 28624 layer_factory.hpp:77] Creating layer loss
I0428 19:57:14.113162 28624 net.cpp:86] Creating Layer loss
I0428 19:57:14.113165 28624 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:57:14.113169 28624 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:14.113176 28624 net.cpp:382] loss -> loss
I0428 19:57:14.113183 28624 layer_factory.hpp:77] Creating layer loss
I0428 19:57:14.113473 28624 net.cpp:124] Setting up loss
I0428 19:57:14.113483 28624 net.cpp:131] Top shape: (1)
I0428 19:57:14.113487 28624 net.cpp:134]     with loss weight 1
I0428 19:57:14.113494 28624 net.cpp:139] Memory required for data: 3370808
I0428 19:57:14.113498 28624 net.cpp:200] loss needs backward computation.
I0428 19:57:14.113502 28624 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:14.113508 28624 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:57:14.113512 28624 net.cpp:200] relu1 needs backward computation.
I0428 19:57:14.113515 28624 net.cpp:200] ip1 needs backward computation.
I0428 19:57:14.113519 28624 net.cpp:200] pool1 needs backward computation.
I0428 19:57:14.113523 28624 net.cpp:200] conv1 needs backward computation.
I0428 19:57:14.113526 28624 net.cpp:200] pool0 needs backward computation.
I0428 19:57:14.113530 28624 net.cpp:200] conv0 needs backward computation.
I0428 19:57:14.113534 28624 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:14.113538 28624 net.cpp:202] mnist does not need backward computation.
I0428 19:57:14.113541 28624 net.cpp:244] This network produces output accuracy
I0428 19:57:14.113545 28624 net.cpp:244] This network produces output loss
I0428 19:57:14.113570 28624 net.cpp:257] Network initialization done.
I0428 19:57:14.113610 28624 solver.cpp:56] Solver scaffolding done.
I0428 19:57:14.113867 28624 caffe.cpp:248] Starting Optimization
I0428 19:57:14.113874 28624 solver.cpp:273] Solving LeNet
I0428 19:57:14.113878 28624 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:14.114755 28624 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:14.118049 28624 blocking_queue.cpp:49] Waiting for data
I0428 19:57:14.188210 28631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:14.188678 28624 solver.cpp:398]     Test net output #0: accuracy = 0.1143
I0428 19:57:14.188704 28624 solver.cpp:398]     Test net output #1: loss = 2.28632 (* 1 = 2.28632 loss)
I0428 19:57:14.191226 28624 solver.cpp:219] Iteration 0 (-1.43237e-30 iter/s, 0.077313s/100 iters), loss = 2.27984
I0428 19:57:14.191254 28624 solver.cpp:238]     Train net output #0: loss = 2.27984 (* 1 = 2.27984 loss)
I0428 19:57:14.191268 28624 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:14.254182 28624 solver.cpp:219] Iteration 100 (1589.41 iter/s, 0.0629166s/100 iters), loss = 0.375283
I0428 19:57:14.254215 28624 solver.cpp:238]     Train net output #0: loss = 0.375283 (* 1 = 0.375283 loss)
I0428 19:57:14.254222 28624 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:14.317816 28624 solver.cpp:219] Iteration 200 (1572.47 iter/s, 0.0635943s/100 iters), loss = 0.305856
I0428 19:57:14.317857 28624 solver.cpp:238]     Train net output #0: loss = 0.305856 (* 1 = 0.305856 loss)
I0428 19:57:14.317865 28624 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:14.381736 28624 solver.cpp:219] Iteration 300 (1565.36 iter/s, 0.0638833s/100 iters), loss = 0.29414
I0428 19:57:14.381777 28624 solver.cpp:238]     Train net output #0: loss = 0.29414 (* 1 = 0.29414 loss)
I0428 19:57:14.381783 28624 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:14.445569 28624 solver.cpp:219] Iteration 400 (1567.57 iter/s, 0.0637932s/100 iters), loss = 0.21532
I0428 19:57:14.445611 28624 solver.cpp:238]     Train net output #0: loss = 0.21532 (* 1 = 0.21532 loss)
I0428 19:57:14.445618 28624 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:14.509289 28624 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:14.553889 28631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:14.554373 28624 solver.cpp:398]     Test net output #0: accuracy = 0.9443
I0428 19:57:14.554396 28624 solver.cpp:398]     Test net output #1: loss = 0.189291 (* 1 = 0.189291 loss)
I0428 19:57:14.555101 28624 solver.cpp:219] Iteration 500 (913.307 iter/s, 0.109492s/100 iters), loss = 0.271955
I0428 19:57:14.555140 28624 solver.cpp:238]     Train net output #0: loss = 0.271955 (* 1 = 0.271955 loss)
I0428 19:57:14.555147 28624 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:14.619597 28624 solver.cpp:219] Iteration 600 (1551.35 iter/s, 0.0644598s/100 iters), loss = 0.206731
I0428 19:57:14.619635 28624 solver.cpp:238]     Train net output #0: loss = 0.206731 (* 1 = 0.206731 loss)
I0428 19:57:14.619642 28624 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:14.682365 28624 solver.cpp:219] Iteration 700 (1594.07 iter/s, 0.0627325s/100 iters), loss = 0.419005
I0428 19:57:14.682399 28624 solver.cpp:238]     Train net output #0: loss = 0.419005 (* 1 = 0.419005 loss)
I0428 19:57:14.682405 28624 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:14.743238 28624 solver.cpp:219] Iteration 800 (1643.66 iter/s, 0.0608399s/100 iters), loss = 0.257032
I0428 19:57:14.743278 28624 solver.cpp:238]     Train net output #0: loss = 0.257032 (* 1 = 0.257032 loss)
I0428 19:57:14.743283 28624 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:14.804605 28624 solver.cpp:219] Iteration 900 (1630.4 iter/s, 0.0613346s/100 iters), loss = 0.271519
I0428 19:57:14.804643 28624 solver.cpp:238]     Train net output #0: loss = 0.271519 (* 1 = 0.271519 loss)
I0428 19:57:14.804649 28624 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:14.825186 28630 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:14.865628 28624 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:14.866215 28624 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:14.866590 28624 solver.cpp:311] Iteration 1000, loss = 0.186523
I0428 19:57:14.866605 28624 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:14.911109 28631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:14.911588 28624 solver.cpp:398]     Test net output #0: accuracy = 0.9598
I0428 19:57:14.911623 28624 solver.cpp:398]     Test net output #1: loss = 0.125722 (* 1 = 0.125722 loss)
I0428 19:57:14.911630 28624 solver.cpp:316] Optimization Done.
I0428 19:57:14.911633 28624 caffe.cpp:259] Optimization Done.
