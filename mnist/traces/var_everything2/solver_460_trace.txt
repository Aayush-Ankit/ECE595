I0428 19:44:56.476908 25707 caffe.cpp:218] Using GPUs 0
I0428 19:44:56.518577 25707 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:57.039796 25707 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test460.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:57.039933 25707 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test460.prototxt
I0428 19:44:57.040359 25707 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:57.040379 25707 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:57.040482 25707 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:57.040562 25707 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:57.040668 25707 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:57.040690 25707 net.cpp:86] Creating Layer mnist
I0428 19:44:57.040699 25707 net.cpp:382] mnist -> data
I0428 19:44:57.040721 25707 net.cpp:382] mnist -> label
I0428 19:44:57.041823 25707 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:57.044268 25707 net.cpp:124] Setting up mnist
I0428 19:44:57.044288 25707 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:57.044294 25707 net.cpp:131] Top shape: 64 (64)
I0428 19:44:57.044297 25707 net.cpp:139] Memory required for data: 200960
I0428 19:44:57.044304 25707 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:57.044350 25707 net.cpp:86] Creating Layer conv0
I0428 19:44:57.044373 25707 net.cpp:408] conv0 <- data
I0428 19:44:57.044385 25707 net.cpp:382] conv0 -> conv0
I0428 19:44:57.333590 25707 net.cpp:124] Setting up conv0
I0428 19:44:57.333619 25707 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:57.333623 25707 net.cpp:139] Memory required for data: 495872
I0428 19:44:57.333640 25707 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:57.333655 25707 net.cpp:86] Creating Layer pool0
I0428 19:44:57.333660 25707 net.cpp:408] pool0 <- conv0
I0428 19:44:57.333667 25707 net.cpp:382] pool0 -> pool0
I0428 19:44:57.333719 25707 net.cpp:124] Setting up pool0
I0428 19:44:57.333725 25707 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:57.333729 25707 net.cpp:139] Memory required for data: 569600
I0428 19:44:57.333732 25707 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:57.333745 25707 net.cpp:86] Creating Layer conv1
I0428 19:44:57.333748 25707 net.cpp:408] conv1 <- pool0
I0428 19:44:57.333753 25707 net.cpp:382] conv1 -> conv1
I0428 19:44:57.336727 25707 net.cpp:124] Setting up conv1
I0428 19:44:57.336745 25707 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:57.336748 25707 net.cpp:139] Memory required for data: 1388800
I0428 19:44:57.336758 25707 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:57.336767 25707 net.cpp:86] Creating Layer pool1
I0428 19:44:57.336771 25707 net.cpp:408] pool1 <- conv1
I0428 19:44:57.336776 25707 net.cpp:382] pool1 -> pool1
I0428 19:44:57.336827 25707 net.cpp:124] Setting up pool1
I0428 19:44:57.336834 25707 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:57.336838 25707 net.cpp:139] Memory required for data: 1593600
I0428 19:44:57.336840 25707 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:57.336848 25707 net.cpp:86] Creating Layer ip1
I0428 19:44:57.336853 25707 net.cpp:408] ip1 <- pool1
I0428 19:44:57.336858 25707 net.cpp:382] ip1 -> ip1
I0428 19:44:57.337232 25707 net.cpp:124] Setting up ip1
I0428 19:44:57.337240 25707 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:57.337244 25707 net.cpp:139] Memory required for data: 1606400
I0428 19:44:57.337251 25707 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:57.337257 25707 net.cpp:86] Creating Layer relu1
I0428 19:44:57.337261 25707 net.cpp:408] relu1 <- ip1
I0428 19:44:57.337266 25707 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:57.337453 25707 net.cpp:124] Setting up relu1
I0428 19:44:57.337465 25707 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:57.337467 25707 net.cpp:139] Memory required for data: 1619200
I0428 19:44:57.337471 25707 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:57.337478 25707 net.cpp:86] Creating Layer ip2
I0428 19:44:57.337481 25707 net.cpp:408] ip2 <- ip1
I0428 19:44:57.337486 25707 net.cpp:382] ip2 -> ip2
I0428 19:44:57.337594 25707 net.cpp:124] Setting up ip2
I0428 19:44:57.337602 25707 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:57.337605 25707 net.cpp:139] Memory required for data: 1621760
I0428 19:44:57.337612 25707 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:57.337618 25707 net.cpp:86] Creating Layer relu2
I0428 19:44:57.337622 25707 net.cpp:408] relu2 <- ip2
I0428 19:44:57.337626 25707 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:57.338434 25707 net.cpp:124] Setting up relu2
I0428 19:44:57.338450 25707 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:57.338454 25707 net.cpp:139] Memory required for data: 1624320
I0428 19:44:57.338459 25707 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:57.338465 25707 net.cpp:86] Creating Layer ip3
I0428 19:44:57.338469 25707 net.cpp:408] ip3 <- ip2
I0428 19:44:57.338475 25707 net.cpp:382] ip3 -> ip3
I0428 19:44:57.338587 25707 net.cpp:124] Setting up ip3
I0428 19:44:57.338595 25707 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:57.338599 25707 net.cpp:139] Memory required for data: 1626880
I0428 19:44:57.338608 25707 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:57.338613 25707 net.cpp:86] Creating Layer relu3
I0428 19:44:57.338618 25707 net.cpp:408] relu3 <- ip3
I0428 19:44:57.338621 25707 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:57.338809 25707 net.cpp:124] Setting up relu3
I0428 19:44:57.338819 25707 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:57.338824 25707 net.cpp:139] Memory required for data: 1629440
I0428 19:44:57.338827 25707 layer_factory.hpp:77] Creating layer loss
I0428 19:44:57.338834 25707 net.cpp:86] Creating Layer loss
I0428 19:44:57.338837 25707 net.cpp:408] loss <- ip3
I0428 19:44:57.338841 25707 net.cpp:408] loss <- label
I0428 19:44:57.338847 25707 net.cpp:382] loss -> loss
I0428 19:44:57.338863 25707 layer_factory.hpp:77] Creating layer loss
I0428 19:44:57.339118 25707 net.cpp:124] Setting up loss
I0428 19:44:57.339129 25707 net.cpp:131] Top shape: (1)
I0428 19:44:57.339133 25707 net.cpp:134]     with loss weight 1
I0428 19:44:57.339148 25707 net.cpp:139] Memory required for data: 1629444
I0428 19:44:57.339154 25707 net.cpp:200] loss needs backward computation.
I0428 19:44:57.339157 25707 net.cpp:200] relu3 needs backward computation.
I0428 19:44:57.339160 25707 net.cpp:200] ip3 needs backward computation.
I0428 19:44:57.339164 25707 net.cpp:200] relu2 needs backward computation.
I0428 19:44:57.339167 25707 net.cpp:200] ip2 needs backward computation.
I0428 19:44:57.339170 25707 net.cpp:200] relu1 needs backward computation.
I0428 19:44:57.339174 25707 net.cpp:200] ip1 needs backward computation.
I0428 19:44:57.339177 25707 net.cpp:200] pool1 needs backward computation.
I0428 19:44:57.339180 25707 net.cpp:200] conv1 needs backward computation.
I0428 19:44:57.339184 25707 net.cpp:200] pool0 needs backward computation.
I0428 19:44:57.339187 25707 net.cpp:200] conv0 needs backward computation.
I0428 19:44:57.339191 25707 net.cpp:202] mnist does not need backward computation.
I0428 19:44:57.339195 25707 net.cpp:244] This network produces output loss
I0428 19:44:57.339205 25707 net.cpp:257] Network initialization done.
I0428 19:44:57.339567 25707 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test460.prototxt
I0428 19:44:57.339597 25707 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:57.339699 25707 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:57.339787 25707 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:57.339835 25707 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:57.339854 25707 net.cpp:86] Creating Layer mnist
I0428 19:44:57.339859 25707 net.cpp:382] mnist -> data
I0428 19:44:57.339867 25707 net.cpp:382] mnist -> label
I0428 19:44:57.339962 25707 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:57.342387 25707 net.cpp:124] Setting up mnist
I0428 19:44:57.342406 25707 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:57.342416 25707 net.cpp:131] Top shape: 100 (100)
I0428 19:44:57.342420 25707 net.cpp:139] Memory required for data: 314000
I0428 19:44:57.342427 25707 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:57.342437 25707 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:57.342442 25707 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:57.342450 25707 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:57.342461 25707 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:57.342593 25707 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:57.342605 25707 net.cpp:131] Top shape: 100 (100)
I0428 19:44:57.342612 25707 net.cpp:131] Top shape: 100 (100)
I0428 19:44:57.342620 25707 net.cpp:139] Memory required for data: 314800
I0428 19:44:57.342627 25707 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:57.342640 25707 net.cpp:86] Creating Layer conv0
I0428 19:44:57.342645 25707 net.cpp:408] conv0 <- data
I0428 19:44:57.342654 25707 net.cpp:382] conv0 -> conv0
I0428 19:44:57.344791 25707 net.cpp:124] Setting up conv0
I0428 19:44:57.344820 25707 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:57.344828 25707 net.cpp:139] Memory required for data: 775600
I0428 19:44:57.344842 25707 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:57.344852 25707 net.cpp:86] Creating Layer pool0
I0428 19:44:57.344857 25707 net.cpp:408] pool0 <- conv0
I0428 19:44:57.344867 25707 net.cpp:382] pool0 -> pool0
I0428 19:44:57.344920 25707 net.cpp:124] Setting up pool0
I0428 19:44:57.344933 25707 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:57.344938 25707 net.cpp:139] Memory required for data: 890800
I0428 19:44:57.344943 25707 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:57.344959 25707 net.cpp:86] Creating Layer conv1
I0428 19:44:57.344964 25707 net.cpp:408] conv1 <- pool0
I0428 19:44:57.344974 25707 net.cpp:382] conv1 -> conv1
I0428 19:44:57.347090 25707 net.cpp:124] Setting up conv1
I0428 19:44:57.347110 25707 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:57.347117 25707 net.cpp:139] Memory required for data: 2170800
I0428 19:44:57.347131 25707 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:57.347139 25707 net.cpp:86] Creating Layer pool1
I0428 19:44:57.347144 25707 net.cpp:408] pool1 <- conv1
I0428 19:44:57.347153 25707 net.cpp:382] pool1 -> pool1
I0428 19:44:57.347204 25707 net.cpp:124] Setting up pool1
I0428 19:44:57.347223 25707 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:57.347229 25707 net.cpp:139] Memory required for data: 2490800
I0428 19:44:57.347234 25707 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:57.347244 25707 net.cpp:86] Creating Layer ip1
I0428 19:44:57.347249 25707 net.cpp:408] ip1 <- pool1
I0428 19:44:57.347256 25707 net.cpp:382] ip1 -> ip1
I0428 19:44:57.347810 25707 net.cpp:124] Setting up ip1
I0428 19:44:57.347821 25707 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:57.347841 25707 net.cpp:139] Memory required for data: 2510800
I0428 19:44:57.347852 25707 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:57.347862 25707 net.cpp:86] Creating Layer relu1
I0428 19:44:57.347875 25707 net.cpp:408] relu1 <- ip1
I0428 19:44:57.347882 25707 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:57.348116 25707 net.cpp:124] Setting up relu1
I0428 19:44:57.348132 25707 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:57.348139 25707 net.cpp:139] Memory required for data: 2530800
I0428 19:44:57.348145 25707 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:57.348155 25707 net.cpp:86] Creating Layer ip2
I0428 19:44:57.348160 25707 net.cpp:408] ip2 <- ip1
I0428 19:44:57.348170 25707 net.cpp:382] ip2 -> ip2
I0428 19:44:57.348316 25707 net.cpp:124] Setting up ip2
I0428 19:44:57.348326 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.348331 25707 net.cpp:139] Memory required for data: 2534800
I0428 19:44:57.348340 25707 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:57.348350 25707 net.cpp:86] Creating Layer relu2
I0428 19:44:57.348354 25707 net.cpp:408] relu2 <- ip2
I0428 19:44:57.348361 25707 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:57.348657 25707 net.cpp:124] Setting up relu2
I0428 19:44:57.348670 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.348675 25707 net.cpp:139] Memory required for data: 2538800
I0428 19:44:57.348680 25707 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:57.348691 25707 net.cpp:86] Creating Layer ip3
I0428 19:44:57.348696 25707 net.cpp:408] ip3 <- ip2
I0428 19:44:57.348706 25707 net.cpp:382] ip3 -> ip3
I0428 19:44:57.348851 25707 net.cpp:124] Setting up ip3
I0428 19:44:57.348863 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.348870 25707 net.cpp:139] Memory required for data: 2542800
I0428 19:44:57.348889 25707 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:57.348897 25707 net.cpp:86] Creating Layer relu3
I0428 19:44:57.348902 25707 net.cpp:408] relu3 <- ip3
I0428 19:44:57.348912 25707 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:57.350031 25707 net.cpp:124] Setting up relu3
I0428 19:44:57.350049 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.350054 25707 net.cpp:139] Memory required for data: 2546800
I0428 19:44:57.350059 25707 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:57.350066 25707 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:57.350071 25707 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:57.350081 25707 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:57.350090 25707 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:57.350141 25707 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:57.350152 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.350177 25707 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:57.350180 25707 net.cpp:139] Memory required for data: 2554800
I0428 19:44:57.350186 25707 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:57.350193 25707 net.cpp:86] Creating Layer accuracy
I0428 19:44:57.350198 25707 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:57.350204 25707 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:57.350211 25707 net.cpp:382] accuracy -> accuracy
I0428 19:44:57.350221 25707 net.cpp:124] Setting up accuracy
I0428 19:44:57.350227 25707 net.cpp:131] Top shape: (1)
I0428 19:44:57.350232 25707 net.cpp:139] Memory required for data: 2554804
I0428 19:44:57.350237 25707 layer_factory.hpp:77] Creating layer loss
I0428 19:44:57.350245 25707 net.cpp:86] Creating Layer loss
I0428 19:44:57.350250 25707 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:57.350256 25707 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:57.350263 25707 net.cpp:382] loss -> loss
I0428 19:44:57.350272 25707 layer_factory.hpp:77] Creating layer loss
I0428 19:44:57.350608 25707 net.cpp:124] Setting up loss
I0428 19:44:57.350622 25707 net.cpp:131] Top shape: (1)
I0428 19:44:57.350627 25707 net.cpp:134]     with loss weight 1
I0428 19:44:57.350636 25707 net.cpp:139] Memory required for data: 2554808
I0428 19:44:57.350653 25707 net.cpp:200] loss needs backward computation.
I0428 19:44:57.350659 25707 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:57.350666 25707 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:57.350670 25707 net.cpp:200] relu3 needs backward computation.
I0428 19:44:57.350674 25707 net.cpp:200] ip3 needs backward computation.
I0428 19:44:57.350679 25707 net.cpp:200] relu2 needs backward computation.
I0428 19:44:57.350683 25707 net.cpp:200] ip2 needs backward computation.
I0428 19:44:57.350688 25707 net.cpp:200] relu1 needs backward computation.
I0428 19:44:57.350692 25707 net.cpp:200] ip1 needs backward computation.
I0428 19:44:57.350697 25707 net.cpp:200] pool1 needs backward computation.
I0428 19:44:57.350703 25707 net.cpp:200] conv1 needs backward computation.
I0428 19:44:57.350709 25707 net.cpp:200] pool0 needs backward computation.
I0428 19:44:57.350714 25707 net.cpp:200] conv0 needs backward computation.
I0428 19:44:57.350720 25707 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:57.350725 25707 net.cpp:202] mnist does not need backward computation.
I0428 19:44:57.350730 25707 net.cpp:244] This network produces output accuracy
I0428 19:44:57.350735 25707 net.cpp:244] This network produces output loss
I0428 19:44:57.350752 25707 net.cpp:257] Network initialization done.
I0428 19:44:57.350812 25707 solver.cpp:56] Solver scaffolding done.
I0428 19:44:57.351277 25707 caffe.cpp:248] Starting Optimization
I0428 19:44:57.351286 25707 solver.cpp:273] Solving LeNet
I0428 19:44:57.351291 25707 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:57.352378 25707 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:57.357369 25707 blocking_queue.cpp:49] Waiting for data
I0428 19:44:57.424327 25714 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:57.424859 25707 solver.cpp:398]     Test net output #0: accuracy = 0.1239
I0428 19:44:57.424896 25707 solver.cpp:398]     Test net output #1: loss = 2.29756 (* 1 = 2.29756 loss)
I0428 19:44:57.427716 25707 solver.cpp:219] Iteration 0 (-1.51002e-30 iter/s, 0.0763955s/100 iters), loss = 2.31664
I0428 19:44:57.427758 25707 solver.cpp:238]     Train net output #0: loss = 2.31664 (* 1 = 2.31664 loss)
I0428 19:44:57.427786 25707 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:57.531370 25707 solver.cpp:219] Iteration 100 (965.269 iter/s, 0.103598s/100 iters), loss = 0.450637
I0428 19:44:57.531414 25707 solver.cpp:238]     Train net output #0: loss = 0.450637 (* 1 = 0.450637 loss)
I0428 19:44:57.531421 25707 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:57.635944 25707 solver.cpp:219] Iteration 200 (956.756 iter/s, 0.10452s/100 iters), loss = 0.246318
I0428 19:44:57.635985 25707 solver.cpp:238]     Train net output #0: loss = 0.246318 (* 1 = 0.246318 loss)
I0428 19:44:57.636008 25707 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:57.738127 25707 solver.cpp:219] Iteration 300 (979.157 iter/s, 0.102129s/100 iters), loss = 0.24361
I0428 19:44:57.738168 25707 solver.cpp:238]     Train net output #0: loss = 0.24361 (* 1 = 0.24361 loss)
I0428 19:44:57.738173 25707 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:57.843852 25707 solver.cpp:219] Iteration 400 (946.243 iter/s, 0.105681s/100 iters), loss = 0.174274
I0428 19:44:57.843879 25707 solver.cpp:238]     Train net output #0: loss = 0.174274 (* 1 = 0.174274 loss)
I0428 19:44:57.843888 25707 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:57.957839 25707 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:58.005307 25714 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:58.005853 25707 solver.cpp:398]     Test net output #0: accuracy = 0.9534
I0428 19:44:58.005892 25707 solver.cpp:398]     Test net output #1: loss = 0.147337 (* 1 = 0.147337 loss)
I0428 19:44:58.006938 25707 solver.cpp:219] Iteration 500 (613.326 iter/s, 0.163045s/100 iters), loss = 0.0687765
I0428 19:44:58.006991 25707 solver.cpp:238]     Train net output #0: loss = 0.0687766 (* 1 = 0.0687766 loss)
I0428 19:44:58.007014 25707 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:58.114897 25707 solver.cpp:219] Iteration 600 (926.833 iter/s, 0.107894s/100 iters), loss = 0.160181
I0428 19:44:58.114938 25707 solver.cpp:238]     Train net output #0: loss = 0.160181 (* 1 = 0.160181 loss)
I0428 19:44:58.114946 25707 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:58.223845 25707 solver.cpp:219] Iteration 700 (918.262 iter/s, 0.108901s/100 iters), loss = 0.132494
I0428 19:44:58.223886 25707 solver.cpp:238]     Train net output #0: loss = 0.132494 (* 1 = 0.132494 loss)
I0428 19:44:58.223894 25707 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:58.332072 25707 solver.cpp:219] Iteration 800 (924.38 iter/s, 0.108181s/100 iters), loss = 0.268936
I0428 19:44:58.332111 25707 solver.cpp:238]     Train net output #0: loss = 0.268936 (* 1 = 0.268936 loss)
I0428 19:44:58.332119 25707 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:58.437696 25707 solver.cpp:219] Iteration 900 (947.127 iter/s, 0.105582s/100 iters), loss = 0.207376
I0428 19:44:58.437733 25707 solver.cpp:238]     Train net output #0: loss = 0.207376 (* 1 = 0.207376 loss)
I0428 19:44:58.437741 25707 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:58.473094 25713 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:58.543156 25707 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:58.544775 25707 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:58.545573 25707 solver.cpp:311] Iteration 1000, loss = 0.151615
I0428 19:44:58.545589 25707 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:58.591256 25714 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:58.591774 25707 solver.cpp:398]     Test net output #0: accuracy = 0.9684
I0428 19:44:58.591810 25707 solver.cpp:398]     Test net output #1: loss = 0.101256 (* 1 = 0.101256 loss)
I0428 19:44:58.591815 25707 solver.cpp:316] Optimization Done.
I0428 19:44:58.591820 25707 caffe.cpp:259] Optimization Done.
