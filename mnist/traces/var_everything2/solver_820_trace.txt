I0428 19:58:29.235653 28987 caffe.cpp:218] Using GPUs 0
I0428 19:58:29.266898 28987 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:29.764542 28987 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test820.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:29.764705 28987 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test820.prototxt
I0428 19:58:29.765008 28987 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:29.765035 28987 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:29.765122 28987 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:29.765180 28987 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:29.765661 28987 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:29.765722 28987 net.cpp:86] Creating Layer mnist
I0428 19:58:29.765772 28987 net.cpp:382] mnist -> data
I0428 19:58:29.765821 28987 net.cpp:382] mnist -> label
I0428 19:58:29.767580 28987 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:29.771653 28987 net.cpp:124] Setting up mnist
I0428 19:58:29.771693 28987 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:29.771703 28987 net.cpp:131] Top shape: 64 (64)
I0428 19:58:29.771709 28987 net.cpp:139] Memory required for data: 200960
I0428 19:58:29.771719 28987 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:29.771762 28987 net.cpp:86] Creating Layer conv0
I0428 19:58:29.771771 28987 net.cpp:408] conv0 <- data
I0428 19:58:29.771791 28987 net.cpp:382] conv0 -> conv0
I0428 19:58:30.081365 28987 net.cpp:124] Setting up conv0
I0428 19:58:30.081396 28987 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:30.081400 28987 net.cpp:139] Memory required for data: 1675520
I0428 19:58:30.081418 28987 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:30.081432 28987 net.cpp:86] Creating Layer pool0
I0428 19:58:30.081437 28987 net.cpp:408] pool0 <- conv0
I0428 19:58:30.081444 28987 net.cpp:382] pool0 -> pool0
I0428 19:58:30.081497 28987 net.cpp:124] Setting up pool0
I0428 19:58:30.081504 28987 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:30.081526 28987 net.cpp:139] Memory required for data: 2044160
I0428 19:58:30.081531 28987 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:30.081543 28987 net.cpp:86] Creating Layer conv1
I0428 19:58:30.081547 28987 net.cpp:408] conv1 <- pool0
I0428 19:58:30.081553 28987 net.cpp:382] conv1 -> conv1
I0428 19:58:30.084626 28987 net.cpp:124] Setting up conv1
I0428 19:58:30.084643 28987 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:58:30.084647 28987 net.cpp:139] Memory required for data: 2208000
I0428 19:58:30.084657 28987 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:30.084666 28987 net.cpp:86] Creating Layer pool1
I0428 19:58:30.084671 28987 net.cpp:408] pool1 <- conv1
I0428 19:58:30.084676 28987 net.cpp:382] pool1 -> pool1
I0428 19:58:30.084719 28987 net.cpp:124] Setting up pool1
I0428 19:58:30.084727 28987 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:58:30.084729 28987 net.cpp:139] Memory required for data: 2248960
I0428 19:58:30.084733 28987 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:30.084741 28987 net.cpp:86] Creating Layer ip1
I0428 19:58:30.084745 28987 net.cpp:408] ip1 <- pool1
I0428 19:58:30.084750 28987 net.cpp:382] ip1 -> ip1
I0428 19:58:30.084879 28987 net.cpp:124] Setting up ip1
I0428 19:58:30.084889 28987 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:30.084893 28987 net.cpp:139] Memory required for data: 2251520
I0428 19:58:30.084902 28987 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:30.084908 28987 net.cpp:86] Creating Layer relu1
I0428 19:58:30.084911 28987 net.cpp:408] relu1 <- ip1
I0428 19:58:30.084916 28987 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:30.085108 28987 net.cpp:124] Setting up relu1
I0428 19:58:30.085117 28987 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:30.085121 28987 net.cpp:139] Memory required for data: 2254080
I0428 19:58:30.085125 28987 layer_factory.hpp:77] Creating layer loss
I0428 19:58:30.085132 28987 net.cpp:86] Creating Layer loss
I0428 19:58:30.085136 28987 net.cpp:408] loss <- ip1
I0428 19:58:30.085141 28987 net.cpp:408] loss <- label
I0428 19:58:30.085147 28987 net.cpp:382] loss -> loss
I0428 19:58:30.085168 28987 layer_factory.hpp:77] Creating layer loss
I0428 19:58:30.086096 28987 net.cpp:124] Setting up loss
I0428 19:58:30.086112 28987 net.cpp:131] Top shape: (1)
I0428 19:58:30.086115 28987 net.cpp:134]     with loss weight 1
I0428 19:58:30.086133 28987 net.cpp:139] Memory required for data: 2254084
I0428 19:58:30.086138 28987 net.cpp:200] loss needs backward computation.
I0428 19:58:30.086143 28987 net.cpp:200] relu1 needs backward computation.
I0428 19:58:30.086145 28987 net.cpp:200] ip1 needs backward computation.
I0428 19:58:30.086149 28987 net.cpp:200] pool1 needs backward computation.
I0428 19:58:30.086153 28987 net.cpp:200] conv1 needs backward computation.
I0428 19:58:30.086156 28987 net.cpp:200] pool0 needs backward computation.
I0428 19:58:30.086160 28987 net.cpp:200] conv0 needs backward computation.
I0428 19:58:30.086164 28987 net.cpp:202] mnist does not need backward computation.
I0428 19:58:30.086168 28987 net.cpp:244] This network produces output loss
I0428 19:58:30.086177 28987 net.cpp:257] Network initialization done.
I0428 19:58:30.086485 28987 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test820.prototxt
I0428 19:58:30.086513 28987 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:30.086603 28987 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:58:30.086688 28987 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:30.086740 28987 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:30.086753 28987 net.cpp:86] Creating Layer mnist
I0428 19:58:30.086758 28987 net.cpp:382] mnist -> data
I0428 19:58:30.086768 28987 net.cpp:382] mnist -> label
I0428 19:58:30.086866 28987 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:30.089004 28987 net.cpp:124] Setting up mnist
I0428 19:58:30.089020 28987 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:30.089025 28987 net.cpp:131] Top shape: 100 (100)
I0428 19:58:30.089030 28987 net.cpp:139] Memory required for data: 314000
I0428 19:58:30.089033 28987 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:30.089046 28987 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:30.089049 28987 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:30.089056 28987 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:30.089063 28987 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:30.089179 28987 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:30.089187 28987 net.cpp:131] Top shape: 100 (100)
I0428 19:58:30.089192 28987 net.cpp:131] Top shape: 100 (100)
I0428 19:58:30.089195 28987 net.cpp:139] Memory required for data: 314800
I0428 19:58:30.089200 28987 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:30.089210 28987 net.cpp:86] Creating Layer conv0
I0428 19:58:30.089212 28987 net.cpp:408] conv0 <- data
I0428 19:58:30.089218 28987 net.cpp:382] conv0 -> conv0
I0428 19:58:30.090098 28987 net.cpp:124] Setting up conv0
I0428 19:58:30.090112 28987 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:30.090116 28987 net.cpp:139] Memory required for data: 2618800
I0428 19:58:30.090126 28987 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:30.090133 28987 net.cpp:86] Creating Layer pool0
I0428 19:58:30.090137 28987 net.cpp:408] pool0 <- conv0
I0428 19:58:30.090143 28987 net.cpp:382] pool0 -> pool0
I0428 19:58:30.090184 28987 net.cpp:124] Setting up pool0
I0428 19:58:30.090191 28987 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:30.090194 28987 net.cpp:139] Memory required for data: 3194800
I0428 19:58:30.090198 28987 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:30.090207 28987 net.cpp:86] Creating Layer conv1
I0428 19:58:30.090210 28987 net.cpp:408] conv1 <- pool0
I0428 19:58:30.090216 28987 net.cpp:382] conv1 -> conv1
I0428 19:58:30.092478 28987 net.cpp:124] Setting up conv1
I0428 19:58:30.092494 28987 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:58:30.092499 28987 net.cpp:139] Memory required for data: 3450800
I0428 19:58:30.092509 28987 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:30.092515 28987 net.cpp:86] Creating Layer pool1
I0428 19:58:30.092532 28987 net.cpp:408] pool1 <- conv1
I0428 19:58:30.092538 28987 net.cpp:382] pool1 -> pool1
I0428 19:58:30.092589 28987 net.cpp:124] Setting up pool1
I0428 19:58:30.092597 28987 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:58:30.092599 28987 net.cpp:139] Memory required for data: 3514800
I0428 19:58:30.092604 28987 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:30.092612 28987 net.cpp:86] Creating Layer ip1
I0428 19:58:30.092614 28987 net.cpp:408] ip1 <- pool1
I0428 19:58:30.092620 28987 net.cpp:382] ip1 -> ip1
I0428 19:58:30.092749 28987 net.cpp:124] Setting up ip1
I0428 19:58:30.092757 28987 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:30.092761 28987 net.cpp:139] Memory required for data: 3518800
I0428 19:58:30.092772 28987 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:30.092777 28987 net.cpp:86] Creating Layer relu1
I0428 19:58:30.092780 28987 net.cpp:408] relu1 <- ip1
I0428 19:58:30.092785 28987 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:30.093744 28987 net.cpp:124] Setting up relu1
I0428 19:58:30.093757 28987 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:30.093762 28987 net.cpp:139] Memory required for data: 3522800
I0428 19:58:30.093766 28987 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:58:30.093775 28987 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:58:30.093778 28987 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:58:30.093785 28987 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:58:30.093791 28987 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:58:30.093835 28987 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:58:30.093842 28987 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:30.093847 28987 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:30.093850 28987 net.cpp:139] Memory required for data: 3530800
I0428 19:58:30.093854 28987 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:30.093860 28987 net.cpp:86] Creating Layer accuracy
I0428 19:58:30.093863 28987 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:58:30.093868 28987 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:30.093873 28987 net.cpp:382] accuracy -> accuracy
I0428 19:58:30.093883 28987 net.cpp:124] Setting up accuracy
I0428 19:58:30.093888 28987 net.cpp:131] Top shape: (1)
I0428 19:58:30.093890 28987 net.cpp:139] Memory required for data: 3530804
I0428 19:58:30.093894 28987 layer_factory.hpp:77] Creating layer loss
I0428 19:58:30.093899 28987 net.cpp:86] Creating Layer loss
I0428 19:58:30.093904 28987 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:58:30.093909 28987 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:30.093914 28987 net.cpp:382] loss -> loss
I0428 19:58:30.093925 28987 layer_factory.hpp:77] Creating layer loss
I0428 19:58:30.094202 28987 net.cpp:124] Setting up loss
I0428 19:58:30.094213 28987 net.cpp:131] Top shape: (1)
I0428 19:58:30.094218 28987 net.cpp:134]     with loss weight 1
I0428 19:58:30.094225 28987 net.cpp:139] Memory required for data: 3530808
I0428 19:58:30.094230 28987 net.cpp:200] loss needs backward computation.
I0428 19:58:30.094234 28987 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:30.094239 28987 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:58:30.094244 28987 net.cpp:200] relu1 needs backward computation.
I0428 19:58:30.094247 28987 net.cpp:200] ip1 needs backward computation.
I0428 19:58:30.094252 28987 net.cpp:200] pool1 needs backward computation.
I0428 19:58:30.094256 28987 net.cpp:200] conv1 needs backward computation.
I0428 19:58:30.094260 28987 net.cpp:200] pool0 needs backward computation.
I0428 19:58:30.094264 28987 net.cpp:200] conv0 needs backward computation.
I0428 19:58:30.094269 28987 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:30.094274 28987 net.cpp:202] mnist does not need backward computation.
I0428 19:58:30.094276 28987 net.cpp:244] This network produces output accuracy
I0428 19:58:30.094280 28987 net.cpp:244] This network produces output loss
I0428 19:58:30.094303 28987 net.cpp:257] Network initialization done.
I0428 19:58:30.094342 28987 solver.cpp:56] Solver scaffolding done.
I0428 19:58:30.094590 28987 caffe.cpp:248] Starting Optimization
I0428 19:58:30.094599 28987 solver.cpp:273] Solving LeNet
I0428 19:58:30.094601 28987 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:30.094761 28987 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:30.098819 28987 blocking_queue.cpp:49] Waiting for data
I0428 19:58:30.170858 28994 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:30.171344 28987 solver.cpp:398]     Test net output #0: accuracy = 0.1439
I0428 19:58:30.171368 28987 solver.cpp:398]     Test net output #1: loss = 2.27935 (* 1 = 2.27935 loss)
I0428 19:58:30.173907 28987 solver.cpp:219] Iteration 0 (-1.34899e-30 iter/s, 0.0792719s/100 iters), loss = 2.28815
I0428 19:58:30.173940 28987 solver.cpp:238]     Train net output #0: loss = 2.28815 (* 1 = 2.28815 loss)
I0428 19:58:30.173959 28987 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:30.240919 28987 solver.cpp:219] Iteration 100 (1493.21 iter/s, 0.0669696s/100 iters), loss = 0.767272
I0428 19:58:30.240954 28987 solver.cpp:238]     Train net output #0: loss = 0.767272 (* 1 = 0.767272 loss)
I0428 19:58:30.240964 28987 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:30.308686 28987 solver.cpp:219] Iteration 200 (1476.58 iter/s, 0.0677243s/100 iters), loss = 0.293027
I0428 19:58:30.308720 28987 solver.cpp:238]     Train net output #0: loss = 0.293027 (* 1 = 0.293027 loss)
I0428 19:58:30.308730 28987 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:30.376693 28987 solver.cpp:219] Iteration 300 (1471.35 iter/s, 0.0679649s/100 iters), loss = 0.293599
I0428 19:58:30.376732 28987 solver.cpp:238]     Train net output #0: loss = 0.293599 (* 1 = 0.293599 loss)
I0428 19:58:30.376741 28987 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:30.444329 28987 solver.cpp:219] Iteration 400 (1479.37 iter/s, 0.0675963s/100 iters), loss = 0.146484
I0428 19:58:30.444362 28987 solver.cpp:238]     Train net output #0: loss = 0.146484 (* 1 = 0.146484 loss)
I0428 19:58:30.444371 28987 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:30.510380 28987 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:30.586871 28994 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:30.587604 28987 solver.cpp:398]     Test net output #0: accuracy = 0.9585
I0428 19:58:30.587659 28987 solver.cpp:398]     Test net output #1: loss = 0.138253 (* 1 = 0.138253 loss)
I0428 19:58:30.588742 28987 solver.cpp:219] Iteration 500 (692.696 iter/s, 0.144364s/100 iters), loss = 0.188447
I0428 19:58:30.588802 28987 solver.cpp:238]     Train net output #0: loss = 0.188447 (* 1 = 0.188447 loss)
I0428 19:58:30.588850 28987 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:30.665805 28987 solver.cpp:219] Iteration 600 (1298.74 iter/s, 0.0769976s/100 iters), loss = 0.176858
I0428 19:58:30.665848 28987 solver.cpp:238]     Train net output #0: loss = 0.176858 (* 1 = 0.176858 loss)
I0428 19:58:30.665858 28987 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:30.733091 28987 solver.cpp:219] Iteration 700 (1487.19 iter/s, 0.067241s/100 iters), loss = 0.207147
I0428 19:58:30.733130 28987 solver.cpp:238]     Train net output #0: loss = 0.207147 (* 1 = 0.207147 loss)
I0428 19:58:30.733139 28987 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:30.799350 28987 solver.cpp:219] Iteration 800 (1510.14 iter/s, 0.066219s/100 iters), loss = 0.215852
I0428 19:58:30.799391 28987 solver.cpp:238]     Train net output #0: loss = 0.215851 (* 1 = 0.215851 loss)
I0428 19:58:30.799412 28987 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:30.872974 28987 solver.cpp:219] Iteration 900 (1359.04 iter/s, 0.0735816s/100 iters), loss = 0.336587
I0428 19:58:30.873025 28987 solver.cpp:238]     Train net output #0: loss = 0.336587 (* 1 = 0.336587 loss)
I0428 19:58:30.873039 28987 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:30.898043 28993 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:30.943975 28987 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:30.944645 28987 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:30.945294 28987 solver.cpp:311] Iteration 1000, loss = 0.189658
I0428 19:58:30.945327 28987 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:31.021888 28994 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:31.022501 28987 solver.cpp:398]     Test net output #0: accuracy = 0.9722
I0428 19:58:31.022552 28987 solver.cpp:398]     Test net output #1: loss = 0.0910849 (* 1 = 0.0910849 loss)
I0428 19:58:31.022563 28987 solver.cpp:316] Optimization Done.
I0428 19:58:31.022569 28987 caffe.cpp:259] Optimization Done.
