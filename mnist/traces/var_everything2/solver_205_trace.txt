I0428 19:34:30.048329 23341 caffe.cpp:218] Using GPUs 0
I0428 19:34:30.083679 23341 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:30.534812 23341 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test205.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:30.534965 23341 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test205.prototxt
I0428 19:34:30.535225 23341 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:30.535240 23341 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:30.535316 23341 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:30.535413 23341 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:30.535538 23341 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:30.535565 23341 net.cpp:86] Creating Layer mnist
I0428 19:34:30.535575 23341 net.cpp:382] mnist -> data
I0428 19:34:30.535601 23341 net.cpp:382] mnist -> label
I0428 19:34:30.536707 23341 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:30.538902 23341 net.cpp:124] Setting up mnist
I0428 19:34:30.538942 23341 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:30.538951 23341 net.cpp:131] Top shape: 64 (64)
I0428 19:34:30.538956 23341 net.cpp:139] Memory required for data: 200960
I0428 19:34:30.538965 23341 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:30.539000 23341 net.cpp:86] Creating Layer conv0
I0428 19:34:30.539022 23341 net.cpp:408] conv0 <- data
I0428 19:34:30.539036 23341 net.cpp:382] conv0 -> conv0
I0428 19:34:30.775005 23341 net.cpp:124] Setting up conv0
I0428 19:34:30.775034 23341 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:30.775040 23341 net.cpp:139] Memory required for data: 7573760
I0428 19:34:30.775089 23341 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:30.775106 23341 net.cpp:86] Creating Layer pool0
I0428 19:34:30.775120 23341 net.cpp:408] pool0 <- conv0
I0428 19:34:30.775128 23341 net.cpp:382] pool0 -> pool0
I0428 19:34:30.775215 23341 net.cpp:124] Setting up pool0
I0428 19:34:30.775224 23341 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:30.775229 23341 net.cpp:139] Memory required for data: 9416960
I0428 19:34:30.775252 23341 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:30.775264 23341 net.cpp:86] Creating Layer ip1
I0428 19:34:30.775270 23341 net.cpp:408] ip1 <- pool0
I0428 19:34:30.775279 23341 net.cpp:382] ip1 -> ip1
I0428 19:34:30.778439 23341 net.cpp:124] Setting up ip1
I0428 19:34:30.778453 23341 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:34:30.778458 23341 net.cpp:139] Memory required for data: 9429760
I0428 19:34:30.778470 23341 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:30.778481 23341 net.cpp:86] Creating Layer relu1
I0428 19:34:30.778486 23341 net.cpp:408] relu1 <- ip1
I0428 19:34:30.778493 23341 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:30.778653 23341 net.cpp:124] Setting up relu1
I0428 19:34:30.778663 23341 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:34:30.778667 23341 net.cpp:139] Memory required for data: 9442560
I0428 19:34:30.778673 23341 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:30.778682 23341 net.cpp:86] Creating Layer ip2
I0428 19:34:30.778687 23341 net.cpp:408] ip2 <- ip1
I0428 19:34:30.778695 23341 net.cpp:382] ip2 -> ip2
I0428 19:34:30.778791 23341 net.cpp:124] Setting up ip2
I0428 19:34:30.778800 23341 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:30.778805 23341 net.cpp:139] Memory required for data: 9445120
I0428 19:34:30.778817 23341 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:30.778830 23341 net.cpp:86] Creating Layer relu2
I0428 19:34:30.778837 23341 net.cpp:408] relu2 <- ip2
I0428 19:34:30.778844 23341 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:30.779616 23341 net.cpp:124] Setting up relu2
I0428 19:34:30.779631 23341 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:30.779637 23341 net.cpp:139] Memory required for data: 9447680
I0428 19:34:30.779644 23341 layer_factory.hpp:77] Creating layer loss
I0428 19:34:30.779652 23341 net.cpp:86] Creating Layer loss
I0428 19:34:30.779659 23341 net.cpp:408] loss <- ip2
I0428 19:34:30.779665 23341 net.cpp:408] loss <- label
I0428 19:34:30.779675 23341 net.cpp:382] loss -> loss
I0428 19:34:30.779700 23341 layer_factory.hpp:77] Creating layer loss
I0428 19:34:30.779964 23341 net.cpp:124] Setting up loss
I0428 19:34:30.779975 23341 net.cpp:131] Top shape: (1)
I0428 19:34:30.779980 23341 net.cpp:134]     with loss weight 1
I0428 19:34:30.779999 23341 net.cpp:139] Memory required for data: 9447684
I0428 19:34:30.780005 23341 net.cpp:200] loss needs backward computation.
I0428 19:34:30.780011 23341 net.cpp:200] relu2 needs backward computation.
I0428 19:34:30.780016 23341 net.cpp:200] ip2 needs backward computation.
I0428 19:34:30.780021 23341 net.cpp:200] relu1 needs backward computation.
I0428 19:34:30.780025 23341 net.cpp:200] ip1 needs backward computation.
I0428 19:34:30.780030 23341 net.cpp:200] pool0 needs backward computation.
I0428 19:34:30.780036 23341 net.cpp:200] conv0 needs backward computation.
I0428 19:34:30.780041 23341 net.cpp:202] mnist does not need backward computation.
I0428 19:34:30.780046 23341 net.cpp:244] This network produces output loss
I0428 19:34:30.780058 23341 net.cpp:257] Network initialization done.
I0428 19:34:30.780333 23341 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test205.prototxt
I0428 19:34:30.780362 23341 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:30.780436 23341 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:30.780545 23341 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:30.780633 23341 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:30.780650 23341 net.cpp:86] Creating Layer mnist
I0428 19:34:30.780658 23341 net.cpp:382] mnist -> data
I0428 19:34:30.780669 23341 net.cpp:382] mnist -> label
I0428 19:34:30.780799 23341 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:30.783143 23341 net.cpp:124] Setting up mnist
I0428 19:34:30.783157 23341 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:30.783165 23341 net.cpp:131] Top shape: 100 (100)
I0428 19:34:30.783185 23341 net.cpp:139] Memory required for data: 314000
I0428 19:34:30.783191 23341 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:30.783205 23341 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:30.783211 23341 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:30.783234 23341 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:30.783246 23341 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:30.783324 23341 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:30.783334 23341 net.cpp:131] Top shape: 100 (100)
I0428 19:34:30.783340 23341 net.cpp:131] Top shape: 100 (100)
I0428 19:34:30.783345 23341 net.cpp:139] Memory required for data: 314800
I0428 19:34:30.783350 23341 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:30.783365 23341 net.cpp:86] Creating Layer conv0
I0428 19:34:30.783371 23341 net.cpp:408] conv0 <- data
I0428 19:34:30.783380 23341 net.cpp:382] conv0 -> conv0
I0428 19:34:30.784934 23341 net.cpp:124] Setting up conv0
I0428 19:34:30.784950 23341 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:30.784956 23341 net.cpp:139] Memory required for data: 11834800
I0428 19:34:30.784986 23341 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:30.784996 23341 net.cpp:86] Creating Layer pool0
I0428 19:34:30.785007 23341 net.cpp:408] pool0 <- conv0
I0428 19:34:30.785020 23341 net.cpp:382] pool0 -> pool0
I0428 19:34:30.785066 23341 net.cpp:124] Setting up pool0
I0428 19:34:30.785075 23341 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:30.785080 23341 net.cpp:139] Memory required for data: 14714800
I0428 19:34:30.785085 23341 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:30.785099 23341 net.cpp:86] Creating Layer ip1
I0428 19:34:30.785104 23341 net.cpp:408] ip1 <- pool0
I0428 19:34:30.785115 23341 net.cpp:382] ip1 -> ip1
I0428 19:34:30.787434 23341 net.cpp:124] Setting up ip1
I0428 19:34:30.787444 23341 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:34:30.787449 23341 net.cpp:139] Memory required for data: 14734800
I0428 19:34:30.787461 23341 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:30.787470 23341 net.cpp:86] Creating Layer relu1
I0428 19:34:30.787484 23341 net.cpp:408] relu1 <- ip1
I0428 19:34:30.787492 23341 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:30.787669 23341 net.cpp:124] Setting up relu1
I0428 19:34:30.787678 23341 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:34:30.787700 23341 net.cpp:139] Memory required for data: 14754800
I0428 19:34:30.787706 23341 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:30.787716 23341 net.cpp:86] Creating Layer ip2
I0428 19:34:30.787721 23341 net.cpp:408] ip2 <- ip1
I0428 19:34:30.787729 23341 net.cpp:382] ip2 -> ip2
I0428 19:34:30.787832 23341 net.cpp:124] Setting up ip2
I0428 19:34:30.787840 23341 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:30.787845 23341 net.cpp:139] Memory required for data: 14758800
I0428 19:34:30.787858 23341 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:30.787866 23341 net.cpp:86] Creating Layer relu2
I0428 19:34:30.787873 23341 net.cpp:408] relu2 <- ip2
I0428 19:34:30.787879 23341 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:30.788059 23341 net.cpp:124] Setting up relu2
I0428 19:34:30.788069 23341 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:30.788074 23341 net.cpp:139] Memory required for data: 14762800
I0428 19:34:30.788079 23341 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:30.788094 23341 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:30.788100 23341 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:30.788106 23341 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:30.788116 23341 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:30.788172 23341 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:30.788179 23341 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:30.788185 23341 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:30.788190 23341 net.cpp:139] Memory required for data: 14770800
I0428 19:34:30.788194 23341 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:30.788203 23341 net.cpp:86] Creating Layer accuracy
I0428 19:34:30.788208 23341 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:30.788215 23341 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:30.788223 23341 net.cpp:382] accuracy -> accuracy
I0428 19:34:30.788233 23341 net.cpp:124] Setting up accuracy
I0428 19:34:30.788241 23341 net.cpp:131] Top shape: (1)
I0428 19:34:30.788246 23341 net.cpp:139] Memory required for data: 14770804
I0428 19:34:30.788251 23341 layer_factory.hpp:77] Creating layer loss
I0428 19:34:30.788262 23341 net.cpp:86] Creating Layer loss
I0428 19:34:30.788269 23341 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:30.788275 23341 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:30.788295 23341 net.cpp:382] loss -> loss
I0428 19:34:30.788305 23341 layer_factory.hpp:77] Creating layer loss
I0428 19:34:30.789405 23341 net.cpp:124] Setting up loss
I0428 19:34:30.789418 23341 net.cpp:131] Top shape: (1)
I0428 19:34:30.789423 23341 net.cpp:134]     with loss weight 1
I0428 19:34:30.789432 23341 net.cpp:139] Memory required for data: 14770808
I0428 19:34:30.789438 23341 net.cpp:200] loss needs backward computation.
I0428 19:34:30.789443 23341 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:30.789448 23341 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:30.789453 23341 net.cpp:200] relu2 needs backward computation.
I0428 19:34:30.789458 23341 net.cpp:200] ip2 needs backward computation.
I0428 19:34:30.789463 23341 net.cpp:200] relu1 needs backward computation.
I0428 19:34:30.789466 23341 net.cpp:200] ip1 needs backward computation.
I0428 19:34:30.789471 23341 net.cpp:200] pool0 needs backward computation.
I0428 19:34:30.789476 23341 net.cpp:200] conv0 needs backward computation.
I0428 19:34:30.789481 23341 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:30.789486 23341 net.cpp:202] mnist does not need backward computation.
I0428 19:34:30.789490 23341 net.cpp:244] This network produces output accuracy
I0428 19:34:30.789496 23341 net.cpp:244] This network produces output loss
I0428 19:34:30.789511 23341 net.cpp:257] Network initialization done.
I0428 19:34:30.789548 23341 solver.cpp:56] Solver scaffolding done.
I0428 19:34:30.789741 23341 caffe.cpp:248] Starting Optimization
I0428 19:34:30.789748 23341 solver.cpp:273] Solving LeNet
I0428 19:34:30.789764 23341 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:30.791719 23341 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:30.887542 23348 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:30.890018 23341 solver.cpp:398]     Test net output #0: accuracy = 0.1246
I0428 19:34:30.890040 23341 solver.cpp:398]     Test net output #1: loss = 2.29827 (* 1 = 2.29827 loss)
I0428 19:34:30.894361 23341 solver.cpp:219] Iteration 0 (0 iter/s, 0.104564s/100 iters), loss = 2.28073
I0428 19:34:30.894387 23341 solver.cpp:238]     Train net output #0: loss = 2.28073 (* 1 = 2.28073 loss)
I0428 19:34:30.894419 23341 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:31.036115 23341 solver.cpp:219] Iteration 100 (705.654 iter/s, 0.141712s/100 iters), loss = 1.0486
I0428 19:34:31.036144 23341 solver.cpp:238]     Train net output #0: loss = 1.0486 (* 1 = 1.0486 loss)
I0428 19:34:31.036170 23341 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:31.175438 23341 solver.cpp:219] Iteration 200 (717.955 iter/s, 0.139284s/100 iters), loss = 0.619706
I0428 19:34:31.175467 23341 solver.cpp:238]     Train net output #0: loss = 0.619706 (* 1 = 0.619706 loss)
I0428 19:34:31.175492 23341 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:31.314632 23341 solver.cpp:219] Iteration 300 (718.61 iter/s, 0.139158s/100 iters), loss = 0.607285
I0428 19:34:31.314661 23341 solver.cpp:238]     Train net output #0: loss = 0.607285 (* 1 = 0.607285 loss)
I0428 19:34:31.314671 23341 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:31.453717 23341 solver.cpp:219] Iteration 400 (719.182 iter/s, 0.139047s/100 iters), loss = 0.411203
I0428 19:34:31.453758 23341 solver.cpp:238]     Train net output #0: loss = 0.411203 (* 1 = 0.411203 loss)
I0428 19:34:31.453783 23341 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:31.592084 23341 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:31.684389 23348 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:31.686914 23341 solver.cpp:398]     Test net output #0: accuracy = 0.8466
I0428 19:34:31.686935 23341 solver.cpp:398]     Test net output #1: loss = 0.424708 (* 1 = 0.424708 loss)
I0428 19:34:31.688303 23341 solver.cpp:219] Iteration 500 (426.359 iter/s, 0.234544s/100 iters), loss = 0.409885
I0428 19:34:31.688344 23341 solver.cpp:238]     Train net output #0: loss = 0.409885 (* 1 = 0.409885 loss)
I0428 19:34:31.688370 23341 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:31.827805 23341 solver.cpp:219] Iteration 600 (717.096 iter/s, 0.139451s/100 iters), loss = 0.347008
I0428 19:34:31.827833 23341 solver.cpp:238]     Train net output #0: loss = 0.347008 (* 1 = 0.347008 loss)
I0428 19:34:31.827843 23341 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:31.967847 23341 solver.cpp:219] Iteration 700 (714.269 iter/s, 0.140003s/100 iters), loss = 0.401686
I0428 19:34:31.967878 23341 solver.cpp:238]     Train net output #0: loss = 0.401686 (* 1 = 0.401686 loss)
I0428 19:34:31.967905 23341 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:32.105674 23341 solver.cpp:219] Iteration 800 (725.761 iter/s, 0.137786s/100 iters), loss = 0.257952
I0428 19:34:32.105702 23341 solver.cpp:238]     Train net output #0: loss = 0.257951 (* 1 = 0.257951 loss)
I0428 19:34:32.105711 23341 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:32.242887 23341 solver.cpp:219] Iteration 900 (729 iter/s, 0.137174s/100 iters), loss = 0.220976
I0428 19:34:32.242913 23341 solver.cpp:238]     Train net output #0: loss = 0.220976 (* 1 = 0.220976 loss)
I0428 19:34:32.242938 23341 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:32.288765 23347 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:32.379528 23341 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:32.385045 23341 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:32.388448 23341 solver.cpp:311] Iteration 1000, loss = 0.101559
I0428 19:34:32.388464 23341 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:32.483325 23348 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:32.485502 23341 solver.cpp:398]     Test net output #0: accuracy = 0.971
I0428 19:34:32.485523 23341 solver.cpp:398]     Test net output #1: loss = 0.0955765 (* 1 = 0.0955765 loss)
I0428 19:34:32.485532 23341 solver.cpp:316] Optimization Done.
I0428 19:34:32.485551 23341 caffe.cpp:259] Optimization Done.
