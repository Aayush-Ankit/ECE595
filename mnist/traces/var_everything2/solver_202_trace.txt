I0428 19:34:21.666939 23317 caffe.cpp:218] Using GPUs 0
I0428 19:34:21.704308 23317 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:22.213138 23317 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test202.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:22.213284 23317 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test202.prototxt
I0428 19:34:22.213619 23317 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:22.213634 23317 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:22.213713 23317 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:22.213788 23317 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:22.213888 23317 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:22.213915 23317 net.cpp:86] Creating Layer mnist
I0428 19:34:22.213927 23317 net.cpp:382] mnist -> data
I0428 19:34:22.213953 23317 net.cpp:382] mnist -> label
I0428 19:34:22.215039 23317 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:22.217492 23317 net.cpp:124] Setting up mnist
I0428 19:34:22.217509 23317 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:22.217516 23317 net.cpp:131] Top shape: 64 (64)
I0428 19:34:22.217519 23317 net.cpp:139] Memory required for data: 200960
I0428 19:34:22.217526 23317 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:22.217558 23317 net.cpp:86] Creating Layer conv0
I0428 19:34:22.217564 23317 net.cpp:408] conv0 <- data
I0428 19:34:22.217577 23317 net.cpp:382] conv0 -> conv0
I0428 19:34:22.499872 23317 net.cpp:124] Setting up conv0
I0428 19:34:22.499898 23317 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:22.499902 23317 net.cpp:139] Memory required for data: 7573760
I0428 19:34:22.499917 23317 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:22.499933 23317 net.cpp:86] Creating Layer pool0
I0428 19:34:22.499938 23317 net.cpp:408] pool0 <- conv0
I0428 19:34:22.499943 23317 net.cpp:382] pool0 -> pool0
I0428 19:34:22.499987 23317 net.cpp:124] Setting up pool0
I0428 19:34:22.499992 23317 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:22.499995 23317 net.cpp:139] Memory required for data: 9416960
I0428 19:34:22.500015 23317 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:22.500023 23317 net.cpp:86] Creating Layer ip1
I0428 19:34:22.500026 23317 net.cpp:408] ip1 <- pool0
I0428 19:34:22.500031 23317 net.cpp:382] ip1 -> ip1
I0428 19:34:22.501986 23317 net.cpp:124] Setting up ip1
I0428 19:34:22.502001 23317 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:34:22.502004 23317 net.cpp:139] Memory required for data: 9423360
I0428 19:34:22.502012 23317 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:22.502035 23317 net.cpp:86] Creating Layer relu1
I0428 19:34:22.502039 23317 net.cpp:408] relu1 <- ip1
I0428 19:34:22.502044 23317 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:22.502244 23317 net.cpp:124] Setting up relu1
I0428 19:34:22.502254 23317 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:34:22.502257 23317 net.cpp:139] Memory required for data: 9429760
I0428 19:34:22.502260 23317 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:22.502267 23317 net.cpp:86] Creating Layer ip2
I0428 19:34:22.502270 23317 net.cpp:408] ip2 <- ip1
I0428 19:34:22.502275 23317 net.cpp:382] ip2 -> ip2
I0428 19:34:22.502367 23317 net.cpp:124] Setting up ip2
I0428 19:34:22.502374 23317 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:22.502378 23317 net.cpp:139] Memory required for data: 9432320
I0428 19:34:22.502385 23317 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:22.502390 23317 net.cpp:86] Creating Layer relu2
I0428 19:34:22.502394 23317 net.cpp:408] relu2 <- ip2
I0428 19:34:22.502398 23317 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:22.503191 23317 net.cpp:124] Setting up relu2
I0428 19:34:22.503218 23317 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:22.503237 23317 net.cpp:139] Memory required for data: 9434880
I0428 19:34:22.503242 23317 layer_factory.hpp:77] Creating layer loss
I0428 19:34:22.503247 23317 net.cpp:86] Creating Layer loss
I0428 19:34:22.503252 23317 net.cpp:408] loss <- ip2
I0428 19:34:22.503257 23317 net.cpp:408] loss <- label
I0428 19:34:22.503262 23317 net.cpp:382] loss -> loss
I0428 19:34:22.503278 23317 layer_factory.hpp:77] Creating layer loss
I0428 19:34:22.503511 23317 net.cpp:124] Setting up loss
I0428 19:34:22.503520 23317 net.cpp:131] Top shape: (1)
I0428 19:34:22.503523 23317 net.cpp:134]     with loss weight 1
I0428 19:34:22.503537 23317 net.cpp:139] Memory required for data: 9434884
I0428 19:34:22.503541 23317 net.cpp:200] loss needs backward computation.
I0428 19:34:22.503545 23317 net.cpp:200] relu2 needs backward computation.
I0428 19:34:22.503548 23317 net.cpp:200] ip2 needs backward computation.
I0428 19:34:22.503551 23317 net.cpp:200] relu1 needs backward computation.
I0428 19:34:22.503553 23317 net.cpp:200] ip1 needs backward computation.
I0428 19:34:22.503557 23317 net.cpp:200] pool0 needs backward computation.
I0428 19:34:22.503561 23317 net.cpp:200] conv0 needs backward computation.
I0428 19:34:22.503563 23317 net.cpp:202] mnist does not need backward computation.
I0428 19:34:22.503566 23317 net.cpp:244] This network produces output loss
I0428 19:34:22.503573 23317 net.cpp:257] Network initialization done.
I0428 19:34:22.503818 23317 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test202.prototxt
I0428 19:34:22.503841 23317 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:22.503912 23317 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:22.503995 23317 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:22.504053 23317 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:22.504067 23317 net.cpp:86] Creating Layer mnist
I0428 19:34:22.504071 23317 net.cpp:382] mnist -> data
I0428 19:34:22.504079 23317 net.cpp:382] mnist -> label
I0428 19:34:22.504163 23317 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:22.505489 23317 net.cpp:124] Setting up mnist
I0428 19:34:22.505503 23317 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:22.505509 23317 net.cpp:131] Top shape: 100 (100)
I0428 19:34:22.505513 23317 net.cpp:139] Memory required for data: 314000
I0428 19:34:22.505517 23317 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:22.505523 23317 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:22.505527 23317 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:22.505532 23317 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:22.505539 23317 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:22.505605 23317 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:22.505625 23317 net.cpp:131] Top shape: 100 (100)
I0428 19:34:22.505630 23317 net.cpp:131] Top shape: 100 (100)
I0428 19:34:22.505632 23317 net.cpp:139] Memory required for data: 314800
I0428 19:34:22.505635 23317 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:22.505643 23317 net.cpp:86] Creating Layer conv0
I0428 19:34:22.505646 23317 net.cpp:408] conv0 <- data
I0428 19:34:22.505666 23317 net.cpp:382] conv0 -> conv0
I0428 19:34:22.507294 23317 net.cpp:124] Setting up conv0
I0428 19:34:22.507308 23317 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:22.507311 23317 net.cpp:139] Memory required for data: 11834800
I0428 19:34:22.507320 23317 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:22.507326 23317 net.cpp:86] Creating Layer pool0
I0428 19:34:22.507329 23317 net.cpp:408] pool0 <- conv0
I0428 19:34:22.507334 23317 net.cpp:382] pool0 -> pool0
I0428 19:34:22.507369 23317 net.cpp:124] Setting up pool0
I0428 19:34:22.507374 23317 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:22.507376 23317 net.cpp:139] Memory required for data: 14714800
I0428 19:34:22.507380 23317 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:22.507385 23317 net.cpp:86] Creating Layer ip1
I0428 19:34:22.507388 23317 net.cpp:408] ip1 <- pool0
I0428 19:34:22.507393 23317 net.cpp:382] ip1 -> ip1
I0428 19:34:22.509376 23317 net.cpp:124] Setting up ip1
I0428 19:34:22.509387 23317 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:34:22.509392 23317 net.cpp:139] Memory required for data: 14724800
I0428 19:34:22.509399 23317 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:22.509404 23317 net.cpp:86] Creating Layer relu1
I0428 19:34:22.509408 23317 net.cpp:408] relu1 <- ip1
I0428 19:34:22.509413 23317 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:22.509589 23317 net.cpp:124] Setting up relu1
I0428 19:34:22.509599 23317 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:34:22.509613 23317 net.cpp:139] Memory required for data: 14734800
I0428 19:34:22.509616 23317 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:22.509621 23317 net.cpp:86] Creating Layer ip2
I0428 19:34:22.509625 23317 net.cpp:408] ip2 <- ip1
I0428 19:34:22.509630 23317 net.cpp:382] ip2 -> ip2
I0428 19:34:22.509740 23317 net.cpp:124] Setting up ip2
I0428 19:34:22.509749 23317 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:22.509752 23317 net.cpp:139] Memory required for data: 14738800
I0428 19:34:22.509760 23317 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:22.509765 23317 net.cpp:86] Creating Layer relu2
I0428 19:34:22.509768 23317 net.cpp:408] relu2 <- ip2
I0428 19:34:22.509773 23317 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:22.509943 23317 net.cpp:124] Setting up relu2
I0428 19:34:22.509951 23317 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:22.509954 23317 net.cpp:139] Memory required for data: 14742800
I0428 19:34:22.509964 23317 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:22.509970 23317 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:22.509974 23317 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:22.509979 23317 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:22.509984 23317 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:22.510016 23317 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:22.510021 23317 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:22.510025 23317 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:22.510027 23317 net.cpp:139] Memory required for data: 14750800
I0428 19:34:22.510030 23317 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:22.510036 23317 net.cpp:86] Creating Layer accuracy
I0428 19:34:22.510038 23317 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:22.510042 23317 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:22.510047 23317 net.cpp:382] accuracy -> accuracy
I0428 19:34:22.510054 23317 net.cpp:124] Setting up accuracy
I0428 19:34:22.510058 23317 net.cpp:131] Top shape: (1)
I0428 19:34:22.510061 23317 net.cpp:139] Memory required for data: 14750804
I0428 19:34:22.510063 23317 layer_factory.hpp:77] Creating layer loss
I0428 19:34:22.510074 23317 net.cpp:86] Creating Layer loss
I0428 19:34:22.510077 23317 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:22.510082 23317 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:22.510085 23317 net.cpp:382] loss -> loss
I0428 19:34:22.510092 23317 layer_factory.hpp:77] Creating layer loss
I0428 19:34:22.510974 23317 net.cpp:124] Setting up loss
I0428 19:34:22.510987 23317 net.cpp:131] Top shape: (1)
I0428 19:34:22.510990 23317 net.cpp:134]     with loss weight 1
I0428 19:34:22.510996 23317 net.cpp:139] Memory required for data: 14750808
I0428 19:34:22.510999 23317 net.cpp:200] loss needs backward computation.
I0428 19:34:22.511004 23317 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:22.511008 23317 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:22.511011 23317 net.cpp:200] relu2 needs backward computation.
I0428 19:34:22.511014 23317 net.cpp:200] ip2 needs backward computation.
I0428 19:34:22.511018 23317 net.cpp:200] relu1 needs backward computation.
I0428 19:34:22.511020 23317 net.cpp:200] ip1 needs backward computation.
I0428 19:34:22.511023 23317 net.cpp:200] pool0 needs backward computation.
I0428 19:34:22.511026 23317 net.cpp:200] conv0 needs backward computation.
I0428 19:34:22.511029 23317 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:22.511034 23317 net.cpp:202] mnist does not need backward computation.
I0428 19:34:22.511036 23317 net.cpp:244] This network produces output accuracy
I0428 19:34:22.511040 23317 net.cpp:244] This network produces output loss
I0428 19:34:22.511049 23317 net.cpp:257] Network initialization done.
I0428 19:34:22.511093 23317 solver.cpp:56] Solver scaffolding done.
I0428 19:34:22.511287 23317 caffe.cpp:248] Starting Optimization
I0428 19:34:22.511294 23317 solver.cpp:273] Solving LeNet
I0428 19:34:22.511307 23317 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:22.512056 23317 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:22.607326 23324 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:22.609755 23317 solver.cpp:398]     Test net output #0: accuracy = 0.089
I0428 19:34:22.609773 23317 solver.cpp:398]     Test net output #1: loss = 2.34015 (* 1 = 2.34015 loss)
I0428 19:34:22.614056 23317 solver.cpp:219] Iteration 0 (0 iter/s, 0.102724s/100 iters), loss = 2.32354
I0428 19:34:22.614078 23317 solver.cpp:238]     Train net output #0: loss = 2.32354 (* 1 = 2.32354 loss)
I0428 19:34:22.614104 23317 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:22.758013 23317 solver.cpp:219] Iteration 100 (694.835 iter/s, 0.143919s/100 iters), loss = 0.456174
I0428 19:34:22.758049 23317 solver.cpp:238]     Train net output #0: loss = 0.456174 (* 1 = 0.456174 loss)
I0428 19:34:22.758057 23317 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:22.896901 23317 solver.cpp:219] Iteration 200 (720.253 iter/s, 0.13884s/100 iters), loss = 0.612937
I0428 19:34:22.896934 23317 solver.cpp:238]     Train net output #0: loss = 0.612937 (* 1 = 0.612937 loss)
I0428 19:34:22.896944 23317 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:23.037174 23317 solver.cpp:219] Iteration 300 (713.127 iter/s, 0.140227s/100 iters), loss = 0.409436
I0428 19:34:23.037206 23317 solver.cpp:238]     Train net output #0: loss = 0.409436 (* 1 = 0.409436 loss)
I0428 19:34:23.037214 23317 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:23.177024 23317 solver.cpp:219] Iteration 400 (715.284 iter/s, 0.139805s/100 iters), loss = 0.375108
I0428 19:34:23.177057 23317 solver.cpp:238]     Train net output #0: loss = 0.375108 (* 1 = 0.375108 loss)
I0428 19:34:23.177064 23317 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:23.314365 23317 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:23.411860 23324 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:23.415302 23317 solver.cpp:398]     Test net output #0: accuracy = 0.8527
I0428 19:34:23.415325 23317 solver.cpp:398]     Test net output #1: loss = 0.410092 (* 1 = 0.410092 loss)
I0428 19:34:23.416615 23317 solver.cpp:219] Iteration 500 (417.463 iter/s, 0.239542s/100 iters), loss = 0.519306
I0428 19:34:23.416640 23317 solver.cpp:238]     Train net output #0: loss = 0.519306 (* 1 = 0.519306 loss)
I0428 19:34:23.416651 23317 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:23.556171 23317 solver.cpp:219] Iteration 600 (716.758 iter/s, 0.139517s/100 iters), loss = 0.50948
I0428 19:34:23.556210 23317 solver.cpp:238]     Train net output #0: loss = 0.50948 (* 1 = 0.50948 loss)
I0428 19:34:23.556221 23317 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:23.693707 23317 solver.cpp:219] Iteration 700 (727.335 iter/s, 0.137488s/100 iters), loss = 0.399826
I0428 19:34:23.693733 23317 solver.cpp:238]     Train net output #0: loss = 0.399826 (* 1 = 0.399826 loss)
I0428 19:34:23.693739 23317 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:23.832664 23317 solver.cpp:219] Iteration 800 (719.844 iter/s, 0.138919s/100 iters), loss = 0.574489
I0428 19:34:23.832695 23317 solver.cpp:238]     Train net output #0: loss = 0.574489 (* 1 = 0.574489 loss)
I0428 19:34:23.832700 23317 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:23.971017 23317 solver.cpp:219] Iteration 900 (723.015 iter/s, 0.13831s/100 iters), loss = 0.679699
I0428 19:34:23.971045 23317 solver.cpp:238]     Train net output #0: loss = 0.679699 (* 1 = 0.679699 loss)
I0428 19:34:23.971051 23317 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:24.016300 23323 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:24.106787 23317 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:24.112195 23317 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:24.114960 23317 solver.cpp:311] Iteration 1000, loss = 0.358232
I0428 19:34:24.114982 23317 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:24.212697 23324 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:24.215991 23317 solver.cpp:398]     Test net output #0: accuracy = 0.8688
I0428 19:34:24.216011 23317 solver.cpp:398]     Test net output #1: loss = 0.354133 (* 1 = 0.354133 loss)
I0428 19:34:24.216015 23317 solver.cpp:316] Optimization Done.
I0428 19:34:24.216018 23317 caffe.cpp:259] Optimization Done.
