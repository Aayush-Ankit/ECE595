I0428 19:50:35.569186 27050 caffe.cpp:218] Using GPUs 0
I0428 19:50:35.602893 27050 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:50:36.099074 27050 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test609.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:50:36.099241 27050 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test609.prototxt
I0428 19:50:36.099651 27050 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:50:36.099676 27050 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:50:36.099794 27050 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:36.099910 27050 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:36.100036 27050 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:50:36.100069 27050 net.cpp:86] Creating Layer mnist
I0428 19:50:36.100080 27050 net.cpp:382] mnist -> data
I0428 19:50:36.100112 27050 net.cpp:382] mnist -> label
I0428 19:50:36.101366 27050 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:50:36.103981 27050 net.cpp:124] Setting up mnist
I0428 19:50:36.103999 27050 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:50:36.104010 27050 net.cpp:131] Top shape: 64 (64)
I0428 19:50:36.104015 27050 net.cpp:139] Memory required for data: 200960
I0428 19:50:36.104027 27050 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:36.104053 27050 net.cpp:86] Creating Layer conv0
I0428 19:50:36.104076 27050 net.cpp:408] conv0 <- data
I0428 19:50:36.104095 27050 net.cpp:382] conv0 -> conv0
I0428 19:50:36.389401 27050 net.cpp:124] Setting up conv0
I0428 19:50:36.389436 27050 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:50:36.389443 27050 net.cpp:139] Memory required for data: 938240
I0428 19:50:36.389467 27050 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:36.389488 27050 net.cpp:86] Creating Layer pool0
I0428 19:50:36.389504 27050 net.cpp:408] pool0 <- conv0
I0428 19:50:36.389516 27050 net.cpp:382] pool0 -> pool0
I0428 19:50:36.389587 27050 net.cpp:124] Setting up pool0
I0428 19:50:36.389598 27050 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:50:36.389605 27050 net.cpp:139] Memory required for data: 1122560
I0428 19:50:36.389611 27050 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:36.389631 27050 net.cpp:86] Creating Layer conv1
I0428 19:50:36.389638 27050 net.cpp:408] conv1 <- pool0
I0428 19:50:36.389648 27050 net.cpp:382] conv1 -> conv1
I0428 19:50:36.392714 27050 net.cpp:124] Setting up conv1
I0428 19:50:36.392734 27050 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:50:36.392740 27050 net.cpp:139] Memory required for data: 1286400
I0428 19:50:36.392756 27050 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:36.392769 27050 net.cpp:86] Creating Layer pool1
I0428 19:50:36.392776 27050 net.cpp:408] pool1 <- conv1
I0428 19:50:36.392786 27050 net.cpp:382] pool1 -> pool1
I0428 19:50:36.392848 27050 net.cpp:124] Setting up pool1
I0428 19:50:36.392859 27050 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:50:36.392865 27050 net.cpp:139] Memory required for data: 1327360
I0428 19:50:36.392871 27050 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:36.392884 27050 net.cpp:86] Creating Layer ip1
I0428 19:50:36.392891 27050 net.cpp:408] ip1 <- pool1
I0428 19:50:36.392901 27050 net.cpp:382] ip1 -> ip1
I0428 19:50:36.393052 27050 net.cpp:124] Setting up ip1
I0428 19:50:36.393064 27050 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:50:36.393069 27050 net.cpp:139] Memory required for data: 1333760
I0428 19:50:36.393085 27050 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:36.393095 27050 net.cpp:86] Creating Layer relu1
I0428 19:50:36.393106 27050 net.cpp:408] relu1 <- ip1
I0428 19:50:36.393115 27050 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:36.393318 27050 net.cpp:124] Setting up relu1
I0428 19:50:36.393331 27050 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:50:36.393337 27050 net.cpp:139] Memory required for data: 1340160
I0428 19:50:36.393343 27050 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:36.393354 27050 net.cpp:86] Creating Layer ip2
I0428 19:50:36.393362 27050 net.cpp:408] ip2 <- ip1
I0428 19:50:36.393371 27050 net.cpp:382] ip2 -> ip2
I0428 19:50:36.393496 27050 net.cpp:124] Setting up ip2
I0428 19:50:36.393506 27050 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:50:36.393512 27050 net.cpp:139] Memory required for data: 1346560
I0428 19:50:36.393523 27050 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:36.393534 27050 net.cpp:86] Creating Layer relu2
I0428 19:50:36.393542 27050 net.cpp:408] relu2 <- ip2
I0428 19:50:36.393550 27050 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:36.394394 27050 net.cpp:124] Setting up relu2
I0428 19:50:36.394412 27050 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:50:36.394418 27050 net.cpp:139] Memory required for data: 1352960
I0428 19:50:36.394424 27050 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:36.394436 27050 net.cpp:86] Creating Layer ip3
I0428 19:50:36.394444 27050 net.cpp:408] ip3 <- ip2
I0428 19:50:36.394455 27050 net.cpp:382] ip3 -> ip3
I0428 19:50:36.394579 27050 net.cpp:124] Setting up ip3
I0428 19:50:36.394590 27050 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:36.394596 27050 net.cpp:139] Memory required for data: 1355520
I0428 19:50:36.394611 27050 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:36.394623 27050 net.cpp:86] Creating Layer relu3
I0428 19:50:36.394629 27050 net.cpp:408] relu3 <- ip3
I0428 19:50:36.394639 27050 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:36.394847 27050 net.cpp:124] Setting up relu3
I0428 19:50:36.394860 27050 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:36.394866 27050 net.cpp:139] Memory required for data: 1358080
I0428 19:50:36.394872 27050 layer_factory.hpp:77] Creating layer loss
I0428 19:50:36.394882 27050 net.cpp:86] Creating Layer loss
I0428 19:50:36.394888 27050 net.cpp:408] loss <- ip3
I0428 19:50:36.394896 27050 net.cpp:408] loss <- label
I0428 19:50:36.394907 27050 net.cpp:382] loss -> loss
I0428 19:50:36.394933 27050 layer_factory.hpp:77] Creating layer loss
I0428 19:50:36.395207 27050 net.cpp:124] Setting up loss
I0428 19:50:36.395220 27050 net.cpp:131] Top shape: (1)
I0428 19:50:36.395226 27050 net.cpp:134]     with loss weight 1
I0428 19:50:36.395249 27050 net.cpp:139] Memory required for data: 1358084
I0428 19:50:36.395257 27050 net.cpp:200] loss needs backward computation.
I0428 19:50:36.395264 27050 net.cpp:200] relu3 needs backward computation.
I0428 19:50:36.395270 27050 net.cpp:200] ip3 needs backward computation.
I0428 19:50:36.395277 27050 net.cpp:200] relu2 needs backward computation.
I0428 19:50:36.395282 27050 net.cpp:200] ip2 needs backward computation.
I0428 19:50:36.395289 27050 net.cpp:200] relu1 needs backward computation.
I0428 19:50:36.395294 27050 net.cpp:200] ip1 needs backward computation.
I0428 19:50:36.395300 27050 net.cpp:200] pool1 needs backward computation.
I0428 19:50:36.395308 27050 net.cpp:200] conv1 needs backward computation.
I0428 19:50:36.395313 27050 net.cpp:200] pool0 needs backward computation.
I0428 19:50:36.395320 27050 net.cpp:200] conv0 needs backward computation.
I0428 19:50:36.395328 27050 net.cpp:202] mnist does not need backward computation.
I0428 19:50:36.395334 27050 net.cpp:244] This network produces output loss
I0428 19:50:36.395350 27050 net.cpp:257] Network initialization done.
I0428 19:50:36.395735 27050 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test609.prototxt
I0428 19:50:36.395776 27050 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:50:36.395894 27050 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:36.396028 27050 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:36.396101 27050 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:50:36.396121 27050 net.cpp:86] Creating Layer mnist
I0428 19:50:36.396131 27050 net.cpp:382] mnist -> data
I0428 19:50:36.396144 27050 net.cpp:382] mnist -> label
I0428 19:50:36.396286 27050 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:50:36.398679 27050 net.cpp:124] Setting up mnist
I0428 19:50:36.398696 27050 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:50:36.398706 27050 net.cpp:131] Top shape: 100 (100)
I0428 19:50:36.398712 27050 net.cpp:139] Memory required for data: 314000
I0428 19:50:36.398720 27050 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:50:36.398751 27050 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:50:36.398758 27050 net.cpp:408] label_mnist_1_split <- label
I0428 19:50:36.398768 27050 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:50:36.398782 27050 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:50:36.398880 27050 net.cpp:124] Setting up label_mnist_1_split
I0428 19:50:36.398890 27050 net.cpp:131] Top shape: 100 (100)
I0428 19:50:36.398898 27050 net.cpp:131] Top shape: 100 (100)
I0428 19:50:36.398905 27050 net.cpp:139] Memory required for data: 314800
I0428 19:50:36.398910 27050 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:36.398926 27050 net.cpp:86] Creating Layer conv0
I0428 19:50:36.398934 27050 net.cpp:408] conv0 <- data
I0428 19:50:36.398944 27050 net.cpp:382] conv0 -> conv0
I0428 19:50:36.400595 27050 net.cpp:124] Setting up conv0
I0428 19:50:36.400614 27050 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:50:36.400620 27050 net.cpp:139] Memory required for data: 1466800
I0428 19:50:36.400637 27050 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:36.400650 27050 net.cpp:86] Creating Layer pool0
I0428 19:50:36.400657 27050 net.cpp:408] pool0 <- conv0
I0428 19:50:36.400667 27050 net.cpp:382] pool0 -> pool0
I0428 19:50:36.400720 27050 net.cpp:124] Setting up pool0
I0428 19:50:36.400730 27050 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:50:36.400738 27050 net.cpp:139] Memory required for data: 1754800
I0428 19:50:36.400743 27050 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:36.400759 27050 net.cpp:86] Creating Layer conv1
I0428 19:50:36.400766 27050 net.cpp:408] conv1 <- pool0
I0428 19:50:36.400776 27050 net.cpp:382] conv1 -> conv1
I0428 19:50:36.403168 27050 net.cpp:124] Setting up conv1
I0428 19:50:36.403190 27050 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:50:36.403200 27050 net.cpp:139] Memory required for data: 2010800
I0428 19:50:36.403219 27050 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:36.403230 27050 net.cpp:86] Creating Layer pool1
I0428 19:50:36.403245 27050 net.cpp:408] pool1 <- conv1
I0428 19:50:36.403255 27050 net.cpp:382] pool1 -> pool1
I0428 19:50:36.403312 27050 net.cpp:124] Setting up pool1
I0428 19:50:36.403322 27050 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:50:36.403328 27050 net.cpp:139] Memory required for data: 2074800
I0428 19:50:36.403334 27050 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:36.403345 27050 net.cpp:86] Creating Layer ip1
I0428 19:50:36.403352 27050 net.cpp:408] ip1 <- pool1
I0428 19:50:36.403362 27050 net.cpp:382] ip1 -> ip1
I0428 19:50:36.403512 27050 net.cpp:124] Setting up ip1
I0428 19:50:36.403523 27050 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:50:36.403543 27050 net.cpp:139] Memory required for data: 2084800
I0428 19:50:36.403558 27050 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:36.403569 27050 net.cpp:86] Creating Layer relu1
I0428 19:50:36.403576 27050 net.cpp:408] relu1 <- ip1
I0428 19:50:36.403585 27050 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:36.403789 27050 net.cpp:124] Setting up relu1
I0428 19:50:36.403800 27050 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:50:36.403807 27050 net.cpp:139] Memory required for data: 2094800
I0428 19:50:36.403815 27050 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:36.403828 27050 net.cpp:86] Creating Layer ip2
I0428 19:50:36.403837 27050 net.cpp:408] ip2 <- ip1
I0428 19:50:36.403847 27050 net.cpp:382] ip2 -> ip2
I0428 19:50:36.403975 27050 net.cpp:124] Setting up ip2
I0428 19:50:36.403985 27050 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:50:36.403990 27050 net.cpp:139] Memory required for data: 2104800
I0428 19:50:36.404001 27050 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:36.404011 27050 net.cpp:86] Creating Layer relu2
I0428 19:50:36.404018 27050 net.cpp:408] relu2 <- ip2
I0428 19:50:36.404043 27050 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:36.404260 27050 net.cpp:124] Setting up relu2
I0428 19:50:36.404273 27050 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:50:36.404279 27050 net.cpp:139] Memory required for data: 2114800
I0428 19:50:36.404285 27050 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:36.404296 27050 net.cpp:86] Creating Layer ip3
I0428 19:50:36.404302 27050 net.cpp:408] ip3 <- ip2
I0428 19:50:36.404312 27050 net.cpp:382] ip3 -> ip3
I0428 19:50:36.404435 27050 net.cpp:124] Setting up ip3
I0428 19:50:36.404444 27050 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:36.404451 27050 net.cpp:139] Memory required for data: 2118800
I0428 19:50:36.404466 27050 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:36.404475 27050 net.cpp:86] Creating Layer relu3
I0428 19:50:36.404484 27050 net.cpp:408] relu3 <- ip3
I0428 19:50:36.404492 27050 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:36.405357 27050 net.cpp:124] Setting up relu3
I0428 19:50:36.405375 27050 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:36.405381 27050 net.cpp:139] Memory required for data: 2122800
I0428 19:50:36.405387 27050 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:50:36.405397 27050 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:50:36.405405 27050 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:50:36.405414 27050 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:50:36.405426 27050 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:50:36.405478 27050 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:50:36.405488 27050 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:36.405494 27050 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:36.405500 27050 net.cpp:139] Memory required for data: 2130800
I0428 19:50:36.405506 27050 layer_factory.hpp:77] Creating layer accuracy
I0428 19:50:36.405516 27050 net.cpp:86] Creating Layer accuracy
I0428 19:50:36.405524 27050 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:50:36.405531 27050 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:50:36.405539 27050 net.cpp:382] accuracy -> accuracy
I0428 19:50:36.405552 27050 net.cpp:124] Setting up accuracy
I0428 19:50:36.405560 27050 net.cpp:131] Top shape: (1)
I0428 19:50:36.405566 27050 net.cpp:139] Memory required for data: 2130804
I0428 19:50:36.405572 27050 layer_factory.hpp:77] Creating layer loss
I0428 19:50:36.405580 27050 net.cpp:86] Creating Layer loss
I0428 19:50:36.405587 27050 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:50:36.405594 27050 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:50:36.405603 27050 net.cpp:382] loss -> loss
I0428 19:50:36.405616 27050 layer_factory.hpp:77] Creating layer loss
I0428 19:50:36.405894 27050 net.cpp:124] Setting up loss
I0428 19:50:36.405905 27050 net.cpp:131] Top shape: (1)
I0428 19:50:36.405912 27050 net.cpp:134]     with loss weight 1
I0428 19:50:36.405923 27050 net.cpp:139] Memory required for data: 2130808
I0428 19:50:36.405944 27050 net.cpp:200] loss needs backward computation.
I0428 19:50:36.405952 27050 net.cpp:202] accuracy does not need backward computation.
I0428 19:50:36.405961 27050 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:50:36.405966 27050 net.cpp:200] relu3 needs backward computation.
I0428 19:50:36.405972 27050 net.cpp:200] ip3 needs backward computation.
I0428 19:50:36.405978 27050 net.cpp:200] relu2 needs backward computation.
I0428 19:50:36.405984 27050 net.cpp:200] ip2 needs backward computation.
I0428 19:50:36.405990 27050 net.cpp:200] relu1 needs backward computation.
I0428 19:50:36.405997 27050 net.cpp:200] ip1 needs backward computation.
I0428 19:50:36.406002 27050 net.cpp:200] pool1 needs backward computation.
I0428 19:50:36.406009 27050 net.cpp:200] conv1 needs backward computation.
I0428 19:50:36.406015 27050 net.cpp:200] pool0 needs backward computation.
I0428 19:50:36.406021 27050 net.cpp:200] conv0 needs backward computation.
I0428 19:50:36.406029 27050 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:50:36.406036 27050 net.cpp:202] mnist does not need backward computation.
I0428 19:50:36.406042 27050 net.cpp:244] This network produces output accuracy
I0428 19:50:36.406049 27050 net.cpp:244] This network produces output loss
I0428 19:50:36.406067 27050 net.cpp:257] Network initialization done.
I0428 19:50:36.406124 27050 solver.cpp:56] Solver scaffolding done.
I0428 19:50:36.406519 27050 caffe.cpp:248] Starting Optimization
I0428 19:50:36.406528 27050 solver.cpp:273] Solving LeNet
I0428 19:50:36.406533 27050 solver.cpp:274] Learning Rate Policy: inv
I0428 19:50:36.407392 27050 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:50:36.410564 27050 blocking_queue.cpp:49] Waiting for data
I0428 19:50:36.480890 27058 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:36.481422 27050 solver.cpp:398]     Test net output #0: accuracy = 0.0863
I0428 19:50:36.481447 27050 solver.cpp:398]     Test net output #1: loss = 2.30375 (* 1 = 2.30375 loss)
I0428 19:50:36.483423 27050 solver.cpp:219] Iteration 0 (0 iter/s, 0.0768594s/100 iters), loss = 2.28969
I0428 19:50:36.483455 27050 solver.cpp:238]     Train net output #0: loss = 2.28969 (* 1 = 2.28969 loss)
I0428 19:50:36.483475 27050 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:50:36.561153 27050 solver.cpp:219] Iteration 100 (1287.14 iter/s, 0.0776919s/100 iters), loss = 0.598026
I0428 19:50:36.561187 27050 solver.cpp:238]     Train net output #0: loss = 0.598026 (* 1 = 0.598026 loss)
I0428 19:50:36.561197 27050 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:50:36.636174 27050 solver.cpp:219] Iteration 200 (1333.63 iter/s, 0.0749834s/100 iters), loss = 0.309636
I0428 19:50:36.636201 27050 solver.cpp:238]     Train net output #0: loss = 0.309636 (* 1 = 0.309636 loss)
I0428 19:50:36.636226 27050 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:50:36.714843 27050 solver.cpp:219] Iteration 300 (1271.73 iter/s, 0.078633s/100 iters), loss = 0.23906
I0428 19:50:36.714903 27050 solver.cpp:238]     Train net output #0: loss = 0.23906 (* 1 = 0.23906 loss)
I0428 19:50:36.714915 27050 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:50:36.797073 27050 solver.cpp:219] Iteration 400 (1217.11 iter/s, 0.0821616s/100 iters), loss = 0.157658
I0428 19:50:36.797111 27050 solver.cpp:238]     Train net output #0: loss = 0.157658 (* 1 = 0.157658 loss)
I0428 19:50:36.797125 27050 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:50:36.874102 27050 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:50:36.926525 27058 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:36.927001 27050 solver.cpp:398]     Test net output #0: accuracy = 0.943
I0428 19:50:36.927023 27050 solver.cpp:398]     Test net output #1: loss = 0.179398 (* 1 = 0.179398 loss)
I0428 19:50:36.927908 27050 solver.cpp:219] Iteration 500 (764.637 iter/s, 0.130781s/100 iters), loss = 0.22963
I0428 19:50:36.927945 27050 solver.cpp:238]     Train net output #0: loss = 0.22963 (* 1 = 0.22963 loss)
I0428 19:50:36.927970 27050 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:50:37.009979 27050 solver.cpp:219] Iteration 600 (1219.09 iter/s, 0.0820285s/100 iters), loss = 0.159162
I0428 19:50:37.010009 27050 solver.cpp:238]     Train net output #0: loss = 0.159161 (* 1 = 0.159161 loss)
I0428 19:50:37.010018 27050 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:50:37.093650 27050 solver.cpp:219] Iteration 700 (1195.67 iter/s, 0.0836352s/100 iters), loss = 0.244964
I0428 19:50:37.093678 27050 solver.cpp:238]     Train net output #0: loss = 0.244964 (* 1 = 0.244964 loss)
I0428 19:50:37.093688 27050 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:50:37.170953 27050 solver.cpp:219] Iteration 800 (1294.21 iter/s, 0.0772669s/100 iters), loss = 0.444977
I0428 19:50:37.170979 27050 solver.cpp:238]     Train net output #0: loss = 0.444977 (* 1 = 0.444977 loss)
I0428 19:50:37.170989 27050 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:50:37.247845 27050 solver.cpp:219] Iteration 900 (1301.09 iter/s, 0.0768584s/100 iters), loss = 0.12753
I0428 19:50:37.247874 27050 solver.cpp:238]     Train net output #0: loss = 0.12753 (* 1 = 0.12753 loss)
I0428 19:50:37.247884 27050 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:50:37.273073 27057 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:37.321566 27050 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:50:37.322258 27050 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:50:37.322777 27050 solver.cpp:311] Iteration 1000, loss = 0.163659
I0428 19:50:37.322796 27050 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:50:37.397374 27058 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:37.397871 27050 solver.cpp:398]     Test net output #0: accuracy = 0.9587
I0428 19:50:37.397891 27050 solver.cpp:398]     Test net output #1: loss = 0.124498 (* 1 = 0.124498 loss)
I0428 19:50:37.397898 27050 solver.cpp:316] Optimization Done.
I0428 19:50:37.397904 27050 caffe.cpp:259] Optimization Done.
