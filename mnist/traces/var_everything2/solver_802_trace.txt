I0428 19:57:53.191097 28835 caffe.cpp:218] Using GPUs 0
I0428 19:57:53.222717 28835 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:53.730944 28835 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test802.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:53.731071 28835 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test802.prototxt
I0428 19:57:53.731456 28835 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:53.731472 28835 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:53.731564 28835 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:53.731634 28835 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:53.731726 28835 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:53.731748 28835 net.cpp:86] Creating Layer mnist
I0428 19:57:53.731755 28835 net.cpp:382] mnist -> data
I0428 19:57:53.731776 28835 net.cpp:382] mnist -> label
I0428 19:57:53.732820 28835 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:53.735164 28835 net.cpp:124] Setting up mnist
I0428 19:57:53.735183 28835 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:53.735188 28835 net.cpp:131] Top shape: 64 (64)
I0428 19:57:53.735193 28835 net.cpp:139] Memory required for data: 200960
I0428 19:57:53.735198 28835 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:53.735213 28835 net.cpp:86] Creating Layer conv0
I0428 19:57:53.735234 28835 net.cpp:408] conv0 <- data
I0428 19:57:53.735245 28835 net.cpp:382] conv0 -> conv0
I0428 19:57:53.971755 28835 net.cpp:124] Setting up conv0
I0428 19:57:53.971796 28835 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:53.971801 28835 net.cpp:139] Memory required for data: 1675520
I0428 19:57:53.971817 28835 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:53.971828 28835 net.cpp:86] Creating Layer pool0
I0428 19:57:53.971833 28835 net.cpp:408] pool0 <- conv0
I0428 19:57:53.971838 28835 net.cpp:382] pool0 -> pool0
I0428 19:57:53.971899 28835 net.cpp:124] Setting up pool0
I0428 19:57:53.971904 28835 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:53.971907 28835 net.cpp:139] Memory required for data: 2044160
I0428 19:57:53.971910 28835 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:53.971920 28835 net.cpp:86] Creating Layer conv1
I0428 19:57:53.971923 28835 net.cpp:408] conv1 <- pool0
I0428 19:57:53.971928 28835 net.cpp:382] conv1 -> conv1
I0428 19:57:53.974786 28835 net.cpp:124] Setting up conv1
I0428 19:57:53.974800 28835 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:53.974804 28835 net.cpp:139] Memory required for data: 2126080
I0428 19:57:53.974812 28835 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:53.974838 28835 net.cpp:86] Creating Layer pool1
I0428 19:57:53.974841 28835 net.cpp:408] pool1 <- conv1
I0428 19:57:53.974848 28835 net.cpp:382] pool1 -> pool1
I0428 19:57:53.974900 28835 net.cpp:124] Setting up pool1
I0428 19:57:53.974907 28835 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:53.974910 28835 net.cpp:139] Memory required for data: 2146560
I0428 19:57:53.974913 28835 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:53.974921 28835 net.cpp:86] Creating Layer ip1
I0428 19:57:53.974925 28835 net.cpp:408] ip1 <- pool1
I0428 19:57:53.974930 28835 net.cpp:382] ip1 -> ip1
I0428 19:57:53.975054 28835 net.cpp:124] Setting up ip1
I0428 19:57:53.975060 28835 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:53.975064 28835 net.cpp:139] Memory required for data: 2152960
I0428 19:57:53.975070 28835 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:53.975076 28835 net.cpp:86] Creating Layer relu1
I0428 19:57:53.975080 28835 net.cpp:408] relu1 <- ip1
I0428 19:57:53.975085 28835 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:53.975255 28835 net.cpp:124] Setting up relu1
I0428 19:57:53.975265 28835 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:53.975268 28835 net.cpp:139] Memory required for data: 2159360
I0428 19:57:53.975270 28835 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:53.975276 28835 net.cpp:86] Creating Layer ip2
I0428 19:57:53.975280 28835 net.cpp:408] ip2 <- ip1
I0428 19:57:53.975284 28835 net.cpp:382] ip2 -> ip2
I0428 19:57:53.975375 28835 net.cpp:124] Setting up ip2
I0428 19:57:53.975383 28835 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:53.975384 28835 net.cpp:139] Memory required for data: 2161920
I0428 19:57:53.975389 28835 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:53.975396 28835 net.cpp:86] Creating Layer relu2
I0428 19:57:53.975399 28835 net.cpp:408] relu2 <- ip2
I0428 19:57:53.975404 28835 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:53.976213 28835 net.cpp:124] Setting up relu2
I0428 19:57:53.976225 28835 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:53.976229 28835 net.cpp:139] Memory required for data: 2164480
I0428 19:57:53.976233 28835 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:53.976239 28835 net.cpp:86] Creating Layer ip3
I0428 19:57:53.976243 28835 net.cpp:408] ip3 <- ip2
I0428 19:57:53.976248 28835 net.cpp:382] ip3 -> ip3
I0428 19:57:53.976344 28835 net.cpp:124] Setting up ip3
I0428 19:57:53.976352 28835 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:53.976354 28835 net.cpp:139] Memory required for data: 2167040
I0428 19:57:53.976362 28835 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:53.976366 28835 net.cpp:86] Creating Layer relu3
I0428 19:57:53.976369 28835 net.cpp:408] relu3 <- ip3
I0428 19:57:53.976374 28835 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:53.976547 28835 net.cpp:124] Setting up relu3
I0428 19:57:53.976555 28835 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:53.976559 28835 net.cpp:139] Memory required for data: 2169600
I0428 19:57:53.976562 28835 layer_factory.hpp:77] Creating layer loss
I0428 19:57:53.976568 28835 net.cpp:86] Creating Layer loss
I0428 19:57:53.976572 28835 net.cpp:408] loss <- ip3
I0428 19:57:53.976575 28835 net.cpp:408] loss <- label
I0428 19:57:53.976579 28835 net.cpp:382] loss -> loss
I0428 19:57:53.976596 28835 layer_factory.hpp:77] Creating layer loss
I0428 19:57:53.976840 28835 net.cpp:124] Setting up loss
I0428 19:57:53.976850 28835 net.cpp:131] Top shape: (1)
I0428 19:57:53.976853 28835 net.cpp:134]     with loss weight 1
I0428 19:57:53.976883 28835 net.cpp:139] Memory required for data: 2169604
I0428 19:57:53.976886 28835 net.cpp:200] loss needs backward computation.
I0428 19:57:53.976891 28835 net.cpp:200] relu3 needs backward computation.
I0428 19:57:53.976893 28835 net.cpp:200] ip3 needs backward computation.
I0428 19:57:53.976896 28835 net.cpp:200] relu2 needs backward computation.
I0428 19:57:53.976898 28835 net.cpp:200] ip2 needs backward computation.
I0428 19:57:53.976902 28835 net.cpp:200] relu1 needs backward computation.
I0428 19:57:53.976919 28835 net.cpp:200] ip1 needs backward computation.
I0428 19:57:53.976922 28835 net.cpp:200] pool1 needs backward computation.
I0428 19:57:53.976925 28835 net.cpp:200] conv1 needs backward computation.
I0428 19:57:53.976928 28835 net.cpp:200] pool0 needs backward computation.
I0428 19:57:53.976932 28835 net.cpp:200] conv0 needs backward computation.
I0428 19:57:53.976934 28835 net.cpp:202] mnist does not need backward computation.
I0428 19:57:53.976938 28835 net.cpp:244] This network produces output loss
I0428 19:57:53.976949 28835 net.cpp:257] Network initialization done.
I0428 19:57:53.977339 28835 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test802.prototxt
I0428 19:57:53.977366 28835 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:53.977461 28835 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:53.977560 28835 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:53.977617 28835 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:53.977628 28835 net.cpp:86] Creating Layer mnist
I0428 19:57:53.977632 28835 net.cpp:382] mnist -> data
I0428 19:57:53.977640 28835 net.cpp:382] mnist -> label
I0428 19:57:53.977720 28835 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:53.979857 28835 net.cpp:124] Setting up mnist
I0428 19:57:53.979887 28835 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:53.979892 28835 net.cpp:131] Top shape: 100 (100)
I0428 19:57:53.979894 28835 net.cpp:139] Memory required for data: 314000
I0428 19:57:53.979898 28835 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:53.979934 28835 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:53.979938 28835 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:53.979943 28835 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:53.979951 28835 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:53.979992 28835 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:53.980000 28835 net.cpp:131] Top shape: 100 (100)
I0428 19:57:53.980003 28835 net.cpp:131] Top shape: 100 (100)
I0428 19:57:53.980006 28835 net.cpp:139] Memory required for data: 314800
I0428 19:57:53.980010 28835 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:53.980018 28835 net.cpp:86] Creating Layer conv0
I0428 19:57:53.980021 28835 net.cpp:408] conv0 <- data
I0428 19:57:53.980027 28835 net.cpp:382] conv0 -> conv0
I0428 19:57:53.982090 28835 net.cpp:124] Setting up conv0
I0428 19:57:53.982105 28835 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:53.982110 28835 net.cpp:139] Memory required for data: 2618800
I0428 19:57:53.982118 28835 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:53.982125 28835 net.cpp:86] Creating Layer pool0
I0428 19:57:53.982128 28835 net.cpp:408] pool0 <- conv0
I0428 19:57:53.982132 28835 net.cpp:382] pool0 -> pool0
I0428 19:57:53.982170 28835 net.cpp:124] Setting up pool0
I0428 19:57:53.982178 28835 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:53.982182 28835 net.cpp:139] Memory required for data: 3194800
I0428 19:57:53.982183 28835 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:53.982192 28835 net.cpp:86] Creating Layer conv1
I0428 19:57:53.982197 28835 net.cpp:408] conv1 <- pool0
I0428 19:57:53.982201 28835 net.cpp:382] conv1 -> conv1
I0428 19:57:53.984410 28835 net.cpp:124] Setting up conv1
I0428 19:57:53.984421 28835 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:53.984426 28835 net.cpp:139] Memory required for data: 3322800
I0428 19:57:53.984433 28835 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:53.984439 28835 net.cpp:86] Creating Layer pool1
I0428 19:57:53.984458 28835 net.cpp:408] pool1 <- conv1
I0428 19:57:53.984464 28835 net.cpp:382] pool1 -> pool1
I0428 19:57:53.984508 28835 net.cpp:124] Setting up pool1
I0428 19:57:53.984514 28835 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:53.984518 28835 net.cpp:139] Memory required for data: 3354800
I0428 19:57:53.984520 28835 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:53.984529 28835 net.cpp:86] Creating Layer ip1
I0428 19:57:53.984531 28835 net.cpp:408] ip1 <- pool1
I0428 19:57:53.984552 28835 net.cpp:382] ip1 -> ip1
I0428 19:57:53.984705 28835 net.cpp:124] Setting up ip1
I0428 19:57:53.984716 28835 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:53.984730 28835 net.cpp:139] Memory required for data: 3364800
I0428 19:57:53.984740 28835 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:53.984745 28835 net.cpp:86] Creating Layer relu1
I0428 19:57:53.984748 28835 net.cpp:408] relu1 <- ip1
I0428 19:57:53.984755 28835 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:53.984974 28835 net.cpp:124] Setting up relu1
I0428 19:57:53.984984 28835 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:53.984988 28835 net.cpp:139] Memory required for data: 3374800
I0428 19:57:53.984992 28835 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:53.984998 28835 net.cpp:86] Creating Layer ip2
I0428 19:57:53.985002 28835 net.cpp:408] ip2 <- ip1
I0428 19:57:53.985008 28835 net.cpp:382] ip2 -> ip2
I0428 19:57:53.985118 28835 net.cpp:124] Setting up ip2
I0428 19:57:53.985126 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.985129 28835 net.cpp:139] Memory required for data: 3378800
I0428 19:57:53.985136 28835 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:53.985155 28835 net.cpp:86] Creating Layer relu2
I0428 19:57:53.985158 28835 net.cpp:408] relu2 <- ip2
I0428 19:57:53.985178 28835 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:53.985327 28835 net.cpp:124] Setting up relu2
I0428 19:57:53.985335 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.985339 28835 net.cpp:139] Memory required for data: 3382800
I0428 19:57:53.985342 28835 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:53.985348 28835 net.cpp:86] Creating Layer ip3
I0428 19:57:53.985352 28835 net.cpp:408] ip3 <- ip2
I0428 19:57:53.985357 28835 net.cpp:382] ip3 -> ip3
I0428 19:57:53.985471 28835 net.cpp:124] Setting up ip3
I0428 19:57:53.985479 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.985482 28835 net.cpp:139] Memory required for data: 3386800
I0428 19:57:53.985489 28835 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:53.985494 28835 net.cpp:86] Creating Layer relu3
I0428 19:57:53.985496 28835 net.cpp:408] relu3 <- ip3
I0428 19:57:53.985502 28835 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:53.986390 28835 net.cpp:124] Setting up relu3
I0428 19:57:53.986402 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.986407 28835 net.cpp:139] Memory required for data: 3390800
I0428 19:57:53.986409 28835 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:53.986418 28835 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:53.986421 28835 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:53.986426 28835 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:53.986433 28835 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:53.986471 28835 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:53.986479 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.986482 28835 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:53.986485 28835 net.cpp:139] Memory required for data: 3398800
I0428 19:57:53.986487 28835 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:53.986492 28835 net.cpp:86] Creating Layer accuracy
I0428 19:57:53.986495 28835 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:53.986500 28835 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:53.986505 28835 net.cpp:382] accuracy -> accuracy
I0428 19:57:53.986512 28835 net.cpp:124] Setting up accuracy
I0428 19:57:53.986516 28835 net.cpp:131] Top shape: (1)
I0428 19:57:53.986519 28835 net.cpp:139] Memory required for data: 3398804
I0428 19:57:53.986521 28835 layer_factory.hpp:77] Creating layer loss
I0428 19:57:53.986526 28835 net.cpp:86] Creating Layer loss
I0428 19:57:53.986529 28835 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:53.986532 28835 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:53.986537 28835 net.cpp:382] loss -> loss
I0428 19:57:53.986548 28835 layer_factory.hpp:77] Creating layer loss
I0428 19:57:53.986799 28835 net.cpp:124] Setting up loss
I0428 19:57:53.986807 28835 net.cpp:131] Top shape: (1)
I0428 19:57:53.986810 28835 net.cpp:134]     with loss weight 1
I0428 19:57:53.986816 28835 net.cpp:139] Memory required for data: 3398808
I0428 19:57:53.986830 28835 net.cpp:200] loss needs backward computation.
I0428 19:57:53.986835 28835 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:53.986838 28835 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:53.986840 28835 net.cpp:200] relu3 needs backward computation.
I0428 19:57:53.986845 28835 net.cpp:200] ip3 needs backward computation.
I0428 19:57:53.986847 28835 net.cpp:200] relu2 needs backward computation.
I0428 19:57:53.986850 28835 net.cpp:200] ip2 needs backward computation.
I0428 19:57:53.986853 28835 net.cpp:200] relu1 needs backward computation.
I0428 19:57:53.986856 28835 net.cpp:200] ip1 needs backward computation.
I0428 19:57:53.986860 28835 net.cpp:200] pool1 needs backward computation.
I0428 19:57:53.986862 28835 net.cpp:200] conv1 needs backward computation.
I0428 19:57:53.986865 28835 net.cpp:200] pool0 needs backward computation.
I0428 19:57:53.986868 28835 net.cpp:200] conv0 needs backward computation.
I0428 19:57:53.986872 28835 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:53.986876 28835 net.cpp:202] mnist does not need backward computation.
I0428 19:57:53.986879 28835 net.cpp:244] This network produces output accuracy
I0428 19:57:53.986882 28835 net.cpp:244] This network produces output loss
I0428 19:57:53.986894 28835 net.cpp:257] Network initialization done.
I0428 19:57:53.986935 28835 solver.cpp:56] Solver scaffolding done.
I0428 19:57:53.987314 28835 caffe.cpp:248] Starting Optimization
I0428 19:57:53.987320 28835 solver.cpp:273] Solving LeNet
I0428 19:57:53.987323 28835 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:53.987565 28835 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:53.991698 28835 blocking_queue.cpp:49] Waiting for data
I0428 19:57:54.058595 28844 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:54.059134 28835 solver.cpp:398]     Test net output #0: accuracy = 0.1009
I0428 19:57:54.059168 28835 solver.cpp:398]     Test net output #1: loss = 2.30656 (* 1 = 2.30656 loss)
I0428 19:57:54.061769 28835 solver.cpp:219] Iteration 0 (0 iter/s, 0.0744161s/100 iters), loss = 2.3084
I0428 19:57:54.061808 28835 solver.cpp:238]     Train net output #0: loss = 2.3084 (* 1 = 2.3084 loss)
I0428 19:57:54.061820 28835 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:54.137817 28835 solver.cpp:219] Iteration 100 (1315.86 iter/s, 0.0759962s/100 iters), loss = 1.54166
I0428 19:57:54.137856 28835 solver.cpp:238]     Train net output #0: loss = 1.54166 (* 1 = 1.54166 loss)
I0428 19:57:54.137863 28835 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:54.212718 28835 solver.cpp:219] Iteration 200 (1335.69 iter/s, 0.0748679s/100 iters), loss = 0.785574
I0428 19:57:54.212756 28835 solver.cpp:238]     Train net output #0: loss = 0.785574 (* 1 = 0.785574 loss)
I0428 19:57:54.212762 28835 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:54.288271 28835 solver.cpp:219] Iteration 300 (1324.14 iter/s, 0.075521s/100 iters), loss = 0.396546
I0428 19:57:54.288310 28835 solver.cpp:238]     Train net output #0: loss = 0.396546 (* 1 = 0.396546 loss)
I0428 19:57:54.288316 28835 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:54.363034 28835 solver.cpp:219] Iteration 400 (1338.14 iter/s, 0.0747305s/100 iters), loss = 0.337136
I0428 19:57:54.363071 28835 solver.cpp:238]     Train net output #0: loss = 0.337136 (* 1 = 0.337136 loss)
I0428 19:57:54.363092 28835 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:54.437151 28835 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:54.483175 28844 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:54.483695 28835 solver.cpp:398]     Test net output #0: accuracy = 0.9316
I0428 19:57:54.483731 28835 solver.cpp:398]     Test net output #1: loss = 0.225884 (* 1 = 0.225884 loss)
I0428 19:57:54.484570 28835 solver.cpp:219] Iteration 500 (823.131 iter/s, 0.121487s/100 iters), loss = 0.224167
I0428 19:57:54.484603 28835 solver.cpp:238]     Train net output #0: loss = 0.224167 (* 1 = 0.224167 loss)
I0428 19:57:54.484627 28835 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:54.568390 28835 solver.cpp:219] Iteration 600 (1193.6 iter/s, 0.0837801s/100 iters), loss = 0.176414
I0428 19:57:54.568429 28835 solver.cpp:238]     Train net output #0: loss = 0.176414 (* 1 = 0.176414 loss)
I0428 19:57:54.568451 28835 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:54.645608 28835 solver.cpp:219] Iteration 700 (1295.57 iter/s, 0.077186s/100 iters), loss = 0.324757
I0428 19:57:54.645648 28835 solver.cpp:238]     Train net output #0: loss = 0.324757 (* 1 = 0.324757 loss)
I0428 19:57:54.645653 28835 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:54.720726 28835 solver.cpp:219] Iteration 800 (1331.83 iter/s, 0.0750848s/100 iters), loss = 0.326266
I0428 19:57:54.720762 28835 solver.cpp:238]     Train net output #0: loss = 0.326266 (* 1 = 0.326266 loss)
I0428 19:57:54.720778 28835 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:54.800483 28835 solver.cpp:219] Iteration 900 (1254.35 iter/s, 0.0797225s/100 iters), loss = 0.301343
I0428 19:57:54.800508 28835 solver.cpp:238]     Train net output #0: loss = 0.301343 (* 1 = 0.301343 loss)
I0428 19:57:54.800523 28835 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:54.826362 28843 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:54.876601 28835 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:54.877354 28835 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:54.877845 28835 solver.cpp:311] Iteration 1000, loss = 0.106768
I0428 19:57:54.877861 28835 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:54.923759 28844 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:54.924340 28835 solver.cpp:398]     Test net output #0: accuracy = 0.9548
I0428 19:57:54.924357 28835 solver.cpp:398]     Test net output #1: loss = 0.142286 (* 1 = 0.142286 loss)
I0428 19:57:54.924377 28835 solver.cpp:316] Optimization Done.
I0428 19:57:54.924381 28835 caffe.cpp:259] Optimization Done.
