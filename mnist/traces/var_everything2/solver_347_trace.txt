I0428 19:40:51.324780 24678 caffe.cpp:218] Using GPUs 0
I0428 19:40:51.366590 24678 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:51.824045 24678 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test347.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:51.824200 24678 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test347.prototxt
I0428 19:40:51.824560 24678 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:51.824594 24678 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:51.824679 24678 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:51.824767 24678 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:51.824944 24678 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:51.824972 24678 net.cpp:86] Creating Layer mnist
I0428 19:40:51.824985 24678 net.cpp:382] mnist -> data
I0428 19:40:51.825011 24678 net.cpp:382] mnist -> label
I0428 19:40:51.826200 24678 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:51.828342 24678 net.cpp:124] Setting up mnist
I0428 19:40:51.828358 24678 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:51.828366 24678 net.cpp:131] Top shape: 64 (64)
I0428 19:40:51.828371 24678 net.cpp:139] Memory required for data: 200960
I0428 19:40:51.828378 24678 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:51.828397 24678 net.cpp:86] Creating Layer conv0
I0428 19:40:51.828416 24678 net.cpp:408] conv0 <- data
I0428 19:40:51.828433 24678 net.cpp:382] conv0 -> conv0
I0428 19:40:52.066118 24678 net.cpp:124] Setting up conv0
I0428 19:40:52.066148 24678 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:52.066154 24678 net.cpp:139] Memory required for data: 495872
I0428 19:40:52.066189 24678 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:52.066205 24678 net.cpp:86] Creating Layer pool0
I0428 19:40:52.066217 24678 net.cpp:408] pool0 <- conv0
I0428 19:40:52.066226 24678 net.cpp:382] pool0 -> pool0
I0428 19:40:52.066280 24678 net.cpp:124] Setting up pool0
I0428 19:40:52.066289 24678 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:52.066293 24678 net.cpp:139] Memory required for data: 569600
I0428 19:40:52.066298 24678 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:52.066313 24678 net.cpp:86] Creating Layer conv1
I0428 19:40:52.066319 24678 net.cpp:408] conv1 <- pool0
I0428 19:40:52.066329 24678 net.cpp:382] conv1 -> conv1
I0428 19:40:52.068264 24678 net.cpp:124] Setting up conv1
I0428 19:40:52.068280 24678 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:52.068286 24678 net.cpp:139] Memory required for data: 651520
I0428 19:40:52.068305 24678 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:52.068317 24678 net.cpp:86] Creating Layer pool1
I0428 19:40:52.068326 24678 net.cpp:408] pool1 <- conv1
I0428 19:40:52.068336 24678 net.cpp:382] pool1 -> pool1
I0428 19:40:52.068397 24678 net.cpp:124] Setting up pool1
I0428 19:40:52.068405 24678 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:52.068411 24678 net.cpp:139] Memory required for data: 672000
I0428 19:40:52.068416 24678 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:52.068426 24678 net.cpp:86] Creating Layer ip1
I0428 19:40:52.068433 24678 net.cpp:408] ip1 <- pool1
I0428 19:40:52.068441 24678 net.cpp:382] ip1 -> ip1
I0428 19:40:52.069572 24678 net.cpp:124] Setting up ip1
I0428 19:40:52.069586 24678 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:52.069591 24678 net.cpp:139] Memory required for data: 684800
I0428 19:40:52.069604 24678 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:52.069615 24678 net.cpp:86] Creating Layer relu1
I0428 19:40:52.069622 24678 net.cpp:408] relu1 <- ip1
I0428 19:40:52.069629 24678 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:52.069810 24678 net.cpp:124] Setting up relu1
I0428 19:40:52.069821 24678 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:52.069826 24678 net.cpp:139] Memory required for data: 697600
I0428 19:40:52.069831 24678 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:52.069845 24678 net.cpp:86] Creating Layer ip2
I0428 19:40:52.069852 24678 net.cpp:408] ip2 <- ip1
I0428 19:40:52.069860 24678 net.cpp:382] ip2 -> ip2
I0428 19:40:52.069988 24678 net.cpp:124] Setting up ip2
I0428 19:40:52.069998 24678 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:52.070003 24678 net.cpp:139] Memory required for data: 704000
I0428 19:40:52.070011 24678 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:52.070024 24678 net.cpp:86] Creating Layer relu2
I0428 19:40:52.070029 24678 net.cpp:408] relu2 <- ip2
I0428 19:40:52.070039 24678 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:52.070924 24678 net.cpp:124] Setting up relu2
I0428 19:40:52.070940 24678 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:52.070946 24678 net.cpp:139] Memory required for data: 710400
I0428 19:40:52.070951 24678 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:52.070976 24678 net.cpp:86] Creating Layer ip3
I0428 19:40:52.070981 24678 net.cpp:408] ip3 <- ip2
I0428 19:40:52.070992 24678 net.cpp:382] ip3 -> ip3
I0428 19:40:52.071100 24678 net.cpp:124] Setting up ip3
I0428 19:40:52.071110 24678 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:52.071115 24678 net.cpp:139] Memory required for data: 712960
I0428 19:40:52.071130 24678 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:52.071138 24678 net.cpp:86] Creating Layer relu3
I0428 19:40:52.071143 24678 net.cpp:408] relu3 <- ip3
I0428 19:40:52.071151 24678 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:52.071362 24678 net.cpp:124] Setting up relu3
I0428 19:40:52.071373 24678 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:52.071378 24678 net.cpp:139] Memory required for data: 715520
I0428 19:40:52.071398 24678 layer_factory.hpp:77] Creating layer loss
I0428 19:40:52.071408 24678 net.cpp:86] Creating Layer loss
I0428 19:40:52.071413 24678 net.cpp:408] loss <- ip3
I0428 19:40:52.071420 24678 net.cpp:408] loss <- label
I0428 19:40:52.071445 24678 net.cpp:382] loss -> loss
I0428 19:40:52.071467 24678 layer_factory.hpp:77] Creating layer loss
I0428 19:40:52.071763 24678 net.cpp:124] Setting up loss
I0428 19:40:52.071774 24678 net.cpp:131] Top shape: (1)
I0428 19:40:52.071779 24678 net.cpp:134]     with loss weight 1
I0428 19:40:52.071799 24678 net.cpp:139] Memory required for data: 715524
I0428 19:40:52.071805 24678 net.cpp:200] loss needs backward computation.
I0428 19:40:52.071811 24678 net.cpp:200] relu3 needs backward computation.
I0428 19:40:52.071817 24678 net.cpp:200] ip3 needs backward computation.
I0428 19:40:52.071822 24678 net.cpp:200] relu2 needs backward computation.
I0428 19:40:52.071827 24678 net.cpp:200] ip2 needs backward computation.
I0428 19:40:52.071833 24678 net.cpp:200] relu1 needs backward computation.
I0428 19:40:52.071838 24678 net.cpp:200] ip1 needs backward computation.
I0428 19:40:52.071843 24678 net.cpp:200] pool1 needs backward computation.
I0428 19:40:52.071848 24678 net.cpp:200] conv1 needs backward computation.
I0428 19:40:52.071854 24678 net.cpp:200] pool0 needs backward computation.
I0428 19:40:52.071859 24678 net.cpp:200] conv0 needs backward computation.
I0428 19:40:52.071866 24678 net.cpp:202] mnist does not need backward computation.
I0428 19:40:52.071871 24678 net.cpp:244] This network produces output loss
I0428 19:40:52.071888 24678 net.cpp:257] Network initialization done.
I0428 19:40:52.072212 24678 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test347.prototxt
I0428 19:40:52.072276 24678 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:52.072376 24678 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:52.072510 24678 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:52.072573 24678 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:52.072607 24678 net.cpp:86] Creating Layer mnist
I0428 19:40:52.072614 24678 net.cpp:382] mnist -> data
I0428 19:40:52.072626 24678 net.cpp:382] mnist -> label
I0428 19:40:52.072748 24678 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:52.075047 24678 net.cpp:124] Setting up mnist
I0428 19:40:52.075062 24678 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:52.075069 24678 net.cpp:131] Top shape: 100 (100)
I0428 19:40:52.075075 24678 net.cpp:139] Memory required for data: 314000
I0428 19:40:52.075080 24678 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:52.075096 24678 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:52.075103 24678 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:52.075111 24678 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:52.075121 24678 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:52.075186 24678 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:52.075193 24678 net.cpp:131] Top shape: 100 (100)
I0428 19:40:52.075201 24678 net.cpp:131] Top shape: 100 (100)
I0428 19:40:52.075204 24678 net.cpp:139] Memory required for data: 314800
I0428 19:40:52.075211 24678 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:52.075224 24678 net.cpp:86] Creating Layer conv0
I0428 19:40:52.075232 24678 net.cpp:408] conv0 <- data
I0428 19:40:52.075242 24678 net.cpp:382] conv0 -> conv0
I0428 19:40:52.077239 24678 net.cpp:124] Setting up conv0
I0428 19:40:52.077255 24678 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:52.077260 24678 net.cpp:139] Memory required for data: 775600
I0428 19:40:52.077273 24678 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:52.077282 24678 net.cpp:86] Creating Layer pool0
I0428 19:40:52.077289 24678 net.cpp:408] pool0 <- conv0
I0428 19:40:52.077296 24678 net.cpp:382] pool0 -> pool0
I0428 19:40:52.077337 24678 net.cpp:124] Setting up pool0
I0428 19:40:52.077344 24678 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:52.077348 24678 net.cpp:139] Memory required for data: 890800
I0428 19:40:52.077353 24678 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:52.077365 24678 net.cpp:86] Creating Layer conv1
I0428 19:40:52.077371 24678 net.cpp:408] conv1 <- pool0
I0428 19:40:52.077379 24678 net.cpp:382] conv1 -> conv1
I0428 19:40:52.079027 24678 net.cpp:124] Setting up conv1
I0428 19:40:52.079057 24678 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:52.079064 24678 net.cpp:139] Memory required for data: 1018800
I0428 19:40:52.079092 24678 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:52.079108 24678 net.cpp:86] Creating Layer pool1
I0428 19:40:52.079115 24678 net.cpp:408] pool1 <- conv1
I0428 19:40:52.079133 24678 net.cpp:382] pool1 -> pool1
I0428 19:40:52.079190 24678 net.cpp:124] Setting up pool1
I0428 19:40:52.079197 24678 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:52.079203 24678 net.cpp:139] Memory required for data: 1050800
I0428 19:40:52.079208 24678 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:52.079218 24678 net.cpp:86] Creating Layer ip1
I0428 19:40:52.079224 24678 net.cpp:408] ip1 <- pool1
I0428 19:40:52.079233 24678 net.cpp:382] ip1 -> ip1
I0428 19:40:52.079377 24678 net.cpp:124] Setting up ip1
I0428 19:40:52.079401 24678 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:52.079418 24678 net.cpp:139] Memory required for data: 1070800
I0428 19:40:52.079432 24678 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:52.079440 24678 net.cpp:86] Creating Layer relu1
I0428 19:40:52.079445 24678 net.cpp:408] relu1 <- ip1
I0428 19:40:52.079453 24678 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:52.079617 24678 net.cpp:124] Setting up relu1
I0428 19:40:52.079627 24678 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:52.079633 24678 net.cpp:139] Memory required for data: 1090800
I0428 19:40:52.079638 24678 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:52.079649 24678 net.cpp:86] Creating Layer ip2
I0428 19:40:52.079656 24678 net.cpp:408] ip2 <- ip1
I0428 19:40:52.079665 24678 net.cpp:382] ip2 -> ip2
I0428 19:40:52.079792 24678 net.cpp:124] Setting up ip2
I0428 19:40:52.079800 24678 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:52.079805 24678 net.cpp:139] Memory required for data: 1100800
I0428 19:40:52.079814 24678 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:52.079821 24678 net.cpp:86] Creating Layer relu2
I0428 19:40:52.079826 24678 net.cpp:408] relu2 <- ip2
I0428 19:40:52.079833 24678 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:52.080099 24678 net.cpp:124] Setting up relu2
I0428 19:40:52.080108 24678 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:52.080114 24678 net.cpp:139] Memory required for data: 1110800
I0428 19:40:52.080129 24678 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:52.080138 24678 net.cpp:86] Creating Layer ip3
I0428 19:40:52.080144 24678 net.cpp:408] ip3 <- ip2
I0428 19:40:52.080153 24678 net.cpp:382] ip3 -> ip3
I0428 19:40:52.080278 24678 net.cpp:124] Setting up ip3
I0428 19:40:52.080287 24678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:52.080293 24678 net.cpp:139] Memory required for data: 1114800
I0428 19:40:52.080307 24678 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:52.080315 24678 net.cpp:86] Creating Layer relu3
I0428 19:40:52.080324 24678 net.cpp:408] relu3 <- ip3
I0428 19:40:52.080332 24678 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:52.081226 24678 net.cpp:124] Setting up relu3
I0428 19:40:52.081240 24678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:52.081246 24678 net.cpp:139] Memory required for data: 1118800
I0428 19:40:52.081252 24678 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:52.081260 24678 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:52.081266 24678 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:52.081274 24678 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:52.081284 24678 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:52.081357 24678 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:52.081378 24678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:52.081384 24678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:52.081389 24678 net.cpp:139] Memory required for data: 1126800
I0428 19:40:52.081394 24678 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:52.081403 24678 net.cpp:86] Creating Layer accuracy
I0428 19:40:52.081408 24678 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:52.081414 24678 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:52.081421 24678 net.cpp:382] accuracy -> accuracy
I0428 19:40:52.081435 24678 net.cpp:124] Setting up accuracy
I0428 19:40:52.081444 24678 net.cpp:131] Top shape: (1)
I0428 19:40:52.081449 24678 net.cpp:139] Memory required for data: 1126804
I0428 19:40:52.081454 24678 layer_factory.hpp:77] Creating layer loss
I0428 19:40:52.081459 24678 net.cpp:86] Creating Layer loss
I0428 19:40:52.081465 24678 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:52.081477 24678 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:52.081485 24678 net.cpp:382] loss -> loss
I0428 19:40:52.081495 24678 layer_factory.hpp:77] Creating layer loss
I0428 19:40:52.081774 24678 net.cpp:124] Setting up loss
I0428 19:40:52.081786 24678 net.cpp:131] Top shape: (1)
I0428 19:40:52.081792 24678 net.cpp:134]     with loss weight 1
I0428 19:40:52.081801 24678 net.cpp:139] Memory required for data: 1126808
I0428 19:40:52.081820 24678 net.cpp:200] loss needs backward computation.
I0428 19:40:52.081826 24678 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:52.081833 24678 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:52.081840 24678 net.cpp:200] relu3 needs backward computation.
I0428 19:40:52.081845 24678 net.cpp:200] ip3 needs backward computation.
I0428 19:40:52.081851 24678 net.cpp:200] relu2 needs backward computation.
I0428 19:40:52.081857 24678 net.cpp:200] ip2 needs backward computation.
I0428 19:40:52.081862 24678 net.cpp:200] relu1 needs backward computation.
I0428 19:40:52.081867 24678 net.cpp:200] ip1 needs backward computation.
I0428 19:40:52.081873 24678 net.cpp:200] pool1 needs backward computation.
I0428 19:40:52.081893 24678 net.cpp:200] conv1 needs backward computation.
I0428 19:40:52.081898 24678 net.cpp:200] pool0 needs backward computation.
I0428 19:40:52.081904 24678 net.cpp:200] conv0 needs backward computation.
I0428 19:40:52.081910 24678 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:52.081918 24678 net.cpp:202] mnist does not need backward computation.
I0428 19:40:52.081921 24678 net.cpp:244] This network produces output accuracy
I0428 19:40:52.081928 24678 net.cpp:244] This network produces output loss
I0428 19:40:52.081959 24678 net.cpp:257] Network initialization done.
I0428 19:40:52.082005 24678 solver.cpp:56] Solver scaffolding done.
I0428 19:40:52.082398 24678 caffe.cpp:248] Starting Optimization
I0428 19:40:52.082406 24678 solver.cpp:273] Solving LeNet
I0428 19:40:52.082411 24678 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:52.082689 24678 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:52.086032 24678 blocking_queue.cpp:49] Waiting for data
I0428 19:40:52.158711 24685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:52.159155 24678 solver.cpp:398]     Test net output #0: accuracy = 0.0886
I0428 19:40:52.159176 24678 solver.cpp:398]     Test net output #1: loss = 2.38161 (* 1 = 2.38161 loss)
I0428 19:40:52.161041 24678 solver.cpp:219] Iteration 0 (2.8964 iter/s, 0.0785971s/100 iters), loss = 2.36081
I0428 19:40:52.161085 24678 solver.cpp:238]     Train net output #0: loss = 2.36081 (* 1 = 2.36081 loss)
I0428 19:40:52.161118 24678 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:52.230566 24678 solver.cpp:219] Iteration 100 (1439.31 iter/s, 0.0694775s/100 iters), loss = 1.22277
I0428 19:40:52.230592 24678 solver.cpp:238]     Train net output #0: loss = 1.22277 (* 1 = 1.22277 loss)
I0428 19:40:52.230618 24678 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:52.299687 24678 solver.cpp:219] Iteration 200 (1447.42 iter/s, 0.0690883s/100 iters), loss = 1.04923
I0428 19:40:52.299713 24678 solver.cpp:238]     Train net output #0: loss = 1.04923 (* 1 = 1.04923 loss)
I0428 19:40:52.299738 24678 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:52.368932 24678 solver.cpp:219] Iteration 300 (1444.83 iter/s, 0.0692122s/100 iters), loss = 0.894082
I0428 19:40:52.368959 24678 solver.cpp:238]     Train net output #0: loss = 0.894082 (* 1 = 0.894082 loss)
I0428 19:40:52.368985 24678 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:52.437909 24678 solver.cpp:219] Iteration 400 (1450.46 iter/s, 0.0689439s/100 iters), loss = 0.874753
I0428 19:40:52.437937 24678 solver.cpp:238]     Train net output #0: loss = 0.874753 (* 1 = 0.874753 loss)
I0428 19:40:52.437963 24678 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:52.505983 24678 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:52.559010 24685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:52.559427 24678 solver.cpp:398]     Test net output #0: accuracy = 0.7393
I0428 19:40:52.559448 24678 solver.cpp:398]     Test net output #1: loss = 0.690514 (* 1 = 0.690514 loss)
I0428 19:40:52.560255 24678 solver.cpp:219] Iteration 500 (817.707 iter/s, 0.122293s/100 iters), loss = 0.862444
I0428 19:40:52.560282 24678 solver.cpp:238]     Train net output #0: loss = 0.862444 (* 1 = 0.862444 loss)
I0428 19:40:52.560308 24678 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:52.629063 24678 solver.cpp:219] Iteration 600 (1453.99 iter/s, 0.0687761s/100 iters), loss = 0.641117
I0428 19:40:52.629091 24678 solver.cpp:238]     Train net output #0: loss = 0.641117 (* 1 = 0.641117 loss)
I0428 19:40:52.629117 24678 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:52.698415 24678 solver.cpp:219] Iteration 700 (1442.66 iter/s, 0.0693166s/100 iters), loss = 0.750947
I0428 19:40:52.698441 24678 solver.cpp:238]     Train net output #0: loss = 0.750947 (* 1 = 0.750947 loss)
I0428 19:40:52.698467 24678 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:52.766911 24678 solver.cpp:219] Iteration 800 (1460.63 iter/s, 0.0684636s/100 iters), loss = 0.588875
I0428 19:40:52.766937 24678 solver.cpp:238]     Train net output #0: loss = 0.588875 (* 1 = 0.588875 loss)
I0428 19:40:52.766963 24678 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:52.834661 24678 solver.cpp:219] Iteration 900 (1476.73 iter/s, 0.0677171s/100 iters), loss = 0.588939
I0428 19:40:52.834688 24678 solver.cpp:238]     Train net output #0: loss = 0.588939 (* 1 = 0.588939 loss)
I0428 19:40:52.834714 24678 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:52.857973 24684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:52.902736 24678 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:52.903471 24678 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:52.904011 24678 solver.cpp:311] Iteration 1000, loss = 0.487946
I0428 19:40:52.904027 24678 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:52.948237 24685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:52.948652 24678 solver.cpp:398]     Test net output #0: accuracy = 0.7549
I0428 19:40:52.948673 24678 solver.cpp:398]     Test net output #1: loss = 0.613601 (* 1 = 0.613601 loss)
I0428 19:40:52.948683 24678 solver.cpp:316] Optimization Done.
I0428 19:40:52.948688 24678 caffe.cpp:259] Optimization Done.
