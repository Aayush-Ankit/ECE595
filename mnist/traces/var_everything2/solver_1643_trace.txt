I0428 20:36:52.780916  4861 caffe.cpp:218] Using GPUs 0
I0428 20:36:52.818388  4861 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:53.332193  4861 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1643.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:53.332340  4861 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1643.prototxt
I0428 20:36:53.332721  4861 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:53.332739  4861 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:53.332839  4861 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:53.332917  4861 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:53.333019  4861 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:53.333041  4861 net.cpp:86] Creating Layer mnist
I0428 20:36:53.333051  4861 net.cpp:382] mnist -> data
I0428 20:36:53.333073  4861 net.cpp:382] mnist -> label
I0428 20:36:53.334159  4861 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:53.336603  4861 net.cpp:124] Setting up mnist
I0428 20:36:53.336621  4861 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:53.336629  4861 net.cpp:131] Top shape: 64 (64)
I0428 20:36:53.336632  4861 net.cpp:139] Memory required for data: 200960
I0428 20:36:53.336639  4861 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:53.336655  4861 net.cpp:86] Creating Layer conv0
I0428 20:36:53.336660  4861 net.cpp:408] conv0 <- data
I0428 20:36:53.336673  4861 net.cpp:382] conv0 -> conv0
I0428 20:36:53.595711  4861 net.cpp:124] Setting up conv0
I0428 20:36:53.595753  4861 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:53.595757  4861 net.cpp:139] Memory required for data: 14946560
I0428 20:36:53.595793  4861 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:53.595805  4861 net.cpp:86] Creating Layer pool0
I0428 20:36:53.595809  4861 net.cpp:408] pool0 <- conv0
I0428 20:36:53.595814  4861 net.cpp:382] pool0 -> pool0
I0428 20:36:53.595877  4861 net.cpp:124] Setting up pool0
I0428 20:36:53.595892  4861 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:53.595896  4861 net.cpp:139] Memory required for data: 18632960
I0428 20:36:53.595898  4861 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:53.595909  4861 net.cpp:86] Creating Layer conv1
I0428 20:36:53.595912  4861 net.cpp:408] conv1 <- pool0
I0428 20:36:53.595917  4861 net.cpp:382] conv1 -> conv1
I0428 20:36:53.599941  4861 net.cpp:124] Setting up conv1
I0428 20:36:53.599970  4861 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:53.599974  4861 net.cpp:139] Memory required for data: 20271360
I0428 20:36:53.599982  4861 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:53.599989  4861 net.cpp:86] Creating Layer pool1
I0428 20:36:53.599992  4861 net.cpp:408] pool1 <- conv1
I0428 20:36:53.599997  4861 net.cpp:382] pool1 -> pool1
I0428 20:36:53.600047  4861 net.cpp:124] Setting up pool1
I0428 20:36:53.600052  4861 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:53.600055  4861 net.cpp:139] Memory required for data: 20680960
I0428 20:36:53.600059  4861 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:53.600064  4861 net.cpp:86] Creating Layer ip1
I0428 20:36:53.600067  4861 net.cpp:408] ip1 <- pool1
I0428 20:36:53.600072  4861 net.cpp:382] ip1 -> ip1
I0428 20:36:53.601099  4861 net.cpp:124] Setting up ip1
I0428 20:36:53.601126  4861 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:53.601130  4861 net.cpp:139] Memory required for data: 20683520
I0428 20:36:53.601138  4861 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:53.601145  4861 net.cpp:86] Creating Layer relu1
I0428 20:36:53.601147  4861 net.cpp:408] relu1 <- ip1
I0428 20:36:53.601152  4861 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:53.601317  4861 net.cpp:124] Setting up relu1
I0428 20:36:53.601326  4861 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:53.601330  4861 net.cpp:139] Memory required for data: 20686080
I0428 20:36:53.601347  4861 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:53.601353  4861 net.cpp:86] Creating Layer ip2
I0428 20:36:53.601372  4861 net.cpp:408] ip2 <- ip1
I0428 20:36:53.601377  4861 net.cpp:382] ip2 -> ip2
I0428 20:36:53.601469  4861 net.cpp:124] Setting up ip2
I0428 20:36:53.601475  4861 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:53.601480  4861 net.cpp:139] Memory required for data: 20688640
I0428 20:36:53.601485  4861 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:53.601490  4861 net.cpp:86] Creating Layer relu2
I0428 20:36:53.601493  4861 net.cpp:408] relu2 <- ip2
I0428 20:36:53.601497  4861 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:53.602236  4861 net.cpp:124] Setting up relu2
I0428 20:36:53.602247  4861 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:53.602267  4861 net.cpp:139] Memory required for data: 20691200
I0428 20:36:53.602270  4861 layer_factory.hpp:77] Creating layer loss
I0428 20:36:53.602291  4861 net.cpp:86] Creating Layer loss
I0428 20:36:53.602295  4861 net.cpp:408] loss <- ip2
I0428 20:36:53.602300  4861 net.cpp:408] loss <- label
I0428 20:36:53.602306  4861 net.cpp:382] loss -> loss
I0428 20:36:53.602327  4861 layer_factory.hpp:77] Creating layer loss
I0428 20:36:53.602558  4861 net.cpp:124] Setting up loss
I0428 20:36:53.602568  4861 net.cpp:131] Top shape: (1)
I0428 20:36:53.602571  4861 net.cpp:134]     with loss weight 1
I0428 20:36:53.602586  4861 net.cpp:139] Memory required for data: 20691204
I0428 20:36:53.602591  4861 net.cpp:200] loss needs backward computation.
I0428 20:36:53.602594  4861 net.cpp:200] relu2 needs backward computation.
I0428 20:36:53.602597  4861 net.cpp:200] ip2 needs backward computation.
I0428 20:36:53.602602  4861 net.cpp:200] relu1 needs backward computation.
I0428 20:36:53.602603  4861 net.cpp:200] ip1 needs backward computation.
I0428 20:36:53.602617  4861 net.cpp:200] pool1 needs backward computation.
I0428 20:36:53.602622  4861 net.cpp:200] conv1 needs backward computation.
I0428 20:36:53.602624  4861 net.cpp:200] pool0 needs backward computation.
I0428 20:36:53.602643  4861 net.cpp:200] conv0 needs backward computation.
I0428 20:36:53.602646  4861 net.cpp:202] mnist does not need backward computation.
I0428 20:36:53.602649  4861 net.cpp:244] This network produces output loss
I0428 20:36:53.602658  4861 net.cpp:257] Network initialization done.
I0428 20:36:53.602942  4861 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1643.prototxt
I0428 20:36:53.602967  4861 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:53.603046  4861 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:53.603106  4861 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:53.603147  4861 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:53.603173  4861 net.cpp:86] Creating Layer mnist
I0428 20:36:53.603178  4861 net.cpp:382] mnist -> data
I0428 20:36:53.603185  4861 net.cpp:382] mnist -> label
I0428 20:36:53.603289  4861 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:53.605547  4861 net.cpp:124] Setting up mnist
I0428 20:36:53.605576  4861 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:53.605597  4861 net.cpp:131] Top shape: 100 (100)
I0428 20:36:53.605600  4861 net.cpp:139] Memory required for data: 314000
I0428 20:36:53.605603  4861 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:53.605635  4861 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:53.605639  4861 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:53.605646  4861 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:53.605654  4861 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:53.605814  4861 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:53.605823  4861 net.cpp:131] Top shape: 100 (100)
I0428 20:36:53.605828  4861 net.cpp:131] Top shape: 100 (100)
I0428 20:36:53.605830  4861 net.cpp:139] Memory required for data: 314800
I0428 20:36:53.605834  4861 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:53.605844  4861 net.cpp:86] Creating Layer conv0
I0428 20:36:53.605846  4861 net.cpp:408] conv0 <- data
I0428 20:36:53.605852  4861 net.cpp:382] conv0 -> conv0
I0428 20:36:53.607498  4861 net.cpp:124] Setting up conv0
I0428 20:36:53.607527  4861 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:53.607532  4861 net.cpp:139] Memory required for data: 23354800
I0428 20:36:53.607539  4861 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:53.607545  4861 net.cpp:86] Creating Layer pool0
I0428 20:36:53.607548  4861 net.cpp:408] pool0 <- conv0
I0428 20:36:53.607554  4861 net.cpp:382] pool0 -> pool0
I0428 20:36:53.607589  4861 net.cpp:124] Setting up pool0
I0428 20:36:53.607594  4861 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:53.607597  4861 net.cpp:139] Memory required for data: 29114800
I0428 20:36:53.607599  4861 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:53.607610  4861 net.cpp:86] Creating Layer conv1
I0428 20:36:53.607614  4861 net.cpp:408] conv1 <- pool0
I0428 20:36:53.607619  4861 net.cpp:382] conv1 -> conv1
I0428 20:36:53.610599  4861 net.cpp:124] Setting up conv1
I0428 20:36:53.610627  4861 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:53.610631  4861 net.cpp:139] Memory required for data: 31674800
I0428 20:36:53.610640  4861 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:53.610646  4861 net.cpp:86] Creating Layer pool1
I0428 20:36:53.610649  4861 net.cpp:408] pool1 <- conv1
I0428 20:36:53.610654  4861 net.cpp:382] pool1 -> pool1
I0428 20:36:53.610692  4861 net.cpp:124] Setting up pool1
I0428 20:36:53.610697  4861 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:53.610699  4861 net.cpp:139] Memory required for data: 32314800
I0428 20:36:53.610702  4861 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:53.610708  4861 net.cpp:86] Creating Layer ip1
I0428 20:36:53.610713  4861 net.cpp:408] ip1 <- pool1
I0428 20:36:53.610718  4861 net.cpp:382] ip1 -> ip1
I0428 20:36:53.610896  4861 net.cpp:124] Setting up ip1
I0428 20:36:53.610904  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.610908  4861 net.cpp:139] Memory required for data: 32318800
I0428 20:36:53.610915  4861 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:53.610921  4861 net.cpp:86] Creating Layer relu1
I0428 20:36:53.610924  4861 net.cpp:408] relu1 <- ip1
I0428 20:36:53.610929  4861 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:53.611086  4861 net.cpp:124] Setting up relu1
I0428 20:36:53.611096  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.611100  4861 net.cpp:139] Memory required for data: 32322800
I0428 20:36:53.611104  4861 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:53.611110  4861 net.cpp:86] Creating Layer ip2
I0428 20:36:53.611114  4861 net.cpp:408] ip2 <- ip1
I0428 20:36:53.611124  4861 net.cpp:382] ip2 -> ip2
I0428 20:36:53.611240  4861 net.cpp:124] Setting up ip2
I0428 20:36:53.611248  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.611251  4861 net.cpp:139] Memory required for data: 32326800
I0428 20:36:53.611258  4861 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:53.611263  4861 net.cpp:86] Creating Layer relu2
I0428 20:36:53.611268  4861 net.cpp:408] relu2 <- ip2
I0428 20:36:53.611271  4861 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:53.611431  4861 net.cpp:124] Setting up relu2
I0428 20:36:53.611440  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.611444  4861 net.cpp:139] Memory required for data: 32330800
I0428 20:36:53.611448  4861 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:36:53.611459  4861 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:36:53.611462  4861 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:36:53.611467  4861 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:36:53.611482  4861 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:36:53.611536  4861 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:36:53.611558  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.611562  4861 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:53.611565  4861 net.cpp:139] Memory required for data: 32338800
I0428 20:36:53.611568  4861 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:53.611574  4861 net.cpp:86] Creating Layer accuracy
I0428 20:36:53.611577  4861 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:36:53.611582  4861 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:53.611587  4861 net.cpp:382] accuracy -> accuracy
I0428 20:36:53.611593  4861 net.cpp:124] Setting up accuracy
I0428 20:36:53.611596  4861 net.cpp:131] Top shape: (1)
I0428 20:36:53.611599  4861 net.cpp:139] Memory required for data: 32338804
I0428 20:36:53.611603  4861 layer_factory.hpp:77] Creating layer loss
I0428 20:36:53.611606  4861 net.cpp:86] Creating Layer loss
I0428 20:36:53.611610  4861 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:36:53.611614  4861 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:53.611619  4861 net.cpp:382] loss -> loss
I0428 20:36:53.611626  4861 layer_factory.hpp:77] Creating layer loss
I0428 20:36:53.611879  4861 net.cpp:124] Setting up loss
I0428 20:36:53.611888  4861 net.cpp:131] Top shape: (1)
I0428 20:36:53.611891  4861 net.cpp:134]     with loss weight 1
I0428 20:36:53.611897  4861 net.cpp:139] Memory required for data: 32338808
I0428 20:36:53.611901  4861 net.cpp:200] loss needs backward computation.
I0428 20:36:53.611905  4861 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:53.611909  4861 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:36:53.611912  4861 net.cpp:200] relu2 needs backward computation.
I0428 20:36:53.611915  4861 net.cpp:200] ip2 needs backward computation.
I0428 20:36:53.611918  4861 net.cpp:200] relu1 needs backward computation.
I0428 20:36:53.611922  4861 net.cpp:200] ip1 needs backward computation.
I0428 20:36:53.611924  4861 net.cpp:200] pool1 needs backward computation.
I0428 20:36:53.611927  4861 net.cpp:200] conv1 needs backward computation.
I0428 20:36:53.611935  4861 net.cpp:200] pool0 needs backward computation.
I0428 20:36:53.611944  4861 net.cpp:200] conv0 needs backward computation.
I0428 20:36:53.611948  4861 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:53.611951  4861 net.cpp:202] mnist does not need backward computation.
I0428 20:36:53.611954  4861 net.cpp:244] This network produces output accuracy
I0428 20:36:53.611958  4861 net.cpp:244] This network produces output loss
I0428 20:36:53.611968  4861 net.cpp:257] Network initialization done.
I0428 20:36:53.612004  4861 solver.cpp:56] Solver scaffolding done.
I0428 20:36:53.612284  4861 caffe.cpp:248] Starting Optimization
I0428 20:36:53.612292  4861 solver.cpp:273] Solving LeNet
I0428 20:36:53.612299  4861 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:53.613162  4861 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:53.741741  4870 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:53.745203  4861 solver.cpp:398]     Test net output #0: accuracy = 0.169
I0428 20:36:53.745237  4861 solver.cpp:398]     Test net output #1: loss = 2.28906 (* 1 = 2.28906 loss)
I0428 20:36:53.750586  4861 solver.cpp:219] Iteration 0 (0 iter/s, 0.138258s/100 iters), loss = 2.26347
I0428 20:36:53.750627  4861 solver.cpp:238]     Train net output #0: loss = 2.26347 (* 1 = 2.26347 loss)
I0428 20:36:53.750638  4861 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:54.007345  4861 solver.cpp:219] Iteration 100 (389.536 iter/s, 0.256716s/100 iters), loss = 0.941256
I0428 20:36:54.007387  4861 solver.cpp:238]     Train net output #0: loss = 0.941256 (* 1 = 0.941256 loss)
I0428 20:36:54.007395  4861 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:54.262714  4861 solver.cpp:219] Iteration 200 (391.684 iter/s, 0.255308s/100 iters), loss = 0.623663
I0428 20:36:54.262794  4861 solver.cpp:238]     Train net output #0: loss = 0.623663 (* 1 = 0.623663 loss)
I0428 20:36:54.262805  4861 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:54.518976  4861 solver.cpp:219] Iteration 300 (390.347 iter/s, 0.256182s/100 iters), loss = 0.518612
I0428 20:36:54.519016  4861 solver.cpp:238]     Train net output #0: loss = 0.518612 (* 1 = 0.518612 loss)
I0428 20:36:54.519024  4861 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:54.775249  4861 solver.cpp:219] Iteration 400 (390.302 iter/s, 0.256212s/100 iters), loss = 0.374243
I0428 20:36:54.775297  4861 solver.cpp:238]     Train net output #0: loss = 0.374243 (* 1 = 0.374243 loss)
I0428 20:36:54.775305  4861 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:55.030324  4861 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:55.151552  4870 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:55.154738  4861 solver.cpp:398]     Test net output #0: accuracy = 0.7906
I0428 20:36:55.154777  4861 solver.cpp:398]     Test net output #1: loss = 0.531495 (* 1 = 0.531495 loss)
I0428 20:36:55.157315  4861 solver.cpp:219] Iteration 500 (261.784 iter/s, 0.381995s/100 iters), loss = 0.617994
I0428 20:36:55.157336  4861 solver.cpp:238]     Train net output #0: loss = 0.617994 (* 1 = 0.617994 loss)
I0428 20:36:55.157343  4861 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:55.434027  4861 solver.cpp:219] Iteration 600 (361.443 iter/s, 0.276668s/100 iters), loss = 0.467274
I0428 20:36:55.434084  4861 solver.cpp:238]     Train net output #0: loss = 0.467274 (* 1 = 0.467274 loss)
I0428 20:36:55.434111  4861 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:55.709350  4861 solver.cpp:219] Iteration 700 (363.306 iter/s, 0.27525s/100 iters), loss = 0.829982
I0428 20:36:55.709390  4861 solver.cpp:238]     Train net output #0: loss = 0.829982 (* 1 = 0.829982 loss)
I0428 20:36:55.709403  4861 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:55.980208  4861 solver.cpp:219] Iteration 800 (369.274 iter/s, 0.270802s/100 iters), loss = 0.636671
I0428 20:36:55.980242  4861 solver.cpp:238]     Train net output #0: loss = 0.636671 (* 1 = 0.636671 loss)
I0428 20:36:55.980252  4861 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:56.253125  4861 solver.cpp:219] Iteration 900 (366.483 iter/s, 0.272864s/100 iters), loss = 0.500105
I0428 20:36:56.253165  4861 solver.cpp:238]     Train net output #0: loss = 0.500105 (* 1 = 0.500105 loss)
I0428 20:36:56.253175  4861 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:56.345283  4869 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:56.530448  4861 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:56.537463  4861 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:56.541548  4861 solver.cpp:311] Iteration 1000, loss = 0.621308
I0428 20:36:56.541573  4861 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:56.670864  4870 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:56.675292  4861 solver.cpp:398]     Test net output #0: accuracy = 0.795
I0428 20:36:56.675315  4861 solver.cpp:398]     Test net output #1: loss = 0.50438 (* 1 = 0.50438 loss)
I0428 20:36:56.675323  4861 solver.cpp:316] Optimization Done.
I0428 20:36:56.675326  4861 caffe.cpp:259] Optimization Done.
