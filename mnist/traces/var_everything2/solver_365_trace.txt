I0428 19:41:27.150471 24829 caffe.cpp:218] Using GPUs 0
I0428 19:41:27.191346 24829 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:27.656800 24829 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test365.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:27.656987 24829 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test365.prototxt
I0428 19:41:27.657367 24829 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:27.657382 24829 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:27.657479 24829 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:27.657542 24829 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:27.657622 24829 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:27.657644 24829 net.cpp:86] Creating Layer mnist
I0428 19:41:27.657649 24829 net.cpp:382] mnist -> data
I0428 19:41:27.657670 24829 net.cpp:382] mnist -> label
I0428 19:41:27.658676 24829 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:27.660969 24829 net.cpp:124] Setting up mnist
I0428 19:41:27.660984 24829 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:27.660991 24829 net.cpp:131] Top shape: 64 (64)
I0428 19:41:27.660995 24829 net.cpp:139] Memory required for data: 200960
I0428 19:41:27.661000 24829 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:27.661015 24829 net.cpp:86] Creating Layer conv0
I0428 19:41:27.661038 24829 net.cpp:408] conv0 <- data
I0428 19:41:27.661049 24829 net.cpp:382] conv0 -> conv0
I0428 19:41:27.886317 24829 net.cpp:124] Setting up conv0
I0428 19:41:27.886343 24829 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:27.886346 24829 net.cpp:139] Memory required for data: 495872
I0428 19:41:27.886360 24829 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:27.886389 24829 net.cpp:86] Creating Layer pool0
I0428 19:41:27.886392 24829 net.cpp:408] pool0 <- conv0
I0428 19:41:27.886414 24829 net.cpp:382] pool0 -> pool0
I0428 19:41:27.886457 24829 net.cpp:124] Setting up pool0
I0428 19:41:27.886476 24829 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:27.886478 24829 net.cpp:139] Memory required for data: 569600
I0428 19:41:27.886482 24829 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:27.886492 24829 net.cpp:86] Creating Layer conv1
I0428 19:41:27.886495 24829 net.cpp:408] conv1 <- pool0
I0428 19:41:27.886499 24829 net.cpp:382] conv1 -> conv1
I0428 19:41:27.888706 24829 net.cpp:124] Setting up conv1
I0428 19:41:27.888721 24829 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:27.888725 24829 net.cpp:139] Memory required for data: 733440
I0428 19:41:27.888749 24829 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:27.888757 24829 net.cpp:86] Creating Layer pool1
I0428 19:41:27.888761 24829 net.cpp:408] pool1 <- conv1
I0428 19:41:27.888767 24829 net.cpp:382] pool1 -> pool1
I0428 19:41:27.888803 24829 net.cpp:124] Setting up pool1
I0428 19:41:27.888818 24829 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:27.888821 24829 net.cpp:139] Memory required for data: 774400
I0428 19:41:27.888824 24829 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:27.888847 24829 net.cpp:86] Creating Layer ip1
I0428 19:41:27.888851 24829 net.cpp:408] ip1 <- pool1
I0428 19:41:27.888857 24829 net.cpp:382] ip1 -> ip1
I0428 19:41:27.889925 24829 net.cpp:124] Setting up ip1
I0428 19:41:27.889952 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.889956 24829 net.cpp:139] Memory required for data: 776960
I0428 19:41:27.889964 24829 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:27.889971 24829 net.cpp:86] Creating Layer relu1
I0428 19:41:27.889974 24829 net.cpp:408] relu1 <- ip1
I0428 19:41:27.889979 24829 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:27.890167 24829 net.cpp:124] Setting up relu1
I0428 19:41:27.890177 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.890178 24829 net.cpp:139] Memory required for data: 779520
I0428 19:41:27.890182 24829 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:27.890192 24829 net.cpp:86] Creating Layer ip2
I0428 19:41:27.890195 24829 net.cpp:408] ip2 <- ip1
I0428 19:41:27.890200 24829 net.cpp:382] ip2 -> ip2
I0428 19:41:27.890297 24829 net.cpp:124] Setting up ip2
I0428 19:41:27.890305 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.890306 24829 net.cpp:139] Memory required for data: 782080
I0428 19:41:27.890312 24829 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:27.890317 24829 net.cpp:86] Creating Layer relu2
I0428 19:41:27.890321 24829 net.cpp:408] relu2 <- ip2
I0428 19:41:27.890341 24829 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:27.891173 24829 net.cpp:124] Setting up relu2
I0428 19:41:27.891185 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.891204 24829 net.cpp:139] Memory required for data: 784640
I0428 19:41:27.891208 24829 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:27.891216 24829 net.cpp:86] Creating Layer ip3
I0428 19:41:27.891221 24829 net.cpp:408] ip3 <- ip2
I0428 19:41:27.891225 24829 net.cpp:382] ip3 -> ip3
I0428 19:41:27.891324 24829 net.cpp:124] Setting up ip3
I0428 19:41:27.891331 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.891335 24829 net.cpp:139] Memory required for data: 787200
I0428 19:41:27.891342 24829 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:27.891347 24829 net.cpp:86] Creating Layer relu3
I0428 19:41:27.891350 24829 net.cpp:408] relu3 <- ip3
I0428 19:41:27.891355 24829 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:27.891566 24829 net.cpp:124] Setting up relu3
I0428 19:41:27.891574 24829 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:27.891577 24829 net.cpp:139] Memory required for data: 789760
I0428 19:41:27.891580 24829 layer_factory.hpp:77] Creating layer loss
I0428 19:41:27.891587 24829 net.cpp:86] Creating Layer loss
I0428 19:41:27.891590 24829 net.cpp:408] loss <- ip3
I0428 19:41:27.891594 24829 net.cpp:408] loss <- label
I0428 19:41:27.891600 24829 net.cpp:382] loss -> loss
I0428 19:41:27.891618 24829 layer_factory.hpp:77] Creating layer loss
I0428 19:41:27.891890 24829 net.cpp:124] Setting up loss
I0428 19:41:27.891913 24829 net.cpp:131] Top shape: (1)
I0428 19:41:27.891916 24829 net.cpp:134]     with loss weight 1
I0428 19:41:27.891947 24829 net.cpp:139] Memory required for data: 789764
I0428 19:41:27.891949 24829 net.cpp:200] loss needs backward computation.
I0428 19:41:27.891953 24829 net.cpp:200] relu3 needs backward computation.
I0428 19:41:27.891957 24829 net.cpp:200] ip3 needs backward computation.
I0428 19:41:27.891959 24829 net.cpp:200] relu2 needs backward computation.
I0428 19:41:27.891963 24829 net.cpp:200] ip2 needs backward computation.
I0428 19:41:27.891965 24829 net.cpp:200] relu1 needs backward computation.
I0428 19:41:27.891968 24829 net.cpp:200] ip1 needs backward computation.
I0428 19:41:27.891971 24829 net.cpp:200] pool1 needs backward computation.
I0428 19:41:27.891975 24829 net.cpp:200] conv1 needs backward computation.
I0428 19:41:27.891978 24829 net.cpp:200] pool0 needs backward computation.
I0428 19:41:27.891981 24829 net.cpp:200] conv0 needs backward computation.
I0428 19:41:27.891984 24829 net.cpp:202] mnist does not need backward computation.
I0428 19:41:27.891988 24829 net.cpp:244] This network produces output loss
I0428 19:41:27.891999 24829 net.cpp:257] Network initialization done.
I0428 19:41:27.892395 24829 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test365.prototxt
I0428 19:41:27.892436 24829 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:27.892544 24829 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:27.892628 24829 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:27.892673 24829 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:27.892685 24829 net.cpp:86] Creating Layer mnist
I0428 19:41:27.892689 24829 net.cpp:382] mnist -> data
I0428 19:41:27.892699 24829 net.cpp:382] mnist -> label
I0428 19:41:27.892797 24829 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:27.894878 24829 net.cpp:124] Setting up mnist
I0428 19:41:27.894908 24829 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:27.894913 24829 net.cpp:131] Top shape: 100 (100)
I0428 19:41:27.894917 24829 net.cpp:139] Memory required for data: 314000
I0428 19:41:27.894920 24829 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:27.894942 24829 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:27.894948 24829 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:27.894954 24829 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:27.894961 24829 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:27.895009 24829 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:27.895014 24829 net.cpp:131] Top shape: 100 (100)
I0428 19:41:27.895018 24829 net.cpp:131] Top shape: 100 (100)
I0428 19:41:27.895021 24829 net.cpp:139] Memory required for data: 314800
I0428 19:41:27.895025 24829 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:27.895035 24829 net.cpp:86] Creating Layer conv0
I0428 19:41:27.895040 24829 net.cpp:408] conv0 <- data
I0428 19:41:27.895045 24829 net.cpp:382] conv0 -> conv0
I0428 19:41:27.896920 24829 net.cpp:124] Setting up conv0
I0428 19:41:27.896950 24829 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:27.896955 24829 net.cpp:139] Memory required for data: 775600
I0428 19:41:27.896965 24829 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:27.896972 24829 net.cpp:86] Creating Layer pool0
I0428 19:41:27.896976 24829 net.cpp:408] pool0 <- conv0
I0428 19:41:27.896982 24829 net.cpp:382] pool0 -> pool0
I0428 19:41:27.897022 24829 net.cpp:124] Setting up pool0
I0428 19:41:27.897029 24829 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:27.897032 24829 net.cpp:139] Memory required for data: 890800
I0428 19:41:27.897035 24829 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:27.897045 24829 net.cpp:86] Creating Layer conv1
I0428 19:41:27.897048 24829 net.cpp:408] conv1 <- pool0
I0428 19:41:27.897053 24829 net.cpp:382] conv1 -> conv1
I0428 19:41:27.898841 24829 net.cpp:124] Setting up conv1
I0428 19:41:27.898854 24829 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:27.898874 24829 net.cpp:139] Memory required for data: 1146800
I0428 19:41:27.898881 24829 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:27.898888 24829 net.cpp:86] Creating Layer pool1
I0428 19:41:27.898892 24829 net.cpp:408] pool1 <- conv1
I0428 19:41:27.898898 24829 net.cpp:382] pool1 -> pool1
I0428 19:41:27.898949 24829 net.cpp:124] Setting up pool1
I0428 19:41:27.898954 24829 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:27.898957 24829 net.cpp:139] Memory required for data: 1210800
I0428 19:41:27.898960 24829 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:27.898967 24829 net.cpp:86] Creating Layer ip1
I0428 19:41:27.898970 24829 net.cpp:408] ip1 <- pool1
I0428 19:41:27.898975 24829 net.cpp:382] ip1 -> ip1
I0428 19:41:27.899104 24829 net.cpp:124] Setting up ip1
I0428 19:41:27.899113 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.899127 24829 net.cpp:139] Memory required for data: 1214800
I0428 19:41:27.899135 24829 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:27.899140 24829 net.cpp:86] Creating Layer relu1
I0428 19:41:27.899144 24829 net.cpp:408] relu1 <- ip1
I0428 19:41:27.899152 24829 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:27.899340 24829 net.cpp:124] Setting up relu1
I0428 19:41:27.899349 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.899353 24829 net.cpp:139] Memory required for data: 1218800
I0428 19:41:27.899356 24829 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:27.899364 24829 net.cpp:86] Creating Layer ip2
I0428 19:41:27.899369 24829 net.cpp:408] ip2 <- ip1
I0428 19:41:27.899374 24829 net.cpp:382] ip2 -> ip2
I0428 19:41:27.899523 24829 net.cpp:124] Setting up ip2
I0428 19:41:27.899531 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.899534 24829 net.cpp:139] Memory required for data: 1222800
I0428 19:41:27.899539 24829 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:27.899545 24829 net.cpp:86] Creating Layer relu2
I0428 19:41:27.899549 24829 net.cpp:408] relu2 <- ip2
I0428 19:41:27.899552 24829 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:27.899780 24829 net.cpp:124] Setting up relu2
I0428 19:41:27.899790 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.899803 24829 net.cpp:139] Memory required for data: 1226800
I0428 19:41:27.899807 24829 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:27.899813 24829 net.cpp:86] Creating Layer ip3
I0428 19:41:27.899817 24829 net.cpp:408] ip3 <- ip2
I0428 19:41:27.899821 24829 net.cpp:382] ip3 -> ip3
I0428 19:41:27.899945 24829 net.cpp:124] Setting up ip3
I0428 19:41:27.899952 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.899955 24829 net.cpp:139] Memory required for data: 1230800
I0428 19:41:27.899963 24829 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:27.899969 24829 net.cpp:86] Creating Layer relu3
I0428 19:41:27.899972 24829 net.cpp:408] relu3 <- ip3
I0428 19:41:27.899977 24829 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:27.900882 24829 net.cpp:124] Setting up relu3
I0428 19:41:27.900912 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.900915 24829 net.cpp:139] Memory required for data: 1234800
I0428 19:41:27.900918 24829 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:41:27.900923 24829 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:41:27.900926 24829 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:41:27.900931 24829 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:41:27.900938 24829 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:41:27.900982 24829 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:41:27.900987 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.900991 24829 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:27.900993 24829 net.cpp:139] Memory required for data: 1242800
I0428 19:41:27.900996 24829 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:27.901003 24829 net.cpp:86] Creating Layer accuracy
I0428 19:41:27.901006 24829 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:41:27.901010 24829 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:27.901015 24829 net.cpp:382] accuracy -> accuracy
I0428 19:41:27.901022 24829 net.cpp:124] Setting up accuracy
I0428 19:41:27.901026 24829 net.cpp:131] Top shape: (1)
I0428 19:41:27.901028 24829 net.cpp:139] Memory required for data: 1242804
I0428 19:41:27.901031 24829 layer_factory.hpp:77] Creating layer loss
I0428 19:41:27.901038 24829 net.cpp:86] Creating Layer loss
I0428 19:41:27.901041 24829 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:41:27.901046 24829 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:27.901051 24829 net.cpp:382] loss -> loss
I0428 19:41:27.901057 24829 layer_factory.hpp:77] Creating layer loss
I0428 19:41:27.901319 24829 net.cpp:124] Setting up loss
I0428 19:41:27.901329 24829 net.cpp:131] Top shape: (1)
I0428 19:41:27.901331 24829 net.cpp:134]     with loss weight 1
I0428 19:41:27.901352 24829 net.cpp:139] Memory required for data: 1242808
I0428 19:41:27.901365 24829 net.cpp:200] loss needs backward computation.
I0428 19:41:27.901393 24829 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:27.901402 24829 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:41:27.901410 24829 net.cpp:200] relu3 needs backward computation.
I0428 19:41:27.901413 24829 net.cpp:200] ip3 needs backward computation.
I0428 19:41:27.901437 24829 net.cpp:200] relu2 needs backward computation.
I0428 19:41:27.901440 24829 net.cpp:200] ip2 needs backward computation.
I0428 19:41:27.901443 24829 net.cpp:200] relu1 needs backward computation.
I0428 19:41:27.901446 24829 net.cpp:200] ip1 needs backward computation.
I0428 19:41:27.901450 24829 net.cpp:200] pool1 needs backward computation.
I0428 19:41:27.901454 24829 net.cpp:200] conv1 needs backward computation.
I0428 19:41:27.901458 24829 net.cpp:200] pool0 needs backward computation.
I0428 19:41:27.901460 24829 net.cpp:200] conv0 needs backward computation.
I0428 19:41:27.901465 24829 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:27.901469 24829 net.cpp:202] mnist does not need backward computation.
I0428 19:41:27.901473 24829 net.cpp:244] This network produces output accuracy
I0428 19:41:27.901477 24829 net.cpp:244] This network produces output loss
I0428 19:41:27.901489 24829 net.cpp:257] Network initialization done.
I0428 19:41:27.901535 24829 solver.cpp:56] Solver scaffolding done.
I0428 19:41:27.901932 24829 caffe.cpp:248] Starting Optimization
I0428 19:41:27.901942 24829 solver.cpp:273] Solving LeNet
I0428 19:41:27.901945 24829 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:27.902957 24829 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:27.905656 24829 blocking_queue.cpp:49] Waiting for data
I0428 19:41:27.976562 24837 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:27.977035 24829 solver.cpp:398]     Test net output #0: accuracy = 0.0942
I0428 19:41:27.977057 24829 solver.cpp:398]     Test net output #1: loss = 2.29121 (* 1 = 2.29121 loss)
I0428 19:41:27.978924 24829 solver.cpp:219] Iteration 0 (0 iter/s, 0.0769249s/100 iters), loss = 2.28225
I0428 19:41:27.978986 24829 solver.cpp:238]     Train net output #0: loss = 2.28225 (* 1 = 2.28225 loss)
I0428 19:41:27.979013 24829 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:28.054313 24829 solver.cpp:219] Iteration 100 (1327.46 iter/s, 0.0753319s/100 iters), loss = 0.492108
I0428 19:41:28.054354 24829 solver.cpp:238]     Train net output #0: loss = 0.492108 (* 1 = 0.492108 loss)
I0428 19:41:28.054360 24829 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:28.125493 24829 solver.cpp:219] Iteration 200 (1405.91 iter/s, 0.0711281s/100 iters), loss = 0.403332
I0428 19:41:28.125532 24829 solver.cpp:238]     Train net output #0: loss = 0.403332 (* 1 = 0.403332 loss)
I0428 19:41:28.125537 24829 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:28.196308 24829 solver.cpp:219] Iteration 300 (1412.87 iter/s, 0.0707779s/100 iters), loss = 0.36162
I0428 19:41:28.196346 24829 solver.cpp:238]     Train net output #0: loss = 0.36162 (* 1 = 0.36162 loss)
I0428 19:41:28.196352 24829 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:28.267320 24829 solver.cpp:219] Iteration 400 (1409.12 iter/s, 0.0709663s/100 iters), loss = 0.274494
I0428 19:41:28.267359 24829 solver.cpp:238]     Train net output #0: loss = 0.274494 (* 1 = 0.274494 loss)
I0428 19:41:28.267365 24829 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:28.337885 24829 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:28.413792 24837 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:28.414269 24829 solver.cpp:398]     Test net output #0: accuracy = 0.9298
I0428 19:41:28.414288 24829 solver.cpp:398]     Test net output #1: loss = 0.23215 (* 1 = 0.23215 loss)
I0428 19:41:28.415091 24829 solver.cpp:219] Iteration 500 (676.891 iter/s, 0.147734s/100 iters), loss = 0.238776
I0428 19:41:28.415127 24829 solver.cpp:238]     Train net output #0: loss = 0.238776 (* 1 = 0.238776 loss)
I0428 19:41:28.415150 24829 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:28.494024 24829 solver.cpp:219] Iteration 600 (1267.49 iter/s, 0.0788961s/100 iters), loss = 0.176875
I0428 19:41:28.494062 24829 solver.cpp:238]     Train net output #0: loss = 0.176875 (* 1 = 0.176875 loss)
I0428 19:41:28.494068 24829 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:28.569780 24829 solver.cpp:219] Iteration 700 (1320.91 iter/s, 0.0757053s/100 iters), loss = 0.27193
I0428 19:41:28.569819 24829 solver.cpp:238]     Train net output #0: loss = 0.271929 (* 1 = 0.271929 loss)
I0428 19:41:28.569826 24829 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:28.641479 24829 solver.cpp:219] Iteration 800 (1395.37 iter/s, 0.0716657s/100 iters), loss = 0.356751
I0428 19:41:28.641518 24829 solver.cpp:238]     Train net output #0: loss = 0.356751 (* 1 = 0.356751 loss)
I0428 19:41:28.641525 24829 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:28.712247 24829 solver.cpp:219] Iteration 900 (1413.81 iter/s, 0.0707308s/100 iters), loss = 0.266587
I0428 19:41:28.712287 24829 solver.cpp:238]     Train net output #0: loss = 0.266587 (* 1 = 0.266587 loss)
I0428 19:41:28.712293 24829 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:28.736088 24835 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:28.782356 24829 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:28.783066 24829 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:28.783540 24829 solver.cpp:311] Iteration 1000, loss = 0.235696
I0428 19:41:28.783553 24829 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:28.849637 24837 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:28.850092 24829 solver.cpp:398]     Test net output #0: accuracy = 0.9503
I0428 19:41:28.850126 24829 solver.cpp:398]     Test net output #1: loss = 0.160696 (* 1 = 0.160696 loss)
I0428 19:41:28.850131 24829 solver.cpp:316] Optimization Done.
I0428 19:41:28.850134 24829 caffe.cpp:259] Optimization Done.
