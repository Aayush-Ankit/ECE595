I0428 20:00:54.947935 29610 caffe.cpp:218] Using GPUs 0
I0428 20:00:54.985056 29610 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:00:55.438057 29610 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test889.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:00:55.438192 29610 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test889.prototxt
I0428 20:00:55.438520 29610 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:00:55.438536 29610 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:00:55.438616 29610 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:00:55.438678 29610 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:55.438781 29610 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:00:55.438799 29610 net.cpp:86] Creating Layer mnist
I0428 20:00:55.438805 29610 net.cpp:382] mnist -> data
I0428 20:00:55.438825 29610 net.cpp:382] mnist -> label
I0428 20:00:55.439812 29610 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:00:55.442131 29610 net.cpp:124] Setting up mnist
I0428 20:00:55.442162 29610 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:00:55.442167 29610 net.cpp:131] Top shape: 64 (64)
I0428 20:00:55.442170 29610 net.cpp:139] Memory required for data: 200960
I0428 20:00:55.442176 29610 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:55.442190 29610 net.cpp:86] Creating Layer conv0
I0428 20:00:55.442206 29610 net.cpp:408] conv0 <- data
I0428 20:00:55.442216 29610 net.cpp:382] conv0 -> conv0
I0428 20:00:55.667507 29610 net.cpp:124] Setting up conv0
I0428 20:00:55.667532 29610 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:00:55.667536 29610 net.cpp:139] Memory required for data: 1675520
I0428 20:00:55.667549 29610 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:55.667562 29610 net.cpp:86] Creating Layer pool0
I0428 20:00:55.667565 29610 net.cpp:408] pool0 <- conv0
I0428 20:00:55.667570 29610 net.cpp:382] pool0 -> pool0
I0428 20:00:55.667629 29610 net.cpp:124] Setting up pool0
I0428 20:00:55.667634 29610 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:00:55.667636 29610 net.cpp:139] Memory required for data: 2044160
I0428 20:00:55.667639 29610 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:55.667652 29610 net.cpp:86] Creating Layer conv1
I0428 20:00:55.667655 29610 net.cpp:408] conv1 <- pool0
I0428 20:00:55.667659 29610 net.cpp:382] conv1 -> conv1
I0428 20:00:55.670476 29610 net.cpp:124] Setting up conv1
I0428 20:00:55.670506 29610 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:00:55.670509 29610 net.cpp:139] Memory required for data: 2453760
I0428 20:00:55.670517 29610 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:55.670524 29610 net.cpp:86] Creating Layer pool1
I0428 20:00:55.670528 29610 net.cpp:408] pool1 <- conv1
I0428 20:00:55.670533 29610 net.cpp:382] pool1 -> pool1
I0428 20:00:55.670599 29610 net.cpp:124] Setting up pool1
I0428 20:00:55.670604 29610 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:00:55.670608 29610 net.cpp:139] Memory required for data: 2556160
I0428 20:00:55.670610 29610 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:55.670617 29610 net.cpp:86] Creating Layer ip1
I0428 20:00:55.670620 29610 net.cpp:408] ip1 <- pool1
I0428 20:00:55.670624 29610 net.cpp:382] ip1 -> ip1
I0428 20:00:55.670822 29610 net.cpp:124] Setting up ip1
I0428 20:00:55.670830 29610 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:00:55.670832 29610 net.cpp:139] Memory required for data: 2568960
I0428 20:00:55.670840 29610 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:55.670845 29610 net.cpp:86] Creating Layer relu1
I0428 20:00:55.670847 29610 net.cpp:408] relu1 <- ip1
I0428 20:00:55.670851 29610 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:55.671020 29610 net.cpp:124] Setting up relu1
I0428 20:00:55.671027 29610 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:00:55.671030 29610 net.cpp:139] Memory required for data: 2581760
I0428 20:00:55.671033 29610 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:55.671039 29610 net.cpp:86] Creating Layer ip2
I0428 20:00:55.671042 29610 net.cpp:408] ip2 <- ip1
I0428 20:00:55.671046 29610 net.cpp:382] ip2 -> ip2
I0428 20:00:55.671136 29610 net.cpp:124] Setting up ip2
I0428 20:00:55.671142 29610 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:55.671145 29610 net.cpp:139] Memory required for data: 2584320
I0428 20:00:55.671150 29610 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:55.671155 29610 net.cpp:86] Creating Layer relu2
I0428 20:00:55.671159 29610 net.cpp:408] relu2 <- ip2
I0428 20:00:55.671162 29610 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:55.671973 29610 net.cpp:124] Setting up relu2
I0428 20:00:55.671985 29610 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:55.671988 29610 net.cpp:139] Memory required for data: 2586880
I0428 20:00:55.671993 29610 layer_factory.hpp:77] Creating layer ip3
I0428 20:00:55.671998 29610 net.cpp:86] Creating Layer ip3
I0428 20:00:55.672003 29610 net.cpp:408] ip3 <- ip2
I0428 20:00:55.672008 29610 net.cpp:382] ip3 -> ip3
I0428 20:00:55.672101 29610 net.cpp:124] Setting up ip3
I0428 20:00:55.672107 29610 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:55.672111 29610 net.cpp:139] Memory required for data: 2589440
I0428 20:00:55.672118 29610 layer_factory.hpp:77] Creating layer relu3
I0428 20:00:55.672123 29610 net.cpp:86] Creating Layer relu3
I0428 20:00:55.672127 29610 net.cpp:408] relu3 <- ip3
I0428 20:00:55.672130 29610 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:00:55.672288 29610 net.cpp:124] Setting up relu3
I0428 20:00:55.672297 29610 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:55.672299 29610 net.cpp:139] Memory required for data: 2592000
I0428 20:00:55.672302 29610 layer_factory.hpp:77] Creating layer loss
I0428 20:00:55.672312 29610 net.cpp:86] Creating Layer loss
I0428 20:00:55.672317 29610 net.cpp:408] loss <- ip3
I0428 20:00:55.672319 29610 net.cpp:408] loss <- label
I0428 20:00:55.672324 29610 net.cpp:382] loss -> loss
I0428 20:00:55.672338 29610 layer_factory.hpp:77] Creating layer loss
I0428 20:00:55.672592 29610 net.cpp:124] Setting up loss
I0428 20:00:55.672601 29610 net.cpp:131] Top shape: (1)
I0428 20:00:55.672605 29610 net.cpp:134]     with loss weight 1
I0428 20:00:55.672619 29610 net.cpp:139] Memory required for data: 2592004
I0428 20:00:55.672623 29610 net.cpp:200] loss needs backward computation.
I0428 20:00:55.672641 29610 net.cpp:200] relu3 needs backward computation.
I0428 20:00:55.672644 29610 net.cpp:200] ip3 needs backward computation.
I0428 20:00:55.672647 29610 net.cpp:200] relu2 needs backward computation.
I0428 20:00:55.672649 29610 net.cpp:200] ip2 needs backward computation.
I0428 20:00:55.672652 29610 net.cpp:200] relu1 needs backward computation.
I0428 20:00:55.672655 29610 net.cpp:200] ip1 needs backward computation.
I0428 20:00:55.672658 29610 net.cpp:200] pool1 needs backward computation.
I0428 20:00:55.672662 29610 net.cpp:200] conv1 needs backward computation.
I0428 20:00:55.672664 29610 net.cpp:200] pool0 needs backward computation.
I0428 20:00:55.672667 29610 net.cpp:200] conv0 needs backward computation.
I0428 20:00:55.672670 29610 net.cpp:202] mnist does not need backward computation.
I0428 20:00:55.672673 29610 net.cpp:244] This network produces output loss
I0428 20:00:55.672683 29610 net.cpp:257] Network initialization done.
I0428 20:00:55.673086 29610 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test889.prototxt
I0428 20:00:55.673115 29610 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:00:55.673220 29610 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:00:55.673298 29610 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:55.673354 29610 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:00:55.673367 29610 net.cpp:86] Creating Layer mnist
I0428 20:00:55.673370 29610 net.cpp:382] mnist -> data
I0428 20:00:55.673378 29610 net.cpp:382] mnist -> label
I0428 20:00:55.673457 29610 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:00:55.675654 29610 net.cpp:124] Setting up mnist
I0428 20:00:55.675699 29610 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:00:55.675704 29610 net.cpp:131] Top shape: 100 (100)
I0428 20:00:55.675722 29610 net.cpp:139] Memory required for data: 314000
I0428 20:00:55.675726 29610 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:00:55.675748 29610 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:00:55.675752 29610 net.cpp:408] label_mnist_1_split <- label
I0428 20:00:55.675757 29610 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:00:55.675765 29610 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:00:55.675858 29610 net.cpp:124] Setting up label_mnist_1_split
I0428 20:00:55.675865 29610 net.cpp:131] Top shape: 100 (100)
I0428 20:00:55.675869 29610 net.cpp:131] Top shape: 100 (100)
I0428 20:00:55.675873 29610 net.cpp:139] Memory required for data: 314800
I0428 20:00:55.675875 29610 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:55.675884 29610 net.cpp:86] Creating Layer conv0
I0428 20:00:55.675887 29610 net.cpp:408] conv0 <- data
I0428 20:00:55.675892 29610 net.cpp:382] conv0 -> conv0
I0428 20:00:55.677606 29610 net.cpp:124] Setting up conv0
I0428 20:00:55.677620 29610 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:00:55.677639 29610 net.cpp:139] Memory required for data: 2618800
I0428 20:00:55.677659 29610 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:55.677665 29610 net.cpp:86] Creating Layer pool0
I0428 20:00:55.677669 29610 net.cpp:408] pool0 <- conv0
I0428 20:00:55.677673 29610 net.cpp:382] pool0 -> pool0
I0428 20:00:55.677707 29610 net.cpp:124] Setting up pool0
I0428 20:00:55.677712 29610 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:00:55.677716 29610 net.cpp:139] Memory required for data: 3194800
I0428 20:00:55.677718 29610 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:55.677726 29610 net.cpp:86] Creating Layer conv1
I0428 20:00:55.677728 29610 net.cpp:408] conv1 <- pool0
I0428 20:00:55.677733 29610 net.cpp:382] conv1 -> conv1
I0428 20:00:55.679908 29610 net.cpp:124] Setting up conv1
I0428 20:00:55.679922 29610 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:00:55.679944 29610 net.cpp:139] Memory required for data: 3834800
I0428 20:00:55.679952 29610 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:55.679960 29610 net.cpp:86] Creating Layer pool1
I0428 20:00:55.679963 29610 net.cpp:408] pool1 <- conv1
I0428 20:00:55.679970 29610 net.cpp:382] pool1 -> pool1
I0428 20:00:55.680027 29610 net.cpp:124] Setting up pool1
I0428 20:00:55.680033 29610 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:00:55.680037 29610 net.cpp:139] Memory required for data: 3994800
I0428 20:00:55.680039 29610 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:55.680045 29610 net.cpp:86] Creating Layer ip1
I0428 20:00:55.680064 29610 net.cpp:408] ip1 <- pool1
I0428 20:00:55.680069 29610 net.cpp:382] ip1 -> ip1
I0428 20:00:55.680341 29610 net.cpp:124] Setting up ip1
I0428 20:00:55.680347 29610 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:00:55.680361 29610 net.cpp:139] Memory required for data: 4014800
I0428 20:00:55.680369 29610 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:55.680375 29610 net.cpp:86] Creating Layer relu1
I0428 20:00:55.680378 29610 net.cpp:408] relu1 <- ip1
I0428 20:00:55.680382 29610 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:55.680588 29610 net.cpp:124] Setting up relu1
I0428 20:00:55.680596 29610 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:00:55.680599 29610 net.cpp:139] Memory required for data: 4034800
I0428 20:00:55.680603 29610 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:55.680611 29610 net.cpp:86] Creating Layer ip2
I0428 20:00:55.680614 29610 net.cpp:408] ip2 <- ip1
I0428 20:00:55.680620 29610 net.cpp:382] ip2 -> ip2
I0428 20:00:55.680728 29610 net.cpp:124] Setting up ip2
I0428 20:00:55.680737 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.680739 29610 net.cpp:139] Memory required for data: 4038800
I0428 20:00:55.680745 29610 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:55.680750 29610 net.cpp:86] Creating Layer relu2
I0428 20:00:55.680753 29610 net.cpp:408] relu2 <- ip2
I0428 20:00:55.680758 29610 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:55.680950 29610 net.cpp:124] Setting up relu2
I0428 20:00:55.680961 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.680966 29610 net.cpp:139] Memory required for data: 4042800
I0428 20:00:55.680969 29610 layer_factory.hpp:77] Creating layer ip3
I0428 20:00:55.680975 29610 net.cpp:86] Creating Layer ip3
I0428 20:00:55.680979 29610 net.cpp:408] ip3 <- ip2
I0428 20:00:55.680984 29610 net.cpp:382] ip3 -> ip3
I0428 20:00:55.681149 29610 net.cpp:124] Setting up ip3
I0428 20:00:55.681155 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.681159 29610 net.cpp:139] Memory required for data: 4046800
I0428 20:00:55.681167 29610 layer_factory.hpp:77] Creating layer relu3
I0428 20:00:55.681172 29610 net.cpp:86] Creating Layer relu3
I0428 20:00:55.681175 29610 net.cpp:408] relu3 <- ip3
I0428 20:00:55.681180 29610 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:00:55.682085 29610 net.cpp:124] Setting up relu3
I0428 20:00:55.682099 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.682119 29610 net.cpp:139] Memory required for data: 4050800
I0428 20:00:55.682122 29610 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:00:55.682127 29610 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:00:55.682130 29610 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:00:55.682137 29610 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:00:55.682144 29610 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:00:55.682183 29610 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:00:55.682188 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.682190 29610 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:55.682193 29610 net.cpp:139] Memory required for data: 4058800
I0428 20:00:55.682196 29610 layer_factory.hpp:77] Creating layer accuracy
I0428 20:00:55.682202 29610 net.cpp:86] Creating Layer accuracy
I0428 20:00:55.682205 29610 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:00:55.682209 29610 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:00:55.682214 29610 net.cpp:382] accuracy -> accuracy
I0428 20:00:55.682222 29610 net.cpp:124] Setting up accuracy
I0428 20:00:55.682226 29610 net.cpp:131] Top shape: (1)
I0428 20:00:55.682229 29610 net.cpp:139] Memory required for data: 4058804
I0428 20:00:55.682231 29610 layer_factory.hpp:77] Creating layer loss
I0428 20:00:55.682236 29610 net.cpp:86] Creating Layer loss
I0428 20:00:55.682240 29610 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:00:55.682243 29610 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:00:55.682247 29610 net.cpp:382] loss -> loss
I0428 20:00:55.682252 29610 layer_factory.hpp:77] Creating layer loss
I0428 20:00:55.682548 29610 net.cpp:124] Setting up loss
I0428 20:00:55.682557 29610 net.cpp:131] Top shape: (1)
I0428 20:00:55.682561 29610 net.cpp:134]     with loss weight 1
I0428 20:00:55.682579 29610 net.cpp:139] Memory required for data: 4058808
I0428 20:00:55.682582 29610 net.cpp:200] loss needs backward computation.
I0428 20:00:55.682587 29610 net.cpp:202] accuracy does not need backward computation.
I0428 20:00:55.682590 29610 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:00:55.682593 29610 net.cpp:200] relu3 needs backward computation.
I0428 20:00:55.682596 29610 net.cpp:200] ip3 needs backward computation.
I0428 20:00:55.682600 29610 net.cpp:200] relu2 needs backward computation.
I0428 20:00:55.682603 29610 net.cpp:200] ip2 needs backward computation.
I0428 20:00:55.682606 29610 net.cpp:200] relu1 needs backward computation.
I0428 20:00:55.682610 29610 net.cpp:200] ip1 needs backward computation.
I0428 20:00:55.682613 29610 net.cpp:200] pool1 needs backward computation.
I0428 20:00:55.682617 29610 net.cpp:200] conv1 needs backward computation.
I0428 20:00:55.682621 29610 net.cpp:200] pool0 needs backward computation.
I0428 20:00:55.682623 29610 net.cpp:200] conv0 needs backward computation.
I0428 20:00:55.682627 29610 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:00:55.682631 29610 net.cpp:202] mnist does not need backward computation.
I0428 20:00:55.682634 29610 net.cpp:244] This network produces output accuracy
I0428 20:00:55.682637 29610 net.cpp:244] This network produces output loss
I0428 20:00:55.682648 29610 net.cpp:257] Network initialization done.
I0428 20:00:55.682706 29610 solver.cpp:56] Solver scaffolding done.
I0428 20:00:55.683100 29610 caffe.cpp:248] Starting Optimization
I0428 20:00:55.683122 29610 solver.cpp:273] Solving LeNet
I0428 20:00:55.683125 29610 solver.cpp:274] Learning Rate Policy: inv
I0428 20:00:55.684049 29610 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:00:55.688490 29610 blocking_queue.cpp:49] Waiting for data
I0428 20:00:55.756193 29617 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:55.756767 29610 solver.cpp:398]     Test net output #0: accuracy = 0.0415
I0428 20:00:55.756801 29610 solver.cpp:398]     Test net output #1: loss = 2.31932 (* 1 = 2.31932 loss)
I0428 20:00:55.759364 29610 solver.cpp:219] Iteration 0 (0 iter/s, 0.0761928s/100 iters), loss = 2.32456
I0428 20:00:55.759402 29610 solver.cpp:238]     Train net output #0: loss = 2.32456 (* 1 = 2.32456 loss)
I0428 20:00:55.759413 29610 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:00:55.860227 29610 solver.cpp:219] Iteration 100 (991.807 iter/s, 0.100826s/100 iters), loss = 1.15591
I0428 20:00:55.860251 29610 solver.cpp:238]     Train net output #0: loss = 1.15591 (* 1 = 1.15591 loss)
I0428 20:00:55.860257 29610 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:00:55.949373 29610 solver.cpp:219] Iteration 200 (1122.19 iter/s, 0.0891116s/100 iters), loss = 0.643568
I0428 20:00:55.949398 29610 solver.cpp:238]     Train net output #0: loss = 0.643568 (* 1 = 0.643568 loss)
I0428 20:00:55.949420 29610 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:00:56.038483 29610 solver.cpp:219] Iteration 300 (1122.63 iter/s, 0.0890767s/100 iters), loss = 0.568915
I0428 20:00:56.038507 29610 solver.cpp:238]     Train net output #0: loss = 0.568915 (* 1 = 0.568915 loss)
I0428 20:00:56.038528 29610 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:00:56.127527 29610 solver.cpp:219] Iteration 400 (1123.45 iter/s, 0.0890112s/100 iters), loss = 0.575928
I0428 20:00:56.127552 29610 solver.cpp:238]     Train net output #0: loss = 0.575928 (* 1 = 0.575928 loss)
I0428 20:00:56.127573 29610 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:00:56.216018 29610 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:00:56.291348 29617 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:56.291877 29610 solver.cpp:398]     Test net output #0: accuracy = 0.9192
I0428 20:00:56.291898 29610 solver.cpp:398]     Test net output #1: loss = 0.379347 (* 1 = 0.379347 loss)
I0428 20:00:56.292891 29610 solver.cpp:219] Iteration 500 (604.87 iter/s, 0.165325s/100 iters), loss = 0.423258
I0428 20:00:56.292930 29610 solver.cpp:238]     Train net output #0: loss = 0.423258 (* 1 = 0.423258 loss)
I0428 20:00:56.292942 29610 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:00:56.394412 29610 solver.cpp:219] Iteration 600 (985.501 iter/s, 0.101471s/100 iters), loss = 0.298297
I0428 20:00:56.394453 29610 solver.cpp:238]     Train net output #0: loss = 0.298297 (* 1 = 0.298297 loss)
I0428 20:00:56.394459 29610 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:00:56.485630 29610 solver.cpp:219] Iteration 700 (1096.89 iter/s, 0.0911669s/100 iters), loss = 0.401724
I0428 20:00:56.485669 29610 solver.cpp:238]     Train net output #0: loss = 0.401724 (* 1 = 0.401724 loss)
I0428 20:00:56.485676 29610 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:00:56.574259 29610 solver.cpp:219] Iteration 800 (1128.74 iter/s, 0.0885945s/100 iters), loss = 0.443672
I0428 20:00:56.574283 29610 solver.cpp:238]     Train net output #0: loss = 0.443672 (* 1 = 0.443672 loss)
I0428 20:00:56.574290 29610 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:00:56.663277 29610 solver.cpp:219] Iteration 900 (1123.8 iter/s, 0.0889836s/100 iters), loss = 0.386162
I0428 20:00:56.663317 29610 solver.cpp:238]     Train net output #0: loss = 0.386162 (* 1 = 0.386162 loss)
I0428 20:00:56.663324 29610 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:00:56.693032 29616 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:56.752279 29610 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:00:56.753495 29610 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:00:56.754150 29610 solver.cpp:311] Iteration 1000, loss = 0.404551
I0428 20:00:56.754165 29610 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:00:56.829556 29617 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:56.830099 29610 solver.cpp:398]     Test net output #0: accuracy = 0.9562
I0428 20:00:56.830133 29610 solver.cpp:398]     Test net output #1: loss = 0.336889 (* 1 = 0.336889 loss)
I0428 20:00:56.830138 29610 solver.cpp:316] Optimization Done.
I0428 20:00:56.830142 29610 caffe.cpp:259] Optimization Done.
