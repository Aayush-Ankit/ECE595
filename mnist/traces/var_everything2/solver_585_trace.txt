I0428 19:49:47.399969 26854 caffe.cpp:218] Using GPUs 0
I0428 19:49:47.430629 26854 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:47.876266 26854 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test585.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:47.876399 26854 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test585.prototxt
I0428 19:49:47.876674 26854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:47.876688 26854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:47.876765 26854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:47.876847 26854 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:47.876966 26854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:47.876987 26854 net.cpp:86] Creating Layer mnist
I0428 19:49:47.876996 26854 net.cpp:382] mnist -> data
I0428 19:49:47.877015 26854 net.cpp:382] mnist -> label
I0428 19:49:47.877986 26854 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:47.880276 26854 net.cpp:124] Setting up mnist
I0428 19:49:47.880290 26854 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:47.880295 26854 net.cpp:131] Top shape: 64 (64)
I0428 19:49:47.880298 26854 net.cpp:139] Memory required for data: 200960
I0428 19:49:47.880303 26854 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:47.880317 26854 net.cpp:86] Creating Layer conv0
I0428 19:49:47.880322 26854 net.cpp:408] conv0 <- data
I0428 19:49:47.880333 26854 net.cpp:382] conv0 -> conv0
I0428 19:49:48.108899 26854 net.cpp:124] Setting up conv0
I0428 19:49:48.108942 26854 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:48.108945 26854 net.cpp:139] Memory required for data: 938240
I0428 19:49:48.108976 26854 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:48.109006 26854 net.cpp:86] Creating Layer pool0
I0428 19:49:48.109026 26854 net.cpp:408] pool0 <- conv0
I0428 19:49:48.109048 26854 net.cpp:382] pool0 -> pool0
I0428 19:49:48.109100 26854 net.cpp:124] Setting up pool0
I0428 19:49:48.109108 26854 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:48.109127 26854 net.cpp:139] Memory required for data: 1122560
I0428 19:49:48.109133 26854 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:48.109145 26854 net.cpp:86] Creating Layer conv1
I0428 19:49:48.109149 26854 net.cpp:408] conv1 <- pool0
I0428 19:49:48.109155 26854 net.cpp:382] conv1 -> conv1
I0428 19:49:48.112078 26854 net.cpp:124] Setting up conv1
I0428 19:49:48.112109 26854 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:49:48.112113 26854 net.cpp:139] Memory required for data: 1286400
I0428 19:49:48.112121 26854 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:48.112130 26854 net.cpp:86] Creating Layer pool1
I0428 19:49:48.112134 26854 net.cpp:408] pool1 <- conv1
I0428 19:49:48.112139 26854 net.cpp:382] pool1 -> pool1
I0428 19:49:48.112179 26854 net.cpp:124] Setting up pool1
I0428 19:49:48.112185 26854 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:49:48.112186 26854 net.cpp:139] Memory required for data: 1327360
I0428 19:49:48.112190 26854 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:48.112197 26854 net.cpp:86] Creating Layer ip1
I0428 19:49:48.112200 26854 net.cpp:408] ip1 <- pool1
I0428 19:49:48.112206 26854 net.cpp:382] ip1 -> ip1
I0428 19:49:48.112325 26854 net.cpp:124] Setting up ip1
I0428 19:49:48.112332 26854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:48.112336 26854 net.cpp:139] Memory required for data: 1329920
I0428 19:49:48.112344 26854 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:48.112349 26854 net.cpp:86] Creating Layer relu1
I0428 19:49:48.112352 26854 net.cpp:408] relu1 <- ip1
I0428 19:49:48.112356 26854 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:48.112526 26854 net.cpp:124] Setting up relu1
I0428 19:49:48.112534 26854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:48.112537 26854 net.cpp:139] Memory required for data: 1332480
I0428 19:49:48.112540 26854 layer_factory.hpp:77] Creating layer loss
I0428 19:49:48.112547 26854 net.cpp:86] Creating Layer loss
I0428 19:49:48.112550 26854 net.cpp:408] loss <- ip1
I0428 19:49:48.112555 26854 net.cpp:408] loss <- label
I0428 19:49:48.112560 26854 net.cpp:382] loss -> loss
I0428 19:49:48.112571 26854 layer_factory.hpp:77] Creating layer loss
I0428 19:49:48.113497 26854 net.cpp:124] Setting up loss
I0428 19:49:48.113526 26854 net.cpp:131] Top shape: (1)
I0428 19:49:48.113530 26854 net.cpp:134]     with loss weight 1
I0428 19:49:48.113544 26854 net.cpp:139] Memory required for data: 1332484
I0428 19:49:48.113548 26854 net.cpp:200] loss needs backward computation.
I0428 19:49:48.113551 26854 net.cpp:200] relu1 needs backward computation.
I0428 19:49:48.113554 26854 net.cpp:200] ip1 needs backward computation.
I0428 19:49:48.113557 26854 net.cpp:200] pool1 needs backward computation.
I0428 19:49:48.113560 26854 net.cpp:200] conv1 needs backward computation.
I0428 19:49:48.113562 26854 net.cpp:200] pool0 needs backward computation.
I0428 19:49:48.113565 26854 net.cpp:200] conv0 needs backward computation.
I0428 19:49:48.113569 26854 net.cpp:202] mnist does not need backward computation.
I0428 19:49:48.113571 26854 net.cpp:244] This network produces output loss
I0428 19:49:48.113579 26854 net.cpp:257] Network initialization done.
I0428 19:49:48.113826 26854 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test585.prototxt
I0428 19:49:48.113848 26854 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:48.113919 26854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:49:48.113991 26854 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:48.114034 26854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:48.114047 26854 net.cpp:86] Creating Layer mnist
I0428 19:49:48.114051 26854 net.cpp:382] mnist -> data
I0428 19:49:48.114073 26854 net.cpp:382] mnist -> label
I0428 19:49:48.114188 26854 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:48.116192 26854 net.cpp:124] Setting up mnist
I0428 19:49:48.116238 26854 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:48.116243 26854 net.cpp:131] Top shape: 100 (100)
I0428 19:49:48.116245 26854 net.cpp:139] Memory required for data: 314000
I0428 19:49:48.116250 26854 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:48.116255 26854 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:48.116259 26854 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:48.116263 26854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:48.116271 26854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:48.116331 26854 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:48.116353 26854 net.cpp:131] Top shape: 100 (100)
I0428 19:49:48.116356 26854 net.cpp:131] Top shape: 100 (100)
I0428 19:49:48.116359 26854 net.cpp:139] Memory required for data: 314800
I0428 19:49:48.116363 26854 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:48.116372 26854 net.cpp:86] Creating Layer conv0
I0428 19:49:48.116375 26854 net.cpp:408] conv0 <- data
I0428 19:49:48.116381 26854 net.cpp:382] conv0 -> conv0
I0428 19:49:48.117355 26854 net.cpp:124] Setting up conv0
I0428 19:49:48.117383 26854 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:48.117386 26854 net.cpp:139] Memory required for data: 1466800
I0428 19:49:48.117409 26854 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:48.117416 26854 net.cpp:86] Creating Layer pool0
I0428 19:49:48.117419 26854 net.cpp:408] pool0 <- conv0
I0428 19:49:48.117424 26854 net.cpp:382] pool0 -> pool0
I0428 19:49:48.117475 26854 net.cpp:124] Setting up pool0
I0428 19:49:48.117480 26854 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:48.117482 26854 net.cpp:139] Memory required for data: 1754800
I0428 19:49:48.117486 26854 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:48.117493 26854 net.cpp:86] Creating Layer conv1
I0428 19:49:48.117496 26854 net.cpp:408] conv1 <- pool0
I0428 19:49:48.117501 26854 net.cpp:382] conv1 -> conv1
I0428 19:49:48.119663 26854 net.cpp:124] Setting up conv1
I0428 19:49:48.119690 26854 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:49:48.119694 26854 net.cpp:139] Memory required for data: 2010800
I0428 19:49:48.119702 26854 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:48.119709 26854 net.cpp:86] Creating Layer pool1
I0428 19:49:48.119738 26854 net.cpp:408] pool1 <- conv1
I0428 19:49:48.119750 26854 net.cpp:382] pool1 -> pool1
I0428 19:49:48.119808 26854 net.cpp:124] Setting up pool1
I0428 19:49:48.119814 26854 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:49:48.119817 26854 net.cpp:139] Memory required for data: 2074800
I0428 19:49:48.119820 26854 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:48.119827 26854 net.cpp:86] Creating Layer ip1
I0428 19:49:48.119830 26854 net.cpp:408] ip1 <- pool1
I0428 19:49:48.119834 26854 net.cpp:382] ip1 -> ip1
I0428 19:49:48.119976 26854 net.cpp:124] Setting up ip1
I0428 19:49:48.119983 26854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:48.119987 26854 net.cpp:139] Memory required for data: 2078800
I0428 19:49:48.119994 26854 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:48.119999 26854 net.cpp:86] Creating Layer relu1
I0428 19:49:48.120003 26854 net.cpp:408] relu1 <- ip1
I0428 19:49:48.120007 26854 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:48.120893 26854 net.cpp:124] Setting up relu1
I0428 19:49:48.120905 26854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:48.120925 26854 net.cpp:139] Memory required for data: 2082800
I0428 19:49:48.120929 26854 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:49:48.120935 26854 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:49:48.120939 26854 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:49:48.120944 26854 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:49:48.120950 26854 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:49:48.121001 26854 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:49:48.121006 26854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:48.121011 26854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:48.121013 26854 net.cpp:139] Memory required for data: 2090800
I0428 19:49:48.121016 26854 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:48.121026 26854 net.cpp:86] Creating Layer accuracy
I0428 19:49:48.121031 26854 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:49:48.121035 26854 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:48.121040 26854 net.cpp:382] accuracy -> accuracy
I0428 19:49:48.121062 26854 net.cpp:124] Setting up accuracy
I0428 19:49:48.121067 26854 net.cpp:131] Top shape: (1)
I0428 19:49:48.121069 26854 net.cpp:139] Memory required for data: 2090804
I0428 19:49:48.121073 26854 layer_factory.hpp:77] Creating layer loss
I0428 19:49:48.121076 26854 net.cpp:86] Creating Layer loss
I0428 19:49:48.121084 26854 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:49:48.121093 26854 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:48.121096 26854 net.cpp:382] loss -> loss
I0428 19:49:48.121107 26854 layer_factory.hpp:77] Creating layer loss
I0428 19:49:48.121381 26854 net.cpp:124] Setting up loss
I0428 19:49:48.121389 26854 net.cpp:131] Top shape: (1)
I0428 19:49:48.121398 26854 net.cpp:134]     with loss weight 1
I0428 19:49:48.121405 26854 net.cpp:139] Memory required for data: 2090808
I0428 19:49:48.121408 26854 net.cpp:200] loss needs backward computation.
I0428 19:49:48.121417 26854 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:48.121421 26854 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:49:48.121428 26854 net.cpp:200] relu1 needs backward computation.
I0428 19:49:48.121431 26854 net.cpp:200] ip1 needs backward computation.
I0428 19:49:48.121435 26854 net.cpp:200] pool1 needs backward computation.
I0428 19:49:48.121438 26854 net.cpp:200] conv1 needs backward computation.
I0428 19:49:48.121443 26854 net.cpp:200] pool0 needs backward computation.
I0428 19:49:48.121445 26854 net.cpp:200] conv0 needs backward computation.
I0428 19:49:48.121449 26854 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:48.121453 26854 net.cpp:202] mnist does not need backward computation.
I0428 19:49:48.121455 26854 net.cpp:244] This network produces output accuracy
I0428 19:49:48.121459 26854 net.cpp:244] This network produces output loss
I0428 19:49:48.121479 26854 net.cpp:257] Network initialization done.
I0428 19:49:48.121512 26854 solver.cpp:56] Solver scaffolding done.
I0428 19:49:48.121742 26854 caffe.cpp:248] Starting Optimization
I0428 19:49:48.121748 26854 solver.cpp:273] Solving LeNet
I0428 19:49:48.121752 26854 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:48.121865 26854 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:48.125181 26854 blocking_queue.cpp:49] Waiting for data
I0428 19:49:48.196475 26861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:48.196949 26854 solver.cpp:398]     Test net output #0: accuracy = 0.1414
I0428 19:49:48.196982 26854 solver.cpp:398]     Test net output #1: loss = 2.29503 (* 1 = 2.29503 loss)
I0428 19:49:48.198580 26854 solver.cpp:219] Iteration 0 (-1.05798e-42 iter/s, 0.0768041s/100 iters), loss = 2.28055
I0428 19:49:48.198624 26854 solver.cpp:238]     Train net output #0: loss = 2.28055 (* 1 = 2.28055 loss)
I0428 19:49:48.198652 26854 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:48.259434 26854 solver.cpp:219] Iteration 100 (1644.66 iter/s, 0.0608029s/100 iters), loss = 1.20685
I0428 19:49:48.259474 26854 solver.cpp:238]     Train net output #0: loss = 1.20685 (* 1 = 1.20685 loss)
I0428 19:49:48.259479 26854 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:48.317873 26854 solver.cpp:219] Iteration 200 (1712.13 iter/s, 0.0584068s/100 iters), loss = 1.34128
I0428 19:49:48.317911 26854 solver.cpp:238]     Train net output #0: loss = 1.34128 (* 1 = 1.34128 loss)
I0428 19:49:48.317917 26854 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:48.377055 26854 solver.cpp:219] Iteration 300 (1690.6 iter/s, 0.0591505s/100 iters), loss = 0.829317
I0428 19:49:48.377096 26854 solver.cpp:238]     Train net output #0: loss = 0.829317 (* 1 = 0.829317 loss)
I0428 19:49:48.377102 26854 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:48.436244 26854 solver.cpp:219] Iteration 400 (1690.46 iter/s, 0.0591553s/100 iters), loss = 0.787643
I0428 19:49:48.436282 26854 solver.cpp:238]     Train net output #0: loss = 0.787643 (* 1 = 0.787643 loss)
I0428 19:49:48.436287 26854 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:48.494266 26854 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:48.547163 26861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:48.547626 26854 solver.cpp:398]     Test net output #0: accuracy = 0.6792
I0428 19:49:48.547662 26854 solver.cpp:398]     Test net output #1: loss = 0.829774 (* 1 = 0.829774 loss)
I0428 19:49:48.548351 26854 solver.cpp:219] Iteration 500 (892.278 iter/s, 0.112073s/100 iters), loss = 0.802497
I0428 19:49:48.548388 26854 solver.cpp:238]     Train net output #0: loss = 0.802497 (* 1 = 0.802497 loss)
I0428 19:49:48.548396 26854 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:48.608048 26854 solver.cpp:219] Iteration 600 (1675.96 iter/s, 0.0596675s/100 iters), loss = 0.795242
I0428 19:49:48.608075 26854 solver.cpp:238]     Train net output #0: loss = 0.795242 (* 1 = 0.795242 loss)
I0428 19:49:48.608083 26854 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:48.666610 26854 solver.cpp:219] Iteration 700 (1708.59 iter/s, 0.0585276s/100 iters), loss = 1.09242
I0428 19:49:48.666648 26854 solver.cpp:238]     Train net output #0: loss = 1.09242 (* 1 = 1.09242 loss)
I0428 19:49:48.666654 26854 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:48.725379 26854 solver.cpp:219] Iteration 800 (1702.46 iter/s, 0.0587386s/100 iters), loss = 0.883081
I0428 19:49:48.725419 26854 solver.cpp:238]     Train net output #0: loss = 0.883081 (* 1 = 0.883081 loss)
I0428 19:49:48.725425 26854 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:48.783673 26854 solver.cpp:219] Iteration 900 (1716.4 iter/s, 0.0582615s/100 iters), loss = 1.05283
I0428 19:49:48.783710 26854 solver.cpp:238]     Train net output #0: loss = 1.05283 (* 1 = 1.05283 loss)
I0428 19:49:48.783716 26854 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:48.803671 26860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:48.843252 26854 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:48.843827 26854 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:48.844213 26854 solver.cpp:311] Iteration 1000, loss = 0.741509
I0428 19:49:48.844228 26854 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:48.890254 26861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:48.890702 26854 solver.cpp:398]     Test net output #0: accuracy = 0.7847
I0428 19:49:48.890720 26854 solver.cpp:398]     Test net output #1: loss = 0.570088 (* 1 = 0.570088 loss)
I0428 19:49:48.890743 26854 solver.cpp:316] Optimization Done.
I0428 19:49:48.890748 26854 caffe.cpp:259] Optimization Done.
