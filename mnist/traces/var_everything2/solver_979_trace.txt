I0428 20:04:42.469480 30442 caffe.cpp:218] Using GPUs 0
I0428 20:04:42.507002 30442 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:04:43.016516 30442 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test979.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:04:43.016655 30442 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test979.prototxt
I0428 20:04:43.017043 30442 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:04:43.017063 30442 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:04:43.017176 30442 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:04:43.017249 30442 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:43.017345 30442 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:04:43.017369 30442 net.cpp:86] Creating Layer mnist
I0428 20:04:43.017376 30442 net.cpp:382] mnist -> data
I0428 20:04:43.017398 30442 net.cpp:382] mnist -> label
I0428 20:04:43.018466 30442 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:04:43.020889 30442 net.cpp:124] Setting up mnist
I0428 20:04:43.020906 30442 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:04:43.020912 30442 net.cpp:131] Top shape: 64 (64)
I0428 20:04:43.020915 30442 net.cpp:139] Memory required for data: 200960
I0428 20:04:43.020922 30442 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:43.020938 30442 net.cpp:86] Creating Layer conv0
I0428 20:04:43.020944 30442 net.cpp:408] conv0 <- data
I0428 20:04:43.020956 30442 net.cpp:382] conv0 -> conv0
I0428 20:04:43.297884 30442 net.cpp:124] Setting up conv0
I0428 20:04:43.297911 30442 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:04:43.297915 30442 net.cpp:139] Memory required for data: 3887360
I0428 20:04:43.297948 30442 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:43.297961 30442 net.cpp:86] Creating Layer pool0
I0428 20:04:43.297966 30442 net.cpp:408] pool0 <- conv0
I0428 20:04:43.297971 30442 net.cpp:382] pool0 -> pool0
I0428 20:04:43.298013 30442 net.cpp:124] Setting up pool0
I0428 20:04:43.298018 30442 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:04:43.298022 30442 net.cpp:139] Memory required for data: 4808960
I0428 20:04:43.298024 30442 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:43.298035 30442 net.cpp:86] Creating Layer conv1
I0428 20:04:43.298038 30442 net.cpp:408] conv1 <- pool0
I0428 20:04:43.298043 30442 net.cpp:382] conv1 -> conv1
I0428 20:04:43.300834 30442 net.cpp:124] Setting up conv1
I0428 20:04:43.300849 30442 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:04:43.300853 30442 net.cpp:139] Memory required for data: 4841728
I0428 20:04:43.300861 30442 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:43.300868 30442 net.cpp:86] Creating Layer pool1
I0428 20:04:43.300873 30442 net.cpp:408] pool1 <- conv1
I0428 20:04:43.300878 30442 net.cpp:382] pool1 -> pool1
I0428 20:04:43.300926 30442 net.cpp:124] Setting up pool1
I0428 20:04:43.300933 30442 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:04:43.300948 30442 net.cpp:139] Memory required for data: 4849920
I0428 20:04:43.300951 30442 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:43.300957 30442 net.cpp:86] Creating Layer ip1
I0428 20:04:43.300961 30442 net.cpp:408] ip1 <- pool1
I0428 20:04:43.300966 30442 net.cpp:382] ip1 -> ip1
I0428 20:04:43.301054 30442 net.cpp:124] Setting up ip1
I0428 20:04:43.301061 30442 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:43.301064 30442 net.cpp:139] Memory required for data: 4852480
I0428 20:04:43.301071 30442 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:43.301076 30442 net.cpp:86] Creating Layer relu1
I0428 20:04:43.301079 30442 net.cpp:408] relu1 <- ip1
I0428 20:04:43.301084 30442 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:43.301240 30442 net.cpp:124] Setting up relu1
I0428 20:04:43.301249 30442 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:43.301251 30442 net.cpp:139] Memory required for data: 4855040
I0428 20:04:43.301254 30442 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:43.301261 30442 net.cpp:86] Creating Layer ip2
I0428 20:04:43.301265 30442 net.cpp:408] ip2 <- ip1
I0428 20:04:43.301268 30442 net.cpp:382] ip2 -> ip2
I0428 20:04:43.301355 30442 net.cpp:124] Setting up ip2
I0428 20:04:43.301362 30442 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:43.301365 30442 net.cpp:139] Memory required for data: 4857600
I0428 20:04:43.301372 30442 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:43.301378 30442 net.cpp:86] Creating Layer relu2
I0428 20:04:43.301380 30442 net.cpp:408] relu2 <- ip2
I0428 20:04:43.301384 30442 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:43.302108 30442 net.cpp:124] Setting up relu2
I0428 20:04:43.302120 30442 net.cpp:131] Top shape: 64 10 (640)
I0428 20:04:43.302124 30442 net.cpp:139] Memory required for data: 4860160
I0428 20:04:43.302127 30442 layer_factory.hpp:77] Creating layer loss
I0428 20:04:43.302134 30442 net.cpp:86] Creating Layer loss
I0428 20:04:43.302137 30442 net.cpp:408] loss <- ip2
I0428 20:04:43.302141 30442 net.cpp:408] loss <- label
I0428 20:04:43.302147 30442 net.cpp:382] loss -> loss
I0428 20:04:43.302167 30442 layer_factory.hpp:77] Creating layer loss
I0428 20:04:43.302434 30442 net.cpp:124] Setting up loss
I0428 20:04:43.302443 30442 net.cpp:131] Top shape: (1)
I0428 20:04:43.302446 30442 net.cpp:134]     with loss weight 1
I0428 20:04:43.302461 30442 net.cpp:139] Memory required for data: 4860164
I0428 20:04:43.302464 30442 net.cpp:200] loss needs backward computation.
I0428 20:04:43.302469 30442 net.cpp:200] relu2 needs backward computation.
I0428 20:04:43.302471 30442 net.cpp:200] ip2 needs backward computation.
I0428 20:04:43.302474 30442 net.cpp:200] relu1 needs backward computation.
I0428 20:04:43.302476 30442 net.cpp:200] ip1 needs backward computation.
I0428 20:04:43.302490 30442 net.cpp:200] pool1 needs backward computation.
I0428 20:04:43.302494 30442 net.cpp:200] conv1 needs backward computation.
I0428 20:04:43.302496 30442 net.cpp:200] pool0 needs backward computation.
I0428 20:04:43.302500 30442 net.cpp:200] conv0 needs backward computation.
I0428 20:04:43.302502 30442 net.cpp:202] mnist does not need backward computation.
I0428 20:04:43.302505 30442 net.cpp:244] This network produces output loss
I0428 20:04:43.302513 30442 net.cpp:257] Network initialization done.
I0428 20:04:43.302808 30442 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test979.prototxt
I0428 20:04:43.302832 30442 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:04:43.302911 30442 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:04:43.302971 30442 layer_factory.hpp:77] Creating layer mnist
I0428 20:04:43.303014 30442 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:04:43.303025 30442 net.cpp:86] Creating Layer mnist
I0428 20:04:43.303030 30442 net.cpp:382] mnist -> data
I0428 20:04:43.303037 30442 net.cpp:382] mnist -> label
I0428 20:04:43.303114 30442 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:04:43.305110 30442 net.cpp:124] Setting up mnist
I0428 20:04:43.305124 30442 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:04:43.305130 30442 net.cpp:131] Top shape: 100 (100)
I0428 20:04:43.305132 30442 net.cpp:139] Memory required for data: 314000
I0428 20:04:43.305151 30442 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:04:43.305161 30442 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:04:43.305164 30442 net.cpp:408] label_mnist_1_split <- label
I0428 20:04:43.305169 30442 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:04:43.305176 30442 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:04:43.305272 30442 net.cpp:124] Setting up label_mnist_1_split
I0428 20:04:43.305291 30442 net.cpp:131] Top shape: 100 (100)
I0428 20:04:43.305295 30442 net.cpp:131] Top shape: 100 (100)
I0428 20:04:43.305299 30442 net.cpp:139] Memory required for data: 314800
I0428 20:04:43.305301 30442 layer_factory.hpp:77] Creating layer conv0
I0428 20:04:43.305310 30442 net.cpp:86] Creating Layer conv0
I0428 20:04:43.305315 30442 net.cpp:408] conv0 <- data
I0428 20:04:43.305320 30442 net.cpp:382] conv0 -> conv0
I0428 20:04:43.306744 30442 net.cpp:124] Setting up conv0
I0428 20:04:43.306757 30442 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:04:43.306774 30442 net.cpp:139] Memory required for data: 6074800
I0428 20:04:43.306798 30442 layer_factory.hpp:77] Creating layer pool0
I0428 20:04:43.306805 30442 net.cpp:86] Creating Layer pool0
I0428 20:04:43.306809 30442 net.cpp:408] pool0 <- conv0
I0428 20:04:43.306814 30442 net.cpp:382] pool0 -> pool0
I0428 20:04:43.306849 30442 net.cpp:124] Setting up pool0
I0428 20:04:43.306855 30442 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:04:43.306859 30442 net.cpp:139] Memory required for data: 7514800
I0428 20:04:43.306861 30442 layer_factory.hpp:77] Creating layer conv1
I0428 20:04:43.306869 30442 net.cpp:86] Creating Layer conv1
I0428 20:04:43.306874 30442 net.cpp:408] conv1 <- pool0
I0428 20:04:43.306879 30442 net.cpp:382] conv1 -> conv1
I0428 20:04:43.309028 30442 net.cpp:124] Setting up conv1
I0428 20:04:43.309041 30442 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:04:43.309044 30442 net.cpp:139] Memory required for data: 7566000
I0428 20:04:43.309068 30442 layer_factory.hpp:77] Creating layer pool1
I0428 20:04:43.309075 30442 net.cpp:86] Creating Layer pool1
I0428 20:04:43.309078 30442 net.cpp:408] pool1 <- conv1
I0428 20:04:43.309083 30442 net.cpp:382] pool1 -> pool1
I0428 20:04:43.309188 30442 net.cpp:124] Setting up pool1
I0428 20:04:43.309198 30442 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:04:43.309201 30442 net.cpp:139] Memory required for data: 7578800
I0428 20:04:43.309206 30442 layer_factory.hpp:77] Creating layer ip1
I0428 20:04:43.309211 30442 net.cpp:86] Creating Layer ip1
I0428 20:04:43.309214 30442 net.cpp:408] ip1 <- pool1
I0428 20:04:43.309219 30442 net.cpp:382] ip1 -> ip1
I0428 20:04:43.309325 30442 net.cpp:124] Setting up ip1
I0428 20:04:43.309332 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309336 30442 net.cpp:139] Memory required for data: 7582800
I0428 20:04:43.309343 30442 layer_factory.hpp:77] Creating layer relu1
I0428 20:04:43.309347 30442 net.cpp:86] Creating Layer relu1
I0428 20:04:43.309351 30442 net.cpp:408] relu1 <- ip1
I0428 20:04:43.309356 30442 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:04:43.309506 30442 net.cpp:124] Setting up relu1
I0428 20:04:43.309515 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309518 30442 net.cpp:139] Memory required for data: 7586800
I0428 20:04:43.309521 30442 layer_factory.hpp:77] Creating layer ip2
I0428 20:04:43.309528 30442 net.cpp:86] Creating Layer ip2
I0428 20:04:43.309531 30442 net.cpp:408] ip2 <- ip1
I0428 20:04:43.309536 30442 net.cpp:382] ip2 -> ip2
I0428 20:04:43.309628 30442 net.cpp:124] Setting up ip2
I0428 20:04:43.309633 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309636 30442 net.cpp:139] Memory required for data: 7590800
I0428 20:04:43.309643 30442 layer_factory.hpp:77] Creating layer relu2
I0428 20:04:43.309646 30442 net.cpp:86] Creating Layer relu2
I0428 20:04:43.309649 30442 net.cpp:408] relu2 <- ip2
I0428 20:04:43.309653 30442 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:04:43.309798 30442 net.cpp:124] Setting up relu2
I0428 20:04:43.309805 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309808 30442 net.cpp:139] Memory required for data: 7594800
I0428 20:04:43.309811 30442 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:04:43.309815 30442 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:04:43.309818 30442 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:04:43.309823 30442 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:04:43.309840 30442 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:04:43.309873 30442 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:04:43.309880 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309883 30442 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:04:43.309886 30442 net.cpp:139] Memory required for data: 7602800
I0428 20:04:43.309888 30442 layer_factory.hpp:77] Creating layer accuracy
I0428 20:04:43.309893 30442 net.cpp:86] Creating Layer accuracy
I0428 20:04:43.309896 30442 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:04:43.309900 30442 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:04:43.309906 30442 net.cpp:382] accuracy -> accuracy
I0428 20:04:43.309911 30442 net.cpp:124] Setting up accuracy
I0428 20:04:43.309916 30442 net.cpp:131] Top shape: (1)
I0428 20:04:43.309918 30442 net.cpp:139] Memory required for data: 7602804
I0428 20:04:43.309921 30442 layer_factory.hpp:77] Creating layer loss
I0428 20:04:43.309926 30442 net.cpp:86] Creating Layer loss
I0428 20:04:43.309928 30442 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:04:43.309932 30442 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:04:43.309952 30442 net.cpp:382] loss -> loss
I0428 20:04:43.309957 30442 layer_factory.hpp:77] Creating layer loss
I0428 20:04:43.310184 30442 net.cpp:124] Setting up loss
I0428 20:04:43.310192 30442 net.cpp:131] Top shape: (1)
I0428 20:04:43.310195 30442 net.cpp:134]     with loss weight 1
I0428 20:04:43.310202 30442 net.cpp:139] Memory required for data: 7602808
I0428 20:04:43.310205 30442 net.cpp:200] loss needs backward computation.
I0428 20:04:43.310209 30442 net.cpp:202] accuracy does not need backward computation.
I0428 20:04:43.310214 30442 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:04:43.310216 30442 net.cpp:200] relu2 needs backward computation.
I0428 20:04:43.310219 30442 net.cpp:200] ip2 needs backward computation.
I0428 20:04:43.310221 30442 net.cpp:200] relu1 needs backward computation.
I0428 20:04:43.310225 30442 net.cpp:200] ip1 needs backward computation.
I0428 20:04:43.310227 30442 net.cpp:200] pool1 needs backward computation.
I0428 20:04:43.310230 30442 net.cpp:200] conv1 needs backward computation.
I0428 20:04:43.310233 30442 net.cpp:200] pool0 needs backward computation.
I0428 20:04:43.310236 30442 net.cpp:200] conv0 needs backward computation.
I0428 20:04:43.310240 30442 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:04:43.310243 30442 net.cpp:202] mnist does not need backward computation.
I0428 20:04:43.310246 30442 net.cpp:244] This network produces output accuracy
I0428 20:04:43.310250 30442 net.cpp:244] This network produces output loss
I0428 20:04:43.310273 30442 net.cpp:257] Network initialization done.
I0428 20:04:43.310307 30442 solver.cpp:56] Solver scaffolding done.
I0428 20:04:43.310544 30442 caffe.cpp:248] Starting Optimization
I0428 20:04:43.310549 30442 solver.cpp:273] Solving LeNet
I0428 20:04:43.310552 30442 solver.cpp:274] Learning Rate Policy: inv
I0428 20:04:43.311254 30442 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:04:43.318027 30442 blocking_queue.cpp:49] Waiting for data
I0428 20:04:43.388784 30449 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:43.389371 30442 solver.cpp:398]     Test net output #0: accuracy = 0.099
I0428 20:04:43.389405 30442 solver.cpp:398]     Test net output #1: loss = 2.36855 (* 1 = 2.36855 loss)
I0428 20:04:43.392391 30442 solver.cpp:219] Iteration 0 (0 iter/s, 0.0818168s/100 iters), loss = 2.38198
I0428 20:04:43.392428 30442 solver.cpp:238]     Train net output #0: loss = 2.38198 (* 1 = 2.38198 loss)
I0428 20:04:43.392439 30442 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:04:43.487285 30442 solver.cpp:219] Iteration 100 (1054.17 iter/s, 0.0948617s/100 iters), loss = 1.56291
I0428 20:04:43.487310 30442 solver.cpp:238]     Train net output #0: loss = 1.56291 (* 1 = 1.56291 loss)
I0428 20:04:43.487318 30442 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:04:43.569474 30442 solver.cpp:219] Iteration 200 (1217.23 iter/s, 0.0821536s/100 iters), loss = 1.39668
I0428 20:04:43.569511 30442 solver.cpp:238]     Train net output #0: loss = 1.39668 (* 1 = 1.39668 loss)
I0428 20:04:43.569519 30442 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:04:43.648890 30442 solver.cpp:219] Iteration 300 (1259.95 iter/s, 0.0793682s/100 iters), loss = 1.15747
I0428 20:04:43.648931 30442 solver.cpp:238]     Train net output #0: loss = 1.15747 (* 1 = 1.15747 loss)
I0428 20:04:43.648936 30442 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:04:43.739553 30442 solver.cpp:219] Iteration 400 (1103.39 iter/s, 0.0906301s/100 iters), loss = 0.931443
I0428 20:04:43.739594 30442 solver.cpp:238]     Train net output #0: loss = 0.931443 (* 1 = 0.931443 loss)
I0428 20:04:43.739600 30442 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:04:43.822917 30442 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:04:43.897629 30449 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:43.898226 30442 solver.cpp:398]     Test net output #0: accuracy = 0.7755
I0428 20:04:43.898253 30442 solver.cpp:398]     Test net output #1: loss = 0.796465 (* 1 = 0.796465 loss)
I0428 20:04:43.899159 30442 solver.cpp:219] Iteration 500 (626.757 iter/s, 0.159552s/100 iters), loss = 0.853777
I0428 20:04:43.899189 30442 solver.cpp:238]     Train net output #0: loss = 0.853777 (* 1 = 0.853777 loss)
I0428 20:04:43.899197 30442 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:04:43.988584 30442 solver.cpp:219] Iteration 600 (1118.75 iter/s, 0.0893858s/100 iters), loss = 0.542429
I0428 20:04:43.988610 30442 solver.cpp:238]     Train net output #0: loss = 0.542429 (* 1 = 0.542429 loss)
I0428 20:04:43.988616 30442 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:04:44.070624 30442 solver.cpp:219] Iteration 700 (1219.44 iter/s, 0.082005s/100 iters), loss = 0.755573
I0428 20:04:44.070664 30442 solver.cpp:238]     Train net output #0: loss = 0.755573 (* 1 = 0.755573 loss)
I0428 20:04:44.070670 30442 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:04:44.151473 30442 solver.cpp:219] Iteration 800 (1237.36 iter/s, 0.0808172s/100 iters), loss = 0.841131
I0428 20:04:44.151512 30442 solver.cpp:238]     Train net output #0: loss = 0.841131 (* 1 = 0.841131 loss)
I0428 20:04:44.151518 30442 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:04:44.232439 30442 solver.cpp:219] Iteration 900 (1235.59 iter/s, 0.080933s/100 iters), loss = 0.690934
I0428 20:04:44.232478 30442 solver.cpp:238]     Train net output #0: loss = 0.690934 (* 1 = 0.690934 loss)
I0428 20:04:44.232484 30442 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:04:44.258970 30448 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:44.315891 30442 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:04:44.316615 30442 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:04:44.317165 30442 solver.cpp:311] Iteration 1000, loss = 0.645145
I0428 20:04:44.317185 30442 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:04:44.392272 30449 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:04:44.392863 30442 solver.cpp:398]     Test net output #0: accuracy = 0.8336
I0428 20:04:44.392885 30442 solver.cpp:398]     Test net output #1: loss = 0.643433 (* 1 = 0.643433 loss)
I0428 20:04:44.392891 30442 solver.cpp:316] Optimization Done.
I0428 20:04:44.392894 30442 caffe.cpp:259] Optimization Done.
