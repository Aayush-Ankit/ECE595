I0428 20:26:26.048249  2791 caffe.cpp:218] Using GPUs 0
I0428 20:26:26.091032  2791 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:26:26.694258  2791 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1471.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:26:26.694422  2791 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1471.prototxt
I0428 20:26:26.694984  2791 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:26:26.695009  2791 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:26:26.695147  2791 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:26:26.695245  2791 layer_factory.hpp:77] Creating layer mnist
I0428 20:26:26.695364  2791 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:26:26.695392  2791 net.cpp:86] Creating Layer mnist
I0428 20:26:26.695403  2791 net.cpp:382] mnist -> data
I0428 20:26:26.695431  2791 net.cpp:382] mnist -> label
I0428 20:26:26.696823  2791 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:26:26.699996  2791 net.cpp:124] Setting up mnist
I0428 20:26:26.700018  2791 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:26:26.700027  2791 net.cpp:131] Top shape: 64 (64)
I0428 20:26:26.700032  2791 net.cpp:139] Memory required for data: 200960
I0428 20:26:26.700042  2791 layer_factory.hpp:77] Creating layer conv0
I0428 20:26:26.700062  2791 net.cpp:86] Creating Layer conv0
I0428 20:26:26.700089  2791 net.cpp:408] conv0 <- data
I0428 20:26:26.700104  2791 net.cpp:382] conv0 -> conv0
I0428 20:26:27.041270  2791 net.cpp:124] Setting up conv0
I0428 20:26:27.041301  2791 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:26:27.041307  2791 net.cpp:139] Memory required for data: 14946560
I0428 20:26:27.041326  2791 layer_factory.hpp:77] Creating layer pool0
I0428 20:26:27.041342  2791 net.cpp:86] Creating Layer pool0
I0428 20:26:27.041362  2791 net.cpp:408] pool0 <- conv0
I0428 20:26:27.041369  2791 net.cpp:382] pool0 -> pool0
I0428 20:26:27.041425  2791 net.cpp:124] Setting up pool0
I0428 20:26:27.041435  2791 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:26:27.041440  2791 net.cpp:139] Memory required for data: 18632960
I0428 20:26:27.041443  2791 layer_factory.hpp:77] Creating layer conv1
I0428 20:26:27.041457  2791 net.cpp:86] Creating Layer conv1
I0428 20:26:27.041465  2791 net.cpp:408] conv1 <- pool0
I0428 20:26:27.041471  2791 net.cpp:382] conv1 -> conv1
I0428 20:26:27.045152  2791 net.cpp:124] Setting up conv1
I0428 20:26:27.045186  2791 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:26:27.045191  2791 net.cpp:139] Memory required for data: 18665728
I0428 20:26:27.045202  2791 layer_factory.hpp:77] Creating layer pool1
I0428 20:26:27.045210  2791 net.cpp:86] Creating Layer pool1
I0428 20:26:27.045229  2791 net.cpp:408] pool1 <- conv1
I0428 20:26:27.045251  2791 net.cpp:382] pool1 -> pool1
I0428 20:26:27.045310  2791 net.cpp:124] Setting up pool1
I0428 20:26:27.045318  2791 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:26:27.045338  2791 net.cpp:139] Memory required for data: 18673920
I0428 20:26:27.045343  2791 layer_factory.hpp:77] Creating layer ip1
I0428 20:26:27.045352  2791 net.cpp:86] Creating Layer ip1
I0428 20:26:27.045357  2791 net.cpp:408] ip1 <- pool1
I0428 20:26:27.045364  2791 net.cpp:382] ip1 -> ip1
I0428 20:26:27.045488  2791 net.cpp:124] Setting up ip1
I0428 20:26:27.045497  2791 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:26:27.045502  2791 net.cpp:139] Memory required for data: 18680320
I0428 20:26:27.045512  2791 layer_factory.hpp:77] Creating layer relu1
I0428 20:26:27.045521  2791 net.cpp:86] Creating Layer relu1
I0428 20:26:27.045529  2791 net.cpp:408] relu1 <- ip1
I0428 20:26:27.045536  2791 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:26:27.045768  2791 net.cpp:124] Setting up relu1
I0428 20:26:27.045779  2791 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:26:27.045783  2791 net.cpp:139] Memory required for data: 18686720
I0428 20:26:27.045789  2791 layer_factory.hpp:77] Creating layer ip2
I0428 20:26:27.045797  2791 net.cpp:86] Creating Layer ip2
I0428 20:26:27.045801  2791 net.cpp:408] ip2 <- ip1
I0428 20:26:27.045809  2791 net.cpp:382] ip2 -> ip2
I0428 20:26:27.045936  2791 net.cpp:124] Setting up ip2
I0428 20:26:27.045945  2791 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:26:27.045950  2791 net.cpp:139] Memory required for data: 18699520
I0428 20:26:27.045958  2791 layer_factory.hpp:77] Creating layer relu2
I0428 20:26:27.045965  2791 net.cpp:86] Creating Layer relu2
I0428 20:26:27.045969  2791 net.cpp:408] relu2 <- ip2
I0428 20:26:27.045975  2791 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:26:27.046942  2791 net.cpp:124] Setting up relu2
I0428 20:26:27.046972  2791 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:26:27.046977  2791 net.cpp:139] Memory required for data: 18712320
I0428 20:26:27.046982  2791 layer_factory.hpp:77] Creating layer ip3
I0428 20:26:27.046990  2791 net.cpp:86] Creating Layer ip3
I0428 20:26:27.046995  2791 net.cpp:408] ip3 <- ip2
I0428 20:26:27.047003  2791 net.cpp:382] ip3 -> ip3
I0428 20:26:27.047157  2791 net.cpp:124] Setting up ip3
I0428 20:26:27.047168  2791 net.cpp:131] Top shape: 64 10 (640)
I0428 20:26:27.047171  2791 net.cpp:139] Memory required for data: 18714880
I0428 20:26:27.047183  2791 layer_factory.hpp:77] Creating layer relu3
I0428 20:26:27.047194  2791 net.cpp:86] Creating Layer relu3
I0428 20:26:27.047199  2791 net.cpp:408] relu3 <- ip3
I0428 20:26:27.047204  2791 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:26:27.047413  2791 net.cpp:124] Setting up relu3
I0428 20:26:27.047439  2791 net.cpp:131] Top shape: 64 10 (640)
I0428 20:26:27.047443  2791 net.cpp:139] Memory required for data: 18717440
I0428 20:26:27.047448  2791 layer_factory.hpp:77] Creating layer loss
I0428 20:26:27.047456  2791 net.cpp:86] Creating Layer loss
I0428 20:26:27.047461  2791 net.cpp:408] loss <- ip3
I0428 20:26:27.047467  2791 net.cpp:408] loss <- label
I0428 20:26:27.047474  2791 net.cpp:382] loss -> loss
I0428 20:26:27.047495  2791 layer_factory.hpp:77] Creating layer loss
I0428 20:26:27.047837  2791 net.cpp:124] Setting up loss
I0428 20:26:27.047849  2791 net.cpp:131] Top shape: (1)
I0428 20:26:27.047869  2791 net.cpp:134]     with loss weight 1
I0428 20:26:27.047886  2791 net.cpp:139] Memory required for data: 18717444
I0428 20:26:27.047891  2791 net.cpp:200] loss needs backward computation.
I0428 20:26:27.047897  2791 net.cpp:200] relu3 needs backward computation.
I0428 20:26:27.047901  2791 net.cpp:200] ip3 needs backward computation.
I0428 20:26:27.047906  2791 net.cpp:200] relu2 needs backward computation.
I0428 20:26:27.047924  2791 net.cpp:200] ip2 needs backward computation.
I0428 20:26:27.047930  2791 net.cpp:200] relu1 needs backward computation.
I0428 20:26:27.047933  2791 net.cpp:200] ip1 needs backward computation.
I0428 20:26:27.047938  2791 net.cpp:200] pool1 needs backward computation.
I0428 20:26:27.047943  2791 net.cpp:200] conv1 needs backward computation.
I0428 20:26:27.047958  2791 net.cpp:200] pool0 needs backward computation.
I0428 20:26:27.047963  2791 net.cpp:200] conv0 needs backward computation.
I0428 20:26:27.047968  2791 net.cpp:202] mnist does not need backward computation.
I0428 20:26:27.047972  2791 net.cpp:244] This network produces output loss
I0428 20:26:27.047983  2791 net.cpp:257] Network initialization done.
I0428 20:26:27.048494  2791 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1471.prototxt
I0428 20:26:27.048562  2791 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:26:27.048686  2791 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:26:27.048789  2791 layer_factory.hpp:77] Creating layer mnist
I0428 20:26:27.048863  2791 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:26:27.048895  2791 net.cpp:86] Creating Layer mnist
I0428 20:26:27.048902  2791 net.cpp:382] mnist -> data
I0428 20:26:27.048913  2791 net.cpp:382] mnist -> label
I0428 20:26:27.049021  2791 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:26:27.051739  2791 net.cpp:124] Setting up mnist
I0428 20:26:27.051770  2791 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:26:27.051777  2791 net.cpp:131] Top shape: 100 (100)
I0428 20:26:27.051782  2791 net.cpp:139] Memory required for data: 314000
I0428 20:26:27.051787  2791 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:26:27.051795  2791 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:26:27.051815  2791 net.cpp:408] label_mnist_1_split <- label
I0428 20:26:27.051821  2791 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:26:27.051829  2791 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:26:27.051889  2791 net.cpp:124] Setting up label_mnist_1_split
I0428 20:26:27.051897  2791 net.cpp:131] Top shape: 100 (100)
I0428 20:26:27.051903  2791 net.cpp:131] Top shape: 100 (100)
I0428 20:26:27.051906  2791 net.cpp:139] Memory required for data: 314800
I0428 20:26:27.051910  2791 layer_factory.hpp:77] Creating layer conv0
I0428 20:26:27.051920  2791 net.cpp:86] Creating Layer conv0
I0428 20:26:27.051925  2791 net.cpp:408] conv0 <- data
I0428 20:26:27.051933  2791 net.cpp:382] conv0 -> conv0
I0428 20:26:27.054210  2791 net.cpp:124] Setting up conv0
I0428 20:26:27.054227  2791 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:26:27.054232  2791 net.cpp:139] Memory required for data: 23354800
I0428 20:26:27.054244  2791 layer_factory.hpp:77] Creating layer pool0
I0428 20:26:27.054252  2791 net.cpp:86] Creating Layer pool0
I0428 20:26:27.054257  2791 net.cpp:408] pool0 <- conv0
I0428 20:26:27.054265  2791 net.cpp:382] pool0 -> pool0
I0428 20:26:27.054307  2791 net.cpp:124] Setting up pool0
I0428 20:26:27.054314  2791 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:26:27.054319  2791 net.cpp:139] Memory required for data: 29114800
I0428 20:26:27.054323  2791 layer_factory.hpp:77] Creating layer conv1
I0428 20:26:27.054334  2791 net.cpp:86] Creating Layer conv1
I0428 20:26:27.054339  2791 net.cpp:408] conv1 <- pool0
I0428 20:26:27.054345  2791 net.cpp:382] conv1 -> conv1
I0428 20:26:27.056452  2791 net.cpp:124] Setting up conv1
I0428 20:26:27.056478  2791 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:26:27.056483  2791 net.cpp:139] Memory required for data: 29166000
I0428 20:26:27.056494  2791 layer_factory.hpp:77] Creating layer pool1
I0428 20:26:27.056507  2791 net.cpp:86] Creating Layer pool1
I0428 20:26:27.056514  2791 net.cpp:408] pool1 <- conv1
I0428 20:26:27.056520  2791 net.cpp:382] pool1 -> pool1
I0428 20:26:27.056563  2791 net.cpp:124] Setting up pool1
I0428 20:26:27.056581  2791 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:26:27.056592  2791 net.cpp:139] Memory required for data: 29178800
I0428 20:26:27.056596  2791 layer_factory.hpp:77] Creating layer ip1
I0428 20:26:27.056605  2791 net.cpp:86] Creating Layer ip1
I0428 20:26:27.056609  2791 net.cpp:408] ip1 <- pool1
I0428 20:26:27.056617  2791 net.cpp:382] ip1 -> ip1
I0428 20:26:27.056742  2791 net.cpp:124] Setting up ip1
I0428 20:26:27.056752  2791 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:26:27.056769  2791 net.cpp:139] Memory required for data: 29188800
I0428 20:26:27.056778  2791 layer_factory.hpp:77] Creating layer relu1
I0428 20:26:27.056787  2791 net.cpp:86] Creating Layer relu1
I0428 20:26:27.056790  2791 net.cpp:408] relu1 <- ip1
I0428 20:26:27.056797  2791 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:26:27.057086  2791 net.cpp:124] Setting up relu1
I0428 20:26:27.057099  2791 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:26:27.057104  2791 net.cpp:139] Memory required for data: 29198800
I0428 20:26:27.057109  2791 layer_factory.hpp:77] Creating layer ip2
I0428 20:26:27.057118  2791 net.cpp:86] Creating Layer ip2
I0428 20:26:27.057124  2791 net.cpp:408] ip2 <- ip1
I0428 20:26:27.057147  2791 net.cpp:382] ip2 -> ip2
I0428 20:26:27.057345  2791 net.cpp:124] Setting up ip2
I0428 20:26:27.057359  2791 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:26:27.057363  2791 net.cpp:139] Memory required for data: 29218800
I0428 20:26:27.057377  2791 layer_factory.hpp:77] Creating layer relu2
I0428 20:26:27.057384  2791 net.cpp:86] Creating Layer relu2
I0428 20:26:27.057389  2791 net.cpp:408] relu2 <- ip2
I0428 20:26:27.057397  2791 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:26:27.057603  2791 net.cpp:124] Setting up relu2
I0428 20:26:27.057615  2791 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:26:27.057620  2791 net.cpp:139] Memory required for data: 29238800
I0428 20:26:27.057624  2791 layer_factory.hpp:77] Creating layer ip3
I0428 20:26:27.057633  2791 net.cpp:86] Creating Layer ip3
I0428 20:26:27.057637  2791 net.cpp:408] ip3 <- ip2
I0428 20:26:27.057646  2791 net.cpp:382] ip3 -> ip3
I0428 20:26:27.057783  2791 net.cpp:124] Setting up ip3
I0428 20:26:27.057793  2791 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:26:27.057797  2791 net.cpp:139] Memory required for data: 29242800
I0428 20:26:27.057808  2791 layer_factory.hpp:77] Creating layer relu3
I0428 20:26:27.057814  2791 net.cpp:86] Creating Layer relu3
I0428 20:26:27.057819  2791 net.cpp:408] relu3 <- ip3
I0428 20:26:27.057827  2791 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:26:27.059139  2791 net.cpp:124] Setting up relu3
I0428 20:26:27.059154  2791 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:26:27.059160  2791 net.cpp:139] Memory required for data: 29246800
I0428 20:26:27.059165  2791 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:26:27.059181  2791 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:26:27.059187  2791 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:26:27.059195  2791 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:26:27.059202  2791 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:26:27.059268  2791 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:26:27.059293  2791 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:26:27.059299  2791 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:26:27.059303  2791 net.cpp:139] Memory required for data: 29254800
I0428 20:26:27.059307  2791 layer_factory.hpp:77] Creating layer accuracy
I0428 20:26:27.059314  2791 net.cpp:86] Creating Layer accuracy
I0428 20:26:27.059319  2791 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:26:27.059324  2791 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:26:27.059332  2791 net.cpp:382] accuracy -> accuracy
I0428 20:26:27.059342  2791 net.cpp:124] Setting up accuracy
I0428 20:26:27.059347  2791 net.cpp:131] Top shape: (1)
I0428 20:26:27.059358  2791 net.cpp:139] Memory required for data: 29254804
I0428 20:26:27.059362  2791 layer_factory.hpp:77] Creating layer loss
I0428 20:26:27.059368  2791 net.cpp:86] Creating Layer loss
I0428 20:26:27.059372  2791 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:26:27.059377  2791 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:26:27.059386  2791 net.cpp:382] loss -> loss
I0428 20:26:27.059393  2791 layer_factory.hpp:77] Creating layer loss
I0428 20:26:27.059713  2791 net.cpp:124] Setting up loss
I0428 20:26:27.059725  2791 net.cpp:131] Top shape: (1)
I0428 20:26:27.059729  2791 net.cpp:134]     with loss weight 1
I0428 20:26:27.059748  2791 net.cpp:139] Memory required for data: 29254808
I0428 20:26:27.059761  2791 net.cpp:200] loss needs backward computation.
I0428 20:26:27.059765  2791 net.cpp:202] accuracy does not need backward computation.
I0428 20:26:27.059770  2791 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:26:27.059775  2791 net.cpp:200] relu3 needs backward computation.
I0428 20:26:27.059779  2791 net.cpp:200] ip3 needs backward computation.
I0428 20:26:27.059789  2791 net.cpp:200] relu2 needs backward computation.
I0428 20:26:27.059793  2791 net.cpp:200] ip2 needs backward computation.
I0428 20:26:27.059798  2791 net.cpp:200] relu1 needs backward computation.
I0428 20:26:27.059803  2791 net.cpp:200] ip1 needs backward computation.
I0428 20:26:27.059811  2791 net.cpp:200] pool1 needs backward computation.
I0428 20:26:27.059816  2791 net.cpp:200] conv1 needs backward computation.
I0428 20:26:27.059821  2791 net.cpp:200] pool0 needs backward computation.
I0428 20:26:27.059826  2791 net.cpp:200] conv0 needs backward computation.
I0428 20:26:27.059831  2791 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:26:27.059836  2791 net.cpp:202] mnist does not need backward computation.
I0428 20:26:27.059840  2791 net.cpp:244] This network produces output accuracy
I0428 20:26:27.059845  2791 net.cpp:244] This network produces output loss
I0428 20:26:27.059861  2791 net.cpp:257] Network initialization done.
I0428 20:26:27.059931  2791 solver.cpp:56] Solver scaffolding done.
I0428 20:26:27.060371  2791 caffe.cpp:248] Starting Optimization
I0428 20:26:27.060389  2791 solver.cpp:273] Solving LeNet
I0428 20:26:27.060395  2791 solver.cpp:274] Learning Rate Policy: inv
I0428 20:26:27.061651  2791 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:26:27.166045  2798 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:26:27.168915  2791 solver.cpp:398]     Test net output #0: accuracy = 0.0999
I0428 20:26:27.168939  2791 solver.cpp:398]     Test net output #1: loss = 2.31283 (* 1 = 2.31283 loss)
I0428 20:26:27.174322  2791 solver.cpp:219] Iteration 0 (-1.23999e-31 iter/s, 0.113888s/100 iters), loss = 2.29571
I0428 20:26:27.174352  2791 solver.cpp:238]     Train net output #0: loss = 2.29571 (* 1 = 2.29571 loss)
I0428 20:26:27.174383  2791 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:26:27.386795  2791 solver.cpp:219] Iteration 100 (470.759 iter/s, 0.212423s/100 iters), loss = 0.541591
I0428 20:26:27.386823  2791 solver.cpp:238]     Train net output #0: loss = 0.541591 (* 1 = 0.541591 loss)
I0428 20:26:27.386831  2791 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:26:27.600096  2791 solver.cpp:219] Iteration 200 (468.935 iter/s, 0.213249s/100 iters), loss = 0.539264
I0428 20:26:27.600153  2791 solver.cpp:238]     Train net output #0: loss = 0.539264 (* 1 = 0.539264 loss)
I0428 20:26:27.600167  2791 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:26:27.822556  2791 solver.cpp:219] Iteration 300 (449.67 iter/s, 0.222385s/100 iters), loss = 0.545476
I0428 20:26:27.822608  2791 solver.cpp:238]     Train net output #0: loss = 0.545476 (* 1 = 0.545476 loss)
I0428 20:26:27.822621  2791 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:26:28.045517  2791 solver.cpp:219] Iteration 400 (448.648 iter/s, 0.222892s/100 iters), loss = 0.720255
I0428 20:26:28.045567  2791 solver.cpp:238]     Train net output #0: loss = 0.720255 (* 1 = 0.720255 loss)
I0428 20:26:28.045580  2791 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:26:28.262961  2791 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:26:28.367756  2798 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:26:28.370421  2791 solver.cpp:398]     Test net output #0: accuracy = 0.9109
I0428 20:26:28.370448  2791 solver.cpp:398]     Test net output #1: loss = 0.433819 (* 1 = 0.433819 loss)
I0428 20:26:28.372391  2791 solver.cpp:219] Iteration 500 (305.991 iter/s, 0.326807s/100 iters), loss = 0.413163
I0428 20:26:28.372419  2791 solver.cpp:238]     Train net output #0: loss = 0.413163 (* 1 = 0.413163 loss)
I0428 20:26:28.372449  2791 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:26:28.591768  2791 solver.cpp:219] Iteration 600 (455.94 iter/s, 0.219327s/100 iters), loss = 0.303767
I0428 20:26:28.591819  2791 solver.cpp:238]     Train net output #0: loss = 0.303767 (* 1 = 0.303767 loss)
I0428 20:26:28.591831  2791 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:26:28.815345  2791 solver.cpp:219] Iteration 700 (447.414 iter/s, 0.223506s/100 iters), loss = 0.454397
I0428 20:26:28.815397  2791 solver.cpp:238]     Train net output #0: loss = 0.454397 (* 1 = 0.454397 loss)
I0428 20:26:28.815408  2791 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:26:29.036659  2791 solver.cpp:219] Iteration 800 (451.983 iter/s, 0.221247s/100 iters), loss = 0.556155
I0428 20:26:29.036707  2791 solver.cpp:238]     Train net output #0: loss = 0.556155 (* 1 = 0.556155 loss)
I0428 20:26:29.036720  2791 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:26:29.257935  2791 solver.cpp:219] Iteration 900 (452.06 iter/s, 0.22121s/100 iters), loss = 0.358319
I0428 20:26:29.257984  2791 solver.cpp:238]     Train net output #0: loss = 0.358319 (* 1 = 0.358319 loss)
I0428 20:26:29.257997  2791 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:26:29.332348  2797 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:26:29.477277  2791 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:26:29.479135  2791 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:26:29.480362  2791 solver.cpp:311] Iteration 1000, loss = 0.415457
I0428 20:26:29.480391  2791 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:26:29.585057  2798 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:26:29.587769  2791 solver.cpp:398]     Test net output #0: accuracy = 0.9434
I0428 20:26:29.587797  2791 solver.cpp:398]     Test net output #1: loss = 0.382701 (* 1 = 0.382701 loss)
I0428 20:26:29.587803  2791 solver.cpp:316] Optimization Done.
I0428 20:26:29.587807  2791 caffe.cpp:259] Optimization Done.
