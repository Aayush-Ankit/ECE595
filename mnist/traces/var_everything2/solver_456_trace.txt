I0428 19:44:46.688027 25675 caffe.cpp:218] Using GPUs 0
I0428 19:44:46.727541 25675 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:47.243265 25675 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test456.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:47.243402 25675 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test456.prototxt
I0428 19:44:47.243819 25675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:47.243841 25675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:47.243943 25675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:47.244024 25675 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:47.244123 25675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:47.244148 25675 net.cpp:86] Creating Layer mnist
I0428 19:44:47.244156 25675 net.cpp:382] mnist -> data
I0428 19:44:47.244179 25675 net.cpp:382] mnist -> label
I0428 19:44:47.245283 25675 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:47.247740 25675 net.cpp:124] Setting up mnist
I0428 19:44:47.247756 25675 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:47.247763 25675 net.cpp:131] Top shape: 64 (64)
I0428 19:44:47.247767 25675 net.cpp:139] Memory required for data: 200960
I0428 19:44:47.247774 25675 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:47.247789 25675 net.cpp:86] Creating Layer conv0
I0428 19:44:47.247820 25675 net.cpp:408] conv0 <- data
I0428 19:44:47.247834 25675 net.cpp:382] conv0 -> conv0
I0428 19:44:47.561590 25675 net.cpp:124] Setting up conv0
I0428 19:44:47.561621 25675 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:47.561627 25675 net.cpp:139] Memory required for data: 495872
I0428 19:44:47.561645 25675 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:47.561676 25675 net.cpp:86] Creating Layer pool0
I0428 19:44:47.561681 25675 net.cpp:408] pool0 <- conv0
I0428 19:44:47.561688 25675 net.cpp:382] pool0 -> pool0
I0428 19:44:47.561743 25675 net.cpp:124] Setting up pool0
I0428 19:44:47.561751 25675 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:47.561755 25675 net.cpp:139] Memory required for data: 569600
I0428 19:44:47.561760 25675 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:47.561789 25675 net.cpp:86] Creating Layer conv1
I0428 19:44:47.561794 25675 net.cpp:408] conv1 <- pool0
I0428 19:44:47.561801 25675 net.cpp:382] conv1 -> conv1
I0428 19:44:47.565310 25675 net.cpp:124] Setting up conv1
I0428 19:44:47.565342 25675 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:47.565347 25675 net.cpp:139] Memory required for data: 1388800
I0428 19:44:47.565358 25675 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:47.565382 25675 net.cpp:86] Creating Layer pool1
I0428 19:44:47.565402 25675 net.cpp:408] pool1 <- conv1
I0428 19:44:47.565428 25675 net.cpp:382] pool1 -> pool1
I0428 19:44:47.565471 25675 net.cpp:124] Setting up pool1
I0428 19:44:47.565480 25675 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:47.565485 25675 net.cpp:139] Memory required for data: 1593600
I0428 19:44:47.565488 25675 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:47.565497 25675 net.cpp:86] Creating Layer ip1
I0428 19:44:47.565503 25675 net.cpp:408] ip1 <- pool1
I0428 19:44:47.565510 25675 net.cpp:382] ip1 -> ip1
I0428 19:44:47.565801 25675 net.cpp:124] Setting up ip1
I0428 19:44:47.565810 25675 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:47.565830 25675 net.cpp:139] Memory required for data: 1600000
I0428 19:44:47.565840 25675 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:47.565846 25675 net.cpp:86] Creating Layer relu1
I0428 19:44:47.565850 25675 net.cpp:408] relu1 <- ip1
I0428 19:44:47.565856 25675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:47.566048 25675 net.cpp:124] Setting up relu1
I0428 19:44:47.566059 25675 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:47.566064 25675 net.cpp:139] Memory required for data: 1606400
I0428 19:44:47.566068 25675 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:47.566076 25675 net.cpp:86] Creating Layer ip2
I0428 19:44:47.566082 25675 net.cpp:408] ip2 <- ip1
I0428 19:44:47.566088 25675 net.cpp:382] ip2 -> ip2
I0428 19:44:47.566231 25675 net.cpp:124] Setting up ip2
I0428 19:44:47.566239 25675 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:47.566244 25675 net.cpp:139] Memory required for data: 1619200
I0428 19:44:47.566251 25675 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:47.566260 25675 net.cpp:86] Creating Layer relu2
I0428 19:44:47.566267 25675 net.cpp:408] relu2 <- ip2
I0428 19:44:47.566272 25675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:47.567301 25675 net.cpp:124] Setting up relu2
I0428 19:44:47.567317 25675 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:47.567322 25675 net.cpp:139] Memory required for data: 1632000
I0428 19:44:47.567327 25675 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:47.567337 25675 net.cpp:86] Creating Layer ip3
I0428 19:44:47.567342 25675 net.cpp:408] ip3 <- ip2
I0428 19:44:47.567348 25675 net.cpp:382] ip3 -> ip3
I0428 19:44:47.567473 25675 net.cpp:124] Setting up ip3
I0428 19:44:47.567483 25675 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:47.567488 25675 net.cpp:139] Memory required for data: 1634560
I0428 19:44:47.567499 25675 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:47.567507 25675 net.cpp:86] Creating Layer relu3
I0428 19:44:47.567512 25675 net.cpp:408] relu3 <- ip3
I0428 19:44:47.567517 25675 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:47.567735 25675 net.cpp:124] Setting up relu3
I0428 19:44:47.567762 25675 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:47.567766 25675 net.cpp:139] Memory required for data: 1637120
I0428 19:44:47.567771 25675 layer_factory.hpp:77] Creating layer loss
I0428 19:44:47.567785 25675 net.cpp:86] Creating Layer loss
I0428 19:44:47.567791 25675 net.cpp:408] loss <- ip3
I0428 19:44:47.567796 25675 net.cpp:408] loss <- label
I0428 19:44:47.567804 25675 net.cpp:382] loss -> loss
I0428 19:44:47.567821 25675 layer_factory.hpp:77] Creating layer loss
I0428 19:44:47.568128 25675 net.cpp:124] Setting up loss
I0428 19:44:47.568140 25675 net.cpp:131] Top shape: (1)
I0428 19:44:47.568159 25675 net.cpp:134]     with loss weight 1
I0428 19:44:47.568176 25675 net.cpp:139] Memory required for data: 1637124
I0428 19:44:47.568181 25675 net.cpp:200] loss needs backward computation.
I0428 19:44:47.568186 25675 net.cpp:200] relu3 needs backward computation.
I0428 19:44:47.568189 25675 net.cpp:200] ip3 needs backward computation.
I0428 19:44:47.568193 25675 net.cpp:200] relu2 needs backward computation.
I0428 19:44:47.568197 25675 net.cpp:200] ip2 needs backward computation.
I0428 19:44:47.568202 25675 net.cpp:200] relu1 needs backward computation.
I0428 19:44:47.568205 25675 net.cpp:200] ip1 needs backward computation.
I0428 19:44:47.568210 25675 net.cpp:200] pool1 needs backward computation.
I0428 19:44:47.568214 25675 net.cpp:200] conv1 needs backward computation.
I0428 19:44:47.568218 25675 net.cpp:200] pool0 needs backward computation.
I0428 19:44:47.568223 25675 net.cpp:200] conv0 needs backward computation.
I0428 19:44:47.568228 25675 net.cpp:202] mnist does not need backward computation.
I0428 19:44:47.568231 25675 net.cpp:244] This network produces output loss
I0428 19:44:47.568243 25675 net.cpp:257] Network initialization done.
I0428 19:44:47.568756 25675 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test456.prototxt
I0428 19:44:47.568819 25675 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:47.568982 25675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:47.569089 25675 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:47.569170 25675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:47.569186 25675 net.cpp:86] Creating Layer mnist
I0428 19:44:47.569192 25675 net.cpp:382] mnist -> data
I0428 19:44:47.569202 25675 net.cpp:382] mnist -> label
I0428 19:44:47.569314 25675 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:47.571846 25675 net.cpp:124] Setting up mnist
I0428 19:44:47.571877 25675 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:47.571884 25675 net.cpp:131] Top shape: 100 (100)
I0428 19:44:47.571889 25675 net.cpp:139] Memory required for data: 314000
I0428 19:44:47.571894 25675 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:47.571904 25675 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:47.571909 25675 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:47.571915 25675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:47.571924 25675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:47.572026 25675 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:47.572036 25675 net.cpp:131] Top shape: 100 (100)
I0428 19:44:47.572041 25675 net.cpp:131] Top shape: 100 (100)
I0428 19:44:47.572046 25675 net.cpp:139] Memory required for data: 314800
I0428 19:44:47.572049 25675 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:47.572060 25675 net.cpp:86] Creating Layer conv0
I0428 19:44:47.572064 25675 net.cpp:408] conv0 <- data
I0428 19:44:47.572072 25675 net.cpp:382] conv0 -> conv0
I0428 19:44:47.574048 25675 net.cpp:124] Setting up conv0
I0428 19:44:47.574070 25675 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:47.574075 25675 net.cpp:139] Memory required for data: 775600
I0428 19:44:47.574087 25675 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:47.574095 25675 net.cpp:86] Creating Layer pool0
I0428 19:44:47.574100 25675 net.cpp:408] pool0 <- conv0
I0428 19:44:47.574107 25675 net.cpp:382] pool0 -> pool0
I0428 19:44:47.574196 25675 net.cpp:124] Setting up pool0
I0428 19:44:47.574220 25675 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:47.574225 25675 net.cpp:139] Memory required for data: 890800
I0428 19:44:47.574229 25675 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:47.574250 25675 net.cpp:86] Creating Layer conv1
I0428 19:44:47.574255 25675 net.cpp:408] conv1 <- pool0
I0428 19:44:47.574270 25675 net.cpp:382] conv1 -> conv1
I0428 19:44:47.576174 25675 net.cpp:124] Setting up conv1
I0428 19:44:47.576192 25675 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:47.576197 25675 net.cpp:139] Memory required for data: 2170800
I0428 19:44:47.576208 25675 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:47.576217 25675 net.cpp:86] Creating Layer pool1
I0428 19:44:47.576222 25675 net.cpp:408] pool1 <- conv1
I0428 19:44:47.576230 25675 net.cpp:382] pool1 -> pool1
I0428 19:44:47.576272 25675 net.cpp:124] Setting up pool1
I0428 19:44:47.576279 25675 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:47.576292 25675 net.cpp:139] Memory required for data: 2490800
I0428 19:44:47.576297 25675 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:47.576305 25675 net.cpp:86] Creating Layer ip1
I0428 19:44:47.576310 25675 net.cpp:408] ip1 <- pool1
I0428 19:44:47.576318 25675 net.cpp:382] ip1 -> ip1
I0428 19:44:47.576628 25675 net.cpp:124] Setting up ip1
I0428 19:44:47.576639 25675 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:47.576656 25675 net.cpp:139] Memory required for data: 2500800
I0428 19:44:47.576666 25675 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:47.576673 25675 net.cpp:86] Creating Layer relu1
I0428 19:44:47.576685 25675 net.cpp:408] relu1 <- ip1
I0428 19:44:47.576691 25675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:47.576946 25675 net.cpp:124] Setting up relu1
I0428 19:44:47.576959 25675 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:47.576966 25675 net.cpp:139] Memory required for data: 2510800
I0428 19:44:47.576970 25675 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:47.576982 25675 net.cpp:86] Creating Layer ip2
I0428 19:44:47.576987 25675 net.cpp:408] ip2 <- ip1
I0428 19:44:47.576995 25675 net.cpp:382] ip2 -> ip2
I0428 19:44:47.577193 25675 net.cpp:124] Setting up ip2
I0428 19:44:47.577203 25675 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:47.577210 25675 net.cpp:139] Memory required for data: 2530800
I0428 19:44:47.577219 25675 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:47.577225 25675 net.cpp:86] Creating Layer relu2
I0428 19:44:47.577230 25675 net.cpp:408] relu2 <- ip2
I0428 19:44:47.577236 25675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:47.577584 25675 net.cpp:124] Setting up relu2
I0428 19:44:47.577595 25675 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:47.577600 25675 net.cpp:139] Memory required for data: 2550800
I0428 19:44:47.577622 25675 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:47.577630 25675 net.cpp:86] Creating Layer ip3
I0428 19:44:47.577636 25675 net.cpp:408] ip3 <- ip2
I0428 19:44:47.577651 25675 net.cpp:382] ip3 -> ip3
I0428 19:44:47.577798 25675 net.cpp:124] Setting up ip3
I0428 19:44:47.577808 25675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:47.577812 25675 net.cpp:139] Memory required for data: 2554800
I0428 19:44:47.577823 25675 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:47.577829 25675 net.cpp:86] Creating Layer relu3
I0428 19:44:47.577834 25675 net.cpp:408] relu3 <- ip3
I0428 19:44:47.577841 25675 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:47.578961 25675 net.cpp:124] Setting up relu3
I0428 19:44:47.578974 25675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:47.578979 25675 net.cpp:139] Memory required for data: 2558800
I0428 19:44:47.578984 25675 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:47.578990 25675 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:47.578995 25675 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:47.579004 25675 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:47.579010 25675 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:47.579059 25675 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:47.579074 25675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:47.579080 25675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:47.579083 25675 net.cpp:139] Memory required for data: 2566800
I0428 19:44:47.579094 25675 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:47.579103 25675 net.cpp:86] Creating Layer accuracy
I0428 19:44:47.579107 25675 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:47.579113 25675 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:47.579130 25675 net.cpp:382] accuracy -> accuracy
I0428 19:44:47.579147 25675 net.cpp:124] Setting up accuracy
I0428 19:44:47.579152 25675 net.cpp:131] Top shape: (1)
I0428 19:44:47.579157 25675 net.cpp:139] Memory required for data: 2566804
I0428 19:44:47.579161 25675 layer_factory.hpp:77] Creating layer loss
I0428 19:44:47.579167 25675 net.cpp:86] Creating Layer loss
I0428 19:44:47.579177 25675 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:47.579182 25675 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:47.579188 25675 net.cpp:382] loss -> loss
I0428 19:44:47.579195 25675 layer_factory.hpp:77] Creating layer loss
I0428 19:44:47.579511 25675 net.cpp:124] Setting up loss
I0428 19:44:47.579524 25675 net.cpp:131] Top shape: (1)
I0428 19:44:47.579529 25675 net.cpp:134]     with loss weight 1
I0428 19:44:47.579536 25675 net.cpp:139] Memory required for data: 2566808
I0428 19:44:47.579552 25675 net.cpp:200] loss needs backward computation.
I0428 19:44:47.579558 25675 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:47.579571 25675 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:47.579576 25675 net.cpp:200] relu3 needs backward computation.
I0428 19:44:47.579579 25675 net.cpp:200] ip3 needs backward computation.
I0428 19:44:47.579583 25675 net.cpp:200] relu2 needs backward computation.
I0428 19:44:47.579587 25675 net.cpp:200] ip2 needs backward computation.
I0428 19:44:47.579591 25675 net.cpp:200] relu1 needs backward computation.
I0428 19:44:47.579596 25675 net.cpp:200] ip1 needs backward computation.
I0428 19:44:47.579601 25675 net.cpp:200] pool1 needs backward computation.
I0428 19:44:47.579604 25675 net.cpp:200] conv1 needs backward computation.
I0428 19:44:47.579609 25675 net.cpp:200] pool0 needs backward computation.
I0428 19:44:47.579614 25675 net.cpp:200] conv0 needs backward computation.
I0428 19:44:47.579619 25675 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:47.579624 25675 net.cpp:202] mnist does not need backward computation.
I0428 19:44:47.579628 25675 net.cpp:244] This network produces output accuracy
I0428 19:44:47.579633 25675 net.cpp:244] This network produces output loss
I0428 19:44:47.579663 25675 net.cpp:257] Network initialization done.
I0428 19:44:47.579716 25675 solver.cpp:56] Solver scaffolding done.
I0428 19:44:47.580135 25675 caffe.cpp:248] Starting Optimization
I0428 19:44:47.580144 25675 solver.cpp:273] Solving LeNet
I0428 19:44:47.580148 25675 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:47.581212 25675 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:47.585064 25675 blocking_queue.cpp:49] Waiting for data
I0428 19:44:47.656280 25682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:47.656767 25675 solver.cpp:398]     Test net output #0: accuracy = 0.1047
I0428 19:44:47.656787 25675 solver.cpp:398]     Test net output #1: loss = 2.30126 (* 1 = 2.30126 loss)
I0428 19:44:47.658978 25675 solver.cpp:219] Iteration 0 (0 iter/s, 0.0787937s/100 iters), loss = 2.30603
I0428 19:44:47.659003 25675 solver.cpp:238]     Train net output #0: loss = 2.30603 (* 1 = 2.30603 loss)
I0428 19:44:47.659014 25675 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:47.766072 25675 solver.cpp:219] Iteration 100 (934.116 iter/s, 0.107053s/100 iters), loss = 0.815882
I0428 19:44:47.766111 25675 solver.cpp:238]     Train net output #0: loss = 0.815882 (* 1 = 0.815882 loss)
I0428 19:44:47.766124 25675 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:47.879160 25675 solver.cpp:219] Iteration 200 (884.648 iter/s, 0.113039s/100 iters), loss = 0.153564
I0428 19:44:47.879194 25675 solver.cpp:238]     Train net output #0: loss = 0.153564 (* 1 = 0.153564 loss)
I0428 19:44:47.879201 25675 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:47.989189 25675 solver.cpp:219] Iteration 300 (909.217 iter/s, 0.109985s/100 iters), loss = 0.211132
I0428 19:44:47.989219 25675 solver.cpp:238]     Train net output #0: loss = 0.211132 (* 1 = 0.211132 loss)
I0428 19:44:47.989228 25675 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:48.098714 25675 solver.cpp:219] Iteration 400 (913.368 iter/s, 0.109485s/100 iters), loss = 0.140138
I0428 19:44:48.098755 25675 solver.cpp:238]     Train net output #0: loss = 0.140138 (* 1 = 0.140138 loss)
I0428 19:44:48.098762 25675 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:48.201948 25675 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:48.254756 25682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:48.255229 25675 solver.cpp:398]     Test net output #0: accuracy = 0.9507
I0428 19:44:48.255249 25675 solver.cpp:398]     Test net output #1: loss = 0.160634 (* 1 = 0.160634 loss)
I0428 19:44:48.256227 25675 solver.cpp:219] Iteration 500 (635.088 iter/s, 0.157458s/100 iters), loss = 0.143238
I0428 19:44:48.256278 25675 solver.cpp:238]     Train net output #0: loss = 0.143238 (* 1 = 0.143238 loss)
I0428 19:44:48.256299 25675 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:48.364528 25675 solver.cpp:219] Iteration 600 (923.952 iter/s, 0.108231s/100 iters), loss = 0.150443
I0428 19:44:48.364559 25675 solver.cpp:238]     Train net output #0: loss = 0.150443 (* 1 = 0.150443 loss)
I0428 19:44:48.364565 25675 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:48.465168 25675 solver.cpp:219] Iteration 700 (994.056 iter/s, 0.100598s/100 iters), loss = 0.126704
I0428 19:44:48.465193 25675 solver.cpp:238]     Train net output #0: loss = 0.126704 (* 1 = 0.126704 loss)
I0428 19:44:48.465217 25675 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:48.572675 25675 solver.cpp:219] Iteration 800 (930.495 iter/s, 0.10747s/100 iters), loss = 0.22945
I0428 19:44:48.572701 25675 solver.cpp:238]     Train net output #0: loss = 0.22945 (* 1 = 0.22945 loss)
I0428 19:44:48.572722 25675 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:48.683275 25675 solver.cpp:219] Iteration 900 (904.551 iter/s, 0.110552s/100 iters), loss = 0.232488
I0428 19:44:48.683311 25675 solver.cpp:238]     Train net output #0: loss = 0.232488 (* 1 = 0.232488 loss)
I0428 19:44:48.683320 25675 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:48.720160 25681 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:48.791345 25675 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:48.792644 25675 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:48.793329 25675 solver.cpp:311] Iteration 1000, loss = 0.127906
I0428 19:44:48.793346 25675 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:48.865622 25682 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:48.866256 25675 solver.cpp:398]     Test net output #0: accuracy = 0.9732
I0428 19:44:48.866288 25675 solver.cpp:398]     Test net output #1: loss = 0.0925637 (* 1 = 0.0925637 loss)
I0428 19:44:48.866297 25675 solver.cpp:316] Optimization Done.
I0428 19:44:48.866302 25675 caffe.cpp:259] Optimization Done.
