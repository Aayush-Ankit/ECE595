I0428 19:55:00.546138 28095 caffe.cpp:218] Using GPUs 0
I0428 19:55:00.582367 28095 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:01.094101 28095 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test723.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:01.094244 28095 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test723.prototxt
I0428 19:55:01.094660 28095 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:01.094679 28095 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:01.094784 28095 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:01.094863 28095 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:01.094964 28095 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:01.094988 28095 net.cpp:86] Creating Layer mnist
I0428 19:55:01.094997 28095 net.cpp:382] mnist -> data
I0428 19:55:01.095019 28095 net.cpp:382] mnist -> label
I0428 19:55:01.096107 28095 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:01.098582 28095 net.cpp:124] Setting up mnist
I0428 19:55:01.098600 28095 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:01.098606 28095 net.cpp:131] Top shape: 64 (64)
I0428 19:55:01.098610 28095 net.cpp:139] Memory required for data: 200960
I0428 19:55:01.098618 28095 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:01.098666 28095 net.cpp:86] Creating Layer conv0
I0428 19:55:01.098688 28095 net.cpp:408] conv0 <- data
I0428 19:55:01.098702 28095 net.cpp:382] conv0 -> conv0
I0428 19:55:01.376000 28095 net.cpp:124] Setting up conv0
I0428 19:55:01.376026 28095 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:01.376030 28095 net.cpp:139] Memory required for data: 938240
I0428 19:55:01.376044 28095 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:01.376057 28095 net.cpp:86] Creating Layer pool0
I0428 19:55:01.376061 28095 net.cpp:408] pool0 <- conv0
I0428 19:55:01.376066 28095 net.cpp:382] pool0 -> pool0
I0428 19:55:01.376126 28095 net.cpp:124] Setting up pool0
I0428 19:55:01.376132 28095 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:01.376133 28095 net.cpp:139] Memory required for data: 1122560
I0428 19:55:01.376137 28095 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:01.376147 28095 net.cpp:86] Creating Layer conv1
I0428 19:55:01.376150 28095 net.cpp:408] conv1 <- pool0
I0428 19:55:01.376170 28095 net.cpp:382] conv1 -> conv1
I0428 19:55:01.379052 28095 net.cpp:124] Setting up conv1
I0428 19:55:01.379082 28095 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:01.379086 28095 net.cpp:139] Memory required for data: 2760960
I0428 19:55:01.379094 28095 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:01.379101 28095 net.cpp:86] Creating Layer pool1
I0428 19:55:01.379104 28095 net.cpp:408] pool1 <- conv1
I0428 19:55:01.379109 28095 net.cpp:382] pool1 -> pool1
I0428 19:55:01.379160 28095 net.cpp:124] Setting up pool1
I0428 19:55:01.379165 28095 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:01.379168 28095 net.cpp:139] Memory required for data: 3170560
I0428 19:55:01.379171 28095 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:01.379179 28095 net.cpp:86] Creating Layer ip1
I0428 19:55:01.379181 28095 net.cpp:408] ip1 <- pool1
I0428 19:55:01.379185 28095 net.cpp:382] ip1 -> ip1
I0428 19:55:01.379532 28095 net.cpp:124] Setting up ip1
I0428 19:55:01.379539 28095 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:01.379559 28095 net.cpp:139] Memory required for data: 3176960
I0428 19:55:01.379565 28095 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:01.379570 28095 net.cpp:86] Creating Layer relu1
I0428 19:55:01.379575 28095 net.cpp:408] relu1 <- ip1
I0428 19:55:01.379578 28095 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:01.379739 28095 net.cpp:124] Setting up relu1
I0428 19:55:01.379748 28095 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:01.379751 28095 net.cpp:139] Memory required for data: 3183360
I0428 19:55:01.379755 28095 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:01.379775 28095 net.cpp:86] Creating Layer ip2
I0428 19:55:01.379777 28095 net.cpp:408] ip2 <- ip1
I0428 19:55:01.379782 28095 net.cpp:382] ip2 -> ip2
I0428 19:55:01.379884 28095 net.cpp:124] Setting up ip2
I0428 19:55:01.379889 28095 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:01.379892 28095 net.cpp:139] Memory required for data: 3185920
I0428 19:55:01.379897 28095 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:01.379902 28095 net.cpp:86] Creating Layer relu2
I0428 19:55:01.379905 28095 net.cpp:408] relu2 <- ip2
I0428 19:55:01.379909 28095 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:01.380681 28095 net.cpp:124] Setting up relu2
I0428 19:55:01.380692 28095 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:01.380707 28095 net.cpp:139] Memory required for data: 3188480
I0428 19:55:01.380712 28095 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:01.380718 28095 net.cpp:86] Creating Layer ip3
I0428 19:55:01.380722 28095 net.cpp:408] ip3 <- ip2
I0428 19:55:01.380728 28095 net.cpp:382] ip3 -> ip3
I0428 19:55:01.380848 28095 net.cpp:124] Setting up ip3
I0428 19:55:01.380872 28095 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:01.380877 28095 net.cpp:139] Memory required for data: 3191040
I0428 19:55:01.380887 28095 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:01.380895 28095 net.cpp:86] Creating Layer relu3
I0428 19:55:01.380899 28095 net.cpp:408] relu3 <- ip3
I0428 19:55:01.380903 28095 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:01.381088 28095 net.cpp:124] Setting up relu3
I0428 19:55:01.381098 28095 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:01.381101 28095 net.cpp:139] Memory required for data: 3193600
I0428 19:55:01.381104 28095 layer_factory.hpp:77] Creating layer loss
I0428 19:55:01.381111 28095 net.cpp:86] Creating Layer loss
I0428 19:55:01.381114 28095 net.cpp:408] loss <- ip3
I0428 19:55:01.381119 28095 net.cpp:408] loss <- label
I0428 19:55:01.381124 28095 net.cpp:382] loss -> loss
I0428 19:55:01.381142 28095 layer_factory.hpp:77] Creating layer loss
I0428 19:55:01.381379 28095 net.cpp:124] Setting up loss
I0428 19:55:01.381388 28095 net.cpp:131] Top shape: (1)
I0428 19:55:01.381392 28095 net.cpp:134]     with loss weight 1
I0428 19:55:01.381405 28095 net.cpp:139] Memory required for data: 3193604
I0428 19:55:01.381409 28095 net.cpp:200] loss needs backward computation.
I0428 19:55:01.381413 28095 net.cpp:200] relu3 needs backward computation.
I0428 19:55:01.381417 28095 net.cpp:200] ip3 needs backward computation.
I0428 19:55:01.381419 28095 net.cpp:200] relu2 needs backward computation.
I0428 19:55:01.381422 28095 net.cpp:200] ip2 needs backward computation.
I0428 19:55:01.381425 28095 net.cpp:200] relu1 needs backward computation.
I0428 19:55:01.381428 28095 net.cpp:200] ip1 needs backward computation.
I0428 19:55:01.381431 28095 net.cpp:200] pool1 needs backward computation.
I0428 19:55:01.381434 28095 net.cpp:200] conv1 needs backward computation.
I0428 19:55:01.381438 28095 net.cpp:200] pool0 needs backward computation.
I0428 19:55:01.381441 28095 net.cpp:200] conv0 needs backward computation.
I0428 19:55:01.381459 28095 net.cpp:202] mnist does not need backward computation.
I0428 19:55:01.381463 28095 net.cpp:244] This network produces output loss
I0428 19:55:01.381470 28095 net.cpp:257] Network initialization done.
I0428 19:55:01.381855 28095 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test723.prototxt
I0428 19:55:01.381908 28095 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:01.382014 28095 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:01.382088 28095 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:01.382133 28095 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:01.382144 28095 net.cpp:86] Creating Layer mnist
I0428 19:55:01.382149 28095 net.cpp:382] mnist -> data
I0428 19:55:01.382156 28095 net.cpp:382] mnist -> label
I0428 19:55:01.382249 28095 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:01.384299 28095 net.cpp:124] Setting up mnist
I0428 19:55:01.384343 28095 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:01.384349 28095 net.cpp:131] Top shape: 100 (100)
I0428 19:55:01.384352 28095 net.cpp:139] Memory required for data: 314000
I0428 19:55:01.384356 28095 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:01.384382 28095 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:01.384385 28095 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:01.384390 28095 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:01.384397 28095 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:01.384438 28095 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:01.384454 28095 net.cpp:131] Top shape: 100 (100)
I0428 19:55:01.384457 28095 net.cpp:131] Top shape: 100 (100)
I0428 19:55:01.384460 28095 net.cpp:139] Memory required for data: 314800
I0428 19:55:01.384464 28095 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:01.384471 28095 net.cpp:86] Creating Layer conv0
I0428 19:55:01.384475 28095 net.cpp:408] conv0 <- data
I0428 19:55:01.384480 28095 net.cpp:382] conv0 -> conv0
I0428 19:55:01.386198 28095 net.cpp:124] Setting up conv0
I0428 19:55:01.386211 28095 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:01.386215 28095 net.cpp:139] Memory required for data: 1466800
I0428 19:55:01.386240 28095 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:01.386262 28095 net.cpp:86] Creating Layer pool0
I0428 19:55:01.386265 28095 net.cpp:408] pool0 <- conv0
I0428 19:55:01.386270 28095 net.cpp:382] pool0 -> pool0
I0428 19:55:01.386304 28095 net.cpp:124] Setting up pool0
I0428 19:55:01.386310 28095 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:01.386313 28095 net.cpp:139] Memory required for data: 1754800
I0428 19:55:01.386317 28095 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:01.386338 28095 net.cpp:86] Creating Layer conv1
I0428 19:55:01.386343 28095 net.cpp:408] conv1 <- pool0
I0428 19:55:01.386346 28095 net.cpp:382] conv1 -> conv1
I0428 19:55:01.387970 28095 net.cpp:124] Setting up conv1
I0428 19:55:01.388000 28095 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:01.388005 28095 net.cpp:139] Memory required for data: 4314800
I0428 19:55:01.388013 28095 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:01.388021 28095 net.cpp:86] Creating Layer pool1
I0428 19:55:01.388025 28095 net.cpp:408] pool1 <- conv1
I0428 19:55:01.388031 28095 net.cpp:382] pool1 -> pool1
I0428 19:55:01.388067 28095 net.cpp:124] Setting up pool1
I0428 19:55:01.388072 28095 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:01.388075 28095 net.cpp:139] Memory required for data: 4954800
I0428 19:55:01.388078 28095 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:01.388084 28095 net.cpp:86] Creating Layer ip1
I0428 19:55:01.388087 28095 net.cpp:408] ip1 <- pool1
I0428 19:55:01.388093 28095 net.cpp:382] ip1 -> ip1
I0428 19:55:01.388504 28095 net.cpp:124] Setting up ip1
I0428 19:55:01.388511 28095 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:01.388559 28095 net.cpp:139] Memory required for data: 4964800
I0428 19:55:01.388582 28095 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:01.388586 28095 net.cpp:86] Creating Layer relu1
I0428 19:55:01.388591 28095 net.cpp:408] relu1 <- ip1
I0428 19:55:01.388594 28095 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:01.388748 28095 net.cpp:124] Setting up relu1
I0428 19:55:01.388756 28095 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:01.388761 28095 net.cpp:139] Memory required for data: 4974800
I0428 19:55:01.388763 28095 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:01.388769 28095 net.cpp:86] Creating Layer ip2
I0428 19:55:01.388773 28095 net.cpp:408] ip2 <- ip1
I0428 19:55:01.388778 28095 net.cpp:382] ip2 -> ip2
I0428 19:55:01.388921 28095 net.cpp:124] Setting up ip2
I0428 19:55:01.388929 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.388933 28095 net.cpp:139] Memory required for data: 4978800
I0428 19:55:01.388939 28095 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:01.388943 28095 net.cpp:86] Creating Layer relu2
I0428 19:55:01.388947 28095 net.cpp:408] relu2 <- ip2
I0428 19:55:01.388952 28095 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:01.389156 28095 net.cpp:124] Setting up relu2
I0428 19:55:01.389165 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.389168 28095 net.cpp:139] Memory required for data: 4982800
I0428 19:55:01.389171 28095 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:01.389176 28095 net.cpp:86] Creating Layer ip3
I0428 19:55:01.389180 28095 net.cpp:408] ip3 <- ip2
I0428 19:55:01.389185 28095 net.cpp:382] ip3 -> ip3
I0428 19:55:01.389277 28095 net.cpp:124] Setting up ip3
I0428 19:55:01.389284 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.389293 28095 net.cpp:139] Memory required for data: 4986800
I0428 19:55:01.389302 28095 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:01.389307 28095 net.cpp:86] Creating Layer relu3
I0428 19:55:01.389309 28095 net.cpp:408] relu3 <- ip3
I0428 19:55:01.389334 28095 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:01.390192 28095 net.cpp:124] Setting up relu3
I0428 19:55:01.390205 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.390224 28095 net.cpp:139] Memory required for data: 4990800
I0428 19:55:01.390228 28095 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:01.390234 28095 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:01.390238 28095 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:01.390242 28095 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:01.390249 28095 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:01.390305 28095 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:01.390311 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.390314 28095 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:01.390317 28095 net.cpp:139] Memory required for data: 4998800
I0428 19:55:01.390321 28095 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:01.390326 28095 net.cpp:86] Creating Layer accuracy
I0428 19:55:01.390329 28095 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:01.390333 28095 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:01.390337 28095 net.cpp:382] accuracy -> accuracy
I0428 19:55:01.390344 28095 net.cpp:124] Setting up accuracy
I0428 19:55:01.390348 28095 net.cpp:131] Top shape: (1)
I0428 19:55:01.390352 28095 net.cpp:139] Memory required for data: 4998804
I0428 19:55:01.390354 28095 layer_factory.hpp:77] Creating layer loss
I0428 19:55:01.390359 28095 net.cpp:86] Creating Layer loss
I0428 19:55:01.390362 28095 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:01.390367 28095 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:01.390372 28095 net.cpp:382] loss -> loss
I0428 19:55:01.390377 28095 layer_factory.hpp:77] Creating layer loss
I0428 19:55:01.390641 28095 net.cpp:124] Setting up loss
I0428 19:55:01.390651 28095 net.cpp:131] Top shape: (1)
I0428 19:55:01.390655 28095 net.cpp:134]     with loss weight 1
I0428 19:55:01.390672 28095 net.cpp:139] Memory required for data: 4998808
I0428 19:55:01.390677 28095 net.cpp:200] loss needs backward computation.
I0428 19:55:01.390681 28095 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:01.390686 28095 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:01.390689 28095 net.cpp:200] relu3 needs backward computation.
I0428 19:55:01.390692 28095 net.cpp:200] ip3 needs backward computation.
I0428 19:55:01.390697 28095 net.cpp:200] relu2 needs backward computation.
I0428 19:55:01.390699 28095 net.cpp:200] ip2 needs backward computation.
I0428 19:55:01.390703 28095 net.cpp:200] relu1 needs backward computation.
I0428 19:55:01.390707 28095 net.cpp:200] ip1 needs backward computation.
I0428 19:55:01.390710 28095 net.cpp:200] pool1 needs backward computation.
I0428 19:55:01.390713 28095 net.cpp:200] conv1 needs backward computation.
I0428 19:55:01.390718 28095 net.cpp:200] pool0 needs backward computation.
I0428 19:55:01.390722 28095 net.cpp:200] conv0 needs backward computation.
I0428 19:55:01.390732 28095 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:01.390736 28095 net.cpp:202] mnist does not need backward computation.
I0428 19:55:01.390739 28095 net.cpp:244] This network produces output accuracy
I0428 19:55:01.390744 28095 net.cpp:244] This network produces output loss
I0428 19:55:01.390755 28095 net.cpp:257] Network initialization done.
I0428 19:55:01.390800 28095 solver.cpp:56] Solver scaffolding done.
I0428 19:55:01.391201 28095 caffe.cpp:248] Starting Optimization
I0428 19:55:01.391221 28095 solver.cpp:273] Solving LeNet
I0428 19:55:01.391223 28095 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:01.391526 28095 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:01.397431 28095 blocking_queue.cpp:49] Waiting for data
I0428 19:55:01.466971 28102 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:01.467589 28095 solver.cpp:398]     Test net output #0: accuracy = 0.155
I0428 19:55:01.467610 28095 solver.cpp:398]     Test net output #1: loss = 2.28539 (* 1 = 2.28539 loss)
I0428 19:55:01.471420 28095 solver.cpp:219] Iteration 0 (-1.01454e-42 iter/s, 0.0801372s/100 iters), loss = 2.27807
I0428 19:55:01.471457 28095 solver.cpp:238]     Train net output #0: loss = 2.27807 (* 1 = 2.27807 loss)
I0428 19:55:01.471485 28095 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:01.615764 28095 solver.cpp:219] Iteration 100 (693.031 iter/s, 0.144294s/100 iters), loss = 1.11862
I0428 19:55:01.615804 28095 solver.cpp:238]     Train net output #0: loss = 1.11862 (* 1 = 1.11862 loss)
I0428 19:55:01.615811 28095 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:01.761138 28095 solver.cpp:219] Iteration 200 (688.127 iter/s, 0.145322s/100 iters), loss = 0.997802
I0428 19:55:01.761164 28095 solver.cpp:238]     Train net output #0: loss = 0.997802 (* 1 = 0.997802 loss)
I0428 19:55:01.761170 28095 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:01.912355 28095 solver.cpp:219] Iteration 300 (661.474 iter/s, 0.151177s/100 iters), loss = 0.594647
I0428 19:55:01.912382 28095 solver.cpp:238]     Train net output #0: loss = 0.594647 (* 1 = 0.594647 loss)
I0428 19:55:01.912405 28095 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:02.068519 28095 solver.cpp:219] Iteration 400 (640.524 iter/s, 0.156122s/100 iters), loss = 0.865853
I0428 19:55:02.068548 28095 solver.cpp:238]     Train net output #0: loss = 0.865853 (* 1 = 0.865853 loss)
I0428 19:55:02.068557 28095 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:02.221801 28095 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:02.297399 28102 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:02.298063 28095 solver.cpp:398]     Test net output #0: accuracy = 0.7592
I0428 19:55:02.298105 28095 solver.cpp:398]     Test net output #1: loss = 0.786736 (* 1 = 0.786736 loss)
I0428 19:55:02.299712 28095 solver.cpp:219] Iteration 500 (432.626 iter/s, 0.231146s/100 iters), loss = 0.859222
I0428 19:55:02.299760 28095 solver.cpp:238]     Train net output #0: loss = 0.859222 (* 1 = 0.859222 loss)
I0428 19:55:02.299772 28095 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:02.453299 28095 solver.cpp:219] Iteration 600 (651.351 iter/s, 0.153527s/100 iters), loss = 0.730615
I0428 19:55:02.453348 28095 solver.cpp:238]     Train net output #0: loss = 0.730615 (* 1 = 0.730615 loss)
I0428 19:55:02.453356 28095 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:02.607251 28095 solver.cpp:219] Iteration 700 (649.816 iter/s, 0.15389s/100 iters), loss = 0.99508
I0428 19:55:02.607277 28095 solver.cpp:238]     Train net output #0: loss = 0.99508 (* 1 = 0.99508 loss)
I0428 19:55:02.607285 28095 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:02.752135 28095 solver.cpp:219] Iteration 800 (690.389 iter/s, 0.144846s/100 iters), loss = 0.892506
I0428 19:55:02.752176 28095 solver.cpp:238]     Train net output #0: loss = 0.892506 (* 1 = 0.892506 loss)
I0428 19:55:02.752182 28095 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:02.898236 28095 solver.cpp:219] Iteration 900 (684.634 iter/s, 0.146063s/100 iters), loss = 0.534759
I0428 19:55:02.898263 28095 solver.cpp:238]     Train net output #0: loss = 0.534759 (* 1 = 0.534759 loss)
I0428 19:55:02.898269 28095 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:02.948030 28101 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:03.047935 28095 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:03.049922 28095 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:03.050897 28095 solver.cpp:311] Iteration 1000, loss = 0.855836
I0428 19:55:03.050931 28095 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:03.126185 28102 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:03.126802 28095 solver.cpp:398]     Test net output #0: accuracy = 0.7842
I0428 19:55:03.126827 28095 solver.cpp:398]     Test net output #1: loss = 0.736812 (* 1 = 0.736812 loss)
I0428 19:55:03.126832 28095 solver.cpp:316] Optimization Done.
I0428 19:55:03.126837 28095 caffe.cpp:259] Optimization Done.
