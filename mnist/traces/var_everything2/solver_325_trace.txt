I0428 19:40:07.638466 24471 caffe.cpp:218] Using GPUs 0
I0428 19:40:07.675703 24471 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:08.181886 24471 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test325.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:08.182026 24471 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test325.prototxt
I0428 19:40:08.182361 24471 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:08.182377 24471 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:08.182461 24471 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:08.182524 24471 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:08.182622 24471 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:08.182641 24471 net.cpp:86] Creating Layer mnist
I0428 19:40:08.182649 24471 net.cpp:382] mnist -> data
I0428 19:40:08.182668 24471 net.cpp:382] mnist -> label
I0428 19:40:08.183702 24471 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:08.186065 24471 net.cpp:124] Setting up mnist
I0428 19:40:08.186096 24471 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:08.186102 24471 net.cpp:131] Top shape: 64 (64)
I0428 19:40:08.186106 24471 net.cpp:139] Memory required for data: 200960
I0428 19:40:08.186112 24471 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:08.186125 24471 net.cpp:86] Creating Layer conv0
I0428 19:40:08.186142 24471 net.cpp:408] conv0 <- data
I0428 19:40:08.186154 24471 net.cpp:382] conv0 -> conv0
I0428 19:40:08.418041 24471 net.cpp:124] Setting up conv0
I0428 19:40:08.418067 24471 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:08.418071 24471 net.cpp:139] Memory required for data: 495872
I0428 19:40:08.418084 24471 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:08.418097 24471 net.cpp:86] Creating Layer pool0
I0428 19:40:08.418102 24471 net.cpp:408] pool0 <- conv0
I0428 19:40:08.418121 24471 net.cpp:382] pool0 -> pool0
I0428 19:40:08.418182 24471 net.cpp:124] Setting up pool0
I0428 19:40:08.418187 24471 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:08.418190 24471 net.cpp:139] Memory required for data: 569600
I0428 19:40:08.418193 24471 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:08.418203 24471 net.cpp:86] Creating Layer conv1
I0428 19:40:08.418206 24471 net.cpp:408] conv1 <- pool0
I0428 19:40:08.418211 24471 net.cpp:382] conv1 -> conv1
I0428 19:40:08.420058 24471 net.cpp:124] Setting up conv1
I0428 19:40:08.420087 24471 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:08.420091 24471 net.cpp:139] Memory required for data: 651520
I0428 19:40:08.420099 24471 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:08.420107 24471 net.cpp:86] Creating Layer pool1
I0428 19:40:08.420111 24471 net.cpp:408] pool1 <- conv1
I0428 19:40:08.420116 24471 net.cpp:382] pool1 -> pool1
I0428 19:40:08.420153 24471 net.cpp:124] Setting up pool1
I0428 19:40:08.420159 24471 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:08.420162 24471 net.cpp:139] Memory required for data: 672000
I0428 19:40:08.420166 24471 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:08.420172 24471 net.cpp:86] Creating Layer ip1
I0428 19:40:08.420176 24471 net.cpp:408] ip1 <- pool1
I0428 19:40:08.420181 24471 net.cpp:382] ip1 -> ip1
I0428 19:40:08.420284 24471 net.cpp:124] Setting up ip1
I0428 19:40:08.420291 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.420295 24471 net.cpp:139] Memory required for data: 674560
I0428 19:40:08.420301 24471 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:08.420307 24471 net.cpp:86] Creating Layer relu1
I0428 19:40:08.420310 24471 net.cpp:408] relu1 <- ip1
I0428 19:40:08.420315 24471 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:08.420511 24471 net.cpp:124] Setting up relu1
I0428 19:40:08.420519 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.420522 24471 net.cpp:139] Memory required for data: 677120
I0428 19:40:08.420526 24471 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:08.420533 24471 net.cpp:86] Creating Layer ip2
I0428 19:40:08.420536 24471 net.cpp:408] ip2 <- ip1
I0428 19:40:08.420541 24471 net.cpp:382] ip2 -> ip2
I0428 19:40:08.420652 24471 net.cpp:124] Setting up ip2
I0428 19:40:08.420660 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.420662 24471 net.cpp:139] Memory required for data: 679680
I0428 19:40:08.420667 24471 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:08.420688 24471 net.cpp:86] Creating Layer relu2
I0428 19:40:08.420691 24471 net.cpp:408] relu2 <- ip2
I0428 19:40:08.420696 24471 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:08.421489 24471 net.cpp:124] Setting up relu2
I0428 19:40:08.421501 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.421520 24471 net.cpp:139] Memory required for data: 682240
I0428 19:40:08.421524 24471 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:08.421532 24471 net.cpp:86] Creating Layer ip3
I0428 19:40:08.421535 24471 net.cpp:408] ip3 <- ip2
I0428 19:40:08.421540 24471 net.cpp:382] ip3 -> ip3
I0428 19:40:08.421643 24471 net.cpp:124] Setting up ip3
I0428 19:40:08.421650 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.421653 24471 net.cpp:139] Memory required for data: 684800
I0428 19:40:08.421661 24471 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:08.421669 24471 net.cpp:86] Creating Layer relu3
I0428 19:40:08.421672 24471 net.cpp:408] relu3 <- ip3
I0428 19:40:08.421675 24471 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:08.421895 24471 net.cpp:124] Setting up relu3
I0428 19:40:08.421903 24471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:08.421906 24471 net.cpp:139] Memory required for data: 687360
I0428 19:40:08.421910 24471 layer_factory.hpp:77] Creating layer loss
I0428 19:40:08.421916 24471 net.cpp:86] Creating Layer loss
I0428 19:40:08.421919 24471 net.cpp:408] loss <- ip3
I0428 19:40:08.421922 24471 net.cpp:408] loss <- label
I0428 19:40:08.421928 24471 net.cpp:382] loss -> loss
I0428 19:40:08.421943 24471 layer_factory.hpp:77] Creating layer loss
I0428 19:40:08.422219 24471 net.cpp:124] Setting up loss
I0428 19:40:08.422229 24471 net.cpp:131] Top shape: (1)
I0428 19:40:08.422231 24471 net.cpp:134]     with loss weight 1
I0428 19:40:08.422245 24471 net.cpp:139] Memory required for data: 687364
I0428 19:40:08.422248 24471 net.cpp:200] loss needs backward computation.
I0428 19:40:08.422251 24471 net.cpp:200] relu3 needs backward computation.
I0428 19:40:08.422255 24471 net.cpp:200] ip3 needs backward computation.
I0428 19:40:08.422257 24471 net.cpp:200] relu2 needs backward computation.
I0428 19:40:08.422260 24471 net.cpp:200] ip2 needs backward computation.
I0428 19:40:08.422262 24471 net.cpp:200] relu1 needs backward computation.
I0428 19:40:08.422266 24471 net.cpp:200] ip1 needs backward computation.
I0428 19:40:08.422269 24471 net.cpp:200] pool1 needs backward computation.
I0428 19:40:08.422273 24471 net.cpp:200] conv1 needs backward computation.
I0428 19:40:08.422276 24471 net.cpp:200] pool0 needs backward computation.
I0428 19:40:08.422278 24471 net.cpp:200] conv0 needs backward computation.
I0428 19:40:08.422281 24471 net.cpp:202] mnist does not need backward computation.
I0428 19:40:08.422284 24471 net.cpp:244] This network produces output loss
I0428 19:40:08.422308 24471 net.cpp:257] Network initialization done.
I0428 19:40:08.422716 24471 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test325.prototxt
I0428 19:40:08.422772 24471 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:08.422876 24471 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:08.422956 24471 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:08.422999 24471 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:08.423012 24471 net.cpp:86] Creating Layer mnist
I0428 19:40:08.423018 24471 net.cpp:382] mnist -> data
I0428 19:40:08.423025 24471 net.cpp:382] mnist -> label
I0428 19:40:08.423127 24471 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:08.425339 24471 net.cpp:124] Setting up mnist
I0428 19:40:08.425367 24471 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:08.425371 24471 net.cpp:131] Top shape: 100 (100)
I0428 19:40:08.425374 24471 net.cpp:139] Memory required for data: 314000
I0428 19:40:08.425377 24471 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:08.425384 24471 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:08.425386 24471 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:08.425415 24471 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:08.425424 24471 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:08.425468 24471 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:08.425473 24471 net.cpp:131] Top shape: 100 (100)
I0428 19:40:08.425477 24471 net.cpp:131] Top shape: 100 (100)
I0428 19:40:08.425479 24471 net.cpp:139] Memory required for data: 314800
I0428 19:40:08.425482 24471 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:08.425508 24471 net.cpp:86] Creating Layer conv0
I0428 19:40:08.425510 24471 net.cpp:408] conv0 <- data
I0428 19:40:08.425515 24471 net.cpp:382] conv0 -> conv0
I0428 19:40:08.427325 24471 net.cpp:124] Setting up conv0
I0428 19:40:08.427340 24471 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:08.427342 24471 net.cpp:139] Memory required for data: 775600
I0428 19:40:08.427350 24471 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:08.427357 24471 net.cpp:86] Creating Layer pool0
I0428 19:40:08.427361 24471 net.cpp:408] pool0 <- conv0
I0428 19:40:08.427366 24471 net.cpp:382] pool0 -> pool0
I0428 19:40:08.427399 24471 net.cpp:124] Setting up pool0
I0428 19:40:08.427405 24471 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:08.427407 24471 net.cpp:139] Memory required for data: 890800
I0428 19:40:08.427410 24471 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:08.427418 24471 net.cpp:86] Creating Layer conv1
I0428 19:40:08.427422 24471 net.cpp:408] conv1 <- pool0
I0428 19:40:08.427428 24471 net.cpp:382] conv1 -> conv1
I0428 19:40:08.429126 24471 net.cpp:124] Setting up conv1
I0428 19:40:08.429143 24471 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:08.429148 24471 net.cpp:139] Memory required for data: 1018800
I0428 19:40:08.429172 24471 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:08.429193 24471 net.cpp:86] Creating Layer pool1
I0428 19:40:08.429198 24471 net.cpp:408] pool1 <- conv1
I0428 19:40:08.429203 24471 net.cpp:382] pool1 -> pool1
I0428 19:40:08.429242 24471 net.cpp:124] Setting up pool1
I0428 19:40:08.429247 24471 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:08.429251 24471 net.cpp:139] Memory required for data: 1050800
I0428 19:40:08.429255 24471 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:08.429261 24471 net.cpp:86] Creating Layer ip1
I0428 19:40:08.429265 24471 net.cpp:408] ip1 <- pool1
I0428 19:40:08.429270 24471 net.cpp:382] ip1 -> ip1
I0428 19:40:08.429389 24471 net.cpp:124] Setting up ip1
I0428 19:40:08.429397 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.429410 24471 net.cpp:139] Memory required for data: 1054800
I0428 19:40:08.429417 24471 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:08.429422 24471 net.cpp:86] Creating Layer relu1
I0428 19:40:08.429432 24471 net.cpp:408] relu1 <- ip1
I0428 19:40:08.429438 24471 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:08.429622 24471 net.cpp:124] Setting up relu1
I0428 19:40:08.429631 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.429635 24471 net.cpp:139] Memory required for data: 1058800
I0428 19:40:08.429637 24471 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:08.429646 24471 net.cpp:86] Creating Layer ip2
I0428 19:40:08.429649 24471 net.cpp:408] ip2 <- ip1
I0428 19:40:08.429656 24471 net.cpp:382] ip2 -> ip2
I0428 19:40:08.429754 24471 net.cpp:124] Setting up ip2
I0428 19:40:08.429764 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.429767 24471 net.cpp:139] Memory required for data: 1062800
I0428 19:40:08.429774 24471 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:08.429777 24471 net.cpp:86] Creating Layer relu2
I0428 19:40:08.429780 24471 net.cpp:408] relu2 <- ip2
I0428 19:40:08.429785 24471 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:08.429942 24471 net.cpp:124] Setting up relu2
I0428 19:40:08.429962 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.429966 24471 net.cpp:139] Memory required for data: 1066800
I0428 19:40:08.429970 24471 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:08.429975 24471 net.cpp:86] Creating Layer ip3
I0428 19:40:08.429977 24471 net.cpp:408] ip3 <- ip2
I0428 19:40:08.429983 24471 net.cpp:382] ip3 -> ip3
I0428 19:40:08.430091 24471 net.cpp:124] Setting up ip3
I0428 19:40:08.430099 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.430101 24471 net.cpp:139] Memory required for data: 1070800
I0428 19:40:08.430109 24471 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:08.430114 24471 net.cpp:86] Creating Layer relu3
I0428 19:40:08.430117 24471 net.cpp:408] relu3 <- ip3
I0428 19:40:08.430121 24471 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:08.430956 24471 net.cpp:124] Setting up relu3
I0428 19:40:08.430969 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.430989 24471 net.cpp:139] Memory required for data: 1074800
I0428 19:40:08.430991 24471 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:08.430996 24471 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:08.431000 24471 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:08.431005 24471 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:08.431013 24471 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:08.431056 24471 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:08.431062 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.431066 24471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:08.431068 24471 net.cpp:139] Memory required for data: 1082800
I0428 19:40:08.431071 24471 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:08.431077 24471 net.cpp:86] Creating Layer accuracy
I0428 19:40:08.431082 24471 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:08.431085 24471 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:08.431089 24471 net.cpp:382] accuracy -> accuracy
I0428 19:40:08.431097 24471 net.cpp:124] Setting up accuracy
I0428 19:40:08.431099 24471 net.cpp:131] Top shape: (1)
I0428 19:40:08.431102 24471 net.cpp:139] Memory required for data: 1082804
I0428 19:40:08.431105 24471 layer_factory.hpp:77] Creating layer loss
I0428 19:40:08.431123 24471 net.cpp:86] Creating Layer loss
I0428 19:40:08.431126 24471 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:08.431130 24471 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:08.431134 24471 net.cpp:382] loss -> loss
I0428 19:40:08.431140 24471 layer_factory.hpp:77] Creating layer loss
I0428 19:40:08.431411 24471 net.cpp:124] Setting up loss
I0428 19:40:08.431421 24471 net.cpp:131] Top shape: (1)
I0428 19:40:08.431424 24471 net.cpp:134]     with loss weight 1
I0428 19:40:08.431430 24471 net.cpp:139] Memory required for data: 1082808
I0428 19:40:08.431443 24471 net.cpp:200] loss needs backward computation.
I0428 19:40:08.431447 24471 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:08.431450 24471 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:08.431454 24471 net.cpp:200] relu3 needs backward computation.
I0428 19:40:08.431463 24471 net.cpp:200] ip3 needs backward computation.
I0428 19:40:08.431465 24471 net.cpp:200] relu2 needs backward computation.
I0428 19:40:08.431468 24471 net.cpp:200] ip2 needs backward computation.
I0428 19:40:08.431471 24471 net.cpp:200] relu1 needs backward computation.
I0428 19:40:08.431474 24471 net.cpp:200] ip1 needs backward computation.
I0428 19:40:08.431478 24471 net.cpp:200] pool1 needs backward computation.
I0428 19:40:08.431480 24471 net.cpp:200] conv1 needs backward computation.
I0428 19:40:08.431483 24471 net.cpp:200] pool0 needs backward computation.
I0428 19:40:08.431500 24471 net.cpp:200] conv0 needs backward computation.
I0428 19:40:08.431505 24471 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:08.431509 24471 net.cpp:202] mnist does not need backward computation.
I0428 19:40:08.431512 24471 net.cpp:244] This network produces output accuracy
I0428 19:40:08.431515 24471 net.cpp:244] This network produces output loss
I0428 19:40:08.431525 24471 net.cpp:257] Network initialization done.
I0428 19:40:08.431581 24471 solver.cpp:56] Solver scaffolding done.
I0428 19:40:08.431912 24471 caffe.cpp:248] Starting Optimization
I0428 19:40:08.431926 24471 solver.cpp:273] Solving LeNet
I0428 19:40:08.431927 24471 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:08.432737 24471 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:08.434723 24471 blocking_queue.cpp:49] Waiting for data
I0428 19:40:08.504357 24478 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:08.504808 24471 solver.cpp:398]     Test net output #0: accuracy = 0.1271
I0428 19:40:08.504848 24471 solver.cpp:398]     Test net output #1: loss = 2.30298 (* 1 = 2.30298 loss)
I0428 19:40:08.506652 24471 solver.cpp:219] Iteration 0 (-1.08741e-42 iter/s, 0.0746958s/100 iters), loss = 2.29844
I0428 19:40:08.506700 24471 solver.cpp:238]     Train net output #0: loss = 2.29844 (* 1 = 2.29844 loss)
I0428 19:40:08.506718 24471 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:08.579643 24471 solver.cpp:219] Iteration 100 (1370.81 iter/s, 0.0729495s/100 iters), loss = 1.95284
I0428 19:40:08.579668 24471 solver.cpp:238]     Train net output #0: loss = 1.95284 (* 1 = 1.95284 loss)
I0428 19:40:08.579689 24471 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:08.650087 24471 solver.cpp:219] Iteration 200 (1420.27 iter/s, 0.0704092s/100 iters), loss = 1.14282
I0428 19:40:08.650111 24471 solver.cpp:238]     Train net output #0: loss = 1.14282 (* 1 = 1.14282 loss)
I0428 19:40:08.650133 24471 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:08.719825 24471 solver.cpp:219] Iteration 300 (1434.66 iter/s, 0.0697028s/100 iters), loss = 0.807155
I0428 19:40:08.719851 24471 solver.cpp:238]     Train net output #0: loss = 0.807155 (* 1 = 0.807155 loss)
I0428 19:40:08.719856 24471 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:08.790732 24471 solver.cpp:219] Iteration 400 (1411.03 iter/s, 0.0708701s/100 iters), loss = 0.454412
I0428 19:40:08.790756 24471 solver.cpp:238]     Train net output #0: loss = 0.454412 (* 1 = 0.454412 loss)
I0428 19:40:08.790762 24471 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:08.862782 24471 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:08.936821 24478 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:08.937278 24471 solver.cpp:398]     Test net output #0: accuracy = 0.8146
I0428 19:40:08.937301 24471 solver.cpp:398]     Test net output #1: loss = 0.534505 (* 1 = 0.534505 loss)
I0428 19:40:08.938084 24471 solver.cpp:219] Iteration 500 (678.819 iter/s, 0.147315s/100 iters), loss = 0.409444
I0428 19:40:08.938108 24471 solver.cpp:238]     Train net output #0: loss = 0.409444 (* 1 = 0.409444 loss)
I0428 19:40:08.938132 24471 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:09.010082 24471 solver.cpp:219] Iteration 600 (1389.75 iter/s, 0.0719555s/100 iters), loss = 0.500048
I0428 19:40:09.010108 24471 solver.cpp:238]     Train net output #0: loss = 0.500048 (* 1 = 0.500048 loss)
I0428 19:40:09.010115 24471 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:09.082248 24471 solver.cpp:219] Iteration 700 (1386.39 iter/s, 0.0721295s/100 iters), loss = 0.642932
I0428 19:40:09.082278 24471 solver.cpp:238]     Train net output #0: loss = 0.642932 (* 1 = 0.642932 loss)
I0428 19:40:09.082285 24471 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:09.153754 24471 solver.cpp:219] Iteration 800 (1399.25 iter/s, 0.071467s/100 iters), loss = 0.71113
I0428 19:40:09.153780 24471 solver.cpp:238]     Train net output #0: loss = 0.71113 (* 1 = 0.71113 loss)
I0428 19:40:09.153792 24471 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:09.225165 24471 solver.cpp:219] Iteration 900 (1401.13 iter/s, 0.0713708s/100 iters), loss = 0.506828
I0428 19:40:09.225193 24471 solver.cpp:238]     Train net output #0: loss = 0.506827 (* 1 = 0.506827 loss)
I0428 19:40:09.225203 24471 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:09.248829 24477 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:09.295282 24471 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:09.295954 24471 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:09.296360 24471 solver.cpp:311] Iteration 1000, loss = 0.402342
I0428 19:40:09.296392 24471 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:09.348772 24478 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:09.349273 24471 solver.cpp:398]     Test net output #0: accuracy = 0.8457
I0428 19:40:09.349297 24471 solver.cpp:398]     Test net output #1: loss = 0.42843 (* 1 = 0.42843 loss)
I0428 19:40:09.349301 24471 solver.cpp:316] Optimization Done.
I0428 19:40:09.349306 24471 caffe.cpp:259] Optimization Done.
