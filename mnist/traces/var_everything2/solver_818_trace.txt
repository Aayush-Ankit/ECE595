I0428 19:58:25.152664 28969 caffe.cpp:218] Using GPUs 0
I0428 19:58:25.190315 28969 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:25.695343 28969 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test818.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:25.695484 28969 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test818.prototxt
I0428 19:58:25.695905 28969 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:25.695922 28969 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:25.696027 28969 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:25.696107 28969 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:25.696207 28969 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:25.696230 28969 net.cpp:86] Creating Layer mnist
I0428 19:58:25.696239 28969 net.cpp:382] mnist -> data
I0428 19:58:25.696261 28969 net.cpp:382] mnist -> label
I0428 19:58:25.697382 28969 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:25.699839 28969 net.cpp:124] Setting up mnist
I0428 19:58:25.699856 28969 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:25.699863 28969 net.cpp:131] Top shape: 64 (64)
I0428 19:58:25.699867 28969 net.cpp:139] Memory required for data: 200960
I0428 19:58:25.699873 28969 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:25.699892 28969 net.cpp:86] Creating Layer conv0
I0428 19:58:25.699913 28969 net.cpp:408] conv0 <- data
I0428 19:58:25.699925 28969 net.cpp:382] conv0 -> conv0
I0428 19:58:25.982272 28969 net.cpp:124] Setting up conv0
I0428 19:58:25.982300 28969 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:25.982303 28969 net.cpp:139] Memory required for data: 1675520
I0428 19:58:25.982321 28969 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:25.982332 28969 net.cpp:86] Creating Layer pool0
I0428 19:58:25.982347 28969 net.cpp:408] pool0 <- conv0
I0428 19:58:25.982352 28969 net.cpp:382] pool0 -> pool0
I0428 19:58:25.982414 28969 net.cpp:124] Setting up pool0
I0428 19:58:25.982420 28969 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:25.982424 28969 net.cpp:139] Memory required for data: 2044160
I0428 19:58:25.982426 28969 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:25.982437 28969 net.cpp:86] Creating Layer conv1
I0428 19:58:25.982440 28969 net.cpp:408] conv1 <- pool0
I0428 19:58:25.982445 28969 net.cpp:382] conv1 -> conv1
I0428 19:58:25.985199 28969 net.cpp:124] Setting up conv1
I0428 19:58:25.985230 28969 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:25.985234 28969 net.cpp:139] Memory required for data: 2126080
I0428 19:58:25.985244 28969 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:25.985251 28969 net.cpp:86] Creating Layer pool1
I0428 19:58:25.985255 28969 net.cpp:408] pool1 <- conv1
I0428 19:58:25.985275 28969 net.cpp:382] pool1 -> pool1
I0428 19:58:25.985316 28969 net.cpp:124] Setting up pool1
I0428 19:58:25.985322 28969 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:25.985327 28969 net.cpp:139] Memory required for data: 2146560
I0428 19:58:25.985329 28969 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:25.985337 28969 net.cpp:86] Creating Layer ip1
I0428 19:58:25.985340 28969 net.cpp:408] ip1 <- pool1
I0428 19:58:25.985345 28969 net.cpp:382] ip1 -> ip1
I0428 19:58:25.985473 28969 net.cpp:124] Setting up ip1
I0428 19:58:25.985481 28969 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:25.985483 28969 net.cpp:139] Memory required for data: 2159360
I0428 19:58:25.985501 28969 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:25.985507 28969 net.cpp:86] Creating Layer relu1
I0428 19:58:25.985509 28969 net.cpp:408] relu1 <- ip1
I0428 19:58:25.985514 28969 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:25.985698 28969 net.cpp:124] Setting up relu1
I0428 19:58:25.985707 28969 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:25.985712 28969 net.cpp:139] Memory required for data: 2172160
I0428 19:58:25.985714 28969 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:25.985720 28969 net.cpp:86] Creating Layer ip2
I0428 19:58:25.985723 28969 net.cpp:408] ip2 <- ip1
I0428 19:58:25.985728 28969 net.cpp:382] ip2 -> ip2
I0428 19:58:25.985837 28969 net.cpp:124] Setting up ip2
I0428 19:58:25.985844 28969 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:25.985848 28969 net.cpp:139] Memory required for data: 2184960
I0428 19:58:25.985853 28969 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:25.985859 28969 net.cpp:86] Creating Layer relu2
I0428 19:58:25.985862 28969 net.cpp:408] relu2 <- ip2
I0428 19:58:25.985867 28969 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:25.986591 28969 net.cpp:124] Setting up relu2
I0428 19:58:25.986604 28969 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:25.986624 28969 net.cpp:139] Memory required for data: 2197760
I0428 19:58:25.986627 28969 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:25.986634 28969 net.cpp:86] Creating Layer ip3
I0428 19:58:25.986639 28969 net.cpp:408] ip3 <- ip2
I0428 19:58:25.986644 28969 net.cpp:382] ip3 -> ip3
I0428 19:58:25.986768 28969 net.cpp:124] Setting up ip3
I0428 19:58:25.986775 28969 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:25.986779 28969 net.cpp:139] Memory required for data: 2200320
I0428 19:58:25.986788 28969 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:25.986793 28969 net.cpp:86] Creating Layer relu3
I0428 19:58:25.986796 28969 net.cpp:408] relu3 <- ip3
I0428 19:58:25.986800 28969 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:25.986974 28969 net.cpp:124] Setting up relu3
I0428 19:58:25.986984 28969 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:25.986987 28969 net.cpp:139] Memory required for data: 2202880
I0428 19:58:25.986990 28969 layer_factory.hpp:77] Creating layer loss
I0428 19:58:25.986996 28969 net.cpp:86] Creating Layer loss
I0428 19:58:25.986999 28969 net.cpp:408] loss <- ip3
I0428 19:58:25.987004 28969 net.cpp:408] loss <- label
I0428 19:58:25.987010 28969 net.cpp:382] loss -> loss
I0428 19:58:25.987030 28969 layer_factory.hpp:77] Creating layer loss
I0428 19:58:25.987274 28969 net.cpp:124] Setting up loss
I0428 19:58:25.987283 28969 net.cpp:131] Top shape: (1)
I0428 19:58:25.987287 28969 net.cpp:134]     with loss weight 1
I0428 19:58:25.987300 28969 net.cpp:139] Memory required for data: 2202884
I0428 19:58:25.987304 28969 net.cpp:200] loss needs backward computation.
I0428 19:58:25.987308 28969 net.cpp:200] relu3 needs backward computation.
I0428 19:58:25.987311 28969 net.cpp:200] ip3 needs backward computation.
I0428 19:58:25.987314 28969 net.cpp:200] relu2 needs backward computation.
I0428 19:58:25.987318 28969 net.cpp:200] ip2 needs backward computation.
I0428 19:58:25.987320 28969 net.cpp:200] relu1 needs backward computation.
I0428 19:58:25.987323 28969 net.cpp:200] ip1 needs backward computation.
I0428 19:58:25.987326 28969 net.cpp:200] pool1 needs backward computation.
I0428 19:58:25.987329 28969 net.cpp:200] conv1 needs backward computation.
I0428 19:58:25.987334 28969 net.cpp:200] pool0 needs backward computation.
I0428 19:58:25.987336 28969 net.cpp:200] conv0 needs backward computation.
I0428 19:58:25.987340 28969 net.cpp:202] mnist does not need backward computation.
I0428 19:58:25.987342 28969 net.cpp:244] This network produces output loss
I0428 19:58:25.987351 28969 net.cpp:257] Network initialization done.
I0428 19:58:25.987718 28969 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test818.prototxt
I0428 19:58:25.987767 28969 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:25.987861 28969 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:25.987943 28969 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:25.987989 28969 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:25.988003 28969 net.cpp:86] Creating Layer mnist
I0428 19:58:25.988008 28969 net.cpp:382] mnist -> data
I0428 19:58:25.988015 28969 net.cpp:382] mnist -> label
I0428 19:58:25.988104 28969 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:25.990324 28969 net.cpp:124] Setting up mnist
I0428 19:58:25.990355 28969 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:25.990360 28969 net.cpp:131] Top shape: 100 (100)
I0428 19:58:25.990363 28969 net.cpp:139] Memory required for data: 314000
I0428 19:58:25.990367 28969 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:25.990378 28969 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:25.990391 28969 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:25.990396 28969 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:25.990402 28969 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:25.990489 28969 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:25.990497 28969 net.cpp:131] Top shape: 100 (100)
I0428 19:58:25.990501 28969 net.cpp:131] Top shape: 100 (100)
I0428 19:58:25.990504 28969 net.cpp:139] Memory required for data: 314800
I0428 19:58:25.990509 28969 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:25.990517 28969 net.cpp:86] Creating Layer conv0
I0428 19:58:25.990520 28969 net.cpp:408] conv0 <- data
I0428 19:58:25.990525 28969 net.cpp:382] conv0 -> conv0
I0428 19:58:25.992018 28969 net.cpp:124] Setting up conv0
I0428 19:58:25.992033 28969 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:25.992054 28969 net.cpp:139] Memory required for data: 2618800
I0428 19:58:25.992063 28969 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:25.992070 28969 net.cpp:86] Creating Layer pool0
I0428 19:58:25.992089 28969 net.cpp:408] pool0 <- conv0
I0428 19:58:25.992094 28969 net.cpp:382] pool0 -> pool0
I0428 19:58:25.992139 28969 net.cpp:124] Setting up pool0
I0428 19:58:25.992147 28969 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:25.992151 28969 net.cpp:139] Memory required for data: 3194800
I0428 19:58:25.992169 28969 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:25.992177 28969 net.cpp:86] Creating Layer conv1
I0428 19:58:25.992183 28969 net.cpp:408] conv1 <- pool0
I0428 19:58:25.992188 28969 net.cpp:382] conv1 -> conv1
I0428 19:58:25.994320 28969 net.cpp:124] Setting up conv1
I0428 19:58:25.994333 28969 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:25.994354 28969 net.cpp:139] Memory required for data: 3322800
I0428 19:58:25.994364 28969 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:25.994369 28969 net.cpp:86] Creating Layer pool1
I0428 19:58:25.994374 28969 net.cpp:408] pool1 <- conv1
I0428 19:58:25.994395 28969 net.cpp:382] pool1 -> pool1
I0428 19:58:25.994472 28969 net.cpp:124] Setting up pool1
I0428 19:58:25.994479 28969 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:25.994483 28969 net.cpp:139] Memory required for data: 3354800
I0428 19:58:25.994487 28969 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:25.994493 28969 net.cpp:86] Creating Layer ip1
I0428 19:58:25.994496 28969 net.cpp:408] ip1 <- pool1
I0428 19:58:25.994501 28969 net.cpp:382] ip1 -> ip1
I0428 19:58:25.994639 28969 net.cpp:124] Setting up ip1
I0428 19:58:25.994647 28969 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:25.994663 28969 net.cpp:139] Memory required for data: 3374800
I0428 19:58:25.994670 28969 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:25.994678 28969 net.cpp:86] Creating Layer relu1
I0428 19:58:25.994681 28969 net.cpp:408] relu1 <- ip1
I0428 19:58:25.994685 28969 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:25.994892 28969 net.cpp:124] Setting up relu1
I0428 19:58:25.994902 28969 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:25.994905 28969 net.cpp:139] Memory required for data: 3394800
I0428 19:58:25.994910 28969 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:25.994916 28969 net.cpp:86] Creating Layer ip2
I0428 19:58:25.994920 28969 net.cpp:408] ip2 <- ip1
I0428 19:58:25.994925 28969 net.cpp:382] ip2 -> ip2
I0428 19:58:25.995043 28969 net.cpp:124] Setting up ip2
I0428 19:58:25.995050 28969 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:25.995054 28969 net.cpp:139] Memory required for data: 3414800
I0428 19:58:25.995059 28969 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:25.995064 28969 net.cpp:86] Creating Layer relu2
I0428 19:58:25.995082 28969 net.cpp:408] relu2 <- ip2
I0428 19:58:25.995086 28969 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:25.995235 28969 net.cpp:124] Setting up relu2
I0428 19:58:25.995244 28969 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:25.995246 28969 net.cpp:139] Memory required for data: 3434800
I0428 19:58:25.995249 28969 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:25.995254 28969 net.cpp:86] Creating Layer ip3
I0428 19:58:25.995257 28969 net.cpp:408] ip3 <- ip2
I0428 19:58:25.995262 28969 net.cpp:382] ip3 -> ip3
I0428 19:58:25.995374 28969 net.cpp:124] Setting up ip3
I0428 19:58:25.995396 28969 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:25.995400 28969 net.cpp:139] Memory required for data: 3438800
I0428 19:58:25.995409 28969 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:25.995412 28969 net.cpp:86] Creating Layer relu3
I0428 19:58:25.995415 28969 net.cpp:408] relu3 <- ip3
I0428 19:58:25.995419 28969 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:25.996215 28969 net.cpp:124] Setting up relu3
I0428 19:58:25.996227 28969 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:25.996248 28969 net.cpp:139] Memory required for data: 3442800
I0428 19:58:25.996251 28969 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:25.996273 28969 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:25.996275 28969 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:25.996280 28969 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:25.996286 28969 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:25.996323 28969 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:25.996330 28969 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:25.996335 28969 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:25.996336 28969 net.cpp:139] Memory required for data: 3450800
I0428 19:58:25.996340 28969 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:25.996345 28969 net.cpp:86] Creating Layer accuracy
I0428 19:58:25.996347 28969 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:25.996352 28969 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:25.996356 28969 net.cpp:382] accuracy -> accuracy
I0428 19:58:25.996363 28969 net.cpp:124] Setting up accuracy
I0428 19:58:25.996367 28969 net.cpp:131] Top shape: (1)
I0428 19:58:25.996371 28969 net.cpp:139] Memory required for data: 3450804
I0428 19:58:25.996372 28969 layer_factory.hpp:77] Creating layer loss
I0428 19:58:25.996377 28969 net.cpp:86] Creating Layer loss
I0428 19:58:25.996392 28969 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:25.996395 28969 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:25.996399 28969 net.cpp:382] loss -> loss
I0428 19:58:25.996405 28969 layer_factory.hpp:77] Creating layer loss
I0428 19:58:25.996631 28969 net.cpp:124] Setting up loss
I0428 19:58:25.996640 28969 net.cpp:131] Top shape: (1)
I0428 19:58:25.996644 28969 net.cpp:134]     with loss weight 1
I0428 19:58:25.996650 28969 net.cpp:139] Memory required for data: 3450808
I0428 19:58:25.996662 28969 net.cpp:200] loss needs backward computation.
I0428 19:58:25.996667 28969 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:25.996670 28969 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:25.996675 28969 net.cpp:200] relu3 needs backward computation.
I0428 19:58:25.996677 28969 net.cpp:200] ip3 needs backward computation.
I0428 19:58:25.996680 28969 net.cpp:200] relu2 needs backward computation.
I0428 19:58:25.996683 28969 net.cpp:200] ip2 needs backward computation.
I0428 19:58:25.996686 28969 net.cpp:200] relu1 needs backward computation.
I0428 19:58:25.996688 28969 net.cpp:200] ip1 needs backward computation.
I0428 19:58:25.996692 28969 net.cpp:200] pool1 needs backward computation.
I0428 19:58:25.996695 28969 net.cpp:200] conv1 needs backward computation.
I0428 19:58:25.996698 28969 net.cpp:200] pool0 needs backward computation.
I0428 19:58:25.996701 28969 net.cpp:200] conv0 needs backward computation.
I0428 19:58:25.996706 28969 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:25.996709 28969 net.cpp:202] mnist does not need backward computation.
I0428 19:58:25.996711 28969 net.cpp:244] This network produces output accuracy
I0428 19:58:25.996716 28969 net.cpp:244] This network produces output loss
I0428 19:58:25.996726 28969 net.cpp:257] Network initialization done.
I0428 19:58:25.996767 28969 solver.cpp:56] Solver scaffolding done.
I0428 19:58:25.997184 28969 caffe.cpp:248] Starting Optimization
I0428 19:58:25.997191 28969 solver.cpp:273] Solving LeNet
I0428 19:58:25.997210 28969 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:25.997997 28969 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:26.004760 28969 blocking_queue.cpp:49] Waiting for data
I0428 19:58:26.046890 28976 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:26.047410 28969 solver.cpp:398]     Test net output #0: accuracy = 0.0903
I0428 19:58:26.047444 28969 solver.cpp:398]     Test net output #1: loss = 2.31468 (* 1 = 2.31468 loss)
I0428 19:58:26.049876 28969 solver.cpp:219] Iteration 0 (0 iter/s, 0.0526428s/100 iters), loss = 2.31519
I0428 19:58:26.049916 28969 solver.cpp:238]     Train net output #0: loss = 2.31519 (* 1 = 2.31519 loss)
I0428 19:58:26.049942 28969 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:26.124174 28969 solver.cpp:219] Iteration 100 (1346.54 iter/s, 0.0742646s/100 iters), loss = 1.08491
I0428 19:58:26.124217 28969 solver.cpp:238]     Train net output #0: loss = 1.08491 (* 1 = 1.08491 loss)
I0428 19:58:26.124224 28969 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:26.198979 28969 solver.cpp:219] Iteration 200 (1337.43 iter/s, 0.0747704s/100 iters), loss = 0.729378
I0428 19:58:26.199014 28969 solver.cpp:238]     Train net output #0: loss = 0.729378 (* 1 = 0.729378 loss)
I0428 19:58:26.199021 28969 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:26.273413 28969 solver.cpp:219] Iteration 300 (1344.06 iter/s, 0.0744016s/100 iters), loss = 0.909425
I0428 19:58:26.273455 28969 solver.cpp:238]     Train net output #0: loss = 0.909425 (* 1 = 0.909425 loss)
I0428 19:58:26.273461 28969 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:26.347903 28969 solver.cpp:219] Iteration 400 (1343.08 iter/s, 0.074456s/100 iters), loss = 0.43912
I0428 19:58:26.347944 28969 solver.cpp:238]     Train net output #0: loss = 0.43912 (* 1 = 0.43912 loss)
I0428 19:58:26.347950 28969 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:26.421607 28969 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:26.467707 28976 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:26.468225 28969 solver.cpp:398]     Test net output #0: accuracy = 0.8607
I0428 19:58:26.468258 28969 solver.cpp:398]     Test net output #1: loss = 0.380993 (* 1 = 0.380993 loss)
I0428 19:58:26.469045 28969 solver.cpp:219] Iteration 500 (825.719 iter/s, 0.121107s/100 iters), loss = 0.297092
I0428 19:58:26.469087 28969 solver.cpp:238]     Train net output #0: loss = 0.297092 (* 1 = 0.297092 loss)
I0428 19:58:26.469125 28969 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:26.543220 28969 solver.cpp:219] Iteration 600 (1348.79 iter/s, 0.0741407s/100 iters), loss = 0.379785
I0428 19:58:26.543261 28969 solver.cpp:238]     Train net output #0: loss = 0.379785 (* 1 = 0.379785 loss)
I0428 19:58:26.543267 28969 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:26.617728 28969 solver.cpp:219] Iteration 700 (1342.71 iter/s, 0.0744765s/100 iters), loss = 0.515852
I0428 19:58:26.617753 28969 solver.cpp:238]     Train net output #0: loss = 0.515852 (* 1 = 0.515852 loss)
I0428 19:58:26.617775 28969 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:26.692265 28969 solver.cpp:219] Iteration 800 (1342.22 iter/s, 0.0745032s/100 iters), loss = 0.482739
I0428 19:58:26.692289 28969 solver.cpp:238]     Train net output #0: loss = 0.482739 (* 1 = 0.482739 loss)
I0428 19:58:26.692312 28969 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:26.767073 28969 solver.cpp:219] Iteration 900 (1337.34 iter/s, 0.0747756s/100 iters), loss = 0.446742
I0428 19:58:26.767097 28969 solver.cpp:238]     Train net output #0: loss = 0.446742 (* 1 = 0.446742 loss)
I0428 19:58:26.767122 28969 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:26.792210 28975 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:26.841255 28969 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:26.841979 28969 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:26.842473 28969 solver.cpp:311] Iteration 1000, loss = 0.320471
I0428 19:58:26.842488 28969 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:26.888788 28976 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:26.889336 28969 solver.cpp:398]     Test net output #0: accuracy = 0.8725
I0428 19:58:26.889358 28969 solver.cpp:398]     Test net output #1: loss = 0.321289 (* 1 = 0.321289 loss)
I0428 19:58:26.889365 28969 solver.cpp:316] Optimization Done.
I0428 19:58:26.889369 28969 caffe.cpp:259] Optimization Done.
