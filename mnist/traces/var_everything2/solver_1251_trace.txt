I0428 20:15:37.646622   484 caffe.cpp:218] Using GPUs 0
I0428 20:15:37.678375   484 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:38.188266   484 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1251.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:38.188398   484 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1251.prototxt
I0428 20:15:38.188755   484 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:38.188773   484 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:38.188877   484 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:38.188951   484 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:38.189050   484 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:38.189074   484 net.cpp:86] Creating Layer mnist
I0428 20:15:38.189082   484 net.cpp:382] mnist -> data
I0428 20:15:38.189103   484 net.cpp:382] mnist -> label
I0428 20:15:38.190174   484 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:38.192822   484 net.cpp:124] Setting up mnist
I0428 20:15:38.192840   484 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:38.192847   484 net.cpp:131] Top shape: 64 (64)
I0428 20:15:38.192850   484 net.cpp:139] Memory required for data: 200960
I0428 20:15:38.192857   484 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:38.192873   484 net.cpp:86] Creating Layer conv0
I0428 20:15:38.192878   484 net.cpp:408] conv0 <- data
I0428 20:15:38.192914   484 net.cpp:382] conv0 -> conv0
I0428 20:15:38.423090   484 net.cpp:124] Setting up conv0
I0428 20:15:38.423116   484 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:38.423120   484 net.cpp:139] Memory required for data: 7573760
I0428 20:15:38.423153   484 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:38.423166   484 net.cpp:86] Creating Layer pool0
I0428 20:15:38.423169   484 net.cpp:408] pool0 <- conv0
I0428 20:15:38.423189   484 net.cpp:382] pool0 -> pool0
I0428 20:15:38.423251   484 net.cpp:124] Setting up pool0
I0428 20:15:38.423257   484 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:38.423260   484 net.cpp:139] Memory required for data: 9416960
I0428 20:15:38.423264   484 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:38.423274   484 net.cpp:86] Creating Layer conv1
I0428 20:15:38.423277   484 net.cpp:408] conv1 <- pool0
I0428 20:15:38.423281   484 net.cpp:382] conv1 -> conv1
I0428 20:15:38.426168   484 net.cpp:124] Setting up conv1
I0428 20:15:38.426183   484 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:38.426187   484 net.cpp:139] Memory required for data: 9498880
I0428 20:15:38.426211   484 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:38.426218   484 net.cpp:86] Creating Layer pool1
I0428 20:15:38.426223   484 net.cpp:408] pool1 <- conv1
I0428 20:15:38.426228   484 net.cpp:382] pool1 -> pool1
I0428 20:15:38.426265   484 net.cpp:124] Setting up pool1
I0428 20:15:38.426272   484 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:38.426275   484 net.cpp:139] Memory required for data: 9519360
I0428 20:15:38.426278   484 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:38.426285   484 net.cpp:86] Creating Layer ip1
I0428 20:15:38.426288   484 net.cpp:408] ip1 <- pool1
I0428 20:15:38.426292   484 net.cpp:382] ip1 -> ip1
I0428 20:15:38.426396   484 net.cpp:124] Setting up ip1
I0428 20:15:38.426404   484 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:38.426407   484 net.cpp:139] Memory required for data: 9521920
I0428 20:15:38.426415   484 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:38.426435   484 net.cpp:86] Creating Layer relu1
I0428 20:15:38.426439   484 net.cpp:408] relu1 <- ip1
I0428 20:15:38.426443   484 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:38.426626   484 net.cpp:124] Setting up relu1
I0428 20:15:38.426637   484 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:38.426640   484 net.cpp:139] Memory required for data: 9524480
I0428 20:15:38.426643   484 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:38.426650   484 net.cpp:86] Creating Layer ip2
I0428 20:15:38.426652   484 net.cpp:408] ip2 <- ip1
I0428 20:15:38.426658   484 net.cpp:382] ip2 -> ip2
I0428 20:15:38.426759   484 net.cpp:124] Setting up ip2
I0428 20:15:38.426765   484 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:38.426769   484 net.cpp:139] Memory required for data: 9527040
I0428 20:15:38.426789   484 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:38.426796   484 net.cpp:86] Creating Layer relu2
I0428 20:15:38.426800   484 net.cpp:408] relu2 <- ip2
I0428 20:15:38.426802   484 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:38.427523   484 net.cpp:124] Setting up relu2
I0428 20:15:38.427536   484 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:38.427549   484 net.cpp:139] Memory required for data: 9529600
I0428 20:15:38.427553   484 layer_factory.hpp:77] Creating layer loss
I0428 20:15:38.427559   484 net.cpp:86] Creating Layer loss
I0428 20:15:38.427578   484 net.cpp:408] loss <- ip2
I0428 20:15:38.427582   484 net.cpp:408] loss <- label
I0428 20:15:38.427588   484 net.cpp:382] loss -> loss
I0428 20:15:38.427608   484 layer_factory.hpp:77] Creating layer loss
I0428 20:15:38.427878   484 net.cpp:124] Setting up loss
I0428 20:15:38.427888   484 net.cpp:131] Top shape: (1)
I0428 20:15:38.427891   484 net.cpp:134]     with loss weight 1
I0428 20:15:38.427904   484 net.cpp:139] Memory required for data: 9529604
I0428 20:15:38.427908   484 net.cpp:200] loss needs backward computation.
I0428 20:15:38.427911   484 net.cpp:200] relu2 needs backward computation.
I0428 20:15:38.427914   484 net.cpp:200] ip2 needs backward computation.
I0428 20:15:38.427917   484 net.cpp:200] relu1 needs backward computation.
I0428 20:15:38.427919   484 net.cpp:200] ip1 needs backward computation.
I0428 20:15:38.427932   484 net.cpp:200] pool1 needs backward computation.
I0428 20:15:38.427934   484 net.cpp:200] conv1 needs backward computation.
I0428 20:15:38.427937   484 net.cpp:200] pool0 needs backward computation.
I0428 20:15:38.427940   484 net.cpp:200] conv0 needs backward computation.
I0428 20:15:38.427943   484 net.cpp:202] mnist does not need backward computation.
I0428 20:15:38.427945   484 net.cpp:244] This network produces output loss
I0428 20:15:38.427954   484 net.cpp:257] Network initialization done.
I0428 20:15:38.428249   484 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1251.prototxt
I0428 20:15:38.428274   484 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:38.428359   484 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:38.428424   484 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:38.428467   484 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:38.428479   484 net.cpp:86] Creating Layer mnist
I0428 20:15:38.428483   484 net.cpp:382] mnist -> data
I0428 20:15:38.428490   484 net.cpp:382] mnist -> label
I0428 20:15:38.428578   484 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:38.430644   484 net.cpp:124] Setting up mnist
I0428 20:15:38.430667   484 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:38.430672   484 net.cpp:131] Top shape: 100 (100)
I0428 20:15:38.430675   484 net.cpp:139] Memory required for data: 314000
I0428 20:15:38.430680   484 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:38.430714   484 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:38.430718   484 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:38.430722   484 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:38.430730   484 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:38.430855   484 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:38.430872   484 net.cpp:131] Top shape: 100 (100)
I0428 20:15:38.430876   484 net.cpp:131] Top shape: 100 (100)
I0428 20:15:38.430878   484 net.cpp:139] Memory required for data: 314800
I0428 20:15:38.430881   484 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:38.430891   484 net.cpp:86] Creating Layer conv0
I0428 20:15:38.430894   484 net.cpp:408] conv0 <- data
I0428 20:15:38.430902   484 net.cpp:382] conv0 -> conv0
I0428 20:15:38.432720   484 net.cpp:124] Setting up conv0
I0428 20:15:38.432749   484 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:38.432754   484 net.cpp:139] Memory required for data: 11834800
I0428 20:15:38.432761   484 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:38.432767   484 net.cpp:86] Creating Layer pool0
I0428 20:15:38.432770   484 net.cpp:408] pool0 <- conv0
I0428 20:15:38.432775   484 net.cpp:382] pool0 -> pool0
I0428 20:15:38.432834   484 net.cpp:124] Setting up pool0
I0428 20:15:38.432857   484 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:38.432860   484 net.cpp:139] Memory required for data: 14714800
I0428 20:15:38.432862   484 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:38.432888   484 net.cpp:86] Creating Layer conv1
I0428 20:15:38.432890   484 net.cpp:408] conv1 <- pool0
I0428 20:15:38.432898   484 net.cpp:382] conv1 -> conv1
I0428 20:15:38.434578   484 net.cpp:124] Setting up conv1
I0428 20:15:38.434592   484 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:38.434597   484 net.cpp:139] Memory required for data: 14842800
I0428 20:15:38.434604   484 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:38.434622   484 net.cpp:86] Creating Layer pool1
I0428 20:15:38.434626   484 net.cpp:408] pool1 <- conv1
I0428 20:15:38.434634   484 net.cpp:382] pool1 -> pool1
I0428 20:15:38.434720   484 net.cpp:124] Setting up pool1
I0428 20:15:38.434731   484 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:38.434733   484 net.cpp:139] Memory required for data: 14874800
I0428 20:15:38.434736   484 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:38.434744   484 net.cpp:86] Creating Layer ip1
I0428 20:15:38.434747   484 net.cpp:408] ip1 <- pool1
I0428 20:15:38.434754   484 net.cpp:382] ip1 -> ip1
I0428 20:15:38.434885   484 net.cpp:124] Setting up ip1
I0428 20:15:38.434892   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.434895   484 net.cpp:139] Memory required for data: 14878800
I0428 20:15:38.434902   484 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:38.434908   484 net.cpp:86] Creating Layer relu1
I0428 20:15:38.434911   484 net.cpp:408] relu1 <- ip1
I0428 20:15:38.434929   484 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:38.435117   484 net.cpp:124] Setting up relu1
I0428 20:15:38.435125   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.435129   484 net.cpp:139] Memory required for data: 14882800
I0428 20:15:38.435138   484 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:38.435147   484 net.cpp:86] Creating Layer ip2
I0428 20:15:38.435150   484 net.cpp:408] ip2 <- ip1
I0428 20:15:38.435155   484 net.cpp:382] ip2 -> ip2
I0428 20:15:38.435253   484 net.cpp:124] Setting up ip2
I0428 20:15:38.435261   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.435264   484 net.cpp:139] Memory required for data: 14886800
I0428 20:15:38.435269   484 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:38.435274   484 net.cpp:86] Creating Layer relu2
I0428 20:15:38.435277   484 net.cpp:408] relu2 <- ip2
I0428 20:15:38.435286   484 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:38.435461   484 net.cpp:124] Setting up relu2
I0428 20:15:38.435469   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.435472   484 net.cpp:139] Memory required for data: 14890800
I0428 20:15:38.435475   484 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:15:38.435479   484 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:15:38.435490   484 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:15:38.435499   484 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:15:38.435520   484 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:15:38.435570   484 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:15:38.435576   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.435580   484 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:38.435582   484 net.cpp:139] Memory required for data: 14898800
I0428 20:15:38.435585   484 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:38.435598   484 net.cpp:86] Creating Layer accuracy
I0428 20:15:38.435601   484 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:15:38.435606   484 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:38.435611   484 net.cpp:382] accuracy -> accuracy
I0428 20:15:38.435617   484 net.cpp:124] Setting up accuracy
I0428 20:15:38.435621   484 net.cpp:131] Top shape: (1)
I0428 20:15:38.435629   484 net.cpp:139] Memory required for data: 14898804
I0428 20:15:38.435632   484 layer_factory.hpp:77] Creating layer loss
I0428 20:15:38.435636   484 net.cpp:86] Creating Layer loss
I0428 20:15:38.435639   484 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:15:38.435643   484 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:38.435652   484 net.cpp:382] loss -> loss
I0428 20:15:38.435658   484 layer_factory.hpp:77] Creating layer loss
I0428 20:15:38.435895   484 net.cpp:124] Setting up loss
I0428 20:15:38.435906   484 net.cpp:131] Top shape: (1)
I0428 20:15:38.435916   484 net.cpp:134]     with loss weight 1
I0428 20:15:38.435922   484 net.cpp:139] Memory required for data: 14898808
I0428 20:15:38.435936   484 net.cpp:200] loss needs backward computation.
I0428 20:15:38.435940   484 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:38.435943   484 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:15:38.435951   484 net.cpp:200] relu2 needs backward computation.
I0428 20:15:38.435955   484 net.cpp:200] ip2 needs backward computation.
I0428 20:15:38.435956   484 net.cpp:200] relu1 needs backward computation.
I0428 20:15:38.435959   484 net.cpp:200] ip1 needs backward computation.
I0428 20:15:38.435961   484 net.cpp:200] pool1 needs backward computation.
I0428 20:15:38.435969   484 net.cpp:200] conv1 needs backward computation.
I0428 20:15:38.435972   484 net.cpp:200] pool0 needs backward computation.
I0428 20:15:38.435976   484 net.cpp:200] conv0 needs backward computation.
I0428 20:15:38.435978   484 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:38.435981   484 net.cpp:202] mnist does not need backward computation.
I0428 20:15:38.435984   484 net.cpp:244] This network produces output accuracy
I0428 20:15:38.435987   484 net.cpp:244] This network produces output loss
I0428 20:15:38.435997   484 net.cpp:257] Network initialization done.
I0428 20:15:38.436030   484 solver.cpp:56] Solver scaffolding done.
I0428 20:15:38.436353   484 caffe.cpp:248] Starting Optimization
I0428 20:15:38.436365   484 solver.cpp:273] Solving LeNet
I0428 20:15:38.436368   484 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:38.437276   484 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:38.443505   484 blocking_queue.cpp:49] Waiting for data
I0428 20:15:38.514128   491 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:38.514835   484 solver.cpp:398]     Test net output #0: accuracy = 0.0774
I0428 20:15:38.514853   484 solver.cpp:398]     Test net output #1: loss = 2.34784 (* 1 = 2.34784 loss)
I0428 20:15:38.519158   484 solver.cpp:219] Iteration 0 (0 iter/s, 0.0827261s/100 iters), loss = 2.38789
I0428 20:15:38.519182   484 solver.cpp:238]     Train net output #0: loss = 2.38789 (* 1 = 2.38789 loss)
I0428 20:15:38.519209   484 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:38.639192   484 solver.cpp:219] Iteration 100 (833.358 iter/s, 0.119996s/100 iters), loss = 0.702433
I0428 20:15:38.639217   484 solver.cpp:238]     Train net output #0: loss = 0.702433 (* 1 = 0.702433 loss)
I0428 20:15:38.639223   484 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:38.748632   484 solver.cpp:219] Iteration 200 (914.042 iter/s, 0.109404s/100 iters), loss = 0.345754
I0428 20:15:38.748685   484 solver.cpp:238]     Train net output #0: loss = 0.345754 (* 1 = 0.345754 loss)
I0428 20:15:38.748692   484 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:38.858359   484 solver.cpp:219] Iteration 300 (911.883 iter/s, 0.109663s/100 iters), loss = 0.246773
I0428 20:15:38.858399   484 solver.cpp:238]     Train net output #0: loss = 0.246773 (* 1 = 0.246773 loss)
I0428 20:15:38.858407   484 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:38.965859   484 solver.cpp:219] Iteration 400 (930.538 iter/s, 0.107465s/100 iters), loss = 0.0733535
I0428 20:15:38.965899   484 solver.cpp:238]     Train net output #0: loss = 0.0733536 (* 1 = 0.0733536 loss)
I0428 20:15:38.965905   484 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:39.072691   484 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:39.148305   491 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:39.149060   484 solver.cpp:398]     Test net output #0: accuracy = 0.938
I0428 20:15:39.149080   484 solver.cpp:398]     Test net output #1: loss = 0.214003 (* 1 = 0.214003 loss)
I0428 20:15:39.150215   484 solver.cpp:219] Iteration 500 (542.592 iter/s, 0.184301s/100 iters), loss = 0.168695
I0428 20:15:39.150281   484 solver.cpp:238]     Train net output #0: loss = 0.168695 (* 1 = 0.168695 loss)
I0428 20:15:39.150290   484 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:39.271538   484 solver.cpp:219] Iteration 600 (824.77 iter/s, 0.121246s/100 iters), loss = 0.134058
I0428 20:15:39.271564   484 solver.cpp:238]     Train net output #0: loss = 0.134058 (* 1 = 0.134058 loss)
I0428 20:15:39.271572   484 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:39.382123   484 solver.cpp:219] Iteration 700 (904.576 iter/s, 0.110549s/100 iters), loss = 0.21183
I0428 20:15:39.382164   484 solver.cpp:238]     Train net output #0: loss = 0.21183 (* 1 = 0.21183 loss)
I0428 20:15:39.382169   484 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:39.490464   484 solver.cpp:219] Iteration 800 (923.315 iter/s, 0.108305s/100 iters), loss = 0.167139
I0428 20:15:39.490490   484 solver.cpp:238]     Train net output #0: loss = 0.167139 (* 1 = 0.167139 loss)
I0428 20:15:39.490496   484 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:39.598302   484 solver.cpp:219] Iteration 900 (927.631 iter/s, 0.107802s/100 iters), loss = 0.239322
I0428 20:15:39.598343   484 solver.cpp:238]     Train net output #0: loss = 0.239322 (* 1 = 0.239322 loss)
I0428 20:15:39.598350   484 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:39.638641   490 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:39.718791   484 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:39.719763   484 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:39.720434   484 solver.cpp:311] Iteration 1000, loss = 0.191944
I0428 20:15:39.720449   484 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:39.796202   491 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:39.796918   484 solver.cpp:398]     Test net output #0: accuracy = 0.9625
I0428 20:15:39.796953   484 solver.cpp:398]     Test net output #1: loss = 0.119794 (* 1 = 0.119794 loss)
I0428 20:15:39.796959   484 solver.cpp:316] Optimization Done.
I0428 20:15:39.796962   484 caffe.cpp:259] Optimization Done.
