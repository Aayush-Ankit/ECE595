I0428 20:02:57.628628 30088 caffe.cpp:218] Using GPUs 0
I0428 20:02:57.658998 30088 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:58.105547 30088 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test941.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:58.105679 30088 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test941.prototxt
I0428 20:02:58.105978 30088 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:58.105991 30088 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:58.106076 30088 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:02:58.106155 30088 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:58.106240 30088 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:58.106261 30088 net.cpp:86] Creating Layer mnist
I0428 20:02:58.106266 30088 net.cpp:382] mnist -> data
I0428 20:02:58.106287 30088 net.cpp:382] mnist -> label
I0428 20:02:58.107223 30088 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:58.109529 30088 net.cpp:124] Setting up mnist
I0428 20:02:58.109575 30088 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:58.109581 30088 net.cpp:131] Top shape: 64 (64)
I0428 20:02:58.109585 30088 net.cpp:139] Memory required for data: 200960
I0428 20:02:58.109591 30088 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:58.109603 30088 net.cpp:86] Creating Layer conv0
I0428 20:02:58.109608 30088 net.cpp:408] conv0 <- data
I0428 20:02:58.109617 30088 net.cpp:382] conv0 -> conv0
I0428 20:02:58.336033 30088 net.cpp:124] Setting up conv0
I0428 20:02:58.336060 30088 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:58.336063 30088 net.cpp:139] Memory required for data: 1675520
I0428 20:02:58.336096 30088 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:58.336107 30088 net.cpp:86] Creating Layer pool0
I0428 20:02:58.336112 30088 net.cpp:408] pool0 <- conv0
I0428 20:02:58.336132 30088 net.cpp:382] pool0 -> pool0
I0428 20:02:58.336176 30088 net.cpp:124] Setting up pool0
I0428 20:02:58.336181 30088 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:58.336185 30088 net.cpp:139] Memory required for data: 2044160
I0428 20:02:58.336189 30088 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:58.336199 30088 net.cpp:86] Creating Layer conv1
I0428 20:02:58.336201 30088 net.cpp:408] conv1 <- pool0
I0428 20:02:58.336205 30088 net.cpp:382] conv1 -> conv1
I0428 20:02:58.338186 30088 net.cpp:124] Setting up conv1
I0428 20:02:58.338217 30088 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:02:58.338220 30088 net.cpp:139] Memory required for data: 3682560
I0428 20:02:58.338229 30088 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:58.338238 30088 net.cpp:86] Creating Layer pool1
I0428 20:02:58.338241 30088 net.cpp:408] pool1 <- conv1
I0428 20:02:58.338246 30088 net.cpp:382] pool1 -> pool1
I0428 20:02:58.338284 30088 net.cpp:124] Setting up pool1
I0428 20:02:58.338289 30088 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:02:58.338291 30088 net.cpp:139] Memory required for data: 4092160
I0428 20:02:58.338294 30088 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:58.338301 30088 net.cpp:86] Creating Layer ip1
I0428 20:02:58.338304 30088 net.cpp:408] ip1 <- pool1
I0428 20:02:58.338310 30088 net.cpp:382] ip1 -> ip1
I0428 20:02:58.339370 30088 net.cpp:124] Setting up ip1
I0428 20:02:58.339382 30088 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:58.339402 30088 net.cpp:139] Memory required for data: 4094720
I0428 20:02:58.339411 30088 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:58.339418 30088 net.cpp:86] Creating Layer relu1
I0428 20:02:58.339421 30088 net.cpp:408] relu1 <- ip1
I0428 20:02:58.339426 30088 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:58.339591 30088 net.cpp:124] Setting up relu1
I0428 20:02:58.339601 30088 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:58.339604 30088 net.cpp:139] Memory required for data: 4097280
I0428 20:02:58.339607 30088 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:58.339614 30088 net.cpp:86] Creating Layer ip2
I0428 20:02:58.339633 30088 net.cpp:408] ip2 <- ip1
I0428 20:02:58.339638 30088 net.cpp:382] ip2 -> ip2
I0428 20:02:58.339725 30088 net.cpp:124] Setting up ip2
I0428 20:02:58.339732 30088 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:58.339735 30088 net.cpp:139] Memory required for data: 4099840
I0428 20:02:58.339741 30088 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:58.339747 30088 net.cpp:86] Creating Layer relu2
I0428 20:02:58.339750 30088 net.cpp:408] relu2 <- ip2
I0428 20:02:58.339753 30088 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:58.340513 30088 net.cpp:124] Setting up relu2
I0428 20:02:58.340525 30088 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:58.340540 30088 net.cpp:139] Memory required for data: 4102400
I0428 20:02:58.340544 30088 layer_factory.hpp:77] Creating layer loss
I0428 20:02:58.340550 30088 net.cpp:86] Creating Layer loss
I0428 20:02:58.340553 30088 net.cpp:408] loss <- ip2
I0428 20:02:58.340557 30088 net.cpp:408] loss <- label
I0428 20:02:58.340562 30088 net.cpp:382] loss -> loss
I0428 20:02:58.340582 30088 layer_factory.hpp:77] Creating layer loss
I0428 20:02:58.340823 30088 net.cpp:124] Setting up loss
I0428 20:02:58.340850 30088 net.cpp:131] Top shape: (1)
I0428 20:02:58.340854 30088 net.cpp:134]     with loss weight 1
I0428 20:02:58.340869 30088 net.cpp:139] Memory required for data: 4102404
I0428 20:02:58.340873 30088 net.cpp:200] loss needs backward computation.
I0428 20:02:58.340878 30088 net.cpp:200] relu2 needs backward computation.
I0428 20:02:58.340880 30088 net.cpp:200] ip2 needs backward computation.
I0428 20:02:58.340883 30088 net.cpp:200] relu1 needs backward computation.
I0428 20:02:58.340886 30088 net.cpp:200] ip1 needs backward computation.
I0428 20:02:58.340914 30088 net.cpp:200] pool1 needs backward computation.
I0428 20:02:58.340919 30088 net.cpp:200] conv1 needs backward computation.
I0428 20:02:58.340921 30088 net.cpp:200] pool0 needs backward computation.
I0428 20:02:58.340924 30088 net.cpp:200] conv0 needs backward computation.
I0428 20:02:58.340927 30088 net.cpp:202] mnist does not need backward computation.
I0428 20:02:58.340930 30088 net.cpp:244] This network produces output loss
I0428 20:02:58.340939 30088 net.cpp:257] Network initialization done.
I0428 20:02:58.341269 30088 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test941.prototxt
I0428 20:02:58.341308 30088 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:58.341403 30088 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:02:58.341465 30088 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:58.341508 30088 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:58.341521 30088 net.cpp:86] Creating Layer mnist
I0428 20:02:58.341526 30088 net.cpp:382] mnist -> data
I0428 20:02:58.341532 30088 net.cpp:382] mnist -> label
I0428 20:02:58.341614 30088 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:58.343742 30088 net.cpp:124] Setting up mnist
I0428 20:02:58.343771 30088 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:58.343776 30088 net.cpp:131] Top shape: 100 (100)
I0428 20:02:58.343780 30088 net.cpp:139] Memory required for data: 314000
I0428 20:02:58.343783 30088 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:58.343819 30088 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:58.343824 30088 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:58.343829 30088 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:58.343835 30088 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:58.343920 30088 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:58.343927 30088 net.cpp:131] Top shape: 100 (100)
I0428 20:02:58.343930 30088 net.cpp:131] Top shape: 100 (100)
I0428 20:02:58.343933 30088 net.cpp:139] Memory required for data: 314800
I0428 20:02:58.343936 30088 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:58.343945 30088 net.cpp:86] Creating Layer conv0
I0428 20:02:58.343947 30088 net.cpp:408] conv0 <- data
I0428 20:02:58.343951 30088 net.cpp:382] conv0 -> conv0
I0428 20:02:58.345777 30088 net.cpp:124] Setting up conv0
I0428 20:02:58.345791 30088 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:58.345795 30088 net.cpp:139] Memory required for data: 2618800
I0428 20:02:58.345803 30088 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:58.345809 30088 net.cpp:86] Creating Layer pool0
I0428 20:02:58.345813 30088 net.cpp:408] pool0 <- conv0
I0428 20:02:58.345818 30088 net.cpp:382] pool0 -> pool0
I0428 20:02:58.345850 30088 net.cpp:124] Setting up pool0
I0428 20:02:58.345854 30088 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:58.345857 30088 net.cpp:139] Memory required for data: 3194800
I0428 20:02:58.345860 30088 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:58.345867 30088 net.cpp:86] Creating Layer conv1
I0428 20:02:58.345870 30088 net.cpp:408] conv1 <- pool0
I0428 20:02:58.345875 30088 net.cpp:382] conv1 -> conv1
I0428 20:02:58.347571 30088 net.cpp:124] Setting up conv1
I0428 20:02:58.347585 30088 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:02:58.347589 30088 net.cpp:139] Memory required for data: 5754800
I0428 20:02:58.347599 30088 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:58.347604 30088 net.cpp:86] Creating Layer pool1
I0428 20:02:58.347609 30088 net.cpp:408] pool1 <- conv1
I0428 20:02:58.347615 30088 net.cpp:382] pool1 -> pool1
I0428 20:02:58.347654 30088 net.cpp:124] Setting up pool1
I0428 20:02:58.347661 30088 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:02:58.347663 30088 net.cpp:139] Memory required for data: 6394800
I0428 20:02:58.347666 30088 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:58.347681 30088 net.cpp:86] Creating Layer ip1
I0428 20:02:58.347683 30088 net.cpp:408] ip1 <- pool1
I0428 20:02:58.347689 30088 net.cpp:382] ip1 -> ip1
I0428 20:02:58.347903 30088 net.cpp:124] Setting up ip1
I0428 20:02:58.347911 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.347914 30088 net.cpp:139] Memory required for data: 6398800
I0428 20:02:58.347921 30088 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:58.347926 30088 net.cpp:86] Creating Layer relu1
I0428 20:02:58.347937 30088 net.cpp:408] relu1 <- ip1
I0428 20:02:58.347941 30088 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:58.348134 30088 net.cpp:124] Setting up relu1
I0428 20:02:58.348142 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.348146 30088 net.cpp:139] Memory required for data: 6402800
I0428 20:02:58.348150 30088 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:58.348157 30088 net.cpp:86] Creating Layer ip2
I0428 20:02:58.348160 30088 net.cpp:408] ip2 <- ip1
I0428 20:02:58.348166 30088 net.cpp:382] ip2 -> ip2
I0428 20:02:58.348268 30088 net.cpp:124] Setting up ip2
I0428 20:02:58.348275 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.348280 30088 net.cpp:139] Memory required for data: 6406800
I0428 20:02:58.348285 30088 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:58.348290 30088 net.cpp:86] Creating Layer relu2
I0428 20:02:58.348294 30088 net.cpp:408] relu2 <- ip2
I0428 20:02:58.348297 30088 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:58.348469 30088 net.cpp:124] Setting up relu2
I0428 20:02:58.348479 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.348481 30088 net.cpp:139] Memory required for data: 6410800
I0428 20:02:58.348484 30088 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:02:58.348489 30088 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:02:58.348491 30088 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:02:58.348495 30088 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:02:58.348512 30088 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:02:58.348573 30088 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:02:58.348585 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.348589 30088 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:58.348592 30088 net.cpp:139] Memory required for data: 6418800
I0428 20:02:58.348595 30088 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:58.348606 30088 net.cpp:86] Creating Layer accuracy
I0428 20:02:58.348610 30088 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:02:58.348614 30088 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:58.348618 30088 net.cpp:382] accuracy -> accuracy
I0428 20:02:58.348625 30088 net.cpp:124] Setting up accuracy
I0428 20:02:58.348629 30088 net.cpp:131] Top shape: (1)
I0428 20:02:58.348631 30088 net.cpp:139] Memory required for data: 6418804
I0428 20:02:58.348634 30088 layer_factory.hpp:77] Creating layer loss
I0428 20:02:58.348640 30088 net.cpp:86] Creating Layer loss
I0428 20:02:58.348649 30088 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:02:58.348654 30088 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:58.348657 30088 net.cpp:382] loss -> loss
I0428 20:02:58.348664 30088 layer_factory.hpp:77] Creating layer loss
I0428 20:02:58.348997 30088 net.cpp:124] Setting up loss
I0428 20:02:58.349009 30088 net.cpp:131] Top shape: (1)
I0428 20:02:58.349011 30088 net.cpp:134]     with loss weight 1
I0428 20:02:58.349019 30088 net.cpp:139] Memory required for data: 6418808
I0428 20:02:58.349021 30088 net.cpp:200] loss needs backward computation.
I0428 20:02:58.349025 30088 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:58.349028 30088 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:02:58.349031 30088 net.cpp:200] relu2 needs backward computation.
I0428 20:02:58.349035 30088 net.cpp:200] ip2 needs backward computation.
I0428 20:02:58.349037 30088 net.cpp:200] relu1 needs backward computation.
I0428 20:02:58.349040 30088 net.cpp:200] ip1 needs backward computation.
I0428 20:02:58.349043 30088 net.cpp:200] pool1 needs backward computation.
I0428 20:02:58.349046 30088 net.cpp:200] conv1 needs backward computation.
I0428 20:02:58.349050 30088 net.cpp:200] pool0 needs backward computation.
I0428 20:02:58.349052 30088 net.cpp:200] conv0 needs backward computation.
I0428 20:02:58.349056 30088 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:58.349061 30088 net.cpp:202] mnist does not need backward computation.
I0428 20:02:58.349063 30088 net.cpp:244] This network produces output accuracy
I0428 20:02:58.349067 30088 net.cpp:244] This network produces output loss
I0428 20:02:58.349077 30088 net.cpp:257] Network initialization done.
I0428 20:02:58.349144 30088 solver.cpp:56] Solver scaffolding done.
I0428 20:02:58.349450 30088 caffe.cpp:248] Starting Optimization
I0428 20:02:58.349458 30088 solver.cpp:273] Solving LeNet
I0428 20:02:58.349462 30088 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:58.349613 30088 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:58.354399 30088 blocking_queue.cpp:49] Waiting for data
I0428 20:02:58.427924 30095 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:58.428534 30088 solver.cpp:398]     Test net output #0: accuracy = 0.1563
I0428 20:02:58.428553 30088 solver.cpp:398]     Test net output #1: loss = 2.29329 (* 1 = 2.29329 loss)
I0428 20:02:58.432744 30088 solver.cpp:219] Iteration 0 (0 iter/s, 0.0832551s/100 iters), loss = 2.27848
I0428 20:02:58.432766 30088 solver.cpp:238]     Train net output #0: loss = 2.27848 (* 1 = 2.27848 loss)
I0428 20:02:58.432792 30088 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:58.573956 30088 solver.cpp:219] Iteration 100 (708.352 iter/s, 0.141173s/100 iters), loss = 1.56363
I0428 20:02:58.573982 30088 solver.cpp:238]     Train net output #0: loss = 1.56363 (* 1 = 1.56363 loss)
I0428 20:02:58.574002 30088 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:58.725551 30088 solver.cpp:219] Iteration 200 (659.848 iter/s, 0.15155s/100 iters), loss = 1.80649
I0428 20:02:58.725607 30088 solver.cpp:238]     Train net output #0: loss = 1.80649 (* 1 = 1.80649 loss)
I0428 20:02:58.725621 30088 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:58.882921 30088 solver.cpp:219] Iteration 300 (635.725 iter/s, 0.157301s/100 iters), loss = 1.77574
I0428 20:02:58.882962 30088 solver.cpp:238]     Train net output #0: loss = 1.77574 (* 1 = 1.77574 loss)
I0428 20:02:58.882973 30088 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:59.038960 30088 solver.cpp:219] Iteration 400 (641.088 iter/s, 0.155985s/100 iters), loss = 1.86172
I0428 20:02:59.038997 30088 solver.cpp:238]     Train net output #0: loss = 1.86172 (* 1 = 1.86172 loss)
I0428 20:02:59.039006 30088 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:59.188105 30088 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:59.246045 30095 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:59.247427 30088 solver.cpp:398]     Test net output #0: accuracy = 0.4007
I0428 20:02:59.247455 30088 solver.cpp:398]     Test net output #1: loss = 1.64888 (* 1 = 1.64888 loss)
I0428 20:02:59.248894 30088 solver.cpp:219] Iteration 500 (476.458 iter/s, 0.209882s/100 iters), loss = 1.69413
I0428 20:02:59.248924 30088 solver.cpp:238]     Train net output #0: loss = 1.69413 (* 1 = 1.69413 loss)
I0428 20:02:59.248935 30088 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:59.400399 30088 solver.cpp:219] Iteration 600 (660.232 iter/s, 0.151462s/100 iters), loss = 1.38151
I0428 20:02:59.400434 30088 solver.cpp:238]     Train net output #0: loss = 1.38151 (* 1 = 1.38151 loss)
I0428 20:02:59.400444 30088 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:59.554401 30088 solver.cpp:219] Iteration 700 (649.547 iter/s, 0.153953s/100 iters), loss = 1.66902
I0428 20:02:59.554437 30088 solver.cpp:238]     Train net output #0: loss = 1.66902 (* 1 = 1.66902 loss)
I0428 20:02:59.554446 30088 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:59.707638 30088 solver.cpp:219] Iteration 800 (652.809 iter/s, 0.153184s/100 iters), loss = 1.70179
I0428 20:02:59.707679 30088 solver.cpp:238]     Train net output #0: loss = 1.70179 (* 1 = 1.70179 loss)
I0428 20:02:59.707689 30088 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:59.865501 30088 solver.cpp:219] Iteration 900 (633.679 iter/s, 0.157809s/100 iters), loss = 1.72697
I0428 20:02:59.865540 30088 solver.cpp:238]     Train net output #0: loss = 1.72697 (* 1 = 1.72697 loss)
I0428 20:02:59.865550 30088 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:59.916878 30094 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:00.016479 30088 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:03:00.018409 30088 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:03:00.019457 30088 solver.cpp:311] Iteration 1000, loss = 1.65821
I0428 20:03:00.019493 30088 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:03:00.093767 30095 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:00.094470 30088 solver.cpp:398]     Test net output #0: accuracy = 0.4027
I0428 20:03:00.094504 30088 solver.cpp:398]     Test net output #1: loss = 1.62683 (* 1 = 1.62683 loss)
I0428 20:03:00.094517 30088 solver.cpp:316] Optimization Done.
I0428 20:03:00.094525 30088 caffe.cpp:259] Optimization Done.
