I0428 19:34:05.398130 23267 caffe.cpp:218] Using GPUs 0
I0428 19:34:05.437739 23267 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:05.948667 23267 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test196.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:05.948842 23267 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test196.prototxt
I0428 19:34:05.949136 23267 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:05.949149 23267 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:05.949221 23267 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:05.949290 23267 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:05.949386 23267 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:05.949410 23267 net.cpp:86] Creating Layer mnist
I0428 19:34:05.949417 23267 net.cpp:382] mnist -> data
I0428 19:34:05.949440 23267 net.cpp:382] mnist -> label
I0428 19:34:05.950525 23267 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:05.952981 23267 net.cpp:124] Setting up mnist
I0428 19:34:05.952999 23267 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:05.953007 23267 net.cpp:131] Top shape: 64 (64)
I0428 19:34:05.953011 23267 net.cpp:139] Memory required for data: 200960
I0428 19:34:05.953018 23267 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:05.953050 23267 net.cpp:86] Creating Layer conv0
I0428 19:34:05.953058 23267 net.cpp:408] conv0 <- data
I0428 19:34:05.953069 23267 net.cpp:382] conv0 -> conv0
I0428 19:34:06.243886 23267 net.cpp:124] Setting up conv0
I0428 19:34:06.243916 23267 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:06.243921 23267 net.cpp:139] Memory required for data: 7573760
I0428 19:34:06.243939 23267 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:06.243953 23267 net.cpp:86] Creating Layer pool0
I0428 19:34:06.243958 23267 net.cpp:408] pool0 <- conv0
I0428 19:34:06.243965 23267 net.cpp:382] pool0 -> pool0
I0428 19:34:06.244025 23267 net.cpp:124] Setting up pool0
I0428 19:34:06.244035 23267 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:06.244040 23267 net.cpp:139] Memory required for data: 9416960
I0428 19:34:06.244043 23267 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:06.244052 23267 net.cpp:86] Creating Layer ip1
I0428 19:34:06.244061 23267 net.cpp:408] ip1 <- pool0
I0428 19:34:06.244067 23267 net.cpp:382] ip1 -> ip1
I0428 19:34:06.245645 23267 net.cpp:124] Setting up ip1
I0428 19:34:06.245661 23267 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:06.245682 23267 net.cpp:139] Memory required for data: 9419520
I0428 19:34:06.245692 23267 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:06.245700 23267 net.cpp:86] Creating Layer relu1
I0428 19:34:06.245704 23267 net.cpp:408] relu1 <- ip1
I0428 19:34:06.245710 23267 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:06.245934 23267 net.cpp:124] Setting up relu1
I0428 19:34:06.245946 23267 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:06.245950 23267 net.cpp:139] Memory required for data: 9422080
I0428 19:34:06.245954 23267 layer_factory.hpp:77] Creating layer loss
I0428 19:34:06.245961 23267 net.cpp:86] Creating Layer loss
I0428 19:34:06.245965 23267 net.cpp:408] loss <- ip1
I0428 19:34:06.245970 23267 net.cpp:408] loss <- label
I0428 19:34:06.245975 23267 net.cpp:382] loss -> loss
I0428 19:34:06.245997 23267 layer_factory.hpp:77] Creating layer loss
I0428 19:34:06.246949 23267 net.cpp:124] Setting up loss
I0428 19:34:06.246964 23267 net.cpp:131] Top shape: (1)
I0428 19:34:06.246969 23267 net.cpp:134]     with loss weight 1
I0428 19:34:06.246985 23267 net.cpp:139] Memory required for data: 9422084
I0428 19:34:06.246990 23267 net.cpp:200] loss needs backward computation.
I0428 19:34:06.246995 23267 net.cpp:200] relu1 needs backward computation.
I0428 19:34:06.246999 23267 net.cpp:200] ip1 needs backward computation.
I0428 19:34:06.247004 23267 net.cpp:200] pool0 needs backward computation.
I0428 19:34:06.247007 23267 net.cpp:200] conv0 needs backward computation.
I0428 19:34:06.247011 23267 net.cpp:202] mnist does not need backward computation.
I0428 19:34:06.247014 23267 net.cpp:244] This network produces output loss
I0428 19:34:06.247023 23267 net.cpp:257] Network initialization done.
I0428 19:34:06.247274 23267 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test196.prototxt
I0428 19:34:06.247301 23267 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:06.247378 23267 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:34:06.247442 23267 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:06.247490 23267 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:06.247509 23267 net.cpp:86] Creating Layer mnist
I0428 19:34:06.247515 23267 net.cpp:382] mnist -> data
I0428 19:34:06.247524 23267 net.cpp:382] mnist -> label
I0428 19:34:06.247623 23267 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:06.248848 23267 net.cpp:124] Setting up mnist
I0428 19:34:06.248864 23267 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:06.248870 23267 net.cpp:131] Top shape: 100 (100)
I0428 19:34:06.248874 23267 net.cpp:139] Memory required for data: 314000
I0428 19:34:06.248891 23267 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:06.248899 23267 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:06.248903 23267 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:06.248909 23267 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:06.248917 23267 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:06.248967 23267 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:06.248976 23267 net.cpp:131] Top shape: 100 (100)
I0428 19:34:06.248980 23267 net.cpp:131] Top shape: 100 (100)
I0428 19:34:06.248984 23267 net.cpp:139] Memory required for data: 314800
I0428 19:34:06.248988 23267 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:06.248998 23267 net.cpp:86] Creating Layer conv0
I0428 19:34:06.249003 23267 net.cpp:408] conv0 <- data
I0428 19:34:06.249009 23267 net.cpp:382] conv0 -> conv0
I0428 19:34:06.250895 23267 net.cpp:124] Setting up conv0
I0428 19:34:06.250911 23267 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:06.250916 23267 net.cpp:139] Memory required for data: 11834800
I0428 19:34:06.250926 23267 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:06.250936 23267 net.cpp:86] Creating Layer pool0
I0428 19:34:06.250941 23267 net.cpp:408] pool0 <- conv0
I0428 19:34:06.250946 23267 net.cpp:382] pool0 -> pool0
I0428 19:34:06.250990 23267 net.cpp:124] Setting up pool0
I0428 19:34:06.250998 23267 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:06.251003 23267 net.cpp:139] Memory required for data: 14714800
I0428 19:34:06.251005 23267 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:06.251013 23267 net.cpp:86] Creating Layer ip1
I0428 19:34:06.251019 23267 net.cpp:408] ip1 <- pool0
I0428 19:34:06.251024 23267 net.cpp:382] ip1 -> ip1
I0428 19:34:06.251631 23267 net.cpp:124] Setting up ip1
I0428 19:34:06.251641 23267 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:06.251644 23267 net.cpp:139] Memory required for data: 14718800
I0428 19:34:06.251654 23267 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:06.251660 23267 net.cpp:86] Creating Layer relu1
I0428 19:34:06.251663 23267 net.cpp:408] relu1 <- ip1
I0428 19:34:06.251670 23267 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:06.251866 23267 net.cpp:124] Setting up relu1
I0428 19:34:06.251878 23267 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:06.251881 23267 net.cpp:139] Memory required for data: 14722800
I0428 19:34:06.251885 23267 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:34:06.251891 23267 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:34:06.251895 23267 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:34:06.251901 23267 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:34:06.251915 23267 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:34:06.251960 23267 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:34:06.251969 23267 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:06.251974 23267 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:06.251978 23267 net.cpp:139] Memory required for data: 14730800
I0428 19:34:06.251982 23267 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:06.251988 23267 net.cpp:86] Creating Layer accuracy
I0428 19:34:06.251992 23267 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:34:06.251996 23267 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:06.252003 23267 net.cpp:382] accuracy -> accuracy
I0428 19:34:06.252012 23267 net.cpp:124] Setting up accuracy
I0428 19:34:06.252017 23267 net.cpp:131] Top shape: (1)
I0428 19:34:06.252020 23267 net.cpp:139] Memory required for data: 14730804
I0428 19:34:06.252023 23267 layer_factory.hpp:77] Creating layer loss
I0428 19:34:06.252029 23267 net.cpp:86] Creating Layer loss
I0428 19:34:06.252033 23267 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:34:06.252038 23267 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:06.252044 23267 net.cpp:382] loss -> loss
I0428 19:34:06.252051 23267 layer_factory.hpp:77] Creating layer loss
I0428 19:34:06.252336 23267 net.cpp:124] Setting up loss
I0428 19:34:06.252358 23267 net.cpp:131] Top shape: (1)
I0428 19:34:06.252362 23267 net.cpp:134]     with loss weight 1
I0428 19:34:06.252369 23267 net.cpp:139] Memory required for data: 14730808
I0428 19:34:06.252373 23267 net.cpp:200] loss needs backward computation.
I0428 19:34:06.252378 23267 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:06.252382 23267 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:34:06.252387 23267 net.cpp:200] relu1 needs backward computation.
I0428 19:34:06.252390 23267 net.cpp:200] ip1 needs backward computation.
I0428 19:34:06.252393 23267 net.cpp:200] pool0 needs backward computation.
I0428 19:34:06.252398 23267 net.cpp:200] conv0 needs backward computation.
I0428 19:34:06.252401 23267 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:06.252406 23267 net.cpp:202] mnist does not need backward computation.
I0428 19:34:06.252409 23267 net.cpp:244] This network produces output accuracy
I0428 19:34:06.252421 23267 net.cpp:244] This network produces output loss
I0428 19:34:06.252432 23267 net.cpp:257] Network initialization done.
I0428 19:34:06.252465 23267 solver.cpp:56] Solver scaffolding done.
I0428 19:34:06.252650 23267 caffe.cpp:248] Starting Optimization
I0428 19:34:06.252658 23267 solver.cpp:273] Solving LeNet
I0428 19:34:06.252663 23267 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:06.253470 23267 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:06.348245 23274 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:06.350589 23267 solver.cpp:398]     Test net output #0: accuracy = 0.0642
I0428 19:34:06.350610 23267 solver.cpp:398]     Test net output #1: loss = 2.33692 (* 1 = 2.33692 loss)
I0428 19:34:06.354790 23267 solver.cpp:219] Iteration 0 (-1.1968e-30 iter/s, 0.102099s/100 iters), loss = 2.32412
I0428 19:34:06.354815 23267 solver.cpp:238]     Train net output #0: loss = 2.32412 (* 1 = 2.32412 loss)
I0428 19:34:06.354826 23267 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:06.479609 23267 solver.cpp:219] Iteration 100 (801.42 iter/s, 0.124778s/100 iters), loss = 0.663279
I0428 19:34:06.479650 23267 solver.cpp:238]     Train net output #0: loss = 0.663279 (* 1 = 0.663279 loss)
I0428 19:34:06.479655 23267 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:06.604454 23267 solver.cpp:219] Iteration 200 (801.229 iter/s, 0.124808s/100 iters), loss = 0.827116
I0428 19:34:06.604495 23267 solver.cpp:238]     Train net output #0: loss = 0.827116 (* 1 = 0.827116 loss)
I0428 19:34:06.604501 23267 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:06.733392 23267 solver.cpp:219] Iteration 300 (775.881 iter/s, 0.128886s/100 iters), loss = 0.224482
I0428 19:34:06.733433 23267 solver.cpp:238]     Train net output #0: loss = 0.224482 (* 1 = 0.224482 loss)
I0428 19:34:06.733439 23267 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:06.859217 23267 solver.cpp:219] Iteration 400 (794.981 iter/s, 0.125789s/100 iters), loss = 0.150655
I0428 19:34:06.859257 23267 solver.cpp:238]     Train net output #0: loss = 0.150655 (* 1 = 0.150655 loss)
I0428 19:34:06.859263 23267 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:06.981973 23267 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:06.999994 23267 blocking_queue.cpp:49] Waiting for data
I0428 19:34:07.074498 23274 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:07.075906 23267 solver.cpp:398]     Test net output #0: accuracy = 0.9429
I0428 19:34:07.075940 23267 solver.cpp:398]     Test net output #1: loss = 0.20854 (* 1 = 0.20854 loss)
I0428 19:34:07.077255 23267 solver.cpp:219] Iteration 500 (458.719 iter/s, 0.217998s/100 iters), loss = 0.302974
I0428 19:34:07.077280 23267 solver.cpp:238]     Train net output #0: loss = 0.302974 (* 1 = 0.302974 loss)
I0428 19:34:07.077286 23267 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:07.204293 23267 solver.cpp:219] Iteration 600 (787.397 iter/s, 0.127001s/100 iters), loss = 0.121732
I0428 19:34:07.204363 23267 solver.cpp:238]     Train net output #0: loss = 0.121732 (* 1 = 0.121732 loss)
I0428 19:34:07.204370 23267 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:07.329377 23267 solver.cpp:219] Iteration 700 (799.878 iter/s, 0.125019s/100 iters), loss = 0.275872
I0428 19:34:07.329417 23267 solver.cpp:238]     Train net output #0: loss = 0.275872 (* 1 = 0.275872 loss)
I0428 19:34:07.329423 23267 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:07.456537 23267 solver.cpp:219] Iteration 800 (786.814 iter/s, 0.127095s/100 iters), loss = 0.342022
I0428 19:34:07.456562 23267 solver.cpp:238]     Train net output #0: loss = 0.342022 (* 1 = 0.342022 loss)
I0428 19:34:07.456568 23267 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:07.583473 23267 solver.cpp:219] Iteration 900 (788.021 iter/s, 0.1269s/100 iters), loss = 0.226323
I0428 19:34:07.583498 23267 solver.cpp:238]     Train net output #0: loss = 0.226323 (* 1 = 0.226323 loss)
I0428 19:34:07.583505 23267 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:07.624948 23273 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:07.706720 23267 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:07.708325 23267 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:07.709853 23267 solver.cpp:311] Iteration 1000, loss = 0.187725
I0428 19:34:07.709869 23267 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:07.802625 23274 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:07.804050 23267 solver.cpp:398]     Test net output #0: accuracy = 0.9625
I0428 19:34:07.804085 23267 solver.cpp:398]     Test net output #1: loss = 0.134029 (* 1 = 0.134029 loss)
I0428 19:34:07.804091 23267 solver.cpp:316] Optimization Done.
I0428 19:34:07.804095 23267 caffe.cpp:259] Optimization Done.
