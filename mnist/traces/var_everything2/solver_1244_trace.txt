I0428 20:15:21.036250   426 caffe.cpp:218] Using GPUs 0
I0428 20:15:21.073412   426 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:21.581372   426 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1244.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:21.581514   426 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1244.prototxt
I0428 20:15:21.581931   426 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:21.581950   426 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:21.582054   426 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:15:21.582134   426 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:21.582232   426 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:21.582258   426 net.cpp:86] Creating Layer mnist
I0428 20:15:21.582267   426 net.cpp:382] mnist -> data
I0428 20:15:21.582289   426 net.cpp:382] mnist -> label
I0428 20:15:21.583442   426 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:21.585995   426 net.cpp:124] Setting up mnist
I0428 20:15:21.586014   426 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:21.586022   426 net.cpp:131] Top shape: 64 (64)
I0428 20:15:21.586025   426 net.cpp:139] Memory required for data: 200960
I0428 20:15:21.586033   426 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:21.586048   426 net.cpp:86] Creating Layer conv0
I0428 20:15:21.586068   426 net.cpp:408] conv0 <- data
I0428 20:15:21.586082   426 net.cpp:382] conv0 -> conv0
I0428 20:15:21.871798   426 net.cpp:124] Setting up conv0
I0428 20:15:21.871829   426 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:21.871834   426 net.cpp:139] Memory required for data: 7573760
I0428 20:15:21.871848   426 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:21.871862   426 net.cpp:86] Creating Layer pool0
I0428 20:15:21.871868   426 net.cpp:408] pool0 <- conv0
I0428 20:15:21.871875   426 net.cpp:382] pool0 -> pool0
I0428 20:15:21.871929   426 net.cpp:124] Setting up pool0
I0428 20:15:21.871939   426 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:21.871945   426 net.cpp:139] Memory required for data: 9416960
I0428 20:15:21.871950   426 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:21.871968   426 net.cpp:86] Creating Layer conv1
I0428 20:15:21.871973   426 net.cpp:408] conv1 <- pool0
I0428 20:15:21.871980   426 net.cpp:382] conv1 -> conv1
I0428 20:15:21.874063   426 net.cpp:124] Setting up conv1
I0428 20:15:21.874083   426 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:15:21.874089   426 net.cpp:139] Memory required for data: 9449728
I0428 20:15:21.874104   426 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:21.874115   426 net.cpp:86] Creating Layer pool1
I0428 20:15:21.874122   426 net.cpp:408] pool1 <- conv1
I0428 20:15:21.874131   426 net.cpp:382] pool1 -> pool1
I0428 20:15:21.874181   426 net.cpp:124] Setting up pool1
I0428 20:15:21.874191   426 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:15:21.874195   426 net.cpp:139] Memory required for data: 9457920
I0428 20:15:21.874200   426 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:21.874214   426 net.cpp:86] Creating Layer ip1
I0428 20:15:21.874222   426 net.cpp:408] ip1 <- pool1
I0428 20:15:21.874229   426 net.cpp:382] ip1 -> ip1
I0428 20:15:21.874353   426 net.cpp:124] Setting up ip1
I0428 20:15:21.874363   426 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:21.874368   426 net.cpp:139] Memory required for data: 9470720
I0428 20:15:21.874382   426 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:21.874393   426 net.cpp:86] Creating Layer relu1
I0428 20:15:21.874400   426 net.cpp:408] relu1 <- ip1
I0428 20:15:21.874408   426 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:21.874593   426 net.cpp:124] Setting up relu1
I0428 20:15:21.874604   426 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:21.874609   426 net.cpp:139] Memory required for data: 9483520
I0428 20:15:21.874614   426 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:21.874626   426 net.cpp:86] Creating Layer ip2
I0428 20:15:21.874632   426 net.cpp:408] ip2 <- ip1
I0428 20:15:21.874641   426 net.cpp:382] ip2 -> ip2
I0428 20:15:21.874761   426 net.cpp:124] Setting up ip2
I0428 20:15:21.874773   426 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:15:21.874778   426 net.cpp:139] Memory required for data: 9489920
I0428 20:15:21.874788   426 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:21.874797   426 net.cpp:86] Creating Layer relu2
I0428 20:15:21.874804   426 net.cpp:408] relu2 <- ip2
I0428 20:15:21.874811   426 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:21.875605   426 net.cpp:124] Setting up relu2
I0428 20:15:21.875622   426 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:15:21.875627   426 net.cpp:139] Memory required for data: 9496320
I0428 20:15:21.875633   426 layer_factory.hpp:77] Creating layer ip3
I0428 20:15:21.875645   426 net.cpp:86] Creating Layer ip3
I0428 20:15:21.875651   426 net.cpp:408] ip3 <- ip2
I0428 20:15:21.875661   426 net.cpp:382] ip3 -> ip3
I0428 20:15:21.875773   426 net.cpp:124] Setting up ip3
I0428 20:15:21.875783   426 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:21.875788   426 net.cpp:139] Memory required for data: 9498880
I0428 20:15:21.875802   426 layer_factory.hpp:77] Creating layer relu3
I0428 20:15:21.875811   426 net.cpp:86] Creating Layer relu3
I0428 20:15:21.875816   426 net.cpp:408] relu3 <- ip3
I0428 20:15:21.875825   426 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:15:21.876014   426 net.cpp:124] Setting up relu3
I0428 20:15:21.876025   426 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:21.876031   426 net.cpp:139] Memory required for data: 9501440
I0428 20:15:21.876036   426 layer_factory.hpp:77] Creating layer loss
I0428 20:15:21.876045   426 net.cpp:86] Creating Layer loss
I0428 20:15:21.876050   426 net.cpp:408] loss <- ip3
I0428 20:15:21.876057   426 net.cpp:408] loss <- label
I0428 20:15:21.876067   426 net.cpp:382] loss -> loss
I0428 20:15:21.876092   426 layer_factory.hpp:77] Creating layer loss
I0428 20:15:21.876346   426 net.cpp:124] Setting up loss
I0428 20:15:21.876358   426 net.cpp:131] Top shape: (1)
I0428 20:15:21.876363   426 net.cpp:134]     with loss weight 1
I0428 20:15:21.876384   426 net.cpp:139] Memory required for data: 9501444
I0428 20:15:21.876389   426 net.cpp:200] loss needs backward computation.
I0428 20:15:21.876396   426 net.cpp:200] relu3 needs backward computation.
I0428 20:15:21.876401   426 net.cpp:200] ip3 needs backward computation.
I0428 20:15:21.876406   426 net.cpp:200] relu2 needs backward computation.
I0428 20:15:21.876411   426 net.cpp:200] ip2 needs backward computation.
I0428 20:15:21.876417   426 net.cpp:200] relu1 needs backward computation.
I0428 20:15:21.876422   426 net.cpp:200] ip1 needs backward computation.
I0428 20:15:21.876427   426 net.cpp:200] pool1 needs backward computation.
I0428 20:15:21.876432   426 net.cpp:200] conv1 needs backward computation.
I0428 20:15:21.876438   426 net.cpp:200] pool0 needs backward computation.
I0428 20:15:21.876443   426 net.cpp:200] conv0 needs backward computation.
I0428 20:15:21.876449   426 net.cpp:202] mnist does not need backward computation.
I0428 20:15:21.876454   426 net.cpp:244] This network produces output loss
I0428 20:15:21.876471   426 net.cpp:257] Network initialization done.
I0428 20:15:21.876806   426 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1244.prototxt
I0428 20:15:21.876848   426 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:21.876953   426 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:15:21.877079   426 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:21.877141   426 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:21.877161   426 net.cpp:86] Creating Layer mnist
I0428 20:15:21.877169   426 net.cpp:382] mnist -> data
I0428 20:15:21.877182   426 net.cpp:382] mnist -> label
I0428 20:15:21.877308   426 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:21.879592   426 net.cpp:124] Setting up mnist
I0428 20:15:21.879631   426 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:21.879639   426 net.cpp:131] Top shape: 100 (100)
I0428 20:15:21.879645   426 net.cpp:139] Memory required for data: 314000
I0428 20:15:21.879652   426 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:21.879665   426 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:21.879673   426 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:21.879681   426 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:21.879693   426 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:21.879758   426 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:21.879767   426 net.cpp:131] Top shape: 100 (100)
I0428 20:15:21.879775   426 net.cpp:131] Top shape: 100 (100)
I0428 20:15:21.879779   426 net.cpp:139] Memory required for data: 314800
I0428 20:15:21.879784   426 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:21.879799   426 net.cpp:86] Creating Layer conv0
I0428 20:15:21.879806   426 net.cpp:408] conv0 <- data
I0428 20:15:21.879817   426 net.cpp:382] conv0 -> conv0
I0428 20:15:21.881472   426 net.cpp:124] Setting up conv0
I0428 20:15:21.881490   426 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:21.881496   426 net.cpp:139] Memory required for data: 11834800
I0428 20:15:21.881511   426 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:21.881523   426 net.cpp:86] Creating Layer pool0
I0428 20:15:21.881531   426 net.cpp:408] pool0 <- conv0
I0428 20:15:21.881541   426 net.cpp:382] pool0 -> pool0
I0428 20:15:21.881583   426 net.cpp:124] Setting up pool0
I0428 20:15:21.881592   426 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:21.881598   426 net.cpp:139] Memory required for data: 14714800
I0428 20:15:21.881603   426 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:21.881618   426 net.cpp:86] Creating Layer conv1
I0428 20:15:21.881624   426 net.cpp:408] conv1 <- pool0
I0428 20:15:21.881635   426 net.cpp:382] conv1 -> conv1
I0428 20:15:21.883230   426 net.cpp:124] Setting up conv1
I0428 20:15:21.883247   426 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:15:21.883254   426 net.cpp:139] Memory required for data: 14766000
I0428 20:15:21.883267   426 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:21.883277   426 net.cpp:86] Creating Layer pool1
I0428 20:15:21.883283   426 net.cpp:408] pool1 <- conv1
I0428 20:15:21.883294   426 net.cpp:382] pool1 -> pool1
I0428 20:15:21.883340   426 net.cpp:124] Setting up pool1
I0428 20:15:21.883349   426 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:15:21.883354   426 net.cpp:139] Memory required for data: 14778800
I0428 20:15:21.883360   426 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:21.883373   426 net.cpp:86] Creating Layer ip1
I0428 20:15:21.883379   426 net.cpp:408] ip1 <- pool1
I0428 20:15:21.883390   426 net.cpp:382] ip1 -> ip1
I0428 20:15:21.883512   426 net.cpp:124] Setting up ip1
I0428 20:15:21.883522   426 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:21.883538   426 net.cpp:139] Memory required for data: 14798800
I0428 20:15:21.883553   426 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:21.883560   426 net.cpp:86] Creating Layer relu1
I0428 20:15:21.883566   426 net.cpp:408] relu1 <- ip1
I0428 20:15:21.883574   426 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:21.883812   426 net.cpp:124] Setting up relu1
I0428 20:15:21.883823   426 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:21.883829   426 net.cpp:139] Memory required for data: 14818800
I0428 20:15:21.883834   426 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:21.883846   426 net.cpp:86] Creating Layer ip2
I0428 20:15:21.883852   426 net.cpp:408] ip2 <- ip1
I0428 20:15:21.883862   426 net.cpp:382] ip2 -> ip2
I0428 20:15:21.883983   426 net.cpp:124] Setting up ip2
I0428 20:15:21.883993   426 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:15:21.883998   426 net.cpp:139] Memory required for data: 14828800
I0428 20:15:21.884008   426 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:21.884016   426 net.cpp:86] Creating Layer relu2
I0428 20:15:21.884021   426 net.cpp:408] relu2 <- ip2
I0428 20:15:21.884030   426 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:21.884203   426 net.cpp:124] Setting up relu2
I0428 20:15:21.884215   426 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:15:21.884220   426 net.cpp:139] Memory required for data: 14838800
I0428 20:15:21.884227   426 layer_factory.hpp:77] Creating layer ip3
I0428 20:15:21.884238   426 net.cpp:86] Creating Layer ip3
I0428 20:15:21.884243   426 net.cpp:408] ip3 <- ip2
I0428 20:15:21.884251   426 net.cpp:382] ip3 -> ip3
I0428 20:15:21.884358   426 net.cpp:124] Setting up ip3
I0428 20:15:21.884368   426 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:21.884373   426 net.cpp:139] Memory required for data: 14842800
I0428 20:15:21.884387   426 layer_factory.hpp:77] Creating layer relu3
I0428 20:15:21.884397   426 net.cpp:86] Creating Layer relu3
I0428 20:15:21.884403   426 net.cpp:408] relu3 <- ip3
I0428 20:15:21.884413   426 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:15:21.885304   426 net.cpp:124] Setting up relu3
I0428 20:15:21.885319   426 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:21.885324   426 net.cpp:139] Memory required for data: 14846800
I0428 20:15:21.885329   426 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:15:21.885339   426 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:15:21.885346   426 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:15:21.885354   426 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:15:21.885365   426 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:15:21.885422   426 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:15:21.885432   426 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:21.885438   426 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:21.885442   426 net.cpp:139] Memory required for data: 14854800
I0428 20:15:21.885447   426 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:21.885455   426 net.cpp:86] Creating Layer accuracy
I0428 20:15:21.885462   426 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:15:21.885468   426 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:21.885478   426 net.cpp:382] accuracy -> accuracy
I0428 20:15:21.885489   426 net.cpp:124] Setting up accuracy
I0428 20:15:21.885498   426 net.cpp:131] Top shape: (1)
I0428 20:15:21.885502   426 net.cpp:139] Memory required for data: 14854804
I0428 20:15:21.885509   426 layer_factory.hpp:77] Creating layer loss
I0428 20:15:21.885516   426 net.cpp:86] Creating Layer loss
I0428 20:15:21.885522   426 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:15:21.885529   426 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:21.885537   426 net.cpp:382] loss -> loss
I0428 20:15:21.885546   426 layer_factory.hpp:77] Creating layer loss
I0428 20:15:21.885789   426 net.cpp:124] Setting up loss
I0428 20:15:21.885803   426 net.cpp:131] Top shape: (1)
I0428 20:15:21.885809   426 net.cpp:134]     with loss weight 1
I0428 20:15:21.885830   426 net.cpp:139] Memory required for data: 14854808
I0428 20:15:21.885836   426 net.cpp:200] loss needs backward computation.
I0428 20:15:21.885843   426 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:21.885850   426 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:15:21.885855   426 net.cpp:200] relu3 needs backward computation.
I0428 20:15:21.885860   426 net.cpp:200] ip3 needs backward computation.
I0428 20:15:21.885865   426 net.cpp:200] relu2 needs backward computation.
I0428 20:15:21.885870   426 net.cpp:200] ip2 needs backward computation.
I0428 20:15:21.885875   426 net.cpp:200] relu1 needs backward computation.
I0428 20:15:21.885881   426 net.cpp:200] ip1 needs backward computation.
I0428 20:15:21.885886   426 net.cpp:200] pool1 needs backward computation.
I0428 20:15:21.885891   426 net.cpp:200] conv1 needs backward computation.
I0428 20:15:21.885897   426 net.cpp:200] pool0 needs backward computation.
I0428 20:15:21.885902   426 net.cpp:200] conv0 needs backward computation.
I0428 20:15:21.885908   426 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:21.885915   426 net.cpp:202] mnist does not need backward computation.
I0428 20:15:21.885921   426 net.cpp:244] This network produces output accuracy
I0428 20:15:21.885926   426 net.cpp:244] This network produces output loss
I0428 20:15:21.885946   426 net.cpp:257] Network initialization done.
I0428 20:15:21.885993   426 solver.cpp:56] Solver scaffolding done.
I0428 20:15:21.886370   426 caffe.cpp:248] Starting Optimization
I0428 20:15:21.886392   426 solver.cpp:273] Solving LeNet
I0428 20:15:21.886396   426 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:21.886690   426 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:21.893620   426 blocking_queue.cpp:49] Waiting for data
I0428 20:15:21.967031   433 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:21.967775   426 solver.cpp:398]     Test net output #0: accuracy = 0.1726
I0428 20:15:21.967799   426 solver.cpp:398]     Test net output #1: loss = 2.2901 (* 1 = 2.2901 loss)
I0428 20:15:21.972230   426 solver.cpp:219] Iteration 0 (0 iter/s, 0.085798s/100 iters), loss = 2.28615
I0428 20:15:21.972257   426 solver.cpp:238]     Train net output #0: loss = 2.28615 (* 1 = 2.28615 loss)
I0428 20:15:21.972290   426 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:22.086398   426 solver.cpp:219] Iteration 100 (876.194 iter/s, 0.11413s/100 iters), loss = 0.818372
I0428 20:15:22.086428   426 solver.cpp:238]     Train net output #0: loss = 0.818372 (* 1 = 0.818372 loss)
I0428 20:15:22.086454   426 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:22.199301   426 solver.cpp:219] Iteration 200 (886.004 iter/s, 0.112866s/100 iters), loss = 0.739259
I0428 20:15:22.199328   426 solver.cpp:238]     Train net output #0: loss = 0.739259 (* 1 = 0.739259 loss)
I0428 20:15:22.199353   426 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:22.311741   426 solver.cpp:219] Iteration 300 (889.644 iter/s, 0.112404s/100 iters), loss = 0.580641
I0428 20:15:22.311770   426 solver.cpp:238]     Train net output #0: loss = 0.580641 (* 1 = 0.580641 loss)
I0428 20:15:22.311795   426 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:22.428521   426 solver.cpp:219] Iteration 400 (856.582 iter/s, 0.116743s/100 iters), loss = 0.551204
I0428 20:15:22.428550   426 solver.cpp:238]     Train net output #0: loss = 0.551204 (* 1 = 0.551204 loss)
I0428 20:15:22.428575   426 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:22.545017   426 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:22.615258   433 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:22.616375   426 solver.cpp:398]     Test net output #0: accuracy = 0.7728
I0428 20:15:22.616401   426 solver.cpp:398]     Test net output #1: loss = 0.598406 (* 1 = 0.598406 loss)
I0428 20:15:22.617588   426 solver.cpp:219] Iteration 500 (529.03 iter/s, 0.189025s/100 iters), loss = 0.680929
I0428 20:15:22.617631   426 solver.cpp:238]     Train net output #0: loss = 0.680929 (* 1 = 0.680929 loss)
I0428 20:15:22.617642   426 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:22.740944   426 solver.cpp:219] Iteration 600 (810.997 iter/s, 0.123305s/100 iters), loss = 0.554168
I0428 20:15:22.740973   426 solver.cpp:238]     Train net output #0: loss = 0.554168 (* 1 = 0.554168 loss)
I0428 20:15:22.740983   426 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:22.857806   426 solver.cpp:219] Iteration 700 (855.981 iter/s, 0.116825s/100 iters), loss = 0.89174
I0428 20:15:22.857834   426 solver.cpp:238]     Train net output #0: loss = 0.89174 (* 1 = 0.89174 loss)
I0428 20:15:22.857844   426 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:22.968968   426 solver.cpp:219] Iteration 800 (899.892 iter/s, 0.111124s/100 iters), loss = 0.703196
I0428 20:15:22.968997   426 solver.cpp:238]     Train net output #0: loss = 0.703196 (* 1 = 0.703196 loss)
I0428 20:15:22.969007   426 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:23.081274   426 solver.cpp:219] Iteration 900 (890.708 iter/s, 0.11227s/100 iters), loss = 0.63971
I0428 20:15:23.081302   426 solver.cpp:238]     Train net output #0: loss = 0.63971 (* 1 = 0.63971 loss)
I0428 20:15:23.081312   426 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:23.120719   432 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:23.199095   426 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:23.200062   426 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:23.200932   426 solver.cpp:311] Iteration 1000, loss = 0.75386
I0428 20:15:23.200966   426 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:23.287173   433 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:23.289783   426 solver.cpp:398]     Test net output #0: accuracy = 0.787
I0428 20:15:23.289814   426 solver.cpp:398]     Test net output #1: loss = 0.54295 (* 1 = 0.54295 loss)
I0428 20:15:23.289824   426 solver.cpp:316] Optimization Done.
I0428 20:15:23.289829   426 caffe.cpp:259] Optimization Done.
