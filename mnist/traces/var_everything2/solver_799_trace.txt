I0428 19:57:47.124339 28811 caffe.cpp:218] Using GPUs 0
I0428 19:57:47.155819 28811 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:47.644203 28811 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test799.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:47.644317 28811 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test799.prototxt
I0428 19:57:47.644652 28811 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:47.644667 28811 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:47.644744 28811 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:47.644804 28811 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:47.644942 28811 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:47.644963 28811 net.cpp:86] Creating Layer mnist
I0428 19:57:47.644968 28811 net.cpp:382] mnist -> data
I0428 19:57:47.644989 28811 net.cpp:382] mnist -> label
I0428 19:57:47.646070 28811 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:47.648192 28811 net.cpp:124] Setting up mnist
I0428 19:57:47.648206 28811 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:47.648226 28811 net.cpp:131] Top shape: 64 (64)
I0428 19:57:47.648229 28811 net.cpp:139] Memory required for data: 200960
I0428 19:57:47.648236 28811 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:47.648248 28811 net.cpp:86] Creating Layer conv0
I0428 19:57:47.648280 28811 net.cpp:408] conv0 <- data
I0428 19:57:47.648290 28811 net.cpp:382] conv0 -> conv0
I0428 19:57:47.879007 28811 net.cpp:124] Setting up conv0
I0428 19:57:47.879034 28811 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:47.879053 28811 net.cpp:139] Memory required for data: 1675520
I0428 19:57:47.879068 28811 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:47.879096 28811 net.cpp:86] Creating Layer pool0
I0428 19:57:47.879101 28811 net.cpp:408] pool0 <- conv0
I0428 19:57:47.879106 28811 net.cpp:382] pool0 -> pool0
I0428 19:57:47.879151 28811 net.cpp:124] Setting up pool0
I0428 19:57:47.879158 28811 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:47.879161 28811 net.cpp:139] Memory required for data: 2044160
I0428 19:57:47.879164 28811 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:47.879175 28811 net.cpp:86] Creating Layer conv1
I0428 19:57:47.879179 28811 net.cpp:408] conv1 <- pool0
I0428 19:57:47.879184 28811 net.cpp:382] conv1 -> conv1
I0428 19:57:47.881966 28811 net.cpp:124] Setting up conv1
I0428 19:57:47.881997 28811 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:47.882001 28811 net.cpp:139] Memory required for data: 2126080
I0428 19:57:47.882009 28811 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:47.882017 28811 net.cpp:86] Creating Layer pool1
I0428 19:57:47.882020 28811 net.cpp:408] pool1 <- conv1
I0428 19:57:47.882040 28811 net.cpp:382] pool1 -> pool1
I0428 19:57:47.882091 28811 net.cpp:124] Setting up pool1
I0428 19:57:47.882097 28811 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:47.882099 28811 net.cpp:139] Memory required for data: 2146560
I0428 19:57:47.882102 28811 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:47.882109 28811 net.cpp:86] Creating Layer ip1
I0428 19:57:47.882112 28811 net.cpp:408] ip1 <- pool1
I0428 19:57:47.882117 28811 net.cpp:382] ip1 -> ip1
I0428 19:57:47.882208 28811 net.cpp:124] Setting up ip1
I0428 19:57:47.882216 28811 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:47.882220 28811 net.cpp:139] Memory required for data: 2149120
I0428 19:57:47.882242 28811 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:47.882247 28811 net.cpp:86] Creating Layer relu1
I0428 19:57:47.882251 28811 net.cpp:408] relu1 <- ip1
I0428 19:57:47.882256 28811 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:47.882426 28811 net.cpp:124] Setting up relu1
I0428 19:57:47.882434 28811 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:47.882437 28811 net.cpp:139] Memory required for data: 2151680
I0428 19:57:47.882441 28811 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:47.882446 28811 net.cpp:86] Creating Layer ip2
I0428 19:57:47.882448 28811 net.cpp:408] ip2 <- ip1
I0428 19:57:47.882453 28811 net.cpp:382] ip2 -> ip2
I0428 19:57:47.882577 28811 net.cpp:124] Setting up ip2
I0428 19:57:47.882585 28811 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:47.882587 28811 net.cpp:139] Memory required for data: 2164480
I0428 19:57:47.882592 28811 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:47.882598 28811 net.cpp:86] Creating Layer relu2
I0428 19:57:47.882616 28811 net.cpp:408] relu2 <- ip2
I0428 19:57:47.882621 28811 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:47.883435 28811 net.cpp:124] Setting up relu2
I0428 19:57:47.883446 28811 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:47.883450 28811 net.cpp:139] Memory required for data: 2177280
I0428 19:57:47.883453 28811 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:47.883460 28811 net.cpp:86] Creating Layer ip3
I0428 19:57:47.883462 28811 net.cpp:408] ip3 <- ip2
I0428 19:57:47.883468 28811 net.cpp:382] ip3 -> ip3
I0428 19:57:47.883570 28811 net.cpp:124] Setting up ip3
I0428 19:57:47.883577 28811 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:47.883580 28811 net.cpp:139] Memory required for data: 2179840
I0428 19:57:47.883589 28811 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:47.883594 28811 net.cpp:86] Creating Layer relu3
I0428 19:57:47.883596 28811 net.cpp:408] relu3 <- ip3
I0428 19:57:47.883600 28811 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:47.883788 28811 net.cpp:124] Setting up relu3
I0428 19:57:47.883797 28811 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:47.883800 28811 net.cpp:139] Memory required for data: 2182400
I0428 19:57:47.883803 28811 layer_factory.hpp:77] Creating layer loss
I0428 19:57:47.883810 28811 net.cpp:86] Creating Layer loss
I0428 19:57:47.883812 28811 net.cpp:408] loss <- ip3
I0428 19:57:47.883816 28811 net.cpp:408] loss <- label
I0428 19:57:47.883821 28811 net.cpp:382] loss -> loss
I0428 19:57:47.883838 28811 layer_factory.hpp:77] Creating layer loss
I0428 19:57:47.884055 28811 net.cpp:124] Setting up loss
I0428 19:57:47.884064 28811 net.cpp:131] Top shape: (1)
I0428 19:57:47.884068 28811 net.cpp:134]     with loss weight 1
I0428 19:57:47.884081 28811 net.cpp:139] Memory required for data: 2182404
I0428 19:57:47.884085 28811 net.cpp:200] loss needs backward computation.
I0428 19:57:47.884089 28811 net.cpp:200] relu3 needs backward computation.
I0428 19:57:47.884093 28811 net.cpp:200] ip3 needs backward computation.
I0428 19:57:47.884095 28811 net.cpp:200] relu2 needs backward computation.
I0428 19:57:47.884099 28811 net.cpp:200] ip2 needs backward computation.
I0428 19:57:47.884101 28811 net.cpp:200] relu1 needs backward computation.
I0428 19:57:47.884104 28811 net.cpp:200] ip1 needs backward computation.
I0428 19:57:47.884107 28811 net.cpp:200] pool1 needs backward computation.
I0428 19:57:47.884110 28811 net.cpp:200] conv1 needs backward computation.
I0428 19:57:47.884114 28811 net.cpp:200] pool0 needs backward computation.
I0428 19:57:47.884116 28811 net.cpp:200] conv0 needs backward computation.
I0428 19:57:47.884119 28811 net.cpp:202] mnist does not need backward computation.
I0428 19:57:47.884122 28811 net.cpp:244] This network produces output loss
I0428 19:57:47.884131 28811 net.cpp:257] Network initialization done.
I0428 19:57:47.884512 28811 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test799.prototxt
I0428 19:57:47.884539 28811 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:47.884629 28811 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:47.884719 28811 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:47.884764 28811 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:47.884776 28811 net.cpp:86] Creating Layer mnist
I0428 19:57:47.884780 28811 net.cpp:382] mnist -> data
I0428 19:57:47.884788 28811 net.cpp:382] mnist -> label
I0428 19:57:47.884908 28811 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:47.886891 28811 net.cpp:124] Setting up mnist
I0428 19:57:47.886919 28811 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:47.886940 28811 net.cpp:131] Top shape: 100 (100)
I0428 19:57:47.886943 28811 net.cpp:139] Memory required for data: 314000
I0428 19:57:47.886947 28811 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:47.886967 28811 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:47.886971 28811 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:47.886976 28811 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:47.886982 28811 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:47.887027 28811 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:47.887032 28811 net.cpp:131] Top shape: 100 (100)
I0428 19:57:47.887037 28811 net.cpp:131] Top shape: 100 (100)
I0428 19:57:47.887039 28811 net.cpp:139] Memory required for data: 314800
I0428 19:57:47.887042 28811 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:47.887049 28811 net.cpp:86] Creating Layer conv0
I0428 19:57:47.887053 28811 net.cpp:408] conv0 <- data
I0428 19:57:47.887056 28811 net.cpp:382] conv0 -> conv0
I0428 19:57:47.888463 28811 net.cpp:124] Setting up conv0
I0428 19:57:47.888492 28811 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:47.888496 28811 net.cpp:139] Memory required for data: 2618800
I0428 19:57:47.888504 28811 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:47.888510 28811 net.cpp:86] Creating Layer pool0
I0428 19:57:47.888514 28811 net.cpp:408] pool0 <- conv0
I0428 19:57:47.888519 28811 net.cpp:382] pool0 -> pool0
I0428 19:57:47.888551 28811 net.cpp:124] Setting up pool0
I0428 19:57:47.888556 28811 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:47.888559 28811 net.cpp:139] Memory required for data: 3194800
I0428 19:57:47.888562 28811 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:47.888571 28811 net.cpp:86] Creating Layer conv1
I0428 19:57:47.888573 28811 net.cpp:408] conv1 <- pool0
I0428 19:57:47.888577 28811 net.cpp:382] conv1 -> conv1
I0428 19:57:47.890653 28811 net.cpp:124] Setting up conv1
I0428 19:57:47.890681 28811 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:47.890686 28811 net.cpp:139] Memory required for data: 3322800
I0428 19:57:47.890694 28811 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:47.890702 28811 net.cpp:86] Creating Layer pool1
I0428 19:57:47.890704 28811 net.cpp:408] pool1 <- conv1
I0428 19:57:47.890709 28811 net.cpp:382] pool1 -> pool1
I0428 19:57:47.890748 28811 net.cpp:124] Setting up pool1
I0428 19:57:47.890753 28811 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:47.890756 28811 net.cpp:139] Memory required for data: 3354800
I0428 19:57:47.890759 28811 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:47.890765 28811 net.cpp:86] Creating Layer ip1
I0428 19:57:47.890769 28811 net.cpp:408] ip1 <- pool1
I0428 19:57:47.890780 28811 net.cpp:382] ip1 -> ip1
I0428 19:57:47.890878 28811 net.cpp:124] Setting up ip1
I0428 19:57:47.890887 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.890899 28811 net.cpp:139] Memory required for data: 3358800
I0428 19:57:47.890907 28811 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:47.890911 28811 net.cpp:86] Creating Layer relu1
I0428 19:57:47.890914 28811 net.cpp:408] relu1 <- ip1
I0428 19:57:47.890919 28811 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:47.891086 28811 net.cpp:124] Setting up relu1
I0428 19:57:47.891094 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.891098 28811 net.cpp:139] Memory required for data: 3362800
I0428 19:57:47.891101 28811 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:47.891108 28811 net.cpp:86] Creating Layer ip2
I0428 19:57:47.891110 28811 net.cpp:408] ip2 <- ip1
I0428 19:57:47.891115 28811 net.cpp:382] ip2 -> ip2
I0428 19:57:47.891208 28811 net.cpp:124] Setting up ip2
I0428 19:57:47.891214 28811 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:47.891217 28811 net.cpp:139] Memory required for data: 3382800
I0428 19:57:47.891222 28811 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:47.891227 28811 net.cpp:86] Creating Layer relu2
I0428 19:57:47.891229 28811 net.cpp:408] relu2 <- ip2
I0428 19:57:47.891234 28811 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:47.891367 28811 net.cpp:124] Setting up relu2
I0428 19:57:47.891376 28811 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:47.891378 28811 net.cpp:139] Memory required for data: 3402800
I0428 19:57:47.891381 28811 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:47.891386 28811 net.cpp:86] Creating Layer ip3
I0428 19:57:47.891391 28811 net.cpp:408] ip3 <- ip2
I0428 19:57:47.891394 28811 net.cpp:382] ip3 -> ip3
I0428 19:57:47.891484 28811 net.cpp:124] Setting up ip3
I0428 19:57:47.891496 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.891500 28811 net.cpp:139] Memory required for data: 3406800
I0428 19:57:47.891507 28811 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:47.891511 28811 net.cpp:86] Creating Layer relu3
I0428 19:57:47.891515 28811 net.cpp:408] relu3 <- ip3
I0428 19:57:47.891518 28811 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:47.892297 28811 net.cpp:124] Setting up relu3
I0428 19:57:47.892308 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.892328 28811 net.cpp:139] Memory required for data: 3410800
I0428 19:57:47.892330 28811 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:47.892335 28811 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:47.892339 28811 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:47.892344 28811 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:47.892350 28811 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:47.892385 28811 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:47.892390 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.892393 28811 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:47.892401 28811 net.cpp:139] Memory required for data: 3418800
I0428 19:57:47.892405 28811 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:47.892408 28811 net.cpp:86] Creating Layer accuracy
I0428 19:57:47.892411 28811 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:47.892416 28811 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:47.892419 28811 net.cpp:382] accuracy -> accuracy
I0428 19:57:47.892426 28811 net.cpp:124] Setting up accuracy
I0428 19:57:47.892431 28811 net.cpp:131] Top shape: (1)
I0428 19:57:47.892433 28811 net.cpp:139] Memory required for data: 3418804
I0428 19:57:47.892436 28811 layer_factory.hpp:77] Creating layer loss
I0428 19:57:47.892439 28811 net.cpp:86] Creating Layer loss
I0428 19:57:47.892442 28811 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:47.892446 28811 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:47.892451 28811 net.cpp:382] loss -> loss
I0428 19:57:47.892472 28811 layer_factory.hpp:77] Creating layer loss
I0428 19:57:47.892706 28811 net.cpp:124] Setting up loss
I0428 19:57:47.892715 28811 net.cpp:131] Top shape: (1)
I0428 19:57:47.892719 28811 net.cpp:134]     with loss weight 1
I0428 19:57:47.892726 28811 net.cpp:139] Memory required for data: 3418808
I0428 19:57:47.892738 28811 net.cpp:200] loss needs backward computation.
I0428 19:57:47.892742 28811 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:47.892746 28811 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:47.892750 28811 net.cpp:200] relu3 needs backward computation.
I0428 19:57:47.892753 28811 net.cpp:200] ip3 needs backward computation.
I0428 19:57:47.892756 28811 net.cpp:200] relu2 needs backward computation.
I0428 19:57:47.892760 28811 net.cpp:200] ip2 needs backward computation.
I0428 19:57:47.892762 28811 net.cpp:200] relu1 needs backward computation.
I0428 19:57:47.892765 28811 net.cpp:200] ip1 needs backward computation.
I0428 19:57:47.892768 28811 net.cpp:200] pool1 needs backward computation.
I0428 19:57:47.892771 28811 net.cpp:200] conv1 needs backward computation.
I0428 19:57:47.892774 28811 net.cpp:200] pool0 needs backward computation.
I0428 19:57:47.892778 28811 net.cpp:200] conv0 needs backward computation.
I0428 19:57:47.892782 28811 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:47.892786 28811 net.cpp:202] mnist does not need backward computation.
I0428 19:57:47.892789 28811 net.cpp:244] This network produces output accuracy
I0428 19:57:47.892793 28811 net.cpp:244] This network produces output loss
I0428 19:57:47.892804 28811 net.cpp:257] Network initialization done.
I0428 19:57:47.892879 28811 solver.cpp:56] Solver scaffolding done.
I0428 19:57:47.893267 28811 caffe.cpp:248] Starting Optimization
I0428 19:57:47.893275 28811 solver.cpp:273] Solving LeNet
I0428 19:57:47.893277 28811 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:47.894141 28811 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:47.897763 28811 blocking_queue.cpp:49] Waiting for data
I0428 19:57:47.969259 28818 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:47.969805 28811 solver.cpp:398]     Test net output #0: accuracy = 0.1079
I0428 19:57:47.969838 28811 solver.cpp:398]     Test net output #1: loss = 2.30912 (* 1 = 2.30912 loss)
I0428 19:57:47.972342 28811 solver.cpp:219] Iteration 0 (0 iter/s, 0.0790313s/100 iters), loss = 2.30524
I0428 19:57:47.972380 28811 solver.cpp:238]     Train net output #0: loss = 2.30524 (* 1 = 2.30524 loss)
I0428 19:57:47.972391 28811 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:48.051043 28811 solver.cpp:219] Iteration 100 (1271.15 iter/s, 0.0786688s/100 iters), loss = 1.27287
I0428 19:57:48.051082 28811 solver.cpp:238]     Train net output #0: loss = 1.27287 (* 1 = 1.27287 loss)
I0428 19:57:48.051087 28811 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:48.127851 28811 solver.cpp:219] Iteration 200 (1302.5 iter/s, 0.0767754s/100 iters), loss = 0.713716
I0428 19:57:48.127890 28811 solver.cpp:238]     Train net output #0: loss = 0.713716 (* 1 = 0.713716 loss)
I0428 19:57:48.127895 28811 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:48.207124 28811 solver.cpp:219] Iteration 300 (1262.03 iter/s, 0.0792371s/100 iters), loss = 0.368318
I0428 19:57:48.207162 28811 solver.cpp:238]     Train net output #0: loss = 0.368318 (* 1 = 0.368318 loss)
I0428 19:57:48.207172 28811 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:48.293473 28811 solver.cpp:219] Iteration 400 (1158.71 iter/s, 0.0863026s/100 iters), loss = 0.294938
I0428 19:57:48.293509 28811 solver.cpp:238]     Train net output #0: loss = 0.294938 (* 1 = 0.294938 loss)
I0428 19:57:48.293517 28811 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:48.369741 28811 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:48.423245 28818 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:48.423764 28811 solver.cpp:398]     Test net output #0: accuracy = 0.9278
I0428 19:57:48.423800 28811 solver.cpp:398]     Test net output #1: loss = 0.23304 (* 1 = 0.23304 loss)
I0428 19:57:48.424644 28811 solver.cpp:219] Iteration 500 (762.619 iter/s, 0.131127s/100 iters), loss = 0.165033
I0428 19:57:48.424674 28811 solver.cpp:238]     Train net output #0: loss = 0.165032 (* 1 = 0.165032 loss)
I0428 19:57:48.424696 28811 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:48.506294 28811 solver.cpp:219] Iteration 600 (1225.34 iter/s, 0.0816098s/100 iters), loss = 0.138716
I0428 19:57:48.506319 28811 solver.cpp:238]     Train net output #0: loss = 0.138716 (* 1 = 0.138716 loss)
I0428 19:57:48.506325 28811 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:48.584197 28811 solver.cpp:219] Iteration 700 (1284.19 iter/s, 0.0778701s/100 iters), loss = 0.297393
I0428 19:57:48.584237 28811 solver.cpp:238]     Train net output #0: loss = 0.297393 (* 1 = 0.297393 loss)
I0428 19:57:48.584244 28811 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:48.661098 28811 solver.cpp:219] Iteration 800 (1300.96 iter/s, 0.0768666s/100 iters), loss = 0.438879
I0428 19:57:48.661137 28811 solver.cpp:238]     Train net output #0: loss = 0.438879 (* 1 = 0.438879 loss)
I0428 19:57:48.661157 28811 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:48.736300 28811 solver.cpp:219] Iteration 900 (1330.61 iter/s, 0.0751536s/100 iters), loss = 0.252544
I0428 19:57:48.736341 28811 solver.cpp:238]     Train net output #0: loss = 0.252544 (* 1 = 0.252544 loss)
I0428 19:57:48.736348 28811 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:48.761473 28817 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:48.810082 28811 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:48.810847 28811 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:48.811348 28811 solver.cpp:311] Iteration 1000, loss = 0.274385
I0428 19:57:48.811378 28811 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:48.886750 28818 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:48.887296 28811 solver.cpp:398]     Test net output #0: accuracy = 0.9535
I0428 19:57:48.887329 28811 solver.cpp:398]     Test net output #1: loss = 0.150963 (* 1 = 0.150963 loss)
I0428 19:57:48.887334 28811 solver.cpp:316] Optimization Done.
I0428 19:57:48.887337 28811 caffe.cpp:259] Optimization Done.
