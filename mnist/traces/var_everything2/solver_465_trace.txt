I0428 19:45:08.492641 25747 caffe.cpp:218] Using GPUs 0
I0428 19:45:08.533438 25747 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:09.057657 25747 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test465.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:09.057829 25747 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test465.prototxt
I0428 19:45:09.058253 25747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:09.058279 25747 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:09.058394 25747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:09.058508 25747 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:09.058641 25747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:09.058675 25747 net.cpp:86] Creating Layer mnist
I0428 19:45:09.058691 25747 net.cpp:382] mnist -> data
I0428 19:45:09.058722 25747 net.cpp:382] mnist -> label
I0428 19:45:09.060004 25747 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:09.062513 25747 net.cpp:124] Setting up mnist
I0428 19:45:09.062535 25747 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:09.062544 25747 net.cpp:131] Top shape: 64 (64)
I0428 19:45:09.062551 25747 net.cpp:139] Memory required for data: 200960
I0428 19:45:09.062561 25747 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:09.062607 25747 net.cpp:86] Creating Layer conv0
I0428 19:45:09.062628 25747 net.cpp:408] conv0 <- data
I0428 19:45:09.062649 25747 net.cpp:382] conv0 -> conv0
I0428 19:45:09.352692 25747 net.cpp:124] Setting up conv0
I0428 19:45:09.352726 25747 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:09.352735 25747 net.cpp:139] Memory required for data: 495872
I0428 19:45:09.352758 25747 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:09.352778 25747 net.cpp:86] Creating Layer pool0
I0428 19:45:09.352797 25747 net.cpp:408] pool0 <- conv0
I0428 19:45:09.352808 25747 net.cpp:382] pool0 -> pool0
I0428 19:45:09.352882 25747 net.cpp:124] Setting up pool0
I0428 19:45:09.352895 25747 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:09.352901 25747 net.cpp:139] Memory required for data: 569600
I0428 19:45:09.352907 25747 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:09.352927 25747 net.cpp:86] Creating Layer conv1
I0428 19:45:09.352936 25747 net.cpp:408] conv1 <- pool0
I0428 19:45:09.352947 25747 net.cpp:382] conv1 -> conv1
I0428 19:45:09.356147 25747 net.cpp:124] Setting up conv1
I0428 19:45:09.356166 25747 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:45:09.356173 25747 net.cpp:139] Memory required for data: 1388800
I0428 19:45:09.356190 25747 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:09.356206 25747 net.cpp:86] Creating Layer pool1
I0428 19:45:09.356220 25747 net.cpp:408] pool1 <- conv1
I0428 19:45:09.356230 25747 net.cpp:382] pool1 -> pool1
I0428 19:45:09.356287 25747 net.cpp:124] Setting up pool1
I0428 19:45:09.356297 25747 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:45:09.356303 25747 net.cpp:139] Memory required for data: 1593600
I0428 19:45:09.356309 25747 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:09.356323 25747 net.cpp:86] Creating Layer ip1
I0428 19:45:09.356329 25747 net.cpp:408] ip1 <- pool1
I0428 19:45:09.356341 25747 net.cpp:382] ip1 -> ip1
I0428 19:45:09.356746 25747 net.cpp:124] Setting up ip1
I0428 19:45:09.356758 25747 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:09.356765 25747 net.cpp:139] Memory required for data: 1606400
I0428 19:45:09.356778 25747 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:09.356796 25747 net.cpp:86] Creating Layer relu1
I0428 19:45:09.356804 25747 net.cpp:408] relu1 <- ip1
I0428 19:45:09.356822 25747 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:09.357046 25747 net.cpp:124] Setting up relu1
I0428 19:45:09.357060 25747 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:09.357066 25747 net.cpp:139] Memory required for data: 1619200
I0428 19:45:09.357074 25747 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:09.357085 25747 net.cpp:86] Creating Layer ip2
I0428 19:45:09.357091 25747 net.cpp:408] ip2 <- ip1
I0428 19:45:09.357105 25747 net.cpp:382] ip2 -> ip2
I0428 19:45:09.357259 25747 net.cpp:124] Setting up ip2
I0428 19:45:09.357270 25747 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:09.357276 25747 net.cpp:139] Memory required for data: 1632000
I0428 19:45:09.357288 25747 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:09.357300 25747 net.cpp:86] Creating Layer relu2
I0428 19:45:09.357306 25747 net.cpp:408] relu2 <- ip2
I0428 19:45:09.357317 25747 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:09.358196 25747 net.cpp:124] Setting up relu2
I0428 19:45:09.358212 25747 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:09.358218 25747 net.cpp:139] Memory required for data: 1644800
I0428 19:45:09.358225 25747 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:09.358237 25747 net.cpp:86] Creating Layer ip3
I0428 19:45:09.358244 25747 net.cpp:408] ip3 <- ip2
I0428 19:45:09.358258 25747 net.cpp:382] ip3 -> ip3
I0428 19:45:09.358392 25747 net.cpp:124] Setting up ip3
I0428 19:45:09.358404 25747 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:09.358410 25747 net.cpp:139] Memory required for data: 1647360
I0428 19:45:09.358425 25747 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:09.358438 25747 net.cpp:86] Creating Layer relu3
I0428 19:45:09.358445 25747 net.cpp:408] relu3 <- ip3
I0428 19:45:09.358454 25747 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:09.358675 25747 net.cpp:124] Setting up relu3
I0428 19:45:09.358690 25747 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:09.358696 25747 net.cpp:139] Memory required for data: 1649920
I0428 19:45:09.358702 25747 layer_factory.hpp:77] Creating layer loss
I0428 19:45:09.358714 25747 net.cpp:86] Creating Layer loss
I0428 19:45:09.358721 25747 net.cpp:408] loss <- ip3
I0428 19:45:09.358728 25747 net.cpp:408] loss <- label
I0428 19:45:09.358738 25747 net.cpp:382] loss -> loss
I0428 19:45:09.358762 25747 layer_factory.hpp:77] Creating layer loss
I0428 19:45:09.359060 25747 net.cpp:124] Setting up loss
I0428 19:45:09.359076 25747 net.cpp:131] Top shape: (1)
I0428 19:45:09.359082 25747 net.cpp:134]     with loss weight 1
I0428 19:45:09.359112 25747 net.cpp:139] Memory required for data: 1649924
I0428 19:45:09.359120 25747 net.cpp:200] loss needs backward computation.
I0428 19:45:09.359127 25747 net.cpp:200] relu3 needs backward computation.
I0428 19:45:09.359133 25747 net.cpp:200] ip3 needs backward computation.
I0428 19:45:09.359139 25747 net.cpp:200] relu2 needs backward computation.
I0428 19:45:09.359144 25747 net.cpp:200] ip2 needs backward computation.
I0428 19:45:09.359150 25747 net.cpp:200] relu1 needs backward computation.
I0428 19:45:09.359156 25747 net.cpp:200] ip1 needs backward computation.
I0428 19:45:09.359163 25747 net.cpp:200] pool1 needs backward computation.
I0428 19:45:09.359169 25747 net.cpp:200] conv1 needs backward computation.
I0428 19:45:09.359174 25747 net.cpp:200] pool0 needs backward computation.
I0428 19:45:09.359180 25747 net.cpp:200] conv0 needs backward computation.
I0428 19:45:09.359187 25747 net.cpp:202] mnist does not need backward computation.
I0428 19:45:09.359192 25747 net.cpp:244] This network produces output loss
I0428 19:45:09.359210 25747 net.cpp:257] Network initialization done.
I0428 19:45:09.359617 25747 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test465.prototxt
I0428 19:45:09.359657 25747 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:09.359772 25747 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:45:09.359910 25747 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:09.359978 25747 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:09.360002 25747 net.cpp:86] Creating Layer mnist
I0428 19:45:09.360013 25747 net.cpp:382] mnist -> data
I0428 19:45:09.360026 25747 net.cpp:382] mnist -> label
I0428 19:45:09.360168 25747 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:09.362483 25747 net.cpp:124] Setting up mnist
I0428 19:45:09.362500 25747 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:09.362509 25747 net.cpp:131] Top shape: 100 (100)
I0428 19:45:09.362515 25747 net.cpp:139] Memory required for data: 314000
I0428 19:45:09.362521 25747 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:09.362534 25747 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:09.362540 25747 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:09.362550 25747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:09.362563 25747 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:09.362658 25747 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:09.362670 25747 net.cpp:131] Top shape: 100 (100)
I0428 19:45:09.362679 25747 net.cpp:131] Top shape: 100 (100)
I0428 19:45:09.362684 25747 net.cpp:139] Memory required for data: 314800
I0428 19:45:09.362690 25747 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:09.362707 25747 net.cpp:86] Creating Layer conv0
I0428 19:45:09.362715 25747 net.cpp:408] conv0 <- data
I0428 19:45:09.362725 25747 net.cpp:382] conv0 -> conv0
I0428 19:45:09.364504 25747 net.cpp:124] Setting up conv0
I0428 19:45:09.364523 25747 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:09.364529 25747 net.cpp:139] Memory required for data: 775600
I0428 19:45:09.364547 25747 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:09.364557 25747 net.cpp:86] Creating Layer pool0
I0428 19:45:09.364567 25747 net.cpp:408] pool0 <- conv0
I0428 19:45:09.364578 25747 net.cpp:382] pool0 -> pool0
I0428 19:45:09.364630 25747 net.cpp:124] Setting up pool0
I0428 19:45:09.364641 25747 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:09.364646 25747 net.cpp:139] Memory required for data: 890800
I0428 19:45:09.364652 25747 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:09.364671 25747 net.cpp:86] Creating Layer conv1
I0428 19:45:09.364679 25747 net.cpp:408] conv1 <- pool0
I0428 19:45:09.364689 25747 net.cpp:382] conv1 -> conv1
I0428 19:45:09.366456 25747 net.cpp:124] Setting up conv1
I0428 19:45:09.366477 25747 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:45:09.366483 25747 net.cpp:139] Memory required for data: 2170800
I0428 19:45:09.366502 25747 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:09.366513 25747 net.cpp:86] Creating Layer pool1
I0428 19:45:09.366520 25747 net.cpp:408] pool1 <- conv1
I0428 19:45:09.366536 25747 net.cpp:382] pool1 -> pool1
I0428 19:45:09.366595 25747 net.cpp:124] Setting up pool1
I0428 19:45:09.366605 25747 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:45:09.366612 25747 net.cpp:139] Memory required for data: 2490800
I0428 19:45:09.366618 25747 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:09.366629 25747 net.cpp:86] Creating Layer ip1
I0428 19:45:09.366637 25747 net.cpp:408] ip1 <- pool1
I0428 19:45:09.366652 25747 net.cpp:382] ip1 -> ip1
I0428 19:45:09.367071 25747 net.cpp:124] Setting up ip1
I0428 19:45:09.367084 25747 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:09.367103 25747 net.cpp:139] Memory required for data: 2510800
I0428 19:45:09.367118 25747 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:09.367131 25747 net.cpp:86] Creating Layer relu1
I0428 19:45:09.367139 25747 net.cpp:408] relu1 <- ip1
I0428 19:45:09.367148 25747 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:09.367388 25747 net.cpp:124] Setting up relu1
I0428 19:45:09.367401 25747 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:09.367409 25747 net.cpp:139] Memory required for data: 2530800
I0428 19:45:09.367418 25747 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:09.367434 25747 net.cpp:86] Creating Layer ip2
I0428 19:45:09.367441 25747 net.cpp:408] ip2 <- ip1
I0428 19:45:09.367452 25747 net.cpp:382] ip2 -> ip2
I0428 19:45:09.367599 25747 net.cpp:124] Setting up ip2
I0428 19:45:09.367610 25747 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:09.367616 25747 net.cpp:139] Memory required for data: 2550800
I0428 19:45:09.367627 25747 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:09.367636 25747 net.cpp:86] Creating Layer relu2
I0428 19:45:09.367645 25747 net.cpp:408] relu2 <- ip2
I0428 19:45:09.367655 25747 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:09.367854 25747 net.cpp:124] Setting up relu2
I0428 19:45:09.367866 25747 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:09.367871 25747 net.cpp:139] Memory required for data: 2570800
I0428 19:45:09.367877 25747 layer_factory.hpp:77] Creating layer ip3
I0428 19:45:09.367889 25747 net.cpp:86] Creating Layer ip3
I0428 19:45:09.367897 25747 net.cpp:408] ip3 <- ip2
I0428 19:45:09.367908 25747 net.cpp:382] ip3 -> ip3
I0428 19:45:09.368037 25747 net.cpp:124] Setting up ip3
I0428 19:45:09.368049 25747 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:09.368057 25747 net.cpp:139] Memory required for data: 2574800
I0428 19:45:09.368072 25747 layer_factory.hpp:77] Creating layer relu3
I0428 19:45:09.368080 25747 net.cpp:86] Creating Layer relu3
I0428 19:45:09.368088 25747 net.cpp:408] relu3 <- ip3
I0428 19:45:09.368095 25747 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:45:09.369037 25747 net.cpp:124] Setting up relu3
I0428 19:45:09.369055 25747 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:09.369060 25747 net.cpp:139] Memory required for data: 2578800
I0428 19:45:09.369067 25747 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:45:09.369078 25747 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:45:09.369084 25747 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:45:09.369096 25747 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:45:09.369107 25747 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:45:09.369161 25747 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:45:09.369171 25747 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:09.369179 25747 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:09.369186 25747 net.cpp:139] Memory required for data: 2586800
I0428 19:45:09.369192 25747 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:09.369204 25747 net.cpp:86] Creating Layer accuracy
I0428 19:45:09.369211 25747 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:45:09.369221 25747 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:09.369231 25747 net.cpp:382] accuracy -> accuracy
I0428 19:45:09.369246 25747 net.cpp:124] Setting up accuracy
I0428 19:45:09.369256 25747 net.cpp:131] Top shape: (1)
I0428 19:45:09.369262 25747 net.cpp:139] Memory required for data: 2586804
I0428 19:45:09.369268 25747 layer_factory.hpp:77] Creating layer loss
I0428 19:45:09.369278 25747 net.cpp:86] Creating Layer loss
I0428 19:45:09.369287 25747 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:45:09.369294 25747 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:09.369302 25747 net.cpp:382] loss -> loss
I0428 19:45:09.369320 25747 layer_factory.hpp:77] Creating layer loss
I0428 19:45:09.369608 25747 net.cpp:124] Setting up loss
I0428 19:45:09.369621 25747 net.cpp:131] Top shape: (1)
I0428 19:45:09.369627 25747 net.cpp:134]     with loss weight 1
I0428 19:45:09.369637 25747 net.cpp:139] Memory required for data: 2586808
I0428 19:45:09.369658 25747 net.cpp:200] loss needs backward computation.
I0428 19:45:09.369666 25747 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:09.369673 25747 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:45:09.369678 25747 net.cpp:200] relu3 needs backward computation.
I0428 19:45:09.369684 25747 net.cpp:200] ip3 needs backward computation.
I0428 19:45:09.369690 25747 net.cpp:200] relu2 needs backward computation.
I0428 19:45:09.369696 25747 net.cpp:200] ip2 needs backward computation.
I0428 19:45:09.369701 25747 net.cpp:200] relu1 needs backward computation.
I0428 19:45:09.369709 25747 net.cpp:200] ip1 needs backward computation.
I0428 19:45:09.369714 25747 net.cpp:200] pool1 needs backward computation.
I0428 19:45:09.369720 25747 net.cpp:200] conv1 needs backward computation.
I0428 19:45:09.369726 25747 net.cpp:200] pool0 needs backward computation.
I0428 19:45:09.369732 25747 net.cpp:200] conv0 needs backward computation.
I0428 19:45:09.369740 25747 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:09.369747 25747 net.cpp:202] mnist does not need backward computation.
I0428 19:45:09.369752 25747 net.cpp:244] This network produces output accuracy
I0428 19:45:09.369760 25747 net.cpp:244] This network produces output loss
I0428 19:45:09.369781 25747 net.cpp:257] Network initialization done.
I0428 19:45:09.369837 25747 solver.cpp:56] Solver scaffolding done.
I0428 19:45:09.370282 25747 caffe.cpp:248] Starting Optimization
I0428 19:45:09.370291 25747 solver.cpp:273] Solving LeNet
I0428 19:45:09.370296 25747 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:09.371270 25747 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:09.374903 25747 blocking_queue.cpp:49] Waiting for data
I0428 19:45:09.444844 25754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:09.445327 25747 solver.cpp:398]     Test net output #0: accuracy = 0.1075
I0428 19:45:09.445361 25747 solver.cpp:398]     Test net output #1: loss = 2.3112 (* 1 = 2.3112 loss)
I0428 19:45:09.448169 25747 solver.cpp:219] Iteration 0 (-1.83237e-31 iter/s, 0.0778333s/100 iters), loss = 2.31882
I0428 19:45:09.448197 25747 solver.cpp:238]     Train net output #0: loss = 2.31882 (* 1 = 2.31882 loss)
I0428 19:45:09.448216 25747 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:09.553135 25747 solver.cpp:219] Iteration 100 (953.07 iter/s, 0.104924s/100 iters), loss = 0.395518
I0428 19:45:09.553166 25747 solver.cpp:238]     Train net output #0: loss = 0.395518 (* 1 = 0.395518 loss)
I0428 19:45:09.553192 25747 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:09.657976 25747 solver.cpp:219] Iteration 200 (954.196 iter/s, 0.1048s/100 iters), loss = 0.367915
I0428 19:45:09.658006 25747 solver.cpp:238]     Train net output #0: loss = 0.367915 (* 1 = 0.367915 loss)
I0428 19:45:09.658032 25747 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:09.767002 25747 solver.cpp:219] Iteration 300 (917.589 iter/s, 0.108981s/100 iters), loss = 0.228915
I0428 19:45:09.767046 25747 solver.cpp:238]     Train net output #0: loss = 0.228915 (* 1 = 0.228915 loss)
I0428 19:45:09.767061 25747 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:09.874148 25747 solver.cpp:219] Iteration 400 (933.902 iter/s, 0.107078s/100 iters), loss = 0.0968925
I0428 19:45:09.874209 25747 solver.cpp:238]     Train net output #0: loss = 0.0968926 (* 1 = 0.0968926 loss)
I0428 19:45:09.874230 25747 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:09.989254 25747 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:10.044210 25754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:10.044721 25747 solver.cpp:398]     Test net output #0: accuracy = 0.9597
I0428 19:45:10.044746 25747 solver.cpp:398]     Test net output #1: loss = 0.133221 (* 1 = 0.133221 loss)
I0428 19:45:10.045843 25747 solver.cpp:219] Iteration 500 (582.647 iter/s, 0.17163s/100 iters), loss = 0.0997308
I0428 19:45:10.045905 25747 solver.cpp:238]     Train net output #0: loss = 0.0997308 (* 1 = 0.0997308 loss)
I0428 19:45:10.045917 25747 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:10.153992 25747 solver.cpp:219] Iteration 600 (925.251 iter/s, 0.108079s/100 iters), loss = 0.134737
I0428 19:45:10.154024 25747 solver.cpp:238]     Train net output #0: loss = 0.134737 (* 1 = 0.134737 loss)
I0428 19:45:10.154052 25747 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:10.259198 25747 solver.cpp:219] Iteration 700 (950.916 iter/s, 0.105162s/100 iters), loss = 0.155027
I0428 19:45:10.259232 25747 solver.cpp:238]     Train net output #0: loss = 0.155027 (* 1 = 0.155027 loss)
I0428 19:45:10.259258 25747 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:10.367648 25747 solver.cpp:219] Iteration 800 (922.478 iter/s, 0.108404s/100 iters), loss = 0.273684
I0428 19:45:10.367681 25747 solver.cpp:238]     Train net output #0: loss = 0.273685 (* 1 = 0.273685 loss)
I0428 19:45:10.367692 25747 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:10.469729 25747 solver.cpp:219] Iteration 900 (980.012 iter/s, 0.10204s/100 iters), loss = 0.135344
I0428 19:45:10.469758 25747 solver.cpp:238]     Train net output #0: loss = 0.135344 (* 1 = 0.135344 loss)
I0428 19:45:10.469784 25747 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:10.504570 25753 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:10.580723 25747 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:10.582482 25747 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:10.583429 25747 solver.cpp:311] Iteration 1000, loss = 0.160809
I0428 19:45:10.583447 25747 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:10.658363 25754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:10.658957 25747 solver.cpp:398]     Test net output #0: accuracy = 0.9713
I0428 19:45:10.658983 25747 solver.cpp:398]     Test net output #1: loss = 0.087493 (* 1 = 0.087493 loss)
I0428 19:45:10.658993 25747 solver.cpp:316] Optimization Done.
I0428 19:45:10.658998 25747 caffe.cpp:259] Optimization Done.
