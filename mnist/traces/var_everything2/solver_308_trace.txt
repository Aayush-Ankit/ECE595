I0428 19:39:34.173720 24331 caffe.cpp:218] Using GPUs 0
I0428 19:39:34.215392 24331 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:34.680199 24331 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test308.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:34.680332 24331 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test308.prototxt
I0428 19:39:34.680678 24331 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:34.680693 24331 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:34.680778 24331 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:39:34.680910 24331 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:34.681025 24331 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:34.681046 24331 net.cpp:86] Creating Layer mnist
I0428 19:39:34.681053 24331 net.cpp:382] mnist -> data
I0428 19:39:34.681072 24331 net.cpp:382] mnist -> label
I0428 19:39:34.682118 24331 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:34.684262 24331 net.cpp:124] Setting up mnist
I0428 19:39:34.684291 24331 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:34.684298 24331 net.cpp:131] Top shape: 64 (64)
I0428 19:39:34.684299 24331 net.cpp:139] Memory required for data: 200960
I0428 19:39:34.684305 24331 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:34.684317 24331 net.cpp:86] Creating Layer conv0
I0428 19:39:34.684334 24331 net.cpp:408] conv0 <- data
I0428 19:39:34.684345 24331 net.cpp:382] conv0 -> conv0
I0428 19:39:34.918967 24331 net.cpp:124] Setting up conv0
I0428 19:39:34.918994 24331 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:34.918998 24331 net.cpp:139] Memory required for data: 495872
I0428 19:39:34.919013 24331 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:34.919025 24331 net.cpp:86] Creating Layer pool0
I0428 19:39:34.919029 24331 net.cpp:408] pool0 <- conv0
I0428 19:39:34.919035 24331 net.cpp:382] pool0 -> pool0
I0428 19:39:34.919080 24331 net.cpp:124] Setting up pool0
I0428 19:39:34.919090 24331 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:34.919091 24331 net.cpp:139] Memory required for data: 569600
I0428 19:39:34.919095 24331 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:34.919106 24331 net.cpp:86] Creating Layer conv1
I0428 19:39:34.919109 24331 net.cpp:408] conv1 <- pool0
I0428 19:39:34.919113 24331 net.cpp:382] conv1 -> conv1
I0428 19:39:34.921082 24331 net.cpp:124] Setting up conv1
I0428 19:39:34.921097 24331 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:39:34.921100 24331 net.cpp:139] Memory required for data: 602368
I0428 19:39:34.921109 24331 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:34.921118 24331 net.cpp:86] Creating Layer pool1
I0428 19:39:34.921136 24331 net.cpp:408] pool1 <- conv1
I0428 19:39:34.921142 24331 net.cpp:382] pool1 -> pool1
I0428 19:39:34.921180 24331 net.cpp:124] Setting up pool1
I0428 19:39:34.921186 24331 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:39:34.921190 24331 net.cpp:139] Memory required for data: 610560
I0428 19:39:34.921192 24331 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:34.921200 24331 net.cpp:86] Creating Layer ip1
I0428 19:39:34.921203 24331 net.cpp:408] ip1 <- pool1
I0428 19:39:34.921207 24331 net.cpp:382] ip1 -> ip1
I0428 19:39:34.922200 24331 net.cpp:124] Setting up ip1
I0428 19:39:34.922212 24331 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:39:34.922216 24331 net.cpp:139] Memory required for data: 623360
I0428 19:39:34.922224 24331 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:34.922231 24331 net.cpp:86] Creating Layer relu1
I0428 19:39:34.922235 24331 net.cpp:408] relu1 <- ip1
I0428 19:39:34.922240 24331 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:34.922417 24331 net.cpp:124] Setting up relu1
I0428 19:39:34.922425 24331 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:39:34.922428 24331 net.cpp:139] Memory required for data: 636160
I0428 19:39:34.922432 24331 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:34.922439 24331 net.cpp:86] Creating Layer ip2
I0428 19:39:34.922442 24331 net.cpp:408] ip2 <- ip1
I0428 19:39:34.922448 24331 net.cpp:382] ip2 -> ip2
I0428 19:39:34.922551 24331 net.cpp:124] Setting up ip2
I0428 19:39:34.922559 24331 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:39:34.922562 24331 net.cpp:139] Memory required for data: 642560
I0428 19:39:34.922567 24331 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:34.922574 24331 net.cpp:86] Creating Layer relu2
I0428 19:39:34.922576 24331 net.cpp:408] relu2 <- ip2
I0428 19:39:34.922580 24331 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:34.923363 24331 net.cpp:124] Setting up relu2
I0428 19:39:34.923377 24331 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:39:34.923379 24331 net.cpp:139] Memory required for data: 648960
I0428 19:39:34.923383 24331 layer_factory.hpp:77] Creating layer ip3
I0428 19:39:34.923393 24331 net.cpp:86] Creating Layer ip3
I0428 19:39:34.923395 24331 net.cpp:408] ip3 <- ip2
I0428 19:39:34.923401 24331 net.cpp:382] ip3 -> ip3
I0428 19:39:34.923521 24331 net.cpp:124] Setting up ip3
I0428 19:39:34.923528 24331 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:34.923530 24331 net.cpp:139] Memory required for data: 651520
I0428 19:39:34.923537 24331 layer_factory.hpp:77] Creating layer relu3
I0428 19:39:34.923542 24331 net.cpp:86] Creating Layer relu3
I0428 19:39:34.923545 24331 net.cpp:408] relu3 <- ip3
I0428 19:39:34.923552 24331 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:39:34.923740 24331 net.cpp:124] Setting up relu3
I0428 19:39:34.923748 24331 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:34.923753 24331 net.cpp:139] Memory required for data: 654080
I0428 19:39:34.923755 24331 layer_factory.hpp:77] Creating layer loss
I0428 19:39:34.923760 24331 net.cpp:86] Creating Layer loss
I0428 19:39:34.923763 24331 net.cpp:408] loss <- ip3
I0428 19:39:34.923768 24331 net.cpp:408] loss <- label
I0428 19:39:34.923774 24331 net.cpp:382] loss -> loss
I0428 19:39:34.923791 24331 layer_factory.hpp:77] Creating layer loss
I0428 19:39:34.924049 24331 net.cpp:124] Setting up loss
I0428 19:39:34.924059 24331 net.cpp:131] Top shape: (1)
I0428 19:39:34.924062 24331 net.cpp:134]     with loss weight 1
I0428 19:39:34.924077 24331 net.cpp:139] Memory required for data: 654084
I0428 19:39:34.924079 24331 net.cpp:200] loss needs backward computation.
I0428 19:39:34.924083 24331 net.cpp:200] relu3 needs backward computation.
I0428 19:39:34.924085 24331 net.cpp:200] ip3 needs backward computation.
I0428 19:39:34.924088 24331 net.cpp:200] relu2 needs backward computation.
I0428 19:39:34.924091 24331 net.cpp:200] ip2 needs backward computation.
I0428 19:39:34.924093 24331 net.cpp:200] relu1 needs backward computation.
I0428 19:39:34.924096 24331 net.cpp:200] ip1 needs backward computation.
I0428 19:39:34.924099 24331 net.cpp:200] pool1 needs backward computation.
I0428 19:39:34.924101 24331 net.cpp:200] conv1 needs backward computation.
I0428 19:39:34.924104 24331 net.cpp:200] pool0 needs backward computation.
I0428 19:39:34.924108 24331 net.cpp:200] conv0 needs backward computation.
I0428 19:39:34.924110 24331 net.cpp:202] mnist does not need backward computation.
I0428 19:39:34.924113 24331 net.cpp:244] This network produces output loss
I0428 19:39:34.924123 24331 net.cpp:257] Network initialization done.
I0428 19:39:34.924468 24331 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test308.prototxt
I0428 19:39:34.924494 24331 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:34.924602 24331 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:39:34.924679 24331 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:34.924721 24331 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:34.924733 24331 net.cpp:86] Creating Layer mnist
I0428 19:39:34.924737 24331 net.cpp:382] mnist -> data
I0428 19:39:34.924744 24331 net.cpp:382] mnist -> label
I0428 19:39:34.924867 24331 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:34.926892 24331 net.cpp:124] Setting up mnist
I0428 19:39:34.926906 24331 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:34.926928 24331 net.cpp:131] Top shape: 100 (100)
I0428 19:39:34.926930 24331 net.cpp:139] Memory required for data: 314000
I0428 19:39:34.926934 24331 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:34.926944 24331 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:34.926949 24331 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:34.926954 24331 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:34.926960 24331 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:34.927036 24331 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:34.927043 24331 net.cpp:131] Top shape: 100 (100)
I0428 19:39:34.927047 24331 net.cpp:131] Top shape: 100 (100)
I0428 19:39:34.927050 24331 net.cpp:139] Memory required for data: 314800
I0428 19:39:34.927053 24331 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:34.927064 24331 net.cpp:86] Creating Layer conv0
I0428 19:39:34.927068 24331 net.cpp:408] conv0 <- data
I0428 19:39:34.927074 24331 net.cpp:382] conv0 -> conv0
I0428 19:39:34.928865 24331 net.cpp:124] Setting up conv0
I0428 19:39:34.928894 24331 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:34.928899 24331 net.cpp:139] Memory required for data: 775600
I0428 19:39:34.928922 24331 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:34.928930 24331 net.cpp:86] Creating Layer pool0
I0428 19:39:34.928933 24331 net.cpp:408] pool0 <- conv0
I0428 19:39:34.928939 24331 net.cpp:382] pool0 -> pool0
I0428 19:39:34.928977 24331 net.cpp:124] Setting up pool0
I0428 19:39:34.928982 24331 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:34.928984 24331 net.cpp:139] Memory required for data: 890800
I0428 19:39:34.928987 24331 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:34.928997 24331 net.cpp:86] Creating Layer conv1
I0428 19:39:34.928999 24331 net.cpp:408] conv1 <- pool0
I0428 19:39:34.929004 24331 net.cpp:382] conv1 -> conv1
I0428 19:39:34.930567 24331 net.cpp:124] Setting up conv1
I0428 19:39:34.930579 24331 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:39:34.930600 24331 net.cpp:139] Memory required for data: 942000
I0428 19:39:34.930610 24331 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:34.930616 24331 net.cpp:86] Creating Layer pool1
I0428 19:39:34.930620 24331 net.cpp:408] pool1 <- conv1
I0428 19:39:34.930626 24331 net.cpp:382] pool1 -> pool1
I0428 19:39:34.930665 24331 net.cpp:124] Setting up pool1
I0428 19:39:34.930670 24331 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:39:34.930672 24331 net.cpp:139] Memory required for data: 954800
I0428 19:39:34.930675 24331 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:34.930682 24331 net.cpp:86] Creating Layer ip1
I0428 19:39:34.930685 24331 net.cpp:408] ip1 <- pool1
I0428 19:39:34.930691 24331 net.cpp:382] ip1 -> ip1
I0428 19:39:34.930837 24331 net.cpp:124] Setting up ip1
I0428 19:39:34.930845 24331 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:39:34.930865 24331 net.cpp:139] Memory required for data: 974800
I0428 19:39:34.930872 24331 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:34.930878 24331 net.cpp:86] Creating Layer relu1
I0428 19:39:34.930881 24331 net.cpp:408] relu1 <- ip1
I0428 19:39:34.930886 24331 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:34.931062 24331 net.cpp:124] Setting up relu1
I0428 19:39:34.931071 24331 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:39:34.931073 24331 net.cpp:139] Memory required for data: 994800
I0428 19:39:34.931077 24331 layer_factory.hpp:77] Creating layer ip2
I0428 19:39:34.931084 24331 net.cpp:86] Creating Layer ip2
I0428 19:39:34.931087 24331 net.cpp:408] ip2 <- ip1
I0428 19:39:34.931093 24331 net.cpp:382] ip2 -> ip2
I0428 19:39:34.931206 24331 net.cpp:124] Setting up ip2
I0428 19:39:34.931213 24331 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:39:34.931216 24331 net.cpp:139] Memory required for data: 1004800
I0428 19:39:34.931222 24331 layer_factory.hpp:77] Creating layer relu2
I0428 19:39:34.931227 24331 net.cpp:86] Creating Layer relu2
I0428 19:39:34.931231 24331 net.cpp:408] relu2 <- ip2
I0428 19:39:34.931236 24331 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:39:34.931474 24331 net.cpp:124] Setting up relu2
I0428 19:39:34.931483 24331 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:39:34.931486 24331 net.cpp:139] Memory required for data: 1014800
I0428 19:39:34.931489 24331 layer_factory.hpp:77] Creating layer ip3
I0428 19:39:34.931495 24331 net.cpp:86] Creating Layer ip3
I0428 19:39:34.931499 24331 net.cpp:408] ip3 <- ip2
I0428 19:39:34.931504 24331 net.cpp:382] ip3 -> ip3
I0428 19:39:34.931655 24331 net.cpp:124] Setting up ip3
I0428 19:39:34.931663 24331 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:34.931665 24331 net.cpp:139] Memory required for data: 1018800
I0428 19:39:34.931674 24331 layer_factory.hpp:77] Creating layer relu3
I0428 19:39:34.931679 24331 net.cpp:86] Creating Layer relu3
I0428 19:39:34.931684 24331 net.cpp:408] relu3 <- ip3
I0428 19:39:34.931687 24331 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:39:34.932550 24331 net.cpp:124] Setting up relu3
I0428 19:39:34.932565 24331 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:34.932585 24331 net.cpp:139] Memory required for data: 1022800
I0428 19:39:34.932588 24331 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:39:34.932593 24331 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:39:34.932597 24331 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:39:34.932602 24331 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:39:34.932610 24331 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:39:34.932673 24331 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:39:34.932679 24331 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:34.932682 24331 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:34.932685 24331 net.cpp:139] Memory required for data: 1030800
I0428 19:39:34.932688 24331 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:34.932694 24331 net.cpp:86] Creating Layer accuracy
I0428 19:39:34.932698 24331 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:39:34.932718 24331 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:34.932723 24331 net.cpp:382] accuracy -> accuracy
I0428 19:39:34.932729 24331 net.cpp:124] Setting up accuracy
I0428 19:39:34.932734 24331 net.cpp:131] Top shape: (1)
I0428 19:39:34.932736 24331 net.cpp:139] Memory required for data: 1030804
I0428 19:39:34.932756 24331 layer_factory.hpp:77] Creating layer loss
I0428 19:39:34.932760 24331 net.cpp:86] Creating Layer loss
I0428 19:39:34.932766 24331 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:39:34.932771 24331 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:34.932775 24331 net.cpp:382] loss -> loss
I0428 19:39:34.932782 24331 layer_factory.hpp:77] Creating layer loss
I0428 19:39:34.933080 24331 net.cpp:124] Setting up loss
I0428 19:39:34.933090 24331 net.cpp:131] Top shape: (1)
I0428 19:39:34.933094 24331 net.cpp:134]     with loss weight 1
I0428 19:39:34.933100 24331 net.cpp:139] Memory required for data: 1030808
I0428 19:39:34.933121 24331 net.cpp:200] loss needs backward computation.
I0428 19:39:34.933140 24331 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:34.933145 24331 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:39:34.933147 24331 net.cpp:200] relu3 needs backward computation.
I0428 19:39:34.933167 24331 net.cpp:200] ip3 needs backward computation.
I0428 19:39:34.933171 24331 net.cpp:200] relu2 needs backward computation.
I0428 19:39:34.933173 24331 net.cpp:200] ip2 needs backward computation.
I0428 19:39:34.933176 24331 net.cpp:200] relu1 needs backward computation.
I0428 19:39:34.933184 24331 net.cpp:200] ip1 needs backward computation.
I0428 19:39:34.933192 24331 net.cpp:200] pool1 needs backward computation.
I0428 19:39:34.933194 24331 net.cpp:200] conv1 needs backward computation.
I0428 19:39:34.933198 24331 net.cpp:200] pool0 needs backward computation.
I0428 19:39:34.933202 24331 net.cpp:200] conv0 needs backward computation.
I0428 19:39:34.933204 24331 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:34.933209 24331 net.cpp:202] mnist does not need backward computation.
I0428 19:39:34.933212 24331 net.cpp:244] This network produces output accuracy
I0428 19:39:34.933214 24331 net.cpp:244] This network produces output loss
I0428 19:39:34.933226 24331 net.cpp:257] Network initialization done.
I0428 19:39:34.933277 24331 solver.cpp:56] Solver scaffolding done.
I0428 19:39:34.933676 24331 caffe.cpp:248] Starting Optimization
I0428 19:39:34.933682 24331 solver.cpp:273] Solving LeNet
I0428 19:39:34.933684 24331 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:34.933938 24331 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:34.937278 24331 blocking_queue.cpp:49] Waiting for data
I0428 19:39:35.007764 24338 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:35.008203 24331 solver.cpp:398]     Test net output #0: accuracy = 0.0981
I0428 19:39:35.008224 24331 solver.cpp:398]     Test net output #1: loss = 2.33067 (* 1 = 2.33067 loss)
I0428 19:39:35.010171 24331 solver.cpp:219] Iteration 0 (0 iter/s, 0.0764119s/100 iters), loss = 2.33133
I0428 19:39:35.010215 24331 solver.cpp:238]     Train net output #0: loss = 2.33133 (* 1 = 2.33133 loss)
I0428 19:39:35.010227 24331 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:35.078471 24331 solver.cpp:219] Iteration 100 (1465.3 iter/s, 0.0682456s/100 iters), loss = 1.62385
I0428 19:39:35.078510 24331 solver.cpp:238]     Train net output #0: loss = 1.62385 (* 1 = 1.62385 loss)
I0428 19:39:35.078516 24331 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:35.145443 24331 solver.cpp:219] Iteration 200 (1493.88 iter/s, 0.0669399s/100 iters), loss = 0.618981
I0428 19:39:35.145483 24331 solver.cpp:238]     Train net output #0: loss = 0.618981 (* 1 = 0.618981 loss)
I0428 19:39:35.145489 24331 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:35.211737 24331 solver.cpp:219] Iteration 300 (1509.53 iter/s, 0.0662458s/100 iters), loss = 0.361936
I0428 19:39:35.211776 24331 solver.cpp:238]     Train net output #0: loss = 0.361936 (* 1 = 0.361936 loss)
I0428 19:39:35.211782 24331 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:35.277438 24331 solver.cpp:219] Iteration 400 (1522.81 iter/s, 0.0656681s/100 iters), loss = 0.249231
I0428 19:39:35.277477 24331 solver.cpp:238]     Train net output #0: loss = 0.249231 (* 1 = 0.249231 loss)
I0428 19:39:35.277499 24331 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:35.343564 24331 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:35.395525 24338 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:35.395970 24331 solver.cpp:398]     Test net output #0: accuracy = 0.9112
I0428 19:39:35.396006 24331 solver.cpp:398]     Test net output #1: loss = 0.286371 (* 1 = 0.286371 loss)
I0428 19:39:35.396728 24331 solver.cpp:219] Iteration 500 (838.526 iter/s, 0.119257s/100 iters), loss = 0.440826
I0428 19:39:35.396769 24331 solver.cpp:238]     Train net output #0: loss = 0.440826 (* 1 = 0.440826 loss)
I0428 19:39:35.396790 24331 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:35.463922 24331 solver.cpp:219] Iteration 600 (1488.98 iter/s, 0.0671601s/100 iters), loss = 0.295624
I0428 19:39:35.463963 24331 solver.cpp:238]     Train net output #0: loss = 0.295624 (* 1 = 0.295624 loss)
I0428 19:39:35.463968 24331 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:35.530413 24331 solver.cpp:219] Iteration 700 (1504.69 iter/s, 0.0664587s/100 iters), loss = 0.472834
I0428 19:39:35.530453 24331 solver.cpp:238]     Train net output #0: loss = 0.472834 (* 1 = 0.472834 loss)
I0428 19:39:35.530460 24331 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:35.596866 24331 solver.cpp:219] Iteration 800 (1505.6 iter/s, 0.0664187s/100 iters), loss = 0.186867
I0428 19:39:35.596907 24331 solver.cpp:238]     Train net output #0: loss = 0.186867 (* 1 = 0.186867 loss)
I0428 19:39:35.596913 24331 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:35.684294 24331 solver.cpp:219] Iteration 900 (1144.51 iter/s, 0.0873738s/100 iters), loss = 0.379192
I0428 19:39:35.684336 24331 solver.cpp:238]     Train net output #0: loss = 0.379192 (* 1 = 0.379192 loss)
I0428 19:39:35.684346 24331 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:35.712913 24337 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:35.762591 24331 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:35.763370 24331 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:35.764164 24331 solver.cpp:311] Iteration 1000, loss = 0.292759
I0428 19:39:35.764197 24331 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:35.818624 24338 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:35.820305 24331 solver.cpp:398]     Test net output #0: accuracy = 0.9334
I0428 19:39:35.820343 24331 solver.cpp:398]     Test net output #1: loss = 0.211363 (* 1 = 0.211363 loss)
I0428 19:39:35.820351 24331 solver.cpp:316] Optimization Done.
I0428 19:39:35.820356 24331 caffe.cpp:259] Optimization Done.
