I0428 19:48:31.957648 26504 caffe.cpp:218] Using GPUs 0
I0428 19:48:31.998461 26504 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:32.513417 26504 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test547.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:32.513592 26504 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test547.prototxt
I0428 19:48:32.513941 26504 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:32.513964 26504 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:32.514060 26504 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:48:32.514159 26504 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:32.514289 26504 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:32.514323 26504 net.cpp:86] Creating Layer mnist
I0428 19:48:32.514335 26504 net.cpp:382] mnist -> data
I0428 19:48:32.514365 26504 net.cpp:382] mnist -> label
I0428 19:48:32.515568 26504 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:32.518051 26504 net.cpp:124] Setting up mnist
I0428 19:48:32.518072 26504 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:32.518101 26504 net.cpp:131] Top shape: 64 (64)
I0428 19:48:32.518110 26504 net.cpp:139] Memory required for data: 200960
I0428 19:48:32.518121 26504 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:32.518143 26504 net.cpp:86] Creating Layer conv0
I0428 19:48:32.518152 26504 net.cpp:408] conv0 <- data
I0428 19:48:32.518173 26504 net.cpp:382] conv0 -> conv0
I0428 19:48:32.808033 26504 net.cpp:124] Setting up conv0
I0428 19:48:32.808068 26504 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:32.808075 26504 net.cpp:139] Memory required for data: 938240
I0428 19:48:32.808099 26504 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:32.808120 26504 net.cpp:86] Creating Layer pool0
I0428 19:48:32.808137 26504 net.cpp:408] pool0 <- conv0
I0428 19:48:32.808148 26504 net.cpp:382] pool0 -> pool0
I0428 19:48:32.808218 26504 net.cpp:124] Setting up pool0
I0428 19:48:32.808229 26504 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:32.808257 26504 net.cpp:139] Memory required for data: 1122560
I0428 19:48:32.808264 26504 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:32.808284 26504 net.cpp:86] Creating Layer conv1
I0428 19:48:32.808291 26504 net.cpp:408] conv1 <- pool0
I0428 19:48:32.808302 26504 net.cpp:382] conv1 -> conv1
I0428 19:48:32.811740 26504 net.cpp:124] Setting up conv1
I0428 19:48:32.811774 26504 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:32.811784 26504 net.cpp:139] Memory required for data: 1204480
I0428 19:48:32.811808 26504 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:32.811827 26504 net.cpp:86] Creating Layer pool1
I0428 19:48:32.811837 26504 net.cpp:408] pool1 <- conv1
I0428 19:48:32.811848 26504 net.cpp:382] pool1 -> pool1
I0428 19:48:32.811930 26504 net.cpp:124] Setting up pool1
I0428 19:48:32.811942 26504 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:32.811951 26504 net.cpp:139] Memory required for data: 1224960
I0428 19:48:32.811957 26504 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:32.811974 26504 net.cpp:86] Creating Layer ip1
I0428 19:48:32.811981 26504 net.cpp:408] ip1 <- pool1
I0428 19:48:32.811992 26504 net.cpp:382] ip1 -> ip1
I0428 19:48:32.812201 26504 net.cpp:124] Setting up ip1
I0428 19:48:32.812213 26504 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:32.812222 26504 net.cpp:139] Memory required for data: 1227520
I0428 19:48:32.812237 26504 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:32.812249 26504 net.cpp:86] Creating Layer relu1
I0428 19:48:32.812258 26504 net.cpp:408] relu1 <- ip1
I0428 19:48:32.812268 26504 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:32.812609 26504 net.cpp:124] Setting up relu1
I0428 19:48:32.812626 26504 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:32.812634 26504 net.cpp:139] Memory required for data: 1230080
I0428 19:48:32.812641 26504 layer_factory.hpp:77] Creating layer loss
I0428 19:48:32.812654 26504 net.cpp:86] Creating Layer loss
I0428 19:48:32.812664 26504 net.cpp:408] loss <- ip1
I0428 19:48:32.812671 26504 net.cpp:408] loss <- label
I0428 19:48:32.812683 26504 net.cpp:382] loss -> loss
I0428 19:48:32.812718 26504 layer_factory.hpp:77] Creating layer loss
I0428 19:48:32.814354 26504 net.cpp:124] Setting up loss
I0428 19:48:32.814381 26504 net.cpp:131] Top shape: (1)
I0428 19:48:32.814391 26504 net.cpp:134]     with loss weight 1
I0428 19:48:32.814417 26504 net.cpp:139] Memory required for data: 1230084
I0428 19:48:32.814425 26504 net.cpp:200] loss needs backward computation.
I0428 19:48:32.814435 26504 net.cpp:200] relu1 needs backward computation.
I0428 19:48:32.814443 26504 net.cpp:200] ip1 needs backward computation.
I0428 19:48:32.814450 26504 net.cpp:200] pool1 needs backward computation.
I0428 19:48:32.814458 26504 net.cpp:200] conv1 needs backward computation.
I0428 19:48:32.814465 26504 net.cpp:200] pool0 needs backward computation.
I0428 19:48:32.814473 26504 net.cpp:200] conv0 needs backward computation.
I0428 19:48:32.814481 26504 net.cpp:202] mnist does not need backward computation.
I0428 19:48:32.814489 26504 net.cpp:244] This network produces output loss
I0428 19:48:32.814507 26504 net.cpp:257] Network initialization done.
I0428 19:48:32.815038 26504 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test547.prototxt
I0428 19:48:32.815085 26504 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:32.815237 26504 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:48:32.815381 26504 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:32.815459 26504 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:32.815488 26504 net.cpp:86] Creating Layer mnist
I0428 19:48:32.815498 26504 net.cpp:382] mnist -> data
I0428 19:48:32.815515 26504 net.cpp:382] mnist -> label
I0428 19:48:32.815685 26504 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:32.819187 26504 net.cpp:124] Setting up mnist
I0428 19:48:32.819214 26504 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:32.819226 26504 net.cpp:131] Top shape: 100 (100)
I0428 19:48:32.819239 26504 net.cpp:139] Memory required for data: 314000
I0428 19:48:32.819247 26504 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:32.819260 26504 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:32.819269 26504 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:32.819280 26504 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:32.819294 26504 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:32.819399 26504 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:32.819413 26504 net.cpp:131] Top shape: 100 (100)
I0428 19:48:32.819422 26504 net.cpp:131] Top shape: 100 (100)
I0428 19:48:32.819427 26504 net.cpp:139] Memory required for data: 314800
I0428 19:48:32.819435 26504 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:32.819453 26504 net.cpp:86] Creating Layer conv0
I0428 19:48:32.819461 26504 net.cpp:408] conv0 <- data
I0428 19:48:32.819473 26504 net.cpp:382] conv0 -> conv0
I0428 19:48:32.821202 26504 net.cpp:124] Setting up conv0
I0428 19:48:32.821226 26504 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:32.821233 26504 net.cpp:139] Memory required for data: 1466800
I0428 19:48:32.821251 26504 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:32.821264 26504 net.cpp:86] Creating Layer pool0
I0428 19:48:32.821272 26504 net.cpp:408] pool0 <- conv0
I0428 19:48:32.821290 26504 net.cpp:382] pool0 -> pool0
I0428 19:48:32.821364 26504 net.cpp:124] Setting up pool0
I0428 19:48:32.821379 26504 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:32.821385 26504 net.cpp:139] Memory required for data: 1754800
I0428 19:48:32.821391 26504 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:32.821411 26504 net.cpp:86] Creating Layer conv1
I0428 19:48:32.821419 26504 net.cpp:408] conv1 <- pool0
I0428 19:48:32.821430 26504 net.cpp:382] conv1 -> conv1
I0428 19:48:32.825150 26504 net.cpp:124] Setting up conv1
I0428 19:48:32.825176 26504 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:32.825182 26504 net.cpp:139] Memory required for data: 1882800
I0428 19:48:32.825201 26504 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:32.825217 26504 net.cpp:86] Creating Layer pool1
I0428 19:48:32.825244 26504 net.cpp:408] pool1 <- conv1
I0428 19:48:32.825254 26504 net.cpp:382] pool1 -> pool1
I0428 19:48:32.825335 26504 net.cpp:124] Setting up pool1
I0428 19:48:32.825348 26504 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:32.825356 26504 net.cpp:139] Memory required for data: 1914800
I0428 19:48:32.825361 26504 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:32.825374 26504 net.cpp:86] Creating Layer ip1
I0428 19:48:32.825382 26504 net.cpp:408] ip1 <- pool1
I0428 19:48:32.825392 26504 net.cpp:382] ip1 -> ip1
I0428 19:48:32.825594 26504 net.cpp:124] Setting up ip1
I0428 19:48:32.825608 26504 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:32.825615 26504 net.cpp:139] Memory required for data: 1918800
I0428 19:48:32.825629 26504 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:32.825642 26504 net.cpp:86] Creating Layer relu1
I0428 19:48:32.825650 26504 net.cpp:408] relu1 <- ip1
I0428 19:48:32.825659 26504 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:32.827038 26504 net.cpp:124] Setting up relu1
I0428 19:48:32.827062 26504 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:32.827071 26504 net.cpp:139] Memory required for data: 1922800
I0428 19:48:32.827077 26504 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:48:32.827090 26504 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:48:32.827098 26504 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:48:32.827108 26504 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:48:32.827122 26504 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:48:32.827203 26504 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:48:32.827214 26504 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:32.827224 26504 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:32.827229 26504 net.cpp:139] Memory required for data: 1930800
I0428 19:48:32.827235 26504 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:32.827245 26504 net.cpp:86] Creating Layer accuracy
I0428 19:48:32.827253 26504 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:48:32.827261 26504 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:32.827273 26504 net.cpp:382] accuracy -> accuracy
I0428 19:48:32.827289 26504 net.cpp:124] Setting up accuracy
I0428 19:48:32.827298 26504 net.cpp:131] Top shape: (1)
I0428 19:48:32.827304 26504 net.cpp:139] Memory required for data: 1930804
I0428 19:48:32.827311 26504 layer_factory.hpp:77] Creating layer loss
I0428 19:48:32.827322 26504 net.cpp:86] Creating Layer loss
I0428 19:48:32.827330 26504 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:48:32.827338 26504 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:32.827347 26504 net.cpp:382] loss -> loss
I0428 19:48:32.827360 26504 layer_factory.hpp:77] Creating layer loss
I0428 19:48:32.827821 26504 net.cpp:124] Setting up loss
I0428 19:48:32.827836 26504 net.cpp:131] Top shape: (1)
I0428 19:48:32.827843 26504 net.cpp:134]     with loss weight 1
I0428 19:48:32.827858 26504 net.cpp:139] Memory required for data: 1930808
I0428 19:48:32.827864 26504 net.cpp:200] loss needs backward computation.
I0428 19:48:32.827873 26504 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:32.827882 26504 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:48:32.827888 26504 net.cpp:200] relu1 needs backward computation.
I0428 19:48:32.827894 26504 net.cpp:200] ip1 needs backward computation.
I0428 19:48:32.827900 26504 net.cpp:200] pool1 needs backward computation.
I0428 19:48:32.827906 26504 net.cpp:200] conv1 needs backward computation.
I0428 19:48:32.827913 26504 net.cpp:200] pool0 needs backward computation.
I0428 19:48:32.827919 26504 net.cpp:200] conv0 needs backward computation.
I0428 19:48:32.827926 26504 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:32.827934 26504 net.cpp:202] mnist does not need backward computation.
I0428 19:48:32.827941 26504 net.cpp:244] This network produces output accuracy
I0428 19:48:32.827947 26504 net.cpp:244] This network produces output loss
I0428 19:48:32.827967 26504 net.cpp:257] Network initialization done.
I0428 19:48:32.828050 26504 solver.cpp:56] Solver scaffolding done.
I0428 19:48:32.828446 26504 caffe.cpp:248] Starting Optimization
I0428 19:48:32.828456 26504 solver.cpp:273] Solving LeNet
I0428 19:48:32.828462 26504 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:32.829741 26504 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:32.844805 26504 blocking_queue.cpp:49] Waiting for data
I0428 19:48:32.882916 26511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:32.883419 26504 solver.cpp:398]     Test net output #0: accuracy = 0.068
I0428 19:48:32.883446 26504 solver.cpp:398]     Test net output #1: loss = 2.44599 (* 1 = 2.44599 loss)
I0428 19:48:32.885546 26504 solver.cpp:219] Iteration 0 (-1.01887e-34 iter/s, 0.0570491s/100 iters), loss = 2.51082
I0428 19:48:32.885583 26504 solver.cpp:238]     Train net output #0: loss = 2.51082 (* 1 = 2.51082 loss)
I0428 19:48:32.885601 26504 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:32.955494 26504 solver.cpp:219] Iteration 100 (1430.61 iter/s, 0.0699003s/100 iters), loss = 1.29851
I0428 19:48:32.955525 26504 solver.cpp:238]     Train net output #0: loss = 1.29851 (* 1 = 1.29851 loss)
I0428 19:48:32.955533 26504 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:33.017752 26504 solver.cpp:219] Iteration 200 (1607.25 iter/s, 0.0622182s/100 iters), loss = 0.909658
I0428 19:48:33.017782 26504 solver.cpp:238]     Train net output #0: loss = 0.909658 (* 1 = 0.909658 loss)
I0428 19:48:33.017789 26504 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:33.077873 26504 solver.cpp:219] Iteration 300 (1664.36 iter/s, 0.0600832s/100 iters), loss = 0.913601
I0428 19:48:33.077903 26504 solver.cpp:238]     Train net output #0: loss = 0.913601 (* 1 = 0.913601 loss)
I0428 19:48:33.077911 26504 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:33.146839 26504 solver.cpp:219] Iteration 400 (1450.82 iter/s, 0.0689265s/100 iters), loss = 0.768444
I0428 19:48:33.146868 26504 solver.cpp:238]     Train net output #0: loss = 0.768444 (* 1 = 0.768444 loss)
I0428 19:48:33.146877 26504 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:33.206476 26504 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:33.280773 26511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:33.281252 26504 solver.cpp:398]     Test net output #0: accuracy = 0.8202
I0428 19:48:33.281275 26504 solver.cpp:398]     Test net output #1: loss = 0.665279 (* 1 = 0.665279 loss)
I0428 19:48:33.281963 26504 solver.cpp:219] Iteration 500 (740.29 iter/s, 0.135082s/100 iters), loss = 0.658826
I0428 19:48:33.281987 26504 solver.cpp:238]     Train net output #0: loss = 0.658826 (* 1 = 0.658826 loss)
I0428 19:48:33.281994 26504 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:33.350374 26504 solver.cpp:219] Iteration 600 (1462.53 iter/s, 0.0683747s/100 iters), loss = 0.702296
I0428 19:48:33.350410 26504 solver.cpp:238]     Train net output #0: loss = 0.702296 (* 1 = 0.702296 loss)
I0428 19:48:33.350417 26504 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:33.410225 26504 solver.cpp:219] Iteration 700 (1672.02 iter/s, 0.0598077s/100 iters), loss = 0.688489
I0428 19:48:33.410255 26504 solver.cpp:238]     Train net output #0: loss = 0.688489 (* 1 = 0.688489 loss)
I0428 19:48:33.410262 26504 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:33.470299 26504 solver.cpp:219] Iteration 800 (1665.72 iter/s, 0.060034s/100 iters), loss = 0.802607
I0428 19:48:33.470329 26504 solver.cpp:238]     Train net output #0: loss = 0.802607 (* 1 = 0.802607 loss)
I0428 19:48:33.470335 26504 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:33.530053 26504 solver.cpp:219] Iteration 900 (1674.55 iter/s, 0.0597176s/100 iters), loss = 0.362557
I0428 19:48:33.530083 26504 solver.cpp:238]     Train net output #0: loss = 0.362557 (* 1 = 0.362557 loss)
I0428 19:48:33.530091 26504 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:33.550508 26510 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:33.589540 26504 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:33.590080 26504 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:33.590554 26504 solver.cpp:311] Iteration 1000, loss = 0.181681
I0428 19:48:33.590580 26504 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:33.666343 26511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:33.666879 26504 solver.cpp:398]     Test net output #0: accuracy = 0.9478
I0428 19:48:33.666914 26504 solver.cpp:398]     Test net output #1: loss = 0.181941 (* 1 = 0.181941 loss)
I0428 19:48:33.666929 26504 solver.cpp:316] Optimization Done.
I0428 19:48:33.666939 26504 caffe.cpp:259] Optimization Done.
