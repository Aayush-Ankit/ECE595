I0428 19:32:35.410796 22873 caffe.cpp:218] Using GPUs 0
I0428 19:32:35.450078 22873 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:32:35.911161 22873 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test157.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:32:35.911312 22873 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test157.prototxt
I0428 19:32:35.911561 22873 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:32:35.911571 22873 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:32:35.911626 22873 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:32:35.911676 22873 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:35.911756 22873 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:32:35.911774 22873 net.cpp:86] Creating Layer mnist
I0428 19:32:35.911782 22873 net.cpp:382] mnist -> data
I0428 19:32:35.911800 22873 net.cpp:382] mnist -> label
I0428 19:32:35.912798 22873 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:32:35.914984 22873 net.cpp:124] Setting up mnist
I0428 19:32:35.915014 22873 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:32:35.915019 22873 net.cpp:131] Top shape: 64 (64)
I0428 19:32:35.915022 22873 net.cpp:139] Memory required for data: 200960
I0428 19:32:35.915027 22873 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:35.915060 22873 net.cpp:86] Creating Layer conv0
I0428 19:32:35.915065 22873 net.cpp:408] conv0 <- data
I0428 19:32:35.915073 22873 net.cpp:382] conv0 -> conv0
I0428 19:32:36.143236 22873 net.cpp:124] Setting up conv0
I0428 19:32:36.143278 22873 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 19:32:36.143282 22873 net.cpp:139] Memory required for data: 3887360
I0428 19:32:36.143301 22873 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:36.143314 22873 net.cpp:86] Creating Layer pool0
I0428 19:32:36.143317 22873 net.cpp:408] pool0 <- conv0
I0428 19:32:36.143323 22873 net.cpp:382] pool0 -> pool0
I0428 19:32:36.143380 22873 net.cpp:124] Setting up pool0
I0428 19:32:36.143386 22873 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 19:32:36.143388 22873 net.cpp:139] Memory required for data: 4808960
I0428 19:32:36.143393 22873 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:36.143399 22873 net.cpp:86] Creating Layer ip1
I0428 19:32:36.143401 22873 net.cpp:408] ip1 <- pool0
I0428 19:32:36.143406 22873 net.cpp:382] ip1 -> ip1
I0428 19:32:36.143748 22873 net.cpp:124] Setting up ip1
I0428 19:32:36.143756 22873 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:36.143774 22873 net.cpp:139] Memory required for data: 4811520
I0428 19:32:36.143782 22873 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:36.143788 22873 net.cpp:86] Creating Layer relu1
I0428 19:32:36.143796 22873 net.cpp:408] relu1 <- ip1
I0428 19:32:36.143801 22873 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:36.143976 22873 net.cpp:124] Setting up relu1
I0428 19:32:36.143985 22873 net.cpp:131] Top shape: 64 10 (640)
I0428 19:32:36.143988 22873 net.cpp:139] Memory required for data: 4814080
I0428 19:32:36.143991 22873 layer_factory.hpp:77] Creating layer loss
I0428 19:32:36.144011 22873 net.cpp:86] Creating Layer loss
I0428 19:32:36.144014 22873 net.cpp:408] loss <- ip1
I0428 19:32:36.144017 22873 net.cpp:408] loss <- label
I0428 19:32:36.144022 22873 net.cpp:382] loss -> loss
I0428 19:32:36.144040 22873 layer_factory.hpp:77] Creating layer loss
I0428 19:32:36.144937 22873 net.cpp:124] Setting up loss
I0428 19:32:36.144948 22873 net.cpp:131] Top shape: (1)
I0428 19:32:36.144968 22873 net.cpp:134]     with loss weight 1
I0428 19:32:36.144982 22873 net.cpp:139] Memory required for data: 4814084
I0428 19:32:36.144985 22873 net.cpp:200] loss needs backward computation.
I0428 19:32:36.144989 22873 net.cpp:200] relu1 needs backward computation.
I0428 19:32:36.144992 22873 net.cpp:200] ip1 needs backward computation.
I0428 19:32:36.144995 22873 net.cpp:200] pool0 needs backward computation.
I0428 19:32:36.144999 22873 net.cpp:200] conv0 needs backward computation.
I0428 19:32:36.145001 22873 net.cpp:202] mnist does not need backward computation.
I0428 19:32:36.145004 22873 net.cpp:244] This network produces output loss
I0428 19:32:36.145011 22873 net.cpp:257] Network initialization done.
I0428 19:32:36.145253 22873 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test157.prototxt
I0428 19:32:36.145277 22873 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:32:36.145339 22873 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:32:36.145388 22873 layer_factory.hpp:77] Creating layer mnist
I0428 19:32:36.145431 22873 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:32:36.145444 22873 net.cpp:86] Creating Layer mnist
I0428 19:32:36.145448 22873 net.cpp:382] mnist -> data
I0428 19:32:36.145455 22873 net.cpp:382] mnist -> label
I0428 19:32:36.145548 22873 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:32:36.147794 22873 net.cpp:124] Setting up mnist
I0428 19:32:36.147824 22873 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:32:36.147828 22873 net.cpp:131] Top shape: 100 (100)
I0428 19:32:36.147831 22873 net.cpp:139] Memory required for data: 314000
I0428 19:32:36.147845 22873 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:32:36.147851 22873 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:32:36.147855 22873 net.cpp:408] label_mnist_1_split <- label
I0428 19:32:36.147860 22873 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:32:36.147866 22873 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:32:36.147924 22873 net.cpp:124] Setting up label_mnist_1_split
I0428 19:32:36.147931 22873 net.cpp:131] Top shape: 100 (100)
I0428 19:32:36.147934 22873 net.cpp:131] Top shape: 100 (100)
I0428 19:32:36.147938 22873 net.cpp:139] Memory required for data: 314800
I0428 19:32:36.147940 22873 layer_factory.hpp:77] Creating layer conv0
I0428 19:32:36.147949 22873 net.cpp:86] Creating Layer conv0
I0428 19:32:36.147953 22873 net.cpp:408] conv0 <- data
I0428 19:32:36.147958 22873 net.cpp:382] conv0 -> conv0
I0428 19:32:36.149716 22873 net.cpp:124] Setting up conv0
I0428 19:32:36.149730 22873 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 19:32:36.149734 22873 net.cpp:139] Memory required for data: 6074800
I0428 19:32:36.149742 22873 layer_factory.hpp:77] Creating layer pool0
I0428 19:32:36.149749 22873 net.cpp:86] Creating Layer pool0
I0428 19:32:36.149752 22873 net.cpp:408] pool0 <- conv0
I0428 19:32:36.149757 22873 net.cpp:382] pool0 -> pool0
I0428 19:32:36.149791 22873 net.cpp:124] Setting up pool0
I0428 19:32:36.149796 22873 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 19:32:36.149799 22873 net.cpp:139] Memory required for data: 7514800
I0428 19:32:36.149802 22873 layer_factory.hpp:77] Creating layer ip1
I0428 19:32:36.149808 22873 net.cpp:86] Creating Layer ip1
I0428 19:32:36.149811 22873 net.cpp:408] ip1 <- pool0
I0428 19:32:36.149816 22873 net.cpp:382] ip1 -> ip1
I0428 19:32:36.150117 22873 net.cpp:124] Setting up ip1
I0428 19:32:36.150125 22873 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:36.150130 22873 net.cpp:139] Memory required for data: 7518800
I0428 19:32:36.150135 22873 layer_factory.hpp:77] Creating layer relu1
I0428 19:32:36.150141 22873 net.cpp:86] Creating Layer relu1
I0428 19:32:36.150143 22873 net.cpp:408] relu1 <- ip1
I0428 19:32:36.150147 22873 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:32:36.150301 22873 net.cpp:124] Setting up relu1
I0428 19:32:36.150310 22873 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:36.150313 22873 net.cpp:139] Memory required for data: 7522800
I0428 19:32:36.150316 22873 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:32:36.150321 22873 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:32:36.150324 22873 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:32:36.150328 22873 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:32:36.150333 22873 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:32:36.150457 22873 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:32:36.150465 22873 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:36.150470 22873 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:32:36.150472 22873 net.cpp:139] Memory required for data: 7530800
I0428 19:32:36.150475 22873 layer_factory.hpp:77] Creating layer accuracy
I0428 19:32:36.150485 22873 net.cpp:86] Creating Layer accuracy
I0428 19:32:36.150488 22873 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:32:36.150492 22873 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:32:36.150496 22873 net.cpp:382] accuracy -> accuracy
I0428 19:32:36.150504 22873 net.cpp:124] Setting up accuracy
I0428 19:32:36.150508 22873 net.cpp:131] Top shape: (1)
I0428 19:32:36.150511 22873 net.cpp:139] Memory required for data: 7530804
I0428 19:32:36.150513 22873 layer_factory.hpp:77] Creating layer loss
I0428 19:32:36.150519 22873 net.cpp:86] Creating Layer loss
I0428 19:32:36.150522 22873 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:32:36.150527 22873 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:32:36.150530 22873 net.cpp:382] loss -> loss
I0428 19:32:36.150537 22873 layer_factory.hpp:77] Creating layer loss
I0428 19:32:36.150822 22873 net.cpp:124] Setting up loss
I0428 19:32:36.150840 22873 net.cpp:131] Top shape: (1)
I0428 19:32:36.150846 22873 net.cpp:134]     with loss weight 1
I0428 19:32:36.150851 22873 net.cpp:139] Memory required for data: 7530808
I0428 19:32:36.150862 22873 net.cpp:200] loss needs backward computation.
I0428 19:32:36.150866 22873 net.cpp:202] accuracy does not need backward computation.
I0428 19:32:36.150869 22873 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:32:36.150872 22873 net.cpp:200] relu1 needs backward computation.
I0428 19:32:36.150880 22873 net.cpp:200] ip1 needs backward computation.
I0428 19:32:36.150883 22873 net.cpp:200] pool0 needs backward computation.
I0428 19:32:36.150887 22873 net.cpp:200] conv0 needs backward computation.
I0428 19:32:36.150898 22873 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:32:36.150902 22873 net.cpp:202] mnist does not need backward computation.
I0428 19:32:36.150905 22873 net.cpp:244] This network produces output accuracy
I0428 19:32:36.150918 22873 net.cpp:244] This network produces output loss
I0428 19:32:36.150925 22873 net.cpp:257] Network initialization done.
I0428 19:32:36.150957 22873 solver.cpp:56] Solver scaffolding done.
I0428 19:32:36.151093 22873 caffe.cpp:248] Starting Optimization
I0428 19:32:36.151098 22873 solver.cpp:273] Solving LeNet
I0428 19:32:36.151103 22873 solver.cpp:274] Learning Rate Policy: inv
I0428 19:32:36.151875 22873 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:32:36.156138 22873 blocking_queue.cpp:49] Waiting for data
I0428 19:32:36.220185 22880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:36.220870 22873 solver.cpp:398]     Test net output #0: accuracy = 0.124
I0428 19:32:36.220888 22873 solver.cpp:398]     Test net output #1: loss = 2.29299 (* 1 = 2.29299 loss)
I0428 19:32:36.224373 22873 solver.cpp:219] Iteration 0 (0 iter/s, 0.0732486s/100 iters), loss = 2.25954
I0428 19:32:36.224396 22873 solver.cpp:238]     Train net output #0: loss = 2.25954 (* 1 = 2.25954 loss)
I0428 19:32:36.224422 22873 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:32:36.305567 22873 solver.cpp:219] Iteration 100 (1232.16 iter/s, 0.0811582s/100 iters), loss = 0.744951
I0428 19:32:36.305593 22873 solver.cpp:238]     Train net output #0: loss = 0.744951 (* 1 = 0.744951 loss)
I0428 19:32:36.305599 22873 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:32:36.389813 22873 solver.cpp:219] Iteration 200 (1187.51 iter/s, 0.0842096s/100 iters), loss = 0.455113
I0428 19:32:36.389842 22873 solver.cpp:238]     Train net output #0: loss = 0.455113 (* 1 = 0.455113 loss)
I0428 19:32:36.389850 22873 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:32:36.472082 22873 solver.cpp:219] Iteration 300 (1216.1 iter/s, 0.0822302s/100 iters), loss = 0.607403
I0428 19:32:36.472107 22873 solver.cpp:238]     Train net output #0: loss = 0.607403 (* 1 = 0.607403 loss)
I0428 19:32:36.472115 22873 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:32:36.553310 22873 solver.cpp:219] Iteration 400 (1231.63 iter/s, 0.081193s/100 iters), loss = 0.163242
I0428 19:32:36.553333 22873 solver.cpp:238]     Train net output #0: loss = 0.163242 (* 1 = 0.163242 loss)
I0428 19:32:36.553354 22873 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:32:36.633921 22873 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:32:36.692245 22880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:36.693678 22873 solver.cpp:398]     Test net output #0: accuracy = 0.941
I0428 19:32:36.693701 22873 solver.cpp:398]     Test net output #1: loss = 0.21254 (* 1 = 0.21254 loss)
I0428 19:32:36.694608 22873 solver.cpp:219] Iteration 500 (707.906 iter/s, 0.141262s/100 iters), loss = 0.281296
I0428 19:32:36.694646 22873 solver.cpp:238]     Train net output #0: loss = 0.281296 (* 1 = 0.281296 loss)
I0428 19:32:36.694653 22873 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:32:36.781075 22873 solver.cpp:219] Iteration 600 (1156.94 iter/s, 0.0864346s/100 iters), loss = 0.158349
I0428 19:32:36.781112 22873 solver.cpp:238]     Train net output #0: loss = 0.158349 (* 1 = 0.158349 loss)
I0428 19:32:36.781134 22873 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:32:36.862972 22873 solver.cpp:219] Iteration 700 (1221.74 iter/s, 0.0818504s/100 iters), loss = 0.332017
I0428 19:32:36.862994 22873 solver.cpp:238]     Train net output #0: loss = 0.332017 (* 1 = 0.332017 loss)
I0428 19:32:36.863016 22873 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:32:36.944584 22873 solver.cpp:219] Iteration 800 (1225.79 iter/s, 0.08158s/100 iters), loss = 0.343445
I0428 19:32:36.944607 22873 solver.cpp:238]     Train net output #0: loss = 0.343445 (* 1 = 0.343445 loss)
I0428 19:32:36.944628 22873 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:32:37.025609 22873 solver.cpp:219] Iteration 900 (1234.7 iter/s, 0.0809912s/100 iters), loss = 0.26455
I0428 19:32:37.025631 22873 solver.cpp:238]     Train net output #0: loss = 0.26455 (* 1 = 0.26455 loss)
I0428 19:32:37.025653 22873 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:32:37.052709 22879 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:37.106336 22873 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:32:37.107282 22873 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:32:37.108191 22873 solver.cpp:311] Iteration 1000, loss = 0.196175
I0428 19:32:37.108222 22873 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:32:37.166472 22880 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:32:37.167903 22873 solver.cpp:398]     Test net output #0: accuracy = 0.9605
I0428 19:32:37.167938 22873 solver.cpp:398]     Test net output #1: loss = 0.139585 (* 1 = 0.139585 loss)
I0428 19:32:37.167945 22873 solver.cpp:316] Optimization Done.
I0428 19:32:37.167950 22873 caffe.cpp:259] Optimization Done.
