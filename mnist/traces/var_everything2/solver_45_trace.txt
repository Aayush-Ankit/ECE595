I0428 19:29:01.262329 21902 caffe.cpp:218] Using GPUs 0
I0428 19:29:01.302191 21902 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:29:01.823158 21902 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test45.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:29:01.823330 21902 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test45.prototxt
I0428 19:29:01.823678 21902 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:29:01.823699 21902 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:29:01.823786 21902 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:01.823884 21902 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:01.824014 21902 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:29:01.824048 21902 net.cpp:86] Creating Layer mnist
I0428 19:29:01.824060 21902 net.cpp:382] mnist -> data
I0428 19:29:01.824093 21902 net.cpp:382] mnist -> label
I0428 19:29:01.825301 21902 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:29:01.827775 21902 net.cpp:124] Setting up mnist
I0428 19:29:01.827795 21902 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:29:01.827818 21902 net.cpp:131] Top shape: 64 (64)
I0428 19:29:01.827833 21902 net.cpp:139] Memory required for data: 200960
I0428 19:29:01.827844 21902 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:01.827868 21902 net.cpp:86] Creating Layer conv0
I0428 19:29:01.827878 21902 net.cpp:408] conv0 <- data
I0428 19:29:01.827896 21902 net.cpp:382] conv0 -> conv0
I0428 19:29:02.116603 21902 net.cpp:124] Setting up conv0
I0428 19:29:02.116634 21902 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:29:02.116641 21902 net.cpp:139] Memory required for data: 495872
I0428 19:29:02.116663 21902 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:02.116683 21902 net.cpp:86] Creating Layer pool0
I0428 19:29:02.116690 21902 net.cpp:408] pool0 <- conv0
I0428 19:29:02.116700 21902 net.cpp:382] pool0 -> pool0
I0428 19:29:02.116765 21902 net.cpp:124] Setting up pool0
I0428 19:29:02.116776 21902 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:29:02.116782 21902 net.cpp:139] Memory required for data: 569600
I0428 19:29:02.116806 21902 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:02.116828 21902 net.cpp:86] Creating Layer ip1
I0428 19:29:02.116835 21902 net.cpp:408] ip1 <- pool0
I0428 19:29:02.116845 21902 net.cpp:382] ip1 -> ip1
I0428 19:29:02.117903 21902 net.cpp:124] Setting up ip1
I0428 19:29:02.117919 21902 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:02.117925 21902 net.cpp:139] Memory required for data: 576000
I0428 19:29:02.117938 21902 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:02.117954 21902 net.cpp:86] Creating Layer relu1
I0428 19:29:02.117961 21902 net.cpp:408] relu1 <- ip1
I0428 19:29:02.117969 21902 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:02.118167 21902 net.cpp:124] Setting up relu1
I0428 19:29:02.118180 21902 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:29:02.118185 21902 net.cpp:139] Memory required for data: 582400
I0428 19:29:02.118191 21902 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:02.118203 21902 net.cpp:86] Creating Layer ip2
I0428 19:29:02.118209 21902 net.cpp:408] ip2 <- ip1
I0428 19:29:02.118218 21902 net.cpp:382] ip2 -> ip2
I0428 19:29:02.118335 21902 net.cpp:124] Setting up ip2
I0428 19:29:02.118345 21902 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:02.118350 21902 net.cpp:139] Memory required for data: 584960
I0428 19:29:02.118365 21902 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:02.118373 21902 net.cpp:86] Creating Layer relu2
I0428 19:29:02.118383 21902 net.cpp:408] relu2 <- ip2
I0428 19:29:02.118393 21902 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:02.119174 21902 net.cpp:124] Setting up relu2
I0428 19:29:02.119189 21902 net.cpp:131] Top shape: 64 10 (640)
I0428 19:29:02.119194 21902 net.cpp:139] Memory required for data: 587520
I0428 19:29:02.119199 21902 layer_factory.hpp:77] Creating layer loss
I0428 19:29:02.119211 21902 net.cpp:86] Creating Layer loss
I0428 19:29:02.119217 21902 net.cpp:408] loss <- ip2
I0428 19:29:02.119225 21902 net.cpp:408] loss <- label
I0428 19:29:02.119235 21902 net.cpp:382] loss -> loss
I0428 19:29:02.119258 21902 layer_factory.hpp:77] Creating layer loss
I0428 19:29:02.119524 21902 net.cpp:124] Setting up loss
I0428 19:29:02.119536 21902 net.cpp:131] Top shape: (1)
I0428 19:29:02.119542 21902 net.cpp:134]     with loss weight 1
I0428 19:29:02.119563 21902 net.cpp:139] Memory required for data: 587524
I0428 19:29:02.119570 21902 net.cpp:200] loss needs backward computation.
I0428 19:29:02.119576 21902 net.cpp:200] relu2 needs backward computation.
I0428 19:29:02.119581 21902 net.cpp:200] ip2 needs backward computation.
I0428 19:29:02.119587 21902 net.cpp:200] relu1 needs backward computation.
I0428 19:29:02.119593 21902 net.cpp:200] ip1 needs backward computation.
I0428 19:29:02.119598 21902 net.cpp:200] pool0 needs backward computation.
I0428 19:29:02.119603 21902 net.cpp:200] conv0 needs backward computation.
I0428 19:29:02.119609 21902 net.cpp:202] mnist does not need backward computation.
I0428 19:29:02.119614 21902 net.cpp:244] This network produces output loss
I0428 19:29:02.119629 21902 net.cpp:257] Network initialization done.
I0428 19:29:02.119899 21902 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test45.prototxt
I0428 19:29:02.119930 21902 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:29:02.120012 21902 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:29:02.120126 21902 layer_factory.hpp:77] Creating layer mnist
I0428 19:29:02.120192 21902 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:29:02.120210 21902 net.cpp:86] Creating Layer mnist
I0428 19:29:02.120219 21902 net.cpp:382] mnist -> data
I0428 19:29:02.120232 21902 net.cpp:382] mnist -> label
I0428 19:29:02.120370 21902 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:29:02.122613 21902 net.cpp:124] Setting up mnist
I0428 19:29:02.122629 21902 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:29:02.122638 21902 net.cpp:131] Top shape: 100 (100)
I0428 19:29:02.122644 21902 net.cpp:139] Memory required for data: 314000
I0428 19:29:02.122665 21902 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:29:02.122681 21902 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:29:02.122687 21902 net.cpp:408] label_mnist_1_split <- label
I0428 19:29:02.122699 21902 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:29:02.122710 21902 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:29:02.122778 21902 net.cpp:124] Setting up label_mnist_1_split
I0428 19:29:02.122788 21902 net.cpp:131] Top shape: 100 (100)
I0428 19:29:02.122795 21902 net.cpp:131] Top shape: 100 (100)
I0428 19:29:02.122800 21902 net.cpp:139] Memory required for data: 314800
I0428 19:29:02.122807 21902 layer_factory.hpp:77] Creating layer conv0
I0428 19:29:02.122823 21902 net.cpp:86] Creating Layer conv0
I0428 19:29:02.122831 21902 net.cpp:408] conv0 <- data
I0428 19:29:02.122841 21902 net.cpp:382] conv0 -> conv0
I0428 19:29:02.124425 21902 net.cpp:124] Setting up conv0
I0428 19:29:02.124441 21902 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:29:02.124449 21902 net.cpp:139] Memory required for data: 775600
I0428 19:29:02.124464 21902 layer_factory.hpp:77] Creating layer pool0
I0428 19:29:02.124478 21902 net.cpp:86] Creating Layer pool0
I0428 19:29:02.124485 21902 net.cpp:408] pool0 <- conv0
I0428 19:29:02.124495 21902 net.cpp:382] pool0 -> pool0
I0428 19:29:02.124542 21902 net.cpp:124] Setting up pool0
I0428 19:29:02.124552 21902 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:29:02.124557 21902 net.cpp:139] Memory required for data: 890800
I0428 19:29:02.124565 21902 layer_factory.hpp:77] Creating layer ip1
I0428 19:29:02.124577 21902 net.cpp:86] Creating Layer ip1
I0428 19:29:02.124585 21902 net.cpp:408] ip1 <- pool0
I0428 19:29:02.124599 21902 net.cpp:382] ip1 -> ip1
I0428 19:29:02.124754 21902 net.cpp:124] Setting up ip1
I0428 19:29:02.124765 21902 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:02.124771 21902 net.cpp:139] Memory required for data: 900800
I0428 19:29:02.124784 21902 layer_factory.hpp:77] Creating layer relu1
I0428 19:29:02.124797 21902 net.cpp:86] Creating Layer relu1
I0428 19:29:02.124806 21902 net.cpp:408] relu1 <- ip1
I0428 19:29:02.124826 21902 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:29:02.125006 21902 net.cpp:124] Setting up relu1
I0428 19:29:02.125018 21902 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:29:02.125025 21902 net.cpp:139] Memory required for data: 910800
I0428 19:29:02.125041 21902 layer_factory.hpp:77] Creating layer ip2
I0428 19:29:02.125056 21902 net.cpp:86] Creating Layer ip2
I0428 19:29:02.125061 21902 net.cpp:408] ip2 <- ip1
I0428 19:29:02.125071 21902 net.cpp:382] ip2 -> ip2
I0428 19:29:02.125205 21902 net.cpp:124] Setting up ip2
I0428 19:29:02.125214 21902 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:02.125221 21902 net.cpp:139] Memory required for data: 914800
I0428 19:29:02.125233 21902 layer_factory.hpp:77] Creating layer relu2
I0428 19:29:02.125247 21902 net.cpp:86] Creating Layer relu2
I0428 19:29:02.125253 21902 net.cpp:408] relu2 <- ip2
I0428 19:29:02.125262 21902 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:29:02.125439 21902 net.cpp:124] Setting up relu2
I0428 19:29:02.125450 21902 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:02.125455 21902 net.cpp:139] Memory required for data: 918800
I0428 19:29:02.125461 21902 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:29:02.125473 21902 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:29:02.125479 21902 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:29:02.125488 21902 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:29:02.125501 21902 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:29:02.125548 21902 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:29:02.125557 21902 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:02.125564 21902 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:29:02.125569 21902 net.cpp:139] Memory required for data: 926800
I0428 19:29:02.125574 21902 layer_factory.hpp:77] Creating layer accuracy
I0428 19:29:02.125584 21902 net.cpp:86] Creating Layer accuracy
I0428 19:29:02.125591 21902 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:29:02.125598 21902 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:29:02.125607 21902 net.cpp:382] accuracy -> accuracy
I0428 19:29:02.125618 21902 net.cpp:124] Setting up accuracy
I0428 19:29:02.125627 21902 net.cpp:131] Top shape: (1)
I0428 19:29:02.125633 21902 net.cpp:139] Memory required for data: 926804
I0428 19:29:02.125639 21902 layer_factory.hpp:77] Creating layer loss
I0428 19:29:02.125650 21902 net.cpp:86] Creating Layer loss
I0428 19:29:02.125656 21902 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:29:02.125664 21902 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:29:02.125674 21902 net.cpp:382] loss -> loss
I0428 19:29:02.125686 21902 layer_factory.hpp:77] Creating layer loss
I0428 19:29:02.126652 21902 net.cpp:124] Setting up loss
I0428 19:29:02.126667 21902 net.cpp:131] Top shape: (1)
I0428 19:29:02.126672 21902 net.cpp:134]     with loss weight 1
I0428 19:29:02.126682 21902 net.cpp:139] Memory required for data: 926808
I0428 19:29:02.126688 21902 net.cpp:200] loss needs backward computation.
I0428 19:29:02.126695 21902 net.cpp:202] accuracy does not need backward computation.
I0428 19:29:02.126701 21902 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:29:02.126708 21902 net.cpp:200] relu2 needs backward computation.
I0428 19:29:02.126713 21902 net.cpp:200] ip2 needs backward computation.
I0428 19:29:02.126718 21902 net.cpp:200] relu1 needs backward computation.
I0428 19:29:02.126723 21902 net.cpp:200] ip1 needs backward computation.
I0428 19:29:02.126729 21902 net.cpp:200] pool0 needs backward computation.
I0428 19:29:02.126734 21902 net.cpp:200] conv0 needs backward computation.
I0428 19:29:02.126740 21902 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:29:02.126747 21902 net.cpp:202] mnist does not need backward computation.
I0428 19:29:02.126755 21902 net.cpp:244] This network produces output accuracy
I0428 19:29:02.126761 21902 net.cpp:244] This network produces output loss
I0428 19:29:02.126778 21902 net.cpp:257] Network initialization done.
I0428 19:29:02.126821 21902 solver.cpp:56] Solver scaffolding done.
I0428 19:29:02.127043 21902 caffe.cpp:248] Starting Optimization
I0428 19:29:02.127051 21902 solver.cpp:273] Solving LeNet
I0428 19:29:02.127056 21902 solver.cpp:274] Learning Rate Policy: inv
I0428 19:29:02.127189 21902 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:29:02.130556 21902 blocking_queue.cpp:49] Waiting for data
I0428 19:29:02.177736 21909 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:02.178180 21902 solver.cpp:398]     Test net output #0: accuracy = 0.1336
I0428 19:29:02.178215 21902 solver.cpp:398]     Test net output #1: loss = 2.29514 (* 1 = 2.29514 loss)
I0428 19:29:02.180241 21902 solver.cpp:219] Iteration 0 (-6.9273e-31 iter/s, 0.0531359s/100 iters), loss = 2.30996
I0428 19:29:02.180275 21902 solver.cpp:238]     Train net output #0: loss = 2.30996 (* 1 = 2.30996 loss)
I0428 19:29:02.180304 21902 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:29:02.249785 21902 solver.cpp:219] Iteration 100 (1438.98 iter/s, 0.0694938s/100 iters), loss = 0.712594
I0428 19:29:02.249825 21902 solver.cpp:238]     Train net output #0: loss = 0.712594 (* 1 = 0.712594 loss)
I0428 19:29:02.249836 21902 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:29:02.306273 21902 solver.cpp:219] Iteration 200 (1771.77 iter/s, 0.0564408s/100 iters), loss = 0.402982
I0428 19:29:02.306305 21902 solver.cpp:238]     Train net output #0: loss = 0.402982 (* 1 = 0.402982 loss)
I0428 19:29:02.306313 21902 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:29:02.359580 21902 solver.cpp:219] Iteration 300 (1877.39 iter/s, 0.0532654s/100 iters), loss = 0.46618
I0428 19:29:02.359608 21902 solver.cpp:238]     Train net output #0: loss = 0.46618 (* 1 = 0.46618 loss)
I0428 19:29:02.359616 21902 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:29:02.412473 21902 solver.cpp:219] Iteration 400 (1891.9 iter/s, 0.0528568s/100 iters), loss = 0.170553
I0428 19:29:02.412503 21902 solver.cpp:238]     Train net output #0: loss = 0.170553 (* 1 = 0.170553 loss)
I0428 19:29:02.412509 21902 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:29:02.465136 21902 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:29:02.537041 21909 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:02.537452 21902 solver.cpp:398]     Test net output #0: accuracy = 0.9271
I0428 19:29:02.537473 21902 solver.cpp:398]     Test net output #1: loss = 0.25066 (* 1 = 0.25066 loss)
I0428 19:29:02.538134 21902 solver.cpp:219] Iteration 500 (796.037 iter/s, 0.125622s/100 iters), loss = 0.33734
I0428 19:29:02.538158 21902 solver.cpp:238]     Train net output #0: loss = 0.33734 (* 1 = 0.33734 loss)
I0428 19:29:02.538166 21902 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:29:02.590788 21902 solver.cpp:219] Iteration 600 (1900.41 iter/s, 0.0526203s/100 iters), loss = 0.182986
I0428 19:29:02.590819 21902 solver.cpp:238]     Train net output #0: loss = 0.182986 (* 1 = 0.182986 loss)
I0428 19:29:02.590831 21902 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:29:02.642038 21902 solver.cpp:219] Iteration 700 (1952.61 iter/s, 0.0512134s/100 iters), loss = 0.312129
I0428 19:29:02.642067 21902 solver.cpp:238]     Train net output #0: loss = 0.312129 (* 1 = 0.312129 loss)
I0428 19:29:02.642076 21902 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:29:02.693145 21902 solver.cpp:219] Iteration 800 (1958.14 iter/s, 0.0510689s/100 iters), loss = 0.335361
I0428 19:29:02.693172 21902 solver.cpp:238]     Train net output #0: loss = 0.335361 (* 1 = 0.335361 loss)
I0428 19:29:02.693179 21902 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:29:02.745177 21902 solver.cpp:219] Iteration 900 (1923.24 iter/s, 0.0519956s/100 iters), loss = 0.365913
I0428 19:29:02.745205 21902 solver.cpp:238]     Train net output #0: loss = 0.365914 (* 1 = 0.365914 loss)
I0428 19:29:02.745213 21902 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:29:02.763010 21908 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:02.797840 21902 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:29:02.798466 21902 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:29:02.798895 21902 solver.cpp:311] Iteration 1000, loss = 0.20488
I0428 19:29:02.798914 21902 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:29:02.862599 21909 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:29:02.863090 21902 solver.cpp:398]     Test net output #0: accuracy = 0.9438
I0428 19:29:02.863126 21902 solver.cpp:398]     Test net output #1: loss = 0.184693 (* 1 = 0.184693 loss)
I0428 19:29:02.863137 21902 solver.cpp:316] Optimization Done.
I0428 19:29:02.863145 21902 caffe.cpp:259] Optimization Done.
