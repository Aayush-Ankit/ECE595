I0428 19:46:44.685397 26053 caffe.cpp:218] Using GPUs 0
I0428 19:46:44.722134 26053 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:46:45.234030 26053 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test498.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:46:45.234187 26053 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test498.prototxt
I0428 19:46:45.234823 26053 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:46:45.234851 26053 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:46:45.235008 26053 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:45.235115 26053 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:45.235244 26053 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:46:45.235278 26053 net.cpp:86] Creating Layer mnist
I0428 19:46:45.235291 26053 net.cpp:382] mnist -> data
I0428 19:46:45.235322 26053 net.cpp:382] mnist -> label
I0428 19:46:45.236893 26053 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:46:45.239733 26053 net.cpp:124] Setting up mnist
I0428 19:46:45.239751 26053 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:46:45.239758 26053 net.cpp:131] Top shape: 64 (64)
I0428 19:46:45.239761 26053 net.cpp:139] Memory required for data: 200960
I0428 19:46:45.239768 26053 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:45.239784 26053 net.cpp:86] Creating Layer conv0
I0428 19:46:45.239806 26053 net.cpp:408] conv0 <- data
I0428 19:46:45.239827 26053 net.cpp:382] conv0 -> conv0
I0428 19:46:45.485029 26053 net.cpp:124] Setting up conv0
I0428 19:46:45.485070 26053 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:46:45.485074 26053 net.cpp:139] Memory required for data: 495872
I0428 19:46:45.485088 26053 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:45.485100 26053 net.cpp:86] Creating Layer pool0
I0428 19:46:45.485105 26053 net.cpp:408] pool0 <- conv0
I0428 19:46:45.485111 26053 net.cpp:382] pool0 -> pool0
I0428 19:46:45.485179 26053 net.cpp:124] Setting up pool0
I0428 19:46:45.485199 26053 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:46:45.485204 26053 net.cpp:139] Memory required for data: 569600
I0428 19:46:45.485208 26053 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:45.485222 26053 net.cpp:86] Creating Layer conv1
I0428 19:46:45.485229 26053 net.cpp:408] conv1 <- pool0
I0428 19:46:45.485235 26053 net.cpp:382] conv1 -> conv1
I0428 19:46:45.488308 26053 net.cpp:124] Setting up conv1
I0428 19:46:45.488322 26053 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:46:45.488343 26053 net.cpp:139] Memory required for data: 2208000
I0428 19:46:45.488350 26053 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:45.488358 26053 net.cpp:86] Creating Layer pool1
I0428 19:46:45.488360 26053 net.cpp:408] pool1 <- conv1
I0428 19:46:45.488365 26053 net.cpp:382] pool1 -> pool1
I0428 19:46:45.488409 26053 net.cpp:124] Setting up pool1
I0428 19:46:45.488420 26053 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:46:45.488425 26053 net.cpp:139] Memory required for data: 2617600
I0428 19:46:45.488430 26053 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:45.488440 26053 net.cpp:86] Creating Layer ip1
I0428 19:46:45.488445 26053 net.cpp:408] ip1 <- pool1
I0428 19:46:45.488452 26053 net.cpp:382] ip1 -> ip1
I0428 19:46:45.490380 26053 net.cpp:124] Setting up ip1
I0428 19:46:45.490392 26053 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:45.490411 26053 net.cpp:139] Memory required for data: 2630400
I0428 19:46:45.490419 26053 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:45.490427 26053 net.cpp:86] Creating Layer relu1
I0428 19:46:45.490429 26053 net.cpp:408] relu1 <- ip1
I0428 19:46:45.490434 26053 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:45.490655 26053 net.cpp:124] Setting up relu1
I0428 19:46:45.490669 26053 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:45.490674 26053 net.cpp:139] Memory required for data: 2643200
I0428 19:46:45.490679 26053 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:45.490690 26053 net.cpp:86] Creating Layer ip2
I0428 19:46:45.490695 26053 net.cpp:408] ip2 <- ip1
I0428 19:46:45.490703 26053 net.cpp:382] ip2 -> ip2
I0428 19:46:45.490833 26053 net.cpp:124] Setting up ip2
I0428 19:46:45.490844 26053 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:45.490849 26053 net.cpp:139] Memory required for data: 2645760
I0428 19:46:45.490857 26053 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:45.490866 26053 net.cpp:86] Creating Layer relu2
I0428 19:46:45.490871 26053 net.cpp:408] relu2 <- ip2
I0428 19:46:45.490877 26053 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:45.492029 26053 net.cpp:124] Setting up relu2
I0428 19:46:45.492061 26053 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:45.492081 26053 net.cpp:139] Memory required for data: 2648320
I0428 19:46:45.492087 26053 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:45.492097 26053 net.cpp:86] Creating Layer ip3
I0428 19:46:45.492103 26053 net.cpp:408] ip3 <- ip2
I0428 19:46:45.492126 26053 net.cpp:382] ip3 -> ip3
I0428 19:46:45.492251 26053 net.cpp:124] Setting up ip3
I0428 19:46:45.492262 26053 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:45.492267 26053 net.cpp:139] Memory required for data: 2650880
I0428 19:46:45.492280 26053 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:45.492286 26053 net.cpp:86] Creating Layer relu3
I0428 19:46:45.492292 26053 net.cpp:408] relu3 <- ip3
I0428 19:46:45.492300 26053 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:45.492532 26053 net.cpp:124] Setting up relu3
I0428 19:46:45.492545 26053 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:45.492550 26053 net.cpp:139] Memory required for data: 2653440
I0428 19:46:45.492555 26053 layer_factory.hpp:77] Creating layer loss
I0428 19:46:45.492564 26053 net.cpp:86] Creating Layer loss
I0428 19:46:45.492569 26053 net.cpp:408] loss <- ip3
I0428 19:46:45.492576 26053 net.cpp:408] loss <- label
I0428 19:46:45.492599 26053 net.cpp:382] loss -> loss
I0428 19:46:45.492622 26053 layer_factory.hpp:77] Creating layer loss
I0428 19:46:45.493007 26053 net.cpp:124] Setting up loss
I0428 19:46:45.493036 26053 net.cpp:131] Top shape: (1)
I0428 19:46:45.493041 26053 net.cpp:134]     with loss weight 1
I0428 19:46:45.493059 26053 net.cpp:139] Memory required for data: 2653444
I0428 19:46:45.493065 26053 net.cpp:200] loss needs backward computation.
I0428 19:46:45.493072 26053 net.cpp:200] relu3 needs backward computation.
I0428 19:46:45.493077 26053 net.cpp:200] ip3 needs backward computation.
I0428 19:46:45.493083 26053 net.cpp:200] relu2 needs backward computation.
I0428 19:46:45.493086 26053 net.cpp:200] ip2 needs backward computation.
I0428 19:46:45.493093 26053 net.cpp:200] relu1 needs backward computation.
I0428 19:46:45.493098 26053 net.cpp:200] ip1 needs backward computation.
I0428 19:46:45.493103 26053 net.cpp:200] pool1 needs backward computation.
I0428 19:46:45.493108 26053 net.cpp:200] conv1 needs backward computation.
I0428 19:46:45.493113 26053 net.cpp:200] pool0 needs backward computation.
I0428 19:46:45.493119 26053 net.cpp:200] conv0 needs backward computation.
I0428 19:46:45.493124 26053 net.cpp:202] mnist does not need backward computation.
I0428 19:46:45.493130 26053 net.cpp:244] This network produces output loss
I0428 19:46:45.493158 26053 net.cpp:257] Network initialization done.
I0428 19:46:45.493702 26053 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test498.prototxt
I0428 19:46:45.493774 26053 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:46:45.493916 26053 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:45.494031 26053 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:45.494087 26053 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:46:45.494104 26053 net.cpp:86] Creating Layer mnist
I0428 19:46:45.494112 26053 net.cpp:382] mnist -> data
I0428 19:46:45.494138 26053 net.cpp:382] mnist -> label
I0428 19:46:45.494277 26053 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:46:45.495710 26053 net.cpp:124] Setting up mnist
I0428 19:46:45.495757 26053 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:46:45.495775 26053 net.cpp:131] Top shape: 100 (100)
I0428 19:46:45.495780 26053 net.cpp:139] Memory required for data: 314000
I0428 19:46:45.495786 26053 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:46:45.495795 26053 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:46:45.495800 26053 net.cpp:408] label_mnist_1_split <- label
I0428 19:46:45.495808 26053 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:46:45.495818 26053 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:46:45.495913 26053 net.cpp:124] Setting up label_mnist_1_split
I0428 19:46:45.495926 26053 net.cpp:131] Top shape: 100 (100)
I0428 19:46:45.495934 26053 net.cpp:131] Top shape: 100 (100)
I0428 19:46:45.495939 26053 net.cpp:139] Memory required for data: 314800
I0428 19:46:45.495944 26053 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:45.495967 26053 net.cpp:86] Creating Layer conv0
I0428 19:46:45.495972 26053 net.cpp:408] conv0 <- data
I0428 19:46:45.495981 26053 net.cpp:382] conv0 -> conv0
I0428 19:46:45.497675 26053 net.cpp:124] Setting up conv0
I0428 19:46:45.497707 26053 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:46:45.497714 26053 net.cpp:139] Memory required for data: 775600
I0428 19:46:45.497725 26053 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:45.497735 26053 net.cpp:86] Creating Layer pool0
I0428 19:46:45.497740 26053 net.cpp:408] pool0 <- conv0
I0428 19:46:45.497747 26053 net.cpp:382] pool0 -> pool0
I0428 19:46:45.497792 26053 net.cpp:124] Setting up pool0
I0428 19:46:45.497808 26053 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:46:45.497813 26053 net.cpp:139] Memory required for data: 890800
I0428 19:46:45.497817 26053 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:45.497829 26053 net.cpp:86] Creating Layer conv1
I0428 19:46:45.497834 26053 net.cpp:408] conv1 <- pool0
I0428 19:46:45.497841 26053 net.cpp:382] conv1 -> conv1
I0428 19:46:45.499773 26053 net.cpp:124] Setting up conv1
I0428 19:46:45.499786 26053 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:46:45.499807 26053 net.cpp:139] Memory required for data: 3450800
I0428 19:46:45.499816 26053 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:45.499824 26053 net.cpp:86] Creating Layer pool1
I0428 19:46:45.499827 26053 net.cpp:408] pool1 <- conv1
I0428 19:46:45.499832 26053 net.cpp:382] pool1 -> pool1
I0428 19:46:45.499878 26053 net.cpp:124] Setting up pool1
I0428 19:46:45.499889 26053 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:46:45.499896 26053 net.cpp:139] Memory required for data: 4090800
I0428 19:46:45.499900 26053 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:45.499909 26053 net.cpp:86] Creating Layer ip1
I0428 19:46:45.499915 26053 net.cpp:408] ip1 <- pool1
I0428 19:46:45.499924 26053 net.cpp:382] ip1 -> ip1
I0428 19:46:45.500938 26053 net.cpp:124] Setting up ip1
I0428 19:46:45.500968 26053 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:45.500988 26053 net.cpp:139] Memory required for data: 4110800
I0428 19:46:45.501001 26053 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:45.501009 26053 net.cpp:86] Creating Layer relu1
I0428 19:46:45.501015 26053 net.cpp:408] relu1 <- ip1
I0428 19:46:45.501024 26053 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:45.501263 26053 net.cpp:124] Setting up relu1
I0428 19:46:45.501276 26053 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:45.501281 26053 net.cpp:139] Memory required for data: 4130800
I0428 19:46:45.501286 26053 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:45.501297 26053 net.cpp:86] Creating Layer ip2
I0428 19:46:45.501303 26053 net.cpp:408] ip2 <- ip1
I0428 19:46:45.501312 26053 net.cpp:382] ip2 -> ip2
I0428 19:46:45.501484 26053 net.cpp:124] Setting up ip2
I0428 19:46:45.501495 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.501500 26053 net.cpp:139] Memory required for data: 4134800
I0428 19:46:45.501508 26053 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:45.501515 26053 net.cpp:86] Creating Layer relu2
I0428 19:46:45.501520 26053 net.cpp:408] relu2 <- ip2
I0428 19:46:45.501528 26053 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:45.501847 26053 net.cpp:124] Setting up relu2
I0428 19:46:45.501878 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.501885 26053 net.cpp:139] Memory required for data: 4138800
I0428 19:46:45.501890 26053 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:45.501900 26053 net.cpp:86] Creating Layer ip3
I0428 19:46:45.501921 26053 net.cpp:408] ip3 <- ip2
I0428 19:46:45.501931 26053 net.cpp:382] ip3 -> ip3
I0428 19:46:45.502079 26053 net.cpp:124] Setting up ip3
I0428 19:46:45.502094 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.502100 26053 net.cpp:139] Memory required for data: 4142800
I0428 19:46:45.502113 26053 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:45.502120 26053 net.cpp:86] Creating Layer relu3
I0428 19:46:45.502126 26053 net.cpp:408] relu3 <- ip3
I0428 19:46:45.502133 26053 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:45.503388 26053 net.cpp:124] Setting up relu3
I0428 19:46:45.503419 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.503425 26053 net.cpp:139] Memory required for data: 4146800
I0428 19:46:45.503445 26053 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:46:45.503453 26053 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:46:45.503458 26053 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:46:45.503466 26053 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:46:45.503475 26053 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:46:45.503521 26053 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:46:45.503535 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.503541 26053 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:45.503546 26053 net.cpp:139] Memory required for data: 4154800
I0428 19:46:45.503551 26053 layer_factory.hpp:77] Creating layer accuracy
I0428 19:46:45.503558 26053 net.cpp:86] Creating Layer accuracy
I0428 19:46:45.503563 26053 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:46:45.503571 26053 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:46:45.503577 26053 net.cpp:382] accuracy -> accuracy
I0428 19:46:45.503587 26053 net.cpp:124] Setting up accuracy
I0428 19:46:45.503593 26053 net.cpp:131] Top shape: (1)
I0428 19:46:45.503597 26053 net.cpp:139] Memory required for data: 4154804
I0428 19:46:45.503602 26053 layer_factory.hpp:77] Creating layer loss
I0428 19:46:45.503609 26053 net.cpp:86] Creating Layer loss
I0428 19:46:45.503614 26053 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:46:45.503620 26053 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:46:45.503626 26053 net.cpp:382] loss -> loss
I0428 19:46:45.503635 26053 layer_factory.hpp:77] Creating layer loss
I0428 19:46:45.503994 26053 net.cpp:124] Setting up loss
I0428 19:46:45.504024 26053 net.cpp:131] Top shape: (1)
I0428 19:46:45.504029 26053 net.cpp:134]     with loss weight 1
I0428 19:46:45.504037 26053 net.cpp:139] Memory required for data: 4154808
I0428 19:46:45.504066 26053 net.cpp:200] loss needs backward computation.
I0428 19:46:45.504073 26053 net.cpp:202] accuracy does not need backward computation.
I0428 19:46:45.504079 26053 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:46:45.504086 26053 net.cpp:200] relu3 needs backward computation.
I0428 19:46:45.504091 26053 net.cpp:200] ip3 needs backward computation.
I0428 19:46:45.504096 26053 net.cpp:200] relu2 needs backward computation.
I0428 19:46:45.504101 26053 net.cpp:200] ip2 needs backward computation.
I0428 19:46:45.504107 26053 net.cpp:200] relu1 needs backward computation.
I0428 19:46:45.504112 26053 net.cpp:200] ip1 needs backward computation.
I0428 19:46:45.504117 26053 net.cpp:200] pool1 needs backward computation.
I0428 19:46:45.504123 26053 net.cpp:200] conv1 needs backward computation.
I0428 19:46:45.504129 26053 net.cpp:200] pool0 needs backward computation.
I0428 19:46:45.504134 26053 net.cpp:200] conv0 needs backward computation.
I0428 19:46:45.504142 26053 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:46:45.504148 26053 net.cpp:202] mnist does not need backward computation.
I0428 19:46:45.504153 26053 net.cpp:244] This network produces output accuracy
I0428 19:46:45.504158 26053 net.cpp:244] This network produces output loss
I0428 19:46:45.504175 26053 net.cpp:257] Network initialization done.
I0428 19:46:45.504235 26053 solver.cpp:56] Solver scaffolding done.
I0428 19:46:45.504725 26053 caffe.cpp:248] Starting Optimization
I0428 19:46:45.504734 26053 solver.cpp:273] Solving LeNet
I0428 19:46:45.504755 26053 solver.cpp:274] Learning Rate Policy: inv
I0428 19:46:45.505816 26053 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:46:45.510673 26053 blocking_queue.cpp:49] Waiting for data
I0428 19:46:45.577453 26060 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:45.578133 26053 solver.cpp:398]     Test net output #0: accuracy = 0.1014
I0428 19:46:45.578169 26053 solver.cpp:398]     Test net output #1: loss = 2.29484 (* 1 = 2.29484 loss)
I0428 19:46:45.582005 26053 solver.cpp:219] Iteration 0 (0 iter/s, 0.0772249s/100 iters), loss = 2.28548
I0428 19:46:45.582042 26053 solver.cpp:238]     Train net output #0: loss = 2.28548 (* 1 = 2.28548 loss)
I0428 19:46:45.582053 26053 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:46:45.732767 26053 solver.cpp:219] Iteration 100 (663.448 iter/s, 0.150728s/100 iters), loss = 1.01523
I0428 19:46:45.732794 26053 solver.cpp:238]     Train net output #0: loss = 1.01523 (* 1 = 1.01523 loss)
I0428 19:46:45.732800 26053 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:46:45.882743 26053 solver.cpp:219] Iteration 200 (666.951 iter/s, 0.149936s/100 iters), loss = 0.735769
I0428 19:46:45.882771 26053 solver.cpp:238]     Train net output #0: loss = 0.735769 (* 1 = 0.735769 loss)
I0428 19:46:45.882777 26053 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:46:46.035717 26053 solver.cpp:219] Iteration 300 (653.871 iter/s, 0.152935s/100 iters), loss = 0.740775
I0428 19:46:46.035743 26053 solver.cpp:238]     Train net output #0: loss = 0.740775 (* 1 = 0.740775 loss)
I0428 19:46:46.035750 26053 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:46:46.186879 26053 solver.cpp:219] Iteration 400 (661.713 iter/s, 0.151123s/100 iters), loss = 0.516782
I0428 19:46:46.186921 26053 solver.cpp:238]     Train net output #0: loss = 0.516782 (* 1 = 0.516782 loss)
I0428 19:46:46.186928 26053 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:46:46.334383 26053 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:46:46.386226 26060 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:46.388172 26053 solver.cpp:398]     Test net output #0: accuracy = 0.7825
I0428 19:46:46.388209 26053 solver.cpp:398]     Test net output #1: loss = 0.556384 (* 1 = 0.556384 loss)
I0428 19:46:46.389840 26053 solver.cpp:219] Iteration 500 (492.813 iter/s, 0.202917s/100 iters), loss = 0.565844
I0428 19:46:46.389888 26053 solver.cpp:238]     Train net output #0: loss = 0.565844 (* 1 = 0.565844 loss)
I0428 19:46:46.389915 26053 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:46:46.538568 26053 solver.cpp:219] Iteration 600 (672.638 iter/s, 0.148668s/100 iters), loss = 0.473625
I0428 19:46:46.538609 26053 solver.cpp:238]     Train net output #0: loss = 0.473625 (* 1 = 0.473625 loss)
I0428 19:46:46.538616 26053 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:46:46.687732 26053 solver.cpp:219] Iteration 700 (670.573 iter/s, 0.149126s/100 iters), loss = 0.670933
I0428 19:46:46.687767 26053 solver.cpp:238]     Train net output #0: loss = 0.670933 (* 1 = 0.670933 loss)
I0428 19:46:46.687773 26053 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:46:46.836004 26053 solver.cpp:219] Iteration 800 (674.613 iter/s, 0.148233s/100 iters), loss = 0.67056
I0428 19:46:46.836045 26053 solver.cpp:238]     Train net output #0: loss = 0.67056 (* 1 = 0.67056 loss)
I0428 19:46:46.836067 26053 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:46:46.986197 26053 solver.cpp:219] Iteration 900 (665.977 iter/s, 0.150155s/100 iters), loss = 0.536602
I0428 19:46:46.986239 26053 solver.cpp:238]     Train net output #0: loss = 0.536602 (* 1 = 0.536602 loss)
I0428 19:46:46.986245 26053 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:46:47.035034 26059 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:47.132993 26053 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:46:47.135604 26053 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:46:47.137241 26053 solver.cpp:311] Iteration 1000, loss = 0.724488
I0428 19:46:47.137257 26053 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:46:47.189703 26060 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:47.191603 26053 solver.cpp:398]     Test net output #0: accuracy = 0.7866
I0428 19:46:47.191639 26053 solver.cpp:398]     Test net output #1: loss = 0.529465 (* 1 = 0.529465 loss)
I0428 19:46:47.191644 26053 solver.cpp:316] Optimization Done.
I0428 19:46:47.191648 26053 caffe.cpp:259] Optimization Done.
