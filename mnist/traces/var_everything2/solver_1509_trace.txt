I0428 20:28:40.377127  3390 caffe.cpp:218] Using GPUs 0
I0428 20:28:40.408193  3390 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:40.854341  3390 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1509.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:40.854470  3390 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1509.prototxt
I0428 20:28:40.854807  3390 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:40.854823  3390 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:40.854900  3390 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:40.854960  3390 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:40.855044  3390 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:40.855062  3390 net.cpp:86] Creating Layer mnist
I0428 20:28:40.855069  3390 net.cpp:382] mnist -> data
I0428 20:28:40.855087  3390 net.cpp:382] mnist -> label
I0428 20:28:40.855979  3390 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:40.858247  3390 net.cpp:124] Setting up mnist
I0428 20:28:40.858292  3390 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:40.858299  3390 net.cpp:131] Top shape: 64 (64)
I0428 20:28:40.858301  3390 net.cpp:139] Memory required for data: 200960
I0428 20:28:40.858306  3390 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:40.858320  3390 net.cpp:86] Creating Layer conv0
I0428 20:28:40.858338  3390 net.cpp:408] conv0 <- data
I0428 20:28:40.858361  3390 net.cpp:382] conv0 -> conv0
I0428 20:28:41.090454  3390 net.cpp:124] Setting up conv0
I0428 20:28:41.090481  3390 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:41.090484  3390 net.cpp:139] Memory required for data: 14946560
I0428 20:28:41.090498  3390 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:41.090510  3390 net.cpp:86] Creating Layer pool0
I0428 20:28:41.090515  3390 net.cpp:408] pool0 <- conv0
I0428 20:28:41.090520  3390 net.cpp:382] pool0 -> pool0
I0428 20:28:41.090564  3390 net.cpp:124] Setting up pool0
I0428 20:28:41.090569  3390 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:41.090571  3390 net.cpp:139] Memory required for data: 18632960
I0428 20:28:41.090574  3390 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:41.090584  3390 net.cpp:86] Creating Layer conv1
I0428 20:28:41.090586  3390 net.cpp:408] conv1 <- pool0
I0428 20:28:41.090591  3390 net.cpp:382] conv1 -> conv1
I0428 20:28:41.093407  3390 net.cpp:124] Setting up conv1
I0428 20:28:41.093436  3390 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:41.093439  3390 net.cpp:139] Memory required for data: 18714880
I0428 20:28:41.093448  3390 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:41.093456  3390 net.cpp:86] Creating Layer pool1
I0428 20:28:41.093458  3390 net.cpp:408] pool1 <- conv1
I0428 20:28:41.093463  3390 net.cpp:382] pool1 -> pool1
I0428 20:28:41.093499  3390 net.cpp:124] Setting up pool1
I0428 20:28:41.093504  3390 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:41.093508  3390 net.cpp:139] Memory required for data: 18735360
I0428 20:28:41.093509  3390 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:41.093516  3390 net.cpp:86] Creating Layer ip1
I0428 20:28:41.093519  3390 net.cpp:408] ip1 <- pool1
I0428 20:28:41.093523  3390 net.cpp:382] ip1 -> ip1
I0428 20:28:41.093643  3390 net.cpp:124] Setting up ip1
I0428 20:28:41.093652  3390 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:41.093654  3390 net.cpp:139] Memory required for data: 18741760
I0428 20:28:41.093660  3390 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:41.093665  3390 net.cpp:86] Creating Layer relu1
I0428 20:28:41.093669  3390 net.cpp:408] relu1 <- ip1
I0428 20:28:41.093673  3390 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:41.093822  3390 net.cpp:124] Setting up relu1
I0428 20:28:41.093832  3390 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:41.093834  3390 net.cpp:139] Memory required for data: 18748160
I0428 20:28:41.093837  3390 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:41.093843  3390 net.cpp:86] Creating Layer ip2
I0428 20:28:41.093847  3390 net.cpp:408] ip2 <- ip1
I0428 20:28:41.093850  3390 net.cpp:382] ip2 -> ip2
I0428 20:28:41.093946  3390 net.cpp:124] Setting up ip2
I0428 20:28:41.093953  3390 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:28:41.093957  3390 net.cpp:139] Memory required for data: 18760960
I0428 20:28:41.093962  3390 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:41.093967  3390 net.cpp:86] Creating Layer relu2
I0428 20:28:41.093971  3390 net.cpp:408] relu2 <- ip2
I0428 20:28:41.093974  3390 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:41.094696  3390 net.cpp:124] Setting up relu2
I0428 20:28:41.094708  3390 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:28:41.094712  3390 net.cpp:139] Memory required for data: 18773760
I0428 20:28:41.094715  3390 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:41.094722  3390 net.cpp:86] Creating Layer ip3
I0428 20:28:41.094725  3390 net.cpp:408] ip3 <- ip2
I0428 20:28:41.094730  3390 net.cpp:382] ip3 -> ip3
I0428 20:28:41.094825  3390 net.cpp:124] Setting up ip3
I0428 20:28:41.094833  3390 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:41.094836  3390 net.cpp:139] Memory required for data: 18776320
I0428 20:28:41.094843  3390 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:41.094848  3390 net.cpp:86] Creating Layer relu3
I0428 20:28:41.094851  3390 net.cpp:408] relu3 <- ip3
I0428 20:28:41.094856  3390 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:41.095010  3390 net.cpp:124] Setting up relu3
I0428 20:28:41.095018  3390 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:41.095022  3390 net.cpp:139] Memory required for data: 18778880
I0428 20:28:41.095026  3390 layer_factory.hpp:77] Creating layer loss
I0428 20:28:41.095031  3390 net.cpp:86] Creating Layer loss
I0428 20:28:41.095033  3390 net.cpp:408] loss <- ip3
I0428 20:28:41.095037  3390 net.cpp:408] loss <- label
I0428 20:28:41.095043  3390 net.cpp:382] loss -> loss
I0428 20:28:41.095062  3390 layer_factory.hpp:77] Creating layer loss
I0428 20:28:41.095293  3390 net.cpp:124] Setting up loss
I0428 20:28:41.095301  3390 net.cpp:131] Top shape: (1)
I0428 20:28:41.095304  3390 net.cpp:134]     with loss weight 1
I0428 20:28:41.095319  3390 net.cpp:139] Memory required for data: 18778884
I0428 20:28:41.095322  3390 net.cpp:200] loss needs backward computation.
I0428 20:28:41.095326  3390 net.cpp:200] relu3 needs backward computation.
I0428 20:28:41.095329  3390 net.cpp:200] ip3 needs backward computation.
I0428 20:28:41.095332  3390 net.cpp:200] relu2 needs backward computation.
I0428 20:28:41.095335  3390 net.cpp:200] ip2 needs backward computation.
I0428 20:28:41.095337  3390 net.cpp:200] relu1 needs backward computation.
I0428 20:28:41.095340  3390 net.cpp:200] ip1 needs backward computation.
I0428 20:28:41.095343  3390 net.cpp:200] pool1 needs backward computation.
I0428 20:28:41.095346  3390 net.cpp:200] conv1 needs backward computation.
I0428 20:28:41.095350  3390 net.cpp:200] pool0 needs backward computation.
I0428 20:28:41.095352  3390 net.cpp:200] conv0 needs backward computation.
I0428 20:28:41.095356  3390 net.cpp:202] mnist does not need backward computation.
I0428 20:28:41.095358  3390 net.cpp:244] This network produces output loss
I0428 20:28:41.095367  3390 net.cpp:257] Network initialization done.
I0428 20:28:41.095696  3390 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1509.prototxt
I0428 20:28:41.095722  3390 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:41.095808  3390 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:41.095881  3390 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:41.095923  3390 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:41.095934  3390 net.cpp:86] Creating Layer mnist
I0428 20:28:41.095938  3390 net.cpp:382] mnist -> data
I0428 20:28:41.095947  3390 net.cpp:382] mnist -> label
I0428 20:28:41.096021  3390 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:41.098278  3390 net.cpp:124] Setting up mnist
I0428 20:28:41.098307  3390 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:41.098312  3390 net.cpp:131] Top shape: 100 (100)
I0428 20:28:41.098315  3390 net.cpp:139] Memory required for data: 314000
I0428 20:28:41.098318  3390 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:41.098325  3390 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:41.098328  3390 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:41.098333  3390 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:41.098340  3390 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:41.098379  3390 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:41.098386  3390 net.cpp:131] Top shape: 100 (100)
I0428 20:28:41.098388  3390 net.cpp:131] Top shape: 100 (100)
I0428 20:28:41.098392  3390 net.cpp:139] Memory required for data: 314800
I0428 20:28:41.098393  3390 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:41.098402  3390 net.cpp:86] Creating Layer conv0
I0428 20:28:41.098404  3390 net.cpp:408] conv0 <- data
I0428 20:28:41.098409  3390 net.cpp:382] conv0 -> conv0
I0428 20:28:41.100203  3390 net.cpp:124] Setting up conv0
I0428 20:28:41.100231  3390 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:41.100234  3390 net.cpp:139] Memory required for data: 23354800
I0428 20:28:41.100244  3390 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:41.100251  3390 net.cpp:86] Creating Layer pool0
I0428 20:28:41.100255  3390 net.cpp:408] pool0 <- conv0
I0428 20:28:41.100260  3390 net.cpp:382] pool0 -> pool0
I0428 20:28:41.100296  3390 net.cpp:124] Setting up pool0
I0428 20:28:41.100301  3390 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:41.100304  3390 net.cpp:139] Memory required for data: 29114800
I0428 20:28:41.100306  3390 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:41.100316  3390 net.cpp:86] Creating Layer conv1
I0428 20:28:41.100318  3390 net.cpp:408] conv1 <- pool0
I0428 20:28:41.100324  3390 net.cpp:382] conv1 -> conv1
I0428 20:28:41.102149  3390 net.cpp:124] Setting up conv1
I0428 20:28:41.102166  3390 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:41.102170  3390 net.cpp:139] Memory required for data: 29242800
I0428 20:28:41.102181  3390 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:41.102187  3390 net.cpp:86] Creating Layer pool1
I0428 20:28:41.102191  3390 net.cpp:408] pool1 <- conv1
I0428 20:28:41.102197  3390 net.cpp:382] pool1 -> pool1
I0428 20:28:41.102237  3390 net.cpp:124] Setting up pool1
I0428 20:28:41.102243  3390 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:41.102246  3390 net.cpp:139] Memory required for data: 29274800
I0428 20:28:41.102257  3390 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:41.102263  3390 net.cpp:86] Creating Layer ip1
I0428 20:28:41.102267  3390 net.cpp:408] ip1 <- pool1
I0428 20:28:41.102272  3390 net.cpp:382] ip1 -> ip1
I0428 20:28:41.102406  3390 net.cpp:124] Setting up ip1
I0428 20:28:41.102429  3390 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:41.102442  3390 net.cpp:139] Memory required for data: 29284800
I0428 20:28:41.102450  3390 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:41.102454  3390 net.cpp:86] Creating Layer relu1
I0428 20:28:41.102458  3390 net.cpp:408] relu1 <- ip1
I0428 20:28:41.102463  3390 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:41.102624  3390 net.cpp:124] Setting up relu1
I0428 20:28:41.102634  3390 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:41.102638  3390 net.cpp:139] Memory required for data: 29294800
I0428 20:28:41.102641  3390 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:41.102648  3390 net.cpp:86] Creating Layer ip2
I0428 20:28:41.102658  3390 net.cpp:408] ip2 <- ip1
I0428 20:28:41.102663  3390 net.cpp:382] ip2 -> ip2
I0428 20:28:41.102792  3390 net.cpp:124] Setting up ip2
I0428 20:28:41.102800  3390 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:28:41.102803  3390 net.cpp:139] Memory required for data: 29314800
I0428 20:28:41.102809  3390 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:41.102813  3390 net.cpp:86] Creating Layer relu2
I0428 20:28:41.102818  3390 net.cpp:408] relu2 <- ip2
I0428 20:28:41.102820  3390 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:41.103032  3390 net.cpp:124] Setting up relu2
I0428 20:28:41.103041  3390 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:28:41.103044  3390 net.cpp:139] Memory required for data: 29334800
I0428 20:28:41.103047  3390 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:41.103052  3390 net.cpp:86] Creating Layer ip3
I0428 20:28:41.103055  3390 net.cpp:408] ip3 <- ip2
I0428 20:28:41.103076  3390 net.cpp:382] ip3 -> ip3
I0428 20:28:41.103189  3390 net.cpp:124] Setting up ip3
I0428 20:28:41.103198  3390 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:41.103200  3390 net.cpp:139] Memory required for data: 29338800
I0428 20:28:41.103209  3390 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:41.103214  3390 net.cpp:86] Creating Layer relu3
I0428 20:28:41.103216  3390 net.cpp:408] relu3 <- ip3
I0428 20:28:41.103221  3390 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:41.104022  3390 net.cpp:124] Setting up relu3
I0428 20:28:41.104034  3390 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:41.104038  3390 net.cpp:139] Memory required for data: 29342800
I0428 20:28:41.104041  3390 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:41.104048  3390 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:41.104051  3390 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:41.104068  3390 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:41.104074  3390 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:41.104120  3390 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:41.104126  3390 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:41.104130  3390 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:41.104132  3390 net.cpp:139] Memory required for data: 29350800
I0428 20:28:41.104135  3390 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:41.104140  3390 net.cpp:86] Creating Layer accuracy
I0428 20:28:41.104143  3390 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:41.104163  3390 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:41.104168  3390 net.cpp:382] accuracy -> accuracy
I0428 20:28:41.104187  3390 net.cpp:124] Setting up accuracy
I0428 20:28:41.104189  3390 net.cpp:131] Top shape: (1)
I0428 20:28:41.104192  3390 net.cpp:139] Memory required for data: 29350804
I0428 20:28:41.104200  3390 layer_factory.hpp:77] Creating layer loss
I0428 20:28:41.104205  3390 net.cpp:86] Creating Layer loss
I0428 20:28:41.104208  3390 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:41.104212  3390 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:41.104215  3390 net.cpp:382] loss -> loss
I0428 20:28:41.104223  3390 layer_factory.hpp:77] Creating layer loss
I0428 20:28:41.104462  3390 net.cpp:124] Setting up loss
I0428 20:28:41.104472  3390 net.cpp:131] Top shape: (1)
I0428 20:28:41.104475  3390 net.cpp:134]     with loss weight 1
I0428 20:28:41.104490  3390 net.cpp:139] Memory required for data: 29350808
I0428 20:28:41.104493  3390 net.cpp:200] loss needs backward computation.
I0428 20:28:41.104497  3390 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:41.104501  3390 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:41.104504  3390 net.cpp:200] relu3 needs backward computation.
I0428 20:28:41.104507  3390 net.cpp:200] ip3 needs backward computation.
I0428 20:28:41.104511  3390 net.cpp:200] relu2 needs backward computation.
I0428 20:28:41.104518  3390 net.cpp:200] ip2 needs backward computation.
I0428 20:28:41.104521  3390 net.cpp:200] relu1 needs backward computation.
I0428 20:28:41.104523  3390 net.cpp:200] ip1 needs backward computation.
I0428 20:28:41.104526  3390 net.cpp:200] pool1 needs backward computation.
I0428 20:28:41.104529  3390 net.cpp:200] conv1 needs backward computation.
I0428 20:28:41.104532  3390 net.cpp:200] pool0 needs backward computation.
I0428 20:28:41.104535  3390 net.cpp:200] conv0 needs backward computation.
I0428 20:28:41.104538  3390 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:41.104542  3390 net.cpp:202] mnist does not need backward computation.
I0428 20:28:41.104544  3390 net.cpp:244] This network produces output accuracy
I0428 20:28:41.104547  3390 net.cpp:244] This network produces output loss
I0428 20:28:41.104558  3390 net.cpp:257] Network initialization done.
I0428 20:28:41.104598  3390 solver.cpp:56] Solver scaffolding done.
I0428 20:28:41.104921  3390 caffe.cpp:248] Starting Optimization
I0428 20:28:41.104928  3390 solver.cpp:273] Solving LeNet
I0428 20:28:41.104930  3390 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:41.105795  3390 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:41.200904  3397 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:41.203346  3390 solver.cpp:398]     Test net output #0: accuracy = 0.0983
I0428 20:28:41.203378  3390 solver.cpp:398]     Test net output #1: loss = 2.30908 (* 1 = 2.30908 loss)
I0428 20:28:41.207823  3390 solver.cpp:219] Iteration 0 (-1.89811e-31 iter/s, 0.102835s/100 iters), loss = 2.31792
I0428 20:28:41.207846  3390 solver.cpp:238]     Train net output #0: loss = 2.31792 (* 1 = 2.31792 loss)
I0428 20:28:41.207856  3390 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:41.408124  3390 solver.cpp:219] Iteration 100 (499.362 iter/s, 0.200255s/100 iters), loss = 1.00332
I0428 20:28:41.408164  3390 solver.cpp:238]     Train net output #0: loss = 1.00332 (* 1 = 1.00332 loss)
I0428 20:28:41.408174  3390 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:41.623200  3390 solver.cpp:219] Iteration 200 (465.07 iter/s, 0.215022s/100 iters), loss = 1.10733
I0428 20:28:41.623239  3390 solver.cpp:238]     Train net output #0: loss = 1.10733 (* 1 = 1.10733 loss)
I0428 20:28:41.623247  3390 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:41.838843  3390 solver.cpp:219] Iteration 300 (463.852 iter/s, 0.215586s/100 iters), loss = 0.650767
I0428 20:28:41.838892  3390 solver.cpp:238]     Train net output #0: loss = 0.650767 (* 1 = 0.650767 loss)
I0428 20:28:41.838904  3390 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:42.057602  3390 solver.cpp:219] Iteration 400 (457.261 iter/s, 0.218694s/100 iters), loss = 0.867931
I0428 20:28:42.057641  3390 solver.cpp:238]     Train net output #0: loss = 0.867931 (* 1 = 0.867931 loss)
I0428 20:28:42.057651  3390 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:42.274365  3390 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:42.376694  3397 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:42.379484  3390 solver.cpp:398]     Test net output #0: accuracy = 0.7468
I0428 20:28:42.379511  3390 solver.cpp:398]     Test net output #1: loss = 0.836765 (* 1 = 0.836765 loss)
I0428 20:28:42.381436  3390 solver.cpp:219] Iteration 500 (308.856 iter/s, 0.323775s/100 iters), loss = 0.938145
I0428 20:28:42.381464  3390 solver.cpp:238]     Train net output #0: loss = 0.938145 (* 1 = 0.938145 loss)
I0428 20:28:42.381490  3390 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:42.599074  3390 solver.cpp:219] Iteration 600 (459.578 iter/s, 0.217591s/100 iters), loss = 0.881926
I0428 20:28:42.599120  3390 solver.cpp:238]     Train net output #0: loss = 0.881926 (* 1 = 0.881926 loss)
I0428 20:28:42.599130  3390 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:42.813060  3390 solver.cpp:219] Iteration 700 (467.463 iter/s, 0.213921s/100 iters), loss = 0.986653
I0428 20:28:42.813112  3390 solver.cpp:238]     Train net output #0: loss = 0.986653 (* 1 = 0.986653 loss)
I0428 20:28:42.813123  3390 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:43.035078  3390 solver.cpp:219] Iteration 800 (450.55 iter/s, 0.221951s/100 iters), loss = 0.722589
I0428 20:28:43.035122  3390 solver.cpp:238]     Train net output #0: loss = 0.722589 (* 1 = 0.722589 loss)
I0428 20:28:43.035135  3390 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:43.254494  3390 solver.cpp:219] Iteration 900 (455.882 iter/s, 0.219355s/100 iters), loss = 0.61474
I0428 20:28:43.254542  3390 solver.cpp:238]     Train net output #0: loss = 0.61474 (* 1 = 0.61474 loss)
I0428 20:28:43.254554  3390 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:43.328688  3396 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:43.466979  3390 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:43.469059  3390 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:43.470396  3390 solver.cpp:311] Iteration 1000, loss = 0.757925
I0428 20:28:43.470427  3390 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:43.575739  3397 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:43.578558  3390 solver.cpp:398]     Test net output #0: accuracy = 0.7721
I0428 20:28:43.578583  3390 solver.cpp:398]     Test net output #1: loss = 0.57162 (* 1 = 0.57162 loss)
I0428 20:28:43.578590  3390 solver.cpp:316] Optimization Done.
I0428 20:28:43.578594  3390 caffe.cpp:259] Optimization Done.
