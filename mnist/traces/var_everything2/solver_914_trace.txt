I0428 20:01:52.150374 29824 caffe.cpp:218] Using GPUs 0
I0428 20:01:52.179862 29824 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:52.629001 29824 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test914.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:52.629139 29824 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test914.prototxt
I0428 20:01:52.629484 29824 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:52.629513 29824 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:52.629606 29824 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:52.629665 29824 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:52.629746 29824 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:52.629765 29824 net.cpp:86] Creating Layer mnist
I0428 20:01:52.629771 29824 net.cpp:382] mnist -> data
I0428 20:01:52.629789 29824 net.cpp:382] mnist -> label
I0428 20:01:52.630769 29824 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:52.632990 29824 net.cpp:124] Setting up mnist
I0428 20:01:52.633020 29824 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:52.633025 29824 net.cpp:131] Top shape: 64 (64)
I0428 20:01:52.633029 29824 net.cpp:139] Memory required for data: 200960
I0428 20:01:52.633035 29824 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:52.633049 29824 net.cpp:86] Creating Layer conv0
I0428 20:01:52.633064 29824 net.cpp:408] conv0 <- data
I0428 20:01:52.633074 29824 net.cpp:382] conv0 -> conv0
I0428 20:01:52.861698 29824 net.cpp:124] Setting up conv0
I0428 20:01:52.861723 29824 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:52.861727 29824 net.cpp:139] Memory required for data: 1675520
I0428 20:01:52.861740 29824 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:52.861752 29824 net.cpp:86] Creating Layer pool0
I0428 20:01:52.861771 29824 net.cpp:408] pool0 <- conv0
I0428 20:01:52.861776 29824 net.cpp:382] pool0 -> pool0
I0428 20:01:52.861840 29824 net.cpp:124] Setting up pool0
I0428 20:01:52.861845 29824 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:52.861847 29824 net.cpp:139] Memory required for data: 2044160
I0428 20:01:52.861850 29824 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:52.861860 29824 net.cpp:86] Creating Layer conv1
I0428 20:01:52.861863 29824 net.cpp:408] conv1 <- pool0
I0428 20:01:52.861868 29824 net.cpp:382] conv1 -> conv1
I0428 20:01:52.864640 29824 net.cpp:124] Setting up conv1
I0428 20:01:52.864670 29824 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:52.864673 29824 net.cpp:139] Memory required for data: 2863360
I0428 20:01:52.864681 29824 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:52.864688 29824 net.cpp:86] Creating Layer pool1
I0428 20:01:52.864691 29824 net.cpp:408] pool1 <- conv1
I0428 20:01:52.864696 29824 net.cpp:382] pool1 -> pool1
I0428 20:01:52.864749 29824 net.cpp:124] Setting up pool1
I0428 20:01:52.864754 29824 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:52.864758 29824 net.cpp:139] Memory required for data: 3068160
I0428 20:01:52.864760 29824 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:52.864771 29824 net.cpp:86] Creating Layer ip1
I0428 20:01:52.864774 29824 net.cpp:408] ip1 <- pool1
I0428 20:01:52.864778 29824 net.cpp:382] ip1 -> ip1
I0428 20:01:52.864982 29824 net.cpp:124] Setting up ip1
I0428 20:01:52.864992 29824 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:52.864995 29824 net.cpp:139] Memory required for data: 3070720
I0428 20:01:52.865003 29824 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:52.865010 29824 net.cpp:86] Creating Layer relu1
I0428 20:01:52.865012 29824 net.cpp:408] relu1 <- ip1
I0428 20:01:52.865017 29824 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:52.865211 29824 net.cpp:124] Setting up relu1
I0428 20:01:52.865221 29824 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:52.865223 29824 net.cpp:139] Memory required for data: 3073280
I0428 20:01:52.865226 29824 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:52.865232 29824 net.cpp:86] Creating Layer ip2
I0428 20:01:52.865236 29824 net.cpp:408] ip2 <- ip1
I0428 20:01:52.865239 29824 net.cpp:382] ip2 -> ip2
I0428 20:01:52.865329 29824 net.cpp:124] Setting up ip2
I0428 20:01:52.865350 29824 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:52.865352 29824 net.cpp:139] Memory required for data: 3079680
I0428 20:01:52.865357 29824 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:52.865363 29824 net.cpp:86] Creating Layer relu2
I0428 20:01:52.865365 29824 net.cpp:408] relu2 <- ip2
I0428 20:01:52.865370 29824 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:52.866101 29824 net.cpp:124] Setting up relu2
I0428 20:01:52.866111 29824 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:01:52.866130 29824 net.cpp:139] Memory required for data: 3086080
I0428 20:01:52.866134 29824 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:52.866156 29824 net.cpp:86] Creating Layer ip3
I0428 20:01:52.866159 29824 net.cpp:408] ip3 <- ip2
I0428 20:01:52.866165 29824 net.cpp:382] ip3 -> ip3
I0428 20:01:52.866261 29824 net.cpp:124] Setting up ip3
I0428 20:01:52.866268 29824 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:52.866271 29824 net.cpp:139] Memory required for data: 3088640
I0428 20:01:52.866278 29824 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:52.866283 29824 net.cpp:86] Creating Layer relu3
I0428 20:01:52.866286 29824 net.cpp:408] relu3 <- ip3
I0428 20:01:52.866291 29824 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:52.866466 29824 net.cpp:124] Setting up relu3
I0428 20:01:52.866489 29824 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:52.866492 29824 net.cpp:139] Memory required for data: 3091200
I0428 20:01:52.866495 29824 layer_factory.hpp:77] Creating layer loss
I0428 20:01:52.866502 29824 net.cpp:86] Creating Layer loss
I0428 20:01:52.866504 29824 net.cpp:408] loss <- ip3
I0428 20:01:52.866508 29824 net.cpp:408] loss <- label
I0428 20:01:52.866513 29824 net.cpp:382] loss -> loss
I0428 20:01:52.866529 29824 layer_factory.hpp:77] Creating layer loss
I0428 20:01:52.866755 29824 net.cpp:124] Setting up loss
I0428 20:01:52.866765 29824 net.cpp:131] Top shape: (1)
I0428 20:01:52.866767 29824 net.cpp:134]     with loss weight 1
I0428 20:01:52.866780 29824 net.cpp:139] Memory required for data: 3091204
I0428 20:01:52.866783 29824 net.cpp:200] loss needs backward computation.
I0428 20:01:52.866786 29824 net.cpp:200] relu3 needs backward computation.
I0428 20:01:52.866789 29824 net.cpp:200] ip3 needs backward computation.
I0428 20:01:52.866792 29824 net.cpp:200] relu2 needs backward computation.
I0428 20:01:52.866796 29824 net.cpp:200] ip2 needs backward computation.
I0428 20:01:52.866797 29824 net.cpp:200] relu1 needs backward computation.
I0428 20:01:52.866801 29824 net.cpp:200] ip1 needs backward computation.
I0428 20:01:52.866803 29824 net.cpp:200] pool1 needs backward computation.
I0428 20:01:52.866806 29824 net.cpp:200] conv1 needs backward computation.
I0428 20:01:52.866809 29824 net.cpp:200] pool0 needs backward computation.
I0428 20:01:52.866812 29824 net.cpp:200] conv0 needs backward computation.
I0428 20:01:52.866816 29824 net.cpp:202] mnist does not need backward computation.
I0428 20:01:52.866818 29824 net.cpp:244] This network produces output loss
I0428 20:01:52.866827 29824 net.cpp:257] Network initialization done.
I0428 20:01:52.867147 29824 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test914.prototxt
I0428 20:01:52.867203 29824 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:52.867308 29824 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:52.867388 29824 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:52.867447 29824 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:52.867458 29824 net.cpp:86] Creating Layer mnist
I0428 20:01:52.867463 29824 net.cpp:382] mnist -> data
I0428 20:01:52.867470 29824 net.cpp:382] mnist -> label
I0428 20:01:52.867579 29824 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:52.869467 29824 net.cpp:124] Setting up mnist
I0428 20:01:52.869495 29824 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:52.869500 29824 net.cpp:131] Top shape: 100 (100)
I0428 20:01:52.869504 29824 net.cpp:139] Memory required for data: 314000
I0428 20:01:52.869508 29824 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:52.869545 29824 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:52.869549 29824 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:52.869554 29824 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:52.869560 29824 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:52.869602 29824 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:52.869607 29824 net.cpp:131] Top shape: 100 (100)
I0428 20:01:52.869611 29824 net.cpp:131] Top shape: 100 (100)
I0428 20:01:52.869613 29824 net.cpp:139] Memory required for data: 314800
I0428 20:01:52.869616 29824 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:52.869623 29824 net.cpp:86] Creating Layer conv0
I0428 20:01:52.869626 29824 net.cpp:408] conv0 <- data
I0428 20:01:52.869632 29824 net.cpp:382] conv0 -> conv0
I0428 20:01:52.871291 29824 net.cpp:124] Setting up conv0
I0428 20:01:52.871304 29824 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:52.871307 29824 net.cpp:139] Memory required for data: 2618800
I0428 20:01:52.871316 29824 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:52.871322 29824 net.cpp:86] Creating Layer pool0
I0428 20:01:52.871325 29824 net.cpp:408] pool0 <- conv0
I0428 20:01:52.871330 29824 net.cpp:382] pool0 -> pool0
I0428 20:01:52.871363 29824 net.cpp:124] Setting up pool0
I0428 20:01:52.871368 29824 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:52.871371 29824 net.cpp:139] Memory required for data: 3194800
I0428 20:01:52.871373 29824 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:52.871381 29824 net.cpp:86] Creating Layer conv1
I0428 20:01:52.871383 29824 net.cpp:408] conv1 <- pool0
I0428 20:01:52.871388 29824 net.cpp:382] conv1 -> conv1
I0428 20:01:52.873018 29824 net.cpp:124] Setting up conv1
I0428 20:01:52.873046 29824 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:52.873054 29824 net.cpp:139] Memory required for data: 4474800
I0428 20:01:52.873064 29824 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:52.873069 29824 net.cpp:86] Creating Layer pool1
I0428 20:01:52.873071 29824 net.cpp:408] pool1 <- conv1
I0428 20:01:52.873076 29824 net.cpp:382] pool1 -> pool1
I0428 20:01:52.873128 29824 net.cpp:124] Setting up pool1
I0428 20:01:52.873134 29824 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:52.873137 29824 net.cpp:139] Memory required for data: 4794800
I0428 20:01:52.873155 29824 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:52.873163 29824 net.cpp:86] Creating Layer ip1
I0428 20:01:52.873167 29824 net.cpp:408] ip1 <- pool1
I0428 20:01:52.873172 29824 net.cpp:382] ip1 -> ip1
I0428 20:01:52.873312 29824 net.cpp:124] Setting up ip1
I0428 20:01:52.873322 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.873335 29824 net.cpp:139] Memory required for data: 4798800
I0428 20:01:52.873343 29824 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:52.873348 29824 net.cpp:86] Creating Layer relu1
I0428 20:01:52.873353 29824 net.cpp:408] relu1 <- ip1
I0428 20:01:52.873358 29824 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:52.873530 29824 net.cpp:124] Setting up relu1
I0428 20:01:52.873539 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.873543 29824 net.cpp:139] Memory required for data: 4802800
I0428 20:01:52.873553 29824 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:52.873559 29824 net.cpp:86] Creating Layer ip2
I0428 20:01:52.873563 29824 net.cpp:408] ip2 <- ip1
I0428 20:01:52.873569 29824 net.cpp:382] ip2 -> ip2
I0428 20:01:52.873682 29824 net.cpp:124] Setting up ip2
I0428 20:01:52.873688 29824 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:52.873692 29824 net.cpp:139] Memory required for data: 4812800
I0428 20:01:52.873697 29824 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:52.873700 29824 net.cpp:86] Creating Layer relu2
I0428 20:01:52.873703 29824 net.cpp:408] relu2 <- ip2
I0428 20:01:52.873708 29824 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:52.873884 29824 net.cpp:124] Setting up relu2
I0428 20:01:52.873893 29824 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:01:52.873896 29824 net.cpp:139] Memory required for data: 4822800
I0428 20:01:52.873899 29824 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:52.873904 29824 net.cpp:86] Creating Layer ip3
I0428 20:01:52.873908 29824 net.cpp:408] ip3 <- ip2
I0428 20:01:52.873913 29824 net.cpp:382] ip3 -> ip3
I0428 20:01:52.874071 29824 net.cpp:124] Setting up ip3
I0428 20:01:52.874079 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.874083 29824 net.cpp:139] Memory required for data: 4826800
I0428 20:01:52.874091 29824 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:52.874096 29824 net.cpp:86] Creating Layer relu3
I0428 20:01:52.874099 29824 net.cpp:408] relu3 <- ip3
I0428 20:01:52.874104 29824 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:52.875018 29824 net.cpp:124] Setting up relu3
I0428 20:01:52.875030 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.875033 29824 net.cpp:139] Memory required for data: 4830800
I0428 20:01:52.875037 29824 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:52.875043 29824 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:52.875046 29824 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:52.875051 29824 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:52.875063 29824 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:52.875102 29824 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:52.875113 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.875115 29824 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:52.875118 29824 net.cpp:139] Memory required for data: 4838800
I0428 20:01:52.875121 29824 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:52.875126 29824 net.cpp:86] Creating Layer accuracy
I0428 20:01:52.875129 29824 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:52.875133 29824 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:52.875138 29824 net.cpp:382] accuracy -> accuracy
I0428 20:01:52.875145 29824 net.cpp:124] Setting up accuracy
I0428 20:01:52.875149 29824 net.cpp:131] Top shape: (1)
I0428 20:01:52.875151 29824 net.cpp:139] Memory required for data: 4838804
I0428 20:01:52.875154 29824 layer_factory.hpp:77] Creating layer loss
I0428 20:01:52.875159 29824 net.cpp:86] Creating Layer loss
I0428 20:01:52.875161 29824 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:52.875165 29824 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:52.875175 29824 net.cpp:382] loss -> loss
I0428 20:01:52.875181 29824 layer_factory.hpp:77] Creating layer loss
I0428 20:01:52.875459 29824 net.cpp:124] Setting up loss
I0428 20:01:52.875468 29824 net.cpp:131] Top shape: (1)
I0428 20:01:52.875473 29824 net.cpp:134]     with loss weight 1
I0428 20:01:52.875486 29824 net.cpp:139] Memory required for data: 4838808
I0428 20:01:52.875490 29824 net.cpp:200] loss needs backward computation.
I0428 20:01:52.875494 29824 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:52.875499 29824 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:52.875501 29824 net.cpp:200] relu3 needs backward computation.
I0428 20:01:52.875504 29824 net.cpp:200] ip3 needs backward computation.
I0428 20:01:52.875507 29824 net.cpp:200] relu2 needs backward computation.
I0428 20:01:52.875509 29824 net.cpp:200] ip2 needs backward computation.
I0428 20:01:52.875512 29824 net.cpp:200] relu1 needs backward computation.
I0428 20:01:52.875515 29824 net.cpp:200] ip1 needs backward computation.
I0428 20:01:52.875519 29824 net.cpp:200] pool1 needs backward computation.
I0428 20:01:52.875520 29824 net.cpp:200] conv1 needs backward computation.
I0428 20:01:52.875524 29824 net.cpp:200] pool0 needs backward computation.
I0428 20:01:52.875526 29824 net.cpp:200] conv0 needs backward computation.
I0428 20:01:52.875530 29824 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:52.875533 29824 net.cpp:202] mnist does not need backward computation.
I0428 20:01:52.875550 29824 net.cpp:244] This network produces output accuracy
I0428 20:01:52.875553 29824 net.cpp:244] This network produces output loss
I0428 20:01:52.875579 29824 net.cpp:257] Network initialization done.
I0428 20:01:52.875634 29824 solver.cpp:56] Solver scaffolding done.
I0428 20:01:52.875977 29824 caffe.cpp:248] Starting Optimization
I0428 20:01:52.875998 29824 solver.cpp:273] Solving LeNet
I0428 20:01:52.876000 29824 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:52.876171 29824 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:52.880661 29824 blocking_queue.cpp:49] Waiting for data
I0428 20:01:52.953441 29831 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:52.953959 29824 solver.cpp:398]     Test net output #0: accuracy = 0.0567
I0428 20:01:52.953979 29824 solver.cpp:398]     Test net output #1: loss = 2.31036 (* 1 = 2.31036 loss)
I0428 20:01:52.957077 29824 solver.cpp:219] Iteration 0 (-1.02015e-42 iter/s, 0.0810353s/100 iters), loss = 2.31228
I0428 20:01:52.957100 29824 solver.cpp:238]     Train net output #0: loss = 2.31228 (* 1 = 2.31228 loss)
I0428 20:01:52.957111 29824 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:53.064970 29824 solver.cpp:219] Iteration 100 (927.163 iter/s, 0.107856s/100 iters), loss = 0.995721
I0428 20:01:53.064996 29824 solver.cpp:238]     Train net output #0: loss = 0.995721 (* 1 = 0.995721 loss)
I0428 20:01:53.065017 29824 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:53.171943 29824 solver.cpp:219] Iteration 200 (935.126 iter/s, 0.106937s/100 iters), loss = 0.7143
I0428 20:01:53.171967 29824 solver.cpp:238]     Train net output #0: loss = 0.7143 (* 1 = 0.7143 loss)
I0428 20:01:53.171972 29824 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:53.278254 29824 solver.cpp:219] Iteration 300 (940.947 iter/s, 0.106276s/100 iters), loss = 0.273735
I0428 20:01:53.278278 29824 solver.cpp:238]     Train net output #0: loss = 0.273735 (* 1 = 0.273735 loss)
I0428 20:01:53.278285 29824 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:53.385843 29824 solver.cpp:219] Iteration 400 (929.776 iter/s, 0.107553s/100 iters), loss = 0.401716
I0428 20:01:53.385879 29824 solver.cpp:238]     Train net output #0: loss = 0.401716 (* 1 = 0.401716 loss)
I0428 20:01:53.385886 29824 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:53.493711 29824 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:53.547549 29831 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:53.548070 29824 solver.cpp:398]     Test net output #0: accuracy = 0.8716
I0428 20:01:53.548094 29824 solver.cpp:398]     Test net output #1: loss = 0.367164 (* 1 = 0.367164 loss)
I0428 20:01:53.549221 29824 solver.cpp:219] Iteration 500 (612.227 iter/s, 0.163338s/100 iters), loss = 0.428952
I0428 20:01:53.549268 29824 solver.cpp:238]     Train net output #0: loss = 0.428952 (* 1 = 0.428952 loss)
I0428 20:01:53.549276 29824 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:53.660709 29824 solver.cpp:219] Iteration 600 (897.408 iter/s, 0.111432s/100 iters), loss = 0.24132
I0428 20:01:53.660737 29824 solver.cpp:238]     Train net output #0: loss = 0.24132 (* 1 = 0.24132 loss)
I0428 20:01:53.660744 29824 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:53.766369 29824 solver.cpp:219] Iteration 700 (946.775 iter/s, 0.105622s/100 iters), loss = 0.598126
I0428 20:01:53.766413 29824 solver.cpp:238]     Train net output #0: loss = 0.598126 (* 1 = 0.598126 loss)
I0428 20:01:53.766420 29824 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:53.871165 29824 solver.cpp:219] Iteration 800 (954.719 iter/s, 0.104743s/100 iters), loss = 0.496325
I0428 20:01:53.871192 29824 solver.cpp:238]     Train net output #0: loss = 0.496325 (* 1 = 0.496325 loss)
I0428 20:01:53.871198 29824 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:53.982789 29824 solver.cpp:219] Iteration 900 (896.176 iter/s, 0.111585s/100 iters), loss = 0.345185
I0428 20:01:53.982820 29824 solver.cpp:238]     Train net output #0: loss = 0.345185 (* 1 = 0.345185 loss)
I0428 20:01:53.982827 29824 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:54.018394 29830 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:54.089079 29824 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:54.090306 29824 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:54.090920 29824 solver.cpp:311] Iteration 1000, loss = 0.388171
I0428 20:01:54.090936 29824 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:54.165804 29831 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:54.166332 29824 solver.cpp:398]     Test net output #0: accuracy = 0.8871
I0428 20:01:54.166352 29824 solver.cpp:398]     Test net output #1: loss = 0.295643 (* 1 = 0.295643 loss)
I0428 20:01:54.166357 29824 solver.cpp:316] Optimization Done.
I0428 20:01:54.166366 29824 caffe.cpp:259] Optimization Done.
