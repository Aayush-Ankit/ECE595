I0428 19:31:20.172791 22552 caffe.cpp:218] Using GPUs 0
I0428 19:31:20.210101 22552 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:31:20.720249 22552 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test119.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:31:20.720391 22552 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test119.prototxt
I0428 19:31:20.720690 22552 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:31:20.720705 22552 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:31:20.720775 22552 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:31:20.720854 22552 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:20.720952 22552 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:31:20.720976 22552 net.cpp:86] Creating Layer mnist
I0428 19:31:20.720984 22552 net.cpp:382] mnist -> data
I0428 19:31:20.721007 22552 net.cpp:382] mnist -> label
I0428 19:31:20.722096 22552 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:31:20.724545 22552 net.cpp:124] Setting up mnist
I0428 19:31:20.724563 22552 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:31:20.724570 22552 net.cpp:131] Top shape: 64 (64)
I0428 19:31:20.724572 22552 net.cpp:139] Memory required for data: 200960
I0428 19:31:20.724580 22552 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:20.724611 22552 net.cpp:86] Creating Layer conv0
I0428 19:31:20.724617 22552 net.cpp:408] conv0 <- data
I0428 19:31:20.724630 22552 net.cpp:382] conv0 -> conv0
I0428 19:31:21.010434 22552 net.cpp:124] Setting up conv0
I0428 19:31:21.010462 22552 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:31:21.010466 22552 net.cpp:139] Memory required for data: 1675520
I0428 19:31:21.010481 22552 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:21.010494 22552 net.cpp:86] Creating Layer pool0
I0428 19:31:21.010499 22552 net.cpp:408] pool0 <- conv0
I0428 19:31:21.010505 22552 net.cpp:382] pool0 -> pool0
I0428 19:31:21.010552 22552 net.cpp:124] Setting up pool0
I0428 19:31:21.010558 22552 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:31:21.010561 22552 net.cpp:139] Memory required for data: 2044160
I0428 19:31:21.010565 22552 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:21.010571 22552 net.cpp:86] Creating Layer ip1
I0428 19:31:21.010576 22552 net.cpp:408] ip1 <- pool0
I0428 19:31:21.010581 22552 net.cpp:382] ip1 -> ip1
I0428 19:31:21.011611 22552 net.cpp:124] Setting up ip1
I0428 19:31:21.011625 22552 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:21.011642 22552 net.cpp:139] Memory required for data: 2046720
I0428 19:31:21.011651 22552 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:21.011658 22552 net.cpp:86] Creating Layer relu1
I0428 19:31:21.011662 22552 net.cpp:408] relu1 <- ip1
I0428 19:31:21.011667 22552 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:21.011834 22552 net.cpp:124] Setting up relu1
I0428 19:31:21.011843 22552 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:21.011847 22552 net.cpp:139] Memory required for data: 2049280
I0428 19:31:21.011849 22552 layer_factory.hpp:77] Creating layer loss
I0428 19:31:21.011857 22552 net.cpp:86] Creating Layer loss
I0428 19:31:21.011859 22552 net.cpp:408] loss <- ip1
I0428 19:31:21.011863 22552 net.cpp:408] loss <- label
I0428 19:31:21.011868 22552 net.cpp:382] loss -> loss
I0428 19:31:21.011886 22552 layer_factory.hpp:77] Creating layer loss
I0428 19:31:21.012697 22552 net.cpp:124] Setting up loss
I0428 19:31:21.012711 22552 net.cpp:131] Top shape: (1)
I0428 19:31:21.012713 22552 net.cpp:134]     with loss weight 1
I0428 19:31:21.012728 22552 net.cpp:139] Memory required for data: 2049284
I0428 19:31:21.012732 22552 net.cpp:200] loss needs backward computation.
I0428 19:31:21.012735 22552 net.cpp:200] relu1 needs backward computation.
I0428 19:31:21.012738 22552 net.cpp:200] ip1 needs backward computation.
I0428 19:31:21.012742 22552 net.cpp:200] pool0 needs backward computation.
I0428 19:31:21.012744 22552 net.cpp:200] conv0 needs backward computation.
I0428 19:31:21.012748 22552 net.cpp:202] mnist does not need backward computation.
I0428 19:31:21.012750 22552 net.cpp:244] This network produces output loss
I0428 19:31:21.012758 22552 net.cpp:257] Network initialization done.
I0428 19:31:21.013043 22552 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test119.prototxt
I0428 19:31:21.013068 22552 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:31:21.013155 22552 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:31:21.013242 22552 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:21.013286 22552 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:31:21.013299 22552 net.cpp:86] Creating Layer mnist
I0428 19:31:21.013303 22552 net.cpp:382] mnist -> data
I0428 19:31:21.013311 22552 net.cpp:382] mnist -> label
I0428 19:31:21.013397 22552 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:31:21.015470 22552 net.cpp:124] Setting up mnist
I0428 19:31:21.015483 22552 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:31:21.015488 22552 net.cpp:131] Top shape: 100 (100)
I0428 19:31:21.015491 22552 net.cpp:139] Memory required for data: 314000
I0428 19:31:21.015506 22552 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:31:21.015512 22552 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:31:21.015516 22552 net.cpp:408] label_mnist_1_split <- label
I0428 19:31:21.015521 22552 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:31:21.015527 22552 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:31:21.015635 22552 net.cpp:124] Setting up label_mnist_1_split
I0428 19:31:21.015643 22552 net.cpp:131] Top shape: 100 (100)
I0428 19:31:21.015661 22552 net.cpp:131] Top shape: 100 (100)
I0428 19:31:21.015664 22552 net.cpp:139] Memory required for data: 314800
I0428 19:31:21.015667 22552 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:21.015677 22552 net.cpp:86] Creating Layer conv0
I0428 19:31:21.015696 22552 net.cpp:408] conv0 <- data
I0428 19:31:21.015702 22552 net.cpp:382] conv0 -> conv0
I0428 19:31:21.017298 22552 net.cpp:124] Setting up conv0
I0428 19:31:21.017314 22552 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:31:21.017318 22552 net.cpp:139] Memory required for data: 2618800
I0428 19:31:21.017326 22552 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:21.017333 22552 net.cpp:86] Creating Layer pool0
I0428 19:31:21.017336 22552 net.cpp:408] pool0 <- conv0
I0428 19:31:21.017341 22552 net.cpp:382] pool0 -> pool0
I0428 19:31:21.017379 22552 net.cpp:124] Setting up pool0
I0428 19:31:21.017385 22552 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:31:21.017387 22552 net.cpp:139] Memory required for data: 3194800
I0428 19:31:21.017390 22552 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:21.017397 22552 net.cpp:86] Creating Layer ip1
I0428 19:31:21.017401 22552 net.cpp:408] ip1 <- pool0
I0428 19:31:21.017406 22552 net.cpp:382] ip1 -> ip1
I0428 19:31:21.017585 22552 net.cpp:124] Setting up ip1
I0428 19:31:21.017593 22552 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:21.017596 22552 net.cpp:139] Memory required for data: 3198800
I0428 19:31:21.017603 22552 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:21.017608 22552 net.cpp:86] Creating Layer relu1
I0428 19:31:21.017611 22552 net.cpp:408] relu1 <- ip1
I0428 19:31:21.017616 22552 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:21.017894 22552 net.cpp:124] Setting up relu1
I0428 19:31:21.017904 22552 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:21.017907 22552 net.cpp:139] Memory required for data: 3202800
I0428 19:31:21.017910 22552 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:31:21.017915 22552 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:31:21.017920 22552 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:31:21.017925 22552 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:31:21.017930 22552 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:31:21.017972 22552 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:31:21.017985 22552 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:21.017990 22552 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:21.017993 22552 net.cpp:139] Memory required for data: 3210800
I0428 19:31:21.017997 22552 layer_factory.hpp:77] Creating layer accuracy
I0428 19:31:21.018008 22552 net.cpp:86] Creating Layer accuracy
I0428 19:31:21.018012 22552 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:31:21.018015 22552 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:31:21.018020 22552 net.cpp:382] accuracy -> accuracy
I0428 19:31:21.018028 22552 net.cpp:124] Setting up accuracy
I0428 19:31:21.018033 22552 net.cpp:131] Top shape: (1)
I0428 19:31:21.018035 22552 net.cpp:139] Memory required for data: 3210804
I0428 19:31:21.018038 22552 layer_factory.hpp:77] Creating layer loss
I0428 19:31:21.018045 22552 net.cpp:86] Creating Layer loss
I0428 19:31:21.018049 22552 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:31:21.018054 22552 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:31:21.018057 22552 net.cpp:382] loss -> loss
I0428 19:31:21.018064 22552 layer_factory.hpp:77] Creating layer loss
I0428 19:31:21.018316 22552 net.cpp:124] Setting up loss
I0428 19:31:21.018335 22552 net.cpp:131] Top shape: (1)
I0428 19:31:21.018339 22552 net.cpp:134]     with loss weight 1
I0428 19:31:21.018345 22552 net.cpp:139] Memory required for data: 3210808
I0428 19:31:21.018349 22552 net.cpp:200] loss needs backward computation.
I0428 19:31:21.018352 22552 net.cpp:202] accuracy does not need backward computation.
I0428 19:31:21.018357 22552 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:31:21.018359 22552 net.cpp:200] relu1 needs backward computation.
I0428 19:31:21.018362 22552 net.cpp:200] ip1 needs backward computation.
I0428 19:31:21.018366 22552 net.cpp:200] pool0 needs backward computation.
I0428 19:31:21.018369 22552 net.cpp:200] conv0 needs backward computation.
I0428 19:31:21.018374 22552 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:31:21.018385 22552 net.cpp:202] mnist does not need backward computation.
I0428 19:31:21.018388 22552 net.cpp:244] This network produces output accuracy
I0428 19:31:21.018393 22552 net.cpp:244] This network produces output loss
I0428 19:31:21.018400 22552 net.cpp:257] Network initialization done.
I0428 19:31:21.018429 22552 solver.cpp:56] Solver scaffolding done.
I0428 19:31:21.018571 22552 caffe.cpp:248] Starting Optimization
I0428 19:31:21.018577 22552 solver.cpp:273] Solving LeNet
I0428 19:31:21.018581 22552 solver.cpp:274] Learning Rate Policy: inv
I0428 19:31:21.018663 22552 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:31:21.018728 22552 blocking_queue.cpp:49] Waiting for data
I0428 19:31:21.096298 22559 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:21.096851 22552 solver.cpp:398]     Test net output #0: accuracy = 0.1399
I0428 19:31:21.096886 22552 solver.cpp:398]     Test net output #1: loss = 2.29112 (* 1 = 2.29112 loss)
I0428 19:31:21.099045 22552 solver.cpp:219] Iteration 0 (-6.69901e-31 iter/s, 0.0804301s/100 iters), loss = 2.25474
I0428 19:31:21.099090 22552 solver.cpp:238]     Train net output #0: loss = 2.25474 (* 1 = 2.25474 loss)
I0428 19:31:21.099117 22552 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:31:21.154650 22552 solver.cpp:219] Iteration 100 (1800.17 iter/s, 0.0555504s/100 iters), loss = 0.998339
I0428 19:31:21.154676 22552 solver.cpp:238]     Train net output #0: loss = 0.998339 (* 1 = 0.998339 loss)
I0428 19:31:21.154683 22552 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:31:21.207773 22552 solver.cpp:219] Iteration 200 (1883.73 iter/s, 0.0530862s/100 iters), loss = 0.81405
I0428 19:31:21.207806 22552 solver.cpp:238]     Train net output #0: loss = 0.81405 (* 1 = 0.81405 loss)
I0428 19:31:21.207814 22552 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:31:21.262285 22552 solver.cpp:219] Iteration 300 (1835.85 iter/s, 0.0544706s/100 iters), loss = 1.04521
I0428 19:31:21.262326 22552 solver.cpp:238]     Train net output #0: loss = 1.04521 (* 1 = 1.04521 loss)
I0428 19:31:21.262334 22552 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:31:21.326181 22552 solver.cpp:219] Iteration 400 (1566.35 iter/s, 0.0638426s/100 iters), loss = 1.14622
I0428 19:31:21.326231 22552 solver.cpp:238]     Train net output #0: loss = 1.14622 (* 1 = 1.14622 loss)
I0428 19:31:21.326242 22552 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:31:21.382949 22552 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:31:21.436362 22559 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:21.436851 22552 solver.cpp:398]     Test net output #0: accuracy = 0.6626
I0428 19:31:21.436875 22552 solver.cpp:398]     Test net output #1: loss = 0.905322 (* 1 = 0.905322 loss)
I0428 19:31:21.437476 22552 solver.cpp:219] Iteration 500 (898.964 iter/s, 0.111239s/100 iters), loss = 1.12544
I0428 19:31:21.437501 22552 solver.cpp:238]     Train net output #0: loss = 1.12544 (* 1 = 1.12544 loss)
I0428 19:31:21.437510 22552 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:31:21.492590 22552 solver.cpp:219] Iteration 600 (1815.58 iter/s, 0.0550789s/100 iters), loss = 0.645845
I0428 19:31:21.492655 22552 solver.cpp:238]     Train net output #0: loss = 0.645845 (* 1 = 0.645845 loss)
I0428 19:31:21.492663 22552 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:31:21.543889 22552 solver.cpp:219] Iteration 700 (1952.06 iter/s, 0.051228s/100 iters), loss = 0.602182
I0428 19:31:21.543928 22552 solver.cpp:238]     Train net output #0: loss = 0.602182 (* 1 = 0.602182 loss)
I0428 19:31:21.543936 22552 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:31:21.600049 22552 solver.cpp:219] Iteration 800 (1782.12 iter/s, 0.0561128s/100 iters), loss = 0.837414
I0428 19:31:21.600077 22552 solver.cpp:238]     Train net output #0: loss = 0.837414 (* 1 = 0.837414 loss)
I0428 19:31:21.600085 22552 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:31:21.657991 22552 solver.cpp:219] Iteration 900 (1727.05 iter/s, 0.057902s/100 iters), loss = 0.576887
I0428 19:31:21.658035 22552 solver.cpp:238]     Train net output #0: loss = 0.576887 (* 1 = 0.576887 loss)
I0428 19:31:21.658046 22552 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:31:21.677388 22558 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:21.713284 22552 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:31:21.713997 22552 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:31:21.714522 22552 solver.cpp:311] Iteration 1000, loss = 0.58622
I0428 19:31:21.714546 22552 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:31:21.767735 22559 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:21.768213 22552 solver.cpp:398]     Test net output #0: accuracy = 0.8396
I0428 19:31:21.768237 22552 solver.cpp:398]     Test net output #1: loss = 0.512182 (* 1 = 0.512182 loss)
I0428 19:31:21.768244 22552 solver.cpp:316] Optimization Done.
I0428 19:31:21.768246 22552 caffe.cpp:259] Optimization Done.
