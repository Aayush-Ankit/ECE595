I0428 20:38:17.696234  5101 caffe.cpp:218] Using GPUs 0
I0428 20:38:17.725589  5101 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:38:18.223809  5101 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1663.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:38:18.223981  5101 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1663.prototxt
I0428 20:38:18.224414  5101 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:38:18.224441  5101 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:38:18.224556  5101 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:38:18.224673  5101 layer_factory.hpp:77] Creating layer mnist
I0428 20:38:18.224807  5101 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:38:18.224848  5101 net.cpp:86] Creating Layer mnist
I0428 20:38:18.224859  5101 net.cpp:382] mnist -> data
I0428 20:38:18.224894  5101 net.cpp:382] mnist -> label
I0428 20:38:18.226166  5101 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:38:18.228668  5101 net.cpp:124] Setting up mnist
I0428 20:38:18.228689  5101 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:38:18.228700  5101 net.cpp:131] Top shape: 64 (64)
I0428 20:38:18.228706  5101 net.cpp:139] Memory required for data: 200960
I0428 20:38:18.228716  5101 layer_factory.hpp:77] Creating layer conv0
I0428 20:38:18.228744  5101 net.cpp:86] Creating Layer conv0
I0428 20:38:18.228770  5101 net.cpp:408] conv0 <- data
I0428 20:38:18.228790  5101 net.cpp:382] conv0 -> conv0
I0428 20:38:18.521468  5101 net.cpp:124] Setting up conv0
I0428 20:38:18.521503  5101 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:38:18.521510  5101 net.cpp:139] Memory required for data: 14946560
I0428 20:38:18.521534  5101 layer_factory.hpp:77] Creating layer pool0
I0428 20:38:18.521553  5101 net.cpp:86] Creating Layer pool0
I0428 20:38:18.521561  5101 net.cpp:408] pool0 <- conv0
I0428 20:38:18.521574  5101 net.cpp:382] pool0 -> pool0
I0428 20:38:18.521646  5101 net.cpp:124] Setting up pool0
I0428 20:38:18.521657  5101 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:38:18.521663  5101 net.cpp:139] Memory required for data: 18632960
I0428 20:38:18.521670  5101 layer_factory.hpp:77] Creating layer conv1
I0428 20:38:18.521688  5101 net.cpp:86] Creating Layer conv1
I0428 20:38:18.521697  5101 net.cpp:408] conv1 <- pool0
I0428 20:38:18.521708  5101 net.cpp:382] conv1 -> conv1
I0428 20:38:18.526528  5101 net.cpp:124] Setting up conv1
I0428 20:38:18.526548  5101 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:38:18.526556  5101 net.cpp:139] Memory required for data: 20271360
I0428 20:38:18.526572  5101 layer_factory.hpp:77] Creating layer pool1
I0428 20:38:18.526587  5101 net.cpp:86] Creating Layer pool1
I0428 20:38:18.526594  5101 net.cpp:408] pool1 <- conv1
I0428 20:38:18.526604  5101 net.cpp:382] pool1 -> pool1
I0428 20:38:18.526657  5101 net.cpp:124] Setting up pool1
I0428 20:38:18.526669  5101 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:38:18.526675  5101 net.cpp:139] Memory required for data: 20680960
I0428 20:38:18.526681  5101 layer_factory.hpp:77] Creating layer ip1
I0428 20:38:18.526695  5101 net.cpp:86] Creating Layer ip1
I0428 20:38:18.526701  5101 net.cpp:408] ip1 <- pool1
I0428 20:38:18.526711  5101 net.cpp:382] ip1 -> ip1
I0428 20:38:18.527114  5101 net.cpp:124] Setting up ip1
I0428 20:38:18.527127  5101 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:18.527132  5101 net.cpp:139] Memory required for data: 20687360
I0428 20:38:18.527146  5101 layer_factory.hpp:77] Creating layer relu1
I0428 20:38:18.527163  5101 net.cpp:86] Creating Layer relu1
I0428 20:38:18.527173  5101 net.cpp:408] relu1 <- ip1
I0428 20:38:18.527184  5101 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:38:18.527387  5101 net.cpp:124] Setting up relu1
I0428 20:38:18.527400  5101 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:18.527407  5101 net.cpp:139] Memory required for data: 20693760
I0428 20:38:18.527413  5101 layer_factory.hpp:77] Creating layer ip2
I0428 20:38:18.527426  5101 net.cpp:86] Creating Layer ip2
I0428 20:38:18.527432  5101 net.cpp:408] ip2 <- ip1
I0428 20:38:18.527442  5101 net.cpp:382] ip2 -> ip2
I0428 20:38:18.527568  5101 net.cpp:124] Setting up ip2
I0428 20:38:18.527580  5101 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:18.527585  5101 net.cpp:139] Memory required for data: 20700160
I0428 20:38:18.527601  5101 layer_factory.hpp:77] Creating layer relu2
I0428 20:38:18.527616  5101 net.cpp:86] Creating Layer relu2
I0428 20:38:18.527623  5101 net.cpp:408] relu2 <- ip2
I0428 20:38:18.527632  5101 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:38:18.528512  5101 net.cpp:124] Setting up relu2
I0428 20:38:18.528529  5101 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:38:18.528535  5101 net.cpp:139] Memory required for data: 20706560
I0428 20:38:18.528542  5101 layer_factory.hpp:77] Creating layer ip3
I0428 20:38:18.528555  5101 net.cpp:86] Creating Layer ip3
I0428 20:38:18.528563  5101 net.cpp:408] ip3 <- ip2
I0428 20:38:18.528573  5101 net.cpp:382] ip3 -> ip3
I0428 20:38:18.528702  5101 net.cpp:124] Setting up ip3
I0428 20:38:18.528713  5101 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:18.528719  5101 net.cpp:139] Memory required for data: 20709120
I0428 20:38:18.528735  5101 layer_factory.hpp:77] Creating layer relu3
I0428 20:38:18.528745  5101 net.cpp:86] Creating Layer relu3
I0428 20:38:18.528753  5101 net.cpp:408] relu3 <- ip3
I0428 20:38:18.528777  5101 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:38:18.528990  5101 net.cpp:124] Setting up relu3
I0428 20:38:18.529002  5101 net.cpp:131] Top shape: 64 10 (640)
I0428 20:38:18.529009  5101 net.cpp:139] Memory required for data: 20711680
I0428 20:38:18.529016  5101 layer_factory.hpp:77] Creating layer loss
I0428 20:38:18.529026  5101 net.cpp:86] Creating Layer loss
I0428 20:38:18.529032  5101 net.cpp:408] loss <- ip3
I0428 20:38:18.529042  5101 net.cpp:408] loss <- label
I0428 20:38:18.529052  5101 net.cpp:382] loss -> loss
I0428 20:38:18.529083  5101 layer_factory.hpp:77] Creating layer loss
I0428 20:38:18.529371  5101 net.cpp:124] Setting up loss
I0428 20:38:18.529384  5101 net.cpp:131] Top shape: (1)
I0428 20:38:18.529391  5101 net.cpp:134]     with loss weight 1
I0428 20:38:18.529413  5101 net.cpp:139] Memory required for data: 20711684
I0428 20:38:18.529422  5101 net.cpp:200] loss needs backward computation.
I0428 20:38:18.529429  5101 net.cpp:200] relu3 needs backward computation.
I0428 20:38:18.529435  5101 net.cpp:200] ip3 needs backward computation.
I0428 20:38:18.529443  5101 net.cpp:200] relu2 needs backward computation.
I0428 20:38:18.529448  5101 net.cpp:200] ip2 needs backward computation.
I0428 20:38:18.529455  5101 net.cpp:200] relu1 needs backward computation.
I0428 20:38:18.529461  5101 net.cpp:200] ip1 needs backward computation.
I0428 20:38:18.529467  5101 net.cpp:200] pool1 needs backward computation.
I0428 20:38:18.529474  5101 net.cpp:200] conv1 needs backward computation.
I0428 20:38:18.529481  5101 net.cpp:200] pool0 needs backward computation.
I0428 20:38:18.529487  5101 net.cpp:200] conv0 needs backward computation.
I0428 20:38:18.529495  5101 net.cpp:202] mnist does not need backward computation.
I0428 20:38:18.529500  5101 net.cpp:244] This network produces output loss
I0428 20:38:18.529518  5101 net.cpp:257] Network initialization done.
I0428 20:38:18.529918  5101 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1663.prototxt
I0428 20:38:18.529961  5101 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:38:18.530079  5101 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:38:18.530232  5101 layer_factory.hpp:77] Creating layer mnist
I0428 20:38:18.530305  5101 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:38:18.530326  5101 net.cpp:86] Creating Layer mnist
I0428 20:38:18.530336  5101 net.cpp:382] mnist -> data
I0428 20:38:18.530350  5101 net.cpp:382] mnist -> label
I0428 20:38:18.530495  5101 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:38:18.532881  5101 net.cpp:124] Setting up mnist
I0428 20:38:18.532901  5101 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:38:18.532910  5101 net.cpp:131] Top shape: 100 (100)
I0428 20:38:18.532917  5101 net.cpp:139] Memory required for data: 314000
I0428 20:38:18.532923  5101 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:38:18.532960  5101 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:38:18.532968  5101 net.cpp:408] label_mnist_1_split <- label
I0428 20:38:18.532977  5101 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:38:18.532991  5101 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:38:18.533080  5101 net.cpp:124] Setting up label_mnist_1_split
I0428 20:38:18.533092  5101 net.cpp:131] Top shape: 100 (100)
I0428 20:38:18.533099  5101 net.cpp:131] Top shape: 100 (100)
I0428 20:38:18.533105  5101 net.cpp:139] Memory required for data: 314800
I0428 20:38:18.533113  5101 layer_factory.hpp:77] Creating layer conv0
I0428 20:38:18.533128  5101 net.cpp:86] Creating Layer conv0
I0428 20:38:18.533135  5101 net.cpp:408] conv0 <- data
I0428 20:38:18.533146  5101 net.cpp:382] conv0 -> conv0
I0428 20:38:18.534940  5101 net.cpp:124] Setting up conv0
I0428 20:38:18.534960  5101 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:38:18.534967  5101 net.cpp:139] Memory required for data: 23354800
I0428 20:38:18.534986  5101 layer_factory.hpp:77] Creating layer pool0
I0428 20:38:18.534998  5101 net.cpp:86] Creating Layer pool0
I0428 20:38:18.535006  5101 net.cpp:408] pool0 <- conv0
I0428 20:38:18.535017  5101 net.cpp:382] pool0 -> pool0
I0428 20:38:18.535069  5101 net.cpp:124] Setting up pool0
I0428 20:38:18.535079  5101 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:38:18.535085  5101 net.cpp:139] Memory required for data: 29114800
I0428 20:38:18.535091  5101 layer_factory.hpp:77] Creating layer conv1
I0428 20:38:18.535107  5101 net.cpp:86] Creating Layer conv1
I0428 20:38:18.535115  5101 net.cpp:408] conv1 <- pool0
I0428 20:38:18.535125  5101 net.cpp:382] conv1 -> conv1
I0428 20:38:18.538540  5101 net.cpp:124] Setting up conv1
I0428 20:38:18.538559  5101 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:38:18.538566  5101 net.cpp:139] Memory required for data: 31674800
I0428 20:38:18.538583  5101 layer_factory.hpp:77] Creating layer pool1
I0428 20:38:18.538596  5101 net.cpp:86] Creating Layer pool1
I0428 20:38:18.538604  5101 net.cpp:408] pool1 <- conv1
I0428 20:38:18.538614  5101 net.cpp:382] pool1 -> pool1
I0428 20:38:18.538671  5101 net.cpp:124] Setting up pool1
I0428 20:38:18.538683  5101 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:38:18.538689  5101 net.cpp:139] Memory required for data: 32314800
I0428 20:38:18.538697  5101 layer_factory.hpp:77] Creating layer ip1
I0428 20:38:18.538708  5101 net.cpp:86] Creating Layer ip1
I0428 20:38:18.538715  5101 net.cpp:408] ip1 <- pool1
I0428 20:38:18.538738  5101 net.cpp:382] ip1 -> ip1
I0428 20:38:18.539160  5101 net.cpp:124] Setting up ip1
I0428 20:38:18.539185  5101 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:18.539191  5101 net.cpp:139] Memory required for data: 32324800
I0428 20:38:18.539206  5101 layer_factory.hpp:77] Creating layer relu1
I0428 20:38:18.539216  5101 net.cpp:86] Creating Layer relu1
I0428 20:38:18.539224  5101 net.cpp:408] relu1 <- ip1
I0428 20:38:18.539239  5101 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:38:18.539491  5101 net.cpp:124] Setting up relu1
I0428 20:38:18.539506  5101 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:18.539513  5101 net.cpp:139] Memory required for data: 32334800
I0428 20:38:18.539520  5101 layer_factory.hpp:77] Creating layer ip2
I0428 20:38:18.539535  5101 net.cpp:86] Creating Layer ip2
I0428 20:38:18.539542  5101 net.cpp:408] ip2 <- ip1
I0428 20:38:18.539554  5101 net.cpp:382] ip2 -> ip2
I0428 20:38:18.539695  5101 net.cpp:124] Setting up ip2
I0428 20:38:18.539707  5101 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:18.539713  5101 net.cpp:139] Memory required for data: 32344800
I0428 20:38:18.539723  5101 layer_factory.hpp:77] Creating layer relu2
I0428 20:38:18.539736  5101 net.cpp:86] Creating Layer relu2
I0428 20:38:18.539743  5101 net.cpp:408] relu2 <- ip2
I0428 20:38:18.539752  5101 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:38:18.539964  5101 net.cpp:124] Setting up relu2
I0428 20:38:18.539978  5101 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:38:18.539984  5101 net.cpp:139] Memory required for data: 32354800
I0428 20:38:18.539991  5101 layer_factory.hpp:77] Creating layer ip3
I0428 20:38:18.540005  5101 net.cpp:86] Creating Layer ip3
I0428 20:38:18.540012  5101 net.cpp:408] ip3 <- ip2
I0428 20:38:18.540022  5101 net.cpp:382] ip3 -> ip3
I0428 20:38:18.540155  5101 net.cpp:124] Setting up ip3
I0428 20:38:18.540166  5101 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:18.540177  5101 net.cpp:139] Memory required for data: 32358800
I0428 20:38:18.540192  5101 layer_factory.hpp:77] Creating layer relu3
I0428 20:38:18.540205  5101 net.cpp:86] Creating Layer relu3
I0428 20:38:18.540216  5101 net.cpp:408] relu3 <- ip3
I0428 20:38:18.540225  5101 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:38:18.541187  5101 net.cpp:124] Setting up relu3
I0428 20:38:18.541203  5101 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:18.541210  5101 net.cpp:139] Memory required for data: 32362800
I0428 20:38:18.541221  5101 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:38:18.541232  5101 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:38:18.541239  5101 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:38:18.541249  5101 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:38:18.541260  5101 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:38:18.541317  5101 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:38:18.541328  5101 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:18.541337  5101 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:38:18.541342  5101 net.cpp:139] Memory required for data: 32370800
I0428 20:38:18.541348  5101 layer_factory.hpp:77] Creating layer accuracy
I0428 20:38:18.541360  5101 net.cpp:86] Creating Layer accuracy
I0428 20:38:18.541366  5101 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:38:18.541375  5101 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:38:18.541384  5101 net.cpp:382] accuracy -> accuracy
I0428 20:38:18.541398  5101 net.cpp:124] Setting up accuracy
I0428 20:38:18.541407  5101 net.cpp:131] Top shape: (1)
I0428 20:38:18.541414  5101 net.cpp:139] Memory required for data: 32370804
I0428 20:38:18.541419  5101 layer_factory.hpp:77] Creating layer loss
I0428 20:38:18.541430  5101 net.cpp:86] Creating Layer loss
I0428 20:38:18.541437  5101 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:38:18.541445  5101 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:38:18.541453  5101 net.cpp:382] loss -> loss
I0428 20:38:18.541468  5101 layer_factory.hpp:77] Creating layer loss
I0428 20:38:18.541769  5101 net.cpp:124] Setting up loss
I0428 20:38:18.541780  5101 net.cpp:131] Top shape: (1)
I0428 20:38:18.541786  5101 net.cpp:134]     with loss weight 1
I0428 20:38:18.541812  5101 net.cpp:139] Memory required for data: 32370808
I0428 20:38:18.541820  5101 net.cpp:200] loss needs backward computation.
I0428 20:38:18.541827  5101 net.cpp:202] accuracy does not need backward computation.
I0428 20:38:18.541834  5101 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:38:18.541841  5101 net.cpp:200] relu3 needs backward computation.
I0428 20:38:18.541846  5101 net.cpp:200] ip3 needs backward computation.
I0428 20:38:18.541853  5101 net.cpp:200] relu2 needs backward computation.
I0428 20:38:18.541858  5101 net.cpp:200] ip2 needs backward computation.
I0428 20:38:18.541864  5101 net.cpp:200] relu1 needs backward computation.
I0428 20:38:18.541870  5101 net.cpp:200] ip1 needs backward computation.
I0428 20:38:18.541877  5101 net.cpp:200] pool1 needs backward computation.
I0428 20:38:18.541883  5101 net.cpp:200] conv1 needs backward computation.
I0428 20:38:18.541889  5101 net.cpp:200] pool0 needs backward computation.
I0428 20:38:18.541896  5101 net.cpp:200] conv0 needs backward computation.
I0428 20:38:18.541903  5101 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:38:18.541911  5101 net.cpp:202] mnist does not need backward computation.
I0428 20:38:18.541916  5101 net.cpp:244] This network produces output accuracy
I0428 20:38:18.541923  5101 net.cpp:244] This network produces output loss
I0428 20:38:18.541945  5101 net.cpp:257] Network initialization done.
I0428 20:38:18.542004  5101 solver.cpp:56] Solver scaffolding done.
I0428 20:38:18.542417  5101 caffe.cpp:248] Starting Optimization
I0428 20:38:18.542425  5101 solver.cpp:273] Solving LeNet
I0428 20:38:18.542431  5101 solver.cpp:274] Learning Rate Policy: inv
I0428 20:38:18.543993  5101 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:38:18.674513  5108 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:18.679039  5101 solver.cpp:398]     Test net output #0: accuracy = 0.1198
I0428 20:38:18.679064  5101 solver.cpp:398]     Test net output #1: loss = 2.31484 (* 1 = 2.31484 loss)
I0428 20:38:18.684448  5101 solver.cpp:219] Iteration 0 (-1.62636e-31 iter/s, 0.141974s/100 iters), loss = 2.33682
I0428 20:38:18.684478  5101 solver.cpp:238]     Train net output #0: loss = 2.33682 (* 1 = 2.33682 loss)
I0428 20:38:18.684494  5101 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:38:18.953063  5101 solver.cpp:219] Iteration 100 (372.35 iter/s, 0.268564s/100 iters), loss = 1.09808
I0428 20:38:18.953099  5101 solver.cpp:238]     Train net output #0: loss = 1.09808 (* 1 = 1.09808 loss)
I0428 20:38:18.953110  5101 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:38:19.220278  5101 solver.cpp:219] Iteration 200 (374.302 iter/s, 0.267164s/100 iters), loss = 0.734675
I0428 20:38:19.220312  5101 solver.cpp:238]     Train net output #0: loss = 0.734675 (* 1 = 0.734675 loss)
I0428 20:38:19.220324  5101 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:38:19.487615  5101 solver.cpp:219] Iteration 300 (374.128 iter/s, 0.267289s/100 iters), loss = 0.891927
I0428 20:38:19.487653  5101 solver.cpp:238]     Train net output #0: loss = 0.891927 (* 1 = 0.891927 loss)
I0428 20:38:19.487668  5101 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:38:19.760360  5101 solver.cpp:219] Iteration 400 (366.716 iter/s, 0.27269s/100 iters), loss = 0.741408
I0428 20:38:19.760397  5101 solver.cpp:238]     Train net output #0: loss = 0.741408 (* 1 = 0.741408 loss)
I0428 20:38:19.760411  5101 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:38:20.034242  5101 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:38:20.160100  5108 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:20.164840  5101 solver.cpp:398]     Test net output #0: accuracy = 0.7653
I0428 20:38:20.164868  5101 solver.cpp:398]     Test net output #1: loss = 0.775868 (* 1 = 0.775868 loss)
I0428 20:38:20.167409  5101 solver.cpp:219] Iteration 500 (245.706 iter/s, 0.406991s/100 iters), loss = 0.662551
I0428 20:38:20.167441  5101 solver.cpp:238]     Train net output #0: loss = 0.662551 (* 1 = 0.662551 loss)
I0428 20:38:20.167474  5101 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:38:20.444427  5101 solver.cpp:219] Iteration 600 (361.052 iter/s, 0.276968s/100 iters), loss = 0.805279
I0428 20:38:20.444473  5101 solver.cpp:238]     Train net output #0: loss = 0.805279 (* 1 = 0.805279 loss)
I0428 20:38:20.444489  5101 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:38:20.726065  5101 solver.cpp:219] Iteration 700 (355.142 iter/s, 0.281577s/100 iters), loss = 0.919008
I0428 20:38:20.726114  5101 solver.cpp:238]     Train net output #0: loss = 0.919008 (* 1 = 0.919008 loss)
I0428 20:38:20.726131  5101 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:38:21.009474  5101 solver.cpp:219] Iteration 800 (352.924 iter/s, 0.283347s/100 iters), loss = 0.677419
I0428 20:38:21.009517  5101 solver.cpp:238]     Train net output #0: loss = 0.677419 (* 1 = 0.677419 loss)
I0428 20:38:21.009532  5101 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:38:21.294663  5101 solver.cpp:219] Iteration 900 (350.718 iter/s, 0.28513s/100 iters), loss = 0.504288
I0428 20:38:21.294710  5101 solver.cpp:238]     Train net output #0: loss = 0.504288 (* 1 = 0.504288 loss)
I0428 20:38:21.294728  5101 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:38:21.389245  5107 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:21.578917  5101 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:38:21.587363  5101 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:38:21.592139  5101 solver.cpp:311] Iteration 1000, loss = 0.583423
I0428 20:38:21.592170  5101 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:38:21.723564  5108 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:38:21.727079  5101 solver.cpp:398]     Test net output #0: accuracy = 0.7841
I0428 20:38:21.727113  5101 solver.cpp:398]     Test net output #1: loss = 0.528093 (* 1 = 0.528093 loss)
I0428 20:38:21.727121  5101 solver.cpp:316] Optimization Done.
I0428 20:38:21.727126  5101 caffe.cpp:259] Optimization Done.
