I0428 20:11:09.666115 32016 caffe.cpp:218] Using GPUs 0
I0428 20:11:09.696501 32016 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:11:10.215216 32016 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1152.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:11:10.215353 32016 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1152.prototxt
I0428 20:11:10.215768 32016 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:11:10.215787 32016 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:11:10.215893 32016 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:11:10.215972 32016 layer_factory.hpp:77] Creating layer mnist
I0428 20:11:10.216069 32016 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:11:10.216092 32016 net.cpp:86] Creating Layer mnist
I0428 20:11:10.216101 32016 net.cpp:382] mnist -> data
I0428 20:11:10.216123 32016 net.cpp:382] mnist -> label
I0428 20:11:10.217238 32016 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:11:10.219691 32016 net.cpp:124] Setting up mnist
I0428 20:11:10.219709 32016 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:11:10.219715 32016 net.cpp:131] Top shape: 64 (64)
I0428 20:11:10.219719 32016 net.cpp:139] Memory required for data: 200960
I0428 20:11:10.219727 32016 layer_factory.hpp:77] Creating layer conv0
I0428 20:11:10.219744 32016 net.cpp:86] Creating Layer conv0
I0428 20:11:10.219765 32016 net.cpp:408] conv0 <- data
I0428 20:11:10.219777 32016 net.cpp:382] conv0 -> conv0
I0428 20:11:10.508172 32016 net.cpp:124] Setting up conv0
I0428 20:11:10.508203 32016 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:11:10.508208 32016 net.cpp:139] Memory required for data: 3887360
I0428 20:11:10.508227 32016 layer_factory.hpp:77] Creating layer pool0
I0428 20:11:10.508242 32016 net.cpp:86] Creating Layer pool0
I0428 20:11:10.508247 32016 net.cpp:408] pool0 <- conv0
I0428 20:11:10.508255 32016 net.cpp:382] pool0 -> pool0
I0428 20:11:10.508306 32016 net.cpp:124] Setting up pool0
I0428 20:11:10.508313 32016 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:11:10.508317 32016 net.cpp:139] Memory required for data: 4808960
I0428 20:11:10.508321 32016 layer_factory.hpp:77] Creating layer conv1
I0428 20:11:10.508333 32016 net.cpp:86] Creating Layer conv1
I0428 20:11:10.508337 32016 net.cpp:408] conv1 <- pool0
I0428 20:11:10.508343 32016 net.cpp:382] conv1 -> conv1
I0428 20:11:10.510679 32016 net.cpp:124] Setting up conv1
I0428 20:11:10.510696 32016 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:11:10.510701 32016 net.cpp:139] Memory required for data: 5628160
I0428 20:11:10.510711 32016 layer_factory.hpp:77] Creating layer pool1
I0428 20:11:10.510721 32016 net.cpp:86] Creating Layer pool1
I0428 20:11:10.510725 32016 net.cpp:408] pool1 <- conv1
I0428 20:11:10.510731 32016 net.cpp:382] pool1 -> pool1
I0428 20:11:10.510774 32016 net.cpp:124] Setting up pool1
I0428 20:11:10.510782 32016 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:11:10.510785 32016 net.cpp:139] Memory required for data: 5832960
I0428 20:11:10.510788 32016 layer_factory.hpp:77] Creating layer ip1
I0428 20:11:10.510797 32016 net.cpp:86] Creating Layer ip1
I0428 20:11:10.510800 32016 net.cpp:408] ip1 <- pool1
I0428 20:11:10.510805 32016 net.cpp:382] ip1 -> ip1
I0428 20:11:10.511059 32016 net.cpp:124] Setting up ip1
I0428 20:11:10.511070 32016 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:11:10.511073 32016 net.cpp:139] Memory required for data: 5839360
I0428 20:11:10.511082 32016 layer_factory.hpp:77] Creating layer relu1
I0428 20:11:10.511088 32016 net.cpp:86] Creating Layer relu1
I0428 20:11:10.511092 32016 net.cpp:408] relu1 <- ip1
I0428 20:11:10.511096 32016 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:11:10.511298 32016 net.cpp:124] Setting up relu1
I0428 20:11:10.511309 32016 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:11:10.511313 32016 net.cpp:139] Memory required for data: 5845760
I0428 20:11:10.511317 32016 layer_factory.hpp:77] Creating layer ip2
I0428 20:11:10.511325 32016 net.cpp:86] Creating Layer ip2
I0428 20:11:10.511328 32016 net.cpp:408] ip2 <- ip1
I0428 20:11:10.511335 32016 net.cpp:382] ip2 -> ip2
I0428 20:11:10.511456 32016 net.cpp:124] Setting up ip2
I0428 20:11:10.511464 32016 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:10.511468 32016 net.cpp:139] Memory required for data: 5848320
I0428 20:11:10.511474 32016 layer_factory.hpp:77] Creating layer relu2
I0428 20:11:10.511483 32016 net.cpp:86] Creating Layer relu2
I0428 20:11:10.511487 32016 net.cpp:408] relu2 <- ip2
I0428 20:11:10.511492 32016 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:11:10.512338 32016 net.cpp:124] Setting up relu2
I0428 20:11:10.512353 32016 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:10.512358 32016 net.cpp:139] Memory required for data: 5850880
I0428 20:11:10.512362 32016 layer_factory.hpp:77] Creating layer ip3
I0428 20:11:10.512372 32016 net.cpp:86] Creating Layer ip3
I0428 20:11:10.512377 32016 net.cpp:408] ip3 <- ip2
I0428 20:11:10.512382 32016 net.cpp:382] ip3 -> ip3
I0428 20:11:10.512507 32016 net.cpp:124] Setting up ip3
I0428 20:11:10.512518 32016 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:10.512522 32016 net.cpp:139] Memory required for data: 5853440
I0428 20:11:10.512531 32016 layer_factory.hpp:77] Creating layer relu3
I0428 20:11:10.512538 32016 net.cpp:86] Creating Layer relu3
I0428 20:11:10.512542 32016 net.cpp:408] relu3 <- ip3
I0428 20:11:10.512547 32016 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:11:10.512753 32016 net.cpp:124] Setting up relu3
I0428 20:11:10.512764 32016 net.cpp:131] Top shape: 64 10 (640)
I0428 20:11:10.512768 32016 net.cpp:139] Memory required for data: 5856000
I0428 20:11:10.512771 32016 layer_factory.hpp:77] Creating layer loss
I0428 20:11:10.512778 32016 net.cpp:86] Creating Layer loss
I0428 20:11:10.512783 32016 net.cpp:408] loss <- ip3
I0428 20:11:10.512786 32016 net.cpp:408] loss <- label
I0428 20:11:10.512794 32016 net.cpp:382] loss -> loss
I0428 20:11:10.512820 32016 layer_factory.hpp:77] Creating layer loss
I0428 20:11:10.513105 32016 net.cpp:124] Setting up loss
I0428 20:11:10.513116 32016 net.cpp:131] Top shape: (1)
I0428 20:11:10.513120 32016 net.cpp:134]     with loss weight 1
I0428 20:11:10.513136 32016 net.cpp:139] Memory required for data: 5856004
I0428 20:11:10.513140 32016 net.cpp:200] loss needs backward computation.
I0428 20:11:10.513145 32016 net.cpp:200] relu3 needs backward computation.
I0428 20:11:10.513149 32016 net.cpp:200] ip3 needs backward computation.
I0428 20:11:10.513151 32016 net.cpp:200] relu2 needs backward computation.
I0428 20:11:10.513155 32016 net.cpp:200] ip2 needs backward computation.
I0428 20:11:10.513159 32016 net.cpp:200] relu1 needs backward computation.
I0428 20:11:10.513161 32016 net.cpp:200] ip1 needs backward computation.
I0428 20:11:10.513165 32016 net.cpp:200] pool1 needs backward computation.
I0428 20:11:10.513170 32016 net.cpp:200] conv1 needs backward computation.
I0428 20:11:10.513172 32016 net.cpp:200] pool0 needs backward computation.
I0428 20:11:10.513176 32016 net.cpp:200] conv0 needs backward computation.
I0428 20:11:10.513180 32016 net.cpp:202] mnist does not need backward computation.
I0428 20:11:10.513183 32016 net.cpp:244] This network produces output loss
I0428 20:11:10.513195 32016 net.cpp:257] Network initialization done.
I0428 20:11:10.513581 32016 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1152.prototxt
I0428 20:11:10.513614 32016 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:11:10.513726 32016 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:11:10.513826 32016 layer_factory.hpp:77] Creating layer mnist
I0428 20:11:10.513878 32016 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:11:10.513892 32016 net.cpp:86] Creating Layer mnist
I0428 20:11:10.513900 32016 net.cpp:382] mnist -> data
I0428 20:11:10.513908 32016 net.cpp:382] mnist -> label
I0428 20:11:10.514014 32016 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:11:10.516216 32016 net.cpp:124] Setting up mnist
I0428 20:11:10.516232 32016 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:11:10.516237 32016 net.cpp:131] Top shape: 100 (100)
I0428 20:11:10.516242 32016 net.cpp:139] Memory required for data: 314000
I0428 20:11:10.516245 32016 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:11:10.516273 32016 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:11:10.516278 32016 net.cpp:408] label_mnist_1_split <- label
I0428 20:11:10.516283 32016 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:11:10.516290 32016 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:11:10.516345 32016 net.cpp:124] Setting up label_mnist_1_split
I0428 20:11:10.516362 32016 net.cpp:131] Top shape: 100 (100)
I0428 20:11:10.516367 32016 net.cpp:131] Top shape: 100 (100)
I0428 20:11:10.516371 32016 net.cpp:139] Memory required for data: 314800
I0428 20:11:10.516374 32016 layer_factory.hpp:77] Creating layer conv0
I0428 20:11:10.516386 32016 net.cpp:86] Creating Layer conv0
I0428 20:11:10.516389 32016 net.cpp:408] conv0 <- data
I0428 20:11:10.516397 32016 net.cpp:382] conv0 -> conv0
I0428 20:11:10.518347 32016 net.cpp:124] Setting up conv0
I0428 20:11:10.518364 32016 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:11:10.518368 32016 net.cpp:139] Memory required for data: 6074800
I0428 20:11:10.518379 32016 layer_factory.hpp:77] Creating layer pool0
I0428 20:11:10.518388 32016 net.cpp:86] Creating Layer pool0
I0428 20:11:10.518391 32016 net.cpp:408] pool0 <- conv0
I0428 20:11:10.518399 32016 net.cpp:382] pool0 -> pool0
I0428 20:11:10.518442 32016 net.cpp:124] Setting up pool0
I0428 20:11:10.518450 32016 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:11:10.518452 32016 net.cpp:139] Memory required for data: 7514800
I0428 20:11:10.518456 32016 layer_factory.hpp:77] Creating layer conv1
I0428 20:11:10.518468 32016 net.cpp:86] Creating Layer conv1
I0428 20:11:10.518472 32016 net.cpp:408] conv1 <- pool0
I0428 20:11:10.518478 32016 net.cpp:382] conv1 -> conv1
I0428 20:11:10.520498 32016 net.cpp:124] Setting up conv1
I0428 20:11:10.520514 32016 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:11:10.520519 32016 net.cpp:139] Memory required for data: 8794800
I0428 20:11:10.520529 32016 layer_factory.hpp:77] Creating layer pool1
I0428 20:11:10.520537 32016 net.cpp:86] Creating Layer pool1
I0428 20:11:10.520541 32016 net.cpp:408] pool1 <- conv1
I0428 20:11:10.520548 32016 net.cpp:382] pool1 -> pool1
I0428 20:11:10.520592 32016 net.cpp:124] Setting up pool1
I0428 20:11:10.520604 32016 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:11:10.520608 32016 net.cpp:139] Memory required for data: 9114800
I0428 20:11:10.520612 32016 layer_factory.hpp:77] Creating layer ip1
I0428 20:11:10.520620 32016 net.cpp:86] Creating Layer ip1
I0428 20:11:10.520624 32016 net.cpp:408] ip1 <- pool1
I0428 20:11:10.520630 32016 net.cpp:382] ip1 -> ip1
I0428 20:11:10.520897 32016 net.cpp:124] Setting up ip1
I0428 20:11:10.520908 32016 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:11:10.520925 32016 net.cpp:139] Memory required for data: 9124800
I0428 20:11:10.520936 32016 layer_factory.hpp:77] Creating layer relu1
I0428 20:11:10.520942 32016 net.cpp:86] Creating Layer relu1
I0428 20:11:10.520946 32016 net.cpp:408] relu1 <- ip1
I0428 20:11:10.520951 32016 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:11:10.521148 32016 net.cpp:124] Setting up relu1
I0428 20:11:10.521159 32016 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:11:10.521162 32016 net.cpp:139] Memory required for data: 9134800
I0428 20:11:10.521167 32016 layer_factory.hpp:77] Creating layer ip2
I0428 20:11:10.521175 32016 net.cpp:86] Creating Layer ip2
I0428 20:11:10.521179 32016 net.cpp:408] ip2 <- ip1
I0428 20:11:10.521186 32016 net.cpp:382] ip2 -> ip2
I0428 20:11:10.521329 32016 net.cpp:124] Setting up ip2
I0428 20:11:10.521338 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.521342 32016 net.cpp:139] Memory required for data: 9138800
I0428 20:11:10.521348 32016 layer_factory.hpp:77] Creating layer relu2
I0428 20:11:10.521354 32016 net.cpp:86] Creating Layer relu2
I0428 20:11:10.521358 32016 net.cpp:408] relu2 <- ip2
I0428 20:11:10.521363 32016 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:11:10.521582 32016 net.cpp:124] Setting up relu2
I0428 20:11:10.521594 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.521597 32016 net.cpp:139] Memory required for data: 9142800
I0428 20:11:10.521601 32016 layer_factory.hpp:77] Creating layer ip3
I0428 20:11:10.521610 32016 net.cpp:86] Creating Layer ip3
I0428 20:11:10.521615 32016 net.cpp:408] ip3 <- ip2
I0428 20:11:10.521620 32016 net.cpp:382] ip3 -> ip3
I0428 20:11:10.521737 32016 net.cpp:124] Setting up ip3
I0428 20:11:10.521746 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.521749 32016 net.cpp:139] Memory required for data: 9146800
I0428 20:11:10.521759 32016 layer_factory.hpp:77] Creating layer relu3
I0428 20:11:10.521764 32016 net.cpp:86] Creating Layer relu3
I0428 20:11:10.521769 32016 net.cpp:408] relu3 <- ip3
I0428 20:11:10.521775 32016 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:11:10.522750 32016 net.cpp:124] Setting up relu3
I0428 20:11:10.522764 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.522769 32016 net.cpp:139] Memory required for data: 9150800
I0428 20:11:10.522773 32016 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:11:10.522781 32016 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:11:10.522785 32016 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:11:10.522791 32016 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:11:10.522799 32016 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:11:10.522846 32016 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:11:10.522853 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.522858 32016 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:11:10.522861 32016 net.cpp:139] Memory required for data: 9158800
I0428 20:11:10.522864 32016 layer_factory.hpp:77] Creating layer accuracy
I0428 20:11:10.522871 32016 net.cpp:86] Creating Layer accuracy
I0428 20:11:10.522876 32016 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:11:10.522879 32016 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:11:10.522886 32016 net.cpp:382] accuracy -> accuracy
I0428 20:11:10.522896 32016 net.cpp:124] Setting up accuracy
I0428 20:11:10.522900 32016 net.cpp:131] Top shape: (1)
I0428 20:11:10.522903 32016 net.cpp:139] Memory required for data: 9158804
I0428 20:11:10.522907 32016 layer_factory.hpp:77] Creating layer loss
I0428 20:11:10.522913 32016 net.cpp:86] Creating Layer loss
I0428 20:11:10.522917 32016 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:11:10.522920 32016 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:11:10.522927 32016 net.cpp:382] loss -> loss
I0428 20:11:10.522934 32016 layer_factory.hpp:77] Creating layer loss
I0428 20:11:10.523221 32016 net.cpp:124] Setting up loss
I0428 20:11:10.523231 32016 net.cpp:131] Top shape: (1)
I0428 20:11:10.523234 32016 net.cpp:134]     with loss weight 1
I0428 20:11:10.523253 32016 net.cpp:139] Memory required for data: 9158808
I0428 20:11:10.523257 32016 net.cpp:200] loss needs backward computation.
I0428 20:11:10.523269 32016 net.cpp:202] accuracy does not need backward computation.
I0428 20:11:10.523277 32016 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:11:10.523280 32016 net.cpp:200] relu3 needs backward computation.
I0428 20:11:10.523284 32016 net.cpp:200] ip3 needs backward computation.
I0428 20:11:10.523288 32016 net.cpp:200] relu2 needs backward computation.
I0428 20:11:10.523291 32016 net.cpp:200] ip2 needs backward computation.
I0428 20:11:10.523294 32016 net.cpp:200] relu1 needs backward computation.
I0428 20:11:10.523298 32016 net.cpp:200] ip1 needs backward computation.
I0428 20:11:10.523305 32016 net.cpp:200] pool1 needs backward computation.
I0428 20:11:10.523309 32016 net.cpp:200] conv1 needs backward computation.
I0428 20:11:10.523313 32016 net.cpp:200] pool0 needs backward computation.
I0428 20:11:10.523317 32016 net.cpp:200] conv0 needs backward computation.
I0428 20:11:10.523322 32016 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:11:10.523326 32016 net.cpp:202] mnist does not need backward computation.
I0428 20:11:10.523329 32016 net.cpp:244] This network produces output accuracy
I0428 20:11:10.523334 32016 net.cpp:244] This network produces output loss
I0428 20:11:10.523347 32016 net.cpp:257] Network initialization done.
I0428 20:11:10.523397 32016 solver.cpp:56] Solver scaffolding done.
I0428 20:11:10.523830 32016 caffe.cpp:248] Starting Optimization
I0428 20:11:10.523838 32016 solver.cpp:273] Solving LeNet
I0428 20:11:10.523840 32016 solver.cpp:274] Learning Rate Policy: inv
I0428 20:11:10.524722 32016 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:11:10.531646 32016 blocking_queue.cpp:49] Waiting for data
I0428 20:11:10.603293 32023 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:10.604461 32016 solver.cpp:398]     Test net output #0: accuracy = 0.1005
I0428 20:11:10.604496 32016 solver.cpp:398]     Test net output #1: loss = 2.29428 (* 1 = 2.29428 loss)
I0428 20:11:10.609822 32016 solver.cpp:219] Iteration 0 (0 iter/s, 0.0859383s/100 iters), loss = 2.3005
I0428 20:11:10.609865 32016 solver.cpp:238]     Train net output #0: loss = 2.3005 (* 1 = 2.3005 loss)
I0428 20:11:10.609884 32016 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:11:10.743108 32016 solver.cpp:219] Iteration 100 (750.584 iter/s, 0.13323s/100 iters), loss = 1.01695
I0428 20:11:10.743144 32016 solver.cpp:238]     Train net output #0: loss = 1.01695 (* 1 = 1.01695 loss)
I0428 20:11:10.743154 32016 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:11:10.870255 32016 solver.cpp:219] Iteration 200 (786.809 iter/s, 0.127096s/100 iters), loss = 0.676613
I0428 20:11:10.870290 32016 solver.cpp:238]     Train net output #0: loss = 0.676613 (* 1 = 0.676613 loss)
I0428 20:11:10.870298 32016 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:11:10.996096 32016 solver.cpp:219] Iteration 300 (794.942 iter/s, 0.125795s/100 iters), loss = 0.233729
I0428 20:11:10.996130 32016 solver.cpp:238]     Train net output #0: loss = 0.233729 (* 1 = 0.233729 loss)
I0428 20:11:10.996139 32016 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:11:11.123219 32016 solver.cpp:219] Iteration 400 (786.922 iter/s, 0.127077s/100 iters), loss = 0.406413
I0428 20:11:11.123255 32016 solver.cpp:238]     Train net output #0: loss = 0.406413 (* 1 = 0.406413 loss)
I0428 20:11:11.123262 32016 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:11:11.247426 32016 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:11:11.309350 32023 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:11.310997 32016 solver.cpp:398]     Test net output #0: accuracy = 0.8707
I0428 20:11:11.311019 32016 solver.cpp:398]     Test net output #1: loss = 0.362899 (* 1 = 0.362899 loss)
I0428 20:11:11.312177 32016 solver.cpp:219] Iteration 500 (529.356 iter/s, 0.188909s/100 iters), loss = 0.411798
I0428 20:11:11.312204 32016 solver.cpp:238]     Train net output #0: loss = 0.411798 (* 1 = 0.411798 loss)
I0428 20:11:11.312230 32016 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:11:11.441025 32016 solver.cpp:219] Iteration 600 (776.356 iter/s, 0.128807s/100 iters), loss = 0.215425
I0428 20:11:11.441056 32016 solver.cpp:238]     Train net output #0: loss = 0.215425 (* 1 = 0.215425 loss)
I0428 20:11:11.441064 32016 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:11:11.566390 32016 solver.cpp:219] Iteration 700 (797.936 iter/s, 0.125323s/100 iters), loss = 0.649741
I0428 20:11:11.566419 32016 solver.cpp:238]     Train net output #0: loss = 0.649741 (* 1 = 0.649741 loss)
I0428 20:11:11.566426 32016 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:11:11.689996 32016 solver.cpp:219] Iteration 800 (809.277 iter/s, 0.123567s/100 iters), loss = 0.503738
I0428 20:11:11.690021 32016 solver.cpp:238]     Train net output #0: loss = 0.503738 (* 1 = 0.503738 loss)
I0428 20:11:11.690028 32016 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:11:11.823709 32016 solver.cpp:219] Iteration 900 (748.083 iter/s, 0.133675s/100 iters), loss = 0.303888
I0428 20:11:11.823734 32016 solver.cpp:238]     Train net output #0: loss = 0.303888 (* 1 = 0.303888 loss)
I0428 20:11:11.823740 32016 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:11:11.866125 32022 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:11.946146 32016 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:11:11.947804 32016 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:11:11.948768 32016 solver.cpp:311] Iteration 1000, loss = 0.448747
I0428 20:11:11.948782 32016 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:11:12.023633 32023 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:11:12.024276 32016 solver.cpp:398]     Test net output #0: accuracy = 0.884
I0428 20:11:12.024310 32016 solver.cpp:398]     Test net output #1: loss = 0.308111 (* 1 = 0.308111 loss)
I0428 20:11:12.024317 32016 solver.cpp:316] Optimization Done.
I0428 20:11:12.024335 32016 caffe.cpp:259] Optimization Done.
