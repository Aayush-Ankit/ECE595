I0428 19:58:18.927523 28945 caffe.cpp:218] Using GPUs 0
I0428 19:58:18.956094 28945 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:19.400990 28945 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test815.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:19.401131 28945 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test815.prototxt
I0428 19:58:19.401489 28945 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:19.401504 28945 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:19.401581 28945 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:19.401638 28945 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:19.401718 28945 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:19.401737 28945 net.cpp:86] Creating Layer mnist
I0428 19:58:19.401743 28945 net.cpp:382] mnist -> data
I0428 19:58:19.401762 28945 net.cpp:382] mnist -> label
I0428 19:58:19.402765 28945 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:19.405043 28945 net.cpp:124] Setting up mnist
I0428 19:58:19.405073 28945 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:19.405079 28945 net.cpp:131] Top shape: 64 (64)
I0428 19:58:19.405082 28945 net.cpp:139] Memory required for data: 200960
I0428 19:58:19.405088 28945 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:19.405100 28945 net.cpp:86] Creating Layer conv0
I0428 19:58:19.405117 28945 net.cpp:408] conv0 <- data
I0428 19:58:19.405128 28945 net.cpp:382] conv0 -> conv0
I0428 19:58:19.635255 28945 net.cpp:124] Setting up conv0
I0428 19:58:19.635282 28945 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:19.635287 28945 net.cpp:139] Memory required for data: 1675520
I0428 19:58:19.635300 28945 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:19.635313 28945 net.cpp:86] Creating Layer pool0
I0428 19:58:19.635318 28945 net.cpp:408] pool0 <- conv0
I0428 19:58:19.635323 28945 net.cpp:382] pool0 -> pool0
I0428 19:58:19.635385 28945 net.cpp:124] Setting up pool0
I0428 19:58:19.635390 28945 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:19.635392 28945 net.cpp:139] Memory required for data: 2044160
I0428 19:58:19.635396 28945 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:19.635407 28945 net.cpp:86] Creating Layer conv1
I0428 19:58:19.635411 28945 net.cpp:408] conv1 <- pool0
I0428 19:58:19.635416 28945 net.cpp:382] conv1 -> conv1
I0428 19:58:19.638254 28945 net.cpp:124] Setting up conv1
I0428 19:58:19.638269 28945 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:58:19.638273 28945 net.cpp:139] Memory required for data: 2126080
I0428 19:58:19.638298 28945 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:19.638305 28945 net.cpp:86] Creating Layer pool1
I0428 19:58:19.638309 28945 net.cpp:408] pool1 <- conv1
I0428 19:58:19.638314 28945 net.cpp:382] pool1 -> pool1
I0428 19:58:19.638350 28945 net.cpp:124] Setting up pool1
I0428 19:58:19.638357 28945 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:58:19.638360 28945 net.cpp:139] Memory required for data: 2146560
I0428 19:58:19.638365 28945 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:19.638371 28945 net.cpp:86] Creating Layer ip1
I0428 19:58:19.638375 28945 net.cpp:408] ip1 <- pool1
I0428 19:58:19.638380 28945 net.cpp:382] ip1 -> ip1
I0428 19:58:19.638499 28945 net.cpp:124] Setting up ip1
I0428 19:58:19.638505 28945 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:19.638509 28945 net.cpp:139] Memory required for data: 2159360
I0428 19:58:19.638515 28945 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:19.638521 28945 net.cpp:86] Creating Layer relu1
I0428 19:58:19.638525 28945 net.cpp:408] relu1 <- ip1
I0428 19:58:19.638528 28945 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:19.638692 28945 net.cpp:124] Setting up relu1
I0428 19:58:19.638700 28945 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:19.638705 28945 net.cpp:139] Memory required for data: 2172160
I0428 19:58:19.638707 28945 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:19.638713 28945 net.cpp:86] Creating Layer ip2
I0428 19:58:19.638716 28945 net.cpp:408] ip2 <- ip1
I0428 19:58:19.638732 28945 net.cpp:382] ip2 -> ip2
I0428 19:58:19.638828 28945 net.cpp:124] Setting up ip2
I0428 19:58:19.638834 28945 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:19.638837 28945 net.cpp:139] Memory required for data: 2178560
I0428 19:58:19.638842 28945 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:19.638849 28945 net.cpp:86] Creating Layer relu2
I0428 19:58:19.638851 28945 net.cpp:408] relu2 <- ip2
I0428 19:58:19.638854 28945 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:19.639616 28945 net.cpp:124] Setting up relu2
I0428 19:58:19.639629 28945 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:58:19.639643 28945 net.cpp:139] Memory required for data: 2184960
I0428 19:58:19.639647 28945 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:19.639653 28945 net.cpp:86] Creating Layer ip3
I0428 19:58:19.639657 28945 net.cpp:408] ip3 <- ip2
I0428 19:58:19.639662 28945 net.cpp:382] ip3 -> ip3
I0428 19:58:19.639756 28945 net.cpp:124] Setting up ip3
I0428 19:58:19.639765 28945 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:19.639767 28945 net.cpp:139] Memory required for data: 2187520
I0428 19:58:19.639775 28945 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:19.639780 28945 net.cpp:86] Creating Layer relu3
I0428 19:58:19.639782 28945 net.cpp:408] relu3 <- ip3
I0428 19:58:19.639786 28945 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:19.639958 28945 net.cpp:124] Setting up relu3
I0428 19:58:19.639967 28945 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:19.639971 28945 net.cpp:139] Memory required for data: 2190080
I0428 19:58:19.639973 28945 layer_factory.hpp:77] Creating layer loss
I0428 19:58:19.639979 28945 net.cpp:86] Creating Layer loss
I0428 19:58:19.639982 28945 net.cpp:408] loss <- ip3
I0428 19:58:19.639986 28945 net.cpp:408] loss <- label
I0428 19:58:19.639991 28945 net.cpp:382] loss -> loss
I0428 19:58:19.640005 28945 layer_factory.hpp:77] Creating layer loss
I0428 19:58:19.640251 28945 net.cpp:124] Setting up loss
I0428 19:58:19.640260 28945 net.cpp:131] Top shape: (1)
I0428 19:58:19.640264 28945 net.cpp:134]     with loss weight 1
I0428 19:58:19.640276 28945 net.cpp:139] Memory required for data: 2190084
I0428 19:58:19.640280 28945 net.cpp:200] loss needs backward computation.
I0428 19:58:19.640285 28945 net.cpp:200] relu3 needs backward computation.
I0428 19:58:19.640287 28945 net.cpp:200] ip3 needs backward computation.
I0428 19:58:19.640290 28945 net.cpp:200] relu2 needs backward computation.
I0428 19:58:19.640293 28945 net.cpp:200] ip2 needs backward computation.
I0428 19:58:19.640296 28945 net.cpp:200] relu1 needs backward computation.
I0428 19:58:19.640298 28945 net.cpp:200] ip1 needs backward computation.
I0428 19:58:19.640301 28945 net.cpp:200] pool1 needs backward computation.
I0428 19:58:19.640305 28945 net.cpp:200] conv1 needs backward computation.
I0428 19:58:19.640307 28945 net.cpp:200] pool0 needs backward computation.
I0428 19:58:19.640311 28945 net.cpp:200] conv0 needs backward computation.
I0428 19:58:19.640314 28945 net.cpp:202] mnist does not need backward computation.
I0428 19:58:19.640317 28945 net.cpp:244] This network produces output loss
I0428 19:58:19.640327 28945 net.cpp:257] Network initialization done.
I0428 19:58:19.640715 28945 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test815.prototxt
I0428 19:58:19.640753 28945 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:19.640887 28945 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:58:19.640986 28945 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:19.641033 28945 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:19.641047 28945 net.cpp:86] Creating Layer mnist
I0428 19:58:19.641052 28945 net.cpp:382] mnist -> data
I0428 19:58:19.641062 28945 net.cpp:382] mnist -> label
I0428 19:58:19.641178 28945 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:19.643141 28945 net.cpp:124] Setting up mnist
I0428 19:58:19.643164 28945 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:19.643169 28945 net.cpp:131] Top shape: 100 (100)
I0428 19:58:19.643172 28945 net.cpp:139] Memory required for data: 314000
I0428 19:58:19.643177 28945 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:19.643182 28945 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:19.643185 28945 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:19.643190 28945 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:19.643196 28945 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:19.643241 28945 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:19.643247 28945 net.cpp:131] Top shape: 100 (100)
I0428 19:58:19.643250 28945 net.cpp:131] Top shape: 100 (100)
I0428 19:58:19.643254 28945 net.cpp:139] Memory required for data: 314800
I0428 19:58:19.643255 28945 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:19.643263 28945 net.cpp:86] Creating Layer conv0
I0428 19:58:19.643266 28945 net.cpp:408] conv0 <- data
I0428 19:58:19.643271 28945 net.cpp:382] conv0 -> conv0
I0428 19:58:19.644948 28945 net.cpp:124] Setting up conv0
I0428 19:58:19.644963 28945 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:19.644966 28945 net.cpp:139] Memory required for data: 2618800
I0428 19:58:19.644976 28945 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:19.644999 28945 net.cpp:86] Creating Layer pool0
I0428 19:58:19.645001 28945 net.cpp:408] pool0 <- conv0
I0428 19:58:19.645007 28945 net.cpp:382] pool0 -> pool0
I0428 19:58:19.645045 28945 net.cpp:124] Setting up pool0
I0428 19:58:19.645051 28945 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:19.645053 28945 net.cpp:139] Memory required for data: 3194800
I0428 19:58:19.645056 28945 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:19.645066 28945 net.cpp:86] Creating Layer conv1
I0428 19:58:19.645069 28945 net.cpp:408] conv1 <- pool0
I0428 19:58:19.645074 28945 net.cpp:382] conv1 -> conv1
I0428 19:58:19.647199 28945 net.cpp:124] Setting up conv1
I0428 19:58:19.647214 28945 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:58:19.647218 28945 net.cpp:139] Memory required for data: 3322800
I0428 19:58:19.647227 28945 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:19.647246 28945 net.cpp:86] Creating Layer pool1
I0428 19:58:19.647250 28945 net.cpp:408] pool1 <- conv1
I0428 19:58:19.647270 28945 net.cpp:382] pool1 -> pool1
I0428 19:58:19.647307 28945 net.cpp:124] Setting up pool1
I0428 19:58:19.647312 28945 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:58:19.647323 28945 net.cpp:139] Memory required for data: 3354800
I0428 19:58:19.647326 28945 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:19.647331 28945 net.cpp:86] Creating Layer ip1
I0428 19:58:19.647336 28945 net.cpp:408] ip1 <- pool1
I0428 19:58:19.647339 28945 net.cpp:382] ip1 -> ip1
I0428 19:58:19.647455 28945 net.cpp:124] Setting up ip1
I0428 19:58:19.647462 28945 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:19.647475 28945 net.cpp:139] Memory required for data: 3374800
I0428 19:58:19.647490 28945 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:19.647500 28945 net.cpp:86] Creating Layer relu1
I0428 19:58:19.647503 28945 net.cpp:408] relu1 <- ip1
I0428 19:58:19.647507 28945 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:19.647747 28945 net.cpp:124] Setting up relu1
I0428 19:58:19.647755 28945 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:19.647758 28945 net.cpp:139] Memory required for data: 3394800
I0428 19:58:19.647761 28945 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:19.647768 28945 net.cpp:86] Creating Layer ip2
I0428 19:58:19.647771 28945 net.cpp:408] ip2 <- ip1
I0428 19:58:19.647776 28945 net.cpp:382] ip2 -> ip2
I0428 19:58:19.647899 28945 net.cpp:124] Setting up ip2
I0428 19:58:19.647907 28945 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:19.647910 28945 net.cpp:139] Memory required for data: 3404800
I0428 19:58:19.647917 28945 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:19.647920 28945 net.cpp:86] Creating Layer relu2
I0428 19:58:19.647924 28945 net.cpp:408] relu2 <- ip2
I0428 19:58:19.647928 28945 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:19.648085 28945 net.cpp:124] Setting up relu2
I0428 19:58:19.648094 28945 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:58:19.648103 28945 net.cpp:139] Memory required for data: 3414800
I0428 19:58:19.648106 28945 layer_factory.hpp:77] Creating layer ip3
I0428 19:58:19.648111 28945 net.cpp:86] Creating Layer ip3
I0428 19:58:19.648114 28945 net.cpp:408] ip3 <- ip2
I0428 19:58:19.648118 28945 net.cpp:382] ip3 -> ip3
I0428 19:58:19.648211 28945 net.cpp:124] Setting up ip3
I0428 19:58:19.648216 28945 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:19.648221 28945 net.cpp:139] Memory required for data: 3418800
I0428 19:58:19.648227 28945 layer_factory.hpp:77] Creating layer relu3
I0428 19:58:19.648232 28945 net.cpp:86] Creating Layer relu3
I0428 19:58:19.648252 28945 net.cpp:408] relu3 <- ip3
I0428 19:58:19.648262 28945 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:58:19.649186 28945 net.cpp:124] Setting up relu3
I0428 19:58:19.649199 28945 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:19.649202 28945 net.cpp:139] Memory required for data: 3422800
I0428 19:58:19.649206 28945 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:58:19.649211 28945 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:58:19.649215 28945 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:58:19.649220 28945 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:58:19.649227 28945 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:58:19.649282 28945 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:58:19.649287 28945 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:19.649291 28945 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:19.649293 28945 net.cpp:139] Memory required for data: 3430800
I0428 19:58:19.649296 28945 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:19.649302 28945 net.cpp:86] Creating Layer accuracy
I0428 19:58:19.649310 28945 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:58:19.649317 28945 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:19.649320 28945 net.cpp:382] accuracy -> accuracy
I0428 19:58:19.649327 28945 net.cpp:124] Setting up accuracy
I0428 19:58:19.649345 28945 net.cpp:131] Top shape: (1)
I0428 19:58:19.649348 28945 net.cpp:139] Memory required for data: 3430804
I0428 19:58:19.649351 28945 layer_factory.hpp:77] Creating layer loss
I0428 19:58:19.649360 28945 net.cpp:86] Creating Layer loss
I0428 19:58:19.649363 28945 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:58:19.649368 28945 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:19.649377 28945 net.cpp:382] loss -> loss
I0428 19:58:19.649384 28945 layer_factory.hpp:77] Creating layer loss
I0428 19:58:19.649610 28945 net.cpp:124] Setting up loss
I0428 19:58:19.649619 28945 net.cpp:131] Top shape: (1)
I0428 19:58:19.649623 28945 net.cpp:134]     with loss weight 1
I0428 19:58:19.649636 28945 net.cpp:139] Memory required for data: 3430808
I0428 19:58:19.649648 28945 net.cpp:200] loss needs backward computation.
I0428 19:58:19.649652 28945 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:19.649657 28945 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:58:19.649658 28945 net.cpp:200] relu3 needs backward computation.
I0428 19:58:19.649667 28945 net.cpp:200] ip3 needs backward computation.
I0428 19:58:19.649669 28945 net.cpp:200] relu2 needs backward computation.
I0428 19:58:19.649672 28945 net.cpp:200] ip2 needs backward computation.
I0428 19:58:19.649680 28945 net.cpp:200] relu1 needs backward computation.
I0428 19:58:19.649683 28945 net.cpp:200] ip1 needs backward computation.
I0428 19:58:19.649686 28945 net.cpp:200] pool1 needs backward computation.
I0428 19:58:19.649689 28945 net.cpp:200] conv1 needs backward computation.
I0428 19:58:19.649693 28945 net.cpp:200] pool0 needs backward computation.
I0428 19:58:19.649699 28945 net.cpp:200] conv0 needs backward computation.
I0428 19:58:19.649703 28945 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:19.649706 28945 net.cpp:202] mnist does not need backward computation.
I0428 19:58:19.649709 28945 net.cpp:244] This network produces output accuracy
I0428 19:58:19.649713 28945 net.cpp:244] This network produces output loss
I0428 19:58:19.649727 28945 net.cpp:257] Network initialization done.
I0428 19:58:19.649782 28945 solver.cpp:56] Solver scaffolding done.
I0428 19:58:19.650161 28945 caffe.cpp:248] Starting Optimization
I0428 19:58:19.650167 28945 solver.cpp:273] Solving LeNet
I0428 19:58:19.650171 28945 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:19.650334 28945 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:19.654624 28945 blocking_queue.cpp:49] Waiting for data
I0428 19:58:19.725265 28952 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:19.725802 28945 solver.cpp:398]     Test net output #0: accuracy = 0.0879
I0428 19:58:19.725822 28945 solver.cpp:398]     Test net output #1: loss = 2.32641 (* 1 = 2.32641 loss)
I0428 19:58:19.728365 28945 solver.cpp:219] Iteration 0 (0 iter/s, 0.078167s/100 iters), loss = 2.33639
I0428 19:58:19.728389 28945 solver.cpp:238]     Train net output #0: loss = 2.33639 (* 1 = 2.33639 loss)
I0428 19:58:19.728415 28945 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:19.807070 28945 solver.cpp:219] Iteration 100 (1271.1 iter/s, 0.0786718s/100 iters), loss = 0.55821
I0428 19:58:19.807093 28945 solver.cpp:238]     Train net output #0: loss = 0.55821 (* 1 = 0.55821 loss)
I0428 19:58:19.807116 28945 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:19.889037 28945 solver.cpp:219] Iteration 200 (1220.49 iter/s, 0.0819344s/100 iters), loss = 0.290443
I0428 19:58:19.889061 28945 solver.cpp:238]     Train net output #0: loss = 0.290443 (* 1 = 0.290443 loss)
I0428 19:58:19.889067 28945 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:19.967777 28945 solver.cpp:219] Iteration 300 (1270.52 iter/s, 0.0787077s/100 iters), loss = 0.249638
I0428 19:58:19.967816 28945 solver.cpp:238]     Train net output #0: loss = 0.249638 (* 1 = 0.249638 loss)
I0428 19:58:19.967823 28945 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:20.047199 28945 solver.cpp:219] Iteration 400 (1259.61 iter/s, 0.0793897s/100 iters), loss = 0.270538
I0428 19:58:20.047236 28945 solver.cpp:238]     Train net output #0: loss = 0.270538 (* 1 = 0.270538 loss)
I0428 19:58:20.047242 28945 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:20.127851 28945 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:20.203074 28952 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:20.203598 28945 solver.cpp:398]     Test net output #0: accuracy = 0.952
I0428 19:58:20.203618 28945 solver.cpp:398]     Test net output #1: loss = 0.157481 (* 1 = 0.157481 loss)
I0428 19:58:20.204416 28945 solver.cpp:219] Iteration 500 (636.21 iter/s, 0.157181s/100 iters), loss = 0.112115
I0428 19:58:20.204447 28945 solver.cpp:238]     Train net output #0: loss = 0.112115 (* 1 = 0.112115 loss)
I0428 19:58:20.204474 28945 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:20.284834 28945 solver.cpp:219] Iteration 600 (1244.41 iter/s, 0.0803594s/100 iters), loss = 0.153256
I0428 19:58:20.284858 28945 solver.cpp:238]     Train net output #0: loss = 0.153256 (* 1 = 0.153256 loss)
I0428 19:58:20.284879 28945 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:20.364015 28945 solver.cpp:219] Iteration 700 (1263.44 iter/s, 0.0791491s/100 iters), loss = 0.312742
I0428 19:58:20.364053 28945 solver.cpp:238]     Train net output #0: loss = 0.312742 (* 1 = 0.312742 loss)
I0428 19:58:20.364059 28945 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:20.443068 28945 solver.cpp:219] Iteration 800 (1265.49 iter/s, 0.079021s/100 iters), loss = 0.237974
I0428 19:58:20.443106 28945 solver.cpp:238]     Train net output #0: loss = 0.237974 (* 1 = 0.237974 loss)
I0428 19:58:20.443126 28945 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:20.523550 28945 solver.cpp:219] Iteration 900 (1243.03 iter/s, 0.0804485s/100 iters), loss = 0.15625
I0428 19:58:20.523577 28945 solver.cpp:238]     Train net output #0: loss = 0.15625 (* 1 = 0.15625 loss)
I0428 19:58:20.523586 28945 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:20.549079 28951 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:20.598263 28945 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:20.598981 28945 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:20.599462 28945 solver.cpp:311] Iteration 1000, loss = 0.137177
I0428 19:58:20.599476 28945 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:20.667541 28952 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:20.668028 28945 solver.cpp:398]     Test net output #0: accuracy = 0.9693
I0428 19:58:20.668045 28945 solver.cpp:398]     Test net output #1: loss = 0.0966847 (* 1 = 0.0966847 loss)
I0428 19:58:20.668051 28945 solver.cpp:316] Optimization Done.
I0428 19:58:20.668053 28945 caffe.cpp:259] Optimization Done.
