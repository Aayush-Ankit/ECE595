I0428 19:57:09.270371 28608 caffe.cpp:218] Using GPUs 0
I0428 19:57:09.308254 28608 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:09.830453 28608 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test780.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:09.830605 28608 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test780.prototxt
I0428 19:57:09.831132 28608 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:09.831156 28608 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:09.831284 28608 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:09.831384 28608 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:09.831521 28608 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:09.831554 28608 net.cpp:86] Creating Layer mnist
I0428 19:57:09.831568 28608 net.cpp:382] mnist -> data
I0428 19:57:09.831598 28608 net.cpp:382] mnist -> label
I0428 19:57:09.833168 28608 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:09.835883 28608 net.cpp:124] Setting up mnist
I0428 19:57:09.835901 28608 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:09.835907 28608 net.cpp:131] Top shape: 64 (64)
I0428 19:57:09.835911 28608 net.cpp:139] Memory required for data: 200960
I0428 19:57:09.835919 28608 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:09.835937 28608 net.cpp:86] Creating Layer conv0
I0428 19:57:09.835943 28608 net.cpp:408] conv0 <- data
I0428 19:57:09.835963 28608 net.cpp:382] conv0 -> conv0
I0428 19:57:10.128027 28608 net.cpp:124] Setting up conv0
I0428 19:57:10.128059 28608 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:10.128065 28608 net.cpp:139] Memory required for data: 1675520
I0428 19:57:10.128083 28608 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:10.128099 28608 net.cpp:86] Creating Layer pool0
I0428 19:57:10.128104 28608 net.cpp:408] pool0 <- conv0
I0428 19:57:10.128113 28608 net.cpp:382] pool0 -> pool0
I0428 19:57:10.128186 28608 net.cpp:124] Setting up pool0
I0428 19:57:10.128201 28608 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:10.128232 28608 net.cpp:139] Memory required for data: 2044160
I0428 19:57:10.128239 28608 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:10.128258 28608 net.cpp:86] Creating Layer conv1
I0428 19:57:10.128270 28608 net.cpp:408] conv1 <- pool0
I0428 19:57:10.128281 28608 net.cpp:382] conv1 -> conv1
I0428 19:57:10.131963 28608 net.cpp:124] Setting up conv1
I0428 19:57:10.131981 28608 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:10.131986 28608 net.cpp:139] Memory required for data: 2126080
I0428 19:57:10.131996 28608 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:10.132005 28608 net.cpp:86] Creating Layer pool1
I0428 19:57:10.132010 28608 net.cpp:408] pool1 <- conv1
I0428 19:57:10.132016 28608 net.cpp:382] pool1 -> pool1
I0428 19:57:10.132078 28608 net.cpp:124] Setting up pool1
I0428 19:57:10.132093 28608 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:10.132100 28608 net.cpp:139] Memory required for data: 2146560
I0428 19:57:10.132107 28608 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:10.132120 28608 net.cpp:86] Creating Layer ip1
I0428 19:57:10.132127 28608 net.cpp:408] ip1 <- pool1
I0428 19:57:10.132136 28608 net.cpp:382] ip1 -> ip1
I0428 19:57:10.132311 28608 net.cpp:124] Setting up ip1
I0428 19:57:10.132325 28608 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:10.132333 28608 net.cpp:139] Memory required for data: 2149120
I0428 19:57:10.132346 28608 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:10.132361 28608 net.cpp:86] Creating Layer relu1
I0428 19:57:10.132369 28608 net.cpp:408] relu1 <- ip1
I0428 19:57:10.132377 28608 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:10.132654 28608 net.cpp:124] Setting up relu1
I0428 19:57:10.132669 28608 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:10.132675 28608 net.cpp:139] Memory required for data: 2151680
I0428 19:57:10.132681 28608 layer_factory.hpp:77] Creating layer loss
I0428 19:57:10.132691 28608 net.cpp:86] Creating Layer loss
I0428 19:57:10.132699 28608 net.cpp:408] loss <- ip1
I0428 19:57:10.132705 28608 net.cpp:408] loss <- label
I0428 19:57:10.132715 28608 net.cpp:382] loss -> loss
I0428 19:57:10.132737 28608 layer_factory.hpp:77] Creating layer loss
I0428 19:57:10.134100 28608 net.cpp:124] Setting up loss
I0428 19:57:10.134121 28608 net.cpp:131] Top shape: (1)
I0428 19:57:10.134129 28608 net.cpp:134]     with loss weight 1
I0428 19:57:10.134151 28608 net.cpp:139] Memory required for data: 2151684
I0428 19:57:10.134158 28608 net.cpp:200] loss needs backward computation.
I0428 19:57:10.134166 28608 net.cpp:200] relu1 needs backward computation.
I0428 19:57:10.134172 28608 net.cpp:200] ip1 needs backward computation.
I0428 19:57:10.134178 28608 net.cpp:200] pool1 needs backward computation.
I0428 19:57:10.134186 28608 net.cpp:200] conv1 needs backward computation.
I0428 19:57:10.134191 28608 net.cpp:200] pool0 needs backward computation.
I0428 19:57:10.134197 28608 net.cpp:200] conv0 needs backward computation.
I0428 19:57:10.134204 28608 net.cpp:202] mnist does not need backward computation.
I0428 19:57:10.134210 28608 net.cpp:244] This network produces output loss
I0428 19:57:10.134225 28608 net.cpp:257] Network initialization done.
I0428 19:57:10.134703 28608 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test780.prototxt
I0428 19:57:10.134750 28608 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:10.134886 28608 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:57:10.135010 28608 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:10.135079 28608 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:10.135100 28608 net.cpp:86] Creating Layer mnist
I0428 19:57:10.135110 28608 net.cpp:382] mnist -> data
I0428 19:57:10.135124 28608 net.cpp:382] mnist -> label
I0428 19:57:10.135262 28608 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:10.138001 28608 net.cpp:124] Setting up mnist
I0428 19:57:10.138018 28608 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:10.138025 28608 net.cpp:131] Top shape: 100 (100)
I0428 19:57:10.138029 28608 net.cpp:139] Memory required for data: 314000
I0428 19:57:10.138036 28608 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:10.138047 28608 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:10.138054 28608 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:10.138064 28608 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:10.138077 28608 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:10.138226 28608 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:10.138242 28608 net.cpp:131] Top shape: 100 (100)
I0428 19:57:10.138249 28608 net.cpp:131] Top shape: 100 (100)
I0428 19:57:10.138255 28608 net.cpp:139] Memory required for data: 314800
I0428 19:57:10.138262 28608 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:10.138278 28608 net.cpp:86] Creating Layer conv0
I0428 19:57:10.138289 28608 net.cpp:408] conv0 <- data
I0428 19:57:10.138299 28608 net.cpp:382] conv0 -> conv0
I0428 19:57:10.139526 28608 net.cpp:124] Setting up conv0
I0428 19:57:10.139547 28608 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:10.139554 28608 net.cpp:139] Memory required for data: 2618800
I0428 19:57:10.139570 28608 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:10.139581 28608 net.cpp:86] Creating Layer pool0
I0428 19:57:10.139588 28608 net.cpp:408] pool0 <- conv0
I0428 19:57:10.139597 28608 net.cpp:382] pool0 -> pool0
I0428 19:57:10.139653 28608 net.cpp:124] Setting up pool0
I0428 19:57:10.139667 28608 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:10.139673 28608 net.cpp:139] Memory required for data: 3194800
I0428 19:57:10.139680 28608 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:10.139695 28608 net.cpp:86] Creating Layer conv1
I0428 19:57:10.139701 28608 net.cpp:408] conv1 <- pool0
I0428 19:57:10.139711 28608 net.cpp:382] conv1 -> conv1
I0428 19:57:10.142523 28608 net.cpp:124] Setting up conv1
I0428 19:57:10.142539 28608 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:10.142544 28608 net.cpp:139] Memory required for data: 3322800
I0428 19:57:10.142554 28608 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:10.142561 28608 net.cpp:86] Creating Layer pool1
I0428 19:57:10.142578 28608 net.cpp:408] pool1 <- conv1
I0428 19:57:10.142586 28608 net.cpp:382] pool1 -> pool1
I0428 19:57:10.142699 28608 net.cpp:124] Setting up pool1
I0428 19:57:10.142716 28608 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:10.142724 28608 net.cpp:139] Memory required for data: 3354800
I0428 19:57:10.142729 28608 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:10.142740 28608 net.cpp:86] Creating Layer ip1
I0428 19:57:10.142747 28608 net.cpp:408] ip1 <- pool1
I0428 19:57:10.142757 28608 net.cpp:382] ip1 -> ip1
I0428 19:57:10.142928 28608 net.cpp:124] Setting up ip1
I0428 19:57:10.142943 28608 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:10.142951 28608 net.cpp:139] Memory required for data: 3358800
I0428 19:57:10.142964 28608 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:10.142973 28608 net.cpp:86] Creating Layer relu1
I0428 19:57:10.142980 28608 net.cpp:408] relu1 <- ip1
I0428 19:57:10.142989 28608 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:10.144343 28608 net.cpp:124] Setting up relu1
I0428 19:57:10.144363 28608 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:10.144371 28608 net.cpp:139] Memory required for data: 3362800
I0428 19:57:10.144377 28608 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:57:10.144389 28608 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:57:10.144397 28608 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:57:10.144407 28608 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:57:10.144420 28608 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:57:10.144481 28608 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:57:10.144493 28608 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:10.144501 28608 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:10.144507 28608 net.cpp:139] Memory required for data: 3370800
I0428 19:57:10.144513 28608 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:10.144522 28608 net.cpp:86] Creating Layer accuracy
I0428 19:57:10.144529 28608 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:57:10.144538 28608 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:10.144546 28608 net.cpp:382] accuracy -> accuracy
I0428 19:57:10.144559 28608 net.cpp:124] Setting up accuracy
I0428 19:57:10.144567 28608 net.cpp:131] Top shape: (1)
I0428 19:57:10.144573 28608 net.cpp:139] Memory required for data: 3370804
I0428 19:57:10.144580 28608 layer_factory.hpp:77] Creating layer loss
I0428 19:57:10.144593 28608 net.cpp:86] Creating Layer loss
I0428 19:57:10.144598 28608 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:57:10.144606 28608 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:10.144614 28608 net.cpp:382] loss -> loss
I0428 19:57:10.144625 28608 layer_factory.hpp:77] Creating layer loss
I0428 19:57:10.145037 28608 net.cpp:124] Setting up loss
I0428 19:57:10.145057 28608 net.cpp:131] Top shape: (1)
I0428 19:57:10.145074 28608 net.cpp:134]     with loss weight 1
I0428 19:57:10.145090 28608 net.cpp:139] Memory required for data: 3370808
I0428 19:57:10.145097 28608 net.cpp:200] loss needs backward computation.
I0428 19:57:10.145105 28608 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:10.145113 28608 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:57:10.145120 28608 net.cpp:200] relu1 needs backward computation.
I0428 19:57:10.145126 28608 net.cpp:200] ip1 needs backward computation.
I0428 19:57:10.145133 28608 net.cpp:200] pool1 needs backward computation.
I0428 19:57:10.145140 28608 net.cpp:200] conv1 needs backward computation.
I0428 19:57:10.145148 28608 net.cpp:200] pool0 needs backward computation.
I0428 19:57:10.145154 28608 net.cpp:200] conv0 needs backward computation.
I0428 19:57:10.145162 28608 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:10.145169 28608 net.cpp:202] mnist does not need backward computation.
I0428 19:57:10.145175 28608 net.cpp:244] This network produces output accuracy
I0428 19:57:10.145182 28608 net.cpp:244] This network produces output loss
I0428 19:57:10.145218 28608 net.cpp:257] Network initialization done.
I0428 19:57:10.145277 28608 solver.cpp:56] Solver scaffolding done.
I0428 19:57:10.145630 28608 caffe.cpp:248] Starting Optimization
I0428 19:57:10.145642 28608 solver.cpp:273] Solving LeNet
I0428 19:57:10.145648 28608 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:10.146961 28608 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:10.150734 28608 blocking_queue.cpp:49] Waiting for data
I0428 19:57:10.221230 28615 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:10.221866 28608 solver.cpp:398]     Test net output #0: accuracy = 0.0639
I0428 19:57:10.221899 28608 solver.cpp:398]     Test net output #1: loss = 2.36013 (* 1 = 2.36013 loss)
I0428 19:57:10.224830 28608 solver.cpp:219] Iteration 0 (0 iter/s, 0.0791491s/100 iters), loss = 2.38156
I0428 19:57:10.224861 28608 solver.cpp:238]     Train net output #0: loss = 2.38156 (* 1 = 2.38156 loss)
I0428 19:57:10.224876 28608 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:10.288597 28608 solver.cpp:219] Iteration 100 (1569.2 iter/s, 0.0637266s/100 iters), loss = 0.348037
I0428 19:57:10.288630 28608 solver.cpp:238]     Train net output #0: loss = 0.348037 (* 1 = 0.348037 loss)
I0428 19:57:10.288637 28608 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:10.353694 28608 solver.cpp:219] Iteration 200 (1537.14 iter/s, 0.0650557s/100 iters), loss = 0.238138
I0428 19:57:10.353725 28608 solver.cpp:238]     Train net output #0: loss = 0.238138 (* 1 = 0.238138 loss)
I0428 19:57:10.353732 28608 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:10.418330 28608 solver.cpp:219] Iteration 300 (1548.08 iter/s, 0.064596s/100 iters), loss = 0.22578
I0428 19:57:10.418361 28608 solver.cpp:238]     Train net output #0: loss = 0.22578 (* 1 = 0.22578 loss)
I0428 19:57:10.418368 28608 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:10.480634 28608 solver.cpp:219] Iteration 400 (1606.03 iter/s, 0.0622654s/100 iters), loss = 0.175497
I0428 19:57:10.480660 28608 solver.cpp:238]     Train net output #0: loss = 0.175497 (* 1 = 0.175497 loss)
I0428 19:57:10.480666 28608 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:10.540060 28608 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:10.592227 28615 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:10.592782 28608 solver.cpp:398]     Test net output #0: accuracy = 0.9484
I0428 19:57:10.592825 28608 solver.cpp:398]     Test net output #1: loss = 0.171892 (* 1 = 0.171892 loss)
I0428 19:57:10.593730 28608 solver.cpp:219] Iteration 500 (884.503 iter/s, 0.113058s/100 iters), loss = 0.18541
I0428 19:57:10.593786 28608 solver.cpp:238]     Train net output #0: loss = 0.18541 (* 1 = 0.18541 loss)
I0428 19:57:10.593796 28608 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:10.675110 28608 solver.cpp:219] Iteration 600 (1229.69 iter/s, 0.0813216s/100 iters), loss = 0.18575
I0428 19:57:10.675149 28608 solver.cpp:238]     Train net output #0: loss = 0.18575 (* 1 = 0.18575 loss)
I0428 19:57:10.675155 28608 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:10.738056 28608 solver.cpp:219] Iteration 700 (1589.48 iter/s, 0.0629135s/100 iters), loss = 0.366756
I0428 19:57:10.738119 28608 solver.cpp:238]     Train net output #0: loss = 0.366756 (* 1 = 0.366756 loss)
I0428 19:57:10.738126 28608 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:10.811580 28608 solver.cpp:219] Iteration 800 (1361.12 iter/s, 0.0734691s/100 iters), loss = 0.233296
I0428 19:57:10.811620 28608 solver.cpp:238]     Train net output #0: loss = 0.233296 (* 1 = 0.233296 loss)
I0428 19:57:10.811627 28608 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:10.886098 28608 solver.cpp:219] Iteration 900 (1342.59 iter/s, 0.0744827s/100 iters), loss = 0.30818
I0428 19:57:10.886144 28608 solver.cpp:238]     Train net output #0: loss = 0.30818 (* 1 = 0.30818 loss)
I0428 19:57:10.886152 28608 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:10.911929 28614 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:10.959607 28608 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:10.960237 28608 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:10.960680 28608 solver.cpp:311] Iteration 1000, loss = 0.0996989
I0428 19:57:10.960697 28608 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:11.034512 28615 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:11.035104 28608 solver.cpp:398]     Test net output #0: accuracy = 0.9663
I0428 19:57:11.035145 28608 solver.cpp:398]     Test net output #1: loss = 0.111245 (* 1 = 0.111245 loss)
I0428 19:57:11.035153 28608 solver.cpp:316] Optimization Done.
I0428 19:57:11.035159 28608 caffe.cpp:259] Optimization Done.
