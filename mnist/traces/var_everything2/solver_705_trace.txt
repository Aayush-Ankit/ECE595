I0428 19:54:09.243371 27943 caffe.cpp:218] Using GPUs 0
I0428 19:54:09.280592 27943 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:09.790210 27943 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test705.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:09.790344 27943 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test705.prototxt
I0428 19:54:09.790716 27943 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:09.790733 27943 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:09.790822 27943 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:09.790895 27943 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:09.790998 27943 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:09.791024 27943 net.cpp:86] Creating Layer mnist
I0428 19:54:09.791033 27943 net.cpp:382] mnist -> data
I0428 19:54:09.791064 27943 net.cpp:382] mnist -> label
I0428 19:54:09.792176 27943 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:09.794626 27943 net.cpp:124] Setting up mnist
I0428 19:54:09.794651 27943 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:09.794665 27943 net.cpp:131] Top shape: 64 (64)
I0428 19:54:09.794670 27943 net.cpp:139] Memory required for data: 200960
I0428 19:54:09.794677 27943 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:09.794694 27943 net.cpp:86] Creating Layer conv0
I0428 19:54:09.794700 27943 net.cpp:408] conv0 <- data
I0428 19:54:09.794713 27943 net.cpp:382] conv0 -> conv0
I0428 19:54:10.041939 27943 net.cpp:124] Setting up conv0
I0428 19:54:10.041965 27943 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:10.041970 27943 net.cpp:139] Memory required for data: 938240
I0428 19:54:10.042021 27943 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:10.042033 27943 net.cpp:86] Creating Layer pool0
I0428 19:54:10.042037 27943 net.cpp:408] pool0 <- conv0
I0428 19:54:10.042042 27943 net.cpp:382] pool0 -> pool0
I0428 19:54:10.042102 27943 net.cpp:124] Setting up pool0
I0428 19:54:10.042110 27943 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:10.042114 27943 net.cpp:139] Memory required for data: 1122560
I0428 19:54:10.042116 27943 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:10.042127 27943 net.cpp:86] Creating Layer conv1
I0428 19:54:10.042132 27943 net.cpp:408] conv1 <- pool0
I0428 19:54:10.042153 27943 net.cpp:382] conv1 -> conv1
I0428 19:54:10.045044 27943 net.cpp:124] Setting up conv1
I0428 19:54:10.045058 27943 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:10.045063 27943 net.cpp:139] Memory required for data: 2760960
I0428 19:54:10.045070 27943 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:10.045078 27943 net.cpp:86] Creating Layer pool1
I0428 19:54:10.045081 27943 net.cpp:408] pool1 <- conv1
I0428 19:54:10.045086 27943 net.cpp:382] pool1 -> pool1
I0428 19:54:10.045138 27943 net.cpp:124] Setting up pool1
I0428 19:54:10.045145 27943 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:10.045148 27943 net.cpp:139] Memory required for data: 3170560
I0428 19:54:10.045151 27943 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:10.045158 27943 net.cpp:86] Creating Layer ip1
I0428 19:54:10.045161 27943 net.cpp:408] ip1 <- pool1
I0428 19:54:10.045166 27943 net.cpp:382] ip1 -> ip1
I0428 19:54:10.045343 27943 net.cpp:124] Setting up ip1
I0428 19:54:10.045351 27943 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:10.045354 27943 net.cpp:139] Memory required for data: 3173120
I0428 19:54:10.045361 27943 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:10.045368 27943 net.cpp:86] Creating Layer relu1
I0428 19:54:10.045387 27943 net.cpp:408] relu1 <- ip1
I0428 19:54:10.045392 27943 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:10.045567 27943 net.cpp:124] Setting up relu1
I0428 19:54:10.045577 27943 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:10.045579 27943 net.cpp:139] Memory required for data: 3175680
I0428 19:54:10.045583 27943 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:10.045589 27943 net.cpp:86] Creating Layer ip2
I0428 19:54:10.045593 27943 net.cpp:408] ip2 <- ip1
I0428 19:54:10.045598 27943 net.cpp:382] ip2 -> ip2
I0428 19:54:10.045725 27943 net.cpp:124] Setting up ip2
I0428 19:54:10.045732 27943 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:10.045735 27943 net.cpp:139] Memory required for data: 3178240
I0428 19:54:10.045740 27943 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:10.045747 27943 net.cpp:86] Creating Layer relu2
I0428 19:54:10.045749 27943 net.cpp:408] relu2 <- ip2
I0428 19:54:10.045754 27943 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:10.046521 27943 net.cpp:124] Setting up relu2
I0428 19:54:10.046532 27943 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:10.046551 27943 net.cpp:139] Memory required for data: 3180800
I0428 19:54:10.046555 27943 layer_factory.hpp:77] Creating layer loss
I0428 19:54:10.046561 27943 net.cpp:86] Creating Layer loss
I0428 19:54:10.046566 27943 net.cpp:408] loss <- ip2
I0428 19:54:10.046569 27943 net.cpp:408] loss <- label
I0428 19:54:10.046574 27943 net.cpp:382] loss -> loss
I0428 19:54:10.046592 27943 layer_factory.hpp:77] Creating layer loss
I0428 19:54:10.046845 27943 net.cpp:124] Setting up loss
I0428 19:54:10.046855 27943 net.cpp:131] Top shape: (1)
I0428 19:54:10.046859 27943 net.cpp:134]     with loss weight 1
I0428 19:54:10.046875 27943 net.cpp:139] Memory required for data: 3180804
I0428 19:54:10.046895 27943 net.cpp:200] loss needs backward computation.
I0428 19:54:10.046898 27943 net.cpp:200] relu2 needs backward computation.
I0428 19:54:10.046901 27943 net.cpp:200] ip2 needs backward computation.
I0428 19:54:10.046905 27943 net.cpp:200] relu1 needs backward computation.
I0428 19:54:10.046906 27943 net.cpp:200] ip1 needs backward computation.
I0428 19:54:10.046921 27943 net.cpp:200] pool1 needs backward computation.
I0428 19:54:10.046926 27943 net.cpp:200] conv1 needs backward computation.
I0428 19:54:10.046928 27943 net.cpp:200] pool0 needs backward computation.
I0428 19:54:10.046931 27943 net.cpp:200] conv0 needs backward computation.
I0428 19:54:10.046934 27943 net.cpp:202] mnist does not need backward computation.
I0428 19:54:10.046937 27943 net.cpp:244] This network produces output loss
I0428 19:54:10.046963 27943 net.cpp:257] Network initialization done.
I0428 19:54:10.047296 27943 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test705.prototxt
I0428 19:54:10.047320 27943 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:10.047401 27943 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:54:10.047477 27943 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:10.047520 27943 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:10.047531 27943 net.cpp:86] Creating Layer mnist
I0428 19:54:10.047535 27943 net.cpp:382] mnist -> data
I0428 19:54:10.047544 27943 net.cpp:382] mnist -> label
I0428 19:54:10.047624 27943 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:10.049628 27943 net.cpp:124] Setting up mnist
I0428 19:54:10.049656 27943 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:10.049677 27943 net.cpp:131] Top shape: 100 (100)
I0428 19:54:10.049680 27943 net.cpp:139] Memory required for data: 314000
I0428 19:54:10.049685 27943 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:10.049697 27943 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:10.049700 27943 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:10.049706 27943 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:10.049713 27943 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:10.049774 27943 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:10.049792 27943 net.cpp:131] Top shape: 100 (100)
I0428 19:54:10.049795 27943 net.cpp:131] Top shape: 100 (100)
I0428 19:54:10.049798 27943 net.cpp:139] Memory required for data: 314800
I0428 19:54:10.049801 27943 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:10.049813 27943 net.cpp:86] Creating Layer conv0
I0428 19:54:10.049815 27943 net.cpp:408] conv0 <- data
I0428 19:54:10.049821 27943 net.cpp:382] conv0 -> conv0
I0428 19:54:10.051717 27943 net.cpp:124] Setting up conv0
I0428 19:54:10.051748 27943 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:10.051753 27943 net.cpp:139] Memory required for data: 1466800
I0428 19:54:10.051777 27943 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:10.051784 27943 net.cpp:86] Creating Layer pool0
I0428 19:54:10.051787 27943 net.cpp:408] pool0 <- conv0
I0428 19:54:10.051793 27943 net.cpp:382] pool0 -> pool0
I0428 19:54:10.051831 27943 net.cpp:124] Setting up pool0
I0428 19:54:10.051841 27943 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:10.051847 27943 net.cpp:139] Memory required for data: 1754800
I0428 19:54:10.051851 27943 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:10.051877 27943 net.cpp:86] Creating Layer conv1
I0428 19:54:10.051882 27943 net.cpp:408] conv1 <- pool0
I0428 19:54:10.051887 27943 net.cpp:382] conv1 -> conv1
I0428 19:54:10.053727 27943 net.cpp:124] Setting up conv1
I0428 19:54:10.053741 27943 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:10.053762 27943 net.cpp:139] Memory required for data: 4314800
I0428 19:54:10.053771 27943 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:10.053777 27943 net.cpp:86] Creating Layer pool1
I0428 19:54:10.053781 27943 net.cpp:408] pool1 <- conv1
I0428 19:54:10.053787 27943 net.cpp:382] pool1 -> pool1
I0428 19:54:10.053827 27943 net.cpp:124] Setting up pool1
I0428 19:54:10.053834 27943 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:10.053838 27943 net.cpp:139] Memory required for data: 4954800
I0428 19:54:10.053848 27943 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:10.053855 27943 net.cpp:86] Creating Layer ip1
I0428 19:54:10.053861 27943 net.cpp:408] ip1 <- pool1
I0428 19:54:10.053867 27943 net.cpp:382] ip1 -> ip1
I0428 19:54:10.054072 27943 net.cpp:124] Setting up ip1
I0428 19:54:10.054080 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054083 27943 net.cpp:139] Memory required for data: 4958800
I0428 19:54:10.054091 27943 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:10.054098 27943 net.cpp:86] Creating Layer relu1
I0428 19:54:10.054101 27943 net.cpp:408] relu1 <- ip1
I0428 19:54:10.054106 27943 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:10.054278 27943 net.cpp:124] Setting up relu1
I0428 19:54:10.054298 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054301 27943 net.cpp:139] Memory required for data: 4962800
I0428 19:54:10.054311 27943 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:10.054318 27943 net.cpp:86] Creating Layer ip2
I0428 19:54:10.054322 27943 net.cpp:408] ip2 <- ip1
I0428 19:54:10.054329 27943 net.cpp:382] ip2 -> ip2
I0428 19:54:10.054435 27943 net.cpp:124] Setting up ip2
I0428 19:54:10.054441 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054445 27943 net.cpp:139] Memory required for data: 4966800
I0428 19:54:10.054466 27943 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:10.054472 27943 net.cpp:86] Creating Layer relu2
I0428 19:54:10.054476 27943 net.cpp:408] relu2 <- ip2
I0428 19:54:10.054481 27943 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:10.054728 27943 net.cpp:124] Setting up relu2
I0428 19:54:10.054738 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054741 27943 net.cpp:139] Memory required for data: 4970800
I0428 19:54:10.054745 27943 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:54:10.054750 27943 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:54:10.054754 27943 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:54:10.054760 27943 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:54:10.054793 27943 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:54:10.054839 27943 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:54:10.054852 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054860 27943 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:10.054864 27943 net.cpp:139] Memory required for data: 4978800
I0428 19:54:10.054867 27943 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:10.054873 27943 net.cpp:86] Creating Layer accuracy
I0428 19:54:10.054877 27943 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:54:10.054882 27943 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:10.054885 27943 net.cpp:382] accuracy -> accuracy
I0428 19:54:10.054893 27943 net.cpp:124] Setting up accuracy
I0428 19:54:10.054898 27943 net.cpp:131] Top shape: (1)
I0428 19:54:10.054900 27943 net.cpp:139] Memory required for data: 4978804
I0428 19:54:10.054903 27943 layer_factory.hpp:77] Creating layer loss
I0428 19:54:10.054909 27943 net.cpp:86] Creating Layer loss
I0428 19:54:10.054913 27943 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:54:10.054924 27943 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:10.054927 27943 net.cpp:382] loss -> loss
I0428 19:54:10.054934 27943 layer_factory.hpp:77] Creating layer loss
I0428 19:54:10.055196 27943 net.cpp:124] Setting up loss
I0428 19:54:10.055205 27943 net.cpp:131] Top shape: (1)
I0428 19:54:10.055208 27943 net.cpp:134]     with loss weight 1
I0428 19:54:10.055217 27943 net.cpp:139] Memory required for data: 4978808
I0428 19:54:10.055219 27943 net.cpp:200] loss needs backward computation.
I0428 19:54:10.055223 27943 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:10.055227 27943 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:54:10.055230 27943 net.cpp:200] relu2 needs backward computation.
I0428 19:54:10.055233 27943 net.cpp:200] ip2 needs backward computation.
I0428 19:54:10.055236 27943 net.cpp:200] relu1 needs backward computation.
I0428 19:54:10.055239 27943 net.cpp:200] ip1 needs backward computation.
I0428 19:54:10.055243 27943 net.cpp:200] pool1 needs backward computation.
I0428 19:54:10.055246 27943 net.cpp:200] conv1 needs backward computation.
I0428 19:54:10.055250 27943 net.cpp:200] pool0 needs backward computation.
I0428 19:54:10.055259 27943 net.cpp:200] conv0 needs backward computation.
I0428 19:54:10.055263 27943 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:10.055266 27943 net.cpp:202] mnist does not need backward computation.
I0428 19:54:10.055269 27943 net.cpp:244] This network produces output accuracy
I0428 19:54:10.055272 27943 net.cpp:244] This network produces output loss
I0428 19:54:10.055284 27943 net.cpp:257] Network initialization done.
I0428 19:54:10.055321 27943 solver.cpp:56] Solver scaffolding done.
I0428 19:54:10.055640 27943 caffe.cpp:248] Starting Optimization
I0428 19:54:10.055647 27943 solver.cpp:273] Solving LeNet
I0428 19:54:10.055650 27943 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:10.055924 27943 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:10.061724 27943 blocking_queue.cpp:49] Waiting for data
I0428 19:54:10.134824 27950 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:10.135411 27943 solver.cpp:398]     Test net output #0: accuracy = 0.0877
I0428 19:54:10.135447 27943 solver.cpp:398]     Test net output #1: loss = 2.33719 (* 1 = 2.33719 loss)
I0428 19:54:10.139073 27943 solver.cpp:219] Iteration 0 (0 iter/s, 0.0833783s/100 iters), loss = 2.2966
I0428 19:54:10.139116 27943 solver.cpp:238]     Train net output #0: loss = 2.2966 (* 1 = 2.2966 loss)
I0428 19:54:10.139125 27943 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:10.290978 27943 solver.cpp:219] Iteration 100 (658.483 iter/s, 0.151864s/100 iters), loss = 0.783791
I0428 19:54:10.291007 27943 solver.cpp:238]     Train net output #0: loss = 0.783791 (* 1 = 0.783791 loss)
I0428 19:54:10.291013 27943 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:10.446606 27943 solver.cpp:219] Iteration 200 (642.737 iter/s, 0.155585s/100 iters), loss = 0.382225
I0428 19:54:10.446665 27943 solver.cpp:238]     Train net output #0: loss = 0.382225 (* 1 = 0.382225 loss)
I0428 19:54:10.446678 27943 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:10.598345 27943 solver.cpp:219] Iteration 300 (659.318 iter/s, 0.151672s/100 iters), loss = 0.368562
I0428 19:54:10.598376 27943 solver.cpp:238]     Train net output #0: loss = 0.368562 (* 1 = 0.368562 loss)
I0428 19:54:10.598383 27943 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:10.739912 27943 solver.cpp:219] Iteration 400 (706.589 iter/s, 0.141525s/100 iters), loss = 0.245193
I0428 19:54:10.739941 27943 solver.cpp:238]     Train net output #0: loss = 0.245193 (* 1 = 0.245193 loss)
I0428 19:54:10.739948 27943 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:10.878751 27943 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:10.955498 27950 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:10.956091 27943 solver.cpp:398]     Test net output #0: accuracy = 0.9448
I0428 19:54:10.956113 27943 solver.cpp:398]     Test net output #1: loss = 0.180942 (* 1 = 0.180942 loss)
I0428 19:54:10.957432 27943 solver.cpp:219] Iteration 500 (459.825 iter/s, 0.217474s/100 iters), loss = 0.203086
I0428 19:54:10.957470 27943 solver.cpp:238]     Train net output #0: loss = 0.203086 (* 1 = 0.203086 loss)
I0428 19:54:10.957479 27943 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:11.106235 27943 solver.cpp:219] Iteration 600 (672.264 iter/s, 0.148751s/100 iters), loss = 0.144055
I0428 19:54:11.106268 27943 solver.cpp:238]     Train net output #0: loss = 0.144055 (* 1 = 0.144055 loss)
I0428 19:54:11.106277 27943 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:11.252465 27943 solver.cpp:219] Iteration 700 (684.083 iter/s, 0.146181s/100 iters), loss = 0.108864
I0428 19:54:11.252511 27943 solver.cpp:238]     Train net output #0: loss = 0.108864 (* 1 = 0.108864 loss)
I0428 19:54:11.252523 27943 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:11.410859 27943 solver.cpp:219] Iteration 800 (631.572 iter/s, 0.158335s/100 iters), loss = 0.231869
I0428 19:54:11.410895 27943 solver.cpp:238]     Train net output #0: loss = 0.231869 (* 1 = 0.231869 loss)
I0428 19:54:11.410905 27943 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:11.569638 27943 solver.cpp:219] Iteration 900 (630.02 iter/s, 0.158725s/100 iters), loss = 0.206614
I0428 19:54:11.569682 27943 solver.cpp:238]     Train net output #0: loss = 0.206614 (* 1 = 0.206614 loss)
I0428 19:54:11.569692 27943 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:11.619484 27949 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:11.714679 27943 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:11.716452 27943 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:11.717273 27943 solver.cpp:311] Iteration 1000, loss = 0.144154
I0428 19:54:11.717298 27943 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:11.773016 27950 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:11.773663 27943 solver.cpp:398]     Test net output #0: accuracy = 0.9677
I0428 19:54:11.773686 27943 solver.cpp:398]     Test net output #1: loss = 0.109295 (* 1 = 0.109295 loss)
I0428 19:54:11.773692 27943 solver.cpp:316] Optimization Done.
I0428 19:54:11.773696 27943 caffe.cpp:259] Optimization Done.
