I0428 19:59:55.867496 29359 caffe.cpp:218] Using GPUs 0
I0428 19:59:55.903551 29359 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:59:56.405385 29359 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test862.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:59:56.405526 29359 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test862.prototxt
I0428 19:59:56.405911 29359 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:59:56.405930 29359 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:59:56.406020 29359 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:59:56.406098 29359 layer_factory.hpp:77] Creating layer mnist
I0428 19:59:56.406201 29359 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:59:56.406225 29359 net.cpp:86] Creating Layer mnist
I0428 19:59:56.406234 29359 net.cpp:382] mnist -> data
I0428 19:59:56.406256 29359 net.cpp:382] mnist -> label
I0428 19:59:56.407344 29359 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:59:56.409914 29359 net.cpp:124] Setting up mnist
I0428 19:59:56.409934 29359 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:59:56.409940 29359 net.cpp:131] Top shape: 64 (64)
I0428 19:59:56.409943 29359 net.cpp:139] Memory required for data: 200960
I0428 19:59:56.409950 29359 layer_factory.hpp:77] Creating layer conv0
I0428 19:59:56.409967 29359 net.cpp:86] Creating Layer conv0
I0428 19:59:56.409973 29359 net.cpp:408] conv0 <- data
I0428 19:59:56.409986 29359 net.cpp:382] conv0 -> conv0
I0428 19:59:56.666380 29359 net.cpp:124] Setting up conv0
I0428 19:59:56.666424 29359 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:59:56.666442 29359 net.cpp:139] Memory required for data: 1675520
I0428 19:59:56.666474 29359 layer_factory.hpp:77] Creating layer pool0
I0428 19:59:56.666501 29359 net.cpp:86] Creating Layer pool0
I0428 19:59:56.666505 29359 net.cpp:408] pool0 <- conv0
I0428 19:59:56.666510 29359 net.cpp:382] pool0 -> pool0
I0428 19:59:56.666554 29359 net.cpp:124] Setting up pool0
I0428 19:59:56.666575 29359 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:59:56.666579 29359 net.cpp:139] Memory required for data: 2044160
I0428 19:59:56.666581 29359 layer_factory.hpp:77] Creating layer conv1
I0428 19:59:56.666591 29359 net.cpp:86] Creating Layer conv1
I0428 19:59:56.666594 29359 net.cpp:408] conv1 <- pool0
I0428 19:59:56.666599 29359 net.cpp:382] conv1 -> conv1
I0428 19:59:56.669531 29359 net.cpp:124] Setting up conv1
I0428 19:59:56.669562 29359 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:59:56.669566 29359 net.cpp:139] Memory required for data: 2453760
I0428 19:59:56.669574 29359 layer_factory.hpp:77] Creating layer pool1
I0428 19:59:56.669582 29359 net.cpp:86] Creating Layer pool1
I0428 19:59:56.669585 29359 net.cpp:408] pool1 <- conv1
I0428 19:59:56.669606 29359 net.cpp:382] pool1 -> pool1
I0428 19:59:56.669643 29359 net.cpp:124] Setting up pool1
I0428 19:59:56.669651 29359 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:59:56.669653 29359 net.cpp:139] Memory required for data: 2556160
I0428 19:59:56.669656 29359 layer_factory.hpp:77] Creating layer ip1
I0428 19:59:56.669663 29359 net.cpp:86] Creating Layer ip1
I0428 19:59:56.669667 29359 net.cpp:408] ip1 <- pool1
I0428 19:59:56.669672 29359 net.cpp:382] ip1 -> ip1
I0428 19:59:56.670645 29359 net.cpp:124] Setting up ip1
I0428 19:59:56.670658 29359 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:56.670678 29359 net.cpp:139] Memory required for data: 2558720
I0428 19:59:56.670702 29359 layer_factory.hpp:77] Creating layer relu1
I0428 19:59:56.670709 29359 net.cpp:86] Creating Layer relu1
I0428 19:59:56.670712 29359 net.cpp:408] relu1 <- ip1
I0428 19:59:56.670717 29359 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:59:56.670922 29359 net.cpp:124] Setting up relu1
I0428 19:59:56.670930 29359 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:56.670948 29359 net.cpp:139] Memory required for data: 2561280
I0428 19:59:56.670951 29359 layer_factory.hpp:77] Creating layer ip2
I0428 19:59:56.670958 29359 net.cpp:86] Creating Layer ip2
I0428 19:59:56.670961 29359 net.cpp:408] ip2 <- ip1
I0428 19:59:56.670966 29359 net.cpp:382] ip2 -> ip2
I0428 19:59:56.671056 29359 net.cpp:124] Setting up ip2
I0428 19:59:56.671062 29359 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:56.671066 29359 net.cpp:139] Memory required for data: 2563840
I0428 19:59:56.671072 29359 layer_factory.hpp:77] Creating layer relu2
I0428 19:59:56.671077 29359 net.cpp:86] Creating Layer relu2
I0428 19:59:56.671080 29359 net.cpp:408] relu2 <- ip2
I0428 19:59:56.671084 29359 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:59:56.671818 29359 net.cpp:124] Setting up relu2
I0428 19:59:56.671830 29359 net.cpp:131] Top shape: 64 10 (640)
I0428 19:59:56.671849 29359 net.cpp:139] Memory required for data: 2566400
I0428 19:59:56.671854 29359 layer_factory.hpp:77] Creating layer loss
I0428 19:59:56.671860 29359 net.cpp:86] Creating Layer loss
I0428 19:59:56.671864 29359 net.cpp:408] loss <- ip2
I0428 19:59:56.671869 29359 net.cpp:408] loss <- label
I0428 19:59:56.671874 29359 net.cpp:382] loss -> loss
I0428 19:59:56.671893 29359 layer_factory.hpp:77] Creating layer loss
I0428 19:59:56.672183 29359 net.cpp:124] Setting up loss
I0428 19:59:56.672193 29359 net.cpp:131] Top shape: (1)
I0428 19:59:56.672195 29359 net.cpp:134]     with loss weight 1
I0428 19:59:56.672209 29359 net.cpp:139] Memory required for data: 2566404
I0428 19:59:56.672214 29359 net.cpp:200] loss needs backward computation.
I0428 19:59:56.672217 29359 net.cpp:200] relu2 needs backward computation.
I0428 19:59:56.672220 29359 net.cpp:200] ip2 needs backward computation.
I0428 19:59:56.672224 29359 net.cpp:200] relu1 needs backward computation.
I0428 19:59:56.672226 29359 net.cpp:200] ip1 needs backward computation.
I0428 19:59:56.672240 29359 net.cpp:200] pool1 needs backward computation.
I0428 19:59:56.672245 29359 net.cpp:200] conv1 needs backward computation.
I0428 19:59:56.672247 29359 net.cpp:200] pool0 needs backward computation.
I0428 19:59:56.672250 29359 net.cpp:200] conv0 needs backward computation.
I0428 19:59:56.672255 29359 net.cpp:202] mnist does not need backward computation.
I0428 19:59:56.672257 29359 net.cpp:244] This network produces output loss
I0428 19:59:56.672266 29359 net.cpp:257] Network initialization done.
I0428 19:59:56.672572 29359 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test862.prototxt
I0428 19:59:56.672596 29359 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:59:56.672693 29359 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:59:56.672775 29359 layer_factory.hpp:77] Creating layer mnist
I0428 19:59:56.672840 29359 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:59:56.672857 29359 net.cpp:86] Creating Layer mnist
I0428 19:59:56.672863 29359 net.cpp:382] mnist -> data
I0428 19:59:56.672870 29359 net.cpp:382] mnist -> label
I0428 19:59:56.672958 29359 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:59:56.675029 29359 net.cpp:124] Setting up mnist
I0428 19:59:56.675057 29359 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:59:56.675063 29359 net.cpp:131] Top shape: 100 (100)
I0428 19:59:56.675066 29359 net.cpp:139] Memory required for data: 314000
I0428 19:59:56.675071 29359 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:59:56.675082 29359 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:59:56.675086 29359 net.cpp:408] label_mnist_1_split <- label
I0428 19:59:56.675091 29359 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:59:56.675097 29359 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:59:56.675142 29359 net.cpp:124] Setting up label_mnist_1_split
I0428 19:59:56.675159 29359 net.cpp:131] Top shape: 100 (100)
I0428 19:59:56.675163 29359 net.cpp:131] Top shape: 100 (100)
I0428 19:59:56.675166 29359 net.cpp:139] Memory required for data: 314800
I0428 19:59:56.675170 29359 layer_factory.hpp:77] Creating layer conv0
I0428 19:59:56.675179 29359 net.cpp:86] Creating Layer conv0
I0428 19:59:56.675182 29359 net.cpp:408] conv0 <- data
I0428 19:59:56.675187 29359 net.cpp:382] conv0 -> conv0
I0428 19:59:56.676658 29359 net.cpp:124] Setting up conv0
I0428 19:59:56.676672 29359 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:59:56.676692 29359 net.cpp:139] Memory required for data: 2618800
I0428 19:59:56.676702 29359 layer_factory.hpp:77] Creating layer pool0
I0428 19:59:56.676708 29359 net.cpp:86] Creating Layer pool0
I0428 19:59:56.676712 29359 net.cpp:408] pool0 <- conv0
I0428 19:59:56.676731 29359 net.cpp:382] pool0 -> pool0
I0428 19:59:56.676765 29359 net.cpp:124] Setting up pool0
I0428 19:59:56.676772 29359 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:59:56.676775 29359 net.cpp:139] Memory required for data: 3194800
I0428 19:59:56.676779 29359 layer_factory.hpp:77] Creating layer conv1
I0428 19:59:56.676786 29359 net.cpp:86] Creating Layer conv1
I0428 19:59:56.676790 29359 net.cpp:408] conv1 <- pool0
I0428 19:59:56.676795 29359 net.cpp:382] conv1 -> conv1
I0428 19:59:56.678941 29359 net.cpp:124] Setting up conv1
I0428 19:59:56.678969 29359 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:59:56.678973 29359 net.cpp:139] Memory required for data: 3834800
I0428 19:59:56.678982 29359 layer_factory.hpp:77] Creating layer pool1
I0428 19:59:56.678990 29359 net.cpp:86] Creating Layer pool1
I0428 19:59:56.678993 29359 net.cpp:408] pool1 <- conv1
I0428 19:59:56.679013 29359 net.cpp:382] pool1 -> pool1
I0428 19:59:56.679052 29359 net.cpp:124] Setting up pool1
I0428 19:59:56.679059 29359 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:59:56.679064 29359 net.cpp:139] Memory required for data: 3994800
I0428 19:59:56.679066 29359 layer_factory.hpp:77] Creating layer ip1
I0428 19:59:56.679074 29359 net.cpp:86] Creating Layer ip1
I0428 19:59:56.679076 29359 net.cpp:408] ip1 <- pool1
I0428 19:59:56.679081 29359 net.cpp:382] ip1 -> ip1
I0428 19:59:56.679213 29359 net.cpp:124] Setting up ip1
I0428 19:59:56.679220 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.679224 29359 net.cpp:139] Memory required for data: 3998800
I0428 19:59:56.679230 29359 layer_factory.hpp:77] Creating layer relu1
I0428 19:59:56.679236 29359 net.cpp:86] Creating Layer relu1
I0428 19:59:56.679240 29359 net.cpp:408] relu1 <- ip1
I0428 19:59:56.679244 29359 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:59:56.679574 29359 net.cpp:124] Setting up relu1
I0428 19:59:56.679582 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.679601 29359 net.cpp:139] Memory required for data: 4002800
I0428 19:59:56.679605 29359 layer_factory.hpp:77] Creating layer ip2
I0428 19:59:56.679631 29359 net.cpp:86] Creating Layer ip2
I0428 19:59:56.679651 29359 net.cpp:408] ip2 <- ip1
I0428 19:59:56.679656 29359 net.cpp:382] ip2 -> ip2
I0428 19:59:56.679778 29359 net.cpp:124] Setting up ip2
I0428 19:59:56.679786 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.679790 29359 net.cpp:139] Memory required for data: 4006800
I0428 19:59:56.679795 29359 layer_factory.hpp:77] Creating layer relu2
I0428 19:59:56.679805 29359 net.cpp:86] Creating Layer relu2
I0428 19:59:56.679808 29359 net.cpp:408] relu2 <- ip2
I0428 19:59:56.679812 29359 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:59:56.679985 29359 net.cpp:124] Setting up relu2
I0428 19:59:56.679994 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.679997 29359 net.cpp:139] Memory required for data: 4010800
I0428 19:59:56.680001 29359 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:59:56.680004 29359 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:59:56.680008 29359 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:59:56.680012 29359 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:59:56.680027 29359 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:59:56.680064 29359 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:59:56.680071 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.680075 29359 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:59:56.680078 29359 net.cpp:139] Memory required for data: 4018800
I0428 19:59:56.680080 29359 layer_factory.hpp:77] Creating layer accuracy
I0428 19:59:56.680086 29359 net.cpp:86] Creating Layer accuracy
I0428 19:59:56.680089 29359 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:59:56.680100 29359 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:59:56.680104 29359 net.cpp:382] accuracy -> accuracy
I0428 19:59:56.680111 29359 net.cpp:124] Setting up accuracy
I0428 19:59:56.680115 29359 net.cpp:131] Top shape: (1)
I0428 19:59:56.680119 29359 net.cpp:139] Memory required for data: 4018804
I0428 19:59:56.680121 29359 layer_factory.hpp:77] Creating layer loss
I0428 19:59:56.680127 29359 net.cpp:86] Creating Layer loss
I0428 19:59:56.680130 29359 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:59:56.680135 29359 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:59:56.680138 29359 net.cpp:382] loss -> loss
I0428 19:59:56.680145 29359 layer_factory.hpp:77] Creating layer loss
I0428 19:59:56.680407 29359 net.cpp:124] Setting up loss
I0428 19:59:56.680415 29359 net.cpp:131] Top shape: (1)
I0428 19:59:56.680418 29359 net.cpp:134]     with loss weight 1
I0428 19:59:56.680425 29359 net.cpp:139] Memory required for data: 4018808
I0428 19:59:56.680428 29359 net.cpp:200] loss needs backward computation.
I0428 19:59:56.680433 29359 net.cpp:202] accuracy does not need backward computation.
I0428 19:59:56.680436 29359 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:59:56.680438 29359 net.cpp:200] relu2 needs backward computation.
I0428 19:59:56.680441 29359 net.cpp:200] ip2 needs backward computation.
I0428 19:59:56.680444 29359 net.cpp:200] relu1 needs backward computation.
I0428 19:59:56.680447 29359 net.cpp:200] ip1 needs backward computation.
I0428 19:59:56.680449 29359 net.cpp:200] pool1 needs backward computation.
I0428 19:59:56.680452 29359 net.cpp:200] conv1 needs backward computation.
I0428 19:59:56.680455 29359 net.cpp:200] pool0 needs backward computation.
I0428 19:59:56.680459 29359 net.cpp:200] conv0 needs backward computation.
I0428 19:59:56.680462 29359 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:59:56.680465 29359 net.cpp:202] mnist does not need backward computation.
I0428 19:59:56.680469 29359 net.cpp:244] This network produces output accuracy
I0428 19:59:56.680471 29359 net.cpp:244] This network produces output loss
I0428 19:59:56.680482 29359 net.cpp:257] Network initialization done.
I0428 19:59:56.680519 29359 solver.cpp:56] Solver scaffolding done.
I0428 19:59:56.680888 29359 caffe.cpp:248] Starting Optimization
I0428 19:59:56.680896 29359 solver.cpp:273] Solving LeNet
I0428 19:59:56.680897 29359 solver.cpp:274] Learning Rate Policy: inv
I0428 19:59:56.681068 29359 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:59:56.685132 29359 blocking_queue.cpp:49] Waiting for data
I0428 19:59:56.756585 29366 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:56.757134 29359 solver.cpp:398]     Test net output #0: accuracy = 0.0721
I0428 19:59:56.757169 29359 solver.cpp:398]     Test net output #1: loss = 2.32663 (* 1 = 2.32663 loss)
I0428 19:59:56.759383 29359 solver.cpp:219] Iteration 0 (2.90267 iter/s, 0.0784274s/100 iters), loss = 2.30948
I0428 19:59:56.759430 29359 solver.cpp:238]     Train net output #0: loss = 2.30948 (* 1 = 2.30948 loss)
I0428 19:59:56.759441 29359 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:59:56.840842 29359 solver.cpp:219] Iteration 100 (1228.46 iter/s, 0.0814028s/100 iters), loss = 1.05245
I0428 19:59:56.840886 29359 solver.cpp:238]     Train net output #0: loss = 1.05245 (* 1 = 1.05245 loss)
I0428 19:59:56.840893 29359 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:59:56.926818 29359 solver.cpp:219] Iteration 200 (1163.86 iter/s, 0.085921s/100 iters), loss = 0.815789
I0428 19:59:56.926869 29359 solver.cpp:238]     Train net output #0: loss = 0.815789 (* 1 = 0.815789 loss)
I0428 19:59:56.926878 29359 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:59:57.010246 29359 solver.cpp:219] Iteration 300 (1199.47 iter/s, 0.08337s/100 iters), loss = 0.680624
I0428 19:59:57.010272 29359 solver.cpp:238]     Train net output #0: loss = 0.680624 (* 1 = 0.680624 loss)
I0428 19:59:57.010278 29359 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:59:57.101092 29359 solver.cpp:219] Iteration 400 (1101.22 iter/s, 0.0908085s/100 iters), loss = 0.469807
I0428 19:59:57.101128 29359 solver.cpp:238]     Train net output #0: loss = 0.469807 (* 1 = 0.469807 loss)
I0428 19:59:57.101137 29359 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:59:57.185268 29359 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:59:57.233069 29366 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:57.233584 29359 solver.cpp:398]     Test net output #0: accuracy = 0.755
I0428 19:59:57.233603 29359 solver.cpp:398]     Test net output #1: loss = 0.621807 (* 1 = 0.621807 loss)
I0428 19:59:57.234459 29359 solver.cpp:219] Iteration 500 (750.065 iter/s, 0.133322s/100 iters), loss = 0.557407
I0428 19:59:57.234510 29359 solver.cpp:238]     Train net output #0: loss = 0.557407 (* 1 = 0.557407 loss)
I0428 19:59:57.234519 29359 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:59:57.328918 29359 solver.cpp:219] Iteration 600 (1059.33 iter/s, 0.0943989s/100 iters), loss = 0.621002
I0428 19:59:57.328943 29359 solver.cpp:238]     Train net output #0: loss = 0.621002 (* 1 = 0.621002 loss)
I0428 19:59:57.328965 29359 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:59:57.411550 29359 solver.cpp:219] Iteration 700 (1210.71 iter/s, 0.0825958s/100 iters), loss = 0.775046
I0428 19:59:57.411579 29359 solver.cpp:238]     Train net output #0: loss = 0.775046 (* 1 = 0.775046 loss)
I0428 19:59:57.411602 29359 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:59:57.491991 29359 solver.cpp:219] Iteration 800 (1243.74 iter/s, 0.0804025s/100 iters), loss = 0.635764
I0428 19:59:57.492017 29359 solver.cpp:238]     Train net output #0: loss = 0.635764 (* 1 = 0.635764 loss)
I0428 19:59:57.492040 29359 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:59:57.579807 29359 solver.cpp:219] Iteration 900 (1139.22 iter/s, 0.0877791s/100 iters), loss = 0.735955
I0428 19:59:57.579843 29359 solver.cpp:238]     Train net output #0: loss = 0.735955 (* 1 = 0.735955 loss)
I0428 19:59:57.579857 29359 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:59:57.608671 29365 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:57.663197 29359 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:59:57.664101 29359 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:59:57.664867 29359 solver.cpp:311] Iteration 1000, loss = 0.651111
I0428 19:59:57.664913 29359 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:59:57.720515 29366 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:59:57.722275 29359 solver.cpp:398]     Test net output #0: accuracy = 0.7655
I0428 19:59:57.722302 29359 solver.cpp:398]     Test net output #1: loss = 0.579405 (* 1 = 0.579405 loss)
I0428 19:59:57.722321 29359 solver.cpp:316] Optimization Done.
I0428 19:59:57.722326 29359 caffe.cpp:259] Optimization Done.
