I0428 19:46:29.731889 26010 caffe.cpp:218] Using GPUs 0
I0428 19:46:29.768087 26010 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:46:30.278796 26010 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test493.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:46:30.278930 26010 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test493.prototxt
I0428 19:46:30.279350 26010 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:46:30.279369 26010 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:46:30.279471 26010 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:30.279551 26010 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:30.279649 26010 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:46:30.279675 26010 net.cpp:86] Creating Layer mnist
I0428 19:46:30.279682 26010 net.cpp:382] mnist -> data
I0428 19:46:30.279706 26010 net.cpp:382] mnist -> label
I0428 19:46:30.280802 26010 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:46:30.283258 26010 net.cpp:124] Setting up mnist
I0428 19:46:30.283275 26010 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:46:30.283283 26010 net.cpp:131] Top shape: 64 (64)
I0428 19:46:30.283287 26010 net.cpp:139] Memory required for data: 200960
I0428 19:46:30.283293 26010 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:30.283309 26010 net.cpp:86] Creating Layer conv0
I0428 19:46:30.283329 26010 net.cpp:408] conv0 <- data
I0428 19:46:30.283342 26010 net.cpp:382] conv0 -> conv0
I0428 19:46:30.561970 26010 net.cpp:124] Setting up conv0
I0428 19:46:30.561995 26010 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:46:30.561998 26010 net.cpp:139] Memory required for data: 495872
I0428 19:46:30.562011 26010 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:30.562023 26010 net.cpp:86] Creating Layer pool0
I0428 19:46:30.562027 26010 net.cpp:408] pool0 <- conv0
I0428 19:46:30.562032 26010 net.cpp:382] pool0 -> pool0
I0428 19:46:30.562093 26010 net.cpp:124] Setting up pool0
I0428 19:46:30.562098 26010 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:46:30.562100 26010 net.cpp:139] Memory required for data: 569600
I0428 19:46:30.562103 26010 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:30.562114 26010 net.cpp:86] Creating Layer conv1
I0428 19:46:30.562116 26010 net.cpp:408] conv1 <- pool0
I0428 19:46:30.562120 26010 net.cpp:382] conv1 -> conv1
I0428 19:46:30.564798 26010 net.cpp:124] Setting up conv1
I0428 19:46:30.564832 26010 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:46:30.564836 26010 net.cpp:139] Memory required for data: 2208000
I0428 19:46:30.564844 26010 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:30.564851 26010 net.cpp:86] Creating Layer pool1
I0428 19:46:30.564855 26010 net.cpp:408] pool1 <- conv1
I0428 19:46:30.564860 26010 net.cpp:382] pool1 -> pool1
I0428 19:46:30.564911 26010 net.cpp:124] Setting up pool1
I0428 19:46:30.564916 26010 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:46:30.564919 26010 net.cpp:139] Memory required for data: 2617600
I0428 19:46:30.564923 26010 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:30.564929 26010 net.cpp:86] Creating Layer ip1
I0428 19:46:30.564932 26010 net.cpp:408] ip1 <- pool1
I0428 19:46:30.564937 26010 net.cpp:382] ip1 -> ip1
I0428 19:46:30.565296 26010 net.cpp:124] Setting up ip1
I0428 19:46:30.565304 26010 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:30.565322 26010 net.cpp:139] Memory required for data: 2624000
I0428 19:46:30.565330 26010 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:30.565335 26010 net.cpp:86] Creating Layer relu1
I0428 19:46:30.565338 26010 net.cpp:408] relu1 <- ip1
I0428 19:46:30.565342 26010 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:30.565501 26010 net.cpp:124] Setting up relu1
I0428 19:46:30.565510 26010 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:30.565512 26010 net.cpp:139] Memory required for data: 2630400
I0428 19:46:30.565515 26010 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:30.565522 26010 net.cpp:86] Creating Layer ip2
I0428 19:46:30.565526 26010 net.cpp:408] ip2 <- ip1
I0428 19:46:30.565543 26010 net.cpp:382] ip2 -> ip2
I0428 19:46:30.565634 26010 net.cpp:124] Setting up ip2
I0428 19:46:30.565640 26010 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:30.565644 26010 net.cpp:139] Memory required for data: 2636800
I0428 19:46:30.565649 26010 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:30.565654 26010 net.cpp:86] Creating Layer relu2
I0428 19:46:30.565657 26010 net.cpp:408] relu2 <- ip2
I0428 19:46:30.565661 26010 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:30.566422 26010 net.cpp:124] Setting up relu2
I0428 19:46:30.566435 26010 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:30.566455 26010 net.cpp:139] Memory required for data: 2643200
I0428 19:46:30.566458 26010 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:30.566467 26010 net.cpp:86] Creating Layer ip3
I0428 19:46:30.566469 26010 net.cpp:408] ip3 <- ip2
I0428 19:46:30.566475 26010 net.cpp:382] ip3 -> ip3
I0428 19:46:30.566581 26010 net.cpp:124] Setting up ip3
I0428 19:46:30.566588 26010 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:30.566591 26010 net.cpp:139] Memory required for data: 2645760
I0428 19:46:30.566601 26010 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:30.566606 26010 net.cpp:86] Creating Layer relu3
I0428 19:46:30.566608 26010 net.cpp:408] relu3 <- ip3
I0428 19:46:30.566612 26010 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:30.566802 26010 net.cpp:124] Setting up relu3
I0428 19:46:30.566810 26010 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:30.566813 26010 net.cpp:139] Memory required for data: 2648320
I0428 19:46:30.566817 26010 layer_factory.hpp:77] Creating layer loss
I0428 19:46:30.566823 26010 net.cpp:86] Creating Layer loss
I0428 19:46:30.566839 26010 net.cpp:408] loss <- ip3
I0428 19:46:30.566843 26010 net.cpp:408] loss <- label
I0428 19:46:30.566848 26010 net.cpp:382] loss -> loss
I0428 19:46:30.566862 26010 layer_factory.hpp:77] Creating layer loss
I0428 19:46:30.567095 26010 net.cpp:124] Setting up loss
I0428 19:46:30.567103 26010 net.cpp:131] Top shape: (1)
I0428 19:46:30.567107 26010 net.cpp:134]     with loss weight 1
I0428 19:46:30.567121 26010 net.cpp:139] Memory required for data: 2648324
I0428 19:46:30.567123 26010 net.cpp:200] loss needs backward computation.
I0428 19:46:30.567127 26010 net.cpp:200] relu3 needs backward computation.
I0428 19:46:30.567131 26010 net.cpp:200] ip3 needs backward computation.
I0428 19:46:30.567132 26010 net.cpp:200] relu2 needs backward computation.
I0428 19:46:30.567136 26010 net.cpp:200] ip2 needs backward computation.
I0428 19:46:30.567138 26010 net.cpp:200] relu1 needs backward computation.
I0428 19:46:30.567142 26010 net.cpp:200] ip1 needs backward computation.
I0428 19:46:30.567144 26010 net.cpp:200] pool1 needs backward computation.
I0428 19:46:30.567147 26010 net.cpp:200] conv1 needs backward computation.
I0428 19:46:30.567150 26010 net.cpp:200] pool0 needs backward computation.
I0428 19:46:30.567152 26010 net.cpp:200] conv0 needs backward computation.
I0428 19:46:30.567157 26010 net.cpp:202] mnist does not need backward computation.
I0428 19:46:30.567158 26010 net.cpp:244] This network produces output loss
I0428 19:46:30.567167 26010 net.cpp:257] Network initialization done.
I0428 19:46:30.567524 26010 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test493.prototxt
I0428 19:46:30.567566 26010 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:46:30.567654 26010 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:30.567744 26010 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:30.567786 26010 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:46:30.567797 26010 net.cpp:86] Creating Layer mnist
I0428 19:46:30.567802 26010 net.cpp:382] mnist -> data
I0428 19:46:30.567809 26010 net.cpp:382] mnist -> label
I0428 19:46:30.567888 26010 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:46:30.570065 26010 net.cpp:124] Setting up mnist
I0428 19:46:30.570094 26010 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:46:30.570116 26010 net.cpp:131] Top shape: 100 (100)
I0428 19:46:30.570118 26010 net.cpp:139] Memory required for data: 314000
I0428 19:46:30.570122 26010 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:46:30.570128 26010 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:46:30.570132 26010 net.cpp:408] label_mnist_1_split <- label
I0428 19:46:30.570137 26010 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:46:30.570143 26010 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:46:30.570192 26010 net.cpp:124] Setting up label_mnist_1_split
I0428 19:46:30.570199 26010 net.cpp:131] Top shape: 100 (100)
I0428 19:46:30.570202 26010 net.cpp:131] Top shape: 100 (100)
I0428 19:46:30.570205 26010 net.cpp:139] Memory required for data: 314800
I0428 19:46:30.570209 26010 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:30.570216 26010 net.cpp:86] Creating Layer conv0
I0428 19:46:30.570219 26010 net.cpp:408] conv0 <- data
I0428 19:46:30.570225 26010 net.cpp:382] conv0 -> conv0
I0428 19:46:30.571943 26010 net.cpp:124] Setting up conv0
I0428 19:46:30.571972 26010 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:46:30.571976 26010 net.cpp:139] Memory required for data: 775600
I0428 19:46:30.571985 26010 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:30.571993 26010 net.cpp:86] Creating Layer pool0
I0428 19:46:30.571996 26010 net.cpp:408] pool0 <- conv0
I0428 19:46:30.572001 26010 net.cpp:382] pool0 -> pool0
I0428 19:46:30.572037 26010 net.cpp:124] Setting up pool0
I0428 19:46:30.572043 26010 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:46:30.572047 26010 net.cpp:139] Memory required for data: 890800
I0428 19:46:30.572051 26010 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:30.572058 26010 net.cpp:86] Creating Layer conv1
I0428 19:46:30.572062 26010 net.cpp:408] conv1 <- pool0
I0428 19:46:30.572067 26010 net.cpp:382] conv1 -> conv1
I0428 19:46:30.573654 26010 net.cpp:124] Setting up conv1
I0428 19:46:30.573683 26010 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:46:30.573688 26010 net.cpp:139] Memory required for data: 3450800
I0428 19:46:30.573695 26010 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:30.573703 26010 net.cpp:86] Creating Layer pool1
I0428 19:46:30.573719 26010 net.cpp:408] pool1 <- conv1
I0428 19:46:30.573724 26010 net.cpp:382] pool1 -> pool1
I0428 19:46:30.573763 26010 net.cpp:124] Setting up pool1
I0428 19:46:30.573771 26010 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:46:30.573774 26010 net.cpp:139] Memory required for data: 4090800
I0428 19:46:30.573777 26010 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:30.573783 26010 net.cpp:86] Creating Layer ip1
I0428 19:46:30.573786 26010 net.cpp:408] ip1 <- pool1
I0428 19:46:30.573791 26010 net.cpp:382] ip1 -> ip1
I0428 19:46:30.574226 26010 net.cpp:124] Setting up ip1
I0428 19:46:30.574234 26010 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:30.574262 26010 net.cpp:139] Memory required for data: 4100800
I0428 19:46:30.574270 26010 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:30.574275 26010 net.cpp:86] Creating Layer relu1
I0428 19:46:30.574277 26010 net.cpp:408] relu1 <- ip1
I0428 19:46:30.574283 26010 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:30.574533 26010 net.cpp:124] Setting up relu1
I0428 19:46:30.574542 26010 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:30.574545 26010 net.cpp:139] Memory required for data: 4110800
I0428 19:46:30.574548 26010 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:30.574556 26010 net.cpp:86] Creating Layer ip2
I0428 19:46:30.574559 26010 net.cpp:408] ip2 <- ip1
I0428 19:46:30.574564 26010 net.cpp:382] ip2 -> ip2
I0428 19:46:30.574682 26010 net.cpp:124] Setting up ip2
I0428 19:46:30.574690 26010 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:30.574693 26010 net.cpp:139] Memory required for data: 4120800
I0428 19:46:30.574698 26010 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:30.574703 26010 net.cpp:86] Creating Layer relu2
I0428 19:46:30.574707 26010 net.cpp:408] relu2 <- ip2
I0428 19:46:30.574712 26010 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:30.574898 26010 net.cpp:124] Setting up relu2
I0428 19:46:30.574906 26010 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:30.574910 26010 net.cpp:139] Memory required for data: 4130800
I0428 19:46:30.574913 26010 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:30.574934 26010 net.cpp:86] Creating Layer ip3
I0428 19:46:30.574936 26010 net.cpp:408] ip3 <- ip2
I0428 19:46:30.574941 26010 net.cpp:382] ip3 -> ip3
I0428 19:46:30.575053 26010 net.cpp:124] Setting up ip3
I0428 19:46:30.575062 26010 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:30.575064 26010 net.cpp:139] Memory required for data: 4134800
I0428 19:46:30.575073 26010 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:30.575094 26010 net.cpp:86] Creating Layer relu3
I0428 19:46:30.575114 26010 net.cpp:408] relu3 <- ip3
I0428 19:46:30.575119 26010 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:30.576010 26010 net.cpp:124] Setting up relu3
I0428 19:46:30.576021 26010 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:30.576042 26010 net.cpp:139] Memory required for data: 4138800
I0428 19:46:30.576045 26010 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:46:30.576064 26010 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:46:30.576078 26010 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:46:30.576083 26010 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:46:30.576091 26010 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:46:30.576131 26010 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:46:30.576146 26010 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:30.576151 26010 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:30.576153 26010 net.cpp:139] Memory required for data: 4146800
I0428 19:46:30.576162 26010 layer_factory.hpp:77] Creating layer accuracy
I0428 19:46:30.576167 26010 net.cpp:86] Creating Layer accuracy
I0428 19:46:30.576171 26010 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:46:30.576176 26010 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:46:30.576196 26010 net.cpp:382] accuracy -> accuracy
I0428 19:46:30.576203 26010 net.cpp:124] Setting up accuracy
I0428 19:46:30.576207 26010 net.cpp:131] Top shape: (1)
I0428 19:46:30.576210 26010 net.cpp:139] Memory required for data: 4146804
I0428 19:46:30.576213 26010 layer_factory.hpp:77] Creating layer loss
I0428 19:46:30.576218 26010 net.cpp:86] Creating Layer loss
I0428 19:46:30.576221 26010 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:46:30.576225 26010 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:46:30.576231 26010 net.cpp:382] loss -> loss
I0428 19:46:30.576236 26010 layer_factory.hpp:77] Creating layer loss
I0428 19:46:30.576483 26010 net.cpp:124] Setting up loss
I0428 19:46:30.576493 26010 net.cpp:131] Top shape: (1)
I0428 19:46:30.576495 26010 net.cpp:134]     with loss weight 1
I0428 19:46:30.576527 26010 net.cpp:139] Memory required for data: 4146808
I0428 19:46:30.576531 26010 net.cpp:200] loss needs backward computation.
I0428 19:46:30.576534 26010 net.cpp:202] accuracy does not need backward computation.
I0428 19:46:30.576539 26010 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:46:30.576541 26010 net.cpp:200] relu3 needs backward computation.
I0428 19:46:30.576545 26010 net.cpp:200] ip3 needs backward computation.
I0428 19:46:30.576547 26010 net.cpp:200] relu2 needs backward computation.
I0428 19:46:30.576550 26010 net.cpp:200] ip2 needs backward computation.
I0428 19:46:30.576553 26010 net.cpp:200] relu1 needs backward computation.
I0428 19:46:30.576556 26010 net.cpp:200] ip1 needs backward computation.
I0428 19:46:30.576565 26010 net.cpp:200] pool1 needs backward computation.
I0428 19:46:30.576567 26010 net.cpp:200] conv1 needs backward computation.
I0428 19:46:30.576575 26010 net.cpp:200] pool0 needs backward computation.
I0428 19:46:30.576580 26010 net.cpp:200] conv0 needs backward computation.
I0428 19:46:30.576582 26010 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:46:30.576586 26010 net.cpp:202] mnist does not need backward computation.
I0428 19:46:30.576589 26010 net.cpp:244] This network produces output accuracy
I0428 19:46:30.576592 26010 net.cpp:244] This network produces output loss
I0428 19:46:30.576606 26010 net.cpp:257] Network initialization done.
I0428 19:46:30.576647 26010 solver.cpp:56] Solver scaffolding done.
I0428 19:46:30.577075 26010 caffe.cpp:248] Starting Optimization
I0428 19:46:30.577081 26010 solver.cpp:273] Solving LeNet
I0428 19:46:30.577085 26010 solver.cpp:274] Learning Rate Policy: inv
I0428 19:46:30.578075 26010 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:46:30.582733 26010 blocking_queue.cpp:49] Waiting for data
I0428 19:46:30.650480 26017 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:30.651072 26010 solver.cpp:398]     Test net output #0: accuracy = 0.1223
I0428 19:46:30.651090 26010 solver.cpp:398]     Test net output #1: loss = 2.30565 (* 1 = 2.30565 loss)
I0428 19:46:30.654956 26010 solver.cpp:219] Iteration 0 (0 iter/s, 0.0778283s/100 iters), loss = 2.34312
I0428 19:46:30.654980 26010 solver.cpp:238]     Train net output #0: loss = 2.34312 (* 1 = 2.34312 loss)
I0428 19:46:30.655001 26010 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:46:30.800606 26010 solver.cpp:219] Iteration 100 (686.753 iter/s, 0.145613s/100 iters), loss = 1.02369
I0428 19:46:30.800628 26010 solver.cpp:238]     Train net output #0: loss = 1.02369 (* 1 = 1.02369 loss)
I0428 19:46:30.800634 26010 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:46:30.946472 26010 solver.cpp:219] Iteration 200 (685.73 iter/s, 0.14583s/100 iters), loss = 0.66045
I0428 19:46:30.946496 26010 solver.cpp:238]     Train net output #0: loss = 0.66045 (* 1 = 0.66045 loss)
I0428 19:46:30.946502 26010 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:46:31.090823 26010 solver.cpp:219] Iteration 300 (692.931 iter/s, 0.144314s/100 iters), loss = 0.89348
I0428 19:46:31.090847 26010 solver.cpp:238]     Train net output #0: loss = 0.89348 (* 1 = 0.89348 loss)
I0428 19:46:31.090868 26010 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:46:31.240537 26010 solver.cpp:219] Iteration 400 (668.105 iter/s, 0.149677s/100 iters), loss = 0.860967
I0428 19:46:31.240564 26010 solver.cpp:238]     Train net output #0: loss = 0.860967 (* 1 = 0.860967 loss)
I0428 19:46:31.240571 26010 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:46:31.394901 26010 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:46:31.447867 26017 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:31.449609 26010 solver.cpp:398]     Test net output #0: accuracy = 0.6713
I0428 19:46:31.449628 26010 solver.cpp:398]     Test net output #1: loss = 0.827465 (* 1 = 0.827465 loss)
I0428 19:46:31.451000 26010 solver.cpp:219] Iteration 500 (475.241 iter/s, 0.21042s/100 iters), loss = 0.938114
I0428 19:46:31.451022 26010 solver.cpp:238]     Train net output #0: loss = 0.938114 (* 1 = 0.938114 loss)
I0428 19:46:31.451076 26010 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:46:31.605391 26010 solver.cpp:219] Iteration 600 (647.859 iter/s, 0.154355s/100 iters), loss = 0.732309
I0428 19:46:31.605417 26010 solver.cpp:238]     Train net output #0: loss = 0.732309 (* 1 = 0.732309 loss)
I0428 19:46:31.605423 26010 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:46:31.756718 26010 solver.cpp:219] Iteration 700 (660.992 iter/s, 0.151288s/100 iters), loss = 0.862792
I0428 19:46:31.756760 26010 solver.cpp:238]     Train net output #0: loss = 0.862792 (* 1 = 0.862792 loss)
I0428 19:46:31.756767 26010 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:46:31.913919 26010 solver.cpp:219] Iteration 800 (636.346 iter/s, 0.157147s/100 iters), loss = 0.893707
I0428 19:46:31.913960 26010 solver.cpp:238]     Train net output #0: loss = 0.893707 (* 1 = 0.893707 loss)
I0428 19:46:31.913966 26010 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:46:32.069479 26010 solver.cpp:219] Iteration 900 (643 iter/s, 0.155521s/100 iters), loss = 0.566474
I0428 19:46:32.069536 26010 solver.cpp:238]     Train net output #0: loss = 0.566474 (* 1 = 0.566474 loss)
I0428 19:46:32.069542 26010 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:46:32.118749 26016 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:32.215325 26010 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:46:32.217334 26010 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:46:32.218242 26010 solver.cpp:311] Iteration 1000, loss = 0.694075
I0428 19:46:32.218256 26010 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:46:32.288127 26017 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:32.288844 26010 solver.cpp:398]     Test net output #0: accuracy = 0.6896
I0428 19:46:32.288882 26010 solver.cpp:398]     Test net output #1: loss = 0.755075 (* 1 = 0.755075 loss)
I0428 19:46:32.288887 26010 solver.cpp:316] Optimization Done.
I0428 19:46:32.288892 26010 caffe.cpp:259] Optimization Done.
