I0428 19:48:37.764706 26532 caffe.cpp:218] Using GPUs 0
I0428 19:48:37.805896 26532 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:38.321497 26532 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test550.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:38.321636 26532 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test550.prototxt
I0428 19:48:38.322013 26532 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:38.322031 26532 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:38.322121 26532 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:38.322198 26532 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:38.322298 26532 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:38.322322 26532 net.cpp:86] Creating Layer mnist
I0428 19:48:38.322330 26532 net.cpp:382] mnist -> data
I0428 19:48:38.322351 26532 net.cpp:382] mnist -> label
I0428 19:48:38.323457 26532 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:38.325927 26532 net.cpp:124] Setting up mnist
I0428 19:48:38.325944 26532 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:38.325953 26532 net.cpp:131] Top shape: 64 (64)
I0428 19:48:38.325956 26532 net.cpp:139] Memory required for data: 200960
I0428 19:48:38.325963 26532 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:38.325979 26532 net.cpp:86] Creating Layer conv0
I0428 19:48:38.325985 26532 net.cpp:408] conv0 <- data
I0428 19:48:38.325999 26532 net.cpp:382] conv0 -> conv0
I0428 19:48:38.593827 26532 net.cpp:124] Setting up conv0
I0428 19:48:38.593868 26532 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:38.593871 26532 net.cpp:139] Memory required for data: 938240
I0428 19:48:38.593905 26532 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:38.593933 26532 net.cpp:86] Creating Layer pool0
I0428 19:48:38.593937 26532 net.cpp:408] pool0 <- conv0
I0428 19:48:38.593942 26532 net.cpp:382] pool0 -> pool0
I0428 19:48:38.593988 26532 net.cpp:124] Setting up pool0
I0428 19:48:38.594000 26532 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:38.594003 26532 net.cpp:139] Memory required for data: 1122560
I0428 19:48:38.594007 26532 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:38.594017 26532 net.cpp:86] Creating Layer conv1
I0428 19:48:38.594019 26532 net.cpp:408] conv1 <- pool0
I0428 19:48:38.594024 26532 net.cpp:382] conv1 -> conv1
I0428 19:48:38.596009 26532 net.cpp:124] Setting up conv1
I0428 19:48:38.596024 26532 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:38.596027 26532 net.cpp:139] Memory required for data: 1204480
I0428 19:48:38.596038 26532 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:38.596045 26532 net.cpp:86] Creating Layer pool1
I0428 19:48:38.596050 26532 net.cpp:408] pool1 <- conv1
I0428 19:48:38.596055 26532 net.cpp:382] pool1 -> pool1
I0428 19:48:38.596093 26532 net.cpp:124] Setting up pool1
I0428 19:48:38.596098 26532 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:38.596101 26532 net.cpp:139] Memory required for data: 1224960
I0428 19:48:38.596104 26532 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:38.596112 26532 net.cpp:86] Creating Layer ip1
I0428 19:48:38.596114 26532 net.cpp:408] ip1 <- pool1
I0428 19:48:38.596119 26532 net.cpp:382] ip1 -> ip1
I0428 19:48:38.596225 26532 net.cpp:124] Setting up ip1
I0428 19:48:38.596232 26532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:38.596235 26532 net.cpp:139] Memory required for data: 1227520
I0428 19:48:38.596243 26532 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:38.596249 26532 net.cpp:86] Creating Layer relu1
I0428 19:48:38.596252 26532 net.cpp:408] relu1 <- ip1
I0428 19:48:38.596256 26532 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:38.596433 26532 net.cpp:124] Setting up relu1
I0428 19:48:38.596442 26532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:38.596446 26532 net.cpp:139] Memory required for data: 1230080
I0428 19:48:38.596449 26532 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:38.596456 26532 net.cpp:86] Creating Layer ip2
I0428 19:48:38.596459 26532 net.cpp:408] ip2 <- ip1
I0428 19:48:38.596464 26532 net.cpp:382] ip2 -> ip2
I0428 19:48:38.596560 26532 net.cpp:124] Setting up ip2
I0428 19:48:38.596567 26532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:38.596570 26532 net.cpp:139] Memory required for data: 1232640
I0428 19:48:38.596576 26532 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:38.596582 26532 net.cpp:86] Creating Layer relu2
I0428 19:48:38.596585 26532 net.cpp:408] relu2 <- ip2
I0428 19:48:38.596590 26532 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:38.597422 26532 net.cpp:124] Setting up relu2
I0428 19:48:38.597435 26532 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:38.597455 26532 net.cpp:139] Memory required for data: 1235200
I0428 19:48:38.597458 26532 layer_factory.hpp:77] Creating layer loss
I0428 19:48:38.597465 26532 net.cpp:86] Creating Layer loss
I0428 19:48:38.597470 26532 net.cpp:408] loss <- ip2
I0428 19:48:38.597474 26532 net.cpp:408] loss <- label
I0428 19:48:38.597481 26532 net.cpp:382] loss -> loss
I0428 19:48:38.597497 26532 layer_factory.hpp:77] Creating layer loss
I0428 19:48:38.597733 26532 net.cpp:124] Setting up loss
I0428 19:48:38.597743 26532 net.cpp:131] Top shape: (1)
I0428 19:48:38.597746 26532 net.cpp:134]     with loss weight 1
I0428 19:48:38.597760 26532 net.cpp:139] Memory required for data: 1235204
I0428 19:48:38.597764 26532 net.cpp:200] loss needs backward computation.
I0428 19:48:38.597769 26532 net.cpp:200] relu2 needs backward computation.
I0428 19:48:38.597771 26532 net.cpp:200] ip2 needs backward computation.
I0428 19:48:38.597774 26532 net.cpp:200] relu1 needs backward computation.
I0428 19:48:38.597777 26532 net.cpp:200] ip1 needs backward computation.
I0428 19:48:38.597780 26532 net.cpp:200] pool1 needs backward computation.
I0428 19:48:38.597795 26532 net.cpp:200] conv1 needs backward computation.
I0428 19:48:38.597798 26532 net.cpp:200] pool0 needs backward computation.
I0428 19:48:38.597801 26532 net.cpp:200] conv0 needs backward computation.
I0428 19:48:38.597805 26532 net.cpp:202] mnist does not need backward computation.
I0428 19:48:38.597807 26532 net.cpp:244] This network produces output loss
I0428 19:48:38.597816 26532 net.cpp:257] Network initialization done.
I0428 19:48:38.598125 26532 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test550.prototxt
I0428 19:48:38.598150 26532 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:38.598237 26532 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:38.598299 26532 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:38.598345 26532 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:38.598358 26532 net.cpp:86] Creating Layer mnist
I0428 19:48:38.598363 26532 net.cpp:382] mnist -> data
I0428 19:48:38.598371 26532 net.cpp:382] mnist -> label
I0428 19:48:38.598455 26532 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:38.600594 26532 net.cpp:124] Setting up mnist
I0428 19:48:38.600608 26532 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:38.600615 26532 net.cpp:131] Top shape: 100 (100)
I0428 19:48:38.600618 26532 net.cpp:139] Memory required for data: 314000
I0428 19:48:38.600622 26532 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:38.600630 26532 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:38.600633 26532 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:38.600638 26532 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:38.600646 26532 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:38.600762 26532 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:38.600793 26532 net.cpp:131] Top shape: 100 (100)
I0428 19:48:38.600797 26532 net.cpp:131] Top shape: 100 (100)
I0428 19:48:38.600800 26532 net.cpp:139] Memory required for data: 314800
I0428 19:48:38.600803 26532 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:38.600899 26532 net.cpp:86] Creating Layer conv0
I0428 19:48:38.600906 26532 net.cpp:408] conv0 <- data
I0428 19:48:38.600913 26532 net.cpp:382] conv0 -> conv0
I0428 19:48:38.602504 26532 net.cpp:124] Setting up conv0
I0428 19:48:38.602519 26532 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:38.602522 26532 net.cpp:139] Memory required for data: 1466800
I0428 19:48:38.602531 26532 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:38.602538 26532 net.cpp:86] Creating Layer pool0
I0428 19:48:38.602541 26532 net.cpp:408] pool0 <- conv0
I0428 19:48:38.602546 26532 net.cpp:382] pool0 -> pool0
I0428 19:48:38.602612 26532 net.cpp:124] Setting up pool0
I0428 19:48:38.602619 26532 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:38.602623 26532 net.cpp:139] Memory required for data: 1754800
I0428 19:48:38.602627 26532 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:38.602634 26532 net.cpp:86] Creating Layer conv1
I0428 19:48:38.602638 26532 net.cpp:408] conv1 <- pool0
I0428 19:48:38.602643 26532 net.cpp:382] conv1 -> conv1
I0428 19:48:38.604748 26532 net.cpp:124] Setting up conv1
I0428 19:48:38.604760 26532 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:38.604780 26532 net.cpp:139] Memory required for data: 1882800
I0428 19:48:38.604789 26532 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:38.604797 26532 net.cpp:86] Creating Layer pool1
I0428 19:48:38.604800 26532 net.cpp:408] pool1 <- conv1
I0428 19:48:38.604806 26532 net.cpp:382] pool1 -> pool1
I0428 19:48:38.604884 26532 net.cpp:124] Setting up pool1
I0428 19:48:38.604892 26532 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:38.604894 26532 net.cpp:139] Memory required for data: 1914800
I0428 19:48:38.604899 26532 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:38.604905 26532 net.cpp:86] Creating Layer ip1
I0428 19:48:38.604908 26532 net.cpp:408] ip1 <- pool1
I0428 19:48:38.604915 26532 net.cpp:382] ip1 -> ip1
I0428 19:48:38.605022 26532 net.cpp:124] Setting up ip1
I0428 19:48:38.605031 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605036 26532 net.cpp:139] Memory required for data: 1918800
I0428 19:48:38.605042 26532 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:38.605047 26532 net.cpp:86] Creating Layer relu1
I0428 19:48:38.605051 26532 net.cpp:408] relu1 <- ip1
I0428 19:48:38.605057 26532 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:38.605242 26532 net.cpp:124] Setting up relu1
I0428 19:48:38.605252 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605254 26532 net.cpp:139] Memory required for data: 1922800
I0428 19:48:38.605257 26532 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:38.605264 26532 net.cpp:86] Creating Layer ip2
I0428 19:48:38.605268 26532 net.cpp:408] ip2 <- ip1
I0428 19:48:38.605273 26532 net.cpp:382] ip2 -> ip2
I0428 19:48:38.605367 26532 net.cpp:124] Setting up ip2
I0428 19:48:38.605375 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605384 26532 net.cpp:139] Memory required for data: 1926800
I0428 19:48:38.605391 26532 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:38.605394 26532 net.cpp:86] Creating Layer relu2
I0428 19:48:38.605398 26532 net.cpp:408] relu2 <- ip2
I0428 19:48:38.605402 26532 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:38.605552 26532 net.cpp:124] Setting up relu2
I0428 19:48:38.605561 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605564 26532 net.cpp:139] Memory required for data: 1930800
I0428 19:48:38.605567 26532 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:48:38.605572 26532 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:48:38.605576 26532 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:48:38.605581 26532 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:48:38.605597 26532 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:48:38.605631 26532 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:48:38.605638 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605643 26532 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:38.605645 26532 net.cpp:139] Memory required for data: 1938800
I0428 19:48:38.605648 26532 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:38.605653 26532 net.cpp:86] Creating Layer accuracy
I0428 19:48:38.605656 26532 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:48:38.605660 26532 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:38.605664 26532 net.cpp:382] accuracy -> accuracy
I0428 19:48:38.605671 26532 net.cpp:124] Setting up accuracy
I0428 19:48:38.605675 26532 net.cpp:131] Top shape: (1)
I0428 19:48:38.605679 26532 net.cpp:139] Memory required for data: 1938804
I0428 19:48:38.605681 26532 layer_factory.hpp:77] Creating layer loss
I0428 19:48:38.605685 26532 net.cpp:86] Creating Layer loss
I0428 19:48:38.605690 26532 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:48:38.605692 26532 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:38.605696 26532 net.cpp:382] loss -> loss
I0428 19:48:38.605702 26532 layer_factory.hpp:77] Creating layer loss
I0428 19:48:38.606025 26532 net.cpp:124] Setting up loss
I0428 19:48:38.606036 26532 net.cpp:131] Top shape: (1)
I0428 19:48:38.606040 26532 net.cpp:134]     with loss weight 1
I0428 19:48:38.606047 26532 net.cpp:139] Memory required for data: 1938808
I0428 19:48:38.606051 26532 net.cpp:200] loss needs backward computation.
I0428 19:48:38.606055 26532 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:38.606060 26532 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:48:38.606062 26532 net.cpp:200] relu2 needs backward computation.
I0428 19:48:38.606066 26532 net.cpp:200] ip2 needs backward computation.
I0428 19:48:38.606070 26532 net.cpp:200] relu1 needs backward computation.
I0428 19:48:38.606073 26532 net.cpp:200] ip1 needs backward computation.
I0428 19:48:38.606076 26532 net.cpp:200] pool1 needs backward computation.
I0428 19:48:38.606094 26532 net.cpp:200] conv1 needs backward computation.
I0428 19:48:38.606098 26532 net.cpp:200] pool0 needs backward computation.
I0428 19:48:38.606101 26532 net.cpp:200] conv0 needs backward computation.
I0428 19:48:38.606106 26532 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:38.606109 26532 net.cpp:202] mnist does not need backward computation.
I0428 19:48:38.606112 26532 net.cpp:244] This network produces output accuracy
I0428 19:48:38.606117 26532 net.cpp:244] This network produces output loss
I0428 19:48:38.606127 26532 net.cpp:257] Network initialization done.
I0428 19:48:38.606166 26532 solver.cpp:56] Solver scaffolding done.
I0428 19:48:38.606443 26532 caffe.cpp:248] Starting Optimization
I0428 19:48:38.606449 26532 solver.cpp:273] Solving LeNet
I0428 19:48:38.606452 26532 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:38.607213 26532 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:38.610759 26532 blocking_queue.cpp:49] Waiting for data
I0428 19:48:38.681149 26539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:38.681682 26532 solver.cpp:398]     Test net output #0: accuracy = 0.0646
I0428 19:48:38.681716 26532 solver.cpp:398]     Test net output #1: loss = 2.36833 (* 1 = 2.36833 loss)
I0428 19:48:38.683527 26532 solver.cpp:219] Iteration 0 (-1.60585e-31 iter/s, 0.0770499s/100 iters), loss = 2.39382
I0428 19:48:38.683565 26532 solver.cpp:238]     Train net output #0: loss = 2.39382 (* 1 = 2.39382 loss)
I0428 19:48:38.683593 26532 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:38.758071 26532 solver.cpp:219] Iteration 100 (1342.32 iter/s, 0.0744976s/100 iters), loss = 1.07135
I0428 19:48:38.758112 26532 solver.cpp:238]     Train net output #0: loss = 1.07135 (* 1 = 1.07135 loss)
I0428 19:48:38.758118 26532 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:38.835381 26532 solver.cpp:219] Iteration 200 (1294.06 iter/s, 0.0772762s/100 iters), loss = 0.583419
I0428 19:48:38.835433 26532 solver.cpp:238]     Train net output #0: loss = 0.583419 (* 1 = 0.583419 loss)
I0428 19:48:38.835439 26532 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:38.899618 26532 solver.cpp:219] Iteration 300 (1557.83 iter/s, 0.0641917s/100 iters), loss = 0.607058
I0428 19:48:38.899658 26532 solver.cpp:238]     Train net output #0: loss = 0.607058 (* 1 = 0.607058 loss)
I0428 19:48:38.899664 26532 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:38.970046 26532 solver.cpp:219] Iteration 400 (1420.58 iter/s, 0.0703939s/100 iters), loss = 0.358001
I0428 19:48:38.970072 26532 solver.cpp:238]     Train net output #0: loss = 0.358001 (* 1 = 0.358001 loss)
I0428 19:48:38.970077 26532 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:39.035033 26532 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:39.110158 26539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:39.110646 26532 solver.cpp:398]     Test net output #0: accuracy = 0.9199
I0428 19:48:39.110664 26532 solver.cpp:398]     Test net output #1: loss = 0.253636 (* 1 = 0.253636 loss)
I0428 19:48:39.111431 26532 solver.cpp:219] Iteration 500 (707.474 iter/s, 0.141348s/100 iters), loss = 0.130495
I0428 19:48:39.111469 26532 solver.cpp:238]     Train net output #0: loss = 0.130495 (* 1 = 0.130495 loss)
I0428 19:48:39.111490 26532 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:39.188751 26532 solver.cpp:219] Iteration 600 (1294.11 iter/s, 0.0772731s/100 iters), loss = 0.191953
I0428 19:48:39.188789 26532 solver.cpp:238]     Train net output #0: loss = 0.191953 (* 1 = 0.191953 loss)
I0428 19:48:39.188794 26532 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:39.252894 26532 solver.cpp:219] Iteration 700 (1559.76 iter/s, 0.0641125s/100 iters), loss = 0.160842
I0428 19:48:39.252933 26532 solver.cpp:238]     Train net output #0: loss = 0.160842 (* 1 = 0.160842 loss)
I0428 19:48:39.252938 26532 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:39.316184 26532 solver.cpp:219] Iteration 800 (1580.81 iter/s, 0.0632586s/100 iters), loss = 0.361011
I0428 19:48:39.316221 26532 solver.cpp:238]     Train net output #0: loss = 0.361011 (* 1 = 0.361011 loss)
I0428 19:48:39.316227 26532 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:39.384455 26532 solver.cpp:219] Iteration 900 (1465.43 iter/s, 0.0682394s/100 iters), loss = 0.334294
I0428 19:48:39.384495 26532 solver.cpp:238]     Train net output #0: loss = 0.334294 (* 1 = 0.334294 loss)
I0428 19:48:39.384502 26532 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:39.410550 26538 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:39.453552 26532 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:39.454149 26532 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:39.454576 26532 solver.cpp:311] Iteration 1000, loss = 0.177963
I0428 19:48:39.454604 26532 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:39.514742 26539 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:39.515228 26532 solver.cpp:398]     Test net output #0: accuracy = 0.95
I0428 19:48:39.515261 26532 solver.cpp:398]     Test net output #1: loss = 0.167998 (* 1 = 0.167998 loss)
I0428 19:48:39.515266 26532 solver.cpp:316] Optimization Done.
I0428 19:48:39.515269 26532 caffe.cpp:259] Optimization Done.
