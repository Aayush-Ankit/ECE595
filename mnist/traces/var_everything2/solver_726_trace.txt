I0428 19:55:09.171171 28128 caffe.cpp:218] Using GPUs 0
I0428 19:55:09.205710 28128 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:09.649080 28128 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test726.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:09.649242 28128 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test726.prototxt
I0428 19:55:09.649595 28128 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:09.649626 28128 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:09.649716 28128 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:09.649773 28128 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:09.649853 28128 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:09.649871 28128 net.cpp:86] Creating Layer mnist
I0428 19:55:09.649878 28128 net.cpp:382] mnist -> data
I0428 19:55:09.649895 28128 net.cpp:382] mnist -> label
I0428 19:55:09.650784 28128 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:09.652946 28128 net.cpp:124] Setting up mnist
I0428 19:55:09.652961 28128 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:09.652966 28128 net.cpp:131] Top shape: 64 (64)
I0428 19:55:09.652969 28128 net.cpp:139] Memory required for data: 200960
I0428 19:55:09.652989 28128 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:09.653002 28128 net.cpp:86] Creating Layer conv0
I0428 19:55:09.653020 28128 net.cpp:408] conv0 <- data
I0428 19:55:09.653029 28128 net.cpp:382] conv0 -> conv0
I0428 19:55:09.879441 28128 net.cpp:124] Setting up conv0
I0428 19:55:09.879467 28128 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:09.879470 28128 net.cpp:139] Memory required for data: 938240
I0428 19:55:09.879484 28128 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:09.879497 28128 net.cpp:86] Creating Layer pool0
I0428 19:55:09.879500 28128 net.cpp:408] pool0 <- conv0
I0428 19:55:09.879505 28128 net.cpp:382] pool0 -> pool0
I0428 19:55:09.879562 28128 net.cpp:124] Setting up pool0
I0428 19:55:09.879567 28128 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:09.879570 28128 net.cpp:139] Memory required for data: 1122560
I0428 19:55:09.879573 28128 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:09.879583 28128 net.cpp:86] Creating Layer conv1
I0428 19:55:09.879595 28128 net.cpp:408] conv1 <- pool0
I0428 19:55:09.879600 28128 net.cpp:382] conv1 -> conv1
I0428 19:55:09.882328 28128 net.cpp:124] Setting up conv1
I0428 19:55:09.882359 28128 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:09.882364 28128 net.cpp:139] Memory required for data: 2760960
I0428 19:55:09.882372 28128 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:09.882395 28128 net.cpp:86] Creating Layer pool1
I0428 19:55:09.882398 28128 net.cpp:408] pool1 <- conv1
I0428 19:55:09.882403 28128 net.cpp:382] pool1 -> pool1
I0428 19:55:09.882454 28128 net.cpp:124] Setting up pool1
I0428 19:55:09.882460 28128 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:09.882462 28128 net.cpp:139] Memory required for data: 3170560
I0428 19:55:09.882467 28128 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:09.882472 28128 net.cpp:86] Creating Layer ip1
I0428 19:55:09.882475 28128 net.cpp:408] ip1 <- pool1
I0428 19:55:09.882480 28128 net.cpp:382] ip1 -> ip1
I0428 19:55:09.882824 28128 net.cpp:124] Setting up ip1
I0428 19:55:09.882832 28128 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:09.882850 28128 net.cpp:139] Memory required for data: 3176960
I0428 19:55:09.882858 28128 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:09.882863 28128 net.cpp:86] Creating Layer relu1
I0428 19:55:09.882865 28128 net.cpp:408] relu1 <- ip1
I0428 19:55:09.882869 28128 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:09.883047 28128 net.cpp:124] Setting up relu1
I0428 19:55:09.883056 28128 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:09.883059 28128 net.cpp:139] Memory required for data: 3183360
I0428 19:55:09.883062 28128 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:09.883069 28128 net.cpp:86] Creating Layer ip2
I0428 19:55:09.883072 28128 net.cpp:408] ip2 <- ip1
I0428 19:55:09.883077 28128 net.cpp:382] ip2 -> ip2
I0428 19:55:09.883172 28128 net.cpp:124] Setting up ip2
I0428 19:55:09.883179 28128 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:09.883183 28128 net.cpp:139] Memory required for data: 3189760
I0428 19:55:09.883188 28128 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:09.883193 28128 net.cpp:86] Creating Layer relu2
I0428 19:55:09.883196 28128 net.cpp:408] relu2 <- ip2
I0428 19:55:09.883200 28128 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:09.883920 28128 net.cpp:124] Setting up relu2
I0428 19:55:09.883932 28128 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:09.883951 28128 net.cpp:139] Memory required for data: 3196160
I0428 19:55:09.883955 28128 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:09.883961 28128 net.cpp:86] Creating Layer ip3
I0428 19:55:09.883965 28128 net.cpp:408] ip3 <- ip2
I0428 19:55:09.883970 28128 net.cpp:382] ip3 -> ip3
I0428 19:55:09.884065 28128 net.cpp:124] Setting up ip3
I0428 19:55:09.884073 28128 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:09.884075 28128 net.cpp:139] Memory required for data: 3198720
I0428 19:55:09.884083 28128 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:09.884088 28128 net.cpp:86] Creating Layer relu3
I0428 19:55:09.884090 28128 net.cpp:408] relu3 <- ip3
I0428 19:55:09.884094 28128 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:09.884255 28128 net.cpp:124] Setting up relu3
I0428 19:55:09.884263 28128 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:09.884268 28128 net.cpp:139] Memory required for data: 3201280
I0428 19:55:09.884270 28128 layer_factory.hpp:77] Creating layer loss
I0428 19:55:09.884275 28128 net.cpp:86] Creating Layer loss
I0428 19:55:09.884279 28128 net.cpp:408] loss <- ip3
I0428 19:55:09.884282 28128 net.cpp:408] loss <- label
I0428 19:55:09.884287 28128 net.cpp:382] loss -> loss
I0428 19:55:09.884305 28128 layer_factory.hpp:77] Creating layer loss
I0428 19:55:09.884521 28128 net.cpp:124] Setting up loss
I0428 19:55:09.884528 28128 net.cpp:131] Top shape: (1)
I0428 19:55:09.884532 28128 net.cpp:134]     with loss weight 1
I0428 19:55:09.884551 28128 net.cpp:139] Memory required for data: 3201284
I0428 19:55:09.884553 28128 net.cpp:200] loss needs backward computation.
I0428 19:55:09.884557 28128 net.cpp:200] relu3 needs backward computation.
I0428 19:55:09.884559 28128 net.cpp:200] ip3 needs backward computation.
I0428 19:55:09.884562 28128 net.cpp:200] relu2 needs backward computation.
I0428 19:55:09.884565 28128 net.cpp:200] ip2 needs backward computation.
I0428 19:55:09.884568 28128 net.cpp:200] relu1 needs backward computation.
I0428 19:55:09.884572 28128 net.cpp:200] ip1 needs backward computation.
I0428 19:55:09.884574 28128 net.cpp:200] pool1 needs backward computation.
I0428 19:55:09.884577 28128 net.cpp:200] conv1 needs backward computation.
I0428 19:55:09.884580 28128 net.cpp:200] pool0 needs backward computation.
I0428 19:55:09.884583 28128 net.cpp:200] conv0 needs backward computation.
I0428 19:55:09.884587 28128 net.cpp:202] mnist does not need backward computation.
I0428 19:55:09.884589 28128 net.cpp:244] This network produces output loss
I0428 19:55:09.884598 28128 net.cpp:257] Network initialization done.
I0428 19:55:09.884989 28128 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test726.prototxt
I0428 19:55:09.885046 28128 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:09.885140 28128 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:09.885262 28128 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:09.885304 28128 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:09.885318 28128 net.cpp:86] Creating Layer mnist
I0428 19:55:09.885321 28128 net.cpp:382] mnist -> data
I0428 19:55:09.885329 28128 net.cpp:382] mnist -> label
I0428 19:55:09.885432 28128 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:09.887416 28128 net.cpp:124] Setting up mnist
I0428 19:55:09.887445 28128 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:09.887450 28128 net.cpp:131] Top shape: 100 (100)
I0428 19:55:09.887454 28128 net.cpp:139] Memory required for data: 314000
I0428 19:55:09.887459 28128 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:09.887495 28128 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:09.887498 28128 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:09.887503 28128 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:09.887511 28128 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:09.887552 28128 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:09.887557 28128 net.cpp:131] Top shape: 100 (100)
I0428 19:55:09.887562 28128 net.cpp:131] Top shape: 100 (100)
I0428 19:55:09.887563 28128 net.cpp:139] Memory required for data: 314800
I0428 19:55:09.887567 28128 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:09.887574 28128 net.cpp:86] Creating Layer conv0
I0428 19:55:09.887578 28128 net.cpp:408] conv0 <- data
I0428 19:55:09.887583 28128 net.cpp:382] conv0 -> conv0
I0428 19:55:09.889412 28128 net.cpp:124] Setting up conv0
I0428 19:55:09.889437 28128 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:09.889441 28128 net.cpp:139] Memory required for data: 1466800
I0428 19:55:09.889448 28128 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:09.889456 28128 net.cpp:86] Creating Layer pool0
I0428 19:55:09.889458 28128 net.cpp:408] pool0 <- conv0
I0428 19:55:09.889462 28128 net.cpp:382] pool0 -> pool0
I0428 19:55:09.889499 28128 net.cpp:124] Setting up pool0
I0428 19:55:09.889503 28128 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:09.889506 28128 net.cpp:139] Memory required for data: 1754800
I0428 19:55:09.889508 28128 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:09.889518 28128 net.cpp:86] Creating Layer conv1
I0428 19:55:09.889520 28128 net.cpp:408] conv1 <- pool0
I0428 19:55:09.889525 28128 net.cpp:382] conv1 -> conv1
I0428 19:55:09.891115 28128 net.cpp:124] Setting up conv1
I0428 19:55:09.891129 28128 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:09.891134 28128 net.cpp:139] Memory required for data: 4314800
I0428 19:55:09.891140 28128 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:09.891146 28128 net.cpp:86] Creating Layer pool1
I0428 19:55:09.891150 28128 net.cpp:408] pool1 <- conv1
I0428 19:55:09.891155 28128 net.cpp:382] pool1 -> pool1
I0428 19:55:09.891191 28128 net.cpp:124] Setting up pool1
I0428 19:55:09.891196 28128 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:09.891206 28128 net.cpp:139] Memory required for data: 4954800
I0428 19:55:09.891209 28128 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:09.891222 28128 net.cpp:86] Creating Layer ip1
I0428 19:55:09.891224 28128 net.cpp:408] ip1 <- pool1
I0428 19:55:09.891233 28128 net.cpp:382] ip1 -> ip1
I0428 19:55:09.891564 28128 net.cpp:124] Setting up ip1
I0428 19:55:09.891571 28128 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:09.891583 28128 net.cpp:139] Memory required for data: 4964800
I0428 19:55:09.891592 28128 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:09.891597 28128 net.cpp:86] Creating Layer relu1
I0428 19:55:09.891599 28128 net.cpp:408] relu1 <- ip1
I0428 19:55:09.891603 28128 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:09.891846 28128 net.cpp:124] Setting up relu1
I0428 19:55:09.891855 28128 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:09.891858 28128 net.cpp:139] Memory required for data: 4974800
I0428 19:55:09.891861 28128 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:09.891867 28128 net.cpp:86] Creating Layer ip2
I0428 19:55:09.891870 28128 net.cpp:408] ip2 <- ip1
I0428 19:55:09.891876 28128 net.cpp:382] ip2 -> ip2
I0428 19:55:09.891975 28128 net.cpp:124] Setting up ip2
I0428 19:55:09.891981 28128 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:09.891984 28128 net.cpp:139] Memory required for data: 4984800
I0428 19:55:09.891989 28128 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:09.892000 28128 net.cpp:86] Creating Layer relu2
I0428 19:55:09.892009 28128 net.cpp:408] relu2 <- ip2
I0428 19:55:09.892012 28128 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:09.892170 28128 net.cpp:124] Setting up relu2
I0428 19:55:09.892179 28128 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:09.892182 28128 net.cpp:139] Memory required for data: 4994800
I0428 19:55:09.892186 28128 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:09.892192 28128 net.cpp:86] Creating Layer ip3
I0428 19:55:09.892195 28128 net.cpp:408] ip3 <- ip2
I0428 19:55:09.892201 28128 net.cpp:382] ip3 -> ip3
I0428 19:55:09.892302 28128 net.cpp:124] Setting up ip3
I0428 19:55:09.892307 28128 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:09.892309 28128 net.cpp:139] Memory required for data: 4998800
I0428 19:55:09.892316 28128 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:09.892328 28128 net.cpp:86] Creating Layer relu3
I0428 19:55:09.892329 28128 net.cpp:408] relu3 <- ip3
I0428 19:55:09.892334 28128 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:09.893172 28128 net.cpp:124] Setting up relu3
I0428 19:55:09.893183 28128 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:09.893187 28128 net.cpp:139] Memory required for data: 5002800
I0428 19:55:09.893190 28128 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:09.893210 28128 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:09.893213 28128 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:09.893219 28128 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:09.893224 28128 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:09.893267 28128 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:09.893275 28128 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:09.893277 28128 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:09.893280 28128 net.cpp:139] Memory required for data: 5010800
I0428 19:55:09.893283 28128 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:09.893288 28128 net.cpp:86] Creating Layer accuracy
I0428 19:55:09.893291 28128 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:09.893301 28128 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:09.893306 28128 net.cpp:382] accuracy -> accuracy
I0428 19:55:09.893312 28128 net.cpp:124] Setting up accuracy
I0428 19:55:09.893316 28128 net.cpp:131] Top shape: (1)
I0428 19:55:09.893319 28128 net.cpp:139] Memory required for data: 5010804
I0428 19:55:09.893327 28128 layer_factory.hpp:77] Creating layer loss
I0428 19:55:09.893332 28128 net.cpp:86] Creating Layer loss
I0428 19:55:09.893335 28128 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:09.893339 28128 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:09.893343 28128 net.cpp:382] loss -> loss
I0428 19:55:09.893348 28128 layer_factory.hpp:77] Creating layer loss
I0428 19:55:09.893573 28128 net.cpp:124] Setting up loss
I0428 19:55:09.893580 28128 net.cpp:131] Top shape: (1)
I0428 19:55:09.893584 28128 net.cpp:134]     with loss weight 1
I0428 19:55:09.893600 28128 net.cpp:139] Memory required for data: 5010808
I0428 19:55:09.893604 28128 net.cpp:200] loss needs backward computation.
I0428 19:55:09.893607 28128 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:09.893611 28128 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:09.893615 28128 net.cpp:200] relu3 needs backward computation.
I0428 19:55:09.893616 28128 net.cpp:200] ip3 needs backward computation.
I0428 19:55:09.893620 28128 net.cpp:200] relu2 needs backward computation.
I0428 19:55:09.893621 28128 net.cpp:200] ip2 needs backward computation.
I0428 19:55:09.893625 28128 net.cpp:200] relu1 needs backward computation.
I0428 19:55:09.893635 28128 net.cpp:200] ip1 needs backward computation.
I0428 19:55:09.893636 28128 net.cpp:200] pool1 needs backward computation.
I0428 19:55:09.893641 28128 net.cpp:200] conv1 needs backward computation.
I0428 19:55:09.893645 28128 net.cpp:200] pool0 needs backward computation.
I0428 19:55:09.893647 28128 net.cpp:200] conv0 needs backward computation.
I0428 19:55:09.893651 28128 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:09.893653 28128 net.cpp:202] mnist does not need backward computation.
I0428 19:55:09.893656 28128 net.cpp:244] This network produces output accuracy
I0428 19:55:09.893659 28128 net.cpp:244] This network produces output loss
I0428 19:55:09.893671 28128 net.cpp:257] Network initialization done.
I0428 19:55:09.893719 28128 solver.cpp:56] Solver scaffolding done.
I0428 19:55:09.894032 28128 caffe.cpp:248] Starting Optimization
I0428 19:55:09.894037 28128 solver.cpp:273] Solving LeNet
I0428 19:55:09.894040 28128 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:09.894922 28128 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:09.900027 28128 blocking_queue.cpp:49] Waiting for data
I0428 19:55:09.958353 28135 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:09.958967 28128 solver.cpp:398]     Test net output #0: accuracy = 0.1466
I0428 19:55:09.958984 28128 solver.cpp:398]     Test net output #1: loss = 2.2917 (* 1 = 2.2917 loss)
I0428 19:55:09.962791 28128 solver.cpp:219] Iteration 0 (0 iter/s, 0.0687167s/100 iters), loss = 2.27831
I0428 19:55:09.962827 28128 solver.cpp:238]     Train net output #0: loss = 2.27831 (* 1 = 2.27831 loss)
I0428 19:55:09.962853 28128 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:10.108834 28128 solver.cpp:219] Iteration 100 (685.033 iter/s, 0.145978s/100 iters), loss = 0.876778
I0428 19:55:10.108860 28128 solver.cpp:238]     Train net output #0: loss = 0.876778 (* 1 = 0.876778 loss)
I0428 19:55:10.108867 28128 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:10.259429 28128 solver.cpp:219] Iteration 200 (664.203 iter/s, 0.150556s/100 iters), loss = 0.46149
I0428 19:55:10.259454 28128 solver.cpp:238]     Train net output #0: loss = 0.46149 (* 1 = 0.46149 loss)
I0428 19:55:10.259475 28128 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:10.404036 28128 solver.cpp:219] Iteration 300 (691.719 iter/s, 0.144567s/100 iters), loss = 0.620426
I0428 19:55:10.404062 28128 solver.cpp:238]     Train net output #0: loss = 0.620426 (* 1 = 0.620426 loss)
I0428 19:55:10.404067 28128 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:10.547668 28128 solver.cpp:219] Iteration 400 (696.405 iter/s, 0.143595s/100 iters), loss = 0.401077
I0428 19:55:10.547693 28128 solver.cpp:238]     Train net output #0: loss = 0.401077 (* 1 = 0.401077 loss)
I0428 19:55:10.547699 28128 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:10.692283 28128 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:10.745406 28135 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:10.747200 28128 solver.cpp:398]     Test net output #0: accuracy = 0.8658
I0428 19:55:10.747220 28128 solver.cpp:398]     Test net output #1: loss = 0.360588 (* 1 = 0.360588 loss)
I0428 19:55:10.748744 28128 solver.cpp:219] Iteration 500 (497.421 iter/s, 0.201037s/100 iters), loss = 0.291269
I0428 19:55:10.748765 28128 solver.cpp:238]     Train net output #0: loss = 0.291269 (* 1 = 0.291269 loss)
I0428 19:55:10.748801 28128 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:10.901191 28128 solver.cpp:219] Iteration 600 (656.12 iter/s, 0.152411s/100 iters), loss = 0.223207
I0428 19:55:10.901216 28128 solver.cpp:238]     Train net output #0: loss = 0.223207 (* 1 = 0.223207 loss)
I0428 19:55:10.901222 28128 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:11.046692 28128 solver.cpp:219] Iteration 700 (687.454 iter/s, 0.145464s/100 iters), loss = 0.241176
I0428 19:55:11.046718 28128 solver.cpp:238]     Train net output #0: loss = 0.241176 (* 1 = 0.241176 loss)
I0428 19:55:11.046725 28128 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:11.195297 28128 solver.cpp:219] Iteration 800 (673.102 iter/s, 0.148566s/100 iters), loss = 0.498955
I0428 19:55:11.195322 28128 solver.cpp:238]     Train net output #0: loss = 0.498955 (* 1 = 0.498955 loss)
I0428 19:55:11.195329 28128 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:11.341977 28128 solver.cpp:219] Iteration 900 (681.933 iter/s, 0.146642s/100 iters), loss = 0.354744
I0428 19:55:11.342001 28128 solver.cpp:238]     Train net output #0: loss = 0.354744 (* 1 = 0.354744 loss)
I0428 19:55:11.342008 28128 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:11.391760 28134 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:11.486968 28128 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:11.489084 28128 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:11.490016 28128 solver.cpp:311] Iteration 1000, loss = 0.152288
I0428 19:55:11.490032 28128 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:11.552610 28135 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:11.553208 28128 solver.cpp:398]     Test net output #0: accuracy = 0.9718
I0428 19:55:11.553228 28128 solver.cpp:398]     Test net output #1: loss = 0.094849 (* 1 = 0.094849 loss)
I0428 19:55:11.553233 28128 solver.cpp:316] Optimization Done.
I0428 19:55:11.553236 28128 caffe.cpp:259] Optimization Done.
