I0428 20:05:59.254818 30767 caffe.cpp:218] Using GPUs 0
I0428 20:05:59.291577 30767 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:59.745900 30767 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1015.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:59.746042 30767 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1015.prototxt
I0428 20:05:59.746306 30767 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:59.746318 30767 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:59.746397 30767 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:05:59.746449 30767 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:59.746531 30767 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:59.746552 30767 net.cpp:86] Creating Layer mnist
I0428 20:05:59.746561 30767 net.cpp:382] mnist -> data
I0428 20:05:59.746579 30767 net.cpp:382] mnist -> label
I0428 20:05:59.747576 30767 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:59.749800 30767 net.cpp:124] Setting up mnist
I0428 20:05:59.749831 30767 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:59.749852 30767 net.cpp:131] Top shape: 64 (64)
I0428 20:05:59.749856 30767 net.cpp:139] Memory required for data: 200960
I0428 20:05:59.749862 30767 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:59.749876 30767 net.cpp:86] Creating Layer conv0
I0428 20:05:59.749881 30767 net.cpp:408] conv0 <- data
I0428 20:05:59.749891 30767 net.cpp:382] conv0 -> conv0
I0428 20:05:59.980443 30767 net.cpp:124] Setting up conv0
I0428 20:05:59.980469 30767 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:59.980473 30767 net.cpp:139] Memory required for data: 3887360
I0428 20:05:59.980489 30767 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:59.980502 30767 net.cpp:86] Creating Layer pool0
I0428 20:05:59.980506 30767 net.cpp:408] pool0 <- conv0
I0428 20:05:59.980511 30767 net.cpp:382] pool0 -> pool0
I0428 20:05:59.980587 30767 net.cpp:124] Setting up pool0
I0428 20:05:59.980593 30767 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:59.980620 30767 net.cpp:139] Memory required for data: 4808960
I0428 20:05:59.980623 30767 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:59.980633 30767 net.cpp:86] Creating Layer conv1
I0428 20:05:59.980636 30767 net.cpp:408] conv1 <- pool0
I0428 20:05:59.980643 30767 net.cpp:382] conv1 -> conv1
I0428 20:05:59.983470 30767 net.cpp:124] Setting up conv1
I0428 20:05:59.983500 30767 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:05:59.983505 30767 net.cpp:139] Memory required for data: 4890880
I0428 20:05:59.983512 30767 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:59.983520 30767 net.cpp:86] Creating Layer pool1
I0428 20:05:59.983523 30767 net.cpp:408] pool1 <- conv1
I0428 20:05:59.983528 30767 net.cpp:382] pool1 -> pool1
I0428 20:05:59.983593 30767 net.cpp:124] Setting up pool1
I0428 20:05:59.983598 30767 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:05:59.983602 30767 net.cpp:139] Memory required for data: 4911360
I0428 20:05:59.983604 30767 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:59.983610 30767 net.cpp:86] Creating Layer ip1
I0428 20:05:59.983613 30767 net.cpp:408] ip1 <- pool1
I0428 20:05:59.983618 30767 net.cpp:382] ip1 -> ip1
I0428 20:05:59.983716 30767 net.cpp:124] Setting up ip1
I0428 20:05:59.983722 30767 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:59.983726 30767 net.cpp:139] Memory required for data: 4913920
I0428 20:05:59.983732 30767 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:59.983738 30767 net.cpp:86] Creating Layer relu1
I0428 20:05:59.983741 30767 net.cpp:408] relu1 <- ip1
I0428 20:05:59.983745 30767 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:59.983922 30767 net.cpp:124] Setting up relu1
I0428 20:05:59.983932 30767 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:59.983934 30767 net.cpp:139] Memory required for data: 4916480
I0428 20:05:59.983937 30767 layer_factory.hpp:77] Creating layer loss
I0428 20:05:59.983942 30767 net.cpp:86] Creating Layer loss
I0428 20:05:59.983945 30767 net.cpp:408] loss <- ip1
I0428 20:05:59.983949 30767 net.cpp:408] loss <- label
I0428 20:05:59.983954 30767 net.cpp:382] loss -> loss
I0428 20:05:59.983968 30767 layer_factory.hpp:77] Creating layer loss
I0428 20:05:59.984838 30767 net.cpp:124] Setting up loss
I0428 20:05:59.984865 30767 net.cpp:131] Top shape: (1)
I0428 20:05:59.984869 30767 net.cpp:134]     with loss weight 1
I0428 20:05:59.984882 30767 net.cpp:139] Memory required for data: 4916484
I0428 20:05:59.984902 30767 net.cpp:200] loss needs backward computation.
I0428 20:05:59.984907 30767 net.cpp:200] relu1 needs backward computation.
I0428 20:05:59.984910 30767 net.cpp:200] ip1 needs backward computation.
I0428 20:05:59.984913 30767 net.cpp:200] pool1 needs backward computation.
I0428 20:05:59.984916 30767 net.cpp:200] conv1 needs backward computation.
I0428 20:05:59.984920 30767 net.cpp:200] pool0 needs backward computation.
I0428 20:05:59.984923 30767 net.cpp:200] conv0 needs backward computation.
I0428 20:05:59.984927 30767 net.cpp:202] mnist does not need backward computation.
I0428 20:05:59.984930 30767 net.cpp:244] This network produces output loss
I0428 20:05:59.984938 30767 net.cpp:257] Network initialization done.
I0428 20:05:59.985234 30767 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1015.prototxt
I0428 20:05:59.985258 30767 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:59.985360 30767 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:05:59.985426 30767 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:59.985468 30767 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:59.985481 30767 net.cpp:86] Creating Layer mnist
I0428 20:05:59.985484 30767 net.cpp:382] mnist -> data
I0428 20:05:59.985491 30767 net.cpp:382] mnist -> label
I0428 20:05:59.985570 30767 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:59.987803 30767 net.cpp:124] Setting up mnist
I0428 20:05:59.987833 30767 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:59.987838 30767 net.cpp:131] Top shape: 100 (100)
I0428 20:05:59.987840 30767 net.cpp:139] Memory required for data: 314000
I0428 20:05:59.987844 30767 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:59.987850 30767 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:59.987854 30767 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:59.987859 30767 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:59.987864 30767 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:59.987962 30767 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:59.987970 30767 net.cpp:131] Top shape: 100 (100)
I0428 20:05:59.987974 30767 net.cpp:131] Top shape: 100 (100)
I0428 20:05:59.987977 30767 net.cpp:139] Memory required for data: 314800
I0428 20:05:59.987979 30767 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:59.987987 30767 net.cpp:86] Creating Layer conv0
I0428 20:05:59.987990 30767 net.cpp:408] conv0 <- data
I0428 20:05:59.987995 30767 net.cpp:382] conv0 -> conv0
I0428 20:05:59.988726 30767 net.cpp:124] Setting up conv0
I0428 20:05:59.988737 30767 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:59.988756 30767 net.cpp:139] Memory required for data: 6074800
I0428 20:05:59.988765 30767 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:59.988770 30767 net.cpp:86] Creating Layer pool0
I0428 20:05:59.988773 30767 net.cpp:408] pool0 <- conv0
I0428 20:05:59.988777 30767 net.cpp:382] pool0 -> pool0
I0428 20:05:59.988831 30767 net.cpp:124] Setting up pool0
I0428 20:05:59.988837 30767 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:59.988840 30767 net.cpp:139] Memory required for data: 7514800
I0428 20:05:59.988843 30767 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:59.988850 30767 net.cpp:86] Creating Layer conv1
I0428 20:05:59.988853 30767 net.cpp:408] conv1 <- pool0
I0428 20:05:59.988858 30767 net.cpp:382] conv1 -> conv1
I0428 20:05:59.991039 30767 net.cpp:124] Setting up conv1
I0428 20:05:59.991065 30767 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:05:59.991070 30767 net.cpp:139] Memory required for data: 7642800
I0428 20:05:59.991077 30767 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:59.991083 30767 net.cpp:86] Creating Layer pool1
I0428 20:05:59.991096 30767 net.cpp:408] pool1 <- conv1
I0428 20:05:59.991101 30767 net.cpp:382] pool1 -> pool1
I0428 20:05:59.991163 30767 net.cpp:124] Setting up pool1
I0428 20:05:59.991178 30767 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:05:59.991180 30767 net.cpp:139] Memory required for data: 7674800
I0428 20:05:59.991183 30767 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:59.991189 30767 net.cpp:86] Creating Layer ip1
I0428 20:05:59.991191 30767 net.cpp:408] ip1 <- pool1
I0428 20:05:59.991196 30767 net.cpp:382] ip1 -> ip1
I0428 20:05:59.991319 30767 net.cpp:124] Setting up ip1
I0428 20:05:59.991327 30767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:59.991329 30767 net.cpp:139] Memory required for data: 7678800
I0428 20:05:59.991341 30767 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:59.991346 30767 net.cpp:86] Creating Layer relu1
I0428 20:05:59.991349 30767 net.cpp:408] relu1 <- ip1
I0428 20:05:59.991354 30767 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:59.992153 30767 net.cpp:124] Setting up relu1
I0428 20:05:59.992164 30767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:59.992183 30767 net.cpp:139] Memory required for data: 7682800
I0428 20:05:59.992187 30767 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:05:59.992194 30767 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:05:59.992197 30767 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:05:59.992204 30767 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:05:59.992210 30767 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:05:59.992262 30767 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:05:59.992269 30767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:59.992272 30767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:59.992275 30767 net.cpp:139] Memory required for data: 7690800
I0428 20:05:59.992278 30767 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:59.992283 30767 net.cpp:86] Creating Layer accuracy
I0428 20:05:59.992286 30767 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:05:59.992290 30767 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:59.992295 30767 net.cpp:382] accuracy -> accuracy
I0428 20:05:59.992301 30767 net.cpp:124] Setting up accuracy
I0428 20:05:59.992306 30767 net.cpp:131] Top shape: (1)
I0428 20:05:59.992310 30767 net.cpp:139] Memory required for data: 7690804
I0428 20:05:59.992312 30767 layer_factory.hpp:77] Creating layer loss
I0428 20:05:59.992316 30767 net.cpp:86] Creating Layer loss
I0428 20:05:59.992319 30767 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:05:59.992323 30767 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:59.992327 30767 net.cpp:382] loss -> loss
I0428 20:05:59.992334 30767 layer_factory.hpp:77] Creating layer loss
I0428 20:05:59.992585 30767 net.cpp:124] Setting up loss
I0428 20:05:59.992594 30767 net.cpp:131] Top shape: (1)
I0428 20:05:59.992599 30767 net.cpp:134]     with loss weight 1
I0428 20:05:59.992605 30767 net.cpp:139] Memory required for data: 7690808
I0428 20:05:59.992609 30767 net.cpp:200] loss needs backward computation.
I0428 20:05:59.992614 30767 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:59.992617 30767 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:05:59.992622 30767 net.cpp:200] relu1 needs backward computation.
I0428 20:05:59.992625 30767 net.cpp:200] ip1 needs backward computation.
I0428 20:05:59.992635 30767 net.cpp:200] pool1 needs backward computation.
I0428 20:05:59.992638 30767 net.cpp:200] conv1 needs backward computation.
I0428 20:05:59.992643 30767 net.cpp:200] pool0 needs backward computation.
I0428 20:05:59.992646 30767 net.cpp:200] conv0 needs backward computation.
I0428 20:05:59.992655 30767 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:59.992660 30767 net.cpp:202] mnist does not need backward computation.
I0428 20:05:59.992662 30767 net.cpp:244] This network produces output accuracy
I0428 20:05:59.992666 30767 net.cpp:244] This network produces output loss
I0428 20:05:59.992684 30767 net.cpp:257] Network initialization done.
I0428 20:05:59.992717 30767 solver.cpp:56] Solver scaffolding done.
I0428 20:05:59.992979 30767 caffe.cpp:248] Starting Optimization
I0428 20:05:59.992985 30767 solver.cpp:273] Solving LeNet
I0428 20:05:59.992988 30767 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:59.993754 30767 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:59.998509 30767 blocking_queue.cpp:49] Waiting for data
I0428 20:06:00.070197 30774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:00.070773 30767 solver.cpp:398]     Test net output #0: accuracy = 0.0959
I0428 20:06:00.070811 30767 solver.cpp:398]     Test net output #1: loss = 2.3604 (* 1 = 2.3604 loss)
I0428 20:06:00.074380 30767 solver.cpp:219] Iteration 0 (-2.015e-31 iter/s, 0.0813669s/100 iters), loss = 2.40653
I0428 20:06:00.074416 30767 solver.cpp:238]     Train net output #0: loss = 2.40653 (* 1 = 2.40653 loss)
I0428 20:06:00.074427 30767 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:00.159919 30767 solver.cpp:219] Iteration 100 (1169.49 iter/s, 0.0855071s/100 iters), loss = 0.649395
I0428 20:06:00.159943 30767 solver.cpp:238]     Train net output #0: loss = 0.649395 (* 1 = 0.649395 loss)
I0428 20:06:00.159950 30767 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:00.234400 30767 solver.cpp:219] Iteration 200 (1343.2 iter/s, 0.0744489s/100 iters), loss = 0.83406
I0428 20:06:00.234426 30767 solver.cpp:238]     Train net output #0: loss = 0.83406 (* 1 = 0.83406 loss)
I0428 20:06:00.234448 30767 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:00.317030 30767 solver.cpp:219] Iteration 300 (1210.71 iter/s, 0.0825958s/100 iters), loss = 0.175706
I0428 20:06:00.317055 30767 solver.cpp:238]     Train net output #0: loss = 0.175706 (* 1 = 0.175706 loss)
I0428 20:06:00.317062 30767 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:00.396198 30767 solver.cpp:219] Iteration 400 (1263.69 iter/s, 0.0791335s/100 iters), loss = 0.114616
I0428 20:06:00.396236 30767 solver.cpp:238]     Train net output #0: loss = 0.114616 (* 1 = 0.114616 loss)
I0428 20:06:00.396244 30767 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:00.469826 30767 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:00.545506 30774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:00.546064 30767 solver.cpp:398]     Test net output #0: accuracy = 0.9606
I0428 20:06:00.546105 30767 solver.cpp:398]     Test net output #1: loss = 0.141394 (* 1 = 0.141394 loss)
I0428 20:06:00.546893 30767 solver.cpp:219] Iteration 500 (663.818 iter/s, 0.150644s/100 iters), loss = 0.205184
I0428 20:06:00.546918 30767 solver.cpp:238]     Train net output #0: loss = 0.205184 (* 1 = 0.205184 loss)
I0428 20:06:00.546927 30767 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:00.632968 30767 solver.cpp:219] Iteration 600 (1162.23 iter/s, 0.0860415s/100 iters), loss = 0.130997
I0428 20:06:00.633010 30767 solver.cpp:238]     Train net output #0: loss = 0.130997 (* 1 = 0.130997 loss)
I0428 20:06:00.633016 30767 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:00.707232 30767 solver.cpp:219] Iteration 700 (1347.17 iter/s, 0.0742298s/100 iters), loss = 0.263224
I0428 20:06:00.707273 30767 solver.cpp:238]     Train net output #0: loss = 0.263224 (* 1 = 0.263224 loss)
I0428 20:06:00.707280 30767 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:00.780727 30767 solver.cpp:219] Iteration 800 (1361.27 iter/s, 0.0734607s/100 iters), loss = 0.315363
I0428 20:06:00.780766 30767 solver.cpp:238]     Train net output #0: loss = 0.315363 (* 1 = 0.315363 loss)
I0428 20:06:00.780772 30767 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:00.854864 30767 solver.cpp:219] Iteration 900 (1349.42 iter/s, 0.0741059s/100 iters), loss = 0.170504
I0428 20:06:00.854905 30767 solver.cpp:238]     Train net output #0: loss = 0.170504 (* 1 = 0.170504 loss)
I0428 20:06:00.854912 30767 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:00.879479 30773 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:00.928135 30767 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:00.928799 30767 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:00.929297 30767 solver.cpp:311] Iteration 1000, loss = 0.128706
I0428 20:06:00.929311 30767 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:01.005785 30774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:01.006335 30767 solver.cpp:398]     Test net output #0: accuracy = 0.9674
I0428 20:06:01.006356 30767 solver.cpp:398]     Test net output #1: loss = 0.104977 (* 1 = 0.104977 loss)
I0428 20:06:01.006361 30767 solver.cpp:316] Optimization Done.
I0428 20:06:01.006363 30767 caffe.cpp:259] Optimization Done.
