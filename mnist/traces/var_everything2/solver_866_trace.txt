I0428 20:00:04.347951 29393 caffe.cpp:218] Using GPUs 0
I0428 20:00:04.378255 29393 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:00:04.833693 29393 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test866.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:00:04.834347 29393 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test866.prototxt
I0428 20:00:04.834673 29393 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:00:04.834689 29393 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:00:04.834764 29393 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:00:04.834825 29393 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:04.834908 29393 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:00:04.834930 29393 net.cpp:86] Creating Layer mnist
I0428 20:00:04.834939 29393 net.cpp:382] mnist -> data
I0428 20:00:04.834957 29393 net.cpp:382] mnist -> label
I0428 20:00:04.835927 29393 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:00:04.838300 29393 net.cpp:124] Setting up mnist
I0428 20:00:04.838348 29393 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:00:04.838353 29393 net.cpp:131] Top shape: 64 (64)
I0428 20:00:04.838356 29393 net.cpp:139] Memory required for data: 200960
I0428 20:00:04.838379 29393 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:04.838393 29393 net.cpp:86] Creating Layer conv0
I0428 20:00:04.838398 29393 net.cpp:408] conv0 <- data
I0428 20:00:04.838409 29393 net.cpp:382] conv0 -> conv0
I0428 20:00:05.067191 29393 net.cpp:124] Setting up conv0
I0428 20:00:05.067234 29393 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:00:05.067237 29393 net.cpp:139] Memory required for data: 1675520
I0428 20:00:05.067271 29393 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:05.067283 29393 net.cpp:86] Creating Layer pool0
I0428 20:00:05.067287 29393 net.cpp:408] pool0 <- conv0
I0428 20:00:05.067293 29393 net.cpp:382] pool0 -> pool0
I0428 20:00:05.067354 29393 net.cpp:124] Setting up pool0
I0428 20:00:05.067361 29393 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:00:05.067364 29393 net.cpp:139] Memory required for data: 2044160
I0428 20:00:05.067368 29393 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:05.067378 29393 net.cpp:86] Creating Layer conv1
I0428 20:00:05.067384 29393 net.cpp:408] conv1 <- pool0
I0428 20:00:05.067404 29393 net.cpp:382] conv1 -> conv1
I0428 20:00:05.070289 29393 net.cpp:124] Setting up conv1
I0428 20:00:05.070305 29393 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:00:05.070309 29393 net.cpp:139] Memory required for data: 2453760
I0428 20:00:05.070317 29393 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:05.070324 29393 net.cpp:86] Creating Layer pool1
I0428 20:00:05.070327 29393 net.cpp:408] pool1 <- conv1
I0428 20:00:05.070333 29393 net.cpp:382] pool1 -> pool1
I0428 20:00:05.070369 29393 net.cpp:124] Setting up pool1
I0428 20:00:05.070392 29393 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:00:05.070395 29393 net.cpp:139] Memory required for data: 2556160
I0428 20:00:05.070399 29393 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:05.070420 29393 net.cpp:86] Creating Layer ip1
I0428 20:00:05.070422 29393 net.cpp:408] ip1 <- pool1
I0428 20:00:05.070443 29393 net.cpp:382] ip1 -> ip1
I0428 20:00:05.070592 29393 net.cpp:124] Setting up ip1
I0428 20:00:05.070600 29393 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:00:05.070603 29393 net.cpp:139] Memory required for data: 2562560
I0428 20:00:05.070610 29393 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:05.070616 29393 net.cpp:86] Creating Layer relu1
I0428 20:00:05.070618 29393 net.cpp:408] relu1 <- ip1
I0428 20:00:05.070622 29393 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:05.070807 29393 net.cpp:124] Setting up relu1
I0428 20:00:05.070816 29393 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:00:05.070818 29393 net.cpp:139] Memory required for data: 2568960
I0428 20:00:05.070822 29393 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:05.070827 29393 net.cpp:86] Creating Layer ip2
I0428 20:00:05.070830 29393 net.cpp:408] ip2 <- ip1
I0428 20:00:05.070835 29393 net.cpp:382] ip2 -> ip2
I0428 20:00:05.070922 29393 net.cpp:124] Setting up ip2
I0428 20:00:05.070929 29393 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:05.070931 29393 net.cpp:139] Memory required for data: 2571520
I0428 20:00:05.070936 29393 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:05.070942 29393 net.cpp:86] Creating Layer relu2
I0428 20:00:05.070945 29393 net.cpp:408] relu2 <- ip2
I0428 20:00:05.070948 29393 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:05.071671 29393 net.cpp:124] Setting up relu2
I0428 20:00:05.071684 29393 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:05.071687 29393 net.cpp:139] Memory required for data: 2574080
I0428 20:00:05.071691 29393 layer_factory.hpp:77] Creating layer loss
I0428 20:00:05.071697 29393 net.cpp:86] Creating Layer loss
I0428 20:00:05.071701 29393 net.cpp:408] loss <- ip2
I0428 20:00:05.071705 29393 net.cpp:408] loss <- label
I0428 20:00:05.071710 29393 net.cpp:382] loss -> loss
I0428 20:00:05.071729 29393 layer_factory.hpp:77] Creating layer loss
I0428 20:00:05.071951 29393 net.cpp:124] Setting up loss
I0428 20:00:05.071960 29393 net.cpp:131] Top shape: (1)
I0428 20:00:05.071964 29393 net.cpp:134]     with loss weight 1
I0428 20:00:05.071979 29393 net.cpp:139] Memory required for data: 2574084
I0428 20:00:05.071982 29393 net.cpp:200] loss needs backward computation.
I0428 20:00:05.071985 29393 net.cpp:200] relu2 needs backward computation.
I0428 20:00:05.071990 29393 net.cpp:200] ip2 needs backward computation.
I0428 20:00:05.071992 29393 net.cpp:200] relu1 needs backward computation.
I0428 20:00:05.071995 29393 net.cpp:200] ip1 needs backward computation.
I0428 20:00:05.072013 29393 net.cpp:200] pool1 needs backward computation.
I0428 20:00:05.072017 29393 net.cpp:200] conv1 needs backward computation.
I0428 20:00:05.072021 29393 net.cpp:200] pool0 needs backward computation.
I0428 20:00:05.072023 29393 net.cpp:200] conv0 needs backward computation.
I0428 20:00:05.072026 29393 net.cpp:202] mnist does not need backward computation.
I0428 20:00:05.072029 29393 net.cpp:244] This network produces output loss
I0428 20:00:05.072037 29393 net.cpp:257] Network initialization done.
I0428 20:00:05.072379 29393 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test866.prototxt
I0428 20:00:05.072404 29393 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:00:05.072481 29393 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:00:05.072571 29393 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:05.072651 29393 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:00:05.072666 29393 net.cpp:86] Creating Layer mnist
I0428 20:00:05.072671 29393 net.cpp:382] mnist -> data
I0428 20:00:05.072679 29393 net.cpp:382] mnist -> label
I0428 20:00:05.072768 29393 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:00:05.074841 29393 net.cpp:124] Setting up mnist
I0428 20:00:05.074870 29393 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:00:05.074877 29393 net.cpp:131] Top shape: 100 (100)
I0428 20:00:05.074893 29393 net.cpp:139] Memory required for data: 314000
I0428 20:00:05.074898 29393 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:00:05.074928 29393 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:00:05.074932 29393 net.cpp:408] label_mnist_1_split <- label
I0428 20:00:05.074937 29393 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:00:05.074944 29393 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:00:05.075002 29393 net.cpp:124] Setting up label_mnist_1_split
I0428 20:00:05.075008 29393 net.cpp:131] Top shape: 100 (100)
I0428 20:00:05.075012 29393 net.cpp:131] Top shape: 100 (100)
I0428 20:00:05.075016 29393 net.cpp:139] Memory required for data: 314800
I0428 20:00:05.075018 29393 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:05.075026 29393 net.cpp:86] Creating Layer conv0
I0428 20:00:05.075029 29393 net.cpp:408] conv0 <- data
I0428 20:00:05.075034 29393 net.cpp:382] conv0 -> conv0
I0428 20:00:05.076656 29393 net.cpp:124] Setting up conv0
I0428 20:00:05.076670 29393 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:00:05.076673 29393 net.cpp:139] Memory required for data: 2618800
I0428 20:00:05.076683 29393 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:05.076689 29393 net.cpp:86] Creating Layer pool0
I0428 20:00:05.076691 29393 net.cpp:408] pool0 <- conv0
I0428 20:00:05.076695 29393 net.cpp:382] pool0 -> pool0
I0428 20:00:05.076728 29393 net.cpp:124] Setting up pool0
I0428 20:00:05.076732 29393 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:00:05.076735 29393 net.cpp:139] Memory required for data: 3194800
I0428 20:00:05.076738 29393 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:05.076746 29393 net.cpp:86] Creating Layer conv1
I0428 20:00:05.076748 29393 net.cpp:408] conv1 <- pool0
I0428 20:00:05.076753 29393 net.cpp:382] conv1 -> conv1
I0428 20:00:05.078863 29393 net.cpp:124] Setting up conv1
I0428 20:00:05.078876 29393 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:00:05.078881 29393 net.cpp:139] Memory required for data: 3834800
I0428 20:00:05.078888 29393 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:05.078896 29393 net.cpp:86] Creating Layer pool1
I0428 20:00:05.078914 29393 net.cpp:408] pool1 <- conv1
I0428 20:00:05.078922 29393 net.cpp:382] pool1 -> pool1
I0428 20:00:05.078979 29393 net.cpp:124] Setting up pool1
I0428 20:00:05.078984 29393 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:00:05.078986 29393 net.cpp:139] Memory required for data: 3994800
I0428 20:00:05.078989 29393 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:05.078996 29393 net.cpp:86] Creating Layer ip1
I0428 20:00:05.078999 29393 net.cpp:408] ip1 <- pool1
I0428 20:00:05.079004 29393 net.cpp:382] ip1 -> ip1
I0428 20:00:05.079192 29393 net.cpp:124] Setting up ip1
I0428 20:00:05.079201 29393 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:00:05.079205 29393 net.cpp:139] Memory required for data: 4004800
I0428 20:00:05.079211 29393 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:05.079216 29393 net.cpp:86] Creating Layer relu1
I0428 20:00:05.079219 29393 net.cpp:408] relu1 <- ip1
I0428 20:00:05.079223 29393 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:05.079380 29393 net.cpp:124] Setting up relu1
I0428 20:00:05.079387 29393 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:00:05.079391 29393 net.cpp:139] Memory required for data: 4014800
I0428 20:00:05.079393 29393 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:05.079399 29393 net.cpp:86] Creating Layer ip2
I0428 20:00:05.079402 29393 net.cpp:408] ip2 <- ip1
I0428 20:00:05.079419 29393 net.cpp:382] ip2 -> ip2
I0428 20:00:05.079566 29393 net.cpp:124] Setting up ip2
I0428 20:00:05.079576 29393 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:05.079578 29393 net.cpp:139] Memory required for data: 4018800
I0428 20:00:05.079583 29393 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:05.079588 29393 net.cpp:86] Creating Layer relu2
I0428 20:00:05.079591 29393 net.cpp:408] relu2 <- ip2
I0428 20:00:05.079602 29393 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:05.079802 29393 net.cpp:124] Setting up relu2
I0428 20:00:05.079820 29393 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:05.079826 29393 net.cpp:139] Memory required for data: 4022800
I0428 20:00:05.079839 29393 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:00:05.079846 29393 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:00:05.079851 29393 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:00:05.079870 29393 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:00:05.079891 29393 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:00:05.079929 29393 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:00:05.079946 29393 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:05.079949 29393 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:05.079952 29393 net.cpp:139] Memory required for data: 4030800
I0428 20:00:05.079957 29393 layer_factory.hpp:77] Creating layer accuracy
I0428 20:00:05.079962 29393 net.cpp:86] Creating Layer accuracy
I0428 20:00:05.079964 29393 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:00:05.079968 29393 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:00:05.079973 29393 net.cpp:382] accuracy -> accuracy
I0428 20:00:05.079982 29393 net.cpp:124] Setting up accuracy
I0428 20:00:05.079985 29393 net.cpp:131] Top shape: (1)
I0428 20:00:05.079988 29393 net.cpp:139] Memory required for data: 4030804
I0428 20:00:05.079991 29393 layer_factory.hpp:77] Creating layer loss
I0428 20:00:05.079995 29393 net.cpp:86] Creating Layer loss
I0428 20:00:05.079998 29393 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:00:05.080003 29393 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:00:05.080006 29393 net.cpp:382] loss -> loss
I0428 20:00:05.080013 29393 layer_factory.hpp:77] Creating layer loss
I0428 20:00:05.080323 29393 net.cpp:124] Setting up loss
I0428 20:00:05.080333 29393 net.cpp:131] Top shape: (1)
I0428 20:00:05.080337 29393 net.cpp:134]     with loss weight 1
I0428 20:00:05.080343 29393 net.cpp:139] Memory required for data: 4030808
I0428 20:00:05.080346 29393 net.cpp:200] loss needs backward computation.
I0428 20:00:05.080350 29393 net.cpp:202] accuracy does not need backward computation.
I0428 20:00:05.080354 29393 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:00:05.080358 29393 net.cpp:200] relu2 needs backward computation.
I0428 20:00:05.080366 29393 net.cpp:200] ip2 needs backward computation.
I0428 20:00:05.080369 29393 net.cpp:200] relu1 needs backward computation.
I0428 20:00:05.080373 29393 net.cpp:200] ip1 needs backward computation.
I0428 20:00:05.080375 29393 net.cpp:200] pool1 needs backward computation.
I0428 20:00:05.080379 29393 net.cpp:200] conv1 needs backward computation.
I0428 20:00:05.080381 29393 net.cpp:200] pool0 needs backward computation.
I0428 20:00:05.080384 29393 net.cpp:200] conv0 needs backward computation.
I0428 20:00:05.080387 29393 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:00:05.080391 29393 net.cpp:202] mnist does not need backward computation.
I0428 20:00:05.080394 29393 net.cpp:244] This network produces output accuracy
I0428 20:00:05.080397 29393 net.cpp:244] This network produces output loss
I0428 20:00:05.080406 29393 net.cpp:257] Network initialization done.
I0428 20:00:05.080443 29393 solver.cpp:56] Solver scaffolding done.
I0428 20:00:05.080732 29393 caffe.cpp:248] Starting Optimization
I0428 20:00:05.080739 29393 solver.cpp:273] Solving LeNet
I0428 20:00:05.080749 29393 solver.cpp:274] Learning Rate Policy: inv
I0428 20:00:05.080929 29393 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:00:05.084781 29393 blocking_queue.cpp:49] Waiting for data
I0428 20:00:05.156605 29400 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:05.157156 29393 solver.cpp:398]     Test net output #0: accuracy = 0.1496
I0428 20:00:05.157176 29393 solver.cpp:398]     Test net output #1: loss = 2.30868 (* 1 = 2.30868 loss)
I0428 20:00:05.159643 29393 solver.cpp:219] Iteration 0 (0 iter/s, 0.0788667s/100 iters), loss = 2.29798
I0428 20:00:05.159682 29393 solver.cpp:238]     Train net output #0: loss = 2.29798 (* 1 = 2.29798 loss)
I0428 20:00:05.159709 29393 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:00:05.258755 29393 solver.cpp:219] Iteration 100 (1009.47 iter/s, 0.0990618s/100 iters), loss = 0.857276
I0428 20:00:05.258781 29393 solver.cpp:238]     Train net output #0: loss = 0.857276 (* 1 = 0.857276 loss)
I0428 20:00:05.258787 29393 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:00:05.347908 29393 solver.cpp:219] Iteration 200 (1122.11 iter/s, 0.0891177s/100 iters), loss = 1.063
I0428 20:00:05.347946 29393 solver.cpp:238]     Train net output #0: loss = 1.063 (* 1 = 1.063 loss)
I0428 20:00:05.347968 29393 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:00:05.441054 29393 solver.cpp:219] Iteration 300 (1074.17 iter/s, 0.0930949s/100 iters), loss = 1.05951
I0428 20:00:05.441078 29393 solver.cpp:238]     Train net output #0: loss = 1.05951 (* 1 = 1.05951 loss)
I0428 20:00:05.441084 29393 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:00:05.525696 29393 solver.cpp:219] Iteration 400 (1181.95 iter/s, 0.0846059s/100 iters), loss = 1.46909
I0428 20:00:05.525732 29393 solver.cpp:238]     Train net output #0: loss = 1.46909 (* 1 = 1.46909 loss)
I0428 20:00:05.525743 29393 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:00:05.610397 29393 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:00:05.686303 29400 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:05.686826 29393 solver.cpp:398]     Test net output #0: accuracy = 0.7528
I0428 20:00:05.686848 29393 solver.cpp:398]     Test net output #1: loss = 0.824415 (* 1 = 0.824415 loss)
I0428 20:00:05.687747 29393 solver.cpp:219] Iteration 500 (617.269 iter/s, 0.162004s/100 iters), loss = 0.909099
I0428 20:00:05.687770 29393 solver.cpp:238]     Train net output #0: loss = 0.909099 (* 1 = 0.909099 loss)
I0428 20:00:05.687777 29393 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:00:05.782515 29393 solver.cpp:219] Iteration 600 (1055.58 iter/s, 0.0947343s/100 iters), loss = 0.658428
I0428 20:00:05.782538 29393 solver.cpp:238]     Train net output #0: loss = 0.658428 (* 1 = 0.658428 loss)
I0428 20:00:05.782544 29393 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:00:05.865103 29393 solver.cpp:219] Iteration 700 (1211.32 iter/s, 0.0825548s/100 iters), loss = 0.838863
I0428 20:00:05.865125 29393 solver.cpp:238]     Train net output #0: loss = 0.838863 (* 1 = 0.838863 loss)
I0428 20:00:05.865131 29393 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:00:05.946615 29393 solver.cpp:219] Iteration 800 (1227.28 iter/s, 0.0814807s/100 iters), loss = 0.624072
I0428 20:00:05.946655 29393 solver.cpp:238]     Train net output #0: loss = 0.624072 (* 1 = 0.624072 loss)
I0428 20:00:05.946660 29393 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:00:06.033078 29393 solver.cpp:219] Iteration 900 (1157 iter/s, 0.0864307s/100 iters), loss = 0.32763
I0428 20:00:06.033119 29393 solver.cpp:238]     Train net output #0: loss = 0.32763 (* 1 = 0.32763 loss)
I0428 20:00:06.033128 29393 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:00:06.066287 29399 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:06.127518 29393 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:00:06.128456 29393 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:00:06.129079 29393 solver.cpp:311] Iteration 1000, loss = 0.35568
I0428 20:00:06.129096 29393 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:00:06.204033 29400 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:06.204545 29393 solver.cpp:398]     Test net output #0: accuracy = 0.8749
I0428 20:00:06.204563 29393 solver.cpp:398]     Test net output #1: loss = 0.332756 (* 1 = 0.332756 loss)
I0428 20:00:06.204568 29393 solver.cpp:316] Optimization Done.
I0428 20:00:06.204577 29393 caffe.cpp:259] Optimization Done.
