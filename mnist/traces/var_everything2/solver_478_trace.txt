I0428 19:45:45.081059 25858 caffe.cpp:218] Using GPUs 0
I0428 19:45:45.120662 25858 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:45:45.636457 25858 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test478.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:45:45.636597 25858 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test478.prototxt
I0428 19:45:45.636986 25858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:45:45.637003 25858 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:45:45.637091 25858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:45.637167 25858 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:45.637262 25858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:45:45.637287 25858 net.cpp:86] Creating Layer mnist
I0428 19:45:45.637297 25858 net.cpp:382] mnist -> data
I0428 19:45:45.637320 25858 net.cpp:382] mnist -> label
I0428 19:45:45.638417 25858 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:45:45.641088 25858 net.cpp:124] Setting up mnist
I0428 19:45:45.641104 25858 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:45:45.641110 25858 net.cpp:131] Top shape: 64 (64)
I0428 19:45:45.641114 25858 net.cpp:139] Memory required for data: 200960
I0428 19:45:45.641121 25858 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:45.641139 25858 net.cpp:86] Creating Layer conv0
I0428 19:45:45.641147 25858 net.cpp:408] conv0 <- data
I0428 19:45:45.641165 25858 net.cpp:382] conv0 -> conv0
I0428 19:45:45.931573 25858 net.cpp:124] Setting up conv0
I0428 19:45:45.931605 25858 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:45:45.931610 25858 net.cpp:139] Memory required for data: 495872
I0428 19:45:45.931648 25858 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:45.931663 25858 net.cpp:86] Creating Layer pool0
I0428 19:45:45.931668 25858 net.cpp:408] pool0 <- conv0
I0428 19:45:45.931675 25858 net.cpp:382] pool0 -> pool0
I0428 19:45:45.931731 25858 net.cpp:124] Setting up pool0
I0428 19:45:45.931746 25858 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:45:45.931751 25858 net.cpp:139] Memory required for data: 569600
I0428 19:45:45.931753 25858 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:45.931766 25858 net.cpp:86] Creating Layer conv1
I0428 19:45:45.931769 25858 net.cpp:408] conv1 <- pool0
I0428 19:45:45.931776 25858 net.cpp:382] conv1 -> conv1
I0428 19:45:45.934939 25858 net.cpp:124] Setting up conv1
I0428 19:45:45.934957 25858 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:45:45.934962 25858 net.cpp:139] Memory required for data: 2208000
I0428 19:45:45.934973 25858 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:45.934981 25858 net.cpp:86] Creating Layer pool1
I0428 19:45:45.934988 25858 net.cpp:408] pool1 <- conv1
I0428 19:45:45.934993 25858 net.cpp:382] pool1 -> pool1
I0428 19:45:45.935036 25858 net.cpp:124] Setting up pool1
I0428 19:45:45.935044 25858 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:45:45.935046 25858 net.cpp:139] Memory required for data: 2617600
I0428 19:45:45.935050 25858 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:45.935058 25858 net.cpp:86] Creating Layer ip1
I0428 19:45:45.935062 25858 net.cpp:408] ip1 <- pool1
I0428 19:45:45.935068 25858 net.cpp:382] ip1 -> ip1
I0428 19:45:45.936683 25858 net.cpp:124] Setting up ip1
I0428 19:45:45.936699 25858 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:45.936703 25858 net.cpp:139] Memory required for data: 2630400
I0428 19:45:45.936713 25858 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:45.936720 25858 net.cpp:86] Creating Layer relu1
I0428 19:45:45.936724 25858 net.cpp:408] relu1 <- ip1
I0428 19:45:45.936731 25858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:45.936938 25858 net.cpp:124] Setting up relu1
I0428 19:45:45.936949 25858 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:45:45.936952 25858 net.cpp:139] Memory required for data: 2643200
I0428 19:45:45.936956 25858 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:45.936964 25858 net.cpp:86] Creating Layer ip2
I0428 19:45:45.936969 25858 net.cpp:408] ip2 <- ip1
I0428 19:45:45.936975 25858 net.cpp:382] ip2 -> ip2
I0428 19:45:45.937093 25858 net.cpp:124] Setting up ip2
I0428 19:45:45.937101 25858 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:45.937105 25858 net.cpp:139] Memory required for data: 2645760
I0428 19:45:45.937111 25858 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:45.937119 25858 net.cpp:86] Creating Layer relu2
I0428 19:45:45.937122 25858 net.cpp:408] relu2 <- ip2
I0428 19:45:45.937127 25858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:45.937975 25858 net.cpp:124] Setting up relu2
I0428 19:45:45.937990 25858 net.cpp:131] Top shape: 64 10 (640)
I0428 19:45:45.937994 25858 net.cpp:139] Memory required for data: 2648320
I0428 19:45:45.937999 25858 layer_factory.hpp:77] Creating layer loss
I0428 19:45:45.938011 25858 net.cpp:86] Creating Layer loss
I0428 19:45:45.938016 25858 net.cpp:408] loss <- ip2
I0428 19:45:45.938021 25858 net.cpp:408] loss <- label
I0428 19:45:45.938029 25858 net.cpp:382] loss -> loss
I0428 19:45:45.938046 25858 layer_factory.hpp:77] Creating layer loss
I0428 19:45:45.938314 25858 net.cpp:124] Setting up loss
I0428 19:45:45.938325 25858 net.cpp:131] Top shape: (1)
I0428 19:45:45.938329 25858 net.cpp:134]     with loss weight 1
I0428 19:45:45.938346 25858 net.cpp:139] Memory required for data: 2648324
I0428 19:45:45.938350 25858 net.cpp:200] loss needs backward computation.
I0428 19:45:45.938354 25858 net.cpp:200] relu2 needs backward computation.
I0428 19:45:45.938359 25858 net.cpp:200] ip2 needs backward computation.
I0428 19:45:45.938362 25858 net.cpp:200] relu1 needs backward computation.
I0428 19:45:45.938365 25858 net.cpp:200] ip1 needs backward computation.
I0428 19:45:45.938381 25858 net.cpp:200] pool1 needs backward computation.
I0428 19:45:45.938385 25858 net.cpp:200] conv1 needs backward computation.
I0428 19:45:45.938390 25858 net.cpp:200] pool0 needs backward computation.
I0428 19:45:45.938393 25858 net.cpp:200] conv0 needs backward computation.
I0428 19:45:45.938397 25858 net.cpp:202] mnist does not need backward computation.
I0428 19:45:45.938401 25858 net.cpp:244] This network produces output loss
I0428 19:45:45.938411 25858 net.cpp:257] Network initialization done.
I0428 19:45:45.938757 25858 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test478.prototxt
I0428 19:45:45.938787 25858 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:45:45.938886 25858 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:45:45.938962 25858 layer_factory.hpp:77] Creating layer mnist
I0428 19:45:45.939016 25858 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:45:45.939030 25858 net.cpp:86] Creating Layer mnist
I0428 19:45:45.939035 25858 net.cpp:382] mnist -> data
I0428 19:45:45.939044 25858 net.cpp:382] mnist -> label
I0428 19:45:45.939144 25858 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:45:45.940366 25858 net.cpp:124] Setting up mnist
I0428 19:45:45.940381 25858 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:45:45.940387 25858 net.cpp:131] Top shape: 100 (100)
I0428 19:45:45.940389 25858 net.cpp:139] Memory required for data: 314000
I0428 19:45:45.940393 25858 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:45:45.940402 25858 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:45:45.940405 25858 net.cpp:408] label_mnist_1_split <- label
I0428 19:45:45.940412 25858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:45:45.940419 25858 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:45:45.940477 25858 net.cpp:124] Setting up label_mnist_1_split
I0428 19:45:45.940495 25858 net.cpp:131] Top shape: 100 (100)
I0428 19:45:45.940500 25858 net.cpp:131] Top shape: 100 (100)
I0428 19:45:45.940503 25858 net.cpp:139] Memory required for data: 314800
I0428 19:45:45.940507 25858 layer_factory.hpp:77] Creating layer conv0
I0428 19:45:45.940517 25858 net.cpp:86] Creating Layer conv0
I0428 19:45:45.940521 25858 net.cpp:408] conv0 <- data
I0428 19:45:45.940527 25858 net.cpp:382] conv0 -> conv0
I0428 19:45:45.942404 25858 net.cpp:124] Setting up conv0
I0428 19:45:45.942421 25858 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:45:45.942425 25858 net.cpp:139] Memory required for data: 775600
I0428 19:45:45.942436 25858 layer_factory.hpp:77] Creating layer pool0
I0428 19:45:45.942445 25858 net.cpp:86] Creating Layer pool0
I0428 19:45:45.942448 25858 net.cpp:408] pool0 <- conv0
I0428 19:45:45.942453 25858 net.cpp:382] pool0 -> pool0
I0428 19:45:45.942495 25858 net.cpp:124] Setting up pool0
I0428 19:45:45.942502 25858 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:45:45.942505 25858 net.cpp:139] Memory required for data: 890800
I0428 19:45:45.942508 25858 layer_factory.hpp:77] Creating layer conv1
I0428 19:45:45.942518 25858 net.cpp:86] Creating Layer conv1
I0428 19:45:45.942523 25858 net.cpp:408] conv1 <- pool0
I0428 19:45:45.942528 25858 net.cpp:382] conv1 -> conv1
I0428 19:45:45.944226 25858 net.cpp:124] Setting up conv1
I0428 19:45:45.944242 25858 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:45:45.944245 25858 net.cpp:139] Memory required for data: 3450800
I0428 19:45:45.944255 25858 layer_factory.hpp:77] Creating layer pool1
I0428 19:45:45.944264 25858 net.cpp:86] Creating Layer pool1
I0428 19:45:45.944268 25858 net.cpp:408] pool1 <- conv1
I0428 19:45:45.944274 25858 net.cpp:382] pool1 -> pool1
I0428 19:45:45.944317 25858 net.cpp:124] Setting up pool1
I0428 19:45:45.944324 25858 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:45:45.944327 25858 net.cpp:139] Memory required for data: 4090800
I0428 19:45:45.944330 25858 layer_factory.hpp:77] Creating layer ip1
I0428 19:45:45.944337 25858 net.cpp:86] Creating Layer ip1
I0428 19:45:45.944341 25858 net.cpp:408] ip1 <- pool1
I0428 19:45:45.944346 25858 net.cpp:382] ip1 -> ip1
I0428 19:45:45.945014 25858 net.cpp:124] Setting up ip1
I0428 19:45:45.945024 25858 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:45.945027 25858 net.cpp:139] Memory required for data: 4110800
I0428 19:45:45.945036 25858 layer_factory.hpp:77] Creating layer relu1
I0428 19:45:45.945041 25858 net.cpp:86] Creating Layer relu1
I0428 19:45:45.945045 25858 net.cpp:408] relu1 <- ip1
I0428 19:45:45.945050 25858 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:45:45.945276 25858 net.cpp:124] Setting up relu1
I0428 19:45:45.945288 25858 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:45:45.945292 25858 net.cpp:139] Memory required for data: 4130800
I0428 19:45:45.945297 25858 layer_factory.hpp:77] Creating layer ip2
I0428 19:45:45.945304 25858 net.cpp:86] Creating Layer ip2
I0428 19:45:45.945308 25858 net.cpp:408] ip2 <- ip1
I0428 19:45:45.945314 25858 net.cpp:382] ip2 -> ip2
I0428 19:45:45.945430 25858 net.cpp:124] Setting up ip2
I0428 19:45:45.945441 25858 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:45.945444 25858 net.cpp:139] Memory required for data: 4134800
I0428 19:45:45.945451 25858 layer_factory.hpp:77] Creating layer relu2
I0428 19:45:45.945456 25858 net.cpp:86] Creating Layer relu2
I0428 19:45:45.945461 25858 net.cpp:408] relu2 <- ip2
I0428 19:45:45.945466 25858 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:45:45.945637 25858 net.cpp:124] Setting up relu2
I0428 19:45:45.945647 25858 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:45.945650 25858 net.cpp:139] Memory required for data: 4138800
I0428 19:45:45.945654 25858 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:45:45.945659 25858 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:45:45.945663 25858 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:45:45.945668 25858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:45:45.945688 25858 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:45:45.945730 25858 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:45:45.945739 25858 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:45.945742 25858 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:45:45.945745 25858 net.cpp:139] Memory required for data: 4146800
I0428 19:45:45.945749 25858 layer_factory.hpp:77] Creating layer accuracy
I0428 19:45:45.945756 25858 net.cpp:86] Creating Layer accuracy
I0428 19:45:45.945760 25858 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:45:45.945765 25858 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:45:45.945770 25858 net.cpp:382] accuracy -> accuracy
I0428 19:45:45.945777 25858 net.cpp:124] Setting up accuracy
I0428 19:45:45.945781 25858 net.cpp:131] Top shape: (1)
I0428 19:45:45.945785 25858 net.cpp:139] Memory required for data: 4146804
I0428 19:45:45.945788 25858 layer_factory.hpp:77] Creating layer loss
I0428 19:45:45.945793 25858 net.cpp:86] Creating Layer loss
I0428 19:45:45.945797 25858 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:45:45.945801 25858 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:45:45.945806 25858 net.cpp:382] loss -> loss
I0428 19:45:45.945813 25858 layer_factory.hpp:77] Creating layer loss
I0428 19:45:45.946081 25858 net.cpp:124] Setting up loss
I0428 19:45:45.946091 25858 net.cpp:131] Top shape: (1)
I0428 19:45:45.946095 25858 net.cpp:134]     with loss weight 1
I0428 19:45:45.946102 25858 net.cpp:139] Memory required for data: 4146808
I0428 19:45:45.946106 25858 net.cpp:200] loss needs backward computation.
I0428 19:45:45.946111 25858 net.cpp:202] accuracy does not need backward computation.
I0428 19:45:45.946116 25858 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:45:45.946120 25858 net.cpp:200] relu2 needs backward computation.
I0428 19:45:45.946123 25858 net.cpp:200] ip2 needs backward computation.
I0428 19:45:45.946127 25858 net.cpp:200] relu1 needs backward computation.
I0428 19:45:45.946131 25858 net.cpp:200] ip1 needs backward computation.
I0428 19:45:45.946135 25858 net.cpp:200] pool1 needs backward computation.
I0428 19:45:45.946138 25858 net.cpp:200] conv1 needs backward computation.
I0428 19:45:45.946143 25858 net.cpp:200] pool0 needs backward computation.
I0428 19:45:45.946146 25858 net.cpp:200] conv0 needs backward computation.
I0428 19:45:45.946151 25858 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:45:45.946156 25858 net.cpp:202] mnist does not need backward computation.
I0428 19:45:45.946158 25858 net.cpp:244] This network produces output accuracy
I0428 19:45:45.946162 25858 net.cpp:244] This network produces output loss
I0428 19:45:45.946173 25858 net.cpp:257] Network initialization done.
I0428 19:45:45.946218 25858 solver.cpp:56] Solver scaffolding done.
I0428 19:45:45.946524 25858 caffe.cpp:248] Starting Optimization
I0428 19:45:45.946532 25858 solver.cpp:273] Solving LeNet
I0428 19:45:45.946535 25858 solver.cpp:274] Learning Rate Policy: inv
I0428 19:45:45.947391 25858 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:45:45.952152 25858 blocking_queue.cpp:49] Waiting for data
I0428 19:45:46.024116 25865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:46.024848 25858 solver.cpp:398]     Test net output #0: accuracy = 0.1247
I0428 19:45:46.024883 25858 solver.cpp:398]     Test net output #1: loss = 2.294 (* 1 = 2.294 loss)
I0428 19:45:46.029942 25858 solver.cpp:219] Iteration 0 (0 iter/s, 0.0833734s/100 iters), loss = 2.32526
I0428 19:45:46.029986 25858 solver.cpp:238]     Train net output #0: loss = 2.32526 (* 1 = 2.32526 loss)
I0428 19:45:46.030006 25858 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:45:46.202605 25858 solver.cpp:219] Iteration 100 (579.377 iter/s, 0.172599s/100 iters), loss = 0.611013
I0428 19:45:46.202657 25858 solver.cpp:238]     Train net output #0: loss = 0.611013 (* 1 = 0.611013 loss)
I0428 19:45:46.202669 25858 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:45:46.378583 25858 solver.cpp:219] Iteration 200 (568.486 iter/s, 0.175906s/100 iters), loss = 0.382607
I0428 19:45:46.378675 25858 solver.cpp:238]     Train net output #0: loss = 0.382607 (* 1 = 0.382607 loss)
I0428 19:45:46.378690 25858 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:45:46.539275 25858 solver.cpp:219] Iteration 300 (622.697 iter/s, 0.160592s/100 iters), loss = 0.617125
I0428 19:45:46.539312 25858 solver.cpp:238]     Train net output #0: loss = 0.617125 (* 1 = 0.617125 loss)
I0428 19:45:46.539320 25858 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:45:46.684829 25858 solver.cpp:219] Iteration 400 (687.27 iter/s, 0.145503s/100 iters), loss = 0.300912
I0428 19:45:46.684860 25858 solver.cpp:238]     Train net output #0: loss = 0.300912 (* 1 = 0.300912 loss)
I0428 19:45:46.684869 25858 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:45:46.831606 25858 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:45:46.883397 25865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:46.885172 25858 solver.cpp:398]     Test net output #0: accuracy = 0.8708
I0428 19:45:46.885197 25858 solver.cpp:398]     Test net output #1: loss = 0.343162 (* 1 = 0.343162 loss)
I0428 19:45:46.886677 25858 solver.cpp:219] Iteration 500 (495.54 iter/s, 0.2018s/100 iters), loss = 0.291718
I0428 19:45:46.886715 25858 solver.cpp:238]     Train net output #0: loss = 0.291718 (* 1 = 0.291718 loss)
I0428 19:45:46.886723 25858 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:45:47.034914 25858 solver.cpp:219] Iteration 600 (674.771 iter/s, 0.148198s/100 iters), loss = 0.386189
I0428 19:45:47.034950 25858 solver.cpp:238]     Train net output #0: loss = 0.386189 (* 1 = 0.386189 loss)
I0428 19:45:47.034957 25858 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:45:47.178483 25858 solver.cpp:219] Iteration 700 (696.719 iter/s, 0.14353s/100 iters), loss = 0.319721
I0428 19:45:47.178536 25858 solver.cpp:238]     Train net output #0: loss = 0.319721 (* 1 = 0.319721 loss)
I0428 19:45:47.178544 25858 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:45:47.320269 25858 solver.cpp:219] Iteration 800 (705.563 iter/s, 0.141731s/100 iters), loss = 0.458133
I0428 19:45:47.320312 25858 solver.cpp:238]     Train net output #0: loss = 0.458133 (* 1 = 0.458133 loss)
I0428 19:45:47.320318 25858 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:45:47.466029 25858 solver.cpp:219] Iteration 900 (686.246 iter/s, 0.14572s/100 iters), loss = 0.316948
I0428 19:45:47.466066 25858 solver.cpp:238]     Train net output #0: loss = 0.316948 (* 1 = 0.316948 loss)
I0428 19:45:47.466074 25858 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:45:47.514914 25864 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:47.604457 25858 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:45:47.606838 25858 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:45:47.608014 25858 solver.cpp:311] Iteration 1000, loss = 0.287471
I0428 19:45:47.608029 25858 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:45:47.657411 25865 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:45:47.658694 25858 solver.cpp:398]     Test net output #0: accuracy = 0.8713
I0428 19:45:47.658732 25858 solver.cpp:398]     Test net output #1: loss = 0.343005 (* 1 = 0.343005 loss)
I0428 19:45:47.658738 25858 solver.cpp:316] Optimization Done.
I0428 19:45:47.658741 25858 caffe.cpp:259] Optimization Done.
