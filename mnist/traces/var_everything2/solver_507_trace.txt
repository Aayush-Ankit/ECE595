I0428 19:47:10.715906 26127 caffe.cpp:218] Using GPUs 0
I0428 19:47:10.754672 26127 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:11.274106 26127 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test507.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:11.274273 26127 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test507.prototxt
I0428 19:47:11.274610 26127 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:11.274631 26127 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:11.274718 26127 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:11.274808 26127 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:11.274940 26127 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:11.274972 26127 net.cpp:86] Creating Layer mnist
I0428 19:47:11.274984 26127 net.cpp:382] mnist -> data
I0428 19:47:11.275015 26127 net.cpp:382] mnist -> label
I0428 19:47:11.276211 26127 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:11.278695 26127 net.cpp:124] Setting up mnist
I0428 19:47:11.278717 26127 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:11.278728 26127 net.cpp:131] Top shape: 64 (64)
I0428 19:47:11.278733 26127 net.cpp:139] Memory required for data: 200960
I0428 19:47:11.278744 26127 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:11.278766 26127 net.cpp:86] Creating Layer conv0
I0428 19:47:11.278777 26127 net.cpp:408] conv0 <- data
I0428 19:47:11.278795 26127 net.cpp:382] conv0 -> conv0
I0428 19:47:11.570925 26127 net.cpp:124] Setting up conv0
I0428 19:47:11.570958 26127 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:11.570966 26127 net.cpp:139] Memory required for data: 938240
I0428 19:47:11.570991 26127 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:11.571010 26127 net.cpp:86] Creating Layer pool0
I0428 19:47:11.571025 26127 net.cpp:408] pool0 <- conv0
I0428 19:47:11.571036 26127 net.cpp:382] pool0 -> pool0
I0428 19:47:11.571104 26127 net.cpp:124] Setting up pool0
I0428 19:47:11.571115 26127 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:11.571142 26127 net.cpp:139] Memory required for data: 1122560
I0428 19:47:11.571151 26127 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:11.571168 26127 net.cpp:86] Creating Layer conv1
I0428 19:47:11.571177 26127 net.cpp:408] conv1 <- pool0
I0428 19:47:11.571187 26127 net.cpp:382] conv1 -> conv1
I0428 19:47:11.573284 26127 net.cpp:124] Setting up conv1
I0428 19:47:11.573304 26127 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:11.573312 26127 net.cpp:139] Memory required for data: 1155328
I0428 19:47:11.573328 26127 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:11.573340 26127 net.cpp:86] Creating Layer pool1
I0428 19:47:11.573348 26127 net.cpp:408] pool1 <- conv1
I0428 19:47:11.573359 26127 net.cpp:382] pool1 -> pool1
I0428 19:47:11.573410 26127 net.cpp:124] Setting up pool1
I0428 19:47:11.573421 26127 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:11.573427 26127 net.cpp:139] Memory required for data: 1163520
I0428 19:47:11.573433 26127 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:11.573446 26127 net.cpp:86] Creating Layer ip1
I0428 19:47:11.573452 26127 net.cpp:408] ip1 <- pool1
I0428 19:47:11.573462 26127 net.cpp:382] ip1 -> ip1
I0428 19:47:11.573585 26127 net.cpp:124] Setting up ip1
I0428 19:47:11.573596 26127 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:11.573601 26127 net.cpp:139] Memory required for data: 1166080
I0428 19:47:11.573614 26127 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:11.573631 26127 net.cpp:86] Creating Layer relu1
I0428 19:47:11.573639 26127 net.cpp:408] relu1 <- ip1
I0428 19:47:11.573648 26127 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:11.573848 26127 net.cpp:124] Setting up relu1
I0428 19:47:11.573861 26127 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:11.573866 26127 net.cpp:139] Memory required for data: 1168640
I0428 19:47:11.573873 26127 layer_factory.hpp:77] Creating layer loss
I0428 19:47:11.573884 26127 net.cpp:86] Creating Layer loss
I0428 19:47:11.573889 26127 net.cpp:408] loss <- ip1
I0428 19:47:11.573897 26127 net.cpp:408] loss <- label
I0428 19:47:11.573907 26127 net.cpp:382] loss -> loss
I0428 19:47:11.573935 26127 layer_factory.hpp:77] Creating layer loss
I0428 19:47:11.574856 26127 net.cpp:124] Setting up loss
I0428 19:47:11.574874 26127 net.cpp:131] Top shape: (1)
I0428 19:47:11.574882 26127 net.cpp:134]     with loss weight 1
I0428 19:47:11.574904 26127 net.cpp:139] Memory required for data: 1168644
I0428 19:47:11.574911 26127 net.cpp:200] loss needs backward computation.
I0428 19:47:11.574919 26127 net.cpp:200] relu1 needs backward computation.
I0428 19:47:11.574925 26127 net.cpp:200] ip1 needs backward computation.
I0428 19:47:11.574931 26127 net.cpp:200] pool1 needs backward computation.
I0428 19:47:11.574937 26127 net.cpp:200] conv1 needs backward computation.
I0428 19:47:11.574944 26127 net.cpp:200] pool0 needs backward computation.
I0428 19:47:11.574949 26127 net.cpp:200] conv0 needs backward computation.
I0428 19:47:11.574956 26127 net.cpp:202] mnist does not need backward computation.
I0428 19:47:11.574962 26127 net.cpp:244] This network produces output loss
I0428 19:47:11.574976 26127 net.cpp:257] Network initialization done.
I0428 19:47:11.575273 26127 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test507.prototxt
I0428 19:47:11.575309 26127 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:11.575400 26127 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:11.575517 26127 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:11.575585 26127 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:11.575604 26127 net.cpp:86] Creating Layer mnist
I0428 19:47:11.575613 26127 net.cpp:382] mnist -> data
I0428 19:47:11.575628 26127 net.cpp:382] mnist -> label
I0428 19:47:11.575767 26127 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:11.578228 26127 net.cpp:124] Setting up mnist
I0428 19:47:11.578246 26127 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:11.578256 26127 net.cpp:131] Top shape: 100 (100)
I0428 19:47:11.578263 26127 net.cpp:139] Memory required for data: 314000
I0428 19:47:11.578269 26127 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:11.578281 26127 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:11.578289 26127 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:11.578297 26127 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:11.578310 26127 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:11.578420 26127 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:11.578433 26127 net.cpp:131] Top shape: 100 (100)
I0428 19:47:11.578439 26127 net.cpp:131] Top shape: 100 (100)
I0428 19:47:11.578445 26127 net.cpp:139] Memory required for data: 314800
I0428 19:47:11.578451 26127 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:11.578467 26127 net.cpp:86] Creating Layer conv0
I0428 19:47:11.578475 26127 net.cpp:408] conv0 <- data
I0428 19:47:11.578486 26127 net.cpp:382] conv0 -> conv0
I0428 19:47:11.579376 26127 net.cpp:124] Setting up conv0
I0428 19:47:11.579396 26127 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:11.579401 26127 net.cpp:139] Memory required for data: 1466800
I0428 19:47:11.579417 26127 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:11.579429 26127 net.cpp:86] Creating Layer pool0
I0428 19:47:11.579437 26127 net.cpp:408] pool0 <- conv0
I0428 19:47:11.579448 26127 net.cpp:382] pool0 -> pool0
I0428 19:47:11.579499 26127 net.cpp:124] Setting up pool0
I0428 19:47:11.579509 26127 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:11.579514 26127 net.cpp:139] Memory required for data: 1754800
I0428 19:47:11.579519 26127 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:11.579538 26127 net.cpp:86] Creating Layer conv1
I0428 19:47:11.579546 26127 net.cpp:408] conv1 <- pool0
I0428 19:47:11.579556 26127 net.cpp:382] conv1 -> conv1
I0428 19:47:11.581871 26127 net.cpp:124] Setting up conv1
I0428 19:47:11.581888 26127 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:11.581895 26127 net.cpp:139] Memory required for data: 1806000
I0428 19:47:11.581910 26127 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:11.581923 26127 net.cpp:86] Creating Layer pool1
I0428 19:47:11.581943 26127 net.cpp:408] pool1 <- conv1
I0428 19:47:11.581956 26127 net.cpp:382] pool1 -> pool1
I0428 19:47:11.582042 26127 net.cpp:124] Setting up pool1
I0428 19:47:11.582054 26127 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:11.582059 26127 net.cpp:139] Memory required for data: 1818800
I0428 19:47:11.582067 26127 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:11.582083 26127 net.cpp:86] Creating Layer ip1
I0428 19:47:11.582093 26127 net.cpp:408] ip1 <- pool1
I0428 19:47:11.582105 26127 net.cpp:382] ip1 -> ip1
I0428 19:47:11.582238 26127 net.cpp:124] Setting up ip1
I0428 19:47:11.582253 26127 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:11.582258 26127 net.cpp:139] Memory required for data: 1822800
I0428 19:47:11.582273 26127 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:11.582283 26127 net.cpp:86] Creating Layer relu1
I0428 19:47:11.582291 26127 net.cpp:408] relu1 <- ip1
I0428 19:47:11.582303 26127 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:11.583214 26127 net.cpp:124] Setting up relu1
I0428 19:47:11.583230 26127 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:11.583237 26127 net.cpp:139] Memory required for data: 1826800
I0428 19:47:11.583243 26127 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:47:11.583254 26127 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:47:11.583261 26127 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:47:11.583276 26127 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:47:11.583290 26127 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:47:11.583345 26127 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:47:11.583359 26127 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:11.583366 26127 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:11.583372 26127 net.cpp:139] Memory required for data: 1834800
I0428 19:47:11.583379 26127 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:11.583389 26127 net.cpp:86] Creating Layer accuracy
I0428 19:47:11.583395 26127 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:47:11.583403 26127 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:11.583411 26127 net.cpp:382] accuracy -> accuracy
I0428 19:47:11.583425 26127 net.cpp:124] Setting up accuracy
I0428 19:47:11.583433 26127 net.cpp:131] Top shape: (1)
I0428 19:47:11.583441 26127 net.cpp:139] Memory required for data: 1834804
I0428 19:47:11.583446 26127 layer_factory.hpp:77] Creating layer loss
I0428 19:47:11.583457 26127 net.cpp:86] Creating Layer loss
I0428 19:47:11.583464 26127 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:47:11.583472 26127 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:11.583480 26127 net.cpp:382] loss -> loss
I0428 19:47:11.583492 26127 layer_factory.hpp:77] Creating layer loss
I0428 19:47:11.583788 26127 net.cpp:124] Setting up loss
I0428 19:47:11.583801 26127 net.cpp:131] Top shape: (1)
I0428 19:47:11.583806 26127 net.cpp:134]     with loss weight 1
I0428 19:47:11.583817 26127 net.cpp:139] Memory required for data: 1834808
I0428 19:47:11.583824 26127 net.cpp:200] loss needs backward computation.
I0428 19:47:11.583832 26127 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:11.583838 26127 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:47:11.583844 26127 net.cpp:200] relu1 needs backward computation.
I0428 19:47:11.583850 26127 net.cpp:200] ip1 needs backward computation.
I0428 19:47:11.583858 26127 net.cpp:200] pool1 needs backward computation.
I0428 19:47:11.583863 26127 net.cpp:200] conv1 needs backward computation.
I0428 19:47:11.583869 26127 net.cpp:200] pool0 needs backward computation.
I0428 19:47:11.583875 26127 net.cpp:200] conv0 needs backward computation.
I0428 19:47:11.583883 26127 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:11.583892 26127 net.cpp:202] mnist does not need backward computation.
I0428 19:47:11.583902 26127 net.cpp:244] This network produces output accuracy
I0428 19:47:11.583909 26127 net.cpp:244] This network produces output loss
I0428 19:47:11.583925 26127 net.cpp:257] Network initialization done.
I0428 19:47:11.583983 26127 solver.cpp:56] Solver scaffolding done.
I0428 19:47:11.584265 26127 caffe.cpp:248] Starting Optimization
I0428 19:47:11.584273 26127 solver.cpp:273] Solving LeNet
I0428 19:47:11.584278 26127 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:11.585151 26127 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:11.588309 26127 blocking_queue.cpp:49] Waiting for data
I0428 19:47:11.656633 26134 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:11.657181 26127 solver.cpp:398]     Test net output #0: accuracy = 0.1265
I0428 19:47:11.657213 26127 solver.cpp:398]     Test net output #1: loss = 2.29078 (* 1 = 2.29078 loss)
I0428 19:47:11.659456 26127 solver.cpp:219] Iteration 0 (0 iter/s, 0.0751362s/100 iters), loss = 2.30268
I0428 19:47:11.659492 26127 solver.cpp:238]     Train net output #0: loss = 2.30268 (* 1 = 2.30268 loss)
I0428 19:47:11.659510 26127 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:11.723317 26127 solver.cpp:219] Iteration 100 (1567.06 iter/s, 0.0638136s/100 iters), loss = 1.53202
I0428 19:47:11.723348 26127 solver.cpp:238]     Train net output #0: loss = 1.53202 (* 1 = 1.53202 loss)
I0428 19:47:11.723356 26127 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:11.781741 26127 solver.cpp:219] Iteration 200 (1712.79 iter/s, 0.0583844s/100 iters), loss = 1.43883
I0428 19:47:11.781771 26127 solver.cpp:238]     Train net output #0: loss = 1.43883 (* 1 = 1.43883 loss)
I0428 19:47:11.781779 26127 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:11.839790 26127 solver.cpp:219] Iteration 300 (1723.82 iter/s, 0.0580106s/100 iters), loss = 1.03576
I0428 19:47:11.839818 26127 solver.cpp:238]     Train net output #0: loss = 1.03576 (* 1 = 1.03576 loss)
I0428 19:47:11.839825 26127 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:11.897904 26127 solver.cpp:219] Iteration 400 (1721.88 iter/s, 0.0580762s/100 iters), loss = 1.12527
I0428 19:47:11.897933 26127 solver.cpp:238]     Train net output #0: loss = 1.12527 (* 1 = 1.12527 loss)
I0428 19:47:11.897941 26127 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:11.955592 26127 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:12.008385 26134 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:12.008844 26127 solver.cpp:398]     Test net output #0: accuracy = 0.7972
I0428 19:47:12.008867 26127 solver.cpp:398]     Test net output #1: loss = 0.667094 (* 1 = 0.667094 loss)
I0428 19:47:12.009544 26127 solver.cpp:219] Iteration 500 (896.052 iter/s, 0.111601s/100 iters), loss = 0.694713
I0428 19:47:12.009572 26127 solver.cpp:238]     Train net output #0: loss = 0.694713 (* 1 = 0.694713 loss)
I0428 19:47:12.009580 26127 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:12.070484 26127 solver.cpp:219] Iteration 600 (1641.97 iter/s, 0.0609025s/100 iters), loss = 0.26429
I0428 19:47:12.070518 26127 solver.cpp:238]     Train net output #0: loss = 0.26429 (* 1 = 0.26429 loss)
I0428 19:47:12.070524 26127 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:12.130242 26127 solver.cpp:219] Iteration 700 (1674.52 iter/s, 0.0597188s/100 iters), loss = 0.455512
I0428 19:47:12.130272 26127 solver.cpp:238]     Train net output #0: loss = 0.455512 (* 1 = 0.455512 loss)
I0428 19:47:12.130280 26127 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:12.187971 26127 solver.cpp:219] Iteration 800 (1733.42 iter/s, 0.0576893s/100 iters), loss = 0.281698
I0428 19:47:12.188000 26127 solver.cpp:238]     Train net output #0: loss = 0.281698 (* 1 = 0.281698 loss)
I0428 19:47:12.188007 26127 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:12.247244 26127 solver.cpp:219] Iteration 900 (1688.15 iter/s, 0.0592364s/100 iters), loss = 0.35756
I0428 19:47:12.247280 26127 solver.cpp:238]     Train net output #0: loss = 0.35756 (* 1 = 0.35756 loss)
I0428 19:47:12.247287 26127 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:12.268697 26133 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:12.307528 26127 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:12.308182 26127 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:12.308574 26127 solver.cpp:311] Iteration 1000, loss = 0.243356
I0428 19:47:12.308593 26127 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:12.364583 26134 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:12.365144 26127 solver.cpp:398]     Test net output #0: accuracy = 0.937
I0428 19:47:12.365181 26127 solver.cpp:398]     Test net output #1: loss = 0.20968 (* 1 = 0.20968 loss)
I0428 19:47:12.365190 26127 solver.cpp:316] Optimization Done.
I0428 19:47:12.365196 26127 caffe.cpp:259] Optimization Done.
