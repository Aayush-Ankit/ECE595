I0428 19:40:15.429245 24503 caffe.cpp:218] Using GPUs 0
I0428 19:40:15.469707 24503 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:16.001049 24503 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test329.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:16.001189 24503 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test329.prototxt
I0428 19:40:16.001610 24503 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:16.001631 24503 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:16.001732 24503 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:16.001824 24503 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:16.001927 24503 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:16.001951 24503 net.cpp:86] Creating Layer mnist
I0428 19:40:16.001961 24503 net.cpp:382] mnist -> data
I0428 19:40:16.001983 24503 net.cpp:382] mnist -> label
I0428 19:40:16.003075 24503 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:16.005540 24503 net.cpp:124] Setting up mnist
I0428 19:40:16.005559 24503 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:16.005565 24503 net.cpp:131] Top shape: 64 (64)
I0428 19:40:16.005568 24503 net.cpp:139] Memory required for data: 200960
I0428 19:40:16.005575 24503 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:16.005592 24503 net.cpp:86] Creating Layer conv0
I0428 19:40:16.005614 24503 net.cpp:408] conv0 <- data
I0428 19:40:16.005626 24503 net.cpp:382] conv0 -> conv0
I0428 19:40:16.298032 24503 net.cpp:124] Setting up conv0
I0428 19:40:16.298063 24503 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:16.298068 24503 net.cpp:139] Memory required for data: 495872
I0428 19:40:16.298085 24503 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:16.298102 24503 net.cpp:86] Creating Layer pool0
I0428 19:40:16.298106 24503 net.cpp:408] pool0 <- conv0
I0428 19:40:16.298113 24503 net.cpp:382] pool0 -> pool0
I0428 19:40:16.298172 24503 net.cpp:124] Setting up pool0
I0428 19:40:16.298180 24503 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:16.298184 24503 net.cpp:139] Memory required for data: 569600
I0428 19:40:16.298187 24503 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:16.298202 24503 net.cpp:86] Creating Layer conv1
I0428 19:40:16.298210 24503 net.cpp:408] conv1 <- pool0
I0428 19:40:16.298218 24503 net.cpp:382] conv1 -> conv1
I0428 19:40:16.300714 24503 net.cpp:124] Setting up conv1
I0428 19:40:16.300732 24503 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:16.300736 24503 net.cpp:139] Memory required for data: 651520
I0428 19:40:16.300747 24503 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:16.300756 24503 net.cpp:86] Creating Layer pool1
I0428 19:40:16.300763 24503 net.cpp:408] pool1 <- conv1
I0428 19:40:16.300768 24503 net.cpp:382] pool1 -> pool1
I0428 19:40:16.300827 24503 net.cpp:124] Setting up pool1
I0428 19:40:16.300837 24503 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:16.300840 24503 net.cpp:139] Memory required for data: 672000
I0428 19:40:16.300843 24503 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:16.300853 24503 net.cpp:86] Creating Layer ip1
I0428 19:40:16.300856 24503 net.cpp:408] ip1 <- pool1
I0428 19:40:16.300863 24503 net.cpp:382] ip1 -> ip1
I0428 19:40:16.300992 24503 net.cpp:124] Setting up ip1
I0428 19:40:16.301002 24503 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:16.301005 24503 net.cpp:139] Memory required for data: 674560
I0428 19:40:16.301013 24503 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:16.301023 24503 net.cpp:86] Creating Layer relu1
I0428 19:40:16.301026 24503 net.cpp:408] relu1 <- ip1
I0428 19:40:16.301033 24503 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:16.301244 24503 net.cpp:124] Setting up relu1
I0428 19:40:16.301254 24503 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:16.301259 24503 net.cpp:139] Memory required for data: 677120
I0428 19:40:16.301262 24503 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:16.301270 24503 net.cpp:86] Creating Layer ip2
I0428 19:40:16.301273 24503 net.cpp:408] ip2 <- ip1
I0428 19:40:16.301280 24503 net.cpp:382] ip2 -> ip2
I0428 19:40:16.301405 24503 net.cpp:124] Setting up ip2
I0428 19:40:16.301414 24503 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:16.301419 24503 net.cpp:139] Memory required for data: 683520
I0428 19:40:16.301424 24503 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:16.301432 24503 net.cpp:86] Creating Layer relu2
I0428 19:40:16.301435 24503 net.cpp:408] relu2 <- ip2
I0428 19:40:16.301442 24503 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:16.302301 24503 net.cpp:124] Setting up relu2
I0428 19:40:16.302316 24503 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:16.302320 24503 net.cpp:139] Memory required for data: 689920
I0428 19:40:16.302325 24503 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:16.302335 24503 net.cpp:86] Creating Layer ip3
I0428 19:40:16.302338 24503 net.cpp:408] ip3 <- ip2
I0428 19:40:16.302345 24503 net.cpp:382] ip3 -> ip3
I0428 19:40:16.302465 24503 net.cpp:124] Setting up ip3
I0428 19:40:16.302474 24503 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:16.302479 24503 net.cpp:139] Memory required for data: 692480
I0428 19:40:16.302489 24503 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:16.302498 24503 net.cpp:86] Creating Layer relu3
I0428 19:40:16.302501 24503 net.cpp:408] relu3 <- ip3
I0428 19:40:16.302506 24503 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:16.302719 24503 net.cpp:124] Setting up relu3
I0428 19:40:16.302731 24503 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:16.302736 24503 net.cpp:139] Memory required for data: 695040
I0428 19:40:16.302738 24503 layer_factory.hpp:77] Creating layer loss
I0428 19:40:16.302745 24503 net.cpp:86] Creating Layer loss
I0428 19:40:16.302749 24503 net.cpp:408] loss <- ip3
I0428 19:40:16.302753 24503 net.cpp:408] loss <- label
I0428 19:40:16.302760 24503 net.cpp:382] loss -> loss
I0428 19:40:16.302776 24503 layer_factory.hpp:77] Creating layer loss
I0428 19:40:16.303071 24503 net.cpp:124] Setting up loss
I0428 19:40:16.303082 24503 net.cpp:131] Top shape: (1)
I0428 19:40:16.303086 24503 net.cpp:134]     with loss weight 1
I0428 19:40:16.303102 24503 net.cpp:139] Memory required for data: 695044
I0428 19:40:16.303107 24503 net.cpp:200] loss needs backward computation.
I0428 19:40:16.303110 24503 net.cpp:200] relu3 needs backward computation.
I0428 19:40:16.303113 24503 net.cpp:200] ip3 needs backward computation.
I0428 19:40:16.303117 24503 net.cpp:200] relu2 needs backward computation.
I0428 19:40:16.303120 24503 net.cpp:200] ip2 needs backward computation.
I0428 19:40:16.303123 24503 net.cpp:200] relu1 needs backward computation.
I0428 19:40:16.303127 24503 net.cpp:200] ip1 needs backward computation.
I0428 19:40:16.303130 24503 net.cpp:200] pool1 needs backward computation.
I0428 19:40:16.303134 24503 net.cpp:200] conv1 needs backward computation.
I0428 19:40:16.303138 24503 net.cpp:200] pool0 needs backward computation.
I0428 19:40:16.303141 24503 net.cpp:200] conv0 needs backward computation.
I0428 19:40:16.303144 24503 net.cpp:202] mnist does not need backward computation.
I0428 19:40:16.303148 24503 net.cpp:244] This network produces output loss
I0428 19:40:16.303158 24503 net.cpp:257] Network initialization done.
I0428 19:40:16.303545 24503 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test329.prototxt
I0428 19:40:16.303577 24503 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:16.303689 24503 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:16.303787 24503 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:16.303841 24503 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:16.303858 24503 net.cpp:86] Creating Layer mnist
I0428 19:40:16.303865 24503 net.cpp:382] mnist -> data
I0428 19:40:16.303874 24503 net.cpp:382] mnist -> label
I0428 19:40:16.303980 24503 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:16.306188 24503 net.cpp:124] Setting up mnist
I0428 19:40:16.306205 24503 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:16.306210 24503 net.cpp:131] Top shape: 100 (100)
I0428 19:40:16.306213 24503 net.cpp:139] Memory required for data: 314000
I0428 19:40:16.306218 24503 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:16.306226 24503 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:16.306229 24503 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:16.306254 24503 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:16.306263 24503 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:16.306319 24503 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:16.306329 24503 net.cpp:131] Top shape: 100 (100)
I0428 19:40:16.306334 24503 net.cpp:131] Top shape: 100 (100)
I0428 19:40:16.306336 24503 net.cpp:139] Memory required for data: 314800
I0428 19:40:16.306340 24503 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:16.306356 24503 net.cpp:86] Creating Layer conv0
I0428 19:40:16.306360 24503 net.cpp:408] conv0 <- data
I0428 19:40:16.306366 24503 net.cpp:382] conv0 -> conv0
I0428 19:40:16.308356 24503 net.cpp:124] Setting up conv0
I0428 19:40:16.308372 24503 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:16.308377 24503 net.cpp:139] Memory required for data: 775600
I0428 19:40:16.308387 24503 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:16.308395 24503 net.cpp:86] Creating Layer pool0
I0428 19:40:16.308399 24503 net.cpp:408] pool0 <- conv0
I0428 19:40:16.308406 24503 net.cpp:382] pool0 -> pool0
I0428 19:40:16.308450 24503 net.cpp:124] Setting up pool0
I0428 19:40:16.308461 24503 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:16.308467 24503 net.cpp:139] Memory required for data: 890800
I0428 19:40:16.308473 24503 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:16.308487 24503 net.cpp:86] Creating Layer conv1
I0428 19:40:16.308493 24503 net.cpp:408] conv1 <- pool0
I0428 19:40:16.308500 24503 net.cpp:382] conv1 -> conv1
I0428 19:40:16.310369 24503 net.cpp:124] Setting up conv1
I0428 19:40:16.310386 24503 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:16.310391 24503 net.cpp:139] Memory required for data: 1018800
I0428 19:40:16.310402 24503 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:16.310410 24503 net.cpp:86] Creating Layer pool1
I0428 19:40:16.310415 24503 net.cpp:408] pool1 <- conv1
I0428 19:40:16.310420 24503 net.cpp:382] pool1 -> pool1
I0428 19:40:16.310469 24503 net.cpp:124] Setting up pool1
I0428 19:40:16.310482 24503 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:16.310487 24503 net.cpp:139] Memory required for data: 1050800
I0428 19:40:16.310490 24503 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:16.310497 24503 net.cpp:86] Creating Layer ip1
I0428 19:40:16.310501 24503 net.cpp:408] ip1 <- pool1
I0428 19:40:16.310508 24503 net.cpp:382] ip1 -> ip1
I0428 19:40:16.310664 24503 net.cpp:124] Setting up ip1
I0428 19:40:16.310674 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.310690 24503 net.cpp:139] Memory required for data: 1054800
I0428 19:40:16.310699 24503 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:16.310708 24503 net.cpp:86] Creating Layer relu1
I0428 19:40:16.310712 24503 net.cpp:408] relu1 <- ip1
I0428 19:40:16.310719 24503 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:16.310917 24503 net.cpp:124] Setting up relu1
I0428 19:40:16.310928 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.310932 24503 net.cpp:139] Memory required for data: 1058800
I0428 19:40:16.310936 24503 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:16.310946 24503 net.cpp:86] Creating Layer ip2
I0428 19:40:16.310950 24503 net.cpp:408] ip2 <- ip1
I0428 19:40:16.310956 24503 net.cpp:382] ip2 -> ip2
I0428 19:40:16.311079 24503 net.cpp:124] Setting up ip2
I0428 19:40:16.311091 24503 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:16.311094 24503 net.cpp:139] Memory required for data: 1068800
I0428 19:40:16.311101 24503 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:16.311108 24503 net.cpp:86] Creating Layer relu2
I0428 19:40:16.311111 24503 net.cpp:408] relu2 <- ip2
I0428 19:40:16.311117 24503 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:16.311400 24503 net.cpp:124] Setting up relu2
I0428 19:40:16.311411 24503 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:16.311415 24503 net.cpp:139] Memory required for data: 1078800
I0428 19:40:16.311419 24503 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:16.311429 24503 net.cpp:86] Creating Layer ip3
I0428 19:40:16.311432 24503 net.cpp:408] ip3 <- ip2
I0428 19:40:16.311439 24503 net.cpp:382] ip3 -> ip3
I0428 19:40:16.311563 24503 net.cpp:124] Setting up ip3
I0428 19:40:16.311574 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.311578 24503 net.cpp:139] Memory required for data: 1082800
I0428 19:40:16.311590 24503 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:16.311596 24503 net.cpp:86] Creating Layer relu3
I0428 19:40:16.311599 24503 net.cpp:408] relu3 <- ip3
I0428 19:40:16.311604 24503 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:16.312515 24503 net.cpp:124] Setting up relu3
I0428 19:40:16.312530 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.312533 24503 net.cpp:139] Memory required for data: 1086800
I0428 19:40:16.312537 24503 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:16.312546 24503 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:16.312549 24503 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:16.312556 24503 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:16.312563 24503 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:16.312610 24503 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:16.312618 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.312623 24503 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:16.312625 24503 net.cpp:139] Memory required for data: 1094800
I0428 19:40:16.312629 24503 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:16.312636 24503 net.cpp:86] Creating Layer accuracy
I0428 19:40:16.312639 24503 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:16.312644 24503 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:16.312649 24503 net.cpp:382] accuracy -> accuracy
I0428 19:40:16.312657 24503 net.cpp:124] Setting up accuracy
I0428 19:40:16.312662 24503 net.cpp:131] Top shape: (1)
I0428 19:40:16.312665 24503 net.cpp:139] Memory required for data: 1094804
I0428 19:40:16.312669 24503 layer_factory.hpp:77] Creating layer loss
I0428 19:40:16.312675 24503 net.cpp:86] Creating Layer loss
I0428 19:40:16.312678 24503 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:16.312683 24503 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:16.312688 24503 net.cpp:382] loss -> loss
I0428 19:40:16.312698 24503 layer_factory.hpp:77] Creating layer loss
I0428 19:40:16.312995 24503 net.cpp:124] Setting up loss
I0428 19:40:16.313007 24503 net.cpp:131] Top shape: (1)
I0428 19:40:16.313011 24503 net.cpp:134]     with loss weight 1
I0428 19:40:16.313019 24503 net.cpp:139] Memory required for data: 1094808
I0428 19:40:16.313035 24503 net.cpp:200] loss needs backward computation.
I0428 19:40:16.313040 24503 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:16.313045 24503 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:16.313047 24503 net.cpp:200] relu3 needs backward computation.
I0428 19:40:16.313051 24503 net.cpp:200] ip3 needs backward computation.
I0428 19:40:16.313055 24503 net.cpp:200] relu2 needs backward computation.
I0428 19:40:16.313058 24503 net.cpp:200] ip2 needs backward computation.
I0428 19:40:16.313061 24503 net.cpp:200] relu1 needs backward computation.
I0428 19:40:16.313064 24503 net.cpp:200] ip1 needs backward computation.
I0428 19:40:16.313068 24503 net.cpp:200] pool1 needs backward computation.
I0428 19:40:16.313071 24503 net.cpp:200] conv1 needs backward computation.
I0428 19:40:16.313076 24503 net.cpp:200] pool0 needs backward computation.
I0428 19:40:16.313078 24503 net.cpp:200] conv0 needs backward computation.
I0428 19:40:16.313087 24503 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:16.313092 24503 net.cpp:202] mnist does not need backward computation.
I0428 19:40:16.313096 24503 net.cpp:244] This network produces output accuracy
I0428 19:40:16.313099 24503 net.cpp:244] This network produces output loss
I0428 19:40:16.313112 24503 net.cpp:257] Network initialization done.
I0428 19:40:16.313163 24503 solver.cpp:56] Solver scaffolding done.
I0428 19:40:16.313565 24503 caffe.cpp:248] Starting Optimization
I0428 19:40:16.313571 24503 solver.cpp:273] Solving LeNet
I0428 19:40:16.313575 24503 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:16.314442 24503 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:16.318090 24503 blocking_queue.cpp:49] Waiting for data
I0428 19:40:16.369958 24511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:16.370416 24503 solver.cpp:398]     Test net output #0: accuracy = 0.0891
I0428 19:40:16.370438 24503 solver.cpp:398]     Test net output #1: loss = 2.31009 (* 1 = 2.31009 loss)
I0428 19:40:16.372411 24503 solver.cpp:219] Iteration 0 (3.87137 iter/s, 0.0588032s/100 iters), loss = 2.32373
I0428 19:40:16.372438 24503 solver.cpp:238]     Train net output #0: loss = 2.32373 (* 1 = 2.32373 loss)
I0428 19:40:16.372452 24503 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:16.450721 24503 solver.cpp:219] Iteration 100 (1277.64 iter/s, 0.0782694s/100 iters), loss = 1.19869
I0428 19:40:16.450752 24503 solver.cpp:238]     Train net output #0: loss = 1.19869 (* 1 = 1.19869 loss)
I0428 19:40:16.450758 24503 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:16.526262 24503 solver.cpp:219] Iteration 200 (1324.49 iter/s, 0.0755005s/100 iters), loss = 0.894601
I0428 19:40:16.526291 24503 solver.cpp:238]     Train net output #0: loss = 0.894601 (* 1 = 0.894601 loss)
I0428 19:40:16.526299 24503 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:16.597959 24503 solver.cpp:219] Iteration 300 (1395.51 iter/s, 0.0716586s/100 iters), loss = 0.789296
I0428 19:40:16.597982 24503 solver.cpp:238]     Train net output #0: loss = 0.789296 (* 1 = 0.789296 loss)
I0428 19:40:16.597988 24503 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:16.665428 24503 solver.cpp:219] Iteration 400 (1482.85 iter/s, 0.0674376s/100 iters), loss = 0.64074
I0428 19:40:16.665452 24503 solver.cpp:238]     Train net output #0: loss = 0.64074 (* 1 = 0.64074 loss)
I0428 19:40:16.665457 24503 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:16.733355 24503 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:16.807534 24511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:16.807996 24503 solver.cpp:398]     Test net output #0: accuracy = 0.7395
I0428 19:40:16.808032 24503 solver.cpp:398]     Test net output #1: loss = 0.728492 (* 1 = 0.728492 loss)
I0428 19:40:16.808795 24503 solver.cpp:219] Iteration 500 (697.68 iter/s, 0.143332s/100 iters), loss = 0.78307
I0428 19:40:16.808845 24503 solver.cpp:238]     Train net output #0: loss = 0.78307 (* 1 = 0.78307 loss)
I0428 19:40:16.808878 24503 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:16.881285 24503 solver.cpp:219] Iteration 600 (1380.55 iter/s, 0.0724347s/100 iters), loss = 0.755674
I0428 19:40:16.881326 24503 solver.cpp:238]     Train net output #0: loss = 0.755674 (* 1 = 0.755674 loss)
I0428 19:40:16.881333 24503 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:16.951545 24503 solver.cpp:219] Iteration 700 (1424.66 iter/s, 0.0701921s/100 iters), loss = 0.674796
I0428 19:40:16.951599 24503 solver.cpp:238]     Train net output #0: loss = 0.674796 (* 1 = 0.674796 loss)
I0428 19:40:16.951606 24503 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:17.020169 24503 solver.cpp:219] Iteration 800 (1458.58 iter/s, 0.0685599s/100 iters), loss = 0.822696
I0428 19:40:17.020210 24503 solver.cpp:238]     Train net output #0: loss = 0.822696 (* 1 = 0.822696 loss)
I0428 19:40:17.020215 24503 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:17.088945 24503 solver.cpp:219] Iteration 900 (1454.82 iter/s, 0.068737s/100 iters), loss = 0.425877
I0428 19:40:17.088985 24503 solver.cpp:238]     Train net output #0: loss = 0.425877 (* 1 = 0.425877 loss)
I0428 19:40:17.088991 24503 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:17.112073 24510 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:17.159019 24503 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:17.159703 24503 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:17.160208 24503 solver.cpp:311] Iteration 1000, loss = 0.445722
I0428 19:40:17.160223 24503 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:17.234597 24511 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:17.235033 24503 solver.cpp:398]     Test net output #0: accuracy = 0.8475
I0428 19:40:17.235067 24503 solver.cpp:398]     Test net output #1: loss = 0.430646 (* 1 = 0.430646 loss)
I0428 19:40:17.235074 24503 solver.cpp:316] Optimization Done.
I0428 19:40:17.235076 24503 caffe.cpp:259] Optimization Done.
