I0428 19:38:27.513089 24021 caffe.cpp:218] Using GPUs 0
I0428 19:38:27.548625 24021 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:38:28.065716 24021 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test274.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:38:28.065881 24021 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test274.prototxt
I0428 19:38:28.066231 24021 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:38:28.066251 24021 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:38:28.066341 24021 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:38:28.066439 24021 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:28.066579 24021 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:38:28.066612 24021 net.cpp:86] Creating Layer mnist
I0428 19:38:28.066627 24021 net.cpp:382] mnist -> data
I0428 19:38:28.066658 24021 net.cpp:382] mnist -> label
I0428 19:38:28.067867 24021 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:38:28.070353 24021 net.cpp:124] Setting up mnist
I0428 19:38:28.070372 24021 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:38:28.070382 24021 net.cpp:131] Top shape: 64 (64)
I0428 19:38:28.070389 24021 net.cpp:139] Memory required for data: 200960
I0428 19:38:28.070399 24021 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:28.070425 24021 net.cpp:86] Creating Layer conv0
I0428 19:38:28.070435 24021 net.cpp:408] conv0 <- data
I0428 19:38:28.070454 24021 net.cpp:382] conv0 -> conv0
I0428 19:38:28.331854 24021 net.cpp:124] Setting up conv0
I0428 19:38:28.331882 24021 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:38:28.331887 24021 net.cpp:139] Memory required for data: 495872
I0428 19:38:28.331923 24021 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:28.331954 24021 net.cpp:86] Creating Layer pool0
I0428 19:38:28.331967 24021 net.cpp:408] pool0 <- conv0
I0428 19:38:28.331977 24021 net.cpp:382] pool0 -> pool0
I0428 19:38:28.332034 24021 net.cpp:124] Setting up pool0
I0428 19:38:28.332043 24021 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:38:28.332065 24021 net.cpp:139] Memory required for data: 569600
I0428 19:38:28.332072 24021 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:28.332087 24021 net.cpp:86] Creating Layer conv1
I0428 19:38:28.332093 24021 net.cpp:408] conv1 <- pool0
I0428 19:38:28.332103 24021 net.cpp:382] conv1 -> conv1
I0428 19:38:28.334132 24021 net.cpp:124] Setting up conv1
I0428 19:38:28.334163 24021 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:38:28.334168 24021 net.cpp:139] Memory required for data: 602368
I0428 19:38:28.334183 24021 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:28.334195 24021 net.cpp:86] Creating Layer pool1
I0428 19:38:28.334200 24021 net.cpp:408] pool1 <- conv1
I0428 19:38:28.334210 24021 net.cpp:382] pool1 -> pool1
I0428 19:38:28.334259 24021 net.cpp:124] Setting up pool1
I0428 19:38:28.334281 24021 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:38:28.334286 24021 net.cpp:139] Memory required for data: 610560
I0428 19:38:28.334290 24021 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:28.334302 24021 net.cpp:86] Creating Layer ip1
I0428 19:38:28.334311 24021 net.cpp:408] ip1 <- pool1
I0428 19:38:28.334319 24021 net.cpp:382] ip1 -> ip1
I0428 19:38:28.334419 24021 net.cpp:124] Setting up ip1
I0428 19:38:28.334442 24021 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:28.334446 24021 net.cpp:139] Memory required for data: 613120
I0428 19:38:28.334457 24021 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:28.334468 24021 net.cpp:86] Creating Layer relu1
I0428 19:38:28.334475 24021 net.cpp:408] relu1 <- ip1
I0428 19:38:28.334481 24021 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:28.334661 24021 net.cpp:124] Setting up relu1
I0428 19:38:28.334673 24021 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:28.334677 24021 net.cpp:139] Memory required for data: 615680
I0428 19:38:28.334682 24021 layer_factory.hpp:77] Creating layer loss
I0428 19:38:28.334691 24021 net.cpp:86] Creating Layer loss
I0428 19:38:28.334695 24021 net.cpp:408] loss <- ip1
I0428 19:38:28.334702 24021 net.cpp:408] loss <- label
I0428 19:38:28.334708 24021 net.cpp:382] loss -> loss
I0428 19:38:28.334730 24021 layer_factory.hpp:77] Creating layer loss
I0428 19:38:28.335618 24021 net.cpp:124] Setting up loss
I0428 19:38:28.335631 24021 net.cpp:131] Top shape: (1)
I0428 19:38:28.335635 24021 net.cpp:134]     with loss weight 1
I0428 19:38:28.335654 24021 net.cpp:139] Memory required for data: 615684
I0428 19:38:28.335660 24021 net.cpp:200] loss needs backward computation.
I0428 19:38:28.335666 24021 net.cpp:200] relu1 needs backward computation.
I0428 19:38:28.335670 24021 net.cpp:200] ip1 needs backward computation.
I0428 19:38:28.335675 24021 net.cpp:200] pool1 needs backward computation.
I0428 19:38:28.335680 24021 net.cpp:200] conv1 needs backward computation.
I0428 19:38:28.335683 24021 net.cpp:200] pool0 needs backward computation.
I0428 19:38:28.335688 24021 net.cpp:200] conv0 needs backward computation.
I0428 19:38:28.335695 24021 net.cpp:202] mnist does not need backward computation.
I0428 19:38:28.335700 24021 net.cpp:244] This network produces output loss
I0428 19:38:28.335711 24021 net.cpp:257] Network initialization done.
I0428 19:38:28.335973 24021 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test274.prototxt
I0428 19:38:28.336004 24021 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:38:28.336079 24021 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:38:28.336177 24021 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:28.336232 24021 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:38:28.336251 24021 net.cpp:86] Creating Layer mnist
I0428 19:38:28.336257 24021 net.cpp:382] mnist -> data
I0428 19:38:28.336268 24021 net.cpp:382] mnist -> label
I0428 19:38:28.336467 24021 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:38:28.338613 24021 net.cpp:124] Setting up mnist
I0428 19:38:28.338644 24021 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:38:28.338651 24021 net.cpp:131] Top shape: 100 (100)
I0428 19:38:28.338656 24021 net.cpp:139] Memory required for data: 314000
I0428 19:38:28.338661 24021 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:38:28.338673 24021 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:38:28.338680 24021 net.cpp:408] label_mnist_1_split <- label
I0428 19:38:28.338702 24021 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:38:28.338712 24021 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:38:28.338794 24021 net.cpp:124] Setting up label_mnist_1_split
I0428 19:38:28.338804 24021 net.cpp:131] Top shape: 100 (100)
I0428 19:38:28.338809 24021 net.cpp:131] Top shape: 100 (100)
I0428 19:38:28.338814 24021 net.cpp:139] Memory required for data: 314800
I0428 19:38:28.338819 24021 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:28.338848 24021 net.cpp:86] Creating Layer conv0
I0428 19:38:28.338855 24021 net.cpp:408] conv0 <- data
I0428 19:38:28.338865 24021 net.cpp:382] conv0 -> conv0
I0428 19:38:28.339685 24021 net.cpp:124] Setting up conv0
I0428 19:38:28.339699 24021 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:38:28.339720 24021 net.cpp:139] Memory required for data: 775600
I0428 19:38:28.339735 24021 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:28.339745 24021 net.cpp:86] Creating Layer pool0
I0428 19:38:28.339752 24021 net.cpp:408] pool0 <- conv0
I0428 19:38:28.339761 24021 net.cpp:382] pool0 -> pool0
I0428 19:38:28.339809 24021 net.cpp:124] Setting up pool0
I0428 19:38:28.339818 24021 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:38:28.339823 24021 net.cpp:139] Memory required for data: 890800
I0428 19:38:28.339828 24021 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:28.339843 24021 net.cpp:86] Creating Layer conv1
I0428 19:38:28.339849 24021 net.cpp:408] conv1 <- pool0
I0428 19:38:28.339860 24021 net.cpp:382] conv1 -> conv1
I0428 19:38:28.341555 24021 net.cpp:124] Setting up conv1
I0428 19:38:28.341570 24021 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:38:28.341576 24021 net.cpp:139] Memory required for data: 942000
I0428 19:38:28.341589 24021 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:28.341599 24021 net.cpp:86] Creating Layer pool1
I0428 19:38:28.341617 24021 net.cpp:408] pool1 <- conv1
I0428 19:38:28.341629 24021 net.cpp:382] pool1 -> pool1
I0428 19:38:28.341673 24021 net.cpp:124] Setting up pool1
I0428 19:38:28.341683 24021 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:38:28.341688 24021 net.cpp:139] Memory required for data: 954800
I0428 19:38:28.341693 24021 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:28.341704 24021 net.cpp:86] Creating Layer ip1
I0428 19:38:28.341711 24021 net.cpp:408] ip1 <- pool1
I0428 19:38:28.341719 24021 net.cpp:382] ip1 -> ip1
I0428 19:38:28.341873 24021 net.cpp:124] Setting up ip1
I0428 19:38:28.341882 24021 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:28.341887 24021 net.cpp:139] Memory required for data: 958800
I0428 19:38:28.341899 24021 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:28.341909 24021 net.cpp:86] Creating Layer relu1
I0428 19:38:28.341917 24021 net.cpp:408] relu1 <- ip1
I0428 19:38:28.341923 24021 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:28.342730 24021 net.cpp:124] Setting up relu1
I0428 19:38:28.342744 24021 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:28.342749 24021 net.cpp:139] Memory required for data: 962800
I0428 19:38:28.342766 24021 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:38:28.342777 24021 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:38:28.342782 24021 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:38:28.342792 24021 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:38:28.342803 24021 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:38:28.342939 24021 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:38:28.342948 24021 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:28.342954 24021 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:28.342959 24021 net.cpp:139] Memory required for data: 970800
I0428 19:38:28.342965 24021 layer_factory.hpp:77] Creating layer accuracy
I0428 19:38:28.342980 24021 net.cpp:86] Creating Layer accuracy
I0428 19:38:28.342988 24021 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:38:28.342993 24021 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:38:28.343001 24021 net.cpp:382] accuracy -> accuracy
I0428 19:38:28.343013 24021 net.cpp:124] Setting up accuracy
I0428 19:38:28.343020 24021 net.cpp:131] Top shape: (1)
I0428 19:38:28.343025 24021 net.cpp:139] Memory required for data: 970804
I0428 19:38:28.343030 24021 layer_factory.hpp:77] Creating layer loss
I0428 19:38:28.343039 24021 net.cpp:86] Creating Layer loss
I0428 19:38:28.343045 24021 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:38:28.343051 24021 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:38:28.343058 24021 net.cpp:382] loss -> loss
I0428 19:38:28.343067 24021 layer_factory.hpp:77] Creating layer loss
I0428 19:38:28.343355 24021 net.cpp:124] Setting up loss
I0428 19:38:28.343365 24021 net.cpp:131] Top shape: (1)
I0428 19:38:28.343370 24021 net.cpp:134]     with loss weight 1
I0428 19:38:28.343380 24021 net.cpp:139] Memory required for data: 970808
I0428 19:38:28.343385 24021 net.cpp:200] loss needs backward computation.
I0428 19:38:28.343391 24021 net.cpp:202] accuracy does not need backward computation.
I0428 19:38:28.343397 24021 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:38:28.343402 24021 net.cpp:200] relu1 needs backward computation.
I0428 19:38:28.343411 24021 net.cpp:200] ip1 needs backward computation.
I0428 19:38:28.343416 24021 net.cpp:200] pool1 needs backward computation.
I0428 19:38:28.343421 24021 net.cpp:200] conv1 needs backward computation.
I0428 19:38:28.343426 24021 net.cpp:200] pool0 needs backward computation.
I0428 19:38:28.343431 24021 net.cpp:200] conv0 needs backward computation.
I0428 19:38:28.343437 24021 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:38:28.343443 24021 net.cpp:202] mnist does not need backward computation.
I0428 19:38:28.343447 24021 net.cpp:244] This network produces output accuracy
I0428 19:38:28.343453 24021 net.cpp:244] This network produces output loss
I0428 19:38:28.343468 24021 net.cpp:257] Network initialization done.
I0428 19:38:28.343515 24021 solver.cpp:56] Solver scaffolding done.
I0428 19:38:28.343744 24021 caffe.cpp:248] Starting Optimization
I0428 19:38:28.343751 24021 solver.cpp:273] Solving LeNet
I0428 19:38:28.343756 24021 solver.cpp:274] Learning Rate Policy: inv
I0428 19:38:28.344586 24021 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:38:28.346138 24021 blocking_queue.cpp:49] Waiting for data
I0428 19:38:28.414489 24028 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:28.414862 24021 solver.cpp:398]     Test net output #0: accuracy = 0.1214
I0428 19:38:28.414883 24021 solver.cpp:398]     Test net output #1: loss = 2.31917 (* 1 = 2.31917 loss)
I0428 19:38:28.416442 24021 solver.cpp:219] Iteration 0 (0 iter/s, 0.0726528s/100 iters), loss = 2.35305
I0428 19:38:28.416481 24021 solver.cpp:238]     Train net output #0: loss = 2.35305 (* 1 = 2.35305 loss)
I0428 19:38:28.416499 24021 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:38:28.473431 24021 solver.cpp:219] Iteration 100 (1756.02 iter/s, 0.0569469s/100 iters), loss = 1.63663
I0428 19:38:28.473484 24021 solver.cpp:238]     Train net output #0: loss = 1.63663 (* 1 = 1.63663 loss)
I0428 19:38:28.473500 24021 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:38:28.530925 24021 solver.cpp:219] Iteration 200 (1740.53 iter/s, 0.0574539s/100 iters), loss = 0.847135
I0428 19:38:28.530959 24021 solver.cpp:238]     Train net output #0: loss = 0.847135 (* 1 = 0.847135 loss)
I0428 19:38:28.530989 24021 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:38:28.584267 24021 solver.cpp:219] Iteration 300 (1876.02 iter/s, 0.0533044s/100 iters), loss = 1.11768
I0428 19:38:28.584293 24021 solver.cpp:238]     Train net output #0: loss = 1.11768 (* 1 = 1.11768 loss)
I0428 19:38:28.584303 24021 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:38:28.637681 24021 solver.cpp:219] Iteration 400 (1873.29 iter/s, 0.0533821s/100 iters), loss = 0.692877
I0428 19:38:28.637707 24021 solver.cpp:238]     Train net output #0: loss = 0.692877 (* 1 = 0.692877 loss)
I0428 19:38:28.637732 24021 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:38:28.690681 24021 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:38:28.761848 24028 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:28.762244 24021 solver.cpp:398]     Test net output #0: accuracy = 0.7323
I0428 19:38:28.762264 24021 solver.cpp:398]     Test net output #1: loss = 0.741567 (* 1 = 0.741567 loss)
I0428 19:38:28.762842 24021 solver.cpp:219] Iteration 500 (799.19 iter/s, 0.125127s/100 iters), loss = 0.628729
I0428 19:38:28.762867 24021 solver.cpp:238]     Train net output #0: loss = 0.628729 (* 1 = 0.628729 loss)
I0428 19:38:28.762883 24021 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:38:28.823911 24021 solver.cpp:219] Iteration 600 (1638.47 iter/s, 0.0610324s/100 iters), loss = 0.67835
I0428 19:38:28.823957 24021 solver.cpp:238]     Train net output #0: loss = 0.67835 (* 1 = 0.67835 loss)
I0428 19:38:28.823966 24021 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:38:28.881526 24021 solver.cpp:219] Iteration 700 (1737.28 iter/s, 0.0575613s/100 iters), loss = 0.380112
I0428 19:38:28.881554 24021 solver.cpp:238]     Train net output #0: loss = 0.380112 (* 1 = 0.380112 loss)
I0428 19:38:28.881561 24021 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:38:28.939131 24021 solver.cpp:219] Iteration 800 (1737.1 iter/s, 0.0575672s/100 iters), loss = 0.494858
I0428 19:38:28.939159 24021 solver.cpp:238]     Train net output #0: loss = 0.494858 (* 1 = 0.494858 loss)
I0428 19:38:28.939167 24021 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:38:28.998656 24021 solver.cpp:219] Iteration 900 (1681 iter/s, 0.0594883s/100 iters), loss = 0.415212
I0428 19:38:28.998684 24021 solver.cpp:238]     Train net output #0: loss = 0.415212 (* 1 = 0.415212 loss)
I0428 19:38:28.998692 24021 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:38:29.018980 24027 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:29.055480 24021 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:38:29.056015 24021 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:38:29.056349 24021 solver.cpp:311] Iteration 1000, loss = 0.293249
I0428 19:38:29.056365 24021 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:38:29.115576 24028 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:29.116057 24021 solver.cpp:398]     Test net output #0: accuracy = 0.9325
I0428 19:38:29.116094 24021 solver.cpp:398]     Test net output #1: loss = 0.234034 (* 1 = 0.234034 loss)
I0428 19:38:29.116101 24021 solver.cpp:316] Optimization Done.
I0428 19:38:29.116106 24021 caffe.cpp:259] Optimization Done.
