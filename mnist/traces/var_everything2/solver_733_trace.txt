I0428 19:55:28.544852 28188 caffe.cpp:218] Using GPUs 0
I0428 19:55:28.576071 28188 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:29.033048 28188 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test733.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:29.033205 28188 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test733.prototxt
I0428 19:55:29.033570 28188 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:29.033601 28188 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:29.033684 28188 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:29.033748 28188 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:29.033844 28188 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:29.033865 28188 net.cpp:86] Creating Layer mnist
I0428 19:55:29.033872 28188 net.cpp:382] mnist -> data
I0428 19:55:29.033891 28188 net.cpp:382] mnist -> label
I0428 19:55:29.034808 28188 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:29.037163 28188 net.cpp:124] Setting up mnist
I0428 19:55:29.037194 28188 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:29.037199 28188 net.cpp:131] Top shape: 64 (64)
I0428 19:55:29.037201 28188 net.cpp:139] Memory required for data: 200960
I0428 19:55:29.037209 28188 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:29.037246 28188 net.cpp:86] Creating Layer conv0
I0428 19:55:29.037264 28188 net.cpp:408] conv0 <- data
I0428 19:55:29.037277 28188 net.cpp:382] conv0 -> conv0
I0428 19:55:29.277974 28188 net.cpp:124] Setting up conv0
I0428 19:55:29.278017 28188 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:29.278022 28188 net.cpp:139] Memory required for data: 938240
I0428 19:55:29.278036 28188 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:29.278050 28188 net.cpp:86] Creating Layer pool0
I0428 19:55:29.278054 28188 net.cpp:408] pool0 <- conv0
I0428 19:55:29.278075 28188 net.cpp:382] pool0 -> pool0
I0428 19:55:29.278122 28188 net.cpp:124] Setting up pool0
I0428 19:55:29.278133 28188 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:29.278137 28188 net.cpp:139] Memory required for data: 1122560
I0428 19:55:29.278141 28188 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:29.278151 28188 net.cpp:86] Creating Layer conv1
I0428 19:55:29.278154 28188 net.cpp:408] conv1 <- pool0
I0428 19:55:29.278159 28188 net.cpp:382] conv1 -> conv1
I0428 19:55:29.280963 28188 net.cpp:124] Setting up conv1
I0428 19:55:29.280994 28188 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:29.280998 28188 net.cpp:139] Memory required for data: 2760960
I0428 19:55:29.281013 28188 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:29.281020 28188 net.cpp:86] Creating Layer pool1
I0428 19:55:29.281024 28188 net.cpp:408] pool1 <- conv1
I0428 19:55:29.281030 28188 net.cpp:382] pool1 -> pool1
I0428 19:55:29.281086 28188 net.cpp:124] Setting up pool1
I0428 19:55:29.281097 28188 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:29.281101 28188 net.cpp:139] Memory required for data: 3170560
I0428 19:55:29.281105 28188 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:29.281112 28188 net.cpp:86] Creating Layer ip1
I0428 19:55:29.281116 28188 net.cpp:408] ip1 <- pool1
I0428 19:55:29.281121 28188 net.cpp:382] ip1 -> ip1
I0428 19:55:29.282577 28188 net.cpp:124] Setting up ip1
I0428 19:55:29.282589 28188 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:29.282609 28188 net.cpp:139] Memory required for data: 3183360
I0428 19:55:29.282618 28188 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:29.282624 28188 net.cpp:86] Creating Layer relu1
I0428 19:55:29.282627 28188 net.cpp:408] relu1 <- ip1
I0428 19:55:29.282632 28188 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:29.282806 28188 net.cpp:124] Setting up relu1
I0428 19:55:29.282815 28188 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:29.282819 28188 net.cpp:139] Memory required for data: 3196160
I0428 19:55:29.282822 28188 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:29.282829 28188 net.cpp:86] Creating Layer ip2
I0428 19:55:29.282831 28188 net.cpp:408] ip2 <- ip1
I0428 19:55:29.282836 28188 net.cpp:382] ip2 -> ip2
I0428 19:55:29.282956 28188 net.cpp:124] Setting up ip2
I0428 19:55:29.282964 28188 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:29.282968 28188 net.cpp:139] Memory required for data: 3198720
I0428 19:55:29.282974 28188 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:29.282979 28188 net.cpp:86] Creating Layer relu2
I0428 19:55:29.282982 28188 net.cpp:408] relu2 <- ip2
I0428 19:55:29.282986 28188 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:29.283742 28188 net.cpp:124] Setting up relu2
I0428 19:55:29.283756 28188 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:29.283776 28188 net.cpp:139] Memory required for data: 3201280
I0428 19:55:29.283778 28188 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:29.283787 28188 net.cpp:86] Creating Layer ip3
I0428 19:55:29.283790 28188 net.cpp:408] ip3 <- ip2
I0428 19:55:29.283797 28188 net.cpp:382] ip3 -> ip3
I0428 19:55:29.283897 28188 net.cpp:124] Setting up ip3
I0428 19:55:29.283905 28188 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:29.283910 28188 net.cpp:139] Memory required for data: 3203840
I0428 19:55:29.283917 28188 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:29.283922 28188 net.cpp:86] Creating Layer relu3
I0428 19:55:29.283926 28188 net.cpp:408] relu3 <- ip3
I0428 19:55:29.283931 28188 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:29.284106 28188 net.cpp:124] Setting up relu3
I0428 19:55:29.284114 28188 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:29.284117 28188 net.cpp:139] Memory required for data: 3206400
I0428 19:55:29.284121 28188 layer_factory.hpp:77] Creating layer loss
I0428 19:55:29.284126 28188 net.cpp:86] Creating Layer loss
I0428 19:55:29.284129 28188 net.cpp:408] loss <- ip3
I0428 19:55:29.284134 28188 net.cpp:408] loss <- label
I0428 19:55:29.284139 28188 net.cpp:382] loss -> loss
I0428 19:55:29.284157 28188 layer_factory.hpp:77] Creating layer loss
I0428 19:55:29.284409 28188 net.cpp:124] Setting up loss
I0428 19:55:29.284418 28188 net.cpp:131] Top shape: (1)
I0428 19:55:29.284422 28188 net.cpp:134]     with loss weight 1
I0428 19:55:29.284435 28188 net.cpp:139] Memory required for data: 3206404
I0428 19:55:29.284440 28188 net.cpp:200] loss needs backward computation.
I0428 19:55:29.284442 28188 net.cpp:200] relu3 needs backward computation.
I0428 19:55:29.284446 28188 net.cpp:200] ip3 needs backward computation.
I0428 19:55:29.284449 28188 net.cpp:200] relu2 needs backward computation.
I0428 19:55:29.284451 28188 net.cpp:200] ip2 needs backward computation.
I0428 19:55:29.284454 28188 net.cpp:200] relu1 needs backward computation.
I0428 19:55:29.284457 28188 net.cpp:200] ip1 needs backward computation.
I0428 19:55:29.284461 28188 net.cpp:200] pool1 needs backward computation.
I0428 19:55:29.284463 28188 net.cpp:200] conv1 needs backward computation.
I0428 19:55:29.284467 28188 net.cpp:200] pool0 needs backward computation.
I0428 19:55:29.284471 28188 net.cpp:200] conv0 needs backward computation.
I0428 19:55:29.284473 28188 net.cpp:202] mnist does not need backward computation.
I0428 19:55:29.284476 28188 net.cpp:244] This network produces output loss
I0428 19:55:29.284485 28188 net.cpp:257] Network initialization done.
I0428 19:55:29.284890 28188 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test733.prototxt
I0428 19:55:29.284919 28188 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:29.285017 28188 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:29.285102 28188 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:29.285147 28188 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:29.285166 28188 net.cpp:86] Creating Layer mnist
I0428 19:55:29.285171 28188 net.cpp:382] mnist -> data
I0428 19:55:29.285178 28188 net.cpp:382] mnist -> label
I0428 19:55:29.285270 28188 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:29.286420 28188 net.cpp:124] Setting up mnist
I0428 19:55:29.286449 28188 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:29.286454 28188 net.cpp:131] Top shape: 100 (100)
I0428 19:55:29.286458 28188 net.cpp:139] Memory required for data: 314000
I0428 19:55:29.286463 28188 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:29.286468 28188 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:29.286473 28188 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:29.286478 28188 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:29.286484 28188 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:29.286551 28188 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:29.286556 28188 net.cpp:131] Top shape: 100 (100)
I0428 19:55:29.286561 28188 net.cpp:131] Top shape: 100 (100)
I0428 19:55:29.286563 28188 net.cpp:139] Memory required for data: 314800
I0428 19:55:29.286566 28188 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:29.286574 28188 net.cpp:86] Creating Layer conv0
I0428 19:55:29.286577 28188 net.cpp:408] conv0 <- data
I0428 19:55:29.286582 28188 net.cpp:382] conv0 -> conv0
I0428 19:55:29.288451 28188 net.cpp:124] Setting up conv0
I0428 19:55:29.288482 28188 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:29.288486 28188 net.cpp:139] Memory required for data: 1466800
I0428 19:55:29.288496 28188 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:29.288503 28188 net.cpp:86] Creating Layer pool0
I0428 19:55:29.288507 28188 net.cpp:408] pool0 <- conv0
I0428 19:55:29.288512 28188 net.cpp:382] pool0 -> pool0
I0428 19:55:29.288553 28188 net.cpp:124] Setting up pool0
I0428 19:55:29.288560 28188 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:29.288563 28188 net.cpp:139] Memory required for data: 1754800
I0428 19:55:29.288566 28188 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:29.288575 28188 net.cpp:86] Creating Layer conv1
I0428 19:55:29.288579 28188 net.cpp:408] conv1 <- pool0
I0428 19:55:29.288585 28188 net.cpp:382] conv1 -> conv1
I0428 19:55:29.290340 28188 net.cpp:124] Setting up conv1
I0428 19:55:29.290354 28188 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:29.290359 28188 net.cpp:139] Memory required for data: 4314800
I0428 19:55:29.290369 28188 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:29.290376 28188 net.cpp:86] Creating Layer pool1
I0428 19:55:29.290380 28188 net.cpp:408] pool1 <- conv1
I0428 19:55:29.290396 28188 net.cpp:382] pool1 -> pool1
I0428 19:55:29.290437 28188 net.cpp:124] Setting up pool1
I0428 19:55:29.290443 28188 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:29.290447 28188 net.cpp:139] Memory required for data: 4954800
I0428 19:55:29.290451 28188 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:29.290457 28188 net.cpp:86] Creating Layer ip1
I0428 19:55:29.290467 28188 net.cpp:408] ip1 <- pool1
I0428 19:55:29.290472 28188 net.cpp:382] ip1 -> ip1
I0428 19:55:29.291059 28188 net.cpp:124] Setting up ip1
I0428 19:55:29.291067 28188 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:29.291080 28188 net.cpp:139] Memory required for data: 4974800
I0428 19:55:29.291088 28188 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:29.291095 28188 net.cpp:86] Creating Layer relu1
I0428 19:55:29.291097 28188 net.cpp:408] relu1 <- ip1
I0428 19:55:29.291118 28188 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:29.291378 28188 net.cpp:124] Setting up relu1
I0428 19:55:29.291388 28188 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:29.291390 28188 net.cpp:139] Memory required for data: 4994800
I0428 19:55:29.291393 28188 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:29.291401 28188 net.cpp:86] Creating Layer ip2
I0428 19:55:29.291405 28188 net.cpp:408] ip2 <- ip1
I0428 19:55:29.291411 28188 net.cpp:382] ip2 -> ip2
I0428 19:55:29.291523 28188 net.cpp:124] Setting up ip2
I0428 19:55:29.291532 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.291534 28188 net.cpp:139] Memory required for data: 4998800
I0428 19:55:29.291539 28188 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:29.291544 28188 net.cpp:86] Creating Layer relu2
I0428 19:55:29.291548 28188 net.cpp:408] relu2 <- ip2
I0428 19:55:29.291551 28188 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:29.291733 28188 net.cpp:124] Setting up relu2
I0428 19:55:29.291741 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.291744 28188 net.cpp:139] Memory required for data: 5002800
I0428 19:55:29.291754 28188 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:29.291759 28188 net.cpp:86] Creating Layer ip3
I0428 19:55:29.291762 28188 net.cpp:408] ip3 <- ip2
I0428 19:55:29.291774 28188 net.cpp:382] ip3 -> ip3
I0428 19:55:29.291891 28188 net.cpp:124] Setting up ip3
I0428 19:55:29.291898 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.291901 28188 net.cpp:139] Memory required for data: 5006800
I0428 19:55:29.291911 28188 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:29.291915 28188 net.cpp:86] Creating Layer relu3
I0428 19:55:29.291919 28188 net.cpp:408] relu3 <- ip3
I0428 19:55:29.291924 28188 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:29.292742 28188 net.cpp:124] Setting up relu3
I0428 19:55:29.292755 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.292758 28188 net.cpp:139] Memory required for data: 5010800
I0428 19:55:29.292762 28188 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:29.292768 28188 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:29.292770 28188 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:29.292778 28188 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:29.292783 28188 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:29.292914 28188 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:29.292922 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.292927 28188 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:29.292930 28188 net.cpp:139] Memory required for data: 5018800
I0428 19:55:29.292933 28188 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:29.292943 28188 net.cpp:86] Creating Layer accuracy
I0428 19:55:29.292948 28188 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:29.292958 28188 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:29.292963 28188 net.cpp:382] accuracy -> accuracy
I0428 19:55:29.292973 28188 net.cpp:124] Setting up accuracy
I0428 19:55:29.292976 28188 net.cpp:131] Top shape: (1)
I0428 19:55:29.292979 28188 net.cpp:139] Memory required for data: 5018804
I0428 19:55:29.292984 28188 layer_factory.hpp:77] Creating layer loss
I0428 19:55:29.292989 28188 net.cpp:86] Creating Layer loss
I0428 19:55:29.292991 28188 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:29.292995 28188 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:29.292999 28188 net.cpp:382] loss -> loss
I0428 19:55:29.293011 28188 layer_factory.hpp:77] Creating layer loss
I0428 19:55:29.293292 28188 net.cpp:124] Setting up loss
I0428 19:55:29.293303 28188 net.cpp:131] Top shape: (1)
I0428 19:55:29.293306 28188 net.cpp:134]     with loss weight 1
I0428 19:55:29.293323 28188 net.cpp:139] Memory required for data: 5018808
I0428 19:55:29.293326 28188 net.cpp:200] loss needs backward computation.
I0428 19:55:29.293337 28188 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:29.293340 28188 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:29.293344 28188 net.cpp:200] relu3 needs backward computation.
I0428 19:55:29.293346 28188 net.cpp:200] ip3 needs backward computation.
I0428 19:55:29.293361 28188 net.cpp:200] relu2 needs backward computation.
I0428 19:55:29.293365 28188 net.cpp:200] ip2 needs backward computation.
I0428 19:55:29.293366 28188 net.cpp:200] relu1 needs backward computation.
I0428 19:55:29.293370 28188 net.cpp:200] ip1 needs backward computation.
I0428 19:55:29.293372 28188 net.cpp:200] pool1 needs backward computation.
I0428 19:55:29.293375 28188 net.cpp:200] conv1 needs backward computation.
I0428 19:55:29.293380 28188 net.cpp:200] pool0 needs backward computation.
I0428 19:55:29.293382 28188 net.cpp:200] conv0 needs backward computation.
I0428 19:55:29.293385 28188 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:29.293390 28188 net.cpp:202] mnist does not need backward computation.
I0428 19:55:29.293392 28188 net.cpp:244] This network produces output accuracy
I0428 19:55:29.293395 28188 net.cpp:244] This network produces output loss
I0428 19:55:29.293407 28188 net.cpp:257] Network initialization done.
I0428 19:55:29.293455 28188 solver.cpp:56] Solver scaffolding done.
I0428 19:55:29.293800 28188 caffe.cpp:248] Starting Optimization
I0428 19:55:29.293807 28188 solver.cpp:273] Solving LeNet
I0428 19:55:29.293828 28188 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:29.294675 28188 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:29.300062 28188 blocking_queue.cpp:49] Waiting for data
I0428 19:55:29.370193 28195 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:29.370826 28188 solver.cpp:398]     Test net output #0: accuracy = 0.126
I0428 19:55:29.370846 28188 solver.cpp:398]     Test net output #1: loss = 2.29242 (* 1 = 2.29242 loss)
I0428 19:55:29.374677 28188 solver.cpp:219] Iteration 0 (0 iter/s, 0.0808233s/100 iters), loss = 2.29236
I0428 19:55:29.374701 28188 solver.cpp:238]     Train net output #0: loss = 2.29236 (* 1 = 2.29236 loss)
I0428 19:55:29.374727 28188 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:29.520256 28188 solver.cpp:219] Iteration 100 (687.096 iter/s, 0.14554s/100 iters), loss = 1.23245
I0428 19:55:29.520279 28188 solver.cpp:238]     Train net output #0: loss = 1.23245 (* 1 = 1.23245 loss)
I0428 19:55:29.520285 28188 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:29.667204 28188 solver.cpp:219] Iteration 200 (680.674 iter/s, 0.146913s/100 iters), loss = 0.825544
I0428 19:55:29.667228 28188 solver.cpp:238]     Train net output #0: loss = 0.825544 (* 1 = 0.825544 loss)
I0428 19:55:29.667233 28188 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:29.814573 28188 solver.cpp:219] Iteration 300 (678.743 iter/s, 0.147331s/100 iters), loss = 0.794384
I0428 19:55:29.814595 28188 solver.cpp:238]     Train net output #0: loss = 0.794384 (* 1 = 0.794384 loss)
I0428 19:55:29.814601 28188 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:29.964303 28188 solver.cpp:219] Iteration 400 (668.023 iter/s, 0.149696s/100 iters), loss = 0.674626
I0428 19:55:29.964326 28188 solver.cpp:238]     Train net output #0: loss = 0.674626 (* 1 = 0.674626 loss)
I0428 19:55:29.964331 28188 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:30.108968 28188 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:30.164326 28195 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:30.165083 28188 solver.cpp:398]     Test net output #0: accuracy = 0.6576
I0428 19:55:30.165102 28188 solver.cpp:398]     Test net output #1: loss = 0.836718 (* 1 = 0.836718 loss)
I0428 19:55:30.166661 28188 solver.cpp:219] Iteration 500 (494.267 iter/s, 0.20232s/100 iters), loss = 0.774472
I0428 19:55:30.166683 28188 solver.cpp:238]     Train net output #0: loss = 0.774472 (* 1 = 0.774472 loss)
I0428 19:55:30.166704 28188 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:30.319452 28188 solver.cpp:219] Iteration 600 (654.642 iter/s, 0.152755s/100 iters), loss = 1.00414
I0428 19:55:30.319474 28188 solver.cpp:238]     Train net output #0: loss = 1.00414 (* 1 = 1.00414 loss)
I0428 19:55:30.319496 28188 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:30.462229 28188 solver.cpp:219] Iteration 700 (700.577 iter/s, 0.142739s/100 iters), loss = 0.863667
I0428 19:55:30.462257 28188 solver.cpp:238]     Train net output #0: loss = 0.863667 (* 1 = 0.863667 loss)
I0428 19:55:30.462263 28188 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:30.605733 28188 solver.cpp:219] Iteration 800 (697.042 iter/s, 0.143463s/100 iters), loss = 0.799965
I0428 19:55:30.605758 28188 solver.cpp:238]     Train net output #0: loss = 0.799965 (* 1 = 0.799965 loss)
I0428 19:55:30.605764 28188 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:30.758677 28188 solver.cpp:219] Iteration 900 (654.002 iter/s, 0.152905s/100 iters), loss = 0.759553
I0428 19:55:30.758700 28188 solver.cpp:238]     Train net output #0: loss = 0.759553 (* 1 = 0.759553 loss)
I0428 19:55:30.758710 28188 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:30.807212 28194 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:30.902597 28188 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:30.905246 28188 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:30.906500 28188 solver.cpp:311] Iteration 1000, loss = 0.776457
I0428 19:55:30.906515 28188 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:30.981093 28195 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:30.981715 28188 solver.cpp:398]     Test net output #0: accuracy = 0.6731
I0428 19:55:30.981734 28188 solver.cpp:398]     Test net output #1: loss = 0.784405 (* 1 = 0.784405 loss)
I0428 19:55:30.981739 28188 solver.cpp:316] Optimization Done.
I0428 19:55:30.981742 28188 caffe.cpp:259] Optimization Done.
