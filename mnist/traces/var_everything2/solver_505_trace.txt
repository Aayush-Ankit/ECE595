I0428 19:47:04.898854 26111 caffe.cpp:218] Using GPUs 0
I0428 19:47:04.939699 26111 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:05.452850 26111 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test505.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:05.453018 26111 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test505.prototxt
I0428 19:47:05.453447 26111 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:05.453474 26111 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:05.453589 26111 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:05.453707 26111 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:05.453840 26111 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:05.453873 26111 net.cpp:86] Creating Layer mnist
I0428 19:47:05.453886 26111 net.cpp:382] mnist -> data
I0428 19:47:05.453918 26111 net.cpp:382] mnist -> label
I0428 19:47:05.455194 26111 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:05.457676 26111 net.cpp:124] Setting up mnist
I0428 19:47:05.457697 26111 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:05.457707 26111 net.cpp:131] Top shape: 64 (64)
I0428 19:47:05.457713 26111 net.cpp:139] Memory required for data: 200960
I0428 19:47:05.457725 26111 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:05.457751 26111 net.cpp:86] Creating Layer conv0
I0428 19:47:05.457777 26111 net.cpp:408] conv0 <- data
I0428 19:47:05.457797 26111 net.cpp:382] conv0 -> conv0
I0428 19:47:05.747154 26111 net.cpp:124] Setting up conv0
I0428 19:47:05.747187 26111 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:47:05.747195 26111 net.cpp:139] Memory required for data: 495872
I0428 19:47:05.747220 26111 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:05.747241 26111 net.cpp:86] Creating Layer pool0
I0428 19:47:05.747256 26111 net.cpp:408] pool0 <- conv0
I0428 19:47:05.747268 26111 net.cpp:382] pool0 -> pool0
I0428 19:47:05.747340 26111 net.cpp:124] Setting up pool0
I0428 19:47:05.747352 26111 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:47:05.747359 26111 net.cpp:139] Memory required for data: 569600
I0428 19:47:05.747364 26111 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:05.747383 26111 net.cpp:86] Creating Layer conv1
I0428 19:47:05.747391 26111 net.cpp:408] conv1 <- pool0
I0428 19:47:05.747402 26111 net.cpp:382] conv1 -> conv1
I0428 19:47:05.750538 26111 net.cpp:124] Setting up conv1
I0428 19:47:05.750558 26111 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:47:05.750566 26111 net.cpp:139] Memory required for data: 2208000
I0428 19:47:05.750582 26111 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:05.750597 26111 net.cpp:86] Creating Layer pool1
I0428 19:47:05.750603 26111 net.cpp:408] pool1 <- conv1
I0428 19:47:05.750613 26111 net.cpp:382] pool1 -> pool1
I0428 19:47:05.750668 26111 net.cpp:124] Setting up pool1
I0428 19:47:05.750679 26111 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:47:05.750684 26111 net.cpp:139] Memory required for data: 2617600
I0428 19:47:05.750691 26111 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:05.750711 26111 net.cpp:86] Creating Layer ip1
I0428 19:47:05.750720 26111 net.cpp:408] ip1 <- pool1
I0428 19:47:05.750730 26111 net.cpp:382] ip1 -> ip1
I0428 19:47:05.752342 26111 net.cpp:124] Setting up ip1
I0428 19:47:05.752360 26111 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:05.752367 26111 net.cpp:139] Memory required for data: 2630400
I0428 19:47:05.752384 26111 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:05.752395 26111 net.cpp:86] Creating Layer relu1
I0428 19:47:05.752408 26111 net.cpp:408] relu1 <- ip1
I0428 19:47:05.752418 26111 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:05.752629 26111 net.cpp:124] Setting up relu1
I0428 19:47:05.752641 26111 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:05.752648 26111 net.cpp:139] Memory required for data: 2643200
I0428 19:47:05.752655 26111 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:05.752667 26111 net.cpp:86] Creating Layer ip2
I0428 19:47:05.752674 26111 net.cpp:408] ip2 <- ip1
I0428 19:47:05.752684 26111 net.cpp:382] ip2 -> ip2
I0428 19:47:05.753804 26111 net.cpp:124] Setting up ip2
I0428 19:47:05.753823 26111 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:05.753829 26111 net.cpp:139] Memory required for data: 2656000
I0428 19:47:05.753841 26111 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:05.753854 26111 net.cpp:86] Creating Layer relu2
I0428 19:47:05.753861 26111 net.cpp:408] relu2 <- ip2
I0428 19:47:05.753870 26111 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:05.754742 26111 net.cpp:124] Setting up relu2
I0428 19:47:05.754760 26111 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:05.754766 26111 net.cpp:139] Memory required for data: 2668800
I0428 19:47:05.754773 26111 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:05.754786 26111 net.cpp:86] Creating Layer ip3
I0428 19:47:05.754793 26111 net.cpp:408] ip3 <- ip2
I0428 19:47:05.754804 26111 net.cpp:382] ip3 -> ip3
I0428 19:47:05.754936 26111 net.cpp:124] Setting up ip3
I0428 19:47:05.754948 26111 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:05.754956 26111 net.cpp:139] Memory required for data: 2671360
I0428 19:47:05.754971 26111 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:05.754984 26111 net.cpp:86] Creating Layer relu3
I0428 19:47:05.754992 26111 net.cpp:408] relu3 <- ip3
I0428 19:47:05.755000 26111 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:05.755210 26111 net.cpp:124] Setting up relu3
I0428 19:47:05.755223 26111 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:05.755229 26111 net.cpp:139] Memory required for data: 2673920
I0428 19:47:05.755235 26111 layer_factory.hpp:77] Creating layer loss
I0428 19:47:05.755247 26111 net.cpp:86] Creating Layer loss
I0428 19:47:05.755254 26111 net.cpp:408] loss <- ip3
I0428 19:47:05.755262 26111 net.cpp:408] loss <- label
I0428 19:47:05.755273 26111 net.cpp:382] loss -> loss
I0428 19:47:05.755300 26111 layer_factory.hpp:77] Creating layer loss
I0428 19:47:05.755595 26111 net.cpp:124] Setting up loss
I0428 19:47:05.755609 26111 net.cpp:131] Top shape: (1)
I0428 19:47:05.755619 26111 net.cpp:134]     with loss weight 1
I0428 19:47:05.755641 26111 net.cpp:139] Memory required for data: 2673924
I0428 19:47:05.755648 26111 net.cpp:200] loss needs backward computation.
I0428 19:47:05.755656 26111 net.cpp:200] relu3 needs backward computation.
I0428 19:47:05.755662 26111 net.cpp:200] ip3 needs backward computation.
I0428 19:47:05.755667 26111 net.cpp:200] relu2 needs backward computation.
I0428 19:47:05.755673 26111 net.cpp:200] ip2 needs backward computation.
I0428 19:47:05.755679 26111 net.cpp:200] relu1 needs backward computation.
I0428 19:47:05.755684 26111 net.cpp:200] ip1 needs backward computation.
I0428 19:47:05.755691 26111 net.cpp:200] pool1 needs backward computation.
I0428 19:47:05.755697 26111 net.cpp:200] conv1 needs backward computation.
I0428 19:47:05.755702 26111 net.cpp:200] pool0 needs backward computation.
I0428 19:47:05.755708 26111 net.cpp:200] conv0 needs backward computation.
I0428 19:47:05.755715 26111 net.cpp:202] mnist does not need backward computation.
I0428 19:47:05.755720 26111 net.cpp:244] This network produces output loss
I0428 19:47:05.755738 26111 net.cpp:257] Network initialization done.
I0428 19:47:05.756129 26111 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test505.prototxt
I0428 19:47:05.756170 26111 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:05.756289 26111 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:05.756435 26111 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:05.756505 26111 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:05.756528 26111 net.cpp:86] Creating Layer mnist
I0428 19:47:05.756539 26111 net.cpp:382] mnist -> data
I0428 19:47:05.756553 26111 net.cpp:382] mnist -> label
I0428 19:47:05.756701 26111 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:05.758321 26111 net.cpp:124] Setting up mnist
I0428 19:47:05.758340 26111 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:05.758350 26111 net.cpp:131] Top shape: 100 (100)
I0428 19:47:05.758357 26111 net.cpp:139] Memory required for data: 314000
I0428 19:47:05.758363 26111 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:05.758394 26111 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:05.758401 26111 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:05.758410 26111 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:05.758424 26111 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:05.758529 26111 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:05.758539 26111 net.cpp:131] Top shape: 100 (100)
I0428 19:47:05.758548 26111 net.cpp:131] Top shape: 100 (100)
I0428 19:47:05.758553 26111 net.cpp:139] Memory required for data: 314800
I0428 19:47:05.758560 26111 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:05.758577 26111 net.cpp:86] Creating Layer conv0
I0428 19:47:05.758585 26111 net.cpp:408] conv0 <- data
I0428 19:47:05.758599 26111 net.cpp:382] conv0 -> conv0
I0428 19:47:05.760409 26111 net.cpp:124] Setting up conv0
I0428 19:47:05.760428 26111 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:47:05.760435 26111 net.cpp:139] Memory required for data: 775600
I0428 19:47:05.760452 26111 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:05.760468 26111 net.cpp:86] Creating Layer pool0
I0428 19:47:05.760475 26111 net.cpp:408] pool0 <- conv0
I0428 19:47:05.760485 26111 net.cpp:382] pool0 -> pool0
I0428 19:47:05.760540 26111 net.cpp:124] Setting up pool0
I0428 19:47:05.760550 26111 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:47:05.760555 26111 net.cpp:139] Memory required for data: 890800
I0428 19:47:05.760562 26111 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:05.760581 26111 net.cpp:86] Creating Layer conv1
I0428 19:47:05.760587 26111 net.cpp:408] conv1 <- pool0
I0428 19:47:05.760601 26111 net.cpp:382] conv1 -> conv1
I0428 19:47:05.762511 26111 net.cpp:124] Setting up conv1
I0428 19:47:05.762529 26111 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:47:05.762537 26111 net.cpp:139] Memory required for data: 3450800
I0428 19:47:05.762552 26111 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:05.762564 26111 net.cpp:86] Creating Layer pool1
I0428 19:47:05.762573 26111 net.cpp:408] pool1 <- conv1
I0428 19:47:05.762586 26111 net.cpp:382] pool1 -> pool1
I0428 19:47:05.762641 26111 net.cpp:124] Setting up pool1
I0428 19:47:05.762652 26111 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:47:05.762658 26111 net.cpp:139] Memory required for data: 4090800
I0428 19:47:05.762668 26111 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:05.762682 26111 net.cpp:86] Creating Layer ip1
I0428 19:47:05.762691 26111 net.cpp:408] ip1 <- pool1
I0428 19:47:05.762703 26111 net.cpp:382] ip1 -> ip1
I0428 19:47:05.763388 26111 net.cpp:124] Setting up ip1
I0428 19:47:05.763401 26111 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:05.763420 26111 net.cpp:139] Memory required for data: 4110800
I0428 19:47:05.763437 26111 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:05.763448 26111 net.cpp:86] Creating Layer relu1
I0428 19:47:05.763455 26111 net.cpp:408] relu1 <- ip1
I0428 19:47:05.763468 26111 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:05.763674 26111 net.cpp:124] Setting up relu1
I0428 19:47:05.763689 26111 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:05.763695 26111 net.cpp:139] Memory required for data: 4130800
I0428 19:47:05.763701 26111 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:05.763717 26111 net.cpp:86] Creating Layer ip2
I0428 19:47:05.763726 26111 net.cpp:408] ip2 <- ip1
I0428 19:47:05.763736 26111 net.cpp:382] ip2 -> ip2
I0428 19:47:05.763891 26111 net.cpp:124] Setting up ip2
I0428 19:47:05.763901 26111 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:05.763907 26111 net.cpp:139] Memory required for data: 4150800
I0428 19:47:05.763919 26111 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:05.763931 26111 net.cpp:86] Creating Layer relu2
I0428 19:47:05.763937 26111 net.cpp:408] relu2 <- ip2
I0428 19:47:05.763947 26111 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:05.764175 26111 net.cpp:124] Setting up relu2
I0428 19:47:05.764188 26111 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:05.764194 26111 net.cpp:139] Memory required for data: 4170800
I0428 19:47:05.764199 26111 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:05.764212 26111 net.cpp:86] Creating Layer ip3
I0428 19:47:05.764219 26111 net.cpp:408] ip3 <- ip2
I0428 19:47:05.764230 26111 net.cpp:382] ip3 -> ip3
I0428 19:47:05.764381 26111 net.cpp:124] Setting up ip3
I0428 19:47:05.764392 26111 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:05.764398 26111 net.cpp:139] Memory required for data: 4174800
I0428 19:47:05.764413 26111 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:05.764425 26111 net.cpp:86] Creating Layer relu3
I0428 19:47:05.764433 26111 net.cpp:408] relu3 <- ip3
I0428 19:47:05.764443 26111 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:05.765390 26111 net.cpp:124] Setting up relu3
I0428 19:47:05.765409 26111 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:05.765416 26111 net.cpp:139] Memory required for data: 4178800
I0428 19:47:05.765424 26111 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:47:05.765432 26111 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:47:05.765439 26111 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:47:05.765449 26111 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:47:05.765460 26111 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:47:05.765516 26111 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:47:05.765527 26111 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:05.765534 26111 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:05.765540 26111 net.cpp:139] Memory required for data: 4186800
I0428 19:47:05.765547 26111 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:05.765557 26111 net.cpp:86] Creating Layer accuracy
I0428 19:47:05.765563 26111 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:47:05.765573 26111 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:05.765583 26111 net.cpp:382] accuracy -> accuracy
I0428 19:47:05.765595 26111 net.cpp:124] Setting up accuracy
I0428 19:47:05.765604 26111 net.cpp:131] Top shape: (1)
I0428 19:47:05.765610 26111 net.cpp:139] Memory required for data: 4186804
I0428 19:47:05.765616 26111 layer_factory.hpp:77] Creating layer loss
I0428 19:47:05.765627 26111 net.cpp:86] Creating Layer loss
I0428 19:47:05.765635 26111 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:47:05.765642 26111 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:05.765650 26111 net.cpp:382] loss -> loss
I0428 19:47:05.765661 26111 layer_factory.hpp:77] Creating layer loss
I0428 19:47:05.765955 26111 net.cpp:124] Setting up loss
I0428 19:47:05.765967 26111 net.cpp:131] Top shape: (1)
I0428 19:47:05.765974 26111 net.cpp:134]     with loss weight 1
I0428 19:47:05.765998 26111 net.cpp:139] Memory required for data: 4186808
I0428 19:47:05.766006 26111 net.cpp:200] loss needs backward computation.
I0428 19:47:05.766013 26111 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:05.766021 26111 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:47:05.766026 26111 net.cpp:200] relu3 needs backward computation.
I0428 19:47:05.766032 26111 net.cpp:200] ip3 needs backward computation.
I0428 19:47:05.766038 26111 net.cpp:200] relu2 needs backward computation.
I0428 19:47:05.766043 26111 net.cpp:200] ip2 needs backward computation.
I0428 19:47:05.766049 26111 net.cpp:200] relu1 needs backward computation.
I0428 19:47:05.766054 26111 net.cpp:200] ip1 needs backward computation.
I0428 19:47:05.766060 26111 net.cpp:200] pool1 needs backward computation.
I0428 19:47:05.766067 26111 net.cpp:200] conv1 needs backward computation.
I0428 19:47:05.766072 26111 net.cpp:200] pool0 needs backward computation.
I0428 19:47:05.766078 26111 net.cpp:200] conv0 needs backward computation.
I0428 19:47:05.766085 26111 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:05.766093 26111 net.cpp:202] mnist does not need backward computation.
I0428 19:47:05.766098 26111 net.cpp:244] This network produces output accuracy
I0428 19:47:05.766104 26111 net.cpp:244] This network produces output loss
I0428 19:47:05.766126 26111 net.cpp:257] Network initialization done.
I0428 19:47:05.766185 26111 solver.cpp:56] Solver scaffolding done.
I0428 19:47:05.766592 26111 caffe.cpp:248] Starting Optimization
I0428 19:47:05.766599 26111 solver.cpp:273] Solving LeNet
I0428 19:47:05.766605 26111 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:05.767509 26111 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:05.772325 26111 blocking_queue.cpp:49] Waiting for data
I0428 19:47:05.841008 26118 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:05.841617 26111 solver.cpp:398]     Test net output #0: accuracy = 0.114
I0428 19:47:05.841641 26111 solver.cpp:398]     Test net output #1: loss = 2.30502 (* 1 = 2.30502 loss)
I0428 19:47:05.845450 26111 solver.cpp:219] Iteration 0 (0 iter/s, 0.0788081s/100 iters), loss = 2.2974
I0428 19:47:05.845481 26111 solver.cpp:238]     Train net output #0: loss = 2.2974 (* 1 = 2.2974 loss)
I0428 19:47:05.845500 26111 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:05.991050 26111 solver.cpp:219] Iteration 100 (687.019 iter/s, 0.145556s/100 iters), loss = 1.15884
I0428 19:47:05.991076 26111 solver.cpp:238]     Train net output #0: loss = 1.15884 (* 1 = 1.15884 loss)
I0428 19:47:05.991101 26111 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:06.144420 26111 solver.cpp:219] Iteration 200 (652.242 iter/s, 0.153317s/100 iters), loss = 1.06614
I0428 19:47:06.144448 26111 solver.cpp:238]     Train net output #0: loss = 1.06614 (* 1 = 1.06614 loss)
I0428 19:47:06.144456 26111 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:06.292634 26111 solver.cpp:219] Iteration 300 (674.869 iter/s, 0.148177s/100 iters), loss = 0.780597
I0428 19:47:06.292665 26111 solver.cpp:238]     Train net output #0: loss = 0.780597 (* 1 = 0.780597 loss)
I0428 19:47:06.292676 26111 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:06.438005 26111 solver.cpp:219] Iteration 400 (688.098 iter/s, 0.145328s/100 iters), loss = 0.717453
I0428 19:47:06.438040 26111 solver.cpp:238]     Train net output #0: loss = 0.717453 (* 1 = 0.717453 loss)
I0428 19:47:06.438050 26111 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:06.590242 26111 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:06.644362 26118 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:06.645864 26111 solver.cpp:398]     Test net output #0: accuracy = 0.6604
I0428 19:47:06.645900 26111 solver.cpp:398]     Test net output #1: loss = 0.843813 (* 1 = 0.843813 loss)
I0428 19:47:06.647447 26111 solver.cpp:219] Iteration 500 (477.565 iter/s, 0.209396s/100 iters), loss = 0.858483
I0428 19:47:06.647475 26111 solver.cpp:238]     Train net output #0: loss = 0.858483 (* 1 = 0.858483 loss)
I0428 19:47:06.647514 26111 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:06.799162 26111 solver.cpp:219] Iteration 600 (659.292 iter/s, 0.151678s/100 iters), loss = 1.13573
I0428 19:47:06.799193 26111 solver.cpp:238]     Train net output #0: loss = 1.13573 (* 1 = 1.13573 loss)
I0428 19:47:06.799219 26111 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:06.942729 26111 solver.cpp:219] Iteration 700 (696.738 iter/s, 0.143526s/100 iters), loss = 0.717458
I0428 19:47:06.942759 26111 solver.cpp:238]     Train net output #0: loss = 0.717458 (* 1 = 0.717458 loss)
I0428 19:47:06.942785 26111 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:07.088907 26111 solver.cpp:219] Iteration 800 (684.289 iter/s, 0.146137s/100 iters), loss = 0.912016
I0428 19:47:07.088934 26111 solver.cpp:238]     Train net output #0: loss = 0.912016 (* 1 = 0.912016 loss)
I0428 19:47:07.088960 26111 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:07.232939 26111 solver.cpp:219] Iteration 900 (694.469 iter/s, 0.143995s/100 iters), loss = 1.28221
I0428 19:47:07.232969 26111 solver.cpp:238]     Train net output #0: loss = 1.28221 (* 1 = 1.28221 loss)
I0428 19:47:07.232995 26111 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:07.280797 26117 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:07.379851 26111 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:07.382386 26111 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:07.383647 26111 solver.cpp:311] Iteration 1000, loss = 0.764276
I0428 19:47:07.383664 26111 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:07.459244 26118 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:07.459851 26111 solver.cpp:398]     Test net output #0: accuracy = 0.6688
I0428 19:47:07.459872 26111 solver.cpp:398]     Test net output #1: loss = 0.805582 (* 1 = 0.805582 loss)
I0428 19:47:07.459880 26111 solver.cpp:316] Optimization Done.
I0428 19:47:07.459885 26111 caffe.cpp:259] Optimization Done.
