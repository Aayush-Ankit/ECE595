I0428 20:16:02.035854   573 caffe.cpp:218] Using GPUs 0
I0428 20:16:02.072201   573 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:02.582801   573 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1261.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:02.582964   573 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1261.prototxt
I0428 20:16:02.583374   573 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:02.583397   573 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:02.583509   573 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:02.583616   573 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:02.583750   573 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:02.583782   573 net.cpp:86] Creating Layer mnist
I0428 20:16:02.583796   573 net.cpp:382] mnist -> data
I0428 20:16:02.583827   573 net.cpp:382] mnist -> label
I0428 20:16:02.585103   573 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:02.587565   573 net.cpp:124] Setting up mnist
I0428 20:16:02.587585   573 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:02.587596   573 net.cpp:131] Top shape: 64 (64)
I0428 20:16:02.587602   573 net.cpp:139] Memory required for data: 200960
I0428 20:16:02.587615   573 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:02.587636   573 net.cpp:86] Creating Layer conv0
I0428 20:16:02.587661   573 net.cpp:408] conv0 <- data
I0428 20:16:02.587678   573 net.cpp:382] conv0 -> conv0
I0428 20:16:02.874053   573 net.cpp:124] Setting up conv0
I0428 20:16:02.874083   573 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:02.874089   573 net.cpp:139] Memory required for data: 7573760
I0428 20:16:02.874110   573 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:02.874127   573 net.cpp:86] Creating Layer pool0
I0428 20:16:02.874135   573 net.cpp:408] pool0 <- conv0
I0428 20:16:02.874143   573 net.cpp:382] pool0 -> pool0
I0428 20:16:02.874205   573 net.cpp:124] Setting up pool0
I0428 20:16:02.874214   573 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:02.874220   573 net.cpp:139] Memory required for data: 9416960
I0428 20:16:02.874225   573 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:02.874241   573 net.cpp:86] Creating Layer conv1
I0428 20:16:02.874249   573 net.cpp:408] conv1 <- pool0
I0428 20:16:02.874258   573 net.cpp:382] conv1 -> conv1
I0428 20:16:02.876976   573 net.cpp:124] Setting up conv1
I0428 20:16:02.876993   573 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:02.877001   573 net.cpp:139] Memory required for data: 9498880
I0428 20:16:02.877013   573 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:02.877025   573 net.cpp:86] Creating Layer pool1
I0428 20:16:02.877038   573 net.cpp:408] pool1 <- conv1
I0428 20:16:02.877046   573 net.cpp:382] pool1 -> pool1
I0428 20:16:02.877089   573 net.cpp:124] Setting up pool1
I0428 20:16:02.877099   573 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:02.877104   573 net.cpp:139] Memory required for data: 9519360
I0428 20:16:02.877109   573 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:02.877120   573 net.cpp:86] Creating Layer ip1
I0428 20:16:02.877125   573 net.cpp:408] ip1 <- pool1
I0428 20:16:02.877133   573 net.cpp:382] ip1 -> ip1
I0428 20:16:02.877244   573 net.cpp:124] Setting up ip1
I0428 20:16:02.877254   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.877259   573 net.cpp:139] Memory required for data: 9521920
I0428 20:16:02.877270   573 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:02.877282   573 net.cpp:86] Creating Layer relu1
I0428 20:16:02.877291   573 net.cpp:408] relu1 <- ip1
I0428 20:16:02.877298   573 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:02.877467   573 net.cpp:124] Setting up relu1
I0428 20:16:02.877477   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.877482   573 net.cpp:139] Memory required for data: 9524480
I0428 20:16:02.877487   573 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:02.877497   573 net.cpp:86] Creating Layer ip2
I0428 20:16:02.877502   573 net.cpp:408] ip2 <- ip1
I0428 20:16:02.877511   573 net.cpp:382] ip2 -> ip2
I0428 20:16:02.877614   573 net.cpp:124] Setting up ip2
I0428 20:16:02.877622   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.877627   573 net.cpp:139] Memory required for data: 9527040
I0428 20:16:02.877636   573 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:02.877646   573 net.cpp:86] Creating Layer relu2
I0428 20:16:02.877651   573 net.cpp:408] relu2 <- ip2
I0428 20:16:02.877658   573 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:02.878376   573 net.cpp:124] Setting up relu2
I0428 20:16:02.878391   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.878396   573 net.cpp:139] Memory required for data: 9529600
I0428 20:16:02.878401   573 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:02.878412   573 net.cpp:86] Creating Layer ip3
I0428 20:16:02.878417   573 net.cpp:408] ip3 <- ip2
I0428 20:16:02.878427   573 net.cpp:382] ip3 -> ip3
I0428 20:16:02.878530   573 net.cpp:124] Setting up ip3
I0428 20:16:02.878540   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.878545   573 net.cpp:139] Memory required for data: 9532160
I0428 20:16:02.878557   573 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:02.878567   573 net.cpp:86] Creating Layer relu3
I0428 20:16:02.878574   573 net.cpp:408] relu3 <- ip3
I0428 20:16:02.878582   573 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:02.878752   573 net.cpp:124] Setting up relu3
I0428 20:16:02.878762   573 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:02.878767   573 net.cpp:139] Memory required for data: 9534720
I0428 20:16:02.878773   573 layer_factory.hpp:77] Creating layer loss
I0428 20:16:02.878782   573 net.cpp:86] Creating Layer loss
I0428 20:16:02.878787   573 net.cpp:408] loss <- ip3
I0428 20:16:02.878793   573 net.cpp:408] loss <- label
I0428 20:16:02.878801   573 net.cpp:382] loss -> loss
I0428 20:16:02.878821   573 layer_factory.hpp:77] Creating layer loss
I0428 20:16:02.879057   573 net.cpp:124] Setting up loss
I0428 20:16:02.879068   573 net.cpp:131] Top shape: (1)
I0428 20:16:02.879073   573 net.cpp:134]     with loss weight 1
I0428 20:16:02.879093   573 net.cpp:139] Memory required for data: 9534724
I0428 20:16:02.879099   573 net.cpp:200] loss needs backward computation.
I0428 20:16:02.879106   573 net.cpp:200] relu3 needs backward computation.
I0428 20:16:02.879112   573 net.cpp:200] ip3 needs backward computation.
I0428 20:16:02.879117   573 net.cpp:200] relu2 needs backward computation.
I0428 20:16:02.879122   573 net.cpp:200] ip2 needs backward computation.
I0428 20:16:02.879127   573 net.cpp:200] relu1 needs backward computation.
I0428 20:16:02.879132   573 net.cpp:200] ip1 needs backward computation.
I0428 20:16:02.879137   573 net.cpp:200] pool1 needs backward computation.
I0428 20:16:02.879142   573 net.cpp:200] conv1 needs backward computation.
I0428 20:16:02.879148   573 net.cpp:200] pool0 needs backward computation.
I0428 20:16:02.879153   573 net.cpp:200] conv0 needs backward computation.
I0428 20:16:02.879158   573 net.cpp:202] mnist does not need backward computation.
I0428 20:16:02.879163   573 net.cpp:244] This network produces output loss
I0428 20:16:02.879179   573 net.cpp:257] Network initialization done.
I0428 20:16:02.879501   573 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1261.prototxt
I0428 20:16:02.879535   573 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:02.879636   573 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:02.879755   573 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:02.879813   573 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:02.879830   573 net.cpp:86] Creating Layer mnist
I0428 20:16:02.879840   573 net.cpp:382] mnist -> data
I0428 20:16:02.879851   573 net.cpp:382] mnist -> label
I0428 20:16:02.879981   573 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:02.882000   573 net.cpp:124] Setting up mnist
I0428 20:16:02.882015   573 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:02.882024   573 net.cpp:131] Top shape: 100 (100)
I0428 20:16:02.882028   573 net.cpp:139] Memory required for data: 314000
I0428 20:16:02.882035   573 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:02.882043   573 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:02.882050   573 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:02.882060   573 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:02.882069   573 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:02.882139   573 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:02.882148   573 net.cpp:131] Top shape: 100 (100)
I0428 20:16:02.882154   573 net.cpp:131] Top shape: 100 (100)
I0428 20:16:02.882159   573 net.cpp:139] Memory required for data: 314800
I0428 20:16:02.882164   573 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:02.882180   573 net.cpp:86] Creating Layer conv0
I0428 20:16:02.882187   573 net.cpp:408] conv0 <- data
I0428 20:16:02.882195   573 net.cpp:382] conv0 -> conv0
I0428 20:16:02.883704   573 net.cpp:124] Setting up conv0
I0428 20:16:02.883721   573 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:02.883728   573 net.cpp:139] Memory required for data: 11834800
I0428 20:16:02.883745   573 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:02.883757   573 net.cpp:86] Creating Layer pool0
I0428 20:16:02.883764   573 net.cpp:408] pool0 <- conv0
I0428 20:16:02.883774   573 net.cpp:382] pool0 -> pool0
I0428 20:16:02.883818   573 net.cpp:124] Setting up pool0
I0428 20:16:02.883831   573 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:02.883838   573 net.cpp:139] Memory required for data: 14714800
I0428 20:16:02.883844   573 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:02.883859   573 net.cpp:86] Creating Layer conv1
I0428 20:16:02.883867   573 net.cpp:408] conv1 <- pool0
I0428 20:16:02.883877   573 net.cpp:382] conv1 -> conv1
I0428 20:16:02.885432   573 net.cpp:124] Setting up conv1
I0428 20:16:02.885447   573 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:02.885455   573 net.cpp:139] Memory required for data: 14842800
I0428 20:16:02.885469   573 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:02.885486   573 net.cpp:86] Creating Layer pool1
I0428 20:16:02.885493   573 net.cpp:408] pool1 <- conv1
I0428 20:16:02.885501   573 net.cpp:382] pool1 -> pool1
I0428 20:16:02.885547   573 net.cpp:124] Setting up pool1
I0428 20:16:02.885556   573 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:02.885561   573 net.cpp:139] Memory required for data: 14874800
I0428 20:16:02.885566   573 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:02.885577   573 net.cpp:86] Creating Layer ip1
I0428 20:16:02.885583   573 net.cpp:408] ip1 <- pool1
I0428 20:16:02.885591   573 net.cpp:382] ip1 -> ip1
I0428 20:16:02.885749   573 net.cpp:124] Setting up ip1
I0428 20:16:02.885758   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.885790   573 net.cpp:139] Memory required for data: 14878800
I0428 20:16:02.885803   573 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:02.885817   573 net.cpp:86] Creating Layer relu1
I0428 20:16:02.885826   573 net.cpp:408] relu1 <- ip1
I0428 20:16:02.885850   573 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:02.886054   573 net.cpp:124] Setting up relu1
I0428 20:16:02.886065   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.886070   573 net.cpp:139] Memory required for data: 14882800
I0428 20:16:02.886077   573 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:02.886104   573 net.cpp:86] Creating Layer ip2
I0428 20:16:02.886111   573 net.cpp:408] ip2 <- ip1
I0428 20:16:02.886135   573 net.cpp:382] ip2 -> ip2
I0428 20:16:02.886266   573 net.cpp:124] Setting up ip2
I0428 20:16:02.886276   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.886281   573 net.cpp:139] Memory required for data: 14886800
I0428 20:16:02.886289   573 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:02.886297   573 net.cpp:86] Creating Layer relu2
I0428 20:16:02.886302   573 net.cpp:408] relu2 <- ip2
I0428 20:16:02.886308   573 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:02.886474   573 net.cpp:124] Setting up relu2
I0428 20:16:02.886485   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.886490   573 net.cpp:139] Memory required for data: 14890800
I0428 20:16:02.886495   573 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:02.886504   573 net.cpp:86] Creating Layer ip3
I0428 20:16:02.886509   573 net.cpp:408] ip3 <- ip2
I0428 20:16:02.886519   573 net.cpp:382] ip3 -> ip3
I0428 20:16:02.886654   573 net.cpp:124] Setting up ip3
I0428 20:16:02.886663   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.886668   573 net.cpp:139] Memory required for data: 14894800
I0428 20:16:02.886693   573 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:02.886701   573 net.cpp:86] Creating Layer relu3
I0428 20:16:02.886708   573 net.cpp:408] relu3 <- ip3
I0428 20:16:02.886715   573 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:02.887468   573 net.cpp:124] Setting up relu3
I0428 20:16:02.887482   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.887487   573 net.cpp:139] Memory required for data: 14898800
I0428 20:16:02.887493   573 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:02.887501   573 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:02.887507   573 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:02.887516   573 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:02.887526   573 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:02.887572   573 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:02.887579   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.887586   573 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:02.887591   573 net.cpp:139] Memory required for data: 14906800
I0428 20:16:02.887596   573 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:02.887605   573 net.cpp:86] Creating Layer accuracy
I0428 20:16:02.887610   573 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:02.887617   573 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:02.887624   573 net.cpp:382] accuracy -> accuracy
I0428 20:16:02.887637   573 net.cpp:124] Setting up accuracy
I0428 20:16:02.887645   573 net.cpp:131] Top shape: (1)
I0428 20:16:02.887650   573 net.cpp:139] Memory required for data: 14906804
I0428 20:16:02.887655   573 layer_factory.hpp:77] Creating layer loss
I0428 20:16:02.887662   573 net.cpp:86] Creating Layer loss
I0428 20:16:02.887668   573 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:02.887675   573 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:02.887681   573 net.cpp:382] loss -> loss
I0428 20:16:02.887691   573 layer_factory.hpp:77] Creating layer loss
I0428 20:16:02.887934   573 net.cpp:124] Setting up loss
I0428 20:16:02.887946   573 net.cpp:131] Top shape: (1)
I0428 20:16:02.887951   573 net.cpp:134]     with loss weight 1
I0428 20:16:02.887970   573 net.cpp:139] Memory required for data: 14906808
I0428 20:16:02.887976   573 net.cpp:200] loss needs backward computation.
I0428 20:16:02.887992   573 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:02.888000   573 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:02.888005   573 net.cpp:200] relu3 needs backward computation.
I0428 20:16:02.888010   573 net.cpp:200] ip3 needs backward computation.
I0428 20:16:02.888015   573 net.cpp:200] relu2 needs backward computation.
I0428 20:16:02.888020   573 net.cpp:200] ip2 needs backward computation.
I0428 20:16:02.888025   573 net.cpp:200] relu1 needs backward computation.
I0428 20:16:02.888031   573 net.cpp:200] ip1 needs backward computation.
I0428 20:16:02.888036   573 net.cpp:200] pool1 needs backward computation.
I0428 20:16:02.888041   573 net.cpp:200] conv1 needs backward computation.
I0428 20:16:02.888046   573 net.cpp:200] pool0 needs backward computation.
I0428 20:16:02.888052   573 net.cpp:200] conv0 needs backward computation.
I0428 20:16:02.888058   573 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:02.888064   573 net.cpp:202] mnist does not need backward computation.
I0428 20:16:02.888069   573 net.cpp:244] This network produces output accuracy
I0428 20:16:02.888074   573 net.cpp:244] This network produces output loss
I0428 20:16:02.888090   573 net.cpp:257] Network initialization done.
I0428 20:16:02.888139   573 solver.cpp:56] Solver scaffolding done.
I0428 20:16:02.888490   573 caffe.cpp:248] Starting Optimization
I0428 20:16:02.888497   573 solver.cpp:273] Solving LeNet
I0428 20:16:02.888502   573 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:02.889266   573 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:02.903995   573 blocking_queue.cpp:49] Waiting for data
I0428 20:16:02.968451   580 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:02.969259   573 solver.cpp:398]     Test net output #0: accuracy = 0.098
I0428 20:16:02.969280   573 solver.cpp:398]     Test net output #1: loss = 2.3005 (* 1 = 2.3005 loss)
I0428 20:16:02.973589   573 solver.cpp:219] Iteration 0 (0 iter/s, 0.0850587s/100 iters), loss = 2.30925
I0428 20:16:02.973618   573 solver.cpp:238]     Train net output #0: loss = 2.30925 (* 1 = 2.30925 loss)
I0428 20:16:02.973650   573 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:03.093817   573 solver.cpp:219] Iteration 100 (832.009 iter/s, 0.120191s/100 iters), loss = 0.879063
I0428 20:16:03.093844   573 solver.cpp:238]     Train net output #0: loss = 0.879063 (* 1 = 0.879063 loss)
I0428 20:16:03.093869   573 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:03.212267   573 solver.cpp:219] Iteration 200 (844.514 iter/s, 0.118411s/100 iters), loss = 0.427773
I0428 20:16:03.212296   573 solver.cpp:238]     Train net output #0: loss = 0.427773 (* 1 = 0.427773 loss)
I0428 20:16:03.212321   573 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:03.330610   573 solver.cpp:219] Iteration 300 (845.274 iter/s, 0.118305s/100 iters), loss = 0.379433
I0428 20:16:03.330636   573 solver.cpp:238]     Train net output #0: loss = 0.379433 (* 1 = 0.379433 loss)
I0428 20:16:03.330662   573 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:03.444840   573 solver.cpp:219] Iteration 400 (875.693 iter/s, 0.114195s/100 iters), loss = 0.203963
I0428 20:16:03.444883   573 solver.cpp:238]     Train net output #0: loss = 0.203963 (* 1 = 0.203963 loss)
I0428 20:16:03.444908   573 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:03.558668   573 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:03.623733   580 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:03.626109   573 solver.cpp:398]     Test net output #0: accuracy = 0.9386
I0428 20:16:03.626133   573 solver.cpp:398]     Test net output #1: loss = 0.194923 (* 1 = 0.194923 loss)
I0428 20:16:03.627292   573 solver.cpp:219] Iteration 500 (548.301 iter/s, 0.182382s/100 iters), loss = 0.213203
I0428 20:16:03.627336   573 solver.cpp:238]     Train net output #0: loss = 0.213203 (* 1 = 0.213203 loss)
I0428 20:16:03.627346   573 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:03.754106   573 solver.cpp:219] Iteration 600 (788.912 iter/s, 0.126757s/100 iters), loss = 0.162278
I0428 20:16:03.754168   573 solver.cpp:238]     Train net output #0: loss = 0.162278 (* 1 = 0.162278 loss)
I0428 20:16:03.754181   573 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:03.882550   573 solver.cpp:219] Iteration 700 (778.888 iter/s, 0.128388s/100 iters), loss = 0.268964
I0428 20:16:03.882591   573 solver.cpp:238]     Train net output #0: loss = 0.268964 (* 1 = 0.268964 loss)
I0428 20:16:03.882597   573 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:04.006888   573 solver.cpp:219] Iteration 800 (804.53 iter/s, 0.124296s/100 iters), loss = 0.394086
I0428 20:16:04.006922   573 solver.cpp:238]     Train net output #0: loss = 0.394086 (* 1 = 0.394086 loss)
I0428 20:16:04.006929   573 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:04.127552   573 solver.cpp:219] Iteration 900 (829.058 iter/s, 0.120619s/100 iters), loss = 0.209919
I0428 20:16:04.127586   573 solver.cpp:238]     Train net output #0: loss = 0.209919 (* 1 = 0.209919 loss)
I0428 20:16:04.127595   573 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:04.168081   579 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:04.245785   573 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:04.246803   573 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:04.247517   573 solver.cpp:311] Iteration 1000, loss = 0.144286
I0428 20:16:04.247534   573 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:04.317497   580 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:04.318806   573 solver.cpp:398]     Test net output #0: accuracy = 0.9569
I0428 20:16:04.318828   573 solver.cpp:398]     Test net output #1: loss = 0.129712 (* 1 = 0.129712 loss)
I0428 20:16:04.318853   573 solver.cpp:316] Optimization Done.
I0428 20:16:04.318857   573 caffe.cpp:259] Optimization Done.
