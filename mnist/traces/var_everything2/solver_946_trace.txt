I0428 20:03:11.674734 30138 caffe.cpp:218] Using GPUs 0
I0428 20:03:11.705549 30138 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:03:12.221909 30138 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test946.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:03:12.222059 30138 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test946.prototxt
I0428 20:03:12.222450 30138 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:03:12.222468 30138 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:03:12.222558 30138 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:03:12.222632 30138 layer_factory.hpp:77] Creating layer mnist
I0428 20:03:12.222730 30138 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:03:12.222753 30138 net.cpp:86] Creating Layer mnist
I0428 20:03:12.222764 30138 net.cpp:382] mnist -> data
I0428 20:03:12.222785 30138 net.cpp:382] mnist -> label
I0428 20:03:12.223881 30138 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:03:12.226371 30138 net.cpp:124] Setting up mnist
I0428 20:03:12.226388 30138 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:03:12.226394 30138 net.cpp:131] Top shape: 64 (64)
I0428 20:03:12.226398 30138 net.cpp:139] Memory required for data: 200960
I0428 20:03:12.226404 30138 layer_factory.hpp:77] Creating layer conv0
I0428 20:03:12.226433 30138 net.cpp:86] Creating Layer conv0
I0428 20:03:12.226440 30138 net.cpp:408] conv0 <- data
I0428 20:03:12.226454 30138 net.cpp:382] conv0 -> conv0
I0428 20:03:12.520395 30138 net.cpp:124] Setting up conv0
I0428 20:03:12.520426 30138 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:03:12.520431 30138 net.cpp:139] Memory required for data: 1675520
I0428 20:03:12.520470 30138 layer_factory.hpp:77] Creating layer pool0
I0428 20:03:12.520486 30138 net.cpp:86] Creating Layer pool0
I0428 20:03:12.520491 30138 net.cpp:408] pool0 <- conv0
I0428 20:03:12.520498 30138 net.cpp:382] pool0 -> pool0
I0428 20:03:12.520557 30138 net.cpp:124] Setting up pool0
I0428 20:03:12.520570 30138 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:03:12.520575 30138 net.cpp:139] Memory required for data: 2044160
I0428 20:03:12.520578 30138 layer_factory.hpp:77] Creating layer conv1
I0428 20:03:12.520591 30138 net.cpp:86] Creating Layer conv1
I0428 20:03:12.520596 30138 net.cpp:408] conv1 <- pool0
I0428 20:03:12.520601 30138 net.cpp:382] conv1 -> conv1
I0428 20:03:12.523000 30138 net.cpp:124] Setting up conv1
I0428 20:03:12.523018 30138 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:03:12.523023 30138 net.cpp:139] Memory required for data: 3682560
I0428 20:03:12.523035 30138 layer_factory.hpp:77] Creating layer pool1
I0428 20:03:12.523043 30138 net.cpp:86] Creating Layer pool1
I0428 20:03:12.523047 30138 net.cpp:408] pool1 <- conv1
I0428 20:03:12.523054 30138 net.cpp:382] pool1 -> pool1
I0428 20:03:12.523102 30138 net.cpp:124] Setting up pool1
I0428 20:03:12.523109 30138 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:03:12.523113 30138 net.cpp:139] Memory required for data: 4092160
I0428 20:03:12.523116 30138 layer_factory.hpp:77] Creating layer ip1
I0428 20:03:12.523129 30138 net.cpp:86] Creating Layer ip1
I0428 20:03:12.523133 30138 net.cpp:408] ip1 <- pool1
I0428 20:03:12.523140 30138 net.cpp:382] ip1 -> ip1
I0428 20:03:12.524796 30138 net.cpp:124] Setting up ip1
I0428 20:03:12.524821 30138 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:03:12.524827 30138 net.cpp:139] Memory required for data: 4104960
I0428 20:03:12.524837 30138 layer_factory.hpp:77] Creating layer relu1
I0428 20:03:12.524845 30138 net.cpp:86] Creating Layer relu1
I0428 20:03:12.524849 30138 net.cpp:408] relu1 <- ip1
I0428 20:03:12.524855 30138 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:03:12.525073 30138 net.cpp:124] Setting up relu1
I0428 20:03:12.525084 30138 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:03:12.525089 30138 net.cpp:139] Memory required for data: 4117760
I0428 20:03:12.525092 30138 layer_factory.hpp:77] Creating layer ip2
I0428 20:03:12.525101 30138 net.cpp:86] Creating Layer ip2
I0428 20:03:12.525105 30138 net.cpp:408] ip2 <- ip1
I0428 20:03:12.525112 30138 net.cpp:382] ip2 -> ip2
I0428 20:03:12.525239 30138 net.cpp:124] Setting up ip2
I0428 20:03:12.525249 30138 net.cpp:131] Top shape: 64 10 (640)
I0428 20:03:12.525252 30138 net.cpp:139] Memory required for data: 4120320
I0428 20:03:12.525259 30138 layer_factory.hpp:77] Creating layer relu2
I0428 20:03:12.525266 30138 net.cpp:86] Creating Layer relu2
I0428 20:03:12.525269 30138 net.cpp:408] relu2 <- ip2
I0428 20:03:12.525274 30138 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:03:12.526140 30138 net.cpp:124] Setting up relu2
I0428 20:03:12.526155 30138 net.cpp:131] Top shape: 64 10 (640)
I0428 20:03:12.526160 30138 net.cpp:139] Memory required for data: 4122880
I0428 20:03:12.526165 30138 layer_factory.hpp:77] Creating layer loss
I0428 20:03:12.526171 30138 net.cpp:86] Creating Layer loss
I0428 20:03:12.526175 30138 net.cpp:408] loss <- ip2
I0428 20:03:12.526180 30138 net.cpp:408] loss <- label
I0428 20:03:12.526190 30138 net.cpp:382] loss -> loss
I0428 20:03:12.526212 30138 layer_factory.hpp:77] Creating layer loss
I0428 20:03:12.526515 30138 net.cpp:124] Setting up loss
I0428 20:03:12.526526 30138 net.cpp:131] Top shape: (1)
I0428 20:03:12.526530 30138 net.cpp:134]     with loss weight 1
I0428 20:03:12.526546 30138 net.cpp:139] Memory required for data: 4122884
I0428 20:03:12.526549 30138 net.cpp:200] loss needs backward computation.
I0428 20:03:12.526554 30138 net.cpp:200] relu2 needs backward computation.
I0428 20:03:12.526557 30138 net.cpp:200] ip2 needs backward computation.
I0428 20:03:12.526561 30138 net.cpp:200] relu1 needs backward computation.
I0428 20:03:12.526564 30138 net.cpp:200] ip1 needs backward computation.
I0428 20:03:12.526581 30138 net.cpp:200] pool1 needs backward computation.
I0428 20:03:12.526584 30138 net.cpp:200] conv1 needs backward computation.
I0428 20:03:12.526587 30138 net.cpp:200] pool0 needs backward computation.
I0428 20:03:12.526592 30138 net.cpp:200] conv0 needs backward computation.
I0428 20:03:12.526595 30138 net.cpp:202] mnist does not need backward computation.
I0428 20:03:12.526598 30138 net.cpp:244] This network produces output loss
I0428 20:03:12.526610 30138 net.cpp:257] Network initialization done.
I0428 20:03:12.526954 30138 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test946.prototxt
I0428 20:03:12.526984 30138 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:03:12.527086 30138 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:03:12.527163 30138 layer_factory.hpp:77] Creating layer mnist
I0428 20:03:12.527214 30138 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:03:12.527226 30138 net.cpp:86] Creating Layer mnist
I0428 20:03:12.527232 30138 net.cpp:382] mnist -> data
I0428 20:03:12.527242 30138 net.cpp:382] mnist -> label
I0428 20:03:12.527348 30138 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:03:12.528575 30138 net.cpp:124] Setting up mnist
I0428 20:03:12.528591 30138 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:03:12.528597 30138 net.cpp:131] Top shape: 100 (100)
I0428 20:03:12.528600 30138 net.cpp:139] Memory required for data: 314000
I0428 20:03:12.528604 30138 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:03:12.528631 30138 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:03:12.528637 30138 net.cpp:408] label_mnist_1_split <- label
I0428 20:03:12.528643 30138 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:03:12.528650 30138 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:03:12.528765 30138 net.cpp:124] Setting up label_mnist_1_split
I0428 20:03:12.528776 30138 net.cpp:131] Top shape: 100 (100)
I0428 20:03:12.528781 30138 net.cpp:131] Top shape: 100 (100)
I0428 20:03:12.528784 30138 net.cpp:139] Memory required for data: 314800
I0428 20:03:12.528789 30138 layer_factory.hpp:77] Creating layer conv0
I0428 20:03:12.528800 30138 net.cpp:86] Creating Layer conv0
I0428 20:03:12.528805 30138 net.cpp:408] conv0 <- data
I0428 20:03:12.528818 30138 net.cpp:382] conv0 -> conv0
I0428 20:03:12.530550 30138 net.cpp:124] Setting up conv0
I0428 20:03:12.530567 30138 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:03:12.530572 30138 net.cpp:139] Memory required for data: 2618800
I0428 20:03:12.530586 30138 layer_factory.hpp:77] Creating layer pool0
I0428 20:03:12.530593 30138 net.cpp:86] Creating Layer pool0
I0428 20:03:12.530598 30138 net.cpp:408] pool0 <- conv0
I0428 20:03:12.530603 30138 net.cpp:382] pool0 -> pool0
I0428 20:03:12.530650 30138 net.cpp:124] Setting up pool0
I0428 20:03:12.530659 30138 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:03:12.530663 30138 net.cpp:139] Memory required for data: 3194800
I0428 20:03:12.530665 30138 layer_factory.hpp:77] Creating layer conv1
I0428 20:03:12.530678 30138 net.cpp:86] Creating Layer conv1
I0428 20:03:12.530681 30138 net.cpp:408] conv1 <- pool0
I0428 20:03:12.530690 30138 net.cpp:382] conv1 -> conv1
I0428 20:03:12.532532 30138 net.cpp:124] Setting up conv1
I0428 20:03:12.532548 30138 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:03:12.532552 30138 net.cpp:139] Memory required for data: 5754800
I0428 20:03:12.532563 30138 layer_factory.hpp:77] Creating layer pool1
I0428 20:03:12.532573 30138 net.cpp:86] Creating Layer pool1
I0428 20:03:12.532577 30138 net.cpp:408] pool1 <- conv1
I0428 20:03:12.532583 30138 net.cpp:382] pool1 -> pool1
I0428 20:03:12.532630 30138 net.cpp:124] Setting up pool1
I0428 20:03:12.532637 30138 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:03:12.532640 30138 net.cpp:139] Memory required for data: 6394800
I0428 20:03:12.532644 30138 layer_factory.hpp:77] Creating layer ip1
I0428 20:03:12.532651 30138 net.cpp:86] Creating Layer ip1
I0428 20:03:12.532655 30138 net.cpp:408] ip1 <- pool1
I0428 20:03:12.532662 30138 net.cpp:382] ip1 -> ip1
I0428 20:03:12.533334 30138 net.cpp:124] Setting up ip1
I0428 20:03:12.533345 30138 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:03:12.533349 30138 net.cpp:139] Memory required for data: 6414800
I0428 20:03:12.533359 30138 layer_factory.hpp:77] Creating layer relu1
I0428 20:03:12.533365 30138 net.cpp:86] Creating Layer relu1
I0428 20:03:12.533370 30138 net.cpp:408] relu1 <- ip1
I0428 20:03:12.533377 30138 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:03:12.533576 30138 net.cpp:124] Setting up relu1
I0428 20:03:12.533587 30138 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:03:12.533591 30138 net.cpp:139] Memory required for data: 6434800
I0428 20:03:12.533596 30138 layer_factory.hpp:77] Creating layer ip2
I0428 20:03:12.533605 30138 net.cpp:86] Creating Layer ip2
I0428 20:03:12.533609 30138 net.cpp:408] ip2 <- ip1
I0428 20:03:12.533615 30138 net.cpp:382] ip2 -> ip2
I0428 20:03:12.533743 30138 net.cpp:124] Setting up ip2
I0428 20:03:12.533752 30138 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:12.533756 30138 net.cpp:139] Memory required for data: 6438800
I0428 20:03:12.533763 30138 layer_factory.hpp:77] Creating layer relu2
I0428 20:03:12.533769 30138 net.cpp:86] Creating Layer relu2
I0428 20:03:12.533772 30138 net.cpp:408] relu2 <- ip2
I0428 20:03:12.533780 30138 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:03:12.533972 30138 net.cpp:124] Setting up relu2
I0428 20:03:12.533982 30138 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:12.533987 30138 net.cpp:139] Memory required for data: 6442800
I0428 20:03:12.533989 30138 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:03:12.533995 30138 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:03:12.533999 30138 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:03:12.534005 30138 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:03:12.534024 30138 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:03:12.534070 30138 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:03:12.534077 30138 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:12.534082 30138 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:03:12.534085 30138 net.cpp:139] Memory required for data: 6450800
I0428 20:03:12.534088 30138 layer_factory.hpp:77] Creating layer accuracy
I0428 20:03:12.534095 30138 net.cpp:86] Creating Layer accuracy
I0428 20:03:12.534098 30138 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:03:12.534103 30138 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:03:12.534109 30138 net.cpp:382] accuracy -> accuracy
I0428 20:03:12.534117 30138 net.cpp:124] Setting up accuracy
I0428 20:03:12.534122 30138 net.cpp:131] Top shape: (1)
I0428 20:03:12.534126 30138 net.cpp:139] Memory required for data: 6450804
I0428 20:03:12.534128 30138 layer_factory.hpp:77] Creating layer loss
I0428 20:03:12.534134 30138 net.cpp:86] Creating Layer loss
I0428 20:03:12.534137 30138 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:03:12.534142 30138 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:03:12.534147 30138 net.cpp:382] loss -> loss
I0428 20:03:12.534153 30138 layer_factory.hpp:77] Creating layer loss
I0428 20:03:12.534440 30138 net.cpp:124] Setting up loss
I0428 20:03:12.534451 30138 net.cpp:131] Top shape: (1)
I0428 20:03:12.534454 30138 net.cpp:134]     with loss weight 1
I0428 20:03:12.534461 30138 net.cpp:139] Memory required for data: 6450808
I0428 20:03:12.534466 30138 net.cpp:200] loss needs backward computation.
I0428 20:03:12.534469 30138 net.cpp:202] accuracy does not need backward computation.
I0428 20:03:12.534474 30138 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:03:12.534477 30138 net.cpp:200] relu2 needs backward computation.
I0428 20:03:12.534482 30138 net.cpp:200] ip2 needs backward computation.
I0428 20:03:12.534485 30138 net.cpp:200] relu1 needs backward computation.
I0428 20:03:12.534489 30138 net.cpp:200] ip1 needs backward computation.
I0428 20:03:12.534492 30138 net.cpp:200] pool1 needs backward computation.
I0428 20:03:12.534497 30138 net.cpp:200] conv1 needs backward computation.
I0428 20:03:12.534499 30138 net.cpp:200] pool0 needs backward computation.
I0428 20:03:12.534503 30138 net.cpp:200] conv0 needs backward computation.
I0428 20:03:12.534507 30138 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:03:12.534512 30138 net.cpp:202] mnist does not need backward computation.
I0428 20:03:12.534514 30138 net.cpp:244] This network produces output accuracy
I0428 20:03:12.534518 30138 net.cpp:244] This network produces output loss
I0428 20:03:12.534531 30138 net.cpp:257] Network initialization done.
I0428 20:03:12.534574 30138 solver.cpp:56] Solver scaffolding done.
I0428 20:03:12.534893 30138 caffe.cpp:248] Starting Optimization
I0428 20:03:12.534901 30138 solver.cpp:273] Solving LeNet
I0428 20:03:12.534904 30138 solver.cpp:274] Learning Rate Policy: inv
I0428 20:03:12.535764 30138 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:03:12.593869 30145 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:12.594647 30138 solver.cpp:398]     Test net output #0: accuracy = 0.1138
I0428 20:03:12.594671 30138 solver.cpp:398]     Test net output #1: loss = 2.33255 (* 1 = 2.33255 loss)
I0428 20:03:12.598536 30138 solver.cpp:219] Iteration 0 (-1.3004e-42 iter/s, 0.0636027s/100 iters), loss = 2.37129
I0428 20:03:12.598567 30138 solver.cpp:238]     Train net output #0: loss = 2.37129 (* 1 = 2.37129 loss)
I0428 20:03:12.598579 30138 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:03:12.746026 30138 solver.cpp:219] Iteration 100 (678.225 iter/s, 0.147444s/100 iters), loss = 1.5137
I0428 20:03:12.746053 30138 solver.cpp:238]     Train net output #0: loss = 1.5137 (* 1 = 1.5137 loss)
I0428 20:03:12.746059 30138 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:03:12.900763 30138 solver.cpp:219] Iteration 200 (646.443 iter/s, 0.154693s/100 iters), loss = 1.26597
I0428 20:03:12.900851 30138 solver.cpp:238]     Train net output #0: loss = 1.26597 (* 1 = 1.26597 loss)
I0428 20:03:12.900866 30138 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:03:13.086141 30138 solver.cpp:219] Iteration 300 (539.725 iter/s, 0.185279s/100 iters), loss = 1.00924
I0428 20:03:13.086195 30138 solver.cpp:238]     Train net output #0: loss = 1.00924 (* 1 = 1.00924 loss)
I0428 20:03:13.086215 30138 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:03:13.267686 30138 solver.cpp:219] Iteration 400 (551.027 iter/s, 0.181479s/100 iters), loss = 0.960036
I0428 20:03:13.267740 30138 solver.cpp:238]     Train net output #0: loss = 0.960036 (* 1 = 0.960036 loss)
I0428 20:03:13.267766 30138 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:03:13.444479 30138 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:03:13.507782 30145 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:13.509834 30138 solver.cpp:398]     Test net output #0: accuracy = 0.6958
I0428 20:03:13.509866 30138 solver.cpp:398]     Test net output #1: loss = 0.770782 (* 1 = 0.770782 loss)
I0428 20:03:13.511421 30138 solver.cpp:219] Iteration 500 (410.389 iter/s, 0.243671s/100 iters), loss = 0.997136
I0428 20:03:13.511459 30138 solver.cpp:238]     Train net output #0: loss = 0.997136 (* 1 = 0.997136 loss)
I0428 20:03:13.511483 30138 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:03:13.683548 30138 solver.cpp:219] Iteration 600 (581.132 iter/s, 0.172078s/100 iters), loss = 0.617007
I0428 20:03:13.683596 30138 solver.cpp:238]     Train net output #0: loss = 0.617007 (* 1 = 0.617007 loss)
I0428 20:03:13.683614 30138 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:03:13.862689 30138 solver.cpp:219] Iteration 700 (558.399 iter/s, 0.179083s/100 iters), loss = 0.947219
I0428 20:03:13.862741 30138 solver.cpp:238]     Train net output #0: loss = 0.947219 (* 1 = 0.947219 loss)
I0428 20:03:13.862759 30138 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:03:14.043763 30138 solver.cpp:219] Iteration 800 (552.454 iter/s, 0.18101s/100 iters), loss = 0.876086
I0428 20:03:14.043826 30138 solver.cpp:238]     Train net output #0: loss = 0.876086 (* 1 = 0.876086 loss)
I0428 20:03:14.043840 30138 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:03:14.194232 30138 solver.cpp:219] Iteration 900 (664.862 iter/s, 0.150407s/100 iters), loss = 0.604407
I0428 20:03:14.194274 30138 solver.cpp:238]     Train net output #0: loss = 0.604407 (* 1 = 0.604407 loss)
I0428 20:03:14.194281 30138 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:03:14.241952 30144 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:14.336666 30138 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:03:14.339334 30138 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:03:14.340883 30138 solver.cpp:311] Iteration 1000, loss = 0.781687
I0428 20:03:14.340921 30138 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:03:14.406483 30145 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:03:14.408522 30138 solver.cpp:398]     Test net output #0: accuracy = 0.7018
I0428 20:03:14.408560 30138 solver.cpp:398]     Test net output #1: loss = 0.731303 (* 1 = 0.731303 loss)
I0428 20:03:14.408568 30138 solver.cpp:316] Optimization Done.
I0428 20:03:14.408572 30138 caffe.cpp:259] Optimization Done.
