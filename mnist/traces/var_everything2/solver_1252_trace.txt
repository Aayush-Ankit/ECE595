I0428 20:15:40.071401   492 caffe.cpp:218] Using GPUs 0
I0428 20:15:40.108062   492 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:40.564839   492 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1252.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:40.565034   492 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1252.prototxt
I0428 20:15:40.565413   492 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:40.565441   492 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:40.565510   492 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:40.565562   492 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:40.565642   492 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:40.565661   492 net.cpp:86] Creating Layer mnist
I0428 20:15:40.565667   492 net.cpp:382] mnist -> data
I0428 20:15:40.565685   492 net.cpp:382] mnist -> label
I0428 20:15:40.566634   492 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:40.568822   492 net.cpp:124] Setting up mnist
I0428 20:15:40.568867   492 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:40.568873   492 net.cpp:131] Top shape: 64 (64)
I0428 20:15:40.568876   492 net.cpp:139] Memory required for data: 200960
I0428 20:15:40.568882   492 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:40.568910   492 net.cpp:86] Creating Layer conv0
I0428 20:15:40.568915   492 net.cpp:408] conv0 <- data
I0428 20:15:40.568924   492 net.cpp:382] conv0 -> conv0
I0428 20:15:40.803146   492 net.cpp:124] Setting up conv0
I0428 20:15:40.803172   492 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:40.803176   492 net.cpp:139] Memory required for data: 7573760
I0428 20:15:40.803225   492 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:40.803236   492 net.cpp:86] Creating Layer pool0
I0428 20:15:40.803256   492 net.cpp:408] pool0 <- conv0
I0428 20:15:40.803262   492 net.cpp:382] pool0 -> pool0
I0428 20:15:40.803308   492 net.cpp:124] Setting up pool0
I0428 20:15:40.803313   492 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:40.803315   492 net.cpp:139] Memory required for data: 9416960
I0428 20:15:40.803318   492 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:40.803328   492 net.cpp:86] Creating Layer conv1
I0428 20:15:40.803333   492 net.cpp:408] conv1 <- pool0
I0428 20:15:40.803336   492 net.cpp:382] conv1 -> conv1
I0428 20:15:40.806151   492 net.cpp:124] Setting up conv1
I0428 20:15:40.806165   492 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:40.806169   492 net.cpp:139] Memory required for data: 9498880
I0428 20:15:40.806176   492 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:40.806183   492 net.cpp:86] Creating Layer pool1
I0428 20:15:40.806186   492 net.cpp:408] pool1 <- conv1
I0428 20:15:40.806190   492 net.cpp:382] pool1 -> pool1
I0428 20:15:40.806241   492 net.cpp:124] Setting up pool1
I0428 20:15:40.806246   492 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:40.806247   492 net.cpp:139] Memory required for data: 9519360
I0428 20:15:40.806251   492 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:40.806257   492 net.cpp:86] Creating Layer ip1
I0428 20:15:40.806259   492 net.cpp:408] ip1 <- pool1
I0428 20:15:40.806264   492 net.cpp:382] ip1 -> ip1
I0428 20:15:40.806351   492 net.cpp:124] Setting up ip1
I0428 20:15:40.806358   492 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:40.806361   492 net.cpp:139] Memory required for data: 9521920
I0428 20:15:40.806367   492 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:40.806373   492 net.cpp:86] Creating Layer relu1
I0428 20:15:40.806376   492 net.cpp:408] relu1 <- ip1
I0428 20:15:40.806380   492 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:40.806529   492 net.cpp:124] Setting up relu1
I0428 20:15:40.806537   492 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:40.806540   492 net.cpp:139] Memory required for data: 9524480
I0428 20:15:40.806543   492 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:40.806548   492 net.cpp:86] Creating Layer ip2
I0428 20:15:40.806551   492 net.cpp:408] ip2 <- ip1
I0428 20:15:40.806556   492 net.cpp:382] ip2 -> ip2
I0428 20:15:40.806638   492 net.cpp:124] Setting up ip2
I0428 20:15:40.806644   492 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:40.806648   492 net.cpp:139] Memory required for data: 9527040
I0428 20:15:40.806653   492 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:40.806658   492 net.cpp:86] Creating Layer relu2
I0428 20:15:40.806660   492 net.cpp:408] relu2 <- ip2
I0428 20:15:40.806664   492 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:40.807428   492 net.cpp:124] Setting up relu2
I0428 20:15:40.807457   492 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:40.807461   492 net.cpp:139] Memory required for data: 9529600
I0428 20:15:40.807463   492 layer_factory.hpp:77] Creating layer loss
I0428 20:15:40.807469   492 net.cpp:86] Creating Layer loss
I0428 20:15:40.807472   492 net.cpp:408] loss <- ip2
I0428 20:15:40.807477   492 net.cpp:408] loss <- label
I0428 20:15:40.807482   492 net.cpp:382] loss -> loss
I0428 20:15:40.807503   492 layer_factory.hpp:77] Creating layer loss
I0428 20:15:40.807766   492 net.cpp:124] Setting up loss
I0428 20:15:40.807777   492 net.cpp:131] Top shape: (1)
I0428 20:15:40.807781   492 net.cpp:134]     with loss weight 1
I0428 20:15:40.807796   492 net.cpp:139] Memory required for data: 9529604
I0428 20:15:40.807801   492 net.cpp:200] loss needs backward computation.
I0428 20:15:40.807806   492 net.cpp:200] relu2 needs backward computation.
I0428 20:15:40.807812   492 net.cpp:200] ip2 needs backward computation.
I0428 20:15:40.807816   492 net.cpp:200] relu1 needs backward computation.
I0428 20:15:40.807818   492 net.cpp:200] ip1 needs backward computation.
I0428 20:15:40.807843   492 net.cpp:200] pool1 needs backward computation.
I0428 20:15:40.807847   492 net.cpp:200] conv1 needs backward computation.
I0428 20:15:40.807849   492 net.cpp:200] pool0 needs backward computation.
I0428 20:15:40.807852   492 net.cpp:200] conv0 needs backward computation.
I0428 20:15:40.807855   492 net.cpp:202] mnist does not need backward computation.
I0428 20:15:40.807858   492 net.cpp:244] This network produces output loss
I0428 20:15:40.807867   492 net.cpp:257] Network initialization done.
I0428 20:15:40.808200   492 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1252.prototxt
I0428 20:15:40.808246   492 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:40.808342   492 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:40.808403   492 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:40.808451   492 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:40.808465   492 net.cpp:86] Creating Layer mnist
I0428 20:15:40.808470   492 net.cpp:382] mnist -> data
I0428 20:15:40.808476   492 net.cpp:382] mnist -> label
I0428 20:15:40.808557   492 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:40.810777   492 net.cpp:124] Setting up mnist
I0428 20:15:40.810789   492 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:40.810794   492 net.cpp:131] Top shape: 100 (100)
I0428 20:15:40.810797   492 net.cpp:139] Memory required for data: 314000
I0428 20:15:40.810801   492 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:40.810809   492 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:40.810813   492 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:40.810817   492 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:40.810823   492 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:40.810868   492 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:40.810897   492 net.cpp:131] Top shape: 100 (100)
I0428 20:15:40.810901   492 net.cpp:131] Top shape: 100 (100)
I0428 20:15:40.810904   492 net.cpp:139] Memory required for data: 314800
I0428 20:15:40.810907   492 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:40.810914   492 net.cpp:86] Creating Layer conv0
I0428 20:15:40.810917   492 net.cpp:408] conv0 <- data
I0428 20:15:40.810922   492 net.cpp:382] conv0 -> conv0
I0428 20:15:40.812638   492 net.cpp:124] Setting up conv0
I0428 20:15:40.812656   492 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:40.812662   492 net.cpp:139] Memory required for data: 11834800
I0428 20:15:40.812675   492 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:40.812685   492 net.cpp:86] Creating Layer pool0
I0428 20:15:40.812690   492 net.cpp:408] pool0 <- conv0
I0428 20:15:40.812698   492 net.cpp:382] pool0 -> pool0
I0428 20:15:40.812736   492 net.cpp:124] Setting up pool0
I0428 20:15:40.812741   492 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:40.812743   492 net.cpp:139] Memory required for data: 14714800
I0428 20:15:40.812747   492 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:40.812754   492 net.cpp:86] Creating Layer conv1
I0428 20:15:40.812757   492 net.cpp:408] conv1 <- pool0
I0428 20:15:40.812762   492 net.cpp:382] conv1 -> conv1
I0428 20:15:40.814349   492 net.cpp:124] Setting up conv1
I0428 20:15:40.814363   492 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:40.814365   492 net.cpp:139] Memory required for data: 14842800
I0428 20:15:40.814380   492 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:40.814386   492 net.cpp:86] Creating Layer pool1
I0428 20:15:40.814389   492 net.cpp:408] pool1 <- conv1
I0428 20:15:40.814394   492 net.cpp:382] pool1 -> pool1
I0428 20:15:40.814450   492 net.cpp:124] Setting up pool1
I0428 20:15:40.814474   492 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:40.814481   492 net.cpp:139] Memory required for data: 14874800
I0428 20:15:40.814486   492 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:40.814508   492 net.cpp:86] Creating Layer ip1
I0428 20:15:40.814513   492 net.cpp:408] ip1 <- pool1
I0428 20:15:40.814537   492 net.cpp:382] ip1 -> ip1
I0428 20:15:40.814646   492 net.cpp:124] Setting up ip1
I0428 20:15:40.814656   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.814659   492 net.cpp:139] Memory required for data: 14878800
I0428 20:15:40.814667   492 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:40.814672   492 net.cpp:86] Creating Layer relu1
I0428 20:15:40.814677   492 net.cpp:408] relu1 <- ip1
I0428 20:15:40.814680   492 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:40.814862   492 net.cpp:124] Setting up relu1
I0428 20:15:40.814870   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.814880   492 net.cpp:139] Memory required for data: 14882800
I0428 20:15:40.814883   492 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:40.814890   492 net.cpp:86] Creating Layer ip2
I0428 20:15:40.814900   492 net.cpp:408] ip2 <- ip1
I0428 20:15:40.814905   492 net.cpp:382] ip2 -> ip2
I0428 20:15:40.814995   492 net.cpp:124] Setting up ip2
I0428 20:15:40.815001   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.815004   492 net.cpp:139] Memory required for data: 14886800
I0428 20:15:40.815009   492 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:40.815014   492 net.cpp:86] Creating Layer relu2
I0428 20:15:40.815023   492 net.cpp:408] relu2 <- ip2
I0428 20:15:40.815027   492 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:40.815165   492 net.cpp:124] Setting up relu2
I0428 20:15:40.815173   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.815176   492 net.cpp:139] Memory required for data: 14890800
I0428 20:15:40.815179   492 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:15:40.815184   492 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:15:40.815186   492 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:15:40.815191   492 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:15:40.815207   492 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:15:40.815244   492 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:15:40.815249   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.815253   492 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:40.815255   492 net.cpp:139] Memory required for data: 14898800
I0428 20:15:40.815258   492 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:40.815263   492 net.cpp:86] Creating Layer accuracy
I0428 20:15:40.815266   492 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:15:40.815270   492 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:40.815274   492 net.cpp:382] accuracy -> accuracy
I0428 20:15:40.815280   492 net.cpp:124] Setting up accuracy
I0428 20:15:40.815284   492 net.cpp:131] Top shape: (1)
I0428 20:15:40.815287   492 net.cpp:139] Memory required for data: 14898804
I0428 20:15:40.815290   492 layer_factory.hpp:77] Creating layer loss
I0428 20:15:40.815294   492 net.cpp:86] Creating Layer loss
I0428 20:15:40.815297   492 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:15:40.815300   492 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:40.815304   492 net.cpp:382] loss -> loss
I0428 20:15:40.815323   492 layer_factory.hpp:77] Creating layer loss
I0428 20:15:40.815584   492 net.cpp:124] Setting up loss
I0428 20:15:40.815595   492 net.cpp:131] Top shape: (1)
I0428 20:15:40.815605   492 net.cpp:134]     with loss weight 1
I0428 20:15:40.815611   492 net.cpp:139] Memory required for data: 14898808
I0428 20:15:40.815615   492 net.cpp:200] loss needs backward computation.
I0428 20:15:40.815618   492 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:40.815623   492 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:15:40.815625   492 net.cpp:200] relu2 needs backward computation.
I0428 20:15:40.815629   492 net.cpp:200] ip2 needs backward computation.
I0428 20:15:40.815631   492 net.cpp:200] relu1 needs backward computation.
I0428 20:15:40.815634   492 net.cpp:200] ip1 needs backward computation.
I0428 20:15:40.815636   492 net.cpp:200] pool1 needs backward computation.
I0428 20:15:40.815640   492 net.cpp:200] conv1 needs backward computation.
I0428 20:15:40.815644   492 net.cpp:200] pool0 needs backward computation.
I0428 20:15:40.815646   492 net.cpp:200] conv0 needs backward computation.
I0428 20:15:40.815649   492 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:40.815654   492 net.cpp:202] mnist does not need backward computation.
I0428 20:15:40.815655   492 net.cpp:244] This network produces output accuracy
I0428 20:15:40.815659   492 net.cpp:244] This network produces output loss
I0428 20:15:40.815668   492 net.cpp:257] Network initialization done.
I0428 20:15:40.815706   492 solver.cpp:56] Solver scaffolding done.
I0428 20:15:40.816045   492 caffe.cpp:248] Starting Optimization
I0428 20:15:40.816052   492 solver.cpp:273] Solving LeNet
I0428 20:15:40.816056   492 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:40.816763   492 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:40.822356   492 blocking_queue.cpp:49] Waiting for data
I0428 20:15:40.893484   499 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:40.894220   492 solver.cpp:398]     Test net output #0: accuracy = 0.0778
I0428 20:15:40.894239   492 solver.cpp:398]     Test net output #1: loss = 2.3209 (* 1 = 2.3209 loss)
I0428 20:15:40.898566   492 solver.cpp:219] Iteration 0 (-3.18222e-31 iter/s, 0.082487s/100 iters), loss = 2.30236
I0428 20:15:40.898592   492 solver.cpp:238]     Train net output #0: loss = 2.30236 (* 1 = 2.30236 loss)
I0428 20:15:40.898603   492 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:41.014909   492 solver.cpp:219] Iteration 100 (859.81 iter/s, 0.116305s/100 iters), loss = 0.809428
I0428 20:15:41.014933   492 solver.cpp:238]     Train net output #0: loss = 0.809428 (* 1 = 0.809428 loss)
I0428 20:15:41.014940   492 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:41.123867   492 solver.cpp:219] Iteration 200 (918.081 iter/s, 0.108923s/100 iters), loss = 0.39898
I0428 20:15:41.123890   492 solver.cpp:238]     Train net output #0: loss = 0.39898 (* 1 = 0.39898 loss)
I0428 20:15:41.123896   492 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:41.234719   492 solver.cpp:219] Iteration 300 (902.495 iter/s, 0.110804s/100 iters), loss = 0.394929
I0428 20:15:41.234762   492 solver.cpp:238]     Train net output #0: loss = 0.394929 (* 1 = 0.394929 loss)
I0428 20:15:41.234769   492 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:41.343073   492 solver.cpp:219] Iteration 400 (923.219 iter/s, 0.108317s/100 iters), loss = 0.146499
I0428 20:15:41.343127   492 solver.cpp:238]     Train net output #0: loss = 0.146499 (* 1 = 0.146499 loss)
I0428 20:15:41.343133   492 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:41.451973   492 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:41.529326   499 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:41.530021   492 solver.cpp:398]     Test net output #0: accuracy = 0.9366
I0428 20:15:41.530040   492 solver.cpp:398]     Test net output #1: loss = 0.222435 (* 1 = 0.222435 loss)
I0428 20:15:41.531163   492 solver.cpp:219] Iteration 500 (531.812 iter/s, 0.188036s/100 iters), loss = 0.207888
I0428 20:15:41.531193   492 solver.cpp:238]     Train net output #0: loss = 0.207888 (* 1 = 0.207888 loss)
I0428 20:15:41.531200   492 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:41.640269   492 solver.cpp:219] Iteration 600 (916.878 iter/s, 0.109066s/100 iters), loss = 0.137718
I0428 20:15:41.640293   492 solver.cpp:238]     Train net output #0: loss = 0.137718 (* 1 = 0.137718 loss)
I0428 20:15:41.640300   492 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:41.749742   492 solver.cpp:219] Iteration 700 (913.76 iter/s, 0.109438s/100 iters), loss = 0.328158
I0428 20:15:41.749766   492 solver.cpp:238]     Train net output #0: loss = 0.328158 (* 1 = 0.328158 loss)
I0428 20:15:41.749788   492 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:41.859515   492 solver.cpp:219] Iteration 800 (911.269 iter/s, 0.109737s/100 iters), loss = 0.399981
I0428 20:15:41.859540   492 solver.cpp:238]     Train net output #0: loss = 0.399981 (* 1 = 0.399981 loss)
I0428 20:15:41.859546   492 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:41.969264   492 solver.cpp:219] Iteration 900 (911.466 iter/s, 0.109713s/100 iters), loss = 0.227329
I0428 20:15:41.969290   492 solver.cpp:238]     Train net output #0: loss = 0.227329 (* 1 = 0.227329 loss)
I0428 20:15:41.969311   492 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:42.005589   498 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:42.075644   492 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:42.076494   492 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:42.077167   492 solver.cpp:311] Iteration 1000, loss = 0.174478
I0428 20:15:42.077183   492 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:42.153393   499 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:42.154095   492 solver.cpp:398]     Test net output #0: accuracy = 0.9627
I0428 20:15:42.154114   492 solver.cpp:398]     Test net output #1: loss = 0.123143 (* 1 = 0.123143 loss)
I0428 20:15:42.154117   492 solver.cpp:316] Optimization Done.
I0428 20:15:42.154120   492 caffe.cpp:259] Optimization Done.
