I0428 19:47:48.686163 26330 caffe.cpp:218] Using GPUs 0
I0428 19:47:48.725898 26330 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:49.239637 26330 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test526.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:49.239774 26330 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test526.prototxt
I0428 19:47:49.240197 26330 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:49.240217 26330 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:49.240322 26330 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:49.240403 26330 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:49.240500 26330 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:49.240523 26330 net.cpp:86] Creating Layer mnist
I0428 19:47:49.240533 26330 net.cpp:382] mnist -> data
I0428 19:47:49.240556 26330 net.cpp:382] mnist -> label
I0428 19:47:49.241670 26330 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:49.244160 26330 net.cpp:124] Setting up mnist
I0428 19:47:49.244179 26330 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:49.244185 26330 net.cpp:131] Top shape: 64 (64)
I0428 19:47:49.244189 26330 net.cpp:139] Memory required for data: 200960
I0428 19:47:49.244196 26330 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:49.244215 26330 net.cpp:86] Creating Layer conv0
I0428 19:47:49.244235 26330 net.cpp:408] conv0 <- data
I0428 19:47:49.244248 26330 net.cpp:382] conv0 -> conv0
I0428 19:47:49.532591 26330 net.cpp:124] Setting up conv0
I0428 19:47:49.532620 26330 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:49.532624 26330 net.cpp:139] Memory required for data: 938240
I0428 19:47:49.532641 26330 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:49.532655 26330 net.cpp:86] Creating Layer pool0
I0428 19:47:49.532658 26330 net.cpp:408] pool0 <- conv0
I0428 19:47:49.532665 26330 net.cpp:382] pool0 -> pool0
I0428 19:47:49.532714 26330 net.cpp:124] Setting up pool0
I0428 19:47:49.532721 26330 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:49.532724 26330 net.cpp:139] Memory required for data: 1122560
I0428 19:47:49.532728 26330 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:49.532739 26330 net.cpp:86] Creating Layer conv1
I0428 19:47:49.532742 26330 net.cpp:408] conv1 <- pool0
I0428 19:47:49.532747 26330 net.cpp:382] conv1 -> conv1
I0428 19:47:49.534662 26330 net.cpp:124] Setting up conv1
I0428 19:47:49.534677 26330 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:49.534682 26330 net.cpp:139] Memory required for data: 1155328
I0428 19:47:49.534692 26330 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:49.534699 26330 net.cpp:86] Creating Layer pool1
I0428 19:47:49.534703 26330 net.cpp:408] pool1 <- conv1
I0428 19:47:49.534708 26330 net.cpp:382] pool1 -> pool1
I0428 19:47:49.534749 26330 net.cpp:124] Setting up pool1
I0428 19:47:49.534755 26330 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:49.534759 26330 net.cpp:139] Memory required for data: 1163520
I0428 19:47:49.534762 26330 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:49.534770 26330 net.cpp:86] Creating Layer ip1
I0428 19:47:49.534772 26330 net.cpp:408] ip1 <- pool1
I0428 19:47:49.534777 26330 net.cpp:382] ip1 -> ip1
I0428 19:47:49.534875 26330 net.cpp:124] Setting up ip1
I0428 19:47:49.534883 26330 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:49.534886 26330 net.cpp:139] Memory required for data: 1166080
I0428 19:47:49.534893 26330 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:49.534898 26330 net.cpp:86] Creating Layer relu1
I0428 19:47:49.534903 26330 net.cpp:408] relu1 <- ip1
I0428 19:47:49.534906 26330 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:49.535084 26330 net.cpp:124] Setting up relu1
I0428 19:47:49.535094 26330 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:49.535096 26330 net.cpp:139] Memory required for data: 1168640
I0428 19:47:49.535100 26330 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:49.535107 26330 net.cpp:86] Creating Layer ip2
I0428 19:47:49.535111 26330 net.cpp:408] ip2 <- ip1
I0428 19:47:49.535116 26330 net.cpp:382] ip2 -> ip2
I0428 19:47:49.535217 26330 net.cpp:124] Setting up ip2
I0428 19:47:49.535223 26330 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:49.535228 26330 net.cpp:139] Memory required for data: 1181440
I0428 19:47:49.535233 26330 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:49.535238 26330 net.cpp:86] Creating Layer relu2
I0428 19:47:49.535243 26330 net.cpp:408] relu2 <- ip2
I0428 19:47:49.535246 26330 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:49.536000 26330 net.cpp:124] Setting up relu2
I0428 19:47:49.536012 26330 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:47:49.536015 26330 net.cpp:139] Memory required for data: 1194240
I0428 19:47:49.536020 26330 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:49.536028 26330 net.cpp:86] Creating Layer ip3
I0428 19:47:49.536034 26330 net.cpp:408] ip3 <- ip2
I0428 19:47:49.536041 26330 net.cpp:382] ip3 -> ip3
I0428 19:47:49.536149 26330 net.cpp:124] Setting up ip3
I0428 19:47:49.536157 26330 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:49.536160 26330 net.cpp:139] Memory required for data: 1196800
I0428 19:47:49.536170 26330 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:49.536175 26330 net.cpp:86] Creating Layer relu3
I0428 19:47:49.536178 26330 net.cpp:408] relu3 <- ip3
I0428 19:47:49.536182 26330 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:49.536355 26330 net.cpp:124] Setting up relu3
I0428 19:47:49.536363 26330 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:49.536366 26330 net.cpp:139] Memory required for data: 1199360
I0428 19:47:49.536370 26330 layer_factory.hpp:77] Creating layer loss
I0428 19:47:49.536375 26330 net.cpp:86] Creating Layer loss
I0428 19:47:49.536378 26330 net.cpp:408] loss <- ip3
I0428 19:47:49.536382 26330 net.cpp:408] loss <- label
I0428 19:47:49.536388 26330 net.cpp:382] loss -> loss
I0428 19:47:49.536406 26330 layer_factory.hpp:77] Creating layer loss
I0428 19:47:49.536638 26330 net.cpp:124] Setting up loss
I0428 19:47:49.536646 26330 net.cpp:131] Top shape: (1)
I0428 19:47:49.536650 26330 net.cpp:134]     with loss weight 1
I0428 19:47:49.536665 26330 net.cpp:139] Memory required for data: 1199364
I0428 19:47:49.536670 26330 net.cpp:200] loss needs backward computation.
I0428 19:47:49.536674 26330 net.cpp:200] relu3 needs backward computation.
I0428 19:47:49.536677 26330 net.cpp:200] ip3 needs backward computation.
I0428 19:47:49.536681 26330 net.cpp:200] relu2 needs backward computation.
I0428 19:47:49.536684 26330 net.cpp:200] ip2 needs backward computation.
I0428 19:47:49.536687 26330 net.cpp:200] relu1 needs backward computation.
I0428 19:47:49.536690 26330 net.cpp:200] ip1 needs backward computation.
I0428 19:47:49.536694 26330 net.cpp:200] pool1 needs backward computation.
I0428 19:47:49.536696 26330 net.cpp:200] conv1 needs backward computation.
I0428 19:47:49.536700 26330 net.cpp:200] pool0 needs backward computation.
I0428 19:47:49.536703 26330 net.cpp:200] conv0 needs backward computation.
I0428 19:47:49.536707 26330 net.cpp:202] mnist does not need backward computation.
I0428 19:47:49.536710 26330 net.cpp:244] This network produces output loss
I0428 19:47:49.536720 26330 net.cpp:257] Network initialization done.
I0428 19:47:49.537101 26330 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test526.prototxt
I0428 19:47:49.537142 26330 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:49.537252 26330 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:47:49.537335 26330 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:49.537382 26330 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:49.537395 26330 net.cpp:86] Creating Layer mnist
I0428 19:47:49.537400 26330 net.cpp:382] mnist -> data
I0428 19:47:49.537408 26330 net.cpp:382] mnist -> label
I0428 19:47:49.537494 26330 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:49.539680 26330 net.cpp:124] Setting up mnist
I0428 19:47:49.539695 26330 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:49.539700 26330 net.cpp:131] Top shape: 100 (100)
I0428 19:47:49.539703 26330 net.cpp:139] Memory required for data: 314000
I0428 19:47:49.539707 26330 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:49.539718 26330 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:49.539722 26330 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:49.539727 26330 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:49.539734 26330 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:49.539834 26330 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:49.539842 26330 net.cpp:131] Top shape: 100 (100)
I0428 19:47:49.539846 26330 net.cpp:131] Top shape: 100 (100)
I0428 19:47:49.539849 26330 net.cpp:139] Memory required for data: 314800
I0428 19:47:49.539852 26330 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:49.539861 26330 net.cpp:86] Creating Layer conv0
I0428 19:47:49.539865 26330 net.cpp:408] conv0 <- data
I0428 19:47:49.539870 26330 net.cpp:382] conv0 -> conv0
I0428 19:47:49.541618 26330 net.cpp:124] Setting up conv0
I0428 19:47:49.541632 26330 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:49.541636 26330 net.cpp:139] Memory required for data: 1466800
I0428 19:47:49.541646 26330 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:49.541653 26330 net.cpp:86] Creating Layer pool0
I0428 19:47:49.541656 26330 net.cpp:408] pool0 <- conv0
I0428 19:47:49.541661 26330 net.cpp:382] pool0 -> pool0
I0428 19:47:49.541698 26330 net.cpp:124] Setting up pool0
I0428 19:47:49.541703 26330 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:49.541707 26330 net.cpp:139] Memory required for data: 1754800
I0428 19:47:49.541708 26330 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:49.541718 26330 net.cpp:86] Creating Layer conv1
I0428 19:47:49.541721 26330 net.cpp:408] conv1 <- pool0
I0428 19:47:49.541728 26330 net.cpp:382] conv1 -> conv1
I0428 19:47:49.543802 26330 net.cpp:124] Setting up conv1
I0428 19:47:49.543817 26330 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:49.543822 26330 net.cpp:139] Memory required for data: 1806000
I0428 19:47:49.543830 26330 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:49.543838 26330 net.cpp:86] Creating Layer pool1
I0428 19:47:49.543840 26330 net.cpp:408] pool1 <- conv1
I0428 19:47:49.543845 26330 net.cpp:382] pool1 -> pool1
I0428 19:47:49.543887 26330 net.cpp:124] Setting up pool1
I0428 19:47:49.543892 26330 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:49.543895 26330 net.cpp:139] Memory required for data: 1818800
I0428 19:47:49.543898 26330 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:49.543912 26330 net.cpp:86] Creating Layer ip1
I0428 19:47:49.543915 26330 net.cpp:408] ip1 <- pool1
I0428 19:47:49.543926 26330 net.cpp:382] ip1 -> ip1
I0428 19:47:49.544030 26330 net.cpp:124] Setting up ip1
I0428 19:47:49.544039 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.544052 26330 net.cpp:139] Memory required for data: 1822800
I0428 19:47:49.544060 26330 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:49.544065 26330 net.cpp:86] Creating Layer relu1
I0428 19:47:49.544070 26330 net.cpp:408] relu1 <- ip1
I0428 19:47:49.544073 26330 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:49.544248 26330 net.cpp:124] Setting up relu1
I0428 19:47:49.544258 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.544261 26330 net.cpp:139] Memory required for data: 1826800
I0428 19:47:49.544265 26330 layer_factory.hpp:77] Creating layer ip2
I0428 19:47:49.544271 26330 net.cpp:86] Creating Layer ip2
I0428 19:47:49.544275 26330 net.cpp:408] ip2 <- ip1
I0428 19:47:49.544281 26330 net.cpp:382] ip2 -> ip2
I0428 19:47:49.544390 26330 net.cpp:124] Setting up ip2
I0428 19:47:49.544397 26330 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:49.544400 26330 net.cpp:139] Memory required for data: 1846800
I0428 19:47:49.544406 26330 layer_factory.hpp:77] Creating layer relu2
I0428 19:47:49.544410 26330 net.cpp:86] Creating Layer relu2
I0428 19:47:49.544414 26330 net.cpp:408] relu2 <- ip2
I0428 19:47:49.544419 26330 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:47:49.544615 26330 net.cpp:124] Setting up relu2
I0428 19:47:49.544625 26330 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:47:49.544628 26330 net.cpp:139] Memory required for data: 1866800
I0428 19:47:49.544631 26330 layer_factory.hpp:77] Creating layer ip3
I0428 19:47:49.544636 26330 net.cpp:86] Creating Layer ip3
I0428 19:47:49.544639 26330 net.cpp:408] ip3 <- ip2
I0428 19:47:49.544646 26330 net.cpp:382] ip3 -> ip3
I0428 19:47:49.544764 26330 net.cpp:124] Setting up ip3
I0428 19:47:49.544771 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.544775 26330 net.cpp:139] Memory required for data: 1870800
I0428 19:47:49.544782 26330 layer_factory.hpp:77] Creating layer relu3
I0428 19:47:49.544786 26330 net.cpp:86] Creating Layer relu3
I0428 19:47:49.544790 26330 net.cpp:408] relu3 <- ip3
I0428 19:47:49.544795 26330 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:47:49.545689 26330 net.cpp:124] Setting up relu3
I0428 19:47:49.545701 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.545706 26330 net.cpp:139] Memory required for data: 1874800
I0428 19:47:49.545709 26330 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:47:49.545716 26330 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:47:49.545719 26330 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:47:49.545724 26330 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:47:49.545730 26330 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:47:49.545778 26330 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:47:49.545783 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.545786 26330 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:49.545795 26330 net.cpp:139] Memory required for data: 1882800
I0428 19:47:49.545799 26330 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:49.545804 26330 net.cpp:86] Creating Layer accuracy
I0428 19:47:49.545807 26330 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:47:49.545811 26330 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:49.545816 26330 net.cpp:382] accuracy -> accuracy
I0428 19:47:49.545825 26330 net.cpp:124] Setting up accuracy
I0428 19:47:49.545828 26330 net.cpp:131] Top shape: (1)
I0428 19:47:49.545836 26330 net.cpp:139] Memory required for data: 1882804
I0428 19:47:49.545840 26330 layer_factory.hpp:77] Creating layer loss
I0428 19:47:49.545843 26330 net.cpp:86] Creating Layer loss
I0428 19:47:49.545852 26330 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:47:49.545856 26330 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:49.545861 26330 net.cpp:382] loss -> loss
I0428 19:47:49.545869 26330 layer_factory.hpp:77] Creating layer loss
I0428 19:47:49.546113 26330 net.cpp:124] Setting up loss
I0428 19:47:49.546123 26330 net.cpp:131] Top shape: (1)
I0428 19:47:49.546126 26330 net.cpp:134]     with loss weight 1
I0428 19:47:49.546133 26330 net.cpp:139] Memory required for data: 1882808
I0428 19:47:49.546144 26330 net.cpp:200] loss needs backward computation.
I0428 19:47:49.546149 26330 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:49.546152 26330 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:47:49.546155 26330 net.cpp:200] relu3 needs backward computation.
I0428 19:47:49.546159 26330 net.cpp:200] ip3 needs backward computation.
I0428 19:47:49.546164 26330 net.cpp:200] relu2 needs backward computation.
I0428 19:47:49.546166 26330 net.cpp:200] ip2 needs backward computation.
I0428 19:47:49.546169 26330 net.cpp:200] relu1 needs backward computation.
I0428 19:47:49.546172 26330 net.cpp:200] ip1 needs backward computation.
I0428 19:47:49.546175 26330 net.cpp:200] pool1 needs backward computation.
I0428 19:47:49.546185 26330 net.cpp:200] conv1 needs backward computation.
I0428 19:47:49.546188 26330 net.cpp:200] pool0 needs backward computation.
I0428 19:47:49.546192 26330 net.cpp:200] conv0 needs backward computation.
I0428 19:47:49.546195 26330 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:49.546200 26330 net.cpp:202] mnist does not need backward computation.
I0428 19:47:49.546202 26330 net.cpp:244] This network produces output accuracy
I0428 19:47:49.546205 26330 net.cpp:244] This network produces output loss
I0428 19:47:49.546217 26330 net.cpp:257] Network initialization done.
I0428 19:47:49.546259 26330 solver.cpp:56] Solver scaffolding done.
I0428 19:47:49.546594 26330 caffe.cpp:248] Starting Optimization
I0428 19:47:49.546600 26330 solver.cpp:273] Solving LeNet
I0428 19:47:49.546604 26330 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:49.547394 26330 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:49.550178 26330 blocking_queue.cpp:49] Waiting for data
I0428 19:47:49.656217 26337 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:49.656975 26330 solver.cpp:398]     Test net output #0: accuracy = 0.1177
I0428 19:47:49.657027 26330 solver.cpp:398]     Test net output #1: loss = 2.32671 (* 1 = 2.32671 loss)
I0428 19:47:49.659912 26330 solver.cpp:219] Iteration 0 (0 iter/s, 0.113262s/100 iters), loss = 2.34069
I0428 19:47:49.659963 26330 solver.cpp:238]     Train net output #0: loss = 2.34069 (* 1 = 2.34069 loss)
I0428 19:47:49.659981 26330 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:49.747006 26330 solver.cpp:219] Iteration 100 (1149.15 iter/s, 0.0870205s/100 iters), loss = 1.59101
I0428 19:47:49.747038 26330 solver.cpp:238]     Train net output #0: loss = 1.59101 (* 1 = 1.59101 loss)
I0428 19:47:49.747046 26330 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:49.821390 26330 solver.cpp:219] Iteration 200 (1345.09 iter/s, 0.0743444s/100 iters), loss = 1.03468
I0428 19:47:49.821419 26330 solver.cpp:238]     Train net output #0: loss = 1.03468 (* 1 = 1.03468 loss)
I0428 19:47:49.821426 26330 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:49.894224 26330 solver.cpp:219] Iteration 300 (1373.7 iter/s, 0.0727962s/100 iters), loss = 0.883504
I0428 19:47:49.894253 26330 solver.cpp:238]     Train net output #0: loss = 0.883504 (* 1 = 0.883504 loss)
I0428 19:47:49.894259 26330 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:49.966871 26330 solver.cpp:219] Iteration 400 (1377.24 iter/s, 0.0726088s/100 iters), loss = 0.792225
I0428 19:47:49.966898 26330 solver.cpp:238]     Train net output #0: loss = 0.792225 (* 1 = 0.792225 loss)
I0428 19:47:49.966907 26330 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:50.038756 26330 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:50.145078 26337 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:50.145606 26330 solver.cpp:398]     Test net output #0: accuracy = 0.7239
I0428 19:47:50.145628 26330 solver.cpp:398]     Test net output #1: loss = 0.740885 (* 1 = 0.740885 loss)
I0428 19:47:50.146409 26330 solver.cpp:219] Iteration 500 (557.115 iter/s, 0.179496s/100 iters), loss = 0.567202
I0428 19:47:50.146433 26330 solver.cpp:238]     Train net output #0: loss = 0.567202 (* 1 = 0.567202 loss)
I0428 19:47:50.146457 26330 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:50.221873 26330 solver.cpp:219] Iteration 600 (1325.73 iter/s, 0.0754304s/100 iters), loss = 0.79097
I0428 19:47:50.221901 26330 solver.cpp:238]     Train net output #0: loss = 0.79097 (* 1 = 0.79097 loss)
I0428 19:47:50.221909 26330 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:50.294600 26330 solver.cpp:219] Iteration 700 (1375.69 iter/s, 0.0726906s/100 iters), loss = 0.912431
I0428 19:47:50.294628 26330 solver.cpp:238]     Train net output #0: loss = 0.912431 (* 1 = 0.912431 loss)
I0428 19:47:50.294636 26330 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:50.367272 26330 solver.cpp:219] Iteration 800 (1376.76 iter/s, 0.0726343s/100 iters), loss = 0.600428
I0428 19:47:50.367300 26330 solver.cpp:238]     Train net output #0: loss = 0.600428 (* 1 = 0.600428 loss)
I0428 19:47:50.367307 26330 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:50.438568 26330 solver.cpp:219] Iteration 900 (1403.31 iter/s, 0.07126s/100 iters), loss = 0.870545
I0428 19:47:50.438593 26330 solver.cpp:238]     Train net output #0: loss = 0.870545 (* 1 = 0.870545 loss)
I0428 19:47:50.438599 26330 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:50.461824 26336 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:50.507653 26330 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:50.508307 26330 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:50.508738 26330 solver.cpp:311] Iteration 1000, loss = 0.791249
I0428 19:47:50.508752 26330 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:50.619480 26337 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:50.620112 26330 solver.cpp:398]     Test net output #0: accuracy = 0.733
I0428 19:47:50.620141 26330 solver.cpp:398]     Test net output #1: loss = 0.694856 (* 1 = 0.694856 loss)
I0428 19:47:50.620151 26330 solver.cpp:316] Optimization Done.
I0428 19:47:50.620156 26330 caffe.cpp:259] Optimization Done.
