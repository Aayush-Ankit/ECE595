I0428 19:41:37.340730 24870 caffe.cpp:218] Using GPUs 0
I0428 19:41:37.382948 24870 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:37.907788 24870 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test370.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:37.907933 24870 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test370.prototxt
I0428 19:41:37.908356 24870 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:37.908375 24870 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:37.908479 24870 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:37.908560 24870 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:37.908658 24870 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:37.908681 24870 net.cpp:86] Creating Layer mnist
I0428 19:41:37.908690 24870 net.cpp:382] mnist -> data
I0428 19:41:37.908712 24870 net.cpp:382] mnist -> label
I0428 19:41:37.909847 24870 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:37.912515 24870 net.cpp:124] Setting up mnist
I0428 19:41:37.912535 24870 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:37.912542 24870 net.cpp:131] Top shape: 64 (64)
I0428 19:41:37.912545 24870 net.cpp:139] Memory required for data: 200960
I0428 19:41:37.912552 24870 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:37.912572 24870 net.cpp:86] Creating Layer conv0
I0428 19:41:37.912603 24870 net.cpp:408] conv0 <- data
I0428 19:41:37.912616 24870 net.cpp:382] conv0 -> conv0
I0428 19:41:38.199843 24870 net.cpp:124] Setting up conv0
I0428 19:41:38.199877 24870 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:38.199882 24870 net.cpp:139] Memory required for data: 495872
I0428 19:41:38.199899 24870 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:38.199915 24870 net.cpp:86] Creating Layer pool0
I0428 19:41:38.199920 24870 net.cpp:408] pool0 <- conv0
I0428 19:41:38.199926 24870 net.cpp:382] pool0 -> pool0
I0428 19:41:38.199981 24870 net.cpp:124] Setting up pool0
I0428 19:41:38.199988 24870 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:38.199991 24870 net.cpp:139] Memory required for data: 569600
I0428 19:41:38.199995 24870 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:38.200008 24870 net.cpp:86] Creating Layer conv1
I0428 19:41:38.200012 24870 net.cpp:408] conv1 <- pool0
I0428 19:41:38.200017 24870 net.cpp:382] conv1 -> conv1
I0428 19:41:38.202147 24870 net.cpp:124] Setting up conv1
I0428 19:41:38.202165 24870 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:38.202170 24870 net.cpp:139] Memory required for data: 733440
I0428 19:41:38.202180 24870 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:38.202189 24870 net.cpp:86] Creating Layer pool1
I0428 19:41:38.202194 24870 net.cpp:408] pool1 <- conv1
I0428 19:41:38.202200 24870 net.cpp:382] pool1 -> pool1
I0428 19:41:38.202244 24870 net.cpp:124] Setting up pool1
I0428 19:41:38.202251 24870 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:38.202255 24870 net.cpp:139] Memory required for data: 774400
I0428 19:41:38.202258 24870 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:38.202266 24870 net.cpp:86] Creating Layer ip1
I0428 19:41:38.202270 24870 net.cpp:408] ip1 <- pool1
I0428 19:41:38.202276 24870 net.cpp:382] ip1 -> ip1
I0428 19:41:38.203368 24870 net.cpp:124] Setting up ip1
I0428 19:41:38.203384 24870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:38.203388 24870 net.cpp:139] Memory required for data: 776960
I0428 19:41:38.203398 24870 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:38.203405 24870 net.cpp:86] Creating Layer relu1
I0428 19:41:38.203409 24870 net.cpp:408] relu1 <- ip1
I0428 19:41:38.203416 24870 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:38.203614 24870 net.cpp:124] Setting up relu1
I0428 19:41:38.203625 24870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:38.203629 24870 net.cpp:139] Memory required for data: 779520
I0428 19:41:38.203634 24870 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:38.203641 24870 net.cpp:86] Creating Layer ip2
I0428 19:41:38.203645 24870 net.cpp:408] ip2 <- ip1
I0428 19:41:38.203651 24870 net.cpp:382] ip2 -> ip2
I0428 19:41:38.203773 24870 net.cpp:124] Setting up ip2
I0428 19:41:38.203781 24870 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:41:38.203785 24870 net.cpp:139] Memory required for data: 792320
I0428 19:41:38.203791 24870 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:38.203799 24870 net.cpp:86] Creating Layer relu2
I0428 19:41:38.203802 24870 net.cpp:408] relu2 <- ip2
I0428 19:41:38.203807 24870 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:38.204660 24870 net.cpp:124] Setting up relu2
I0428 19:41:38.204675 24870 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:41:38.204680 24870 net.cpp:139] Memory required for data: 805120
I0428 19:41:38.204684 24870 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:38.204692 24870 net.cpp:86] Creating Layer ip3
I0428 19:41:38.204696 24870 net.cpp:408] ip3 <- ip2
I0428 19:41:38.204702 24870 net.cpp:382] ip3 -> ip3
I0428 19:41:38.204833 24870 net.cpp:124] Setting up ip3
I0428 19:41:38.204843 24870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:38.204848 24870 net.cpp:139] Memory required for data: 807680
I0428 19:41:38.204857 24870 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:38.204864 24870 net.cpp:86] Creating Layer relu3
I0428 19:41:38.204866 24870 net.cpp:408] relu3 <- ip3
I0428 19:41:38.204872 24870 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:38.205071 24870 net.cpp:124] Setting up relu3
I0428 19:41:38.205083 24870 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:38.205087 24870 net.cpp:139] Memory required for data: 810240
I0428 19:41:38.205090 24870 layer_factory.hpp:77] Creating layer loss
I0428 19:41:38.205098 24870 net.cpp:86] Creating Layer loss
I0428 19:41:38.205102 24870 net.cpp:408] loss <- ip3
I0428 19:41:38.205107 24870 net.cpp:408] loss <- label
I0428 19:41:38.205113 24870 net.cpp:382] loss -> loss
I0428 19:41:38.205134 24870 layer_factory.hpp:77] Creating layer loss
I0428 19:41:38.205399 24870 net.cpp:124] Setting up loss
I0428 19:41:38.205410 24870 net.cpp:131] Top shape: (1)
I0428 19:41:38.205415 24870 net.cpp:134]     with loss weight 1
I0428 19:41:38.205430 24870 net.cpp:139] Memory required for data: 810244
I0428 19:41:38.205435 24870 net.cpp:200] loss needs backward computation.
I0428 19:41:38.205440 24870 net.cpp:200] relu3 needs backward computation.
I0428 19:41:38.205443 24870 net.cpp:200] ip3 needs backward computation.
I0428 19:41:38.205446 24870 net.cpp:200] relu2 needs backward computation.
I0428 19:41:38.205451 24870 net.cpp:200] ip2 needs backward computation.
I0428 19:41:38.205453 24870 net.cpp:200] relu1 needs backward computation.
I0428 19:41:38.205457 24870 net.cpp:200] ip1 needs backward computation.
I0428 19:41:38.205461 24870 net.cpp:200] pool1 needs backward computation.
I0428 19:41:38.205464 24870 net.cpp:200] conv1 needs backward computation.
I0428 19:41:38.205468 24870 net.cpp:200] pool0 needs backward computation.
I0428 19:41:38.205472 24870 net.cpp:200] conv0 needs backward computation.
I0428 19:41:38.205476 24870 net.cpp:202] mnist does not need backward computation.
I0428 19:41:38.205480 24870 net.cpp:244] This network produces output loss
I0428 19:41:38.205492 24870 net.cpp:257] Network initialization done.
I0428 19:41:38.205873 24870 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test370.prototxt
I0428 19:41:38.205904 24870 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:38.206010 24870 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:38.206104 24870 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:38.206158 24870 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:38.206173 24870 net.cpp:86] Creating Layer mnist
I0428 19:41:38.206178 24870 net.cpp:382] mnist -> data
I0428 19:41:38.206187 24870 net.cpp:382] mnist -> label
I0428 19:41:38.206290 24870 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:38.208478 24870 net.cpp:124] Setting up mnist
I0428 19:41:38.208495 24870 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:38.208501 24870 net.cpp:131] Top shape: 100 (100)
I0428 19:41:38.208505 24870 net.cpp:139] Memory required for data: 314000
I0428 19:41:38.208509 24870 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:38.208523 24870 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:38.208526 24870 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:38.208533 24870 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:38.208540 24870 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:38.208590 24870 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:38.208597 24870 net.cpp:131] Top shape: 100 (100)
I0428 19:41:38.208601 24870 net.cpp:131] Top shape: 100 (100)
I0428 19:41:38.208606 24870 net.cpp:139] Memory required for data: 314800
I0428 19:41:38.208608 24870 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:38.208618 24870 net.cpp:86] Creating Layer conv0
I0428 19:41:38.208622 24870 net.cpp:408] conv0 <- data
I0428 19:41:38.208628 24870 net.cpp:382] conv0 -> conv0
I0428 19:41:38.210578 24870 net.cpp:124] Setting up conv0
I0428 19:41:38.210595 24870 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:38.210600 24870 net.cpp:139] Memory required for data: 775600
I0428 19:41:38.210610 24870 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:38.210618 24870 net.cpp:86] Creating Layer pool0
I0428 19:41:38.210623 24870 net.cpp:408] pool0 <- conv0
I0428 19:41:38.210628 24870 net.cpp:382] pool0 -> pool0
I0428 19:41:38.210670 24870 net.cpp:124] Setting up pool0
I0428 19:41:38.210676 24870 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:38.210680 24870 net.cpp:139] Memory required for data: 890800
I0428 19:41:38.210683 24870 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:38.210693 24870 net.cpp:86] Creating Layer conv1
I0428 19:41:38.210697 24870 net.cpp:408] conv1 <- pool0
I0428 19:41:38.210703 24870 net.cpp:382] conv1 -> conv1
I0428 19:41:38.212396 24870 net.cpp:124] Setting up conv1
I0428 19:41:38.212415 24870 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:38.212419 24870 net.cpp:139] Memory required for data: 1146800
I0428 19:41:38.212431 24870 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:38.212440 24870 net.cpp:86] Creating Layer pool1
I0428 19:41:38.212443 24870 net.cpp:408] pool1 <- conv1
I0428 19:41:38.212450 24870 net.cpp:382] pool1 -> pool1
I0428 19:41:38.212491 24870 net.cpp:124] Setting up pool1
I0428 19:41:38.212498 24870 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:38.212502 24870 net.cpp:139] Memory required for data: 1210800
I0428 19:41:38.212507 24870 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:38.212513 24870 net.cpp:86] Creating Layer ip1
I0428 19:41:38.212517 24870 net.cpp:408] ip1 <- pool1
I0428 19:41:38.212524 24870 net.cpp:382] ip1 -> ip1
I0428 19:41:38.212648 24870 net.cpp:124] Setting up ip1
I0428 19:41:38.212657 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.212676 24870 net.cpp:139] Memory required for data: 1214800
I0428 19:41:38.212685 24870 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:38.212693 24870 net.cpp:86] Creating Layer relu1
I0428 19:41:38.212707 24870 net.cpp:408] relu1 <- ip1
I0428 19:41:38.212713 24870 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:38.212908 24870 net.cpp:124] Setting up relu1
I0428 19:41:38.212919 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.212924 24870 net.cpp:139] Memory required for data: 1218800
I0428 19:41:38.212927 24870 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:38.212935 24870 net.cpp:86] Creating Layer ip2
I0428 19:41:38.212940 24870 net.cpp:408] ip2 <- ip1
I0428 19:41:38.212946 24870 net.cpp:382] ip2 -> ip2
I0428 19:41:38.213088 24870 net.cpp:124] Setting up ip2
I0428 19:41:38.213095 24870 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:41:38.213099 24870 net.cpp:139] Memory required for data: 1238800
I0428 19:41:38.213105 24870 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:38.213111 24870 net.cpp:86] Creating Layer relu2
I0428 19:41:38.213114 24870 net.cpp:408] relu2 <- ip2
I0428 19:41:38.213119 24870 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:38.213359 24870 net.cpp:124] Setting up relu2
I0428 19:41:38.213369 24870 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:41:38.213373 24870 net.cpp:139] Memory required for data: 1258800
I0428 19:41:38.213377 24870 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:38.213383 24870 net.cpp:86] Creating Layer ip3
I0428 19:41:38.213387 24870 net.cpp:408] ip3 <- ip2
I0428 19:41:38.213393 24870 net.cpp:382] ip3 -> ip3
I0428 19:41:38.213524 24870 net.cpp:124] Setting up ip3
I0428 19:41:38.213532 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.213536 24870 net.cpp:139] Memory required for data: 1262800
I0428 19:41:38.213546 24870 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:38.213552 24870 net.cpp:86] Creating Layer relu3
I0428 19:41:38.213557 24870 net.cpp:408] relu3 <- ip3
I0428 19:41:38.213562 24870 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:38.214483 24870 net.cpp:124] Setting up relu3
I0428 19:41:38.214498 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.214501 24870 net.cpp:139] Memory required for data: 1266800
I0428 19:41:38.214505 24870 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:41:38.214511 24870 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:41:38.214516 24870 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:41:38.214522 24870 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:41:38.214529 24870 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:41:38.214572 24870 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:41:38.214581 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.214586 24870 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:38.214589 24870 net.cpp:139] Memory required for data: 1274800
I0428 19:41:38.214593 24870 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:38.214599 24870 net.cpp:86] Creating Layer accuracy
I0428 19:41:38.214603 24870 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:41:38.214608 24870 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:38.214615 24870 net.cpp:382] accuracy -> accuracy
I0428 19:41:38.214623 24870 net.cpp:124] Setting up accuracy
I0428 19:41:38.214627 24870 net.cpp:131] Top shape: (1)
I0428 19:41:38.214632 24870 net.cpp:139] Memory required for data: 1274804
I0428 19:41:38.214634 24870 layer_factory.hpp:77] Creating layer loss
I0428 19:41:38.214639 24870 net.cpp:86] Creating Layer loss
I0428 19:41:38.214644 24870 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:41:38.214648 24870 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:38.214653 24870 net.cpp:382] loss -> loss
I0428 19:41:38.214660 24870 layer_factory.hpp:77] Creating layer loss
I0428 19:41:38.214932 24870 net.cpp:124] Setting up loss
I0428 19:41:38.214943 24870 net.cpp:131] Top shape: (1)
I0428 19:41:38.214947 24870 net.cpp:134]     with loss weight 1
I0428 19:41:38.214956 24870 net.cpp:139] Memory required for data: 1274808
I0428 19:41:38.214974 24870 net.cpp:200] loss needs backward computation.
I0428 19:41:38.214980 24870 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:38.214985 24870 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:41:38.214989 24870 net.cpp:200] relu3 needs backward computation.
I0428 19:41:38.214993 24870 net.cpp:200] ip3 needs backward computation.
I0428 19:41:38.214998 24870 net.cpp:200] relu2 needs backward computation.
I0428 19:41:38.215001 24870 net.cpp:200] ip2 needs backward computation.
I0428 19:41:38.215005 24870 net.cpp:200] relu1 needs backward computation.
I0428 19:41:38.215008 24870 net.cpp:200] ip1 needs backward computation.
I0428 19:41:38.215013 24870 net.cpp:200] pool1 needs backward computation.
I0428 19:41:38.215024 24870 net.cpp:200] conv1 needs backward computation.
I0428 19:41:38.215035 24870 net.cpp:200] pool0 needs backward computation.
I0428 19:41:38.215039 24870 net.cpp:200] conv0 needs backward computation.
I0428 19:41:38.215044 24870 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:38.215049 24870 net.cpp:202] mnist does not need backward computation.
I0428 19:41:38.215052 24870 net.cpp:244] This network produces output accuracy
I0428 19:41:38.215056 24870 net.cpp:244] This network produces output loss
I0428 19:41:38.215070 24870 net.cpp:257] Network initialization done.
I0428 19:41:38.215121 24870 solver.cpp:56] Solver scaffolding done.
I0428 19:41:38.215540 24870 caffe.cpp:248] Starting Optimization
I0428 19:41:38.215548 24870 solver.cpp:273] Solving LeNet
I0428 19:41:38.215551 24870 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:38.216509 24870 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:38.219444 24870 blocking_queue.cpp:49] Waiting for data
I0428 19:41:38.290065 24877 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:38.290527 24870 solver.cpp:398]     Test net output #0: accuracy = 0.067
I0428 19:41:38.290550 24870 solver.cpp:398]     Test net output #1: loss = 2.31848 (* 1 = 2.31848 loss)
I0428 19:41:38.292551 24870 solver.cpp:219] Iteration 0 (-1.3766e-31 iter/s, 0.076969s/100 iters), loss = 2.31197
I0428 19:41:38.292579 24870 solver.cpp:238]     Train net output #0: loss = 2.31197 (* 1 = 2.31197 loss)
I0428 19:41:38.292593 24870 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:38.369889 24870 solver.cpp:219] Iteration 100 (1293.65 iter/s, 0.0773007s/100 iters), loss = 1.60007
I0428 19:41:38.369920 24870 solver.cpp:238]     Train net output #0: loss = 1.60007 (* 1 = 1.60007 loss)
I0428 19:41:38.369926 24870 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:38.446976 24870 solver.cpp:219] Iteration 200 (1297.88 iter/s, 0.0770488s/100 iters), loss = 1.32596
I0428 19:41:38.447013 24870 solver.cpp:238]     Train net output #0: loss = 1.32596 (* 1 = 1.32596 loss)
I0428 19:41:38.447021 24870 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:38.524535 24870 solver.cpp:219] Iteration 300 (1289.97 iter/s, 0.0775209s/100 iters), loss = 0.80632
I0428 19:41:38.524574 24870 solver.cpp:238]     Train net output #0: loss = 0.80632 (* 1 = 0.80632 loss)
I0428 19:41:38.524581 24870 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:38.602309 24870 solver.cpp:219] Iteration 400 (1286.42 iter/s, 0.077735s/100 iters), loss = 1.00995
I0428 19:41:38.602339 24870 solver.cpp:238]     Train net output #0: loss = 1.00995 (* 1 = 1.00995 loss)
I0428 19:41:38.602345 24870 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:38.676939 24870 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:38.720321 24877 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:38.720768 24870 solver.cpp:398]     Test net output #0: accuracy = 0.6583
I0428 19:41:38.720803 24870 solver.cpp:398]     Test net output #1: loss = 0.917427 (* 1 = 0.917427 loss)
I0428 19:41:38.721686 24870 solver.cpp:219] Iteration 500 (837.956 iter/s, 0.119338s/100 iters), loss = 1.2419
I0428 19:41:38.721727 24870 solver.cpp:238]     Train net output #0: loss = 1.2419 (* 1 = 1.2419 loss)
I0428 19:41:38.721752 24870 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:38.793133 24870 solver.cpp:219] Iteration 600 (1400.31 iter/s, 0.0714127s/100 iters), loss = 0.819043
I0428 19:41:38.793159 24870 solver.cpp:238]     Train net output #0: loss = 0.819043 (* 1 = 0.819043 loss)
I0428 19:41:38.793166 24870 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:38.866294 24870 solver.cpp:219] Iteration 700 (1367.5 iter/s, 0.0731259s/100 iters), loss = 0.708803
I0428 19:41:38.866319 24870 solver.cpp:238]     Train net output #0: loss = 0.708803 (* 1 = 0.708803 loss)
I0428 19:41:38.866325 24870 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:38.938241 24870 solver.cpp:219] Iteration 800 (1390.56 iter/s, 0.0719133s/100 iters), loss = 0.709086
I0428 19:41:38.938266 24870 solver.cpp:238]     Train net output #0: loss = 0.709086 (* 1 = 0.709086 loss)
I0428 19:41:38.938287 24870 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:39.009979 24870 solver.cpp:219] Iteration 900 (1394.61 iter/s, 0.0717045s/100 iters), loss = 0.399721
I0428 19:41:39.010001 24870 solver.cpp:238]     Train net output #0: loss = 0.399721 (* 1 = 0.399721 loss)
I0428 19:41:39.010023 24870 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:39.033890 24876 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:39.080761 24870 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:39.081454 24870 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:39.081931 24870 solver.cpp:311] Iteration 1000, loss = 0.578071
I0428 19:41:39.081944 24870 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:39.137413 24877 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:39.139118 24870 solver.cpp:398]     Test net output #0: accuracy = 0.7825
I0428 19:41:39.139160 24870 solver.cpp:398]     Test net output #1: loss = 0.565257 (* 1 = 0.565257 loss)
I0428 19:41:39.139169 24870 solver.cpp:316] Optimization Done.
I0428 19:41:39.139173 24870 caffe.cpp:259] Optimization Done.
