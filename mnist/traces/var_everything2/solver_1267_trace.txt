I0428 20:16:16.902652   623 caffe.cpp:218] Using GPUs 0
I0428 20:16:16.938951   623 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:17.451933   623 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1267.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:17.452066   623 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1267.prototxt
I0428 20:16:17.452472   623 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:17.452491   623 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:17.452587   623 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:17.452661   623 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:17.452762   623 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:17.452786   623 net.cpp:86] Creating Layer mnist
I0428 20:16:17.452795   623 net.cpp:382] mnist -> data
I0428 20:16:17.452823   623 net.cpp:382] mnist -> label
I0428 20:16:17.453915   623 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:17.456382   623 net.cpp:124] Setting up mnist
I0428 20:16:17.456399   623 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:17.456405   623 net.cpp:131] Top shape: 64 (64)
I0428 20:16:17.456409   623 net.cpp:139] Memory required for data: 200960
I0428 20:16:17.456416   623 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:17.456432   623 net.cpp:86] Creating Layer conv0
I0428 20:16:17.456454   623 net.cpp:408] conv0 <- data
I0428 20:16:17.456465   623 net.cpp:382] conv0 -> conv0
I0428 20:16:17.703244   623 net.cpp:124] Setting up conv0
I0428 20:16:17.703271   623 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:17.703274   623 net.cpp:139] Memory required for data: 7573760
I0428 20:16:17.703289   623 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:17.703300   623 net.cpp:86] Creating Layer pool0
I0428 20:16:17.703305   623 net.cpp:408] pool0 <- conv0
I0428 20:16:17.703310   623 net.cpp:382] pool0 -> pool0
I0428 20:16:17.703369   623 net.cpp:124] Setting up pool0
I0428 20:16:17.703374   623 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:17.703377   623 net.cpp:139] Memory required for data: 9416960
I0428 20:16:17.703380   623 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:17.703390   623 net.cpp:86] Creating Layer conv1
I0428 20:16:17.703393   623 net.cpp:408] conv1 <- pool0
I0428 20:16:17.703398   623 net.cpp:382] conv1 -> conv1
I0428 20:16:17.706203   623 net.cpp:124] Setting up conv1
I0428 20:16:17.706233   623 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:17.706236   623 net.cpp:139] Memory required for data: 9498880
I0428 20:16:17.706244   623 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:17.706251   623 net.cpp:86] Creating Layer pool1
I0428 20:16:17.706255   623 net.cpp:408] pool1 <- conv1
I0428 20:16:17.706260   623 net.cpp:382] pool1 -> pool1
I0428 20:16:17.706311   623 net.cpp:124] Setting up pool1
I0428 20:16:17.706316   623 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:17.706320   623 net.cpp:139] Memory required for data: 9519360
I0428 20:16:17.706322   623 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:17.706329   623 net.cpp:86] Creating Layer ip1
I0428 20:16:17.706332   623 net.cpp:408] ip1 <- pool1
I0428 20:16:17.706337   623 net.cpp:382] ip1 -> ip1
I0428 20:16:17.706436   623 net.cpp:124] Setting up ip1
I0428 20:16:17.706444   623 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:17.706446   623 net.cpp:139] Memory required for data: 9521920
I0428 20:16:17.706454   623 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:17.706459   623 net.cpp:86] Creating Layer relu1
I0428 20:16:17.706462   623 net.cpp:408] relu1 <- ip1
I0428 20:16:17.706466   623 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:17.706627   623 net.cpp:124] Setting up relu1
I0428 20:16:17.706636   623 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:17.706640   623 net.cpp:139] Memory required for data: 9524480
I0428 20:16:17.706642   623 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:17.706648   623 net.cpp:86] Creating Layer ip2
I0428 20:16:17.706651   623 net.cpp:408] ip2 <- ip1
I0428 20:16:17.706656   623 net.cpp:382] ip2 -> ip2
I0428 20:16:17.706750   623 net.cpp:124] Setting up ip2
I0428 20:16:17.706758   623 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:17.706760   623 net.cpp:139] Memory required for data: 9537280
I0428 20:16:17.706765   623 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:17.706771   623 net.cpp:86] Creating Layer relu2
I0428 20:16:17.706774   623 net.cpp:408] relu2 <- ip2
I0428 20:16:17.706779   623 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:17.707530   623 net.cpp:124] Setting up relu2
I0428 20:16:17.707542   623 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:17.707561   623 net.cpp:139] Memory required for data: 9550080
I0428 20:16:17.707566   623 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:17.707587   623 net.cpp:86] Creating Layer ip3
I0428 20:16:17.707590   623 net.cpp:408] ip3 <- ip2
I0428 20:16:17.707595   623 net.cpp:382] ip3 -> ip3
I0428 20:16:17.707702   623 net.cpp:124] Setting up ip3
I0428 20:16:17.707710   623 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:17.707712   623 net.cpp:139] Memory required for data: 9552640
I0428 20:16:17.707720   623 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:17.707726   623 net.cpp:86] Creating Layer relu3
I0428 20:16:17.707727   623 net.cpp:408] relu3 <- ip3
I0428 20:16:17.707731   623 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:17.707906   623 net.cpp:124] Setting up relu3
I0428 20:16:17.707916   623 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:17.707919   623 net.cpp:139] Memory required for data: 9555200
I0428 20:16:17.707922   623 layer_factory.hpp:77] Creating layer loss
I0428 20:16:17.707928   623 net.cpp:86] Creating Layer loss
I0428 20:16:17.707931   623 net.cpp:408] loss <- ip3
I0428 20:16:17.707934   623 net.cpp:408] loss <- label
I0428 20:16:17.707940   623 net.cpp:382] loss -> loss
I0428 20:16:17.707954   623 layer_factory.hpp:77] Creating layer loss
I0428 20:16:17.708192   623 net.cpp:124] Setting up loss
I0428 20:16:17.708201   623 net.cpp:131] Top shape: (1)
I0428 20:16:17.708204   623 net.cpp:134]     with loss weight 1
I0428 20:16:17.708219   623 net.cpp:139] Memory required for data: 9555204
I0428 20:16:17.708223   623 net.cpp:200] loss needs backward computation.
I0428 20:16:17.708226   623 net.cpp:200] relu3 needs backward computation.
I0428 20:16:17.708230   623 net.cpp:200] ip3 needs backward computation.
I0428 20:16:17.708232   623 net.cpp:200] relu2 needs backward computation.
I0428 20:16:17.708235   623 net.cpp:200] ip2 needs backward computation.
I0428 20:16:17.708237   623 net.cpp:200] relu1 needs backward computation.
I0428 20:16:17.708240   623 net.cpp:200] ip1 needs backward computation.
I0428 20:16:17.708243   623 net.cpp:200] pool1 needs backward computation.
I0428 20:16:17.708245   623 net.cpp:200] conv1 needs backward computation.
I0428 20:16:17.708248   623 net.cpp:200] pool0 needs backward computation.
I0428 20:16:17.708251   623 net.cpp:200] conv0 needs backward computation.
I0428 20:16:17.708254   623 net.cpp:202] mnist does not need backward computation.
I0428 20:16:17.708257   623 net.cpp:244] This network produces output loss
I0428 20:16:17.708268   623 net.cpp:257] Network initialization done.
I0428 20:16:17.708622   623 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1267.prototxt
I0428 20:16:17.708663   623 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:17.708756   623 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:17.708861   623 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:17.708956   623 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:17.708971   623 net.cpp:86] Creating Layer mnist
I0428 20:16:17.708976   623 net.cpp:382] mnist -> data
I0428 20:16:17.708983   623 net.cpp:382] mnist -> label
I0428 20:16:17.709080   623 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:17.711205   623 net.cpp:124] Setting up mnist
I0428 20:16:17.711236   623 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:17.711241   623 net.cpp:131] Top shape: 100 (100)
I0428 20:16:17.711243   623 net.cpp:139] Memory required for data: 314000
I0428 20:16:17.711247   623 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:17.711253   623 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:17.711257   623 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:17.711262   623 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:17.711268   623 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:17.711316   623 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:17.711323   623 net.cpp:131] Top shape: 100 (100)
I0428 20:16:17.711326   623 net.cpp:131] Top shape: 100 (100)
I0428 20:16:17.711329   623 net.cpp:139] Memory required for data: 314800
I0428 20:16:17.711333   623 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:17.711341   623 net.cpp:86] Creating Layer conv0
I0428 20:16:17.711344   623 net.cpp:408] conv0 <- data
I0428 20:16:17.711350   623 net.cpp:382] conv0 -> conv0
I0428 20:16:17.713191   623 net.cpp:124] Setting up conv0
I0428 20:16:17.713220   623 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:17.713224   623 net.cpp:139] Memory required for data: 11834800
I0428 20:16:17.713233   623 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:17.713240   623 net.cpp:86] Creating Layer pool0
I0428 20:16:17.713244   623 net.cpp:408] pool0 <- conv0
I0428 20:16:17.713248   623 net.cpp:382] pool0 -> pool0
I0428 20:16:17.713302   623 net.cpp:124] Setting up pool0
I0428 20:16:17.713309   623 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:17.713310   623 net.cpp:139] Memory required for data: 14714800
I0428 20:16:17.713315   623 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:17.713322   623 net.cpp:86] Creating Layer conv1
I0428 20:16:17.713326   623 net.cpp:408] conv1 <- pool0
I0428 20:16:17.713332   623 net.cpp:382] conv1 -> conv1
I0428 20:16:17.714964   623 net.cpp:124] Setting up conv1
I0428 20:16:17.714993   623 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:17.714996   623 net.cpp:139] Memory required for data: 14842800
I0428 20:16:17.715004   623 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:17.715010   623 net.cpp:86] Creating Layer pool1
I0428 20:16:17.715013   623 net.cpp:408] pool1 <- conv1
I0428 20:16:17.715021   623 net.cpp:382] pool1 -> pool1
I0428 20:16:17.715073   623 net.cpp:124] Setting up pool1
I0428 20:16:17.715080   623 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:17.715082   623 net.cpp:139] Memory required for data: 14874800
I0428 20:16:17.715085   623 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:17.715093   623 net.cpp:86] Creating Layer ip1
I0428 20:16:17.715096   623 net.cpp:408] ip1 <- pool1
I0428 20:16:17.715102   623 net.cpp:382] ip1 -> ip1
I0428 20:16:17.715205   623 net.cpp:124] Setting up ip1
I0428 20:16:17.715214   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.715226   623 net.cpp:139] Memory required for data: 14878800
I0428 20:16:17.715234   623 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:17.715240   623 net.cpp:86] Creating Layer relu1
I0428 20:16:17.715243   623 net.cpp:408] relu1 <- ip1
I0428 20:16:17.715247   623 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:17.715432   623 net.cpp:124] Setting up relu1
I0428 20:16:17.715442   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.715446   623 net.cpp:139] Memory required for data: 14882800
I0428 20:16:17.715450   623 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:17.715456   623 net.cpp:86] Creating Layer ip2
I0428 20:16:17.715459   623 net.cpp:408] ip2 <- ip1
I0428 20:16:17.715466   623 net.cpp:382] ip2 -> ip2
I0428 20:16:17.715587   623 net.cpp:124] Setting up ip2
I0428 20:16:17.715610   623 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:17.715613   623 net.cpp:139] Memory required for data: 14902800
I0428 20:16:17.715618   623 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:17.715623   623 net.cpp:86] Creating Layer relu2
I0428 20:16:17.715626   623 net.cpp:408] relu2 <- ip2
I0428 20:16:17.715632   623 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:17.715884   623 net.cpp:124] Setting up relu2
I0428 20:16:17.715894   623 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:17.715898   623 net.cpp:139] Memory required for data: 14922800
I0428 20:16:17.715900   623 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:17.715908   623 net.cpp:86] Creating Layer ip3
I0428 20:16:17.715910   623 net.cpp:408] ip3 <- ip2
I0428 20:16:17.715915   623 net.cpp:382] ip3 -> ip3
I0428 20:16:17.716038   623 net.cpp:124] Setting up ip3
I0428 20:16:17.716047   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.716064   623 net.cpp:139] Memory required for data: 14926800
I0428 20:16:17.716073   623 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:17.716078   623 net.cpp:86] Creating Layer relu3
I0428 20:16:17.716080   623 net.cpp:408] relu3 <- ip3
I0428 20:16:17.716085   623 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:17.716971   623 net.cpp:124] Setting up relu3
I0428 20:16:17.716984   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.717002   623 net.cpp:139] Memory required for data: 14930800
I0428 20:16:17.717006   623 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:17.717012   623 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:17.717018   623 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:17.717023   623 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:17.717030   623 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:17.717092   623 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:17.717097   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.717103   623 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:17.717104   623 net.cpp:139] Memory required for data: 14938800
I0428 20:16:17.717108   623 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:17.717113   623 net.cpp:86] Creating Layer accuracy
I0428 20:16:17.717118   623 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:17.717121   623 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:17.717128   623 net.cpp:382] accuracy -> accuracy
I0428 20:16:17.717135   623 net.cpp:124] Setting up accuracy
I0428 20:16:17.717139   623 net.cpp:131] Top shape: (1)
I0428 20:16:17.717142   623 net.cpp:139] Memory required for data: 14938804
I0428 20:16:17.717145   623 layer_factory.hpp:77] Creating layer loss
I0428 20:16:17.717164   623 net.cpp:86] Creating Layer loss
I0428 20:16:17.717167   623 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:17.717182   623 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:17.717187   623 net.cpp:382] loss -> loss
I0428 20:16:17.717193   623 layer_factory.hpp:77] Creating layer loss
I0428 20:16:17.717442   623 net.cpp:124] Setting up loss
I0428 20:16:17.717450   623 net.cpp:131] Top shape: (1)
I0428 20:16:17.717454   623 net.cpp:134]     with loss weight 1
I0428 20:16:17.717470   623 net.cpp:139] Memory required for data: 14938808
I0428 20:16:17.717491   623 net.cpp:200] loss needs backward computation.
I0428 20:16:17.717495   623 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:17.717499   623 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:17.717502   623 net.cpp:200] relu3 needs backward computation.
I0428 20:16:17.717506   623 net.cpp:200] ip3 needs backward computation.
I0428 20:16:17.717509   623 net.cpp:200] relu2 needs backward computation.
I0428 20:16:17.717511   623 net.cpp:200] ip2 needs backward computation.
I0428 20:16:17.717514   623 net.cpp:200] relu1 needs backward computation.
I0428 20:16:17.717517   623 net.cpp:200] ip1 needs backward computation.
I0428 20:16:17.717521   623 net.cpp:200] pool1 needs backward computation.
I0428 20:16:17.717525   623 net.cpp:200] conv1 needs backward computation.
I0428 20:16:17.717535   623 net.cpp:200] pool0 needs backward computation.
I0428 20:16:17.717540   623 net.cpp:200] conv0 needs backward computation.
I0428 20:16:17.717543   623 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:17.717548   623 net.cpp:202] mnist does not need backward computation.
I0428 20:16:17.717550   623 net.cpp:244] This network produces output accuracy
I0428 20:16:17.717555   623 net.cpp:244] This network produces output loss
I0428 20:16:17.717567   623 net.cpp:257] Network initialization done.
I0428 20:16:17.717610   623 solver.cpp:56] Solver scaffolding done.
I0428 20:16:17.717974   623 caffe.cpp:248] Starting Optimization
I0428 20:16:17.717980   623 solver.cpp:273] Solving LeNet
I0428 20:16:17.717983   623 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:17.718956   623 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:17.725404   623 blocking_queue.cpp:49] Waiting for data
I0428 20:16:17.798868   630 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:17.799674   623 solver.cpp:398]     Test net output #0: accuracy = 0.1008
I0428 20:16:17.799710   623 solver.cpp:398]     Test net output #1: loss = 2.31603 (* 1 = 2.31603 loss)
I0428 20:16:17.804100   623 solver.cpp:219] Iteration 0 (-2.27445e-31 iter/s, 0.0860703s/100 iters), loss = 2.32938
I0428 20:16:17.804138   623 solver.cpp:238]     Train net output #0: loss = 2.32938 (* 1 = 2.32938 loss)
I0428 20:16:17.804150   623 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:17.933387   623 solver.cpp:219] Iteration 100 (773.706 iter/s, 0.129248s/100 iters), loss = 1.03565
I0428 20:16:17.933426   623 solver.cpp:238]     Train net output #0: loss = 1.03565 (* 1 = 1.03565 loss)
I0428 20:16:17.933434   623 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:18.050042   623 solver.cpp:219] Iteration 200 (857.476 iter/s, 0.116621s/100 iters), loss = 0.498278
I0428 20:16:18.050067   623 solver.cpp:238]     Train net output #0: loss = 0.498278 (* 1 = 0.498278 loss)
I0428 20:16:18.050074   623 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:18.167961   623 solver.cpp:219] Iteration 300 (848.292 iter/s, 0.117884s/100 iters), loss = 0.67365
I0428 20:16:18.168004   623 solver.cpp:238]     Train net output #0: loss = 0.67365 (* 1 = 0.67365 loss)
I0428 20:16:18.168010   623 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:18.289350   623 solver.cpp:219] Iteration 400 (824.159 iter/s, 0.121336s/100 iters), loss = 0.417786
I0428 20:16:18.289391   623 solver.cpp:238]     Train net output #0: loss = 0.417786 (* 1 = 0.417786 loss)
I0428 20:16:18.289397   623 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:18.404567   623 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:18.468258   630 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:18.469959   623 solver.cpp:398]     Test net output #0: accuracy = 0.8482
I0428 20:16:18.469995   623 solver.cpp:398]     Test net output #1: loss = 0.430416 (* 1 = 0.430416 loss)
I0428 20:16:18.471150   623 solver.cpp:219] Iteration 500 (550.17 iter/s, 0.181762s/100 iters), loss = 0.49504
I0428 20:16:18.471207   623 solver.cpp:238]     Train net output #0: loss = 0.49504 (* 1 = 0.49504 loss)
I0428 20:16:18.471216   623 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:18.591989   623 solver.cpp:219] Iteration 600 (828.009 iter/s, 0.120772s/100 iters), loss = 0.29905
I0428 20:16:18.592031   623 solver.cpp:238]     Train net output #0: loss = 0.299051 (* 1 = 0.299051 loss)
I0428 20:16:18.592039   623 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:18.714429   623 solver.cpp:219] Iteration 700 (817.084 iter/s, 0.122387s/100 iters), loss = 0.328253
I0428 20:16:18.714473   623 solver.cpp:238]     Train net output #0: loss = 0.328253 (* 1 = 0.328253 loss)
I0428 20:16:18.714480   623 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:18.836180   623 solver.cpp:219] Iteration 800 (821.711 iter/s, 0.121697s/100 iters), loss = 0.518541
I0428 20:16:18.836220   623 solver.cpp:238]     Train net output #0: loss = 0.518541 (* 1 = 0.518541 loss)
I0428 20:16:18.836227   623 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:18.950788   623 solver.cpp:219] Iteration 900 (872.811 iter/s, 0.114572s/100 iters), loss = 0.546006
I0428 20:16:18.950830   623 solver.cpp:238]     Train net output #0: loss = 0.546006 (* 1 = 0.546006 loss)
I0428 20:16:18.950837   623 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:18.988981   629 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:19.064517   623 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:19.065603   623 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:19.066305   623 solver.cpp:311] Iteration 1000, loss = 0.345259
I0428 20:16:19.066335   623 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:19.144361   630 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:19.145130   623 solver.cpp:398]     Test net output #0: accuracy = 0.8695
I0428 20:16:19.145166   623 solver.cpp:398]     Test net output #1: loss = 0.349284 (* 1 = 0.349284 loss)
I0428 20:16:19.145171   623 solver.cpp:316] Optimization Done.
I0428 20:16:19.145195   623 caffe.cpp:259] Optimization Done.
