I0428 19:50:07.098264 26935 caffe.cpp:218] Using GPUs 0
I0428 19:50:07.129348 26935 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:50:07.602756 26935 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test595.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:50:07.602905 26935 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test595.prototxt
I0428 19:50:07.603227 26935 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:50:07.603242 26935 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:50:07.603315 26935 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:50:07.603381 26935 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:07.603466 26935 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:50:07.603500 26935 net.cpp:86] Creating Layer mnist
I0428 19:50:07.603507 26935 net.cpp:382] mnist -> data
I0428 19:50:07.603525 26935 net.cpp:382] mnist -> label
I0428 19:50:07.604472 26935 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:50:07.606809 26935 net.cpp:124] Setting up mnist
I0428 19:50:07.606840 26935 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:50:07.606845 26935 net.cpp:131] Top shape: 64 (64)
I0428 19:50:07.606848 26935 net.cpp:139] Memory required for data: 200960
I0428 19:50:07.606870 26935 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:07.606885 26935 net.cpp:86] Creating Layer conv0
I0428 19:50:07.606896 26935 net.cpp:408] conv0 <- data
I0428 19:50:07.606907 26935 net.cpp:382] conv0 -> conv0
I0428 19:50:07.833856 26935 net.cpp:124] Setting up conv0
I0428 19:50:07.833899 26935 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:50:07.833902 26935 net.cpp:139] Memory required for data: 938240
I0428 19:50:07.833935 26935 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:07.833948 26935 net.cpp:86] Creating Layer pool0
I0428 19:50:07.833952 26935 net.cpp:408] pool0 <- conv0
I0428 19:50:07.833957 26935 net.cpp:382] pool0 -> pool0
I0428 19:50:07.834002 26935 net.cpp:124] Setting up pool0
I0428 19:50:07.834007 26935 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:50:07.834010 26935 net.cpp:139] Memory required for data: 1122560
I0428 19:50:07.834012 26935 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:07.834022 26935 net.cpp:86] Creating Layer conv1
I0428 19:50:07.834025 26935 net.cpp:408] conv1 <- pool0
I0428 19:50:07.834029 26935 net.cpp:382] conv1 -> conv1
I0428 19:50:07.836740 26935 net.cpp:124] Setting up conv1
I0428 19:50:07.836769 26935 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:50:07.836773 26935 net.cpp:139] Memory required for data: 1286400
I0428 19:50:07.836796 26935 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:07.836820 26935 net.cpp:86] Creating Layer pool1
I0428 19:50:07.836840 26935 net.cpp:408] pool1 <- conv1
I0428 19:50:07.836860 26935 net.cpp:382] pool1 -> pool1
I0428 19:50:07.836910 26935 net.cpp:124] Setting up pool1
I0428 19:50:07.836933 26935 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:50:07.836937 26935 net.cpp:139] Memory required for data: 1327360
I0428 19:50:07.836941 26935 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:07.836948 26935 net.cpp:86] Creating Layer ip1
I0428 19:50:07.836951 26935 net.cpp:408] ip1 <- pool1
I0428 19:50:07.836956 26935 net.cpp:382] ip1 -> ip1
I0428 19:50:07.837976 26935 net.cpp:124] Setting up ip1
I0428 19:50:07.837988 26935 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:50:07.837991 26935 net.cpp:139] Memory required for data: 1340160
I0428 19:50:07.837999 26935 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:07.838006 26935 net.cpp:86] Creating Layer relu1
I0428 19:50:07.838008 26935 net.cpp:408] relu1 <- ip1
I0428 19:50:07.838013 26935 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:07.838197 26935 net.cpp:124] Setting up relu1
I0428 19:50:07.838207 26935 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:50:07.838209 26935 net.cpp:139] Memory required for data: 1352960
I0428 19:50:07.838212 26935 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:07.838219 26935 net.cpp:86] Creating Layer ip2
I0428 19:50:07.838222 26935 net.cpp:408] ip2 <- ip1
I0428 19:50:07.838227 26935 net.cpp:382] ip2 -> ip2
I0428 19:50:07.838332 26935 net.cpp:124] Setting up ip2
I0428 19:50:07.838340 26935 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:07.838342 26935 net.cpp:139] Memory required for data: 1355520
I0428 19:50:07.838347 26935 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:07.838352 26935 net.cpp:86] Creating Layer relu2
I0428 19:50:07.838356 26935 net.cpp:408] relu2 <- ip2
I0428 19:50:07.838361 26935 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:07.839092 26935 net.cpp:124] Setting up relu2
I0428 19:50:07.839103 26935 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:07.839123 26935 net.cpp:139] Memory required for data: 1358080
I0428 19:50:07.839128 26935 layer_factory.hpp:77] Creating layer loss
I0428 19:50:07.839133 26935 net.cpp:86] Creating Layer loss
I0428 19:50:07.839136 26935 net.cpp:408] loss <- ip2
I0428 19:50:07.839140 26935 net.cpp:408] loss <- label
I0428 19:50:07.839146 26935 net.cpp:382] loss -> loss
I0428 19:50:07.839161 26935 layer_factory.hpp:77] Creating layer loss
I0428 19:50:07.839413 26935 net.cpp:124] Setting up loss
I0428 19:50:07.839422 26935 net.cpp:131] Top shape: (1)
I0428 19:50:07.839426 26935 net.cpp:134]     with loss weight 1
I0428 19:50:07.839442 26935 net.cpp:139] Memory required for data: 1358084
I0428 19:50:07.839444 26935 net.cpp:200] loss needs backward computation.
I0428 19:50:07.839448 26935 net.cpp:200] relu2 needs backward computation.
I0428 19:50:07.839452 26935 net.cpp:200] ip2 needs backward computation.
I0428 19:50:07.839454 26935 net.cpp:200] relu1 needs backward computation.
I0428 19:50:07.839457 26935 net.cpp:200] ip1 needs backward computation.
I0428 19:50:07.839470 26935 net.cpp:200] pool1 needs backward computation.
I0428 19:50:07.839474 26935 net.cpp:200] conv1 needs backward computation.
I0428 19:50:07.839478 26935 net.cpp:200] pool0 needs backward computation.
I0428 19:50:07.839480 26935 net.cpp:200] conv0 needs backward computation.
I0428 19:50:07.839484 26935 net.cpp:202] mnist does not need backward computation.
I0428 19:50:07.839486 26935 net.cpp:244] This network produces output loss
I0428 19:50:07.839495 26935 net.cpp:257] Network initialization done.
I0428 19:50:07.839792 26935 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test595.prototxt
I0428 19:50:07.839826 26935 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:50:07.839908 26935 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:50:07.839970 26935 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:07.840014 26935 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:50:07.840026 26935 net.cpp:86] Creating Layer mnist
I0428 19:50:07.840030 26935 net.cpp:382] mnist -> data
I0428 19:50:07.840039 26935 net.cpp:382] mnist -> label
I0428 19:50:07.840132 26935 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:50:07.842105 26935 net.cpp:124] Setting up mnist
I0428 19:50:07.842128 26935 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:50:07.842150 26935 net.cpp:131] Top shape: 100 (100)
I0428 19:50:07.842154 26935 net.cpp:139] Memory required for data: 314000
I0428 19:50:07.842157 26935 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:50:07.842164 26935 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:50:07.842167 26935 net.cpp:408] label_mnist_1_split <- label
I0428 19:50:07.842171 26935 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:50:07.842178 26935 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:50:07.842219 26935 net.cpp:124] Setting up label_mnist_1_split
I0428 19:50:07.842236 26935 net.cpp:131] Top shape: 100 (100)
I0428 19:50:07.842239 26935 net.cpp:131] Top shape: 100 (100)
I0428 19:50:07.842242 26935 net.cpp:139] Memory required for data: 314800
I0428 19:50:07.842245 26935 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:07.842253 26935 net.cpp:86] Creating Layer conv0
I0428 19:50:07.842257 26935 net.cpp:408] conv0 <- data
I0428 19:50:07.842262 26935 net.cpp:382] conv0 -> conv0
I0428 19:50:07.843958 26935 net.cpp:124] Setting up conv0
I0428 19:50:07.843971 26935 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:50:07.843992 26935 net.cpp:139] Memory required for data: 1466800
I0428 19:50:07.844002 26935 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:07.844007 26935 net.cpp:86] Creating Layer pool0
I0428 19:50:07.844010 26935 net.cpp:408] pool0 <- conv0
I0428 19:50:07.844015 26935 net.cpp:382] pool0 -> pool0
I0428 19:50:07.844049 26935 net.cpp:124] Setting up pool0
I0428 19:50:07.844056 26935 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:50:07.844059 26935 net.cpp:139] Memory required for data: 1754800
I0428 19:50:07.844061 26935 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:07.844070 26935 net.cpp:86] Creating Layer conv1
I0428 19:50:07.844074 26935 net.cpp:408] conv1 <- pool0
I0428 19:50:07.844079 26935 net.cpp:382] conv1 -> conv1
I0428 19:50:07.846248 26935 net.cpp:124] Setting up conv1
I0428 19:50:07.846262 26935 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:50:07.846266 26935 net.cpp:139] Memory required for data: 2010800
I0428 19:50:07.846274 26935 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:07.846297 26935 net.cpp:86] Creating Layer pool1
I0428 19:50:07.846300 26935 net.cpp:408] pool1 <- conv1
I0428 19:50:07.846307 26935 net.cpp:382] pool1 -> pool1
I0428 19:50:07.846346 26935 net.cpp:124] Setting up pool1
I0428 19:50:07.846354 26935 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:50:07.846356 26935 net.cpp:139] Memory required for data: 2074800
I0428 19:50:07.846359 26935 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:07.846365 26935 net.cpp:86] Creating Layer ip1
I0428 19:50:07.846369 26935 net.cpp:408] ip1 <- pool1
I0428 19:50:07.846374 26935 net.cpp:382] ip1 -> ip1
I0428 19:50:07.846521 26935 net.cpp:124] Setting up ip1
I0428 19:50:07.846529 26935 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:50:07.846531 26935 net.cpp:139] Memory required for data: 2094800
I0428 19:50:07.846539 26935 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:07.846544 26935 net.cpp:86] Creating Layer relu1
I0428 19:50:07.846546 26935 net.cpp:408] relu1 <- ip1
I0428 19:50:07.846550 26935 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:07.846724 26935 net.cpp:124] Setting up relu1
I0428 19:50:07.846734 26935 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:50:07.846736 26935 net.cpp:139] Memory required for data: 2114800
I0428 19:50:07.846740 26935 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:07.846746 26935 net.cpp:86] Creating Layer ip2
I0428 19:50:07.846750 26935 net.cpp:408] ip2 <- ip1
I0428 19:50:07.846755 26935 net.cpp:382] ip2 -> ip2
I0428 19:50:07.846856 26935 net.cpp:124] Setting up ip2
I0428 19:50:07.846863 26935 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:07.846866 26935 net.cpp:139] Memory required for data: 2118800
I0428 19:50:07.846873 26935 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:07.846876 26935 net.cpp:86] Creating Layer relu2
I0428 19:50:07.846879 26935 net.cpp:408] relu2 <- ip2
I0428 19:50:07.846884 26935 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:07.847045 26935 net.cpp:124] Setting up relu2
I0428 19:50:07.847054 26935 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:07.847056 26935 net.cpp:139] Memory required for data: 2122800
I0428 19:50:07.847059 26935 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:50:07.847064 26935 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:50:07.847066 26935 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:50:07.847071 26935 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:50:07.847087 26935 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:50:07.847148 26935 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:50:07.847156 26935 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:07.847158 26935 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:07.847162 26935 net.cpp:139] Memory required for data: 2130800
I0428 19:50:07.847164 26935 layer_factory.hpp:77] Creating layer accuracy
I0428 19:50:07.847169 26935 net.cpp:86] Creating Layer accuracy
I0428 19:50:07.847172 26935 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:50:07.847177 26935 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:50:07.847180 26935 net.cpp:382] accuracy -> accuracy
I0428 19:50:07.847187 26935 net.cpp:124] Setting up accuracy
I0428 19:50:07.847190 26935 net.cpp:131] Top shape: (1)
I0428 19:50:07.847193 26935 net.cpp:139] Memory required for data: 2130804
I0428 19:50:07.847195 26935 layer_factory.hpp:77] Creating layer loss
I0428 19:50:07.847199 26935 net.cpp:86] Creating Layer loss
I0428 19:50:07.847203 26935 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:50:07.847205 26935 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:50:07.847209 26935 net.cpp:382] loss -> loss
I0428 19:50:07.847215 26935 layer_factory.hpp:77] Creating layer loss
I0428 19:50:07.847529 26935 net.cpp:124] Setting up loss
I0428 19:50:07.847553 26935 net.cpp:131] Top shape: (1)
I0428 19:50:07.847573 26935 net.cpp:134]     with loss weight 1
I0428 19:50:07.847579 26935 net.cpp:139] Memory required for data: 2130808
I0428 19:50:07.847584 26935 net.cpp:200] loss needs backward computation.
I0428 19:50:07.847589 26935 net.cpp:202] accuracy does not need backward computation.
I0428 19:50:07.847594 26935 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:50:07.847596 26935 net.cpp:200] relu2 needs backward computation.
I0428 19:50:07.847600 26935 net.cpp:200] ip2 needs backward computation.
I0428 19:50:07.847604 26935 net.cpp:200] relu1 needs backward computation.
I0428 19:50:07.847606 26935 net.cpp:200] ip1 needs backward computation.
I0428 19:50:07.847615 26935 net.cpp:200] pool1 needs backward computation.
I0428 19:50:07.847620 26935 net.cpp:200] conv1 needs backward computation.
I0428 19:50:07.847623 26935 net.cpp:200] pool0 needs backward computation.
I0428 19:50:07.847626 26935 net.cpp:200] conv0 needs backward computation.
I0428 19:50:07.847645 26935 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:50:07.847650 26935 net.cpp:202] mnist does not need backward computation.
I0428 19:50:07.847652 26935 net.cpp:244] This network produces output accuracy
I0428 19:50:07.847656 26935 net.cpp:244] This network produces output loss
I0428 19:50:07.847666 26935 net.cpp:257] Network initialization done.
I0428 19:50:07.847709 26935 solver.cpp:56] Solver scaffolding done.
I0428 19:50:07.848029 26935 caffe.cpp:248] Starting Optimization
I0428 19:50:07.848036 26935 solver.cpp:273] Solving LeNet
I0428 19:50:07.848038 26935 solver.cpp:274] Learning Rate Policy: inv
I0428 19:50:07.848875 26935 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:50:07.851016 26935 blocking_queue.cpp:49] Waiting for data
I0428 19:50:07.926237 26942 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:07.926746 26935 solver.cpp:398]     Test net output #0: accuracy = 0.0982
I0428 19:50:07.926780 26935 solver.cpp:398]     Test net output #1: loss = 2.30602 (* 1 = 2.30602 loss)
I0428 19:50:07.928623 26935 solver.cpp:219] Iteration 0 (0 iter/s, 0.0805458s/100 iters), loss = 2.31214
I0428 19:50:07.928663 26935 solver.cpp:238]     Train net output #0: loss = 2.31214 (* 1 = 2.31214 loss)
I0428 19:50:07.928673 26935 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:50:08.009501 26935 solver.cpp:219] Iteration 100 (1236.92 iter/s, 0.0808458s/100 iters), loss = 1.33467
I0428 19:50:08.009526 26935 solver.cpp:238]     Train net output #0: loss = 1.33467 (* 1 = 1.33467 loss)
I0428 19:50:08.009531 26935 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:50:08.080837 26935 solver.cpp:219] Iteration 200 (1402.81 iter/s, 0.0712857s/100 iters), loss = 1.05477
I0428 19:50:08.080873 26935 solver.cpp:238]     Train net output #0: loss = 1.05477 (* 1 = 1.05477 loss)
I0428 19:50:08.080895 26935 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:50:08.151706 26935 solver.cpp:219] Iteration 300 (1411.93 iter/s, 0.070825s/100 iters), loss = 0.96564
I0428 19:50:08.151728 26935 solver.cpp:238]     Train net output #0: loss = 0.96564 (* 1 = 0.96564 loss)
I0428 19:50:08.151734 26935 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:50:08.222211 26935 solver.cpp:219] Iteration 400 (1418.95 iter/s, 0.0704746s/100 iters), loss = 0.921449
I0428 19:50:08.222234 26935 solver.cpp:238]     Train net output #0: loss = 0.921449 (* 1 = 0.921449 loss)
I0428 19:50:08.222239 26935 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:50:08.291040 26935 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:50:08.366637 26942 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:08.367105 26935 solver.cpp:398]     Test net output #0: accuracy = 0.7541
I0428 19:50:08.367125 26935 solver.cpp:398]     Test net output #1: loss = 0.835754 (* 1 = 0.835754 loss)
I0428 19:50:08.367887 26935 solver.cpp:219] Iteration 500 (686.627 iter/s, 0.14564s/100 iters), loss = 0.907865
I0428 19:50:08.367911 26935 solver.cpp:238]     Train net output #0: loss = 0.907865 (* 1 = 0.907865 loss)
I0428 19:50:08.367921 26935 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:50:08.449892 26935 solver.cpp:219] Iteration 600 (1219.93 iter/s, 0.0819722s/100 iters), loss = 0.618979
I0428 19:50:08.449915 26935 solver.cpp:238]     Train net output #0: loss = 0.618979 (* 1 = 0.618979 loss)
I0428 19:50:08.449921 26935 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:50:08.521831 26935 solver.cpp:219] Iteration 700 (1390.68 iter/s, 0.0719073s/100 iters), loss = 1.00621
I0428 19:50:08.521868 26935 solver.cpp:238]     Train net output #0: loss = 1.00621 (* 1 = 1.00621 loss)
I0428 19:50:08.521874 26935 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:50:08.593405 26935 solver.cpp:219] Iteration 800 (1398.09 iter/s, 0.0715263s/100 iters), loss = 0.64237
I0428 19:50:08.593426 26935 solver.cpp:238]     Train net output #0: loss = 0.64237 (* 1 = 0.64237 loss)
I0428 19:50:08.593432 26935 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:50:08.665007 26935 solver.cpp:219] Iteration 900 (1397.21 iter/s, 0.0715715s/100 iters), loss = 0.55412
I0428 19:50:08.665031 26935 solver.cpp:238]     Train net output #0: loss = 0.55412 (* 1 = 0.55412 loss)
I0428 19:50:08.665052 26935 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:50:08.688928 26941 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:08.735354 26935 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:50:08.736073 26935 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:50:08.736574 26935 solver.cpp:311] Iteration 1000, loss = 0.77625
I0428 19:50:08.736589 26935 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:50:08.811399 26942 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:08.811851 26935 solver.cpp:398]     Test net output #0: accuracy = 0.8654
I0428 19:50:08.811869 26935 solver.cpp:398]     Test net output #1: loss = 0.555916 (* 1 = 0.555916 loss)
I0428 19:50:08.811874 26935 solver.cpp:316] Optimization Done.
I0428 19:50:08.811877 26935 caffe.cpp:259] Optimization Done.
