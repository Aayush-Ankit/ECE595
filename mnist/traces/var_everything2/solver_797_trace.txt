I0428 19:57:42.964010 28750 caffe.cpp:218] Using GPUs 0
I0428 19:57:42.993858 28750 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:43.438830 28750 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test797.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:43.438963 28750 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test797.prototxt
I0428 19:57:43.439321 28750 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:43.439352 28750 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:43.439435 28750 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:43.439501 28750 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:43.439596 28750 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:43.439615 28750 net.cpp:86] Creating Layer mnist
I0428 19:57:43.439623 28750 net.cpp:382] mnist -> data
I0428 19:57:43.439642 28750 net.cpp:382] mnist -> label
I0428 19:57:43.440644 28750 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:43.443104 28750 net.cpp:124] Setting up mnist
I0428 19:57:43.443135 28750 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:43.443159 28750 net.cpp:131] Top shape: 64 (64)
I0428 19:57:43.443162 28750 net.cpp:139] Memory required for data: 200960
I0428 19:57:43.443168 28750 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:43.443181 28750 net.cpp:86] Creating Layer conv0
I0428 19:57:43.443197 28750 net.cpp:408] conv0 <- data
I0428 19:57:43.443208 28750 net.cpp:382] conv0 -> conv0
I0428 19:57:43.668596 28750 net.cpp:124] Setting up conv0
I0428 19:57:43.668622 28750 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:43.668625 28750 net.cpp:139] Memory required for data: 1675520
I0428 19:57:43.668639 28750 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:43.668651 28750 net.cpp:86] Creating Layer pool0
I0428 19:57:43.668654 28750 net.cpp:408] pool0 <- conv0
I0428 19:57:43.668659 28750 net.cpp:382] pool0 -> pool0
I0428 19:57:43.668732 28750 net.cpp:124] Setting up pool0
I0428 19:57:43.668740 28750 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:43.668742 28750 net.cpp:139] Memory required for data: 2044160
I0428 19:57:43.668745 28750 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:43.668756 28750 net.cpp:86] Creating Layer conv1
I0428 19:57:43.668759 28750 net.cpp:408] conv1 <- pool0
I0428 19:57:43.668764 28750 net.cpp:382] conv1 -> conv1
I0428 19:57:43.671504 28750 net.cpp:124] Setting up conv1
I0428 19:57:43.671517 28750 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:43.671532 28750 net.cpp:139] Memory required for data: 2126080
I0428 19:57:43.671541 28750 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:43.671563 28750 net.cpp:86] Creating Layer pool1
I0428 19:57:43.671566 28750 net.cpp:408] pool1 <- conv1
I0428 19:57:43.671571 28750 net.cpp:382] pool1 -> pool1
I0428 19:57:43.671607 28750 net.cpp:124] Setting up pool1
I0428 19:57:43.671613 28750 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:43.671617 28750 net.cpp:139] Memory required for data: 2146560
I0428 19:57:43.671618 28750 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:43.671625 28750 net.cpp:86] Creating Layer ip1
I0428 19:57:43.671628 28750 net.cpp:408] ip1 <- pool1
I0428 19:57:43.671633 28750 net.cpp:382] ip1 -> ip1
I0428 19:57:43.671731 28750 net.cpp:124] Setting up ip1
I0428 19:57:43.671738 28750 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:43.671741 28750 net.cpp:139] Memory required for data: 2149120
I0428 19:57:43.671748 28750 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:43.671756 28750 net.cpp:86] Creating Layer relu1
I0428 19:57:43.671758 28750 net.cpp:408] relu1 <- ip1
I0428 19:57:43.671762 28750 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:43.671927 28750 net.cpp:124] Setting up relu1
I0428 19:57:43.671936 28750 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:43.671938 28750 net.cpp:139] Memory required for data: 2151680
I0428 19:57:43.671941 28750 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:43.671949 28750 net.cpp:86] Creating Layer ip2
I0428 19:57:43.671953 28750 net.cpp:408] ip2 <- ip1
I0428 19:57:43.671957 28750 net.cpp:382] ip2 -> ip2
I0428 19:57:43.672052 28750 net.cpp:124] Setting up ip2
I0428 19:57:43.672060 28750 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:43.672062 28750 net.cpp:139] Memory required for data: 2158080
I0428 19:57:43.672068 28750 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:43.672075 28750 net.cpp:86] Creating Layer relu2
I0428 19:57:43.672078 28750 net.cpp:408] relu2 <- ip2
I0428 19:57:43.672081 28750 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:43.672904 28750 net.cpp:124] Setting up relu2
I0428 19:57:43.672917 28750 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:43.672921 28750 net.cpp:139] Memory required for data: 2164480
I0428 19:57:43.672924 28750 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:43.672933 28750 net.cpp:86] Creating Layer ip3
I0428 19:57:43.672936 28750 net.cpp:408] ip3 <- ip2
I0428 19:57:43.672943 28750 net.cpp:382] ip3 -> ip3
I0428 19:57:43.673048 28750 net.cpp:124] Setting up ip3
I0428 19:57:43.673055 28750 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:43.673058 28750 net.cpp:139] Memory required for data: 2167040
I0428 19:57:43.673066 28750 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:43.673071 28750 net.cpp:86] Creating Layer relu3
I0428 19:57:43.673089 28750 net.cpp:408] relu3 <- ip3
I0428 19:57:43.673092 28750 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:43.673277 28750 net.cpp:124] Setting up relu3
I0428 19:57:43.673286 28750 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:43.673290 28750 net.cpp:139] Memory required for data: 2169600
I0428 19:57:43.673292 28750 layer_factory.hpp:77] Creating layer loss
I0428 19:57:43.673298 28750 net.cpp:86] Creating Layer loss
I0428 19:57:43.673301 28750 net.cpp:408] loss <- ip3
I0428 19:57:43.673305 28750 net.cpp:408] loss <- label
I0428 19:57:43.673311 28750 net.cpp:382] loss -> loss
I0428 19:57:43.673326 28750 layer_factory.hpp:77] Creating layer loss
I0428 19:57:43.673569 28750 net.cpp:124] Setting up loss
I0428 19:57:43.673578 28750 net.cpp:131] Top shape: (1)
I0428 19:57:43.673581 28750 net.cpp:134]     with loss weight 1
I0428 19:57:43.673595 28750 net.cpp:139] Memory required for data: 2169604
I0428 19:57:43.673599 28750 net.cpp:200] loss needs backward computation.
I0428 19:57:43.673602 28750 net.cpp:200] relu3 needs backward computation.
I0428 19:57:43.673605 28750 net.cpp:200] ip3 needs backward computation.
I0428 19:57:43.673609 28750 net.cpp:200] relu2 needs backward computation.
I0428 19:57:43.673610 28750 net.cpp:200] ip2 needs backward computation.
I0428 19:57:43.673614 28750 net.cpp:200] relu1 needs backward computation.
I0428 19:57:43.673615 28750 net.cpp:200] ip1 needs backward computation.
I0428 19:57:43.673619 28750 net.cpp:200] pool1 needs backward computation.
I0428 19:57:43.673621 28750 net.cpp:200] conv1 needs backward computation.
I0428 19:57:43.673624 28750 net.cpp:200] pool0 needs backward computation.
I0428 19:57:43.673626 28750 net.cpp:200] conv0 needs backward computation.
I0428 19:57:43.673630 28750 net.cpp:202] mnist does not need backward computation.
I0428 19:57:43.673632 28750 net.cpp:244] This network produces output loss
I0428 19:57:43.673643 28750 net.cpp:257] Network initialization done.
I0428 19:57:43.673980 28750 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test797.prototxt
I0428 19:57:43.674019 28750 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:43.674111 28750 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:43.674190 28750 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:43.674248 28750 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:43.674260 28750 net.cpp:86] Creating Layer mnist
I0428 19:57:43.674265 28750 net.cpp:382] mnist -> data
I0428 19:57:43.674273 28750 net.cpp:382] mnist -> label
I0428 19:57:43.674352 28750 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:43.676321 28750 net.cpp:124] Setting up mnist
I0428 19:57:43.676348 28750 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:43.676369 28750 net.cpp:131] Top shape: 100 (100)
I0428 19:57:43.676373 28750 net.cpp:139] Memory required for data: 314000
I0428 19:57:43.676375 28750 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:43.676381 28750 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:43.676384 28750 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:43.676389 28750 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:43.676395 28750 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:43.676517 28750 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:43.676523 28750 net.cpp:131] Top shape: 100 (100)
I0428 19:57:43.676527 28750 net.cpp:131] Top shape: 100 (100)
I0428 19:57:43.676529 28750 net.cpp:139] Memory required for data: 314800
I0428 19:57:43.676532 28750 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:43.676542 28750 net.cpp:86] Creating Layer conv0
I0428 19:57:43.676544 28750 net.cpp:408] conv0 <- data
I0428 19:57:43.676550 28750 net.cpp:382] conv0 -> conv0
I0428 19:57:43.678149 28750 net.cpp:124] Setting up conv0
I0428 19:57:43.678163 28750 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:43.678166 28750 net.cpp:139] Memory required for data: 2618800
I0428 19:57:43.678174 28750 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:43.678181 28750 net.cpp:86] Creating Layer pool0
I0428 19:57:43.678185 28750 net.cpp:408] pool0 <- conv0
I0428 19:57:43.678190 28750 net.cpp:382] pool0 -> pool0
I0428 19:57:43.678227 28750 net.cpp:124] Setting up pool0
I0428 19:57:43.678237 28750 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:43.678241 28750 net.cpp:139] Memory required for data: 3194800
I0428 19:57:43.678242 28750 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:43.678251 28750 net.cpp:86] Creating Layer conv1
I0428 19:57:43.678254 28750 net.cpp:408] conv1 <- pool0
I0428 19:57:43.678261 28750 net.cpp:382] conv1 -> conv1
I0428 19:57:43.680544 28750 net.cpp:124] Setting up conv1
I0428 19:57:43.680557 28750 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:43.680560 28750 net.cpp:139] Memory required for data: 3322800
I0428 19:57:43.680569 28750 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:43.680575 28750 net.cpp:86] Creating Layer pool1
I0428 19:57:43.680578 28750 net.cpp:408] pool1 <- conv1
I0428 19:57:43.680584 28750 net.cpp:382] pool1 -> pool1
I0428 19:57:43.680625 28750 net.cpp:124] Setting up pool1
I0428 19:57:43.680632 28750 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:43.680635 28750 net.cpp:139] Memory required for data: 3354800
I0428 19:57:43.680637 28750 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:43.680644 28750 net.cpp:86] Creating Layer ip1
I0428 19:57:43.680647 28750 net.cpp:408] ip1 <- pool1
I0428 19:57:43.680652 28750 net.cpp:382] ip1 -> ip1
I0428 19:57:43.680771 28750 net.cpp:124] Setting up ip1
I0428 19:57:43.680779 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.680791 28750 net.cpp:139] Memory required for data: 3358800
I0428 19:57:43.680799 28750 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:43.680805 28750 net.cpp:86] Creating Layer relu1
I0428 19:57:43.680830 28750 net.cpp:408] relu1 <- ip1
I0428 19:57:43.680850 28750 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:43.681066 28750 net.cpp:124] Setting up relu1
I0428 19:57:43.681074 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.681077 28750 net.cpp:139] Memory required for data: 3362800
I0428 19:57:43.681080 28750 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:43.681089 28750 net.cpp:86] Creating Layer ip2
I0428 19:57:43.681093 28750 net.cpp:408] ip2 <- ip1
I0428 19:57:43.681099 28750 net.cpp:382] ip2 -> ip2
I0428 19:57:43.681221 28750 net.cpp:124] Setting up ip2
I0428 19:57:43.681242 28750 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:43.681246 28750 net.cpp:139] Memory required for data: 3372800
I0428 19:57:43.681251 28750 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:43.681254 28750 net.cpp:86] Creating Layer relu2
I0428 19:57:43.681257 28750 net.cpp:408] relu2 <- ip2
I0428 19:57:43.681269 28750 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:43.681465 28750 net.cpp:124] Setting up relu2
I0428 19:57:43.681490 28750 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:43.681493 28750 net.cpp:139] Memory required for data: 3382800
I0428 19:57:43.681498 28750 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:43.681502 28750 net.cpp:86] Creating Layer ip3
I0428 19:57:43.681505 28750 net.cpp:408] ip3 <- ip2
I0428 19:57:43.681511 28750 net.cpp:382] ip3 -> ip3
I0428 19:57:43.681612 28750 net.cpp:124] Setting up ip3
I0428 19:57:43.681619 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.681623 28750 net.cpp:139] Memory required for data: 3386800
I0428 19:57:43.681632 28750 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:43.681638 28750 net.cpp:86] Creating Layer relu3
I0428 19:57:43.681640 28750 net.cpp:408] relu3 <- ip3
I0428 19:57:43.681644 28750 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:43.682473 28750 net.cpp:124] Setting up relu3
I0428 19:57:43.682485 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.682489 28750 net.cpp:139] Memory required for data: 3390800
I0428 19:57:43.682492 28750 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:43.682498 28750 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:43.682502 28750 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:43.682507 28750 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:43.682528 28750 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:43.682577 28750 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:43.682584 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.682586 28750 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:43.682590 28750 net.cpp:139] Memory required for data: 3398800
I0428 19:57:43.682592 28750 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:43.682596 28750 net.cpp:86] Creating Layer accuracy
I0428 19:57:43.682600 28750 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:43.682608 28750 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:43.682615 28750 net.cpp:382] accuracy -> accuracy
I0428 19:57:43.682621 28750 net.cpp:124] Setting up accuracy
I0428 19:57:43.682626 28750 net.cpp:131] Top shape: (1)
I0428 19:57:43.682628 28750 net.cpp:139] Memory required for data: 3398804
I0428 19:57:43.682631 28750 layer_factory.hpp:77] Creating layer loss
I0428 19:57:43.682634 28750 net.cpp:86] Creating Layer loss
I0428 19:57:43.682637 28750 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:43.682641 28750 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:43.682646 28750 net.cpp:382] loss -> loss
I0428 19:57:43.682651 28750 layer_factory.hpp:77] Creating layer loss
I0428 19:57:43.682903 28750 net.cpp:124] Setting up loss
I0428 19:57:43.682912 28750 net.cpp:131] Top shape: (1)
I0428 19:57:43.682915 28750 net.cpp:134]     with loss weight 1
I0428 19:57:43.682921 28750 net.cpp:139] Memory required for data: 3398808
I0428 19:57:43.682934 28750 net.cpp:200] loss needs backward computation.
I0428 19:57:43.682938 28750 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:43.682941 28750 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:43.682945 28750 net.cpp:200] relu3 needs backward computation.
I0428 19:57:43.682953 28750 net.cpp:200] ip3 needs backward computation.
I0428 19:57:43.682956 28750 net.cpp:200] relu2 needs backward computation.
I0428 19:57:43.682960 28750 net.cpp:200] ip2 needs backward computation.
I0428 19:57:43.682962 28750 net.cpp:200] relu1 needs backward computation.
I0428 19:57:43.682965 28750 net.cpp:200] ip1 needs backward computation.
I0428 19:57:43.682967 28750 net.cpp:200] pool1 needs backward computation.
I0428 19:57:43.682971 28750 net.cpp:200] conv1 needs backward computation.
I0428 19:57:43.682973 28750 net.cpp:200] pool0 needs backward computation.
I0428 19:57:43.682976 28750 net.cpp:200] conv0 needs backward computation.
I0428 19:57:43.682991 28750 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:43.682993 28750 net.cpp:202] mnist does not need backward computation.
I0428 19:57:43.682996 28750 net.cpp:244] This network produces output accuracy
I0428 19:57:43.682999 28750 net.cpp:244] This network produces output loss
I0428 19:57:43.683015 28750 net.cpp:257] Network initialization done.
I0428 19:57:43.683056 28750 solver.cpp:56] Solver scaffolding done.
I0428 19:57:43.683413 28750 caffe.cpp:248] Starting Optimization
I0428 19:57:43.683420 28750 solver.cpp:273] Solving LeNet
I0428 19:57:43.683423 28750 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:43.684202 28750 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:43.687889 28750 blocking_queue.cpp:49] Waiting for data
I0428 19:57:43.752279 28757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:43.752779 28750 solver.cpp:398]     Test net output #0: accuracy = 0.1125
I0428 19:57:43.752800 28750 solver.cpp:398]     Test net output #1: loss = 2.30793 (* 1 = 2.30793 loss)
I0428 19:57:43.755403 28750 solver.cpp:219] Iteration 0 (-4.21033e-31 iter/s, 0.0719544s/100 iters), loss = 2.30297
I0428 19:57:43.755426 28750 solver.cpp:238]     Train net output #0: loss = 2.30297 (* 1 = 2.30297 loss)
I0428 19:57:43.755452 28750 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:43.833658 28750 solver.cpp:219] Iteration 100 (1278.43 iter/s, 0.0782212s/100 iters), loss = 1.07876
I0428 19:57:43.833683 28750 solver.cpp:238]     Train net output #0: loss = 1.07876 (* 1 = 1.07876 loss)
I0428 19:57:43.833688 28750 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:43.912495 28750 solver.cpp:219] Iteration 200 (1269 iter/s, 0.0788019s/100 iters), loss = 0.952503
I0428 19:57:43.912520 28750 solver.cpp:238]     Train net output #0: loss = 0.952503 (* 1 = 0.952503 loss)
I0428 19:57:43.912526 28750 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:43.995539 28750 solver.cpp:219] Iteration 300 (1204.7 iter/s, 0.0830085s/100 iters), loss = 0.937834
I0428 19:57:43.995568 28750 solver.cpp:238]     Train net output #0: loss = 0.937834 (* 1 = 0.937834 loss)
I0428 19:57:43.995576 28750 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:44.071470 28750 solver.cpp:219] Iteration 400 (1317.65 iter/s, 0.0758927s/100 iters), loss = 1.31547
I0428 19:57:44.071493 28750 solver.cpp:238]     Train net output #0: loss = 1.31547 (* 1 = 1.31547 loss)
I0428 19:57:44.071499 28750 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:44.148833 28750 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:44.201776 28757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:44.202267 28750 solver.cpp:398]     Test net output #0: accuracy = 0.7529
I0428 19:57:44.202286 28750 solver.cpp:398]     Test net output #1: loss = 0.745391 (* 1 = 0.745391 loss)
I0428 19:57:44.203076 28750 solver.cpp:219] Iteration 500 (760.078 iter/s, 0.131565s/100 iters), loss = 0.7829
I0428 19:57:44.203099 28750 solver.cpp:238]     Train net output #0: loss = 0.7829 (* 1 = 0.7829 loss)
I0428 19:57:44.203125 28750 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:44.281468 28750 solver.cpp:219] Iteration 600 (1276.15 iter/s, 0.0783606s/100 iters), loss = 0.467207
I0428 19:57:44.281493 28750 solver.cpp:238]     Train net output #0: loss = 0.467207 (* 1 = 0.467207 loss)
I0428 19:57:44.281499 28750 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:44.374964 28750 solver.cpp:219] Iteration 700 (1069.98 iter/s, 0.0934595s/100 iters), loss = 0.314746
I0428 19:57:44.375000 28750 solver.cpp:238]     Train net output #0: loss = 0.314746 (* 1 = 0.314746 loss)
I0428 19:57:44.375010 28750 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:44.456509 28750 solver.cpp:219] Iteration 800 (1226.99 iter/s, 0.0815004s/100 iters), loss = 0.310385
I0428 19:57:44.456537 28750 solver.cpp:238]     Train net output #0: loss = 0.310385 (* 1 = 0.310385 loss)
I0428 19:57:44.456544 28750 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:44.533736 28750 solver.cpp:219] Iteration 900 (1295.55 iter/s, 0.0771871s/100 iters), loss = 0.324935
I0428 19:57:44.533774 28750 solver.cpp:238]     Train net output #0: loss = 0.324935 (* 1 = 0.324935 loss)
I0428 19:57:44.533782 28750 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:44.559356 28756 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:44.610234 28750 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:44.611018 28750 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:44.611434 28750 solver.cpp:311] Iteration 1000, loss = 0.200554
I0428 19:57:44.611452 28750 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:44.681893 28757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:44.682453 28750 solver.cpp:398]     Test net output #0: accuracy = 0.9502
I0428 19:57:44.682479 28750 solver.cpp:398]     Test net output #1: loss = 0.169049 (* 1 = 0.169049 loss)
I0428 19:57:44.682487 28750 solver.cpp:316] Optimization Done.
I0428 19:57:44.682489 28750 caffe.cpp:259] Optimization Done.
