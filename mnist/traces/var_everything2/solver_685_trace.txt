I0428 19:53:20.785964 27748 caffe.cpp:218] Using GPUs 0
I0428 19:53:20.814456 27748 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:21.261689 27748 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test685.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:21.261822 27748 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test685.prototxt
I0428 19:53:21.262162 27748 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:21.262193 27748 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:21.262272 27748 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:21.262336 27748 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:21.262416 27748 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:21.262435 27748 net.cpp:86] Creating Layer mnist
I0428 19:53:21.262442 27748 net.cpp:382] mnist -> data
I0428 19:53:21.262476 27748 net.cpp:382] mnist -> label
I0428 19:53:21.263381 27748 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:21.265619 27748 net.cpp:124] Setting up mnist
I0428 19:53:21.265650 27748 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:21.265655 27748 net.cpp:131] Top shape: 64 (64)
I0428 19:53:21.265657 27748 net.cpp:139] Memory required for data: 200960
I0428 19:53:21.265662 27748 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:21.265676 27748 net.cpp:86] Creating Layer conv0
I0428 19:53:21.265692 27748 net.cpp:408] conv0 <- data
I0428 19:53:21.265702 27748 net.cpp:382] conv0 -> conv0
I0428 19:53:21.582053 27748 net.cpp:124] Setting up conv0
I0428 19:53:21.582085 27748 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:21.582090 27748 net.cpp:139] Memory required for data: 938240
I0428 19:53:21.582108 27748 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:21.582123 27748 net.cpp:86] Creating Layer pool0
I0428 19:53:21.582129 27748 net.cpp:408] pool0 <- conv0
I0428 19:53:21.582134 27748 net.cpp:382] pool0 -> pool0
I0428 19:53:21.582188 27748 net.cpp:124] Setting up pool0
I0428 19:53:21.582195 27748 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:21.582200 27748 net.cpp:139] Memory required for data: 1122560
I0428 19:53:21.582203 27748 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:21.582216 27748 net.cpp:86] Creating Layer conv1
I0428 19:53:21.582221 27748 net.cpp:408] conv1 <- pool0
I0428 19:53:21.582226 27748 net.cpp:382] conv1 -> conv1
I0428 19:53:21.585326 27748 net.cpp:124] Setting up conv1
I0428 19:53:21.585345 27748 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:21.585350 27748 net.cpp:139] Memory required for data: 1941760
I0428 19:53:21.585360 27748 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:21.585368 27748 net.cpp:86] Creating Layer pool1
I0428 19:53:21.585374 27748 net.cpp:408] pool1 <- conv1
I0428 19:53:21.585381 27748 net.cpp:382] pool1 -> pool1
I0428 19:53:21.585424 27748 net.cpp:124] Setting up pool1
I0428 19:53:21.585431 27748 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:21.585435 27748 net.cpp:139] Memory required for data: 2146560
I0428 19:53:21.585439 27748 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:21.585446 27748 net.cpp:86] Creating Layer ip1
I0428 19:53:21.585450 27748 net.cpp:408] ip1 <- pool1
I0428 19:53:21.585456 27748 net.cpp:382] ip1 -> ip1
I0428 19:53:21.585700 27748 net.cpp:124] Setting up ip1
I0428 19:53:21.585710 27748 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:21.585713 27748 net.cpp:139] Memory required for data: 2152960
I0428 19:53:21.585722 27748 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:21.585728 27748 net.cpp:86] Creating Layer relu1
I0428 19:53:21.585732 27748 net.cpp:408] relu1 <- ip1
I0428 19:53:21.585737 27748 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:21.585927 27748 net.cpp:124] Setting up relu1
I0428 19:53:21.585938 27748 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:21.585942 27748 net.cpp:139] Memory required for data: 2159360
I0428 19:53:21.585945 27748 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:21.585952 27748 net.cpp:86] Creating Layer ip2
I0428 19:53:21.585957 27748 net.cpp:408] ip2 <- ip1
I0428 19:53:21.585961 27748 net.cpp:382] ip2 -> ip2
I0428 19:53:21.586069 27748 net.cpp:124] Setting up ip2
I0428 19:53:21.586078 27748 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:21.586082 27748 net.cpp:139] Memory required for data: 2161920
I0428 19:53:21.586088 27748 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:21.586096 27748 net.cpp:86] Creating Layer relu2
I0428 19:53:21.586099 27748 net.cpp:408] relu2 <- ip2
I0428 19:53:21.586104 27748 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:21.586932 27748 net.cpp:124] Setting up relu2
I0428 19:53:21.586947 27748 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:21.586951 27748 net.cpp:139] Memory required for data: 2164480
I0428 19:53:21.586956 27748 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:21.586964 27748 net.cpp:86] Creating Layer ip3
I0428 19:53:21.586968 27748 net.cpp:408] ip3 <- ip2
I0428 19:53:21.586974 27748 net.cpp:382] ip3 -> ip3
I0428 19:53:21.587091 27748 net.cpp:124] Setting up ip3
I0428 19:53:21.587101 27748 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:21.587105 27748 net.cpp:139] Memory required for data: 2167040
I0428 19:53:21.587115 27748 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:21.587121 27748 net.cpp:86] Creating Layer relu3
I0428 19:53:21.587123 27748 net.cpp:408] relu3 <- ip3
I0428 19:53:21.587128 27748 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:21.587323 27748 net.cpp:124] Setting up relu3
I0428 19:53:21.587334 27748 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:21.587338 27748 net.cpp:139] Memory required for data: 2169600
I0428 19:53:21.587342 27748 layer_factory.hpp:77] Creating layer loss
I0428 19:53:21.587350 27748 net.cpp:86] Creating Layer loss
I0428 19:53:21.587353 27748 net.cpp:408] loss <- ip3
I0428 19:53:21.587358 27748 net.cpp:408] loss <- label
I0428 19:53:21.587364 27748 net.cpp:382] loss -> loss
I0428 19:53:21.587384 27748 layer_factory.hpp:77] Creating layer loss
I0428 19:53:21.587640 27748 net.cpp:124] Setting up loss
I0428 19:53:21.587651 27748 net.cpp:131] Top shape: (1)
I0428 19:53:21.587654 27748 net.cpp:134]     with loss weight 1
I0428 19:53:21.587669 27748 net.cpp:139] Memory required for data: 2169604
I0428 19:53:21.587673 27748 net.cpp:200] loss needs backward computation.
I0428 19:53:21.587677 27748 net.cpp:200] relu3 needs backward computation.
I0428 19:53:21.587682 27748 net.cpp:200] ip3 needs backward computation.
I0428 19:53:21.587684 27748 net.cpp:200] relu2 needs backward computation.
I0428 19:53:21.587688 27748 net.cpp:200] ip2 needs backward computation.
I0428 19:53:21.587692 27748 net.cpp:200] relu1 needs backward computation.
I0428 19:53:21.587694 27748 net.cpp:200] ip1 needs backward computation.
I0428 19:53:21.587698 27748 net.cpp:200] pool1 needs backward computation.
I0428 19:53:21.587702 27748 net.cpp:200] conv1 needs backward computation.
I0428 19:53:21.587707 27748 net.cpp:200] pool0 needs backward computation.
I0428 19:53:21.587709 27748 net.cpp:200] conv0 needs backward computation.
I0428 19:53:21.587713 27748 net.cpp:202] mnist does not need backward computation.
I0428 19:53:21.587716 27748 net.cpp:244] This network produces output loss
I0428 19:53:21.587728 27748 net.cpp:257] Network initialization done.
I0428 19:53:21.588105 27748 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test685.prototxt
I0428 19:53:21.588137 27748 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:21.588245 27748 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:21.588338 27748 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:21.588389 27748 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:21.588404 27748 net.cpp:86] Creating Layer mnist
I0428 19:53:21.588409 27748 net.cpp:382] mnist -> data
I0428 19:53:21.588418 27748 net.cpp:382] mnist -> label
I0428 19:53:21.588515 27748 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:21.590667 27748 net.cpp:124] Setting up mnist
I0428 19:53:21.590683 27748 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:21.590689 27748 net.cpp:131] Top shape: 100 (100)
I0428 19:53:21.590693 27748 net.cpp:139] Memory required for data: 314000
I0428 19:53:21.590698 27748 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:21.590709 27748 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:21.590714 27748 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:21.590720 27748 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:21.590728 27748 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:21.590785 27748 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:21.590790 27748 net.cpp:131] Top shape: 100 (100)
I0428 19:53:21.590795 27748 net.cpp:131] Top shape: 100 (100)
I0428 19:53:21.590798 27748 net.cpp:139] Memory required for data: 314800
I0428 19:53:21.590802 27748 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:21.590812 27748 net.cpp:86] Creating Layer conv0
I0428 19:53:21.590816 27748 net.cpp:408] conv0 <- data
I0428 19:53:21.590821 27748 net.cpp:382] conv0 -> conv0
I0428 19:53:21.592725 27748 net.cpp:124] Setting up conv0
I0428 19:53:21.592742 27748 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:21.592746 27748 net.cpp:139] Memory required for data: 1466800
I0428 19:53:21.592757 27748 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:21.592766 27748 net.cpp:86] Creating Layer pool0
I0428 19:53:21.592768 27748 net.cpp:408] pool0 <- conv0
I0428 19:53:21.592774 27748 net.cpp:382] pool0 -> pool0
I0428 19:53:21.592828 27748 net.cpp:124] Setting up pool0
I0428 19:53:21.592840 27748 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:21.592847 27748 net.cpp:139] Memory required for data: 1754800
I0428 19:53:21.592854 27748 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:21.592869 27748 net.cpp:86] Creating Layer conv1
I0428 19:53:21.592875 27748 net.cpp:408] conv1 <- pool0
I0428 19:53:21.592885 27748 net.cpp:382] conv1 -> conv1
I0428 19:53:21.594552 27748 net.cpp:124] Setting up conv1
I0428 19:53:21.594566 27748 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:21.594571 27748 net.cpp:139] Memory required for data: 3034800
I0428 19:53:21.594581 27748 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:21.594589 27748 net.cpp:86] Creating Layer pool1
I0428 19:53:21.594594 27748 net.cpp:408] pool1 <- conv1
I0428 19:53:21.594600 27748 net.cpp:382] pool1 -> pool1
I0428 19:53:21.594641 27748 net.cpp:124] Setting up pool1
I0428 19:53:21.594648 27748 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:21.594652 27748 net.cpp:139] Memory required for data: 3354800
I0428 19:53:21.594656 27748 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:21.594663 27748 net.cpp:86] Creating Layer ip1
I0428 19:53:21.594667 27748 net.cpp:408] ip1 <- pool1
I0428 19:53:21.594672 27748 net.cpp:382] ip1 -> ip1
I0428 19:53:21.594918 27748 net.cpp:124] Setting up ip1
I0428 19:53:21.594928 27748 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:21.594944 27748 net.cpp:139] Memory required for data: 3364800
I0428 19:53:21.594954 27748 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:21.594960 27748 net.cpp:86] Creating Layer relu1
I0428 19:53:21.594964 27748 net.cpp:408] relu1 <- ip1
I0428 19:53:21.594969 27748 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:21.595254 27748 net.cpp:124] Setting up relu1
I0428 19:53:21.595264 27748 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:21.595268 27748 net.cpp:139] Memory required for data: 3374800
I0428 19:53:21.595273 27748 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:21.595281 27748 net.cpp:86] Creating Layer ip2
I0428 19:53:21.595285 27748 net.cpp:408] ip2 <- ip1
I0428 19:53:21.595293 27748 net.cpp:382] ip2 -> ip2
I0428 19:53:21.595402 27748 net.cpp:124] Setting up ip2
I0428 19:53:21.595410 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.595414 27748 net.cpp:139] Memory required for data: 3378800
I0428 19:53:21.595420 27748 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:21.595427 27748 net.cpp:86] Creating Layer relu2
I0428 19:53:21.595430 27748 net.cpp:408] relu2 <- ip2
I0428 19:53:21.595435 27748 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:21.595603 27748 net.cpp:124] Setting up relu2
I0428 19:53:21.595613 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.595618 27748 net.cpp:139] Memory required for data: 3382800
I0428 19:53:21.595621 27748 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:21.595628 27748 net.cpp:86] Creating Layer ip3
I0428 19:53:21.595631 27748 net.cpp:408] ip3 <- ip2
I0428 19:53:21.595636 27748 net.cpp:382] ip3 -> ip3
I0428 19:53:21.595743 27748 net.cpp:124] Setting up ip3
I0428 19:53:21.595752 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.595757 27748 net.cpp:139] Memory required for data: 3386800
I0428 19:53:21.595765 27748 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:21.595770 27748 net.cpp:86] Creating Layer relu3
I0428 19:53:21.595773 27748 net.cpp:408] relu3 <- ip3
I0428 19:53:21.595778 27748 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:21.596678 27748 net.cpp:124] Setting up relu3
I0428 19:53:21.596691 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.596695 27748 net.cpp:139] Memory required for data: 3390800
I0428 19:53:21.596700 27748 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:21.596706 27748 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:21.596709 27748 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:21.596715 27748 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:21.596724 27748 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:21.596774 27748 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:21.596781 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.596786 27748 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:21.596789 27748 net.cpp:139] Memory required for data: 3398800
I0428 19:53:21.596793 27748 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:21.596799 27748 net.cpp:86] Creating Layer accuracy
I0428 19:53:21.596803 27748 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:21.596815 27748 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:21.596825 27748 net.cpp:382] accuracy -> accuracy
I0428 19:53:21.596837 27748 net.cpp:124] Setting up accuracy
I0428 19:53:21.596845 27748 net.cpp:131] Top shape: (1)
I0428 19:53:21.596849 27748 net.cpp:139] Memory required for data: 3398804
I0428 19:53:21.596853 27748 layer_factory.hpp:77] Creating layer loss
I0428 19:53:21.596858 27748 net.cpp:86] Creating Layer loss
I0428 19:53:21.596863 27748 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:21.596868 27748 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:21.596873 27748 net.cpp:382] loss -> loss
I0428 19:53:21.596879 27748 layer_factory.hpp:77] Creating layer loss
I0428 19:53:21.597148 27748 net.cpp:124] Setting up loss
I0428 19:53:21.597159 27748 net.cpp:131] Top shape: (1)
I0428 19:53:21.597163 27748 net.cpp:134]     with loss weight 1
I0428 19:53:21.597172 27748 net.cpp:139] Memory required for data: 3398808
I0428 19:53:21.597195 27748 net.cpp:200] loss needs backward computation.
I0428 19:53:21.597201 27748 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:21.597205 27748 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:21.597210 27748 net.cpp:200] relu3 needs backward computation.
I0428 19:53:21.597213 27748 net.cpp:200] ip3 needs backward computation.
I0428 19:53:21.597218 27748 net.cpp:200] relu2 needs backward computation.
I0428 19:53:21.597220 27748 net.cpp:200] ip2 needs backward computation.
I0428 19:53:21.597224 27748 net.cpp:200] relu1 needs backward computation.
I0428 19:53:21.597229 27748 net.cpp:200] ip1 needs backward computation.
I0428 19:53:21.597232 27748 net.cpp:200] pool1 needs backward computation.
I0428 19:53:21.597236 27748 net.cpp:200] conv1 needs backward computation.
I0428 19:53:21.597240 27748 net.cpp:200] pool0 needs backward computation.
I0428 19:53:21.597244 27748 net.cpp:200] conv0 needs backward computation.
I0428 19:53:21.597249 27748 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:21.597254 27748 net.cpp:202] mnist does not need backward computation.
I0428 19:53:21.597257 27748 net.cpp:244] This network produces output accuracy
I0428 19:53:21.597261 27748 net.cpp:244] This network produces output loss
I0428 19:53:21.597273 27748 net.cpp:257] Network initialization done.
I0428 19:53:21.597322 27748 solver.cpp:56] Solver scaffolding done.
I0428 19:53:21.597749 27748 caffe.cpp:248] Starting Optimization
I0428 19:53:21.597756 27748 solver.cpp:273] Solving LeNet
I0428 19:53:21.597759 27748 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:21.598055 27748 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:21.603724 27748 blocking_queue.cpp:49] Waiting for data
I0428 19:53:21.670248 27755 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:21.670855 27748 solver.cpp:398]     Test net output #0: accuracy = 0.0889
I0428 19:53:21.670887 27748 solver.cpp:398]     Test net output #1: loss = 2.34947 (* 1 = 2.34947 loss)
I0428 19:53:21.675334 27748 solver.cpp:219] Iteration 0 (0 iter/s, 0.0775414s/100 iters), loss = 2.32357
I0428 19:53:21.675375 27748 solver.cpp:238]     Train net output #0: loss = 2.32357 (* 1 = 2.32357 loss)
I0428 19:53:21.675392 27748 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:21.788482 27748 solver.cpp:219] Iteration 100 (884.199 iter/s, 0.113097s/100 iters), loss = 0.937732
I0428 19:53:21.788516 27748 solver.cpp:238]     Train net output #0: loss = 0.937732 (* 1 = 0.937732 loss)
I0428 19:53:21.788523 27748 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:21.895126 27748 solver.cpp:219] Iteration 200 (938.082 iter/s, 0.1066s/100 iters), loss = 0.431263
I0428 19:53:21.895155 27748 solver.cpp:238]     Train net output #0: loss = 0.431263 (* 1 = 0.431263 loss)
I0428 19:53:21.895164 27748 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:21.999301 27748 solver.cpp:219] Iteration 300 (960.286 iter/s, 0.104136s/100 iters), loss = 0.539983
I0428 19:53:21.999330 27748 solver.cpp:238]     Train net output #0: loss = 0.539983 (* 1 = 0.539983 loss)
I0428 19:53:21.999338 27748 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:22.103484 27748 solver.cpp:219] Iteration 400 (960.229 iter/s, 0.104142s/100 iters), loss = 0.322843
I0428 19:53:22.103513 27748 solver.cpp:238]     Train net output #0: loss = 0.322843 (* 1 = 0.322843 loss)
I0428 19:53:22.103520 27748 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:22.207620 27748 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:22.283756 27755 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:22.284543 27748 solver.cpp:398]     Test net output #0: accuracy = 0.8633
I0428 19:53:22.284585 27748 solver.cpp:398]     Test net output #1: loss = 0.37816 (* 1 = 0.37816 loss)
I0428 19:53:22.286084 27748 solver.cpp:219] Iteration 500 (547.787 iter/s, 0.182553s/100 iters), loss = 0.37846
I0428 19:53:22.286131 27748 solver.cpp:238]     Train net output #0: loss = 0.37846 (* 1 = 0.37846 loss)
I0428 19:53:22.286173 27748 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:22.403962 27748 solver.cpp:219] Iteration 600 (848.734 iter/s, 0.117823s/100 iters), loss = 0.46183
I0428 19:53:22.403996 27748 solver.cpp:238]     Train net output #0: loss = 0.46183 (* 1 = 0.46183 loss)
I0428 19:53:22.404006 27748 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:22.511384 27748 solver.cpp:219] Iteration 700 (931.293 iter/s, 0.107378s/100 iters), loss = 0.386559
I0428 19:53:22.511416 27748 solver.cpp:238]     Train net output #0: loss = 0.386559 (* 1 = 0.386559 loss)
I0428 19:53:22.511425 27748 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:22.618602 27748 solver.cpp:219] Iteration 800 (933.063 iter/s, 0.107174s/100 iters), loss = 0.68081
I0428 19:53:22.618633 27748 solver.cpp:238]     Train net output #0: loss = 0.68081 (* 1 = 0.68081 loss)
I0428 19:53:22.618643 27748 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:22.725730 27748 solver.cpp:219] Iteration 900 (933.83 iter/s, 0.107086s/100 iters), loss = 0.510131
I0428 19:53:22.725764 27748 solver.cpp:238]     Train net output #0: loss = 0.510131 (* 1 = 0.510131 loss)
I0428 19:53:22.725771 27748 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:22.761489 27754 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:22.831919 27748 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:22.833248 27748 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:22.833978 27748 solver.cpp:311] Iteration 1000, loss = 0.381854
I0428 19:53:22.833997 27748 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:22.906635 27755 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:22.907172 27748 solver.cpp:398]     Test net output #0: accuracy = 0.8772
I0428 19:53:22.907198 27748 solver.cpp:398]     Test net output #1: loss = 0.323085 (* 1 = 0.323085 loss)
I0428 19:53:22.907204 27748 solver.cpp:316] Optimization Done.
I0428 19:53:22.907207 27748 caffe.cpp:259] Optimization Done.
