I0428 19:44:08.539577 25540 caffe.cpp:218] Using GPUs 0
I0428 19:44:08.578547 25540 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:09.095643 25540 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test440.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:09.095811 25540 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test440.prototxt
I0428 19:44:09.096202 25540 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:09.096226 25540 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:09.096333 25540 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:44:09.096442 25540 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:09.096575 25540 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:09.096607 25540 net.cpp:86] Creating Layer mnist
I0428 19:44:09.096623 25540 net.cpp:382] mnist -> data
I0428 19:44:09.096653 25540 net.cpp:382] mnist -> label
I0428 19:44:09.097908 25540 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:09.100580 25540 net.cpp:124] Setting up mnist
I0428 19:44:09.100601 25540 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:09.100611 25540 net.cpp:131] Top shape: 64 (64)
I0428 19:44:09.100617 25540 net.cpp:139] Memory required for data: 200960
I0428 19:44:09.100628 25540 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:09.100653 25540 net.cpp:86] Creating Layer conv0
I0428 19:44:09.100663 25540 net.cpp:408] conv0 <- data
I0428 19:44:09.100683 25540 net.cpp:382] conv0 -> conv0
I0428 19:44:09.383493 25540 net.cpp:124] Setting up conv0
I0428 19:44:09.383523 25540 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:09.383529 25540 net.cpp:139] Memory required for data: 495872
I0428 19:44:09.383575 25540 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:09.383595 25540 net.cpp:86] Creating Layer pool0
I0428 19:44:09.383605 25540 net.cpp:408] pool0 <- conv0
I0428 19:44:09.383613 25540 net.cpp:382] pool0 -> pool0
I0428 19:44:09.383669 25540 net.cpp:124] Setting up pool0
I0428 19:44:09.383678 25540 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:09.383683 25540 net.cpp:139] Memory required for data: 569600
I0428 19:44:09.383689 25540 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:09.383705 25540 net.cpp:86] Creating Layer conv1
I0428 19:44:09.383713 25540 net.cpp:408] conv1 <- pool0
I0428 19:44:09.383721 25540 net.cpp:382] conv1 -> conv1
I0428 19:44:09.386456 25540 net.cpp:124] Setting up conv1
I0428 19:44:09.386472 25540 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:09.386478 25540 net.cpp:139] Memory required for data: 1388800
I0428 19:44:09.386492 25540 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:09.386502 25540 net.cpp:86] Creating Layer pool1
I0428 19:44:09.386509 25540 net.cpp:408] pool1 <- conv1
I0428 19:44:09.386518 25540 net.cpp:382] pool1 -> pool1
I0428 19:44:09.386564 25540 net.cpp:124] Setting up pool1
I0428 19:44:09.386572 25540 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:09.386579 25540 net.cpp:139] Memory required for data: 1593600
I0428 19:44:09.386584 25540 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:09.386595 25540 net.cpp:86] Creating Layer ip1
I0428 19:44:09.386600 25540 net.cpp:408] ip1 <- pool1
I0428 19:44:09.386610 25540 net.cpp:382] ip1 -> ip1
I0428 19:44:09.386960 25540 net.cpp:124] Setting up ip1
I0428 19:44:09.386970 25540 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:09.386975 25540 net.cpp:139] Memory required for data: 1606400
I0428 19:44:09.386987 25540 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:09.387001 25540 net.cpp:86] Creating Layer relu1
I0428 19:44:09.387008 25540 net.cpp:408] relu1 <- ip1
I0428 19:44:09.387018 25540 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:09.387207 25540 net.cpp:124] Setting up relu1
I0428 19:44:09.387218 25540 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:09.387223 25540 net.cpp:139] Memory required for data: 1619200
I0428 19:44:09.387228 25540 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:09.387238 25540 net.cpp:86] Creating Layer ip2
I0428 19:44:09.387243 25540 net.cpp:408] ip2 <- ip1
I0428 19:44:09.387255 25540 net.cpp:382] ip2 -> ip2
I0428 19:44:09.387368 25540 net.cpp:124] Setting up ip2
I0428 19:44:09.387377 25540 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:09.387382 25540 net.cpp:139] Memory required for data: 1621760
I0428 19:44:09.387392 25540 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:09.387401 25540 net.cpp:86] Creating Layer relu2
I0428 19:44:09.387408 25540 net.cpp:408] relu2 <- ip2
I0428 19:44:09.387416 25540 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:09.388162 25540 net.cpp:124] Setting up relu2
I0428 19:44:09.388176 25540 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:09.388181 25540 net.cpp:139] Memory required for data: 1624320
I0428 19:44:09.388186 25540 layer_factory.hpp:77] Creating layer loss
I0428 19:44:09.388196 25540 net.cpp:86] Creating Layer loss
I0428 19:44:09.388202 25540 net.cpp:408] loss <- ip2
I0428 19:44:09.388209 25540 net.cpp:408] loss <- label
I0428 19:44:09.388219 25540 net.cpp:382] loss -> loss
I0428 19:44:09.388243 25540 layer_factory.hpp:77] Creating layer loss
I0428 19:44:09.388502 25540 net.cpp:124] Setting up loss
I0428 19:44:09.388514 25540 net.cpp:131] Top shape: (1)
I0428 19:44:09.388519 25540 net.cpp:134]     with loss weight 1
I0428 19:44:09.388538 25540 net.cpp:139] Memory required for data: 1624324
I0428 19:44:09.388545 25540 net.cpp:200] loss needs backward computation.
I0428 19:44:09.388550 25540 net.cpp:200] relu2 needs backward computation.
I0428 19:44:09.388556 25540 net.cpp:200] ip2 needs backward computation.
I0428 19:44:09.388561 25540 net.cpp:200] relu1 needs backward computation.
I0428 19:44:09.388566 25540 net.cpp:200] ip1 needs backward computation.
I0428 19:44:09.388584 25540 net.cpp:200] pool1 needs backward computation.
I0428 19:44:09.388591 25540 net.cpp:200] conv1 needs backward computation.
I0428 19:44:09.388595 25540 net.cpp:200] pool0 needs backward computation.
I0428 19:44:09.388600 25540 net.cpp:200] conv0 needs backward computation.
I0428 19:44:09.388607 25540 net.cpp:202] mnist does not need backward computation.
I0428 19:44:09.388612 25540 net.cpp:244] This network produces output loss
I0428 19:44:09.388628 25540 net.cpp:257] Network initialization done.
I0428 19:44:09.388958 25540 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test440.prototxt
I0428 19:44:09.388994 25540 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:09.389093 25540 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:44:09.389217 25540 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:09.389281 25540 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:09.389298 25540 net.cpp:86] Creating Layer mnist
I0428 19:44:09.389307 25540 net.cpp:382] mnist -> data
I0428 19:44:09.389319 25540 net.cpp:382] mnist -> label
I0428 19:44:09.389446 25540 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:09.391470 25540 net.cpp:124] Setting up mnist
I0428 19:44:09.391485 25540 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:09.391494 25540 net.cpp:131] Top shape: 100 (100)
I0428 19:44:09.391499 25540 net.cpp:139] Memory required for data: 314000
I0428 19:44:09.391505 25540 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:09.391515 25540 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:09.391520 25540 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:09.391530 25540 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:09.391541 25540 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:09.391644 25540 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:09.391682 25540 net.cpp:131] Top shape: 100 (100)
I0428 19:44:09.391691 25540 net.cpp:131] Top shape: 100 (100)
I0428 19:44:09.391696 25540 net.cpp:139] Memory required for data: 314800
I0428 19:44:09.391702 25540 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:09.391718 25540 net.cpp:86] Creating Layer conv0
I0428 19:44:09.391726 25540 net.cpp:408] conv0 <- data
I0428 19:44:09.391736 25540 net.cpp:382] conv0 -> conv0
I0428 19:44:09.393354 25540 net.cpp:124] Setting up conv0
I0428 19:44:09.393369 25540 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:09.393375 25540 net.cpp:139] Memory required for data: 775600
I0428 19:44:09.393390 25540 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:09.393400 25540 net.cpp:86] Creating Layer pool0
I0428 19:44:09.393406 25540 net.cpp:408] pool0 <- conv0
I0428 19:44:09.393415 25540 net.cpp:382] pool0 -> pool0
I0428 19:44:09.393476 25540 net.cpp:124] Setting up pool0
I0428 19:44:09.393483 25540 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:09.393488 25540 net.cpp:139] Memory required for data: 890800
I0428 19:44:09.393494 25540 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:09.393512 25540 net.cpp:86] Creating Layer conv1
I0428 19:44:09.393518 25540 net.cpp:408] conv1 <- pool0
I0428 19:44:09.393528 25540 net.cpp:382] conv1 -> conv1
I0428 19:44:09.394948 25540 net.cpp:124] Setting up conv1
I0428 19:44:09.394963 25540 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:09.394969 25540 net.cpp:139] Memory required for data: 2170800
I0428 19:44:09.394984 25540 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:09.394994 25540 net.cpp:86] Creating Layer pool1
I0428 19:44:09.394999 25540 net.cpp:408] pool1 <- conv1
I0428 19:44:09.395009 25540 net.cpp:382] pool1 -> pool1
I0428 19:44:09.395056 25540 net.cpp:124] Setting up pool1
I0428 19:44:09.395066 25540 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:09.395071 25540 net.cpp:139] Memory required for data: 2490800
I0428 19:44:09.395076 25540 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:09.395088 25540 net.cpp:86] Creating Layer ip1
I0428 19:44:09.395094 25540 net.cpp:408] ip1 <- pool1
I0428 19:44:09.395104 25540 net.cpp:382] ip1 -> ip1
I0428 19:44:09.395475 25540 net.cpp:124] Setting up ip1
I0428 19:44:09.395485 25540 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:09.395490 25540 net.cpp:139] Memory required for data: 2510800
I0428 19:44:09.395503 25540 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:09.395514 25540 net.cpp:86] Creating Layer relu1
I0428 19:44:09.395520 25540 net.cpp:408] relu1 <- ip1
I0428 19:44:09.395529 25540 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:09.395701 25540 net.cpp:124] Setting up relu1
I0428 19:44:09.395714 25540 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:09.395719 25540 net.cpp:139] Memory required for data: 2530800
I0428 19:44:09.395725 25540 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:09.395736 25540 net.cpp:86] Creating Layer ip2
I0428 19:44:09.395742 25540 net.cpp:408] ip2 <- ip1
I0428 19:44:09.395752 25540 net.cpp:382] ip2 -> ip2
I0428 19:44:09.395877 25540 net.cpp:124] Setting up ip2
I0428 19:44:09.395886 25540 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:09.395891 25540 net.cpp:139] Memory required for data: 2534800
I0428 19:44:09.395901 25540 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:09.395911 25540 net.cpp:86] Creating Layer relu2
I0428 19:44:09.395916 25540 net.cpp:408] relu2 <- ip2
I0428 19:44:09.395923 25540 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:09.396193 25540 net.cpp:124] Setting up relu2
I0428 19:44:09.396203 25540 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:09.396209 25540 net.cpp:139] Memory required for data: 2538800
I0428 19:44:09.396214 25540 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:44:09.396224 25540 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:44:09.396230 25540 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:44:09.396239 25540 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:44:09.396261 25540 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:44:09.396309 25540 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:44:09.396332 25540 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:09.396339 25540 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:09.396344 25540 net.cpp:139] Memory required for data: 2546800
I0428 19:44:09.396350 25540 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:09.396360 25540 net.cpp:86] Creating Layer accuracy
I0428 19:44:09.396366 25540 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:44:09.396373 25540 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:09.396383 25540 net.cpp:382] accuracy -> accuracy
I0428 19:44:09.396395 25540 net.cpp:124] Setting up accuracy
I0428 19:44:09.396405 25540 net.cpp:131] Top shape: (1)
I0428 19:44:09.396411 25540 net.cpp:139] Memory required for data: 2546804
I0428 19:44:09.396416 25540 layer_factory.hpp:77] Creating layer loss
I0428 19:44:09.396426 25540 net.cpp:86] Creating Layer loss
I0428 19:44:09.396432 25540 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:44:09.396438 25540 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:09.396446 25540 net.cpp:382] loss -> loss
I0428 19:44:09.396456 25540 layer_factory.hpp:77] Creating layer loss
I0428 19:44:09.396703 25540 net.cpp:124] Setting up loss
I0428 19:44:09.396713 25540 net.cpp:131] Top shape: (1)
I0428 19:44:09.396718 25540 net.cpp:134]     with loss weight 1
I0428 19:44:09.396728 25540 net.cpp:139] Memory required for data: 2546808
I0428 19:44:09.396734 25540 net.cpp:200] loss needs backward computation.
I0428 19:44:09.396740 25540 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:09.396746 25540 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:44:09.396752 25540 net.cpp:200] relu2 needs backward computation.
I0428 19:44:09.396765 25540 net.cpp:200] ip2 needs backward computation.
I0428 19:44:09.396770 25540 net.cpp:200] relu1 needs backward computation.
I0428 19:44:09.396775 25540 net.cpp:200] ip1 needs backward computation.
I0428 19:44:09.396781 25540 net.cpp:200] pool1 needs backward computation.
I0428 19:44:09.396787 25540 net.cpp:200] conv1 needs backward computation.
I0428 19:44:09.396792 25540 net.cpp:200] pool0 needs backward computation.
I0428 19:44:09.396797 25540 net.cpp:200] conv0 needs backward computation.
I0428 19:44:09.396805 25540 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:09.396817 25540 net.cpp:202] mnist does not need backward computation.
I0428 19:44:09.396823 25540 net.cpp:244] This network produces output accuracy
I0428 19:44:09.396836 25540 net.cpp:244] This network produces output loss
I0428 19:44:09.396852 25540 net.cpp:257] Network initialization done.
I0428 19:44:09.396915 25540 solver.cpp:56] Solver scaffolding done.
I0428 19:44:09.397292 25540 caffe.cpp:248] Starting Optimization
I0428 19:44:09.397300 25540 solver.cpp:273] Solving LeNet
I0428 19:44:09.397305 25540 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:09.398109 25540 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:09.401257 25540 blocking_queue.cpp:49] Waiting for data
I0428 19:44:09.471779 25547 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:09.472344 25540 solver.cpp:398]     Test net output #0: accuracy = 0.143
I0428 19:44:09.472378 25540 solver.cpp:398]     Test net output #1: loss = 2.3006 (* 1 = 2.3006 loss)
I0428 19:44:09.475924 25540 solver.cpp:219] Iteration 0 (-2.01354e-31 iter/s, 0.0785828s/100 iters), loss = 2.29211
I0428 19:44:09.475970 25540 solver.cpp:238]     Train net output #0: loss = 2.29211 (* 1 = 2.29211 loss)
I0428 19:44:09.475996 25540 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:09.580626 25540 solver.cpp:219] Iteration 100 (955.597 iter/s, 0.104647s/100 iters), loss = 1.20658
I0428 19:44:09.580665 25540 solver.cpp:238]     Train net output #0: loss = 1.20658 (* 1 = 1.20658 loss)
I0428 19:44:09.580678 25540 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:09.675631 25540 solver.cpp:219] Iteration 200 (1053.09 iter/s, 0.0949586s/100 iters), loss = 0.97661
I0428 19:44:09.675673 25540 solver.cpp:238]     Train net output #0: loss = 0.97661 (* 1 = 0.97661 loss)
I0428 19:44:09.675684 25540 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:09.771960 25540 solver.cpp:219] Iteration 300 (1038.86 iter/s, 0.0962591s/100 iters), loss = 0.736706
I0428 19:44:09.772009 25540 solver.cpp:238]     Train net output #0: loss = 0.736706 (* 1 = 0.736706 loss)
I0428 19:44:09.772035 25540 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:09.867852 25540 solver.cpp:219] Iteration 400 (1043.48 iter/s, 0.0958331s/100 iters), loss = 0.711804
I0428 19:44:09.867882 25540 solver.cpp:238]     Train net output #0: loss = 0.711804 (* 1 = 0.711804 loss)
I0428 19:44:09.867892 25540 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:09.962376 25540 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:10.014518 25547 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:10.014950 25540 solver.cpp:398]     Test net output #0: accuracy = 0.8518
I0428 19:44:10.014972 25540 solver.cpp:398]     Test net output #1: loss = 0.585172 (* 1 = 0.585172 loss)
I0428 19:44:10.015940 25540 solver.cpp:219] Iteration 500 (675.453 iter/s, 0.148049s/100 iters), loss = 0.437787
I0428 19:44:10.015966 25540 solver.cpp:238]     Train net output #0: loss = 0.437787 (* 1 = 0.437787 loss)
I0428 19:44:10.015997 25540 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:10.110599 25540 solver.cpp:219] Iteration 600 (1056.89 iter/s, 0.0946176s/100 iters), loss = 0.427677
I0428 19:44:10.110630 25540 solver.cpp:238]     Train net output #0: loss = 0.427677 (* 1 = 0.427677 loss)
I0428 19:44:10.110640 25540 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:10.213794 25540 solver.cpp:219] Iteration 700 (969.485 iter/s, 0.103148s/100 iters), loss = 0.796996
I0428 19:44:10.213853 25540 solver.cpp:238]     Train net output #0: loss = 0.796996 (* 1 = 0.796996 loss)
I0428 19:44:10.213874 25540 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:10.321085 25540 solver.cpp:219] Iteration 800 (932.6 iter/s, 0.107227s/100 iters), loss = 0.4939
I0428 19:44:10.321118 25540 solver.cpp:238]     Train net output #0: loss = 0.4939 (* 1 = 0.4939 loss)
I0428 19:44:10.321126 25540 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:10.416759 25540 solver.cpp:219] Iteration 900 (1045.75 iter/s, 0.0956252s/100 iters), loss = 0.409204
I0428 19:44:10.416787 25540 solver.cpp:238]     Train net output #0: loss = 0.409204 (* 1 = 0.409204 loss)
I0428 19:44:10.416798 25540 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:10.448004 25546 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:10.509045 25540 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:10.510411 25540 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:10.511241 25540 solver.cpp:311] Iteration 1000, loss = 0.436633
I0428 19:44:10.511256 25540 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:10.570353 25547 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:10.570914 25540 solver.cpp:398]     Test net output #0: accuracy = 0.8759
I0428 19:44:10.570935 25540 solver.cpp:398]     Test net output #1: loss = 0.322169 (* 1 = 0.322169 loss)
I0428 19:44:10.570945 25540 solver.cpp:316] Optimization Done.
I0428 19:44:10.570950 25540 caffe.cpp:259] Optimization Done.
