I0428 19:35:03.993558 23441 caffe.cpp:218] Using GPUs 0
I0428 19:35:04.034672 23441 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:35:04.553679 23441 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test217.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:35:04.553823 23441 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test217.prototxt
I0428 19:35:04.554175 23441 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:35:04.554190 23441 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:35:04.554280 23441 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:04.554345 23441 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:04.554442 23441 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:35:04.554466 23441 net.cpp:86] Creating Layer mnist
I0428 19:35:04.554476 23441 net.cpp:382] mnist -> data
I0428 19:35:04.554498 23441 net.cpp:382] mnist -> label
I0428 19:35:04.555572 23441 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:35:04.557997 23441 net.cpp:124] Setting up mnist
I0428 19:35:04.558015 23441 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:35:04.558022 23441 net.cpp:131] Top shape: 64 (64)
I0428 19:35:04.558027 23441 net.cpp:139] Memory required for data: 200960
I0428 19:35:04.558032 23441 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:04.558048 23441 net.cpp:86] Creating Layer conv0
I0428 19:35:04.558053 23441 net.cpp:408] conv0 <- data
I0428 19:35:04.558064 23441 net.cpp:382] conv0 -> conv0
I0428 19:35:04.840293 23441 net.cpp:124] Setting up conv0
I0428 19:35:04.840322 23441 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:35:04.840327 23441 net.cpp:139] Memory required for data: 7573760
I0428 19:35:04.840342 23441 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:04.840354 23441 net.cpp:86] Creating Layer pool0
I0428 19:35:04.840379 23441 net.cpp:408] pool0 <- conv0
I0428 19:35:04.840385 23441 net.cpp:382] pool0 -> pool0
I0428 19:35:04.840435 23441 net.cpp:124] Setting up pool0
I0428 19:35:04.840442 23441 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:35:04.840445 23441 net.cpp:139] Memory required for data: 9416960
I0428 19:35:04.840450 23441 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:04.840457 23441 net.cpp:86] Creating Layer ip1
I0428 19:35:04.840461 23441 net.cpp:408] ip1 <- pool0
I0428 19:35:04.840466 23441 net.cpp:382] ip1 -> ip1
I0428 19:35:04.842454 23441 net.cpp:124] Setting up ip1
I0428 19:35:04.842468 23441 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:04.842471 23441 net.cpp:139] Memory required for data: 9423360
I0428 19:35:04.842479 23441 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:04.842486 23441 net.cpp:86] Creating Layer relu1
I0428 19:35:04.842489 23441 net.cpp:408] relu1 <- ip1
I0428 19:35:04.842495 23441 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:04.842669 23441 net.cpp:124] Setting up relu1
I0428 19:35:04.842679 23441 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:35:04.842681 23441 net.cpp:139] Memory required for data: 9429760
I0428 19:35:04.842684 23441 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:04.842692 23441 net.cpp:86] Creating Layer ip2
I0428 19:35:04.842696 23441 net.cpp:408] ip2 <- ip1
I0428 19:35:04.842700 23441 net.cpp:382] ip2 -> ip2
I0428 19:35:04.842797 23441 net.cpp:124] Setting up ip2
I0428 19:35:04.842804 23441 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:04.842808 23441 net.cpp:139] Memory required for data: 9432320
I0428 19:35:04.842815 23441 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:04.842823 23441 net.cpp:86] Creating Layer relu2
I0428 19:35:04.842826 23441 net.cpp:408] relu2 <- ip2
I0428 19:35:04.842830 23441 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:04.843585 23441 net.cpp:124] Setting up relu2
I0428 19:35:04.843600 23441 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:04.843602 23441 net.cpp:139] Memory required for data: 9434880
I0428 19:35:04.843606 23441 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:04.843613 23441 net.cpp:86] Creating Layer ip3
I0428 19:35:04.843616 23441 net.cpp:408] ip3 <- ip2
I0428 19:35:04.843622 23441 net.cpp:382] ip3 -> ip3
I0428 19:35:04.843736 23441 net.cpp:124] Setting up ip3
I0428 19:35:04.843744 23441 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:04.843747 23441 net.cpp:139] Memory required for data: 9437440
I0428 19:35:04.843753 23441 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:04.843780 23441 net.cpp:86] Creating Layer relu3
I0428 19:35:04.843782 23441 net.cpp:408] relu3 <- ip3
I0428 19:35:04.843787 23441 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:04.843956 23441 net.cpp:124] Setting up relu3
I0428 19:35:04.843966 23441 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:04.843969 23441 net.cpp:139] Memory required for data: 9440000
I0428 19:35:04.843973 23441 layer_factory.hpp:77] Creating layer loss
I0428 19:35:04.843979 23441 net.cpp:86] Creating Layer loss
I0428 19:35:04.843982 23441 net.cpp:408] loss <- ip3
I0428 19:35:04.843986 23441 net.cpp:408] loss <- label
I0428 19:35:04.843993 23441 net.cpp:382] loss -> loss
I0428 19:35:04.844012 23441 layer_factory.hpp:77] Creating layer loss
I0428 19:35:04.844298 23441 net.cpp:124] Setting up loss
I0428 19:35:04.844307 23441 net.cpp:131] Top shape: (1)
I0428 19:35:04.844326 23441 net.cpp:134]     with loss weight 1
I0428 19:35:04.844355 23441 net.cpp:139] Memory required for data: 9440004
I0428 19:35:04.844358 23441 net.cpp:200] loss needs backward computation.
I0428 19:35:04.844362 23441 net.cpp:200] relu3 needs backward computation.
I0428 19:35:04.844365 23441 net.cpp:200] ip3 needs backward computation.
I0428 19:35:04.844368 23441 net.cpp:200] relu2 needs backward computation.
I0428 19:35:04.844372 23441 net.cpp:200] ip2 needs backward computation.
I0428 19:35:04.844373 23441 net.cpp:200] relu1 needs backward computation.
I0428 19:35:04.844377 23441 net.cpp:200] ip1 needs backward computation.
I0428 19:35:04.844389 23441 net.cpp:200] pool0 needs backward computation.
I0428 19:35:04.844393 23441 net.cpp:200] conv0 needs backward computation.
I0428 19:35:04.844396 23441 net.cpp:202] mnist does not need backward computation.
I0428 19:35:04.844398 23441 net.cpp:244] This network produces output loss
I0428 19:35:04.844406 23441 net.cpp:257] Network initialization done.
I0428 19:35:04.844697 23441 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test217.prototxt
I0428 19:35:04.844723 23441 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:35:04.844820 23441 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:04.844928 23441 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:04.844974 23441 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:35:04.844990 23441 net.cpp:86] Creating Layer mnist
I0428 19:35:04.844996 23441 net.cpp:382] mnist -> data
I0428 19:35:04.845005 23441 net.cpp:382] mnist -> label
I0428 19:35:04.845096 23441 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:35:04.846257 23441 net.cpp:124] Setting up mnist
I0428 19:35:04.846271 23441 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:35:04.846302 23441 net.cpp:131] Top shape: 100 (100)
I0428 19:35:04.846307 23441 net.cpp:139] Memory required for data: 314000
I0428 19:35:04.846310 23441 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:35:04.846320 23441 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:35:04.846324 23441 net.cpp:408] label_mnist_1_split <- label
I0428 19:35:04.846329 23441 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:35:04.846336 23441 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:35:04.846436 23441 net.cpp:124] Setting up label_mnist_1_split
I0428 19:35:04.846443 23441 net.cpp:131] Top shape: 100 (100)
I0428 19:35:04.846448 23441 net.cpp:131] Top shape: 100 (100)
I0428 19:35:04.846451 23441 net.cpp:139] Memory required for data: 314800
I0428 19:35:04.846464 23441 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:04.846474 23441 net.cpp:86] Creating Layer conv0
I0428 19:35:04.846478 23441 net.cpp:408] conv0 <- data
I0428 19:35:04.846484 23441 net.cpp:382] conv0 -> conv0
I0428 19:35:04.847910 23441 net.cpp:124] Setting up conv0
I0428 19:35:04.847924 23441 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:35:04.847929 23441 net.cpp:139] Memory required for data: 11834800
I0428 19:35:04.847937 23441 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:04.847944 23441 net.cpp:86] Creating Layer pool0
I0428 19:35:04.847949 23441 net.cpp:408] pool0 <- conv0
I0428 19:35:04.847952 23441 net.cpp:382] pool0 -> pool0
I0428 19:35:04.847990 23441 net.cpp:124] Setting up pool0
I0428 19:35:04.847995 23441 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:35:04.848013 23441 net.cpp:139] Memory required for data: 14714800
I0428 19:35:04.848016 23441 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:04.848024 23441 net.cpp:86] Creating Layer ip1
I0428 19:35:04.848028 23441 net.cpp:408] ip1 <- pool0
I0428 19:35:04.848032 23441 net.cpp:382] ip1 -> ip1
I0428 19:35:04.850143 23441 net.cpp:124] Setting up ip1
I0428 19:35:04.850155 23441 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:04.850175 23441 net.cpp:139] Memory required for data: 14724800
I0428 19:35:04.850184 23441 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:04.850193 23441 net.cpp:86] Creating Layer relu1
I0428 19:35:04.850196 23441 net.cpp:408] relu1 <- ip1
I0428 19:35:04.850203 23441 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:04.850414 23441 net.cpp:124] Setting up relu1
I0428 19:35:04.850424 23441 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:35:04.850428 23441 net.cpp:139] Memory required for data: 14734800
I0428 19:35:04.850431 23441 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:04.850438 23441 net.cpp:86] Creating Layer ip2
I0428 19:35:04.850441 23441 net.cpp:408] ip2 <- ip1
I0428 19:35:04.850459 23441 net.cpp:382] ip2 -> ip2
I0428 19:35:04.850569 23441 net.cpp:124] Setting up ip2
I0428 19:35:04.850591 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.850594 23441 net.cpp:139] Memory required for data: 14738800
I0428 19:35:04.850617 23441 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:04.850623 23441 net.cpp:86] Creating Layer relu2
I0428 19:35:04.850646 23441 net.cpp:408] relu2 <- ip2
I0428 19:35:04.850649 23441 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:04.851562 23441 net.cpp:124] Setting up relu2
I0428 19:35:04.851574 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.851594 23441 net.cpp:139] Memory required for data: 14742800
I0428 19:35:04.851598 23441 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:04.851606 23441 net.cpp:86] Creating Layer ip3
I0428 19:35:04.851610 23441 net.cpp:408] ip3 <- ip2
I0428 19:35:04.851618 23441 net.cpp:382] ip3 -> ip3
I0428 19:35:04.851732 23441 net.cpp:124] Setting up ip3
I0428 19:35:04.851743 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.851747 23441 net.cpp:139] Memory required for data: 14746800
I0428 19:35:04.851753 23441 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:04.851758 23441 net.cpp:86] Creating Layer relu3
I0428 19:35:04.851778 23441 net.cpp:408] relu3 <- ip3
I0428 19:35:04.851784 23441 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:04.851953 23441 net.cpp:124] Setting up relu3
I0428 19:35:04.851975 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.851979 23441 net.cpp:139] Memory required for data: 14750800
I0428 19:35:04.851982 23441 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:35:04.851989 23441 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:35:04.851991 23441 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:35:04.851997 23441 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:35:04.852004 23441 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:35:04.852038 23441 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:35:04.852046 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.852062 23441 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:04.852066 23441 net.cpp:139] Memory required for data: 14758800
I0428 19:35:04.852069 23441 layer_factory.hpp:77] Creating layer accuracy
I0428 19:35:04.852075 23441 net.cpp:86] Creating Layer accuracy
I0428 19:35:04.852078 23441 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:35:04.852082 23441 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:35:04.852087 23441 net.cpp:382] accuracy -> accuracy
I0428 19:35:04.852094 23441 net.cpp:124] Setting up accuracy
I0428 19:35:04.852098 23441 net.cpp:131] Top shape: (1)
I0428 19:35:04.852102 23441 net.cpp:139] Memory required for data: 14758804
I0428 19:35:04.852105 23441 layer_factory.hpp:77] Creating layer loss
I0428 19:35:04.852110 23441 net.cpp:86] Creating Layer loss
I0428 19:35:04.852114 23441 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:35:04.852118 23441 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:35:04.852123 23441 net.cpp:382] loss -> loss
I0428 19:35:04.852128 23441 layer_factory.hpp:77] Creating layer loss
I0428 19:35:04.852432 23441 net.cpp:124] Setting up loss
I0428 19:35:04.852457 23441 net.cpp:131] Top shape: (1)
I0428 19:35:04.852459 23441 net.cpp:134]     with loss weight 1
I0428 19:35:04.852481 23441 net.cpp:139] Memory required for data: 14758808
I0428 19:35:04.852484 23441 net.cpp:200] loss needs backward computation.
I0428 19:35:04.852488 23441 net.cpp:202] accuracy does not need backward computation.
I0428 19:35:04.852493 23441 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:35:04.852496 23441 net.cpp:200] relu3 needs backward computation.
I0428 19:35:04.852499 23441 net.cpp:200] ip3 needs backward computation.
I0428 19:35:04.852502 23441 net.cpp:200] relu2 needs backward computation.
I0428 19:35:04.852505 23441 net.cpp:200] ip2 needs backward computation.
I0428 19:35:04.852509 23441 net.cpp:200] relu1 needs backward computation.
I0428 19:35:04.852510 23441 net.cpp:200] ip1 needs backward computation.
I0428 19:35:04.852514 23441 net.cpp:200] pool0 needs backward computation.
I0428 19:35:04.852517 23441 net.cpp:200] conv0 needs backward computation.
I0428 19:35:04.852520 23441 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:35:04.852526 23441 net.cpp:202] mnist does not need backward computation.
I0428 19:35:04.852529 23441 net.cpp:244] This network produces output accuracy
I0428 19:35:04.852532 23441 net.cpp:244] This network produces output loss
I0428 19:35:04.852560 23441 net.cpp:257] Network initialization done.
I0428 19:35:04.852598 23441 solver.cpp:56] Solver scaffolding done.
I0428 19:35:04.852916 23441 caffe.cpp:248] Starting Optimization
I0428 19:35:04.852922 23441 solver.cpp:273] Solving LeNet
I0428 19:35:04.852926 23441 solver.cpp:274] Learning Rate Policy: inv
I0428 19:35:04.853726 23441 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:35:04.951704 23448 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:04.955092 23441 solver.cpp:398]     Test net output #0: accuracy = 0.112
I0428 19:35:04.955111 23441 solver.cpp:398]     Test net output #1: loss = 2.304 (* 1 = 2.304 loss)
I0428 19:35:04.959592 23441 solver.cpp:219] Iteration 0 (-4.59315e-31 iter/s, 0.106635s/100 iters), loss = 2.29845
I0428 19:35:04.959631 23441 solver.cpp:238]     Train net output #0: loss = 2.29845 (* 1 = 2.29845 loss)
I0428 19:35:04.959643 23441 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:35:05.101426 23441 solver.cpp:219] Iteration 100 (705.247 iter/s, 0.141794s/100 iters), loss = 0.898546
I0428 19:35:05.101451 23441 solver.cpp:238]     Train net output #0: loss = 0.898546 (* 1 = 0.898546 loss)
I0428 19:35:05.101459 23441 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:35:05.242430 23441 solver.cpp:219] Iteration 200 (709.391 iter/s, 0.140966s/100 iters), loss = 0.884296
I0428 19:35:05.242471 23441 solver.cpp:238]     Train net output #0: loss = 0.884296 (* 1 = 0.884296 loss)
I0428 19:35:05.242477 23441 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:35:05.384701 23441 solver.cpp:219] Iteration 300 (703.074 iter/s, 0.142233s/100 iters), loss = 0.73558
I0428 19:35:05.384753 23441 solver.cpp:238]     Train net output #0: loss = 0.73558 (* 1 = 0.73558 loss)
I0428 19:35:05.384760 23441 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:35:05.524695 23441 solver.cpp:219] Iteration 400 (714.645 iter/s, 0.13993s/100 iters), loss = 0.869357
I0428 19:35:05.524734 23441 solver.cpp:238]     Train net output #0: loss = 0.869357 (* 1 = 0.869357 loss)
I0428 19:35:05.524740 23441 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:35:05.664546 23441 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:35:05.768596 23448 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:05.772737 23441 solver.cpp:398]     Test net output #0: accuracy = 0.7575
I0428 19:35:05.772789 23441 solver.cpp:398]     Test net output #1: loss = 0.822374 (* 1 = 0.822374 loss)
I0428 19:35:05.774351 23441 solver.cpp:219] Iteration 500 (400.634 iter/s, 0.249604s/100 iters), loss = 0.9759
I0428 19:35:05.774401 23441 solver.cpp:238]     Train net output #0: loss = 0.9759 (* 1 = 0.9759 loss)
I0428 19:35:05.774413 23441 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:35:05.921841 23441 solver.cpp:219] Iteration 600 (678.249 iter/s, 0.147438s/100 iters), loss = 0.741951
I0428 19:35:05.921881 23441 solver.cpp:238]     Train net output #0: loss = 0.741951 (* 1 = 0.741951 loss)
I0428 19:35:05.921888 23441 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:35:06.065696 23441 solver.cpp:219] Iteration 700 (695.35 iter/s, 0.143812s/100 iters), loss = 1.09565
I0428 19:35:06.065739 23441 solver.cpp:238]     Train net output #0: loss = 1.09565 (* 1 = 1.09565 loss)
I0428 19:35:06.065747 23441 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:35:06.209455 23441 solver.cpp:219] Iteration 800 (695.82 iter/s, 0.143715s/100 iters), loss = 0.928224
I0428 19:35:06.209486 23441 solver.cpp:238]     Train net output #0: loss = 0.928224 (* 1 = 0.928224 loss)
I0428 19:35:06.209493 23441 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:35:06.354863 23441 solver.cpp:219] Iteration 900 (687.938 iter/s, 0.145362s/100 iters), loss = 0.874997
I0428 19:35:06.354898 23441 solver.cpp:238]     Train net output #0: loss = 0.874997 (* 1 = 0.874997 loss)
I0428 19:35:06.354907 23441 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:35:06.403445 23447 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:06.499080 23441 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:35:06.503721 23441 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:35:06.506137 23441 solver.cpp:311] Iteration 1000, loss = 0.978224
I0428 19:35:06.506157 23441 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:35:06.604941 23448 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:06.608481 23441 solver.cpp:398]     Test net output #0: accuracy = 0.7809
I0428 19:35:06.608502 23441 solver.cpp:398]     Test net output #1: loss = 0.77344 (* 1 = 0.77344 loss)
I0428 19:35:06.608507 23441 solver.cpp:316] Optimization Done.
I0428 19:35:06.608510 23441 caffe.cpp:259] Optimization Done.
