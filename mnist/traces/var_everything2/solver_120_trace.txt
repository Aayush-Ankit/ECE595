I0428 19:31:22.041256 22561 caffe.cpp:218] Using GPUs 0
I0428 19:31:22.080673 22561 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:31:22.601461 22561 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test120.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:31:22.601603 22561 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test120.prototxt
I0428 19:31:22.601933 22561 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:31:22.601950 22561 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:31:22.602027 22561 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:22.602100 22561 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:22.602201 22561 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:31:22.602224 22561 net.cpp:86] Creating Layer mnist
I0428 19:31:22.602233 22561 net.cpp:382] mnist -> data
I0428 19:31:22.602257 22561 net.cpp:382] mnist -> label
I0428 19:31:22.603351 22561 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:31:22.606034 22561 net.cpp:124] Setting up mnist
I0428 19:31:22.606051 22561 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:31:22.606056 22561 net.cpp:131] Top shape: 64 (64)
I0428 19:31:22.606060 22561 net.cpp:139] Memory required for data: 200960
I0428 19:31:22.606067 22561 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:22.606084 22561 net.cpp:86] Creating Layer conv0
I0428 19:31:22.606091 22561 net.cpp:408] conv0 <- data
I0428 19:31:22.606101 22561 net.cpp:382] conv0 -> conv0
I0428 19:31:22.895056 22561 net.cpp:124] Setting up conv0
I0428 19:31:22.895082 22561 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:31:22.895088 22561 net.cpp:139] Memory required for data: 1675520
I0428 19:31:22.895103 22561 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:22.895115 22561 net.cpp:86] Creating Layer pool0
I0428 19:31:22.895119 22561 net.cpp:408] pool0 <- conv0
I0428 19:31:22.895124 22561 net.cpp:382] pool0 -> pool0
I0428 19:31:22.895175 22561 net.cpp:124] Setting up pool0
I0428 19:31:22.895181 22561 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:31:22.895184 22561 net.cpp:139] Memory required for data: 2044160
I0428 19:31:22.895202 22561 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:22.895212 22561 net.cpp:86] Creating Layer ip1
I0428 19:31:22.895215 22561 net.cpp:408] ip1 <- pool0
I0428 19:31:22.895220 22561 net.cpp:382] ip1 -> ip1
I0428 19:31:22.896281 22561 net.cpp:124] Setting up ip1
I0428 19:31:22.896296 22561 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:22.896298 22561 net.cpp:139] Memory required for data: 2046720
I0428 19:31:22.896307 22561 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:22.896316 22561 net.cpp:86] Creating Layer relu1
I0428 19:31:22.896319 22561 net.cpp:408] relu1 <- ip1
I0428 19:31:22.896324 22561 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:22.896508 22561 net.cpp:124] Setting up relu1
I0428 19:31:22.896517 22561 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:22.896522 22561 net.cpp:139] Memory required for data: 2049280
I0428 19:31:22.896524 22561 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:22.896533 22561 net.cpp:86] Creating Layer ip2
I0428 19:31:22.896535 22561 net.cpp:408] ip2 <- ip1
I0428 19:31:22.896541 22561 net.cpp:382] ip2 -> ip2
I0428 19:31:22.896643 22561 net.cpp:124] Setting up ip2
I0428 19:31:22.896651 22561 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:22.896653 22561 net.cpp:139] Memory required for data: 2051840
I0428 19:31:22.896661 22561 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:22.896667 22561 net.cpp:86] Creating Layer relu2
I0428 19:31:22.896670 22561 net.cpp:408] relu2 <- ip2
I0428 19:31:22.896675 22561 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:22.897459 22561 net.cpp:124] Setting up relu2
I0428 19:31:22.897471 22561 net.cpp:131] Top shape: 64 10 (640)
I0428 19:31:22.897475 22561 net.cpp:139] Memory required for data: 2054400
I0428 19:31:22.897478 22561 layer_factory.hpp:77] Creating layer loss
I0428 19:31:22.897490 22561 net.cpp:86] Creating Layer loss
I0428 19:31:22.897492 22561 net.cpp:408] loss <- ip2
I0428 19:31:22.897496 22561 net.cpp:408] loss <- label
I0428 19:31:22.897503 22561 net.cpp:382] loss -> loss
I0428 19:31:22.897517 22561 layer_factory.hpp:77] Creating layer loss
I0428 19:31:22.897760 22561 net.cpp:124] Setting up loss
I0428 19:31:22.897770 22561 net.cpp:131] Top shape: (1)
I0428 19:31:22.897774 22561 net.cpp:134]     with loss weight 1
I0428 19:31:22.897789 22561 net.cpp:139] Memory required for data: 2054404
I0428 19:31:22.897791 22561 net.cpp:200] loss needs backward computation.
I0428 19:31:22.897795 22561 net.cpp:200] relu2 needs backward computation.
I0428 19:31:22.897799 22561 net.cpp:200] ip2 needs backward computation.
I0428 19:31:22.897801 22561 net.cpp:200] relu1 needs backward computation.
I0428 19:31:22.897804 22561 net.cpp:200] ip1 needs backward computation.
I0428 19:31:22.897806 22561 net.cpp:200] pool0 needs backward computation.
I0428 19:31:22.897809 22561 net.cpp:200] conv0 needs backward computation.
I0428 19:31:22.897812 22561 net.cpp:202] mnist does not need backward computation.
I0428 19:31:22.897815 22561 net.cpp:244] This network produces output loss
I0428 19:31:22.897822 22561 net.cpp:257] Network initialization done.
I0428 19:31:22.898077 22561 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test120.prototxt
I0428 19:31:22.898102 22561 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:31:22.898176 22561 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:31:22.898267 22561 layer_factory.hpp:77] Creating layer mnist
I0428 19:31:22.898313 22561 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:31:22.898327 22561 net.cpp:86] Creating Layer mnist
I0428 19:31:22.898331 22561 net.cpp:382] mnist -> data
I0428 19:31:22.898340 22561 net.cpp:382] mnist -> label
I0428 19:31:22.898430 22561 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:31:22.900337 22561 net.cpp:124] Setting up mnist
I0428 19:31:22.900352 22561 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:31:22.900357 22561 net.cpp:131] Top shape: 100 (100)
I0428 19:31:22.900359 22561 net.cpp:139] Memory required for data: 314000
I0428 19:31:22.900363 22561 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:31:22.900372 22561 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:31:22.900374 22561 net.cpp:408] label_mnist_1_split <- label
I0428 19:31:22.900398 22561 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:31:22.900405 22561 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:31:22.900449 22561 net.cpp:124] Setting up label_mnist_1_split
I0428 19:31:22.900455 22561 net.cpp:131] Top shape: 100 (100)
I0428 19:31:22.900460 22561 net.cpp:131] Top shape: 100 (100)
I0428 19:31:22.900462 22561 net.cpp:139] Memory required for data: 314800
I0428 19:31:22.900465 22561 layer_factory.hpp:77] Creating layer conv0
I0428 19:31:22.900475 22561 net.cpp:86] Creating Layer conv0
I0428 19:31:22.900478 22561 net.cpp:408] conv0 <- data
I0428 19:31:22.900485 22561 net.cpp:382] conv0 -> conv0
I0428 19:31:22.902215 22561 net.cpp:124] Setting up conv0
I0428 19:31:22.902230 22561 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:31:22.902235 22561 net.cpp:139] Memory required for data: 2618800
I0428 19:31:22.902243 22561 layer_factory.hpp:77] Creating layer pool0
I0428 19:31:22.902251 22561 net.cpp:86] Creating Layer pool0
I0428 19:31:22.902254 22561 net.cpp:408] pool0 <- conv0
I0428 19:31:22.902261 22561 net.cpp:382] pool0 -> pool0
I0428 19:31:22.902297 22561 net.cpp:124] Setting up pool0
I0428 19:31:22.902302 22561 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:31:22.902305 22561 net.cpp:139] Memory required for data: 3194800
I0428 19:31:22.902307 22561 layer_factory.hpp:77] Creating layer ip1
I0428 19:31:22.902315 22561 net.cpp:86] Creating Layer ip1
I0428 19:31:22.902318 22561 net.cpp:408] ip1 <- pool0
I0428 19:31:22.902323 22561 net.cpp:382] ip1 -> ip1
I0428 19:31:22.902503 22561 net.cpp:124] Setting up ip1
I0428 19:31:22.902509 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.902513 22561 net.cpp:139] Memory required for data: 3198800
I0428 19:31:22.902519 22561 layer_factory.hpp:77] Creating layer relu1
I0428 19:31:22.902525 22561 net.cpp:86] Creating Layer relu1
I0428 19:31:22.902529 22561 net.cpp:408] relu1 <- ip1
I0428 19:31:22.902532 22561 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:31:22.902699 22561 net.cpp:124] Setting up relu1
I0428 19:31:22.902709 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.902722 22561 net.cpp:139] Memory required for data: 3202800
I0428 19:31:22.902725 22561 layer_factory.hpp:77] Creating layer ip2
I0428 19:31:22.902734 22561 net.cpp:86] Creating Layer ip2
I0428 19:31:22.902736 22561 net.cpp:408] ip2 <- ip1
I0428 19:31:22.902742 22561 net.cpp:382] ip2 -> ip2
I0428 19:31:22.902842 22561 net.cpp:124] Setting up ip2
I0428 19:31:22.902848 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.902851 22561 net.cpp:139] Memory required for data: 3206800
I0428 19:31:22.902858 22561 layer_factory.hpp:77] Creating layer relu2
I0428 19:31:22.902863 22561 net.cpp:86] Creating Layer relu2
I0428 19:31:22.902866 22561 net.cpp:408] relu2 <- ip2
I0428 19:31:22.902871 22561 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:31:22.903128 22561 net.cpp:124] Setting up relu2
I0428 19:31:22.903153 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.903157 22561 net.cpp:139] Memory required for data: 3210800
I0428 19:31:22.903161 22561 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:31:22.903167 22561 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:31:22.903170 22561 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:31:22.903175 22561 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:31:22.903182 22561 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:31:22.903237 22561 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:31:22.903244 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.903249 22561 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:31:22.903251 22561 net.cpp:139] Memory required for data: 3218800
I0428 19:31:22.903254 22561 layer_factory.hpp:77] Creating layer accuracy
I0428 19:31:22.903259 22561 net.cpp:86] Creating Layer accuracy
I0428 19:31:22.903262 22561 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:31:22.903266 22561 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:31:22.903271 22561 net.cpp:382] accuracy -> accuracy
I0428 19:31:22.903278 22561 net.cpp:124] Setting up accuracy
I0428 19:31:22.903282 22561 net.cpp:131] Top shape: (1)
I0428 19:31:22.903286 22561 net.cpp:139] Memory required for data: 3218804
I0428 19:31:22.903290 22561 layer_factory.hpp:77] Creating layer loss
I0428 19:31:22.903293 22561 net.cpp:86] Creating Layer loss
I0428 19:31:22.903296 22561 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:31:22.903301 22561 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:31:22.903304 22561 net.cpp:382] loss -> loss
I0428 19:31:22.903309 22561 layer_factory.hpp:77] Creating layer loss
I0428 19:31:22.904152 22561 net.cpp:124] Setting up loss
I0428 19:31:22.904165 22561 net.cpp:131] Top shape: (1)
I0428 19:31:22.904167 22561 net.cpp:134]     with loss weight 1
I0428 19:31:22.904173 22561 net.cpp:139] Memory required for data: 3218808
I0428 19:31:22.904176 22561 net.cpp:200] loss needs backward computation.
I0428 19:31:22.904181 22561 net.cpp:202] accuracy does not need backward computation.
I0428 19:31:22.904187 22561 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:31:22.904191 22561 net.cpp:200] relu2 needs backward computation.
I0428 19:31:22.904193 22561 net.cpp:200] ip2 needs backward computation.
I0428 19:31:22.904196 22561 net.cpp:200] relu1 needs backward computation.
I0428 19:31:22.904199 22561 net.cpp:200] ip1 needs backward computation.
I0428 19:31:22.904202 22561 net.cpp:200] pool0 needs backward computation.
I0428 19:31:22.904206 22561 net.cpp:200] conv0 needs backward computation.
I0428 19:31:22.904209 22561 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:31:22.904213 22561 net.cpp:202] mnist does not need backward computation.
I0428 19:31:22.904217 22561 net.cpp:244] This network produces output accuracy
I0428 19:31:22.904219 22561 net.cpp:244] This network produces output loss
I0428 19:31:22.904229 22561 net.cpp:257] Network initialization done.
I0428 19:31:22.904261 22561 solver.cpp:56] Solver scaffolding done.
I0428 19:31:22.904464 22561 caffe.cpp:248] Starting Optimization
I0428 19:31:22.904471 22561 solver.cpp:273] Solving LeNet
I0428 19:31:22.904484 22561 solver.cpp:274] Learning Rate Policy: inv
I0428 19:31:22.904588 22561 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:31:22.908076 22561 blocking_queue.cpp:49] Waiting for data
I0428 19:31:22.981890 22568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:22.982434 22561 solver.cpp:398]     Test net output #0: accuracy = 0.1663
I0428 19:31:22.982467 22561 solver.cpp:398]     Test net output #1: loss = 2.27197 (* 1 = 2.27197 loss)
I0428 19:31:22.984580 22561 solver.cpp:219] Iteration 0 (-1.01454e-42 iter/s, 0.0800686s/100 iters), loss = 2.28197
I0428 19:31:22.984624 22561 solver.cpp:238]     Train net output #0: loss = 2.28197 (* 1 = 2.28197 loss)
I0428 19:31:22.984637 22561 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:31:23.045191 22561 solver.cpp:219] Iteration 100 (1651.37 iter/s, 0.0605556s/100 iters), loss = 0.994783
I0428 19:31:23.045217 22561 solver.cpp:238]     Train net output #0: loss = 0.994783 (* 1 = 0.994783 loss)
I0428 19:31:23.045225 22561 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:31:23.108372 22561 solver.cpp:219] Iteration 200 (1583.58 iter/s, 0.063148s/100 iters), loss = 0.846466
I0428 19:31:23.108412 22561 solver.cpp:238]     Train net output #0: loss = 0.846466 (* 1 = 0.846466 loss)
I0428 19:31:23.108418 22561 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:31:23.168797 22561 solver.cpp:219] Iteration 300 (1655.86 iter/s, 0.0603914s/100 iters), loss = 0.763211
I0428 19:31:23.168848 22561 solver.cpp:238]     Train net output #0: loss = 0.763211 (* 1 = 0.763211 loss)
I0428 19:31:23.168858 22561 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:31:23.228282 22561 solver.cpp:219] Iteration 400 (1682.72 iter/s, 0.0594276s/100 iters), loss = 0.59294
I0428 19:31:23.228322 22561 solver.cpp:238]     Train net output #0: loss = 0.59294 (* 1 = 0.59294 loss)
I0428 19:31:23.228328 22561 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:31:23.287039 22561 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:31:23.363025 22568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:23.363550 22561 solver.cpp:398]     Test net output #0: accuracy = 0.758
I0428 19:31:23.363586 22561 solver.cpp:398]     Test net output #1: loss = 0.67085 (* 1 = 0.67085 loss)
I0428 19:31:23.364240 22561 solver.cpp:219] Iteration 500 (735.718 iter/s, 0.135922s/100 iters), loss = 0.841072
I0428 19:31:23.364276 22561 solver.cpp:238]     Train net output #0: loss = 0.841072 (* 1 = 0.841072 loss)
I0428 19:31:23.364284 22561 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:31:23.425215 22561 solver.cpp:219] Iteration 600 (1641.25 iter/s, 0.060929s/100 iters), loss = 0.491383
I0428 19:31:23.425258 22561 solver.cpp:238]     Train net output #0: loss = 0.491383 (* 1 = 0.491383 loss)
I0428 19:31:23.425266 22561 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:31:23.484314 22561 solver.cpp:219] Iteration 700 (1693.16 iter/s, 0.0590612s/100 iters), loss = 0.89627
I0428 19:31:23.484344 22561 solver.cpp:238]     Train net output #0: loss = 0.89627 (* 1 = 0.89627 loss)
I0428 19:31:23.484354 22561 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:31:23.544136 22561 solver.cpp:219] Iteration 800 (1672.71 iter/s, 0.0597834s/100 iters), loss = 0.841065
I0428 19:31:23.544167 22561 solver.cpp:238]     Train net output #0: loss = 0.841065 (* 1 = 0.841065 loss)
I0428 19:31:23.544174 22561 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:31:23.603410 22561 solver.cpp:219] Iteration 900 (1688.11 iter/s, 0.059238s/100 iters), loss = 0.683749
I0428 19:31:23.603442 22561 solver.cpp:238]     Train net output #0: loss = 0.683749 (* 1 = 0.683749 loss)
I0428 19:31:23.603449 22561 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:31:23.623261 22567 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:23.661599 22561 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:31:23.662344 22561 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:31:23.662861 22561 solver.cpp:311] Iteration 1000, loss = 0.767243
I0428 19:31:23.662880 22561 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:31:23.737941 22568 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:31:23.738448 22561 solver.cpp:398]     Test net output #0: accuracy = 0.7731
I0428 19:31:23.738471 22561 solver.cpp:398]     Test net output #1: loss = 0.600218 (* 1 = 0.600218 loss)
I0428 19:31:23.738478 22561 solver.cpp:316] Optimization Done.
I0428 19:31:23.738483 22561 caffe.cpp:259] Optimization Done.
