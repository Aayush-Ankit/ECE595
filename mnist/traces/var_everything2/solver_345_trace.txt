I0428 19:40:47.341553 24662 caffe.cpp:218] Using GPUs 0
I0428 19:40:47.376651 24662 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:47.825994 24662 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test345.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:47.826129 24662 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test345.prototxt
I0428 19:40:47.826498 24662 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:47.826530 24662 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:47.826624 24662 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:47.826689 24662 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:47.826766 24662 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:47.826786 24662 net.cpp:86] Creating Layer mnist
I0428 19:40:47.826792 24662 net.cpp:382] mnist -> data
I0428 19:40:47.826810 24662 net.cpp:382] mnist -> label
I0428 19:40:47.827726 24662 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:47.830224 24662 net.cpp:124] Setting up mnist
I0428 19:40:47.830238 24662 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:47.830260 24662 net.cpp:131] Top shape: 64 (64)
I0428 19:40:47.830263 24662 net.cpp:139] Memory required for data: 200960
I0428 19:40:47.830269 24662 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:47.830282 24662 net.cpp:86] Creating Layer conv0
I0428 19:40:47.830314 24662 net.cpp:408] conv0 <- data
I0428 19:40:47.830327 24662 net.cpp:382] conv0 -> conv0
I0428 19:40:48.060411 24662 net.cpp:124] Setting up conv0
I0428 19:40:48.060453 24662 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:48.060458 24662 net.cpp:139] Memory required for data: 495872
I0428 19:40:48.060472 24662 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:48.060485 24662 net.cpp:86] Creating Layer pool0
I0428 19:40:48.060490 24662 net.cpp:408] pool0 <- conv0
I0428 19:40:48.060495 24662 net.cpp:382] pool0 -> pool0
I0428 19:40:48.060559 24662 net.cpp:124] Setting up pool0
I0428 19:40:48.060570 24662 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:48.060573 24662 net.cpp:139] Memory required for data: 569600
I0428 19:40:48.060576 24662 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:48.060586 24662 net.cpp:86] Creating Layer conv1
I0428 19:40:48.060590 24662 net.cpp:408] conv1 <- pool0
I0428 19:40:48.060595 24662 net.cpp:382] conv1 -> conv1
I0428 19:40:48.062459 24662 net.cpp:124] Setting up conv1
I0428 19:40:48.062490 24662 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:48.062494 24662 net.cpp:139] Memory required for data: 651520
I0428 19:40:48.062503 24662 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:48.062512 24662 net.cpp:86] Creating Layer pool1
I0428 19:40:48.062516 24662 net.cpp:408] pool1 <- conv1
I0428 19:40:48.062522 24662 net.cpp:382] pool1 -> pool1
I0428 19:40:48.062561 24662 net.cpp:124] Setting up pool1
I0428 19:40:48.062567 24662 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:48.062571 24662 net.cpp:139] Memory required for data: 672000
I0428 19:40:48.062574 24662 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:48.062585 24662 net.cpp:86] Creating Layer ip1
I0428 19:40:48.062589 24662 net.cpp:408] ip1 <- pool1
I0428 19:40:48.062594 24662 net.cpp:382] ip1 -> ip1
I0428 19:40:48.063619 24662 net.cpp:124] Setting up ip1
I0428 19:40:48.063632 24662 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:48.063652 24662 net.cpp:139] Memory required for data: 684800
I0428 19:40:48.063675 24662 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:48.063683 24662 net.cpp:86] Creating Layer relu1
I0428 19:40:48.063686 24662 net.cpp:408] relu1 <- ip1
I0428 19:40:48.063690 24662 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:48.063884 24662 net.cpp:124] Setting up relu1
I0428 19:40:48.063894 24662 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:48.063899 24662 net.cpp:139] Memory required for data: 697600
I0428 19:40:48.063901 24662 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:48.063907 24662 net.cpp:86] Creating Layer ip2
I0428 19:40:48.063910 24662 net.cpp:408] ip2 <- ip1
I0428 19:40:48.063915 24662 net.cpp:382] ip2 -> ip2
I0428 19:40:48.064010 24662 net.cpp:124] Setting up ip2
I0428 19:40:48.064018 24662 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:48.064020 24662 net.cpp:139] Memory required for data: 704000
I0428 19:40:48.064026 24662 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:48.064033 24662 net.cpp:86] Creating Layer relu2
I0428 19:40:48.064035 24662 net.cpp:408] relu2 <- ip2
I0428 19:40:48.064039 24662 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:48.064911 24662 net.cpp:124] Setting up relu2
I0428 19:40:48.064924 24662 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:48.064929 24662 net.cpp:139] Memory required for data: 710400
I0428 19:40:48.064931 24662 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:48.064939 24662 net.cpp:86] Creating Layer ip3
I0428 19:40:48.064941 24662 net.cpp:408] ip3 <- ip2
I0428 19:40:48.064946 24662 net.cpp:382] ip3 -> ip3
I0428 19:40:48.065039 24662 net.cpp:124] Setting up ip3
I0428 19:40:48.065047 24662 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:48.065050 24662 net.cpp:139] Memory required for data: 712960
I0428 19:40:48.065057 24662 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:48.065063 24662 net.cpp:86] Creating Layer relu3
I0428 19:40:48.065065 24662 net.cpp:408] relu3 <- ip3
I0428 19:40:48.065070 24662 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:48.065258 24662 net.cpp:124] Setting up relu3
I0428 19:40:48.065268 24662 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:48.065270 24662 net.cpp:139] Memory required for data: 715520
I0428 19:40:48.065274 24662 layer_factory.hpp:77] Creating layer loss
I0428 19:40:48.065280 24662 net.cpp:86] Creating Layer loss
I0428 19:40:48.065284 24662 net.cpp:408] loss <- ip3
I0428 19:40:48.065287 24662 net.cpp:408] loss <- label
I0428 19:40:48.065292 24662 net.cpp:382] loss -> loss
I0428 19:40:48.065310 24662 layer_factory.hpp:77] Creating layer loss
I0428 19:40:48.065513 24662 net.cpp:124] Setting up loss
I0428 19:40:48.065522 24662 net.cpp:131] Top shape: (1)
I0428 19:40:48.065526 24662 net.cpp:134]     with loss weight 1
I0428 19:40:48.065541 24662 net.cpp:139] Memory required for data: 715524
I0428 19:40:48.065543 24662 net.cpp:200] loss needs backward computation.
I0428 19:40:48.065547 24662 net.cpp:200] relu3 needs backward computation.
I0428 19:40:48.065551 24662 net.cpp:200] ip3 needs backward computation.
I0428 19:40:48.065553 24662 net.cpp:200] relu2 needs backward computation.
I0428 19:40:48.065557 24662 net.cpp:200] ip2 needs backward computation.
I0428 19:40:48.065559 24662 net.cpp:200] relu1 needs backward computation.
I0428 19:40:48.065562 24662 net.cpp:200] ip1 needs backward computation.
I0428 19:40:48.065565 24662 net.cpp:200] pool1 needs backward computation.
I0428 19:40:48.065568 24662 net.cpp:200] conv1 needs backward computation.
I0428 19:40:48.065572 24662 net.cpp:200] pool0 needs backward computation.
I0428 19:40:48.065574 24662 net.cpp:200] conv0 needs backward computation.
I0428 19:40:48.065577 24662 net.cpp:202] mnist does not need backward computation.
I0428 19:40:48.065580 24662 net.cpp:244] This network produces output loss
I0428 19:40:48.065605 24662 net.cpp:257] Network initialization done.
I0428 19:40:48.066061 24662 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test345.prototxt
I0428 19:40:48.066102 24662 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:48.066186 24662 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:48.066262 24662 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:48.066304 24662 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:48.066316 24662 net.cpp:86] Creating Layer mnist
I0428 19:40:48.066320 24662 net.cpp:382] mnist -> data
I0428 19:40:48.066329 24662 net.cpp:382] mnist -> label
I0428 19:40:48.066407 24662 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:48.068452 24662 net.cpp:124] Setting up mnist
I0428 19:40:48.068465 24662 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:48.068470 24662 net.cpp:131] Top shape: 100 (100)
I0428 19:40:48.068475 24662 net.cpp:139] Memory required for data: 314000
I0428 19:40:48.068477 24662 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:48.068507 24662 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:48.068512 24662 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:48.068517 24662 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:48.068524 24662 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:48.068567 24662 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:48.068573 24662 net.cpp:131] Top shape: 100 (100)
I0428 19:40:48.068578 24662 net.cpp:131] Top shape: 100 (100)
I0428 19:40:48.068579 24662 net.cpp:139] Memory required for data: 314800
I0428 19:40:48.068583 24662 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:48.068604 24662 net.cpp:86] Creating Layer conv0
I0428 19:40:48.068608 24662 net.cpp:408] conv0 <- data
I0428 19:40:48.068612 24662 net.cpp:382] conv0 -> conv0
I0428 19:40:48.070425 24662 net.cpp:124] Setting up conv0
I0428 19:40:48.070438 24662 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:48.070442 24662 net.cpp:139] Memory required for data: 775600
I0428 19:40:48.070451 24662 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:48.070456 24662 net.cpp:86] Creating Layer pool0
I0428 19:40:48.070459 24662 net.cpp:408] pool0 <- conv0
I0428 19:40:48.070466 24662 net.cpp:382] pool0 -> pool0
I0428 19:40:48.070499 24662 net.cpp:124] Setting up pool0
I0428 19:40:48.070504 24662 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:48.070508 24662 net.cpp:139] Memory required for data: 890800
I0428 19:40:48.070509 24662 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:48.070528 24662 net.cpp:86] Creating Layer conv1
I0428 19:40:48.070531 24662 net.cpp:408] conv1 <- pool0
I0428 19:40:48.070536 24662 net.cpp:382] conv1 -> conv1
I0428 19:40:48.072186 24662 net.cpp:124] Setting up conv1
I0428 19:40:48.072201 24662 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:48.072204 24662 net.cpp:139] Memory required for data: 1018800
I0428 19:40:48.072214 24662 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:48.072237 24662 net.cpp:86] Creating Layer pool1
I0428 19:40:48.072273 24662 net.cpp:408] pool1 <- conv1
I0428 19:40:48.072278 24662 net.cpp:382] pool1 -> pool1
I0428 19:40:48.072317 24662 net.cpp:124] Setting up pool1
I0428 19:40:48.072334 24662 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:48.072337 24662 net.cpp:139] Memory required for data: 1050800
I0428 19:40:48.072341 24662 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:48.072347 24662 net.cpp:86] Creating Layer ip1
I0428 19:40:48.072350 24662 net.cpp:408] ip1 <- pool1
I0428 19:40:48.072358 24662 net.cpp:382] ip1 -> ip1
I0428 19:40:48.072489 24662 net.cpp:124] Setting up ip1
I0428 19:40:48.072499 24662 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:48.072518 24662 net.cpp:139] Memory required for data: 1070800
I0428 19:40:48.072526 24662 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:48.072533 24662 net.cpp:86] Creating Layer relu1
I0428 19:40:48.072537 24662 net.cpp:408] relu1 <- ip1
I0428 19:40:48.072542 24662 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:48.072716 24662 net.cpp:124] Setting up relu1
I0428 19:40:48.072726 24662 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:48.072731 24662 net.cpp:139] Memory required for data: 1090800
I0428 19:40:48.072733 24662 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:48.072741 24662 net.cpp:86] Creating Layer ip2
I0428 19:40:48.072744 24662 net.cpp:408] ip2 <- ip1
I0428 19:40:48.072764 24662 net.cpp:382] ip2 -> ip2
I0428 19:40:48.072875 24662 net.cpp:124] Setting up ip2
I0428 19:40:48.072882 24662 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:48.072885 24662 net.cpp:139] Memory required for data: 1100800
I0428 19:40:48.072891 24662 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:48.072898 24662 net.cpp:86] Creating Layer relu2
I0428 19:40:48.072902 24662 net.cpp:408] relu2 <- ip2
I0428 19:40:48.072906 24662 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:48.073051 24662 net.cpp:124] Setting up relu2
I0428 19:40:48.073060 24662 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:48.073071 24662 net.cpp:139] Memory required for data: 1110800
I0428 19:40:48.073073 24662 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:48.073081 24662 net.cpp:86] Creating Layer ip3
I0428 19:40:48.073083 24662 net.cpp:408] ip3 <- ip2
I0428 19:40:48.073088 24662 net.cpp:382] ip3 -> ip3
I0428 19:40:48.073204 24662 net.cpp:124] Setting up ip3
I0428 19:40:48.073211 24662 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:48.073215 24662 net.cpp:139] Memory required for data: 1114800
I0428 19:40:48.073221 24662 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:48.073225 24662 net.cpp:86] Creating Layer relu3
I0428 19:40:48.073228 24662 net.cpp:408] relu3 <- ip3
I0428 19:40:48.073232 24662 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:48.074173 24662 net.cpp:124] Setting up relu3
I0428 19:40:48.074185 24662 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:48.074200 24662 net.cpp:139] Memory required for data: 1118800
I0428 19:40:48.074204 24662 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:48.074210 24662 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:48.074214 24662 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:48.074220 24662 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:48.074226 24662 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:48.074264 24662 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:48.074276 24662 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:48.074286 24662 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:48.074290 24662 net.cpp:139] Memory required for data: 1126800
I0428 19:40:48.074292 24662 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:48.074297 24662 net.cpp:86] Creating Layer accuracy
I0428 19:40:48.074301 24662 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:48.074306 24662 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:48.074309 24662 net.cpp:382] accuracy -> accuracy
I0428 19:40:48.074317 24662 net.cpp:124] Setting up accuracy
I0428 19:40:48.074321 24662 net.cpp:131] Top shape: (1)
I0428 19:40:48.074324 24662 net.cpp:139] Memory required for data: 1126804
I0428 19:40:48.074332 24662 layer_factory.hpp:77] Creating layer loss
I0428 19:40:48.074339 24662 net.cpp:86] Creating Layer loss
I0428 19:40:48.074342 24662 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:48.074352 24662 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:48.074357 24662 net.cpp:382] loss -> loss
I0428 19:40:48.074363 24662 layer_factory.hpp:77] Creating layer loss
I0428 19:40:48.074640 24662 net.cpp:124] Setting up loss
I0428 19:40:48.074651 24662 net.cpp:131] Top shape: (1)
I0428 19:40:48.074653 24662 net.cpp:134]     with loss weight 1
I0428 19:40:48.074676 24662 net.cpp:139] Memory required for data: 1126808
I0428 19:40:48.074688 24662 net.cpp:200] loss needs backward computation.
I0428 19:40:48.074692 24662 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:48.074697 24662 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:48.074705 24662 net.cpp:200] relu3 needs backward computation.
I0428 19:40:48.074723 24662 net.cpp:200] ip3 needs backward computation.
I0428 19:40:48.074733 24662 net.cpp:200] relu2 needs backward computation.
I0428 19:40:48.074735 24662 net.cpp:200] ip2 needs backward computation.
I0428 19:40:48.074738 24662 net.cpp:200] relu1 needs backward computation.
I0428 19:40:48.074746 24662 net.cpp:200] ip1 needs backward computation.
I0428 19:40:48.074749 24662 net.cpp:200] pool1 needs backward computation.
I0428 19:40:48.074753 24662 net.cpp:200] conv1 needs backward computation.
I0428 19:40:48.074756 24662 net.cpp:200] pool0 needs backward computation.
I0428 19:40:48.074774 24662 net.cpp:200] conv0 needs backward computation.
I0428 19:40:48.074779 24662 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:48.074784 24662 net.cpp:202] mnist does not need backward computation.
I0428 19:40:48.074786 24662 net.cpp:244] This network produces output accuracy
I0428 19:40:48.074790 24662 net.cpp:244] This network produces output loss
I0428 19:40:48.074801 24662 net.cpp:257] Network initialization done.
I0428 19:40:48.074859 24662 solver.cpp:56] Solver scaffolding done.
I0428 19:40:48.075209 24662 caffe.cpp:248] Starting Optimization
I0428 19:40:48.075217 24662 solver.cpp:273] Solving LeNet
I0428 19:40:48.075219 24662 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:48.075454 24662 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:48.078490 24662 blocking_queue.cpp:49] Waiting for data
I0428 19:40:48.144244 24669 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:48.144724 24662 solver.cpp:398]     Test net output #0: accuracy = 0.1001
I0428 19:40:48.144742 24662 solver.cpp:398]     Test net output #1: loss = 2.32821 (* 1 = 2.32821 loss)
I0428 19:40:48.146641 24662 solver.cpp:219] Iteration 0 (-1.28105e-31 iter/s, 0.0713851s/100 iters), loss = 2.37848
I0428 19:40:48.146666 24662 solver.cpp:238]     Train net output #0: loss = 2.37848 (* 1 = 2.37848 loss)
I0428 19:40:48.146694 24662 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:48.216651 24662 solver.cpp:219] Iteration 100 (1429.39 iter/s, 0.0699597s/100 iters), loss = 0.775559
I0428 19:40:48.216676 24662 solver.cpp:238]     Train net output #0: loss = 0.775559 (* 1 = 0.775559 loss)
I0428 19:40:48.216698 24662 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:48.285295 24662 solver.cpp:219] Iteration 200 (1457.52 iter/s, 0.0686099s/100 iters), loss = 0.749434
I0428 19:40:48.285320 24662 solver.cpp:238]     Train net output #0: loss = 0.749434 (* 1 = 0.749434 loss)
I0428 19:40:48.285341 24662 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:48.353893 24662 solver.cpp:219] Iteration 300 (1458.49 iter/s, 0.068564s/100 iters), loss = 0.759552
I0428 19:40:48.353916 24662 solver.cpp:238]     Train net output #0: loss = 0.759552 (* 1 = 0.759552 loss)
I0428 19:40:48.353940 24662 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:48.420591 24662 solver.cpp:219] Iteration 400 (1500 iter/s, 0.0666665s/100 iters), loss = 0.784311
I0428 19:40:48.420615 24662 solver.cpp:238]     Train net output #0: loss = 0.784311 (* 1 = 0.784311 loss)
I0428 19:40:48.420621 24662 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:48.486690 24662 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:48.563319 24669 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:48.563766 24662 solver.cpp:398]     Test net output #0: accuracy = 0.8146
I0428 19:40:48.563786 24662 solver.cpp:398]     Test net output #1: loss = 0.630665 (* 1 = 0.630665 loss)
I0428 19:40:48.564517 24662 solver.cpp:219] Iteration 500 (694.983 iter/s, 0.143888s/100 iters), loss = 0.614864
I0428 19:40:48.564538 24662 solver.cpp:238]     Train net output #0: loss = 0.614864 (* 1 = 0.614864 loss)
I0428 19:40:48.564558 24662 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:48.635715 24662 solver.cpp:219] Iteration 600 (1405.17 iter/s, 0.0711657s/100 iters), loss = 0.66906
I0428 19:40:48.635740 24662 solver.cpp:238]     Train net output #0: loss = 0.66906 (* 1 = 0.66906 loss)
I0428 19:40:48.635761 24662 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:48.704592 24662 solver.cpp:219] Iteration 700 (1452.59 iter/s, 0.0688425s/100 iters), loss = 0.792803
I0428 19:40:48.704617 24662 solver.cpp:238]     Train net output #0: loss = 0.792803 (* 1 = 0.792803 loss)
I0428 19:40:48.704638 24662 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:48.772630 24662 solver.cpp:219] Iteration 800 (1470.51 iter/s, 0.0680038s/100 iters), loss = 0.666668
I0428 19:40:48.772653 24662 solver.cpp:238]     Train net output #0: loss = 0.666668 (* 1 = 0.666668 loss)
I0428 19:40:48.772660 24662 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:48.843165 24662 solver.cpp:219] Iteration 900 (1418.49 iter/s, 0.0704973s/100 iters), loss = 0.52248
I0428 19:40:48.843190 24662 solver.cpp:238]     Train net output #0: loss = 0.52248 (* 1 = 0.52248 loss)
I0428 19:40:48.843196 24662 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:48.866096 24668 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:48.911334 24662 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:48.912075 24662 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:48.912523 24662 solver.cpp:311] Iteration 1000, loss = 0.568064
I0428 19:40:48.912538 24662 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:48.989329 24669 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:48.989781 24662 solver.cpp:398]     Test net output #0: accuracy = 0.8574
I0428 19:40:48.989802 24662 solver.cpp:398]     Test net output #1: loss = 0.570921 (* 1 = 0.570921 loss)
I0428 19:40:48.989809 24662 solver.cpp:316] Optimization Done.
I0428 19:40:48.989814 24662 caffe.cpp:259] Optimization Done.
