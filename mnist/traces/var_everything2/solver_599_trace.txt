I0428 19:50:15.130280 26967 caffe.cpp:218] Using GPUs 0
I0428 19:50:15.158898 26967 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:50:15.601658 26967 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test599.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:50:15.601784 26967 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test599.prototxt
I0428 19:50:15.602115 26967 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:50:15.602130 26967 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:50:15.602207 26967 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:15.602267 26967 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:15.602350 26967 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:50:15.602383 26967 net.cpp:86] Creating Layer mnist
I0428 19:50:15.602391 26967 net.cpp:382] mnist -> data
I0428 19:50:15.602408 26967 net.cpp:382] mnist -> label
I0428 19:50:15.603366 26967 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:50:15.605689 26967 net.cpp:124] Setting up mnist
I0428 19:50:15.605733 26967 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:50:15.605754 26967 net.cpp:131] Top shape: 64 (64)
I0428 19:50:15.605757 26967 net.cpp:139] Memory required for data: 200960
I0428 19:50:15.605764 26967 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:15.605777 26967 net.cpp:86] Creating Layer conv0
I0428 19:50:15.605794 26967 net.cpp:408] conv0 <- data
I0428 19:50:15.605805 26967 net.cpp:382] conv0 -> conv0
I0428 19:50:15.834951 26967 net.cpp:124] Setting up conv0
I0428 19:50:15.834992 26967 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:50:15.834997 26967 net.cpp:139] Memory required for data: 938240
I0428 19:50:15.835012 26967 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:15.835054 26967 net.cpp:86] Creating Layer pool0
I0428 19:50:15.835058 26967 net.cpp:408] pool0 <- conv0
I0428 19:50:15.835063 26967 net.cpp:382] pool0 -> pool0
I0428 19:50:15.835108 26967 net.cpp:124] Setting up pool0
I0428 19:50:15.835114 26967 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:50:15.835116 26967 net.cpp:139] Memory required for data: 1122560
I0428 19:50:15.835119 26967 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:15.835130 26967 net.cpp:86] Creating Layer conv1
I0428 19:50:15.835134 26967 net.cpp:408] conv1 <- pool0
I0428 19:50:15.835139 26967 net.cpp:382] conv1 -> conv1
I0428 19:50:15.837898 26967 net.cpp:124] Setting up conv1
I0428 19:50:15.837911 26967 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:50:15.837932 26967 net.cpp:139] Memory required for data: 1286400
I0428 19:50:15.837940 26967 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:15.837947 26967 net.cpp:86] Creating Layer pool1
I0428 19:50:15.837951 26967 net.cpp:408] pool1 <- conv1
I0428 19:50:15.837971 26967 net.cpp:382] pool1 -> pool1
I0428 19:50:15.838006 26967 net.cpp:124] Setting up pool1
I0428 19:50:15.838013 26967 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:50:15.838016 26967 net.cpp:139] Memory required for data: 1327360
I0428 19:50:15.838019 26967 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:15.838027 26967 net.cpp:86] Creating Layer ip1
I0428 19:50:15.838029 26967 net.cpp:408] ip1 <- pool1
I0428 19:50:15.838033 26967 net.cpp:382] ip1 -> ip1
I0428 19:50:15.838137 26967 net.cpp:124] Setting up ip1
I0428 19:50:15.838145 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.838147 26967 net.cpp:139] Memory required for data: 1329920
I0428 19:50:15.838155 26967 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:15.838160 26967 net.cpp:86] Creating Layer relu1
I0428 19:50:15.838162 26967 net.cpp:408] relu1 <- ip1
I0428 19:50:15.838167 26967 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:15.838321 26967 net.cpp:124] Setting up relu1
I0428 19:50:15.838330 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.838332 26967 net.cpp:139] Memory required for data: 1332480
I0428 19:50:15.838351 26967 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:15.838359 26967 net.cpp:86] Creating Layer ip2
I0428 19:50:15.838362 26967 net.cpp:408] ip2 <- ip1
I0428 19:50:15.838367 26967 net.cpp:382] ip2 -> ip2
I0428 19:50:15.838467 26967 net.cpp:124] Setting up ip2
I0428 19:50:15.838474 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.838476 26967 net.cpp:139] Memory required for data: 1335040
I0428 19:50:15.838481 26967 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:15.838486 26967 net.cpp:86] Creating Layer relu2
I0428 19:50:15.838490 26967 net.cpp:408] relu2 <- ip2
I0428 19:50:15.838493 26967 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:15.839215 26967 net.cpp:124] Setting up relu2
I0428 19:50:15.839228 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.839248 26967 net.cpp:139] Memory required for data: 1337600
I0428 19:50:15.839251 26967 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:15.839259 26967 net.cpp:86] Creating Layer ip3
I0428 19:50:15.839263 26967 net.cpp:408] ip3 <- ip2
I0428 19:50:15.839268 26967 net.cpp:382] ip3 -> ip3
I0428 19:50:15.839390 26967 net.cpp:124] Setting up ip3
I0428 19:50:15.839397 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.839401 26967 net.cpp:139] Memory required for data: 1340160
I0428 19:50:15.839407 26967 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:15.839412 26967 net.cpp:86] Creating Layer relu3
I0428 19:50:15.839416 26967 net.cpp:408] relu3 <- ip3
I0428 19:50:15.839421 26967 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:15.839570 26967 net.cpp:124] Setting up relu3
I0428 19:50:15.839579 26967 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:15.839582 26967 net.cpp:139] Memory required for data: 1342720
I0428 19:50:15.839586 26967 layer_factory.hpp:77] Creating layer loss
I0428 19:50:15.839591 26967 net.cpp:86] Creating Layer loss
I0428 19:50:15.839593 26967 net.cpp:408] loss <- ip3
I0428 19:50:15.839597 26967 net.cpp:408] loss <- label
I0428 19:50:15.839602 26967 net.cpp:382] loss -> loss
I0428 19:50:15.839615 26967 layer_factory.hpp:77] Creating layer loss
I0428 19:50:15.839840 26967 net.cpp:124] Setting up loss
I0428 19:50:15.839849 26967 net.cpp:131] Top shape: (1)
I0428 19:50:15.839853 26967 net.cpp:134]     with loss weight 1
I0428 19:50:15.839867 26967 net.cpp:139] Memory required for data: 1342724
I0428 19:50:15.839871 26967 net.cpp:200] loss needs backward computation.
I0428 19:50:15.839874 26967 net.cpp:200] relu3 needs backward computation.
I0428 19:50:15.839877 26967 net.cpp:200] ip3 needs backward computation.
I0428 19:50:15.839880 26967 net.cpp:200] relu2 needs backward computation.
I0428 19:50:15.839884 26967 net.cpp:200] ip2 needs backward computation.
I0428 19:50:15.839886 26967 net.cpp:200] relu1 needs backward computation.
I0428 19:50:15.839890 26967 net.cpp:200] ip1 needs backward computation.
I0428 19:50:15.839892 26967 net.cpp:200] pool1 needs backward computation.
I0428 19:50:15.839895 26967 net.cpp:200] conv1 needs backward computation.
I0428 19:50:15.839898 26967 net.cpp:200] pool0 needs backward computation.
I0428 19:50:15.839901 26967 net.cpp:200] conv0 needs backward computation.
I0428 19:50:15.839905 26967 net.cpp:202] mnist does not need backward computation.
I0428 19:50:15.839907 26967 net.cpp:244] This network produces output loss
I0428 19:50:15.839916 26967 net.cpp:257] Network initialization done.
I0428 19:50:15.840265 26967 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test599.prototxt
I0428 19:50:15.840323 26967 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:50:15.840415 26967 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:15.840497 26967 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:15.840538 26967 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:50:15.840554 26967 net.cpp:86] Creating Layer mnist
I0428 19:50:15.840559 26967 net.cpp:382] mnist -> data
I0428 19:50:15.840567 26967 net.cpp:382] mnist -> label
I0428 19:50:15.840677 26967 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:50:15.842620 26967 net.cpp:124] Setting up mnist
I0428 19:50:15.842665 26967 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:50:15.842670 26967 net.cpp:131] Top shape: 100 (100)
I0428 19:50:15.842674 26967 net.cpp:139] Memory required for data: 314000
I0428 19:50:15.842694 26967 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:50:15.842700 26967 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:50:15.842703 26967 net.cpp:408] label_mnist_1_split <- label
I0428 19:50:15.842708 26967 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:50:15.842715 26967 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:50:15.842838 26967 net.cpp:124] Setting up label_mnist_1_split
I0428 19:50:15.842845 26967 net.cpp:131] Top shape: 100 (100)
I0428 19:50:15.842849 26967 net.cpp:131] Top shape: 100 (100)
I0428 19:50:15.842852 26967 net.cpp:139] Memory required for data: 314800
I0428 19:50:15.842855 26967 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:15.842864 26967 net.cpp:86] Creating Layer conv0
I0428 19:50:15.842867 26967 net.cpp:408] conv0 <- data
I0428 19:50:15.842872 26967 net.cpp:382] conv0 -> conv0
I0428 19:50:15.844497 26967 net.cpp:124] Setting up conv0
I0428 19:50:15.844511 26967 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:50:15.844532 26967 net.cpp:139] Memory required for data: 1466800
I0428 19:50:15.844542 26967 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:15.844547 26967 net.cpp:86] Creating Layer pool0
I0428 19:50:15.844552 26967 net.cpp:408] pool0 <- conv0
I0428 19:50:15.844571 26967 net.cpp:382] pool0 -> pool0
I0428 19:50:15.844621 26967 net.cpp:124] Setting up pool0
I0428 19:50:15.844629 26967 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:50:15.844631 26967 net.cpp:139] Memory required for data: 1754800
I0428 19:50:15.844635 26967 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:15.844643 26967 net.cpp:86] Creating Layer conv1
I0428 19:50:15.844646 26967 net.cpp:408] conv1 <- pool0
I0428 19:50:15.844651 26967 net.cpp:382] conv1 -> conv1
I0428 19:50:15.846962 26967 net.cpp:124] Setting up conv1
I0428 19:50:15.846992 26967 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:50:15.846997 26967 net.cpp:139] Memory required for data: 2010800
I0428 19:50:15.847005 26967 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:15.847012 26967 net.cpp:86] Creating Layer pool1
I0428 19:50:15.847017 26967 net.cpp:408] pool1 <- conv1
I0428 19:50:15.847043 26967 net.cpp:382] pool1 -> pool1
I0428 19:50:15.847096 26967 net.cpp:124] Setting up pool1
I0428 19:50:15.847103 26967 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:50:15.847107 26967 net.cpp:139] Memory required for data: 2074800
I0428 19:50:15.847110 26967 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:15.847115 26967 net.cpp:86] Creating Layer ip1
I0428 19:50:15.847118 26967 net.cpp:408] ip1 <- pool1
I0428 19:50:15.847123 26967 net.cpp:382] ip1 -> ip1
I0428 19:50:15.847254 26967 net.cpp:124] Setting up ip1
I0428 19:50:15.847261 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.847275 26967 net.cpp:139] Memory required for data: 2078800
I0428 19:50:15.847282 26967 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:15.847288 26967 net.cpp:86] Creating Layer relu1
I0428 19:50:15.847291 26967 net.cpp:408] relu1 <- ip1
I0428 19:50:15.847295 26967 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:15.847468 26967 net.cpp:124] Setting up relu1
I0428 19:50:15.847478 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.847482 26967 net.cpp:139] Memory required for data: 2082800
I0428 19:50:15.847486 26967 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:15.847493 26967 net.cpp:86] Creating Layer ip2
I0428 19:50:15.847497 26967 net.cpp:408] ip2 <- ip1
I0428 19:50:15.847502 26967 net.cpp:382] ip2 -> ip2
I0428 19:50:15.847628 26967 net.cpp:124] Setting up ip2
I0428 19:50:15.847635 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.847638 26967 net.cpp:139] Memory required for data: 2086800
I0428 19:50:15.847643 26967 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:15.847648 26967 net.cpp:86] Creating Layer relu2
I0428 19:50:15.847652 26967 net.cpp:408] relu2 <- ip2
I0428 19:50:15.847656 26967 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:15.847821 26967 net.cpp:124] Setting up relu2
I0428 19:50:15.847831 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.847841 26967 net.cpp:139] Memory required for data: 2090800
I0428 19:50:15.847844 26967 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:15.847851 26967 net.cpp:86] Creating Layer ip3
I0428 19:50:15.847859 26967 net.cpp:408] ip3 <- ip2
I0428 19:50:15.847864 26967 net.cpp:382] ip3 -> ip3
I0428 19:50:15.847985 26967 net.cpp:124] Setting up ip3
I0428 19:50:15.847992 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.847996 26967 net.cpp:139] Memory required for data: 2094800
I0428 19:50:15.848004 26967 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:15.848009 26967 net.cpp:86] Creating Layer relu3
I0428 19:50:15.848012 26967 net.cpp:408] relu3 <- ip3
I0428 19:50:15.848016 26967 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:15.848877 26967 net.cpp:124] Setting up relu3
I0428 19:50:15.848892 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.848896 26967 net.cpp:139] Memory required for data: 2098800
I0428 19:50:15.848901 26967 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:50:15.848906 26967 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:50:15.848909 26967 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:50:15.848915 26967 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:50:15.848922 26967 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:50:15.848964 26967 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:50:15.848970 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.848974 26967 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:15.848978 26967 net.cpp:139] Memory required for data: 2106800
I0428 19:50:15.848980 26967 layer_factory.hpp:77] Creating layer accuracy
I0428 19:50:15.848992 26967 net.cpp:86] Creating Layer accuracy
I0428 19:50:15.848995 26967 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:50:15.849000 26967 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:50:15.849011 26967 net.cpp:382] accuracy -> accuracy
I0428 19:50:15.849019 26967 net.cpp:124] Setting up accuracy
I0428 19:50:15.849022 26967 net.cpp:131] Top shape: (1)
I0428 19:50:15.849025 26967 net.cpp:139] Memory required for data: 2106804
I0428 19:50:15.849028 26967 layer_factory.hpp:77] Creating layer loss
I0428 19:50:15.849033 26967 net.cpp:86] Creating Layer loss
I0428 19:50:15.849037 26967 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:50:15.849041 26967 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:50:15.849045 26967 net.cpp:382] loss -> loss
I0428 19:50:15.849052 26967 layer_factory.hpp:77] Creating layer loss
I0428 19:50:15.849294 26967 net.cpp:124] Setting up loss
I0428 19:50:15.849304 26967 net.cpp:131] Top shape: (1)
I0428 19:50:15.849309 26967 net.cpp:134]     with loss weight 1
I0428 19:50:15.849316 26967 net.cpp:139] Memory required for data: 2106808
I0428 19:50:15.849331 26967 net.cpp:200] loss needs backward computation.
I0428 19:50:15.849336 26967 net.cpp:202] accuracy does not need backward computation.
I0428 19:50:15.849340 26967 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:50:15.849344 26967 net.cpp:200] relu3 needs backward computation.
I0428 19:50:15.849354 26967 net.cpp:200] ip3 needs backward computation.
I0428 19:50:15.849357 26967 net.cpp:200] relu2 needs backward computation.
I0428 19:50:15.849360 26967 net.cpp:200] ip2 needs backward computation.
I0428 19:50:15.849364 26967 net.cpp:200] relu1 needs backward computation.
I0428 19:50:15.849366 26967 net.cpp:200] ip1 needs backward computation.
I0428 19:50:15.849370 26967 net.cpp:200] pool1 needs backward computation.
I0428 19:50:15.849373 26967 net.cpp:200] conv1 needs backward computation.
I0428 19:50:15.849377 26967 net.cpp:200] pool0 needs backward computation.
I0428 19:50:15.849380 26967 net.cpp:200] conv0 needs backward computation.
I0428 19:50:15.849385 26967 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:50:15.849390 26967 net.cpp:202] mnist does not need backward computation.
I0428 19:50:15.849392 26967 net.cpp:244] This network produces output accuracy
I0428 19:50:15.849396 26967 net.cpp:244] This network produces output loss
I0428 19:50:15.849422 26967 net.cpp:257] Network initialization done.
I0428 19:50:15.849476 26967 solver.cpp:56] Solver scaffolding done.
I0428 19:50:15.849851 26967 caffe.cpp:248] Starting Optimization
I0428 19:50:15.849858 26967 solver.cpp:273] Solving LeNet
I0428 19:50:15.849877 26967 solver.cpp:274] Learning Rate Policy: inv
I0428 19:50:15.850180 26967 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:50:15.853775 26967 blocking_queue.cpp:49] Waiting for data
I0428 19:50:15.924819 26974 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:15.925367 26967 solver.cpp:398]     Test net output #0: accuracy = 0.0985
I0428 19:50:15.925402 26967 solver.cpp:398]     Test net output #1: loss = 2.30828 (* 1 = 2.30828 loss)
I0428 19:50:15.927317 26967 solver.cpp:219] Iteration 0 (-1.06779e-42 iter/s, 0.0774154s/100 iters), loss = 2.32017
I0428 19:50:15.927356 26967 solver.cpp:238]     Train net output #0: loss = 2.32017 (* 1 = 2.32017 loss)
I0428 19:50:15.927367 26967 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:50:16.005556 26967 solver.cpp:219] Iteration 100 (1278.66 iter/s, 0.078207s/100 iters), loss = 1.1668
I0428 19:50:16.005579 26967 solver.cpp:238]     Train net output #0: loss = 1.1668 (* 1 = 1.1668 loss)
I0428 19:50:16.005586 26967 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:50:16.079450 26967 solver.cpp:219] Iteration 200 (1353.87 iter/s, 0.0738621s/100 iters), loss = 0.877213
I0428 19:50:16.079490 26967 solver.cpp:238]     Train net output #0: loss = 0.877213 (* 1 = 0.877213 loss)
I0428 19:50:16.079496 26967 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:50:16.153225 26967 solver.cpp:219] Iteration 300 (1356.34 iter/s, 0.073728s/100 iters), loss = 0.782137
I0428 19:50:16.153264 26967 solver.cpp:238]     Train net output #0: loss = 0.782137 (* 1 = 0.782137 loss)
I0428 19:50:16.153270 26967 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:50:16.227761 26967 solver.cpp:219] Iteration 400 (1342.22 iter/s, 0.0745032s/100 iters), loss = 1.17897
I0428 19:50:16.227798 26967 solver.cpp:238]     Train net output #0: loss = 1.17897 (* 1 = 1.17897 loss)
I0428 19:50:16.227804 26967 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:50:16.301635 26967 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:50:16.376348 26974 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:16.376863 26967 solver.cpp:398]     Test net output #0: accuracy = 0.7311
I0428 19:50:16.376898 26967 solver.cpp:398]     Test net output #1: loss = 0.889693 (* 1 = 0.889693 loss)
I0428 19:50:16.377755 26967 solver.cpp:219] Iteration 500 (666.846 iter/s, 0.14996s/100 iters), loss = 1.03279
I0428 19:50:16.377779 26967 solver.cpp:238]     Train net output #0: loss = 1.03279 (* 1 = 1.03279 loss)
I0428 19:50:16.377801 26967 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:50:16.459154 26967 solver.cpp:219] Iteration 600 (1229.01 iter/s, 0.081366s/100 iters), loss = 0.632334
I0428 19:50:16.459193 26967 solver.cpp:238]     Train net output #0: loss = 0.632334 (* 1 = 0.632334 loss)
I0428 19:50:16.459199 26967 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:50:16.537464 26967 solver.cpp:219] Iteration 700 (1277.5 iter/s, 0.0782778s/100 iters), loss = 0.993723
I0428 19:50:16.537504 26967 solver.cpp:238]     Train net output #0: loss = 0.993723 (* 1 = 0.993723 loss)
I0428 19:50:16.537510 26967 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:50:16.614995 26967 solver.cpp:219] Iteration 800 (1290.64 iter/s, 0.0774808s/100 iters), loss = 0.773125
I0428 19:50:16.615025 26967 solver.cpp:238]     Train net output #0: loss = 0.773125 (* 1 = 0.773125 loss)
I0428 19:50:16.615033 26967 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:50:16.696437 26967 solver.cpp:219] Iteration 900 (1228.47 iter/s, 0.0814019s/100 iters), loss = 0.554419
I0428 19:50:16.696472 26967 solver.cpp:238]     Train net output #0: loss = 0.554419 (* 1 = 0.554419 loss)
I0428 19:50:16.696480 26967 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:50:16.723264 26973 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:16.775503 26967 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:50:16.776255 26967 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:50:16.776723 26967 solver.cpp:311] Iteration 1000, loss = 0.806029
I0428 19:50:16.776744 26967 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:50:16.854941 26974 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:16.855623 26967 solver.cpp:398]     Test net output #0: accuracy = 0.7724
I0428 19:50:16.855650 26967 solver.cpp:398]     Test net output #1: loss = 0.787838 (* 1 = 0.787838 loss)
I0428 19:50:16.855659 26967 solver.cpp:316] Optimization Done.
I0428 19:50:16.855664 26967 caffe.cpp:259] Optimization Done.
