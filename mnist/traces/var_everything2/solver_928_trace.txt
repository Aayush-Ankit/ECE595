I0428 20:02:24.973986 29940 caffe.cpp:218] Using GPUs 0
I0428 20:02:25.012233 29940 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:25.525889 29940 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test928.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:25.526031 29940 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test928.prototxt
I0428 20:02:25.526458 29940 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:25.526477 29940 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:25.526582 29940 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:25.526664 29940 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:25.526762 29940 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:25.526787 29940 net.cpp:86] Creating Layer mnist
I0428 20:02:25.526794 29940 net.cpp:382] mnist -> data
I0428 20:02:25.526818 29940 net.cpp:382] mnist -> label
I0428 20:02:25.527915 29940 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:25.530390 29940 net.cpp:124] Setting up mnist
I0428 20:02:25.530407 29940 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:25.530431 29940 net.cpp:131] Top shape: 64 (64)
I0428 20:02:25.530433 29940 net.cpp:139] Memory required for data: 200960
I0428 20:02:25.530441 29940 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:25.530459 29940 net.cpp:86] Creating Layer conv0
I0428 20:02:25.530480 29940 net.cpp:408] conv0 <- data
I0428 20:02:25.530491 29940 net.cpp:382] conv0 -> conv0
I0428 20:02:25.810021 29940 net.cpp:124] Setting up conv0
I0428 20:02:25.810048 29940 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:25.810051 29940 net.cpp:139] Memory required for data: 1675520
I0428 20:02:25.810066 29940 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:25.810077 29940 net.cpp:86] Creating Layer pool0
I0428 20:02:25.810082 29940 net.cpp:408] pool0 <- conv0
I0428 20:02:25.810087 29940 net.cpp:382] pool0 -> pool0
I0428 20:02:25.810148 29940 net.cpp:124] Setting up pool0
I0428 20:02:25.810153 29940 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:25.810156 29940 net.cpp:139] Memory required for data: 2044160
I0428 20:02:25.810158 29940 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:25.810169 29940 net.cpp:86] Creating Layer conv1
I0428 20:02:25.810173 29940 net.cpp:408] conv1 <- pool0
I0428 20:02:25.810176 29940 net.cpp:382] conv1 -> conv1
I0428 20:02:25.813005 29940 net.cpp:124] Setting up conv1
I0428 20:02:25.813021 29940 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:25.813025 29940 net.cpp:139] Memory required for data: 2863360
I0428 20:02:25.813050 29940 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:25.813057 29940 net.cpp:86] Creating Layer pool1
I0428 20:02:25.813061 29940 net.cpp:408] pool1 <- conv1
I0428 20:02:25.813066 29940 net.cpp:382] pool1 -> pool1
I0428 20:02:25.813123 29940 net.cpp:124] Setting up pool1
I0428 20:02:25.813129 29940 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:25.813133 29940 net.cpp:139] Memory required for data: 3068160
I0428 20:02:25.813136 29940 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:25.813143 29940 net.cpp:86] Creating Layer ip1
I0428 20:02:25.813146 29940 net.cpp:408] ip1 <- pool1
I0428 20:02:25.813151 29940 net.cpp:382] ip1 -> ip1
I0428 20:02:25.813540 29940 net.cpp:124] Setting up ip1
I0428 20:02:25.813552 29940 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:25.813555 29940 net.cpp:139] Memory required for data: 3080960
I0428 20:02:25.813578 29940 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:25.813583 29940 net.cpp:86] Creating Layer relu1
I0428 20:02:25.813586 29940 net.cpp:408] relu1 <- ip1
I0428 20:02:25.813591 29940 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:25.813751 29940 net.cpp:124] Setting up relu1
I0428 20:02:25.813774 29940 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:02:25.813777 29940 net.cpp:139] Memory required for data: 3093760
I0428 20:02:25.813781 29940 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:25.813787 29940 net.cpp:86] Creating Layer ip2
I0428 20:02:25.813791 29940 net.cpp:408] ip2 <- ip1
I0428 20:02:25.813794 29940 net.cpp:382] ip2 -> ip2
I0428 20:02:25.813885 29940 net.cpp:124] Setting up ip2
I0428 20:02:25.813892 29940 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:25.813895 29940 net.cpp:139] Memory required for data: 3096320
I0428 20:02:25.813900 29940 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:25.813905 29940 net.cpp:86] Creating Layer relu2
I0428 20:02:25.813908 29940 net.cpp:408] relu2 <- ip2
I0428 20:02:25.813912 29940 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:25.814599 29940 net.cpp:124] Setting up relu2
I0428 20:02:25.814610 29940 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:25.814628 29940 net.cpp:139] Memory required for data: 3098880
I0428 20:02:25.814631 29940 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:25.814654 29940 net.cpp:86] Creating Layer ip3
I0428 20:02:25.814657 29940 net.cpp:408] ip3 <- ip2
I0428 20:02:25.814663 29940 net.cpp:382] ip3 -> ip3
I0428 20:02:25.814776 29940 net.cpp:124] Setting up ip3
I0428 20:02:25.814800 29940 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:25.814803 29940 net.cpp:139] Memory required for data: 3101440
I0428 20:02:25.814827 29940 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:25.814833 29940 net.cpp:86] Creating Layer relu3
I0428 20:02:25.814836 29940 net.cpp:408] relu3 <- ip3
I0428 20:02:25.814841 29940 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:25.815038 29940 net.cpp:124] Setting up relu3
I0428 20:02:25.815047 29940 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:25.815050 29940 net.cpp:139] Memory required for data: 3104000
I0428 20:02:25.815054 29940 layer_factory.hpp:77] Creating layer loss
I0428 20:02:25.815060 29940 net.cpp:86] Creating Layer loss
I0428 20:02:25.815063 29940 net.cpp:408] loss <- ip3
I0428 20:02:25.815068 29940 net.cpp:408] loss <- label
I0428 20:02:25.815073 29940 net.cpp:382] loss -> loss
I0428 20:02:25.815088 29940 layer_factory.hpp:77] Creating layer loss
I0428 20:02:25.815342 29940 net.cpp:124] Setting up loss
I0428 20:02:25.815351 29940 net.cpp:131] Top shape: (1)
I0428 20:02:25.815354 29940 net.cpp:134]     with loss weight 1
I0428 20:02:25.815367 29940 net.cpp:139] Memory required for data: 3104004
I0428 20:02:25.815371 29940 net.cpp:200] loss needs backward computation.
I0428 20:02:25.815374 29940 net.cpp:200] relu3 needs backward computation.
I0428 20:02:25.815377 29940 net.cpp:200] ip3 needs backward computation.
I0428 20:02:25.815381 29940 net.cpp:200] relu2 needs backward computation.
I0428 20:02:25.815399 29940 net.cpp:200] ip2 needs backward computation.
I0428 20:02:25.815402 29940 net.cpp:200] relu1 needs backward computation.
I0428 20:02:25.815404 29940 net.cpp:200] ip1 needs backward computation.
I0428 20:02:25.815407 29940 net.cpp:200] pool1 needs backward computation.
I0428 20:02:25.815410 29940 net.cpp:200] conv1 needs backward computation.
I0428 20:02:25.815413 29940 net.cpp:200] pool0 needs backward computation.
I0428 20:02:25.815418 29940 net.cpp:200] conv0 needs backward computation.
I0428 20:02:25.815421 29940 net.cpp:202] mnist does not need backward computation.
I0428 20:02:25.815423 29940 net.cpp:244] This network produces output loss
I0428 20:02:25.815433 29940 net.cpp:257] Network initialization done.
I0428 20:02:25.815812 29940 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test928.prototxt
I0428 20:02:25.815855 29940 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:25.815949 29940 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:25.816030 29940 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:25.816072 29940 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:25.816087 29940 net.cpp:86] Creating Layer mnist
I0428 20:02:25.816092 29940 net.cpp:382] mnist -> data
I0428 20:02:25.816099 29940 net.cpp:382] mnist -> label
I0428 20:02:25.816190 29940 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:25.818238 29940 net.cpp:124] Setting up mnist
I0428 20:02:25.818282 29940 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:25.818289 29940 net.cpp:131] Top shape: 100 (100)
I0428 20:02:25.818291 29940 net.cpp:139] Memory required for data: 314000
I0428 20:02:25.818295 29940 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:25.818301 29940 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:25.818306 29940 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:25.818311 29940 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:25.818318 29940 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:25.818446 29940 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:25.818455 29940 net.cpp:131] Top shape: 100 (100)
I0428 20:02:25.818459 29940 net.cpp:131] Top shape: 100 (100)
I0428 20:02:25.818462 29940 net.cpp:139] Memory required for data: 314800
I0428 20:02:25.818465 29940 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:25.818475 29940 net.cpp:86] Creating Layer conv0
I0428 20:02:25.818480 29940 net.cpp:408] conv0 <- data
I0428 20:02:25.818485 29940 net.cpp:382] conv0 -> conv0
I0428 20:02:25.820168 29940 net.cpp:124] Setting up conv0
I0428 20:02:25.820180 29940 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:25.820199 29940 net.cpp:139] Memory required for data: 2618800
I0428 20:02:25.820209 29940 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:25.820214 29940 net.cpp:86] Creating Layer pool0
I0428 20:02:25.820219 29940 net.cpp:408] pool0 <- conv0
I0428 20:02:25.820224 29940 net.cpp:382] pool0 -> pool0
I0428 20:02:25.820260 29940 net.cpp:124] Setting up pool0
I0428 20:02:25.820264 29940 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:25.820267 29940 net.cpp:139] Memory required for data: 3194800
I0428 20:02:25.820271 29940 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:25.820281 29940 net.cpp:86] Creating Layer conv1
I0428 20:02:25.820283 29940 net.cpp:408] conv1 <- pool0
I0428 20:02:25.820288 29940 net.cpp:382] conv1 -> conv1
I0428 20:02:25.822058 29940 net.cpp:124] Setting up conv1
I0428 20:02:25.822073 29940 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:25.822095 29940 net.cpp:139] Memory required for data: 4474800
I0428 20:02:25.822121 29940 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:25.822129 29940 net.cpp:86] Creating Layer pool1
I0428 20:02:25.822132 29940 net.cpp:408] pool1 <- conv1
I0428 20:02:25.822139 29940 net.cpp:382] pool1 -> pool1
I0428 20:02:25.822178 29940 net.cpp:124] Setting up pool1
I0428 20:02:25.822185 29940 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:25.822187 29940 net.cpp:139] Memory required for data: 4794800
I0428 20:02:25.822190 29940 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:25.822196 29940 net.cpp:86] Creating Layer ip1
I0428 20:02:25.822199 29940 net.cpp:408] ip1 <- pool1
I0428 20:02:25.822206 29940 net.cpp:382] ip1 -> ip1
I0428 20:02:25.822602 29940 net.cpp:124] Setting up ip1
I0428 20:02:25.822609 29940 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:25.822638 29940 net.cpp:139] Memory required for data: 4814800
I0428 20:02:25.822646 29940 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:25.822652 29940 net.cpp:86] Creating Layer relu1
I0428 20:02:25.822656 29940 net.cpp:408] relu1 <- ip1
I0428 20:02:25.822661 29940 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:25.822955 29940 net.cpp:124] Setting up relu1
I0428 20:02:25.822965 29940 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:02:25.822974 29940 net.cpp:139] Memory required for data: 4834800
I0428 20:02:25.822978 29940 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:25.823002 29940 net.cpp:86] Creating Layer ip2
I0428 20:02:25.823006 29940 net.cpp:408] ip2 <- ip1
I0428 20:02:25.823014 29940 net.cpp:382] ip2 -> ip2
I0428 20:02:25.823163 29940 net.cpp:124] Setting up ip2
I0428 20:02:25.823170 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.823174 29940 net.cpp:139] Memory required for data: 4838800
I0428 20:02:25.823180 29940 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:25.823186 29940 net.cpp:86] Creating Layer relu2
I0428 20:02:25.823189 29940 net.cpp:408] relu2 <- ip2
I0428 20:02:25.823194 29940 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:25.823395 29940 net.cpp:124] Setting up relu2
I0428 20:02:25.823403 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.823406 29940 net.cpp:139] Memory required for data: 4842800
I0428 20:02:25.823416 29940 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:25.823423 29940 net.cpp:86] Creating Layer ip3
I0428 20:02:25.823426 29940 net.cpp:408] ip3 <- ip2
I0428 20:02:25.823437 29940 net.cpp:382] ip3 -> ip3
I0428 20:02:25.823537 29940 net.cpp:124] Setting up ip3
I0428 20:02:25.823545 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.823549 29940 net.cpp:139] Memory required for data: 4846800
I0428 20:02:25.823555 29940 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:25.823560 29940 net.cpp:86] Creating Layer relu3
I0428 20:02:25.823563 29940 net.cpp:408] relu3 <- ip3
I0428 20:02:25.823567 29940 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:25.824426 29940 net.cpp:124] Setting up relu3
I0428 20:02:25.824455 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.824458 29940 net.cpp:139] Memory required for data: 4850800
I0428 20:02:25.824462 29940 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:25.824468 29940 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:25.824472 29940 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:25.824481 29940 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:25.824487 29940 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:25.824558 29940 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:25.824566 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.824570 29940 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:25.824573 29940 net.cpp:139] Memory required for data: 4858800
I0428 20:02:25.824575 29940 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:25.824581 29940 net.cpp:86] Creating Layer accuracy
I0428 20:02:25.824585 29940 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:25.824604 29940 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:25.824609 29940 net.cpp:382] accuracy -> accuracy
I0428 20:02:25.824616 29940 net.cpp:124] Setting up accuracy
I0428 20:02:25.824630 29940 net.cpp:131] Top shape: (1)
I0428 20:02:25.824632 29940 net.cpp:139] Memory required for data: 4858804
I0428 20:02:25.824635 29940 layer_factory.hpp:77] Creating layer loss
I0428 20:02:25.824641 29940 net.cpp:86] Creating Layer loss
I0428 20:02:25.824645 29940 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:25.824648 29940 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:25.824652 29940 net.cpp:382] loss -> loss
I0428 20:02:25.824658 29940 layer_factory.hpp:77] Creating layer loss
I0428 20:02:25.824926 29940 net.cpp:124] Setting up loss
I0428 20:02:25.824937 29940 net.cpp:131] Top shape: (1)
I0428 20:02:25.824940 29940 net.cpp:134]     with loss weight 1
I0428 20:02:25.824956 29940 net.cpp:139] Memory required for data: 4858808
I0428 20:02:25.824960 29940 net.cpp:200] loss needs backward computation.
I0428 20:02:25.824965 29940 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:25.824968 29940 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:25.824971 29940 net.cpp:200] relu3 needs backward computation.
I0428 20:02:25.824975 29940 net.cpp:200] ip3 needs backward computation.
I0428 20:02:25.824977 29940 net.cpp:200] relu2 needs backward computation.
I0428 20:02:25.824980 29940 net.cpp:200] ip2 needs backward computation.
I0428 20:02:25.824982 29940 net.cpp:200] relu1 needs backward computation.
I0428 20:02:25.824986 29940 net.cpp:200] ip1 needs backward computation.
I0428 20:02:25.824990 29940 net.cpp:200] pool1 needs backward computation.
I0428 20:02:25.825000 29940 net.cpp:200] conv1 needs backward computation.
I0428 20:02:25.825002 29940 net.cpp:200] pool0 needs backward computation.
I0428 20:02:25.825006 29940 net.cpp:200] conv0 needs backward computation.
I0428 20:02:25.825009 29940 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:25.825018 29940 net.cpp:202] mnist does not need backward computation.
I0428 20:02:25.825021 29940 net.cpp:244] This network produces output accuracy
I0428 20:02:25.825024 29940 net.cpp:244] This network produces output loss
I0428 20:02:25.825037 29940 net.cpp:257] Network initialization done.
I0428 20:02:25.825098 29940 solver.cpp:56] Solver scaffolding done.
I0428 20:02:25.825489 29940 caffe.cpp:248] Starting Optimization
I0428 20:02:25.825495 29940 solver.cpp:273] Solving LeNet
I0428 20:02:25.825498 29940 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:25.826350 29940 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:25.830647 29940 blocking_queue.cpp:49] Waiting for data
I0428 20:02:25.902775 29947 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:25.903338 29940 solver.cpp:398]     Test net output #0: accuracy = 0.0752
I0428 20:02:25.903374 29940 solver.cpp:398]     Test net output #1: loss = 2.31833 (* 1 = 2.31833 loss)
I0428 20:02:25.906658 29940 solver.cpp:219] Iteration 0 (-8.55349e-31 iter/s, 0.0811131s/100 iters), loss = 2.2994
I0428 20:02:25.906682 29940 solver.cpp:238]     Train net output #0: loss = 2.2994 (* 1 = 2.2994 loss)
I0428 20:02:25.906693 29940 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:26.018638 29940 solver.cpp:219] Iteration 100 (893.322 iter/s, 0.111942s/100 iters), loss = 1.40059
I0428 20:02:26.018692 29940 solver.cpp:238]     Train net output #0: loss = 1.40059 (* 1 = 1.40059 loss)
I0428 20:02:26.018697 29940 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:26.127254 29940 solver.cpp:219] Iteration 200 (921.216 iter/s, 0.108552s/100 iters), loss = 0.963271
I0428 20:02:26.127295 29940 solver.cpp:238]     Train net output #0: loss = 0.963271 (* 1 = 0.963271 loss)
I0428 20:02:26.127301 29940 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:26.234285 29940 solver.cpp:219] Iteration 300 (934.751 iter/s, 0.10698s/100 iters), loss = 0.762883
I0428 20:02:26.234325 29940 solver.cpp:238]     Train net output #0: loss = 0.762883 (* 1 = 0.762883 loss)
I0428 20:02:26.234331 29940 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:26.340219 29940 solver.cpp:219] Iteration 400 (944.305 iter/s, 0.105898s/100 iters), loss = 0.884582
I0428 20:02:26.340257 29940 solver.cpp:238]     Train net output #0: loss = 0.884582 (* 1 = 0.884582 loss)
I0428 20:02:26.340263 29940 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:26.447152 29940 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:26.500444 29947 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:26.500988 29940 solver.cpp:398]     Test net output #0: accuracy = 0.6635
I0428 20:02:26.501026 29940 solver.cpp:398]     Test net output #1: loss = 0.837003 (* 1 = 0.837003 loss)
I0428 20:02:26.502104 29940 solver.cpp:219] Iteration 500 (617.862 iter/s, 0.161848s/100 iters), loss = 0.869423
I0428 20:02:26.502161 29940 solver.cpp:238]     Train net output #0: loss = 0.869423 (* 1 = 0.869423 loss)
I0428 20:02:26.502167 29940 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:26.616063 29940 solver.cpp:219] Iteration 600 (878.005 iter/s, 0.113895s/100 iters), loss = 0.705388
I0428 20:02:26.616120 29940 solver.cpp:238]     Train net output #0: loss = 0.705388 (* 1 = 0.705388 loss)
I0428 20:02:26.616142 29940 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:26.724982 29940 solver.cpp:219] Iteration 700 (918.693 iter/s, 0.10885s/100 iters), loss = 0.893766
I0428 20:02:26.725009 29940 solver.cpp:238]     Train net output #0: loss = 0.893766 (* 1 = 0.893766 loss)
I0428 20:02:26.725016 29940 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:26.833627 29940 solver.cpp:219] Iteration 800 (920.749 iter/s, 0.108607s/100 iters), loss = 0.775778
I0428 20:02:26.833672 29940 solver.cpp:238]     Train net output #0: loss = 0.775778 (* 1 = 0.775778 loss)
I0428 20:02:26.833678 29940 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:26.940136 29940 solver.cpp:219] Iteration 900 (939.364 iter/s, 0.106455s/100 iters), loss = 0.857912
I0428 20:02:26.940176 29940 solver.cpp:238]     Train net output #0: loss = 0.857912 (* 1 = 0.857912 loss)
I0428 20:02:26.940182 29940 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:26.975708 29946 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:27.045536 29940 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:27.047262 29940 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:27.048178 29940 solver.cpp:311] Iteration 1000, loss = 0.752557
I0428 20:02:27.048192 29940 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:27.122232 29947 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:27.122779 29940 solver.cpp:398]     Test net output #0: accuracy = 0.6736
I0428 20:02:27.122813 29940 solver.cpp:398]     Test net output #1: loss = 0.789603 (* 1 = 0.789603 loss)
I0428 20:02:27.122819 29940 solver.cpp:316] Optimization Done.
I0428 20:02:27.122822 29940 caffe.cpp:259] Optimization Done.
