I0428 19:56:09.991461 28368 caffe.cpp:218] Using GPUs 0
I0428 19:56:10.022042 28368 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:10.487843 28368 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test751.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:10.488010 28368 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test751.prototxt
I0428 19:56:10.488543 28368 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:10.488584 28368 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:10.488708 28368 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:10.488839 28368 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:10.488984 28368 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:10.489024 28368 net.cpp:86] Creating Layer mnist
I0428 19:56:10.489035 28368 net.cpp:382] mnist -> data
I0428 19:56:10.489073 28368 net.cpp:382] mnist -> label
I0428 19:56:10.490546 28368 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:10.493846 28368 net.cpp:124] Setting up mnist
I0428 19:56:10.493887 28368 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:10.493896 28368 net.cpp:131] Top shape: 64 (64)
I0428 19:56:10.493901 28368 net.cpp:139] Memory required for data: 200960
I0428 19:56:10.493911 28368 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:10.493933 28368 net.cpp:86] Creating Layer conv0
I0428 19:56:10.493940 28368 net.cpp:408] conv0 <- data
I0428 19:56:10.493957 28368 net.cpp:382] conv0 -> conv0
I0428 19:56:10.792721 28368 net.cpp:124] Setting up conv0
I0428 19:56:10.792760 28368 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:10.792764 28368 net.cpp:139] Memory required for data: 1675520
I0428 19:56:10.792804 28368 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:10.792834 28368 net.cpp:86] Creating Layer pool0
I0428 19:56:10.792840 28368 net.cpp:408] pool0 <- conv0
I0428 19:56:10.792845 28368 net.cpp:382] pool0 -> pool0
I0428 19:56:10.792901 28368 net.cpp:124] Setting up pool0
I0428 19:56:10.792913 28368 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:10.792917 28368 net.cpp:139] Memory required for data: 2044160
I0428 19:56:10.792922 28368 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:10.792933 28368 net.cpp:86] Creating Layer conv1
I0428 19:56:10.792937 28368 net.cpp:408] conv1 <- pool0
I0428 19:56:10.792943 28368 net.cpp:382] conv1 -> conv1
I0428 19:56:10.795096 28368 net.cpp:124] Setting up conv1
I0428 19:56:10.795112 28368 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:10.795117 28368 net.cpp:139] Memory required for data: 2076928
I0428 19:56:10.795126 28368 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:10.795135 28368 net.cpp:86] Creating Layer pool1
I0428 19:56:10.795140 28368 net.cpp:408] pool1 <- conv1
I0428 19:56:10.795145 28368 net.cpp:382] pool1 -> pool1
I0428 19:56:10.795189 28368 net.cpp:124] Setting up pool1
I0428 19:56:10.795197 28368 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:10.795199 28368 net.cpp:139] Memory required for data: 2085120
I0428 19:56:10.795203 28368 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:10.795212 28368 net.cpp:86] Creating Layer ip1
I0428 19:56:10.795215 28368 net.cpp:408] ip1 <- pool1
I0428 19:56:10.795220 28368 net.cpp:382] ip1 -> ip1
I0428 19:56:10.796319 28368 net.cpp:124] Setting up ip1
I0428 19:56:10.796334 28368 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:10.796337 28368 net.cpp:139] Memory required for data: 2097920
I0428 19:56:10.796346 28368 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:10.796353 28368 net.cpp:86] Creating Layer relu1
I0428 19:56:10.796357 28368 net.cpp:408] relu1 <- ip1
I0428 19:56:10.796363 28368 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:10.796568 28368 net.cpp:124] Setting up relu1
I0428 19:56:10.796578 28368 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:10.796582 28368 net.cpp:139] Memory required for data: 2110720
I0428 19:56:10.796586 28368 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:10.796593 28368 net.cpp:86] Creating Layer ip2
I0428 19:56:10.796597 28368 net.cpp:408] ip2 <- ip1
I0428 19:56:10.796603 28368 net.cpp:382] ip2 -> ip2
I0428 19:56:10.796721 28368 net.cpp:124] Setting up ip2
I0428 19:56:10.796730 28368 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:10.796733 28368 net.cpp:139] Memory required for data: 2113280
I0428 19:56:10.796739 28368 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:10.796746 28368 net.cpp:86] Creating Layer relu2
I0428 19:56:10.796751 28368 net.cpp:408] relu2 <- ip2
I0428 19:56:10.796756 28368 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:10.797608 28368 net.cpp:124] Setting up relu2
I0428 19:56:10.797622 28368 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:10.797627 28368 net.cpp:139] Memory required for data: 2115840
I0428 19:56:10.797631 28368 layer_factory.hpp:77] Creating layer loss
I0428 19:56:10.797637 28368 net.cpp:86] Creating Layer loss
I0428 19:56:10.797641 28368 net.cpp:408] loss <- ip2
I0428 19:56:10.797646 28368 net.cpp:408] loss <- label
I0428 19:56:10.797662 28368 net.cpp:382] loss -> loss
I0428 19:56:10.797680 28368 layer_factory.hpp:77] Creating layer loss
I0428 19:56:10.797953 28368 net.cpp:124] Setting up loss
I0428 19:56:10.797966 28368 net.cpp:131] Top shape: (1)
I0428 19:56:10.797969 28368 net.cpp:134]     with loss weight 1
I0428 19:56:10.797986 28368 net.cpp:139] Memory required for data: 2115844
I0428 19:56:10.797991 28368 net.cpp:200] loss needs backward computation.
I0428 19:56:10.797994 28368 net.cpp:200] relu2 needs backward computation.
I0428 19:56:10.797997 28368 net.cpp:200] ip2 needs backward computation.
I0428 19:56:10.798002 28368 net.cpp:200] relu1 needs backward computation.
I0428 19:56:10.798004 28368 net.cpp:200] ip1 needs backward computation.
I0428 19:56:10.798020 28368 net.cpp:200] pool1 needs backward computation.
I0428 19:56:10.798024 28368 net.cpp:200] conv1 needs backward computation.
I0428 19:56:10.798028 28368 net.cpp:200] pool0 needs backward computation.
I0428 19:56:10.798032 28368 net.cpp:200] conv0 needs backward computation.
I0428 19:56:10.798038 28368 net.cpp:202] mnist does not need backward computation.
I0428 19:56:10.798040 28368 net.cpp:244] This network produces output loss
I0428 19:56:10.798050 28368 net.cpp:257] Network initialization done.
I0428 19:56:10.798388 28368 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test751.prototxt
I0428 19:56:10.798416 28368 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:10.798513 28368 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:10.798586 28368 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:10.798636 28368 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:10.798650 28368 net.cpp:86] Creating Layer mnist
I0428 19:56:10.798655 28368 net.cpp:382] mnist -> data
I0428 19:56:10.798662 28368 net.cpp:382] mnist -> label
I0428 19:56:10.798763 28368 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:10.800948 28368 net.cpp:124] Setting up mnist
I0428 19:56:10.800963 28368 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:10.800978 28368 net.cpp:131] Top shape: 100 (100)
I0428 19:56:10.800982 28368 net.cpp:139] Memory required for data: 314000
I0428 19:56:10.800987 28368 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:10.800994 28368 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:10.800998 28368 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:10.801004 28368 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:10.801012 28368 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:10.801070 28368 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:10.801090 28368 net.cpp:131] Top shape: 100 (100)
I0428 19:56:10.801093 28368 net.cpp:131] Top shape: 100 (100)
I0428 19:56:10.801097 28368 net.cpp:139] Memory required for data: 314800
I0428 19:56:10.801100 28368 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:10.801110 28368 net.cpp:86] Creating Layer conv0
I0428 19:56:10.801115 28368 net.cpp:408] conv0 <- data
I0428 19:56:10.801120 28368 net.cpp:382] conv0 -> conv0
I0428 19:56:10.802764 28368 net.cpp:124] Setting up conv0
I0428 19:56:10.802780 28368 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:10.802798 28368 net.cpp:139] Memory required for data: 2618800
I0428 19:56:10.802809 28368 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:10.802817 28368 net.cpp:86] Creating Layer pool0
I0428 19:56:10.802821 28368 net.cpp:408] pool0 <- conv0
I0428 19:56:10.802827 28368 net.cpp:382] pool0 -> pool0
I0428 19:56:10.802870 28368 net.cpp:124] Setting up pool0
I0428 19:56:10.802876 28368 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:10.802881 28368 net.cpp:139] Memory required for data: 3194800
I0428 19:56:10.802884 28368 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:10.802894 28368 net.cpp:86] Creating Layer conv1
I0428 19:56:10.802898 28368 net.cpp:408] conv1 <- pool0
I0428 19:56:10.802904 28368 net.cpp:382] conv1 -> conv1
I0428 19:56:10.805241 28368 net.cpp:124] Setting up conv1
I0428 19:56:10.805256 28368 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:10.805271 28368 net.cpp:139] Memory required for data: 3246000
I0428 19:56:10.805281 28368 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:10.805289 28368 net.cpp:86] Creating Layer pool1
I0428 19:56:10.805294 28368 net.cpp:408] pool1 <- conv1
I0428 19:56:10.805300 28368 net.cpp:382] pool1 -> pool1
I0428 19:56:10.805392 28368 net.cpp:124] Setting up pool1
I0428 19:56:10.805403 28368 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:10.805408 28368 net.cpp:139] Memory required for data: 3258800
I0428 19:56:10.805413 28368 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:10.805420 28368 net.cpp:86] Creating Layer ip1
I0428 19:56:10.805424 28368 net.cpp:408] ip1 <- pool1
I0428 19:56:10.805433 28368 net.cpp:382] ip1 -> ip1
I0428 19:56:10.805567 28368 net.cpp:124] Setting up ip1
I0428 19:56:10.805578 28368 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:10.805583 28368 net.cpp:139] Memory required for data: 3278800
I0428 19:56:10.805590 28368 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:10.805598 28368 net.cpp:86] Creating Layer relu1
I0428 19:56:10.805603 28368 net.cpp:408] relu1 <- ip1
I0428 19:56:10.805609 28368 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:10.805836 28368 net.cpp:124] Setting up relu1
I0428 19:56:10.805846 28368 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:10.805850 28368 net.cpp:139] Memory required for data: 3298800
I0428 19:56:10.805853 28368 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:10.805862 28368 net.cpp:86] Creating Layer ip2
I0428 19:56:10.805866 28368 net.cpp:408] ip2 <- ip1
I0428 19:56:10.805872 28368 net.cpp:382] ip2 -> ip2
I0428 19:56:10.806004 28368 net.cpp:124] Setting up ip2
I0428 19:56:10.806011 28368 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:10.806015 28368 net.cpp:139] Memory required for data: 3302800
I0428 19:56:10.806021 28368 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:10.806027 28368 net.cpp:86] Creating Layer relu2
I0428 19:56:10.806030 28368 net.cpp:408] relu2 <- ip2
I0428 19:56:10.806036 28368 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:10.806236 28368 net.cpp:124] Setting up relu2
I0428 19:56:10.806244 28368 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:10.806248 28368 net.cpp:139] Memory required for data: 3306800
I0428 19:56:10.806252 28368 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:56:10.806257 28368 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:56:10.806260 28368 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:56:10.806267 28368 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:56:10.806285 28368 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:56:10.806329 28368 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:56:10.806337 28368 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:10.806341 28368 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:10.806345 28368 net.cpp:139] Memory required for data: 3314800
I0428 19:56:10.806349 28368 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:10.806354 28368 net.cpp:86] Creating Layer accuracy
I0428 19:56:10.806358 28368 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:56:10.806363 28368 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:10.806368 28368 net.cpp:382] accuracy -> accuracy
I0428 19:56:10.806375 28368 net.cpp:124] Setting up accuracy
I0428 19:56:10.806380 28368 net.cpp:131] Top shape: (1)
I0428 19:56:10.806383 28368 net.cpp:139] Memory required for data: 3314804
I0428 19:56:10.806386 28368 layer_factory.hpp:77] Creating layer loss
I0428 19:56:10.806393 28368 net.cpp:86] Creating Layer loss
I0428 19:56:10.806397 28368 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:56:10.806401 28368 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:10.806406 28368 net.cpp:382] loss -> loss
I0428 19:56:10.806412 28368 layer_factory.hpp:77] Creating layer loss
I0428 19:56:10.806690 28368 net.cpp:124] Setting up loss
I0428 19:56:10.806700 28368 net.cpp:131] Top shape: (1)
I0428 19:56:10.806704 28368 net.cpp:134]     with loss weight 1
I0428 19:56:10.806710 28368 net.cpp:139] Memory required for data: 3314808
I0428 19:56:10.806715 28368 net.cpp:200] loss needs backward computation.
I0428 19:56:10.806718 28368 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:10.806723 28368 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:56:10.806726 28368 net.cpp:200] relu2 needs backward computation.
I0428 19:56:10.806730 28368 net.cpp:200] ip2 needs backward computation.
I0428 19:56:10.806733 28368 net.cpp:200] relu1 needs backward computation.
I0428 19:56:10.806736 28368 net.cpp:200] ip1 needs backward computation.
I0428 19:56:10.806740 28368 net.cpp:200] pool1 needs backward computation.
I0428 19:56:10.806742 28368 net.cpp:200] conv1 needs backward computation.
I0428 19:56:10.806747 28368 net.cpp:200] pool0 needs backward computation.
I0428 19:56:10.806751 28368 net.cpp:200] conv0 needs backward computation.
I0428 19:56:10.806754 28368 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:10.806761 28368 net.cpp:202] mnist does not need backward computation.
I0428 19:56:10.806763 28368 net.cpp:244] This network produces output accuracy
I0428 19:56:10.806767 28368 net.cpp:244] This network produces output loss
I0428 19:56:10.806779 28368 net.cpp:257] Network initialization done.
I0428 19:56:10.806823 28368 solver.cpp:56] Solver scaffolding done.
I0428 19:56:10.807138 28368 caffe.cpp:248] Starting Optimization
I0428 19:56:10.807145 28368 solver.cpp:273] Solving LeNet
I0428 19:56:10.807148 28368 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:10.807991 28368 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:10.817248 28368 blocking_queue.cpp:49] Waiting for data
I0428 19:56:10.854547 28375 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:10.855057 28368 solver.cpp:398]     Test net output #0: accuracy = 0.103
I0428 19:56:10.855092 28368 solver.cpp:398]     Test net output #1: loss = 2.3442 (* 1 = 2.3442 loss)
I0428 19:56:10.857650 28368 solver.cpp:219] Iteration 0 (0 iter/s, 0.0504658s/100 iters), loss = 2.31762
I0428 19:56:10.857688 28368 solver.cpp:238]     Train net output #0: loss = 2.31762 (* 1 = 2.31762 loss)
I0428 19:56:10.857702 28368 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:10.928488 28368 solver.cpp:219] Iteration 100 (1412.79 iter/s, 0.070782s/100 iters), loss = 1.10554
I0428 19:56:10.928529 28368 solver.cpp:238]     Train net output #0: loss = 1.10554 (* 1 = 1.10554 loss)
I0428 19:56:10.928535 28368 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:10.996827 28368 solver.cpp:219] Iteration 200 (1464.35 iter/s, 0.0682896s/100 iters), loss = 1.37356
I0428 19:56:10.996881 28368 solver.cpp:238]     Train net output #0: loss = 1.37356 (* 1 = 1.37356 loss)
I0428 19:56:10.996888 28368 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:11.066650 28368 solver.cpp:219] Iteration 300 (1433.24 iter/s, 0.0697721s/100 iters), loss = 1.02171
I0428 19:56:11.066689 28368 solver.cpp:238]     Train net output #0: loss = 1.02171 (* 1 = 1.02171 loss)
I0428 19:56:11.066697 28368 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:11.136281 28368 solver.cpp:219] Iteration 400 (1436.92 iter/s, 0.0695932s/100 iters), loss = 1.22167
I0428 19:56:11.136310 28368 solver.cpp:238]     Train net output #0: loss = 1.22167 (* 1 = 1.22167 loss)
I0428 19:56:11.136320 28368 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:11.204710 28368 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:11.278900 28375 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:11.279397 28368 solver.cpp:398]     Test net output #0: accuracy = 0.5543
I0428 19:56:11.279417 28368 solver.cpp:398]     Test net output #1: loss = 1.13522 (* 1 = 1.13522 loss)
I0428 19:56:11.280174 28368 solver.cpp:219] Iteration 500 (695.161 iter/s, 0.143852s/100 iters), loss = 1.26534
I0428 19:56:11.280199 28368 solver.cpp:238]     Train net output #0: loss = 1.26534 (* 1 = 1.26534 loss)
I0428 19:56:11.280208 28368 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:11.348937 28368 solver.cpp:219] Iteration 600 (1454.97 iter/s, 0.0687299s/100 iters), loss = 1.22243
I0428 19:56:11.348963 28368 solver.cpp:238]     Train net output #0: loss = 1.22243 (* 1 = 1.22243 loss)
I0428 19:56:11.348970 28368 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:11.414676 28368 solver.cpp:219] Iteration 700 (1521.94 iter/s, 0.0657058s/100 iters), loss = 0.816455
I0428 19:56:11.414700 28368 solver.cpp:238]     Train net output #0: loss = 0.816455 (* 1 = 0.816455 loss)
I0428 19:56:11.414705 28368 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:11.481578 28368 solver.cpp:219] Iteration 800 (1495.43 iter/s, 0.0668704s/100 iters), loss = 1.18607
I0428 19:56:11.481616 28368 solver.cpp:238]     Train net output #0: loss = 1.18607 (* 1 = 1.18607 loss)
I0428 19:56:11.481622 28368 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:11.549048 28368 solver.cpp:219] Iteration 900 (1482.83 iter/s, 0.0674386s/100 iters), loss = 1.33097
I0428 19:56:11.549088 28368 solver.cpp:238]     Train net output #0: loss = 1.33097 (* 1 = 1.33097 loss)
I0428 19:56:11.549094 28368 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:11.571974 28374 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:11.616134 28368 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:11.616793 28368 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:11.617282 28368 solver.cpp:311] Iteration 1000, loss = 0.898772
I0428 19:56:11.617311 28368 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:11.693155 28375 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:11.693737 28368 solver.cpp:398]     Test net output #0: accuracy = 0.5629
I0428 19:56:11.693765 28368 solver.cpp:398]     Test net output #1: loss = 1.08867 (* 1 = 1.08867 loss)
I0428 19:56:11.693778 28368 solver.cpp:316] Optimization Done.
I0428 19:56:11.693786 28368 caffe.cpp:259] Optimization Done.
