I0428 20:36:44.635706  4842 caffe.cpp:218] Using GPUs 0
I0428 20:36:44.673662  4842 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:45.187361  4842 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1641.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:45.187505  4842 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1641.prototxt
I0428 20:36:45.187883  4842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:45.187901  4842 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:45.187993  4842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:45.188072  4842 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:45.188170  4842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:45.188194  4842 net.cpp:86] Creating Layer mnist
I0428 20:36:45.188204  4842 net.cpp:382] mnist -> data
I0428 20:36:45.188225  4842 net.cpp:382] mnist -> label
I0428 20:36:45.189330  4842 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:45.191776  4842 net.cpp:124] Setting up mnist
I0428 20:36:45.191793  4842 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:45.191799  4842 net.cpp:131] Top shape: 64 (64)
I0428 20:36:45.191802  4842 net.cpp:139] Memory required for data: 200960
I0428 20:36:45.191809  4842 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:45.191840  4842 net.cpp:86] Creating Layer conv0
I0428 20:36:45.191846  4842 net.cpp:408] conv0 <- data
I0428 20:36:45.191859  4842 net.cpp:382] conv0 -> conv0
I0428 20:36:45.478093  4842 net.cpp:124] Setting up conv0
I0428 20:36:45.478121  4842 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:45.478124  4842 net.cpp:139] Memory required for data: 14946560
I0428 20:36:45.478159  4842 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:45.478173  4842 net.cpp:86] Creating Layer pool0
I0428 20:36:45.478176  4842 net.cpp:408] pool0 <- conv0
I0428 20:36:45.478183  4842 net.cpp:382] pool0 -> pool0
I0428 20:36:45.478230  4842 net.cpp:124] Setting up pool0
I0428 20:36:45.478236  4842 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:45.478240  4842 net.cpp:139] Memory required for data: 18632960
I0428 20:36:45.478242  4842 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:45.478253  4842 net.cpp:86] Creating Layer conv1
I0428 20:36:45.478256  4842 net.cpp:408] conv1 <- pool0
I0428 20:36:45.478261  4842 net.cpp:382] conv1 -> conv1
I0428 20:36:45.482246  4842 net.cpp:124] Setting up conv1
I0428 20:36:45.482261  4842 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:45.482264  4842 net.cpp:139] Memory required for data: 20271360
I0428 20:36:45.482273  4842 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:45.482280  4842 net.cpp:86] Creating Layer pool1
I0428 20:36:45.482283  4842 net.cpp:408] pool1 <- conv1
I0428 20:36:45.482288  4842 net.cpp:382] pool1 -> pool1
I0428 20:36:45.482324  4842 net.cpp:124] Setting up pool1
I0428 20:36:45.482331  4842 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:45.482333  4842 net.cpp:139] Memory required for data: 20680960
I0428 20:36:45.482336  4842 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:45.482342  4842 net.cpp:86] Creating Layer ip1
I0428 20:36:45.482345  4842 net.cpp:408] ip1 <- pool1
I0428 20:36:45.482350  4842 net.cpp:382] ip1 -> ip1
I0428 20:36:45.483343  4842 net.cpp:124] Setting up ip1
I0428 20:36:45.483355  4842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:45.483359  4842 net.cpp:139] Memory required for data: 20683520
I0428 20:36:45.483367  4842 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:45.483372  4842 net.cpp:86] Creating Layer relu1
I0428 20:36:45.483376  4842 net.cpp:408] relu1 <- ip1
I0428 20:36:45.483381  4842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:45.483547  4842 net.cpp:124] Setting up relu1
I0428 20:36:45.483556  4842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:45.483559  4842 net.cpp:139] Memory required for data: 20686080
I0428 20:36:45.483563  4842 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:45.483569  4842 net.cpp:86] Creating Layer ip2
I0428 20:36:45.483572  4842 net.cpp:408] ip2 <- ip1
I0428 20:36:45.483577  4842 net.cpp:382] ip2 -> ip2
I0428 20:36:45.483666  4842 net.cpp:124] Setting up ip2
I0428 20:36:45.483674  4842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:45.483676  4842 net.cpp:139] Memory required for data: 20688640
I0428 20:36:45.483682  4842 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:45.483687  4842 net.cpp:86] Creating Layer relu2
I0428 20:36:45.483690  4842 net.cpp:408] relu2 <- ip2
I0428 20:36:45.483695  4842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:45.484400  4842 net.cpp:124] Setting up relu2
I0428 20:36:45.484424  4842 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:45.484428  4842 net.cpp:139] Memory required for data: 20691200
I0428 20:36:45.484431  4842 layer_factory.hpp:77] Creating layer loss
I0428 20:36:45.484438  4842 net.cpp:86] Creating Layer loss
I0428 20:36:45.484441  4842 net.cpp:408] loss <- ip2
I0428 20:36:45.484447  4842 net.cpp:408] loss <- label
I0428 20:36:45.484452  4842 net.cpp:382] loss -> loss
I0428 20:36:45.484467  4842 layer_factory.hpp:77] Creating layer loss
I0428 20:36:45.484707  4842 net.cpp:124] Setting up loss
I0428 20:36:45.484717  4842 net.cpp:131] Top shape: (1)
I0428 20:36:45.484720  4842 net.cpp:134]     with loss weight 1
I0428 20:36:45.484733  4842 net.cpp:139] Memory required for data: 20691204
I0428 20:36:45.484737  4842 net.cpp:200] loss needs backward computation.
I0428 20:36:45.484740  4842 net.cpp:200] relu2 needs backward computation.
I0428 20:36:45.484743  4842 net.cpp:200] ip2 needs backward computation.
I0428 20:36:45.484746  4842 net.cpp:200] relu1 needs backward computation.
I0428 20:36:45.484750  4842 net.cpp:200] ip1 needs backward computation.
I0428 20:36:45.484762  4842 net.cpp:200] pool1 needs backward computation.
I0428 20:36:45.484766  4842 net.cpp:200] conv1 needs backward computation.
I0428 20:36:45.484768  4842 net.cpp:200] pool0 needs backward computation.
I0428 20:36:45.484771  4842 net.cpp:200] conv0 needs backward computation.
I0428 20:36:45.484774  4842 net.cpp:202] mnist does not need backward computation.
I0428 20:36:45.484777  4842 net.cpp:244] This network produces output loss
I0428 20:36:45.484786  4842 net.cpp:257] Network initialization done.
I0428 20:36:45.485126  4842 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1641.prototxt
I0428 20:36:45.485188  4842 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:45.485298  4842 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:45.485358  4842 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:45.485401  4842 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:45.485414  4842 net.cpp:86] Creating Layer mnist
I0428 20:36:45.485417  4842 net.cpp:382] mnist -> data
I0428 20:36:45.485424  4842 net.cpp:382] mnist -> label
I0428 20:36:45.485553  4842 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:45.487558  4842 net.cpp:124] Setting up mnist
I0428 20:36:45.487586  4842 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:45.487607  4842 net.cpp:131] Top shape: 100 (100)
I0428 20:36:45.487610  4842 net.cpp:139] Memory required for data: 314000
I0428 20:36:45.487614  4842 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:45.487622  4842 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:45.487624  4842 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:45.487629  4842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:45.487637  4842 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:45.487689  4842 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:45.487695  4842 net.cpp:131] Top shape: 100 (100)
I0428 20:36:45.487699  4842 net.cpp:131] Top shape: 100 (100)
I0428 20:36:45.487701  4842 net.cpp:139] Memory required for data: 314800
I0428 20:36:45.487705  4842 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:45.487713  4842 net.cpp:86] Creating Layer conv0
I0428 20:36:45.487716  4842 net.cpp:408] conv0 <- data
I0428 20:36:45.487721  4842 net.cpp:382] conv0 -> conv0
I0428 20:36:45.489622  4842 net.cpp:124] Setting up conv0
I0428 20:36:45.489635  4842 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:45.489639  4842 net.cpp:139] Memory required for data: 23354800
I0428 20:36:45.489663  4842 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:45.489670  4842 net.cpp:86] Creating Layer pool0
I0428 20:36:45.489673  4842 net.cpp:408] pool0 <- conv0
I0428 20:36:45.489677  4842 net.cpp:382] pool0 -> pool0
I0428 20:36:45.489712  4842 net.cpp:124] Setting up pool0
I0428 20:36:45.489717  4842 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:45.489720  4842 net.cpp:139] Memory required for data: 29114800
I0428 20:36:45.489723  4842 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:45.489732  4842 net.cpp:86] Creating Layer conv1
I0428 20:36:45.489734  4842 net.cpp:408] conv1 <- pool0
I0428 20:36:45.489739  4842 net.cpp:382] conv1 -> conv1
I0428 20:36:45.492656  4842 net.cpp:124] Setting up conv1
I0428 20:36:45.492669  4842 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:45.492672  4842 net.cpp:139] Memory required for data: 31674800
I0428 20:36:45.492681  4842 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:45.492686  4842 net.cpp:86] Creating Layer pool1
I0428 20:36:45.492689  4842 net.cpp:408] pool1 <- conv1
I0428 20:36:45.492694  4842 net.cpp:382] pool1 -> pool1
I0428 20:36:45.492758  4842 net.cpp:124] Setting up pool1
I0428 20:36:45.492763  4842 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:45.492766  4842 net.cpp:139] Memory required for data: 32314800
I0428 20:36:45.492769  4842 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:45.492775  4842 net.cpp:86] Creating Layer ip1
I0428 20:36:45.492779  4842 net.cpp:408] ip1 <- pool1
I0428 20:36:45.492789  4842 net.cpp:382] ip1 -> ip1
I0428 20:36:45.492990  4842 net.cpp:124] Setting up ip1
I0428 20:36:45.493000  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493002  4842 net.cpp:139] Memory required for data: 32318800
I0428 20:36:45.493010  4842 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:45.493016  4842 net.cpp:86] Creating Layer relu1
I0428 20:36:45.493018  4842 net.cpp:408] relu1 <- ip1
I0428 20:36:45.493023  4842 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:45.493206  4842 net.cpp:124] Setting up relu1
I0428 20:36:45.493216  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493218  4842 net.cpp:139] Memory required for data: 32322800
I0428 20:36:45.493221  4842 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:45.493228  4842 net.cpp:86] Creating Layer ip2
I0428 20:36:45.493232  4842 net.cpp:408] ip2 <- ip1
I0428 20:36:45.493237  4842 net.cpp:382] ip2 -> ip2
I0428 20:36:45.493357  4842 net.cpp:124] Setting up ip2
I0428 20:36:45.493365  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493367  4842 net.cpp:139] Memory required for data: 32326800
I0428 20:36:45.493373  4842 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:45.493377  4842 net.cpp:86] Creating Layer relu2
I0428 20:36:45.493381  4842 net.cpp:408] relu2 <- ip2
I0428 20:36:45.493386  4842 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:45.493542  4842 net.cpp:124] Setting up relu2
I0428 20:36:45.493551  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493553  4842 net.cpp:139] Memory required for data: 32330800
I0428 20:36:45.493556  4842 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:36:45.493561  4842 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:36:45.493564  4842 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:36:45.493568  4842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:36:45.493584  4842 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:36:45.493618  4842 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:36:45.493629  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493647  4842 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:45.493649  4842 net.cpp:139] Memory required for data: 32338800
I0428 20:36:45.493652  4842 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:45.493657  4842 net.cpp:86] Creating Layer accuracy
I0428 20:36:45.493660  4842 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:36:45.493664  4842 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:45.493669  4842 net.cpp:382] accuracy -> accuracy
I0428 20:36:45.493676  4842 net.cpp:124] Setting up accuracy
I0428 20:36:45.493680  4842 net.cpp:131] Top shape: (1)
I0428 20:36:45.493682  4842 net.cpp:139] Memory required for data: 32338804
I0428 20:36:45.493685  4842 layer_factory.hpp:77] Creating layer loss
I0428 20:36:45.493690  4842 net.cpp:86] Creating Layer loss
I0428 20:36:45.493692  4842 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:36:45.493695  4842 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:45.493700  4842 net.cpp:382] loss -> loss
I0428 20:36:45.493705  4842 layer_factory.hpp:77] Creating layer loss
I0428 20:36:45.494047  4842 net.cpp:124] Setting up loss
I0428 20:36:45.494057  4842 net.cpp:131] Top shape: (1)
I0428 20:36:45.494081  4842 net.cpp:134]     with loss weight 1
I0428 20:36:45.494092  4842 net.cpp:139] Memory required for data: 32338808
I0428 20:36:45.494096  4842 net.cpp:200] loss needs backward computation.
I0428 20:36:45.494101  4842 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:45.494104  4842 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:36:45.494107  4842 net.cpp:200] relu2 needs backward computation.
I0428 20:36:45.494110  4842 net.cpp:200] ip2 needs backward computation.
I0428 20:36:45.494114  4842 net.cpp:200] relu1 needs backward computation.
I0428 20:36:45.494117  4842 net.cpp:200] ip1 needs backward computation.
I0428 20:36:45.494122  4842 net.cpp:200] pool1 needs backward computation.
I0428 20:36:45.494124  4842 net.cpp:200] conv1 needs backward computation.
I0428 20:36:45.494128  4842 net.cpp:200] pool0 needs backward computation.
I0428 20:36:45.494132  4842 net.cpp:200] conv0 needs backward computation.
I0428 20:36:45.494135  4842 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:45.494139  4842 net.cpp:202] mnist does not need backward computation.
I0428 20:36:45.494143  4842 net.cpp:244] This network produces output accuracy
I0428 20:36:45.494160  4842 net.cpp:244] This network produces output loss
I0428 20:36:45.494169  4842 net.cpp:257] Network initialization done.
I0428 20:36:45.494220  4842 solver.cpp:56] Solver scaffolding done.
I0428 20:36:45.494504  4842 caffe.cpp:248] Starting Optimization
I0428 20:36:45.494511  4842 solver.cpp:273] Solving LeNet
I0428 20:36:45.494514  4842 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:45.495326  4842 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:45.616118  4852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:45.619323  4842 solver.cpp:398]     Test net output #0: accuracy = 0.1218
I0428 20:36:45.619346  4842 solver.cpp:398]     Test net output #1: loss = 2.31398 (* 1 = 2.31398 loss)
I0428 20:36:45.624483  4842 solver.cpp:219] Iteration 0 (-3.2816e-31 iter/s, 0.129943s/100 iters), loss = 2.31016
I0428 20:36:45.624538  4842 solver.cpp:238]     Train net output #0: loss = 2.31016 (* 1 = 2.31016 loss)
I0428 20:36:45.624552  4842 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:45.875414  4842 solver.cpp:219] Iteration 100 (398.605 iter/s, 0.250875s/100 iters), loss = 0.455962
I0428 20:36:45.875458  4842 solver.cpp:238]     Train net output #0: loss = 0.455962 (* 1 = 0.455962 loss)
I0428 20:36:45.875463  4842 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:46.125638  4842 solver.cpp:219] Iteration 200 (399.713 iter/s, 0.25018s/100 iters), loss = 0.37692
I0428 20:36:46.125692  4842 solver.cpp:238]     Train net output #0: loss = 0.37692 (* 1 = 0.37692 loss)
I0428 20:36:46.125699  4842 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:46.374752  4842 solver.cpp:219] Iteration 300 (401.534 iter/s, 0.249045s/100 iters), loss = 0.45774
I0428 20:36:46.374778  4842 solver.cpp:238]     Train net output #0: loss = 0.45774 (* 1 = 0.45774 loss)
I0428 20:36:46.374784  4842 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:46.625229  4842 solver.cpp:219] Iteration 400 (399.307 iter/s, 0.250434s/100 iters), loss = 0.574913
I0428 20:36:46.625269  4842 solver.cpp:238]     Train net output #0: loss = 0.574913 (* 1 = 0.574913 loss)
I0428 20:36:46.625277  4842 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:46.884518  4842 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:47.004259  4852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:47.007400  4842 solver.cpp:398]     Test net output #0: accuracy = 0.9432
I0428 20:36:47.007437  4842 solver.cpp:398]     Test net output #1: loss = 0.357203 (* 1 = 0.357203 loss)
I0428 20:36:47.009843  4842 solver.cpp:219] Iteration 500 (260.034 iter/s, 0.384565s/100 iters), loss = 0.329249
I0428 20:36:47.009882  4842 solver.cpp:238]     Train net output #0: loss = 0.329249 (* 1 = 0.329249 loss)
I0428 20:36:47.009888  4842 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:47.276695  4842 solver.cpp:219] Iteration 600 (374.798 iter/s, 0.26681s/100 iters), loss = 0.253311
I0428 20:36:47.276736  4842 solver.cpp:238]     Train net output #0: loss = 0.253311 (* 1 = 0.253311 loss)
I0428 20:36:47.276743  4842 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:47.536455  4842 solver.cpp:219] Iteration 700 (385.036 iter/s, 0.259716s/100 iters), loss = 0.347496
I0428 20:36:47.536484  4842 solver.cpp:238]     Train net output #0: loss = 0.347496 (* 1 = 0.347496 loss)
I0428 20:36:47.536491  4842 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:47.795518  4842 solver.cpp:219] Iteration 800 (386.08 iter/s, 0.259014s/100 iters), loss = 0.513546
I0428 20:36:47.795557  4842 solver.cpp:238]     Train net output #0: loss = 0.513546 (* 1 = 0.513546 loss)
I0428 20:36:47.795563  4842 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:48.059134  4842 solver.cpp:219] Iteration 900 (379.418 iter/s, 0.263561s/100 iters), loss = 0.330471
I0428 20:36:48.059176  4842 solver.cpp:238]     Train net output #0: loss = 0.330471 (* 1 = 0.330471 loss)
I0428 20:36:48.059182  4842 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:48.147287  4851 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:48.320322  4842 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:48.325028  4842 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:48.327939  4842 solver.cpp:311] Iteration 1000, loss = 0.432406
I0428 20:36:48.327953  4842 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:48.449671  4852 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:48.453100  4842 solver.cpp:398]     Test net output #0: accuracy = 0.9707
I0428 20:36:48.453136  4842 solver.cpp:398]     Test net output #1: loss = 0.306941 (* 1 = 0.306941 loss)
I0428 20:36:48.453143  4842 solver.cpp:316] Optimization Done.
I0428 20:36:48.453146  4842 caffe.cpp:259] Optimization Done.
