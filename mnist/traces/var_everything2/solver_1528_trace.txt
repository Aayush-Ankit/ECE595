I0428 20:29:48.109342  3588 caffe.cpp:218] Using GPUs 0
I0428 20:29:48.150063  3588 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:29:48.674175  3588 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1528.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:29:48.674350  3588 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1528.prototxt
I0428 20:29:48.674736  3588 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:29:48.674759  3588 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:29:48.674860  3588 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:29:48.674969  3588 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:48.675102  3588 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:29:48.675137  3588 net.cpp:86] Creating Layer mnist
I0428 20:29:48.675149  3588 net.cpp:382] mnist -> data
I0428 20:29:48.675185  3588 net.cpp:382] mnist -> label
I0428 20:29:48.676410  3588 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:29:48.678900  3588 net.cpp:124] Setting up mnist
I0428 20:29:48.678922  3588 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:29:48.678932  3588 net.cpp:131] Top shape: 64 (64)
I0428 20:29:48.678939  3588 net.cpp:139] Memory required for data: 200960
I0428 20:29:48.678949  3588 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:48.678973  3588 net.cpp:86] Creating Layer conv0
I0428 20:29:48.678984  3588 net.cpp:408] conv0 <- data
I0428 20:29:48.679003  3588 net.cpp:382] conv0 -> conv0
I0428 20:29:49.001854  3588 net.cpp:124] Setting up conv0
I0428 20:29:49.001885  3588 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:29:49.001890  3588 net.cpp:139] Memory required for data: 14946560
I0428 20:29:49.001929  3588 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:49.001945  3588 net.cpp:86] Creating Layer pool0
I0428 20:29:49.001950  3588 net.cpp:408] pool0 <- conv0
I0428 20:29:49.001955  3588 net.cpp:382] pool0 -> pool0
I0428 20:29:49.002014  3588 net.cpp:124] Setting up pool0
I0428 20:29:49.002023  3588 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:29:49.002027  3588 net.cpp:139] Memory required for data: 18632960
I0428 20:29:49.002030  3588 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:49.002044  3588 net.cpp:86] Creating Layer conv1
I0428 20:29:49.002048  3588 net.cpp:408] conv1 <- pool0
I0428 20:29:49.002054  3588 net.cpp:382] conv1 -> conv1
I0428 20:29:49.004444  3588 net.cpp:124] Setting up conv1
I0428 20:29:49.004463  3588 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:29:49.004468  3588 net.cpp:139] Memory required for data: 18796800
I0428 20:29:49.004479  3588 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:49.004488  3588 net.cpp:86] Creating Layer pool1
I0428 20:29:49.004492  3588 net.cpp:408] pool1 <- conv1
I0428 20:29:49.004498  3588 net.cpp:382] pool1 -> pool1
I0428 20:29:49.004545  3588 net.cpp:124] Setting up pool1
I0428 20:29:49.004552  3588 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:29:49.004555  3588 net.cpp:139] Memory required for data: 18837760
I0428 20:29:49.004559  3588 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:49.004568  3588 net.cpp:86] Creating Layer ip1
I0428 20:29:49.004572  3588 net.cpp:408] ip1 <- pool1
I0428 20:29:49.004577  3588 net.cpp:382] ip1 -> ip1
I0428 20:29:49.004729  3588 net.cpp:124] Setting up ip1
I0428 20:29:49.004739  3588 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:49.004742  3588 net.cpp:139] Memory required for data: 18844160
I0428 20:29:49.004751  3588 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:49.004760  3588 net.cpp:86] Creating Layer relu1
I0428 20:29:49.004763  3588 net.cpp:408] relu1 <- ip1
I0428 20:29:49.004770  3588 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:49.004988  3588 net.cpp:124] Setting up relu1
I0428 20:29:49.005000  3588 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:49.005004  3588 net.cpp:139] Memory required for data: 18850560
I0428 20:29:49.005008  3588 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:49.005017  3588 net.cpp:86] Creating Layer ip2
I0428 20:29:49.005022  3588 net.cpp:408] ip2 <- ip1
I0428 20:29:49.005028  3588 net.cpp:382] ip2 -> ip2
I0428 20:29:49.005144  3588 net.cpp:124] Setting up ip2
I0428 20:29:49.005154  3588 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:49.005157  3588 net.cpp:139] Memory required for data: 18853120
I0428 20:29:49.005164  3588 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:49.005172  3588 net.cpp:86] Creating Layer relu2
I0428 20:29:49.005175  3588 net.cpp:408] relu2 <- ip2
I0428 20:29:49.005180  3588 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:49.006049  3588 net.cpp:124] Setting up relu2
I0428 20:29:49.006064  3588 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:49.006068  3588 net.cpp:139] Memory required for data: 18855680
I0428 20:29:49.006072  3588 layer_factory.hpp:77] Creating layer loss
I0428 20:29:49.006081  3588 net.cpp:86] Creating Layer loss
I0428 20:29:49.006085  3588 net.cpp:408] loss <- ip2
I0428 20:29:49.006090  3588 net.cpp:408] loss <- label
I0428 20:29:49.006098  3588 net.cpp:382] loss -> loss
I0428 20:29:49.006120  3588 layer_factory.hpp:77] Creating layer loss
I0428 20:29:49.006422  3588 net.cpp:124] Setting up loss
I0428 20:29:49.006433  3588 net.cpp:131] Top shape: (1)
I0428 20:29:49.006438  3588 net.cpp:134]     with loss weight 1
I0428 20:29:49.006453  3588 net.cpp:139] Memory required for data: 18855684
I0428 20:29:49.006458  3588 net.cpp:200] loss needs backward computation.
I0428 20:29:49.006461  3588 net.cpp:200] relu2 needs backward computation.
I0428 20:29:49.006465  3588 net.cpp:200] ip2 needs backward computation.
I0428 20:29:49.006469  3588 net.cpp:200] relu1 needs backward computation.
I0428 20:29:49.006471  3588 net.cpp:200] ip1 needs backward computation.
I0428 20:29:49.006487  3588 net.cpp:200] pool1 needs backward computation.
I0428 20:29:49.006490  3588 net.cpp:200] conv1 needs backward computation.
I0428 20:29:49.006494  3588 net.cpp:200] pool0 needs backward computation.
I0428 20:29:49.006497  3588 net.cpp:200] conv0 needs backward computation.
I0428 20:29:49.006501  3588 net.cpp:202] mnist does not need backward computation.
I0428 20:29:49.006505  3588 net.cpp:244] This network produces output loss
I0428 20:29:49.006516  3588 net.cpp:257] Network initialization done.
I0428 20:29:49.006871  3588 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1528.prototxt
I0428 20:29:49.006903  3588 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:29:49.007005  3588 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:29:49.007087  3588 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:49.007143  3588 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:29:49.007159  3588 net.cpp:86] Creating Layer mnist
I0428 20:29:49.007165  3588 net.cpp:382] mnist -> data
I0428 20:29:49.007174  3588 net.cpp:382] mnist -> label
I0428 20:29:49.007278  3588 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:29:49.009485  3588 net.cpp:124] Setting up mnist
I0428 20:29:49.009503  3588 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:29:49.009510  3588 net.cpp:131] Top shape: 100 (100)
I0428 20:29:49.009512  3588 net.cpp:139] Memory required for data: 314000
I0428 20:29:49.009517  3588 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:29:49.009526  3588 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:29:49.009528  3588 net.cpp:408] label_mnist_1_split <- label
I0428 20:29:49.009536  3588 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:29:49.009543  3588 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:29:49.009610  3588 net.cpp:124] Setting up label_mnist_1_split
I0428 20:29:49.009618  3588 net.cpp:131] Top shape: 100 (100)
I0428 20:29:49.009624  3588 net.cpp:131] Top shape: 100 (100)
I0428 20:29:49.009627  3588 net.cpp:139] Memory required for data: 314800
I0428 20:29:49.009630  3588 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:49.009641  3588 net.cpp:86] Creating Layer conv0
I0428 20:29:49.009645  3588 net.cpp:408] conv0 <- data
I0428 20:29:49.009654  3588 net.cpp:382] conv0 -> conv0
I0428 20:29:49.011620  3588 net.cpp:124] Setting up conv0
I0428 20:29:49.011636  3588 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:29:49.011641  3588 net.cpp:139] Memory required for data: 23354800
I0428 20:29:49.011651  3588 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:49.011660  3588 net.cpp:86] Creating Layer pool0
I0428 20:29:49.011665  3588 net.cpp:408] pool0 <- conv0
I0428 20:29:49.011672  3588 net.cpp:382] pool0 -> pool0
I0428 20:29:49.011715  3588 net.cpp:124] Setting up pool0
I0428 20:29:49.011723  3588 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:29:49.011725  3588 net.cpp:139] Memory required for data: 29114800
I0428 20:29:49.011729  3588 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:49.011744  3588 net.cpp:86] Creating Layer conv1
I0428 20:29:49.011749  3588 net.cpp:408] conv1 <- pool0
I0428 20:29:49.011755  3588 net.cpp:382] conv1 -> conv1
I0428 20:29:49.013799  3588 net.cpp:124] Setting up conv1
I0428 20:29:49.013816  3588 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:29:49.013821  3588 net.cpp:139] Memory required for data: 29370800
I0428 20:29:49.013831  3588 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:49.013839  3588 net.cpp:86] Creating Layer pool1
I0428 20:29:49.013844  3588 net.cpp:408] pool1 <- conv1
I0428 20:29:49.013850  3588 net.cpp:382] pool1 -> pool1
I0428 20:29:49.013895  3588 net.cpp:124] Setting up pool1
I0428 20:29:49.013901  3588 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:29:49.013905  3588 net.cpp:139] Memory required for data: 29434800
I0428 20:29:49.013908  3588 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:49.013917  3588 net.cpp:86] Creating Layer ip1
I0428 20:29:49.013921  3588 net.cpp:408] ip1 <- pool1
I0428 20:29:49.013927  3588 net.cpp:382] ip1 -> ip1
I0428 20:29:49.014082  3588 net.cpp:124] Setting up ip1
I0428 20:29:49.014092  3588 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:49.014096  3588 net.cpp:139] Memory required for data: 29444800
I0428 20:29:49.014106  3588 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:49.014112  3588 net.cpp:86] Creating Layer relu1
I0428 20:29:49.014117  3588 net.cpp:408] relu1 <- ip1
I0428 20:29:49.014123  3588 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:49.014327  3588 net.cpp:124] Setting up relu1
I0428 20:29:49.014338  3588 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:49.014343  3588 net.cpp:139] Memory required for data: 29454800
I0428 20:29:49.014346  3588 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:49.014355  3588 net.cpp:86] Creating Layer ip2
I0428 20:29:49.014359  3588 net.cpp:408] ip2 <- ip1
I0428 20:29:49.014371  3588 net.cpp:382] ip2 -> ip2
I0428 20:29:49.014493  3588 net.cpp:124] Setting up ip2
I0428 20:29:49.014503  3588 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:49.014506  3588 net.cpp:139] Memory required for data: 29458800
I0428 20:29:49.014513  3588 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:49.014520  3588 net.cpp:86] Creating Layer relu2
I0428 20:29:49.014524  3588 net.cpp:408] relu2 <- ip2
I0428 20:29:49.014528  3588 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:49.014785  3588 net.cpp:124] Setting up relu2
I0428 20:29:49.014794  3588 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:49.014798  3588 net.cpp:139] Memory required for data: 29462800
I0428 20:29:49.014801  3588 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:29:49.014808  3588 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:29:49.014812  3588 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:29:49.014817  3588 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:29:49.014837  3588 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:29:49.014883  3588 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:29:49.014889  3588 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:49.014894  3588 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:49.014899  3588 net.cpp:139] Memory required for data: 29470800
I0428 20:29:49.014906  3588 layer_factory.hpp:77] Creating layer accuracy
I0428 20:29:49.014914  3588 net.cpp:86] Creating Layer accuracy
I0428 20:29:49.014919  3588 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:29:49.014924  3588 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:29:49.014930  3588 net.cpp:382] accuracy -> accuracy
I0428 20:29:49.014938  3588 net.cpp:124] Setting up accuracy
I0428 20:29:49.014943  3588 net.cpp:131] Top shape: (1)
I0428 20:29:49.014947  3588 net.cpp:139] Memory required for data: 29470804
I0428 20:29:49.014950  3588 layer_factory.hpp:77] Creating layer loss
I0428 20:29:49.014955  3588 net.cpp:86] Creating Layer loss
I0428 20:29:49.014961  3588 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:29:49.014964  3588 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:29:49.014977  3588 net.cpp:382] loss -> loss
I0428 20:29:49.014984  3588 layer_factory.hpp:77] Creating layer loss
I0428 20:29:49.015293  3588 net.cpp:124] Setting up loss
I0428 20:29:49.015305  3588 net.cpp:131] Top shape: (1)
I0428 20:29:49.015310  3588 net.cpp:134]     with loss weight 1
I0428 20:29:49.015316  3588 net.cpp:139] Memory required for data: 29470808
I0428 20:29:49.015321  3588 net.cpp:200] loss needs backward computation.
I0428 20:29:49.015326  3588 net.cpp:202] accuracy does not need backward computation.
I0428 20:29:49.015331  3588 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:29:49.015334  3588 net.cpp:200] relu2 needs backward computation.
I0428 20:29:49.015338  3588 net.cpp:200] ip2 needs backward computation.
I0428 20:29:49.015342  3588 net.cpp:200] relu1 needs backward computation.
I0428 20:29:49.015346  3588 net.cpp:200] ip1 needs backward computation.
I0428 20:29:49.015349  3588 net.cpp:200] pool1 needs backward computation.
I0428 20:29:49.015352  3588 net.cpp:200] conv1 needs backward computation.
I0428 20:29:49.015357  3588 net.cpp:200] pool0 needs backward computation.
I0428 20:29:49.015359  3588 net.cpp:200] conv0 needs backward computation.
I0428 20:29:49.015363  3588 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:29:49.015368  3588 net.cpp:202] mnist does not need backward computation.
I0428 20:29:49.015372  3588 net.cpp:244] This network produces output accuracy
I0428 20:29:49.015375  3588 net.cpp:244] This network produces output loss
I0428 20:29:49.015388  3588 net.cpp:257] Network initialization done.
I0428 20:29:49.015431  3588 solver.cpp:56] Solver scaffolding done.
I0428 20:29:49.015780  3588 caffe.cpp:248] Starting Optimization
I0428 20:29:49.015786  3588 solver.cpp:273] Solving LeNet
I0428 20:29:49.015790  3588 solver.cpp:274] Learning Rate Policy: inv
I0428 20:29:49.016073  3588 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:29:49.111980  3595 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:49.114394  3588 solver.cpp:398]     Test net output #0: accuracy = 0.1117
I0428 20:29:49.114419  3588 solver.cpp:398]     Test net output #1: loss = 2.38136 (* 1 = 2.38136 loss)
I0428 20:29:49.119227  3588 solver.cpp:219] Iteration 0 (0 iter/s, 0.103404s/100 iters), loss = 2.38787
I0428 20:29:49.119256  3588 solver.cpp:238]     Train net output #0: loss = 2.38787 (* 1 = 2.38787 loss)
I0428 20:29:49.119271  3588 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:29:49.330739  3588 solver.cpp:219] Iteration 100 (472.912 iter/s, 0.211456s/100 iters), loss = 0.785598
I0428 20:29:49.330792  3588 solver.cpp:238]     Train net output #0: loss = 0.785598 (* 1 = 0.785598 loss)
I0428 20:29:49.330806  3588 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:29:49.541069  3588 solver.cpp:219] Iteration 200 (475.602 iter/s, 0.21026s/100 iters), loss = 0.360803
I0428 20:29:49.541146  3588 solver.cpp:238]     Train net output #0: loss = 0.360803 (* 1 = 0.360803 loss)
I0428 20:29:49.541160  3588 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:29:49.743316  3588 solver.cpp:219] Iteration 300 (494.66 iter/s, 0.202159s/100 iters), loss = 0.462398
I0428 20:29:49.743351  3588 solver.cpp:238]     Train net output #0: loss = 0.462398 (* 1 = 0.462398 loss)
I0428 20:29:49.743360  3588 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:29:49.951828  3588 solver.cpp:219] Iteration 400 (479.711 iter/s, 0.208459s/100 iters), loss = 0.557474
I0428 20:29:49.951871  3588 solver.cpp:238]     Train net output #0: loss = 0.557474 (* 1 = 0.557474 loss)
I0428 20:29:49.951882  3588 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:29:50.158495  3588 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:29:50.265828  3595 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:50.268462  3588 solver.cpp:398]     Test net output #0: accuracy = 0.8687
I0428 20:29:50.268493  3588 solver.cpp:398]     Test net output #1: loss = 0.34864 (* 1 = 0.34864 loss)
I0428 20:29:50.270416  3588 solver.cpp:219] Iteration 500 (313.947 iter/s, 0.318525s/100 iters), loss = 0.490155
I0428 20:29:50.270443  3588 solver.cpp:238]     Train net output #0: loss = 0.490155 (* 1 = 0.490155 loss)
I0428 20:29:50.270452  3588 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:29:50.481015  3588 solver.cpp:219] Iteration 600 (474.931 iter/s, 0.210557s/100 iters), loss = 0.173
I0428 20:29:50.481046  3588 solver.cpp:238]     Train net output #0: loss = 0.173 (* 1 = 0.173 loss)
I0428 20:29:50.481055  3588 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:29:50.683974  3588 solver.cpp:219] Iteration 700 (492.835 iter/s, 0.202908s/100 iters), loss = 0.259434
I0428 20:29:50.684026  3588 solver.cpp:238]     Train net output #0: loss = 0.259434 (* 1 = 0.259434 loss)
I0428 20:29:50.684041  3588 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:29:50.905820  3588 solver.cpp:219] Iteration 800 (450.906 iter/s, 0.221776s/100 iters), loss = 0.421643
I0428 20:29:50.905876  3588 solver.cpp:238]     Train net output #0: loss = 0.421643 (* 1 = 0.421643 loss)
I0428 20:29:50.905890  3588 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:29:51.125248  3588 solver.cpp:219] Iteration 900 (455.882 iter/s, 0.219355s/100 iters), loss = 0.207254
I0428 20:29:51.125301  3588 solver.cpp:238]     Train net output #0: loss = 0.207254 (* 1 = 0.207254 loss)
I0428 20:29:51.125314  3588 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:29:51.197743  3594 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:51.340747  3588 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:29:51.343094  3588 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:29:51.344529  3588 solver.cpp:311] Iteration 1000, loss = 0.267099
I0428 20:29:51.344560  3588 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:29:51.444428  3595 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:51.447860  3588 solver.cpp:398]     Test net output #0: accuracy = 0.874
I0428 20:29:51.447883  3588 solver.cpp:398]     Test net output #1: loss = 0.325635 (* 1 = 0.325635 loss)
I0428 20:29:51.447890  3588 solver.cpp:316] Optimization Done.
I0428 20:29:51.447892  3588 caffe.cpp:259] Optimization Done.
