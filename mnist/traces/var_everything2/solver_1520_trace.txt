I0428 20:29:19.910289  3515 caffe.cpp:218] Using GPUs 0
I0428 20:29:19.942448  3515 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:29:20.410845  3515 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1520.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:29:20.410982  3515 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1520.prototxt
I0428 20:29:20.411335  3515 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:29:20.411366  3515 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:29:20.411445  3515 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:20.411507  3515 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:20.411586  3515 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:29:20.411603  3515 net.cpp:86] Creating Layer mnist
I0428 20:29:20.411610  3515 net.cpp:382] mnist -> data
I0428 20:29:20.411628  3515 net.cpp:382] mnist -> label
I0428 20:29:20.412607  3515 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:29:20.414875  3515 net.cpp:124] Setting up mnist
I0428 20:29:20.414906  3515 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:29:20.414909  3515 net.cpp:131] Top shape: 64 (64)
I0428 20:29:20.414912  3515 net.cpp:139] Memory required for data: 200960
I0428 20:29:20.414918  3515 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:20.414932  3515 net.cpp:86] Creating Layer conv0
I0428 20:29:20.414949  3515 net.cpp:408] conv0 <- data
I0428 20:29:20.414963  3515 net.cpp:382] conv0 -> conv0
I0428 20:29:20.643843  3515 net.cpp:124] Setting up conv0
I0428 20:29:20.643887  3515 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:29:20.643890  3515 net.cpp:139] Memory required for data: 14946560
I0428 20:29:20.643906  3515 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:20.643934  3515 net.cpp:86] Creating Layer pool0
I0428 20:29:20.643939  3515 net.cpp:408] pool0 <- conv0
I0428 20:29:20.643944  3515 net.cpp:382] pool0 -> pool0
I0428 20:29:20.643988  3515 net.cpp:124] Setting up pool0
I0428 20:29:20.643996  3515 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:29:20.643998  3515 net.cpp:139] Memory required for data: 18632960
I0428 20:29:20.644001  3515 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:20.644011  3515 net.cpp:86] Creating Layer conv1
I0428 20:29:20.644014  3515 net.cpp:408] conv1 <- pool0
I0428 20:29:20.644018  3515 net.cpp:382] conv1 -> conv1
I0428 20:29:20.646862  3515 net.cpp:124] Setting up conv1
I0428 20:29:20.646891  3515 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:29:20.646894  3515 net.cpp:139] Memory required for data: 18714880
I0428 20:29:20.646903  3515 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:20.646910  3515 net.cpp:86] Creating Layer pool1
I0428 20:29:20.646914  3515 net.cpp:408] pool1 <- conv1
I0428 20:29:20.646934  3515 net.cpp:382] pool1 -> pool1
I0428 20:29:20.646970  3515 net.cpp:124] Setting up pool1
I0428 20:29:20.646976  3515 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:29:20.646980  3515 net.cpp:139] Memory required for data: 18735360
I0428 20:29:20.646982  3515 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:20.646988  3515 net.cpp:86] Creating Layer ip1
I0428 20:29:20.646991  3515 net.cpp:408] ip1 <- pool1
I0428 20:29:20.646996  3515 net.cpp:382] ip1 -> ip1
I0428 20:29:20.647130  3515 net.cpp:124] Setting up ip1
I0428 20:29:20.647137  3515 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:20.647140  3515 net.cpp:139] Memory required for data: 18748160
I0428 20:29:20.647147  3515 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:20.647153  3515 net.cpp:86] Creating Layer relu1
I0428 20:29:20.647156  3515 net.cpp:408] relu1 <- ip1
I0428 20:29:20.647161  3515 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:20.647322  3515 net.cpp:124] Setting up relu1
I0428 20:29:20.647330  3515 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:20.647334  3515 net.cpp:139] Memory required for data: 18760960
I0428 20:29:20.647337  3515 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:20.647343  3515 net.cpp:86] Creating Layer ip2
I0428 20:29:20.647346  3515 net.cpp:408] ip2 <- ip1
I0428 20:29:20.647351  3515 net.cpp:382] ip2 -> ip2
I0428 20:29:20.647469  3515 net.cpp:124] Setting up ip2
I0428 20:29:20.647475  3515 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:20.647478  3515 net.cpp:139] Memory required for data: 18773760
I0428 20:29:20.647483  3515 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:20.647488  3515 net.cpp:86] Creating Layer relu2
I0428 20:29:20.647491  3515 net.cpp:408] relu2 <- ip2
I0428 20:29:20.647495  3515 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:20.648216  3515 net.cpp:124] Setting up relu2
I0428 20:29:20.648228  3515 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:20.648247  3515 net.cpp:139] Memory required for data: 18786560
I0428 20:29:20.648252  3515 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:20.648258  3515 net.cpp:86] Creating Layer ip3
I0428 20:29:20.648262  3515 net.cpp:408] ip3 <- ip2
I0428 20:29:20.648267  3515 net.cpp:382] ip3 -> ip3
I0428 20:29:20.648370  3515 net.cpp:124] Setting up ip3
I0428 20:29:20.648377  3515 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:20.648380  3515 net.cpp:139] Memory required for data: 18789120
I0428 20:29:20.648388  3515 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:20.648396  3515 net.cpp:86] Creating Layer relu3
I0428 20:29:20.648401  3515 net.cpp:408] relu3 <- ip3
I0428 20:29:20.648404  3515 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:20.648584  3515 net.cpp:124] Setting up relu3
I0428 20:29:20.648592  3515 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:20.648596  3515 net.cpp:139] Memory required for data: 18791680
I0428 20:29:20.648598  3515 layer_factory.hpp:77] Creating layer loss
I0428 20:29:20.648604  3515 net.cpp:86] Creating Layer loss
I0428 20:29:20.648607  3515 net.cpp:408] loss <- ip3
I0428 20:29:20.648610  3515 net.cpp:408] loss <- label
I0428 20:29:20.648617  3515 net.cpp:382] loss -> loss
I0428 20:29:20.648633  3515 layer_factory.hpp:77] Creating layer loss
I0428 20:29:20.648874  3515 net.cpp:124] Setting up loss
I0428 20:29:20.648883  3515 net.cpp:131] Top shape: (1)
I0428 20:29:20.648887  3515 net.cpp:134]     with loss weight 1
I0428 20:29:20.648901  3515 net.cpp:139] Memory required for data: 18791684
I0428 20:29:20.648905  3515 net.cpp:200] loss needs backward computation.
I0428 20:29:20.648910  3515 net.cpp:200] relu3 needs backward computation.
I0428 20:29:20.648912  3515 net.cpp:200] ip3 needs backward computation.
I0428 20:29:20.648916  3515 net.cpp:200] relu2 needs backward computation.
I0428 20:29:20.648918  3515 net.cpp:200] ip2 needs backward computation.
I0428 20:29:20.648921  3515 net.cpp:200] relu1 needs backward computation.
I0428 20:29:20.648924  3515 net.cpp:200] ip1 needs backward computation.
I0428 20:29:20.648938  3515 net.cpp:200] pool1 needs backward computation.
I0428 20:29:20.648941  3515 net.cpp:200] conv1 needs backward computation.
I0428 20:29:20.648946  3515 net.cpp:200] pool0 needs backward computation.
I0428 20:29:20.648948  3515 net.cpp:200] conv0 needs backward computation.
I0428 20:29:20.648952  3515 net.cpp:202] mnist does not need backward computation.
I0428 20:29:20.648954  3515 net.cpp:244] This network produces output loss
I0428 20:29:20.648963  3515 net.cpp:257] Network initialization done.
I0428 20:29:20.649312  3515 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1520.prototxt
I0428 20:29:20.649370  3515 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:29:20.649462  3515 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:20.649541  3515 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:20.649585  3515 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:29:20.649596  3515 net.cpp:86] Creating Layer mnist
I0428 20:29:20.649601  3515 net.cpp:382] mnist -> data
I0428 20:29:20.649610  3515 net.cpp:382] mnist -> label
I0428 20:29:20.649710  3515 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:29:20.651682  3515 net.cpp:124] Setting up mnist
I0428 20:29:20.651710  3515 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:29:20.651715  3515 net.cpp:131] Top shape: 100 (100)
I0428 20:29:20.651718  3515 net.cpp:139] Memory required for data: 314000
I0428 20:29:20.651722  3515 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:29:20.651732  3515 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:29:20.651736  3515 net.cpp:408] label_mnist_1_split <- label
I0428 20:29:20.651741  3515 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:29:20.651747  3515 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:29:20.651835  3515 net.cpp:124] Setting up label_mnist_1_split
I0428 20:29:20.651856  3515 net.cpp:131] Top shape: 100 (100)
I0428 20:29:20.651860  3515 net.cpp:131] Top shape: 100 (100)
I0428 20:29:20.651862  3515 net.cpp:139] Memory required for data: 314800
I0428 20:29:20.651865  3515 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:20.651873  3515 net.cpp:86] Creating Layer conv0
I0428 20:29:20.651876  3515 net.cpp:408] conv0 <- data
I0428 20:29:20.651881  3515 net.cpp:382] conv0 -> conv0
I0428 20:29:20.653504  3515 net.cpp:124] Setting up conv0
I0428 20:29:20.653517  3515 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:29:20.653522  3515 net.cpp:139] Memory required for data: 23354800
I0428 20:29:20.653545  3515 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:20.653551  3515 net.cpp:86] Creating Layer pool0
I0428 20:29:20.653554  3515 net.cpp:408] pool0 <- conv0
I0428 20:29:20.653559  3515 net.cpp:382] pool0 -> pool0
I0428 20:29:20.653599  3515 net.cpp:124] Setting up pool0
I0428 20:29:20.653604  3515 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:29:20.653607  3515 net.cpp:139] Memory required for data: 29114800
I0428 20:29:20.653610  3515 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:20.653619  3515 net.cpp:86] Creating Layer conv1
I0428 20:29:20.653621  3515 net.cpp:408] conv1 <- pool0
I0428 20:29:20.653626  3515 net.cpp:382] conv1 -> conv1
I0428 20:29:20.655292  3515 net.cpp:124] Setting up conv1
I0428 20:29:20.655304  3515 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:29:20.655308  3515 net.cpp:139] Memory required for data: 29242800
I0428 20:29:20.655316  3515 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:20.655323  3515 net.cpp:86] Creating Layer pool1
I0428 20:29:20.655326  3515 net.cpp:408] pool1 <- conv1
I0428 20:29:20.655331  3515 net.cpp:382] pool1 -> pool1
I0428 20:29:20.655366  3515 net.cpp:124] Setting up pool1
I0428 20:29:20.655374  3515 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:29:20.655376  3515 net.cpp:139] Memory required for data: 29274800
I0428 20:29:20.655378  3515 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:20.655385  3515 net.cpp:86] Creating Layer ip1
I0428 20:29:20.655387  3515 net.cpp:408] ip1 <- pool1
I0428 20:29:20.655392  3515 net.cpp:382] ip1 -> ip1
I0428 20:29:20.655509  3515 net.cpp:124] Setting up ip1
I0428 20:29:20.655516  3515 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:20.655530  3515 net.cpp:139] Memory required for data: 29294800
I0428 20:29:20.655537  3515 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:20.655542  3515 net.cpp:86] Creating Layer relu1
I0428 20:29:20.655545  3515 net.cpp:408] relu1 <- ip1
I0428 20:29:20.655550  3515 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:20.655721  3515 net.cpp:124] Setting up relu1
I0428 20:29:20.655730  3515 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:20.655733  3515 net.cpp:139] Memory required for data: 29314800
I0428 20:29:20.655736  3515 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:20.655742  3515 net.cpp:86] Creating Layer ip2
I0428 20:29:20.655746  3515 net.cpp:408] ip2 <- ip1
I0428 20:29:20.655750  3515 net.cpp:382] ip2 -> ip2
I0428 20:29:20.655910  3515 net.cpp:124] Setting up ip2
I0428 20:29:20.655918  3515 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:20.655930  3515 net.cpp:139] Memory required for data: 29334800
I0428 20:29:20.655935  3515 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:20.655939  3515 net.cpp:86] Creating Layer relu2
I0428 20:29:20.655942  3515 net.cpp:408] relu2 <- ip2
I0428 20:29:20.655962  3515 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:20.656131  3515 net.cpp:124] Setting up relu2
I0428 20:29:20.656139  3515 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:20.656142  3515 net.cpp:139] Memory required for data: 29354800
I0428 20:29:20.656150  3515 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:20.656155  3515 net.cpp:86] Creating Layer ip3
I0428 20:29:20.656158  3515 net.cpp:408] ip3 <- ip2
I0428 20:29:20.656163  3515 net.cpp:382] ip3 -> ip3
I0428 20:29:20.656291  3515 net.cpp:124] Setting up ip3
I0428 20:29:20.656298  3515 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:20.656301  3515 net.cpp:139] Memory required for data: 29358800
I0428 20:29:20.656308  3515 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:20.656313  3515 net.cpp:86] Creating Layer relu3
I0428 20:29:20.656316  3515 net.cpp:408] relu3 <- ip3
I0428 20:29:20.656319  3515 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:20.657214  3515 net.cpp:124] Setting up relu3
I0428 20:29:20.657227  3515 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:20.657230  3515 net.cpp:139] Memory required for data: 29362800
I0428 20:29:20.657240  3515 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:29:20.657245  3515 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:29:20.657249  3515 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:29:20.657254  3515 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:29:20.657260  3515 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:29:20.657302  3515 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:29:20.657310  3515 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:20.657313  3515 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:20.657317  3515 net.cpp:139] Memory required for data: 29370800
I0428 20:29:20.657320  3515 layer_factory.hpp:77] Creating layer accuracy
I0428 20:29:20.657330  3515 net.cpp:86] Creating Layer accuracy
I0428 20:29:20.657333  3515 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:29:20.657338  3515 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:29:20.657342  3515 net.cpp:382] accuracy -> accuracy
I0428 20:29:20.657349  3515 net.cpp:124] Setting up accuracy
I0428 20:29:20.657353  3515 net.cpp:131] Top shape: (1)
I0428 20:29:20.657356  3515 net.cpp:139] Memory required for data: 29370804
I0428 20:29:20.657361  3515 layer_factory.hpp:77] Creating layer loss
I0428 20:29:20.657364  3515 net.cpp:86] Creating Layer loss
I0428 20:29:20.657382  3515 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:29:20.657387  3515 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:29:20.657390  3515 net.cpp:382] loss -> loss
I0428 20:29:20.657402  3515 layer_factory.hpp:77] Creating layer loss
I0428 20:29:20.657631  3515 net.cpp:124] Setting up loss
I0428 20:29:20.657640  3515 net.cpp:131] Top shape: (1)
I0428 20:29:20.657644  3515 net.cpp:134]     with loss weight 1
I0428 20:29:20.657660  3515 net.cpp:139] Memory required for data: 29370808
I0428 20:29:20.657663  3515 net.cpp:200] loss needs backward computation.
I0428 20:29:20.657667  3515 net.cpp:202] accuracy does not need backward computation.
I0428 20:29:20.657670  3515 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:29:20.657675  3515 net.cpp:200] relu3 needs backward computation.
I0428 20:29:20.657677  3515 net.cpp:200] ip3 needs backward computation.
I0428 20:29:20.657686  3515 net.cpp:200] relu2 needs backward computation.
I0428 20:29:20.657688  3515 net.cpp:200] ip2 needs backward computation.
I0428 20:29:20.657692  3515 net.cpp:200] relu1 needs backward computation.
I0428 20:29:20.657696  3515 net.cpp:200] ip1 needs backward computation.
I0428 20:29:20.657698  3515 net.cpp:200] pool1 needs backward computation.
I0428 20:29:20.657701  3515 net.cpp:200] conv1 needs backward computation.
I0428 20:29:20.657704  3515 net.cpp:200] pool0 needs backward computation.
I0428 20:29:20.657707  3515 net.cpp:200] conv0 needs backward computation.
I0428 20:29:20.657711  3515 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:29:20.657716  3515 net.cpp:202] mnist does not need backward computation.
I0428 20:29:20.657718  3515 net.cpp:244] This network produces output accuracy
I0428 20:29:20.657721  3515 net.cpp:244] This network produces output loss
I0428 20:29:20.657732  3515 net.cpp:257] Network initialization done.
I0428 20:29:20.657770  3515 solver.cpp:56] Solver scaffolding done.
I0428 20:29:20.658226  3515 caffe.cpp:248] Starting Optimization
I0428 20:29:20.658233  3515 solver.cpp:273] Solving LeNet
I0428 20:29:20.658251  3515 solver.cpp:274] Learning Rate Policy: inv
I0428 20:29:20.659000  3515 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:29:20.755750  3524 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:20.758160  3515 solver.cpp:398]     Test net output #0: accuracy = 0.0927
I0428 20:29:20.758196  3515 solver.cpp:398]     Test net output #1: loss = 2.30501 (* 1 = 2.30501 loss)
I0428 20:29:20.762652  3515 solver.cpp:219] Iteration 0 (0 iter/s, 0.104374s/100 iters), loss = 2.29151
I0428 20:29:20.762675  3515 solver.cpp:238]     Train net output #0: loss = 2.29151 (* 1 = 2.29151 loss)
I0428 20:29:20.762686  3515 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:29:20.979878  3515 solver.cpp:219] Iteration 100 (460.445 iter/s, 0.217181s/100 iters), loss = 0.472201
I0428 20:29:20.979929  3515 solver.cpp:238]     Train net output #0: loss = 0.472201 (* 1 = 0.472201 loss)
I0428 20:29:20.979943  3515 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:29:21.210541  3515 solver.cpp:219] Iteration 200 (433.665 iter/s, 0.230593s/100 iters), loss = 0.174994
I0428 20:29:21.210592  3515 solver.cpp:238]     Train net output #0: loss = 0.174994 (* 1 = 0.174994 loss)
I0428 20:29:21.210604  3515 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:29:21.437077  3515 solver.cpp:219] Iteration 300 (441.562 iter/s, 0.226469s/100 iters), loss = 0.270014
I0428 20:29:21.437129  3515 solver.cpp:238]     Train net output #0: loss = 0.270014 (* 1 = 0.270014 loss)
I0428 20:29:21.437142  3515 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:29:21.663225  3515 solver.cpp:219] Iteration 400 (442.33 iter/s, 0.226076s/100 iters), loss = 0.21748
I0428 20:29:21.663285  3515 solver.cpp:238]     Train net output #0: loss = 0.21748 (* 1 = 0.21748 loss)
I0428 20:29:21.663298  3515 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:29:21.882907  3515 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:29:21.988767  3524 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:21.991426  3515 solver.cpp:398]     Test net output #0: accuracy = 0.9545
I0428 20:29:21.991453  3515 solver.cpp:398]     Test net output #1: loss = 0.145096 (* 1 = 0.145096 loss)
I0428 20:29:21.993414  3515 solver.cpp:219] Iteration 500 (302.927 iter/s, 0.330112s/100 iters), loss = 0.166957
I0428 20:29:21.993443  3515 solver.cpp:238]     Train net output #0: loss = 0.166957 (* 1 = 0.166957 loss)
I0428 20:29:21.993468  3515 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:29:22.210716  3515 solver.cpp:219] Iteration 600 (460.293 iter/s, 0.217253s/100 iters), loss = 0.134273
I0428 20:29:22.210757  3515 solver.cpp:238]     Train net output #0: loss = 0.134273 (* 1 = 0.134273 loss)
I0428 20:29:22.210765  3515 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:29:22.426910  3515 solver.cpp:219] Iteration 700 (462.677 iter/s, 0.216134s/100 iters), loss = 0.212981
I0428 20:29:22.426957  3515 solver.cpp:238]     Train net output #0: loss = 0.212981 (* 1 = 0.212981 loss)
I0428 20:29:22.426970  3515 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:29:22.646503  3515 solver.cpp:219] Iteration 800 (455.516 iter/s, 0.219531s/100 iters), loss = 0.25805
I0428 20:29:22.646543  3515 solver.cpp:238]     Train net output #0: loss = 0.25805 (* 1 = 0.25805 loss)
I0428 20:29:22.646553  3515 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:29:22.859551  3515 solver.cpp:219] Iteration 900 (469.499 iter/s, 0.212993s/100 iters), loss = 0.213199
I0428 20:29:22.859587  3515 solver.cpp:238]     Train net output #0: loss = 0.2132 (* 1 = 0.2132 loss)
I0428 20:29:22.859596  3515 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:29:22.927944  3521 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:23.066450  3515 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:29:23.068483  3515 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:29:23.069758  3515 solver.cpp:311] Iteration 1000, loss = 0.141445
I0428 20:29:23.069784  3515 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:29:23.159909  3515 blocking_queue.cpp:49] Waiting for data
I0428 20:29:23.171800  3524 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:23.173233  3515 solver.cpp:398]     Test net output #0: accuracy = 0.9682
I0428 20:29:23.173254  3515 solver.cpp:398]     Test net output #1: loss = 0.0957564 (* 1 = 0.0957564 loss)
I0428 20:29:23.173260  3515 solver.cpp:316] Optimization Done.
I0428 20:29:23.173264  3515 caffe.cpp:259] Optimization Done.
