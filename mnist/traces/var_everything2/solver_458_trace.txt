I0428 19:44:51.567957 25691 caffe.cpp:218] Using GPUs 0
I0428 19:44:51.608851 25691 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:44:52.129834 25691 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test458.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:44:52.129972 25691 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test458.prototxt
I0428 19:44:52.130375 25691 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:44:52.130394 25691 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:44:52.130491 25691 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:52.130566 25691 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:52.130667 25691 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:44:52.130692 25691 net.cpp:86] Creating Layer mnist
I0428 19:44:52.130699 25691 net.cpp:382] mnist -> data
I0428 19:44:52.130722 25691 net.cpp:382] mnist -> label
I0428 19:44:52.131819 25691 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:44:52.134276 25691 net.cpp:124] Setting up mnist
I0428 19:44:52.134294 25691 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:44:52.134300 25691 net.cpp:131] Top shape: 64 (64)
I0428 19:44:52.134305 25691 net.cpp:139] Memory required for data: 200960
I0428 19:44:52.134312 25691 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:52.134330 25691 net.cpp:86] Creating Layer conv0
I0428 19:44:52.134351 25691 net.cpp:408] conv0 <- data
I0428 19:44:52.134362 25691 net.cpp:382] conv0 -> conv0
I0428 19:44:52.425293 25691 net.cpp:124] Setting up conv0
I0428 19:44:52.425325 25691 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:44:52.425331 25691 net.cpp:139] Memory required for data: 495872
I0428 19:44:52.425349 25691 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:52.425364 25691 net.cpp:86] Creating Layer pool0
I0428 19:44:52.425369 25691 net.cpp:408] pool0 <- conv0
I0428 19:44:52.425376 25691 net.cpp:382] pool0 -> pool0
I0428 19:44:52.425433 25691 net.cpp:124] Setting up pool0
I0428 19:44:52.425441 25691 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:44:52.425444 25691 net.cpp:139] Memory required for data: 569600
I0428 19:44:52.425448 25691 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:52.425462 25691 net.cpp:86] Creating Layer conv1
I0428 19:44:52.425467 25691 net.cpp:408] conv1 <- pool0
I0428 19:44:52.425472 25691 net.cpp:382] conv1 -> conv1
I0428 19:44:52.428617 25691 net.cpp:124] Setting up conv1
I0428 19:44:52.428637 25691 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:44:52.428642 25691 net.cpp:139] Memory required for data: 1388800
I0428 19:44:52.428653 25691 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:52.428663 25691 net.cpp:86] Creating Layer pool1
I0428 19:44:52.428668 25691 net.cpp:408] pool1 <- conv1
I0428 19:44:52.428673 25691 net.cpp:382] pool1 -> pool1
I0428 19:44:52.428719 25691 net.cpp:124] Setting up pool1
I0428 19:44:52.428726 25691 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:44:52.428730 25691 net.cpp:139] Memory required for data: 1593600
I0428 19:44:52.428733 25691 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:52.428741 25691 net.cpp:86] Creating Layer ip1
I0428 19:44:52.428745 25691 net.cpp:408] ip1 <- pool1
I0428 19:44:52.428752 25691 net.cpp:382] ip1 -> ip1
I0428 19:44:52.429014 25691 net.cpp:124] Setting up ip1
I0428 19:44:52.429024 25691 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:52.429028 25691 net.cpp:139] Memory required for data: 1600000
I0428 19:44:52.429039 25691 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:52.429045 25691 net.cpp:86] Creating Layer relu1
I0428 19:44:52.429049 25691 net.cpp:408] relu1 <- ip1
I0428 19:44:52.429056 25691 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:52.429267 25691 net.cpp:124] Setting up relu1
I0428 19:44:52.429280 25691 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:44:52.429283 25691 net.cpp:139] Memory required for data: 1606400
I0428 19:44:52.429287 25691 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:52.429294 25691 net.cpp:86] Creating Layer ip2
I0428 19:44:52.429298 25691 net.cpp:408] ip2 <- ip1
I0428 19:44:52.429306 25691 net.cpp:382] ip2 -> ip2
I0428 19:44:52.429436 25691 net.cpp:124] Setting up ip2
I0428 19:44:52.429445 25691 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:52.429448 25691 net.cpp:139] Memory required for data: 1619200
I0428 19:44:52.429455 25691 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:52.429462 25691 net.cpp:86] Creating Layer relu2
I0428 19:44:52.429466 25691 net.cpp:408] relu2 <- ip2
I0428 19:44:52.429472 25691 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:52.430325 25691 net.cpp:124] Setting up relu2
I0428 19:44:52.430341 25691 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:44:52.430344 25691 net.cpp:139] Memory required for data: 1632000
I0428 19:44:52.430348 25691 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:52.430358 25691 net.cpp:86] Creating Layer ip3
I0428 19:44:52.430362 25691 net.cpp:408] ip3 <- ip2
I0428 19:44:52.430369 25691 net.cpp:382] ip3 -> ip3
I0428 19:44:52.430497 25691 net.cpp:124] Setting up ip3
I0428 19:44:52.430507 25691 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:52.430511 25691 net.cpp:139] Memory required for data: 1634560
I0428 19:44:52.430521 25691 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:52.430528 25691 net.cpp:86] Creating Layer relu3
I0428 19:44:52.430532 25691 net.cpp:408] relu3 <- ip3
I0428 19:44:52.430536 25691 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:52.430743 25691 net.cpp:124] Setting up relu3
I0428 19:44:52.430755 25691 net.cpp:131] Top shape: 64 10 (640)
I0428 19:44:52.430759 25691 net.cpp:139] Memory required for data: 1637120
I0428 19:44:52.430763 25691 layer_factory.hpp:77] Creating layer loss
I0428 19:44:52.430770 25691 net.cpp:86] Creating Layer loss
I0428 19:44:52.430773 25691 net.cpp:408] loss <- ip3
I0428 19:44:52.430778 25691 net.cpp:408] loss <- label
I0428 19:44:52.430784 25691 net.cpp:382] loss -> loss
I0428 19:44:52.430801 25691 layer_factory.hpp:77] Creating layer loss
I0428 19:44:52.431087 25691 net.cpp:124] Setting up loss
I0428 19:44:52.431098 25691 net.cpp:131] Top shape: (1)
I0428 19:44:52.431102 25691 net.cpp:134]     with loss weight 1
I0428 19:44:52.431118 25691 net.cpp:139] Memory required for data: 1637124
I0428 19:44:52.431121 25691 net.cpp:200] loss needs backward computation.
I0428 19:44:52.431126 25691 net.cpp:200] relu3 needs backward computation.
I0428 19:44:52.431130 25691 net.cpp:200] ip3 needs backward computation.
I0428 19:44:52.431133 25691 net.cpp:200] relu2 needs backward computation.
I0428 19:44:52.431136 25691 net.cpp:200] ip2 needs backward computation.
I0428 19:44:52.431140 25691 net.cpp:200] relu1 needs backward computation.
I0428 19:44:52.431143 25691 net.cpp:200] ip1 needs backward computation.
I0428 19:44:52.431146 25691 net.cpp:200] pool1 needs backward computation.
I0428 19:44:52.431150 25691 net.cpp:200] conv1 needs backward computation.
I0428 19:44:52.431154 25691 net.cpp:200] pool0 needs backward computation.
I0428 19:44:52.431157 25691 net.cpp:200] conv0 needs backward computation.
I0428 19:44:52.431161 25691 net.cpp:202] mnist does not need backward computation.
I0428 19:44:52.431164 25691 net.cpp:244] This network produces output loss
I0428 19:44:52.431175 25691 net.cpp:257] Network initialization done.
I0428 19:44:52.431562 25691 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test458.prototxt
I0428 19:44:52.431596 25691 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:44:52.431709 25691 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:44:52.431812 25691 layer_factory.hpp:77] Creating layer mnist
I0428 19:44:52.431866 25691 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:44:52.431882 25691 net.cpp:86] Creating Layer mnist
I0428 19:44:52.431888 25691 net.cpp:382] mnist -> data
I0428 19:44:52.431898 25691 net.cpp:382] mnist -> label
I0428 19:44:52.432001 25691 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:44:52.434206 25691 net.cpp:124] Setting up mnist
I0428 19:44:52.434222 25691 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:44:52.434228 25691 net.cpp:131] Top shape: 100 (100)
I0428 19:44:52.434231 25691 net.cpp:139] Memory required for data: 314000
I0428 19:44:52.434238 25691 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:44:52.434247 25691 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:44:52.434250 25691 net.cpp:408] label_mnist_1_split <- label
I0428 19:44:52.434285 25691 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:44:52.434294 25691 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:44:52.434413 25691 net.cpp:124] Setting up label_mnist_1_split
I0428 19:44:52.434423 25691 net.cpp:131] Top shape: 100 (100)
I0428 19:44:52.434427 25691 net.cpp:131] Top shape: 100 (100)
I0428 19:44:52.434432 25691 net.cpp:139] Memory required for data: 314800
I0428 19:44:52.434434 25691 layer_factory.hpp:77] Creating layer conv0
I0428 19:44:52.434447 25691 net.cpp:86] Creating Layer conv0
I0428 19:44:52.434450 25691 net.cpp:408] conv0 <- data
I0428 19:44:52.434458 25691 net.cpp:382] conv0 -> conv0
I0428 19:44:52.436368 25691 net.cpp:124] Setting up conv0
I0428 19:44:52.436385 25691 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:44:52.436390 25691 net.cpp:139] Memory required for data: 775600
I0428 19:44:52.436401 25691 layer_factory.hpp:77] Creating layer pool0
I0428 19:44:52.436409 25691 net.cpp:86] Creating Layer pool0
I0428 19:44:52.436414 25691 net.cpp:408] pool0 <- conv0
I0428 19:44:52.436420 25691 net.cpp:382] pool0 -> pool0
I0428 19:44:52.436465 25691 net.cpp:124] Setting up pool0
I0428 19:44:52.436471 25691 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:44:52.436475 25691 net.cpp:139] Memory required for data: 890800
I0428 19:44:52.436478 25691 layer_factory.hpp:77] Creating layer conv1
I0428 19:44:52.436491 25691 net.cpp:86] Creating Layer conv1
I0428 19:44:52.436496 25691 net.cpp:408] conv1 <- pool0
I0428 19:44:52.436502 25691 net.cpp:382] conv1 -> conv1
I0428 19:44:52.438304 25691 net.cpp:124] Setting up conv1
I0428 19:44:52.438321 25691 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:44:52.438326 25691 net.cpp:139] Memory required for data: 2170800
I0428 19:44:52.438338 25691 layer_factory.hpp:77] Creating layer pool1
I0428 19:44:52.438354 25691 net.cpp:86] Creating Layer pool1
I0428 19:44:52.438364 25691 net.cpp:408] pool1 <- conv1
I0428 19:44:52.438369 25691 net.cpp:382] pool1 -> pool1
I0428 19:44:52.438416 25691 net.cpp:124] Setting up pool1
I0428 19:44:52.438423 25691 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:44:52.438426 25691 net.cpp:139] Memory required for data: 2490800
I0428 19:44:52.438431 25691 layer_factory.hpp:77] Creating layer ip1
I0428 19:44:52.438437 25691 net.cpp:86] Creating Layer ip1
I0428 19:44:52.438441 25691 net.cpp:408] ip1 <- pool1
I0428 19:44:52.438447 25691 net.cpp:382] ip1 -> ip1
I0428 19:44:52.438707 25691 net.cpp:124] Setting up ip1
I0428 19:44:52.438719 25691 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:52.438733 25691 net.cpp:139] Memory required for data: 2500800
I0428 19:44:52.438742 25691 layer_factory.hpp:77] Creating layer relu1
I0428 19:44:52.438750 25691 net.cpp:86] Creating Layer relu1
I0428 19:44:52.438755 25691 net.cpp:408] relu1 <- ip1
I0428 19:44:52.438761 25691 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:44:52.438952 25691 net.cpp:124] Setting up relu1
I0428 19:44:52.438963 25691 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:44:52.438967 25691 net.cpp:139] Memory required for data: 2510800
I0428 19:44:52.438982 25691 layer_factory.hpp:77] Creating layer ip2
I0428 19:44:52.438992 25691 net.cpp:86] Creating Layer ip2
I0428 19:44:52.438995 25691 net.cpp:408] ip2 <- ip1
I0428 19:44:52.439000 25691 net.cpp:382] ip2 -> ip2
I0428 19:44:52.439141 25691 net.cpp:124] Setting up ip2
I0428 19:44:52.439151 25691 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:52.439153 25691 net.cpp:139] Memory required for data: 2530800
I0428 19:44:52.439160 25691 layer_factory.hpp:77] Creating layer relu2
I0428 19:44:52.439167 25691 net.cpp:86] Creating Layer relu2
I0428 19:44:52.439172 25691 net.cpp:408] relu2 <- ip2
I0428 19:44:52.439177 25691 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:44:52.439421 25691 net.cpp:124] Setting up relu2
I0428 19:44:52.439432 25691 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:44:52.439436 25691 net.cpp:139] Memory required for data: 2550800
I0428 19:44:52.439440 25691 layer_factory.hpp:77] Creating layer ip3
I0428 19:44:52.439448 25691 net.cpp:86] Creating Layer ip3
I0428 19:44:52.439451 25691 net.cpp:408] ip3 <- ip2
I0428 19:44:52.439458 25691 net.cpp:382] ip3 -> ip3
I0428 19:44:52.439627 25691 net.cpp:124] Setting up ip3
I0428 19:44:52.439637 25691 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:52.439640 25691 net.cpp:139] Memory required for data: 2554800
I0428 19:44:52.439649 25691 layer_factory.hpp:77] Creating layer relu3
I0428 19:44:52.439656 25691 net.cpp:86] Creating Layer relu3
I0428 19:44:52.439659 25691 net.cpp:408] relu3 <- ip3
I0428 19:44:52.439663 25691 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:44:52.440594 25691 net.cpp:124] Setting up relu3
I0428 19:44:52.440614 25691 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:52.440619 25691 net.cpp:139] Memory required for data: 2558800
I0428 19:44:52.440623 25691 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:44:52.440630 25691 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:44:52.440634 25691 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:44:52.440642 25691 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:44:52.440649 25691 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:44:52.440708 25691 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:44:52.440718 25691 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:52.440723 25691 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:44:52.440732 25691 net.cpp:139] Memory required for data: 2566800
I0428 19:44:52.440737 25691 layer_factory.hpp:77] Creating layer accuracy
I0428 19:44:52.440744 25691 net.cpp:86] Creating Layer accuracy
I0428 19:44:52.440748 25691 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:44:52.440752 25691 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:44:52.440764 25691 net.cpp:382] accuracy -> accuracy
I0428 19:44:52.440773 25691 net.cpp:124] Setting up accuracy
I0428 19:44:52.440778 25691 net.cpp:131] Top shape: (1)
I0428 19:44:52.440783 25691 net.cpp:139] Memory required for data: 2566804
I0428 19:44:52.440785 25691 layer_factory.hpp:77] Creating layer loss
I0428 19:44:52.440793 25691 net.cpp:86] Creating Layer loss
I0428 19:44:52.440798 25691 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:44:52.440801 25691 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:44:52.440806 25691 net.cpp:382] loss -> loss
I0428 19:44:52.440820 25691 layer_factory.hpp:77] Creating layer loss
I0428 19:44:52.441099 25691 net.cpp:124] Setting up loss
I0428 19:44:52.441110 25691 net.cpp:131] Top shape: (1)
I0428 19:44:52.441113 25691 net.cpp:134]     with loss weight 1
I0428 19:44:52.441121 25691 net.cpp:139] Memory required for data: 2566808
I0428 19:44:52.441138 25691 net.cpp:200] loss needs backward computation.
I0428 19:44:52.441143 25691 net.cpp:202] accuracy does not need backward computation.
I0428 19:44:52.441146 25691 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:44:52.441164 25691 net.cpp:200] relu3 needs backward computation.
I0428 19:44:52.441169 25691 net.cpp:200] ip3 needs backward computation.
I0428 19:44:52.441171 25691 net.cpp:200] relu2 needs backward computation.
I0428 19:44:52.441174 25691 net.cpp:200] ip2 needs backward computation.
I0428 19:44:52.441179 25691 net.cpp:200] relu1 needs backward computation.
I0428 19:44:52.441181 25691 net.cpp:200] ip1 needs backward computation.
I0428 19:44:52.441184 25691 net.cpp:200] pool1 needs backward computation.
I0428 19:44:52.441195 25691 net.cpp:200] conv1 needs backward computation.
I0428 19:44:52.441198 25691 net.cpp:200] pool0 needs backward computation.
I0428 19:44:52.441202 25691 net.cpp:200] conv0 needs backward computation.
I0428 19:44:52.441207 25691 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:44:52.441211 25691 net.cpp:202] mnist does not need backward computation.
I0428 19:44:52.441215 25691 net.cpp:244] This network produces output accuracy
I0428 19:44:52.441220 25691 net.cpp:244] This network produces output loss
I0428 19:44:52.441236 25691 net.cpp:257] Network initialization done.
I0428 19:44:52.441285 25691 solver.cpp:56] Solver scaffolding done.
I0428 19:44:52.441684 25691 caffe.cpp:248] Starting Optimization
I0428 19:44:52.441691 25691 solver.cpp:273] Solving LeNet
I0428 19:44:52.441695 25691 solver.cpp:274] Learning Rate Policy: inv
I0428 19:44:52.442659 25691 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:44:52.446480 25691 blocking_queue.cpp:49] Waiting for data
I0428 19:44:52.516891 25698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:52.517374 25691 solver.cpp:398]     Test net output #0: accuracy = 0.0991
I0428 19:44:52.517391 25691 solver.cpp:398]     Test net output #1: loss = 2.32105 (* 1 = 2.32105 loss)
I0428 19:44:52.519501 25691 solver.cpp:219] Iteration 0 (-2.00721e-31 iter/s, 0.0777749s/100 iters), loss = 2.34563
I0428 19:44:52.519527 25691 solver.cpp:238]     Train net output #0: loss = 2.34563 (* 1 = 2.34563 loss)
I0428 19:44:52.519539 25691 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:44:52.621472 25691 solver.cpp:219] Iteration 100 (981.058 iter/s, 0.101931s/100 iters), loss = 0.992381
I0428 19:44:52.621497 25691 solver.cpp:238]     Train net output #0: loss = 0.992381 (* 1 = 0.992381 loss)
I0428 19:44:52.621505 25691 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:44:52.725668 25691 solver.cpp:219] Iteration 200 (960.06 iter/s, 0.10416s/100 iters), loss = 0.513811
I0428 19:44:52.725695 25691 solver.cpp:238]     Train net output #0: loss = 0.513811 (* 1 = 0.513811 loss)
I0428 19:44:52.725703 25691 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:44:52.831161 25691 solver.cpp:219] Iteration 300 (948.294 iter/s, 0.105453s/100 iters), loss = 0.716885
I0428 19:44:52.831192 25691 solver.cpp:238]     Train net output #0: loss = 0.716885 (* 1 = 0.716885 loss)
I0428 19:44:52.831200 25691 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:44:52.939677 25691 solver.cpp:219] Iteration 400 (921.885 iter/s, 0.108473s/100 iters), loss = 0.324079
I0428 19:44:52.939707 25691 solver.cpp:238]     Train net output #0: loss = 0.324079 (* 1 = 0.324079 loss)
I0428 19:44:52.939715 25691 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:44:53.045233 25691 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:44:53.098166 25698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:53.098640 25691 solver.cpp:398]     Test net output #0: accuracy = 0.7477
I0428 19:44:53.098662 25691 solver.cpp:398]     Test net output #1: loss = 0.627466 (* 1 = 0.627466 loss)
I0428 19:44:53.099694 25691 solver.cpp:219] Iteration 500 (625.101 iter/s, 0.159974s/100 iters), loss = 0.535335
I0428 19:44:53.099752 25691 solver.cpp:238]     Train net output #0: loss = 0.535335 (* 1 = 0.535335 loss)
I0428 19:44:53.099761 25691 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:44:53.209401 25691 solver.cpp:219] Iteration 600 (912.149 iter/s, 0.109631s/100 iters), loss = 0.799939
I0428 19:44:53.209445 25691 solver.cpp:238]     Train net output #0: loss = 0.799939 (* 1 = 0.799939 loss)
I0428 19:44:53.209460 25691 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:44:53.320382 25691 solver.cpp:219] Iteration 700 (901.503 iter/s, 0.110926s/100 iters), loss = 0.571718
I0428 19:44:53.320411 25691 solver.cpp:238]     Train net output #0: loss = 0.571718 (* 1 = 0.571718 loss)
I0428 19:44:53.320422 25691 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:44:53.434869 25691 solver.cpp:219] Iteration 800 (873.811 iter/s, 0.114441s/100 iters), loss = 0.591059
I0428 19:44:53.434903 25691 solver.cpp:238]     Train net output #0: loss = 0.591059 (* 1 = 0.591059 loss)
I0428 19:44:53.434912 25691 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:44:53.541095 25691 solver.cpp:219] Iteration 900 (941.826 iter/s, 0.106177s/100 iters), loss = 0.420408
I0428 19:44:53.541124 25691 solver.cpp:238]     Train net output #0: loss = 0.420408 (* 1 = 0.420408 loss)
I0428 19:44:53.541132 25691 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:44:53.575647 25697 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:53.643800 25691 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:44:53.645135 25691 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:44:53.645823 25691 solver.cpp:311] Iteration 1000, loss = 0.440181
I0428 19:44:53.645840 25691 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:44:53.718155 25698 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:44:53.718667 25691 solver.cpp:398]     Test net output #0: accuracy = 0.8772
I0428 19:44:53.718688 25691 solver.cpp:398]     Test net output #1: loss = 0.315601 (* 1 = 0.315601 loss)
I0428 19:44:53.718694 25691 solver.cpp:316] Optimization Done.
I0428 19:44:53.718698 25691 caffe.cpp:259] Optimization Done.
