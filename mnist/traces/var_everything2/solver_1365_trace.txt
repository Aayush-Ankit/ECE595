I0428 20:20:32.182723  1569 caffe.cpp:218] Using GPUs 0
I0428 20:20:32.221400  1569 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:20:32.734553  1569 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1365.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:20:32.734699  1569 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1365.prototxt
I0428 20:20:32.735045  1569 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:20:32.735060  1569 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:20:32.735141  1569 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:20:32.735211  1569 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:32.735312  1569 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:20:32.735337  1569 net.cpp:86] Creating Layer mnist
I0428 20:20:32.735344  1569 net.cpp:382] mnist -> data
I0428 20:20:32.735368  1569 net.cpp:382] mnist -> label
I0428 20:20:32.736455  1569 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:20:32.739065  1569 net.cpp:124] Setting up mnist
I0428 20:20:32.739084  1569 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:20:32.739092  1569 net.cpp:131] Top shape: 64 (64)
I0428 20:20:32.739095  1569 net.cpp:139] Memory required for data: 200960
I0428 20:20:32.739102  1569 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:32.739120  1569 net.cpp:86] Creating Layer conv0
I0428 20:20:32.739125  1569 net.cpp:408] conv0 <- data
I0428 20:20:32.739137  1569 net.cpp:382] conv0 -> conv0
I0428 20:20:33.003036  1569 net.cpp:124] Setting up conv0
I0428 20:20:33.003078  1569 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:20:33.003082  1569 net.cpp:139] Memory required for data: 7573760
I0428 20:20:33.003098  1569 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:33.003110  1569 net.cpp:86] Creating Layer pool0
I0428 20:20:33.003114  1569 net.cpp:408] pool0 <- conv0
I0428 20:20:33.003135  1569 net.cpp:382] pool0 -> pool0
I0428 20:20:33.003211  1569 net.cpp:124] Setting up pool0
I0428 20:20:33.003218  1569 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:20:33.003237  1569 net.cpp:139] Memory required for data: 9416960
I0428 20:20:33.003240  1569 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:33.003252  1569 net.cpp:86] Creating Layer conv1
I0428 20:20:33.003254  1569 net.cpp:408] conv1 <- pool0
I0428 20:20:33.003259  1569 net.cpp:382] conv1 -> conv1
I0428 20:20:33.005630  1569 net.cpp:124] Setting up conv1
I0428 20:20:33.005659  1569 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:20:33.005664  1569 net.cpp:139] Memory required for data: 10236160
I0428 20:20:33.005672  1569 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:33.005681  1569 net.cpp:86] Creating Layer pool1
I0428 20:20:33.005683  1569 net.cpp:408] pool1 <- conv1
I0428 20:20:33.005688  1569 net.cpp:382] pool1 -> pool1
I0428 20:20:33.005723  1569 net.cpp:124] Setting up pool1
I0428 20:20:33.005728  1569 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:20:33.005731  1569 net.cpp:139] Memory required for data: 10440960
I0428 20:20:33.005734  1569 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:33.005741  1569 net.cpp:86] Creating Layer ip1
I0428 20:20:33.005744  1569 net.cpp:408] ip1 <- pool1
I0428 20:20:33.005749  1569 net.cpp:382] ip1 -> ip1
I0428 20:20:33.006750  1569 net.cpp:124] Setting up ip1
I0428 20:20:33.006762  1569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:33.006781  1569 net.cpp:139] Memory required for data: 10443520
I0428 20:20:33.006790  1569 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:33.006798  1569 net.cpp:86] Creating Layer relu1
I0428 20:20:33.006816  1569 net.cpp:408] relu1 <- ip1
I0428 20:20:33.006820  1569 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:33.006989  1569 net.cpp:124] Setting up relu1
I0428 20:20:33.006999  1569 net.cpp:131] Top shape: 64 10 (640)
I0428 20:20:33.007001  1569 net.cpp:139] Memory required for data: 10446080
I0428 20:20:33.007005  1569 layer_factory.hpp:77] Creating layer loss
I0428 20:20:33.007010  1569 net.cpp:86] Creating Layer loss
I0428 20:20:33.007014  1569 net.cpp:408] loss <- ip1
I0428 20:20:33.007019  1569 net.cpp:408] loss <- label
I0428 20:20:33.007024  1569 net.cpp:382] loss -> loss
I0428 20:20:33.007041  1569 layer_factory.hpp:77] Creating layer loss
I0428 20:20:33.007930  1569 net.cpp:124] Setting up loss
I0428 20:20:33.007942  1569 net.cpp:131] Top shape: (1)
I0428 20:20:33.007961  1569 net.cpp:134]     with loss weight 1
I0428 20:20:33.007977  1569 net.cpp:139] Memory required for data: 10446084
I0428 20:20:33.007980  1569 net.cpp:200] loss needs backward computation.
I0428 20:20:33.007984  1569 net.cpp:200] relu1 needs backward computation.
I0428 20:20:33.007987  1569 net.cpp:200] ip1 needs backward computation.
I0428 20:20:33.007990  1569 net.cpp:200] pool1 needs backward computation.
I0428 20:20:33.007993  1569 net.cpp:200] conv1 needs backward computation.
I0428 20:20:33.007997  1569 net.cpp:200] pool0 needs backward computation.
I0428 20:20:33.007999  1569 net.cpp:200] conv0 needs backward computation.
I0428 20:20:33.008002  1569 net.cpp:202] mnist does not need backward computation.
I0428 20:20:33.008005  1569 net.cpp:244] This network produces output loss
I0428 20:20:33.008013  1569 net.cpp:257] Network initialization done.
I0428 20:20:33.008285  1569 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1365.prototxt
I0428 20:20:33.008308  1569 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:20:33.008399  1569 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:20:33.008472  1569 layer_factory.hpp:77] Creating layer mnist
I0428 20:20:33.008533  1569 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:20:33.008545  1569 net.cpp:86] Creating Layer mnist
I0428 20:20:33.008550  1569 net.cpp:382] mnist -> data
I0428 20:20:33.008558  1569 net.cpp:382] mnist -> label
I0428 20:20:33.008656  1569 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:20:33.010751  1569 net.cpp:124] Setting up mnist
I0428 20:20:33.010781  1569 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:20:33.010800  1569 net.cpp:131] Top shape: 100 (100)
I0428 20:20:33.010803  1569 net.cpp:139] Memory required for data: 314000
I0428 20:20:33.010807  1569 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:20:33.010814  1569 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:20:33.010818  1569 net.cpp:408] label_mnist_1_split <- label
I0428 20:20:33.010823  1569 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:20:33.010829  1569 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:20:33.010867  1569 net.cpp:124] Setting up label_mnist_1_split
I0428 20:20:33.010874  1569 net.cpp:131] Top shape: 100 (100)
I0428 20:20:33.010891  1569 net.cpp:131] Top shape: 100 (100)
I0428 20:20:33.010893  1569 net.cpp:139] Memory required for data: 314800
I0428 20:20:33.010896  1569 layer_factory.hpp:77] Creating layer conv0
I0428 20:20:33.010905  1569 net.cpp:86] Creating Layer conv0
I0428 20:20:33.010907  1569 net.cpp:408] conv0 <- data
I0428 20:20:33.010912  1569 net.cpp:382] conv0 -> conv0
I0428 20:20:33.011924  1569 net.cpp:124] Setting up conv0
I0428 20:20:33.011937  1569 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:20:33.011941  1569 net.cpp:139] Memory required for data: 11834800
I0428 20:20:33.011950  1569 layer_factory.hpp:77] Creating layer pool0
I0428 20:20:33.011958  1569 net.cpp:86] Creating Layer pool0
I0428 20:20:33.011961  1569 net.cpp:408] pool0 <- conv0
I0428 20:20:33.011967  1569 net.cpp:382] pool0 -> pool0
I0428 20:20:33.012032  1569 net.cpp:124] Setting up pool0
I0428 20:20:33.012049  1569 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:20:33.012053  1569 net.cpp:139] Memory required for data: 14714800
I0428 20:20:33.012055  1569 layer_factory.hpp:77] Creating layer conv1
I0428 20:20:33.012063  1569 net.cpp:86] Creating Layer conv1
I0428 20:20:33.012066  1569 net.cpp:408] conv1 <- pool0
I0428 20:20:33.012074  1569 net.cpp:382] conv1 -> conv1
I0428 20:20:33.014156  1569 net.cpp:124] Setting up conv1
I0428 20:20:33.014184  1569 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:20:33.014199  1569 net.cpp:139] Memory required for data: 15994800
I0428 20:20:33.014223  1569 layer_factory.hpp:77] Creating layer pool1
I0428 20:20:33.014245  1569 net.cpp:86] Creating Layer pool1
I0428 20:20:33.014261  1569 net.cpp:408] pool1 <- conv1
I0428 20:20:33.014267  1569 net.cpp:382] pool1 -> pool1
I0428 20:20:33.014303  1569 net.cpp:124] Setting up pool1
I0428 20:20:33.014315  1569 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:20:33.014318  1569 net.cpp:139] Memory required for data: 16314800
I0428 20:20:33.014322  1569 layer_factory.hpp:77] Creating layer ip1
I0428 20:20:33.014328  1569 net.cpp:86] Creating Layer ip1
I0428 20:20:33.014331  1569 net.cpp:408] ip1 <- pool1
I0428 20:20:33.014338  1569 net.cpp:382] ip1 -> ip1
I0428 20:20:33.014475  1569 net.cpp:124] Setting up ip1
I0428 20:20:33.014483  1569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:33.014487  1569 net.cpp:139] Memory required for data: 16318800
I0428 20:20:33.014494  1569 layer_factory.hpp:77] Creating layer relu1
I0428 20:20:33.014499  1569 net.cpp:86] Creating Layer relu1
I0428 20:20:33.014503  1569 net.cpp:408] relu1 <- ip1
I0428 20:20:33.014508  1569 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:20:33.015453  1569 net.cpp:124] Setting up relu1
I0428 20:20:33.015465  1569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:33.015468  1569 net.cpp:139] Memory required for data: 16322800
I0428 20:20:33.015472  1569 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:20:33.015478  1569 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:20:33.015482  1569 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:20:33.015503  1569 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:20:33.015509  1569 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:20:33.015550  1569 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:20:33.015557  1569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:33.015560  1569 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:20:33.015563  1569 net.cpp:139] Memory required for data: 16330800
I0428 20:20:33.015565  1569 layer_factory.hpp:77] Creating layer accuracy
I0428 20:20:33.015570  1569 net.cpp:86] Creating Layer accuracy
I0428 20:20:33.015573  1569 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:20:33.015578  1569 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:20:33.015583  1569 net.cpp:382] accuracy -> accuracy
I0428 20:20:33.015588  1569 net.cpp:124] Setting up accuracy
I0428 20:20:33.015592  1569 net.cpp:131] Top shape: (1)
I0428 20:20:33.015595  1569 net.cpp:139] Memory required for data: 16330804
I0428 20:20:33.015597  1569 layer_factory.hpp:77] Creating layer loss
I0428 20:20:33.015604  1569 net.cpp:86] Creating Layer loss
I0428 20:20:33.015606  1569 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:20:33.015616  1569 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:20:33.015621  1569 net.cpp:382] loss -> loss
I0428 20:20:33.015627  1569 layer_factory.hpp:77] Creating layer loss
I0428 20:20:33.015862  1569 net.cpp:124] Setting up loss
I0428 20:20:33.015872  1569 net.cpp:131] Top shape: (1)
I0428 20:20:33.015874  1569 net.cpp:134]     with loss weight 1
I0428 20:20:33.015880  1569 net.cpp:139] Memory required for data: 16330808
I0428 20:20:33.015883  1569 net.cpp:200] loss needs backward computation.
I0428 20:20:33.015887  1569 net.cpp:202] accuracy does not need backward computation.
I0428 20:20:33.015890  1569 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:20:33.015894  1569 net.cpp:200] relu1 needs backward computation.
I0428 20:20:33.015903  1569 net.cpp:200] ip1 needs backward computation.
I0428 20:20:33.015907  1569 net.cpp:200] pool1 needs backward computation.
I0428 20:20:33.015909  1569 net.cpp:200] conv1 needs backward computation.
I0428 20:20:33.015913  1569 net.cpp:200] pool0 needs backward computation.
I0428 20:20:33.015915  1569 net.cpp:200] conv0 needs backward computation.
I0428 20:20:33.015924  1569 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:20:33.015929  1569 net.cpp:202] mnist does not need backward computation.
I0428 20:20:33.015938  1569 net.cpp:244] This network produces output accuracy
I0428 20:20:33.015946  1569 net.cpp:244] This network produces output loss
I0428 20:20:33.015974  1569 net.cpp:257] Network initialization done.
I0428 20:20:33.016008  1569 solver.cpp:56] Solver scaffolding done.
I0428 20:20:33.016217  1569 caffe.cpp:248] Starting Optimization
I0428 20:20:33.016224  1569 solver.cpp:273] Solving LeNet
I0428 20:20:33.016227  1569 solver.cpp:274] Learning Rate Policy: inv
I0428 20:20:33.016358  1569 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:20:33.023735  1569 blocking_queue.cpp:49] Waiting for data
I0428 20:20:33.094914  1578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:33.095856  1569 solver.cpp:398]     Test net output #0: accuracy = 0.1083
I0428 20:20:33.095877  1569 solver.cpp:398]     Test net output #1: loss = 2.31095 (* 1 = 2.31095 loss)
I0428 20:20:33.100198  1569 solver.cpp:219] Iteration 0 (0 iter/s, 0.0839444s/100 iters), loss = 2.31428
I0428 20:20:33.100220  1569 solver.cpp:238]     Train net output #0: loss = 2.31428 (* 1 = 2.31428 loss)
I0428 20:20:33.100231  1569 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:20:33.244144  1569 solver.cpp:219] Iteration 100 (694.884 iter/s, 0.143909s/100 iters), loss = 0.755955
I0428 20:20:33.244169  1569 solver.cpp:238]     Train net output #0: loss = 0.755955 (* 1 = 0.755955 loss)
I0428 20:20:33.244174  1569 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:20:33.387341  1569 solver.cpp:219] Iteration 200 (698.518 iter/s, 0.14316s/100 iters), loss = 0.298251
I0428 20:20:33.387365  1569 solver.cpp:238]     Train net output #0: loss = 0.298251 (* 1 = 0.298251 loss)
I0428 20:20:33.387372  1569 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:20:33.534456  1569 solver.cpp:219] Iteration 300 (679.92 iter/s, 0.147076s/100 iters), loss = 0.183474
I0428 20:20:33.534487  1569 solver.cpp:238]     Train net output #0: loss = 0.183474 (* 1 = 0.183474 loss)
I0428 20:20:33.534493  1569 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:20:33.678416  1569 solver.cpp:219] Iteration 400 (694.845 iter/s, 0.143917s/100 iters), loss = 0.0768256
I0428 20:20:33.678439  1569 solver.cpp:238]     Train net output #0: loss = 0.0768255 (* 1 = 0.0768255 loss)
I0428 20:20:33.678445  1569 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:20:33.820133  1569 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:20:33.887076  1578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:33.889386  1569 solver.cpp:398]     Test net output #0: accuracy = 0.9678
I0428 20:20:33.889406  1569 solver.cpp:398]     Test net output #1: loss = 0.106667 (* 1 = 0.106667 loss)
I0428 20:20:33.890774  1569 solver.cpp:219] Iteration 500 (470.987 iter/s, 0.21232s/100 iters), loss = 0.141843
I0428 20:20:33.890795  1569 solver.cpp:238]     Train net output #0: loss = 0.141843 (* 1 = 0.141843 loss)
I0428 20:20:33.890801  1569 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:20:34.033285  1569 solver.cpp:219] Iteration 600 (701.876 iter/s, 0.142475s/100 iters), loss = 0.0793632
I0428 20:20:34.033314  1569 solver.cpp:238]     Train net output #0: loss = 0.0793631 (* 1 = 0.0793631 loss)
I0428 20:20:34.033321  1569 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:20:34.181567  1569 solver.cpp:219] Iteration 700 (674.585 iter/s, 0.148239s/100 iters), loss = 0.114397
I0428 20:20:34.181597  1569 solver.cpp:238]     Train net output #0: loss = 0.114397 (* 1 = 0.114397 loss)
I0428 20:20:34.181618  1569 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:20:34.327277  1569 solver.cpp:219] Iteration 800 (686.492 iter/s, 0.145668s/100 iters), loss = 0.222906
I0428 20:20:34.327303  1569 solver.cpp:238]     Train net output #0: loss = 0.222906 (* 1 = 0.222906 loss)
I0428 20:20:34.327327  1569 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:20:34.472522  1569 solver.cpp:219] Iteration 900 (688.675 iter/s, 0.145206s/100 iters), loss = 0.180374
I0428 20:20:34.472559  1569 solver.cpp:238]     Train net output #0: loss = 0.180374 (* 1 = 0.180374 loss)
I0428 20:20:34.472566  1569 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:20:34.520311  1577 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:34.616107  1569 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:20:34.618073  1569 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:20:34.619220  1569 solver.cpp:311] Iteration 1000, loss = 0.110711
I0428 20:20:34.619251  1569 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:20:34.685436  1578 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:20:34.687808  1569 solver.cpp:398]     Test net output #0: accuracy = 0.9765
I0428 20:20:34.687826  1569 solver.cpp:398]     Test net output #1: loss = 0.0735028 (* 1 = 0.0735028 loss)
I0428 20:20:34.687831  1569 solver.cpp:316] Optimization Done.
I0428 20:20:34.687834  1569 caffe.cpp:259] Optimization Done.
