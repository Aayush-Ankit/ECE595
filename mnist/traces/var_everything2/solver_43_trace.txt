I0428 19:28:57.480489 21886 caffe.cpp:218] Using GPUs 0
I0428 19:28:57.522117 21886 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:28:58.042351 21886 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test43.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:28:58.042520 21886 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test43.prototxt
I0428 19:28:58.042851 21886 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:28:58.042871 21886 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:28:58.042958 21886 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:28:58.043045 21886 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:58.043177 21886 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:28:58.043210 21886 net.cpp:86] Creating Layer mnist
I0428 19:28:58.043222 21886 net.cpp:382] mnist -> data
I0428 19:28:58.043253 21886 net.cpp:382] mnist -> label
I0428 19:28:58.044450 21886 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:28:58.047153 21886 net.cpp:124] Setting up mnist
I0428 19:28:58.047174 21886 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:28:58.047184 21886 net.cpp:131] Top shape: 64 (64)
I0428 19:28:58.047191 21886 net.cpp:139] Memory required for data: 200960
I0428 19:28:58.047202 21886 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:58.047225 21886 net.cpp:86] Creating Layer conv0
I0428 19:28:58.047236 21886 net.cpp:408] conv0 <- data
I0428 19:28:58.047255 21886 net.cpp:382] conv0 -> conv0
I0428 19:28:58.335018 21886 net.cpp:124] Setting up conv0
I0428 19:28:58.335050 21886 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:28:58.335057 21886 net.cpp:139] Memory required for data: 495872
I0428 19:28:58.335078 21886 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:58.335096 21886 net.cpp:86] Creating Layer pool0
I0428 19:28:58.335104 21886 net.cpp:408] pool0 <- conv0
I0428 19:28:58.335114 21886 net.cpp:382] pool0 -> pool0
I0428 19:28:58.335177 21886 net.cpp:124] Setting up pool0
I0428 19:28:58.335187 21886 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:28:58.335192 21886 net.cpp:139] Memory required for data: 569600
I0428 19:28:58.335216 21886 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:58.335230 21886 net.cpp:86] Creating Layer ip1
I0428 19:28:58.335237 21886 net.cpp:408] ip1 <- pool0
I0428 19:28:58.335245 21886 net.cpp:382] ip1 -> ip1
I0428 19:28:58.336244 21886 net.cpp:124] Setting up ip1
I0428 19:28:58.336261 21886 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:58.336266 21886 net.cpp:139] Memory required for data: 572160
I0428 19:28:58.336280 21886 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:58.336292 21886 net.cpp:86] Creating Layer relu1
I0428 19:28:58.336302 21886 net.cpp:408] relu1 <- ip1
I0428 19:28:58.336311 21886 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:58.336498 21886 net.cpp:124] Setting up relu1
I0428 19:28:58.336508 21886 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:58.336514 21886 net.cpp:139] Memory required for data: 574720
I0428 19:28:58.336520 21886 layer_factory.hpp:77] Creating layer ip2
I0428 19:28:58.336531 21886 net.cpp:86] Creating Layer ip2
I0428 19:28:58.336537 21886 net.cpp:408] ip2 <- ip1
I0428 19:28:58.336546 21886 net.cpp:382] ip2 -> ip2
I0428 19:28:58.336652 21886 net.cpp:124] Setting up ip2
I0428 19:28:58.336661 21886 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:58.336668 21886 net.cpp:139] Memory required for data: 577280
I0428 19:28:58.336681 21886 layer_factory.hpp:77] Creating layer relu2
I0428 19:28:58.336690 21886 net.cpp:86] Creating Layer relu2
I0428 19:28:58.336696 21886 net.cpp:408] relu2 <- ip2
I0428 19:28:58.336704 21886 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:28:58.337527 21886 net.cpp:124] Setting up relu2
I0428 19:28:58.337541 21886 net.cpp:131] Top shape: 64 10 (640)
I0428 19:28:58.337548 21886 net.cpp:139] Memory required for data: 579840
I0428 19:28:58.337553 21886 layer_factory.hpp:77] Creating layer loss
I0428 19:28:58.337563 21886 net.cpp:86] Creating Layer loss
I0428 19:28:58.337569 21886 net.cpp:408] loss <- ip2
I0428 19:28:58.337577 21886 net.cpp:408] loss <- label
I0428 19:28:58.337586 21886 net.cpp:382] loss -> loss
I0428 19:28:58.337607 21886 layer_factory.hpp:77] Creating layer loss
I0428 19:28:58.337851 21886 net.cpp:124] Setting up loss
I0428 19:28:58.337862 21886 net.cpp:131] Top shape: (1)
I0428 19:28:58.337868 21886 net.cpp:134]     with loss weight 1
I0428 19:28:58.337890 21886 net.cpp:139] Memory required for data: 579844
I0428 19:28:58.337896 21886 net.cpp:200] loss needs backward computation.
I0428 19:28:58.337903 21886 net.cpp:200] relu2 needs backward computation.
I0428 19:28:58.337908 21886 net.cpp:200] ip2 needs backward computation.
I0428 19:28:58.337913 21886 net.cpp:200] relu1 needs backward computation.
I0428 19:28:58.337918 21886 net.cpp:200] ip1 needs backward computation.
I0428 19:28:58.337924 21886 net.cpp:200] pool0 needs backward computation.
I0428 19:28:58.337929 21886 net.cpp:200] conv0 needs backward computation.
I0428 19:28:58.337935 21886 net.cpp:202] mnist does not need backward computation.
I0428 19:28:58.337940 21886 net.cpp:244] This network produces output loss
I0428 19:28:58.337952 21886 net.cpp:257] Network initialization done.
I0428 19:28:58.338217 21886 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test43.prototxt
I0428 19:28:58.338248 21886 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:28:58.338330 21886 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:28:58.338429 21886 layer_factory.hpp:77] Creating layer mnist
I0428 19:28:58.338491 21886 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:28:58.338508 21886 net.cpp:86] Creating Layer mnist
I0428 19:28:58.338516 21886 net.cpp:382] mnist -> data
I0428 19:28:58.338528 21886 net.cpp:382] mnist -> label
I0428 19:28:58.338650 21886 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:28:58.340629 21886 net.cpp:124] Setting up mnist
I0428 19:28:58.340646 21886 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:28:58.340654 21886 net.cpp:131] Top shape: 100 (100)
I0428 19:28:58.340659 21886 net.cpp:139] Memory required for data: 314000
I0428 19:28:58.340665 21886 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:28:58.340675 21886 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:28:58.340682 21886 net.cpp:408] label_mnist_1_split <- label
I0428 19:28:58.340690 21886 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:28:58.340700 21886 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:28:58.340821 21886 net.cpp:124] Setting up label_mnist_1_split
I0428 19:28:58.340831 21886 net.cpp:131] Top shape: 100 (100)
I0428 19:28:58.340837 21886 net.cpp:131] Top shape: 100 (100)
I0428 19:28:58.340842 21886 net.cpp:139] Memory required for data: 314800
I0428 19:28:58.340848 21886 layer_factory.hpp:77] Creating layer conv0
I0428 19:28:58.340878 21886 net.cpp:86] Creating Layer conv0
I0428 19:28:58.340884 21886 net.cpp:408] conv0 <- data
I0428 19:28:58.340893 21886 net.cpp:382] conv0 -> conv0
I0428 19:28:58.342535 21886 net.cpp:124] Setting up conv0
I0428 19:28:58.342552 21886 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:28:58.342557 21886 net.cpp:139] Memory required for data: 775600
I0428 19:28:58.342573 21886 layer_factory.hpp:77] Creating layer pool0
I0428 19:28:58.342586 21886 net.cpp:86] Creating Layer pool0
I0428 19:28:58.342597 21886 net.cpp:408] pool0 <- conv0
I0428 19:28:58.342605 21886 net.cpp:382] pool0 -> pool0
I0428 19:28:58.342650 21886 net.cpp:124] Setting up pool0
I0428 19:28:58.342659 21886 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:28:58.342664 21886 net.cpp:139] Memory required for data: 890800
I0428 19:28:58.342669 21886 layer_factory.hpp:77] Creating layer ip1
I0428 19:28:58.342680 21886 net.cpp:86] Creating Layer ip1
I0428 19:28:58.342686 21886 net.cpp:408] ip1 <- pool0
I0428 19:28:58.342696 21886 net.cpp:382] ip1 -> ip1
I0428 19:28:58.342821 21886 net.cpp:124] Setting up ip1
I0428 19:28:58.342830 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.342835 21886 net.cpp:139] Memory required for data: 894800
I0428 19:28:58.342847 21886 layer_factory.hpp:77] Creating layer relu1
I0428 19:28:58.342856 21886 net.cpp:86] Creating Layer relu1
I0428 19:28:58.342862 21886 net.cpp:408] relu1 <- ip1
I0428 19:28:58.342872 21886 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:28:58.343042 21886 net.cpp:124] Setting up relu1
I0428 19:28:58.343055 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.343060 21886 net.cpp:139] Memory required for data: 898800
I0428 19:28:58.343076 21886 layer_factory.hpp:77] Creating layer ip2
I0428 19:28:58.343087 21886 net.cpp:86] Creating Layer ip2
I0428 19:28:58.343094 21886 net.cpp:408] ip2 <- ip1
I0428 19:28:58.343103 21886 net.cpp:382] ip2 -> ip2
I0428 19:28:58.343228 21886 net.cpp:124] Setting up ip2
I0428 19:28:58.343237 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.343242 21886 net.cpp:139] Memory required for data: 902800
I0428 19:28:58.343255 21886 layer_factory.hpp:77] Creating layer relu2
I0428 19:28:58.343263 21886 net.cpp:86] Creating Layer relu2
I0428 19:28:58.343269 21886 net.cpp:408] relu2 <- ip2
I0428 19:28:58.343281 21886 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:28:58.343540 21886 net.cpp:124] Setting up relu2
I0428 19:28:58.343552 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.343557 21886 net.cpp:139] Memory required for data: 906800
I0428 19:28:58.343562 21886 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:28:58.343575 21886 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:28:58.343580 21886 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:28:58.343588 21886 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:28:58.343600 21886 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:28:58.343647 21886 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:28:58.343654 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.343662 21886 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:28:58.343665 21886 net.cpp:139] Memory required for data: 914800
I0428 19:28:58.343670 21886 layer_factory.hpp:77] Creating layer accuracy
I0428 19:28:58.343682 21886 net.cpp:86] Creating Layer accuracy
I0428 19:28:58.343686 21886 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:28:58.343693 21886 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:28:58.343701 21886 net.cpp:382] accuracy -> accuracy
I0428 19:28:58.343713 21886 net.cpp:124] Setting up accuracy
I0428 19:28:58.343721 21886 net.cpp:131] Top shape: (1)
I0428 19:28:58.343727 21886 net.cpp:139] Memory required for data: 914804
I0428 19:28:58.343732 21886 layer_factory.hpp:77] Creating layer loss
I0428 19:28:58.343739 21886 net.cpp:86] Creating Layer loss
I0428 19:28:58.343745 21886 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:28:58.343751 21886 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:28:58.343760 21886 net.cpp:382] loss -> loss
I0428 19:28:58.343771 21886 layer_factory.hpp:77] Creating layer loss
I0428 19:28:58.344681 21886 net.cpp:124] Setting up loss
I0428 19:28:58.344698 21886 net.cpp:131] Top shape: (1)
I0428 19:28:58.344704 21886 net.cpp:134]     with loss weight 1
I0428 19:28:58.344713 21886 net.cpp:139] Memory required for data: 914808
I0428 19:28:58.344719 21886 net.cpp:200] loss needs backward computation.
I0428 19:28:58.344727 21886 net.cpp:202] accuracy does not need backward computation.
I0428 19:28:58.344732 21886 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:28:58.344738 21886 net.cpp:200] relu2 needs backward computation.
I0428 19:28:58.344743 21886 net.cpp:200] ip2 needs backward computation.
I0428 19:28:58.344748 21886 net.cpp:200] relu1 needs backward computation.
I0428 19:28:58.344753 21886 net.cpp:200] ip1 needs backward computation.
I0428 19:28:58.344758 21886 net.cpp:200] pool0 needs backward computation.
I0428 19:28:58.344763 21886 net.cpp:200] conv0 needs backward computation.
I0428 19:28:58.344769 21886 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:28:58.344774 21886 net.cpp:202] mnist does not need backward computation.
I0428 19:28:58.344779 21886 net.cpp:244] This network produces output accuracy
I0428 19:28:58.344785 21886 net.cpp:244] This network produces output loss
I0428 19:28:58.344802 21886 net.cpp:257] Network initialization done.
I0428 19:28:58.344851 21886 solver.cpp:56] Solver scaffolding done.
I0428 19:28:58.345093 21886 caffe.cpp:248] Starting Optimization
I0428 19:28:58.345100 21886 solver.cpp:273] Solving LeNet
I0428 19:28:58.345105 21886 solver.cpp:274] Learning Rate Policy: inv
I0428 19:28:58.345872 21886 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:28:58.348310 21886 blocking_queue.cpp:49] Waiting for data
I0428 19:28:58.420912 21893 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:58.421325 21886 solver.cpp:398]     Test net output #0: accuracy = 0.0962
I0428 19:28:58.421357 21886 solver.cpp:398]     Test net output #1: loss = 2.31209 (* 1 = 2.31209 loss)
I0428 19:28:58.423028 21886 solver.cpp:219] Iteration 0 (0 iter/s, 0.0778677s/100 iters), loss = 2.33204
I0428 19:28:58.423056 21886 solver.cpp:238]     Train net output #0: loss = 2.33204 (* 1 = 2.33204 loss)
I0428 19:28:58.423091 21886 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:28:58.482870 21886 solver.cpp:219] Iteration 100 (1672.17 iter/s, 0.0598026s/100 iters), loss = 0.941604
I0428 19:28:58.482913 21886 solver.cpp:238]     Train net output #0: loss = 0.941604 (* 1 = 0.941604 loss)
I0428 19:28:58.482928 21886 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:28:58.538373 21886 solver.cpp:219] Iteration 200 (1803.13 iter/s, 0.0554593s/100 iters), loss = 0.683411
I0428 19:28:58.538405 21886 solver.cpp:238]     Train net output #0: loss = 0.683411 (* 1 = 0.683411 loss)
I0428 19:28:58.538421 21886 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:28:58.590176 21886 solver.cpp:219] Iteration 300 (1931.73 iter/s, 0.0517672s/100 iters), loss = 0.447626
I0428 19:28:58.590207 21886 solver.cpp:238]     Train net output #0: loss = 0.447626 (* 1 = 0.447626 loss)
I0428 19:28:58.590219 21886 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:28:58.638193 21886 solver.cpp:219] Iteration 400 (2084.22 iter/s, 0.0479797s/100 iters), loss = 0.448165
I0428 19:28:58.638233 21886 solver.cpp:238]     Train net output #0: loss = 0.448165 (* 1 = 0.448165 loss)
I0428 19:28:58.638247 21886 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:28:58.686569 21886 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:28:58.766854 21893 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:58.767243 21886 solver.cpp:398]     Test net output #0: accuracy = 0.8274
I0428 19:28:58.767266 21886 solver.cpp:398]     Test net output #1: loss = 0.514269 (* 1 = 0.514269 loss)
I0428 19:28:58.767887 21886 solver.cpp:219] Iteration 500 (771.332 iter/s, 0.129646s/100 iters), loss = 0.627671
I0428 19:28:58.767913 21886 solver.cpp:238]     Train net output #0: loss = 0.627671 (* 1 = 0.627671 loss)
I0428 19:28:58.767923 21886 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:28:58.824795 21886 solver.cpp:219] Iteration 600 (1758.43 iter/s, 0.0568691s/100 iters), loss = 0.4821
I0428 19:28:58.824868 21886 solver.cpp:238]     Train net output #0: loss = 0.4821 (* 1 = 0.4821 loss)
I0428 19:28:58.824884 21886 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:28:58.890154 21886 solver.cpp:219] Iteration 700 (1531.84 iter/s, 0.065281s/100 iters), loss = 0.560154
I0428 19:28:58.890189 21886 solver.cpp:238]     Train net output #0: loss = 0.560154 (* 1 = 0.560154 loss)
I0428 19:28:58.890208 21886 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:28:58.944357 21886 solver.cpp:219] Iteration 800 (1846.33 iter/s, 0.0541614s/100 iters), loss = 0.683025
I0428 19:28:58.944386 21886 solver.cpp:238]     Train net output #0: loss = 0.683025 (* 1 = 0.683025 loss)
I0428 19:28:58.944406 21886 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:28:58.995189 21886 solver.cpp:219] Iteration 900 (1968.71 iter/s, 0.0507947s/100 iters), loss = 0.425301
I0428 19:28:58.995218 21886 solver.cpp:238]     Train net output #0: loss = 0.425301 (* 1 = 0.425301 loss)
I0428 19:28:58.995237 21886 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:28:59.012265 21892 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:59.045441 21886 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:28:59.045994 21886 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:28:59.046533 21886 solver.cpp:311] Iteration 1000, loss = 0.471592
I0428 19:28:59.046563 21886 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:28:59.100751 21893 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:28:59.101233 21886 solver.cpp:398]     Test net output #0: accuracy = 0.8432
I0428 19:28:59.101263 21886 solver.cpp:398]     Test net output #1: loss = 0.450455 (* 1 = 0.450455 loss)
I0428 19:28:59.101271 21886 solver.cpp:316] Optimization Done.
I0428 19:28:59.101276 21886 caffe.cpp:259] Optimization Done.
