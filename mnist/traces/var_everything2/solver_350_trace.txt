I0428 19:40:57.225734 24702 caffe.cpp:218] Using GPUs 0
I0428 19:40:57.265151 24702 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:57.784940 24702 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test350.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:57.785112 24702 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test350.prototxt
I0428 19:40:57.785538 24702 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:57.785564 24702 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:57.785678 24702 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:57.785795 24702 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:57.785926 24702 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:57.785959 24702 net.cpp:86] Creating Layer mnist
I0428 19:40:57.785970 24702 net.cpp:382] mnist -> data
I0428 19:40:57.786005 24702 net.cpp:382] mnist -> label
I0428 19:40:57.787272 24702 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:57.789752 24702 net.cpp:124] Setting up mnist
I0428 19:40:57.789772 24702 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:57.789783 24702 net.cpp:131] Top shape: 64 (64)
I0428 19:40:57.789788 24702 net.cpp:139] Memory required for data: 200960
I0428 19:40:57.789798 24702 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:57.789824 24702 net.cpp:86] Creating Layer conv0
I0428 19:40:57.789849 24702 net.cpp:408] conv0 <- data
I0428 19:40:57.789868 24702 net.cpp:382] conv0 -> conv0
I0428 19:40:58.080648 24702 net.cpp:124] Setting up conv0
I0428 19:40:58.080680 24702 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:58.080687 24702 net.cpp:139] Memory required for data: 495872
I0428 19:40:58.080709 24702 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:58.080729 24702 net.cpp:86] Creating Layer pool0
I0428 19:40:58.080735 24702 net.cpp:408] pool0 <- conv0
I0428 19:40:58.080745 24702 net.cpp:382] pool0 -> pool0
I0428 19:40:58.080819 24702 net.cpp:124] Setting up pool0
I0428 19:40:58.080829 24702 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:58.080835 24702 net.cpp:139] Memory required for data: 569600
I0428 19:40:58.080842 24702 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:58.080859 24702 net.cpp:86] Creating Layer conv1
I0428 19:40:58.080868 24702 net.cpp:408] conv1 <- pool0
I0428 19:40:58.080878 24702 net.cpp:382] conv1 -> conv1
I0428 19:40:58.082866 24702 net.cpp:124] Setting up conv1
I0428 19:40:58.082885 24702 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:58.082891 24702 net.cpp:139] Memory required for data: 651520
I0428 19:40:58.082906 24702 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:58.082918 24702 net.cpp:86] Creating Layer pool1
I0428 19:40:58.082926 24702 net.cpp:408] pool1 <- conv1
I0428 19:40:58.082936 24702 net.cpp:382] pool1 -> pool1
I0428 19:40:58.082984 24702 net.cpp:124] Setting up pool1
I0428 19:40:58.082994 24702 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:58.083000 24702 net.cpp:139] Memory required for data: 672000
I0428 19:40:58.083006 24702 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:58.083019 24702 net.cpp:86] Creating Layer ip1
I0428 19:40:58.083024 24702 net.cpp:408] ip1 <- pool1
I0428 19:40:58.083034 24702 net.cpp:382] ip1 -> ip1
I0428 19:40:58.084065 24702 net.cpp:124] Setting up ip1
I0428 19:40:58.084081 24702 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:58.084087 24702 net.cpp:139] Memory required for data: 684800
I0428 19:40:58.084101 24702 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:58.084111 24702 net.cpp:86] Creating Layer relu1
I0428 19:40:58.084118 24702 net.cpp:408] relu1 <- ip1
I0428 19:40:58.084127 24702 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:58.084321 24702 net.cpp:124] Setting up relu1
I0428 19:40:58.084333 24702 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:58.084339 24702 net.cpp:139] Memory required for data: 697600
I0428 19:40:58.084345 24702 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:58.084357 24702 net.cpp:86] Creating Layer ip2
I0428 19:40:58.084362 24702 net.cpp:408] ip2 <- ip1
I0428 19:40:58.084372 24702 net.cpp:382] ip2 -> ip2
I0428 19:40:58.084502 24702 net.cpp:124] Setting up ip2
I0428 19:40:58.084512 24702 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:58.084518 24702 net.cpp:139] Memory required for data: 710400
I0428 19:40:58.084528 24702 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:58.084539 24702 net.cpp:86] Creating Layer relu2
I0428 19:40:58.084550 24702 net.cpp:408] relu2 <- ip2
I0428 19:40:58.084558 24702 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:58.085366 24702 net.cpp:124] Setting up relu2
I0428 19:40:58.085381 24702 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:58.085388 24702 net.cpp:139] Memory required for data: 723200
I0428 19:40:58.085394 24702 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:58.085405 24702 net.cpp:86] Creating Layer ip3
I0428 19:40:58.085412 24702 net.cpp:408] ip3 <- ip2
I0428 19:40:58.085422 24702 net.cpp:382] ip3 -> ip3
I0428 19:40:58.085546 24702 net.cpp:124] Setting up ip3
I0428 19:40:58.085557 24702 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:58.085563 24702 net.cpp:139] Memory required for data: 725760
I0428 19:40:58.085577 24702 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:58.085592 24702 net.cpp:86] Creating Layer relu3
I0428 19:40:58.085599 24702 net.cpp:408] relu3 <- ip3
I0428 19:40:58.085608 24702 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:58.085798 24702 net.cpp:124] Setting up relu3
I0428 19:40:58.085808 24702 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:58.085813 24702 net.cpp:139] Memory required for data: 728320
I0428 19:40:58.085819 24702 layer_factory.hpp:77] Creating layer loss
I0428 19:40:58.085829 24702 net.cpp:86] Creating Layer loss
I0428 19:40:58.085835 24702 net.cpp:408] loss <- ip3
I0428 19:40:58.085842 24702 net.cpp:408] loss <- label
I0428 19:40:58.085852 24702 net.cpp:382] loss -> loss
I0428 19:40:58.085878 24702 layer_factory.hpp:77] Creating layer loss
I0428 19:40:58.086139 24702 net.cpp:124] Setting up loss
I0428 19:40:58.086153 24702 net.cpp:131] Top shape: (1)
I0428 19:40:58.086158 24702 net.cpp:134]     with loss weight 1
I0428 19:40:58.086179 24702 net.cpp:139] Memory required for data: 728324
I0428 19:40:58.086185 24702 net.cpp:200] loss needs backward computation.
I0428 19:40:58.086194 24702 net.cpp:200] relu3 needs backward computation.
I0428 19:40:58.086199 24702 net.cpp:200] ip3 needs backward computation.
I0428 19:40:58.086205 24702 net.cpp:200] relu2 needs backward computation.
I0428 19:40:58.086210 24702 net.cpp:200] ip2 needs backward computation.
I0428 19:40:58.086215 24702 net.cpp:200] relu1 needs backward computation.
I0428 19:40:58.086220 24702 net.cpp:200] ip1 needs backward computation.
I0428 19:40:58.086226 24702 net.cpp:200] pool1 needs backward computation.
I0428 19:40:58.086232 24702 net.cpp:200] conv1 needs backward computation.
I0428 19:40:58.086238 24702 net.cpp:200] pool0 needs backward computation.
I0428 19:40:58.086244 24702 net.cpp:200] conv0 needs backward computation.
I0428 19:40:58.086251 24702 net.cpp:202] mnist does not need backward computation.
I0428 19:40:58.086256 24702 net.cpp:244] This network produces output loss
I0428 19:40:58.086272 24702 net.cpp:257] Network initialization done.
I0428 19:40:58.086627 24702 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test350.prototxt
I0428 19:40:58.086664 24702 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:58.086791 24702 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:58.086916 24702 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:58.086984 24702 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:58.087003 24702 net.cpp:86] Creating Layer mnist
I0428 19:40:58.087011 24702 net.cpp:382] mnist -> data
I0428 19:40:58.087024 24702 net.cpp:382] mnist -> label
I0428 19:40:58.087154 24702 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:58.089563 24702 net.cpp:124] Setting up mnist
I0428 19:40:58.089581 24702 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:58.089589 24702 net.cpp:131] Top shape: 100 (100)
I0428 19:40:58.089596 24702 net.cpp:139] Memory required for data: 314000
I0428 19:40:58.089601 24702 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:58.089617 24702 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:58.089624 24702 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:58.089632 24702 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:58.089644 24702 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:58.089728 24702 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:58.089738 24702 net.cpp:131] Top shape: 100 (100)
I0428 19:40:58.089745 24702 net.cpp:131] Top shape: 100 (100)
I0428 19:40:58.089751 24702 net.cpp:139] Memory required for data: 314800
I0428 19:40:58.089756 24702 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:58.089771 24702 net.cpp:86] Creating Layer conv0
I0428 19:40:58.089777 24702 net.cpp:408] conv0 <- data
I0428 19:40:58.089787 24702 net.cpp:382] conv0 -> conv0
I0428 19:40:58.091323 24702 net.cpp:124] Setting up conv0
I0428 19:40:58.091339 24702 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:58.091346 24702 net.cpp:139] Memory required for data: 775600
I0428 19:40:58.091361 24702 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:58.091373 24702 net.cpp:86] Creating Layer pool0
I0428 19:40:58.091380 24702 net.cpp:408] pool0 <- conv0
I0428 19:40:58.091389 24702 net.cpp:382] pool0 -> pool0
I0428 19:40:58.091437 24702 net.cpp:124] Setting up pool0
I0428 19:40:58.091446 24702 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:58.091451 24702 net.cpp:139] Memory required for data: 890800
I0428 19:40:58.091456 24702 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:58.091472 24702 net.cpp:86] Creating Layer conv1
I0428 19:40:58.091480 24702 net.cpp:408] conv1 <- pool0
I0428 19:40:58.091490 24702 net.cpp:382] conv1 -> conv1
I0428 19:40:58.093010 24702 net.cpp:124] Setting up conv1
I0428 19:40:58.093026 24702 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:58.093034 24702 net.cpp:139] Memory required for data: 1018800
I0428 19:40:58.093049 24702 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:58.093058 24702 net.cpp:86] Creating Layer pool1
I0428 19:40:58.093066 24702 net.cpp:408] pool1 <- conv1
I0428 19:40:58.093075 24702 net.cpp:382] pool1 -> pool1
I0428 19:40:58.093132 24702 net.cpp:124] Setting up pool1
I0428 19:40:58.093143 24702 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:58.093164 24702 net.cpp:139] Memory required for data: 1050800
I0428 19:40:58.093170 24702 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:58.093186 24702 net.cpp:86] Creating Layer ip1
I0428 19:40:58.093194 24702 net.cpp:408] ip1 <- pool1
I0428 19:40:58.093204 24702 net.cpp:382] ip1 -> ip1
I0428 19:40:58.093354 24702 net.cpp:124] Setting up ip1
I0428 19:40:58.093364 24702 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:58.093381 24702 net.cpp:139] Memory required for data: 1070800
I0428 19:40:58.093395 24702 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:58.093408 24702 net.cpp:86] Creating Layer relu1
I0428 19:40:58.093415 24702 net.cpp:408] relu1 <- ip1
I0428 19:40:58.093423 24702 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:58.093608 24702 net.cpp:124] Setting up relu1
I0428 19:40:58.093626 24702 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:58.093638 24702 net.cpp:139] Memory required for data: 1090800
I0428 19:40:58.093644 24702 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:58.093658 24702 net.cpp:86] Creating Layer ip2
I0428 19:40:58.093665 24702 net.cpp:408] ip2 <- ip1
I0428 19:40:58.093679 24702 net.cpp:382] ip2 -> ip2
I0428 19:40:58.093813 24702 net.cpp:124] Setting up ip2
I0428 19:40:58.093823 24702 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:58.093828 24702 net.cpp:139] Memory required for data: 1110800
I0428 19:40:58.093838 24702 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:58.093848 24702 net.cpp:86] Creating Layer relu2
I0428 19:40:58.093854 24702 net.cpp:408] relu2 <- ip2
I0428 19:40:58.093861 24702 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:58.094038 24702 net.cpp:124] Setting up relu2
I0428 19:40:58.094048 24702 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:58.094053 24702 net.cpp:139] Memory required for data: 1130800
I0428 19:40:58.094059 24702 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:58.094070 24702 net.cpp:86] Creating Layer ip3
I0428 19:40:58.094076 24702 net.cpp:408] ip3 <- ip2
I0428 19:40:58.094086 24702 net.cpp:382] ip3 -> ip3
I0428 19:40:58.094208 24702 net.cpp:124] Setting up ip3
I0428 19:40:58.094218 24702 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:58.094223 24702 net.cpp:139] Memory required for data: 1134800
I0428 19:40:58.094244 24702 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:58.094252 24702 net.cpp:86] Creating Layer relu3
I0428 19:40:58.094265 24702 net.cpp:408] relu3 <- ip3
I0428 19:40:58.094272 24702 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:58.095113 24702 net.cpp:124] Setting up relu3
I0428 19:40:58.095127 24702 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:58.095134 24702 net.cpp:139] Memory required for data: 1138800
I0428 19:40:58.095139 24702 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:58.095147 24702 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:58.095155 24702 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:58.095165 24702 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:58.095176 24702 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:58.095242 24702 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:58.095252 24702 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:58.095259 24702 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:58.095271 24702 net.cpp:139] Memory required for data: 1146800
I0428 19:40:58.095278 24702 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:58.095286 24702 net.cpp:86] Creating Layer accuracy
I0428 19:40:58.095293 24702 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:58.095300 24702 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:58.095309 24702 net.cpp:382] accuracy -> accuracy
I0428 19:40:58.095320 24702 net.cpp:124] Setting up accuracy
I0428 19:40:58.095329 24702 net.cpp:131] Top shape: (1)
I0428 19:40:58.095335 24702 net.cpp:139] Memory required for data: 1146804
I0428 19:40:58.095340 24702 layer_factory.hpp:77] Creating layer loss
I0428 19:40:58.095350 24702 net.cpp:86] Creating Layer loss
I0428 19:40:58.095356 24702 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:58.095363 24702 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:58.095371 24702 net.cpp:382] loss -> loss
I0428 19:40:58.095381 24702 layer_factory.hpp:77] Creating layer loss
I0428 19:40:58.095646 24702 net.cpp:124] Setting up loss
I0428 19:40:58.095657 24702 net.cpp:131] Top shape: (1)
I0428 19:40:58.095664 24702 net.cpp:134]     with loss weight 1
I0428 19:40:58.095674 24702 net.cpp:139] Memory required for data: 1146808
I0428 19:40:58.095690 24702 net.cpp:200] loss needs backward computation.
I0428 19:40:58.095696 24702 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:58.095703 24702 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:58.095710 24702 net.cpp:200] relu3 needs backward computation.
I0428 19:40:58.095715 24702 net.cpp:200] ip3 needs backward computation.
I0428 19:40:58.095719 24702 net.cpp:200] relu2 needs backward computation.
I0428 19:40:58.095724 24702 net.cpp:200] ip2 needs backward computation.
I0428 19:40:58.095737 24702 net.cpp:200] relu1 needs backward computation.
I0428 19:40:58.095742 24702 net.cpp:200] ip1 needs backward computation.
I0428 19:40:58.095748 24702 net.cpp:200] pool1 needs backward computation.
I0428 19:40:58.095753 24702 net.cpp:200] conv1 needs backward computation.
I0428 19:40:58.095759 24702 net.cpp:200] pool0 needs backward computation.
I0428 19:40:58.095765 24702 net.cpp:200] conv0 needs backward computation.
I0428 19:40:58.095772 24702 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:58.095780 24702 net.cpp:202] mnist does not need backward computation.
I0428 19:40:58.095785 24702 net.cpp:244] This network produces output accuracy
I0428 19:40:58.095793 24702 net.cpp:244] This network produces output loss
I0428 19:40:58.095810 24702 net.cpp:257] Network initialization done.
I0428 19:40:58.095862 24702 solver.cpp:56] Solver scaffolding done.
I0428 19:40:58.096233 24702 caffe.cpp:248] Starting Optimization
I0428 19:40:58.096240 24702 solver.cpp:273] Solving LeNet
I0428 19:40:58.096246 24702 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:58.097069 24702 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:58.098642 24702 blocking_queue.cpp:49] Waiting for data
I0428 19:40:58.164829 24709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:58.165300 24702 solver.cpp:398]     Test net output #0: accuracy = 0.0703
I0428 19:40:58.165319 24702 solver.cpp:398]     Test net output #1: loss = 2.33359 (* 1 = 2.33359 loss)
I0428 19:40:58.167016 24702 solver.cpp:219] Iteration 0 (0 iter/s, 0.07074s/100 iters), loss = 2.33447
I0428 19:40:58.167044 24702 solver.cpp:238]     Train net output #0: loss = 2.33447 (* 1 = 2.33447 loss)
I0428 19:40:58.167060 24702 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:58.239748 24702 solver.cpp:219] Iteration 100 (1375.63 iter/s, 0.0726938s/100 iters), loss = 1.3688
I0428 19:40:58.239776 24702 solver.cpp:238]     Train net output #0: loss = 1.3688 (* 1 = 1.3688 loss)
I0428 19:40:58.239786 24702 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:58.309830 24702 solver.cpp:219] Iteration 200 (1427.74 iter/s, 0.0700407s/100 iters), loss = 0.879608
I0428 19:40:58.309859 24702 solver.cpp:238]     Train net output #0: loss = 0.879608 (* 1 = 0.879608 loss)
I0428 19:40:58.309869 24702 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:58.378798 24702 solver.cpp:219] Iteration 300 (1450.74 iter/s, 0.0689306s/100 iters), loss = 0.928369
I0428 19:40:58.378829 24702 solver.cpp:238]     Train net output #0: loss = 0.928369 (* 1 = 0.928369 loss)
I0428 19:40:58.378839 24702 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:58.446274 24702 solver.cpp:219] Iteration 400 (1482.79 iter/s, 0.0674405s/100 iters), loss = 1.29386
I0428 19:40:58.446300 24702 solver.cpp:238]     Train net output #0: loss = 1.29386 (* 1 = 1.29386 loss)
I0428 19:40:58.446326 24702 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:58.514046 24702 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:58.567262 24709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:58.567693 24702 solver.cpp:398]     Test net output #0: accuracy = 0.6404
I0428 19:40:58.567713 24702 solver.cpp:398]     Test net output #1: loss = 1.09151 (* 1 = 1.09151 loss)
I0428 19:40:58.568398 24702 solver.cpp:219] Iteration 500 (819.071 iter/s, 0.122089s/100 iters), loss = 1.18726
I0428 19:40:58.568450 24702 solver.cpp:238]     Train net output #0: loss = 1.18726 (* 1 = 1.18726 loss)
I0428 19:40:58.568480 24702 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:58.639693 24702 solver.cpp:219] Iteration 600 (1404.06 iter/s, 0.0712223s/100 iters), loss = 0.684265
I0428 19:40:58.639721 24702 solver.cpp:238]     Train net output #0: loss = 0.684265 (* 1 = 0.684265 loss)
I0428 19:40:58.639731 24702 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:58.709954 24702 solver.cpp:219] Iteration 700 (1424.04 iter/s, 0.0702229s/100 iters), loss = 0.508769
I0428 19:40:58.709980 24702 solver.cpp:238]     Train net output #0: loss = 0.508769 (* 1 = 0.508769 loss)
I0428 19:40:58.709990 24702 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:58.779650 24702 solver.cpp:219] Iteration 800 (1435.64 iter/s, 0.0696556s/100 iters), loss = 0.493685
I0428 19:40:58.779680 24702 solver.cpp:238]     Train net output #0: loss = 0.493685 (* 1 = 0.493685 loss)
I0428 19:40:58.779691 24702 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:58.848882 24702 solver.cpp:219] Iteration 900 (1445.19 iter/s, 0.069195s/100 iters), loss = 0.501188
I0428 19:40:58.848914 24702 solver.cpp:238]     Train net output #0: loss = 0.501188 (* 1 = 0.501188 loss)
I0428 19:40:58.848924 24702 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:58.871575 24708 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:58.916409 24702 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:58.917296 24702 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:58.917791 24702 solver.cpp:311] Iteration 1000, loss = 0.420989
I0428 19:40:58.917820 24702 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:58.992625 24709 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:58.993132 24702 solver.cpp:398]     Test net output #0: accuracy = 0.8451
I0428 19:40:58.993152 24702 solver.cpp:398]     Test net output #1: loss = 0.400933 (* 1 = 0.400933 loss)
I0428 19:40:58.993160 24702 solver.cpp:316] Optimization Done.
I0428 19:40:58.993165 24702 caffe.cpp:259] Optimization Done.
