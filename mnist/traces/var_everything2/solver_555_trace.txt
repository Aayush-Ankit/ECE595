I0428 19:48:47.505370 26597 caffe.cpp:218] Using GPUs 0
I0428 19:48:47.543107 26597 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:48.058526 26597 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test555.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:48.058662 26597 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test555.prototxt
I0428 19:48:48.059046 26597 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:48.059064 26597 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:48.059154 26597 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:48.059231 26597 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:48.059329 26597 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:48.059352 26597 net.cpp:86] Creating Layer mnist
I0428 19:48:48.059360 26597 net.cpp:382] mnist -> data
I0428 19:48:48.059383 26597 net.cpp:382] mnist -> label
I0428 19:48:48.060477 26597 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:48.062948 26597 net.cpp:124] Setting up mnist
I0428 19:48:48.062965 26597 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:48.062973 26597 net.cpp:131] Top shape: 64 (64)
I0428 19:48:48.062975 26597 net.cpp:139] Memory required for data: 200960
I0428 19:48:48.062983 26597 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:48.063027 26597 net.cpp:86] Creating Layer conv0
I0428 19:48:48.063035 26597 net.cpp:408] conv0 <- data
I0428 19:48:48.063050 26597 net.cpp:382] conv0 -> conv0
I0428 19:48:48.339645 26597 net.cpp:124] Setting up conv0
I0428 19:48:48.339675 26597 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:48.339680 26597 net.cpp:139] Memory required for data: 938240
I0428 19:48:48.339716 26597 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:48.339730 26597 net.cpp:86] Creating Layer pool0
I0428 19:48:48.339735 26597 net.cpp:408] pool0 <- conv0
I0428 19:48:48.339741 26597 net.cpp:382] pool0 -> pool0
I0428 19:48:48.339795 26597 net.cpp:124] Setting up pool0
I0428 19:48:48.339803 26597 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:48.339807 26597 net.cpp:139] Memory required for data: 1122560
I0428 19:48:48.339810 26597 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:48.339823 26597 net.cpp:86] Creating Layer conv1
I0428 19:48:48.339829 26597 net.cpp:408] conv1 <- pool0
I0428 19:48:48.339838 26597 net.cpp:382] conv1 -> conv1
I0428 19:48:48.341877 26597 net.cpp:124] Setting up conv1
I0428 19:48:48.341895 26597 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:48.341902 26597 net.cpp:139] Memory required for data: 1204480
I0428 19:48:48.341915 26597 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:48.341929 26597 net.cpp:86] Creating Layer pool1
I0428 19:48:48.341935 26597 net.cpp:408] pool1 <- conv1
I0428 19:48:48.341944 26597 net.cpp:382] pool1 -> pool1
I0428 19:48:48.341994 26597 net.cpp:124] Setting up pool1
I0428 19:48:48.342003 26597 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:48.342010 26597 net.cpp:139] Memory required for data: 1224960
I0428 19:48:48.342015 26597 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:48.342026 26597 net.cpp:86] Creating Layer ip1
I0428 19:48:48.342032 26597 net.cpp:408] ip1 <- pool1
I0428 19:48:48.342041 26597 net.cpp:382] ip1 -> ip1
I0428 19:48:48.343101 26597 net.cpp:124] Setting up ip1
I0428 19:48:48.343116 26597 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:48.343122 26597 net.cpp:139] Memory required for data: 1237760
I0428 19:48:48.343134 26597 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:48.343144 26597 net.cpp:86] Creating Layer relu1
I0428 19:48:48.343150 26597 net.cpp:408] relu1 <- ip1
I0428 19:48:48.343158 26597 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:48.343367 26597 net.cpp:124] Setting up relu1
I0428 19:48:48.343377 26597 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:48.343382 26597 net.cpp:139] Memory required for data: 1250560
I0428 19:48:48.343387 26597 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:48.343399 26597 net.cpp:86] Creating Layer ip2
I0428 19:48:48.343403 26597 net.cpp:408] ip2 <- ip1
I0428 19:48:48.343426 26597 net.cpp:382] ip2 -> ip2
I0428 19:48:48.343531 26597 net.cpp:124] Setting up ip2
I0428 19:48:48.343540 26597 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:48.343544 26597 net.cpp:139] Memory required for data: 1253120
I0428 19:48:48.343554 26597 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:48.343562 26597 net.cpp:86] Creating Layer relu2
I0428 19:48:48.343572 26597 net.cpp:408] relu2 <- ip2
I0428 19:48:48.343580 26597 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:48.344301 26597 net.cpp:124] Setting up relu2
I0428 19:48:48.344314 26597 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:48.344319 26597 net.cpp:139] Memory required for data: 1255680
I0428 19:48:48.344326 26597 layer_factory.hpp:77] Creating layer loss
I0428 19:48:48.344333 26597 net.cpp:86] Creating Layer loss
I0428 19:48:48.344338 26597 net.cpp:408] loss <- ip2
I0428 19:48:48.344346 26597 net.cpp:408] loss <- label
I0428 19:48:48.344353 26597 net.cpp:382] loss -> loss
I0428 19:48:48.344379 26597 layer_factory.hpp:77] Creating layer loss
I0428 19:48:48.344619 26597 net.cpp:124] Setting up loss
I0428 19:48:48.344630 26597 net.cpp:131] Top shape: (1)
I0428 19:48:48.344635 26597 net.cpp:134]     with loss weight 1
I0428 19:48:48.344653 26597 net.cpp:139] Memory required for data: 1255684
I0428 19:48:48.344658 26597 net.cpp:200] loss needs backward computation.
I0428 19:48:48.344665 26597 net.cpp:200] relu2 needs backward computation.
I0428 19:48:48.344669 26597 net.cpp:200] ip2 needs backward computation.
I0428 19:48:48.344673 26597 net.cpp:200] relu1 needs backward computation.
I0428 19:48:48.344678 26597 net.cpp:200] ip1 needs backward computation.
I0428 19:48:48.344683 26597 net.cpp:200] pool1 needs backward computation.
I0428 19:48:48.344698 26597 net.cpp:200] conv1 needs backward computation.
I0428 19:48:48.344704 26597 net.cpp:200] pool0 needs backward computation.
I0428 19:48:48.344709 26597 net.cpp:200] conv0 needs backward computation.
I0428 19:48:48.344714 26597 net.cpp:202] mnist does not need backward computation.
I0428 19:48:48.344719 26597 net.cpp:244] This network produces output loss
I0428 19:48:48.344732 26597 net.cpp:257] Network initialization done.
I0428 19:48:48.345104 26597 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test555.prototxt
I0428 19:48:48.345139 26597 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:48.345309 26597 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:48.345404 26597 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:48.345459 26597 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:48.345481 26597 net.cpp:86] Creating Layer mnist
I0428 19:48:48.345489 26597 net.cpp:382] mnist -> data
I0428 19:48:48.345500 26597 net.cpp:382] mnist -> label
I0428 19:48:48.345644 26597 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:48.347745 26597 net.cpp:124] Setting up mnist
I0428 19:48:48.347777 26597 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:48.347786 26597 net.cpp:131] Top shape: 100 (100)
I0428 19:48:48.347805 26597 net.cpp:139] Memory required for data: 314000
I0428 19:48:48.347812 26597 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:48.347826 26597 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:48.347832 26597 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:48.347841 26597 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:48.347851 26597 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:48.347923 26597 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:48.347944 26597 net.cpp:131] Top shape: 100 (100)
I0428 19:48:48.347950 26597 net.cpp:131] Top shape: 100 (100)
I0428 19:48:48.347955 26597 net.cpp:139] Memory required for data: 314800
I0428 19:48:48.347960 26597 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:48.347973 26597 net.cpp:86] Creating Layer conv0
I0428 19:48:48.347980 26597 net.cpp:408] conv0 <- data
I0428 19:48:48.347990 26597 net.cpp:382] conv0 -> conv0
I0428 19:48:48.349614 26597 net.cpp:124] Setting up conv0
I0428 19:48:48.349630 26597 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:48.349637 26597 net.cpp:139] Memory required for data: 1466800
I0428 19:48:48.349650 26597 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:48.349660 26597 net.cpp:86] Creating Layer pool0
I0428 19:48:48.349687 26597 net.cpp:408] pool0 <- conv0
I0428 19:48:48.349696 26597 net.cpp:382] pool0 -> pool0
I0428 19:48:48.349738 26597 net.cpp:124] Setting up pool0
I0428 19:48:48.349747 26597 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:48.349752 26597 net.cpp:139] Memory required for data: 1754800
I0428 19:48:48.349758 26597 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:48.349771 26597 net.cpp:86] Creating Layer conv1
I0428 19:48:48.349777 26597 net.cpp:408] conv1 <- pool0
I0428 19:48:48.349786 26597 net.cpp:382] conv1 -> conv1
I0428 19:48:48.351886 26597 net.cpp:124] Setting up conv1
I0428 19:48:48.351903 26597 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:48.351909 26597 net.cpp:139] Memory required for data: 1882800
I0428 19:48:48.351922 26597 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:48.351933 26597 net.cpp:86] Creating Layer pool1
I0428 19:48:48.351939 26597 net.cpp:408] pool1 <- conv1
I0428 19:48:48.351948 26597 net.cpp:382] pool1 -> pool1
I0428 19:48:48.351995 26597 net.cpp:124] Setting up pool1
I0428 19:48:48.352005 26597 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:48.352010 26597 net.cpp:139] Memory required for data: 1914800
I0428 19:48:48.352015 26597 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:48.352028 26597 net.cpp:86] Creating Layer ip1
I0428 19:48:48.352037 26597 net.cpp:408] ip1 <- pool1
I0428 19:48:48.352046 26597 net.cpp:382] ip1 -> ip1
I0428 19:48:48.352246 26597 net.cpp:124] Setting up ip1
I0428 19:48:48.352257 26597 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:48.352262 26597 net.cpp:139] Memory required for data: 1934800
I0428 19:48:48.352273 26597 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:48.352282 26597 net.cpp:86] Creating Layer relu1
I0428 19:48:48.352288 26597 net.cpp:408] relu1 <- ip1
I0428 19:48:48.352295 26597 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:48.352469 26597 net.cpp:124] Setting up relu1
I0428 19:48:48.352479 26597 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:48.352484 26597 net.cpp:139] Memory required for data: 1954800
I0428 19:48:48.352490 26597 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:48.352502 26597 net.cpp:86] Creating Layer ip2
I0428 19:48:48.352509 26597 net.cpp:408] ip2 <- ip1
I0428 19:48:48.352517 26597 net.cpp:382] ip2 -> ip2
I0428 19:48:48.352632 26597 net.cpp:124] Setting up ip2
I0428 19:48:48.352641 26597 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:48.352648 26597 net.cpp:139] Memory required for data: 1958800
I0428 19:48:48.352656 26597 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:48.352664 26597 net.cpp:86] Creating Layer relu2
I0428 19:48:48.352669 26597 net.cpp:408] relu2 <- ip2
I0428 19:48:48.352679 26597 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:48.352910 26597 net.cpp:124] Setting up relu2
I0428 19:48:48.352922 26597 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:48.352928 26597 net.cpp:139] Memory required for data: 1962800
I0428 19:48:48.352938 26597 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:48:48.352946 26597 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:48:48.352952 26597 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:48:48.352962 26597 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:48:48.352987 26597 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:48:48.353035 26597 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:48:48.353044 26597 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:48.353051 26597 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:48.353057 26597 net.cpp:139] Memory required for data: 1970800
I0428 19:48:48.353062 26597 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:48.353073 26597 net.cpp:86] Creating Layer accuracy
I0428 19:48:48.353080 26597 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:48:48.353087 26597 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:48.353097 26597 net.cpp:382] accuracy -> accuracy
I0428 19:48:48.353111 26597 net.cpp:124] Setting up accuracy
I0428 19:48:48.353119 26597 net.cpp:131] Top shape: (1)
I0428 19:48:48.353124 26597 net.cpp:139] Memory required for data: 1970804
I0428 19:48:48.353130 26597 layer_factory.hpp:77] Creating layer loss
I0428 19:48:48.353137 26597 net.cpp:86] Creating Layer loss
I0428 19:48:48.353143 26597 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:48:48.353150 26597 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:48.353158 26597 net.cpp:382] loss -> loss
I0428 19:48:48.353168 26597 layer_factory.hpp:77] Creating layer loss
I0428 19:48:48.353471 26597 net.cpp:124] Setting up loss
I0428 19:48:48.353482 26597 net.cpp:131] Top shape: (1)
I0428 19:48:48.353487 26597 net.cpp:134]     with loss weight 1
I0428 19:48:48.353495 26597 net.cpp:139] Memory required for data: 1970808
I0428 19:48:48.353502 26597 net.cpp:200] loss needs backward computation.
I0428 19:48:48.353507 26597 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:48.353513 26597 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:48:48.353518 26597 net.cpp:200] relu2 needs backward computation.
I0428 19:48:48.353523 26597 net.cpp:200] ip2 needs backward computation.
I0428 19:48:48.353528 26597 net.cpp:200] relu1 needs backward computation.
I0428 19:48:48.353534 26597 net.cpp:200] ip1 needs backward computation.
I0428 19:48:48.353539 26597 net.cpp:200] pool1 needs backward computation.
I0428 19:48:48.353543 26597 net.cpp:200] conv1 needs backward computation.
I0428 19:48:48.353549 26597 net.cpp:200] pool0 needs backward computation.
I0428 19:48:48.353554 26597 net.cpp:200] conv0 needs backward computation.
I0428 19:48:48.353559 26597 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:48.353569 26597 net.cpp:202] mnist does not need backward computation.
I0428 19:48:48.353572 26597 net.cpp:244] This network produces output accuracy
I0428 19:48:48.353585 26597 net.cpp:244] This network produces output loss
I0428 19:48:48.353600 26597 net.cpp:257] Network initialization done.
I0428 19:48:48.353641 26597 solver.cpp:56] Solver scaffolding done.
I0428 19:48:48.353917 26597 caffe.cpp:248] Starting Optimization
I0428 19:48:48.353940 26597 solver.cpp:273] Solving LeNet
I0428 19:48:48.353943 26597 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:48.354838 26597 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:48.358144 26597 blocking_queue.cpp:49] Waiting for data
I0428 19:48:48.426231 26604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:48.426707 26597 solver.cpp:398]     Test net output #0: accuracy = 0.1008
I0428 19:48:48.426726 26597 solver.cpp:398]     Test net output #1: loss = 2.35135 (* 1 = 2.35135 loss)
I0428 19:48:48.428478 26597 solver.cpp:219] Iteration 0 (0 iter/s, 0.0744949s/100 iters), loss = 2.32698
I0428 19:48:48.428505 26597 solver.cpp:238]     Train net output #0: loss = 2.32698 (* 1 = 2.32698 loss)
I0428 19:48:48.428524 26597 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:48.503959 26597 solver.cpp:219] Iteration 100 (1325.46 iter/s, 0.0754454s/100 iters), loss = 0.313715
I0428 19:48:48.503988 26597 solver.cpp:238]     Train net output #0: loss = 0.313715 (* 1 = 0.313715 loss)
I0428 19:48:48.504014 26597 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:48.569720 26597 solver.cpp:219] Iteration 200 (1521.48 iter/s, 0.0657254s/100 iters), loss = 0.249788
I0428 19:48:48.569759 26597 solver.cpp:238]     Train net output #0: loss = 0.249788 (* 1 = 0.249788 loss)
I0428 19:48:48.569787 26597 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:48.633365 26597 solver.cpp:219] Iteration 300 (1572.31 iter/s, 0.0636006s/100 iters), loss = 0.262589
I0428 19:48:48.633394 26597 solver.cpp:238]     Train net output #0: loss = 0.262589 (* 1 = 0.262589 loss)
I0428 19:48:48.633419 26597 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:48.697343 26597 solver.cpp:219] Iteration 400 (1563.85 iter/s, 0.0639447s/100 iters), loss = 0.143129
I0428 19:48:48.697371 26597 solver.cpp:238]     Train net output #0: loss = 0.143129 (* 1 = 0.143129 loss)
I0428 19:48:48.697396 26597 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:48.759882 26597 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:48.834775 26604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:48.835278 26597 solver.cpp:398]     Test net output #0: accuracy = 0.9472
I0428 19:48:48.835299 26597 solver.cpp:398]     Test net output #1: loss = 0.175309 (* 1 = 0.175309 loss)
I0428 19:48:48.836024 26597 solver.cpp:219] Iteration 500 (721.28 iter/s, 0.138642s/100 iters), loss = 0.333331
I0428 19:48:48.836051 26597 solver.cpp:238]     Train net output #0: loss = 0.333331 (* 1 = 0.333331 loss)
I0428 19:48:48.836062 26597 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:48.904265 26597 solver.cpp:219] Iteration 600 (1466.11 iter/s, 0.0682076s/100 iters), loss = 0.198137
I0428 19:48:48.904294 26597 solver.cpp:238]     Train net output #0: loss = 0.198137 (* 1 = 0.198137 loss)
I0428 19:48:48.904304 26597 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:48.970269 26597 solver.cpp:219] Iteration 700 (1515.84 iter/s, 0.0659702s/100 iters), loss = 0.391312
I0428 19:48:48.970297 26597 solver.cpp:238]     Train net output #0: loss = 0.391312 (* 1 = 0.391312 loss)
I0428 19:48:48.970324 26597 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:49.034533 26597 solver.cpp:219] Iteration 800 (1556.89 iter/s, 0.0642305s/100 iters), loss = 0.369074
I0428 19:48:49.034561 26597 solver.cpp:238]     Train net output #0: loss = 0.369074 (* 1 = 0.369074 loss)
I0428 19:48:49.034587 26597 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:49.099046 26597 solver.cpp:219] Iteration 900 (1550.89 iter/s, 0.0644792s/100 iters), loss = 0.291725
I0428 19:48:49.099073 26597 solver.cpp:238]     Train net output #0: loss = 0.291725 (* 1 = 0.291725 loss)
I0428 19:48:49.099099 26597 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:49.120865 26603 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:49.163288 26597 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:49.163928 26597 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:49.164343 26597 solver.cpp:311] Iteration 1000, loss = 0.147525
I0428 19:48:49.164368 26597 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:49.239476 26604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:49.239972 26597 solver.cpp:398]     Test net output #0: accuracy = 0.9625
I0428 19:48:49.239995 26597 solver.cpp:398]     Test net output #1: loss = 0.112471 (* 1 = 0.112471 loss)
I0428 19:48:49.240002 26597 solver.cpp:316] Optimization Done.
I0428 19:48:49.240008 26597 caffe.cpp:259] Optimization Done.
