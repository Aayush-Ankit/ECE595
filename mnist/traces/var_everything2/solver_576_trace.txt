I0428 19:49:29.056547 26774 caffe.cpp:218] Using GPUs 0
I0428 19:49:29.089257 26774 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:49:29.593924 26774 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test576.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:49:29.594054 26774 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test576.prototxt
I0428 19:49:29.594425 26774 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:49:29.594444 26774 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:49:29.594532 26774 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:29.594602 26774 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:29.594691 26774 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:49:29.594710 26774 net.cpp:86] Creating Layer mnist
I0428 19:49:29.594718 26774 net.cpp:382] mnist -> data
I0428 19:49:29.594738 26774 net.cpp:382] mnist -> label
I0428 19:49:29.595717 26774 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:49:29.597919 26774 net.cpp:124] Setting up mnist
I0428 19:49:29.597935 26774 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:49:29.597940 26774 net.cpp:131] Top shape: 64 (64)
I0428 19:49:29.597944 26774 net.cpp:139] Memory required for data: 200960
I0428 19:49:29.597949 26774 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:29.597964 26774 net.cpp:86] Creating Layer conv0
I0428 19:49:29.597981 26774 net.cpp:408] conv0 <- data
I0428 19:49:29.597995 26774 net.cpp:382] conv0 -> conv0
I0428 19:49:29.832965 26774 net.cpp:124] Setting up conv0
I0428 19:49:29.832991 26774 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:49:29.832995 26774 net.cpp:139] Memory required for data: 938240
I0428 19:49:29.833026 26774 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:29.833039 26774 net.cpp:86] Creating Layer pool0
I0428 19:49:29.833043 26774 net.cpp:408] pool0 <- conv0
I0428 19:49:29.833050 26774 net.cpp:382] pool0 -> pool0
I0428 19:49:29.833096 26774 net.cpp:124] Setting up pool0
I0428 19:49:29.833103 26774 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:49:29.833106 26774 net.cpp:139] Memory required for data: 1122560
I0428 19:49:29.833109 26774 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:29.833120 26774 net.cpp:86] Creating Layer conv1
I0428 19:49:29.833123 26774 net.cpp:408] conv1 <- pool0
I0428 19:49:29.833128 26774 net.cpp:382] conv1 -> conv1
I0428 19:49:29.835007 26774 net.cpp:124] Setting up conv1
I0428 19:49:29.835039 26774 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:49:29.835044 26774 net.cpp:139] Memory required for data: 1204480
I0428 19:49:29.835053 26774 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:29.835060 26774 net.cpp:86] Creating Layer pool1
I0428 19:49:29.835063 26774 net.cpp:408] pool1 <- conv1
I0428 19:49:29.835072 26774 net.cpp:382] pool1 -> pool1
I0428 19:49:29.835111 26774 net.cpp:124] Setting up pool1
I0428 19:49:29.835119 26774 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:49:29.835120 26774 net.cpp:139] Memory required for data: 1224960
I0428 19:49:29.835124 26774 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:29.835130 26774 net.cpp:86] Creating Layer ip1
I0428 19:49:29.835134 26774 net.cpp:408] ip1 <- pool1
I0428 19:49:29.835139 26774 net.cpp:382] ip1 -> ip1
I0428 19:49:29.836189 26774 net.cpp:124] Setting up ip1
I0428 19:49:29.836203 26774 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:29.836222 26774 net.cpp:139] Memory required for data: 1237760
I0428 19:49:29.836230 26774 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:29.836236 26774 net.cpp:86] Creating Layer relu1
I0428 19:49:29.836239 26774 net.cpp:408] relu1 <- ip1
I0428 19:49:29.836244 26774 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:29.836417 26774 net.cpp:124] Setting up relu1
I0428 19:49:29.836426 26774 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:49:29.836429 26774 net.cpp:139] Memory required for data: 1250560
I0428 19:49:29.836432 26774 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:29.836439 26774 net.cpp:86] Creating Layer ip2
I0428 19:49:29.836442 26774 net.cpp:408] ip2 <- ip1
I0428 19:49:29.836449 26774 net.cpp:382] ip2 -> ip2
I0428 19:49:29.836552 26774 net.cpp:124] Setting up ip2
I0428 19:49:29.836575 26774 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:29.836578 26774 net.cpp:139] Memory required for data: 1253120
I0428 19:49:29.836583 26774 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:29.836589 26774 net.cpp:86] Creating Layer relu2
I0428 19:49:29.836593 26774 net.cpp:408] relu2 <- ip2
I0428 19:49:29.836597 26774 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:29.837410 26774 net.cpp:124] Setting up relu2
I0428 19:49:29.837422 26774 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:29.837442 26774 net.cpp:139] Memory required for data: 1255680
I0428 19:49:29.837445 26774 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:29.837453 26774 net.cpp:86] Creating Layer ip3
I0428 19:49:29.837457 26774 net.cpp:408] ip3 <- ip2
I0428 19:49:29.837462 26774 net.cpp:382] ip3 -> ip3
I0428 19:49:29.837565 26774 net.cpp:124] Setting up ip3
I0428 19:49:29.837573 26774 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:29.837575 26774 net.cpp:139] Memory required for data: 1258240
I0428 19:49:29.837584 26774 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:29.837589 26774 net.cpp:86] Creating Layer relu3
I0428 19:49:29.837592 26774 net.cpp:408] relu3 <- ip3
I0428 19:49:29.837595 26774 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:29.837769 26774 net.cpp:124] Setting up relu3
I0428 19:49:29.837777 26774 net.cpp:131] Top shape: 64 10 (640)
I0428 19:49:29.837779 26774 net.cpp:139] Memory required for data: 1260800
I0428 19:49:29.837782 26774 layer_factory.hpp:77] Creating layer loss
I0428 19:49:29.837790 26774 net.cpp:86] Creating Layer loss
I0428 19:49:29.837792 26774 net.cpp:408] loss <- ip3
I0428 19:49:29.837796 26774 net.cpp:408] loss <- label
I0428 19:49:29.837801 26774 net.cpp:382] loss -> loss
I0428 19:49:29.837819 26774 layer_factory.hpp:77] Creating layer loss
I0428 19:49:29.838075 26774 net.cpp:124] Setting up loss
I0428 19:49:29.838084 26774 net.cpp:131] Top shape: (1)
I0428 19:49:29.838088 26774 net.cpp:134]     with loss weight 1
I0428 19:49:29.838104 26774 net.cpp:139] Memory required for data: 1260804
I0428 19:49:29.838107 26774 net.cpp:200] loss needs backward computation.
I0428 19:49:29.838111 26774 net.cpp:200] relu3 needs backward computation.
I0428 19:49:29.838114 26774 net.cpp:200] ip3 needs backward computation.
I0428 19:49:29.838116 26774 net.cpp:200] relu2 needs backward computation.
I0428 19:49:29.838119 26774 net.cpp:200] ip2 needs backward computation.
I0428 19:49:29.838122 26774 net.cpp:200] relu1 needs backward computation.
I0428 19:49:29.838125 26774 net.cpp:200] ip1 needs backward computation.
I0428 19:49:29.838129 26774 net.cpp:200] pool1 needs backward computation.
I0428 19:49:29.838130 26774 net.cpp:200] conv1 needs backward computation.
I0428 19:49:29.838134 26774 net.cpp:200] pool0 needs backward computation.
I0428 19:49:29.838136 26774 net.cpp:200] conv0 needs backward computation.
I0428 19:49:29.838140 26774 net.cpp:202] mnist does not need backward computation.
I0428 19:49:29.838142 26774 net.cpp:244] This network produces output loss
I0428 19:49:29.838153 26774 net.cpp:257] Network initialization done.
I0428 19:49:29.838515 26774 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test576.prototxt
I0428 19:49:29.838557 26774 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:49:29.838645 26774 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:49:29.838726 26774 layer_factory.hpp:77] Creating layer mnist
I0428 19:49:29.838766 26774 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:49:29.838778 26774 net.cpp:86] Creating Layer mnist
I0428 19:49:29.838783 26774 net.cpp:382] mnist -> data
I0428 19:49:29.838791 26774 net.cpp:382] mnist -> label
I0428 19:49:29.838872 26774 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:49:29.840824 26774 net.cpp:124] Setting up mnist
I0428 19:49:29.840868 26774 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:49:29.840888 26774 net.cpp:131] Top shape: 100 (100)
I0428 19:49:29.840893 26774 net.cpp:139] Memory required for data: 314000
I0428 19:49:29.840895 26774 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:49:29.840903 26774 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:49:29.840906 26774 net.cpp:408] label_mnist_1_split <- label
I0428 19:49:29.840914 26774 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:49:29.840919 26774 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:49:29.840965 26774 net.cpp:124] Setting up label_mnist_1_split
I0428 19:49:29.840975 26774 net.cpp:131] Top shape: 100 (100)
I0428 19:49:29.840978 26774 net.cpp:131] Top shape: 100 (100)
I0428 19:49:29.840981 26774 net.cpp:139] Memory required for data: 314800
I0428 19:49:29.840984 26774 layer_factory.hpp:77] Creating layer conv0
I0428 19:49:29.840996 26774 net.cpp:86] Creating Layer conv0
I0428 19:49:29.840998 26774 net.cpp:408] conv0 <- data
I0428 19:49:29.841003 26774 net.cpp:382] conv0 -> conv0
I0428 19:49:29.842885 26774 net.cpp:124] Setting up conv0
I0428 19:49:29.842914 26774 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:49:29.842918 26774 net.cpp:139] Memory required for data: 1466800
I0428 19:49:29.842928 26774 layer_factory.hpp:77] Creating layer pool0
I0428 19:49:29.842936 26774 net.cpp:86] Creating Layer pool0
I0428 19:49:29.842938 26774 net.cpp:408] pool0 <- conv0
I0428 19:49:29.842944 26774 net.cpp:382] pool0 -> pool0
I0428 19:49:29.842981 26774 net.cpp:124] Setting up pool0
I0428 19:49:29.842990 26774 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:49:29.842993 26774 net.cpp:139] Memory required for data: 1754800
I0428 19:49:29.842995 26774 layer_factory.hpp:77] Creating layer conv1
I0428 19:49:29.843019 26774 net.cpp:86] Creating Layer conv1
I0428 19:49:29.843024 26774 net.cpp:408] conv1 <- pool0
I0428 19:49:29.843030 26774 net.cpp:382] conv1 -> conv1
I0428 19:49:29.845204 26774 net.cpp:124] Setting up conv1
I0428 19:49:29.845234 26774 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:49:29.845237 26774 net.cpp:139] Memory required for data: 1882800
I0428 19:49:29.845247 26774 layer_factory.hpp:77] Creating layer pool1
I0428 19:49:29.845254 26774 net.cpp:86] Creating Layer pool1
I0428 19:49:29.845258 26774 net.cpp:408] pool1 <- conv1
I0428 19:49:29.845263 26774 net.cpp:382] pool1 -> pool1
I0428 19:49:29.845304 26774 net.cpp:124] Setting up pool1
I0428 19:49:29.845310 26774 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:49:29.845314 26774 net.cpp:139] Memory required for data: 1914800
I0428 19:49:29.845316 26774 layer_factory.hpp:77] Creating layer ip1
I0428 19:49:29.845321 26774 net.cpp:86] Creating Layer ip1
I0428 19:49:29.845326 26774 net.cpp:408] ip1 <- pool1
I0428 19:49:29.845331 26774 net.cpp:382] ip1 -> ip1
I0428 19:49:29.845489 26774 net.cpp:124] Setting up ip1
I0428 19:49:29.845497 26774 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:29.845510 26774 net.cpp:139] Memory required for data: 1934800
I0428 19:49:29.845517 26774 layer_factory.hpp:77] Creating layer relu1
I0428 19:49:29.845523 26774 net.cpp:86] Creating Layer relu1
I0428 19:49:29.845526 26774 net.cpp:408] relu1 <- ip1
I0428 19:49:29.845532 26774 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:49:29.845803 26774 net.cpp:124] Setting up relu1
I0428 19:49:29.845813 26774 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:49:29.845816 26774 net.cpp:139] Memory required for data: 1954800
I0428 19:49:29.845824 26774 layer_factory.hpp:77] Creating layer ip2
I0428 19:49:29.845832 26774 net.cpp:86] Creating Layer ip2
I0428 19:49:29.845837 26774 net.cpp:408] ip2 <- ip1
I0428 19:49:29.845842 26774 net.cpp:382] ip2 -> ip2
I0428 19:49:29.845966 26774 net.cpp:124] Setting up ip2
I0428 19:49:29.845973 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.845978 26774 net.cpp:139] Memory required for data: 1958800
I0428 19:49:29.845983 26774 layer_factory.hpp:77] Creating layer relu2
I0428 19:49:29.845988 26774 net.cpp:86] Creating Layer relu2
I0428 19:49:29.845991 26774 net.cpp:408] relu2 <- ip2
I0428 19:49:29.845996 26774 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:49:29.846164 26774 net.cpp:124] Setting up relu2
I0428 19:49:29.846174 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.846176 26774 net.cpp:139] Memory required for data: 1962800
I0428 19:49:29.846180 26774 layer_factory.hpp:77] Creating layer ip3
I0428 19:49:29.846186 26774 net.cpp:86] Creating Layer ip3
I0428 19:49:29.846189 26774 net.cpp:408] ip3 <- ip2
I0428 19:49:29.846195 26774 net.cpp:382] ip3 -> ip3
I0428 19:49:29.846297 26774 net.cpp:124] Setting up ip3
I0428 19:49:29.846303 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.846307 26774 net.cpp:139] Memory required for data: 1966800
I0428 19:49:29.846318 26774 layer_factory.hpp:77] Creating layer relu3
I0428 19:49:29.846323 26774 net.cpp:86] Creating Layer relu3
I0428 19:49:29.846328 26774 net.cpp:408] relu3 <- ip3
I0428 19:49:29.846333 26774 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:49:29.847177 26774 net.cpp:124] Setting up relu3
I0428 19:49:29.847188 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.847208 26774 net.cpp:139] Memory required for data: 1970800
I0428 19:49:29.847210 26774 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:49:29.847216 26774 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:49:29.847220 26774 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:49:29.847225 26774 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:49:29.847232 26774 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:49:29.847285 26774 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:49:29.847292 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.847295 26774 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:49:29.847298 26774 net.cpp:139] Memory required for data: 1978800
I0428 19:49:29.847302 26774 layer_factory.hpp:77] Creating layer accuracy
I0428 19:49:29.847312 26774 net.cpp:86] Creating Layer accuracy
I0428 19:49:29.847316 26774 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:49:29.847321 26774 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:49:29.847340 26774 net.cpp:382] accuracy -> accuracy
I0428 19:49:29.847348 26774 net.cpp:124] Setting up accuracy
I0428 19:49:29.847352 26774 net.cpp:131] Top shape: (1)
I0428 19:49:29.847357 26774 net.cpp:139] Memory required for data: 1978804
I0428 19:49:29.847359 26774 layer_factory.hpp:77] Creating layer loss
I0428 19:49:29.847364 26774 net.cpp:86] Creating Layer loss
I0428 19:49:29.847368 26774 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:49:29.847371 26774 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:49:29.847376 26774 net.cpp:382] loss -> loss
I0428 19:49:29.847383 26774 layer_factory.hpp:77] Creating layer loss
I0428 19:49:29.847662 26774 net.cpp:124] Setting up loss
I0428 19:49:29.847703 26774 net.cpp:131] Top shape: (1)
I0428 19:49:29.847707 26774 net.cpp:134]     with loss weight 1
I0428 19:49:29.847728 26774 net.cpp:139] Memory required for data: 1978808
I0428 19:49:29.847740 26774 net.cpp:200] loss needs backward computation.
I0428 19:49:29.847744 26774 net.cpp:202] accuracy does not need backward computation.
I0428 19:49:29.847748 26774 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:49:29.847750 26774 net.cpp:200] relu3 needs backward computation.
I0428 19:49:29.847754 26774 net.cpp:200] ip3 needs backward computation.
I0428 19:49:29.847757 26774 net.cpp:200] relu2 needs backward computation.
I0428 19:49:29.847759 26774 net.cpp:200] ip2 needs backward computation.
I0428 19:49:29.847769 26774 net.cpp:200] relu1 needs backward computation.
I0428 19:49:29.847770 26774 net.cpp:200] ip1 needs backward computation.
I0428 19:49:29.847774 26774 net.cpp:200] pool1 needs backward computation.
I0428 19:49:29.847776 26774 net.cpp:200] conv1 needs backward computation.
I0428 19:49:29.847780 26774 net.cpp:200] pool0 needs backward computation.
I0428 19:49:29.847784 26774 net.cpp:200] conv0 needs backward computation.
I0428 19:49:29.847787 26774 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:49:29.847791 26774 net.cpp:202] mnist does not need backward computation.
I0428 19:49:29.847795 26774 net.cpp:244] This network produces output accuracy
I0428 19:49:29.847797 26774 net.cpp:244] This network produces output loss
I0428 19:49:29.847810 26774 net.cpp:257] Network initialization done.
I0428 19:49:29.847882 26774 solver.cpp:56] Solver scaffolding done.
I0428 19:49:29.848271 26774 caffe.cpp:248] Starting Optimization
I0428 19:49:29.848278 26774 solver.cpp:273] Solving LeNet
I0428 19:49:29.848280 26774 solver.cpp:274] Learning Rate Policy: inv
I0428 19:49:29.849220 26774 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:49:29.852836 26774 blocking_queue.cpp:49] Waiting for data
I0428 19:49:29.924276 26781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:29.924785 26774 solver.cpp:398]     Test net output #0: accuracy = 0.1136
I0428 19:49:29.924825 26774 solver.cpp:398]     Test net output #1: loss = 2.31774 (* 1 = 2.31774 loss)
I0428 19:49:29.926692 26774 solver.cpp:219] Iteration 0 (2.90492 iter/s, 0.0783667s/100 iters), loss = 2.31137
I0428 19:49:29.926738 26774 solver.cpp:238]     Train net output #0: loss = 2.31137 (* 1 = 2.31137 loss)
I0428 19:49:29.926753 26774 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:49:30.004679 26774 solver.cpp:219] Iteration 100 (1283.2 iter/s, 0.0779303s/100 iters), loss = 0.597484
I0428 19:49:30.004703 26774 solver.cpp:238]     Train net output #0: loss = 0.597484 (* 1 = 0.597484 loss)
I0428 19:49:30.004709 26774 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:49:30.077781 26774 solver.cpp:219] Iteration 200 (1368.58 iter/s, 0.0730685s/100 iters), loss = 0.333438
I0428 19:49:30.077805 26774 solver.cpp:238]     Train net output #0: loss = 0.333438 (* 1 = 0.333438 loss)
I0428 19:49:30.077811 26774 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:49:30.148172 26774 solver.cpp:219] Iteration 300 (1421.28 iter/s, 0.0703589s/100 iters), loss = 0.318734
I0428 19:49:30.148195 26774 solver.cpp:238]     Train net output #0: loss = 0.318734 (* 1 = 0.318734 loss)
I0428 19:49:30.148216 26774 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:49:30.217573 26774 solver.cpp:219] Iteration 400 (1441.55 iter/s, 0.0693698s/100 iters), loss = 0.253667
I0428 19:49:30.217595 26774 solver.cpp:238]     Train net output #0: loss = 0.253667 (* 1 = 0.253667 loss)
I0428 19:49:30.217617 26774 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:49:30.286315 26774 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:49:30.339741 26781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:30.340231 26774 solver.cpp:398]     Test net output #0: accuracy = 0.9402
I0428 19:49:30.340267 26774 solver.cpp:398]     Test net output #1: loss = 0.188759 (* 1 = 0.188759 loss)
I0428 19:49:30.341106 26774 solver.cpp:219] Iteration 500 (809.726 iter/s, 0.123498s/100 iters), loss = 0.169894
I0428 19:49:30.341146 26774 solver.cpp:238]     Train net output #0: loss = 0.169894 (* 1 = 0.169894 loss)
I0428 19:49:30.341169 26774 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:49:30.412802 26774 solver.cpp:219] Iteration 600 (1395.43 iter/s, 0.0716624s/100 iters), loss = 0.177495
I0428 19:49:30.412850 26774 solver.cpp:238]     Train net output #0: loss = 0.177495 (* 1 = 0.177495 loss)
I0428 19:49:30.412858 26774 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:49:30.486032 26774 solver.cpp:219] Iteration 700 (1366.34 iter/s, 0.0731883s/100 iters), loss = 0.225074
I0428 19:49:30.486071 26774 solver.cpp:238]     Train net output #0: loss = 0.225074 (* 1 = 0.225074 loss)
I0428 19:49:30.486078 26774 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:49:30.557196 26774 solver.cpp:219] Iteration 800 (1405.85 iter/s, 0.0711311s/100 iters), loss = 0.216143
I0428 19:49:30.557235 26774 solver.cpp:238]     Train net output #0: loss = 0.216143 (* 1 = 0.216143 loss)
I0428 19:49:30.557241 26774 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:49:30.628214 26774 solver.cpp:219] Iteration 900 (1409.04 iter/s, 0.0709704s/100 iters), loss = 0.242155
I0428 19:49:30.628253 26774 solver.cpp:238]     Train net output #0: loss = 0.242155 (* 1 = 0.242155 loss)
I0428 19:49:30.628259 26774 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:49:30.651888 26780 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:30.698781 26774 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:49:30.699564 26774 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:49:30.700085 26774 solver.cpp:311] Iteration 1000, loss = 0.209849
I0428 19:49:30.700114 26774 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:49:30.753422 26781 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:49:30.753904 26774 solver.cpp:398]     Test net output #0: accuracy = 0.9626
I0428 19:49:30.753933 26774 solver.cpp:398]     Test net output #1: loss = 0.120039 (* 1 = 0.120039 loss)
I0428 19:49:30.753940 26774 solver.cpp:316] Optimization Done.
I0428 19:49:30.753943 26774 caffe.cpp:259] Optimization Done.
