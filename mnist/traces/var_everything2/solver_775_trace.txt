I0428 19:56:58.882751 28566 caffe.cpp:218] Using GPUs 0
I0428 19:56:58.920387 28566 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:59.430327 28566 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test775.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:59.430474 28566 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test775.prototxt
I0428 19:56:59.430892 28566 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:59.430910 28566 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:59.431012 28566 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:59.431092 28566 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:59.431190 28566 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:59.431213 28566 net.cpp:86] Creating Layer mnist
I0428 19:56:59.431223 28566 net.cpp:382] mnist -> data
I0428 19:56:59.431252 28566 net.cpp:382] mnist -> label
I0428 19:56:59.432349 28566 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:59.434825 28566 net.cpp:124] Setting up mnist
I0428 19:56:59.434845 28566 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:59.434852 28566 net.cpp:131] Top shape: 64 (64)
I0428 19:56:59.434856 28566 net.cpp:139] Memory required for data: 200960
I0428 19:56:59.434864 28566 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:59.434895 28566 net.cpp:86] Creating Layer conv0
I0428 19:56:59.434917 28566 net.cpp:408] conv0 <- data
I0428 19:56:59.434931 28566 net.cpp:382] conv0 -> conv0
I0428 19:56:59.724596 28566 net.cpp:124] Setting up conv0
I0428 19:56:59.724625 28566 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:59.724630 28566 net.cpp:139] Memory required for data: 1675520
I0428 19:56:59.724647 28566 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:59.724661 28566 net.cpp:86] Creating Layer pool0
I0428 19:56:59.724666 28566 net.cpp:408] pool0 <- conv0
I0428 19:56:59.724673 28566 net.cpp:382] pool0 -> pool0
I0428 19:56:59.724731 28566 net.cpp:124] Setting up pool0
I0428 19:56:59.724738 28566 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:59.724741 28566 net.cpp:139] Memory required for data: 2044160
I0428 19:56:59.724745 28566 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:59.724757 28566 net.cpp:86] Creating Layer conv1
I0428 19:56:59.724761 28566 net.cpp:408] conv1 <- pool0
I0428 19:56:59.724766 28566 net.cpp:382] conv1 -> conv1
I0428 19:56:59.726742 28566 net.cpp:124] Setting up conv1
I0428 19:56:59.726760 28566 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:59.726764 28566 net.cpp:139] Memory required for data: 2076928
I0428 19:56:59.726773 28566 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:59.726781 28566 net.cpp:86] Creating Layer pool1
I0428 19:56:59.726785 28566 net.cpp:408] pool1 <- conv1
I0428 19:56:59.726793 28566 net.cpp:382] pool1 -> pool1
I0428 19:56:59.726832 28566 net.cpp:124] Setting up pool1
I0428 19:56:59.726838 28566 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:59.726841 28566 net.cpp:139] Memory required for data: 2085120
I0428 19:56:59.726845 28566 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:59.726851 28566 net.cpp:86] Creating Layer ip1
I0428 19:56:59.726855 28566 net.cpp:408] ip1 <- pool1
I0428 19:56:59.726860 28566 net.cpp:382] ip1 -> ip1
I0428 19:56:59.727849 28566 net.cpp:124] Setting up ip1
I0428 19:56:59.727861 28566 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:59.727865 28566 net.cpp:139] Memory required for data: 2097920
I0428 19:56:59.727874 28566 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:59.727881 28566 net.cpp:86] Creating Layer relu1
I0428 19:56:59.727885 28566 net.cpp:408] relu1 <- ip1
I0428 19:56:59.727890 28566 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:59.728070 28566 net.cpp:124] Setting up relu1
I0428 19:56:59.728081 28566 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:56:59.728085 28566 net.cpp:139] Memory required for data: 2110720
I0428 19:56:59.728087 28566 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:59.728094 28566 net.cpp:86] Creating Layer ip2
I0428 19:56:59.728098 28566 net.cpp:408] ip2 <- ip1
I0428 19:56:59.728103 28566 net.cpp:382] ip2 -> ip2
I0428 19:56:59.728212 28566 net.cpp:124] Setting up ip2
I0428 19:56:59.728219 28566 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:59.728224 28566 net.cpp:139] Memory required for data: 2117120
I0428 19:56:59.728229 28566 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:59.728235 28566 net.cpp:86] Creating Layer relu2
I0428 19:56:59.728238 28566 net.cpp:408] relu2 <- ip2
I0428 19:56:59.728242 28566 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:59.729022 28566 net.cpp:124] Setting up relu2
I0428 19:56:59.729051 28566 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:59.729055 28566 net.cpp:139] Memory required for data: 2123520
I0428 19:56:59.729059 28566 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:59.729068 28566 net.cpp:86] Creating Layer ip3
I0428 19:56:59.729071 28566 net.cpp:408] ip3 <- ip2
I0428 19:56:59.729077 28566 net.cpp:382] ip3 -> ip3
I0428 19:56:59.729200 28566 net.cpp:124] Setting up ip3
I0428 19:56:59.729208 28566 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:59.729212 28566 net.cpp:139] Memory required for data: 2126080
I0428 19:56:59.729220 28566 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:59.729226 28566 net.cpp:86] Creating Layer relu3
I0428 19:56:59.729229 28566 net.cpp:408] relu3 <- ip3
I0428 19:56:59.729234 28566 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:59.729418 28566 net.cpp:124] Setting up relu3
I0428 19:56:59.729427 28566 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:59.729431 28566 net.cpp:139] Memory required for data: 2128640
I0428 19:56:59.729434 28566 layer_factory.hpp:77] Creating layer loss
I0428 19:56:59.729441 28566 net.cpp:86] Creating Layer loss
I0428 19:56:59.729444 28566 net.cpp:408] loss <- ip3
I0428 19:56:59.729449 28566 net.cpp:408] loss <- label
I0428 19:56:59.729454 28566 net.cpp:382] loss -> loss
I0428 19:56:59.729490 28566 layer_factory.hpp:77] Creating layer loss
I0428 19:56:59.729727 28566 net.cpp:124] Setting up loss
I0428 19:56:59.729737 28566 net.cpp:131] Top shape: (1)
I0428 19:56:59.729740 28566 net.cpp:134]     with loss weight 1
I0428 19:56:59.729755 28566 net.cpp:139] Memory required for data: 2128644
I0428 19:56:59.729759 28566 net.cpp:200] loss needs backward computation.
I0428 19:56:59.729763 28566 net.cpp:200] relu3 needs backward computation.
I0428 19:56:59.729766 28566 net.cpp:200] ip3 needs backward computation.
I0428 19:56:59.729769 28566 net.cpp:200] relu2 needs backward computation.
I0428 19:56:59.729773 28566 net.cpp:200] ip2 needs backward computation.
I0428 19:56:59.729775 28566 net.cpp:200] relu1 needs backward computation.
I0428 19:56:59.729779 28566 net.cpp:200] ip1 needs backward computation.
I0428 19:56:59.729782 28566 net.cpp:200] pool1 needs backward computation.
I0428 19:56:59.729785 28566 net.cpp:200] conv1 needs backward computation.
I0428 19:56:59.729789 28566 net.cpp:200] pool0 needs backward computation.
I0428 19:56:59.729792 28566 net.cpp:200] conv0 needs backward computation.
I0428 19:56:59.729795 28566 net.cpp:202] mnist does not need backward computation.
I0428 19:56:59.729799 28566 net.cpp:244] This network produces output loss
I0428 19:56:59.729809 28566 net.cpp:257] Network initialization done.
I0428 19:56:59.730151 28566 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test775.prototxt
I0428 19:56:59.730181 28566 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:59.730276 28566 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:59.730360 28566 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:59.730406 28566 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:59.730419 28566 net.cpp:86] Creating Layer mnist
I0428 19:56:59.730424 28566 net.cpp:382] mnist -> data
I0428 19:56:59.730432 28566 net.cpp:382] mnist -> label
I0428 19:56:59.730520 28566 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:59.732688 28566 net.cpp:124] Setting up mnist
I0428 19:56:59.732702 28566 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:59.732707 28566 net.cpp:131] Top shape: 100 (100)
I0428 19:56:59.732712 28566 net.cpp:139] Memory required for data: 314000
I0428 19:56:59.732715 28566 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:59.732727 28566 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:59.732730 28566 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:59.732735 28566 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:59.732743 28566 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:59.732830 28566 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:59.732838 28566 net.cpp:131] Top shape: 100 (100)
I0428 19:56:59.732843 28566 net.cpp:131] Top shape: 100 (100)
I0428 19:56:59.732846 28566 net.cpp:139] Memory required for data: 314800
I0428 19:56:59.732849 28566 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:59.732858 28566 net.cpp:86] Creating Layer conv0
I0428 19:56:59.732862 28566 net.cpp:408] conv0 <- data
I0428 19:56:59.732867 28566 net.cpp:382] conv0 -> conv0
I0428 19:56:59.734501 28566 net.cpp:124] Setting up conv0
I0428 19:56:59.734516 28566 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:59.734520 28566 net.cpp:139] Memory required for data: 2618800
I0428 19:56:59.734529 28566 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:59.734536 28566 net.cpp:86] Creating Layer pool0
I0428 19:56:59.734540 28566 net.cpp:408] pool0 <- conv0
I0428 19:56:59.734545 28566 net.cpp:382] pool0 -> pool0
I0428 19:56:59.734582 28566 net.cpp:124] Setting up pool0
I0428 19:56:59.734588 28566 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:59.734591 28566 net.cpp:139] Memory required for data: 3194800
I0428 19:56:59.734594 28566 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:59.734603 28566 net.cpp:86] Creating Layer conv1
I0428 19:56:59.734607 28566 net.cpp:408] conv1 <- pool0
I0428 19:56:59.734612 28566 net.cpp:382] conv1 -> conv1
I0428 19:56:59.736665 28566 net.cpp:124] Setting up conv1
I0428 19:56:59.736682 28566 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:59.736686 28566 net.cpp:139] Memory required for data: 3246000
I0428 19:56:59.736696 28566 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:59.736702 28566 net.cpp:86] Creating Layer pool1
I0428 19:56:59.736706 28566 net.cpp:408] pool1 <- conv1
I0428 19:56:59.736712 28566 net.cpp:382] pool1 -> pool1
I0428 19:56:59.736752 28566 net.cpp:124] Setting up pool1
I0428 19:56:59.736758 28566 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:59.736762 28566 net.cpp:139] Memory required for data: 3258800
I0428 19:56:59.736765 28566 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:59.736771 28566 net.cpp:86] Creating Layer ip1
I0428 19:56:59.736774 28566 net.cpp:408] ip1 <- pool1
I0428 19:56:59.736779 28566 net.cpp:382] ip1 -> ip1
I0428 19:56:59.736912 28566 net.cpp:124] Setting up ip1
I0428 19:56:59.736922 28566 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:59.736935 28566 net.cpp:139] Memory required for data: 3278800
I0428 19:56:59.736943 28566 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:59.736948 28566 net.cpp:86] Creating Layer relu1
I0428 19:56:59.736953 28566 net.cpp:408] relu1 <- ip1
I0428 19:56:59.736958 28566 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:59.737247 28566 net.cpp:124] Setting up relu1
I0428 19:56:59.737257 28566 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:56:59.737260 28566 net.cpp:139] Memory required for data: 3298800
I0428 19:56:59.737263 28566 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:59.737272 28566 net.cpp:86] Creating Layer ip2
I0428 19:56:59.737274 28566 net.cpp:408] ip2 <- ip1
I0428 19:56:59.737279 28566 net.cpp:382] ip2 -> ip2
I0428 19:56:59.737385 28566 net.cpp:124] Setting up ip2
I0428 19:56:59.737391 28566 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:59.737396 28566 net.cpp:139] Memory required for data: 3308800
I0428 19:56:59.737401 28566 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:59.737406 28566 net.cpp:86] Creating Layer relu2
I0428 19:56:59.737409 28566 net.cpp:408] relu2 <- ip2
I0428 19:56:59.737413 28566 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:59.737558 28566 net.cpp:124] Setting up relu2
I0428 19:56:59.737567 28566 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:59.737571 28566 net.cpp:139] Memory required for data: 3318800
I0428 19:56:59.737574 28566 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:59.737579 28566 net.cpp:86] Creating Layer ip3
I0428 19:56:59.737582 28566 net.cpp:408] ip3 <- ip2
I0428 19:56:59.737587 28566 net.cpp:382] ip3 -> ip3
I0428 19:56:59.737684 28566 net.cpp:124] Setting up ip3
I0428 19:56:59.737690 28566 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:59.737694 28566 net.cpp:139] Memory required for data: 3322800
I0428 19:56:59.737701 28566 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:59.737706 28566 net.cpp:86] Creating Layer relu3
I0428 19:56:59.737709 28566 net.cpp:408] relu3 <- ip3
I0428 19:56:59.737715 28566 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:59.738512 28566 net.cpp:124] Setting up relu3
I0428 19:56:59.738539 28566 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:59.738559 28566 net.cpp:139] Memory required for data: 3326800
I0428 19:56:59.738562 28566 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:56:59.738569 28566 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:56:59.738586 28566 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:56:59.738592 28566 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:56:59.738600 28566 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:56:59.738644 28566 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:56:59.738651 28566 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:59.738654 28566 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:59.738657 28566 net.cpp:139] Memory required for data: 3334800
I0428 19:56:59.738661 28566 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:59.738665 28566 net.cpp:86] Creating Layer accuracy
I0428 19:56:59.738669 28566 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:56:59.738688 28566 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:59.738693 28566 net.cpp:382] accuracy -> accuracy
I0428 19:56:59.738705 28566 net.cpp:124] Setting up accuracy
I0428 19:56:59.738709 28566 net.cpp:131] Top shape: (1)
I0428 19:56:59.738713 28566 net.cpp:139] Memory required for data: 3334804
I0428 19:56:59.738715 28566 layer_factory.hpp:77] Creating layer loss
I0428 19:56:59.738719 28566 net.cpp:86] Creating Layer loss
I0428 19:56:59.738723 28566 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:56:59.738726 28566 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:59.738731 28566 net.cpp:382] loss -> loss
I0428 19:56:59.738737 28566 layer_factory.hpp:77] Creating layer loss
I0428 19:56:59.738965 28566 net.cpp:124] Setting up loss
I0428 19:56:59.738977 28566 net.cpp:131] Top shape: (1)
I0428 19:56:59.738981 28566 net.cpp:134]     with loss weight 1
I0428 19:56:59.738988 28566 net.cpp:139] Memory required for data: 3334808
I0428 19:56:59.739001 28566 net.cpp:200] loss needs backward computation.
I0428 19:56:59.739006 28566 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:59.739009 28566 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:56:59.739012 28566 net.cpp:200] relu3 needs backward computation.
I0428 19:56:59.739015 28566 net.cpp:200] ip3 needs backward computation.
I0428 19:56:59.739019 28566 net.cpp:200] relu2 needs backward computation.
I0428 19:56:59.739022 28566 net.cpp:200] ip2 needs backward computation.
I0428 19:56:59.739025 28566 net.cpp:200] relu1 needs backward computation.
I0428 19:56:59.739027 28566 net.cpp:200] ip1 needs backward computation.
I0428 19:56:59.739032 28566 net.cpp:200] pool1 needs backward computation.
I0428 19:56:59.739034 28566 net.cpp:200] conv1 needs backward computation.
I0428 19:56:59.739038 28566 net.cpp:200] pool0 needs backward computation.
I0428 19:56:59.739042 28566 net.cpp:200] conv0 needs backward computation.
I0428 19:56:59.739051 28566 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:59.739055 28566 net.cpp:202] mnist does not need backward computation.
I0428 19:56:59.739059 28566 net.cpp:244] This network produces output accuracy
I0428 19:56:59.739063 28566 net.cpp:244] This network produces output loss
I0428 19:56:59.739073 28566 net.cpp:257] Network initialization done.
I0428 19:56:59.739116 28566 solver.cpp:56] Solver scaffolding done.
I0428 19:56:59.739472 28566 caffe.cpp:248] Starting Optimization
I0428 19:56:59.739478 28566 solver.cpp:273] Solving LeNet
I0428 19:56:59.739481 28566 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:59.740331 28566 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:59.743875 28566 blocking_queue.cpp:49] Waiting for data
I0428 19:56:59.813141 28573 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:59.813671 28566 solver.cpp:398]     Test net output #0: accuracy = 0.0624
I0428 19:56:59.813707 28566 solver.cpp:398]     Test net output #1: loss = 2.31012 (* 1 = 2.31012 loss)
I0428 19:56:59.816185 28566 solver.cpp:219] Iteration 0 (2.9692 iter/s, 0.07667s/100 iters), loss = 2.33327
I0428 19:56:59.816222 28566 solver.cpp:238]     Train net output #0: loss = 2.33327 (* 1 = 2.33327 loss)
I0428 19:56:59.816234 28566 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:59.891189 28566 solver.cpp:219] Iteration 100 (1333.81 iter/s, 0.0749732s/100 iters), loss = 0.610273
I0428 19:56:59.891228 28566 solver.cpp:238]     Train net output #0: loss = 0.610273 (* 1 = 0.610273 loss)
I0428 19:56:59.891234 28566 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:59.966114 28566 solver.cpp:219] Iteration 200 (1335.25 iter/s, 0.0748923s/100 iters), loss = 0.29493
I0428 19:56:59.966152 28566 solver.cpp:238]     Train net output #0: loss = 0.29493 (* 1 = 0.29493 loss)
I0428 19:56:59.966158 28566 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:00.042603 28566 solver.cpp:219] Iteration 300 (1307.93 iter/s, 0.0764568s/100 iters), loss = 0.39048
I0428 19:57:00.042628 28566 solver.cpp:238]     Train net output #0: loss = 0.39048 (* 1 = 0.39048 loss)
I0428 19:57:00.042634 28566 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:00.117280 28566 solver.cpp:219] Iteration 400 (1339.68 iter/s, 0.0746445s/100 iters), loss = 0.221356
I0428 19:57:00.117303 28566 solver.cpp:238]     Train net output #0: loss = 0.221356 (* 1 = 0.221356 loss)
I0428 19:57:00.117310 28566 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:00.190824 28566 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:00.243780 28573 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:00.244284 28566 solver.cpp:398]     Test net output #0: accuracy = 0.9204
I0428 19:57:00.244305 28566 solver.cpp:398]     Test net output #1: loss = 0.259213 (* 1 = 0.259213 loss)
I0428 19:57:00.245115 28566 solver.cpp:219] Iteration 500 (782.472 iter/s, 0.1278s/100 iters), loss = 0.217401
I0428 19:57:00.245156 28566 solver.cpp:238]     Train net output #0: loss = 0.217401 (* 1 = 0.217401 loss)
I0428 19:57:00.245182 28566 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:00.324512 28566 solver.cpp:219] Iteration 600 (1260.03 iter/s, 0.079363s/100 iters), loss = 0.185505
I0428 19:57:00.324545 28566 solver.cpp:238]     Train net output #0: loss = 0.185505 (* 1 = 0.185505 loss)
I0428 19:57:00.324551 28566 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:00.401902 28566 solver.cpp:219] Iteration 700 (1292.89 iter/s, 0.077346s/100 iters), loss = 0.276863
I0428 19:57:00.401949 28566 solver.cpp:238]     Train net output #0: loss = 0.276863 (* 1 = 0.276863 loss)
I0428 19:57:00.401957 28566 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:00.476303 28566 solver.cpp:219] Iteration 800 (1345.07 iter/s, 0.0743455s/100 iters), loss = 0.232765
I0428 19:57:00.476346 28566 solver.cpp:238]     Train net output #0: loss = 0.232764 (* 1 = 0.232764 loss)
I0428 19:57:00.476351 28566 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:00.549475 28566 solver.cpp:219] Iteration 900 (1367.28 iter/s, 0.0731381s/100 iters), loss = 0.303399
I0428 19:57:00.549515 28566 solver.cpp:238]     Train net output #0: loss = 0.303399 (* 1 = 0.303399 loss)
I0428 19:57:00.549521 28566 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:00.573849 28572 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:00.621682 28566 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:00.622414 28566 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:00.622939 28566 solver.cpp:311] Iteration 1000, loss = 0.131999
I0428 19:57:00.622953 28566 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:00.676077 28573 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:00.676614 28566 solver.cpp:398]     Test net output #0: accuracy = 0.9495
I0428 19:57:00.676650 28566 solver.cpp:398]     Test net output #1: loss = 0.157247 (* 1 = 0.157247 loss)
I0428 19:57:00.676656 28566 solver.cpp:316] Optimization Done.
I0428 19:57:00.676658 28566 caffe.cpp:259] Optimization Done.
