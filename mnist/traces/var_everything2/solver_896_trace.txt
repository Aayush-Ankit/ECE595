I0428 20:01:10.469053 29667 caffe.cpp:218] Using GPUs 0
I0428 20:01:10.507035 29667 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:11.047140 29667 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test896.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:11.047278 29667 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test896.prototxt
I0428 20:01:11.047695 29667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:11.047716 29667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:11.047816 29667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:11.047900 29667 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:11.047998 29667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:11.048022 29667 net.cpp:86] Creating Layer mnist
I0428 20:01:11.048032 29667 net.cpp:382] mnist -> data
I0428 20:01:11.048053 29667 net.cpp:382] mnist -> label
I0428 20:01:11.049151 29667 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:11.051589 29667 net.cpp:124] Setting up mnist
I0428 20:01:11.051606 29667 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:11.051612 29667 net.cpp:131] Top shape: 64 (64)
I0428 20:01:11.051616 29667 net.cpp:139] Memory required for data: 200960
I0428 20:01:11.051622 29667 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:11.051640 29667 net.cpp:86] Creating Layer conv0
I0428 20:01:11.051658 29667 net.cpp:408] conv0 <- data
I0428 20:01:11.051671 29667 net.cpp:382] conv0 -> conv0
I0428 20:01:11.340988 29667 net.cpp:124] Setting up conv0
I0428 20:01:11.341027 29667 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:11.341032 29667 net.cpp:139] Memory required for data: 1675520
I0428 20:01:11.341050 29667 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:11.341064 29667 net.cpp:86] Creating Layer pool0
I0428 20:01:11.341069 29667 net.cpp:408] pool0 <- conv0
I0428 20:01:11.341076 29667 net.cpp:382] pool0 -> pool0
I0428 20:01:11.341140 29667 net.cpp:124] Setting up pool0
I0428 20:01:11.341148 29667 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:11.341152 29667 net.cpp:139] Memory required for data: 2044160
I0428 20:01:11.341156 29667 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:11.341168 29667 net.cpp:86] Creating Layer conv1
I0428 20:01:11.341173 29667 net.cpp:408] conv1 <- pool0
I0428 20:01:11.341179 29667 net.cpp:382] conv1 -> conv1
I0428 20:01:11.344328 29667 net.cpp:124] Setting up conv1
I0428 20:01:11.344346 29667 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:01:11.344350 29667 net.cpp:139] Memory required for data: 2453760
I0428 20:01:11.344360 29667 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:11.344369 29667 net.cpp:86] Creating Layer pool1
I0428 20:01:11.344373 29667 net.cpp:408] pool1 <- conv1
I0428 20:01:11.344379 29667 net.cpp:382] pool1 -> pool1
I0428 20:01:11.344424 29667 net.cpp:124] Setting up pool1
I0428 20:01:11.344434 29667 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:01:11.344436 29667 net.cpp:139] Memory required for data: 2556160
I0428 20:01:11.344440 29667 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:11.344449 29667 net.cpp:86] Creating Layer ip1
I0428 20:01:11.344452 29667 net.cpp:408] ip1 <- pool1
I0428 20:01:11.344458 29667 net.cpp:382] ip1 -> ip1
I0428 20:01:11.344718 29667 net.cpp:124] Setting up ip1
I0428 20:01:11.344727 29667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:11.344732 29667 net.cpp:139] Memory required for data: 2568960
I0428 20:01:11.344740 29667 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:11.344746 29667 net.cpp:86] Creating Layer relu1
I0428 20:01:11.344750 29667 net.cpp:408] relu1 <- ip1
I0428 20:01:11.344755 29667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:11.344959 29667 net.cpp:124] Setting up relu1
I0428 20:01:11.344969 29667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:11.344972 29667 net.cpp:139] Memory required for data: 2581760
I0428 20:01:11.344977 29667 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:11.344985 29667 net.cpp:86] Creating Layer ip2
I0428 20:01:11.344992 29667 net.cpp:408] ip2 <- ip1
I0428 20:01:11.344998 29667 net.cpp:382] ip2 -> ip2
I0428 20:01:11.346093 29667 net.cpp:124] Setting up ip2
I0428 20:01:11.346108 29667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:11.346113 29667 net.cpp:139] Memory required for data: 2594560
I0428 20:01:11.346120 29667 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:11.346128 29667 net.cpp:86] Creating Layer relu2
I0428 20:01:11.346132 29667 net.cpp:408] relu2 <- ip2
I0428 20:01:11.346138 29667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:11.346984 29667 net.cpp:124] Setting up relu2
I0428 20:01:11.346999 29667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:11.347003 29667 net.cpp:139] Memory required for data: 2607360
I0428 20:01:11.347007 29667 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:11.347015 29667 net.cpp:86] Creating Layer ip3
I0428 20:01:11.347019 29667 net.cpp:408] ip3 <- ip2
I0428 20:01:11.347026 29667 net.cpp:382] ip3 -> ip3
I0428 20:01:11.347151 29667 net.cpp:124] Setting up ip3
I0428 20:01:11.347159 29667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:11.347163 29667 net.cpp:139] Memory required for data: 2609920
I0428 20:01:11.347173 29667 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:11.347182 29667 net.cpp:86] Creating Layer relu3
I0428 20:01:11.347187 29667 net.cpp:408] relu3 <- ip3
I0428 20:01:11.347192 29667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:11.347388 29667 net.cpp:124] Setting up relu3
I0428 20:01:11.347399 29667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:11.347404 29667 net.cpp:139] Memory required for data: 2612480
I0428 20:01:11.347406 29667 layer_factory.hpp:77] Creating layer loss
I0428 20:01:11.347414 29667 net.cpp:86] Creating Layer loss
I0428 20:01:11.347417 29667 net.cpp:408] loss <- ip3
I0428 20:01:11.347422 29667 net.cpp:408] loss <- label
I0428 20:01:11.347429 29667 net.cpp:382] loss -> loss
I0428 20:01:11.347445 29667 layer_factory.hpp:77] Creating layer loss
I0428 20:01:11.347721 29667 net.cpp:124] Setting up loss
I0428 20:01:11.347731 29667 net.cpp:131] Top shape: (1)
I0428 20:01:11.347735 29667 net.cpp:134]     with loss weight 1
I0428 20:01:11.347751 29667 net.cpp:139] Memory required for data: 2612484
I0428 20:01:11.347755 29667 net.cpp:200] loss needs backward computation.
I0428 20:01:11.347759 29667 net.cpp:200] relu3 needs backward computation.
I0428 20:01:11.347764 29667 net.cpp:200] ip3 needs backward computation.
I0428 20:01:11.347766 29667 net.cpp:200] relu2 needs backward computation.
I0428 20:01:11.347770 29667 net.cpp:200] ip2 needs backward computation.
I0428 20:01:11.347774 29667 net.cpp:200] relu1 needs backward computation.
I0428 20:01:11.347777 29667 net.cpp:200] ip1 needs backward computation.
I0428 20:01:11.347781 29667 net.cpp:200] pool1 needs backward computation.
I0428 20:01:11.347784 29667 net.cpp:200] conv1 needs backward computation.
I0428 20:01:11.347789 29667 net.cpp:200] pool0 needs backward computation.
I0428 20:01:11.347792 29667 net.cpp:200] conv0 needs backward computation.
I0428 20:01:11.347796 29667 net.cpp:202] mnist does not need backward computation.
I0428 20:01:11.347800 29667 net.cpp:244] This network produces output loss
I0428 20:01:11.347810 29667 net.cpp:257] Network initialization done.
I0428 20:01:11.348186 29667 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test896.prototxt
I0428 20:01:11.348219 29667 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:11.348337 29667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:11.348430 29667 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:11.348481 29667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:11.348495 29667 net.cpp:86] Creating Layer mnist
I0428 20:01:11.348501 29667 net.cpp:382] mnist -> data
I0428 20:01:11.348510 29667 net.cpp:382] mnist -> label
I0428 20:01:11.348609 29667 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:11.350798 29667 net.cpp:124] Setting up mnist
I0428 20:01:11.350814 29667 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:11.350821 29667 net.cpp:131] Top shape: 100 (100)
I0428 20:01:11.350823 29667 net.cpp:139] Memory required for data: 314000
I0428 20:01:11.350828 29667 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:11.350836 29667 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:11.350839 29667 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:11.350847 29667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:11.350854 29667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:11.350909 29667 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:11.350917 29667 net.cpp:131] Top shape: 100 (100)
I0428 20:01:11.350921 29667 net.cpp:131] Top shape: 100 (100)
I0428 20:01:11.350925 29667 net.cpp:139] Memory required for data: 314800
I0428 20:01:11.350929 29667 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:11.350939 29667 net.cpp:86] Creating Layer conv0
I0428 20:01:11.350944 29667 net.cpp:408] conv0 <- data
I0428 20:01:11.350950 29667 net.cpp:382] conv0 -> conv0
I0428 20:01:11.352831 29667 net.cpp:124] Setting up conv0
I0428 20:01:11.352849 29667 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:11.352854 29667 net.cpp:139] Memory required for data: 2618800
I0428 20:01:11.352864 29667 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:11.352872 29667 net.cpp:86] Creating Layer pool0
I0428 20:01:11.352876 29667 net.cpp:408] pool0 <- conv0
I0428 20:01:11.352882 29667 net.cpp:382] pool0 -> pool0
I0428 20:01:11.352926 29667 net.cpp:124] Setting up pool0
I0428 20:01:11.352933 29667 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:11.352937 29667 net.cpp:139] Memory required for data: 3194800
I0428 20:01:11.352941 29667 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:11.352952 29667 net.cpp:86] Creating Layer conv1
I0428 20:01:11.352957 29667 net.cpp:408] conv1 <- pool0
I0428 20:01:11.352962 29667 net.cpp:382] conv1 -> conv1
I0428 20:01:11.355303 29667 net.cpp:124] Setting up conv1
I0428 20:01:11.355317 29667 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:01:11.355321 29667 net.cpp:139] Memory required for data: 3834800
I0428 20:01:11.355332 29667 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:11.355340 29667 net.cpp:86] Creating Layer pool1
I0428 20:01:11.355345 29667 net.cpp:408] pool1 <- conv1
I0428 20:01:11.355350 29667 net.cpp:382] pool1 -> pool1
I0428 20:01:11.355401 29667 net.cpp:124] Setting up pool1
I0428 20:01:11.355407 29667 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:01:11.355412 29667 net.cpp:139] Memory required for data: 3994800
I0428 20:01:11.355415 29667 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:11.355432 29667 net.cpp:86] Creating Layer ip1
I0428 20:01:11.355434 29667 net.cpp:408] ip1 <- pool1
I0428 20:01:11.355440 29667 net.cpp:382] ip1 -> ip1
I0428 20:01:11.355718 29667 net.cpp:124] Setting up ip1
I0428 20:01:11.355731 29667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:11.355746 29667 net.cpp:139] Memory required for data: 4014800
I0428 20:01:11.355756 29667 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:11.355762 29667 net.cpp:86] Creating Layer relu1
I0428 20:01:11.355767 29667 net.cpp:408] relu1 <- ip1
I0428 20:01:11.355772 29667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:11.355969 29667 net.cpp:124] Setting up relu1
I0428 20:01:11.355980 29667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:11.355984 29667 net.cpp:139] Memory required for data: 4034800
I0428 20:01:11.355988 29667 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:11.355996 29667 net.cpp:86] Creating Layer ip2
I0428 20:01:11.356000 29667 net.cpp:408] ip2 <- ip1
I0428 20:01:11.356006 29667 net.cpp:382] ip2 -> ip2
I0428 20:01:11.356145 29667 net.cpp:124] Setting up ip2
I0428 20:01:11.356154 29667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:11.356158 29667 net.cpp:139] Memory required for data: 4054800
I0428 20:01:11.356165 29667 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:11.356171 29667 net.cpp:86] Creating Layer relu2
I0428 20:01:11.356174 29667 net.cpp:408] relu2 <- ip2
I0428 20:01:11.356180 29667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:11.356397 29667 net.cpp:124] Setting up relu2
I0428 20:01:11.356408 29667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:11.356412 29667 net.cpp:139] Memory required for data: 4074800
I0428 20:01:11.356415 29667 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:11.356423 29667 net.cpp:86] Creating Layer ip3
I0428 20:01:11.356426 29667 net.cpp:408] ip3 <- ip2
I0428 20:01:11.356432 29667 net.cpp:382] ip3 -> ip3
I0428 20:01:11.356590 29667 net.cpp:124] Setting up ip3
I0428 20:01:11.356600 29667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:11.356603 29667 net.cpp:139] Memory required for data: 4078800
I0428 20:01:11.356613 29667 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:11.356619 29667 net.cpp:86] Creating Layer relu3
I0428 20:01:11.356622 29667 net.cpp:408] relu3 <- ip3
I0428 20:01:11.356628 29667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:11.357607 29667 net.cpp:124] Setting up relu3
I0428 20:01:11.357623 29667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:11.357627 29667 net.cpp:139] Memory required for data: 4082800
I0428 20:01:11.357632 29667 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:11.357638 29667 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:11.357642 29667 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:11.357648 29667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:11.357656 29667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:11.357703 29667 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:11.357717 29667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:11.357720 29667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:11.357725 29667 net.cpp:139] Memory required for data: 4090800
I0428 20:01:11.357728 29667 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:11.357734 29667 net.cpp:86] Creating Layer accuracy
I0428 20:01:11.357738 29667 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:11.357743 29667 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:11.357749 29667 net.cpp:382] accuracy -> accuracy
I0428 20:01:11.357758 29667 net.cpp:124] Setting up accuracy
I0428 20:01:11.357762 29667 net.cpp:131] Top shape: (1)
I0428 20:01:11.357766 29667 net.cpp:139] Memory required for data: 4090804
I0428 20:01:11.357770 29667 layer_factory.hpp:77] Creating layer loss
I0428 20:01:11.357775 29667 net.cpp:86] Creating Layer loss
I0428 20:01:11.357779 29667 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:11.357784 29667 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:11.357789 29667 net.cpp:382] loss -> loss
I0428 20:01:11.357797 29667 layer_factory.hpp:77] Creating layer loss
I0428 20:01:11.358090 29667 net.cpp:124] Setting up loss
I0428 20:01:11.358101 29667 net.cpp:131] Top shape: (1)
I0428 20:01:11.358105 29667 net.cpp:134]     with loss weight 1
I0428 20:01:11.358124 29667 net.cpp:139] Memory required for data: 4090808
I0428 20:01:11.358129 29667 net.cpp:200] loss needs backward computation.
I0428 20:01:11.358134 29667 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:11.358139 29667 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:11.358144 29667 net.cpp:200] relu3 needs backward computation.
I0428 20:01:11.358146 29667 net.cpp:200] ip3 needs backward computation.
I0428 20:01:11.358150 29667 net.cpp:200] relu2 needs backward computation.
I0428 20:01:11.358153 29667 net.cpp:200] ip2 needs backward computation.
I0428 20:01:11.358157 29667 net.cpp:200] relu1 needs backward computation.
I0428 20:01:11.358160 29667 net.cpp:200] ip1 needs backward computation.
I0428 20:01:11.358165 29667 net.cpp:200] pool1 needs backward computation.
I0428 20:01:11.358167 29667 net.cpp:200] conv1 needs backward computation.
I0428 20:01:11.358171 29667 net.cpp:200] pool0 needs backward computation.
I0428 20:01:11.358175 29667 net.cpp:200] conv0 needs backward computation.
I0428 20:01:11.358187 29667 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:11.358192 29667 net.cpp:202] mnist does not need backward computation.
I0428 20:01:11.358196 29667 net.cpp:244] This network produces output accuracy
I0428 20:01:11.358201 29667 net.cpp:244] This network produces output loss
I0428 20:01:11.358213 29667 net.cpp:257] Network initialization done.
I0428 20:01:11.358264 29667 solver.cpp:56] Solver scaffolding done.
I0428 20:01:11.358701 29667 caffe.cpp:248] Starting Optimization
I0428 20:01:11.358707 29667 solver.cpp:273] Solving LeNet
I0428 20:01:11.358711 29667 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:11.359592 29667 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:11.364172 29667 blocking_queue.cpp:49] Waiting for data
I0428 20:01:11.433542 29674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:11.434103 29667 solver.cpp:398]     Test net output #0: accuracy = 0.1011
I0428 20:01:11.434128 29667 solver.cpp:398]     Test net output #1: loss = 2.31893 (* 1 = 2.31893 loss)
I0428 20:01:11.436899 29667 solver.cpp:219] Iteration 0 (-5.64941e-31 iter/s, 0.0781537s/100 iters), loss = 2.31546
I0428 20:01:11.436929 29667 solver.cpp:238]     Train net output #0: loss = 2.31546 (* 1 = 2.31546 loss)
I0428 20:01:11.436944 29667 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:11.531075 29667 solver.cpp:219] Iteration 100 (1062.35 iter/s, 0.0941312s/100 iters), loss = 1.06984
I0428 20:01:11.531107 29667 solver.cpp:238]     Train net output #0: loss = 1.06984 (* 1 = 1.06984 loss)
I0428 20:01:11.531116 29667 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:11.624539 29667 solver.cpp:219] Iteration 200 (1070.43 iter/s, 0.0934206s/100 iters), loss = 0.821705
I0428 20:01:11.624570 29667 solver.cpp:238]     Train net output #0: loss = 0.821705 (* 1 = 0.821705 loss)
I0428 20:01:11.624577 29667 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:11.717805 29667 solver.cpp:219] Iteration 300 (1072.66 iter/s, 0.093226s/100 iters), loss = 0.723827
I0428 20:01:11.717835 29667 solver.cpp:238]     Train net output #0: loss = 0.723827 (* 1 = 0.723827 loss)
I0428 20:01:11.717844 29667 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:11.809634 29667 solver.cpp:219] Iteration 400 (1089.45 iter/s, 0.0917893s/100 iters), loss = 0.556498
I0428 20:01:11.809660 29667 solver.cpp:238]     Train net output #0: loss = 0.556498 (* 1 = 0.556498 loss)
I0428 20:01:11.809666 29667 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:11.895990 29667 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:11.942042 29674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:11.943222 29667 solver.cpp:398]     Test net output #0: accuracy = 0.6864
I0428 20:01:11.943258 29667 solver.cpp:398]     Test net output #1: loss = 0.771742 (* 1 = 0.771742 loss)
I0428 20:01:11.944151 29667 solver.cpp:219] Iteration 500 (743.607 iter/s, 0.13448s/100 iters), loss = 0.793754
I0428 20:01:11.944205 29667 solver.cpp:238]     Train net output #0: loss = 0.793754 (* 1 = 0.793754 loss)
I0428 20:01:11.944211 29667 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:12.038223 29667 solver.cpp:219] Iteration 600 (1063.53 iter/s, 0.0940268s/100 iters), loss = 0.74848
I0428 20:01:12.038277 29667 solver.cpp:238]     Train net output #0: loss = 0.74848 (* 1 = 0.74848 loss)
I0428 20:01:12.038283 29667 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:12.131336 29667 solver.cpp:219] Iteration 700 (1074.52 iter/s, 0.0930652s/100 iters), loss = 1.03072
I0428 20:01:12.131376 29667 solver.cpp:238]     Train net output #0: loss = 1.03072 (* 1 = 1.03072 loss)
I0428 20:01:12.131381 29667 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:12.220818 29667 solver.cpp:219] Iteration 800 (1118.01 iter/s, 0.0894444s/100 iters), loss = 0.595002
I0428 20:01:12.220860 29667 solver.cpp:238]     Train net output #0: loss = 0.595002 (* 1 = 0.595002 loss)
I0428 20:01:12.220865 29667 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:12.309738 29667 solver.cpp:219] Iteration 900 (1125.03 iter/s, 0.0888863s/100 iters), loss = 0.301371
I0428 20:01:12.309782 29667 solver.cpp:238]     Train net output #0: loss = 0.301371 (* 1 = 0.301371 loss)
I0428 20:01:12.309787 29667 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:12.339153 29673 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:12.397485 29667 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:12.398718 29667 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:12.399436 29667 solver.cpp:311] Iteration 1000, loss = 0.574504
I0428 20:01:12.399451 29667 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:12.466840 29674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:12.467494 29667 solver.cpp:398]     Test net output #0: accuracy = 0.7965
I0428 20:01:12.467533 29667 solver.cpp:398]     Test net output #1: loss = 0.500809 (* 1 = 0.500809 loss)
I0428 20:01:12.467555 29667 solver.cpp:316] Optimization Done.
I0428 20:01:12.467559 29667 caffe.cpp:259] Optimization Done.
