I0428 19:52:57.415662 27664 caffe.cpp:218] Using GPUs 0
I0428 19:52:57.447151 27664 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:52:57.941123 27664 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test675.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:52:57.941278 27664 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test675.prototxt
I0428 19:52:57.941682 27664 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:52:57.941711 27664 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:52:57.941790 27664 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:57.941853 27664 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:57.941931 27664 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:52:57.941951 27664 net.cpp:86] Creating Layer mnist
I0428 19:52:57.941962 27664 net.cpp:382] mnist -> data
I0428 19:52:57.941998 27664 net.cpp:382] mnist -> label
I0428 19:52:57.942982 27664 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:52:57.945268 27664 net.cpp:124] Setting up mnist
I0428 19:52:57.945314 27664 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:52:57.945319 27664 net.cpp:131] Top shape: 64 (64)
I0428 19:52:57.945322 27664 net.cpp:139] Memory required for data: 200960
I0428 19:52:57.945327 27664 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:57.945350 27664 net.cpp:86] Creating Layer conv0
I0428 19:52:57.945369 27664 net.cpp:408] conv0 <- data
I0428 19:52:57.945381 27664 net.cpp:382] conv0 -> conv0
I0428 19:52:58.174516 27664 net.cpp:124] Setting up conv0
I0428 19:52:58.174541 27664 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:52:58.174546 27664 net.cpp:139] Memory required for data: 938240
I0428 19:52:58.174561 27664 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:58.174572 27664 net.cpp:86] Creating Layer pool0
I0428 19:52:58.174576 27664 net.cpp:408] pool0 <- conv0
I0428 19:52:58.174582 27664 net.cpp:382] pool0 -> pool0
I0428 19:52:58.174626 27664 net.cpp:124] Setting up pool0
I0428 19:52:58.174641 27664 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:52:58.174644 27664 net.cpp:139] Memory required for data: 1122560
I0428 19:52:58.174648 27664 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:58.174659 27664 net.cpp:86] Creating Layer conv1
I0428 19:52:58.174661 27664 net.cpp:408] conv1 <- pool0
I0428 19:52:58.174665 27664 net.cpp:382] conv1 -> conv1
I0428 19:52:58.177608 27664 net.cpp:124] Setting up conv1
I0428 19:52:58.177623 27664 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:52:58.177626 27664 net.cpp:139] Memory required for data: 1941760
I0428 19:52:58.177635 27664 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:58.177642 27664 net.cpp:86] Creating Layer pool1
I0428 19:52:58.177661 27664 net.cpp:408] pool1 <- conv1
I0428 19:52:58.177666 27664 net.cpp:382] pool1 -> pool1
I0428 19:52:58.177703 27664 net.cpp:124] Setting up pool1
I0428 19:52:58.177708 27664 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:52:58.177711 27664 net.cpp:139] Memory required for data: 2146560
I0428 19:52:58.177714 27664 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:58.177726 27664 net.cpp:86] Creating Layer ip1
I0428 19:52:58.177729 27664 net.cpp:408] ip1 <- pool1
I0428 19:52:58.177734 27664 net.cpp:382] ip1 -> ip1
I0428 19:52:58.177872 27664 net.cpp:124] Setting up ip1
I0428 19:52:58.177880 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.177882 27664 net.cpp:139] Memory required for data: 2149120
I0428 19:52:58.177889 27664 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:58.177896 27664 net.cpp:86] Creating Layer relu1
I0428 19:52:58.177898 27664 net.cpp:408] relu1 <- ip1
I0428 19:52:58.177902 27664 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:58.178081 27664 net.cpp:124] Setting up relu1
I0428 19:52:58.178088 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.178092 27664 net.cpp:139] Memory required for data: 2151680
I0428 19:52:58.178094 27664 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:58.178100 27664 net.cpp:86] Creating Layer ip2
I0428 19:52:58.178103 27664 net.cpp:408] ip2 <- ip1
I0428 19:52:58.178107 27664 net.cpp:382] ip2 -> ip2
I0428 19:52:58.178194 27664 net.cpp:124] Setting up ip2
I0428 19:52:58.178200 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.178202 27664 net.cpp:139] Memory required for data: 2154240
I0428 19:52:58.178207 27664 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:58.178213 27664 net.cpp:86] Creating Layer relu2
I0428 19:52:58.178216 27664 net.cpp:408] relu2 <- ip2
I0428 19:52:58.178220 27664 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:58.179014 27664 net.cpp:124] Setting up relu2
I0428 19:52:58.179026 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.179030 27664 net.cpp:139] Memory required for data: 2156800
I0428 19:52:58.179033 27664 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:58.179040 27664 net.cpp:86] Creating Layer ip3
I0428 19:52:58.179044 27664 net.cpp:408] ip3 <- ip2
I0428 19:52:58.179049 27664 net.cpp:382] ip3 -> ip3
I0428 19:52:58.179143 27664 net.cpp:124] Setting up ip3
I0428 19:52:58.179150 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.179153 27664 net.cpp:139] Memory required for data: 2159360
I0428 19:52:58.179162 27664 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:58.179167 27664 net.cpp:86] Creating Layer relu3
I0428 19:52:58.179170 27664 net.cpp:408] relu3 <- ip3
I0428 19:52:58.179174 27664 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:58.179378 27664 net.cpp:124] Setting up relu3
I0428 19:52:58.179388 27664 net.cpp:131] Top shape: 64 10 (640)
I0428 19:52:58.179390 27664 net.cpp:139] Memory required for data: 2161920
I0428 19:52:58.179394 27664 layer_factory.hpp:77] Creating layer loss
I0428 19:52:58.179414 27664 net.cpp:86] Creating Layer loss
I0428 19:52:58.179417 27664 net.cpp:408] loss <- ip3
I0428 19:52:58.179421 27664 net.cpp:408] loss <- label
I0428 19:52:58.179426 27664 net.cpp:382] loss -> loss
I0428 19:52:58.179440 27664 layer_factory.hpp:77] Creating layer loss
I0428 19:52:58.179667 27664 net.cpp:124] Setting up loss
I0428 19:52:58.179675 27664 net.cpp:131] Top shape: (1)
I0428 19:52:58.179678 27664 net.cpp:134]     with loss weight 1
I0428 19:52:58.179692 27664 net.cpp:139] Memory required for data: 2161924
I0428 19:52:58.179695 27664 net.cpp:200] loss needs backward computation.
I0428 19:52:58.179699 27664 net.cpp:200] relu3 needs backward computation.
I0428 19:52:58.179702 27664 net.cpp:200] ip3 needs backward computation.
I0428 19:52:58.179704 27664 net.cpp:200] relu2 needs backward computation.
I0428 19:52:58.179708 27664 net.cpp:200] ip2 needs backward computation.
I0428 19:52:58.179710 27664 net.cpp:200] relu1 needs backward computation.
I0428 19:52:58.179713 27664 net.cpp:200] ip1 needs backward computation.
I0428 19:52:58.179715 27664 net.cpp:200] pool1 needs backward computation.
I0428 19:52:58.179718 27664 net.cpp:200] conv1 needs backward computation.
I0428 19:52:58.179721 27664 net.cpp:200] pool0 needs backward computation.
I0428 19:52:58.179724 27664 net.cpp:200] conv0 needs backward computation.
I0428 19:52:58.179728 27664 net.cpp:202] mnist does not need backward computation.
I0428 19:52:58.179730 27664 net.cpp:244] This network produces output loss
I0428 19:52:58.179739 27664 net.cpp:257] Network initialization done.
I0428 19:52:58.180091 27664 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test675.prototxt
I0428 19:52:58.180119 27664 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:52:58.180236 27664 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:52:58.180311 27664 layer_factory.hpp:77] Creating layer mnist
I0428 19:52:58.180356 27664 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:52:58.180367 27664 net.cpp:86] Creating Layer mnist
I0428 19:52:58.180371 27664 net.cpp:382] mnist -> data
I0428 19:52:58.180378 27664 net.cpp:382] mnist -> label
I0428 19:52:58.180456 27664 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:52:58.182649 27664 net.cpp:124] Setting up mnist
I0428 19:52:58.182693 27664 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:52:58.182698 27664 net.cpp:131] Top shape: 100 (100)
I0428 19:52:58.182701 27664 net.cpp:139] Memory required for data: 314000
I0428 19:52:58.182705 27664 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:52:58.182713 27664 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:52:58.182715 27664 net.cpp:408] label_mnist_1_split <- label
I0428 19:52:58.182720 27664 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:52:58.182727 27664 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:52:58.182786 27664 net.cpp:124] Setting up label_mnist_1_split
I0428 19:52:58.182793 27664 net.cpp:131] Top shape: 100 (100)
I0428 19:52:58.182797 27664 net.cpp:131] Top shape: 100 (100)
I0428 19:52:58.182799 27664 net.cpp:139] Memory required for data: 314800
I0428 19:52:58.182802 27664 layer_factory.hpp:77] Creating layer conv0
I0428 19:52:58.182811 27664 net.cpp:86] Creating Layer conv0
I0428 19:52:58.182813 27664 net.cpp:408] conv0 <- data
I0428 19:52:58.182818 27664 net.cpp:382] conv0 -> conv0
I0428 19:52:58.184566 27664 net.cpp:124] Setting up conv0
I0428 19:52:58.184595 27664 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:52:58.184598 27664 net.cpp:139] Memory required for data: 1466800
I0428 19:52:58.184607 27664 layer_factory.hpp:77] Creating layer pool0
I0428 19:52:58.184613 27664 net.cpp:86] Creating Layer pool0
I0428 19:52:58.184617 27664 net.cpp:408] pool0 <- conv0
I0428 19:52:58.184622 27664 net.cpp:382] pool0 -> pool0
I0428 19:52:58.184654 27664 net.cpp:124] Setting up pool0
I0428 19:52:58.184659 27664 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:52:58.184662 27664 net.cpp:139] Memory required for data: 1754800
I0428 19:52:58.184665 27664 layer_factory.hpp:77] Creating layer conv1
I0428 19:52:58.184674 27664 net.cpp:86] Creating Layer conv1
I0428 19:52:58.184676 27664 net.cpp:408] conv1 <- pool0
I0428 19:52:58.184680 27664 net.cpp:382] conv1 -> conv1
I0428 19:52:58.186290 27664 net.cpp:124] Setting up conv1
I0428 19:52:58.186317 27664 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:52:58.186321 27664 net.cpp:139] Memory required for data: 3034800
I0428 19:52:58.186331 27664 layer_factory.hpp:77] Creating layer pool1
I0428 19:52:58.186338 27664 net.cpp:86] Creating Layer pool1
I0428 19:52:58.186342 27664 net.cpp:408] pool1 <- conv1
I0428 19:52:58.186347 27664 net.cpp:382] pool1 -> pool1
I0428 19:52:58.186398 27664 net.cpp:124] Setting up pool1
I0428 19:52:58.186403 27664 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:52:58.186406 27664 net.cpp:139] Memory required for data: 3354800
I0428 19:52:58.186410 27664 layer_factory.hpp:77] Creating layer ip1
I0428 19:52:58.186415 27664 net.cpp:86] Creating Layer ip1
I0428 19:52:58.186419 27664 net.cpp:408] ip1 <- pool1
I0428 19:52:58.186424 27664 net.cpp:382] ip1 -> ip1
I0428 19:52:58.186583 27664 net.cpp:124] Setting up ip1
I0428 19:52:58.186591 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.186606 27664 net.cpp:139] Memory required for data: 3358800
I0428 19:52:58.186614 27664 layer_factory.hpp:77] Creating layer relu1
I0428 19:52:58.186620 27664 net.cpp:86] Creating Layer relu1
I0428 19:52:58.186624 27664 net.cpp:408] relu1 <- ip1
I0428 19:52:58.186628 27664 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:52:58.186810 27664 net.cpp:124] Setting up relu1
I0428 19:52:58.186817 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.186820 27664 net.cpp:139] Memory required for data: 3362800
I0428 19:52:58.186823 27664 layer_factory.hpp:77] Creating layer ip2
I0428 19:52:58.186830 27664 net.cpp:86] Creating Layer ip2
I0428 19:52:58.186833 27664 net.cpp:408] ip2 <- ip1
I0428 19:52:58.186838 27664 net.cpp:382] ip2 -> ip2
I0428 19:52:58.186928 27664 net.cpp:124] Setting up ip2
I0428 19:52:58.186935 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.186939 27664 net.cpp:139] Memory required for data: 3366800
I0428 19:52:58.186944 27664 layer_factory.hpp:77] Creating layer relu2
I0428 19:52:58.186947 27664 net.cpp:86] Creating Layer relu2
I0428 19:52:58.186950 27664 net.cpp:408] relu2 <- ip2
I0428 19:52:58.186954 27664 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:52:58.187139 27664 net.cpp:124] Setting up relu2
I0428 19:52:58.187147 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.187150 27664 net.cpp:139] Memory required for data: 3370800
I0428 19:52:58.187155 27664 layer_factory.hpp:77] Creating layer ip3
I0428 19:52:58.187160 27664 net.cpp:86] Creating Layer ip3
I0428 19:52:58.187162 27664 net.cpp:408] ip3 <- ip2
I0428 19:52:58.187167 27664 net.cpp:382] ip3 -> ip3
I0428 19:52:58.187273 27664 net.cpp:124] Setting up ip3
I0428 19:52:58.187280 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.187283 27664 net.cpp:139] Memory required for data: 3374800
I0428 19:52:58.187291 27664 layer_factory.hpp:77] Creating layer relu3
I0428 19:52:58.187296 27664 net.cpp:86] Creating Layer relu3
I0428 19:52:58.187299 27664 net.cpp:408] relu3 <- ip3
I0428 19:52:58.187304 27664 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:52:58.188161 27664 net.cpp:124] Setting up relu3
I0428 19:52:58.188189 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.188191 27664 net.cpp:139] Memory required for data: 3378800
I0428 19:52:58.188210 27664 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:52:58.188216 27664 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:52:58.188220 27664 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:52:58.188225 27664 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:52:58.188246 27664 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:52:58.188282 27664 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:52:58.188287 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.188292 27664 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:52:58.188294 27664 net.cpp:139] Memory required for data: 3386800
I0428 19:52:58.188297 27664 layer_factory.hpp:77] Creating layer accuracy
I0428 19:52:58.188308 27664 net.cpp:86] Creating Layer accuracy
I0428 19:52:58.188311 27664 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:52:58.188316 27664 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:52:58.188321 27664 net.cpp:382] accuracy -> accuracy
I0428 19:52:58.188328 27664 net.cpp:124] Setting up accuracy
I0428 19:52:58.188333 27664 net.cpp:131] Top shape: (1)
I0428 19:52:58.188335 27664 net.cpp:139] Memory required for data: 3386804
I0428 19:52:58.188339 27664 layer_factory.hpp:77] Creating layer loss
I0428 19:52:58.188344 27664 net.cpp:86] Creating Layer loss
I0428 19:52:58.188346 27664 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:52:58.188350 27664 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:52:58.188354 27664 net.cpp:382] loss -> loss
I0428 19:52:58.188366 27664 layer_factory.hpp:77] Creating layer loss
I0428 19:52:58.188585 27664 net.cpp:124] Setting up loss
I0428 19:52:58.188594 27664 net.cpp:131] Top shape: (1)
I0428 19:52:58.188597 27664 net.cpp:134]     with loss weight 1
I0428 19:52:58.188603 27664 net.cpp:139] Memory required for data: 3386808
I0428 19:52:58.188616 27664 net.cpp:200] loss needs backward computation.
I0428 19:52:58.188637 27664 net.cpp:202] accuracy does not need backward computation.
I0428 19:52:58.188640 27664 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:52:58.188649 27664 net.cpp:200] relu3 needs backward computation.
I0428 19:52:58.188653 27664 net.cpp:200] ip3 needs backward computation.
I0428 19:52:58.188657 27664 net.cpp:200] relu2 needs backward computation.
I0428 19:52:58.188659 27664 net.cpp:200] ip2 needs backward computation.
I0428 19:52:58.188663 27664 net.cpp:200] relu1 needs backward computation.
I0428 19:52:58.188665 27664 net.cpp:200] ip1 needs backward computation.
I0428 19:52:58.188668 27664 net.cpp:200] pool1 needs backward computation.
I0428 19:52:58.188671 27664 net.cpp:200] conv1 needs backward computation.
I0428 19:52:58.188675 27664 net.cpp:200] pool0 needs backward computation.
I0428 19:52:58.188678 27664 net.cpp:200] conv0 needs backward computation.
I0428 19:52:58.188683 27664 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:52:58.188706 27664 net.cpp:202] mnist does not need backward computation.
I0428 19:52:58.188709 27664 net.cpp:244] This network produces output accuracy
I0428 19:52:58.188729 27664 net.cpp:244] This network produces output loss
I0428 19:52:58.188738 27664 net.cpp:257] Network initialization done.
I0428 19:52:58.188781 27664 solver.cpp:56] Solver scaffolding done.
I0428 19:52:58.189229 27664 caffe.cpp:248] Starting Optimization
I0428 19:52:58.189236 27664 solver.cpp:273] Solving LeNet
I0428 19:52:58.189239 27664 solver.cpp:274] Learning Rate Policy: inv
I0428 19:52:58.189471 27664 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:52:58.193847 27664 blocking_queue.cpp:49] Waiting for data
I0428 19:52:58.265571 27671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:58.266090 27664 solver.cpp:398]     Test net output #0: accuracy = 0.1474
I0428 19:52:58.266124 27664 solver.cpp:398]     Test net output #1: loss = 2.3039 (* 1 = 2.3039 loss)
I0428 19:52:58.268484 27664 solver.cpp:219] Iteration 0 (0 iter/s, 0.0792166s/100 iters), loss = 2.31591
I0428 19:52:58.268520 27664 solver.cpp:238]     Train net output #0: loss = 2.31591 (* 1 = 2.31591 loss)
I0428 19:52:58.268548 27664 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:52:58.379209 27664 solver.cpp:219] Iteration 100 (903.515 iter/s, 0.110679s/100 iters), loss = 1.16079
I0428 19:52:58.379235 27664 solver.cpp:238]     Train net output #0: loss = 1.16079 (* 1 = 1.16079 loss)
I0428 19:52:58.379241 27664 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:52:58.484314 27664 solver.cpp:219] Iteration 200 (951.76 iter/s, 0.105069s/100 iters), loss = 0.924517
I0428 19:52:58.484339 27664 solver.cpp:238]     Train net output #0: loss = 0.924517 (* 1 = 0.924517 loss)
I0428 19:52:58.484345 27664 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:52:58.586606 27664 solver.cpp:219] Iteration 300 (977.941 iter/s, 0.102256s/100 iters), loss = 0.701969
I0428 19:52:58.586630 27664 solver.cpp:238]     Train net output #0: loss = 0.701969 (* 1 = 0.701969 loss)
I0428 19:52:58.586652 27664 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:52:58.697584 27664 solver.cpp:219] Iteration 400 (901.377 iter/s, 0.110941s/100 iters), loss = 1.11029
I0428 19:52:58.697618 27664 solver.cpp:238]     Train net output #0: loss = 1.11029 (* 1 = 1.11029 loss)
I0428 19:52:58.697626 27664 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:52:58.799594 27664 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:52:58.874553 27671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:58.875123 27664 solver.cpp:398]     Test net output #0: accuracy = 0.7387
I0428 19:52:58.875151 27664 solver.cpp:398]     Test net output #1: loss = 0.869479 (* 1 = 0.869479 loss)
I0428 19:52:58.876302 27664 solver.cpp:219] Iteration 500 (559.696 iter/s, 0.178669s/100 iters), loss = 1.02744
I0428 19:52:58.876346 27664 solver.cpp:238]     Train net output #0: loss = 1.02744 (* 1 = 1.02744 loss)
I0428 19:52:58.876374 27664 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:52:58.991286 27664 solver.cpp:219] Iteration 600 (870.077 iter/s, 0.114932s/100 iters), loss = 0.793843
I0428 19:52:58.991319 27664 solver.cpp:238]     Train net output #0: loss = 0.793843 (* 1 = 0.793843 loss)
I0428 19:52:58.991328 27664 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:52:59.099012 27664 solver.cpp:219] Iteration 700 (928.653 iter/s, 0.107683s/100 iters), loss = 0.898618
I0428 19:52:59.099045 27664 solver.cpp:238]     Train net output #0: loss = 0.898618 (* 1 = 0.898618 loss)
I0428 19:52:59.099053 27664 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:52:59.210458 27664 solver.cpp:219] Iteration 800 (897.668 iter/s, 0.1114s/100 iters), loss = 0.731749
I0428 19:52:59.210491 27664 solver.cpp:238]     Train net output #0: loss = 0.731749 (* 1 = 0.731749 loss)
I0428 19:52:59.210500 27664 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:52:59.319169 27664 solver.cpp:219] Iteration 900 (920.251 iter/s, 0.108666s/100 iters), loss = 0.729679
I0428 19:52:59.319201 27664 solver.cpp:238]     Train net output #0: loss = 0.729679 (* 1 = 0.729679 loss)
I0428 19:52:59.319209 27664 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:52:59.354686 27670 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:59.428726 27664 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:52:59.429870 27664 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:52:59.430498 27664 solver.cpp:311] Iteration 1000, loss = 0.788888
I0428 19:52:59.430519 27664 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:52:59.498042 27671 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:52:59.498633 27664 solver.cpp:398]     Test net output #0: accuracy = 0.7611
I0428 19:52:59.498656 27664 solver.cpp:398]     Test net output #1: loss = 0.805848 (* 1 = 0.805848 loss)
I0428 19:52:59.498662 27664 solver.cpp:316] Optimization Done.
I0428 19:52:59.498667 27664 caffe.cpp:259] Optimization Done.
