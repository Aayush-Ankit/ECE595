I0428 19:48:23.612061 26471 caffe.cpp:218] Using GPUs 0
I0428 19:48:23.652942 26471 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:24.172046 26471 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test543.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:24.172222 26471 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test543.prototxt
I0428 19:48:24.172650 26471 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:24.172677 26471 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:24.172792 26471 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:24.172915 26471 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:24.173048 26471 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:24.173081 26471 net.cpp:86] Creating Layer mnist
I0428 19:48:24.173095 26471 net.cpp:382] mnist -> data
I0428 19:48:24.173126 26471 net.cpp:382] mnist -> label
I0428 19:48:24.174398 26471 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:24.176865 26471 net.cpp:124] Setting up mnist
I0428 19:48:24.176885 26471 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:24.176895 26471 net.cpp:131] Top shape: 64 (64)
I0428 19:48:24.176901 26471 net.cpp:139] Memory required for data: 200960
I0428 19:48:24.176913 26471 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:24.176936 26471 net.cpp:86] Creating Layer conv0
I0428 19:48:24.176961 26471 net.cpp:408] conv0 <- data
I0428 19:48:24.176985 26471 net.cpp:382] conv0 -> conv0
I0428 19:48:24.467862 26471 net.cpp:124] Setting up conv0
I0428 19:48:24.467897 26471 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:24.467905 26471 net.cpp:139] Memory required for data: 938240
I0428 19:48:24.467929 26471 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:24.467950 26471 net.cpp:86] Creating Layer pool0
I0428 19:48:24.467958 26471 net.cpp:408] pool0 <- conv0
I0428 19:48:24.467969 26471 net.cpp:382] pool0 -> pool0
I0428 19:48:24.468034 26471 net.cpp:124] Setting up pool0
I0428 19:48:24.468045 26471 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:24.468052 26471 net.cpp:139] Memory required for data: 1122560
I0428 19:48:24.468058 26471 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:24.468077 26471 net.cpp:86] Creating Layer conv1
I0428 19:48:24.468086 26471 net.cpp:408] conv1 <- pool0
I0428 19:48:24.468096 26471 net.cpp:382] conv1 -> conv1
I0428 19:48:24.470253 26471 net.cpp:124] Setting up conv1
I0428 19:48:24.470274 26471 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:48:24.470283 26471 net.cpp:139] Memory required for data: 1155328
I0428 19:48:24.470299 26471 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:24.470312 26471 net.cpp:86] Creating Layer pool1
I0428 19:48:24.470319 26471 net.cpp:408] pool1 <- conv1
I0428 19:48:24.470330 26471 net.cpp:382] pool1 -> pool1
I0428 19:48:24.470382 26471 net.cpp:124] Setting up pool1
I0428 19:48:24.470393 26471 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:48:24.470399 26471 net.cpp:139] Memory required for data: 1163520
I0428 19:48:24.470407 26471 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:24.470419 26471 net.cpp:86] Creating Layer ip1
I0428 19:48:24.470427 26471 net.cpp:408] ip1 <- pool1
I0428 19:48:24.470437 26471 net.cpp:382] ip1 -> ip1
I0428 19:48:24.471544 26471 net.cpp:124] Setting up ip1
I0428 19:48:24.471561 26471 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:24.471567 26471 net.cpp:139] Memory required for data: 1176320
I0428 19:48:24.471583 26471 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:24.471595 26471 net.cpp:86] Creating Layer relu1
I0428 19:48:24.471602 26471 net.cpp:408] relu1 <- ip1
I0428 19:48:24.471611 26471 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:24.471827 26471 net.cpp:124] Setting up relu1
I0428 19:48:24.471839 26471 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:24.471845 26471 net.cpp:139] Memory required for data: 1189120
I0428 19:48:24.471851 26471 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:24.471863 26471 net.cpp:86] Creating Layer ip2
I0428 19:48:24.471870 26471 net.cpp:408] ip2 <- ip1
I0428 19:48:24.471881 26471 net.cpp:382] ip2 -> ip2
I0428 19:48:24.472019 26471 net.cpp:124] Setting up ip2
I0428 19:48:24.472029 26471 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:24.472036 26471 net.cpp:139] Memory required for data: 1201920
I0428 19:48:24.472048 26471 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:24.472060 26471 net.cpp:86] Creating Layer relu2
I0428 19:48:24.472069 26471 net.cpp:408] relu2 <- ip2
I0428 19:48:24.472079 26471 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:24.472952 26471 net.cpp:124] Setting up relu2
I0428 19:48:24.472970 26471 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:24.472977 26471 net.cpp:139] Memory required for data: 1214720
I0428 19:48:24.472985 26471 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:24.472997 26471 net.cpp:86] Creating Layer ip3
I0428 19:48:24.473004 26471 net.cpp:408] ip3 <- ip2
I0428 19:48:24.473016 26471 net.cpp:382] ip3 -> ip3
I0428 19:48:24.473148 26471 net.cpp:124] Setting up ip3
I0428 19:48:24.473160 26471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:24.473166 26471 net.cpp:139] Memory required for data: 1217280
I0428 19:48:24.473182 26471 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:24.473196 26471 net.cpp:86] Creating Layer relu3
I0428 19:48:24.473208 26471 net.cpp:408] relu3 <- ip3
I0428 19:48:24.473217 26471 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:24.473425 26471 net.cpp:124] Setting up relu3
I0428 19:48:24.473438 26471 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:24.473444 26471 net.cpp:139] Memory required for data: 1219840
I0428 19:48:24.473450 26471 layer_factory.hpp:77] Creating layer loss
I0428 19:48:24.473460 26471 net.cpp:86] Creating Layer loss
I0428 19:48:24.473467 26471 net.cpp:408] loss <- ip3
I0428 19:48:24.473475 26471 net.cpp:408] loss <- label
I0428 19:48:24.473485 26471 net.cpp:382] loss -> loss
I0428 19:48:24.473515 26471 layer_factory.hpp:77] Creating layer loss
I0428 19:48:24.473795 26471 net.cpp:124] Setting up loss
I0428 19:48:24.473809 26471 net.cpp:131] Top shape: (1)
I0428 19:48:24.473815 26471 net.cpp:134]     with loss weight 1
I0428 19:48:24.473839 26471 net.cpp:139] Memory required for data: 1219844
I0428 19:48:24.473845 26471 net.cpp:200] loss needs backward computation.
I0428 19:48:24.473852 26471 net.cpp:200] relu3 needs backward computation.
I0428 19:48:24.473860 26471 net.cpp:200] ip3 needs backward computation.
I0428 19:48:24.473865 26471 net.cpp:200] relu2 needs backward computation.
I0428 19:48:24.473871 26471 net.cpp:200] ip2 needs backward computation.
I0428 19:48:24.473877 26471 net.cpp:200] relu1 needs backward computation.
I0428 19:48:24.473882 26471 net.cpp:200] ip1 needs backward computation.
I0428 19:48:24.473889 26471 net.cpp:200] pool1 needs backward computation.
I0428 19:48:24.473896 26471 net.cpp:200] conv1 needs backward computation.
I0428 19:48:24.473902 26471 net.cpp:200] pool0 needs backward computation.
I0428 19:48:24.473908 26471 net.cpp:200] conv0 needs backward computation.
I0428 19:48:24.473915 26471 net.cpp:202] mnist does not need backward computation.
I0428 19:48:24.473922 26471 net.cpp:244] This network produces output loss
I0428 19:48:24.473938 26471 net.cpp:257] Network initialization done.
I0428 19:48:24.474330 26471 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test543.prototxt
I0428 19:48:24.474371 26471 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:24.474489 26471 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:48:24.474627 26471 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:24.474699 26471 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:24.474719 26471 net.cpp:86] Creating Layer mnist
I0428 19:48:24.474727 26471 net.cpp:382] mnist -> data
I0428 19:48:24.474741 26471 net.cpp:382] mnist -> label
I0428 19:48:24.474884 26471 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:24.477267 26471 net.cpp:124] Setting up mnist
I0428 19:48:24.477286 26471 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:24.477296 26471 net.cpp:131] Top shape: 100 (100)
I0428 19:48:24.477303 26471 net.cpp:139] Memory required for data: 314000
I0428 19:48:24.477310 26471 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:24.477342 26471 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:24.477349 26471 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:24.477360 26471 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:24.477372 26471 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:24.477490 26471 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:24.477501 26471 net.cpp:131] Top shape: 100 (100)
I0428 19:48:24.477509 26471 net.cpp:131] Top shape: 100 (100)
I0428 19:48:24.477515 26471 net.cpp:139] Memory required for data: 314800
I0428 19:48:24.477522 26471 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:24.477538 26471 net.cpp:86] Creating Layer conv0
I0428 19:48:24.477546 26471 net.cpp:408] conv0 <- data
I0428 19:48:24.477557 26471 net.cpp:382] conv0 -> conv0
I0428 19:48:24.479223 26471 net.cpp:124] Setting up conv0
I0428 19:48:24.479241 26471 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:24.479249 26471 net.cpp:139] Memory required for data: 1466800
I0428 19:48:24.479266 26471 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:24.479279 26471 net.cpp:86] Creating Layer pool0
I0428 19:48:24.479287 26471 net.cpp:408] pool0 <- conv0
I0428 19:48:24.479296 26471 net.cpp:382] pool0 -> pool0
I0428 19:48:24.479348 26471 net.cpp:124] Setting up pool0
I0428 19:48:24.479358 26471 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:24.479364 26471 net.cpp:139] Memory required for data: 1754800
I0428 19:48:24.479372 26471 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:24.479387 26471 net.cpp:86] Creating Layer conv1
I0428 19:48:24.479395 26471 net.cpp:408] conv1 <- pool0
I0428 19:48:24.479405 26471 net.cpp:382] conv1 -> conv1
I0428 19:48:24.481905 26471 net.cpp:124] Setting up conv1
I0428 19:48:24.481923 26471 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:48:24.481931 26471 net.cpp:139] Memory required for data: 1806000
I0428 19:48:24.481947 26471 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:24.481959 26471 net.cpp:86] Creating Layer pool1
I0428 19:48:24.481967 26471 net.cpp:408] pool1 <- conv1
I0428 19:48:24.481976 26471 net.cpp:382] pool1 -> pool1
I0428 19:48:24.482061 26471 net.cpp:124] Setting up pool1
I0428 19:48:24.482072 26471 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:48:24.482079 26471 net.cpp:139] Memory required for data: 1818800
I0428 19:48:24.482085 26471 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:24.482097 26471 net.cpp:86] Creating Layer ip1
I0428 19:48:24.482106 26471 net.cpp:408] ip1 <- pool1
I0428 19:48:24.482117 26471 net.cpp:382] ip1 -> ip1
I0428 19:48:24.482269 26471 net.cpp:124] Setting up ip1
I0428 19:48:24.482280 26471 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:24.482300 26471 net.cpp:139] Memory required for data: 1838800
I0428 19:48:24.482316 26471 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:24.482327 26471 net.cpp:86] Creating Layer relu1
I0428 19:48:24.482337 26471 net.cpp:408] relu1 <- ip1
I0428 19:48:24.482348 26471 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:24.482556 26471 net.cpp:124] Setting up relu1
I0428 19:48:24.482569 26471 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:24.482575 26471 net.cpp:139] Memory required for data: 1858800
I0428 19:48:24.482581 26471 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:24.482594 26471 net.cpp:86] Creating Layer ip2
I0428 19:48:24.482602 26471 net.cpp:408] ip2 <- ip1
I0428 19:48:24.482614 26471 net.cpp:382] ip2 -> ip2
I0428 19:48:24.482755 26471 net.cpp:124] Setting up ip2
I0428 19:48:24.482766 26471 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:24.482774 26471 net.cpp:139] Memory required for data: 1878800
I0428 19:48:24.482784 26471 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:24.482795 26471 net.cpp:86] Creating Layer relu2
I0428 19:48:24.482800 26471 net.cpp:408] relu2 <- ip2
I0428 19:48:24.482810 26471 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:24.483083 26471 net.cpp:124] Setting up relu2
I0428 19:48:24.483096 26471 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:24.483106 26471 net.cpp:139] Memory required for data: 1898800
I0428 19:48:24.483113 26471 layer_factory.hpp:77] Creating layer ip3
I0428 19:48:24.483124 26471 net.cpp:86] Creating Layer ip3
I0428 19:48:24.483131 26471 net.cpp:408] ip3 <- ip2
I0428 19:48:24.483142 26471 net.cpp:382] ip3 -> ip3
I0428 19:48:24.483271 26471 net.cpp:124] Setting up ip3
I0428 19:48:24.483283 26471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:24.483289 26471 net.cpp:139] Memory required for data: 1902800
I0428 19:48:24.483304 26471 layer_factory.hpp:77] Creating layer relu3
I0428 19:48:24.483316 26471 net.cpp:86] Creating Layer relu3
I0428 19:48:24.483324 26471 net.cpp:408] relu3 <- ip3
I0428 19:48:24.483331 26471 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:48:24.484243 26471 net.cpp:124] Setting up relu3
I0428 19:48:24.484259 26471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:24.484266 26471 net.cpp:139] Memory required for data: 1906800
I0428 19:48:24.484272 26471 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:48:24.484282 26471 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:48:24.484290 26471 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:48:24.484299 26471 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:48:24.484311 26471 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:48:24.484365 26471 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:48:24.484375 26471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:24.484383 26471 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:24.484390 26471 net.cpp:139] Memory required for data: 1914800
I0428 19:48:24.484397 26471 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:24.484407 26471 net.cpp:86] Creating Layer accuracy
I0428 19:48:24.484414 26471 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:48:24.484422 26471 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:24.484431 26471 net.cpp:382] accuracy -> accuracy
I0428 19:48:24.484444 26471 net.cpp:124] Setting up accuracy
I0428 19:48:24.484454 26471 net.cpp:131] Top shape: (1)
I0428 19:48:24.484460 26471 net.cpp:139] Memory required for data: 1914804
I0428 19:48:24.484467 26471 layer_factory.hpp:77] Creating layer loss
I0428 19:48:24.484477 26471 net.cpp:86] Creating Layer loss
I0428 19:48:24.484483 26471 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:48:24.484490 26471 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:24.484499 26471 net.cpp:382] loss -> loss
I0428 19:48:24.484510 26471 layer_factory.hpp:77] Creating layer loss
I0428 19:48:24.484793 26471 net.cpp:124] Setting up loss
I0428 19:48:24.484807 26471 net.cpp:131] Top shape: (1)
I0428 19:48:24.484823 26471 net.cpp:134]     with loss weight 1
I0428 19:48:24.484834 26471 net.cpp:139] Memory required for data: 1914808
I0428 19:48:24.484854 26471 net.cpp:200] loss needs backward computation.
I0428 19:48:24.484863 26471 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:24.484870 26471 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:48:24.484877 26471 net.cpp:200] relu3 needs backward computation.
I0428 19:48:24.484882 26471 net.cpp:200] ip3 needs backward computation.
I0428 19:48:24.484889 26471 net.cpp:200] relu2 needs backward computation.
I0428 19:48:24.484894 26471 net.cpp:200] ip2 needs backward computation.
I0428 19:48:24.484901 26471 net.cpp:200] relu1 needs backward computation.
I0428 19:48:24.484906 26471 net.cpp:200] ip1 needs backward computation.
I0428 19:48:24.484913 26471 net.cpp:200] pool1 needs backward computation.
I0428 19:48:24.484920 26471 net.cpp:200] conv1 needs backward computation.
I0428 19:48:24.484926 26471 net.cpp:200] pool0 needs backward computation.
I0428 19:48:24.484932 26471 net.cpp:200] conv0 needs backward computation.
I0428 19:48:24.484941 26471 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:24.484947 26471 net.cpp:202] mnist does not need backward computation.
I0428 19:48:24.484953 26471 net.cpp:244] This network produces output accuracy
I0428 19:48:24.484959 26471 net.cpp:244] This network produces output loss
I0428 19:48:24.484979 26471 net.cpp:257] Network initialization done.
I0428 19:48:24.485038 26471 solver.cpp:56] Solver scaffolding done.
I0428 19:48:24.485440 26471 caffe.cpp:248] Starting Optimization
I0428 19:48:24.485450 26471 solver.cpp:273] Solving LeNet
I0428 19:48:24.485455 26471 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:24.486335 26471 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:24.490211 26471 blocking_queue.cpp:49] Waiting for data
I0428 19:48:24.560067 26479 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:24.560577 26471 solver.cpp:398]     Test net output #0: accuracy = 0.0508
I0428 19:48:24.560600 26471 solver.cpp:398]     Test net output #1: loss = 2.32924 (* 1 = 2.32924 loss)
I0428 19:48:24.562439 26471 solver.cpp:219] Iteration 0 (0 iter/s, 0.0769557s/100 iters), loss = 2.33384
I0428 19:48:24.562469 26471 solver.cpp:238]     Train net output #0: loss = 2.33384 (* 1 = 2.33384 loss)
I0428 19:48:24.562487 26471 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:24.639130 26471 solver.cpp:219] Iteration 100 (1304.55 iter/s, 0.0766546s/100 iters), loss = 0.431175
I0428 19:48:24.639164 26471 solver.cpp:238]     Train net output #0: loss = 0.431175 (* 1 = 0.431175 loss)
I0428 19:48:24.639173 26471 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:24.713697 26471 solver.cpp:219] Iteration 200 (1341.85 iter/s, 0.0745238s/100 iters), loss = 0.361494
I0428 19:48:24.713729 26471 solver.cpp:238]     Train net output #0: loss = 0.361494 (* 1 = 0.361494 loss)
I0428 19:48:24.713737 26471 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:24.790891 26471 solver.cpp:219] Iteration 300 (1296.12 iter/s, 0.0771533s/100 iters), loss = 0.339764
I0428 19:48:24.790922 26471 solver.cpp:238]     Train net output #0: loss = 0.339764 (* 1 = 0.339764 loss)
I0428 19:48:24.790930 26471 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:24.865346 26471 solver.cpp:219] Iteration 400 (1343.82 iter/s, 0.0744149s/100 iters), loss = 0.403729
I0428 19:48:24.865376 26471 solver.cpp:238]     Train net output #0: loss = 0.403729 (* 1 = 0.403729 loss)
I0428 19:48:24.865384 26471 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:24.938490 26471 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:25.011036 26479 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:25.013249 26471 solver.cpp:398]     Test net output #0: accuracy = 0.9261
I0428 19:48:25.013293 26471 solver.cpp:398]     Test net output #1: loss = 0.234775 (* 1 = 0.234775 loss)
I0428 19:48:25.014319 26471 solver.cpp:219] Iteration 500 (671.472 iter/s, 0.148926s/100 iters), loss = 0.284823
I0428 19:48:25.014361 26471 solver.cpp:238]     Train net output #0: loss = 0.284823 (* 1 = 0.284823 loss)
I0428 19:48:25.014411 26471 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:25.106369 26471 solver.cpp:219] Iteration 600 (1086.97 iter/s, 0.0919992s/100 iters), loss = 0.193133
I0428 19:48:25.106405 26471 solver.cpp:238]     Train net output #0: loss = 0.193133 (* 1 = 0.193133 loss)
I0428 19:48:25.106412 26471 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:25.195767 26471 solver.cpp:219] Iteration 700 (1119.19 iter/s, 0.0893501s/100 iters), loss = 0.244994
I0428 19:48:25.195816 26471 solver.cpp:238]     Train net output #0: loss = 0.244995 (* 1 = 0.244995 loss)
I0428 19:48:25.195827 26471 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:25.292121 26471 solver.cpp:219] Iteration 800 (1038.49 iter/s, 0.0962939s/100 iters), loss = 0.367468
I0428 19:48:25.292172 26471 solver.cpp:238]     Train net output #0: loss = 0.367468 (* 1 = 0.367468 loss)
I0428 19:48:25.292186 26471 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:25.378278 26471 solver.cpp:219] Iteration 900 (1161.45 iter/s, 0.0860989s/100 iters), loss = 0.210348
I0428 19:48:25.378311 26471 solver.cpp:238]     Train net output #0: loss = 0.210349 (* 1 = 0.210349 loss)
I0428 19:48:25.378319 26471 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:25.403151 26477 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:25.450937 26471 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:25.451675 26471 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:25.452126 26471 solver.cpp:311] Iteration 1000, loss = 0.185341
I0428 19:48:25.452143 26471 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:25.504672 26479 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:25.505193 26471 solver.cpp:398]     Test net output #0: accuracy = 0.9488
I0428 19:48:25.505218 26471 solver.cpp:398]     Test net output #1: loss = 0.167909 (* 1 = 0.167909 loss)
I0428 19:48:25.505224 26471 solver.cpp:316] Optimization Done.
I0428 19:48:25.505228 26471 caffe.cpp:259] Optimization Done.
