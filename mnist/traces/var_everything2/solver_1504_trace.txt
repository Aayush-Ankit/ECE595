I0428 20:28:21.974593  3343 caffe.cpp:218] Using GPUs 0
I0428 20:28:22.015842  3343 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:22.537008  3343 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1504.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:22.537151  3343 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1504.prototxt
I0428 20:28:22.537570  3343 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:22.537590  3343 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:22.537693  3343 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:22.537773  3343 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:22.537873  3343 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:22.537897  3343 net.cpp:86] Creating Layer mnist
I0428 20:28:22.537906  3343 net.cpp:382] mnist -> data
I0428 20:28:22.537928  3343 net.cpp:382] mnist -> label
I0428 20:28:22.539024  3343 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:22.541504  3343 net.cpp:124] Setting up mnist
I0428 20:28:22.541522  3343 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:22.541528  3343 net.cpp:131] Top shape: 64 (64)
I0428 20:28:22.541532  3343 net.cpp:139] Memory required for data: 200960
I0428 20:28:22.541539  3343 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:22.541580  3343 net.cpp:86] Creating Layer conv0
I0428 20:28:22.541604  3343 net.cpp:408] conv0 <- data
I0428 20:28:22.541615  3343 net.cpp:382] conv0 -> conv0
I0428 20:28:22.833189  3343 net.cpp:124] Setting up conv0
I0428 20:28:22.833216  3343 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:22.833221  3343 net.cpp:139] Memory required for data: 14946560
I0428 20:28:22.833238  3343 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:22.833251  3343 net.cpp:86] Creating Layer pool0
I0428 20:28:22.833256  3343 net.cpp:408] pool0 <- conv0
I0428 20:28:22.833262  3343 net.cpp:382] pool0 -> pool0
I0428 20:28:22.833312  3343 net.cpp:124] Setting up pool0
I0428 20:28:22.833318  3343 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:22.833322  3343 net.cpp:139] Memory required for data: 18632960
I0428 20:28:22.833325  3343 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:22.833338  3343 net.cpp:86] Creating Layer conv1
I0428 20:28:22.833340  3343 net.cpp:408] conv1 <- pool0
I0428 20:28:22.833346  3343 net.cpp:382] conv1 -> conv1
I0428 20:28:22.836304  3343 net.cpp:124] Setting up conv1
I0428 20:28:22.836320  3343 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:22.836324  3343 net.cpp:139] Memory required for data: 18714880
I0428 20:28:22.836334  3343 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:22.836343  3343 net.cpp:86] Creating Layer pool1
I0428 20:28:22.836346  3343 net.cpp:408] pool1 <- conv1
I0428 20:28:22.836351  3343 net.cpp:382] pool1 -> pool1
I0428 20:28:22.836395  3343 net.cpp:124] Setting up pool1
I0428 20:28:22.836400  3343 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:22.836403  3343 net.cpp:139] Memory required for data: 18735360
I0428 20:28:22.836407  3343 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:22.836414  3343 net.cpp:86] Creating Layer ip1
I0428 20:28:22.836418  3343 net.cpp:408] ip1 <- pool1
I0428 20:28:22.836423  3343 net.cpp:382] ip1 -> ip1
I0428 20:28:22.836542  3343 net.cpp:124] Setting up ip1
I0428 20:28:22.836550  3343 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:22.836555  3343 net.cpp:139] Memory required for data: 18741760
I0428 20:28:22.836561  3343 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:22.836567  3343 net.cpp:86] Creating Layer relu1
I0428 20:28:22.836571  3343 net.cpp:408] relu1 <- ip1
I0428 20:28:22.836575  3343 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:22.836756  3343 net.cpp:124] Setting up relu1
I0428 20:28:22.836766  3343 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:22.836769  3343 net.cpp:139] Memory required for data: 18748160
I0428 20:28:22.836772  3343 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:22.836779  3343 net.cpp:86] Creating Layer ip2
I0428 20:28:22.836782  3343 net.cpp:408] ip2 <- ip1
I0428 20:28:22.836787  3343 net.cpp:382] ip2 -> ip2
I0428 20:28:22.836895  3343 net.cpp:124] Setting up ip2
I0428 20:28:22.836905  3343 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:22.836907  3343 net.cpp:139] Memory required for data: 18750720
I0428 20:28:22.836913  3343 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:22.836920  3343 net.cpp:86] Creating Layer relu2
I0428 20:28:22.836923  3343 net.cpp:408] relu2 <- ip2
I0428 20:28:22.836928  3343 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:22.837709  3343 net.cpp:124] Setting up relu2
I0428 20:28:22.837723  3343 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:22.837726  3343 net.cpp:139] Memory required for data: 18753280
I0428 20:28:22.837730  3343 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:22.837738  3343 net.cpp:86] Creating Layer ip3
I0428 20:28:22.837743  3343 net.cpp:408] ip3 <- ip2
I0428 20:28:22.837748  3343 net.cpp:382] ip3 -> ip3
I0428 20:28:22.837852  3343 net.cpp:124] Setting up ip3
I0428 20:28:22.837860  3343 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:22.837863  3343 net.cpp:139] Memory required for data: 18755840
I0428 20:28:22.837872  3343 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:22.837877  3343 net.cpp:86] Creating Layer relu3
I0428 20:28:22.837882  3343 net.cpp:408] relu3 <- ip3
I0428 20:28:22.837885  3343 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:22.838063  3343 net.cpp:124] Setting up relu3
I0428 20:28:22.838073  3343 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:22.838076  3343 net.cpp:139] Memory required for data: 18758400
I0428 20:28:22.838080  3343 layer_factory.hpp:77] Creating layer loss
I0428 20:28:22.838086  3343 net.cpp:86] Creating Layer loss
I0428 20:28:22.838089  3343 net.cpp:408] loss <- ip3
I0428 20:28:22.838093  3343 net.cpp:408] loss <- label
I0428 20:28:22.838099  3343 net.cpp:382] loss -> loss
I0428 20:28:22.838117  3343 layer_factory.hpp:77] Creating layer loss
I0428 20:28:22.838372  3343 net.cpp:124] Setting up loss
I0428 20:28:22.838382  3343 net.cpp:131] Top shape: (1)
I0428 20:28:22.838385  3343 net.cpp:134]     with loss weight 1
I0428 20:28:22.838399  3343 net.cpp:139] Memory required for data: 18758404
I0428 20:28:22.838403  3343 net.cpp:200] loss needs backward computation.
I0428 20:28:22.838407  3343 net.cpp:200] relu3 needs backward computation.
I0428 20:28:22.838410  3343 net.cpp:200] ip3 needs backward computation.
I0428 20:28:22.838414  3343 net.cpp:200] relu2 needs backward computation.
I0428 20:28:22.838418  3343 net.cpp:200] ip2 needs backward computation.
I0428 20:28:22.838420  3343 net.cpp:200] relu1 needs backward computation.
I0428 20:28:22.838423  3343 net.cpp:200] ip1 needs backward computation.
I0428 20:28:22.838426  3343 net.cpp:200] pool1 needs backward computation.
I0428 20:28:22.838429  3343 net.cpp:200] conv1 needs backward computation.
I0428 20:28:22.838433  3343 net.cpp:200] pool0 needs backward computation.
I0428 20:28:22.838436  3343 net.cpp:200] conv0 needs backward computation.
I0428 20:28:22.838440  3343 net.cpp:202] mnist does not need backward computation.
I0428 20:28:22.838443  3343 net.cpp:244] This network produces output loss
I0428 20:28:22.838454  3343 net.cpp:257] Network initialization done.
I0428 20:28:22.838807  3343 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1504.prototxt
I0428 20:28:22.838835  3343 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:22.838933  3343 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:22.839020  3343 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:22.839069  3343 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:22.839082  3343 net.cpp:86] Creating Layer mnist
I0428 20:28:22.839087  3343 net.cpp:382] mnist -> data
I0428 20:28:22.839095  3343 net.cpp:382] mnist -> label
I0428 20:28:22.839186  3343 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:22.841218  3343 net.cpp:124] Setting up mnist
I0428 20:28:22.841233  3343 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:22.841238  3343 net.cpp:131] Top shape: 100 (100)
I0428 20:28:22.841243  3343 net.cpp:139] Memory required for data: 314000
I0428 20:28:22.841246  3343 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:22.841258  3343 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:22.841260  3343 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:22.841266  3343 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:22.841274  3343 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:22.841358  3343 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:22.841367  3343 net.cpp:131] Top shape: 100 (100)
I0428 20:28:22.841372  3343 net.cpp:131] Top shape: 100 (100)
I0428 20:28:22.841375  3343 net.cpp:139] Memory required for data: 314800
I0428 20:28:22.841378  3343 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:22.841387  3343 net.cpp:86] Creating Layer conv0
I0428 20:28:22.841392  3343 net.cpp:408] conv0 <- data
I0428 20:28:22.841397  3343 net.cpp:382] conv0 -> conv0
I0428 20:28:22.843096  3343 net.cpp:124] Setting up conv0
I0428 20:28:22.843111  3343 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:22.843116  3343 net.cpp:139] Memory required for data: 23354800
I0428 20:28:22.843125  3343 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:22.843132  3343 net.cpp:86] Creating Layer pool0
I0428 20:28:22.843137  3343 net.cpp:408] pool0 <- conv0
I0428 20:28:22.843142  3343 net.cpp:382] pool0 -> pool0
I0428 20:28:22.843179  3343 net.cpp:124] Setting up pool0
I0428 20:28:22.843184  3343 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:22.843188  3343 net.cpp:139] Memory required for data: 29114800
I0428 20:28:22.843190  3343 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:22.843199  3343 net.cpp:86] Creating Layer conv1
I0428 20:28:22.843204  3343 net.cpp:408] conv1 <- pool0
I0428 20:28:22.843209  3343 net.cpp:382] conv1 -> conv1
I0428 20:28:22.844842  3343 net.cpp:124] Setting up conv1
I0428 20:28:22.844861  3343 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:22.844864  3343 net.cpp:139] Memory required for data: 29242800
I0428 20:28:22.844880  3343 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:22.844887  3343 net.cpp:86] Creating Layer pool1
I0428 20:28:22.844892  3343 net.cpp:408] pool1 <- conv1
I0428 20:28:22.844897  3343 net.cpp:382] pool1 -> pool1
I0428 20:28:22.844945  3343 net.cpp:124] Setting up pool1
I0428 20:28:22.844950  3343 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:22.844954  3343 net.cpp:139] Memory required for data: 29274800
I0428 20:28:22.844957  3343 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:22.844964  3343 net.cpp:86] Creating Layer ip1
I0428 20:28:22.844966  3343 net.cpp:408] ip1 <- pool1
I0428 20:28:22.844971  3343 net.cpp:382] ip1 -> ip1
I0428 20:28:22.845083  3343 net.cpp:124] Setting up ip1
I0428 20:28:22.845091  3343 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:22.845105  3343 net.cpp:139] Memory required for data: 29284800
I0428 20:28:22.845113  3343 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:22.845118  3343 net.cpp:86] Creating Layer relu1
I0428 20:28:22.845121  3343 net.cpp:408] relu1 <- ip1
I0428 20:28:22.845126  3343 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:22.845288  3343 net.cpp:124] Setting up relu1
I0428 20:28:22.845297  3343 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:22.845301  3343 net.cpp:139] Memory required for data: 29294800
I0428 20:28:22.845305  3343 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:22.845312  3343 net.cpp:86] Creating Layer ip2
I0428 20:28:22.845316  3343 net.cpp:408] ip2 <- ip1
I0428 20:28:22.845321  3343 net.cpp:382] ip2 -> ip2
I0428 20:28:22.845418  3343 net.cpp:124] Setting up ip2
I0428 20:28:22.845425  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.845429  3343 net.cpp:139] Memory required for data: 29298800
I0428 20:28:22.845434  3343 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:22.845439  3343 net.cpp:86] Creating Layer relu2
I0428 20:28:22.845443  3343 net.cpp:408] relu2 <- ip2
I0428 20:28:22.845454  3343 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:22.845629  3343 net.cpp:124] Setting up relu2
I0428 20:28:22.845638  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.845641  3343 net.cpp:139] Memory required for data: 29302800
I0428 20:28:22.845644  3343 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:22.845650  3343 net.cpp:86] Creating Layer ip3
I0428 20:28:22.845654  3343 net.cpp:408] ip3 <- ip2
I0428 20:28:22.845659  3343 net.cpp:382] ip3 -> ip3
I0428 20:28:22.845768  3343 net.cpp:124] Setting up ip3
I0428 20:28:22.845775  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.845778  3343 net.cpp:139] Memory required for data: 29306800
I0428 20:28:22.845793  3343 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:22.845798  3343 net.cpp:86] Creating Layer relu3
I0428 20:28:22.845801  3343 net.cpp:408] relu3 <- ip3
I0428 20:28:22.845805  3343 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:22.846616  3343 net.cpp:124] Setting up relu3
I0428 20:28:22.846628  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.846633  3343 net.cpp:139] Memory required for data: 29310800
I0428 20:28:22.846637  3343 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:22.846642  3343 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:22.846647  3343 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:22.846652  3343 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:22.846658  3343 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:22.846696  3343 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:22.846701  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.846704  3343 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:22.846709  3343 net.cpp:139] Memory required for data: 29318800
I0428 20:28:22.846711  3343 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:22.846716  3343 net.cpp:86] Creating Layer accuracy
I0428 20:28:22.846720  3343 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:22.846724  3343 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:22.846729  3343 net.cpp:382] accuracy -> accuracy
I0428 20:28:22.846736  3343 net.cpp:124] Setting up accuracy
I0428 20:28:22.846740  3343 net.cpp:131] Top shape: (1)
I0428 20:28:22.846743  3343 net.cpp:139] Memory required for data: 29318804
I0428 20:28:22.846746  3343 layer_factory.hpp:77] Creating layer loss
I0428 20:28:22.846750  3343 net.cpp:86] Creating Layer loss
I0428 20:28:22.846755  3343 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:22.846758  3343 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:22.846762  3343 net.cpp:382] loss -> loss
I0428 20:28:22.846770  3343 layer_factory.hpp:77] Creating layer loss
I0428 20:28:22.846999  3343 net.cpp:124] Setting up loss
I0428 20:28:22.847008  3343 net.cpp:131] Top shape: (1)
I0428 20:28:22.847012  3343 net.cpp:134]     with loss weight 1
I0428 20:28:22.847028  3343 net.cpp:139] Memory required for data: 29318808
I0428 20:28:22.847033  3343 net.cpp:200] loss needs backward computation.
I0428 20:28:22.847036  3343 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:22.847040  3343 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:22.847043  3343 net.cpp:200] relu3 needs backward computation.
I0428 20:28:22.847046  3343 net.cpp:200] ip3 needs backward computation.
I0428 20:28:22.847049  3343 net.cpp:200] relu2 needs backward computation.
I0428 20:28:22.847054  3343 net.cpp:200] ip2 needs backward computation.
I0428 20:28:22.847056  3343 net.cpp:200] relu1 needs backward computation.
I0428 20:28:22.847060  3343 net.cpp:200] ip1 needs backward computation.
I0428 20:28:22.847064  3343 net.cpp:200] pool1 needs backward computation.
I0428 20:28:22.847066  3343 net.cpp:200] conv1 needs backward computation.
I0428 20:28:22.847070  3343 net.cpp:200] pool0 needs backward computation.
I0428 20:28:22.847074  3343 net.cpp:200] conv0 needs backward computation.
I0428 20:28:22.847079  3343 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:22.847082  3343 net.cpp:202] mnist does not need backward computation.
I0428 20:28:22.847085  3343 net.cpp:244] This network produces output accuracy
I0428 20:28:22.847088  3343 net.cpp:244] This network produces output loss
I0428 20:28:22.847100  3343 net.cpp:257] Network initialization done.
I0428 20:28:22.847144  3343 solver.cpp:56] Solver scaffolding done.
I0428 20:28:22.847503  3343 caffe.cpp:248] Starting Optimization
I0428 20:28:22.847509  3343 solver.cpp:273] Solving LeNet
I0428 20:28:22.847512  3343 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:22.847798  3343 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:22.943305  3350 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:22.945807  3343 solver.cpp:398]     Test net output #0: accuracy = 0.0889
I0428 20:28:22.945842  3343 solver.cpp:398]     Test net output #1: loss = 2.30676 (* 1 = 2.30676 loss)
I0428 20:28:22.950381  3343 solver.cpp:219] Iteration 0 (-7.57466e-31 iter/s, 0.102831s/100 iters), loss = 2.30211
I0428 20:28:22.950422  3343 solver.cpp:238]     Train net output #0: loss = 2.30211 (* 1 = 2.30211 loss)
I0428 20:28:22.950433  3343 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:23.160285  3343 solver.cpp:219] Iteration 100 (476.509 iter/s, 0.20986s/100 iters), loss = 0.753021
I0428 20:28:23.160331  3343 solver.cpp:238]     Train net output #0: loss = 0.753021 (* 1 = 0.753021 loss)
I0428 20:28:23.160341  3343 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:23.374151  3343 solver.cpp:219] Iteration 200 (467.716 iter/s, 0.213805s/100 iters), loss = 0.291078
I0428 20:28:23.374197  3343 solver.cpp:238]     Train net output #0: loss = 0.291078 (* 1 = 0.291078 loss)
I0428 20:28:23.374209  3343 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:23.589265  3343 solver.cpp:219] Iteration 300 (465.003 iter/s, 0.215052s/100 iters), loss = 0.5392
I0428 20:28:23.589310  3343 solver.cpp:238]     Train net output #0: loss = 0.5392 (* 1 = 0.5392 loss)
I0428 20:28:23.589323  3343 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:23.800781  3343 solver.cpp:219] Iteration 400 (472.914 iter/s, 0.211455s/100 iters), loss = 0.235732
I0428 20:28:23.800846  3343 solver.cpp:238]     Train net output #0: loss = 0.235732 (* 1 = 0.235732 loss)
I0428 20:28:23.800858  3343 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:24.012764  3343 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:24.113698  3350 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:24.117264  3343 solver.cpp:398]     Test net output #0: accuracy = 0.8606
I0428 20:28:24.117290  3343 solver.cpp:398]     Test net output #1: loss = 0.37292 (* 1 = 0.37292 loss)
I0428 20:28:24.119201  3343 solver.cpp:219] Iteration 500 (314.132 iter/s, 0.318337s/100 iters), loss = 0.274125
I0428 20:28:24.119227  3343 solver.cpp:238]     Train net output #0: loss = 0.274125 (* 1 = 0.274125 loss)
I0428 20:28:24.119252  3343 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:24.341212  3343 solver.cpp:219] Iteration 600 (450.529 iter/s, 0.221961s/100 iters), loss = 0.347881
I0428 20:28:24.341267  3343 solver.cpp:238]     Train net output #0: loss = 0.347881 (* 1 = 0.347881 loss)
I0428 20:28:24.341281  3343 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:24.572017  3343 solver.cpp:219] Iteration 700 (433.402 iter/s, 0.230733s/100 iters), loss = 0.51374
I0428 20:28:24.572072  3343 solver.cpp:238]     Train net output #0: loss = 0.51374 (* 1 = 0.51374 loss)
I0428 20:28:24.572085  3343 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:24.797909  3343 solver.cpp:219] Iteration 800 (442.829 iter/s, 0.225821s/100 iters), loss = 0.533673
I0428 20:28:24.797960  3343 solver.cpp:238]     Train net output #0: loss = 0.533673 (* 1 = 0.533673 loss)
I0428 20:28:24.797973  3343 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:25.026226  3343 solver.cpp:219] Iteration 900 (438.119 iter/s, 0.228249s/100 iters), loss = 0.45794
I0428 20:28:25.026278  3343 solver.cpp:238]     Train net output #0: loss = 0.45794 (* 1 = 0.45794 loss)
I0428 20:28:25.026290  3343 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:25.100868  3349 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:25.249471  3343 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:25.251415  3343 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:25.252729  3343 solver.cpp:311] Iteration 1000, loss = 0.343357
I0428 20:28:25.252758  3343 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:25.355986  3350 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:25.358609  3343 solver.cpp:398]     Test net output #0: accuracy = 0.8737
I0428 20:28:25.358638  3343 solver.cpp:398]     Test net output #1: loss = 0.321781 (* 1 = 0.321781 loss)
I0428 20:28:25.358644  3343 solver.cpp:316] Optimization Done.
I0428 20:28:25.358647  3343 caffe.cpp:259] Optimization Done.
