I0428 20:35:34.981999  4643 caffe.cpp:218] Using GPUs 0
I0428 20:35:35.011518  4643 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:35:35.457602  4643 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1623.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:35:35.457763  4643 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1623.prototxt
I0428 20:35:35.458107  4643 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:35:35.458140  4643 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:35:35.458220  4643 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:35.458283  4643 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:35.458366  4643 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:35:35.458385  4643 net.cpp:86] Creating Layer mnist
I0428 20:35:35.458394  4643 net.cpp:382] mnist -> data
I0428 20:35:35.458411  4643 net.cpp:382] mnist -> label
I0428 20:35:35.459409  4643 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:35:35.461699  4643 net.cpp:124] Setting up mnist
I0428 20:35:35.461726  4643 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:35:35.461732  4643 net.cpp:131] Top shape: 64 (64)
I0428 20:35:35.461735  4643 net.cpp:139] Memory required for data: 200960
I0428 20:35:35.461742  4643 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:35.461757  4643 net.cpp:86] Creating Layer conv0
I0428 20:35:35.461777  4643 net.cpp:408] conv0 <- data
I0428 20:35:35.461789  4643 net.cpp:382] conv0 -> conv0
I0428 20:35:35.695857  4643 net.cpp:124] Setting up conv0
I0428 20:35:35.695881  4643 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:35:35.695885  4643 net.cpp:139] Memory required for data: 14946560
I0428 20:35:35.695900  4643 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:35.695912  4643 net.cpp:86] Creating Layer pool0
I0428 20:35:35.695916  4643 net.cpp:408] pool0 <- conv0
I0428 20:35:35.695921  4643 net.cpp:382] pool0 -> pool0
I0428 20:35:35.695996  4643 net.cpp:124] Setting up pool0
I0428 20:35:35.696002  4643 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:35:35.696005  4643 net.cpp:139] Memory required for data: 18632960
I0428 20:35:35.696008  4643 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:35.696019  4643 net.cpp:86] Creating Layer conv1
I0428 20:35:35.696022  4643 net.cpp:408] conv1 <- pool0
I0428 20:35:35.696027  4643 net.cpp:382] conv1 -> conv1
I0428 20:35:35.699378  4643 net.cpp:124] Setting up conv1
I0428 20:35:35.699409  4643 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:35:35.699412  4643 net.cpp:139] Memory required for data: 19452160
I0428 20:35:35.699420  4643 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:35.699427  4643 net.cpp:86] Creating Layer pool1
I0428 20:35:35.699431  4643 net.cpp:408] pool1 <- conv1
I0428 20:35:35.699436  4643 net.cpp:382] pool1 -> pool1
I0428 20:35:35.699471  4643 net.cpp:124] Setting up pool1
I0428 20:35:35.699477  4643 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:35:35.699481  4643 net.cpp:139] Memory required for data: 19656960
I0428 20:35:35.699483  4643 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:35.699491  4643 net.cpp:86] Creating Layer ip1
I0428 20:35:35.699493  4643 net.cpp:408] ip1 <- pool1
I0428 20:35:35.699497  4643 net.cpp:382] ip1 -> ip1
I0428 20:35:35.699708  4643 net.cpp:124] Setting up ip1
I0428 20:35:35.699717  4643 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:35.699719  4643 net.cpp:139] Memory required for data: 19663360
I0428 20:35:35.699725  4643 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:35.699731  4643 net.cpp:86] Creating Layer relu1
I0428 20:35:35.699735  4643 net.cpp:408] relu1 <- ip1
I0428 20:35:35.699739  4643 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:35.699892  4643 net.cpp:124] Setting up relu1
I0428 20:35:35.699900  4643 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:35.699903  4643 net.cpp:139] Memory required for data: 19669760
I0428 20:35:35.699906  4643 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:35.699913  4643 net.cpp:86] Creating Layer ip2
I0428 20:35:35.699915  4643 net.cpp:408] ip2 <- ip1
I0428 20:35:35.699919  4643 net.cpp:382] ip2 -> ip2
I0428 20:35:35.700007  4643 net.cpp:124] Setting up ip2
I0428 20:35:35.700014  4643 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:35.700017  4643 net.cpp:139] Memory required for data: 19676160
I0428 20:35:35.700022  4643 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:35.700028  4643 net.cpp:86] Creating Layer relu2
I0428 20:35:35.700031  4643 net.cpp:408] relu2 <- ip2
I0428 20:35:35.700036  4643 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:35.700745  4643 net.cpp:124] Setting up relu2
I0428 20:35:35.700757  4643 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:35.700775  4643 net.cpp:139] Memory required for data: 19682560
I0428 20:35:35.700779  4643 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:35.700785  4643 net.cpp:86] Creating Layer ip3
I0428 20:35:35.700788  4643 net.cpp:408] ip3 <- ip2
I0428 20:35:35.700794  4643 net.cpp:382] ip3 -> ip3
I0428 20:35:35.700944  4643 net.cpp:124] Setting up ip3
I0428 20:35:35.700953  4643 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:35.700956  4643 net.cpp:139] Memory required for data: 19685120
I0428 20:35:35.700964  4643 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:35.700969  4643 net.cpp:86] Creating Layer relu3
I0428 20:35:35.700973  4643 net.cpp:408] relu3 <- ip3
I0428 20:35:35.701004  4643 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:35.701164  4643 net.cpp:124] Setting up relu3
I0428 20:35:35.701174  4643 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:35.701176  4643 net.cpp:139] Memory required for data: 19687680
I0428 20:35:35.701180  4643 layer_factory.hpp:77] Creating layer loss
I0428 20:35:35.701186  4643 net.cpp:86] Creating Layer loss
I0428 20:35:35.701189  4643 net.cpp:408] loss <- ip3
I0428 20:35:35.701208  4643 net.cpp:408] loss <- label
I0428 20:35:35.701213  4643 net.cpp:382] loss -> loss
I0428 20:35:35.701241  4643 layer_factory.hpp:77] Creating layer loss
I0428 20:35:35.701472  4643 net.cpp:124] Setting up loss
I0428 20:35:35.701481  4643 net.cpp:131] Top shape: (1)
I0428 20:35:35.701485  4643 net.cpp:134]     with loss weight 1
I0428 20:35:35.701498  4643 net.cpp:139] Memory required for data: 19687684
I0428 20:35:35.701503  4643 net.cpp:200] loss needs backward computation.
I0428 20:35:35.701505  4643 net.cpp:200] relu3 needs backward computation.
I0428 20:35:35.701508  4643 net.cpp:200] ip3 needs backward computation.
I0428 20:35:35.701511  4643 net.cpp:200] relu2 needs backward computation.
I0428 20:35:35.701514  4643 net.cpp:200] ip2 needs backward computation.
I0428 20:35:35.701516  4643 net.cpp:200] relu1 needs backward computation.
I0428 20:35:35.701519  4643 net.cpp:200] ip1 needs backward computation.
I0428 20:35:35.701522  4643 net.cpp:200] pool1 needs backward computation.
I0428 20:35:35.701525  4643 net.cpp:200] conv1 needs backward computation.
I0428 20:35:35.701529  4643 net.cpp:200] pool0 needs backward computation.
I0428 20:35:35.701530  4643 net.cpp:200] conv0 needs backward computation.
I0428 20:35:35.701534  4643 net.cpp:202] mnist does not need backward computation.
I0428 20:35:35.701536  4643 net.cpp:244] This network produces output loss
I0428 20:35:35.701546  4643 net.cpp:257] Network initialization done.
I0428 20:35:35.701864  4643 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1623.prototxt
I0428 20:35:35.701918  4643 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:35:35.702003  4643 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:35.702080  4643 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:35.702118  4643 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:35:35.702133  4643 net.cpp:86] Creating Layer mnist
I0428 20:35:35.702138  4643 net.cpp:382] mnist -> data
I0428 20:35:35.702147  4643 net.cpp:382] mnist -> label
I0428 20:35:35.702225  4643 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:35:35.703287  4643 net.cpp:124] Setting up mnist
I0428 20:35:35.703317  4643 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:35:35.703337  4643 net.cpp:131] Top shape: 100 (100)
I0428 20:35:35.703339  4643 net.cpp:139] Memory required for data: 314000
I0428 20:35:35.703343  4643 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:35:35.703349  4643 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:35:35.703353  4643 net.cpp:408] label_mnist_1_split <- label
I0428 20:35:35.703357  4643 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:35:35.703363  4643 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:35:35.703450  4643 net.cpp:124] Setting up label_mnist_1_split
I0428 20:35:35.703459  4643 net.cpp:131] Top shape: 100 (100)
I0428 20:35:35.703462  4643 net.cpp:131] Top shape: 100 (100)
I0428 20:35:35.703465  4643 net.cpp:139] Memory required for data: 314800
I0428 20:35:35.703469  4643 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:35.703479  4643 net.cpp:86] Creating Layer conv0
I0428 20:35:35.703481  4643 net.cpp:408] conv0 <- data
I0428 20:35:35.703487  4643 net.cpp:382] conv0 -> conv0
I0428 20:35:35.705013  4643 net.cpp:124] Setting up conv0
I0428 20:35:35.705042  4643 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:35:35.705063  4643 net.cpp:139] Memory required for data: 23354800
I0428 20:35:35.705072  4643 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:35.705083  4643 net.cpp:86] Creating Layer pool0
I0428 20:35:35.705087  4643 net.cpp:408] pool0 <- conv0
I0428 20:35:35.705092  4643 net.cpp:382] pool0 -> pool0
I0428 20:35:35.705132  4643 net.cpp:124] Setting up pool0
I0428 20:35:35.705137  4643 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:35:35.705142  4643 net.cpp:139] Memory required for data: 29114800
I0428 20:35:35.705158  4643 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:35.705168  4643 net.cpp:86] Creating Layer conv1
I0428 20:35:35.705171  4643 net.cpp:408] conv1 <- pool0
I0428 20:35:35.705178  4643 net.cpp:382] conv1 -> conv1
I0428 20:35:35.708432  4643 net.cpp:124] Setting up conv1
I0428 20:35:35.708461  4643 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:35:35.708465  4643 net.cpp:139] Memory required for data: 30394800
I0428 20:35:35.708473  4643 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:35.708479  4643 net.cpp:86] Creating Layer pool1
I0428 20:35:35.708483  4643 net.cpp:408] pool1 <- conv1
I0428 20:35:35.708489  4643 net.cpp:382] pool1 -> pool1
I0428 20:35:35.708525  4643 net.cpp:124] Setting up pool1
I0428 20:35:35.708533  4643 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:35:35.708535  4643 net.cpp:139] Memory required for data: 30714800
I0428 20:35:35.708537  4643 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:35.708544  4643 net.cpp:86] Creating Layer ip1
I0428 20:35:35.708547  4643 net.cpp:408] ip1 <- pool1
I0428 20:35:35.708552  4643 net.cpp:382] ip1 -> ip1
I0428 20:35:35.708767  4643 net.cpp:124] Setting up ip1
I0428 20:35:35.708786  4643 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:35.708788  4643 net.cpp:139] Memory required for data: 30724800
I0428 20:35:35.708797  4643 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:35.708802  4643 net.cpp:86] Creating Layer relu1
I0428 20:35:35.708806  4643 net.cpp:408] relu1 <- ip1
I0428 20:35:35.708850  4643 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:35.709043  4643 net.cpp:124] Setting up relu1
I0428 20:35:35.709053  4643 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:35.709056  4643 net.cpp:139] Memory required for data: 30734800
I0428 20:35:35.709060  4643 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:35.709069  4643 net.cpp:86] Creating Layer ip2
I0428 20:35:35.709072  4643 net.cpp:408] ip2 <- ip1
I0428 20:35:35.709077  4643 net.cpp:382] ip2 -> ip2
I0428 20:35:35.709236  4643 net.cpp:124] Setting up ip2
I0428 20:35:35.709244  4643 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:35.709246  4643 net.cpp:139] Memory required for data: 30744800
I0428 20:35:35.709252  4643 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:35.709257  4643 net.cpp:86] Creating Layer relu2
I0428 20:35:35.709260  4643 net.cpp:408] relu2 <- ip2
I0428 20:35:35.709265  4643 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:35.709462  4643 net.cpp:124] Setting up relu2
I0428 20:35:35.709470  4643 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:35.709475  4643 net.cpp:139] Memory required for data: 30754800
I0428 20:35:35.709477  4643 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:35.709483  4643 net.cpp:86] Creating Layer ip3
I0428 20:35:35.709487  4643 net.cpp:408] ip3 <- ip2
I0428 20:35:35.709491  4643 net.cpp:382] ip3 -> ip3
I0428 20:35:35.709594  4643 net.cpp:124] Setting up ip3
I0428 20:35:35.709600  4643 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:35.709604  4643 net.cpp:139] Memory required for data: 30758800
I0428 20:35:35.709610  4643 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:35.709616  4643 net.cpp:86] Creating Layer relu3
I0428 20:35:35.709619  4643 net.cpp:408] relu3 <- ip3
I0428 20:35:35.709623  4643 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:35.710388  4643 net.cpp:124] Setting up relu3
I0428 20:35:35.710402  4643 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:35.710420  4643 net.cpp:139] Memory required for data: 30762800
I0428 20:35:35.710423  4643 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:35:35.710430  4643 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:35:35.710434  4643 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:35:35.710439  4643 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:35:35.710445  4643 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:35:35.710485  4643 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:35:35.710490  4643 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:35.710510  4643 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:35.710512  4643 net.cpp:139] Memory required for data: 30770800
I0428 20:35:35.710515  4643 layer_factory.hpp:77] Creating layer accuracy
I0428 20:35:35.710520  4643 net.cpp:86] Creating Layer accuracy
I0428 20:35:35.710523  4643 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:35:35.710528  4643 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:35:35.710532  4643 net.cpp:382] accuracy -> accuracy
I0428 20:35:35.710539  4643 net.cpp:124] Setting up accuracy
I0428 20:35:35.710543  4643 net.cpp:131] Top shape: (1)
I0428 20:35:35.710546  4643 net.cpp:139] Memory required for data: 30770804
I0428 20:35:35.710548  4643 layer_factory.hpp:77] Creating layer loss
I0428 20:35:35.710553  4643 net.cpp:86] Creating Layer loss
I0428 20:35:35.710556  4643 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:35:35.710559  4643 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:35:35.710566  4643 net.cpp:382] loss -> loss
I0428 20:35:35.710572  4643 layer_factory.hpp:77] Creating layer loss
I0428 20:35:35.710826  4643 net.cpp:124] Setting up loss
I0428 20:35:35.710836  4643 net.cpp:131] Top shape: (1)
I0428 20:35:35.710839  4643 net.cpp:134]     with loss weight 1
I0428 20:35:35.710855  4643 net.cpp:139] Memory required for data: 30770808
I0428 20:35:35.710858  4643 net.cpp:200] loss needs backward computation.
I0428 20:35:35.710862  4643 net.cpp:202] accuracy does not need backward computation.
I0428 20:35:35.710866  4643 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:35:35.710870  4643 net.cpp:200] relu3 needs backward computation.
I0428 20:35:35.710872  4643 net.cpp:200] ip3 needs backward computation.
I0428 20:35:35.710875  4643 net.cpp:200] relu2 needs backward computation.
I0428 20:35:35.710878  4643 net.cpp:200] ip2 needs backward computation.
I0428 20:35:35.710880  4643 net.cpp:200] relu1 needs backward computation.
I0428 20:35:35.710883  4643 net.cpp:200] ip1 needs backward computation.
I0428 20:35:35.710886  4643 net.cpp:200] pool1 needs backward computation.
I0428 20:35:35.710889  4643 net.cpp:200] conv1 needs backward computation.
I0428 20:35:35.710893  4643 net.cpp:200] pool0 needs backward computation.
I0428 20:35:35.710896  4643 net.cpp:200] conv0 needs backward computation.
I0428 20:35:35.710901  4643 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:35:35.710904  4643 net.cpp:202] mnist does not need backward computation.
I0428 20:35:35.710906  4643 net.cpp:244] This network produces output accuracy
I0428 20:35:35.710911  4643 net.cpp:244] This network produces output loss
I0428 20:35:35.710922  4643 net.cpp:257] Network initialization done.
I0428 20:35:35.710963  4643 solver.cpp:56] Solver scaffolding done.
I0428 20:35:35.711338  4643 caffe.cpp:248] Starting Optimization
I0428 20:35:35.711344  4643 solver.cpp:273] Solving LeNet
I0428 20:35:35.711347  4643 solver.cpp:274] Learning Rate Policy: inv
I0428 20:35:35.712136  4643 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:35:35.823843  4653 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:35.826761  4643 solver.cpp:398]     Test net output #0: accuracy = 0.1139
I0428 20:35:35.826794  4643 solver.cpp:398]     Test net output #1: loss = 2.3012 (* 1 = 2.3012 loss)
I0428 20:35:35.831312  4643 solver.cpp:219] Iteration 0 (-3.92171e-31 iter/s, 0.119921s/100 iters), loss = 2.28913
I0428 20:35:35.831351  4643 solver.cpp:238]     Train net output #0: loss = 2.28913 (* 1 = 2.28913 loss)
I0428 20:35:35.831363  4643 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:35:36.062759  4643 solver.cpp:219] Iteration 100 (432.144 iter/s, 0.231405s/100 iters), loss = 1.1281
I0428 20:35:36.062805  4643 solver.cpp:238]     Train net output #0: loss = 1.1281 (* 1 = 1.1281 loss)
I0428 20:35:36.062827  4643 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:35:36.295141  4643 solver.cpp:219] Iteration 200 (430.441 iter/s, 0.23232s/100 iters), loss = 1.23597
I0428 20:35:36.295176  4643 solver.cpp:238]     Train net output #0: loss = 1.23597 (* 1 = 1.23597 loss)
I0428 20:35:36.295183  4643 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:35:36.526692  4643 solver.cpp:219] Iteration 300 (431.951 iter/s, 0.231508s/100 iters), loss = 0.570449
I0428 20:35:36.526733  4643 solver.cpp:238]     Train net output #0: loss = 0.570449 (* 1 = 0.570449 loss)
I0428 20:35:36.526741  4643 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:35:36.762588  4643 solver.cpp:219] Iteration 400 (423.995 iter/s, 0.235852s/100 iters), loss = 0.812105
I0428 20:35:36.762634  4643 solver.cpp:238]     Train net output #0: loss = 0.812105 (* 1 = 0.812105 loss)
I0428 20:35:36.762641  4643 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:35:36.995733  4643 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:35:37.104272  4653 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:37.108235  4643 solver.cpp:398]     Test net output #0: accuracy = 0.8617
I0428 20:35:37.108259  4643 solver.cpp:398]     Test net output #1: loss = 0.588527 (* 1 = 0.588527 loss)
I0428 20:35:37.110543  4643 solver.cpp:219] Iteration 500 (287.437 iter/s, 0.347902s/100 iters), loss = 0.610639
I0428 20:35:37.110568  4643 solver.cpp:238]     Train net output #0: loss = 0.610639 (* 1 = 0.610639 loss)
I0428 20:35:37.110589  4643 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:35:37.348870  4643 solver.cpp:219] Iteration 600 (419.664 iter/s, 0.238286s/100 iters), loss = 0.408152
I0428 20:35:37.348896  4643 solver.cpp:238]     Train net output #0: loss = 0.408152 (* 1 = 0.408152 loss)
I0428 20:35:37.348904  4643 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:35:37.590420  4643 solver.cpp:219] Iteration 700 (414.066 iter/s, 0.241508s/100 iters), loss = 0.782588
I0428 20:35:37.590447  4643 solver.cpp:238]     Train net output #0: loss = 0.782588 (* 1 = 0.782588 loss)
I0428 20:35:37.590454  4643 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:35:37.837004  4643 solver.cpp:219] Iteration 800 (405.628 iter/s, 0.246531s/100 iters), loss = 0.651815
I0428 20:35:37.837041  4643 solver.cpp:238]     Train net output #0: loss = 0.651815 (* 1 = 0.651815 loss)
I0428 20:35:37.837049  4643 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:35:38.079433  4643 solver.cpp:219] Iteration 900 (412.583 iter/s, 0.242376s/100 iters), loss = 0.457489
I0428 20:35:38.079462  4643 solver.cpp:238]     Train net output #0: loss = 0.457489 (* 1 = 0.457489 loss)
I0428 20:35:38.079468  4643 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:35:38.160940  4649 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:38.318752  4643 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:35:38.323259  4643 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:35:38.325208  4643 solver.cpp:311] Iteration 1000, loss = 0.671723
I0428 20:35:38.325225  4643 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:35:38.434708  4653 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:38.437880  4643 solver.cpp:398]     Test net output #0: accuracy = 0.884
I0428 20:35:38.437917  4643 solver.cpp:398]     Test net output #1: loss = 0.511506 (* 1 = 0.511506 loss)
I0428 20:35:38.437924  4643 solver.cpp:316] Optimization Done.
I0428 20:35:38.437927  4643 caffe.cpp:259] Optimization Done.
