I0428 20:36:56.939853  4871 caffe.cpp:218] Using GPUs 0
I0428 20:36:56.969624  4871 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:57.412302  4871 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1644.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:57.412449  4871 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1644.prototxt
I0428 20:36:57.412781  4871 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:57.412817  4871 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:57.412924  4871 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:57.412986  4871 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:57.413069  4871 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:57.413089  4871 net.cpp:86] Creating Layer mnist
I0428 20:36:57.413095  4871 net.cpp:382] mnist -> data
I0428 20:36:57.413115  4871 net.cpp:382] mnist -> label
I0428 20:36:57.414038  4871 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:57.416263  4871 net.cpp:124] Setting up mnist
I0428 20:36:57.416311  4871 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:57.416316  4871 net.cpp:131] Top shape: 64 (64)
I0428 20:36:57.416317  4871 net.cpp:139] Memory required for data: 200960
I0428 20:36:57.416324  4871 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:57.416338  4871 net.cpp:86] Creating Layer conv0
I0428 20:36:57.416343  4871 net.cpp:408] conv0 <- data
I0428 20:36:57.416353  4871 net.cpp:382] conv0 -> conv0
I0428 20:36:57.652027  4871 net.cpp:124] Setting up conv0
I0428 20:36:57.652055  4871 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:57.652058  4871 net.cpp:139] Memory required for data: 14946560
I0428 20:36:57.652089  4871 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:57.652102  4871 net.cpp:86] Creating Layer pool0
I0428 20:36:57.652107  4871 net.cpp:408] pool0 <- conv0
I0428 20:36:57.652127  4871 net.cpp:382] pool0 -> pool0
I0428 20:36:57.652189  4871 net.cpp:124] Setting up pool0
I0428 20:36:57.652195  4871 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:57.652199  4871 net.cpp:139] Memory required for data: 18632960
I0428 20:36:57.652201  4871 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:57.652212  4871 net.cpp:86] Creating Layer conv1
I0428 20:36:57.652215  4871 net.cpp:408] conv1 <- pool0
I0428 20:36:57.652220  4871 net.cpp:382] conv1 -> conv1
I0428 20:36:57.656419  4871 net.cpp:124] Setting up conv1
I0428 20:36:57.656433  4871 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:57.656437  4871 net.cpp:139] Memory required for data: 20271360
I0428 20:36:57.656445  4871 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:57.656452  4871 net.cpp:86] Creating Layer pool1
I0428 20:36:57.656455  4871 net.cpp:408] pool1 <- conv1
I0428 20:36:57.656461  4871 net.cpp:382] pool1 -> pool1
I0428 20:36:57.656510  4871 net.cpp:124] Setting up pool1
I0428 20:36:57.656517  4871 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:57.656519  4871 net.cpp:139] Memory required for data: 20680960
I0428 20:36:57.656522  4871 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:57.656528  4871 net.cpp:86] Creating Layer ip1
I0428 20:36:57.656532  4871 net.cpp:408] ip1 <- pool1
I0428 20:36:57.656536  4871 net.cpp:382] ip1 -> ip1
I0428 20:36:57.656884  4871 net.cpp:124] Setting up ip1
I0428 20:36:57.656909  4871 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:36:57.656927  4871 net.cpp:139] Memory required for data: 20687360
I0428 20:36:57.656935  4871 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:57.656940  4871 net.cpp:86] Creating Layer relu1
I0428 20:36:57.656944  4871 net.cpp:408] relu1 <- ip1
I0428 20:36:57.656949  4871 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:57.657133  4871 net.cpp:124] Setting up relu1
I0428 20:36:57.657142  4871 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:36:57.657146  4871 net.cpp:139] Memory required for data: 20693760
I0428 20:36:57.657150  4871 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:57.657155  4871 net.cpp:86] Creating Layer ip2
I0428 20:36:57.657160  4871 net.cpp:408] ip2 <- ip1
I0428 20:36:57.657165  4871 net.cpp:382] ip2 -> ip2
I0428 20:36:57.657274  4871 net.cpp:124] Setting up ip2
I0428 20:36:57.657281  4871 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:57.657284  4871 net.cpp:139] Memory required for data: 20696320
I0428 20:36:57.657290  4871 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:57.657295  4871 net.cpp:86] Creating Layer relu2
I0428 20:36:57.657299  4871 net.cpp:408] relu2 <- ip2
I0428 20:36:57.657302  4871 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:57.658006  4871 net.cpp:124] Setting up relu2
I0428 20:36:57.658017  4871 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:57.658036  4871 net.cpp:139] Memory required for data: 20698880
I0428 20:36:57.658040  4871 layer_factory.hpp:77] Creating layer loss
I0428 20:36:57.658046  4871 net.cpp:86] Creating Layer loss
I0428 20:36:57.658048  4871 net.cpp:408] loss <- ip2
I0428 20:36:57.658053  4871 net.cpp:408] loss <- label
I0428 20:36:57.658058  4871 net.cpp:382] loss -> loss
I0428 20:36:57.658077  4871 layer_factory.hpp:77] Creating layer loss
I0428 20:36:57.658319  4871 net.cpp:124] Setting up loss
I0428 20:36:57.658329  4871 net.cpp:131] Top shape: (1)
I0428 20:36:57.658332  4871 net.cpp:134]     with loss weight 1
I0428 20:36:57.658345  4871 net.cpp:139] Memory required for data: 20698884
I0428 20:36:57.658349  4871 net.cpp:200] loss needs backward computation.
I0428 20:36:57.658352  4871 net.cpp:200] relu2 needs backward computation.
I0428 20:36:57.658355  4871 net.cpp:200] ip2 needs backward computation.
I0428 20:36:57.658359  4871 net.cpp:200] relu1 needs backward computation.
I0428 20:36:57.658361  4871 net.cpp:200] ip1 needs backward computation.
I0428 20:36:57.658375  4871 net.cpp:200] pool1 needs backward computation.
I0428 20:36:57.658377  4871 net.cpp:200] conv1 needs backward computation.
I0428 20:36:57.658381  4871 net.cpp:200] pool0 needs backward computation.
I0428 20:36:57.658383  4871 net.cpp:200] conv0 needs backward computation.
I0428 20:36:57.658387  4871 net.cpp:202] mnist does not need backward computation.
I0428 20:36:57.658390  4871 net.cpp:244] This network produces output loss
I0428 20:36:57.658398  4871 net.cpp:257] Network initialization done.
I0428 20:36:57.658694  4871 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1644.prototxt
I0428 20:36:57.658718  4871 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:57.658797  4871 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:36:57.658857  4871 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:57.658900  4871 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:57.658910  4871 net.cpp:86] Creating Layer mnist
I0428 20:36:57.658915  4871 net.cpp:382] mnist -> data
I0428 20:36:57.658922  4871 net.cpp:382] mnist -> label
I0428 20:36:57.659001  4871 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:57.660933  4871 net.cpp:124] Setting up mnist
I0428 20:36:57.660946  4871 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:57.660966  4871 net.cpp:131] Top shape: 100 (100)
I0428 20:36:57.660970  4871 net.cpp:139] Memory required for data: 314000
I0428 20:36:57.660974  4871 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:57.660980  4871 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:57.660984  4871 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:57.660989  4871 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:57.660995  4871 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:57.661057  4871 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:57.661063  4871 net.cpp:131] Top shape: 100 (100)
I0428 20:36:57.661067  4871 net.cpp:131] Top shape: 100 (100)
I0428 20:36:57.661070  4871 net.cpp:139] Memory required for data: 314800
I0428 20:36:57.661073  4871 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:57.661082  4871 net.cpp:86] Creating Layer conv0
I0428 20:36:57.661085  4871 net.cpp:408] conv0 <- data
I0428 20:36:57.661092  4871 net.cpp:382] conv0 -> conv0
I0428 20:36:57.662757  4871 net.cpp:124] Setting up conv0
I0428 20:36:57.662771  4871 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:57.662775  4871 net.cpp:139] Memory required for data: 23354800
I0428 20:36:57.662784  4871 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:57.662807  4871 net.cpp:86] Creating Layer pool0
I0428 20:36:57.662811  4871 net.cpp:408] pool0 <- conv0
I0428 20:36:57.662817  4871 net.cpp:382] pool0 -> pool0
I0428 20:36:57.662868  4871 net.cpp:124] Setting up pool0
I0428 20:36:57.662875  4871 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:57.662878  4871 net.cpp:139] Memory required for data: 29114800
I0428 20:36:57.662881  4871 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:57.662889  4871 net.cpp:86] Creating Layer conv1
I0428 20:36:57.662894  4871 net.cpp:408] conv1 <- pool0
I0428 20:36:57.662899  4871 net.cpp:382] conv1 -> conv1
I0428 20:36:57.665766  4871 net.cpp:124] Setting up conv1
I0428 20:36:57.665779  4871 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:57.665783  4871 net.cpp:139] Memory required for data: 31674800
I0428 20:36:57.665791  4871 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:57.665814  4871 net.cpp:86] Creating Layer pool1
I0428 20:36:57.665818  4871 net.cpp:408] pool1 <- conv1
I0428 20:36:57.665838  4871 net.cpp:382] pool1 -> pool1
I0428 20:36:57.665874  4871 net.cpp:124] Setting up pool1
I0428 20:36:57.665884  4871 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:57.665887  4871 net.cpp:139] Memory required for data: 32314800
I0428 20:36:57.665890  4871 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:57.665896  4871 net.cpp:86] Creating Layer ip1
I0428 20:36:57.665899  4871 net.cpp:408] ip1 <- pool1
I0428 20:36:57.665904  4871 net.cpp:382] ip1 -> ip1
I0428 20:36:57.666257  4871 net.cpp:124] Setting up ip1
I0428 20:36:57.666265  4871 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:36:57.666278  4871 net.cpp:139] Memory required for data: 32324800
I0428 20:36:57.666285  4871 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:57.666295  4871 net.cpp:86] Creating Layer relu1
I0428 20:36:57.666297  4871 net.cpp:408] relu1 <- ip1
I0428 20:36:57.666301  4871 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:57.666455  4871 net.cpp:124] Setting up relu1
I0428 20:36:57.666463  4871 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:36:57.666466  4871 net.cpp:139] Memory required for data: 32334800
I0428 20:36:57.666470  4871 layer_factory.hpp:77] Creating layer ip2
I0428 20:36:57.666476  4871 net.cpp:86] Creating Layer ip2
I0428 20:36:57.666478  4871 net.cpp:408] ip2 <- ip1
I0428 20:36:57.666483  4871 net.cpp:382] ip2 -> ip2
I0428 20:36:57.666589  4871 net.cpp:124] Setting up ip2
I0428 20:36:57.666595  4871 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:57.666599  4871 net.cpp:139] Memory required for data: 32338800
I0428 20:36:57.666604  4871 layer_factory.hpp:77] Creating layer relu2
I0428 20:36:57.666607  4871 net.cpp:86] Creating Layer relu2
I0428 20:36:57.666610  4871 net.cpp:408] relu2 <- ip2
I0428 20:36:57.666615  4871 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:36:57.666755  4871 net.cpp:124] Setting up relu2
I0428 20:36:57.666764  4871 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:57.666766  4871 net.cpp:139] Memory required for data: 32342800
I0428 20:36:57.666769  4871 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:36:57.666774  4871 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:36:57.666776  4871 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:36:57.666780  4871 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:36:57.666815  4871 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:36:57.666864  4871 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:36:57.666872  4871 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:57.666875  4871 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:57.666877  4871 net.cpp:139] Memory required for data: 32350800
I0428 20:36:57.666880  4871 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:57.666889  4871 net.cpp:86] Creating Layer accuracy
I0428 20:36:57.666908  4871 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:36:57.666913  4871 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:57.666918  4871 net.cpp:382] accuracy -> accuracy
I0428 20:36:57.666924  4871 net.cpp:124] Setting up accuracy
I0428 20:36:57.666929  4871 net.cpp:131] Top shape: (1)
I0428 20:36:57.666931  4871 net.cpp:139] Memory required for data: 32350804
I0428 20:36:57.666934  4871 layer_factory.hpp:77] Creating layer loss
I0428 20:36:57.666939  4871 net.cpp:86] Creating Layer loss
I0428 20:36:57.666942  4871 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:36:57.666946  4871 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:57.666950  4871 net.cpp:382] loss -> loss
I0428 20:36:57.666956  4871 layer_factory.hpp:77] Creating layer loss
I0428 20:36:57.667235  4871 net.cpp:124] Setting up loss
I0428 20:36:57.667244  4871 net.cpp:131] Top shape: (1)
I0428 20:36:57.667248  4871 net.cpp:134]     with loss weight 1
I0428 20:36:57.667253  4871 net.cpp:139] Memory required for data: 32350808
I0428 20:36:57.667256  4871 net.cpp:200] loss needs backward computation.
I0428 20:36:57.667260  4871 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:57.667263  4871 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:36:57.667266  4871 net.cpp:200] relu2 needs backward computation.
I0428 20:36:57.667269  4871 net.cpp:200] ip2 needs backward computation.
I0428 20:36:57.667273  4871 net.cpp:200] relu1 needs backward computation.
I0428 20:36:57.667275  4871 net.cpp:200] ip1 needs backward computation.
I0428 20:36:57.667279  4871 net.cpp:200] pool1 needs backward computation.
I0428 20:36:57.667281  4871 net.cpp:200] conv1 needs backward computation.
I0428 20:36:57.667284  4871 net.cpp:200] pool0 needs backward computation.
I0428 20:36:57.667286  4871 net.cpp:200] conv0 needs backward computation.
I0428 20:36:57.667290  4871 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:57.667294  4871 net.cpp:202] mnist does not need backward computation.
I0428 20:36:57.667296  4871 net.cpp:244] This network produces output accuracy
I0428 20:36:57.667299  4871 net.cpp:244] This network produces output loss
I0428 20:36:57.667309  4871 net.cpp:257] Network initialization done.
I0428 20:36:57.667342  4871 solver.cpp:56] Solver scaffolding done.
I0428 20:36:57.667594  4871 caffe.cpp:248] Starting Optimization
I0428 20:36:57.667601  4871 solver.cpp:273] Solving LeNet
I0428 20:36:57.667603  4871 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:57.668400  4871 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:57.802156  4878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:57.804113  4871 solver.cpp:398]     Test net output #0: accuracy = 0.1355
I0428 20:36:57.804137  4871 solver.cpp:398]     Test net output #1: loss = 2.27692 (* 1 = 2.27692 loss)
I0428 20:36:57.809537  4871 solver.cpp:219] Iteration 0 (-8.43154e-31 iter/s, 0.141908s/100 iters), loss = 2.25308
I0428 20:36:57.809561  4871 solver.cpp:238]     Train net output #0: loss = 2.25308 (* 1 = 2.25308 loss)
I0428 20:36:57.809572  4871 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:58.080585  4871 solver.cpp:219] Iteration 100 (369.014 iter/s, 0.270992s/100 iters), loss = 0.221757
I0428 20:36:58.080626  4871 solver.cpp:238]     Train net output #0: loss = 0.221757 (* 1 = 0.221757 loss)
I0428 20:36:58.080631  4871 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:58.351275  4871 solver.cpp:219] Iteration 200 (369.485 iter/s, 0.270647s/100 iters), loss = 0.152559
I0428 20:36:58.351330  4871 solver.cpp:238]     Train net output #0: loss = 0.152559 (* 1 = 0.152559 loss)
I0428 20:36:58.351336  4871 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:58.624680  4871 solver.cpp:219] Iteration 300 (365.832 iter/s, 0.27335s/100 iters), loss = 0.140745
I0428 20:36:58.624707  4871 solver.cpp:238]     Train net output #0: loss = 0.140745 (* 1 = 0.140745 loss)
I0428 20:36:58.624713  4871 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:58.904630  4871 solver.cpp:219] Iteration 400 (357.264 iter/s, 0.279905s/100 iters), loss = 0.0433976
I0428 20:36:58.904671  4871 solver.cpp:238]     Train net output #0: loss = 0.0433976 (* 1 = 0.0433976 loss)
I0428 20:36:58.904678  4871 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:59.181115  4871 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:59.307945  4878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:59.312643  4871 solver.cpp:398]     Test net output #0: accuracy = 0.9686
I0428 20:36:59.312664  4871 solver.cpp:398]     Test net output #1: loss = 0.101068 (* 1 = 0.101068 loss)
I0428 20:36:59.315349  4871 solver.cpp:219] Iteration 500 (243.505 iter/s, 0.410669s/100 iters), loss = 0.166844
I0428 20:36:59.315388  4871 solver.cpp:238]     Train net output #0: loss = 0.166844 (* 1 = 0.166844 loss)
I0428 20:36:59.315394  4871 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:59.593410  4871 solver.cpp:219] Iteration 600 (359.709 iter/s, 0.278003s/100 iters), loss = 0.0717316
I0428 20:36:59.593433  4871 solver.cpp:238]     Train net output #0: loss = 0.0717315 (* 1 = 0.0717315 loss)
I0428 20:36:59.593439  4871 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:59.876163  4871 solver.cpp:219] Iteration 700 (353.741 iter/s, 0.282693s/100 iters), loss = 0.087019
I0428 20:36:59.876214  4871 solver.cpp:238]     Train net output #0: loss = 0.0870189 (* 1 = 0.0870189 loss)
I0428 20:36:59.876240  4871 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:37:00.164491  4871 solver.cpp:219] Iteration 800 (346.908 iter/s, 0.288261s/100 iters), loss = 0.199611
I0428 20:37:00.164531  4871 solver.cpp:238]     Train net output #0: loss = 0.199611 (* 1 = 0.199611 loss)
I0428 20:37:00.164537  4871 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:37:00.450672  4871 solver.cpp:219] Iteration 900 (349.483 iter/s, 0.286137s/100 iters), loss = 0.136855
I0428 20:37:00.450712  4871 solver.cpp:238]     Train net output #0: loss = 0.136854 (* 1 = 0.136854 loss)
I0428 20:37:00.450719  4871 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:37:00.546051  4877 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:00.734869  4871 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:37:00.741364  4871 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:37:00.744684  4871 solver.cpp:311] Iteration 1000, loss = 0.1189
I0428 20:37:00.744701  4871 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:37:00.872418  4878 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:37:00.877277  4871 solver.cpp:398]     Test net output #0: accuracy = 0.9797
I0428 20:37:00.877312  4871 solver.cpp:398]     Test net output #1: loss = 0.0607111 (* 1 = 0.0607111 loss)
I0428 20:37:00.877317  4871 solver.cpp:316] Optimization Done.
I0428 20:37:00.877321  4871 caffe.cpp:259] Optimization Done.
