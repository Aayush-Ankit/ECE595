I0428 19:41:33.228899 24854 caffe.cpp:218] Using GPUs 0
I0428 19:41:33.270442 24854 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:33.790550 24854 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test368.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:33.790715 24854 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test368.prototxt
I0428 19:41:33.791127 24854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:33.791152 24854 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:33.791262 24854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:33.791368 24854 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:33.791504 24854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:33.791538 24854 net.cpp:86] Creating Layer mnist
I0428 19:41:33.791549 24854 net.cpp:382] mnist -> data
I0428 19:41:33.791580 24854 net.cpp:382] mnist -> label
I0428 19:41:33.792860 24854 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:33.795317 24854 net.cpp:124] Setting up mnist
I0428 19:41:33.795338 24854 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:33.795348 24854 net.cpp:131] Top shape: 64 (64)
I0428 19:41:33.795356 24854 net.cpp:139] Memory required for data: 200960
I0428 19:41:33.795367 24854 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:33.795388 24854 net.cpp:86] Creating Layer conv0
I0428 19:41:33.795413 24854 net.cpp:408] conv0 <- data
I0428 19:41:33.795433 24854 net.cpp:382] conv0 -> conv0
I0428 19:41:34.082484 24854 net.cpp:124] Setting up conv0
I0428 19:41:34.082516 24854 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:34.082525 24854 net.cpp:139] Memory required for data: 495872
I0428 19:41:34.082548 24854 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:34.082568 24854 net.cpp:86] Creating Layer pool0
I0428 19:41:34.082577 24854 net.cpp:408] pool0 <- conv0
I0428 19:41:34.082588 24854 net.cpp:382] pool0 -> pool0
I0428 19:41:34.082661 24854 net.cpp:124] Setting up pool0
I0428 19:41:34.082672 24854 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:34.082679 24854 net.cpp:139] Memory required for data: 569600
I0428 19:41:34.082685 24854 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:34.082705 24854 net.cpp:86] Creating Layer conv1
I0428 19:41:34.082712 24854 net.cpp:408] conv1 <- pool0
I0428 19:41:34.082723 24854 net.cpp:382] conv1 -> conv1
I0428 19:41:34.084945 24854 net.cpp:124] Setting up conv1
I0428 19:41:34.084965 24854 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:34.084972 24854 net.cpp:139] Memory required for data: 733440
I0428 19:41:34.084988 24854 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:34.085002 24854 net.cpp:86] Creating Layer pool1
I0428 19:41:34.085011 24854 net.cpp:408] pool1 <- conv1
I0428 19:41:34.085022 24854 net.cpp:382] pool1 -> pool1
I0428 19:41:34.085085 24854 net.cpp:124] Setting up pool1
I0428 19:41:34.085096 24854 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:34.085103 24854 net.cpp:139] Memory required for data: 774400
I0428 19:41:34.085108 24854 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:34.085124 24854 net.cpp:86] Creating Layer ip1
I0428 19:41:34.085135 24854 net.cpp:408] ip1 <- pool1
I0428 19:41:34.085147 24854 net.cpp:382] ip1 -> ip1
I0428 19:41:34.086257 24854 net.cpp:124] Setting up ip1
I0428 19:41:34.086274 24854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:34.086280 24854 net.cpp:139] Memory required for data: 776960
I0428 19:41:34.086295 24854 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:34.086310 24854 net.cpp:86] Creating Layer relu1
I0428 19:41:34.086323 24854 net.cpp:408] relu1 <- ip1
I0428 19:41:34.086333 24854 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:34.086563 24854 net.cpp:124] Setting up relu1
I0428 19:41:34.086575 24854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:34.086581 24854 net.cpp:139] Memory required for data: 779520
I0428 19:41:34.086588 24854 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:34.086601 24854 net.cpp:86] Creating Layer ip2
I0428 19:41:34.086607 24854 net.cpp:408] ip2 <- ip1
I0428 19:41:34.086619 24854 net.cpp:382] ip2 -> ip2
I0428 19:41:34.086752 24854 net.cpp:124] Setting up ip2
I0428 19:41:34.086763 24854 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:41:34.086768 24854 net.cpp:139] Memory required for data: 785920
I0428 19:41:34.086779 24854 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:34.086791 24854 net.cpp:86] Creating Layer relu2
I0428 19:41:34.086800 24854 net.cpp:408] relu2 <- ip2
I0428 19:41:34.086812 24854 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:34.087679 24854 net.cpp:124] Setting up relu2
I0428 19:41:34.087697 24854 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:41:34.087703 24854 net.cpp:139] Memory required for data: 792320
I0428 19:41:34.087709 24854 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:34.087721 24854 net.cpp:86] Creating Layer ip3
I0428 19:41:34.087728 24854 net.cpp:408] ip3 <- ip2
I0428 19:41:34.087741 24854 net.cpp:382] ip3 -> ip3
I0428 19:41:34.087874 24854 net.cpp:124] Setting up ip3
I0428 19:41:34.087885 24854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:34.087891 24854 net.cpp:139] Memory required for data: 794880
I0428 19:41:34.087905 24854 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:34.087918 24854 net.cpp:86] Creating Layer relu3
I0428 19:41:34.087926 24854 net.cpp:408] relu3 <- ip3
I0428 19:41:34.087935 24854 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:34.088155 24854 net.cpp:124] Setting up relu3
I0428 19:41:34.088170 24854 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:34.088176 24854 net.cpp:139] Memory required for data: 797440
I0428 19:41:34.088182 24854 layer_factory.hpp:77] Creating layer loss
I0428 19:41:34.088192 24854 net.cpp:86] Creating Layer loss
I0428 19:41:34.088199 24854 net.cpp:408] loss <- ip3
I0428 19:41:34.088207 24854 net.cpp:408] loss <- label
I0428 19:41:34.088217 24854 net.cpp:382] loss -> loss
I0428 19:41:34.088240 24854 layer_factory.hpp:77] Creating layer loss
I0428 19:41:34.088543 24854 net.cpp:124] Setting up loss
I0428 19:41:34.088559 24854 net.cpp:131] Top shape: (1)
I0428 19:41:34.088565 24854 net.cpp:134]     with loss weight 1
I0428 19:41:34.088588 24854 net.cpp:139] Memory required for data: 797444
I0428 19:41:34.088595 24854 net.cpp:200] loss needs backward computation.
I0428 19:41:34.088603 24854 net.cpp:200] relu3 needs backward computation.
I0428 19:41:34.088608 24854 net.cpp:200] ip3 needs backward computation.
I0428 19:41:34.088614 24854 net.cpp:200] relu2 needs backward computation.
I0428 19:41:34.088619 24854 net.cpp:200] ip2 needs backward computation.
I0428 19:41:34.088625 24854 net.cpp:200] relu1 needs backward computation.
I0428 19:41:34.088631 24854 net.cpp:200] ip1 needs backward computation.
I0428 19:41:34.088637 24854 net.cpp:200] pool1 needs backward computation.
I0428 19:41:34.088644 24854 net.cpp:200] conv1 needs backward computation.
I0428 19:41:34.088649 24854 net.cpp:200] pool0 needs backward computation.
I0428 19:41:34.088655 24854 net.cpp:200] conv0 needs backward computation.
I0428 19:41:34.088662 24854 net.cpp:202] mnist does not need backward computation.
I0428 19:41:34.088668 24854 net.cpp:244] This network produces output loss
I0428 19:41:34.088685 24854 net.cpp:257] Network initialization done.
I0428 19:41:34.089085 24854 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test368.prototxt
I0428 19:41:34.089128 24854 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:34.089251 24854 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:41:34.089395 24854 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:34.089464 24854 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:34.089486 24854 net.cpp:86] Creating Layer mnist
I0428 19:41:34.089498 24854 net.cpp:382] mnist -> data
I0428 19:41:34.089511 24854 net.cpp:382] mnist -> label
I0428 19:41:34.089661 24854 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:34.092262 24854 net.cpp:124] Setting up mnist
I0428 19:41:34.092279 24854 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:34.092289 24854 net.cpp:131] Top shape: 100 (100)
I0428 19:41:34.092295 24854 net.cpp:139] Memory required for data: 314000
I0428 19:41:34.092303 24854 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:34.092314 24854 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:34.092321 24854 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:34.092334 24854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:34.092346 24854 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:34.092438 24854 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:34.092450 24854 net.cpp:131] Top shape: 100 (100)
I0428 19:41:34.092458 24854 net.cpp:131] Top shape: 100 (100)
I0428 19:41:34.092464 24854 net.cpp:139] Memory required for data: 314800
I0428 19:41:34.092470 24854 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:34.092489 24854 net.cpp:86] Creating Layer conv0
I0428 19:41:34.092497 24854 net.cpp:408] conv0 <- data
I0428 19:41:34.092509 24854 net.cpp:382] conv0 -> conv0
I0428 19:41:34.094244 24854 net.cpp:124] Setting up conv0
I0428 19:41:34.094262 24854 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:34.094269 24854 net.cpp:139] Memory required for data: 775600
I0428 19:41:34.094286 24854 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:34.094305 24854 net.cpp:86] Creating Layer pool0
I0428 19:41:34.094311 24854 net.cpp:408] pool0 <- conv0
I0428 19:41:34.094322 24854 net.cpp:382] pool0 -> pool0
I0428 19:41:34.094384 24854 net.cpp:124] Setting up pool0
I0428 19:41:34.094395 24854 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:34.094401 24854 net.cpp:139] Memory required for data: 890800
I0428 19:41:34.094406 24854 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:34.094426 24854 net.cpp:86] Creating Layer conv1
I0428 19:41:34.094434 24854 net.cpp:408] conv1 <- pool0
I0428 19:41:34.094446 24854 net.cpp:382] conv1 -> conv1
I0428 19:41:34.096261 24854 net.cpp:124] Setting up conv1
I0428 19:41:34.096280 24854 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:34.096289 24854 net.cpp:139] Memory required for data: 1146800
I0428 19:41:34.096305 24854 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:34.096316 24854 net.cpp:86] Creating Layer pool1
I0428 19:41:34.096331 24854 net.cpp:408] pool1 <- conv1
I0428 19:41:34.096343 24854 net.cpp:382] pool1 -> pool1
I0428 19:41:34.096397 24854 net.cpp:124] Setting up pool1
I0428 19:41:34.096408 24854 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:34.096415 24854 net.cpp:139] Memory required for data: 1210800
I0428 19:41:34.096421 24854 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:34.096437 24854 net.cpp:86] Creating Layer ip1
I0428 19:41:34.096446 24854 net.cpp:408] ip1 <- pool1
I0428 19:41:34.096456 24854 net.cpp:382] ip1 -> ip1
I0428 19:41:34.096596 24854 net.cpp:124] Setting up ip1
I0428 19:41:34.096606 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.096627 24854 net.cpp:139] Memory required for data: 1214800
I0428 19:41:34.096642 24854 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:34.096655 24854 net.cpp:86] Creating Layer relu1
I0428 19:41:34.096663 24854 net.cpp:408] relu1 <- ip1
I0428 19:41:34.096673 24854 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:34.096885 24854 net.cpp:124] Setting up relu1
I0428 19:41:34.096899 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.096906 24854 net.cpp:139] Memory required for data: 1218800
I0428 19:41:34.096920 24854 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:34.096932 24854 net.cpp:86] Creating Layer ip2
I0428 19:41:34.096940 24854 net.cpp:408] ip2 <- ip1
I0428 19:41:34.096951 24854 net.cpp:382] ip2 -> ip2
I0428 19:41:34.097128 24854 net.cpp:124] Setting up ip2
I0428 19:41:34.097141 24854 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:41:34.097146 24854 net.cpp:139] Memory required for data: 1228800
I0428 19:41:34.097157 24854 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:34.097169 24854 net.cpp:86] Creating Layer relu2
I0428 19:41:34.097180 24854 net.cpp:408] relu2 <- ip2
I0428 19:41:34.097190 24854 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:34.097390 24854 net.cpp:124] Setting up relu2
I0428 19:41:34.097404 24854 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:41:34.097409 24854 net.cpp:139] Memory required for data: 1238800
I0428 19:41:34.097415 24854 layer_factory.hpp:77] Creating layer ip3
I0428 19:41:34.097429 24854 net.cpp:86] Creating Layer ip3
I0428 19:41:34.097436 24854 net.cpp:408] ip3 <- ip2
I0428 19:41:34.097447 24854 net.cpp:382] ip3 -> ip3
I0428 19:41:34.097573 24854 net.cpp:124] Setting up ip3
I0428 19:41:34.097584 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.097589 24854 net.cpp:139] Memory required for data: 1242800
I0428 19:41:34.097604 24854 layer_factory.hpp:77] Creating layer relu3
I0428 19:41:34.097615 24854 net.cpp:86] Creating Layer relu3
I0428 19:41:34.097625 24854 net.cpp:408] relu3 <- ip3
I0428 19:41:34.097638 24854 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:41:34.098587 24854 net.cpp:124] Setting up relu3
I0428 19:41:34.098603 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.098609 24854 net.cpp:139] Memory required for data: 1246800
I0428 19:41:34.098615 24854 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:41:34.098625 24854 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:41:34.098631 24854 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:41:34.098644 24854 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:41:34.098655 24854 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:41:34.098709 24854 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:41:34.098722 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.098731 24854 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:34.098737 24854 net.cpp:139] Memory required for data: 1254800
I0428 19:41:34.098742 24854 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:34.098752 24854 net.cpp:86] Creating Layer accuracy
I0428 19:41:34.098758 24854 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:41:34.098767 24854 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:34.098776 24854 net.cpp:382] accuracy -> accuracy
I0428 19:41:34.098790 24854 net.cpp:124] Setting up accuracy
I0428 19:41:34.098800 24854 net.cpp:131] Top shape: (1)
I0428 19:41:34.098808 24854 net.cpp:139] Memory required for data: 1254804
I0428 19:41:34.098814 24854 layer_factory.hpp:77] Creating layer loss
I0428 19:41:34.098824 24854 net.cpp:86] Creating Layer loss
I0428 19:41:34.098836 24854 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:41:34.098845 24854 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:34.098855 24854 net.cpp:382] loss -> loss
I0428 19:41:34.098866 24854 layer_factory.hpp:77] Creating layer loss
I0428 19:41:34.099171 24854 net.cpp:124] Setting up loss
I0428 19:41:34.099184 24854 net.cpp:131] Top shape: (1)
I0428 19:41:34.099190 24854 net.cpp:134]     with loss weight 1
I0428 19:41:34.099201 24854 net.cpp:139] Memory required for data: 1254808
I0428 19:41:34.099223 24854 net.cpp:200] loss needs backward computation.
I0428 19:41:34.099232 24854 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:34.099241 24854 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:41:34.099247 24854 net.cpp:200] relu3 needs backward computation.
I0428 19:41:34.099253 24854 net.cpp:200] ip3 needs backward computation.
I0428 19:41:34.099259 24854 net.cpp:200] relu2 needs backward computation.
I0428 19:41:34.099265 24854 net.cpp:200] ip2 needs backward computation.
I0428 19:41:34.099272 24854 net.cpp:200] relu1 needs backward computation.
I0428 19:41:34.099277 24854 net.cpp:200] ip1 needs backward computation.
I0428 19:41:34.099284 24854 net.cpp:200] pool1 needs backward computation.
I0428 19:41:34.099290 24854 net.cpp:200] conv1 needs backward computation.
I0428 19:41:34.099297 24854 net.cpp:200] pool0 needs backward computation.
I0428 19:41:34.099305 24854 net.cpp:200] conv0 needs backward computation.
I0428 19:41:34.099313 24854 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:34.099319 24854 net.cpp:202] mnist does not need backward computation.
I0428 19:41:34.099325 24854 net.cpp:244] This network produces output accuracy
I0428 19:41:34.099333 24854 net.cpp:244] This network produces output loss
I0428 19:41:34.099354 24854 net.cpp:257] Network initialization done.
I0428 19:41:34.099412 24854 solver.cpp:56] Solver scaffolding done.
I0428 19:41:34.099818 24854 caffe.cpp:248] Starting Optimization
I0428 19:41:34.099828 24854 solver.cpp:273] Solving LeNet
I0428 19:41:34.099833 24854 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:34.100718 24854 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:34.103580 24854 blocking_queue.cpp:49] Waiting for data
I0428 19:41:34.171155 24861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:34.171609 24854 solver.cpp:398]     Test net output #0: accuracy = 0.0721
I0428 19:41:34.171635 24854 solver.cpp:398]     Test net output #1: loss = 2.39185 (* 1 = 2.39185 loss)
I0428 19:41:34.173529 24854 solver.cpp:219] Iteration 0 (-3.18641e-31 iter/s, 0.0736625s/100 iters), loss = 2.38291
I0428 19:41:34.173566 24854 solver.cpp:238]     Train net output #0: loss = 2.38291 (* 1 = 2.38291 loss)
I0428 19:41:34.173585 24854 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:34.247041 24854 solver.cpp:219] Iteration 100 (1361.06 iter/s, 0.073472s/100 iters), loss = 1.29345
I0428 19:41:34.247069 24854 solver.cpp:238]     Train net output #0: loss = 1.29345 (* 1 = 1.29345 loss)
I0428 19:41:34.247095 24854 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:34.319826 24854 solver.cpp:219] Iteration 200 (1374.63 iter/s, 0.072747s/100 iters), loss = 1.01552
I0428 19:41:34.319854 24854 solver.cpp:238]     Train net output #0: loss = 1.01552 (* 1 = 1.01552 loss)
I0428 19:41:34.319880 24854 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:34.392491 24854 solver.cpp:219] Iteration 300 (1376.84 iter/s, 0.0726301s/100 iters), loss = 0.651506
I0428 19:41:34.392519 24854 solver.cpp:238]     Train net output #0: loss = 0.651506 (* 1 = 0.651506 loss)
I0428 19:41:34.392544 24854 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:34.463706 24854 solver.cpp:219] Iteration 400 (1404.86 iter/s, 0.0711815s/100 iters), loss = 0.499341
I0428 19:41:34.463734 24854 solver.cpp:238]     Train net output #0: loss = 0.499341 (* 1 = 0.499341 loss)
I0428 19:41:34.463759 24854 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:34.534240 24854 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:34.578135 24861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:34.578568 24854 solver.cpp:398]     Test net output #0: accuracy = 0.8296
I0428 19:41:34.578591 24854 solver.cpp:398]     Test net output #1: loss = 0.493669 (* 1 = 0.493669 loss)
I0428 19:41:34.579375 24854 solver.cpp:219] Iteration 500 (864.819 iter/s, 0.115631s/100 iters), loss = 0.426055
I0428 19:41:34.579409 24854 solver.cpp:238]     Train net output #0: loss = 0.426055 (* 1 = 0.426055 loss)
I0428 19:41:34.579443 24854 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:34.656221 24854 solver.cpp:219] Iteration 600 (1301.94 iter/s, 0.0768082s/100 iters), loss = 0.344995
I0428 19:41:34.656250 24854 solver.cpp:238]     Train net output #0: loss = 0.344995 (* 1 = 0.344995 loss)
I0428 19:41:34.656261 24854 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:34.732092 24854 solver.cpp:219] Iteration 700 (1318.66 iter/s, 0.0758343s/100 iters), loss = 0.587367
I0428 19:41:34.732121 24854 solver.cpp:238]     Train net output #0: loss = 0.587367 (* 1 = 0.587367 loss)
I0428 19:41:34.732132 24854 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:34.805238 24854 solver.cpp:219] Iteration 800 (1367.87 iter/s, 0.0731064s/100 iters), loss = 0.673407
I0428 19:41:34.805265 24854 solver.cpp:238]     Train net output #0: loss = 0.673407 (* 1 = 0.673407 loss)
I0428 19:41:34.805275 24854 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:34.878139 24854 solver.cpp:219] Iteration 900 (1372.5 iter/s, 0.0728597s/100 iters), loss = 0.501949
I0428 19:41:34.878165 24854 solver.cpp:238]     Train net output #0: loss = 0.501949 (* 1 = 0.501949 loss)
I0428 19:41:34.878190 24854 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:34.902556 24860 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:34.949596 24854 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:34.950284 24854 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:34.950739 24854 solver.cpp:311] Iteration 1000, loss = 0.46152
I0428 19:41:34.950772 24854 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:35.018396 24861 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:35.018859 24854 solver.cpp:398]     Test net output #0: accuracy = 0.8587
I0428 19:41:35.018880 24854 solver.cpp:398]     Test net output #1: loss = 0.390141 (* 1 = 0.390141 loss)
I0428 19:41:35.018888 24854 solver.cpp:316] Optimization Done.
I0428 19:41:35.018893 24854 caffe.cpp:259] Optimization Done.
