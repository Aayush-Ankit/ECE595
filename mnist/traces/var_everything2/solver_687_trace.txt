I0428 19:53:25.611755 27765 caffe.cpp:218] Using GPUs 0
I0428 19:53:25.647909 27765 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:53:26.158962 27765 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test687.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:53:26.159102 27765 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test687.prototxt
I0428 19:53:26.159519 27765 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:53:26.159539 27765 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:53:26.159643 27765 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:26.159723 27765 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:26.159826 27765 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:53:26.159849 27765 net.cpp:86] Creating Layer mnist
I0428 19:53:26.159857 27765 net.cpp:382] mnist -> data
I0428 19:53:26.159881 27765 net.cpp:382] mnist -> label
I0428 19:53:26.161046 27765 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:53:26.163627 27765 net.cpp:124] Setting up mnist
I0428 19:53:26.163645 27765 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:53:26.163653 27765 net.cpp:131] Top shape: 64 (64)
I0428 19:53:26.163657 27765 net.cpp:139] Memory required for data: 200960
I0428 19:53:26.163664 27765 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:26.163697 27765 net.cpp:86] Creating Layer conv0
I0428 19:53:26.163717 27765 net.cpp:408] conv0 <- data
I0428 19:53:26.163731 27765 net.cpp:382] conv0 -> conv0
I0428 19:53:26.432582 27765 net.cpp:124] Setting up conv0
I0428 19:53:26.432606 27765 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:53:26.432610 27765 net.cpp:139] Memory required for data: 938240
I0428 19:53:26.432624 27765 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:26.432636 27765 net.cpp:86] Creating Layer pool0
I0428 19:53:26.432641 27765 net.cpp:408] pool0 <- conv0
I0428 19:53:26.432646 27765 net.cpp:382] pool0 -> pool0
I0428 19:53:26.432705 27765 net.cpp:124] Setting up pool0
I0428 19:53:26.432711 27765 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:53:26.432714 27765 net.cpp:139] Memory required for data: 1122560
I0428 19:53:26.432716 27765 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:26.432727 27765 net.cpp:86] Creating Layer conv1
I0428 19:53:26.432730 27765 net.cpp:408] conv1 <- pool0
I0428 19:53:26.432735 27765 net.cpp:382] conv1 -> conv1
I0428 19:53:26.435591 27765 net.cpp:124] Setting up conv1
I0428 19:53:26.435606 27765 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 19:53:26.435609 27765 net.cpp:139] Memory required for data: 1941760
I0428 19:53:26.435617 27765 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:26.435624 27765 net.cpp:86] Creating Layer pool1
I0428 19:53:26.435627 27765 net.cpp:408] pool1 <- conv1
I0428 19:53:26.435632 27765 net.cpp:382] pool1 -> pool1
I0428 19:53:26.435683 27765 net.cpp:124] Setting up pool1
I0428 19:53:26.435688 27765 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 19:53:26.435691 27765 net.cpp:139] Memory required for data: 2146560
I0428 19:53:26.435694 27765 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:26.435700 27765 net.cpp:86] Creating Layer ip1
I0428 19:53:26.435703 27765 net.cpp:408] ip1 <- pool1
I0428 19:53:26.435708 27765 net.cpp:382] ip1 -> ip1
I0428 19:53:26.435907 27765 net.cpp:124] Setting up ip1
I0428 19:53:26.435915 27765 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:26.435919 27765 net.cpp:139] Memory required for data: 2152960
I0428 19:53:26.435925 27765 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:26.435932 27765 net.cpp:86] Creating Layer relu1
I0428 19:53:26.435935 27765 net.cpp:408] relu1 <- ip1
I0428 19:53:26.435940 27765 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:26.436092 27765 net.cpp:124] Setting up relu1
I0428 19:53:26.436101 27765 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:26.436105 27765 net.cpp:139] Memory required for data: 2159360
I0428 19:53:26.436107 27765 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:26.436113 27765 net.cpp:86] Creating Layer ip2
I0428 19:53:26.436116 27765 net.cpp:408] ip2 <- ip1
I0428 19:53:26.436120 27765 net.cpp:382] ip2 -> ip2
I0428 19:53:26.436211 27765 net.cpp:124] Setting up ip2
I0428 19:53:26.436218 27765 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:26.436221 27765 net.cpp:139] Memory required for data: 2165760
I0428 19:53:26.436226 27765 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:26.436233 27765 net.cpp:86] Creating Layer relu2
I0428 19:53:26.436235 27765 net.cpp:408] relu2 <- ip2
I0428 19:53:26.436239 27765 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:26.436988 27765 net.cpp:124] Setting up relu2
I0428 19:53:26.437016 27765 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:53:26.437021 27765 net.cpp:139] Memory required for data: 2172160
I0428 19:53:26.437023 27765 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:26.437031 27765 net.cpp:86] Creating Layer ip3
I0428 19:53:26.437036 27765 net.cpp:408] ip3 <- ip2
I0428 19:53:26.437041 27765 net.cpp:382] ip3 -> ip3
I0428 19:53:26.437135 27765 net.cpp:124] Setting up ip3
I0428 19:53:26.437142 27765 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:26.437145 27765 net.cpp:139] Memory required for data: 2174720
I0428 19:53:26.437153 27765 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:26.437158 27765 net.cpp:86] Creating Layer relu3
I0428 19:53:26.437161 27765 net.cpp:408] relu3 <- ip3
I0428 19:53:26.437165 27765 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:26.437333 27765 net.cpp:124] Setting up relu3
I0428 19:53:26.437342 27765 net.cpp:131] Top shape: 64 10 (640)
I0428 19:53:26.437345 27765 net.cpp:139] Memory required for data: 2177280
I0428 19:53:26.437348 27765 layer_factory.hpp:77] Creating layer loss
I0428 19:53:26.437355 27765 net.cpp:86] Creating Layer loss
I0428 19:53:26.437357 27765 net.cpp:408] loss <- ip3
I0428 19:53:26.437361 27765 net.cpp:408] loss <- label
I0428 19:53:26.437366 27765 net.cpp:382] loss -> loss
I0428 19:53:26.437381 27765 layer_factory.hpp:77] Creating layer loss
I0428 19:53:26.437626 27765 net.cpp:124] Setting up loss
I0428 19:53:26.437636 27765 net.cpp:131] Top shape: (1)
I0428 19:53:26.437639 27765 net.cpp:134]     with loss weight 1
I0428 19:53:26.437669 27765 net.cpp:139] Memory required for data: 2177284
I0428 19:53:26.437674 27765 net.cpp:200] loss needs backward computation.
I0428 19:53:26.437676 27765 net.cpp:200] relu3 needs backward computation.
I0428 19:53:26.437680 27765 net.cpp:200] ip3 needs backward computation.
I0428 19:53:26.437682 27765 net.cpp:200] relu2 needs backward computation.
I0428 19:53:26.437685 27765 net.cpp:200] ip2 needs backward computation.
I0428 19:53:26.437687 27765 net.cpp:200] relu1 needs backward computation.
I0428 19:53:26.437690 27765 net.cpp:200] ip1 needs backward computation.
I0428 19:53:26.437693 27765 net.cpp:200] pool1 needs backward computation.
I0428 19:53:26.437696 27765 net.cpp:200] conv1 needs backward computation.
I0428 19:53:26.437700 27765 net.cpp:200] pool0 needs backward computation.
I0428 19:53:26.437702 27765 net.cpp:200] conv0 needs backward computation.
I0428 19:53:26.437705 27765 net.cpp:202] mnist does not need backward computation.
I0428 19:53:26.437708 27765 net.cpp:244] This network produces output loss
I0428 19:53:26.437716 27765 net.cpp:257] Network initialization done.
I0428 19:53:26.438110 27765 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test687.prototxt
I0428 19:53:26.438154 27765 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:53:26.438243 27765 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:53:26.438336 27765 layer_factory.hpp:77] Creating layer mnist
I0428 19:53:26.438380 27765 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:53:26.438393 27765 net.cpp:86] Creating Layer mnist
I0428 19:53:26.438398 27765 net.cpp:382] mnist -> data
I0428 19:53:26.438405 27765 net.cpp:382] mnist -> label
I0428 19:53:26.438486 27765 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:53:26.440469 27765 net.cpp:124] Setting up mnist
I0428 19:53:26.440496 27765 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:53:26.440517 27765 net.cpp:131] Top shape: 100 (100)
I0428 19:53:26.440521 27765 net.cpp:139] Memory required for data: 314000
I0428 19:53:26.440524 27765 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:53:26.440531 27765 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:53:26.440534 27765 net.cpp:408] label_mnist_1_split <- label
I0428 19:53:26.440539 27765 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:53:26.440546 27765 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:53:26.440598 27765 net.cpp:124] Setting up label_mnist_1_split
I0428 19:53:26.440605 27765 net.cpp:131] Top shape: 100 (100)
I0428 19:53:26.440609 27765 net.cpp:131] Top shape: 100 (100)
I0428 19:53:26.440613 27765 net.cpp:139] Memory required for data: 314800
I0428 19:53:26.440615 27765 layer_factory.hpp:77] Creating layer conv0
I0428 19:53:26.440623 27765 net.cpp:86] Creating Layer conv0
I0428 19:53:26.440627 27765 net.cpp:408] conv0 <- data
I0428 19:53:26.440632 27765 net.cpp:382] conv0 -> conv0
I0428 19:53:26.442282 27765 net.cpp:124] Setting up conv0
I0428 19:53:26.442296 27765 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:53:26.442315 27765 net.cpp:139] Memory required for data: 1466800
I0428 19:53:26.442324 27765 layer_factory.hpp:77] Creating layer pool0
I0428 19:53:26.442330 27765 net.cpp:86] Creating Layer pool0
I0428 19:53:26.442333 27765 net.cpp:408] pool0 <- conv0
I0428 19:53:26.442338 27765 net.cpp:382] pool0 -> pool0
I0428 19:53:26.442389 27765 net.cpp:124] Setting up pool0
I0428 19:53:26.442395 27765 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:53:26.442399 27765 net.cpp:139] Memory required for data: 1754800
I0428 19:53:26.442401 27765 layer_factory.hpp:77] Creating layer conv1
I0428 19:53:26.442409 27765 net.cpp:86] Creating Layer conv1
I0428 19:53:26.442412 27765 net.cpp:408] conv1 <- pool0
I0428 19:53:26.442417 27765 net.cpp:382] conv1 -> conv1
I0428 19:53:26.443930 27765 net.cpp:124] Setting up conv1
I0428 19:53:26.443964 27765 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 19:53:26.443967 27765 net.cpp:139] Memory required for data: 3034800
I0428 19:53:26.443976 27765 layer_factory.hpp:77] Creating layer pool1
I0428 19:53:26.443984 27765 net.cpp:86] Creating Layer pool1
I0428 19:53:26.443987 27765 net.cpp:408] pool1 <- conv1
I0428 19:53:26.443992 27765 net.cpp:382] pool1 -> pool1
I0428 19:53:26.444030 27765 net.cpp:124] Setting up pool1
I0428 19:53:26.444051 27765 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 19:53:26.444054 27765 net.cpp:139] Memory required for data: 3354800
I0428 19:53:26.444057 27765 layer_factory.hpp:77] Creating layer ip1
I0428 19:53:26.444063 27765 net.cpp:86] Creating Layer ip1
I0428 19:53:26.444067 27765 net.cpp:408] ip1 <- pool1
I0428 19:53:26.444072 27765 net.cpp:382] ip1 -> ip1
I0428 19:53:26.444380 27765 net.cpp:124] Setting up ip1
I0428 19:53:26.444407 27765 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:26.444440 27765 net.cpp:139] Memory required for data: 3364800
I0428 19:53:26.444449 27765 layer_factory.hpp:77] Creating layer relu1
I0428 19:53:26.444455 27765 net.cpp:86] Creating Layer relu1
I0428 19:53:26.444460 27765 net.cpp:408] relu1 <- ip1
I0428 19:53:26.444465 27765 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:53:26.444661 27765 net.cpp:124] Setting up relu1
I0428 19:53:26.444671 27765 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:26.444675 27765 net.cpp:139] Memory required for data: 3374800
I0428 19:53:26.444679 27765 layer_factory.hpp:77] Creating layer ip2
I0428 19:53:26.444685 27765 net.cpp:86] Creating Layer ip2
I0428 19:53:26.444689 27765 net.cpp:408] ip2 <- ip1
I0428 19:53:26.444701 27765 net.cpp:382] ip2 -> ip2
I0428 19:53:26.444823 27765 net.cpp:124] Setting up ip2
I0428 19:53:26.444831 27765 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:26.444834 27765 net.cpp:139] Memory required for data: 3384800
I0428 19:53:26.444840 27765 layer_factory.hpp:77] Creating layer relu2
I0428 19:53:26.444849 27765 net.cpp:86] Creating Layer relu2
I0428 19:53:26.444854 27765 net.cpp:408] relu2 <- ip2
I0428 19:53:26.444857 27765 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:53:26.445122 27765 net.cpp:124] Setting up relu2
I0428 19:53:26.445147 27765 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:53:26.445150 27765 net.cpp:139] Memory required for data: 3394800
I0428 19:53:26.445153 27765 layer_factory.hpp:77] Creating layer ip3
I0428 19:53:26.445159 27765 net.cpp:86] Creating Layer ip3
I0428 19:53:26.445163 27765 net.cpp:408] ip3 <- ip2
I0428 19:53:26.445168 27765 net.cpp:382] ip3 -> ip3
I0428 19:53:26.445271 27765 net.cpp:124] Setting up ip3
I0428 19:53:26.445277 27765 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:26.445281 27765 net.cpp:139] Memory required for data: 3398800
I0428 19:53:26.445288 27765 layer_factory.hpp:77] Creating layer relu3
I0428 19:53:26.445294 27765 net.cpp:86] Creating Layer relu3
I0428 19:53:26.445297 27765 net.cpp:408] relu3 <- ip3
I0428 19:53:26.445302 27765 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:53:26.446179 27765 net.cpp:124] Setting up relu3
I0428 19:53:26.446208 27765 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:26.446211 27765 net.cpp:139] Memory required for data: 3402800
I0428 19:53:26.446215 27765 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:53:26.446220 27765 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:53:26.446239 27765 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:53:26.446245 27765 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:53:26.446251 27765 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:53:26.446301 27765 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:53:26.446307 27765 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:26.446311 27765 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:53:26.446315 27765 net.cpp:139] Memory required for data: 3410800
I0428 19:53:26.446318 27765 layer_factory.hpp:77] Creating layer accuracy
I0428 19:53:26.446323 27765 net.cpp:86] Creating Layer accuracy
I0428 19:53:26.446327 27765 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:53:26.446331 27765 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:53:26.446336 27765 net.cpp:382] accuracy -> accuracy
I0428 19:53:26.446344 27765 net.cpp:124] Setting up accuracy
I0428 19:53:26.446348 27765 net.cpp:131] Top shape: (1)
I0428 19:53:26.446353 27765 net.cpp:139] Memory required for data: 3410804
I0428 19:53:26.446358 27765 layer_factory.hpp:77] Creating layer loss
I0428 19:53:26.446367 27765 net.cpp:86] Creating Layer loss
I0428 19:53:26.446369 27765 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:53:26.446373 27765 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:53:26.446377 27765 net.cpp:382] loss -> loss
I0428 19:53:26.446384 27765 layer_factory.hpp:77] Creating layer loss
I0428 19:53:26.446647 27765 net.cpp:124] Setting up loss
I0428 19:53:26.446656 27765 net.cpp:131] Top shape: (1)
I0428 19:53:26.446660 27765 net.cpp:134]     with loss weight 1
I0428 19:53:26.446666 27765 net.cpp:139] Memory required for data: 3410808
I0428 19:53:26.446678 27765 net.cpp:200] loss needs backward computation.
I0428 19:53:26.446681 27765 net.cpp:202] accuracy does not need backward computation.
I0428 19:53:26.446686 27765 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:53:26.446688 27765 net.cpp:200] relu3 needs backward computation.
I0428 19:53:26.446691 27765 net.cpp:200] ip3 needs backward computation.
I0428 19:53:26.446701 27765 net.cpp:200] relu2 needs backward computation.
I0428 19:53:26.446703 27765 net.cpp:200] ip2 needs backward computation.
I0428 19:53:26.446709 27765 net.cpp:200] relu1 needs backward computation.
I0428 19:53:26.446712 27765 net.cpp:200] ip1 needs backward computation.
I0428 19:53:26.446715 27765 net.cpp:200] pool1 needs backward computation.
I0428 19:53:26.446718 27765 net.cpp:200] conv1 needs backward computation.
I0428 19:53:26.446722 27765 net.cpp:200] pool0 needs backward computation.
I0428 19:53:26.446725 27765 net.cpp:200] conv0 needs backward computation.
I0428 19:53:26.446728 27765 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:53:26.446732 27765 net.cpp:202] mnist does not need backward computation.
I0428 19:53:26.446734 27765 net.cpp:244] This network produces output accuracy
I0428 19:53:26.446738 27765 net.cpp:244] This network produces output loss
I0428 19:53:26.446749 27765 net.cpp:257] Network initialization done.
I0428 19:53:26.446789 27765 solver.cpp:56] Solver scaffolding done.
I0428 19:53:26.447145 27765 caffe.cpp:248] Starting Optimization
I0428 19:53:26.447160 27765 solver.cpp:273] Solving LeNet
I0428 19:53:26.447178 27765 solver.cpp:274] Learning Rate Policy: inv
I0428 19:53:26.448117 27765 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:53:26.452405 27765 blocking_queue.cpp:49] Waiting for data
I0428 19:53:26.522879 27772 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:26.523407 27765 solver.cpp:398]     Test net output #0: accuracy = 0.1047
I0428 19:53:26.523442 27765 solver.cpp:398]     Test net output #1: loss = 2.30544 (* 1 = 2.30544 loss)
I0428 19:53:26.526851 27765 solver.cpp:219] Iteration 0 (-1.10035e-31 iter/s, 0.0796375s/100 iters), loss = 2.28886
I0428 19:53:26.526888 27765 solver.cpp:238]     Train net output #0: loss = 2.28886 (* 1 = 2.28886 loss)
I0428 19:53:26.526901 27765 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:53:26.633249 27765 solver.cpp:219] Iteration 100 (940.187 iter/s, 0.106362s/100 iters), loss = 0.476878
I0428 19:53:26.633291 27765 solver.cpp:238]     Train net output #0: loss = 0.476878 (* 1 = 0.476878 loss)
I0428 19:53:26.633297 27765 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:53:26.737996 27765 solver.cpp:219] Iteration 200 (954.999 iter/s, 0.104712s/100 iters), loss = 0.372629
I0428 19:53:26.738021 27765 solver.cpp:238]     Train net output #0: loss = 0.372629 (* 1 = 0.372629 loss)
I0428 19:53:26.738028 27765 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:53:26.843557 27765 solver.cpp:219] Iteration 300 (947.641 iter/s, 0.105525s/100 iters), loss = 0.358556
I0428 19:53:26.843596 27765 solver.cpp:238]     Train net output #0: loss = 0.358556 (* 1 = 0.358556 loss)
I0428 19:53:26.843603 27765 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:53:26.950345 27765 solver.cpp:219] Iteration 400 (936.733 iter/s, 0.106754s/100 iters), loss = 0.369648
I0428 19:53:26.950384 27765 solver.cpp:238]     Train net output #0: loss = 0.369648 (* 1 = 0.369648 loss)
I0428 19:53:26.950390 27765 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:53:27.054658 27765 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:53:27.099537 27772 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:27.100042 27765 solver.cpp:398]     Test net output #0: accuracy = 0.8709
I0428 19:53:27.100080 27765 solver.cpp:398]     Test net output #1: loss = 0.347468 (* 1 = 0.347468 loss)
I0428 19:53:27.101114 27765 solver.cpp:219] Iteration 500 (663.43 iter/s, 0.150732s/100 iters), loss = 0.311894
I0428 19:53:27.101189 27765 solver.cpp:238]     Train net output #0: loss = 0.311894 (* 1 = 0.311894 loss)
I0428 19:53:27.101197 27765 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:53:27.200942 27765 solver.cpp:219] Iteration 600 (1002.41 iter/s, 0.0997593s/100 iters), loss = 0.463208
I0428 19:53:27.200983 27765 solver.cpp:238]     Train net output #0: loss = 0.463208 (* 1 = 0.463208 loss)
I0428 19:53:27.200989 27765 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:53:27.306231 27765 solver.cpp:219] Iteration 700 (950.084 iter/s, 0.105254s/100 iters), loss = 0.391449
I0428 19:53:27.306255 27765 solver.cpp:238]     Train net output #0: loss = 0.391449 (* 1 = 0.391449 loss)
I0428 19:53:27.306262 27765 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:53:27.408778 27765 solver.cpp:219] Iteration 800 (975.49 iter/s, 0.102513s/100 iters), loss = 0.561736
I0428 19:53:27.408807 27765 solver.cpp:238]     Train net output #0: loss = 0.561736 (* 1 = 0.561736 loss)
I0428 19:53:27.408820 27765 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:53:27.526861 27765 solver.cpp:219] Iteration 900 (847.159 iter/s, 0.118042s/100 iters), loss = 0.213589
I0428 19:53:27.526906 27765 solver.cpp:238]     Train net output #0: loss = 0.213589 (* 1 = 0.213589 loss)
I0428 19:53:27.526914 27765 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:53:27.563396 27771 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:27.635027 27765 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:53:27.636430 27765 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:53:27.637205 27765 solver.cpp:311] Iteration 1000, loss = 0.291877
I0428 19:53:27.637223 27765 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:53:27.682854 27772 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:53:27.683341 27765 solver.cpp:398]     Test net output #0: accuracy = 0.8802
I0428 19:53:27.683378 27765 solver.cpp:398]     Test net output #1: loss = 0.309138 (* 1 = 0.309138 loss)
I0428 19:53:27.683384 27765 solver.cpp:316] Optimization Done.
I0428 19:53:27.683387 27765 caffe.cpp:259] Optimization Done.
