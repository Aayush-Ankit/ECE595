I0428 19:34:10.624033 23283 caffe.cpp:218] Using GPUs 0
I0428 19:34:10.662214 23283 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:11.124390 23283 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test198.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:11.124519 23283 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test198.prototxt
I0428 19:34:11.124800 23283 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:11.124850 23283 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:11.124948 23283 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:11.125011 23283 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:11.125108 23283 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:11.125128 23283 net.cpp:86] Creating Layer mnist
I0428 19:34:11.125138 23283 net.cpp:382] mnist -> data
I0428 19:34:11.125156 23283 net.cpp:382] mnist -> label
I0428 19:34:11.126085 23283 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:11.128532 23283 net.cpp:124] Setting up mnist
I0428 19:34:11.128562 23283 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:11.128566 23283 net.cpp:131] Top shape: 64 (64)
I0428 19:34:11.128569 23283 net.cpp:139] Memory required for data: 200960
I0428 19:34:11.128574 23283 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:11.128588 23283 net.cpp:86] Creating Layer conv0
I0428 19:34:11.128594 23283 net.cpp:408] conv0 <- data
I0428 19:34:11.128633 23283 net.cpp:382] conv0 -> conv0
I0428 19:34:11.359400 23283 net.cpp:124] Setting up conv0
I0428 19:34:11.359426 23283 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:11.359428 23283 net.cpp:139] Memory required for data: 7573760
I0428 19:34:11.359442 23283 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:11.359454 23283 net.cpp:86] Creating Layer pool0
I0428 19:34:11.359458 23283 net.cpp:408] pool0 <- conv0
I0428 19:34:11.359463 23283 net.cpp:382] pool0 -> pool0
I0428 19:34:11.359524 23283 net.cpp:124] Setting up pool0
I0428 19:34:11.359529 23283 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:11.359531 23283 net.cpp:139] Memory required for data: 9416960
I0428 19:34:11.359550 23283 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:11.359558 23283 net.cpp:86] Creating Layer ip1
I0428 19:34:11.359561 23283 net.cpp:408] ip1 <- pool0
I0428 19:34:11.359565 23283 net.cpp:382] ip1 -> ip1
I0428 19:34:11.360985 23283 net.cpp:124] Setting up ip1
I0428 19:34:11.361014 23283 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:11.361018 23283 net.cpp:139] Memory required for data: 9419520
I0428 19:34:11.361027 23283 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:11.361035 23283 net.cpp:86] Creating Layer relu1
I0428 19:34:11.361039 23283 net.cpp:408] relu1 <- ip1
I0428 19:34:11.361044 23283 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:11.361279 23283 net.cpp:124] Setting up relu1
I0428 19:34:11.361287 23283 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:11.361290 23283 net.cpp:139] Memory required for data: 9422080
I0428 19:34:11.361294 23283 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:11.361299 23283 net.cpp:86] Creating Layer ip2
I0428 19:34:11.361302 23283 net.cpp:408] ip2 <- ip1
I0428 19:34:11.361306 23283 net.cpp:382] ip2 -> ip2
I0428 19:34:11.361420 23283 net.cpp:124] Setting up ip2
I0428 19:34:11.361443 23283 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:11.361445 23283 net.cpp:139] Memory required for data: 9424640
I0428 19:34:11.361459 23283 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:11.361464 23283 net.cpp:86] Creating Layer relu2
I0428 19:34:11.361466 23283 net.cpp:408] relu2 <- ip2
I0428 19:34:11.361470 23283 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:11.362246 23283 net.cpp:124] Setting up relu2
I0428 19:34:11.362257 23283 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:11.362277 23283 net.cpp:139] Memory required for data: 9427200
I0428 19:34:11.362280 23283 layer_factory.hpp:77] Creating layer loss
I0428 19:34:11.362287 23283 net.cpp:86] Creating Layer loss
I0428 19:34:11.362289 23283 net.cpp:408] loss <- ip2
I0428 19:34:11.362308 23283 net.cpp:408] loss <- label
I0428 19:34:11.362313 23283 net.cpp:382] loss -> loss
I0428 19:34:11.362327 23283 layer_factory.hpp:77] Creating layer loss
I0428 19:34:11.362612 23283 net.cpp:124] Setting up loss
I0428 19:34:11.362622 23283 net.cpp:131] Top shape: (1)
I0428 19:34:11.362624 23283 net.cpp:134]     with loss weight 1
I0428 19:34:11.362655 23283 net.cpp:139] Memory required for data: 9427204
I0428 19:34:11.362659 23283 net.cpp:200] loss needs backward computation.
I0428 19:34:11.362663 23283 net.cpp:200] relu2 needs backward computation.
I0428 19:34:11.362666 23283 net.cpp:200] ip2 needs backward computation.
I0428 19:34:11.362669 23283 net.cpp:200] relu1 needs backward computation.
I0428 19:34:11.362673 23283 net.cpp:200] ip1 needs backward computation.
I0428 19:34:11.362675 23283 net.cpp:200] pool0 needs backward computation.
I0428 19:34:11.362679 23283 net.cpp:200] conv0 needs backward computation.
I0428 19:34:11.362684 23283 net.cpp:202] mnist does not need backward computation.
I0428 19:34:11.362686 23283 net.cpp:244] This network produces output loss
I0428 19:34:11.362694 23283 net.cpp:257] Network initialization done.
I0428 19:34:11.362985 23283 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test198.prototxt
I0428 19:34:11.363008 23283 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:11.363077 23283 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:11.363160 23283 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:11.363204 23283 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:11.363215 23283 net.cpp:86] Creating Layer mnist
I0428 19:34:11.363219 23283 net.cpp:382] mnist -> data
I0428 19:34:11.363226 23283 net.cpp:382] mnist -> label
I0428 19:34:11.363306 23283 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:11.364665 23283 net.cpp:124] Setting up mnist
I0428 19:34:11.364707 23283 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:11.364712 23283 net.cpp:131] Top shape: 100 (100)
I0428 19:34:11.364715 23283 net.cpp:139] Memory required for data: 314000
I0428 19:34:11.364719 23283 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:11.364725 23283 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:11.364729 23283 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:11.364733 23283 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:11.364739 23283 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:11.364794 23283 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:11.364809 23283 net.cpp:131] Top shape: 100 (100)
I0428 19:34:11.364832 23283 net.cpp:131] Top shape: 100 (100)
I0428 19:34:11.364835 23283 net.cpp:139] Memory required for data: 314800
I0428 19:34:11.364838 23283 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:11.364846 23283 net.cpp:86] Creating Layer conv0
I0428 19:34:11.364850 23283 net.cpp:408] conv0 <- data
I0428 19:34:11.364855 23283 net.cpp:382] conv0 -> conv0
I0428 19:34:11.366643 23283 net.cpp:124] Setting up conv0
I0428 19:34:11.366657 23283 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:11.366677 23283 net.cpp:139] Memory required for data: 11834800
I0428 19:34:11.366685 23283 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:11.366691 23283 net.cpp:86] Creating Layer pool0
I0428 19:34:11.366695 23283 net.cpp:408] pool0 <- conv0
I0428 19:34:11.366714 23283 net.cpp:382] pool0 -> pool0
I0428 19:34:11.366749 23283 net.cpp:124] Setting up pool0
I0428 19:34:11.366753 23283 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:11.366757 23283 net.cpp:139] Memory required for data: 14714800
I0428 19:34:11.366760 23283 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:11.366766 23283 net.cpp:86] Creating Layer ip1
I0428 19:34:11.366768 23283 net.cpp:408] ip1 <- pool0
I0428 19:34:11.366773 23283 net.cpp:382] ip1 -> ip1
I0428 19:34:11.367280 23283 net.cpp:124] Setting up ip1
I0428 19:34:11.367288 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.367307 23283 net.cpp:139] Memory required for data: 14718800
I0428 19:34:11.367314 23283 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:11.367318 23283 net.cpp:86] Creating Layer relu1
I0428 19:34:11.367322 23283 net.cpp:408] relu1 <- ip1
I0428 19:34:11.367326 23283 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:11.367558 23283 net.cpp:124] Setting up relu1
I0428 19:34:11.367568 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.367596 23283 net.cpp:139] Memory required for data: 14722800
I0428 19:34:11.367600 23283 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:11.367606 23283 net.cpp:86] Creating Layer ip2
I0428 19:34:11.367609 23283 net.cpp:408] ip2 <- ip1
I0428 19:34:11.367614 23283 net.cpp:382] ip2 -> ip2
I0428 19:34:11.367723 23283 net.cpp:124] Setting up ip2
I0428 19:34:11.367732 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.367735 23283 net.cpp:139] Memory required for data: 14726800
I0428 19:34:11.367743 23283 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:11.367748 23283 net.cpp:86] Creating Layer relu2
I0428 19:34:11.367751 23283 net.cpp:408] relu2 <- ip2
I0428 19:34:11.367755 23283 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:11.367957 23283 net.cpp:124] Setting up relu2
I0428 19:34:11.367966 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.367970 23283 net.cpp:139] Memory required for data: 14730800
I0428 19:34:11.367974 23283 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:11.367980 23283 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:11.367982 23283 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:11.367987 23283 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:11.367995 23283 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:11.368031 23283 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:11.368036 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.368041 23283 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:11.368044 23283 net.cpp:139] Memory required for data: 14738800
I0428 19:34:11.368047 23283 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:11.368052 23283 net.cpp:86] Creating Layer accuracy
I0428 19:34:11.368057 23283 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:11.368060 23283 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:11.368064 23283 net.cpp:382] accuracy -> accuracy
I0428 19:34:11.368072 23283 net.cpp:124] Setting up accuracy
I0428 19:34:11.368075 23283 net.cpp:131] Top shape: (1)
I0428 19:34:11.368079 23283 net.cpp:139] Memory required for data: 14738804
I0428 19:34:11.368083 23283 layer_factory.hpp:77] Creating layer loss
I0428 19:34:11.368086 23283 net.cpp:86] Creating Layer loss
I0428 19:34:11.368089 23283 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:11.368093 23283 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:11.368104 23283 net.cpp:382] loss -> loss
I0428 19:34:11.368110 23283 layer_factory.hpp:77] Creating layer loss
I0428 19:34:11.369138 23283 net.cpp:124] Setting up loss
I0428 19:34:11.369164 23283 net.cpp:131] Top shape: (1)
I0428 19:34:11.369184 23283 net.cpp:134]     with loss weight 1
I0428 19:34:11.369205 23283 net.cpp:139] Memory required for data: 14738808
I0428 19:34:11.369210 23283 net.cpp:200] loss needs backward computation.
I0428 19:34:11.369215 23283 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:11.369218 23283 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:11.369221 23283 net.cpp:200] relu2 needs backward computation.
I0428 19:34:11.369223 23283 net.cpp:200] ip2 needs backward computation.
I0428 19:34:11.369226 23283 net.cpp:200] relu1 needs backward computation.
I0428 19:34:11.369230 23283 net.cpp:200] ip1 needs backward computation.
I0428 19:34:11.369232 23283 net.cpp:200] pool0 needs backward computation.
I0428 19:34:11.369235 23283 net.cpp:200] conv0 needs backward computation.
I0428 19:34:11.369238 23283 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:11.369242 23283 net.cpp:202] mnist does not need backward computation.
I0428 19:34:11.369246 23283 net.cpp:244] This network produces output accuracy
I0428 19:34:11.369249 23283 net.cpp:244] This network produces output loss
I0428 19:34:11.369258 23283 net.cpp:257] Network initialization done.
I0428 19:34:11.369289 23283 solver.cpp:56] Solver scaffolding done.
I0428 19:34:11.369508 23283 caffe.cpp:248] Starting Optimization
I0428 19:34:11.369514 23283 solver.cpp:273] Solving LeNet
I0428 19:34:11.369527 23283 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:11.370296 23283 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:11.466825 23290 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:11.468318 23283 solver.cpp:398]     Test net output #0: accuracy = 0.172
I0428 19:34:11.468355 23283 solver.cpp:398]     Test net output #1: loss = 2.28618 (* 1 = 2.28618 loss)
I0428 19:34:11.472688 23283 solver.cpp:219] Iteration 0 (-9.25468e-32 iter/s, 0.103134s/100 iters), loss = 2.29352
I0428 19:34:11.472728 23283 solver.cpp:238]     Train net output #0: loss = 2.29352 (* 1 = 2.29352 loss)
I0428 19:34:11.472739 23283 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:11.605388 23283 solver.cpp:219] Iteration 100 (753.804 iter/s, 0.13266s/100 iters), loss = 0.437911
I0428 19:34:11.605415 23283 solver.cpp:238]     Train net output #0: loss = 0.437911 (* 1 = 0.437911 loss)
I0428 19:34:11.605422 23283 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:11.743430 23283 solver.cpp:219] Iteration 200 (724.624 iter/s, 0.138003s/100 iters), loss = 0.561599
I0428 19:34:11.743454 23283 solver.cpp:238]     Train net output #0: loss = 0.561599 (* 1 = 0.561599 loss)
I0428 19:34:11.743460 23283 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:11.878562 23283 solver.cpp:219] Iteration 300 (740.218 iter/s, 0.135095s/100 iters), loss = 0.396886
I0428 19:34:11.878589 23283 solver.cpp:238]     Train net output #0: loss = 0.396886 (* 1 = 0.396886 loss)
I0428 19:34:11.878595 23283 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:12.016887 23283 solver.cpp:219] Iteration 400 (723.149 iter/s, 0.138284s/100 iters), loss = 0.497731
I0428 19:34:12.016917 23283 solver.cpp:238]     Train net output #0: loss = 0.497732 (* 1 = 0.497732 loss)
I0428 19:34:12.016939 23283 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:12.153587 23283 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:12.246121 23290 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:12.248582 23283 solver.cpp:398]     Test net output #0: accuracy = 0.9352
I0428 19:34:12.248605 23283 solver.cpp:398]     Test net output #1: loss = 0.228745 (* 1 = 0.228745 loss)
I0428 19:34:12.249897 23283 solver.cpp:219] Iteration 500 (429.257 iter/s, 0.232961s/100 iters), loss = 0.295177
I0428 19:34:12.249922 23283 solver.cpp:238]     Train net output #0: loss = 0.295177 (* 1 = 0.295177 loss)
I0428 19:34:12.249928 23283 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:12.388864 23283 solver.cpp:219] Iteration 600 (719.797 iter/s, 0.138928s/100 iters), loss = 0.121848
I0428 19:34:12.388900 23283 solver.cpp:238]     Train net output #0: loss = 0.121848 (* 1 = 0.121848 loss)
I0428 19:34:12.388906 23283 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:12.527423 23283 solver.cpp:219] Iteration 700 (721.956 iter/s, 0.138513s/100 iters), loss = 0.295022
I0428 19:34:12.527447 23283 solver.cpp:238]     Train net output #0: loss = 0.295022 (* 1 = 0.295022 loss)
I0428 19:34:12.527453 23283 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:12.666389 23283 solver.cpp:219] Iteration 800 (719.796 iter/s, 0.138928s/100 iters), loss = 0.452668
I0428 19:34:12.666414 23283 solver.cpp:238]     Train net output #0: loss = 0.452668 (* 1 = 0.452668 loss)
I0428 19:34:12.666419 23283 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:12.803839 23283 solver.cpp:219] Iteration 900 (727.746 iter/s, 0.137411s/100 iters), loss = 0.246233
I0428 19:34:12.803876 23283 solver.cpp:238]     Train net output #0: loss = 0.246233 (* 1 = 0.246233 loss)
I0428 19:34:12.803886 23283 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:12.849541 23289 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:12.939374 23283 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:12.941151 23283 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:12.942627 23283 solver.cpp:311] Iteration 1000, loss = 0.154706
I0428 19:34:12.942658 23283 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:13.035259 23290 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:13.037704 23283 solver.cpp:398]     Test net output #0: accuracy = 0.9562
I0428 19:34:13.037724 23283 solver.cpp:398]     Test net output #1: loss = 0.146619 (* 1 = 0.146619 loss)
I0428 19:34:13.037730 23283 solver.cpp:316] Optimization Done.
I0428 19:34:13.037734 23283 caffe.cpp:259] Optimization Done.
