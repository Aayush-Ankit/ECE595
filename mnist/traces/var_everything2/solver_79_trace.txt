I0428 19:30:04.480881 22193 caffe.cpp:218] Using GPUs 0
I0428 19:30:04.522047 22193 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:30:05.043545 22193 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test79.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:30:05.043722 22193 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test79.prototxt
I0428 19:30:05.044024 22193 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:30:05.044042 22193 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:30:05.044124 22193 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:30:05.044209 22193 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:05.044344 22193 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:30:05.044378 22193 net.cpp:86] Creating Layer mnist
I0428 19:30:05.044389 22193 net.cpp:382] mnist -> data
I0428 19:30:05.044422 22193 net.cpp:382] mnist -> label
I0428 19:30:05.045568 22193 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:30:05.048034 22193 net.cpp:124] Setting up mnist
I0428 19:30:05.048054 22193 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:30:05.048066 22193 net.cpp:131] Top shape: 64 (64)
I0428 19:30:05.048072 22193 net.cpp:139] Memory required for data: 200960
I0428 19:30:05.048084 22193 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:05.048106 22193 net.cpp:86] Creating Layer conv0
I0428 19:30:05.048117 22193 net.cpp:408] conv0 <- data
I0428 19:30:05.048138 22193 net.cpp:382] conv0 -> conv0
I0428 19:30:05.338992 22193 net.cpp:124] Setting up conv0
I0428 19:30:05.339027 22193 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:30:05.339033 22193 net.cpp:139] Memory required for data: 938240
I0428 19:30:05.339057 22193 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:05.339076 22193 net.cpp:86] Creating Layer pool0
I0428 19:30:05.339090 22193 net.cpp:408] pool0 <- conv0
I0428 19:30:05.339100 22193 net.cpp:382] pool0 -> pool0
I0428 19:30:05.339164 22193 net.cpp:124] Setting up pool0
I0428 19:30:05.339174 22193 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:30:05.339180 22193 net.cpp:139] Memory required for data: 1122560
I0428 19:30:05.339186 22193 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:05.339200 22193 net.cpp:86] Creating Layer ip1
I0428 19:30:05.339210 22193 net.cpp:408] ip1 <- pool0
I0428 19:30:05.339220 22193 net.cpp:382] ip1 -> ip1
I0428 19:30:05.340291 22193 net.cpp:124] Setting up ip1
I0428 19:30:05.340307 22193 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:05.340338 22193 net.cpp:139] Memory required for data: 1125120
I0428 19:30:05.340354 22193 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:05.340368 22193 net.cpp:86] Creating Layer relu1
I0428 19:30:05.340375 22193 net.cpp:408] relu1 <- ip1
I0428 19:30:05.340384 22193 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:05.340575 22193 net.cpp:124] Setting up relu1
I0428 19:30:05.340586 22193 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:05.340592 22193 net.cpp:139] Memory required for data: 1127680
I0428 19:30:05.340598 22193 layer_factory.hpp:77] Creating layer loss
I0428 19:30:05.340608 22193 net.cpp:86] Creating Layer loss
I0428 19:30:05.340615 22193 net.cpp:408] loss <- ip1
I0428 19:30:05.340621 22193 net.cpp:408] loss <- label
I0428 19:30:05.340631 22193 net.cpp:382] loss -> loss
I0428 19:30:05.340652 22193 layer_factory.hpp:77] Creating layer loss
I0428 19:30:05.341539 22193 net.cpp:124] Setting up loss
I0428 19:30:05.341557 22193 net.cpp:131] Top shape: (1)
I0428 19:30:05.341562 22193 net.cpp:134]     with loss weight 1
I0428 19:30:05.341584 22193 net.cpp:139] Memory required for data: 1127684
I0428 19:30:05.341591 22193 net.cpp:200] loss needs backward computation.
I0428 19:30:05.341599 22193 net.cpp:200] relu1 needs backward computation.
I0428 19:30:05.341604 22193 net.cpp:200] ip1 needs backward computation.
I0428 19:30:05.341611 22193 net.cpp:200] pool0 needs backward computation.
I0428 19:30:05.341617 22193 net.cpp:200] conv0 needs backward computation.
I0428 19:30:05.341624 22193 net.cpp:202] mnist does not need backward computation.
I0428 19:30:05.341629 22193 net.cpp:244] This network produces output loss
I0428 19:30:05.341641 22193 net.cpp:257] Network initialization done.
I0428 19:30:05.341883 22193 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test79.prototxt
I0428 19:30:05.341915 22193 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:30:05.341991 22193 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:30:05.342078 22193 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:05.342145 22193 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:30:05.342164 22193 net.cpp:86] Creating Layer mnist
I0428 19:30:05.342172 22193 net.cpp:382] mnist -> data
I0428 19:30:05.342185 22193 net.cpp:382] mnist -> label
I0428 19:30:05.342317 22193 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:30:05.344377 22193 net.cpp:124] Setting up mnist
I0428 19:30:05.344394 22193 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:30:05.344403 22193 net.cpp:131] Top shape: 100 (100)
I0428 19:30:05.344409 22193 net.cpp:139] Memory required for data: 314000
I0428 19:30:05.344429 22193 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:30:05.344439 22193 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:30:05.344446 22193 net.cpp:408] label_mnist_1_split <- label
I0428 19:30:05.344455 22193 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:30:05.344467 22193 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:30:05.344558 22193 net.cpp:124] Setting up label_mnist_1_split
I0428 19:30:05.344568 22193 net.cpp:131] Top shape: 100 (100)
I0428 19:30:05.344575 22193 net.cpp:131] Top shape: 100 (100)
I0428 19:30:05.344580 22193 net.cpp:139] Memory required for data: 314800
I0428 19:30:05.344586 22193 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:05.344602 22193 net.cpp:86] Creating Layer conv0
I0428 19:30:05.344609 22193 net.cpp:408] conv0 <- data
I0428 19:30:05.344619 22193 net.cpp:382] conv0 -> conv0
I0428 19:30:05.346112 22193 net.cpp:124] Setting up conv0
I0428 19:30:05.346129 22193 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:30:05.346137 22193 net.cpp:139] Memory required for data: 1466800
I0428 19:30:05.346153 22193 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:05.346164 22193 net.cpp:86] Creating Layer pool0
I0428 19:30:05.346173 22193 net.cpp:408] pool0 <- conv0
I0428 19:30:05.346181 22193 net.cpp:382] pool0 -> pool0
I0428 19:30:05.346240 22193 net.cpp:124] Setting up pool0
I0428 19:30:05.346249 22193 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:30:05.346256 22193 net.cpp:139] Memory required for data: 1754800
I0428 19:30:05.346261 22193 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:05.346273 22193 net.cpp:86] Creating Layer ip1
I0428 19:30:05.346282 22193 net.cpp:408] ip1 <- pool0
I0428 19:30:05.346292 22193 net.cpp:382] ip1 -> ip1
I0428 19:30:05.346446 22193 net.cpp:124] Setting up ip1
I0428 19:30:05.346457 22193 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:05.346463 22193 net.cpp:139] Memory required for data: 1758800
I0428 19:30:05.346477 22193 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:05.346487 22193 net.cpp:86] Creating Layer relu1
I0428 19:30:05.346494 22193 net.cpp:408] relu1 <- ip1
I0428 19:30:05.346503 22193 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:05.346688 22193 net.cpp:124] Setting up relu1
I0428 19:30:05.346698 22193 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:05.346704 22193 net.cpp:139] Memory required for data: 1762800
I0428 19:30:05.346709 22193 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:30:05.346719 22193 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:30:05.346724 22193 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:30:05.346732 22193 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:30:05.346743 22193 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:30:05.346789 22193 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:30:05.346798 22193 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:05.346807 22193 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:05.346812 22193 net.cpp:139] Memory required for data: 1770800
I0428 19:30:05.346817 22193 layer_factory.hpp:77] Creating layer accuracy
I0428 19:30:05.346827 22193 net.cpp:86] Creating Layer accuracy
I0428 19:30:05.346832 22193 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:30:05.346842 22193 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:30:05.346850 22193 net.cpp:382] accuracy -> accuracy
I0428 19:30:05.346863 22193 net.cpp:124] Setting up accuracy
I0428 19:30:05.346871 22193 net.cpp:131] Top shape: (1)
I0428 19:30:05.346877 22193 net.cpp:139] Memory required for data: 1770804
I0428 19:30:05.346884 22193 layer_factory.hpp:77] Creating layer loss
I0428 19:30:05.346892 22193 net.cpp:86] Creating Layer loss
I0428 19:30:05.346899 22193 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:30:05.346906 22193 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:30:05.346915 22193 net.cpp:382] loss -> loss
I0428 19:30:05.346925 22193 layer_factory.hpp:77] Creating layer loss
I0428 19:30:05.347240 22193 net.cpp:124] Setting up loss
I0428 19:30:05.347264 22193 net.cpp:131] Top shape: (1)
I0428 19:30:05.347270 22193 net.cpp:134]     with loss weight 1
I0428 19:30:05.347280 22193 net.cpp:139] Memory required for data: 1770808
I0428 19:30:05.347286 22193 net.cpp:200] loss needs backward computation.
I0428 19:30:05.347293 22193 net.cpp:202] accuracy does not need backward computation.
I0428 19:30:05.347301 22193 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:30:05.347306 22193 net.cpp:200] relu1 needs backward computation.
I0428 19:30:05.347312 22193 net.cpp:200] ip1 needs backward computation.
I0428 19:30:05.347318 22193 net.cpp:200] pool0 needs backward computation.
I0428 19:30:05.347324 22193 net.cpp:200] conv0 needs backward computation.
I0428 19:30:05.347332 22193 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:30:05.347338 22193 net.cpp:202] mnist does not need backward computation.
I0428 19:30:05.347344 22193 net.cpp:244] This network produces output accuracy
I0428 19:30:05.347350 22193 net.cpp:244] This network produces output loss
I0428 19:30:05.347365 22193 net.cpp:257] Network initialization done.
I0428 19:30:05.347405 22193 solver.cpp:56] Solver scaffolding done.
I0428 19:30:05.347571 22193 caffe.cpp:248] Starting Optimization
I0428 19:30:05.347579 22193 solver.cpp:273] Solving LeNet
I0428 19:30:05.347584 22193 solver.cpp:274] Learning Rate Policy: inv
I0428 19:30:05.347671 22193 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:30:05.350419 22193 blocking_queue.cpp:49] Waiting for data
I0428 19:30:05.422633 22200 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:05.422996 22193 solver.cpp:398]     Test net output #0: accuracy = 0.0618
I0428 19:30:05.423017 22193 solver.cpp:398]     Test net output #1: loss = 2.3492 (* 1 = 2.3492 loss)
I0428 19:30:05.424334 22193 solver.cpp:219] Iteration 0 (-1.8426e-31 iter/s, 0.0767206s/100 iters), loss = 2.34978
I0428 19:30:05.424376 22193 solver.cpp:238]     Train net output #0: loss = 2.34978 (* 1 = 2.34978 loss)
I0428 19:30:05.424393 22193 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:30:05.467097 22193 solver.cpp:219] Iteration 100 (2340.92 iter/s, 0.0427183s/100 iters), loss = 0.362901
I0428 19:30:05.467126 22193 solver.cpp:238]     Train net output #0: loss = 0.362901 (* 1 = 0.362901 loss)
I0428 19:30:05.467136 22193 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:30:05.515429 22193 solver.cpp:219] Iteration 200 (2070.43 iter/s, 0.0482992s/100 iters), loss = 0.271212
I0428 19:30:05.515471 22193 solver.cpp:238]     Train net output #0: loss = 0.271212 (* 1 = 0.271212 loss)
I0428 19:30:05.515480 22193 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:30:05.563771 22193 solver.cpp:219] Iteration 300 (2070.61 iter/s, 0.0482949s/100 iters), loss = 0.330178
I0428 19:30:05.563801 22193 solver.cpp:238]     Train net output #0: loss = 0.330178 (* 1 = 0.330178 loss)
I0428 19:30:05.563825 22193 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:30:05.611959 22193 solver.cpp:219] Iteration 400 (2076.64 iter/s, 0.0481546s/100 iters), loss = 0.221047
I0428 19:30:05.611986 22193 solver.cpp:238]     Train net output #0: loss = 0.221047 (* 1 = 0.221047 loss)
I0428 19:30:05.612011 22193 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:30:05.659364 22193 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:30:05.712266 22200 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:05.712631 22193 solver.cpp:398]     Test net output #0: accuracy = 0.9318
I0428 19:30:05.712654 22193 solver.cpp:398]     Test net output #1: loss = 0.247933 (* 1 = 0.247933 loss)
I0428 19:30:05.713145 22193 solver.cpp:219] Iteration 500 (988.624 iter/s, 0.101151s/100 iters), loss = 0.265383
I0428 19:30:05.713184 22193 solver.cpp:238]     Train net output #0: loss = 0.265383 (* 1 = 0.265383 loss)
I0428 19:30:05.713199 22193 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:30:05.761950 22193 solver.cpp:219] Iteration 600 (2050.81 iter/s, 0.0487613s/100 iters), loss = 0.232893
I0428 19:30:05.761989 22193 solver.cpp:238]     Train net output #0: loss = 0.232893 (* 1 = 0.232893 loss)
I0428 19:30:05.762014 22193 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:30:05.812088 22193 solver.cpp:219] Iteration 700 (1996.53 iter/s, 0.0500869s/100 iters), loss = 0.402185
I0428 19:30:05.812140 22193 solver.cpp:238]     Train net output #0: loss = 0.402185 (* 1 = 0.402185 loss)
I0428 19:30:05.812156 22193 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:30:05.868016 22193 solver.cpp:219] Iteration 800 (1789.95 iter/s, 0.0558675s/100 iters), loss = 0.438103
I0428 19:30:05.868052 22193 solver.cpp:238]     Train net output #0: loss = 0.438103 (* 1 = 0.438103 loss)
I0428 19:30:05.868062 22193 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:30:05.917443 22193 solver.cpp:219] Iteration 900 (2024.89 iter/s, 0.0493855s/100 iters), loss = 0.308637
I0428 19:30:05.917474 22193 solver.cpp:238]     Train net output #0: loss = 0.308637 (* 1 = 0.308637 loss)
I0428 19:30:05.917484 22193 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:30:05.933434 22199 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:05.963065 22193 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:30:05.963558 22193 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:30:05.963979 22193 solver.cpp:311] Iteration 1000, loss = 0.287519
I0428 19:30:05.963999 22193 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:30:06.039664 22200 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:06.040144 22193 solver.cpp:398]     Test net output #0: accuracy = 0.9487
I0428 19:30:06.040189 22193 solver.cpp:398]     Test net output #1: loss = 0.182977 (* 1 = 0.182977 loss)
I0428 19:30:06.040199 22193 solver.cpp:316] Optimization Done.
I0428 19:30:06.040205 22193 caffe.cpp:259] Optimization Done.
