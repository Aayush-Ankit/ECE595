I0428 20:05:55.159919 30750 caffe.cpp:218] Using GPUs 0
I0428 20:05:55.196499 30750 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:55.649940 30750 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1013.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:55.650068 30750 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1013.prototxt
I0428 20:05:55.650410 30750 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:55.650444 30750 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:55.650522 30750 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:55.650586 30750 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:55.650670 30750 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:55.650689 30750 net.cpp:86] Creating Layer mnist
I0428 20:05:55.650696 30750 net.cpp:382] mnist -> data
I0428 20:05:55.650714 30750 net.cpp:382] mnist -> label
I0428 20:05:55.651581 30750 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:55.653741 30750 net.cpp:124] Setting up mnist
I0428 20:05:55.653771 30750 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:55.653777 30750 net.cpp:131] Top shape: 64 (64)
I0428 20:05:55.653780 30750 net.cpp:139] Memory required for data: 200960
I0428 20:05:55.653785 30750 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:55.653798 30750 net.cpp:86] Creating Layer conv0
I0428 20:05:55.653831 30750 net.cpp:408] conv0 <- data
I0428 20:05:55.653842 30750 net.cpp:382] conv0 -> conv0
I0428 20:05:55.885128 30750 net.cpp:124] Setting up conv0
I0428 20:05:55.885167 30750 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:55.885172 30750 net.cpp:139] Memory required for data: 3887360
I0428 20:05:55.885201 30750 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:55.885213 30750 net.cpp:86] Creating Layer pool0
I0428 20:05:55.885217 30750 net.cpp:408] pool0 <- conv0
I0428 20:05:55.885222 30750 net.cpp:382] pool0 -> pool0
I0428 20:05:55.885279 30750 net.cpp:124] Setting up pool0
I0428 20:05:55.885285 30750 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:55.885288 30750 net.cpp:139] Memory required for data: 4808960
I0428 20:05:55.885290 30750 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:55.885300 30750 net.cpp:86] Creating Layer conv1
I0428 20:05:55.885303 30750 net.cpp:408] conv1 <- pool0
I0428 20:05:55.885308 30750 net.cpp:382] conv1 -> conv1
I0428 20:05:55.887928 30750 net.cpp:124] Setting up conv1
I0428 20:05:55.887941 30750 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:55.887960 30750 net.cpp:139] Memory required for data: 4841728
I0428 20:05:55.887984 30750 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:55.887991 30750 net.cpp:86] Creating Layer pool1
I0428 20:05:55.887995 30750 net.cpp:408] pool1 <- conv1
I0428 20:05:55.887998 30750 net.cpp:382] pool1 -> pool1
I0428 20:05:55.888048 30750 net.cpp:124] Setting up pool1
I0428 20:05:55.888053 30750 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:55.888056 30750 net.cpp:139] Memory required for data: 4849920
I0428 20:05:55.888059 30750 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:55.888067 30750 net.cpp:86] Creating Layer ip1
I0428 20:05:55.888069 30750 net.cpp:408] ip1 <- pool1
I0428 20:05:55.888073 30750 net.cpp:382] ip1 -> ip1
I0428 20:05:55.888176 30750 net.cpp:124] Setting up ip1
I0428 20:05:55.888185 30750 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:55.888187 30750 net.cpp:139] Memory required for data: 4862720
I0428 20:05:55.888195 30750 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:55.888200 30750 net.cpp:86] Creating Layer relu1
I0428 20:05:55.888202 30750 net.cpp:408] relu1 <- ip1
I0428 20:05:55.888206 30750 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:55.888366 30750 net.cpp:124] Setting up relu1
I0428 20:05:55.888375 30750 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:55.888378 30750 net.cpp:139] Memory required for data: 4875520
I0428 20:05:55.888381 30750 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:55.888387 30750 net.cpp:86] Creating Layer ip2
I0428 20:05:55.888391 30750 net.cpp:408] ip2 <- ip1
I0428 20:05:55.888396 30750 net.cpp:382] ip2 -> ip2
I0428 20:05:55.888509 30750 net.cpp:124] Setting up ip2
I0428 20:05:55.888516 30750 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:55.888520 30750 net.cpp:139] Memory required for data: 4888320
I0428 20:05:55.888525 30750 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:55.888530 30750 net.cpp:86] Creating Layer relu2
I0428 20:05:55.888532 30750 net.cpp:408] relu2 <- ip2
I0428 20:05:55.888536 30750 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:55.889295 30750 net.cpp:124] Setting up relu2
I0428 20:05:55.889307 30750 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:55.889325 30750 net.cpp:139] Memory required for data: 4901120
I0428 20:05:55.889329 30750 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:55.889335 30750 net.cpp:86] Creating Layer ip3
I0428 20:05:55.889338 30750 net.cpp:408] ip3 <- ip2
I0428 20:05:55.889344 30750 net.cpp:382] ip3 -> ip3
I0428 20:05:55.889441 30750 net.cpp:124] Setting up ip3
I0428 20:05:55.889448 30750 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:55.889451 30750 net.cpp:139] Memory required for data: 4903680
I0428 20:05:55.889458 30750 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:55.889464 30750 net.cpp:86] Creating Layer relu3
I0428 20:05:55.889467 30750 net.cpp:408] relu3 <- ip3
I0428 20:05:55.889470 30750 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:55.889693 30750 net.cpp:124] Setting up relu3
I0428 20:05:55.889703 30750 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:55.889705 30750 net.cpp:139] Memory required for data: 4906240
I0428 20:05:55.889708 30750 layer_factory.hpp:77] Creating layer loss
I0428 20:05:55.889714 30750 net.cpp:86] Creating Layer loss
I0428 20:05:55.889719 30750 net.cpp:408] loss <- ip3
I0428 20:05:55.889722 30750 net.cpp:408] loss <- label
I0428 20:05:55.889727 30750 net.cpp:382] loss -> loss
I0428 20:05:55.889745 30750 layer_factory.hpp:77] Creating layer loss
I0428 20:05:55.889999 30750 net.cpp:124] Setting up loss
I0428 20:05:55.890007 30750 net.cpp:131] Top shape: (1)
I0428 20:05:55.890012 30750 net.cpp:134]     with loss weight 1
I0428 20:05:55.890024 30750 net.cpp:139] Memory required for data: 4906244
I0428 20:05:55.890027 30750 net.cpp:200] loss needs backward computation.
I0428 20:05:55.890031 30750 net.cpp:200] relu3 needs backward computation.
I0428 20:05:55.890034 30750 net.cpp:200] ip3 needs backward computation.
I0428 20:05:55.890038 30750 net.cpp:200] relu2 needs backward computation.
I0428 20:05:55.890039 30750 net.cpp:200] ip2 needs backward computation.
I0428 20:05:55.890043 30750 net.cpp:200] relu1 needs backward computation.
I0428 20:05:55.890046 30750 net.cpp:200] ip1 needs backward computation.
I0428 20:05:55.890049 30750 net.cpp:200] pool1 needs backward computation.
I0428 20:05:55.890053 30750 net.cpp:200] conv1 needs backward computation.
I0428 20:05:55.890055 30750 net.cpp:200] pool0 needs backward computation.
I0428 20:05:55.890058 30750 net.cpp:200] conv0 needs backward computation.
I0428 20:05:55.890061 30750 net.cpp:202] mnist does not need backward computation.
I0428 20:05:55.890064 30750 net.cpp:244] This network produces output loss
I0428 20:05:55.890072 30750 net.cpp:257] Network initialization done.
I0428 20:05:55.890429 30750 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1013.prototxt
I0428 20:05:55.890470 30750 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:55.890560 30750 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:55.890641 30750 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:55.890686 30750 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:55.890713 30750 net.cpp:86] Creating Layer mnist
I0428 20:05:55.890717 30750 net.cpp:382] mnist -> data
I0428 20:05:55.890725 30750 net.cpp:382] mnist -> label
I0428 20:05:55.890806 30750 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:55.892765 30750 net.cpp:124] Setting up mnist
I0428 20:05:55.892792 30750 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:55.892837 30750 net.cpp:131] Top shape: 100 (100)
I0428 20:05:55.892841 30750 net.cpp:139] Memory required for data: 314000
I0428 20:05:55.892844 30750 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:55.892851 30750 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:55.892855 30750 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:55.892875 30750 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:55.892882 30750 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:55.892927 30750 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:55.892933 30750 net.cpp:131] Top shape: 100 (100)
I0428 20:05:55.892937 30750 net.cpp:131] Top shape: 100 (100)
I0428 20:05:55.892940 30750 net.cpp:139] Memory required for data: 314800
I0428 20:05:55.892943 30750 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:55.892951 30750 net.cpp:86] Creating Layer conv0
I0428 20:05:55.892956 30750 net.cpp:408] conv0 <- data
I0428 20:05:55.892961 30750 net.cpp:382] conv0 -> conv0
I0428 20:05:55.894541 30750 net.cpp:124] Setting up conv0
I0428 20:05:55.894569 30750 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:55.894573 30750 net.cpp:139] Memory required for data: 6074800
I0428 20:05:55.894582 30750 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:55.894587 30750 net.cpp:86] Creating Layer pool0
I0428 20:05:55.894592 30750 net.cpp:408] pool0 <- conv0
I0428 20:05:55.894595 30750 net.cpp:382] pool0 -> pool0
I0428 20:05:55.894646 30750 net.cpp:124] Setting up pool0
I0428 20:05:55.894651 30750 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:55.894654 30750 net.cpp:139] Memory required for data: 7514800
I0428 20:05:55.894656 30750 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:55.894665 30750 net.cpp:86] Creating Layer conv1
I0428 20:05:55.894667 30750 net.cpp:408] conv1 <- pool0
I0428 20:05:55.894672 30750 net.cpp:382] conv1 -> conv1
I0428 20:05:55.896560 30750 net.cpp:124] Setting up conv1
I0428 20:05:55.896589 30750 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:55.896592 30750 net.cpp:139] Memory required for data: 7566000
I0428 20:05:55.896602 30750 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:55.896610 30750 net.cpp:86] Creating Layer pool1
I0428 20:05:55.896613 30750 net.cpp:408] pool1 <- conv1
I0428 20:05:55.896618 30750 net.cpp:382] pool1 -> pool1
I0428 20:05:55.896661 30750 net.cpp:124] Setting up pool1
I0428 20:05:55.896667 30750 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:55.896670 30750 net.cpp:139] Memory required for data: 7578800
I0428 20:05:55.896673 30750 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:55.896680 30750 net.cpp:86] Creating Layer ip1
I0428 20:05:55.896684 30750 net.cpp:408] ip1 <- pool1
I0428 20:05:55.896689 30750 net.cpp:382] ip1 -> ip1
I0428 20:05:55.896849 30750 net.cpp:124] Setting up ip1
I0428 20:05:55.896858 30750 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:55.896872 30750 net.cpp:139] Memory required for data: 7598800
I0428 20:05:55.896880 30750 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:55.896886 30750 net.cpp:86] Creating Layer relu1
I0428 20:05:55.896890 30750 net.cpp:408] relu1 <- ip1
I0428 20:05:55.896895 30750 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:55.897071 30750 net.cpp:124] Setting up relu1
I0428 20:05:55.897080 30750 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:55.897091 30750 net.cpp:139] Memory required for data: 7618800
I0428 20:05:55.897094 30750 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:55.897102 30750 net.cpp:86] Creating Layer ip2
I0428 20:05:55.897105 30750 net.cpp:408] ip2 <- ip1
I0428 20:05:55.897110 30750 net.cpp:382] ip2 -> ip2
I0428 20:05:55.897240 30750 net.cpp:124] Setting up ip2
I0428 20:05:55.897248 30750 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:55.897250 30750 net.cpp:139] Memory required for data: 7638800
I0428 20:05:55.897256 30750 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:55.897261 30750 net.cpp:86] Creating Layer relu2
I0428 20:05:55.897264 30750 net.cpp:408] relu2 <- ip2
I0428 20:05:55.897269 30750 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:55.897428 30750 net.cpp:124] Setting up relu2
I0428 20:05:55.897436 30750 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:55.897439 30750 net.cpp:139] Memory required for data: 7658800
I0428 20:05:55.897441 30750 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:55.897447 30750 net.cpp:86] Creating Layer ip3
I0428 20:05:55.897451 30750 net.cpp:408] ip3 <- ip2
I0428 20:05:55.897456 30750 net.cpp:382] ip3 -> ip3
I0428 20:05:55.897568 30750 net.cpp:124] Setting up ip3
I0428 20:05:55.897575 30750 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:55.897578 30750 net.cpp:139] Memory required for data: 7662800
I0428 20:05:55.897585 30750 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:55.897589 30750 net.cpp:86] Creating Layer relu3
I0428 20:05:55.897593 30750 net.cpp:408] relu3 <- ip3
I0428 20:05:55.897595 30750 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:55.898407 30750 net.cpp:124] Setting up relu3
I0428 20:05:55.898433 30750 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:55.898452 30750 net.cpp:139] Memory required for data: 7666800
I0428 20:05:55.898455 30750 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:55.898461 30750 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:55.898465 30750 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:55.898471 30750 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:55.898478 30750 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:55.898515 30750 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:55.898521 30750 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:55.898525 30750 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:55.898527 30750 net.cpp:139] Memory required for data: 7674800
I0428 20:05:55.898530 30750 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:55.898536 30750 net.cpp:86] Creating Layer accuracy
I0428 20:05:55.898540 30750 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:55.898543 30750 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:55.898547 30750 net.cpp:382] accuracy -> accuracy
I0428 20:05:55.898553 30750 net.cpp:124] Setting up accuracy
I0428 20:05:55.898557 30750 net.cpp:131] Top shape: (1)
I0428 20:05:55.898561 30750 net.cpp:139] Memory required for data: 7674804
I0428 20:05:55.898563 30750 layer_factory.hpp:77] Creating layer loss
I0428 20:05:55.898569 30750 net.cpp:86] Creating Layer loss
I0428 20:05:55.898572 30750 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:55.898576 30750 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:55.898579 30750 net.cpp:382] loss -> loss
I0428 20:05:55.898586 30750 layer_factory.hpp:77] Creating layer loss
I0428 20:05:55.898821 30750 net.cpp:124] Setting up loss
I0428 20:05:55.898830 30750 net.cpp:131] Top shape: (1)
I0428 20:05:55.898833 30750 net.cpp:134]     with loss weight 1
I0428 20:05:55.898846 30750 net.cpp:139] Memory required for data: 7674808
I0428 20:05:55.898875 30750 net.cpp:200] loss needs backward computation.
I0428 20:05:55.898880 30750 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:55.898888 30750 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:55.898891 30750 net.cpp:200] relu3 needs backward computation.
I0428 20:05:55.898895 30750 net.cpp:200] ip3 needs backward computation.
I0428 20:05:55.898897 30750 net.cpp:200] relu2 needs backward computation.
I0428 20:05:55.898911 30750 net.cpp:200] ip2 needs backward computation.
I0428 20:05:55.898914 30750 net.cpp:200] relu1 needs backward computation.
I0428 20:05:55.898917 30750 net.cpp:200] ip1 needs backward computation.
I0428 20:05:55.898921 30750 net.cpp:200] pool1 needs backward computation.
I0428 20:05:55.898923 30750 net.cpp:200] conv1 needs backward computation.
I0428 20:05:55.898931 30750 net.cpp:200] pool0 needs backward computation.
I0428 20:05:55.898934 30750 net.cpp:200] conv0 needs backward computation.
I0428 20:05:55.898938 30750 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:55.898942 30750 net.cpp:202] mnist does not need backward computation.
I0428 20:05:55.898944 30750 net.cpp:244] This network produces output accuracy
I0428 20:05:55.898948 30750 net.cpp:244] This network produces output loss
I0428 20:05:55.898959 30750 net.cpp:257] Network initialization done.
I0428 20:05:55.899003 30750 solver.cpp:56] Solver scaffolding done.
I0428 20:05:55.899361 30750 caffe.cpp:248] Starting Optimization
I0428 20:05:55.899368 30750 solver.cpp:273] Solving LeNet
I0428 20:05:55.899370 30750 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:55.900372 30750 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:55.905568 30750 blocking_queue.cpp:49] Waiting for data
I0428 20:05:55.976452 30757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:55.977084 30750 solver.cpp:398]     Test net output #0: accuracy = 0.126
I0428 20:05:55.977119 30750 solver.cpp:398]     Test net output #1: loss = 2.28995 (* 1 = 2.28995 loss)
I0428 20:05:55.980190 30750 solver.cpp:219] Iteration 0 (-1.24271e-30 iter/s, 0.0807803s/100 iters), loss = 2.29155
I0428 20:05:55.980231 30750 solver.cpp:238]     Train net output #0: loss = 2.29155 (* 1 = 2.29155 loss)
I0428 20:05:55.980244 30750 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:56.076637 30750 solver.cpp:219] Iteration 100 (1037.23 iter/s, 0.0964106s/100 iters), loss = 0.56779
I0428 20:05:56.076661 30750 solver.cpp:238]     Train net output #0: loss = 0.56779 (* 1 = 0.56779 loss)
I0428 20:05:56.076668 30750 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:56.164698 30750 solver.cpp:219] Iteration 200 (1136 iter/s, 0.0880282s/100 iters), loss = 0.532321
I0428 20:05:56.164721 30750 solver.cpp:238]     Train net output #0: loss = 0.532321 (* 1 = 0.532321 loss)
I0428 20:05:56.164742 30750 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:56.257977 30750 solver.cpp:219] Iteration 300 (1072.44 iter/s, 0.0932452s/100 iters), loss = 0.472013
I0428 20:05:56.258015 30750 solver.cpp:238]     Train net output #0: loss = 0.472013 (* 1 = 0.472013 loss)
I0428 20:05:56.258021 30750 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:56.352546 30750 solver.cpp:219] Iteration 400 (1057.79 iter/s, 0.0945367s/100 iters), loss = 0.725107
I0428 20:05:56.352586 30750 solver.cpp:238]     Train net output #0: loss = 0.725107 (* 1 = 0.725107 loss)
I0428 20:05:56.352592 30750 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:56.439019 30750 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:56.492832 30757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:56.493484 30750 solver.cpp:398]     Test net output #0: accuracy = 0.8861
I0428 20:05:56.493504 30750 solver.cpp:398]     Test net output #1: loss = 0.478737 (* 1 = 0.478737 loss)
I0428 20:05:56.494462 30750 solver.cpp:219] Iteration 500 (704.83 iter/s, 0.141878s/100 iters), loss = 0.471794
I0428 20:05:56.494516 30750 solver.cpp:238]     Train net output #0: loss = 0.471794 (* 1 = 0.471794 loss)
I0428 20:05:56.494524 30750 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:56.579708 30750 solver.cpp:219] Iteration 600 (1173.94 iter/s, 0.0851835s/100 iters), loss = 0.31164
I0428 20:05:56.579748 30750 solver.cpp:238]     Train net output #0: loss = 0.31164 (* 1 = 0.31164 loss)
I0428 20:05:56.579757 30750 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:56.664779 30750 solver.cpp:219] Iteration 700 (1175.96 iter/s, 0.0850371s/100 iters), loss = 0.658243
I0428 20:05:56.664824 30750 solver.cpp:238]     Train net output #0: loss = 0.658243 (* 1 = 0.658243 loss)
I0428 20:05:56.664830 30750 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:56.750253 30750 solver.cpp:219] Iteration 800 (1170.4 iter/s, 0.0854407s/100 iters), loss = 0.539562
I0428 20:05:56.750278 30750 solver.cpp:238]     Train net output #0: loss = 0.539562 (* 1 = 0.539562 loss)
I0428 20:05:56.750284 30750 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:56.835050 30750 solver.cpp:219] Iteration 900 (1179.75 iter/s, 0.0847636s/100 iters), loss = 0.479543
I0428 20:05:56.835089 30750 solver.cpp:238]     Train net output #0: loss = 0.479543 (* 1 = 0.479543 loss)
I0428 20:05:56.835094 30750 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:56.863296 30756 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:56.919210 30750 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:56.920019 30750 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:56.920632 30750 solver.cpp:311] Iteration 1000, loss = 0.510195
I0428 20:05:56.920647 30750 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:56.975183 30757 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:56.975778 30750 solver.cpp:398]     Test net output #0: accuracy = 0.9284
I0428 20:05:56.975816 30750 solver.cpp:398]     Test net output #1: loss = 0.395176 (* 1 = 0.395176 loss)
I0428 20:05:56.975821 30750 solver.cpp:316] Optimization Done.
I0428 20:05:56.975823 30750 caffe.cpp:259] Optimization Done.
