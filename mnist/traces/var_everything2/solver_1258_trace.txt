I0428 20:15:54.727130   545 caffe.cpp:218] Using GPUs 0
I0428 20:15:54.757910   545 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:55.212987   545 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1258.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:55.213134   545 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1258.prototxt
I0428 20:15:55.213459   545 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:55.213474   545 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:55.213546   545 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:55.213603   545 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:55.213702   545 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:55.213721   545 net.cpp:86] Creating Layer mnist
I0428 20:15:55.213728   545 net.cpp:382] mnist -> data
I0428 20:15:55.213747   545 net.cpp:382] mnist -> label
I0428 20:15:55.214656   545 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:55.216922   545 net.cpp:124] Setting up mnist
I0428 20:15:55.216969   545 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:55.216984   545 net.cpp:131] Top shape: 64 (64)
I0428 20:15:55.216989   545 net.cpp:139] Memory required for data: 200960
I0428 20:15:55.216995   545 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:55.217007   545 net.cpp:86] Creating Layer conv0
I0428 20:15:55.217011   545 net.cpp:408] conv0 <- data
I0428 20:15:55.217023   545 net.cpp:382] conv0 -> conv0
I0428 20:15:55.444555   545 net.cpp:124] Setting up conv0
I0428 20:15:55.444582   545 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:55.444586   545 net.cpp:139] Memory required for data: 7573760
I0428 20:15:55.444617   545 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:55.444630   545 net.cpp:86] Creating Layer pool0
I0428 20:15:55.444633   545 net.cpp:408] pool0 <- conv0
I0428 20:15:55.444654   545 net.cpp:382] pool0 -> pool0
I0428 20:15:55.444702   545 net.cpp:124] Setting up pool0
I0428 20:15:55.444707   545 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:55.444710   545 net.cpp:139] Memory required for data: 9416960
I0428 20:15:55.444713   545 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:55.444723   545 net.cpp:86] Creating Layer conv1
I0428 20:15:55.444726   545 net.cpp:408] conv1 <- pool0
I0428 20:15:55.444732   545 net.cpp:382] conv1 -> conv1
I0428 20:15:55.447767   545 net.cpp:124] Setting up conv1
I0428 20:15:55.447794   545 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:55.447798   545 net.cpp:139] Memory required for data: 9498880
I0428 20:15:55.447808   545 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:55.447815   545 net.cpp:86] Creating Layer pool1
I0428 20:15:55.447818   545 net.cpp:408] pool1 <- conv1
I0428 20:15:55.447824   545 net.cpp:382] pool1 -> pool1
I0428 20:15:55.447890   545 net.cpp:124] Setting up pool1
I0428 20:15:55.447896   545 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:55.447898   545 net.cpp:139] Memory required for data: 9519360
I0428 20:15:55.447901   545 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:55.447908   545 net.cpp:86] Creating Layer ip1
I0428 20:15:55.447911   545 net.cpp:408] ip1 <- pool1
I0428 20:15:55.447916   545 net.cpp:382] ip1 -> ip1
I0428 20:15:55.448043   545 net.cpp:124] Setting up ip1
I0428 20:15:55.448051   545 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:55.448055   545 net.cpp:139] Memory required for data: 9532160
I0428 20:15:55.448060   545 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:55.448067   545 net.cpp:86] Creating Layer relu1
I0428 20:15:55.448071   545 net.cpp:408] relu1 <- ip1
I0428 20:15:55.448074   545 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:55.448271   545 net.cpp:124] Setting up relu1
I0428 20:15:55.448281   545 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:15:55.448283   545 net.cpp:139] Memory required for data: 9544960
I0428 20:15:55.448287   545 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:55.448292   545 net.cpp:86] Creating Layer ip2
I0428 20:15:55.448295   545 net.cpp:408] ip2 <- ip1
I0428 20:15:55.448302   545 net.cpp:382] ip2 -> ip2
I0428 20:15:55.448400   545 net.cpp:124] Setting up ip2
I0428 20:15:55.448407   545 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:55.448410   545 net.cpp:139] Memory required for data: 9547520
I0428 20:15:55.448431   545 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:55.448436   545 net.cpp:86] Creating Layer relu2
I0428 20:15:55.448439   545 net.cpp:408] relu2 <- ip2
I0428 20:15:55.448444   545 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:55.449273   545 net.cpp:124] Setting up relu2
I0428 20:15:55.449301   545 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:55.449304   545 net.cpp:139] Memory required for data: 9550080
I0428 20:15:55.449307   545 layer_factory.hpp:77] Creating layer loss
I0428 20:15:55.449314   545 net.cpp:86] Creating Layer loss
I0428 20:15:55.449317   545 net.cpp:408] loss <- ip2
I0428 20:15:55.449321   545 net.cpp:408] loss <- label
I0428 20:15:55.449328   545 net.cpp:382] loss -> loss
I0428 20:15:55.449343   545 layer_factory.hpp:77] Creating layer loss
I0428 20:15:55.449597   545 net.cpp:124] Setting up loss
I0428 20:15:55.449606   545 net.cpp:131] Top shape: (1)
I0428 20:15:55.449609   545 net.cpp:134]     with loss weight 1
I0428 20:15:55.449622   545 net.cpp:139] Memory required for data: 9550084
I0428 20:15:55.449625   545 net.cpp:200] loss needs backward computation.
I0428 20:15:55.449630   545 net.cpp:200] relu2 needs backward computation.
I0428 20:15:55.449632   545 net.cpp:200] ip2 needs backward computation.
I0428 20:15:55.449635   545 net.cpp:200] relu1 needs backward computation.
I0428 20:15:55.449652   545 net.cpp:200] ip1 needs backward computation.
I0428 20:15:55.449669   545 net.cpp:200] pool1 needs backward computation.
I0428 20:15:55.449673   545 net.cpp:200] conv1 needs backward computation.
I0428 20:15:55.449676   545 net.cpp:200] pool0 needs backward computation.
I0428 20:15:55.449679   545 net.cpp:200] conv0 needs backward computation.
I0428 20:15:55.449682   545 net.cpp:202] mnist does not need backward computation.
I0428 20:15:55.449686   545 net.cpp:244] This network produces output loss
I0428 20:15:55.449695   545 net.cpp:257] Network initialization done.
I0428 20:15:55.449993   545 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1258.prototxt
I0428 20:15:55.450017   545 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:55.450098   545 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:15:55.450176   545 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:55.450230   545 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:55.450258   545 net.cpp:86] Creating Layer mnist
I0428 20:15:55.450263   545 net.cpp:382] mnist -> data
I0428 20:15:55.450271   545 net.cpp:382] mnist -> label
I0428 20:15:55.450371   545 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:55.452338   545 net.cpp:124] Setting up mnist
I0428 20:15:55.452368   545 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:55.452389   545 net.cpp:131] Top shape: 100 (100)
I0428 20:15:55.452390   545 net.cpp:139] Memory required for data: 314000
I0428 20:15:55.452394   545 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:55.452417   545 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:55.452421   545 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:55.452426   545 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:55.452433   545 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:55.452512   545 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:55.452530   545 net.cpp:131] Top shape: 100 (100)
I0428 20:15:55.452534   545 net.cpp:131] Top shape: 100 (100)
I0428 20:15:55.452538   545 net.cpp:139] Memory required for data: 314800
I0428 20:15:55.452540   545 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:55.452550   545 net.cpp:86] Creating Layer conv0
I0428 20:15:55.452553   545 net.cpp:408] conv0 <- data
I0428 20:15:55.452560   545 net.cpp:382] conv0 -> conv0
I0428 20:15:55.454244   545 net.cpp:124] Setting up conv0
I0428 20:15:55.454274   545 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:55.454278   545 net.cpp:139] Memory required for data: 11834800
I0428 20:15:55.454288   545 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:55.454294   545 net.cpp:86] Creating Layer pool0
I0428 20:15:55.454298   545 net.cpp:408] pool0 <- conv0
I0428 20:15:55.454303   545 net.cpp:382] pool0 -> pool0
I0428 20:15:55.454357   545 net.cpp:124] Setting up pool0
I0428 20:15:55.454363   545 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:55.454366   545 net.cpp:139] Memory required for data: 14714800
I0428 20:15:55.454370   545 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:55.454380   545 net.cpp:86] Creating Layer conv1
I0428 20:15:55.454385   545 net.cpp:408] conv1 <- pool0
I0428 20:15:55.454390   545 net.cpp:382] conv1 -> conv1
I0428 20:15:55.455974   545 net.cpp:124] Setting up conv1
I0428 20:15:55.456002   545 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:55.456006   545 net.cpp:139] Memory required for data: 14842800
I0428 20:15:55.456029   545 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:55.456037   545 net.cpp:86] Creating Layer pool1
I0428 20:15:55.456039   545 net.cpp:408] pool1 <- conv1
I0428 20:15:55.456044   545 net.cpp:382] pool1 -> pool1
I0428 20:15:55.456099   545 net.cpp:124] Setting up pool1
I0428 20:15:55.456104   545 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:55.456107   545 net.cpp:139] Memory required for data: 14874800
I0428 20:15:55.456111   545 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:55.456116   545 net.cpp:86] Creating Layer ip1
I0428 20:15:55.456125   545 net.cpp:408] ip1 <- pool1
I0428 20:15:55.456136   545 net.cpp:382] ip1 -> ip1
I0428 20:15:55.456279   545 net.cpp:124] Setting up ip1
I0428 20:15:55.456287   545 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:55.456290   545 net.cpp:139] Memory required for data: 14894800
I0428 20:15:55.456298   545 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:55.456305   545 net.cpp:86] Creating Layer relu1
I0428 20:15:55.456308   545 net.cpp:408] relu1 <- ip1
I0428 20:15:55.456312   545 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:55.456485   545 net.cpp:124] Setting up relu1
I0428 20:15:55.456493   545 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:15:55.456496   545 net.cpp:139] Memory required for data: 14914800
I0428 20:15:55.456501   545 layer_factory.hpp:77] Creating layer ip2
I0428 20:15:55.456509   545 net.cpp:86] Creating Layer ip2
I0428 20:15:55.456512   545 net.cpp:408] ip2 <- ip1
I0428 20:15:55.456517   545 net.cpp:382] ip2 -> ip2
I0428 20:15:55.456645   545 net.cpp:124] Setting up ip2
I0428 20:15:55.456651   545 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:55.456655   545 net.cpp:139] Memory required for data: 14918800
I0428 20:15:55.456660   545 layer_factory.hpp:77] Creating layer relu2
I0428 20:15:55.456663   545 net.cpp:86] Creating Layer relu2
I0428 20:15:55.456667   545 net.cpp:408] relu2 <- ip2
I0428 20:15:55.456673   545 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:15:55.456845   545 net.cpp:124] Setting up relu2
I0428 20:15:55.456854   545 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:55.456857   545 net.cpp:139] Memory required for data: 14922800
I0428 20:15:55.456861   545 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:15:55.456866   545 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:15:55.456871   545 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:15:55.456874   545 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:15:55.456903   545 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:15:55.456944   545 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:15:55.456950   545 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:55.456954   545 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:55.456957   545 net.cpp:139] Memory required for data: 14930800
I0428 20:15:55.456960   545 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:55.456964   545 net.cpp:86] Creating Layer accuracy
I0428 20:15:55.456967   545 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:15:55.456971   545 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:55.456977   545 net.cpp:382] accuracy -> accuracy
I0428 20:15:55.456984   545 net.cpp:124] Setting up accuracy
I0428 20:15:55.456987   545 net.cpp:131] Top shape: (1)
I0428 20:15:55.456990   545 net.cpp:139] Memory required for data: 14930804
I0428 20:15:55.456993   545 layer_factory.hpp:77] Creating layer loss
I0428 20:15:55.456997   545 net.cpp:86] Creating Layer loss
I0428 20:15:55.457001   545 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:15:55.457005   545 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:55.457010   545 net.cpp:382] loss -> loss
I0428 20:15:55.457016   545 layer_factory.hpp:77] Creating layer loss
I0428 20:15:55.457264   545 net.cpp:124] Setting up loss
I0428 20:15:55.457273   545 net.cpp:131] Top shape: (1)
I0428 20:15:55.457275   545 net.cpp:134]     with loss weight 1
I0428 20:15:55.457281   545 net.cpp:139] Memory required for data: 14930808
I0428 20:15:55.457284   545 net.cpp:200] loss needs backward computation.
I0428 20:15:55.457288   545 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:55.457293   545 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:15:55.457295   545 net.cpp:200] relu2 needs backward computation.
I0428 20:15:55.457314   545 net.cpp:200] ip2 needs backward computation.
I0428 20:15:55.457317   545 net.cpp:200] relu1 needs backward computation.
I0428 20:15:55.457319   545 net.cpp:200] ip1 needs backward computation.
I0428 20:15:55.457322   545 net.cpp:200] pool1 needs backward computation.
I0428 20:15:55.457325   545 net.cpp:200] conv1 needs backward computation.
I0428 20:15:55.457329   545 net.cpp:200] pool0 needs backward computation.
I0428 20:15:55.457332   545 net.cpp:200] conv0 needs backward computation.
I0428 20:15:55.457335   545 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:55.457340   545 net.cpp:202] mnist does not need backward computation.
I0428 20:15:55.457342   545 net.cpp:244] This network produces output accuracy
I0428 20:15:55.457345   545 net.cpp:244] This network produces output loss
I0428 20:15:55.457356   545 net.cpp:257] Network initialization done.
I0428 20:15:55.457409   545 solver.cpp:56] Solver scaffolding done.
I0428 20:15:55.457759   545 caffe.cpp:248] Starting Optimization
I0428 20:15:55.457765   545 solver.cpp:273] Solving LeNet
I0428 20:15:55.457767   545 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:55.458566   545 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:55.536240   556 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:55.538931   545 solver.cpp:398]     Test net output #0: accuracy = 0.1178
I0428 20:15:55.538974   545 solver.cpp:398]     Test net output #1: loss = 2.30266 (* 1 = 2.30266 loss)
I0428 20:15:55.544981   545 solver.cpp:219] Iteration 0 (-1.14461e-30 iter/s, 0.0871468s/100 iters), loss = 2.31679
I0428 20:15:55.545027   545 solver.cpp:238]     Train net output #0: loss = 2.31679 (* 1 = 2.31679 loss)
I0428 20:15:55.545044   545 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:55.662904   545 solver.cpp:219] Iteration 100 (848.388 iter/s, 0.117871s/100 iters), loss = 0.303787
I0428 20:15:55.662945   545 solver.cpp:238]     Train net output #0: loss = 0.303787 (* 1 = 0.303787 loss)
I0428 20:15:55.662953   545 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:55.781077   545 solver.cpp:219] Iteration 200 (846.533 iter/s, 0.118129s/100 iters), loss = 0.211366
I0428 20:15:55.781128   545 solver.cpp:238]     Train net output #0: loss = 0.211366 (* 1 = 0.211366 loss)
I0428 20:15:55.781136   545 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:55.903465   545 solver.cpp:219] Iteration 300 (817.494 iter/s, 0.122325s/100 iters), loss = 0.269521
I0428 20:15:55.903503   545 solver.cpp:238]     Train net output #0: loss = 0.269521 (* 1 = 0.269521 loss)
I0428 20:15:55.903512   545 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:56.018205   545 solver.cpp:219] Iteration 400 (871.892 iter/s, 0.114693s/100 iters), loss = 0.0831122
I0428 20:15:56.018237   545 solver.cpp:238]     Train net output #0: loss = 0.0831122 (* 1 = 0.0831122 loss)
I0428 20:15:56.018245   545 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:56.133473   545 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:56.199491   556 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:56.201350   545 solver.cpp:398]     Test net output #0: accuracy = 0.9576
I0428 20:15:56.201375   545 solver.cpp:398]     Test net output #1: loss = 0.136506 (* 1 = 0.136506 loss)
I0428 20:15:56.202522   545 solver.cpp:219] Iteration 500 (542.679 iter/s, 0.184271s/100 iters), loss = 0.264547
I0428 20:15:56.202548   545 solver.cpp:238]     Train net output #0: loss = 0.264547 (* 1 = 0.264547 loss)
I0428 20:15:56.202555   545 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:56.325106   545 solver.cpp:219] Iteration 600 (816.012 iter/s, 0.122547s/100 iters), loss = 0.104318
I0428 20:15:56.325145   545 solver.cpp:238]     Train net output #0: loss = 0.104318 (* 1 = 0.104318 loss)
I0428 20:15:56.325152   545 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:56.440032   545 solver.cpp:219] Iteration 700 (870.423 iter/s, 0.114887s/100 iters), loss = 0.19722
I0428 20:15:56.440062   545 solver.cpp:238]     Train net output #0: loss = 0.19722 (* 1 = 0.19722 loss)
I0428 20:15:56.440073   545 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:56.552588   545 solver.cpp:219] Iteration 800 (888.77 iter/s, 0.112515s/100 iters), loss = 0.258232
I0428 20:15:56.552618   545 solver.cpp:238]     Train net output #0: loss = 0.258232 (* 1 = 0.258232 loss)
I0428 20:15:56.552630   545 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:56.667969   545 solver.cpp:219] Iteration 900 (867.015 iter/s, 0.115338s/100 iters), loss = 0.22375
I0428 20:15:56.668023   545 solver.cpp:238]     Train net output #0: loss = 0.22375 (* 1 = 0.22375 loss)
I0428 20:15:56.668035   545 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:56.707671   555 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:56.783936   545 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:56.785025   545 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:56.785794   545 solver.cpp:311] Iteration 1000, loss = 0.176967
I0428 20:15:56.785814   545 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:56.792596   545 blocking_queue.cpp:49] Waiting for data
I0428 20:15:56.861171   556 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:56.861896   545 solver.cpp:398]     Test net output #0: accuracy = 0.971
I0428 20:15:56.861917   545 solver.cpp:398]     Test net output #1: loss = 0.0911966 (* 1 = 0.0911966 loss)
I0428 20:15:56.861923   545 solver.cpp:316] Optimization Done.
I0428 20:15:56.861927   545 caffe.cpp:259] Optimization Done.
