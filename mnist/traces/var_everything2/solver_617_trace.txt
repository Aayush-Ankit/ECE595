I0428 19:50:52.390769 27143 caffe.cpp:218] Using GPUs 0
I0428 19:50:52.433115 27143 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:50:52.966595 27143 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test617.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:50:52.966739 27143 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test617.prototxt
I0428 19:50:52.967160 27143 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:50:52.967180 27143 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:50:52.967284 27143 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:52.967365 27143 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:52.967468 27143 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:50:52.967494 27143 net.cpp:86] Creating Layer mnist
I0428 19:50:52.967501 27143 net.cpp:382] mnist -> data
I0428 19:50:52.967525 27143 net.cpp:382] mnist -> label
I0428 19:50:52.968613 27143 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:50:52.971089 27143 net.cpp:124] Setting up mnist
I0428 19:50:52.971107 27143 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:50:52.971114 27143 net.cpp:131] Top shape: 64 (64)
I0428 19:50:52.971118 27143 net.cpp:139] Memory required for data: 200960
I0428 19:50:52.971125 27143 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:52.971141 27143 net.cpp:86] Creating Layer conv0
I0428 19:50:52.971161 27143 net.cpp:408] conv0 <- data
I0428 19:50:52.971175 27143 net.cpp:382] conv0 -> conv0
I0428 19:50:53.234711 27143 net.cpp:124] Setting up conv0
I0428 19:50:53.234752 27143 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:50:53.234755 27143 net.cpp:139] Memory required for data: 938240
I0428 19:50:53.234771 27143 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:53.234783 27143 net.cpp:86] Creating Layer pool0
I0428 19:50:53.234787 27143 net.cpp:408] pool0 <- conv0
I0428 19:50:53.234792 27143 net.cpp:382] pool0 -> pool0
I0428 19:50:53.234838 27143 net.cpp:124] Setting up pool0
I0428 19:50:53.234843 27143 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:50:53.234846 27143 net.cpp:139] Memory required for data: 1122560
I0428 19:50:53.234849 27143 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:53.234858 27143 net.cpp:86] Creating Layer conv1
I0428 19:50:53.234863 27143 net.cpp:408] conv1 <- pool0
I0428 19:50:53.234866 27143 net.cpp:382] conv1 -> conv1
I0428 19:50:53.237614 27143 net.cpp:124] Setting up conv1
I0428 19:50:53.237644 27143 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:50:53.237648 27143 net.cpp:139] Memory required for data: 1286400
I0428 19:50:53.237659 27143 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:53.237666 27143 net.cpp:86] Creating Layer pool1
I0428 19:50:53.237670 27143 net.cpp:408] pool1 <- conv1
I0428 19:50:53.237674 27143 net.cpp:382] pool1 -> pool1
I0428 19:50:53.237727 27143 net.cpp:124] Setting up pool1
I0428 19:50:53.237733 27143 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:50:53.237736 27143 net.cpp:139] Memory required for data: 1327360
I0428 19:50:53.237740 27143 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:53.237746 27143 net.cpp:86] Creating Layer ip1
I0428 19:50:53.237749 27143 net.cpp:408] ip1 <- pool1
I0428 19:50:53.237754 27143 net.cpp:382] ip1 -> ip1
I0428 19:50:53.238788 27143 net.cpp:124] Setting up ip1
I0428 19:50:53.238801 27143 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:50:53.238819 27143 net.cpp:139] Memory required for data: 1340160
I0428 19:50:53.238843 27143 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:53.238867 27143 net.cpp:86] Creating Layer relu1
I0428 19:50:53.238870 27143 net.cpp:408] relu1 <- ip1
I0428 19:50:53.238875 27143 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:53.239064 27143 net.cpp:124] Setting up relu1
I0428 19:50:53.239074 27143 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:50:53.239078 27143 net.cpp:139] Memory required for data: 1352960
I0428 19:50:53.239081 27143 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:53.239089 27143 net.cpp:86] Creating Layer ip2
I0428 19:50:53.239092 27143 net.cpp:408] ip2 <- ip1
I0428 19:50:53.239099 27143 net.cpp:382] ip2 -> ip2
I0428 19:50:53.239204 27143 net.cpp:124] Setting up ip2
I0428 19:50:53.239212 27143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:53.239215 27143 net.cpp:139] Memory required for data: 1355520
I0428 19:50:53.239238 27143 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:53.239243 27143 net.cpp:86] Creating Layer relu2
I0428 19:50:53.239246 27143 net.cpp:408] relu2 <- ip2
I0428 19:50:53.239253 27143 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:53.240072 27143 net.cpp:124] Setting up relu2
I0428 19:50:53.240083 27143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:53.240103 27143 net.cpp:139] Memory required for data: 1358080
I0428 19:50:53.240106 27143 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:53.240125 27143 net.cpp:86] Creating Layer ip3
I0428 19:50:53.240128 27143 net.cpp:408] ip3 <- ip2
I0428 19:50:53.240134 27143 net.cpp:382] ip3 -> ip3
I0428 19:50:53.240238 27143 net.cpp:124] Setting up ip3
I0428 19:50:53.240245 27143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:53.240249 27143 net.cpp:139] Memory required for data: 1360640
I0428 19:50:53.240257 27143 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:53.240263 27143 net.cpp:86] Creating Layer relu3
I0428 19:50:53.240267 27143 net.cpp:408] relu3 <- ip3
I0428 19:50:53.240270 27143 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:53.240490 27143 net.cpp:124] Setting up relu3
I0428 19:50:53.240499 27143 net.cpp:131] Top shape: 64 10 (640)
I0428 19:50:53.240502 27143 net.cpp:139] Memory required for data: 1363200
I0428 19:50:53.240505 27143 layer_factory.hpp:77] Creating layer loss
I0428 19:50:53.240511 27143 net.cpp:86] Creating Layer loss
I0428 19:50:53.240514 27143 net.cpp:408] loss <- ip3
I0428 19:50:53.240519 27143 net.cpp:408] loss <- label
I0428 19:50:53.240523 27143 net.cpp:382] loss -> loss
I0428 19:50:53.240540 27143 layer_factory.hpp:77] Creating layer loss
I0428 19:50:53.240768 27143 net.cpp:124] Setting up loss
I0428 19:50:53.240777 27143 net.cpp:131] Top shape: (1)
I0428 19:50:53.240780 27143 net.cpp:134]     with loss weight 1
I0428 19:50:53.240794 27143 net.cpp:139] Memory required for data: 1363204
I0428 19:50:53.240797 27143 net.cpp:200] loss needs backward computation.
I0428 19:50:53.240800 27143 net.cpp:200] relu3 needs backward computation.
I0428 19:50:53.240803 27143 net.cpp:200] ip3 needs backward computation.
I0428 19:50:53.240806 27143 net.cpp:200] relu2 needs backward computation.
I0428 19:50:53.240815 27143 net.cpp:200] ip2 needs backward computation.
I0428 19:50:53.240834 27143 net.cpp:200] relu1 needs backward computation.
I0428 19:50:53.240839 27143 net.cpp:200] ip1 needs backward computation.
I0428 19:50:53.240841 27143 net.cpp:200] pool1 needs backward computation.
I0428 19:50:53.240844 27143 net.cpp:200] conv1 needs backward computation.
I0428 19:50:53.240846 27143 net.cpp:200] pool0 needs backward computation.
I0428 19:50:53.240849 27143 net.cpp:200] conv0 needs backward computation.
I0428 19:50:53.240854 27143 net.cpp:202] mnist does not need backward computation.
I0428 19:50:53.240857 27143 net.cpp:244] This network produces output loss
I0428 19:50:53.240881 27143 net.cpp:257] Network initialization done.
I0428 19:50:53.241312 27143 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test617.prototxt
I0428 19:50:53.241354 27143 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:50:53.241443 27143 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:50:53.241538 27143 layer_factory.hpp:77] Creating layer mnist
I0428 19:50:53.241580 27143 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:50:53.241591 27143 net.cpp:86] Creating Layer mnist
I0428 19:50:53.241597 27143 net.cpp:382] mnist -> data
I0428 19:50:53.241605 27143 net.cpp:382] mnist -> label
I0428 19:50:53.241688 27143 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:50:53.243651 27143 net.cpp:124] Setting up mnist
I0428 19:50:53.243664 27143 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:50:53.243685 27143 net.cpp:131] Top shape: 100 (100)
I0428 19:50:53.243687 27143 net.cpp:139] Memory required for data: 314000
I0428 19:50:53.243690 27143 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:50:53.243731 27143 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:50:53.243736 27143 net.cpp:408] label_mnist_1_split <- label
I0428 19:50:53.243762 27143 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:50:53.243768 27143 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:50:53.243813 27143 net.cpp:124] Setting up label_mnist_1_split
I0428 19:50:53.243821 27143 net.cpp:131] Top shape: 100 (100)
I0428 19:50:53.243825 27143 net.cpp:131] Top shape: 100 (100)
I0428 19:50:53.243829 27143 net.cpp:139] Memory required for data: 314800
I0428 19:50:53.243830 27143 layer_factory.hpp:77] Creating layer conv0
I0428 19:50:53.243841 27143 net.cpp:86] Creating Layer conv0
I0428 19:50:53.243844 27143 net.cpp:408] conv0 <- data
I0428 19:50:53.243849 27143 net.cpp:382] conv0 -> conv0
I0428 19:50:53.245702 27143 net.cpp:124] Setting up conv0
I0428 19:50:53.245717 27143 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:50:53.245719 27143 net.cpp:139] Memory required for data: 1466800
I0428 19:50:53.245728 27143 layer_factory.hpp:77] Creating layer pool0
I0428 19:50:53.245736 27143 net.cpp:86] Creating Layer pool0
I0428 19:50:53.245739 27143 net.cpp:408] pool0 <- conv0
I0428 19:50:53.245743 27143 net.cpp:382] pool0 -> pool0
I0428 19:50:53.245780 27143 net.cpp:124] Setting up pool0
I0428 19:50:53.245785 27143 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:50:53.245789 27143 net.cpp:139] Memory required for data: 1754800
I0428 19:50:53.245790 27143 layer_factory.hpp:77] Creating layer conv1
I0428 19:50:53.245800 27143 net.cpp:86] Creating Layer conv1
I0428 19:50:53.245802 27143 net.cpp:408] conv1 <- pool0
I0428 19:50:53.245808 27143 net.cpp:382] conv1 -> conv1
I0428 19:50:53.247982 27143 net.cpp:124] Setting up conv1
I0428 19:50:53.247995 27143 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:50:53.248000 27143 net.cpp:139] Memory required for data: 2010800
I0428 19:50:53.248010 27143 layer_factory.hpp:77] Creating layer pool1
I0428 19:50:53.248044 27143 net.cpp:86] Creating Layer pool1
I0428 19:50:53.248049 27143 net.cpp:408] pool1 <- conv1
I0428 19:50:53.248069 27143 net.cpp:382] pool1 -> pool1
I0428 19:50:53.248108 27143 net.cpp:124] Setting up pool1
I0428 19:50:53.248128 27143 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:50:53.248131 27143 net.cpp:139] Memory required for data: 2074800
I0428 19:50:53.248134 27143 layer_factory.hpp:77] Creating layer ip1
I0428 19:50:53.248141 27143 net.cpp:86] Creating Layer ip1
I0428 19:50:53.248143 27143 net.cpp:408] ip1 <- pool1
I0428 19:50:53.248148 27143 net.cpp:382] ip1 -> ip1
I0428 19:50:53.248325 27143 net.cpp:124] Setting up ip1
I0428 19:50:53.248332 27143 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:50:53.248344 27143 net.cpp:139] Memory required for data: 2094800
I0428 19:50:53.248353 27143 layer_factory.hpp:77] Creating layer relu1
I0428 19:50:53.248364 27143 net.cpp:86] Creating Layer relu1
I0428 19:50:53.248368 27143 net.cpp:408] relu1 <- ip1
I0428 19:50:53.248371 27143 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:50:53.248598 27143 net.cpp:124] Setting up relu1
I0428 19:50:53.248607 27143 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:50:53.248611 27143 net.cpp:139] Memory required for data: 2114800
I0428 19:50:53.248615 27143 layer_factory.hpp:77] Creating layer ip2
I0428 19:50:53.248628 27143 net.cpp:86] Creating Layer ip2
I0428 19:50:53.248631 27143 net.cpp:408] ip2 <- ip1
I0428 19:50:53.248636 27143 net.cpp:382] ip2 -> ip2
I0428 19:50:53.248733 27143 net.cpp:124] Setting up ip2
I0428 19:50:53.248740 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.248744 27143 net.cpp:139] Memory required for data: 2118800
I0428 19:50:53.248749 27143 layer_factory.hpp:77] Creating layer relu2
I0428 19:50:53.248754 27143 net.cpp:86] Creating Layer relu2
I0428 19:50:53.248756 27143 net.cpp:408] relu2 <- ip2
I0428 19:50:53.248760 27143 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:50:53.248975 27143 net.cpp:124] Setting up relu2
I0428 19:50:53.248999 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.249004 27143 net.cpp:139] Memory required for data: 2122800
I0428 19:50:53.249013 27143 layer_factory.hpp:77] Creating layer ip3
I0428 19:50:53.249020 27143 net.cpp:86] Creating Layer ip3
I0428 19:50:53.249023 27143 net.cpp:408] ip3 <- ip2
I0428 19:50:53.249030 27143 net.cpp:382] ip3 -> ip3
I0428 19:50:53.249138 27143 net.cpp:124] Setting up ip3
I0428 19:50:53.249162 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.249166 27143 net.cpp:139] Memory required for data: 2126800
I0428 19:50:53.249188 27143 layer_factory.hpp:77] Creating layer relu3
I0428 19:50:53.249193 27143 net.cpp:86] Creating Layer relu3
I0428 19:50:53.249212 27143 net.cpp:408] relu3 <- ip3
I0428 19:50:53.249215 27143 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:50:53.250056 27143 net.cpp:124] Setting up relu3
I0428 19:50:53.250069 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.250072 27143 net.cpp:139] Memory required for data: 2130800
I0428 19:50:53.250075 27143 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:50:53.250082 27143 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:50:53.250084 27143 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:50:53.250090 27143 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:50:53.250097 27143 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:50:53.250138 27143 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:50:53.250144 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.250149 27143 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:50:53.250150 27143 net.cpp:139] Memory required for data: 2138800
I0428 19:50:53.250154 27143 layer_factory.hpp:77] Creating layer accuracy
I0428 19:50:53.250159 27143 net.cpp:86] Creating Layer accuracy
I0428 19:50:53.250162 27143 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:50:53.250174 27143 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:50:53.250177 27143 net.cpp:382] accuracy -> accuracy
I0428 19:50:53.250185 27143 net.cpp:124] Setting up accuracy
I0428 19:50:53.250190 27143 net.cpp:131] Top shape: (1)
I0428 19:50:53.250192 27143 net.cpp:139] Memory required for data: 2138804
I0428 19:50:53.250195 27143 layer_factory.hpp:77] Creating layer loss
I0428 19:50:53.250200 27143 net.cpp:86] Creating Layer loss
I0428 19:50:53.250203 27143 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:50:53.250207 27143 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:50:53.250211 27143 net.cpp:382] loss -> loss
I0428 19:50:53.250231 27143 layer_factory.hpp:77] Creating layer loss
I0428 19:50:53.250495 27143 net.cpp:124] Setting up loss
I0428 19:50:53.250504 27143 net.cpp:131] Top shape: (1)
I0428 19:50:53.250507 27143 net.cpp:134]     with loss weight 1
I0428 19:50:53.250514 27143 net.cpp:139] Memory required for data: 2138808
I0428 19:50:53.250527 27143 net.cpp:200] loss needs backward computation.
I0428 19:50:53.250537 27143 net.cpp:202] accuracy does not need backward computation.
I0428 19:50:53.250541 27143 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:50:53.250545 27143 net.cpp:200] relu3 needs backward computation.
I0428 19:50:53.250547 27143 net.cpp:200] ip3 needs backward computation.
I0428 19:50:53.250556 27143 net.cpp:200] relu2 needs backward computation.
I0428 19:50:53.250560 27143 net.cpp:200] ip2 needs backward computation.
I0428 19:50:53.250561 27143 net.cpp:200] relu1 needs backward computation.
I0428 19:50:53.250566 27143 net.cpp:200] ip1 needs backward computation.
I0428 19:50:53.250568 27143 net.cpp:200] pool1 needs backward computation.
I0428 19:50:53.250571 27143 net.cpp:200] conv1 needs backward computation.
I0428 19:50:53.250574 27143 net.cpp:200] pool0 needs backward computation.
I0428 19:50:53.250577 27143 net.cpp:200] conv0 needs backward computation.
I0428 19:50:53.250581 27143 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:50:53.250586 27143 net.cpp:202] mnist does not need backward computation.
I0428 19:50:53.250588 27143 net.cpp:244] This network produces output accuracy
I0428 19:50:53.250591 27143 net.cpp:244] This network produces output loss
I0428 19:50:53.250604 27143 net.cpp:257] Network initialization done.
I0428 19:50:53.250646 27143 solver.cpp:56] Solver scaffolding done.
I0428 19:50:53.250988 27143 caffe.cpp:248] Starting Optimization
I0428 19:50:53.250995 27143 solver.cpp:273] Solving LeNet
I0428 19:50:53.250998 27143 solver.cpp:274] Learning Rate Policy: inv
I0428 19:50:53.251824 27143 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:50:53.255128 27143 blocking_queue.cpp:49] Waiting for data
I0428 19:50:53.328299 27150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:53.329008 27143 solver.cpp:398]     Test net output #0: accuracy = 0.1542
I0428 19:50:53.329047 27143 solver.cpp:398]     Test net output #1: loss = 2.31032 (* 1 = 2.31032 loss)
I0428 19:50:53.331975 27143 solver.cpp:219] Iteration 0 (-9.91344e-38 iter/s, 0.080936s/100 iters), loss = 2.30858
I0428 19:50:53.332020 27143 solver.cpp:238]     Train net output #0: loss = 2.30858 (* 1 = 2.30858 loss)
I0428 19:50:53.332041 27143 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:50:53.422106 27143 solver.cpp:219] Iteration 100 (1110.2 iter/s, 0.0900741s/100 iters), loss = 1.63001
I0428 19:50:53.422140 27143 solver.cpp:238]     Train net output #0: loss = 1.63001 (* 1 = 1.63001 loss)
I0428 19:50:53.422149 27143 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:50:53.502352 27143 solver.cpp:219] Iteration 200 (1246.86 iter/s, 0.0802017s/100 iters), loss = 1.63295
I0428 19:50:53.502382 27143 solver.cpp:238]     Train net output #0: loss = 1.63295 (* 1 = 1.63295 loss)
I0428 19:50:53.502390 27143 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:50:53.582515 27143 solver.cpp:219] Iteration 300 (1248.08 iter/s, 0.0801229s/100 iters), loss = 0.839682
I0428 19:50:53.582545 27143 solver.cpp:238]     Train net output #0: loss = 0.839682 (* 1 = 0.839682 loss)
I0428 19:50:53.582553 27143 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:50:53.663019 27143 solver.cpp:219] Iteration 400 (1242.79 iter/s, 0.0804639s/100 iters), loss = 1.06338
I0428 19:50:53.663049 27143 solver.cpp:238]     Train net output #0: loss = 1.06338 (* 1 = 1.06338 loss)
I0428 19:50:53.663056 27143 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:50:53.742791 27143 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:50:53.817371 27150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:53.817931 27143 solver.cpp:398]     Test net output #0: accuracy = 0.6515
I0428 19:50:53.817956 27143 solver.cpp:398]     Test net output #1: loss = 0.918245 (* 1 = 0.918245 loss)
I0428 19:50:53.818836 27143 solver.cpp:219] Iteration 500 (641.96 iter/s, 0.155773s/100 iters), loss = 1.0481
I0428 19:50:53.818863 27143 solver.cpp:238]     Train net output #0: loss = 1.0481 (* 1 = 1.0481 loss)
I0428 19:50:53.818892 27143 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:50:53.900239 27143 solver.cpp:219] Iteration 600 (1229.08 iter/s, 0.0813619s/100 iters), loss = 1.00149
I0428 19:50:53.900269 27143 solver.cpp:238]     Train net output #0: loss = 1.00149 (* 1 = 1.00149 loss)
I0428 19:50:53.900277 27143 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:50:53.980610 27143 solver.cpp:219] Iteration 700 (1244.85 iter/s, 0.0803308s/100 iters), loss = 0.762427
I0428 19:50:53.980640 27143 solver.cpp:238]     Train net output #0: loss = 0.762427 (* 1 = 0.762427 loss)
I0428 19:50:53.980648 27143 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:50:54.060062 27143 solver.cpp:219] Iteration 800 (1259.24 iter/s, 0.0794131s/100 iters), loss = 0.62037
I0428 19:50:54.060092 27143 solver.cpp:238]     Train net output #0: loss = 0.62037 (* 1 = 0.62037 loss)
I0428 19:50:54.060101 27143 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:50:54.139184 27143 solver.cpp:219] Iteration 900 (1264.5 iter/s, 0.0790826s/100 iters), loss = 0.619806
I0428 19:50:54.139210 27143 solver.cpp:238]     Train net output #0: loss = 0.619806 (* 1 = 0.619806 loss)
I0428 19:50:54.139217 27143 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:50:54.165304 27149 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:54.217046 27143 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:50:54.217860 27143 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:50:54.218405 27143 solver.cpp:311] Iteration 1000, loss = 0.511725
I0428 19:50:54.218422 27143 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:50:54.293499 27150 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:50:54.294162 27143 solver.cpp:398]     Test net output #0: accuracy = 0.8432
I0428 19:50:54.294198 27143 solver.cpp:398]     Test net output #1: loss = 0.42688 (* 1 = 0.42688 loss)
I0428 19:50:54.294206 27143 solver.cpp:316] Optimization Done.
I0428 19:50:54.294211 27143 caffe.cpp:259] Optimization Done.
