I0428 20:14:48.888547 32755 caffe.cpp:218] Using GPUs 0
I0428 20:14:48.926312 32755 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:49.444232 32755 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1231.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:49.444370 32755 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1231.prototxt
I0428 20:14:49.444782 32755 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:49.444802 32755 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:49.444912 32755 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:49.444993 32755 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:49.445091 32755 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:49.445118 32755 net.cpp:86] Creating Layer mnist
I0428 20:14:49.445125 32755 net.cpp:382] mnist -> data
I0428 20:14:49.445149 32755 net.cpp:382] mnist -> label
I0428 20:14:49.446235 32755 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:49.448691 32755 net.cpp:124] Setting up mnist
I0428 20:14:49.448719 32755 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:49.448725 32755 net.cpp:131] Top shape: 64 (64)
I0428 20:14:49.448729 32755 net.cpp:139] Memory required for data: 200960
I0428 20:14:49.448737 32755 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:49.448755 32755 net.cpp:86] Creating Layer conv0
I0428 20:14:49.448774 32755 net.cpp:408] conv0 <- data
I0428 20:14:49.448787 32755 net.cpp:382] conv0 -> conv0
I0428 20:14:49.740190 32755 net.cpp:124] Setting up conv0
I0428 20:14:49.740219 32755 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:49.740223 32755 net.cpp:139] Memory required for data: 7573760
I0428 20:14:49.740241 32755 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:49.740254 32755 net.cpp:86] Creating Layer pool0
I0428 20:14:49.740258 32755 net.cpp:408] pool0 <- conv0
I0428 20:14:49.740264 32755 net.cpp:382] pool0 -> pool0
I0428 20:14:49.740316 32755 net.cpp:124] Setting up pool0
I0428 20:14:49.740322 32755 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:49.740325 32755 net.cpp:139] Memory required for data: 9416960
I0428 20:14:49.740329 32755 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:49.740340 32755 net.cpp:86] Creating Layer conv1
I0428 20:14:49.740345 32755 net.cpp:408] conv1 <- pool0
I0428 20:14:49.740350 32755 net.cpp:382] conv1 -> conv1
I0428 20:14:49.742352 32755 net.cpp:124] Setting up conv1
I0428 20:14:49.742369 32755 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:49.742373 32755 net.cpp:139] Memory required for data: 9449728
I0428 20:14:49.742383 32755 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:49.742391 32755 net.cpp:86] Creating Layer pool1
I0428 20:14:49.742394 32755 net.cpp:408] pool1 <- conv1
I0428 20:14:49.742400 32755 net.cpp:382] pool1 -> pool1
I0428 20:14:49.742440 32755 net.cpp:124] Setting up pool1
I0428 20:14:49.742456 32755 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:49.742460 32755 net.cpp:139] Memory required for data: 9457920
I0428 20:14:49.742463 32755 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:49.742471 32755 net.cpp:86] Creating Layer ip1
I0428 20:14:49.742475 32755 net.cpp:408] ip1 <- pool1
I0428 20:14:49.742480 32755 net.cpp:382] ip1 -> ip1
I0428 20:14:49.742586 32755 net.cpp:124] Setting up ip1
I0428 20:14:49.742594 32755 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:49.742597 32755 net.cpp:139] Memory required for data: 9464320
I0428 20:14:49.742605 32755 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:49.742610 32755 net.cpp:86] Creating Layer relu1
I0428 20:14:49.742614 32755 net.cpp:408] relu1 <- ip1
I0428 20:14:49.742619 32755 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:49.742799 32755 net.cpp:124] Setting up relu1
I0428 20:14:49.742810 32755 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:49.742812 32755 net.cpp:139] Memory required for data: 9470720
I0428 20:14:49.742816 32755 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:49.742822 32755 net.cpp:86] Creating Layer ip2
I0428 20:14:49.742826 32755 net.cpp:408] ip2 <- ip1
I0428 20:14:49.742831 32755 net.cpp:382] ip2 -> ip2
I0428 20:14:49.742934 32755 net.cpp:124] Setting up ip2
I0428 20:14:49.742941 32755 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:49.742945 32755 net.cpp:139] Memory required for data: 9473280
I0428 20:14:49.742951 32755 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:49.742957 32755 net.cpp:86] Creating Layer relu2
I0428 20:14:49.742961 32755 net.cpp:408] relu2 <- ip2
I0428 20:14:49.742965 32755 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:49.743744 32755 net.cpp:124] Setting up relu2
I0428 20:14:49.743757 32755 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:49.743762 32755 net.cpp:139] Memory required for data: 9475840
I0428 20:14:49.743765 32755 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:49.743772 32755 net.cpp:86] Creating Layer ip3
I0428 20:14:49.743777 32755 net.cpp:408] ip3 <- ip2
I0428 20:14:49.743782 32755 net.cpp:382] ip3 -> ip3
I0428 20:14:49.743890 32755 net.cpp:124] Setting up ip3
I0428 20:14:49.743897 32755 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:49.743901 32755 net.cpp:139] Memory required for data: 9478400
I0428 20:14:49.743909 32755 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:49.743916 32755 net.cpp:86] Creating Layer relu3
I0428 20:14:49.743918 32755 net.cpp:408] relu3 <- ip3
I0428 20:14:49.743923 32755 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:49.744102 32755 net.cpp:124] Setting up relu3
I0428 20:14:49.744112 32755 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:49.744115 32755 net.cpp:139] Memory required for data: 9480960
I0428 20:14:49.744119 32755 layer_factory.hpp:77] Creating layer loss
I0428 20:14:49.744124 32755 net.cpp:86] Creating Layer loss
I0428 20:14:49.744128 32755 net.cpp:408] loss <- ip3
I0428 20:14:49.744150 32755 net.cpp:408] loss <- label
I0428 20:14:49.744156 32755 net.cpp:382] loss -> loss
I0428 20:14:49.744174 32755 layer_factory.hpp:77] Creating layer loss
I0428 20:14:49.744416 32755 net.cpp:124] Setting up loss
I0428 20:14:49.744426 32755 net.cpp:131] Top shape: (1)
I0428 20:14:49.744429 32755 net.cpp:134]     with loss weight 1
I0428 20:14:49.744444 32755 net.cpp:139] Memory required for data: 9480964
I0428 20:14:49.744448 32755 net.cpp:200] loss needs backward computation.
I0428 20:14:49.744452 32755 net.cpp:200] relu3 needs backward computation.
I0428 20:14:49.744457 32755 net.cpp:200] ip3 needs backward computation.
I0428 20:14:49.744459 32755 net.cpp:200] relu2 needs backward computation.
I0428 20:14:49.744462 32755 net.cpp:200] ip2 needs backward computation.
I0428 20:14:49.744467 32755 net.cpp:200] relu1 needs backward computation.
I0428 20:14:49.744469 32755 net.cpp:200] ip1 needs backward computation.
I0428 20:14:49.744472 32755 net.cpp:200] pool1 needs backward computation.
I0428 20:14:49.744477 32755 net.cpp:200] conv1 needs backward computation.
I0428 20:14:49.744479 32755 net.cpp:200] pool0 needs backward computation.
I0428 20:14:49.744483 32755 net.cpp:200] conv0 needs backward computation.
I0428 20:14:49.744488 32755 net.cpp:202] mnist does not need backward computation.
I0428 20:14:49.744490 32755 net.cpp:244] This network produces output loss
I0428 20:14:49.744500 32755 net.cpp:257] Network initialization done.
I0428 20:14:49.744855 32755 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1231.prototxt
I0428 20:14:49.744885 32755 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:49.744987 32755 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:49.745071 32755 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:49.745120 32755 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:49.745133 32755 net.cpp:86] Creating Layer mnist
I0428 20:14:49.745138 32755 net.cpp:382] mnist -> data
I0428 20:14:49.745146 32755 net.cpp:382] mnist -> label
I0428 20:14:49.745239 32755 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:49.747261 32755 net.cpp:124] Setting up mnist
I0428 20:14:49.747275 32755 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:49.747280 32755 net.cpp:131] Top shape: 100 (100)
I0428 20:14:49.747284 32755 net.cpp:139] Memory required for data: 314000
I0428 20:14:49.747288 32755 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:49.747299 32755 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:49.747304 32755 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:49.747309 32755 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:49.747318 32755 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:49.747406 32755 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:49.747416 32755 net.cpp:131] Top shape: 100 (100)
I0428 20:14:49.747419 32755 net.cpp:131] Top shape: 100 (100)
I0428 20:14:49.747422 32755 net.cpp:139] Memory required for data: 314800
I0428 20:14:49.747426 32755 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:49.747434 32755 net.cpp:86] Creating Layer conv0
I0428 20:14:49.747438 32755 net.cpp:408] conv0 <- data
I0428 20:14:49.747443 32755 net.cpp:382] conv0 -> conv0
I0428 20:14:49.749189 32755 net.cpp:124] Setting up conv0
I0428 20:14:49.749204 32755 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:49.749207 32755 net.cpp:139] Memory required for data: 11834800
I0428 20:14:49.749217 32755 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:49.749224 32755 net.cpp:86] Creating Layer pool0
I0428 20:14:49.749228 32755 net.cpp:408] pool0 <- conv0
I0428 20:14:49.749233 32755 net.cpp:382] pool0 -> pool0
I0428 20:14:49.749272 32755 net.cpp:124] Setting up pool0
I0428 20:14:49.749279 32755 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:49.749281 32755 net.cpp:139] Memory required for data: 14714800
I0428 20:14:49.749284 32755 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:49.749292 32755 net.cpp:86] Creating Layer conv1
I0428 20:14:49.749296 32755 net.cpp:408] conv1 <- pool0
I0428 20:14:49.749301 32755 net.cpp:382] conv1 -> conv1
I0428 20:14:49.750838 32755 net.cpp:124] Setting up conv1
I0428 20:14:49.750851 32755 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:49.750856 32755 net.cpp:139] Memory required for data: 14766000
I0428 20:14:49.750865 32755 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:49.750872 32755 net.cpp:86] Creating Layer pool1
I0428 20:14:49.750876 32755 net.cpp:408] pool1 <- conv1
I0428 20:14:49.750883 32755 net.cpp:382] pool1 -> pool1
I0428 20:14:49.750921 32755 net.cpp:124] Setting up pool1
I0428 20:14:49.750926 32755 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:49.750929 32755 net.cpp:139] Memory required for data: 14778800
I0428 20:14:49.750932 32755 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:49.750939 32755 net.cpp:86] Creating Layer ip1
I0428 20:14:49.750949 32755 net.cpp:408] ip1 <- pool1
I0428 20:14:49.750954 32755 net.cpp:382] ip1 -> ip1
I0428 20:14:49.751060 32755 net.cpp:124] Setting up ip1
I0428 20:14:49.751067 32755 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:49.751082 32755 net.cpp:139] Memory required for data: 14788800
I0428 20:14:49.751091 32755 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:49.751097 32755 net.cpp:86] Creating Layer relu1
I0428 20:14:49.751101 32755 net.cpp:408] relu1 <- ip1
I0428 20:14:49.751106 32755 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:49.751268 32755 net.cpp:124] Setting up relu1
I0428 20:14:49.751277 32755 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:49.751281 32755 net.cpp:139] Memory required for data: 14798800
I0428 20:14:49.751286 32755 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:49.751292 32755 net.cpp:86] Creating Layer ip2
I0428 20:14:49.751296 32755 net.cpp:408] ip2 <- ip1
I0428 20:14:49.751302 32755 net.cpp:382] ip2 -> ip2
I0428 20:14:49.751401 32755 net.cpp:124] Setting up ip2
I0428 20:14:49.751408 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.751411 32755 net.cpp:139] Memory required for data: 14802800
I0428 20:14:49.751416 32755 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:49.751422 32755 net.cpp:86] Creating Layer relu2
I0428 20:14:49.751425 32755 net.cpp:408] relu2 <- ip2
I0428 20:14:49.751430 32755 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:49.751619 32755 net.cpp:124] Setting up relu2
I0428 20:14:49.751628 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.751631 32755 net.cpp:139] Memory required for data: 14806800
I0428 20:14:49.751634 32755 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:49.751641 32755 net.cpp:86] Creating Layer ip3
I0428 20:14:49.751644 32755 net.cpp:408] ip3 <- ip2
I0428 20:14:49.751649 32755 net.cpp:382] ip3 -> ip3
I0428 20:14:49.751760 32755 net.cpp:124] Setting up ip3
I0428 20:14:49.751766 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.751770 32755 net.cpp:139] Memory required for data: 14810800
I0428 20:14:49.751778 32755 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:49.751783 32755 net.cpp:86] Creating Layer relu3
I0428 20:14:49.751786 32755 net.cpp:408] relu3 <- ip3
I0428 20:14:49.751791 32755 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:49.752591 32755 net.cpp:124] Setting up relu3
I0428 20:14:49.752605 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.752609 32755 net.cpp:139] Memory required for data: 14814800
I0428 20:14:49.752612 32755 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:49.752619 32755 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:49.752621 32755 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:49.752627 32755 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:49.752635 32755 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:49.752693 32755 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:49.752699 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.752703 32755 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:49.752707 32755 net.cpp:139] Memory required for data: 14822800
I0428 20:14:49.752709 32755 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:49.752714 32755 net.cpp:86] Creating Layer accuracy
I0428 20:14:49.752718 32755 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:49.752737 32755 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:49.752743 32755 net.cpp:382] accuracy -> accuracy
I0428 20:14:49.752749 32755 net.cpp:124] Setting up accuracy
I0428 20:14:49.752753 32755 net.cpp:131] Top shape: (1)
I0428 20:14:49.752758 32755 net.cpp:139] Memory required for data: 14822804
I0428 20:14:49.752760 32755 layer_factory.hpp:77] Creating layer loss
I0428 20:14:49.752766 32755 net.cpp:86] Creating Layer loss
I0428 20:14:49.752769 32755 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:49.752780 32755 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:49.752784 32755 net.cpp:382] loss -> loss
I0428 20:14:49.752796 32755 layer_factory.hpp:77] Creating layer loss
I0428 20:14:49.753053 32755 net.cpp:124] Setting up loss
I0428 20:14:49.753067 32755 net.cpp:131] Top shape: (1)
I0428 20:14:49.753070 32755 net.cpp:134]     with loss weight 1
I0428 20:14:49.753087 32755 net.cpp:139] Memory required for data: 14822808
I0428 20:14:49.753090 32755 net.cpp:200] loss needs backward computation.
I0428 20:14:49.753095 32755 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:49.753100 32755 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:49.753109 32755 net.cpp:200] relu3 needs backward computation.
I0428 20:14:49.753118 32755 net.cpp:200] ip3 needs backward computation.
I0428 20:14:49.753121 32755 net.cpp:200] relu2 needs backward computation.
I0428 20:14:49.753125 32755 net.cpp:200] ip2 needs backward computation.
I0428 20:14:49.753129 32755 net.cpp:200] relu1 needs backward computation.
I0428 20:14:49.753131 32755 net.cpp:200] ip1 needs backward computation.
I0428 20:14:49.753139 32755 net.cpp:200] pool1 needs backward computation.
I0428 20:14:49.753141 32755 net.cpp:200] conv1 needs backward computation.
I0428 20:14:49.753149 32755 net.cpp:200] pool0 needs backward computation.
I0428 20:14:49.753152 32755 net.cpp:200] conv0 needs backward computation.
I0428 20:14:49.753156 32755 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:49.753160 32755 net.cpp:202] mnist does not need backward computation.
I0428 20:14:49.753163 32755 net.cpp:244] This network produces output accuracy
I0428 20:14:49.753166 32755 net.cpp:244] This network produces output loss
I0428 20:14:49.753180 32755 net.cpp:257] Network initialization done.
I0428 20:14:49.753223 32755 solver.cpp:56] Solver scaffolding done.
I0428 20:14:49.753605 32755 caffe.cpp:248] Starting Optimization
I0428 20:14:49.753612 32755 solver.cpp:273] Solving LeNet
I0428 20:14:49.753614 32755 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:49.754559 32755 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:49.760933 32755 blocking_queue.cpp:49] Waiting for data
I0428 20:14:49.831655 32763 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:49.832386 32755 solver.cpp:398]     Test net output #0: accuracy = 0.0716
I0428 20:14:49.832419 32755 solver.cpp:398]     Test net output #1: loss = 2.31736 (* 1 = 2.31736 loss)
I0428 20:14:49.836597 32755 solver.cpp:219] Iteration 0 (0 iter/s, 0.0829441s/100 iters), loss = 2.33535
I0428 20:14:49.836634 32755 solver.cpp:238]     Train net output #0: loss = 2.33535 (* 1 = 2.33535 loss)
I0428 20:14:49.836645 32755 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:49.956667 32755 solver.cpp:219] Iteration 100 (833.145 iter/s, 0.120027s/100 iters), loss = 1.26346
I0428 20:14:49.956707 32755 solver.cpp:238]     Train net output #0: loss = 1.26346 (* 1 = 1.26346 loss)
I0428 20:14:49.956712 32755 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:50.089970 32755 solver.cpp:219] Iteration 200 (750.463 iter/s, 0.133251s/100 iters), loss = 1.03528
I0428 20:14:50.089993 32755 solver.cpp:238]     Train net output #0: loss = 1.03528 (* 1 = 1.03528 loss)
I0428 20:14:50.089999 32755 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:50.214793 32755 solver.cpp:219] Iteration 300 (801.381 iter/s, 0.124785s/100 iters), loss = 1.12092
I0428 20:14:50.214844 32755 solver.cpp:238]     Train net output #0: loss = 1.12092 (* 1 = 1.12092 loss)
I0428 20:14:50.214854 32755 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:50.334657 32755 solver.cpp:219] Iteration 400 (834.626 iter/s, 0.119814s/100 iters), loss = 0.958731
I0428 20:14:50.334684 32755 solver.cpp:238]     Train net output #0: loss = 0.958731 (* 1 = 0.958731 loss)
I0428 20:14:50.334692 32755 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:50.459300 32755 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:50.537343 32763 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:50.538247 32755 solver.cpp:398]     Test net output #0: accuracy = 0.7467
I0428 20:14:50.538272 32755 solver.cpp:398]     Test net output #1: loss = 0.844495 (* 1 = 0.844495 loss)
I0428 20:14:50.539499 32755 solver.cpp:219] Iteration 500 (488.284 iter/s, 0.204799s/100 iters), loss = 0.718328
I0428 20:14:50.539561 32755 solver.cpp:238]     Train net output #0: loss = 0.718328 (* 1 = 0.718328 loss)
I0428 20:14:50.539571 32755 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:50.660086 32755 solver.cpp:219] Iteration 600 (829.789 iter/s, 0.120513s/100 iters), loss = 0.637377
I0428 20:14:50.660116 32755 solver.cpp:238]     Train net output #0: loss = 0.637377 (* 1 = 0.637377 loss)
I0428 20:14:50.660125 32755 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:50.790374 32755 solver.cpp:219] Iteration 700 (767.815 iter/s, 0.13024s/100 iters), loss = 0.79701
I0428 20:14:50.790432 32755 solver.cpp:238]     Train net output #0: loss = 0.79701 (* 1 = 0.79701 loss)
I0428 20:14:50.790447 32755 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:50.918540 32755 solver.cpp:219] Iteration 800 (780.638 iter/s, 0.1281s/100 iters), loss = 0.60087
I0428 20:14:50.918573 32755 solver.cpp:238]     Train net output #0: loss = 0.60087 (* 1 = 0.60087 loss)
I0428 20:14:50.918582 32755 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:51.048075 32755 solver.cpp:219] Iteration 900 (772.279 iter/s, 0.129487s/100 iters), loss = 0.711235
I0428 20:14:51.048120 32755 solver.cpp:238]     Train net output #0: loss = 0.711235 (* 1 = 0.711235 loss)
I0428 20:14:51.048131 32755 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:51.090021 32761 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:51.169067 32755 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:51.170052 32755 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:51.170784 32755 solver.cpp:311] Iteration 1000, loss = 0.756916
I0428 20:14:51.170804 32755 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:51.253435 32763 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:51.254510 32755 solver.cpp:398]     Test net output #0: accuracy = 0.8526
I0428 20:14:51.254544 32755 solver.cpp:398]     Test net output #1: loss = 0.606523 (* 1 = 0.606523 loss)
I0428 20:14:51.254550 32755 solver.cpp:316] Optimization Done.
I0428 20:14:51.254555 32755 caffe.cpp:259] Optimization Done.
