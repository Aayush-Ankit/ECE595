I0428 19:51:44.023344 27351 caffe.cpp:218] Using GPUs 0
I0428 19:51:44.053141 27351 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:51:44.500449 27351 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test642.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:51:44.500609 27351 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test642.prototxt
I0428 19:51:44.500982 27351 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:51:44.500998 27351 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:51:44.501085 27351 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:51:44.501164 27351 layer_factory.hpp:77] Creating layer mnist
I0428 19:51:44.501258 27351 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:51:44.501277 27351 net.cpp:86] Creating Layer mnist
I0428 19:51:44.501284 27351 net.cpp:382] mnist -> data
I0428 19:51:44.501302 27351 net.cpp:382] mnist -> label
I0428 19:51:44.502256 27351 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:51:44.504520 27351 net.cpp:124] Setting up mnist
I0428 19:51:44.504549 27351 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:51:44.504554 27351 net.cpp:131] Top shape: 64 (64)
I0428 19:51:44.504556 27351 net.cpp:139] Memory required for data: 200960
I0428 19:51:44.504562 27351 layer_factory.hpp:77] Creating layer conv0
I0428 19:51:44.504606 27351 net.cpp:86] Creating Layer conv0
I0428 19:51:44.504638 27351 net.cpp:408] conv0 <- data
I0428 19:51:44.504650 27351 net.cpp:382] conv0 -> conv0
I0428 19:51:44.732525 27351 net.cpp:124] Setting up conv0
I0428 19:51:44.732553 27351 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:51:44.732555 27351 net.cpp:139] Memory required for data: 938240
I0428 19:51:44.732569 27351 layer_factory.hpp:77] Creating layer pool0
I0428 19:51:44.732583 27351 net.cpp:86] Creating Layer pool0
I0428 19:51:44.732587 27351 net.cpp:408] pool0 <- conv0
I0428 19:51:44.732592 27351 net.cpp:382] pool0 -> pool0
I0428 19:51:44.732651 27351 net.cpp:124] Setting up pool0
I0428 19:51:44.732657 27351 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:51:44.732659 27351 net.cpp:139] Memory required for data: 1122560
I0428 19:51:44.732662 27351 layer_factory.hpp:77] Creating layer conv1
I0428 19:51:44.732673 27351 net.cpp:86] Creating Layer conv1
I0428 19:51:44.732676 27351 net.cpp:408] conv1 <- pool0
I0428 19:51:44.732681 27351 net.cpp:382] conv1 -> conv1
I0428 19:51:44.735522 27351 net.cpp:124] Setting up conv1
I0428 19:51:44.735546 27351 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:51:44.735550 27351 net.cpp:139] Memory required for data: 1532160
I0428 19:51:44.735558 27351 layer_factory.hpp:77] Creating layer pool1
I0428 19:51:44.735565 27351 net.cpp:86] Creating Layer pool1
I0428 19:51:44.735569 27351 net.cpp:408] pool1 <- conv1
I0428 19:51:44.735574 27351 net.cpp:382] pool1 -> pool1
I0428 19:51:44.735627 27351 net.cpp:124] Setting up pool1
I0428 19:51:44.735633 27351 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:51:44.735636 27351 net.cpp:139] Memory required for data: 1634560
I0428 19:51:44.735640 27351 layer_factory.hpp:77] Creating layer ip1
I0428 19:51:44.735646 27351 net.cpp:86] Creating Layer ip1
I0428 19:51:44.735649 27351 net.cpp:408] ip1 <- pool1
I0428 19:51:44.735653 27351 net.cpp:382] ip1 -> ip1
I0428 19:51:44.735786 27351 net.cpp:124] Setting up ip1
I0428 19:51:44.735795 27351 net.cpp:131] Top shape: 64 10 (640)
I0428 19:51:44.735797 27351 net.cpp:139] Memory required for data: 1637120
I0428 19:51:44.735805 27351 layer_factory.hpp:77] Creating layer relu1
I0428 19:51:44.735810 27351 net.cpp:86] Creating Layer relu1
I0428 19:51:44.735812 27351 net.cpp:408] relu1 <- ip1
I0428 19:51:44.735816 27351 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:51:44.735980 27351 net.cpp:124] Setting up relu1
I0428 19:51:44.735990 27351 net.cpp:131] Top shape: 64 10 (640)
I0428 19:51:44.735992 27351 net.cpp:139] Memory required for data: 1639680
I0428 19:51:44.735996 27351 layer_factory.hpp:77] Creating layer ip2
I0428 19:51:44.736001 27351 net.cpp:86] Creating Layer ip2
I0428 19:51:44.736003 27351 net.cpp:408] ip2 <- ip1
I0428 19:51:44.736008 27351 net.cpp:382] ip2 -> ip2
I0428 19:51:44.736100 27351 net.cpp:124] Setting up ip2
I0428 19:51:44.736107 27351 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:51:44.736110 27351 net.cpp:139] Memory required for data: 1652480
I0428 19:51:44.736115 27351 layer_factory.hpp:77] Creating layer relu2
I0428 19:51:44.736121 27351 net.cpp:86] Creating Layer relu2
I0428 19:51:44.736124 27351 net.cpp:408] relu2 <- ip2
I0428 19:51:44.736127 27351 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:51:44.736928 27351 net.cpp:124] Setting up relu2
I0428 19:51:44.736940 27351 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:51:44.736944 27351 net.cpp:139] Memory required for data: 1665280
I0428 19:51:44.736948 27351 layer_factory.hpp:77] Creating layer ip3
I0428 19:51:44.736953 27351 net.cpp:86] Creating Layer ip3
I0428 19:51:44.736958 27351 net.cpp:408] ip3 <- ip2
I0428 19:51:44.736963 27351 net.cpp:382] ip3 -> ip3
I0428 19:51:44.737061 27351 net.cpp:124] Setting up ip3
I0428 19:51:44.737068 27351 net.cpp:131] Top shape: 64 10 (640)
I0428 19:51:44.737071 27351 net.cpp:139] Memory required for data: 1667840
I0428 19:51:44.737093 27351 layer_factory.hpp:77] Creating layer relu3
I0428 19:51:44.737099 27351 net.cpp:86] Creating Layer relu3
I0428 19:51:44.737102 27351 net.cpp:408] relu3 <- ip3
I0428 19:51:44.737107 27351 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:51:44.737277 27351 net.cpp:124] Setting up relu3
I0428 19:51:44.737287 27351 net.cpp:131] Top shape: 64 10 (640)
I0428 19:51:44.737289 27351 net.cpp:139] Memory required for data: 1670400
I0428 19:51:44.737293 27351 layer_factory.hpp:77] Creating layer loss
I0428 19:51:44.737298 27351 net.cpp:86] Creating Layer loss
I0428 19:51:44.737300 27351 net.cpp:408] loss <- ip3
I0428 19:51:44.737304 27351 net.cpp:408] loss <- label
I0428 19:51:44.737309 27351 net.cpp:382] loss -> loss
I0428 19:51:44.737326 27351 layer_factory.hpp:77] Creating layer loss
I0428 19:51:44.737545 27351 net.cpp:124] Setting up loss
I0428 19:51:44.737553 27351 net.cpp:131] Top shape: (1)
I0428 19:51:44.737557 27351 net.cpp:134]     with loss weight 1
I0428 19:51:44.737571 27351 net.cpp:139] Memory required for data: 1670404
I0428 19:51:44.737576 27351 net.cpp:200] loss needs backward computation.
I0428 19:51:44.737578 27351 net.cpp:200] relu3 needs backward computation.
I0428 19:51:44.737581 27351 net.cpp:200] ip3 needs backward computation.
I0428 19:51:44.737584 27351 net.cpp:200] relu2 needs backward computation.
I0428 19:51:44.737587 27351 net.cpp:200] ip2 needs backward computation.
I0428 19:51:44.737589 27351 net.cpp:200] relu1 needs backward computation.
I0428 19:51:44.737592 27351 net.cpp:200] ip1 needs backward computation.
I0428 19:51:44.737596 27351 net.cpp:200] pool1 needs backward computation.
I0428 19:51:44.737598 27351 net.cpp:200] conv1 needs backward computation.
I0428 19:51:44.737617 27351 net.cpp:200] pool0 needs backward computation.
I0428 19:51:44.737620 27351 net.cpp:200] conv0 needs backward computation.
I0428 19:51:44.737624 27351 net.cpp:202] mnist does not need backward computation.
I0428 19:51:44.737627 27351 net.cpp:244] This network produces output loss
I0428 19:51:44.737637 27351 net.cpp:257] Network initialization done.
I0428 19:51:44.738039 27351 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test642.prototxt
I0428 19:51:44.738065 27351 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:51:44.738158 27351 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:51:44.738277 27351 layer_factory.hpp:77] Creating layer mnist
I0428 19:51:44.738320 27351 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:51:44.738332 27351 net.cpp:86] Creating Layer mnist
I0428 19:51:44.738337 27351 net.cpp:382] mnist -> data
I0428 19:51:44.738343 27351 net.cpp:382] mnist -> label
I0428 19:51:44.738421 27351 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:51:44.740572 27351 net.cpp:124] Setting up mnist
I0428 19:51:44.740602 27351 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:51:44.740607 27351 net.cpp:131] Top shape: 100 (100)
I0428 19:51:44.740610 27351 net.cpp:139] Memory required for data: 314000
I0428 19:51:44.740613 27351 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:51:44.740623 27351 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:51:44.740628 27351 net.cpp:408] label_mnist_1_split <- label
I0428 19:51:44.740631 27351 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:51:44.740638 27351 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:51:44.740731 27351 net.cpp:124] Setting up label_mnist_1_split
I0428 19:51:44.740739 27351 net.cpp:131] Top shape: 100 (100)
I0428 19:51:44.740743 27351 net.cpp:131] Top shape: 100 (100)
I0428 19:51:44.740746 27351 net.cpp:139] Memory required for data: 314800
I0428 19:51:44.740749 27351 layer_factory.hpp:77] Creating layer conv0
I0428 19:51:44.740757 27351 net.cpp:86] Creating Layer conv0
I0428 19:51:44.740761 27351 net.cpp:408] conv0 <- data
I0428 19:51:44.740766 27351 net.cpp:382] conv0 -> conv0
I0428 19:51:44.742468 27351 net.cpp:124] Setting up conv0
I0428 19:51:44.742497 27351 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:51:44.742501 27351 net.cpp:139] Memory required for data: 1466800
I0428 19:51:44.742509 27351 layer_factory.hpp:77] Creating layer pool0
I0428 19:51:44.742516 27351 net.cpp:86] Creating Layer pool0
I0428 19:51:44.742519 27351 net.cpp:408] pool0 <- conv0
I0428 19:51:44.742523 27351 net.cpp:382] pool0 -> pool0
I0428 19:51:44.742574 27351 net.cpp:124] Setting up pool0
I0428 19:51:44.742579 27351 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:51:44.742583 27351 net.cpp:139] Memory required for data: 1754800
I0428 19:51:44.742585 27351 layer_factory.hpp:77] Creating layer conv1
I0428 19:51:44.742594 27351 net.cpp:86] Creating Layer conv1
I0428 19:51:44.742596 27351 net.cpp:408] conv1 <- pool0
I0428 19:51:44.742600 27351 net.cpp:382] conv1 -> conv1
I0428 19:51:44.744827 27351 net.cpp:124] Setting up conv1
I0428 19:51:44.744840 27351 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:51:44.744859 27351 net.cpp:139] Memory required for data: 2394800
I0428 19:51:44.744868 27351 layer_factory.hpp:77] Creating layer pool1
I0428 19:51:44.744874 27351 net.cpp:86] Creating Layer pool1
I0428 19:51:44.744877 27351 net.cpp:408] pool1 <- conv1
I0428 19:51:44.744882 27351 net.cpp:382] pool1 -> pool1
I0428 19:51:44.744969 27351 net.cpp:124] Setting up pool1
I0428 19:51:44.744977 27351 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:51:44.744981 27351 net.cpp:139] Memory required for data: 2554800
I0428 19:51:44.744983 27351 layer_factory.hpp:77] Creating layer ip1
I0428 19:51:44.744989 27351 net.cpp:86] Creating Layer ip1
I0428 19:51:44.744992 27351 net.cpp:408] ip1 <- pool1
I0428 19:51:44.744997 27351 net.cpp:382] ip1 -> ip1
I0428 19:51:44.745128 27351 net.cpp:124] Setting up ip1
I0428 19:51:44.745136 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.745151 27351 net.cpp:139] Memory required for data: 2558800
I0428 19:51:44.745157 27351 layer_factory.hpp:77] Creating layer relu1
I0428 19:51:44.745163 27351 net.cpp:86] Creating Layer relu1
I0428 19:51:44.745167 27351 net.cpp:408] relu1 <- ip1
I0428 19:51:44.745170 27351 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:51:44.745364 27351 net.cpp:124] Setting up relu1
I0428 19:51:44.745373 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.745376 27351 net.cpp:139] Memory required for data: 2562800
I0428 19:51:44.745380 27351 layer_factory.hpp:77] Creating layer ip2
I0428 19:51:44.745386 27351 net.cpp:86] Creating Layer ip2
I0428 19:51:44.745390 27351 net.cpp:408] ip2 <- ip1
I0428 19:51:44.745395 27351 net.cpp:382] ip2 -> ip2
I0428 19:51:44.745498 27351 net.cpp:124] Setting up ip2
I0428 19:51:44.745507 27351 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:51:44.745509 27351 net.cpp:139] Memory required for data: 2582800
I0428 19:51:44.745515 27351 layer_factory.hpp:77] Creating layer relu2
I0428 19:51:44.745520 27351 net.cpp:86] Creating Layer relu2
I0428 19:51:44.745523 27351 net.cpp:408] relu2 <- ip2
I0428 19:51:44.745527 27351 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:51:44.745743 27351 net.cpp:124] Setting up relu2
I0428 19:51:44.745751 27351 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:51:44.745755 27351 net.cpp:139] Memory required for data: 2602800
I0428 19:51:44.745759 27351 layer_factory.hpp:77] Creating layer ip3
I0428 19:51:44.745777 27351 net.cpp:86] Creating Layer ip3
I0428 19:51:44.745780 27351 net.cpp:408] ip3 <- ip2
I0428 19:51:44.745785 27351 net.cpp:382] ip3 -> ip3
I0428 19:51:44.745910 27351 net.cpp:124] Setting up ip3
I0428 19:51:44.745918 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.745936 27351 net.cpp:139] Memory required for data: 2606800
I0428 19:51:44.745945 27351 layer_factory.hpp:77] Creating layer relu3
I0428 19:51:44.745950 27351 net.cpp:86] Creating Layer relu3
I0428 19:51:44.745954 27351 net.cpp:408] relu3 <- ip3
I0428 19:51:44.745959 27351 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:51:44.746800 27351 net.cpp:124] Setting up relu3
I0428 19:51:44.746812 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.746831 27351 net.cpp:139] Memory required for data: 2610800
I0428 19:51:44.746834 27351 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:51:44.746840 27351 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:51:44.746843 27351 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:51:44.746848 27351 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:51:44.746860 27351 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:51:44.746899 27351 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:51:44.746904 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.746908 27351 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:51:44.746912 27351 net.cpp:139] Memory required for data: 2618800
I0428 19:51:44.746913 27351 layer_factory.hpp:77] Creating layer accuracy
I0428 19:51:44.746919 27351 net.cpp:86] Creating Layer accuracy
I0428 19:51:44.746923 27351 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:51:44.746927 27351 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:51:44.746932 27351 net.cpp:382] accuracy -> accuracy
I0428 19:51:44.746938 27351 net.cpp:124] Setting up accuracy
I0428 19:51:44.746942 27351 net.cpp:131] Top shape: (1)
I0428 19:51:44.746944 27351 net.cpp:139] Memory required for data: 2618804
I0428 19:51:44.746948 27351 layer_factory.hpp:77] Creating layer loss
I0428 19:51:44.746953 27351 net.cpp:86] Creating Layer loss
I0428 19:51:44.746956 27351 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:51:44.746959 27351 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:51:44.746963 27351 net.cpp:382] loss -> loss
I0428 19:51:44.746969 27351 layer_factory.hpp:77] Creating layer loss
I0428 19:51:44.747220 27351 net.cpp:124] Setting up loss
I0428 19:51:44.747228 27351 net.cpp:131] Top shape: (1)
I0428 19:51:44.747231 27351 net.cpp:134]     with loss weight 1
I0428 19:51:44.747237 27351 net.cpp:139] Memory required for data: 2618808
I0428 19:51:44.747249 27351 net.cpp:200] loss needs backward computation.
I0428 19:51:44.747253 27351 net.cpp:202] accuracy does not need backward computation.
I0428 19:51:44.747257 27351 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:51:44.747261 27351 net.cpp:200] relu3 needs backward computation.
I0428 19:51:44.747262 27351 net.cpp:200] ip3 needs backward computation.
I0428 19:51:44.747265 27351 net.cpp:200] relu2 needs backward computation.
I0428 19:51:44.747268 27351 net.cpp:200] ip2 needs backward computation.
I0428 19:51:44.747272 27351 net.cpp:200] relu1 needs backward computation.
I0428 19:51:44.747273 27351 net.cpp:200] ip1 needs backward computation.
I0428 19:51:44.747277 27351 net.cpp:200] pool1 needs backward computation.
I0428 19:51:44.747279 27351 net.cpp:200] conv1 needs backward computation.
I0428 19:51:44.747282 27351 net.cpp:200] pool0 needs backward computation.
I0428 19:51:44.747285 27351 net.cpp:200] conv0 needs backward computation.
I0428 19:51:44.747288 27351 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:51:44.747293 27351 net.cpp:202] mnist does not need backward computation.
I0428 19:51:44.747297 27351 net.cpp:244] This network produces output accuracy
I0428 19:51:44.747299 27351 net.cpp:244] This network produces output loss
I0428 19:51:44.747309 27351 net.cpp:257] Network initialization done.
I0428 19:51:44.747361 27351 solver.cpp:56] Solver scaffolding done.
I0428 19:51:44.747783 27351 caffe.cpp:248] Starting Optimization
I0428 19:51:44.747790 27351 solver.cpp:273] Solving LeNet
I0428 19:51:44.747792 27351 solver.cpp:274] Learning Rate Policy: inv
I0428 19:51:44.748591 27351 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:51:44.752701 27351 blocking_queue.cpp:49] Waiting for data
I0428 19:51:44.826107 27358 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:51:44.826668 27351 solver.cpp:398]     Test net output #0: accuracy = 0.1333
I0428 19:51:44.826704 27351 solver.cpp:398]     Test net output #1: loss = 2.29392 (* 1 = 2.29392 loss)
I0428 19:51:44.828389 27351 solver.cpp:219] Iteration 0 (0 iter/s, 0.080553s/100 iters), loss = 2.29775
I0428 19:51:44.828433 27351 solver.cpp:238]     Train net output #0: loss = 2.29775 (* 1 = 2.29775 loss)
I0428 19:51:44.828444 27351 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:51:44.913600 27351 solver.cpp:219] Iteration 100 (1174.33 iter/s, 0.0851549s/100 iters), loss = 1.14182
I0428 19:51:44.913625 27351 solver.cpp:238]     Train net output #0: loss = 1.14182 (* 1 = 1.14182 loss)
I0428 19:51:44.913630 27351 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:51:44.998103 27351 solver.cpp:219] Iteration 200 (1183.86 iter/s, 0.0844698s/100 iters), loss = 1.22636
I0428 19:51:44.998142 27351 solver.cpp:238]     Train net output #0: loss = 1.22636 (* 1 = 1.22636 loss)
I0428 19:51:44.998147 27351 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:51:45.083361 27351 solver.cpp:219] Iteration 300 (1173.36 iter/s, 0.0852256s/100 iters), loss = 0.822877
I0428 19:51:45.083400 27351 solver.cpp:238]     Train net output #0: loss = 0.822877 (* 1 = 0.822877 loss)
I0428 19:51:45.083405 27351 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:51:45.167588 27351 solver.cpp:219] Iteration 400 (1187.71 iter/s, 0.0841953s/100 iters), loss = 0.68198
I0428 19:51:45.167625 27351 solver.cpp:238]     Train net output #0: loss = 0.68198 (* 1 = 0.68198 loss)
I0428 19:51:45.167631 27351 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:51:45.252235 27351 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:51:45.299190 27358 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:51:45.299731 27351 solver.cpp:398]     Test net output #0: accuracy = 0.6779
I0428 19:51:45.299765 27351 solver.cpp:398]     Test net output #1: loss = 0.836642 (* 1 = 0.836642 loss)
I0428 19:51:45.300614 27351 solver.cpp:219] Iteration 500 (751.919 iter/s, 0.132993s/100 iters), loss = 0.879348
I0428 19:51:45.300662 27351 solver.cpp:238]     Train net output #0: loss = 0.879348 (* 1 = 0.879348 loss)
I0428 19:51:45.300683 27351 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:51:45.384407 27351 solver.cpp:219] Iteration 600 (1194.23 iter/s, 0.0837356s/100 iters), loss = 0.660646
I0428 19:51:45.384445 27351 solver.cpp:238]     Train net output #0: loss = 0.660646 (* 1 = 0.660646 loss)
I0428 19:51:45.384451 27351 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:51:45.466224 27351 solver.cpp:219] Iteration 700 (1222.8 iter/s, 0.0817797s/100 iters), loss = 1.09146
I0428 19:51:45.466248 27351 solver.cpp:238]     Train net output #0: loss = 1.09146 (* 1 = 1.09146 loss)
I0428 19:51:45.466253 27351 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:51:45.547374 27351 solver.cpp:219] Iteration 800 (1232.78 iter/s, 0.0811172s/100 iters), loss = 0.838317
I0428 19:51:45.547397 27351 solver.cpp:238]     Train net output #0: loss = 0.838317 (* 1 = 0.838317 loss)
I0428 19:51:45.547404 27351 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:51:45.630708 27351 solver.cpp:219] Iteration 900 (1200.45 iter/s, 0.0833024s/100 iters), loss = 0.57434
I0428 19:51:45.630731 27351 solver.cpp:238]     Train net output #0: loss = 0.57434 (* 1 = 0.57434 loss)
I0428 19:51:45.630738 27351 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:51:45.658439 27357 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:51:45.712708 27351 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:51:45.713660 27351 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:51:45.714179 27351 solver.cpp:311] Iteration 1000, loss = 0.979154
I0428 19:51:45.714193 27351 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:51:45.761276 27358 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:51:45.761881 27351 solver.cpp:398]     Test net output #0: accuracy = 0.6926
I0428 19:51:45.761899 27351 solver.cpp:398]     Test net output #1: loss = 0.76633 (* 1 = 0.76633 loss)
I0428 19:51:45.761904 27351 solver.cpp:316] Optimization Done.
I0428 19:51:45.761906 27351 caffe.cpp:259] Optimization Done.
