I0428 20:01:56.774514 29841 caffe.cpp:218] Using GPUs 0
I0428 20:01:56.810704 29841 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:57.323415 29841 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test916.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:57.323575 29841 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test916.prototxt
I0428 20:01:57.324000 29841 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:57.324018 29841 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:57.324120 29841 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:57.324203 29841 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:57.324304 29841 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:57.324329 29841 net.cpp:86] Creating Layer mnist
I0428 20:01:57.324337 29841 net.cpp:382] mnist -> data
I0428 20:01:57.324362 29841 net.cpp:382] mnist -> label
I0428 20:01:57.325459 29841 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:57.327910 29841 net.cpp:124] Setting up mnist
I0428 20:01:57.327931 29841 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:57.327937 29841 net.cpp:131] Top shape: 64 (64)
I0428 20:01:57.327940 29841 net.cpp:139] Memory required for data: 200960
I0428 20:01:57.327949 29841 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:57.327965 29841 net.cpp:86] Creating Layer conv0
I0428 20:01:57.327986 29841 net.cpp:408] conv0 <- data
I0428 20:01:57.327997 29841 net.cpp:382] conv0 -> conv0
I0428 20:01:57.565196 29841 net.cpp:124] Setting up conv0
I0428 20:01:57.565222 29841 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:57.565225 29841 net.cpp:139] Memory required for data: 1675520
I0428 20:01:57.565239 29841 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:57.565251 29841 net.cpp:86] Creating Layer pool0
I0428 20:01:57.565255 29841 net.cpp:408] pool0 <- conv0
I0428 20:01:57.565260 29841 net.cpp:382] pool0 -> pool0
I0428 20:01:57.565323 29841 net.cpp:124] Setting up pool0
I0428 20:01:57.565328 29841 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:57.565331 29841 net.cpp:139] Memory required for data: 2044160
I0428 20:01:57.565335 29841 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:57.565345 29841 net.cpp:86] Creating Layer conv1
I0428 20:01:57.565347 29841 net.cpp:408] conv1 <- pool0
I0428 20:01:57.565351 29841 net.cpp:382] conv1 -> conv1
I0428 20:01:57.568142 29841 net.cpp:124] Setting up conv1
I0428 20:01:57.568172 29841 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:57.568176 29841 net.cpp:139] Memory required for data: 2863360
I0428 20:01:57.568184 29841 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:57.568192 29841 net.cpp:86] Creating Layer pool1
I0428 20:01:57.568195 29841 net.cpp:408] pool1 <- conv1
I0428 20:01:57.568200 29841 net.cpp:382] pool1 -> pool1
I0428 20:01:57.568253 29841 net.cpp:124] Setting up pool1
I0428 20:01:57.568259 29841 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:57.568260 29841 net.cpp:139] Memory required for data: 3068160
I0428 20:01:57.568264 29841 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:57.568271 29841 net.cpp:86] Creating Layer ip1
I0428 20:01:57.568274 29841 net.cpp:408] ip1 <- pool1
I0428 20:01:57.568279 29841 net.cpp:382] ip1 -> ip1
I0428 20:01:57.568418 29841 net.cpp:124] Setting up ip1
I0428 20:01:57.568426 29841 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:57.568429 29841 net.cpp:139] Memory required for data: 3070720
I0428 20:01:57.568436 29841 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:57.568441 29841 net.cpp:86] Creating Layer relu1
I0428 20:01:57.568445 29841 net.cpp:408] relu1 <- ip1
I0428 20:01:57.568449 29841 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:57.568609 29841 net.cpp:124] Setting up relu1
I0428 20:01:57.568619 29841 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:57.568621 29841 net.cpp:139] Memory required for data: 3073280
I0428 20:01:57.568624 29841 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:57.568630 29841 net.cpp:86] Creating Layer ip2
I0428 20:01:57.568634 29841 net.cpp:408] ip2 <- ip1
I0428 20:01:57.568637 29841 net.cpp:382] ip2 -> ip2
I0428 20:01:57.568753 29841 net.cpp:124] Setting up ip2
I0428 20:01:57.568759 29841 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:57.568763 29841 net.cpp:139] Memory required for data: 3086080
I0428 20:01:57.568768 29841 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:57.568773 29841 net.cpp:86] Creating Layer relu2
I0428 20:01:57.568776 29841 net.cpp:408] relu2 <- ip2
I0428 20:01:57.568780 29841 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:57.569650 29841 net.cpp:124] Setting up relu2
I0428 20:01:57.569679 29841 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:57.569682 29841 net.cpp:139] Memory required for data: 3098880
I0428 20:01:57.569686 29841 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:57.569694 29841 net.cpp:86] Creating Layer ip3
I0428 20:01:57.569696 29841 net.cpp:408] ip3 <- ip2
I0428 20:01:57.569702 29841 net.cpp:382] ip3 -> ip3
I0428 20:01:57.569828 29841 net.cpp:124] Setting up ip3
I0428 20:01:57.569836 29841 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:57.569839 29841 net.cpp:139] Memory required for data: 3101440
I0428 20:01:57.569847 29841 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:57.569852 29841 net.cpp:86] Creating Layer relu3
I0428 20:01:57.569855 29841 net.cpp:408] relu3 <- ip3
I0428 20:01:57.569859 29841 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:57.570019 29841 net.cpp:124] Setting up relu3
I0428 20:01:57.570029 29841 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:57.570047 29841 net.cpp:139] Memory required for data: 3104000
I0428 20:01:57.570050 29841 layer_factory.hpp:77] Creating layer loss
I0428 20:01:57.570071 29841 net.cpp:86] Creating Layer loss
I0428 20:01:57.570075 29841 net.cpp:408] loss <- ip3
I0428 20:01:57.570077 29841 net.cpp:408] loss <- label
I0428 20:01:57.570085 29841 net.cpp:382] loss -> loss
I0428 20:01:57.570103 29841 layer_factory.hpp:77] Creating layer loss
I0428 20:01:57.570338 29841 net.cpp:124] Setting up loss
I0428 20:01:57.570346 29841 net.cpp:131] Top shape: (1)
I0428 20:01:57.570349 29841 net.cpp:134]     with loss weight 1
I0428 20:01:57.570363 29841 net.cpp:139] Memory required for data: 3104004
I0428 20:01:57.570366 29841 net.cpp:200] loss needs backward computation.
I0428 20:01:57.570369 29841 net.cpp:200] relu3 needs backward computation.
I0428 20:01:57.570372 29841 net.cpp:200] ip3 needs backward computation.
I0428 20:01:57.570375 29841 net.cpp:200] relu2 needs backward computation.
I0428 20:01:57.570377 29841 net.cpp:200] ip2 needs backward computation.
I0428 20:01:57.570380 29841 net.cpp:200] relu1 needs backward computation.
I0428 20:01:57.570384 29841 net.cpp:200] ip1 needs backward computation.
I0428 20:01:57.570386 29841 net.cpp:200] pool1 needs backward computation.
I0428 20:01:57.570389 29841 net.cpp:200] conv1 needs backward computation.
I0428 20:01:57.570392 29841 net.cpp:200] pool0 needs backward computation.
I0428 20:01:57.570395 29841 net.cpp:200] conv0 needs backward computation.
I0428 20:01:57.570399 29841 net.cpp:202] mnist does not need backward computation.
I0428 20:01:57.570401 29841 net.cpp:244] This network produces output loss
I0428 20:01:57.570410 29841 net.cpp:257] Network initialization done.
I0428 20:01:57.570722 29841 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test916.prototxt
I0428 20:01:57.570747 29841 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:57.570849 29841 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:01:57.570941 29841 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:57.570986 29841 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:57.570999 29841 net.cpp:86] Creating Layer mnist
I0428 20:01:57.571004 29841 net.cpp:382] mnist -> data
I0428 20:01:57.571012 29841 net.cpp:382] mnist -> label
I0428 20:01:57.571094 29841 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:57.573257 29841 net.cpp:124] Setting up mnist
I0428 20:01:57.573302 29841 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:57.573307 29841 net.cpp:131] Top shape: 100 (100)
I0428 20:01:57.573310 29841 net.cpp:139] Memory required for data: 314000
I0428 20:01:57.573314 29841 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:57.573341 29841 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:57.573345 29841 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:57.573350 29841 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:57.573357 29841 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:57.573413 29841 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:57.573421 29841 net.cpp:131] Top shape: 100 (100)
I0428 20:01:57.573424 29841 net.cpp:131] Top shape: 100 (100)
I0428 20:01:57.573427 29841 net.cpp:139] Memory required for data: 314800
I0428 20:01:57.573431 29841 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:57.573438 29841 net.cpp:86] Creating Layer conv0
I0428 20:01:57.573441 29841 net.cpp:408] conv0 <- data
I0428 20:01:57.573446 29841 net.cpp:382] conv0 -> conv0
I0428 20:01:57.575242 29841 net.cpp:124] Setting up conv0
I0428 20:01:57.575270 29841 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:57.575290 29841 net.cpp:139] Memory required for data: 2618800
I0428 20:01:57.575299 29841 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:57.575305 29841 net.cpp:86] Creating Layer pool0
I0428 20:01:57.575309 29841 net.cpp:408] pool0 <- conv0
I0428 20:01:57.575314 29841 net.cpp:382] pool0 -> pool0
I0428 20:01:57.575347 29841 net.cpp:124] Setting up pool0
I0428 20:01:57.575353 29841 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:57.575356 29841 net.cpp:139] Memory required for data: 3194800
I0428 20:01:57.575358 29841 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:57.575366 29841 net.cpp:86] Creating Layer conv1
I0428 20:01:57.575371 29841 net.cpp:408] conv1 <- pool0
I0428 20:01:57.575374 29841 net.cpp:382] conv1 -> conv1
I0428 20:01:57.577088 29841 net.cpp:124] Setting up conv1
I0428 20:01:57.577117 29841 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:57.577121 29841 net.cpp:139] Memory required for data: 4474800
I0428 20:01:57.577131 29841 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:57.577138 29841 net.cpp:86] Creating Layer pool1
I0428 20:01:57.577142 29841 net.cpp:408] pool1 <- conv1
I0428 20:01:57.577147 29841 net.cpp:382] pool1 -> pool1
I0428 20:01:57.577200 29841 net.cpp:124] Setting up pool1
I0428 20:01:57.577224 29841 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:57.577226 29841 net.cpp:139] Memory required for data: 4794800
I0428 20:01:57.577230 29841 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:57.577236 29841 net.cpp:86] Creating Layer ip1
I0428 20:01:57.577239 29841 net.cpp:408] ip1 <- pool1
I0428 20:01:57.577244 29841 net.cpp:382] ip1 -> ip1
I0428 20:01:57.577390 29841 net.cpp:124] Setting up ip1
I0428 20:01:57.577399 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.577412 29841 net.cpp:139] Memory required for data: 4798800
I0428 20:01:57.577435 29841 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:57.577440 29841 net.cpp:86] Creating Layer relu1
I0428 20:01:57.577445 29841 net.cpp:408] relu1 <- ip1
I0428 20:01:57.577450 29841 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:57.577636 29841 net.cpp:124] Setting up relu1
I0428 20:01:57.577644 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.577647 29841 net.cpp:139] Memory required for data: 4802800
I0428 20:01:57.577651 29841 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:57.577657 29841 net.cpp:86] Creating Layer ip2
I0428 20:01:57.577661 29841 net.cpp:408] ip2 <- ip1
I0428 20:01:57.577666 29841 net.cpp:382] ip2 -> ip2
I0428 20:01:57.577764 29841 net.cpp:124] Setting up ip2
I0428 20:01:57.577771 29841 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:57.577775 29841 net.cpp:139] Memory required for data: 4822800
I0428 20:01:57.577780 29841 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:57.577785 29841 net.cpp:86] Creating Layer relu2
I0428 20:01:57.577788 29841 net.cpp:408] relu2 <- ip2
I0428 20:01:57.577806 29841 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:57.577988 29841 net.cpp:124] Setting up relu2
I0428 20:01:57.578012 29841 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:57.578016 29841 net.cpp:139] Memory required for data: 4842800
I0428 20:01:57.578019 29841 layer_factory.hpp:77] Creating layer ip3
I0428 20:01:57.578024 29841 net.cpp:86] Creating Layer ip3
I0428 20:01:57.578028 29841 net.cpp:408] ip3 <- ip2
I0428 20:01:57.578033 29841 net.cpp:382] ip3 -> ip3
I0428 20:01:57.578150 29841 net.cpp:124] Setting up ip3
I0428 20:01:57.578156 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.578160 29841 net.cpp:139] Memory required for data: 4846800
I0428 20:01:57.578168 29841 layer_factory.hpp:77] Creating layer relu3
I0428 20:01:57.578172 29841 net.cpp:86] Creating Layer relu3
I0428 20:01:57.578176 29841 net.cpp:408] relu3 <- ip3
I0428 20:01:57.578181 29841 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:01:57.579069 29841 net.cpp:124] Setting up relu3
I0428 20:01:57.579097 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.579118 29841 net.cpp:139] Memory required for data: 4850800
I0428 20:01:57.579121 29841 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:01:57.579128 29841 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:01:57.579131 29841 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:01:57.579135 29841 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:01:57.579143 29841 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:01:57.579179 29841 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:01:57.579183 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.579187 29841 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:57.579190 29841 net.cpp:139] Memory required for data: 4858800
I0428 20:01:57.579192 29841 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:57.579197 29841 net.cpp:86] Creating Layer accuracy
I0428 20:01:57.579200 29841 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:01:57.579205 29841 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:57.579208 29841 net.cpp:382] accuracy -> accuracy
I0428 20:01:57.579216 29841 net.cpp:124] Setting up accuracy
I0428 20:01:57.579219 29841 net.cpp:131] Top shape: (1)
I0428 20:01:57.579222 29841 net.cpp:139] Memory required for data: 4858804
I0428 20:01:57.579224 29841 layer_factory.hpp:77] Creating layer loss
I0428 20:01:57.579229 29841 net.cpp:86] Creating Layer loss
I0428 20:01:57.579231 29841 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:01:57.579236 29841 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:57.579239 29841 net.cpp:382] loss -> loss
I0428 20:01:57.579246 29841 layer_factory.hpp:77] Creating layer loss
I0428 20:01:57.579504 29841 net.cpp:124] Setting up loss
I0428 20:01:57.579514 29841 net.cpp:131] Top shape: (1)
I0428 20:01:57.579517 29841 net.cpp:134]     with loss weight 1
I0428 20:01:57.579533 29841 net.cpp:139] Memory required for data: 4858808
I0428 20:01:57.579537 29841 net.cpp:200] loss needs backward computation.
I0428 20:01:57.579541 29841 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:57.579545 29841 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:01:57.579548 29841 net.cpp:200] relu3 needs backward computation.
I0428 20:01:57.579551 29841 net.cpp:200] ip3 needs backward computation.
I0428 20:01:57.579555 29841 net.cpp:200] relu2 needs backward computation.
I0428 20:01:57.579557 29841 net.cpp:200] ip2 needs backward computation.
I0428 20:01:57.579560 29841 net.cpp:200] relu1 needs backward computation.
I0428 20:01:57.579563 29841 net.cpp:200] ip1 needs backward computation.
I0428 20:01:57.579566 29841 net.cpp:200] pool1 needs backward computation.
I0428 20:01:57.579571 29841 net.cpp:200] conv1 needs backward computation.
I0428 20:01:57.579573 29841 net.cpp:200] pool0 needs backward computation.
I0428 20:01:57.579592 29841 net.cpp:200] conv0 needs backward computation.
I0428 20:01:57.579596 29841 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:57.579602 29841 net.cpp:202] mnist does not need backward computation.
I0428 20:01:57.579603 29841 net.cpp:244] This network produces output accuracy
I0428 20:01:57.579607 29841 net.cpp:244] This network produces output loss
I0428 20:01:57.579618 29841 net.cpp:257] Network initialization done.
I0428 20:01:57.579663 29841 solver.cpp:56] Solver scaffolding done.
I0428 20:01:57.580090 29841 caffe.cpp:248] Starting Optimization
I0428 20:01:57.580096 29841 solver.cpp:273] Solving LeNet
I0428 20:01:57.580098 29841 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:57.580993 29841 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:57.585227 29841 blocking_queue.cpp:49] Waiting for data
I0428 20:01:57.657631 29848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:57.658182 29841 solver.cpp:398]     Test net output #0: accuracy = 0.0755
I0428 20:01:57.658218 29841 solver.cpp:398]     Test net output #1: loss = 2.30398 (* 1 = 2.30398 loss)
I0428 20:01:57.661499 29841 solver.cpp:219] Iteration 0 (-9.99126e-43 iter/s, 0.0813609s/100 iters), loss = 2.30956
I0428 20:01:57.661537 29841 solver.cpp:238]     Train net output #0: loss = 2.30956 (* 1 = 2.30956 loss)
I0428 20:01:57.661550 29841 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:57.769300 29841 solver.cpp:219] Iteration 100 (927.921 iter/s, 0.107768s/100 iters), loss = 0.961605
I0428 20:01:57.769340 29841 solver.cpp:238]     Train net output #0: loss = 0.961605 (* 1 = 0.961605 loss)
I0428 20:01:57.769346 29841 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:57.875476 29841 solver.cpp:219] Iteration 200 (942.282 iter/s, 0.106125s/100 iters), loss = 0.542123
I0428 20:01:57.875501 29841 solver.cpp:238]     Train net output #0: loss = 0.542123 (* 1 = 0.542123 loss)
I0428 20:01:57.875509 29841 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:57.982990 29841 solver.cpp:219] Iteration 300 (930.423 iter/s, 0.107478s/100 iters), loss = 0.209248
I0428 20:01:57.983029 29841 solver.cpp:238]     Train net output #0: loss = 0.209248 (* 1 = 0.209248 loss)
I0428 20:01:57.983036 29841 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:58.088490 29841 solver.cpp:219] Iteration 400 (948.312 iter/s, 0.10545s/100 iters), loss = 0.305099
I0428 20:01:58.088529 29841 solver.cpp:238]     Train net output #0: loss = 0.305099 (* 1 = 0.305099 loss)
I0428 20:01:58.088536 29841 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:58.194907 29841 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:58.248337 29848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:58.248884 29841 solver.cpp:398]     Test net output #0: accuracy = 0.9538
I0428 20:01:58.248919 29841 solver.cpp:398]     Test net output #1: loss = 0.149924 (* 1 = 0.149924 loss)
I0428 20:01:58.250015 29841 solver.cpp:219] Iteration 500 (619.308 iter/s, 0.16147s/100 iters), loss = 0.0743279
I0428 20:01:58.250080 29841 solver.cpp:238]     Train net output #0: loss = 0.0743279 (* 1 = 0.0743279 loss)
I0428 20:01:58.250087 29841 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:58.363116 29841 solver.cpp:219] Iteration 600 (884.627 iter/s, 0.113042s/100 iters), loss = 0.0613654
I0428 20:01:58.363159 29841 solver.cpp:238]     Train net output #0: loss = 0.0613654 (* 1 = 0.0613654 loss)
I0428 20:01:58.363167 29841 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:58.469161 29841 solver.cpp:219] Iteration 700 (943.347 iter/s, 0.106005s/100 iters), loss = 0.153487
I0428 20:01:58.469200 29841 solver.cpp:238]     Train net output #0: loss = 0.153487 (* 1 = 0.153487 loss)
I0428 20:01:58.469208 29841 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:58.574162 29841 solver.cpp:219] Iteration 800 (952.688 iter/s, 0.104966s/100 iters), loss = 0.252633
I0428 20:01:58.574187 29841 solver.cpp:238]     Train net output #0: loss = 0.252633 (* 1 = 0.252633 loss)
I0428 20:01:58.574193 29841 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:58.679396 29841 solver.cpp:219] Iteration 900 (950.574 iter/s, 0.1052s/100 iters), loss = 0.119561
I0428 20:01:58.679436 29841 solver.cpp:238]     Train net output #0: loss = 0.119561 (* 1 = 0.119561 loss)
I0428 20:01:58.679443 29841 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:58.714290 29847 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:58.782325 29841 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:58.783455 29841 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:58.784102 29841 solver.cpp:311] Iteration 1000, loss = 0.151778
I0428 20:01:58.784116 29841 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:58.858855 29848 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:58.859380 29841 solver.cpp:398]     Test net output #0: accuracy = 0.9687
I0428 20:01:58.859414 29841 solver.cpp:398]     Test net output #1: loss = 0.0942439 (* 1 = 0.0942439 loss)
I0428 20:01:58.859419 29841 solver.cpp:316] Optimization Done.
I0428 20:01:58.859422 29841 caffe.cpp:259] Optimization Done.
