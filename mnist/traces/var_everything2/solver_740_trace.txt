I0428 19:55:47.909842 28278 caffe.cpp:218] Using GPUs 0
I0428 19:55:47.945533 28278 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:48.459131 28278 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test740.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:48.459271 28278 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test740.prototxt
I0428 19:55:48.459684 28278 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:48.459704 28278 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:48.459815 28278 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:48.459897 28278 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:48.459993 28278 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:48.460018 28278 net.cpp:86] Creating Layer mnist
I0428 19:55:48.460026 28278 net.cpp:382] mnist -> data
I0428 19:55:48.460049 28278 net.cpp:382] mnist -> label
I0428 19:55:48.461163 28278 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:48.463625 28278 net.cpp:124] Setting up mnist
I0428 19:55:48.463642 28278 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:48.463650 28278 net.cpp:131] Top shape: 64 (64)
I0428 19:55:48.463655 28278 net.cpp:139] Memory required for data: 200960
I0428 19:55:48.463662 28278 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:48.463680 28278 net.cpp:86] Creating Layer conv0
I0428 19:55:48.463701 28278 net.cpp:408] conv0 <- data
I0428 19:55:48.463712 28278 net.cpp:382] conv0 -> conv0
I0428 19:55:48.738534 28278 net.cpp:124] Setting up conv0
I0428 19:55:48.738560 28278 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:48.738564 28278 net.cpp:139] Memory required for data: 938240
I0428 19:55:48.738579 28278 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:48.738591 28278 net.cpp:86] Creating Layer pool0
I0428 19:55:48.738595 28278 net.cpp:408] pool0 <- conv0
I0428 19:55:48.738600 28278 net.cpp:382] pool0 -> pool0
I0428 19:55:48.738646 28278 net.cpp:124] Setting up pool0
I0428 19:55:48.738651 28278 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:48.738653 28278 net.cpp:139] Memory required for data: 1122560
I0428 19:55:48.738656 28278 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:48.738667 28278 net.cpp:86] Creating Layer conv1
I0428 19:55:48.738669 28278 net.cpp:408] conv1 <- pool0
I0428 19:55:48.738673 28278 net.cpp:382] conv1 -> conv1
I0428 19:55:48.741580 28278 net.cpp:124] Setting up conv1
I0428 19:55:48.741611 28278 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:48.741616 28278 net.cpp:139] Memory required for data: 2760960
I0428 19:55:48.741623 28278 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:48.741632 28278 net.cpp:86] Creating Layer pool1
I0428 19:55:48.741636 28278 net.cpp:408] pool1 <- conv1
I0428 19:55:48.741641 28278 net.cpp:382] pool1 -> pool1
I0428 19:55:48.741690 28278 net.cpp:124] Setting up pool1
I0428 19:55:48.741696 28278 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:48.741698 28278 net.cpp:139] Memory required for data: 3170560
I0428 19:55:48.741701 28278 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:48.741708 28278 net.cpp:86] Creating Layer ip1
I0428 19:55:48.741711 28278 net.cpp:408] ip1 <- pool1
I0428 19:55:48.741715 28278 net.cpp:382] ip1 -> ip1
I0428 19:55:48.743119 28278 net.cpp:124] Setting up ip1
I0428 19:55:48.743147 28278 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:48.743166 28278 net.cpp:139] Memory required for data: 3183360
I0428 19:55:48.743175 28278 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:48.743180 28278 net.cpp:86] Creating Layer relu1
I0428 19:55:48.743185 28278 net.cpp:408] relu1 <- ip1
I0428 19:55:48.743190 28278 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:48.743371 28278 net.cpp:124] Setting up relu1
I0428 19:55:48.743381 28278 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:48.743383 28278 net.cpp:139] Memory required for data: 3196160
I0428 19:55:48.743387 28278 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:48.743393 28278 net.cpp:86] Creating Layer ip2
I0428 19:55:48.743396 28278 net.cpp:408] ip2 <- ip1
I0428 19:55:48.743402 28278 net.cpp:382] ip2 -> ip2
I0428 19:55:48.744371 28278 net.cpp:124] Setting up ip2
I0428 19:55:48.744382 28278 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:48.744402 28278 net.cpp:139] Memory required for data: 3208960
I0428 19:55:48.744408 28278 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:48.744415 28278 net.cpp:86] Creating Layer relu2
I0428 19:55:48.744417 28278 net.cpp:408] relu2 <- ip2
I0428 19:55:48.744422 28278 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:48.745209 28278 net.cpp:124] Setting up relu2
I0428 19:55:48.745223 28278 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:48.745226 28278 net.cpp:139] Memory required for data: 3221760
I0428 19:55:48.745229 28278 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:48.745236 28278 net.cpp:86] Creating Layer ip3
I0428 19:55:48.745240 28278 net.cpp:408] ip3 <- ip2
I0428 19:55:48.745245 28278 net.cpp:382] ip3 -> ip3
I0428 19:55:48.745349 28278 net.cpp:124] Setting up ip3
I0428 19:55:48.745357 28278 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:48.745360 28278 net.cpp:139] Memory required for data: 3224320
I0428 19:55:48.745368 28278 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:48.745373 28278 net.cpp:86] Creating Layer relu3
I0428 19:55:48.745376 28278 net.cpp:408] relu3 <- ip3
I0428 19:55:48.745381 28278 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:48.745551 28278 net.cpp:124] Setting up relu3
I0428 19:55:48.745560 28278 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:48.745563 28278 net.cpp:139] Memory required for data: 3226880
I0428 19:55:48.745568 28278 layer_factory.hpp:77] Creating layer loss
I0428 19:55:48.745573 28278 net.cpp:86] Creating Layer loss
I0428 19:55:48.745575 28278 net.cpp:408] loss <- ip3
I0428 19:55:48.745579 28278 net.cpp:408] loss <- label
I0428 19:55:48.745584 28278 net.cpp:382] loss -> loss
I0428 19:55:48.745602 28278 layer_factory.hpp:77] Creating layer loss
I0428 19:55:48.745851 28278 net.cpp:124] Setting up loss
I0428 19:55:48.745859 28278 net.cpp:131] Top shape: (1)
I0428 19:55:48.745862 28278 net.cpp:134]     with loss weight 1
I0428 19:55:48.745877 28278 net.cpp:139] Memory required for data: 3226884
I0428 19:55:48.745880 28278 net.cpp:200] loss needs backward computation.
I0428 19:55:48.745884 28278 net.cpp:200] relu3 needs backward computation.
I0428 19:55:48.745887 28278 net.cpp:200] ip3 needs backward computation.
I0428 19:55:48.745889 28278 net.cpp:200] relu2 needs backward computation.
I0428 19:55:48.745908 28278 net.cpp:200] ip2 needs backward computation.
I0428 19:55:48.745913 28278 net.cpp:200] relu1 needs backward computation.
I0428 19:55:48.745914 28278 net.cpp:200] ip1 needs backward computation.
I0428 19:55:48.745918 28278 net.cpp:200] pool1 needs backward computation.
I0428 19:55:48.745920 28278 net.cpp:200] conv1 needs backward computation.
I0428 19:55:48.745924 28278 net.cpp:200] pool0 needs backward computation.
I0428 19:55:48.745928 28278 net.cpp:200] conv0 needs backward computation.
I0428 19:55:48.745930 28278 net.cpp:202] mnist does not need backward computation.
I0428 19:55:48.745934 28278 net.cpp:244] This network produces output loss
I0428 19:55:48.745942 28278 net.cpp:257] Network initialization done.
I0428 19:55:48.746326 28278 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test740.prototxt
I0428 19:55:48.746369 28278 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:48.746484 28278 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:48.746558 28278 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:48.746603 28278 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:48.746614 28278 net.cpp:86] Creating Layer mnist
I0428 19:55:48.746619 28278 net.cpp:382] mnist -> data
I0428 19:55:48.746626 28278 net.cpp:382] mnist -> label
I0428 19:55:48.746704 28278 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:48.747913 28278 net.cpp:124] Setting up mnist
I0428 19:55:48.747943 28278 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:48.747948 28278 net.cpp:131] Top shape: 100 (100)
I0428 19:55:48.747951 28278 net.cpp:139] Memory required for data: 314000
I0428 19:55:48.747956 28278 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:48.747978 28278 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:48.747982 28278 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:48.747987 28278 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:48.747995 28278 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:48.748076 28278 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:48.748085 28278 net.cpp:131] Top shape: 100 (100)
I0428 19:55:48.748090 28278 net.cpp:131] Top shape: 100 (100)
I0428 19:55:48.748092 28278 net.cpp:139] Memory required for data: 314800
I0428 19:55:48.748095 28278 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:48.748106 28278 net.cpp:86] Creating Layer conv0
I0428 19:55:48.748108 28278 net.cpp:408] conv0 <- data
I0428 19:55:48.748113 28278 net.cpp:382] conv0 -> conv0
I0428 19:55:48.749861 28278 net.cpp:124] Setting up conv0
I0428 19:55:48.749874 28278 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:48.749878 28278 net.cpp:139] Memory required for data: 1466800
I0428 19:55:48.749887 28278 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:48.749893 28278 net.cpp:86] Creating Layer pool0
I0428 19:55:48.749897 28278 net.cpp:408] pool0 <- conv0
I0428 19:55:48.749902 28278 net.cpp:382] pool0 -> pool0
I0428 19:55:48.749934 28278 net.cpp:124] Setting up pool0
I0428 19:55:48.749946 28278 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:48.749949 28278 net.cpp:139] Memory required for data: 1754800
I0428 19:55:48.749951 28278 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:48.749959 28278 net.cpp:86] Creating Layer conv1
I0428 19:55:48.749963 28278 net.cpp:408] conv1 <- pool0
I0428 19:55:48.749967 28278 net.cpp:382] conv1 -> conv1
I0428 19:55:48.751557 28278 net.cpp:124] Setting up conv1
I0428 19:55:48.751585 28278 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:48.751602 28278 net.cpp:139] Memory required for data: 4314800
I0428 19:55:48.751611 28278 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:48.751617 28278 net.cpp:86] Creating Layer pool1
I0428 19:55:48.751621 28278 net.cpp:408] pool1 <- conv1
I0428 19:55:48.751626 28278 net.cpp:382] pool1 -> pool1
I0428 19:55:48.751660 28278 net.cpp:124] Setting up pool1
I0428 19:55:48.751667 28278 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:48.751669 28278 net.cpp:139] Memory required for data: 4954800
I0428 19:55:48.751672 28278 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:48.751677 28278 net.cpp:86] Creating Layer ip1
I0428 19:55:48.751680 28278 net.cpp:408] ip1 <- pool1
I0428 19:55:48.751684 28278 net.cpp:382] ip1 -> ip1
I0428 19:55:48.752281 28278 net.cpp:124] Setting up ip1
I0428 19:55:48.752288 28278 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:48.752302 28278 net.cpp:139] Memory required for data: 4974800
I0428 19:55:48.752310 28278 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:48.752315 28278 net.cpp:86] Creating Layer relu1
I0428 19:55:48.752320 28278 net.cpp:408] relu1 <- ip1
I0428 19:55:48.752323 28278 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:48.752516 28278 net.cpp:124] Setting up relu1
I0428 19:55:48.752524 28278 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:48.752528 28278 net.cpp:139] Memory required for data: 4994800
I0428 19:55:48.752532 28278 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:48.752537 28278 net.cpp:86] Creating Layer ip2
I0428 19:55:48.752542 28278 net.cpp:408] ip2 <- ip1
I0428 19:55:48.752547 28278 net.cpp:382] ip2 -> ip2
I0428 19:55:48.752676 28278 net.cpp:124] Setting up ip2
I0428 19:55:48.752684 28278 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:48.752692 28278 net.cpp:139] Memory required for data: 5014800
I0428 19:55:48.752697 28278 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:48.752702 28278 net.cpp:86] Creating Layer relu2
I0428 19:55:48.752706 28278 net.cpp:408] relu2 <- ip2
I0428 19:55:48.752709 28278 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:48.752864 28278 net.cpp:124] Setting up relu2
I0428 19:55:48.752873 28278 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:48.752876 28278 net.cpp:139] Memory required for data: 5034800
I0428 19:55:48.752879 28278 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:48.752885 28278 net.cpp:86] Creating Layer ip3
I0428 19:55:48.752888 28278 net.cpp:408] ip3 <- ip2
I0428 19:55:48.752894 28278 net.cpp:382] ip3 -> ip3
I0428 19:55:48.752987 28278 net.cpp:124] Setting up ip3
I0428 19:55:48.752995 28278 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:48.752998 28278 net.cpp:139] Memory required for data: 5038800
I0428 19:55:48.753006 28278 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:48.753011 28278 net.cpp:86] Creating Layer relu3
I0428 19:55:48.753015 28278 net.cpp:408] relu3 <- ip3
I0428 19:55:48.753018 28278 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:48.753831 28278 net.cpp:124] Setting up relu3
I0428 19:55:48.753844 28278 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:48.753847 28278 net.cpp:139] Memory required for data: 5042800
I0428 19:55:48.753851 28278 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:48.753856 28278 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:48.753859 28278 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:48.753865 28278 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:48.753870 28278 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:48.753924 28278 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:48.753931 28278 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:48.753935 28278 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:48.753937 28278 net.cpp:139] Memory required for data: 5050800
I0428 19:55:48.753940 28278 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:48.753950 28278 net.cpp:86] Creating Layer accuracy
I0428 19:55:48.753953 28278 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:48.753958 28278 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:48.753962 28278 net.cpp:382] accuracy -> accuracy
I0428 19:55:48.753970 28278 net.cpp:124] Setting up accuracy
I0428 19:55:48.753974 28278 net.cpp:131] Top shape: (1)
I0428 19:55:48.753978 28278 net.cpp:139] Memory required for data: 5050804
I0428 19:55:48.753980 28278 layer_factory.hpp:77] Creating layer loss
I0428 19:55:48.753984 28278 net.cpp:86] Creating Layer loss
I0428 19:55:48.753988 28278 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:48.753996 28278 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:48.754000 28278 net.cpp:382] loss -> loss
I0428 19:55:48.754006 28278 layer_factory.hpp:77] Creating layer loss
I0428 19:55:48.754220 28278 net.cpp:124] Setting up loss
I0428 19:55:48.754230 28278 net.cpp:131] Top shape: (1)
I0428 19:55:48.754233 28278 net.cpp:134]     with loss weight 1
I0428 19:55:48.754251 28278 net.cpp:139] Memory required for data: 5050808
I0428 19:55:48.754254 28278 net.cpp:200] loss needs backward computation.
I0428 19:55:48.754258 28278 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:48.754261 28278 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:48.754266 28278 net.cpp:200] relu3 needs backward computation.
I0428 19:55:48.754267 28278 net.cpp:200] ip3 needs backward computation.
I0428 19:55:48.754271 28278 net.cpp:200] relu2 needs backward computation.
I0428 19:55:48.754273 28278 net.cpp:200] ip2 needs backward computation.
I0428 19:55:48.754276 28278 net.cpp:200] relu1 needs backward computation.
I0428 19:55:48.754281 28278 net.cpp:200] ip1 needs backward computation.
I0428 19:55:48.754283 28278 net.cpp:200] pool1 needs backward computation.
I0428 19:55:48.754287 28278 net.cpp:200] conv1 needs backward computation.
I0428 19:55:48.754289 28278 net.cpp:200] pool0 needs backward computation.
I0428 19:55:48.754292 28278 net.cpp:200] conv0 needs backward computation.
I0428 19:55:48.754295 28278 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:48.754299 28278 net.cpp:202] mnist does not need backward computation.
I0428 19:55:48.754302 28278 net.cpp:244] This network produces output accuracy
I0428 19:55:48.754305 28278 net.cpp:244] This network produces output loss
I0428 19:55:48.754315 28278 net.cpp:257] Network initialization done.
I0428 19:55:48.754355 28278 solver.cpp:56] Solver scaffolding done.
I0428 19:55:48.754768 28278 caffe.cpp:248] Starting Optimization
I0428 19:55:48.754775 28278 solver.cpp:273] Solving LeNet
I0428 19:55:48.754777 28278 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:48.755704 28278 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:48.761080 28278 blocking_queue.cpp:49] Waiting for data
I0428 19:55:48.831431 28285 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:48.832041 28278 solver.cpp:398]     Test net output #0: accuracy = 0.1605
I0428 19:55:48.832074 28278 solver.cpp:398]     Test net output #1: loss = 2.29195 (* 1 = 2.29195 loss)
I0428 19:55:48.835925 28278 solver.cpp:219] Iteration 0 (0 iter/s, 0.0811203s/100 iters), loss = 2.27833
I0428 19:55:48.835963 28278 solver.cpp:238]     Train net output #0: loss = 2.27833 (* 1 = 2.27833 loss)
I0428 19:55:48.835974 28278 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:48.982699 28278 solver.cpp:219] Iteration 100 (681.557 iter/s, 0.146723s/100 iters), loss = 0.548083
I0428 19:55:48.982741 28278 solver.cpp:238]     Train net output #0: loss = 0.548083 (* 1 = 0.548083 loss)
I0428 19:55:48.982748 28278 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:49.129570 28278 solver.cpp:219] Iteration 200 (681.12 iter/s, 0.146817s/100 iters), loss = 0.455483
I0428 19:55:49.129612 28278 solver.cpp:238]     Train net output #0: loss = 0.455483 (* 1 = 0.455483 loss)
I0428 19:55:49.129618 28278 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:49.279958 28278 solver.cpp:219] Iteration 300 (665.184 iter/s, 0.150334s/100 iters), loss = 0.327524
I0428 19:55:49.279996 28278 solver.cpp:238]     Train net output #0: loss = 0.327524 (* 1 = 0.327524 loss)
I0428 19:55:49.280002 28278 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:49.431550 28278 solver.cpp:219] Iteration 400 (659.889 iter/s, 0.151541s/100 iters), loss = 0.322305
I0428 19:55:49.431574 28278 solver.cpp:238]     Train net output #0: loss = 0.322305 (* 1 = 0.322305 loss)
I0428 19:55:49.431581 28278 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:49.585563 28278 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:49.640190 28285 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:49.642040 28278 solver.cpp:398]     Test net output #0: accuracy = 0.873
I0428 19:55:49.642061 28278 solver.cpp:398]     Test net output #1: loss = 0.331056 (* 1 = 0.331056 loss)
I0428 19:55:49.643422 28278 solver.cpp:219] Iteration 500 (472.075 iter/s, 0.211831s/100 iters), loss = 0.302996
I0428 19:55:49.643465 28278 solver.cpp:238]     Train net output #0: loss = 0.302996 (* 1 = 0.302996 loss)
I0428 19:55:49.643471 28278 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:49.798576 28278 solver.cpp:219] Iteration 600 (644.745 iter/s, 0.1551s/100 iters), loss = 0.167894
I0428 19:55:49.798619 28278 solver.cpp:238]     Train net output #0: loss = 0.167894 (* 1 = 0.167894 loss)
I0428 19:55:49.798625 28278 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:49.950348 28278 solver.cpp:219] Iteration 700 (659.056 iter/s, 0.151732s/100 iters), loss = 0.151261
I0428 19:55:49.950389 28278 solver.cpp:238]     Train net output #0: loss = 0.151261 (* 1 = 0.151261 loss)
I0428 19:55:49.950397 28278 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:50.103945 28278 solver.cpp:219] Iteration 800 (651.289 iter/s, 0.153542s/100 iters), loss = 0.185149
I0428 19:55:50.103986 28278 solver.cpp:238]     Train net output #0: loss = 0.185149 (* 1 = 0.185149 loss)
I0428 19:55:50.103993 28278 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:50.256847 28278 solver.cpp:219] Iteration 900 (654.178 iter/s, 0.152864s/100 iters), loss = 0.212945
I0428 19:55:50.256876 28278 solver.cpp:238]     Train net output #0: loss = 0.212945 (* 1 = 0.212945 loss)
I0428 19:55:50.256884 28278 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:50.306783 28284 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:50.405299 28278 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:50.407811 28278 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:50.409042 28278 solver.cpp:311] Iteration 1000, loss = 0.119936
I0428 19:55:50.409073 28278 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:50.461515 28285 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:50.463310 28278 solver.cpp:398]     Test net output #0: accuracy = 0.9771
I0428 19:55:50.463330 28278 solver.cpp:398]     Test net output #1: loss = 0.073044 (* 1 = 0.073044 loss)
I0428 19:55:50.463333 28278 solver.cpp:316] Optimization Done.
I0428 19:55:50.463336 28278 caffe.cpp:259] Optimization Done.
