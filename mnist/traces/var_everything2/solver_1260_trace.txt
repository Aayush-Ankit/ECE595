I0428 20:15:59.586633   565 caffe.cpp:218] Using GPUs 0
I0428 20:15:59.618038   565 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:00.058130   565 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1260.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:00.058259   565 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1260.prototxt
I0428 20:16:00.058636   565 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:00.058681   565 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:00.058764   565 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:00.058830   565 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:00.058912   565 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:00.058933   565 net.cpp:86] Creating Layer mnist
I0428 20:16:00.058938   565 net.cpp:382] mnist -> data
I0428 20:16:00.058959   565 net.cpp:382] mnist -> label
I0428 20:16:00.059957   565 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:00.062163   565 net.cpp:124] Setting up mnist
I0428 20:16:00.062209   565 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:00.062216   565 net.cpp:131] Top shape: 64 (64)
I0428 20:16:00.062218   565 net.cpp:139] Memory required for data: 200960
I0428 20:16:00.062225   565 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:00.062237   565 net.cpp:86] Creating Layer conv0
I0428 20:16:00.062259   565 net.cpp:408] conv0 <- data
I0428 20:16:00.062271   565 net.cpp:382] conv0 -> conv0
I0428 20:16:00.296452   565 net.cpp:124] Setting up conv0
I0428 20:16:00.296495   565 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:00.296500   565 net.cpp:139] Memory required for data: 7573760
I0428 20:16:00.296515   565 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:00.296542   565 net.cpp:86] Creating Layer pool0
I0428 20:16:00.296546   565 net.cpp:408] pool0 <- conv0
I0428 20:16:00.296552   565 net.cpp:382] pool0 -> pool0
I0428 20:16:00.296599   565 net.cpp:124] Setting up pool0
I0428 20:16:00.296607   565 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:00.296609   565 net.cpp:139] Memory required for data: 9416960
I0428 20:16:00.296612   565 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:00.296624   565 net.cpp:86] Creating Layer conv1
I0428 20:16:00.296629   565 net.cpp:408] conv1 <- pool0
I0428 20:16:00.296634   565 net.cpp:382] conv1 -> conv1
I0428 20:16:00.299401   565 net.cpp:124] Setting up conv1
I0428 20:16:00.299432   565 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:00.299437   565 net.cpp:139] Memory required for data: 9498880
I0428 20:16:00.299446   565 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:00.299469   565 net.cpp:86] Creating Layer pool1
I0428 20:16:00.299474   565 net.cpp:408] pool1 <- conv1
I0428 20:16:00.299479   565 net.cpp:382] pool1 -> pool1
I0428 20:16:00.299518   565 net.cpp:124] Setting up pool1
I0428 20:16:00.299525   565 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:00.299528   565 net.cpp:139] Memory required for data: 9519360
I0428 20:16:00.299531   565 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:00.299538   565 net.cpp:86] Creating Layer ip1
I0428 20:16:00.299541   565 net.cpp:408] ip1 <- pool1
I0428 20:16:00.299547   565 net.cpp:382] ip1 -> ip1
I0428 20:16:00.299659   565 net.cpp:124] Setting up ip1
I0428 20:16:00.299665   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.299669   565 net.cpp:139] Memory required for data: 9521920
I0428 20:16:00.299676   565 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:00.299684   565 net.cpp:86] Creating Layer relu1
I0428 20:16:00.299688   565 net.cpp:408] relu1 <- ip1
I0428 20:16:00.299692   565 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:00.299868   565 net.cpp:124] Setting up relu1
I0428 20:16:00.299887   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.299890   565 net.cpp:139] Memory required for data: 9524480
I0428 20:16:00.299893   565 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:00.299901   565 net.cpp:86] Creating Layer ip2
I0428 20:16:00.299904   565 net.cpp:408] ip2 <- ip1
I0428 20:16:00.299909   565 net.cpp:382] ip2 -> ip2
I0428 20:16:00.300006   565 net.cpp:124] Setting up ip2
I0428 20:16:00.300014   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.300016   565 net.cpp:139] Memory required for data: 9527040
I0428 20:16:00.300021   565 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:00.300029   565 net.cpp:86] Creating Layer relu2
I0428 20:16:00.300031   565 net.cpp:408] relu2 <- ip2
I0428 20:16:00.300035   565 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:00.300882   565 net.cpp:124] Setting up relu2
I0428 20:16:00.300894   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.300915   565 net.cpp:139] Memory required for data: 9529600
I0428 20:16:00.300917   565 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:00.300926   565 net.cpp:86] Creating Layer ip3
I0428 20:16:00.300930   565 net.cpp:408] ip3 <- ip2
I0428 20:16:00.300936   565 net.cpp:382] ip3 -> ip3
I0428 20:16:00.301035   565 net.cpp:124] Setting up ip3
I0428 20:16:00.301043   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.301046   565 net.cpp:139] Memory required for data: 9532160
I0428 20:16:00.301054   565 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:00.301059   565 net.cpp:86] Creating Layer relu3
I0428 20:16:00.301062   565 net.cpp:408] relu3 <- ip3
I0428 20:16:00.301066   565 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:00.301259   565 net.cpp:124] Setting up relu3
I0428 20:16:00.301268   565 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:00.301271   565 net.cpp:139] Memory required for data: 9534720
I0428 20:16:00.301275   565 layer_factory.hpp:77] Creating layer loss
I0428 20:16:00.301280   565 net.cpp:86] Creating Layer loss
I0428 20:16:00.301283   565 net.cpp:408] loss <- ip3
I0428 20:16:00.301287   565 net.cpp:408] loss <- label
I0428 20:16:00.301293   565 net.cpp:382] loss -> loss
I0428 20:16:00.301319   565 layer_factory.hpp:77] Creating layer loss
I0428 20:16:00.301612   565 net.cpp:124] Setting up loss
I0428 20:16:00.301620   565 net.cpp:131] Top shape: (1)
I0428 20:16:00.301640   565 net.cpp:134]     with loss weight 1
I0428 20:16:00.301653   565 net.cpp:139] Memory required for data: 9534724
I0428 20:16:00.301657   565 net.cpp:200] loss needs backward computation.
I0428 20:16:00.301661   565 net.cpp:200] relu3 needs backward computation.
I0428 20:16:00.301663   565 net.cpp:200] ip3 needs backward computation.
I0428 20:16:00.301667   565 net.cpp:200] relu2 needs backward computation.
I0428 20:16:00.301671   565 net.cpp:200] ip2 needs backward computation.
I0428 20:16:00.301673   565 net.cpp:200] relu1 needs backward computation.
I0428 20:16:00.301676   565 net.cpp:200] ip1 needs backward computation.
I0428 20:16:00.301679   565 net.cpp:200] pool1 needs backward computation.
I0428 20:16:00.301682   565 net.cpp:200] conv1 needs backward computation.
I0428 20:16:00.301686   565 net.cpp:200] pool0 needs backward computation.
I0428 20:16:00.301688   565 net.cpp:200] conv0 needs backward computation.
I0428 20:16:00.301692   565 net.cpp:202] mnist does not need backward computation.
I0428 20:16:00.301695   565 net.cpp:244] This network produces output loss
I0428 20:16:00.301719   565 net.cpp:257] Network initialization done.
I0428 20:16:00.302109   565 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1260.prototxt
I0428 20:16:00.302155   565 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:00.302271   565 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:00.302356   565 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:00.302397   565 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:00.302410   565 net.cpp:86] Creating Layer mnist
I0428 20:16:00.302428   565 net.cpp:382] mnist -> data
I0428 20:16:00.302435   565 net.cpp:382] mnist -> label
I0428 20:16:00.302523   565 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:00.304558   565 net.cpp:124] Setting up mnist
I0428 20:16:00.304570   565 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:00.304592   565 net.cpp:131] Top shape: 100 (100)
I0428 20:16:00.304595   565 net.cpp:139] Memory required for data: 314000
I0428 20:16:00.304600   565 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:00.304605   565 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:00.304608   565 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:00.304613   565 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:00.304620   565 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:00.304702   565 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:00.304710   565 net.cpp:131] Top shape: 100 (100)
I0428 20:16:00.304713   565 net.cpp:131] Top shape: 100 (100)
I0428 20:16:00.304716   565 net.cpp:139] Memory required for data: 314800
I0428 20:16:00.304719   565 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:00.304728   565 net.cpp:86] Creating Layer conv0
I0428 20:16:00.304733   565 net.cpp:408] conv0 <- data
I0428 20:16:00.304739   565 net.cpp:382] conv0 -> conv0
I0428 20:16:00.306376   565 net.cpp:124] Setting up conv0
I0428 20:16:00.306396   565 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:00.306416   565 net.cpp:139] Memory required for data: 11834800
I0428 20:16:00.306440   565 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:00.306463   565 net.cpp:86] Creating Layer pool0
I0428 20:16:00.306468   565 net.cpp:408] pool0 <- conv0
I0428 20:16:00.306471   565 net.cpp:382] pool0 -> pool0
I0428 20:16:00.306510   565 net.cpp:124] Setting up pool0
I0428 20:16:00.306517   565 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:00.306520   565 net.cpp:139] Memory required for data: 14714800
I0428 20:16:00.306524   565 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:00.306532   565 net.cpp:86] Creating Layer conv1
I0428 20:16:00.306537   565 net.cpp:408] conv1 <- pool0
I0428 20:16:00.306545   565 net.cpp:382] conv1 -> conv1
I0428 20:16:00.308203   565 net.cpp:124] Setting up conv1
I0428 20:16:00.308235   565 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:00.308238   565 net.cpp:139] Memory required for data: 14842800
I0428 20:16:00.308254   565 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:00.308261   565 net.cpp:86] Creating Layer pool1
I0428 20:16:00.308264   565 net.cpp:408] pool1 <- conv1
I0428 20:16:00.308269   565 net.cpp:382] pool1 -> pool1
I0428 20:16:00.308310   565 net.cpp:124] Setting up pool1
I0428 20:16:00.308316   565 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:00.308320   565 net.cpp:139] Memory required for data: 14874800
I0428 20:16:00.308323   565 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:00.308331   565 net.cpp:86] Creating Layer ip1
I0428 20:16:00.308333   565 net.cpp:408] ip1 <- pool1
I0428 20:16:00.308338   565 net.cpp:382] ip1 -> ip1
I0428 20:16:00.308459   565 net.cpp:124] Setting up ip1
I0428 20:16:00.308466   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.308482   565 net.cpp:139] Memory required for data: 14878800
I0428 20:16:00.308492   565 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:00.308500   565 net.cpp:86] Creating Layer relu1
I0428 20:16:00.308503   565 net.cpp:408] relu1 <- ip1
I0428 20:16:00.308507   565 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:00.308679   565 net.cpp:124] Setting up relu1
I0428 20:16:00.308689   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.308692   565 net.cpp:139] Memory required for data: 14882800
I0428 20:16:00.308696   565 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:00.308703   565 net.cpp:86] Creating Layer ip2
I0428 20:16:00.308707   565 net.cpp:408] ip2 <- ip1
I0428 20:16:00.308713   565 net.cpp:382] ip2 -> ip2
I0428 20:16:00.308861   565 net.cpp:124] Setting up ip2
I0428 20:16:00.308871   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.308873   565 net.cpp:139] Memory required for data: 14886800
I0428 20:16:00.308879   565 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:00.308886   565 net.cpp:86] Creating Layer relu2
I0428 20:16:00.308888   565 net.cpp:408] relu2 <- ip2
I0428 20:16:00.308892   565 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:00.309131   565 net.cpp:124] Setting up relu2
I0428 20:16:00.309156   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.309159   565 net.cpp:139] Memory required for data: 14890800
I0428 20:16:00.309164   565 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:00.309170   565 net.cpp:86] Creating Layer ip3
I0428 20:16:00.309173   565 net.cpp:408] ip3 <- ip2
I0428 20:16:00.309180   565 net.cpp:382] ip3 -> ip3
I0428 20:16:00.309284   565 net.cpp:124] Setting up ip3
I0428 20:16:00.309291   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.309295   565 net.cpp:139] Memory required for data: 14894800
I0428 20:16:00.309303   565 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:00.309309   565 net.cpp:86] Creating Layer relu3
I0428 20:16:00.309314   565 net.cpp:408] relu3 <- ip3
I0428 20:16:00.309319   565 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:00.310221   565 net.cpp:124] Setting up relu3
I0428 20:16:00.310235   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.310255   565 net.cpp:139] Memory required for data: 14898800
I0428 20:16:00.310257   565 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:00.310263   565 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:00.310266   565 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:00.310273   565 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:00.310279   565 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:00.310331   565 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:00.310338   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.310341   565 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:00.310344   565 net.cpp:139] Memory required for data: 14906800
I0428 20:16:00.310348   565 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:00.310353   565 net.cpp:86] Creating Layer accuracy
I0428 20:16:00.310356   565 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:00.310360   565 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:00.310365   565 net.cpp:382] accuracy -> accuracy
I0428 20:16:00.310372   565 net.cpp:124] Setting up accuracy
I0428 20:16:00.310376   565 net.cpp:131] Top shape: (1)
I0428 20:16:00.310379   565 net.cpp:139] Memory required for data: 14906804
I0428 20:16:00.310382   565 layer_factory.hpp:77] Creating layer loss
I0428 20:16:00.310387   565 net.cpp:86] Creating Layer loss
I0428 20:16:00.310391   565 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:00.310395   565 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:00.310400   565 net.cpp:382] loss -> loss
I0428 20:16:00.310406   565 layer_factory.hpp:77] Creating layer loss
I0428 20:16:00.310648   565 net.cpp:124] Setting up loss
I0428 20:16:00.310657   565 net.cpp:131] Top shape: (1)
I0428 20:16:00.310668   565 net.cpp:134]     with loss weight 1
I0428 20:16:00.310685   565 net.cpp:139] Memory required for data: 14906808
I0428 20:16:00.310689   565 net.cpp:200] loss needs backward computation.
I0428 20:16:00.310693   565 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:00.310698   565 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:00.310701   565 net.cpp:200] relu3 needs backward computation.
I0428 20:16:00.310704   565 net.cpp:200] ip3 needs backward computation.
I0428 20:16:00.310708   565 net.cpp:200] relu2 needs backward computation.
I0428 20:16:00.310710   565 net.cpp:200] ip2 needs backward computation.
I0428 20:16:00.310714   565 net.cpp:200] relu1 needs backward computation.
I0428 20:16:00.310721   565 net.cpp:200] ip1 needs backward computation.
I0428 20:16:00.310725   565 net.cpp:200] pool1 needs backward computation.
I0428 20:16:00.310729   565 net.cpp:200] conv1 needs backward computation.
I0428 20:16:00.310732   565 net.cpp:200] pool0 needs backward computation.
I0428 20:16:00.310735   565 net.cpp:200] conv0 needs backward computation.
I0428 20:16:00.310739   565 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:00.310748   565 net.cpp:202] mnist does not need backward computation.
I0428 20:16:00.310751   565 net.cpp:244] This network produces output accuracy
I0428 20:16:00.310755   565 net.cpp:244] This network produces output loss
I0428 20:16:00.310768   565 net.cpp:257] Network initialization done.
I0428 20:16:00.310812   565 solver.cpp:56] Solver scaffolding done.
I0428 20:16:00.311193   565 caffe.cpp:248] Starting Optimization
I0428 20:16:00.311209   565 solver.cpp:273] Solving LeNet
I0428 20:16:00.311211   565 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:00.312110   565 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:00.317881   565 blocking_queue.cpp:49] Waiting for data
I0428 20:16:00.390709   572 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:00.392421   565 solver.cpp:398]     Test net output #0: accuracy = 0.0932
I0428 20:16:00.392493   565 solver.cpp:398]     Test net output #1: loss = 2.30894 (* 1 = 2.30894 loss)
I0428 20:16:00.400238   565 solver.cpp:219] Iteration 0 (0 iter/s, 0.0889731s/100 iters), loss = 2.32039
I0428 20:16:00.400292   565 solver.cpp:238]     Train net output #0: loss = 2.32039 (* 1 = 2.32039 loss)
I0428 20:16:00.400311   565 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:00.527240   565 solver.cpp:219] Iteration 100 (787.817 iter/s, 0.126933s/100 iters), loss = 1.02481
I0428 20:16:00.527278   565 solver.cpp:238]     Train net output #0: loss = 1.02481 (* 1 = 1.02481 loss)
I0428 20:16:00.527287   565 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:00.647953   565 solver.cpp:219] Iteration 200 (828.761 iter/s, 0.120662s/100 iters), loss = 0.450981
I0428 20:16:00.647985   565 solver.cpp:238]     Train net output #0: loss = 0.450981 (* 1 = 0.450981 loss)
I0428 20:16:00.647994   565 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:00.767324   565 solver.cpp:219] Iteration 300 (838.028 iter/s, 0.119328s/100 iters), loss = 0.31688
I0428 20:16:00.767357   565 solver.cpp:238]     Train net output #0: loss = 0.31688 (* 1 = 0.31688 loss)
I0428 20:16:00.767365   565 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:00.894417   565 solver.cpp:219] Iteration 400 (787.119 iter/s, 0.127046s/100 iters), loss = 0.185657
I0428 20:16:00.894454   565 solver.cpp:238]     Train net output #0: loss = 0.185657 (* 1 = 0.185657 loss)
I0428 20:16:00.894464   565 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:01.011458   565 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:01.088094   572 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:01.088856   565 solver.cpp:398]     Test net output #0: accuracy = 0.9289
I0428 20:16:01.088894   565 solver.cpp:398]     Test net output #1: loss = 0.239799 (* 1 = 0.239799 loss)
I0428 20:16:01.090152   565 solver.cpp:219] Iteration 500 (511.022 iter/s, 0.195686s/100 iters), loss = 0.389155
I0428 20:16:01.090209   565 solver.cpp:238]     Train net output #0: loss = 0.389155 (* 1 = 0.389155 loss)
I0428 20:16:01.090216   565 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:01.206917   565 solver.cpp:219] Iteration 600 (856.792 iter/s, 0.116714s/100 iters), loss = 0.146768
I0428 20:16:01.206944   565 solver.cpp:238]     Train net output #0: loss = 0.146768 (* 1 = 0.146768 loss)
I0428 20:16:01.206951   565 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:01.321897   565 solver.cpp:219] Iteration 700 (870.004 iter/s, 0.114942s/100 iters), loss = 0.350002
I0428 20:16:01.321923   565 solver.cpp:238]     Train net output #0: loss = 0.350002 (* 1 = 0.350002 loss)
I0428 20:16:01.321929   565 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:01.438594   565 solver.cpp:219] Iteration 800 (857.189 iter/s, 0.11666s/100 iters), loss = 0.303308
I0428 20:16:01.438633   565 solver.cpp:238]     Train net output #0: loss = 0.303308 (* 1 = 0.303308 loss)
I0428 20:16:01.438639   565 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:01.553102   565 solver.cpp:219] Iteration 900 (873.694 iter/s, 0.114457s/100 iters), loss = 0.274907
I0428 20:16:01.553141   565 solver.cpp:238]     Train net output #0: loss = 0.274907 (* 1 = 0.274907 loss)
I0428 20:16:01.553163   565 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:01.591426   571 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:01.676818   565 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:01.677954   565 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:01.678851   565 solver.cpp:311] Iteration 1000, loss = 0.137383
I0428 20:16:01.678882   565 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:01.758307   572 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:01.759516   565 solver.cpp:398]     Test net output #0: accuracy = 0.9518
I0428 20:16:01.759544   565 solver.cpp:398]     Test net output #1: loss = 0.152 (* 1 = 0.152 loss)
I0428 20:16:01.759563   565 solver.cpp:316] Optimization Done.
I0428 20:16:01.759567   565 caffe.cpp:259] Optimization Done.
