I0428 20:29:12.629549  3493 caffe.cpp:218] Using GPUs 0
I0428 20:29:12.669824  3493 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:29:13.190807  3493 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1518.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:29:13.190946  3493 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1518.prototxt
I0428 20:29:13.191360  3493 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:29:13.191378  3493 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:29:13.191483  3493 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:13.191563  3493 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:13.191663  3493 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:29:13.191686  3493 net.cpp:86] Creating Layer mnist
I0428 20:29:13.191696  3493 net.cpp:382] mnist -> data
I0428 20:29:13.191718  3493 net.cpp:382] mnist -> label
I0428 20:29:13.192822  3493 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:29:13.195274  3493 net.cpp:124] Setting up mnist
I0428 20:29:13.195291  3493 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:29:13.195298  3493 net.cpp:131] Top shape: 64 (64)
I0428 20:29:13.195302  3493 net.cpp:139] Memory required for data: 200960
I0428 20:29:13.195309  3493 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:13.195324  3493 net.cpp:86] Creating Layer conv0
I0428 20:29:13.195345  3493 net.cpp:408] conv0 <- data
I0428 20:29:13.195358  3493 net.cpp:382] conv0 -> conv0
I0428 20:29:13.487144  3493 net.cpp:124] Setting up conv0
I0428 20:29:13.487175  3493 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:29:13.487180  3493 net.cpp:139] Memory required for data: 14946560
I0428 20:29:13.487198  3493 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:13.487216  3493 net.cpp:86] Creating Layer pool0
I0428 20:29:13.487221  3493 net.cpp:408] pool0 <- conv0
I0428 20:29:13.487231  3493 net.cpp:382] pool0 -> pool0
I0428 20:29:13.487290  3493 net.cpp:124] Setting up pool0
I0428 20:29:13.487300  3493 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:29:13.487304  3493 net.cpp:139] Memory required for data: 18632960
I0428 20:29:13.487308  3493 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:13.487323  3493 net.cpp:86] Creating Layer conv1
I0428 20:29:13.487327  3493 net.cpp:408] conv1 <- pool0
I0428 20:29:13.487336  3493 net.cpp:382] conv1 -> conv1
I0428 20:29:13.490561  3493 net.cpp:124] Setting up conv1
I0428 20:29:13.490579  3493 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:29:13.490583  3493 net.cpp:139] Memory required for data: 18714880
I0428 20:29:13.490594  3493 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:13.490603  3493 net.cpp:86] Creating Layer pool1
I0428 20:29:13.490608  3493 net.cpp:408] pool1 <- conv1
I0428 20:29:13.490614  3493 net.cpp:382] pool1 -> pool1
I0428 20:29:13.490659  3493 net.cpp:124] Setting up pool1
I0428 20:29:13.490669  3493 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:29:13.490672  3493 net.cpp:139] Memory required for data: 18735360
I0428 20:29:13.490676  3493 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:13.490684  3493 net.cpp:86] Creating Layer ip1
I0428 20:29:13.490689  3493 net.cpp:408] ip1 <- pool1
I0428 20:29:13.490694  3493 net.cpp:382] ip1 -> ip1
I0428 20:29:13.490849  3493 net.cpp:124] Setting up ip1
I0428 20:29:13.490859  3493 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:13.490861  3493 net.cpp:139] Memory required for data: 18748160
I0428 20:29:13.490870  3493 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:13.490877  3493 net.cpp:86] Creating Layer relu1
I0428 20:29:13.490883  3493 net.cpp:408] relu1 <- ip1
I0428 20:29:13.490890  3493 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:13.491087  3493 net.cpp:124] Setting up relu1
I0428 20:29:13.491098  3493 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:13.491102  3493 net.cpp:139] Memory required for data: 18760960
I0428 20:29:13.491106  3493 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:13.491113  3493 net.cpp:86] Creating Layer ip2
I0428 20:29:13.491117  3493 net.cpp:408] ip2 <- ip1
I0428 20:29:13.491123  3493 net.cpp:382] ip2 -> ip2
I0428 20:29:13.491251  3493 net.cpp:124] Setting up ip2
I0428 20:29:13.491261  3493 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:13.491264  3493 net.cpp:139] Memory required for data: 18773760
I0428 20:29:13.491271  3493 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:13.491277  3493 net.cpp:86] Creating Layer relu2
I0428 20:29:13.491281  3493 net.cpp:408] relu2 <- ip2
I0428 20:29:13.491286  3493 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:13.492130  3493 net.cpp:124] Setting up relu2
I0428 20:29:13.492144  3493 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:29:13.492148  3493 net.cpp:139] Memory required for data: 18786560
I0428 20:29:13.492152  3493 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:13.492161  3493 net.cpp:86] Creating Layer ip3
I0428 20:29:13.492166  3493 net.cpp:408] ip3 <- ip2
I0428 20:29:13.492172  3493 net.cpp:382] ip3 -> ip3
I0428 20:29:13.492295  3493 net.cpp:124] Setting up ip3
I0428 20:29:13.492305  3493 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:13.492308  3493 net.cpp:139] Memory required for data: 18789120
I0428 20:29:13.492318  3493 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:13.492326  3493 net.cpp:86] Creating Layer relu3
I0428 20:29:13.492328  3493 net.cpp:408] relu3 <- ip3
I0428 20:29:13.492334  3493 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:13.492533  3493 net.cpp:124] Setting up relu3
I0428 20:29:13.492543  3493 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:13.492547  3493 net.cpp:139] Memory required for data: 18791680
I0428 20:29:13.492552  3493 layer_factory.hpp:77] Creating layer loss
I0428 20:29:13.492558  3493 net.cpp:86] Creating Layer loss
I0428 20:29:13.492563  3493 net.cpp:408] loss <- ip3
I0428 20:29:13.492568  3493 net.cpp:408] loss <- label
I0428 20:29:13.492580  3493 net.cpp:382] loss -> loss
I0428 20:29:13.492597  3493 layer_factory.hpp:77] Creating layer loss
I0428 20:29:13.492874  3493 net.cpp:124] Setting up loss
I0428 20:29:13.492887  3493 net.cpp:131] Top shape: (1)
I0428 20:29:13.492892  3493 net.cpp:134]     with loss weight 1
I0428 20:29:13.492909  3493 net.cpp:139] Memory required for data: 18791684
I0428 20:29:13.492913  3493 net.cpp:200] loss needs backward computation.
I0428 20:29:13.492918  3493 net.cpp:200] relu3 needs backward computation.
I0428 20:29:13.492921  3493 net.cpp:200] ip3 needs backward computation.
I0428 20:29:13.492925  3493 net.cpp:200] relu2 needs backward computation.
I0428 20:29:13.492929  3493 net.cpp:200] ip2 needs backward computation.
I0428 20:29:13.492933  3493 net.cpp:200] relu1 needs backward computation.
I0428 20:29:13.492936  3493 net.cpp:200] ip1 needs backward computation.
I0428 20:29:13.492939  3493 net.cpp:200] pool1 needs backward computation.
I0428 20:29:13.492944  3493 net.cpp:200] conv1 needs backward computation.
I0428 20:29:13.492947  3493 net.cpp:200] pool0 needs backward computation.
I0428 20:29:13.492950  3493 net.cpp:200] conv0 needs backward computation.
I0428 20:29:13.492955  3493 net.cpp:202] mnist does not need backward computation.
I0428 20:29:13.492959  3493 net.cpp:244] This network produces output loss
I0428 20:29:13.492969  3493 net.cpp:257] Network initialization done.
I0428 20:29:13.493356  3493 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1518.prototxt
I0428 20:29:13.493388  3493 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:29:13.493496  3493 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:29:13.493592  3493 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:13.493646  3493 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:29:13.493661  3493 net.cpp:86] Creating Layer mnist
I0428 20:29:13.493666  3493 net.cpp:382] mnist -> data
I0428 20:29:13.493676  3493 net.cpp:382] mnist -> label
I0428 20:29:13.493778  3493 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:29:13.495970  3493 net.cpp:124] Setting up mnist
I0428 20:29:13.495986  3493 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:29:13.495992  3493 net.cpp:131] Top shape: 100 (100)
I0428 20:29:13.495996  3493 net.cpp:139] Memory required for data: 314000
I0428 20:29:13.496001  3493 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:29:13.496009  3493 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:29:13.496013  3493 net.cpp:408] label_mnist_1_split <- label
I0428 20:29:13.496019  3493 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:29:13.496027  3493 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:29:13.496098  3493 net.cpp:124] Setting up label_mnist_1_split
I0428 20:29:13.496104  3493 net.cpp:131] Top shape: 100 (100)
I0428 20:29:13.496109  3493 net.cpp:131] Top shape: 100 (100)
I0428 20:29:13.496112  3493 net.cpp:139] Memory required for data: 314800
I0428 20:29:13.496116  3493 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:13.496126  3493 net.cpp:86] Creating Layer conv0
I0428 20:29:13.496129  3493 net.cpp:408] conv0 <- data
I0428 20:29:13.496135  3493 net.cpp:382] conv0 -> conv0
I0428 20:29:13.497982  3493 net.cpp:124] Setting up conv0
I0428 20:29:13.497999  3493 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:29:13.498004  3493 net.cpp:139] Memory required for data: 23354800
I0428 20:29:13.498015  3493 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:13.498023  3493 net.cpp:86] Creating Layer pool0
I0428 20:29:13.498028  3493 net.cpp:408] pool0 <- conv0
I0428 20:29:13.498034  3493 net.cpp:382] pool0 -> pool0
I0428 20:29:13.498078  3493 net.cpp:124] Setting up pool0
I0428 20:29:13.498086  3493 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:29:13.498090  3493 net.cpp:139] Memory required for data: 29114800
I0428 20:29:13.498093  3493 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:13.498105  3493 net.cpp:86] Creating Layer conv1
I0428 20:29:13.498108  3493 net.cpp:408] conv1 <- pool0
I0428 20:29:13.498114  3493 net.cpp:382] conv1 -> conv1
I0428 20:29:13.499848  3493 net.cpp:124] Setting up conv1
I0428 20:29:13.499863  3493 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:29:13.499868  3493 net.cpp:139] Memory required for data: 29242800
I0428 20:29:13.499878  3493 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:13.499886  3493 net.cpp:86] Creating Layer pool1
I0428 20:29:13.499891  3493 net.cpp:408] pool1 <- conv1
I0428 20:29:13.499897  3493 net.cpp:382] pool1 -> pool1
I0428 20:29:13.499938  3493 net.cpp:124] Setting up pool1
I0428 20:29:13.499946  3493 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:29:13.499950  3493 net.cpp:139] Memory required for data: 29274800
I0428 20:29:13.499954  3493 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:13.499960  3493 net.cpp:86] Creating Layer ip1
I0428 20:29:13.499965  3493 net.cpp:408] ip1 <- pool1
I0428 20:29:13.499970  3493 net.cpp:382] ip1 -> ip1
I0428 20:29:13.500116  3493 net.cpp:124] Setting up ip1
I0428 20:29:13.500125  3493 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:13.500140  3493 net.cpp:139] Memory required for data: 29294800
I0428 20:29:13.500149  3493 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:13.500155  3493 net.cpp:86] Creating Layer relu1
I0428 20:29:13.500159  3493 net.cpp:408] relu1 <- ip1
I0428 20:29:13.500171  3493 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:13.500391  3493 net.cpp:124] Setting up relu1
I0428 20:29:13.500401  3493 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:13.500404  3493 net.cpp:139] Memory required for data: 29314800
I0428 20:29:13.500408  3493 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:13.500416  3493 net.cpp:86] Creating Layer ip2
I0428 20:29:13.500421  3493 net.cpp:408] ip2 <- ip1
I0428 20:29:13.500427  3493 net.cpp:382] ip2 -> ip2
I0428 20:29:13.500576  3493 net.cpp:124] Setting up ip2
I0428 20:29:13.500583  3493 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:13.500587  3493 net.cpp:139] Memory required for data: 29334800
I0428 20:29:13.500594  3493 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:13.500599  3493 net.cpp:86] Creating Layer relu2
I0428 20:29:13.500609  3493 net.cpp:408] relu2 <- ip2
I0428 20:29:13.500614  3493 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:13.500787  3493 net.cpp:124] Setting up relu2
I0428 20:29:13.500797  3493 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:29:13.500800  3493 net.cpp:139] Memory required for data: 29354800
I0428 20:29:13.500804  3493 layer_factory.hpp:77] Creating layer ip3
I0428 20:29:13.500820  3493 net.cpp:86] Creating Layer ip3
I0428 20:29:13.500830  3493 net.cpp:408] ip3 <- ip2
I0428 20:29:13.500836  3493 net.cpp:382] ip3 -> ip3
I0428 20:29:13.500954  3493 net.cpp:124] Setting up ip3
I0428 20:29:13.500962  3493 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:13.500967  3493 net.cpp:139] Memory required for data: 29358800
I0428 20:29:13.500975  3493 layer_factory.hpp:77] Creating layer relu3
I0428 20:29:13.500982  3493 net.cpp:86] Creating Layer relu3
I0428 20:29:13.500984  3493 net.cpp:408] relu3 <- ip3
I0428 20:29:13.500989  3493 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:29:13.501910  3493 net.cpp:124] Setting up relu3
I0428 20:29:13.501924  3493 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:13.501929  3493 net.cpp:139] Memory required for data: 29362800
I0428 20:29:13.501940  3493 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:29:13.501946  3493 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:29:13.501951  3493 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:29:13.501957  3493 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:29:13.501965  3493 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:29:13.502009  3493 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:29:13.502017  3493 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:13.502020  3493 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:13.502023  3493 net.cpp:139] Memory required for data: 29370800
I0428 20:29:13.502027  3493 layer_factory.hpp:77] Creating layer accuracy
I0428 20:29:13.502032  3493 net.cpp:86] Creating Layer accuracy
I0428 20:29:13.502037  3493 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:29:13.502041  3493 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:29:13.502046  3493 net.cpp:382] accuracy -> accuracy
I0428 20:29:13.502054  3493 net.cpp:124] Setting up accuracy
I0428 20:29:13.502065  3493 net.cpp:131] Top shape: (1)
I0428 20:29:13.502068  3493 net.cpp:139] Memory required for data: 29370804
I0428 20:29:13.502071  3493 layer_factory.hpp:77] Creating layer loss
I0428 20:29:13.502076  3493 net.cpp:86] Creating Layer loss
I0428 20:29:13.502080  3493 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:29:13.502084  3493 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:29:13.502089  3493 net.cpp:382] loss -> loss
I0428 20:29:13.502096  3493 layer_factory.hpp:77] Creating layer loss
I0428 20:29:13.502355  3493 net.cpp:124] Setting up loss
I0428 20:29:13.502367  3493 net.cpp:131] Top shape: (1)
I0428 20:29:13.502370  3493 net.cpp:134]     with loss weight 1
I0428 20:29:13.502389  3493 net.cpp:139] Memory required for data: 29370808
I0428 20:29:13.502394  3493 net.cpp:200] loss needs backward computation.
I0428 20:29:13.502399  3493 net.cpp:202] accuracy does not need backward computation.
I0428 20:29:13.502403  3493 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:29:13.502408  3493 net.cpp:200] relu3 needs backward computation.
I0428 20:29:13.502413  3493 net.cpp:200] ip3 needs backward computation.
I0428 20:29:13.502415  3493 net.cpp:200] relu2 needs backward computation.
I0428 20:29:13.502419  3493 net.cpp:200] ip2 needs backward computation.
I0428 20:29:13.502423  3493 net.cpp:200] relu1 needs backward computation.
I0428 20:29:13.502425  3493 net.cpp:200] ip1 needs backward computation.
I0428 20:29:13.502429  3493 net.cpp:200] pool1 needs backward computation.
I0428 20:29:13.502434  3493 net.cpp:200] conv1 needs backward computation.
I0428 20:29:13.502437  3493 net.cpp:200] pool0 needs backward computation.
I0428 20:29:13.502441  3493 net.cpp:200] conv0 needs backward computation.
I0428 20:29:13.502445  3493 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:29:13.502449  3493 net.cpp:202] mnist does not need backward computation.
I0428 20:29:13.502454  3493 net.cpp:244] This network produces output accuracy
I0428 20:29:13.502457  3493 net.cpp:244] This network produces output loss
I0428 20:29:13.502470  3493 net.cpp:257] Network initialization done.
I0428 20:29:13.502517  3493 solver.cpp:56] Solver scaffolding done.
I0428 20:29:13.502909  3493 caffe.cpp:248] Starting Optimization
I0428 20:29:13.502917  3493 solver.cpp:273] Solving LeNet
I0428 20:29:13.502920  3493 solver.cpp:274] Learning Rate Policy: inv
I0428 20:29:13.503810  3493 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:29:13.599375  3500 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:13.601857  3493 solver.cpp:398]     Test net output #0: accuracy = 0.117
I0428 20:29:13.601876  3493 solver.cpp:398]     Test net output #1: loss = 2.31862 (* 1 = 2.31862 loss)
I0428 20:29:13.606371  3493 solver.cpp:219] Iteration 0 (-7.86128e-43 iter/s, 0.103426s/100 iters), loss = 2.32932
I0428 20:29:13.606395  3493 solver.cpp:238]     Train net output #0: loss = 2.32932 (* 1 = 2.32932 loss)
I0428 20:29:13.606422  3493 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:29:13.810515  3493 solver.cpp:219] Iteration 100 (489.947 iter/s, 0.204104s/100 iters), loss = 1.09452
I0428 20:29:13.810549  3493 solver.cpp:238]     Train net output #0: loss = 1.09452 (* 1 = 1.09452 loss)
I0428 20:29:13.810557  3493 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:29:14.034121  3493 solver.cpp:219] Iteration 200 (447.322 iter/s, 0.223552s/100 iters), loss = 0.482521
I0428 20:29:14.034173  3493 solver.cpp:238]     Train net output #0: loss = 0.482521 (* 1 = 0.482521 loss)
I0428 20:29:14.034186  3493 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:29:14.258411  3493 solver.cpp:219] Iteration 300 (445.988 iter/s, 0.224221s/100 iters), loss = 0.935473
I0428 20:29:14.258464  3493 solver.cpp:238]     Train net output #0: loss = 0.935473 (* 1 = 0.935473 loss)
I0428 20:29:14.258477  3493 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:29:14.482790  3493 solver.cpp:219] Iteration 400 (445.815 iter/s, 0.224308s/100 iters), loss = 0.488384
I0428 20:29:14.482841  3493 solver.cpp:238]     Train net output #0: loss = 0.488384 (* 1 = 0.488384 loss)
I0428 20:29:14.482854  3493 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:29:14.704530  3493 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:29:14.809692  3500 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:14.812505  3493 solver.cpp:398]     Test net output #0: accuracy = 0.7729
I0428 20:29:14.812533  3493 solver.cpp:398]     Test net output #1: loss = 0.590436 (* 1 = 0.590436 loss)
I0428 20:29:14.814467  3493 solver.cpp:219] Iteration 500 (301.56 iter/s, 0.331609s/100 iters), loss = 0.510341
I0428 20:29:14.814496  3493 solver.cpp:238]     Train net output #0: loss = 0.510341 (* 1 = 0.510341 loss)
I0428 20:29:14.814522  3493 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:29:15.034420  3493 solver.cpp:219] Iteration 600 (454.744 iter/s, 0.219904s/100 iters), loss = 0.494597
I0428 20:29:15.034471  3493 solver.cpp:238]     Train net output #0: loss = 0.494597 (* 1 = 0.494597 loss)
I0428 20:29:15.034487  3493 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:29:15.247256  3493 solver.cpp:219] Iteration 700 (469.987 iter/s, 0.212772s/100 iters), loss = 0.547236
I0428 20:29:15.247292  3493 solver.cpp:238]     Train net output #0: loss = 0.547236 (* 1 = 0.547236 loss)
I0428 20:29:15.247300  3493 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:29:15.453073  3493 solver.cpp:219] Iteration 800 (486 iter/s, 0.205761s/100 iters), loss = 0.767663
I0428 20:29:15.453124  3493 solver.cpp:238]     Train net output #0: loss = 0.767663 (* 1 = 0.767663 loss)
I0428 20:29:15.453136  3493 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:29:15.666273  3493 solver.cpp:219] Iteration 900 (469.197 iter/s, 0.21313s/100 iters), loss = 0.663651
I0428 20:29:15.666333  3493 solver.cpp:238]     Train net output #0: loss = 0.663651 (* 1 = 0.663651 loss)
I0428 20:29:15.666347  3493 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:29:15.741675  3499 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:15.886488  3493 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:29:15.888566  3493 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:29:15.889950  3493 solver.cpp:311] Iteration 1000, loss = 0.562826
I0428 20:29:15.889978  3493 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:29:16.003836  3500 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:16.006672  3493 solver.cpp:398]     Test net output #0: accuracy = 0.7824
I0428 20:29:16.006700  3493 solver.cpp:398]     Test net output #1: loss = 0.540657 (* 1 = 0.540657 loss)
I0428 20:29:16.006708  3493 solver.cpp:316] Optimization Done.
I0428 20:29:16.006714  3493 caffe.cpp:259] Optimization Done.
