I0428 19:57:00.947126 28574 caffe.cpp:218] Using GPUs 0
I0428 19:57:00.983372 28574 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:01.439023 28574 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test776.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:01.439157 28574 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test776.prototxt
I0428 19:57:01.439482 28574 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:01.439497 28574 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:01.439575 28574 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:01.439640 28574 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:01.439735 28574 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:01.439755 28574 net.cpp:86] Creating Layer mnist
I0428 19:57:01.439764 28574 net.cpp:382] mnist -> data
I0428 19:57:01.439797 28574 net.cpp:382] mnist -> label
I0428 19:57:01.440778 28574 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:01.442884 28574 net.cpp:124] Setting up mnist
I0428 19:57:01.442899 28574 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:01.442904 28574 net.cpp:131] Top shape: 64 (64)
I0428 19:57:01.442906 28574 net.cpp:139] Memory required for data: 200960
I0428 19:57:01.442912 28574 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:01.442924 28574 net.cpp:86] Creating Layer conv0
I0428 19:57:01.442940 28574 net.cpp:408] conv0 <- data
I0428 19:57:01.442965 28574 net.cpp:382] conv0 -> conv0
I0428 19:57:01.674034 28574 net.cpp:124] Setting up conv0
I0428 19:57:01.674077 28574 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:01.674080 28574 net.cpp:139] Memory required for data: 1675520
I0428 19:57:01.674094 28574 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:01.674108 28574 net.cpp:86] Creating Layer pool0
I0428 19:57:01.674110 28574 net.cpp:408] pool0 <- conv0
I0428 19:57:01.674115 28574 net.cpp:382] pool0 -> pool0
I0428 19:57:01.674160 28574 net.cpp:124] Setting up pool0
I0428 19:57:01.674166 28574 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:01.674168 28574 net.cpp:139] Memory required for data: 2044160
I0428 19:57:01.674171 28574 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:01.674181 28574 net.cpp:86] Creating Layer conv1
I0428 19:57:01.674185 28574 net.cpp:408] conv1 <- pool0
I0428 19:57:01.674190 28574 net.cpp:382] conv1 -> conv1
I0428 19:57:01.676177 28574 net.cpp:124] Setting up conv1
I0428 19:57:01.676206 28574 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:57:01.676210 28574 net.cpp:139] Memory required for data: 2076928
I0428 19:57:01.676219 28574 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:01.676226 28574 net.cpp:86] Creating Layer pool1
I0428 19:57:01.676230 28574 net.cpp:408] pool1 <- conv1
I0428 19:57:01.676235 28574 net.cpp:382] pool1 -> pool1
I0428 19:57:01.676271 28574 net.cpp:124] Setting up pool1
I0428 19:57:01.676277 28574 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:57:01.676280 28574 net.cpp:139] Memory required for data: 2085120
I0428 19:57:01.676283 28574 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:01.676290 28574 net.cpp:86] Creating Layer ip1
I0428 19:57:01.676293 28574 net.cpp:408] ip1 <- pool1
I0428 19:57:01.676297 28574 net.cpp:382] ip1 -> ip1
I0428 19:57:01.677358 28574 net.cpp:124] Setting up ip1
I0428 19:57:01.677371 28574 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:01.677389 28574 net.cpp:139] Memory required for data: 2097920
I0428 19:57:01.677398 28574 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:01.677404 28574 net.cpp:86] Creating Layer relu1
I0428 19:57:01.677407 28574 net.cpp:408] relu1 <- ip1
I0428 19:57:01.677412 28574 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:01.677588 28574 net.cpp:124] Setting up relu1
I0428 19:57:01.677597 28574 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:57:01.677600 28574 net.cpp:139] Memory required for data: 2110720
I0428 19:57:01.677603 28574 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:01.677610 28574 net.cpp:86] Creating Layer ip2
I0428 19:57:01.677613 28574 net.cpp:408] ip2 <- ip1
I0428 19:57:01.677618 28574 net.cpp:382] ip2 -> ip2
I0428 19:57:01.677714 28574 net.cpp:124] Setting up ip2
I0428 19:57:01.677721 28574 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:01.677724 28574 net.cpp:139] Memory required for data: 2117120
I0428 19:57:01.677731 28574 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:01.677736 28574 net.cpp:86] Creating Layer relu2
I0428 19:57:01.677738 28574 net.cpp:408] relu2 <- ip2
I0428 19:57:01.677742 28574 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:01.678549 28574 net.cpp:124] Setting up relu2
I0428 19:57:01.678560 28574 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:01.678580 28574 net.cpp:139] Memory required for data: 2123520
I0428 19:57:01.678584 28574 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:01.678591 28574 net.cpp:86] Creating Layer ip3
I0428 19:57:01.678594 28574 net.cpp:408] ip3 <- ip2
I0428 19:57:01.678603 28574 net.cpp:382] ip3 -> ip3
I0428 19:57:01.678715 28574 net.cpp:124] Setting up ip3
I0428 19:57:01.678724 28574 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:01.678726 28574 net.cpp:139] Memory required for data: 2126080
I0428 19:57:01.678735 28574 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:01.678740 28574 net.cpp:86] Creating Layer relu3
I0428 19:57:01.678742 28574 net.cpp:408] relu3 <- ip3
I0428 19:57:01.678746 28574 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:01.678951 28574 net.cpp:124] Setting up relu3
I0428 19:57:01.678961 28574 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:01.678963 28574 net.cpp:139] Memory required for data: 2128640
I0428 19:57:01.678966 28574 layer_factory.hpp:77] Creating layer loss
I0428 19:57:01.678975 28574 net.cpp:86] Creating Layer loss
I0428 19:57:01.678978 28574 net.cpp:408] loss <- ip3
I0428 19:57:01.678982 28574 net.cpp:408] loss <- label
I0428 19:57:01.678988 28574 net.cpp:382] loss -> loss
I0428 19:57:01.679006 28574 layer_factory.hpp:77] Creating layer loss
I0428 19:57:01.679270 28574 net.cpp:124] Setting up loss
I0428 19:57:01.679280 28574 net.cpp:131] Top shape: (1)
I0428 19:57:01.679283 28574 net.cpp:134]     with loss weight 1
I0428 19:57:01.679297 28574 net.cpp:139] Memory required for data: 2128644
I0428 19:57:01.679301 28574 net.cpp:200] loss needs backward computation.
I0428 19:57:01.679306 28574 net.cpp:200] relu3 needs backward computation.
I0428 19:57:01.679308 28574 net.cpp:200] ip3 needs backward computation.
I0428 19:57:01.679311 28574 net.cpp:200] relu2 needs backward computation.
I0428 19:57:01.679313 28574 net.cpp:200] ip2 needs backward computation.
I0428 19:57:01.679316 28574 net.cpp:200] relu1 needs backward computation.
I0428 19:57:01.679319 28574 net.cpp:200] ip1 needs backward computation.
I0428 19:57:01.679337 28574 net.cpp:200] pool1 needs backward computation.
I0428 19:57:01.679339 28574 net.cpp:200] conv1 needs backward computation.
I0428 19:57:01.679342 28574 net.cpp:200] pool0 needs backward computation.
I0428 19:57:01.679355 28574 net.cpp:200] conv0 needs backward computation.
I0428 19:57:01.679359 28574 net.cpp:202] mnist does not need backward computation.
I0428 19:57:01.679361 28574 net.cpp:244] This network produces output loss
I0428 19:57:01.679373 28574 net.cpp:257] Network initialization done.
I0428 19:57:01.679714 28574 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test776.prototxt
I0428 19:57:01.679754 28574 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:01.679843 28574 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:01.679939 28574 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:01.679983 28574 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:01.679996 28574 net.cpp:86] Creating Layer mnist
I0428 19:57:01.680002 28574 net.cpp:382] mnist -> data
I0428 19:57:01.680009 28574 net.cpp:382] mnist -> label
I0428 19:57:01.680105 28574 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:01.682194 28574 net.cpp:124] Setting up mnist
I0428 19:57:01.682237 28574 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:01.682243 28574 net.cpp:131] Top shape: 100 (100)
I0428 19:57:01.682245 28574 net.cpp:139] Memory required for data: 314000
I0428 19:57:01.682250 28574 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:01.682255 28574 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:01.682258 28574 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:01.682301 28574 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:01.682308 28574 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:01.682350 28574 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:01.682356 28574 net.cpp:131] Top shape: 100 (100)
I0428 19:57:01.682359 28574 net.cpp:131] Top shape: 100 (100)
I0428 19:57:01.682363 28574 net.cpp:139] Memory required for data: 314800
I0428 19:57:01.682366 28574 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:01.682376 28574 net.cpp:86] Creating Layer conv0
I0428 19:57:01.682380 28574 net.cpp:408] conv0 <- data
I0428 19:57:01.682385 28574 net.cpp:382] conv0 -> conv0
I0428 19:57:01.684111 28574 net.cpp:124] Setting up conv0
I0428 19:57:01.684124 28574 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:01.684128 28574 net.cpp:139] Memory required for data: 2618800
I0428 19:57:01.684136 28574 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:01.684144 28574 net.cpp:86] Creating Layer pool0
I0428 19:57:01.684147 28574 net.cpp:408] pool0 <- conv0
I0428 19:57:01.684151 28574 net.cpp:382] pool0 -> pool0
I0428 19:57:01.684186 28574 net.cpp:124] Setting up pool0
I0428 19:57:01.684191 28574 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:01.684193 28574 net.cpp:139] Memory required for data: 3194800
I0428 19:57:01.684196 28574 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:01.684206 28574 net.cpp:86] Creating Layer conv1
I0428 19:57:01.684208 28574 net.cpp:408] conv1 <- pool0
I0428 19:57:01.684213 28574 net.cpp:382] conv1 -> conv1
I0428 19:57:01.686348 28574 net.cpp:124] Setting up conv1
I0428 19:57:01.686362 28574 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:57:01.686364 28574 net.cpp:139] Memory required for data: 3246000
I0428 19:57:01.686375 28574 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:01.686381 28574 net.cpp:86] Creating Layer pool1
I0428 19:57:01.686384 28574 net.cpp:408] pool1 <- conv1
I0428 19:57:01.686389 28574 net.cpp:382] pool1 -> pool1
I0428 19:57:01.686449 28574 net.cpp:124] Setting up pool1
I0428 19:57:01.686461 28574 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:57:01.686465 28574 net.cpp:139] Memory required for data: 3258800
I0428 19:57:01.686467 28574 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:01.686472 28574 net.cpp:86] Creating Layer ip1
I0428 19:57:01.686475 28574 net.cpp:408] ip1 <- pool1
I0428 19:57:01.686481 28574 net.cpp:382] ip1 -> ip1
I0428 19:57:01.686633 28574 net.cpp:124] Setting up ip1
I0428 19:57:01.686642 28574 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:01.686671 28574 net.cpp:139] Memory required for data: 3278800
I0428 19:57:01.686678 28574 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:01.686686 28574 net.cpp:86] Creating Layer relu1
I0428 19:57:01.686688 28574 net.cpp:408] relu1 <- ip1
I0428 19:57:01.686693 28574 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:01.686874 28574 net.cpp:124] Setting up relu1
I0428 19:57:01.686884 28574 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:57:01.686887 28574 net.cpp:139] Memory required for data: 3298800
I0428 19:57:01.686892 28574 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:01.686898 28574 net.cpp:86] Creating Layer ip2
I0428 19:57:01.686909 28574 net.cpp:408] ip2 <- ip1
I0428 19:57:01.686915 28574 net.cpp:382] ip2 -> ip2
I0428 19:57:01.687036 28574 net.cpp:124] Setting up ip2
I0428 19:57:01.687044 28574 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:01.687047 28574 net.cpp:139] Memory required for data: 3308800
I0428 19:57:01.687052 28574 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:01.687063 28574 net.cpp:86] Creating Layer relu2
I0428 19:57:01.687067 28574 net.cpp:408] relu2 <- ip2
I0428 19:57:01.687070 28574 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:01.687255 28574 net.cpp:124] Setting up relu2
I0428 19:57:01.687268 28574 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:01.687270 28574 net.cpp:139] Memory required for data: 3318800
I0428 19:57:01.687279 28574 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:01.687285 28574 net.cpp:86] Creating Layer ip3
I0428 19:57:01.687294 28574 net.cpp:408] ip3 <- ip2
I0428 19:57:01.687300 28574 net.cpp:382] ip3 -> ip3
I0428 19:57:01.687412 28574 net.cpp:124] Setting up ip3
I0428 19:57:01.687419 28574 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:01.687422 28574 net.cpp:139] Memory required for data: 3322800
I0428 19:57:01.687436 28574 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:01.687440 28574 net.cpp:86] Creating Layer relu3
I0428 19:57:01.687449 28574 net.cpp:408] relu3 <- ip3
I0428 19:57:01.687453 28574 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:01.688295 28574 net.cpp:124] Setting up relu3
I0428 19:57:01.688308 28574 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:01.688310 28574 net.cpp:139] Memory required for data: 3326800
I0428 19:57:01.688313 28574 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:01.688318 28574 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:01.688336 28574 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:01.688343 28574 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:01.688347 28574 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:01.688388 28574 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:01.688395 28574 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:01.688397 28574 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:01.688400 28574 net.cpp:139] Memory required for data: 3334800
I0428 19:57:01.688403 28574 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:01.688411 28574 net.cpp:86] Creating Layer accuracy
I0428 19:57:01.688415 28574 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:01.688418 28574 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:01.688428 28574 net.cpp:382] accuracy -> accuracy
I0428 19:57:01.688434 28574 net.cpp:124] Setting up accuracy
I0428 19:57:01.688438 28574 net.cpp:131] Top shape: (1)
I0428 19:57:01.688441 28574 net.cpp:139] Memory required for data: 3334804
I0428 19:57:01.688443 28574 layer_factory.hpp:77] Creating layer loss
I0428 19:57:01.688449 28574 net.cpp:86] Creating Layer loss
I0428 19:57:01.688452 28574 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:01.688455 28574 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:01.688459 28574 net.cpp:382] loss -> loss
I0428 19:57:01.688464 28574 layer_factory.hpp:77] Creating layer loss
I0428 19:57:01.688735 28574 net.cpp:124] Setting up loss
I0428 19:57:01.688743 28574 net.cpp:131] Top shape: (1)
I0428 19:57:01.688746 28574 net.cpp:134]     with loss weight 1
I0428 19:57:01.688752 28574 net.cpp:139] Memory required for data: 3334808
I0428 19:57:01.688766 28574 net.cpp:200] loss needs backward computation.
I0428 19:57:01.688776 28574 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:01.688781 28574 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:01.688787 28574 net.cpp:200] relu3 needs backward computation.
I0428 19:57:01.688791 28574 net.cpp:200] ip3 needs backward computation.
I0428 19:57:01.688794 28574 net.cpp:200] relu2 needs backward computation.
I0428 19:57:01.688796 28574 net.cpp:200] ip2 needs backward computation.
I0428 19:57:01.688804 28574 net.cpp:200] relu1 needs backward computation.
I0428 19:57:01.688807 28574 net.cpp:200] ip1 needs backward computation.
I0428 19:57:01.688815 28574 net.cpp:200] pool1 needs backward computation.
I0428 19:57:01.688833 28574 net.cpp:200] conv1 needs backward computation.
I0428 19:57:01.688837 28574 net.cpp:200] pool0 needs backward computation.
I0428 19:57:01.688839 28574 net.cpp:200] conv0 needs backward computation.
I0428 19:57:01.688859 28574 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:01.688865 28574 net.cpp:202] mnist does not need backward computation.
I0428 19:57:01.688868 28574 net.cpp:244] This network produces output accuracy
I0428 19:57:01.688872 28574 net.cpp:244] This network produces output loss
I0428 19:57:01.688884 28574 net.cpp:257] Network initialization done.
I0428 19:57:01.688927 28574 solver.cpp:56] Solver scaffolding done.
I0428 19:57:01.689321 28574 caffe.cpp:248] Starting Optimization
I0428 19:57:01.689327 28574 solver.cpp:273] Solving LeNet
I0428 19:57:01.689330 28574 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:01.690122 28574 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:01.693857 28574 blocking_queue.cpp:49] Waiting for data
I0428 19:57:01.766463 28581 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:01.766983 28574 solver.cpp:398]     Test net output #0: accuracy = 0.0747
I0428 19:57:01.767000 28574 solver.cpp:398]     Test net output #1: loss = 2.33612 (* 1 = 2.33612 loss)
I0428 19:57:01.769634 28574 solver.cpp:219] Iteration 0 (0 iter/s, 0.0802775s/100 iters), loss = 2.32148
I0428 19:57:01.769659 28574 solver.cpp:238]     Train net output #0: loss = 2.32148 (* 1 = 2.32148 loss)
I0428 19:57:01.769670 28574 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:01.844310 28574 solver.cpp:219] Iteration 100 (1339.72 iter/s, 0.0746424s/100 iters), loss = 1.0988
I0428 19:57:01.844336 28574 solver.cpp:238]     Train net output #0: loss = 1.0988 (* 1 = 1.0988 loss)
I0428 19:57:01.844343 28574 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:01.918368 28574 solver.cpp:219] Iteration 200 (1350.9 iter/s, 0.074025s/100 iters), loss = 0.789119
I0428 19:57:01.918392 28574 solver.cpp:238]     Train net output #0: loss = 0.789119 (* 1 = 0.789119 loss)
I0428 19:57:01.918398 28574 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:01.996805 28574 solver.cpp:219] Iteration 300 (1275.45 iter/s, 0.0784036s/100 iters), loss = 0.833917
I0428 19:57:01.996851 28574 solver.cpp:238]     Train net output #0: loss = 0.833917 (* 1 = 0.833917 loss)
I0428 19:57:01.996857 28574 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:02.071276 28574 solver.cpp:219] Iteration 400 (1343.79 iter/s, 0.0744162s/100 iters), loss = 0.659281
I0428 19:57:02.071316 28574 solver.cpp:238]     Train net output #0: loss = 0.659281 (* 1 = 0.659281 loss)
I0428 19:57:02.071321 28574 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:02.144337 28574 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:02.215656 28581 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:02.216202 28574 solver.cpp:398]     Test net output #0: accuracy = 0.7565
I0428 19:57:02.216223 28574 solver.cpp:398]     Test net output #1: loss = 0.664257 (* 1 = 0.664257 loss)
I0428 19:57:02.217097 28574 solver.cpp:219] Iteration 500 (685.952 iter/s, 0.145783s/100 iters), loss = 0.74808
I0428 19:57:02.217128 28574 solver.cpp:238]     Train net output #0: loss = 0.74808 (* 1 = 0.74808 loss)
I0428 19:57:02.217175 28574 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:02.293685 28574 solver.cpp:219] Iteration 600 (1306.34 iter/s, 0.0765496s/100 iters), loss = 0.476726
I0428 19:57:02.293711 28574 solver.cpp:238]     Train net output #0: loss = 0.476726 (* 1 = 0.476726 loss)
I0428 19:57:02.293718 28574 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:02.369012 28574 solver.cpp:219] Iteration 700 (1328.17 iter/s, 0.0752916s/100 iters), loss = 0.782381
I0428 19:57:02.369040 28574 solver.cpp:238]     Train net output #0: loss = 0.782381 (* 1 = 0.782381 loss)
I0428 19:57:02.369050 28574 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:02.443912 28574 solver.cpp:219] Iteration 800 (1335.76 iter/s, 0.0748635s/100 iters), loss = 0.755062
I0428 19:57:02.443936 28574 solver.cpp:238]     Train net output #0: loss = 0.755062 (* 1 = 0.755062 loss)
I0428 19:57:02.443958 28574 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:02.519176 28574 solver.cpp:219] Iteration 900 (1329.27 iter/s, 0.0752294s/100 iters), loss = 0.67739
I0428 19:57:02.519202 28574 solver.cpp:238]     Train net output #0: loss = 0.67739 (* 1 = 0.67739 loss)
I0428 19:57:02.519212 28574 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:02.543998 28580 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:02.592592 28574 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:02.593292 28574 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:02.593716 28574 solver.cpp:311] Iteration 1000, loss = 0.673823
I0428 19:57:02.593747 28574 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:02.668668 28581 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:02.669172 28574 solver.cpp:398]     Test net output #0: accuracy = 0.8543
I0428 19:57:02.669191 28574 solver.cpp:398]     Test net output #1: loss = 0.484877 (* 1 = 0.484877 loss)
I0428 19:57:02.669196 28574 solver.cpp:316] Optimization Done.
I0428 19:57:02.669200 28574 caffe.cpp:259] Optimization Done.
