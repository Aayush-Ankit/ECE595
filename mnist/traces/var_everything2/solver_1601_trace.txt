I0428 20:34:12.171878  4438 caffe.cpp:218] Using GPUs 0
I0428 20:34:12.209828  4438 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:34:12.722786  4438 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1601.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:34:12.722934  4438 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1601.prototxt
I0428 20:34:12.723276  4438 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:34:12.723292  4438 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:34:12.723377  4438 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:34:12.723445  4438 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:12.723546  4438 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:34:12.723569  4438 net.cpp:86] Creating Layer mnist
I0428 20:34:12.723577  4438 net.cpp:382] mnist -> data
I0428 20:34:12.723598  4438 net.cpp:382] mnist -> label
I0428 20:34:12.724684  4438 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:34:12.727155  4438 net.cpp:124] Setting up mnist
I0428 20:34:12.727174  4438 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:34:12.727180  4438 net.cpp:131] Top shape: 64 (64)
I0428 20:34:12.727183  4438 net.cpp:139] Memory required for data: 200960
I0428 20:34:12.727191  4438 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:12.727238  4438 net.cpp:86] Creating Layer conv0
I0428 20:34:12.727246  4438 net.cpp:408] conv0 <- data
I0428 20:34:12.727258  4438 net.cpp:382] conv0 -> conv0
I0428 20:34:12.974453  4438 net.cpp:124] Setting up conv0
I0428 20:34:12.974480  4438 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:34:12.974484  4438 net.cpp:139] Memory required for data: 14946560
I0428 20:34:12.974498  4438 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:12.974509  4438 net.cpp:86] Creating Layer pool0
I0428 20:34:12.974514  4438 net.cpp:408] pool0 <- conv0
I0428 20:34:12.974519  4438 net.cpp:382] pool0 -> pool0
I0428 20:34:12.974580  4438 net.cpp:124] Setting up pool0
I0428 20:34:12.974584  4438 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:34:12.974601  4438 net.cpp:139] Memory required for data: 18632960
I0428 20:34:12.974604  4438 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:12.974616  4438 net.cpp:86] Creating Layer conv1
I0428 20:34:12.974618  4438 net.cpp:408] conv1 <- pool0
I0428 20:34:12.974622  4438 net.cpp:382] conv1 -> conv1
I0428 20:34:12.977995  4438 net.cpp:124] Setting up conv1
I0428 20:34:12.978025  4438 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:34:12.978029  4438 net.cpp:139] Memory required for data: 19452160
I0428 20:34:12.978039  4438 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:12.978060  4438 net.cpp:86] Creating Layer pool1
I0428 20:34:12.978078  4438 net.cpp:408] pool1 <- conv1
I0428 20:34:12.978082  4438 net.cpp:382] pool1 -> pool1
I0428 20:34:12.978133  4438 net.cpp:124] Setting up pool1
I0428 20:34:12.978139  4438 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:34:12.978142  4438 net.cpp:139] Memory required for data: 19656960
I0428 20:34:12.978145  4438 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:12.978152  4438 net.cpp:86] Creating Layer ip1
I0428 20:34:12.978154  4438 net.cpp:408] ip1 <- pool1
I0428 20:34:12.978159  4438 net.cpp:382] ip1 -> ip1
I0428 20:34:12.979081  4438 net.cpp:124] Setting up ip1
I0428 20:34:12.979092  4438 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:12.979111  4438 net.cpp:139] Memory required for data: 19659520
I0428 20:34:12.979120  4438 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:12.979141  4438 net.cpp:86] Creating Layer relu1
I0428 20:34:12.979145  4438 net.cpp:408] relu1 <- ip1
I0428 20:34:12.979149  4438 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:12.979346  4438 net.cpp:124] Setting up relu1
I0428 20:34:12.979354  4438 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:12.979357  4438 net.cpp:139] Memory required for data: 19662080
I0428 20:34:12.979362  4438 layer_factory.hpp:77] Creating layer loss
I0428 20:34:12.979367  4438 net.cpp:86] Creating Layer loss
I0428 20:34:12.979370  4438 net.cpp:408] loss <- ip1
I0428 20:34:12.979374  4438 net.cpp:408] loss <- label
I0428 20:34:12.979379  4438 net.cpp:382] loss -> loss
I0428 20:34:12.979413  4438 layer_factory.hpp:77] Creating layer loss
I0428 20:34:12.980298  4438 net.cpp:124] Setting up loss
I0428 20:34:12.980309  4438 net.cpp:131] Top shape: (1)
I0428 20:34:12.980329  4438 net.cpp:134]     with loss weight 1
I0428 20:34:12.980343  4438 net.cpp:139] Memory required for data: 19662084
I0428 20:34:12.980347  4438 net.cpp:200] loss needs backward computation.
I0428 20:34:12.980351  4438 net.cpp:200] relu1 needs backward computation.
I0428 20:34:12.980355  4438 net.cpp:200] ip1 needs backward computation.
I0428 20:34:12.980357  4438 net.cpp:200] pool1 needs backward computation.
I0428 20:34:12.980360  4438 net.cpp:200] conv1 needs backward computation.
I0428 20:34:12.980363  4438 net.cpp:200] pool0 needs backward computation.
I0428 20:34:12.980366  4438 net.cpp:200] conv0 needs backward computation.
I0428 20:34:12.980370  4438 net.cpp:202] mnist does not need backward computation.
I0428 20:34:12.980372  4438 net.cpp:244] This network produces output loss
I0428 20:34:12.980381  4438 net.cpp:257] Network initialization done.
I0428 20:34:12.980636  4438 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1601.prototxt
I0428 20:34:12.980659  4438 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:34:12.980733  4438 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:34:12.980801  4438 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:12.980886  4438 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:34:12.980900  4438 net.cpp:86] Creating Layer mnist
I0428 20:34:12.980904  4438 net.cpp:382] mnist -> data
I0428 20:34:12.980912  4438 net.cpp:382] mnist -> label
I0428 20:34:12.981003  4438 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:34:12.982133  4438 net.cpp:124] Setting up mnist
I0428 20:34:12.982162  4438 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:34:12.982167  4438 net.cpp:131] Top shape: 100 (100)
I0428 20:34:12.982170  4438 net.cpp:139] Memory required for data: 314000
I0428 20:34:12.982174  4438 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:34:12.982223  4438 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:34:12.982228  4438 net.cpp:408] label_mnist_1_split <- label
I0428 20:34:12.982233  4438 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:34:12.982239  4438 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:34:12.982354  4438 net.cpp:124] Setting up label_mnist_1_split
I0428 20:34:12.982362  4438 net.cpp:131] Top shape: 100 (100)
I0428 20:34:12.982367  4438 net.cpp:131] Top shape: 100 (100)
I0428 20:34:12.982370  4438 net.cpp:139] Memory required for data: 314800
I0428 20:34:12.982373  4438 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:12.982381  4438 net.cpp:86] Creating Layer conv0
I0428 20:34:12.982385  4438 net.cpp:408] conv0 <- data
I0428 20:34:12.982390  4438 net.cpp:382] conv0 -> conv0
I0428 20:34:12.983242  4438 net.cpp:124] Setting up conv0
I0428 20:34:12.983269  4438 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:34:12.983288  4438 net.cpp:139] Memory required for data: 23354800
I0428 20:34:12.983297  4438 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:12.983304  4438 net.cpp:86] Creating Layer pool0
I0428 20:34:12.983307  4438 net.cpp:408] pool0 <- conv0
I0428 20:34:12.983311  4438 net.cpp:382] pool0 -> pool0
I0428 20:34:12.983361  4438 net.cpp:124] Setting up pool0
I0428 20:34:12.983366  4438 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:34:12.983369  4438 net.cpp:139] Memory required for data: 29114800
I0428 20:34:12.983372  4438 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:12.983381  4438 net.cpp:86] Creating Layer conv1
I0428 20:34:12.983384  4438 net.cpp:408] conv1 <- pool0
I0428 20:34:12.983388  4438 net.cpp:382] conv1 -> conv1
I0428 20:34:12.986430  4438 net.cpp:124] Setting up conv1
I0428 20:34:12.986460  4438 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:34:12.986476  4438 net.cpp:139] Memory required for data: 30394800
I0428 20:34:12.986500  4438 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:12.986507  4438 net.cpp:86] Creating Layer pool1
I0428 20:34:12.986521  4438 net.cpp:408] pool1 <- conv1
I0428 20:34:12.986527  4438 net.cpp:382] pool1 -> pool1
I0428 20:34:12.986565  4438 net.cpp:124] Setting up pool1
I0428 20:34:12.986572  4438 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:34:12.986574  4438 net.cpp:139] Memory required for data: 30714800
I0428 20:34:12.986577  4438 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:12.986583  4438 net.cpp:86] Creating Layer ip1
I0428 20:34:12.986587  4438 net.cpp:408] ip1 <- pool1
I0428 20:34:12.986593  4438 net.cpp:382] ip1 -> ip1
I0428 20:34:12.986730  4438 net.cpp:124] Setting up ip1
I0428 20:34:12.986739  4438 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:12.986742  4438 net.cpp:139] Memory required for data: 30718800
I0428 20:34:12.986749  4438 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:12.986754  4438 net.cpp:86] Creating Layer relu1
I0428 20:34:12.986757  4438 net.cpp:408] relu1 <- ip1
I0428 20:34:12.986763  4438 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:12.987603  4438 net.cpp:124] Setting up relu1
I0428 20:34:12.987615  4438 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:12.987619  4438 net.cpp:139] Memory required for data: 30722800
I0428 20:34:12.987622  4438 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:34:12.987630  4438 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:34:12.987633  4438 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:34:12.987638  4438 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:34:12.987645  4438 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:34:12.987686  4438 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:34:12.987692  4438 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:12.987696  4438 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:12.987699  4438 net.cpp:139] Memory required for data: 30730800
I0428 20:34:12.987702  4438 layer_factory.hpp:77] Creating layer accuracy
I0428 20:34:12.987720  4438 net.cpp:86] Creating Layer accuracy
I0428 20:34:12.987725  4438 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:34:12.987728  4438 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:34:12.987732  4438 net.cpp:382] accuracy -> accuracy
I0428 20:34:12.987740  4438 net.cpp:124] Setting up accuracy
I0428 20:34:12.987766  4438 net.cpp:131] Top shape: (1)
I0428 20:34:12.987774  4438 net.cpp:139] Memory required for data: 30730804
I0428 20:34:12.987776  4438 layer_factory.hpp:77] Creating layer loss
I0428 20:34:12.987782  4438 net.cpp:86] Creating Layer loss
I0428 20:34:12.987784  4438 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:34:12.987793  4438 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:34:12.987797  4438 net.cpp:382] loss -> loss
I0428 20:34:12.987808  4438 layer_factory.hpp:77] Creating layer loss
I0428 20:34:12.988035  4438 net.cpp:124] Setting up loss
I0428 20:34:12.988044  4438 net.cpp:131] Top shape: (1)
I0428 20:34:12.988049  4438 net.cpp:134]     with loss weight 1
I0428 20:34:12.988054  4438 net.cpp:139] Memory required for data: 30730808
I0428 20:34:12.988059  4438 net.cpp:200] loss needs backward computation.
I0428 20:34:12.988062  4438 net.cpp:202] accuracy does not need backward computation.
I0428 20:34:12.988066  4438 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:34:12.988081  4438 net.cpp:200] relu1 needs backward computation.
I0428 20:34:12.988085  4438 net.cpp:200] ip1 needs backward computation.
I0428 20:34:12.988087  4438 net.cpp:200] pool1 needs backward computation.
I0428 20:34:12.988090  4438 net.cpp:200] conv1 needs backward computation.
I0428 20:34:12.988099  4438 net.cpp:200] pool0 needs backward computation.
I0428 20:34:12.988102  4438 net.cpp:200] conv0 needs backward computation.
I0428 20:34:12.988106  4438 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:34:12.988111  4438 net.cpp:202] mnist does not need backward computation.
I0428 20:34:12.988113  4438 net.cpp:244] This network produces output accuracy
I0428 20:34:12.988116  4438 net.cpp:244] This network produces output loss
I0428 20:34:12.988134  4438 net.cpp:257] Network initialization done.
I0428 20:34:12.988167  4438 solver.cpp:56] Solver scaffolding done.
I0428 20:34:12.988438  4438 caffe.cpp:248] Starting Optimization
I0428 20:34:12.988446  4438 solver.cpp:273] Solving LeNet
I0428 20:34:12.988451  4438 solver.cpp:274] Learning Rate Policy: inv
I0428 20:34:12.988610  4438 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:34:13.095973  4445 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:13.098636  4438 solver.cpp:398]     Test net output #0: accuracy = 0.1292
I0428 20:34:13.098657  4438 solver.cpp:398]     Test net output #1: loss = 2.31327 (* 1 = 2.31327 loss)
I0428 20:34:13.103935  4438 solver.cpp:219] Iteration 0 (0 iter/s, 0.115454s/100 iters), loss = 2.33975
I0428 20:34:13.103958  4438 solver.cpp:238]     Train net output #0: loss = 2.33975 (* 1 = 2.33975 loss)
I0428 20:34:13.103970  4438 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:34:13.328311  4438 solver.cpp:219] Iteration 100 (445.76 iter/s, 0.224336s/100 iters), loss = 0.236754
I0428 20:34:13.328351  4438 solver.cpp:238]     Train net output #0: loss = 0.236754 (* 1 = 0.236754 loss)
I0428 20:34:13.328358  4438 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:34:13.544240  4438 solver.cpp:219] Iteration 200 (463.234 iter/s, 0.215874s/100 iters), loss = 0.183186
I0428 20:34:13.544265  4438 solver.cpp:238]     Train net output #0: loss = 0.183186 (* 1 = 0.183186 loss)
I0428 20:34:13.544272  4438 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:34:13.763705  4438 solver.cpp:219] Iteration 300 (455.748 iter/s, 0.21942s/100 iters), loss = 0.193692
I0428 20:34:13.763747  4438 solver.cpp:238]     Train net output #0: loss = 0.193692 (* 1 = 0.193692 loss)
I0428 20:34:13.763761  4438 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:34:13.986112  4438 solver.cpp:219] Iteration 400 (449.743 iter/s, 0.222349s/100 iters), loss = 0.0559284
I0428 20:34:13.986152  4438 solver.cpp:238]     Train net output #0: loss = 0.0559284 (* 1 = 0.0559284 loss)
I0428 20:34:13.986163  4438 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:34:14.201927  4438 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:34:14.305830  4445 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:14.308594  4438 solver.cpp:398]     Test net output #0: accuracy = 0.9717
I0428 20:34:14.308622  4438 solver.cpp:398]     Test net output #1: loss = 0.0926126 (* 1 = 0.0926126 loss)
I0428 20:34:14.310744  4438 solver.cpp:219] Iteration 500 (308.097 iter/s, 0.324573s/100 iters), loss = 0.0897416
I0428 20:34:14.310770  4438 solver.cpp:238]     Train net output #0: loss = 0.0897416 (* 1 = 0.0897416 loss)
I0428 20:34:14.310778  4438 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:34:14.530655  4438 solver.cpp:219] Iteration 600 (454.818 iter/s, 0.219868s/100 iters), loss = 0.0700732
I0428 20:34:14.530686  4438 solver.cpp:238]     Train net output #0: loss = 0.0700732 (* 1 = 0.0700732 loss)
I0428 20:34:14.530694  4438 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:34:14.750190  4438 solver.cpp:219] Iteration 700 (455.605 iter/s, 0.219488s/100 iters), loss = 0.102326
I0428 20:34:14.750221  4438 solver.cpp:238]     Train net output #0: loss = 0.102326 (* 1 = 0.102326 loss)
I0428 20:34:14.750231  4438 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:34:14.971791  4438 solver.cpp:219] Iteration 800 (451.356 iter/s, 0.221555s/100 iters), loss = 0.186102
I0428 20:34:14.971823  4438 solver.cpp:238]     Train net output #0: loss = 0.186102 (* 1 = 0.186102 loss)
I0428 20:34:14.971832  4438 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:34:15.193167  4438 solver.cpp:219] Iteration 900 (451.815 iter/s, 0.221329s/100 iters), loss = 0.143916
I0428 20:34:15.193193  4438 solver.cpp:238]     Train net output #0: loss = 0.143916 (* 1 = 0.143916 loss)
I0428 20:34:15.193199  4438 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:34:15.267745  4444 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:15.412907  4438 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:34:15.417040  4438 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:34:15.419011  4438 solver.cpp:311] Iteration 1000, loss = 0.0824008
I0428 20:34:15.419028  4438 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:34:15.522322  4445 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:15.525084  4438 solver.cpp:398]     Test net output #0: accuracy = 0.9776
I0428 20:34:15.525106  4438 solver.cpp:398]     Test net output #1: loss = 0.0673506 (* 1 = 0.0673506 loss)
I0428 20:34:15.525111  4438 solver.cpp:316] Optimization Done.
I0428 20:34:15.525116  4438 caffe.cpp:259] Optimization Done.
