I0428 20:14:15.017302 32635 caffe.cpp:218] Using GPUs 0
I0428 20:14:15.045629 32635 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:15.493811 32635 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1217.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:15.493964 32635 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1217.prototxt
I0428 20:14:15.494294 32635 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:15.494324 32635 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:15.494397 32635 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:15.494472 32635 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:15.494550 32635 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:15.494570 32635 net.cpp:86] Creating Layer mnist
I0428 20:14:15.494575 32635 net.cpp:382] mnist -> data
I0428 20:14:15.494592 32635 net.cpp:382] mnist -> label
I0428 20:14:15.495563 32635 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:15.497802 32635 net.cpp:124] Setting up mnist
I0428 20:14:15.497848 32635 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:15.497854 32635 net.cpp:131] Top shape: 64 (64)
I0428 20:14:15.497858 32635 net.cpp:139] Memory required for data: 200960
I0428 20:14:15.497862 32635 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:15.497874 32635 net.cpp:86] Creating Layer conv0
I0428 20:14:15.497879 32635 net.cpp:408] conv0 <- data
I0428 20:14:15.497889 32635 net.cpp:382] conv0 -> conv0
I0428 20:14:15.727339 32635 net.cpp:124] Setting up conv0
I0428 20:14:15.727380 32635 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:15.727383 32635 net.cpp:139] Memory required for data: 7573760
I0428 20:14:15.727421 32635 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:15.727447 32635 net.cpp:86] Creating Layer pool0
I0428 20:14:15.727452 32635 net.cpp:408] pool0 <- conv0
I0428 20:14:15.727458 32635 net.cpp:382] pool0 -> pool0
I0428 20:14:15.727504 32635 net.cpp:124] Setting up pool0
I0428 20:14:15.727514 32635 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:15.727516 32635 net.cpp:139] Memory required for data: 9416960
I0428 20:14:15.727519 32635 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:15.727543 32635 net.cpp:86] Creating Layer conv1
I0428 20:14:15.727546 32635 net.cpp:408] conv1 <- pool0
I0428 20:14:15.727550 32635 net.cpp:382] conv1 -> conv1
I0428 20:14:15.729511 32635 net.cpp:124] Setting up conv1
I0428 20:14:15.729542 32635 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:15.729547 32635 net.cpp:139] Memory required for data: 9449728
I0428 20:14:15.729555 32635 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:15.729564 32635 net.cpp:86] Creating Layer pool1
I0428 20:14:15.729568 32635 net.cpp:408] pool1 <- conv1
I0428 20:14:15.729573 32635 net.cpp:382] pool1 -> pool1
I0428 20:14:15.729614 32635 net.cpp:124] Setting up pool1
I0428 20:14:15.729634 32635 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:15.729636 32635 net.cpp:139] Memory required for data: 9457920
I0428 20:14:15.729640 32635 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:15.729646 32635 net.cpp:86] Creating Layer ip1
I0428 20:14:15.729650 32635 net.cpp:408] ip1 <- pool1
I0428 20:14:15.729655 32635 net.cpp:382] ip1 -> ip1
I0428 20:14:15.729790 32635 net.cpp:124] Setting up ip1
I0428 20:14:15.729797 32635 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:15.729800 32635 net.cpp:139] Memory required for data: 9464320
I0428 20:14:15.729807 32635 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:15.729813 32635 net.cpp:86] Creating Layer relu1
I0428 20:14:15.729817 32635 net.cpp:408] relu1 <- ip1
I0428 20:14:15.729825 32635 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:15.730022 32635 net.cpp:124] Setting up relu1
I0428 20:14:15.730031 32635 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:15.730034 32635 net.cpp:139] Memory required for data: 9470720
I0428 20:14:15.730037 32635 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:15.730046 32635 net.cpp:86] Creating Layer ip2
I0428 20:14:15.730048 32635 net.cpp:408] ip2 <- ip1
I0428 20:14:15.730053 32635 net.cpp:382] ip2 -> ip2
I0428 20:14:15.730159 32635 net.cpp:124] Setting up ip2
I0428 20:14:15.730165 32635 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:15.730168 32635 net.cpp:139] Memory required for data: 9473280
I0428 20:14:15.730173 32635 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:15.730180 32635 net.cpp:86] Creating Layer relu2
I0428 20:14:15.730183 32635 net.cpp:408] relu2 <- ip2
I0428 20:14:15.730188 32635 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:15.731176 32635 net.cpp:124] Setting up relu2
I0428 20:14:15.731205 32635 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:15.731209 32635 net.cpp:139] Memory required for data: 9475840
I0428 20:14:15.731212 32635 layer_factory.hpp:77] Creating layer loss
I0428 20:14:15.731220 32635 net.cpp:86] Creating Layer loss
I0428 20:14:15.731225 32635 net.cpp:408] loss <- ip2
I0428 20:14:15.731228 32635 net.cpp:408] loss <- label
I0428 20:14:15.731235 32635 net.cpp:382] loss -> loss
I0428 20:14:15.731253 32635 layer_factory.hpp:77] Creating layer loss
I0428 20:14:15.731519 32635 net.cpp:124] Setting up loss
I0428 20:14:15.731530 32635 net.cpp:131] Top shape: (1)
I0428 20:14:15.731534 32635 net.cpp:134]     with loss weight 1
I0428 20:14:15.731568 32635 net.cpp:139] Memory required for data: 9475844
I0428 20:14:15.731571 32635 net.cpp:200] loss needs backward computation.
I0428 20:14:15.731575 32635 net.cpp:200] relu2 needs backward computation.
I0428 20:14:15.731578 32635 net.cpp:200] ip2 needs backward computation.
I0428 20:14:15.731581 32635 net.cpp:200] relu1 needs backward computation.
I0428 20:14:15.731585 32635 net.cpp:200] ip1 needs backward computation.
I0428 20:14:15.731613 32635 net.cpp:200] pool1 needs backward computation.
I0428 20:14:15.731617 32635 net.cpp:200] conv1 needs backward computation.
I0428 20:14:15.731621 32635 net.cpp:200] pool0 needs backward computation.
I0428 20:14:15.731623 32635 net.cpp:200] conv0 needs backward computation.
I0428 20:14:15.731626 32635 net.cpp:202] mnist does not need backward computation.
I0428 20:14:15.731629 32635 net.cpp:244] This network produces output loss
I0428 20:14:15.731638 32635 net.cpp:257] Network initialization done.
I0428 20:14:15.731966 32635 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1217.prototxt
I0428 20:14:15.732022 32635 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:15.732125 32635 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:15.732197 32635 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:15.732241 32635 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:15.732254 32635 net.cpp:86] Creating Layer mnist
I0428 20:14:15.732260 32635 net.cpp:382] mnist -> data
I0428 20:14:15.732269 32635 net.cpp:382] mnist -> label
I0428 20:14:15.732374 32635 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:15.734689 32635 net.cpp:124] Setting up mnist
I0428 20:14:15.734717 32635 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:15.734722 32635 net.cpp:131] Top shape: 100 (100)
I0428 20:14:15.734724 32635 net.cpp:139] Memory required for data: 314000
I0428 20:14:15.734729 32635 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:15.734738 32635 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:15.734741 32635 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:15.734747 32635 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:15.734755 32635 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:15.734845 32635 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:15.734864 32635 net.cpp:131] Top shape: 100 (100)
I0428 20:14:15.734869 32635 net.cpp:131] Top shape: 100 (100)
I0428 20:14:15.734870 32635 net.cpp:139] Memory required for data: 314800
I0428 20:14:15.734874 32635 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:15.734899 32635 net.cpp:86] Creating Layer conv0
I0428 20:14:15.734901 32635 net.cpp:408] conv0 <- data
I0428 20:14:15.734907 32635 net.cpp:382] conv0 -> conv0
I0428 20:14:15.736668 32635 net.cpp:124] Setting up conv0
I0428 20:14:15.736681 32635 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:15.736701 32635 net.cpp:139] Memory required for data: 11834800
I0428 20:14:15.736709 32635 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:15.736716 32635 net.cpp:86] Creating Layer pool0
I0428 20:14:15.736721 32635 net.cpp:408] pool0 <- conv0
I0428 20:14:15.736724 32635 net.cpp:382] pool0 -> pool0
I0428 20:14:15.736760 32635 net.cpp:124] Setting up pool0
I0428 20:14:15.736765 32635 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:15.736768 32635 net.cpp:139] Memory required for data: 14714800
I0428 20:14:15.736770 32635 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:15.736779 32635 net.cpp:86] Creating Layer conv1
I0428 20:14:15.736783 32635 net.cpp:408] conv1 <- pool0
I0428 20:14:15.736788 32635 net.cpp:382] conv1 -> conv1
I0428 20:14:15.738431 32635 net.cpp:124] Setting up conv1
I0428 20:14:15.738445 32635 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:15.738466 32635 net.cpp:139] Memory required for data: 14766000
I0428 20:14:15.738490 32635 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:15.738497 32635 net.cpp:86] Creating Layer pool1
I0428 20:14:15.738502 32635 net.cpp:408] pool1 <- conv1
I0428 20:14:15.738507 32635 net.cpp:382] pool1 -> pool1
I0428 20:14:15.738546 32635 net.cpp:124] Setting up pool1
I0428 20:14:15.738553 32635 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:15.738555 32635 net.cpp:139] Memory required for data: 14778800
I0428 20:14:15.738559 32635 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:15.738565 32635 net.cpp:86] Creating Layer ip1
I0428 20:14:15.738569 32635 net.cpp:408] ip1 <- pool1
I0428 20:14:15.738574 32635 net.cpp:382] ip1 -> ip1
I0428 20:14:15.738694 32635 net.cpp:124] Setting up ip1
I0428 20:14:15.738703 32635 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:15.738705 32635 net.cpp:139] Memory required for data: 14788800
I0428 20:14:15.738713 32635 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:15.738719 32635 net.cpp:86] Creating Layer relu1
I0428 20:14:15.738723 32635 net.cpp:408] relu1 <- ip1
I0428 20:14:15.738728 32635 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:15.738888 32635 net.cpp:124] Setting up relu1
I0428 20:14:15.738898 32635 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:15.738900 32635 net.cpp:139] Memory required for data: 14798800
I0428 20:14:15.738903 32635 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:15.738911 32635 net.cpp:86] Creating Layer ip2
I0428 20:14:15.738915 32635 net.cpp:408] ip2 <- ip1
I0428 20:14:15.738921 32635 net.cpp:382] ip2 -> ip2
I0428 20:14:15.739019 32635 net.cpp:124] Setting up ip2
I0428 20:14:15.739027 32635 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:15.739029 32635 net.cpp:139] Memory required for data: 14802800
I0428 20:14:15.739050 32635 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:15.739055 32635 net.cpp:86] Creating Layer relu2
I0428 20:14:15.739058 32635 net.cpp:408] relu2 <- ip2
I0428 20:14:15.739069 32635 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:15.739226 32635 net.cpp:124] Setting up relu2
I0428 20:14:15.739235 32635 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:15.739238 32635 net.cpp:139] Memory required for data: 14806800
I0428 20:14:15.739241 32635 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:14:15.739246 32635 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:14:15.739264 32635 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:14:15.739269 32635 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:14:15.739285 32635 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:14:15.739326 32635 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:14:15.739333 32635 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:15.739337 32635 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:15.739341 32635 net.cpp:139] Memory required for data: 14814800
I0428 20:14:15.739342 32635 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:15.739347 32635 net.cpp:86] Creating Layer accuracy
I0428 20:14:15.739351 32635 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:14:15.739356 32635 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:15.739375 32635 net.cpp:382] accuracy -> accuracy
I0428 20:14:15.739382 32635 net.cpp:124] Setting up accuracy
I0428 20:14:15.739385 32635 net.cpp:131] Top shape: (1)
I0428 20:14:15.739388 32635 net.cpp:139] Memory required for data: 14814804
I0428 20:14:15.739392 32635 layer_factory.hpp:77] Creating layer loss
I0428 20:14:15.739413 32635 net.cpp:86] Creating Layer loss
I0428 20:14:15.739416 32635 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:14:15.739434 32635 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:15.739439 32635 net.cpp:382] loss -> loss
I0428 20:14:15.739452 32635 layer_factory.hpp:77] Creating layer loss
I0428 20:14:15.739822 32635 net.cpp:124] Setting up loss
I0428 20:14:15.739830 32635 net.cpp:131] Top shape: (1)
I0428 20:14:15.739845 32635 net.cpp:134]     with loss weight 1
I0428 20:14:15.739850 32635 net.cpp:139] Memory required for data: 14814808
I0428 20:14:15.739853 32635 net.cpp:200] loss needs backward computation.
I0428 20:14:15.739857 32635 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:15.739861 32635 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:14:15.739864 32635 net.cpp:200] relu2 needs backward computation.
I0428 20:14:15.739867 32635 net.cpp:200] ip2 needs backward computation.
I0428 20:14:15.739871 32635 net.cpp:200] relu1 needs backward computation.
I0428 20:14:15.739874 32635 net.cpp:200] ip1 needs backward computation.
I0428 20:14:15.739883 32635 net.cpp:200] pool1 needs backward computation.
I0428 20:14:15.739886 32635 net.cpp:200] conv1 needs backward computation.
I0428 20:14:15.739889 32635 net.cpp:200] pool0 needs backward computation.
I0428 20:14:15.739892 32635 net.cpp:200] conv0 needs backward computation.
I0428 20:14:15.739895 32635 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:15.739899 32635 net.cpp:202] mnist does not need backward computation.
I0428 20:14:15.739902 32635 net.cpp:244] This network produces output accuracy
I0428 20:14:15.739905 32635 net.cpp:244] This network produces output loss
I0428 20:14:15.739915 32635 net.cpp:257] Network initialization done.
I0428 20:14:15.739969 32635 solver.cpp:56] Solver scaffolding done.
I0428 20:14:15.740248 32635 caffe.cpp:248] Starting Optimization
I0428 20:14:15.740254 32635 solver.cpp:273] Solving LeNet
I0428 20:14:15.740257 32635 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:15.741055 32635 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:15.746659 32635 blocking_queue.cpp:49] Waiting for data
I0428 20:14:15.818399 32642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:15.819113 32635 solver.cpp:398]     Test net output #0: accuracy = 0.0882
I0428 20:14:15.819149 32635 solver.cpp:398]     Test net output #1: loss = 2.35191 (* 1 = 2.35191 loss)
I0428 20:14:15.823279 32635 solver.cpp:219] Iteration 0 (0 iter/s, 0.0829963s/100 iters), loss = 2.36741
I0428 20:14:15.823318 32635 solver.cpp:238]     Train net output #0: loss = 2.36741 (* 1 = 2.36741 loss)
I0428 20:14:15.823328 32635 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:15.931560 32635 solver.cpp:219] Iteration 100 (923.97 iter/s, 0.108229s/100 iters), loss = 0.968977
I0428 20:14:15.931602 32635 solver.cpp:238]     Train net output #0: loss = 0.968977 (* 1 = 0.968977 loss)
I0428 20:14:15.931607 32635 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:16.038648 32635 solver.cpp:219] Iteration 200 (934.125 iter/s, 0.107052s/100 iters), loss = 0.685248
I0428 20:14:16.038686 32635 solver.cpp:238]     Train net output #0: loss = 0.685248 (* 1 = 0.685248 loss)
I0428 20:14:16.038691 32635 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:16.145141 32635 solver.cpp:219] Iteration 300 (939.436 iter/s, 0.106447s/100 iters), loss = 0.439882
I0428 20:14:16.145196 32635 solver.cpp:238]     Train net output #0: loss = 0.439882 (* 1 = 0.439882 loss)
I0428 20:14:16.145203 32635 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:16.254169 32635 solver.cpp:219] Iteration 400 (917.753 iter/s, 0.108962s/100 iters), loss = 0.436442
I0428 20:14:16.254209 32635 solver.cpp:238]     Train net output #0: loss = 0.436442 (* 1 = 0.436442 loss)
I0428 20:14:16.254216 32635 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:16.358948 32635 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:16.419082 32642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:16.420572 32635 solver.cpp:398]     Test net output #0: accuracy = 0.8244
I0428 20:14:16.420608 32635 solver.cpp:398]     Test net output #1: loss = 0.476389 (* 1 = 0.476389 loss)
I0428 20:14:16.421695 32635 solver.cpp:219] Iteration 500 (597.108 iter/s, 0.167474s/100 iters), loss = 0.552519
I0428 20:14:16.421733 32635 solver.cpp:238]     Train net output #0: loss = 0.552519 (* 1 = 0.552519 loss)
I0428 20:14:16.421741 32635 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:16.540457 32635 solver.cpp:219] Iteration 600 (842.257 iter/s, 0.118729s/100 iters), loss = 0.570911
I0428 20:14:16.540498 32635 solver.cpp:238]     Train net output #0: loss = 0.570911 (* 1 = 0.570911 loss)
I0428 20:14:16.540504 32635 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:16.649282 32635 solver.cpp:219] Iteration 700 (919.212 iter/s, 0.108789s/100 iters), loss = 0.420073
I0428 20:14:16.649310 32635 solver.cpp:238]     Train net output #0: loss = 0.420073 (* 1 = 0.420073 loss)
I0428 20:14:16.649317 32635 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:16.756973 32635 solver.cpp:219] Iteration 800 (928.92 iter/s, 0.107652s/100 iters), loss = 0.348857
I0428 20:14:16.757000 32635 solver.cpp:238]     Train net output #0: loss = 0.348857 (* 1 = 0.348857 loss)
I0428 20:14:16.757022 32635 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:16.866329 32635 solver.cpp:219] Iteration 900 (914.761 iter/s, 0.109318s/100 iters), loss = 0.625456
I0428 20:14:16.866356 32635 solver.cpp:238]     Train net output #0: loss = 0.625456 (* 1 = 0.625456 loss)
I0428 20:14:16.866379 32635 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:16.903520 32641 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:16.974377 32635 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:16.975201 32635 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:16.975868 32635 solver.cpp:311] Iteration 1000, loss = 0.46781
I0428 20:14:16.975884 32635 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:17.052800 32642 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:17.053524 32635 solver.cpp:398]     Test net output #0: accuracy = 0.8464
I0428 20:14:17.053560 32635 solver.cpp:398]     Test net output #1: loss = 0.398861 (* 1 = 0.398861 loss)
I0428 20:14:17.053565 32635 solver.cpp:316] Optimization Done.
I0428 20:14:17.053568 32635 caffe.cpp:259] Optimization Done.
