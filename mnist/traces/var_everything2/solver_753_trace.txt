I0428 19:56:13.972203 28386 caffe.cpp:218] Using GPUs 0
I0428 19:56:14.001217 28386 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:14.449347 28386 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test753.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:14.449482 28386 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test753.prototxt
I0428 19:56:14.449832 28386 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:14.449848 28386 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:14.449929 28386 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:14.449992 28386 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:14.450074 28386 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:14.450093 28386 net.cpp:86] Creating Layer mnist
I0428 19:56:14.450100 28386 net.cpp:382] mnist -> data
I0428 19:56:14.450117 28386 net.cpp:382] mnist -> label
I0428 19:56:14.451035 28386 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:14.453307 28386 net.cpp:124] Setting up mnist
I0428 19:56:14.453338 28386 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:14.453343 28386 net.cpp:131] Top shape: 64 (64)
I0428 19:56:14.453361 28386 net.cpp:139] Memory required for data: 200960
I0428 19:56:14.453366 28386 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:14.453380 28386 net.cpp:86] Creating Layer conv0
I0428 19:56:14.453397 28386 net.cpp:408] conv0 <- data
I0428 19:56:14.453408 28386 net.cpp:382] conv0 -> conv0
I0428 19:56:14.685361 28386 net.cpp:124] Setting up conv0
I0428 19:56:14.685386 28386 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:14.685389 28386 net.cpp:139] Memory required for data: 1675520
I0428 19:56:14.685420 28386 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:14.685432 28386 net.cpp:86] Creating Layer pool0
I0428 19:56:14.685436 28386 net.cpp:408] pool0 <- conv0
I0428 19:56:14.685441 28386 net.cpp:382] pool0 -> pool0
I0428 19:56:14.685487 28386 net.cpp:124] Setting up pool0
I0428 19:56:14.685494 28386 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:14.685497 28386 net.cpp:139] Memory required for data: 2044160
I0428 19:56:14.685500 28386 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:14.685511 28386 net.cpp:86] Creating Layer conv1
I0428 19:56:14.685514 28386 net.cpp:408] conv1 <- pool0
I0428 19:56:14.685518 28386 net.cpp:382] conv1 -> conv1
I0428 19:56:14.687579 28386 net.cpp:124] Setting up conv1
I0428 19:56:14.687610 28386 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:14.687615 28386 net.cpp:139] Memory required for data: 2076928
I0428 19:56:14.687623 28386 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:14.687631 28386 net.cpp:86] Creating Layer pool1
I0428 19:56:14.687635 28386 net.cpp:408] pool1 <- conv1
I0428 19:56:14.687640 28386 net.cpp:382] pool1 -> pool1
I0428 19:56:14.687680 28386 net.cpp:124] Setting up pool1
I0428 19:56:14.687687 28386 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:14.687690 28386 net.cpp:139] Memory required for data: 2085120
I0428 19:56:14.687693 28386 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:14.687700 28386 net.cpp:86] Creating Layer ip1
I0428 19:56:14.687718 28386 net.cpp:408] ip1 <- pool1
I0428 19:56:14.687723 28386 net.cpp:382] ip1 -> ip1
I0428 19:56:14.687820 28386 net.cpp:124] Setting up ip1
I0428 19:56:14.687829 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.687831 28386 net.cpp:139] Memory required for data: 2087680
I0428 19:56:14.687839 28386 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:14.687858 28386 net.cpp:86] Creating Layer relu1
I0428 19:56:14.687861 28386 net.cpp:408] relu1 <- ip1
I0428 19:56:14.687865 28386 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:14.688025 28386 net.cpp:124] Setting up relu1
I0428 19:56:14.688033 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.688037 28386 net.cpp:139] Memory required for data: 2090240
I0428 19:56:14.688040 28386 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:14.688046 28386 net.cpp:86] Creating Layer ip2
I0428 19:56:14.688050 28386 net.cpp:408] ip2 <- ip1
I0428 19:56:14.688055 28386 net.cpp:382] ip2 -> ip2
I0428 19:56:14.688163 28386 net.cpp:124] Setting up ip2
I0428 19:56:14.688170 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.688174 28386 net.cpp:139] Memory required for data: 2092800
I0428 19:56:14.688179 28386 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:14.688184 28386 net.cpp:86] Creating Layer relu2
I0428 19:56:14.688189 28386 net.cpp:408] relu2 <- ip2
I0428 19:56:14.688192 28386 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:14.689004 28386 net.cpp:124] Setting up relu2
I0428 19:56:14.689018 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.689021 28386 net.cpp:139] Memory required for data: 2095360
I0428 19:56:14.689025 28386 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:14.689033 28386 net.cpp:86] Creating Layer ip3
I0428 19:56:14.689035 28386 net.cpp:408] ip3 <- ip2
I0428 19:56:14.689041 28386 net.cpp:382] ip3 -> ip3
I0428 19:56:14.689154 28386 net.cpp:124] Setting up ip3
I0428 19:56:14.689162 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.689164 28386 net.cpp:139] Memory required for data: 2097920
I0428 19:56:14.689172 28386 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:14.689177 28386 net.cpp:86] Creating Layer relu3
I0428 19:56:14.689180 28386 net.cpp:408] relu3 <- ip3
I0428 19:56:14.689184 28386 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:14.689360 28386 net.cpp:124] Setting up relu3
I0428 19:56:14.689370 28386 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:14.689374 28386 net.cpp:139] Memory required for data: 2100480
I0428 19:56:14.689378 28386 layer_factory.hpp:77] Creating layer loss
I0428 19:56:14.689383 28386 net.cpp:86] Creating Layer loss
I0428 19:56:14.689386 28386 net.cpp:408] loss <- ip3
I0428 19:56:14.689390 28386 net.cpp:408] loss <- label
I0428 19:56:14.689395 28386 net.cpp:382] loss -> loss
I0428 19:56:14.689414 28386 layer_factory.hpp:77] Creating layer loss
I0428 19:56:14.689654 28386 net.cpp:124] Setting up loss
I0428 19:56:14.689664 28386 net.cpp:131] Top shape: (1)
I0428 19:56:14.689667 28386 net.cpp:134]     with loss weight 1
I0428 19:56:14.689682 28386 net.cpp:139] Memory required for data: 2100484
I0428 19:56:14.689685 28386 net.cpp:200] loss needs backward computation.
I0428 19:56:14.689688 28386 net.cpp:200] relu3 needs backward computation.
I0428 19:56:14.689692 28386 net.cpp:200] ip3 needs backward computation.
I0428 19:56:14.689694 28386 net.cpp:200] relu2 needs backward computation.
I0428 19:56:14.689697 28386 net.cpp:200] ip2 needs backward computation.
I0428 19:56:14.689700 28386 net.cpp:200] relu1 needs backward computation.
I0428 19:56:14.689703 28386 net.cpp:200] ip1 needs backward computation.
I0428 19:56:14.689707 28386 net.cpp:200] pool1 needs backward computation.
I0428 19:56:14.689709 28386 net.cpp:200] conv1 needs backward computation.
I0428 19:56:14.689713 28386 net.cpp:200] pool0 needs backward computation.
I0428 19:56:14.689715 28386 net.cpp:200] conv0 needs backward computation.
I0428 19:56:14.689719 28386 net.cpp:202] mnist does not need backward computation.
I0428 19:56:14.689721 28386 net.cpp:244] This network produces output loss
I0428 19:56:14.689730 28386 net.cpp:257] Network initialization done.
I0428 19:56:14.690088 28386 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test753.prototxt
I0428 19:56:14.690115 28386 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:14.690238 28386 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:14.690315 28386 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:14.690356 28386 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:14.690368 28386 net.cpp:86] Creating Layer mnist
I0428 19:56:14.690372 28386 net.cpp:382] mnist -> data
I0428 19:56:14.690381 28386 net.cpp:382] mnist -> label
I0428 19:56:14.690462 28386 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:14.692484 28386 net.cpp:124] Setting up mnist
I0428 19:56:14.692514 28386 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:14.692519 28386 net.cpp:131] Top shape: 100 (100)
I0428 19:56:14.692523 28386 net.cpp:139] Memory required for data: 314000
I0428 19:56:14.692526 28386 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:14.692545 28386 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:14.692549 28386 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:14.692554 28386 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:14.692560 28386 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:14.692670 28386 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:14.692677 28386 net.cpp:131] Top shape: 100 (100)
I0428 19:56:14.692682 28386 net.cpp:131] Top shape: 100 (100)
I0428 19:56:14.692684 28386 net.cpp:139] Memory required for data: 314800
I0428 19:56:14.692687 28386 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:14.692695 28386 net.cpp:86] Creating Layer conv0
I0428 19:56:14.692698 28386 net.cpp:408] conv0 <- data
I0428 19:56:14.692703 28386 net.cpp:382] conv0 -> conv0
I0428 19:56:14.694360 28386 net.cpp:124] Setting up conv0
I0428 19:56:14.694375 28386 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:14.694380 28386 net.cpp:139] Memory required for data: 2618800
I0428 19:56:14.694388 28386 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:14.694396 28386 net.cpp:86] Creating Layer pool0
I0428 19:56:14.694398 28386 net.cpp:408] pool0 <- conv0
I0428 19:56:14.694403 28386 net.cpp:382] pool0 -> pool0
I0428 19:56:14.694469 28386 net.cpp:124] Setting up pool0
I0428 19:56:14.694478 28386 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:14.694481 28386 net.cpp:139] Memory required for data: 3194800
I0428 19:56:14.694483 28386 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:14.694492 28386 net.cpp:86] Creating Layer conv1
I0428 19:56:14.694495 28386 net.cpp:408] conv1 <- pool0
I0428 19:56:14.694500 28386 net.cpp:382] conv1 -> conv1
I0428 19:56:14.696600 28386 net.cpp:124] Setting up conv1
I0428 19:56:14.696629 28386 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:14.696632 28386 net.cpp:139] Memory required for data: 3246000
I0428 19:56:14.696656 28386 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:14.696662 28386 net.cpp:86] Creating Layer pool1
I0428 19:56:14.696666 28386 net.cpp:408] pool1 <- conv1
I0428 19:56:14.696678 28386 net.cpp:382] pool1 -> pool1
I0428 19:56:14.696760 28386 net.cpp:124] Setting up pool1
I0428 19:56:14.696769 28386 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:14.696772 28386 net.cpp:139] Memory required for data: 3258800
I0428 19:56:14.696775 28386 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:14.696780 28386 net.cpp:86] Creating Layer ip1
I0428 19:56:14.696784 28386 net.cpp:408] ip1 <- pool1
I0428 19:56:14.696794 28386 net.cpp:382] ip1 -> ip1
I0428 19:56:14.696936 28386 net.cpp:124] Setting up ip1
I0428 19:56:14.696946 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.696960 28386 net.cpp:139] Memory required for data: 3262800
I0428 19:56:14.696969 28386 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:14.696974 28386 net.cpp:86] Creating Layer relu1
I0428 19:56:14.696979 28386 net.cpp:408] relu1 <- ip1
I0428 19:56:14.696983 28386 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:14.697181 28386 net.cpp:124] Setting up relu1
I0428 19:56:14.697190 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.697193 28386 net.cpp:139] Memory required for data: 3266800
I0428 19:56:14.697196 28386 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:14.697226 28386 net.cpp:86] Creating Layer ip2
I0428 19:56:14.697228 28386 net.cpp:408] ip2 <- ip1
I0428 19:56:14.697238 28386 net.cpp:382] ip2 -> ip2
I0428 19:56:14.697345 28386 net.cpp:124] Setting up ip2
I0428 19:56:14.697351 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.697355 28386 net.cpp:139] Memory required for data: 3270800
I0428 19:56:14.697360 28386 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:14.697363 28386 net.cpp:86] Creating Layer relu2
I0428 19:56:14.697366 28386 net.cpp:408] relu2 <- ip2
I0428 19:56:14.697376 28386 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:14.697553 28386 net.cpp:124] Setting up relu2
I0428 19:56:14.697562 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.697564 28386 net.cpp:139] Memory required for data: 3274800
I0428 19:56:14.697567 28386 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:14.697573 28386 net.cpp:86] Creating Layer ip3
I0428 19:56:14.697576 28386 net.cpp:408] ip3 <- ip2
I0428 19:56:14.697582 28386 net.cpp:382] ip3 -> ip3
I0428 19:56:14.697690 28386 net.cpp:124] Setting up ip3
I0428 19:56:14.697698 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.697701 28386 net.cpp:139] Memory required for data: 3278800
I0428 19:56:14.697723 28386 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:14.697727 28386 net.cpp:86] Creating Layer relu3
I0428 19:56:14.697731 28386 net.cpp:408] relu3 <- ip3
I0428 19:56:14.697734 28386 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:14.698586 28386 net.cpp:124] Setting up relu3
I0428 19:56:14.698599 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.698603 28386 net.cpp:139] Memory required for data: 3282800
I0428 19:56:14.698606 28386 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:56:14.698611 28386 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:56:14.698614 28386 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:56:14.698621 28386 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:56:14.698627 28386 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:56:14.698664 28386 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:56:14.698678 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.698683 28386 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:14.698685 28386 net.cpp:139] Memory required for data: 3290800
I0428 19:56:14.698688 28386 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:14.698693 28386 net.cpp:86] Creating Layer accuracy
I0428 19:56:14.698696 28386 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:56:14.698700 28386 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:14.698710 28386 net.cpp:382] accuracy -> accuracy
I0428 19:56:14.698717 28386 net.cpp:124] Setting up accuracy
I0428 19:56:14.698727 28386 net.cpp:131] Top shape: (1)
I0428 19:56:14.698730 28386 net.cpp:139] Memory required for data: 3290804
I0428 19:56:14.698734 28386 layer_factory.hpp:77] Creating layer loss
I0428 19:56:14.698745 28386 net.cpp:86] Creating Layer loss
I0428 19:56:14.698747 28386 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:56:14.698751 28386 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:14.698760 28386 net.cpp:382] loss -> loss
I0428 19:56:14.698766 28386 layer_factory.hpp:77] Creating layer loss
I0428 19:56:14.699051 28386 net.cpp:124] Setting up loss
I0428 19:56:14.699061 28386 net.cpp:131] Top shape: (1)
I0428 19:56:14.699065 28386 net.cpp:134]     with loss weight 1
I0428 19:56:14.699071 28386 net.cpp:139] Memory required for data: 3290808
I0428 19:56:14.699084 28386 net.cpp:200] loss needs backward computation.
I0428 19:56:14.699089 28386 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:14.699091 28386 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:56:14.699095 28386 net.cpp:200] relu3 needs backward computation.
I0428 19:56:14.699106 28386 net.cpp:200] ip3 needs backward computation.
I0428 19:56:14.699110 28386 net.cpp:200] relu2 needs backward computation.
I0428 19:56:14.699112 28386 net.cpp:200] ip2 needs backward computation.
I0428 19:56:14.699115 28386 net.cpp:200] relu1 needs backward computation.
I0428 19:56:14.699117 28386 net.cpp:200] ip1 needs backward computation.
I0428 19:56:14.699121 28386 net.cpp:200] pool1 needs backward computation.
I0428 19:56:14.699125 28386 net.cpp:200] conv1 needs backward computation.
I0428 19:56:14.699127 28386 net.cpp:200] pool0 needs backward computation.
I0428 19:56:14.699136 28386 net.cpp:200] conv0 needs backward computation.
I0428 19:56:14.699141 28386 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:14.699143 28386 net.cpp:202] mnist does not need backward computation.
I0428 19:56:14.699146 28386 net.cpp:244] This network produces output accuracy
I0428 19:56:14.699151 28386 net.cpp:244] This network produces output loss
I0428 19:56:14.699168 28386 net.cpp:257] Network initialization done.
I0428 19:56:14.699225 28386 solver.cpp:56] Solver scaffolding done.
I0428 19:56:14.699579 28386 caffe.cpp:248] Starting Optimization
I0428 19:56:14.699585 28386 solver.cpp:273] Solving LeNet
I0428 19:56:14.699589 28386 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:14.700477 28386 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:14.704175 28386 blocking_queue.cpp:49] Waiting for data
I0428 19:56:14.776654 28393 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:14.777310 28386 solver.cpp:398]     Test net output #0: accuracy = 0.0728
I0428 19:56:14.777328 28386 solver.cpp:398]     Test net output #1: loss = 2.30673 (* 1 = 2.30673 loss)
I0428 19:56:14.779813 28386 solver.cpp:219] Iteration 0 (2.83939 iter/s, 0.0801751s/100 iters), loss = 2.30779
I0428 19:56:14.779834 28386 solver.cpp:238]     Train net output #0: loss = 2.30779 (* 1 = 2.30779 loss)
I0428 19:56:14.779861 28386 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:14.862876 28386 solver.cpp:219] Iteration 100 (1204.43 iter/s, 0.083027s/100 iters), loss = 1.53783
I0428 19:56:14.862908 28386 solver.cpp:238]     Train net output #0: loss = 1.53783 (* 1 = 1.53783 loss)
I0428 19:56:14.862916 28386 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:14.940336 28386 solver.cpp:219] Iteration 200 (1291.68 iter/s, 0.0774185s/100 iters), loss = 0.989534
I0428 19:56:14.940367 28386 solver.cpp:238]     Train net output #0: loss = 0.989534 (* 1 = 0.989534 loss)
I0428 19:56:14.940376 28386 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:15.017447 28386 solver.cpp:219] Iteration 300 (1297.5 iter/s, 0.0770714s/100 iters), loss = 0.466088
I0428 19:56:15.017477 28386 solver.cpp:238]     Train net output #0: loss = 0.466088 (* 1 = 0.466088 loss)
I0428 19:56:15.017484 28386 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:15.093569 28386 solver.cpp:219] Iteration 400 (1314.37 iter/s, 0.0760823s/100 iters), loss = 0.400634
I0428 19:56:15.093596 28386 solver.cpp:238]     Train net output #0: loss = 0.400634 (* 1 = 0.400634 loss)
I0428 19:56:15.093605 28386 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:15.169471 28386 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:15.236028 28393 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:15.236661 28386 solver.cpp:398]     Test net output #0: accuracy = 0.8972
I0428 19:56:15.236685 28386 solver.cpp:398]     Test net output #1: loss = 0.350327 (* 1 = 0.350327 loss)
I0428 19:56:15.237669 28386 solver.cpp:219] Iteration 500 (694.153 iter/s, 0.14406s/100 iters), loss = 0.401028
I0428 19:56:15.237746 28386 solver.cpp:238]     Train net output #0: loss = 0.401028 (* 1 = 0.401028 loss)
I0428 19:56:15.237787 28386 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:15.320194 28386 solver.cpp:219] Iteration 600 (1212.98 iter/s, 0.0824414s/100 iters), loss = 0.226134
I0428 19:56:15.320231 28386 solver.cpp:238]     Train net output #0: loss = 0.226134 (* 1 = 0.226134 loss)
I0428 19:56:15.320236 28386 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:15.396368 28386 solver.cpp:219] Iteration 700 (1313.34 iter/s, 0.0761416s/100 iters), loss = 0.438779
I0428 19:56:15.396400 28386 solver.cpp:238]     Train net output #0: loss = 0.43878 (* 1 = 0.43878 loss)
I0428 19:56:15.396406 28386 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:15.472705 28386 solver.cpp:219] Iteration 800 (1310.67 iter/s, 0.0762971s/100 iters), loss = 0.540736
I0428 19:56:15.472748 28386 solver.cpp:238]     Train net output #0: loss = 0.540736 (* 1 = 0.540736 loss)
I0428 19:56:15.472754 28386 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:15.548516 28386 solver.cpp:219] Iteration 900 (1319.68 iter/s, 0.075776s/100 iters), loss = 0.236038
I0428 19:56:15.548554 28386 solver.cpp:238]     Train net output #0: loss = 0.236038 (* 1 = 0.236038 loss)
I0428 19:56:15.548560 28386 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:15.574304 28392 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:15.624020 28386 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:15.624749 28386 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:15.625313 28386 solver.cpp:311] Iteration 1000, loss = 0.251456
I0428 19:56:15.625329 28386 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:15.690547 28393 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:15.691176 28386 solver.cpp:398]     Test net output #0: accuracy = 0.9265
I0428 19:56:15.691213 28386 solver.cpp:398]     Test net output #1: loss = 0.237444 (* 1 = 0.237444 loss)
I0428 19:56:15.691220 28386 solver.cpp:316] Optimization Done.
I0428 19:56:15.691239 28386 caffe.cpp:259] Optimization Done.
