I0428 19:39:41.982018 24363 caffe.cpp:218] Using GPUs 0
I0428 19:39:42.016672 24363 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:39:42.457870 24363 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test312.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:39:42.457995 24363 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test312.prototxt
I0428 19:39:42.458259 24363 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:39:42.458273 24363 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:39:42.458338 24363 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:42.458395 24363 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:42.458472 24363 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:39:42.458492 24363 net.cpp:86] Creating Layer mnist
I0428 19:39:42.458499 24363 net.cpp:382] mnist -> data
I0428 19:39:42.458516 24363 net.cpp:382] mnist -> label
I0428 19:39:42.459564 24363 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:39:42.461855 24363 net.cpp:124] Setting up mnist
I0428 19:39:42.461892 24363 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:39:42.461899 24363 net.cpp:131] Top shape: 64 (64)
I0428 19:39:42.461901 24363 net.cpp:139] Memory required for data: 200960
I0428 19:39:42.461907 24363 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:42.461921 24363 net.cpp:86] Creating Layer conv0
I0428 19:39:42.461926 24363 net.cpp:408] conv0 <- data
I0428 19:39:42.461935 24363 net.cpp:382] conv0 -> conv0
I0428 19:39:42.775820 24363 net.cpp:124] Setting up conv0
I0428 19:39:42.775849 24363 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:39:42.775854 24363 net.cpp:139] Memory required for data: 495872
I0428 19:39:42.775873 24363 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:42.775889 24363 net.cpp:86] Creating Layer pool0
I0428 19:39:42.775894 24363 net.cpp:408] pool0 <- conv0
I0428 19:39:42.775900 24363 net.cpp:382] pool0 -> pool0
I0428 19:39:42.775955 24363 net.cpp:124] Setting up pool0
I0428 19:39:42.775965 24363 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:39:42.775987 24363 net.cpp:139] Memory required for data: 569600
I0428 19:39:42.775991 24363 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:42.776005 24363 net.cpp:86] Creating Layer conv1
I0428 19:39:42.776010 24363 net.cpp:408] conv1 <- pool0
I0428 19:39:42.776015 24363 net.cpp:382] conv1 -> conv1
I0428 19:39:42.778151 24363 net.cpp:124] Setting up conv1
I0428 19:39:42.778168 24363 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:39:42.778172 24363 net.cpp:139] Memory required for data: 651520
I0428 19:39:42.778183 24363 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:42.778192 24363 net.cpp:86] Creating Layer pool1
I0428 19:39:42.778197 24363 net.cpp:408] pool1 <- conv1
I0428 19:39:42.778203 24363 net.cpp:382] pool1 -> pool1
I0428 19:39:42.778246 24363 net.cpp:124] Setting up pool1
I0428 19:39:42.778252 24363 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:39:42.778256 24363 net.cpp:139] Memory required for data: 672000
I0428 19:39:42.778260 24363 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:42.778268 24363 net.cpp:86] Creating Layer ip1
I0428 19:39:42.778271 24363 net.cpp:408] ip1 <- pool1
I0428 19:39:42.778277 24363 net.cpp:382] ip1 -> ip1
I0428 19:39:42.778396 24363 net.cpp:124] Setting up ip1
I0428 19:39:42.778406 24363 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:42.778409 24363 net.cpp:139] Memory required for data: 674560
I0428 19:39:42.778419 24363 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:42.778425 24363 net.cpp:86] Creating Layer relu1
I0428 19:39:42.778429 24363 net.cpp:408] relu1 <- ip1
I0428 19:39:42.778434 24363 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:42.778628 24363 net.cpp:124] Setting up relu1
I0428 19:39:42.778640 24363 net.cpp:131] Top shape: 64 10 (640)
I0428 19:39:42.778643 24363 net.cpp:139] Memory required for data: 677120
I0428 19:39:42.778647 24363 layer_factory.hpp:77] Creating layer loss
I0428 19:39:42.778654 24363 net.cpp:86] Creating Layer loss
I0428 19:39:42.778657 24363 net.cpp:408] loss <- ip1
I0428 19:39:42.778662 24363 net.cpp:408] loss <- label
I0428 19:39:42.778668 24363 net.cpp:382] loss -> loss
I0428 19:39:42.778688 24363 layer_factory.hpp:77] Creating layer loss
I0428 19:39:42.779629 24363 net.cpp:124] Setting up loss
I0428 19:39:42.779644 24363 net.cpp:131] Top shape: (1)
I0428 19:39:42.779649 24363 net.cpp:134]     with loss weight 1
I0428 19:39:42.779665 24363 net.cpp:139] Memory required for data: 677124
I0428 19:39:42.779670 24363 net.cpp:200] loss needs backward computation.
I0428 19:39:42.779675 24363 net.cpp:200] relu1 needs backward computation.
I0428 19:39:42.779677 24363 net.cpp:200] ip1 needs backward computation.
I0428 19:39:42.779681 24363 net.cpp:200] pool1 needs backward computation.
I0428 19:39:42.779685 24363 net.cpp:200] conv1 needs backward computation.
I0428 19:39:42.779688 24363 net.cpp:200] pool0 needs backward computation.
I0428 19:39:42.779691 24363 net.cpp:200] conv0 needs backward computation.
I0428 19:39:42.779696 24363 net.cpp:202] mnist does not need backward computation.
I0428 19:39:42.779700 24363 net.cpp:244] This network produces output loss
I0428 19:39:42.779708 24363 net.cpp:257] Network initialization done.
I0428 19:39:42.780014 24363 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test312.prototxt
I0428 19:39:42.780042 24363 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:39:42.780130 24363 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:39:42.780215 24363 layer_factory.hpp:77] Creating layer mnist
I0428 19:39:42.780270 24363 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:39:42.780287 24363 net.cpp:86] Creating Layer mnist
I0428 19:39:42.780292 24363 net.cpp:382] mnist -> data
I0428 19:39:42.780300 24363 net.cpp:382] mnist -> label
I0428 19:39:42.780402 24363 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:39:42.782624 24363 net.cpp:124] Setting up mnist
I0428 19:39:42.782639 24363 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:39:42.782645 24363 net.cpp:131] Top shape: 100 (100)
I0428 19:39:42.782649 24363 net.cpp:139] Memory required for data: 314000
I0428 19:39:42.782655 24363 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:39:42.782661 24363 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:39:42.782665 24363 net.cpp:408] label_mnist_1_split <- label
I0428 19:39:42.782671 24363 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:39:42.782680 24363 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:39:42.782728 24363 net.cpp:124] Setting up label_mnist_1_split
I0428 19:39:42.782735 24363 net.cpp:131] Top shape: 100 (100)
I0428 19:39:42.782739 24363 net.cpp:131] Top shape: 100 (100)
I0428 19:39:42.782743 24363 net.cpp:139] Memory required for data: 314800
I0428 19:39:42.782747 24363 layer_factory.hpp:77] Creating layer conv0
I0428 19:39:42.782757 24363 net.cpp:86] Creating Layer conv0
I0428 19:39:42.782762 24363 net.cpp:408] conv0 <- data
I0428 19:39:42.782768 24363 net.cpp:382] conv0 -> conv0
I0428 19:39:42.783742 24363 net.cpp:124] Setting up conv0
I0428 19:39:42.783757 24363 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:39:42.783761 24363 net.cpp:139] Memory required for data: 775600
I0428 19:39:42.783772 24363 layer_factory.hpp:77] Creating layer pool0
I0428 19:39:42.783779 24363 net.cpp:86] Creating Layer pool0
I0428 19:39:42.783783 24363 net.cpp:408] pool0 <- conv0
I0428 19:39:42.783789 24363 net.cpp:382] pool0 -> pool0
I0428 19:39:42.783831 24363 net.cpp:124] Setting up pool0
I0428 19:39:42.783838 24363 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:39:42.783841 24363 net.cpp:139] Memory required for data: 890800
I0428 19:39:42.783844 24363 layer_factory.hpp:77] Creating layer conv1
I0428 19:39:42.783854 24363 net.cpp:86] Creating Layer conv1
I0428 19:39:42.783857 24363 net.cpp:408] conv1 <- pool0
I0428 19:39:42.783864 24363 net.cpp:382] conv1 -> conv1
I0428 19:39:42.785595 24363 net.cpp:124] Setting up conv1
I0428 19:39:42.785611 24363 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:39:42.785616 24363 net.cpp:139] Memory required for data: 1018800
I0428 19:39:42.785626 24363 layer_factory.hpp:77] Creating layer pool1
I0428 19:39:42.785634 24363 net.cpp:86] Creating Layer pool1
I0428 19:39:42.785660 24363 net.cpp:408] pool1 <- conv1
I0428 19:39:42.785665 24363 net.cpp:382] pool1 -> pool1
I0428 19:39:42.785717 24363 net.cpp:124] Setting up pool1
I0428 19:39:42.785723 24363 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:39:42.785727 24363 net.cpp:139] Memory required for data: 1050800
I0428 19:39:42.785730 24363 layer_factory.hpp:77] Creating layer ip1
I0428 19:39:42.785737 24363 net.cpp:86] Creating Layer ip1
I0428 19:39:42.785742 24363 net.cpp:408] ip1 <- pool1
I0428 19:39:42.785748 24363 net.cpp:382] ip1 -> ip1
I0428 19:39:42.785873 24363 net.cpp:124] Setting up ip1
I0428 19:39:42.785883 24363 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:42.785887 24363 net.cpp:139] Memory required for data: 1054800
I0428 19:39:42.785895 24363 layer_factory.hpp:77] Creating layer relu1
I0428 19:39:42.785902 24363 net.cpp:86] Creating Layer relu1
I0428 19:39:42.785905 24363 net.cpp:408] relu1 <- ip1
I0428 19:39:42.785910 24363 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:39:42.786854 24363 net.cpp:124] Setting up relu1
I0428 19:39:42.786869 24363 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:42.786893 24363 net.cpp:139] Memory required for data: 1058800
I0428 19:39:42.786900 24363 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:39:42.786907 24363 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:39:42.786912 24363 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:39:42.786919 24363 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:39:42.786926 24363 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:39:42.786972 24363 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:39:42.786988 24363 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:42.786993 24363 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:39:42.786998 24363 net.cpp:139] Memory required for data: 1066800
I0428 19:39:42.787000 24363 layer_factory.hpp:77] Creating layer accuracy
I0428 19:39:42.787006 24363 net.cpp:86] Creating Layer accuracy
I0428 19:39:42.787010 24363 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:39:42.787015 24363 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:39:42.787029 24363 net.cpp:382] accuracy -> accuracy
I0428 19:39:42.787037 24363 net.cpp:124] Setting up accuracy
I0428 19:39:42.787042 24363 net.cpp:131] Top shape: (1)
I0428 19:39:42.787045 24363 net.cpp:139] Memory required for data: 1066804
I0428 19:39:42.787048 24363 layer_factory.hpp:77] Creating layer loss
I0428 19:39:42.787055 24363 net.cpp:86] Creating Layer loss
I0428 19:39:42.787057 24363 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:39:42.787061 24363 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:39:42.787067 24363 net.cpp:382] loss -> loss
I0428 19:39:42.787075 24363 layer_factory.hpp:77] Creating layer loss
I0428 19:39:42.787381 24363 net.cpp:124] Setting up loss
I0428 19:39:42.787392 24363 net.cpp:131] Top shape: (1)
I0428 19:39:42.787396 24363 net.cpp:134]     with loss weight 1
I0428 19:39:42.787405 24363 net.cpp:139] Memory required for data: 1066808
I0428 19:39:42.787408 24363 net.cpp:200] loss needs backward computation.
I0428 19:39:42.787412 24363 net.cpp:202] accuracy does not need backward computation.
I0428 19:39:42.787427 24363 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:39:42.787431 24363 net.cpp:200] relu1 needs backward computation.
I0428 19:39:42.787434 24363 net.cpp:200] ip1 needs backward computation.
I0428 19:39:42.787437 24363 net.cpp:200] pool1 needs backward computation.
I0428 19:39:42.787442 24363 net.cpp:200] conv1 needs backward computation.
I0428 19:39:42.787446 24363 net.cpp:200] pool0 needs backward computation.
I0428 19:39:42.787451 24363 net.cpp:200] conv0 needs backward computation.
I0428 19:39:42.787454 24363 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:39:42.787459 24363 net.cpp:202] mnist does not need backward computation.
I0428 19:39:42.787462 24363 net.cpp:244] This network produces output accuracy
I0428 19:39:42.787467 24363 net.cpp:244] This network produces output loss
I0428 19:39:42.787477 24363 net.cpp:257] Network initialization done.
I0428 19:39:42.787538 24363 solver.cpp:56] Solver scaffolding done.
I0428 19:39:42.787798 24363 caffe.cpp:248] Starting Optimization
I0428 19:39:42.787806 24363 solver.cpp:273] Solving LeNet
I0428 19:39:42.787811 24363 solver.cpp:274] Learning Rate Policy: inv
I0428 19:39:42.788624 24363 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:39:42.792156 24363 blocking_queue.cpp:49] Waiting for data
I0428 19:39:42.862658 24370 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:42.863064 24363 solver.cpp:398]     Test net output #0: accuracy = 0.1354
I0428 19:39:42.863086 24363 solver.cpp:398]     Test net output #1: loss = 2.4367 (* 1 = 2.4367 loss)
I0428 19:39:42.864879 24363 solver.cpp:219] Iteration 0 (-1.60053e-30 iter/s, 0.0770349s/100 iters), loss = 2.4602
I0428 19:39:42.864912 24363 solver.cpp:238]     Train net output #0: loss = 2.4602 (* 1 = 2.4602 loss)
I0428 19:39:42.864926 24363 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:39:42.930539 24363 solver.cpp:219] Iteration 100 (1524.07 iter/s, 0.0656136s/100 iters), loss = 0.961916
I0428 19:39:42.930594 24363 solver.cpp:238]     Train net output #0: loss = 0.961916 (* 1 = 0.961916 loss)
I0428 19:39:42.930608 24363 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:39:43.004148 24363 solver.cpp:219] Iteration 200 (1359.64 iter/s, 0.0735488s/100 iters), loss = 0.767565
I0428 19:39:43.004184 24363 solver.cpp:238]     Train net output #0: loss = 0.767565 (* 1 = 0.767565 loss)
I0428 19:39:43.004192 24363 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:39:43.067961 24363 solver.cpp:219] Iteration 300 (1568.15 iter/s, 0.0637696s/100 iters), loss = 0.533808
I0428 19:39:43.068004 24363 solver.cpp:238]     Train net output #0: loss = 0.533808 (* 1 = 0.533808 loss)
I0428 19:39:43.068014 24363 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:39:43.127729 24363 solver.cpp:219] Iteration 400 (1674.52 iter/s, 0.0597186s/100 iters), loss = 0.604146
I0428 19:39:43.127758 24363 solver.cpp:238]     Train net output #0: loss = 0.604146 (* 1 = 0.604146 loss)
I0428 19:39:43.127764 24363 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:39:43.186683 24363 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:39:43.261253 24370 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:43.261783 24363 solver.cpp:398]     Test net output #0: accuracy = 0.8808
I0428 19:39:43.261818 24363 solver.cpp:398]     Test net output #1: loss = 0.46121 (* 1 = 0.46121 loss)
I0428 19:39:43.262655 24363 solver.cpp:219] Iteration 500 (741.387 iter/s, 0.134882s/100 iters), loss = 0.438795
I0428 19:39:43.262696 24363 solver.cpp:238]     Train net output #0: loss = 0.438795 (* 1 = 0.438795 loss)
I0428 19:39:43.262707 24363 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:39:43.335026 24363 solver.cpp:219] Iteration 600 (1382.66 iter/s, 0.0723242s/100 iters), loss = 0.389905
I0428 19:39:43.335062 24363 solver.cpp:238]     Train net output #0: loss = 0.389905 (* 1 = 0.389905 loss)
I0428 19:39:43.335070 24363 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:39:43.398134 24363 solver.cpp:219] Iteration 700 (1585.66 iter/s, 0.0630651s/100 iters), loss = 0.674157
I0428 19:39:43.398164 24363 solver.cpp:238]     Train net output #0: loss = 0.674157 (* 1 = 0.674157 loss)
I0428 19:39:43.398171 24363 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:39:43.458372 24363 solver.cpp:219] Iteration 800 (1661.1 iter/s, 0.0602009s/100 iters), loss = 0.560026
I0428 19:39:43.458400 24363 solver.cpp:238]     Train net output #0: loss = 0.560026 (* 1 = 0.560026 loss)
I0428 19:39:43.458407 24363 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:39:43.517839 24363 solver.cpp:219] Iteration 900 (1682.6 iter/s, 0.0594317s/100 iters), loss = 0.443934
I0428 19:39:43.517868 24363 solver.cpp:238]     Train net output #0: loss = 0.443934 (* 1 = 0.443934 loss)
I0428 19:39:43.517874 24363 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:39:43.537788 24369 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:43.576688 24363 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:39:43.577201 24363 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:39:43.577556 24363 solver.cpp:311] Iteration 1000, loss = 0.441668
I0428 19:39:43.577574 24363 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:39:43.651664 24370 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:39:43.652065 24363 solver.cpp:398]     Test net output #0: accuracy = 0.9337
I0428 19:39:43.652087 24363 solver.cpp:398]     Test net output #1: loss = 0.383433 (* 1 = 0.383433 loss)
I0428 19:39:43.652093 24363 solver.cpp:316] Optimization Done.
I0428 19:39:43.652097 24363 caffe.cpp:259] Optimization Done.
