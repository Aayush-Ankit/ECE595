I0428 19:40:19.563799 24522 caffe.cpp:218] Using GPUs 0
I0428 19:40:19.597569 24522 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:20.096107 24522 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test331.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:20.096225 24522 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test331.prototxt
I0428 19:40:20.096549 24522 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:20.096563 24522 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:20.096640 24522 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:20.096700 24522 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:20.096781 24522 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:20.096801 24522 net.cpp:86] Creating Layer mnist
I0428 19:40:20.096807 24522 net.cpp:382] mnist -> data
I0428 19:40:20.096848 24522 net.cpp:382] mnist -> label
I0428 19:40:20.097770 24522 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:20.099854 24522 net.cpp:124] Setting up mnist
I0428 19:40:20.099869 24522 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:20.099874 24522 net.cpp:131] Top shape: 64 (64)
I0428 19:40:20.099877 24522 net.cpp:139] Memory required for data: 200960
I0428 19:40:20.099884 24522 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:20.099897 24522 net.cpp:86] Creating Layer conv0
I0428 19:40:20.099932 24522 net.cpp:408] conv0 <- data
I0428 19:40:20.099943 24522 net.cpp:382] conv0 -> conv0
I0428 19:40:20.331768 24522 net.cpp:124] Setting up conv0
I0428 19:40:20.331794 24522 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:20.331797 24522 net.cpp:139] Memory required for data: 495872
I0428 19:40:20.331810 24522 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:20.331822 24522 net.cpp:86] Creating Layer pool0
I0428 19:40:20.331826 24522 net.cpp:408] pool0 <- conv0
I0428 19:40:20.331830 24522 net.cpp:382] pool0 -> pool0
I0428 19:40:20.331892 24522 net.cpp:124] Setting up pool0
I0428 19:40:20.331897 24522 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:20.331900 24522 net.cpp:139] Memory required for data: 569600
I0428 19:40:20.331902 24522 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:20.331912 24522 net.cpp:86] Creating Layer conv1
I0428 19:40:20.331915 24522 net.cpp:408] conv1 <- pool0
I0428 19:40:20.331919 24522 net.cpp:382] conv1 -> conv1
I0428 19:40:20.333835 24522 net.cpp:124] Setting up conv1
I0428 19:40:20.333865 24522 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:20.333869 24522 net.cpp:139] Memory required for data: 651520
I0428 19:40:20.333878 24522 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:20.333886 24522 net.cpp:86] Creating Layer pool1
I0428 19:40:20.333889 24522 net.cpp:408] pool1 <- conv1
I0428 19:40:20.333894 24522 net.cpp:382] pool1 -> pool1
I0428 19:40:20.333933 24522 net.cpp:124] Setting up pool1
I0428 19:40:20.333940 24522 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:20.333942 24522 net.cpp:139] Memory required for data: 672000
I0428 19:40:20.333945 24522 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:20.333956 24522 net.cpp:86] Creating Layer ip1
I0428 19:40:20.333959 24522 net.cpp:408] ip1 <- pool1
I0428 19:40:20.333964 24522 net.cpp:382] ip1 -> ip1
I0428 19:40:20.334064 24522 net.cpp:124] Setting up ip1
I0428 19:40:20.334072 24522 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:20.334075 24522 net.cpp:139] Memory required for data: 674560
I0428 19:40:20.334082 24522 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:20.334087 24522 net.cpp:86] Creating Layer relu1
I0428 19:40:20.334090 24522 net.cpp:408] relu1 <- ip1
I0428 19:40:20.334110 24522 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:20.334270 24522 net.cpp:124] Setting up relu1
I0428 19:40:20.334277 24522 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:20.334280 24522 net.cpp:139] Memory required for data: 677120
I0428 19:40:20.334283 24522 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:20.334290 24522 net.cpp:86] Creating Layer ip2
I0428 19:40:20.334292 24522 net.cpp:408] ip2 <- ip1
I0428 19:40:20.334297 24522 net.cpp:382] ip2 -> ip2
I0428 19:40:20.334393 24522 net.cpp:124] Setting up ip2
I0428 19:40:20.334400 24522 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:20.334403 24522 net.cpp:139] Memory required for data: 689920
I0428 19:40:20.334408 24522 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:20.334414 24522 net.cpp:86] Creating Layer relu2
I0428 19:40:20.334417 24522 net.cpp:408] relu2 <- ip2
I0428 19:40:20.334421 24522 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:20.335168 24522 net.cpp:124] Setting up relu2
I0428 19:40:20.335180 24522 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:20.335199 24522 net.cpp:139] Memory required for data: 702720
I0428 19:40:20.335203 24522 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:20.335211 24522 net.cpp:86] Creating Layer ip3
I0428 19:40:20.335213 24522 net.cpp:408] ip3 <- ip2
I0428 19:40:20.335218 24522 net.cpp:382] ip3 -> ip3
I0428 19:40:20.335319 24522 net.cpp:124] Setting up ip3
I0428 19:40:20.335327 24522 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:20.335330 24522 net.cpp:139] Memory required for data: 705280
I0428 19:40:20.335337 24522 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:20.335342 24522 net.cpp:86] Creating Layer relu3
I0428 19:40:20.335345 24522 net.cpp:408] relu3 <- ip3
I0428 19:40:20.335350 24522 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:20.335512 24522 net.cpp:124] Setting up relu3
I0428 19:40:20.335520 24522 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:20.335523 24522 net.cpp:139] Memory required for data: 707840
I0428 19:40:20.335526 24522 layer_factory.hpp:77] Creating layer loss
I0428 19:40:20.335532 24522 net.cpp:86] Creating Layer loss
I0428 19:40:20.335536 24522 net.cpp:408] loss <- ip3
I0428 19:40:20.335539 24522 net.cpp:408] loss <- label
I0428 19:40:20.335544 24522 net.cpp:382] loss -> loss
I0428 19:40:20.335562 24522 layer_factory.hpp:77] Creating layer loss
I0428 19:40:20.335803 24522 net.cpp:124] Setting up loss
I0428 19:40:20.335810 24522 net.cpp:131] Top shape: (1)
I0428 19:40:20.335814 24522 net.cpp:134]     with loss weight 1
I0428 19:40:20.335829 24522 net.cpp:139] Memory required for data: 707844
I0428 19:40:20.335832 24522 net.cpp:200] loss needs backward computation.
I0428 19:40:20.335835 24522 net.cpp:200] relu3 needs backward computation.
I0428 19:40:20.335839 24522 net.cpp:200] ip3 needs backward computation.
I0428 19:40:20.335841 24522 net.cpp:200] relu2 needs backward computation.
I0428 19:40:20.335844 24522 net.cpp:200] ip2 needs backward computation.
I0428 19:40:20.335846 24522 net.cpp:200] relu1 needs backward computation.
I0428 19:40:20.335850 24522 net.cpp:200] ip1 needs backward computation.
I0428 19:40:20.335852 24522 net.cpp:200] pool1 needs backward computation.
I0428 19:40:20.335855 24522 net.cpp:200] conv1 needs backward computation.
I0428 19:40:20.335858 24522 net.cpp:200] pool0 needs backward computation.
I0428 19:40:20.335861 24522 net.cpp:200] conv0 needs backward computation.
I0428 19:40:20.335865 24522 net.cpp:202] mnist does not need backward computation.
I0428 19:40:20.335867 24522 net.cpp:244] This network produces output loss
I0428 19:40:20.335876 24522 net.cpp:257] Network initialization done.
I0428 19:40:20.336230 24522 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test331.prototxt
I0428 19:40:20.336273 24522 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:20.336360 24522 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:20.336437 24522 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:20.336480 24522 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:20.336493 24522 net.cpp:86] Creating Layer mnist
I0428 19:40:20.336498 24522 net.cpp:382] mnist -> data
I0428 19:40:20.336504 24522 net.cpp:382] mnist -> label
I0428 19:40:20.336585 24522 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:20.339033 24522 net.cpp:124] Setting up mnist
I0428 19:40:20.339072 24522 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:20.339078 24522 net.cpp:131] Top shape: 100 (100)
I0428 19:40:20.339082 24522 net.cpp:139] Memory required for data: 314000
I0428 19:40:20.339085 24522 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:20.339135 24522 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:20.339140 24522 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:20.339145 24522 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:20.339153 24522 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:20.339205 24522 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:20.339213 24522 net.cpp:131] Top shape: 100 (100)
I0428 19:40:20.339217 24522 net.cpp:131] Top shape: 100 (100)
I0428 19:40:20.339221 24522 net.cpp:139] Memory required for data: 314800
I0428 19:40:20.339223 24522 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:20.339232 24522 net.cpp:86] Creating Layer conv0
I0428 19:40:20.339236 24522 net.cpp:408] conv0 <- data
I0428 19:40:20.339241 24522 net.cpp:382] conv0 -> conv0
I0428 19:40:20.340920 24522 net.cpp:124] Setting up conv0
I0428 19:40:20.340936 24522 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:20.340940 24522 net.cpp:139] Memory required for data: 775600
I0428 19:40:20.340951 24522 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:20.340958 24522 net.cpp:86] Creating Layer pool0
I0428 19:40:20.340961 24522 net.cpp:408] pool0 <- conv0
I0428 19:40:20.340966 24522 net.cpp:382] pool0 -> pool0
I0428 19:40:20.341006 24522 net.cpp:124] Setting up pool0
I0428 19:40:20.341012 24522 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:20.341014 24522 net.cpp:139] Memory required for data: 890800
I0428 19:40:20.341017 24522 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:20.341027 24522 net.cpp:86] Creating Layer conv1
I0428 19:40:20.341030 24522 net.cpp:408] conv1 <- pool0
I0428 19:40:20.341037 24522 net.cpp:382] conv1 -> conv1
I0428 19:40:20.342808 24522 net.cpp:124] Setting up conv1
I0428 19:40:20.342821 24522 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:20.342840 24522 net.cpp:139] Memory required for data: 1018800
I0428 19:40:20.342849 24522 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:20.342855 24522 net.cpp:86] Creating Layer pool1
I0428 19:40:20.342859 24522 net.cpp:408] pool1 <- conv1
I0428 19:40:20.342864 24522 net.cpp:382] pool1 -> pool1
I0428 19:40:20.342916 24522 net.cpp:124] Setting up pool1
I0428 19:40:20.342923 24522 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:20.342926 24522 net.cpp:139] Memory required for data: 1050800
I0428 19:40:20.342928 24522 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:20.342936 24522 net.cpp:86] Creating Layer ip1
I0428 19:40:20.342938 24522 net.cpp:408] ip1 <- pool1
I0428 19:40:20.342942 24522 net.cpp:382] ip1 -> ip1
I0428 19:40:20.343060 24522 net.cpp:124] Setting up ip1
I0428 19:40:20.343067 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.343080 24522 net.cpp:139] Memory required for data: 1054800
I0428 19:40:20.343088 24522 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:20.343094 24522 net.cpp:86] Creating Layer relu1
I0428 19:40:20.343098 24522 net.cpp:408] relu1 <- ip1
I0428 19:40:20.343102 24522 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:20.343273 24522 net.cpp:124] Setting up relu1
I0428 19:40:20.343298 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.343302 24522 net.cpp:139] Memory required for data: 1058800
I0428 19:40:20.343305 24522 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:20.343313 24522 net.cpp:86] Creating Layer ip2
I0428 19:40:20.343317 24522 net.cpp:408] ip2 <- ip1
I0428 19:40:20.343323 24522 net.cpp:382] ip2 -> ip2
I0428 19:40:20.343482 24522 net.cpp:124] Setting up ip2
I0428 19:40:20.343489 24522 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:20.343492 24522 net.cpp:139] Memory required for data: 1078800
I0428 19:40:20.343499 24522 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:20.343504 24522 net.cpp:86] Creating Layer relu2
I0428 19:40:20.343508 24522 net.cpp:408] relu2 <- ip2
I0428 19:40:20.343513 24522 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:20.343786 24522 net.cpp:124] Setting up relu2
I0428 19:40:20.343796 24522 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:20.343797 24522 net.cpp:139] Memory required for data: 1098800
I0428 19:40:20.343801 24522 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:20.343806 24522 net.cpp:86] Creating Layer ip3
I0428 19:40:20.343808 24522 net.cpp:408] ip3 <- ip2
I0428 19:40:20.343814 24522 net.cpp:382] ip3 -> ip3
I0428 19:40:20.344005 24522 net.cpp:124] Setting up ip3
I0428 19:40:20.344014 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.344017 24522 net.cpp:139] Memory required for data: 1102800
I0428 19:40:20.344027 24522 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:20.344032 24522 net.cpp:86] Creating Layer relu3
I0428 19:40:20.344034 24522 net.cpp:408] relu3 <- ip3
I0428 19:40:20.344040 24522 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:20.344941 24522 net.cpp:124] Setting up relu3
I0428 19:40:20.344954 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.344957 24522 net.cpp:139] Memory required for data: 1106800
I0428 19:40:20.344961 24522 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:20.344966 24522 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:20.344969 24522 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:20.344975 24522 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:20.344981 24522 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:20.345052 24522 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:20.345058 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.345062 24522 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:20.345064 24522 net.cpp:139] Memory required for data: 1114800
I0428 19:40:20.345067 24522 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:20.345075 24522 net.cpp:86] Creating Layer accuracy
I0428 19:40:20.345079 24522 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:20.345083 24522 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:20.345094 24522 net.cpp:382] accuracy -> accuracy
I0428 19:40:20.345105 24522 net.cpp:124] Setting up accuracy
I0428 19:40:20.345109 24522 net.cpp:131] Top shape: (1)
I0428 19:40:20.345116 24522 net.cpp:139] Memory required for data: 1114804
I0428 19:40:20.345119 24522 layer_factory.hpp:77] Creating layer loss
I0428 19:40:20.345124 24522 net.cpp:86] Creating Layer loss
I0428 19:40:20.345127 24522 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:20.345136 24522 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:20.345140 24522 net.cpp:382] loss -> loss
I0428 19:40:20.345146 24522 layer_factory.hpp:77] Creating layer loss
I0428 19:40:20.345429 24522 net.cpp:124] Setting up loss
I0428 19:40:20.345453 24522 net.cpp:131] Top shape: (1)
I0428 19:40:20.345471 24522 net.cpp:134]     with loss weight 1
I0428 19:40:20.345477 24522 net.cpp:139] Memory required for data: 1114808
I0428 19:40:20.345523 24522 net.cpp:200] loss needs backward computation.
I0428 19:40:20.345527 24522 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:20.345532 24522 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:20.345535 24522 net.cpp:200] relu3 needs backward computation.
I0428 19:40:20.345538 24522 net.cpp:200] ip3 needs backward computation.
I0428 19:40:20.345542 24522 net.cpp:200] relu2 needs backward computation.
I0428 19:40:20.345546 24522 net.cpp:200] ip2 needs backward computation.
I0428 19:40:20.345548 24522 net.cpp:200] relu1 needs backward computation.
I0428 19:40:20.345551 24522 net.cpp:200] ip1 needs backward computation.
I0428 19:40:20.345554 24522 net.cpp:200] pool1 needs backward computation.
I0428 19:40:20.345564 24522 net.cpp:200] conv1 needs backward computation.
I0428 19:40:20.345568 24522 net.cpp:200] pool0 needs backward computation.
I0428 19:40:20.345572 24522 net.cpp:200] conv0 needs backward computation.
I0428 19:40:20.345577 24522 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:20.345580 24522 net.cpp:202] mnist does not need backward computation.
I0428 19:40:20.345583 24522 net.cpp:244] This network produces output accuracy
I0428 19:40:20.345587 24522 net.cpp:244] This network produces output loss
I0428 19:40:20.345599 24522 net.cpp:257] Network initialization done.
I0428 19:40:20.345650 24522 solver.cpp:56] Solver scaffolding done.
I0428 19:40:20.346093 24522 caffe.cpp:248] Starting Optimization
I0428 19:40:20.346098 24522 solver.cpp:273] Solving LeNet
I0428 19:40:20.346101 24522 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:20.347020 24522 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:20.349735 24522 blocking_queue.cpp:49] Waiting for data
I0428 19:40:20.420400 24529 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:20.420884 24522 solver.cpp:398]     Test net output #0: accuracy = 0.0675
I0428 19:40:20.420920 24522 solver.cpp:398]     Test net output #1: loss = 2.29627 (* 1 = 2.29627 loss)
I0428 19:40:20.422902 24522 solver.cpp:219] Iteration 0 (0 iter/s, 0.0767508s/100 iters), loss = 2.2977
I0428 19:40:20.422940 24522 solver.cpp:238]     Train net output #0: loss = 2.2977 (* 1 = 2.2977 loss)
I0428 19:40:20.422950 24522 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:20.497634 24522 solver.cpp:219] Iteration 100 (1338.71 iter/s, 0.0746987s/100 iters), loss = 1.03628
I0428 19:40:20.497673 24522 solver.cpp:238]     Train net output #0: loss = 1.03628 (* 1 = 1.03628 loss)
I0428 19:40:20.497679 24522 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:20.568404 24522 solver.cpp:219] Iteration 200 (1414.04 iter/s, 0.0707196s/100 iters), loss = 0.70138
I0428 19:40:20.568428 24522 solver.cpp:238]     Train net output #0: loss = 0.70138 (* 1 = 0.70138 loss)
I0428 19:40:20.568434 24522 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:20.637393 24522 solver.cpp:219] Iteration 300 (1450.22 iter/s, 0.0689551s/100 iters), loss = 0.646869
I0428 19:40:20.637416 24522 solver.cpp:238]     Train net output #0: loss = 0.646869 (* 1 = 0.646869 loss)
I0428 19:40:20.637437 24522 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:20.707253 24522 solver.cpp:219] Iteration 400 (1432.1 iter/s, 0.0698276s/100 iters), loss = 0.554315
I0428 19:40:20.707275 24522 solver.cpp:238]     Train net output #0: loss = 0.554315 (* 1 = 0.554315 loss)
I0428 19:40:20.707281 24522 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:20.777135 24522 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:20.853235 24529 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:20.853683 24522 solver.cpp:398]     Test net output #0: accuracy = 0.8034
I0428 19:40:20.853703 24522 solver.cpp:398]     Test net output #1: loss = 0.579351 (* 1 = 0.579351 loss)
I0428 19:40:20.854476 24522 solver.cpp:219] Iteration 500 (679.405 iter/s, 0.147188s/100 iters), loss = 0.635235
I0428 19:40:20.854502 24522 solver.cpp:238]     Train net output #0: loss = 0.635234 (* 1 = 0.635234 loss)
I0428 19:40:20.854523 24522 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:20.927952 24522 solver.cpp:219] Iteration 600 (1361.67 iter/s, 0.0734394s/100 iters), loss = 0.32537
I0428 19:40:20.927990 24522 solver.cpp:238]     Train net output #0: loss = 0.32537 (* 1 = 0.32537 loss)
I0428 19:40:20.927997 24522 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:21.000928 24522 solver.cpp:219] Iteration 700 (1371.25 iter/s, 0.0729262s/100 iters), loss = 0.741735
I0428 19:40:21.000968 24522 solver.cpp:238]     Train net output #0: loss = 0.741735 (* 1 = 0.741735 loss)
I0428 19:40:21.000975 24522 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:21.072082 24522 solver.cpp:219] Iteration 800 (1406.2 iter/s, 0.0711137s/100 iters), loss = 0.561372
I0428 19:40:21.072121 24522 solver.cpp:238]     Train net output #0: loss = 0.561372 (* 1 = 0.561372 loss)
I0428 19:40:21.072129 24522 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:21.141381 24522 solver.cpp:219] Iteration 900 (1444.08 iter/s, 0.0692482s/100 iters), loss = 0.556891
I0428 19:40:21.141419 24522 solver.cpp:238]     Train net output #0: loss = 0.55689 (* 1 = 0.55689 loss)
I0428 19:40:21.141427 24522 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:21.164165 24528 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:21.208447 24522 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:21.209224 24522 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:21.209655 24522 solver.cpp:311] Iteration 1000, loss = 0.575454
I0428 19:40:21.209683 24522 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:21.284600 24529 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:21.285174 24522 solver.cpp:398]     Test net output #0: accuracy = 0.8447
I0428 19:40:21.285207 24522 solver.cpp:398]     Test net output #1: loss = 0.441707 (* 1 = 0.441707 loss)
I0428 19:40:21.285215 24522 solver.cpp:316] Optimization Done.
I0428 19:40:21.285220 24522 caffe.cpp:259] Optimization Done.
