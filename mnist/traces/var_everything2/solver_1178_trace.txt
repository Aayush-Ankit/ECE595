I0428 20:12:20.104305 32236 caffe.cpp:218] Using GPUs 0
I0428 20:12:20.136008 32236 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:12:20.616652 32236 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1178.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:12:20.616794 32236 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1178.prototxt
I0428 20:12:20.617226 32236 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:12:20.617257 32236 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:12:20.617333 32236 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:20.617395 32236 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:20.617493 32236 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:12:20.617511 32236 net.cpp:86] Creating Layer mnist
I0428 20:12:20.617519 32236 net.cpp:382] mnist -> data
I0428 20:12:20.617537 32236 net.cpp:382] mnist -> label
I0428 20:12:20.618532 32236 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:12:20.620865 32236 net.cpp:124] Setting up mnist
I0428 20:12:20.620896 32236 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:12:20.620903 32236 net.cpp:131] Top shape: 64 (64)
I0428 20:12:20.620905 32236 net.cpp:139] Memory required for data: 200960
I0428 20:12:20.620911 32236 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:20.620926 32236 net.cpp:86] Creating Layer conv0
I0428 20:12:20.620931 32236 net.cpp:408] conv0 <- data
I0428 20:12:20.620942 32236 net.cpp:382] conv0 -> conv0
I0428 20:12:20.848404 32236 net.cpp:124] Setting up conv0
I0428 20:12:20.848430 32236 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:12:20.848434 32236 net.cpp:139] Memory required for data: 3887360
I0428 20:12:20.848466 32236 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:20.848479 32236 net.cpp:86] Creating Layer pool0
I0428 20:12:20.848482 32236 net.cpp:408] pool0 <- conv0
I0428 20:12:20.848502 32236 net.cpp:382] pool0 -> pool0
I0428 20:12:20.848546 32236 net.cpp:124] Setting up pool0
I0428 20:12:20.848551 32236 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:12:20.848553 32236 net.cpp:139] Memory required for data: 4808960
I0428 20:12:20.848556 32236 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:20.848567 32236 net.cpp:86] Creating Layer conv1
I0428 20:12:20.848569 32236 net.cpp:408] conv1 <- pool0
I0428 20:12:20.848574 32236 net.cpp:382] conv1 -> conv1
I0428 20:12:20.850803 32236 net.cpp:124] Setting up conv1
I0428 20:12:20.850833 32236 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:12:20.850836 32236 net.cpp:139] Memory required for data: 6447360
I0428 20:12:20.850845 32236 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:20.850852 32236 net.cpp:86] Creating Layer pool1
I0428 20:12:20.850855 32236 net.cpp:408] pool1 <- conv1
I0428 20:12:20.850860 32236 net.cpp:382] pool1 -> pool1
I0428 20:12:20.850910 32236 net.cpp:124] Setting up pool1
I0428 20:12:20.850915 32236 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:12:20.850919 32236 net.cpp:139] Memory required for data: 6856960
I0428 20:12:20.850921 32236 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:20.850929 32236 net.cpp:86] Creating Layer ip1
I0428 20:12:20.850931 32236 net.cpp:408] ip1 <- pool1
I0428 20:12:20.850936 32236 net.cpp:382] ip1 -> ip1
I0428 20:12:20.851250 32236 net.cpp:124] Setting up ip1
I0428 20:12:20.851272 32236 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:12:20.851291 32236 net.cpp:139] Memory required for data: 6863360
I0428 20:12:20.851299 32236 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:20.851305 32236 net.cpp:86] Creating Layer relu1
I0428 20:12:20.851307 32236 net.cpp:408] relu1 <- ip1
I0428 20:12:20.851311 32236 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:20.851467 32236 net.cpp:124] Setting up relu1
I0428 20:12:20.851476 32236 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:12:20.851480 32236 net.cpp:139] Memory required for data: 6869760
I0428 20:12:20.851482 32236 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:20.851488 32236 net.cpp:86] Creating Layer ip2
I0428 20:12:20.851491 32236 net.cpp:408] ip2 <- ip1
I0428 20:12:20.851506 32236 net.cpp:382] ip2 -> ip2
I0428 20:12:20.851593 32236 net.cpp:124] Setting up ip2
I0428 20:12:20.851599 32236 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:20.851603 32236 net.cpp:139] Memory required for data: 6872320
I0428 20:12:20.851608 32236 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:20.851613 32236 net.cpp:86] Creating Layer relu2
I0428 20:12:20.851615 32236 net.cpp:408] relu2 <- ip2
I0428 20:12:20.851619 32236 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:20.852373 32236 net.cpp:124] Setting up relu2
I0428 20:12:20.852385 32236 net.cpp:131] Top shape: 64 10 (640)
I0428 20:12:20.852403 32236 net.cpp:139] Memory required for data: 6874880
I0428 20:12:20.852407 32236 layer_factory.hpp:77] Creating layer loss
I0428 20:12:20.852413 32236 net.cpp:86] Creating Layer loss
I0428 20:12:20.852416 32236 net.cpp:408] loss <- ip2
I0428 20:12:20.852421 32236 net.cpp:408] loss <- label
I0428 20:12:20.852427 32236 net.cpp:382] loss -> loss
I0428 20:12:20.852445 32236 layer_factory.hpp:77] Creating layer loss
I0428 20:12:20.852686 32236 net.cpp:124] Setting up loss
I0428 20:12:20.852695 32236 net.cpp:131] Top shape: (1)
I0428 20:12:20.852699 32236 net.cpp:134]     with loss weight 1
I0428 20:12:20.852712 32236 net.cpp:139] Memory required for data: 6874884
I0428 20:12:20.852715 32236 net.cpp:200] loss needs backward computation.
I0428 20:12:20.852720 32236 net.cpp:200] relu2 needs backward computation.
I0428 20:12:20.852722 32236 net.cpp:200] ip2 needs backward computation.
I0428 20:12:20.852725 32236 net.cpp:200] relu1 needs backward computation.
I0428 20:12:20.852727 32236 net.cpp:200] ip1 needs backward computation.
I0428 20:12:20.852741 32236 net.cpp:200] pool1 needs backward computation.
I0428 20:12:20.852744 32236 net.cpp:200] conv1 needs backward computation.
I0428 20:12:20.852747 32236 net.cpp:200] pool0 needs backward computation.
I0428 20:12:20.852751 32236 net.cpp:200] conv0 needs backward computation.
I0428 20:12:20.852753 32236 net.cpp:202] mnist does not need backward computation.
I0428 20:12:20.852756 32236 net.cpp:244] This network produces output loss
I0428 20:12:20.852764 32236 net.cpp:257] Network initialization done.
I0428 20:12:20.853063 32236 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1178.prototxt
I0428 20:12:20.853092 32236 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:12:20.853199 32236 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:12:20.853260 32236 layer_factory.hpp:77] Creating layer mnist
I0428 20:12:20.853317 32236 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:12:20.853329 32236 net.cpp:86] Creating Layer mnist
I0428 20:12:20.853333 32236 net.cpp:382] mnist -> data
I0428 20:12:20.853341 32236 net.cpp:382] mnist -> label
I0428 20:12:20.853420 32236 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:12:20.855360 32236 net.cpp:124] Setting up mnist
I0428 20:12:20.855372 32236 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:12:20.855392 32236 net.cpp:131] Top shape: 100 (100)
I0428 20:12:20.855396 32236 net.cpp:139] Memory required for data: 314000
I0428 20:12:20.855398 32236 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:12:20.855407 32236 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:12:20.855412 32236 net.cpp:408] label_mnist_1_split <- label
I0428 20:12:20.855417 32236 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:12:20.855423 32236 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:12:20.855509 32236 net.cpp:124] Setting up label_mnist_1_split
I0428 20:12:20.855516 32236 net.cpp:131] Top shape: 100 (100)
I0428 20:12:20.855520 32236 net.cpp:131] Top shape: 100 (100)
I0428 20:12:20.855522 32236 net.cpp:139] Memory required for data: 314800
I0428 20:12:20.855525 32236 layer_factory.hpp:77] Creating layer conv0
I0428 20:12:20.855551 32236 net.cpp:86] Creating Layer conv0
I0428 20:12:20.855553 32236 net.cpp:408] conv0 <- data
I0428 20:12:20.855558 32236 net.cpp:382] conv0 -> conv0
I0428 20:12:20.857290 32236 net.cpp:124] Setting up conv0
I0428 20:12:20.857302 32236 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:12:20.857321 32236 net.cpp:139] Memory required for data: 6074800
I0428 20:12:20.857331 32236 layer_factory.hpp:77] Creating layer pool0
I0428 20:12:20.857337 32236 net.cpp:86] Creating Layer pool0
I0428 20:12:20.857341 32236 net.cpp:408] pool0 <- conv0
I0428 20:12:20.857347 32236 net.cpp:382] pool0 -> pool0
I0428 20:12:20.857393 32236 net.cpp:124] Setting up pool0
I0428 20:12:20.857399 32236 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:12:20.857403 32236 net.cpp:139] Memory required for data: 7514800
I0428 20:12:20.857404 32236 layer_factory.hpp:77] Creating layer conv1
I0428 20:12:20.857414 32236 net.cpp:86] Creating Layer conv1
I0428 20:12:20.857416 32236 net.cpp:408] conv1 <- pool0
I0428 20:12:20.857421 32236 net.cpp:382] conv1 -> conv1
I0428 20:12:20.859369 32236 net.cpp:124] Setting up conv1
I0428 20:12:20.859398 32236 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:12:20.859402 32236 net.cpp:139] Memory required for data: 10074800
I0428 20:12:20.859411 32236 layer_factory.hpp:77] Creating layer pool1
I0428 20:12:20.859419 32236 net.cpp:86] Creating Layer pool1
I0428 20:12:20.859422 32236 net.cpp:408] pool1 <- conv1
I0428 20:12:20.859427 32236 net.cpp:382] pool1 -> pool1
I0428 20:12:20.859482 32236 net.cpp:124] Setting up pool1
I0428 20:12:20.859494 32236 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:12:20.859498 32236 net.cpp:139] Memory required for data: 10714800
I0428 20:12:20.859500 32236 layer_factory.hpp:77] Creating layer ip1
I0428 20:12:20.859508 32236 net.cpp:86] Creating Layer ip1
I0428 20:12:20.859510 32236 net.cpp:408] ip1 <- pool1
I0428 20:12:20.859515 32236 net.cpp:382] ip1 -> ip1
I0428 20:12:20.859884 32236 net.cpp:124] Setting up ip1
I0428 20:12:20.859891 32236 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:12:20.859910 32236 net.cpp:139] Memory required for data: 10724800
I0428 20:12:20.859916 32236 layer_factory.hpp:77] Creating layer relu1
I0428 20:12:20.859922 32236 net.cpp:86] Creating Layer relu1
I0428 20:12:20.859925 32236 net.cpp:408] relu1 <- ip1
I0428 20:12:20.859930 32236 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:12:20.860085 32236 net.cpp:124] Setting up relu1
I0428 20:12:20.860092 32236 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:12:20.860095 32236 net.cpp:139] Memory required for data: 10734800
I0428 20:12:20.860116 32236 layer_factory.hpp:77] Creating layer ip2
I0428 20:12:20.860123 32236 net.cpp:86] Creating Layer ip2
I0428 20:12:20.860127 32236 net.cpp:408] ip2 <- ip1
I0428 20:12:20.860133 32236 net.cpp:382] ip2 -> ip2
I0428 20:12:20.860246 32236 net.cpp:124] Setting up ip2
I0428 20:12:20.860254 32236 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:20.860256 32236 net.cpp:139] Memory required for data: 10738800
I0428 20:12:20.860261 32236 layer_factory.hpp:77] Creating layer relu2
I0428 20:12:20.860265 32236 net.cpp:86] Creating Layer relu2
I0428 20:12:20.860268 32236 net.cpp:408] relu2 <- ip2
I0428 20:12:20.860272 32236 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:12:20.860558 32236 net.cpp:124] Setting up relu2
I0428 20:12:20.860569 32236 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:20.860571 32236 net.cpp:139] Memory required for data: 10742800
I0428 20:12:20.860575 32236 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:12:20.860580 32236 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:12:20.860584 32236 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:12:20.860589 32236 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:12:20.860605 32236 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:12:20.860644 32236 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:12:20.860651 32236 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:20.860656 32236 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:12:20.860673 32236 net.cpp:139] Memory required for data: 10750800
I0428 20:12:20.860677 32236 layer_factory.hpp:77] Creating layer accuracy
I0428 20:12:20.860682 32236 net.cpp:86] Creating Layer accuracy
I0428 20:12:20.860684 32236 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:12:20.860689 32236 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:12:20.860693 32236 net.cpp:382] accuracy -> accuracy
I0428 20:12:20.860702 32236 net.cpp:124] Setting up accuracy
I0428 20:12:20.860704 32236 net.cpp:131] Top shape: (1)
I0428 20:12:20.860707 32236 net.cpp:139] Memory required for data: 10750804
I0428 20:12:20.860710 32236 layer_factory.hpp:77] Creating layer loss
I0428 20:12:20.860716 32236 net.cpp:86] Creating Layer loss
I0428 20:12:20.860719 32236 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:12:20.860723 32236 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:12:20.860728 32236 net.cpp:382] loss -> loss
I0428 20:12:20.860733 32236 layer_factory.hpp:77] Creating layer loss
I0428 20:12:20.861007 32236 net.cpp:124] Setting up loss
I0428 20:12:20.861017 32236 net.cpp:131] Top shape: (1)
I0428 20:12:20.861021 32236 net.cpp:134]     with loss weight 1
I0428 20:12:20.861027 32236 net.cpp:139] Memory required for data: 10750808
I0428 20:12:20.861030 32236 net.cpp:200] loss needs backward computation.
I0428 20:12:20.861034 32236 net.cpp:202] accuracy does not need backward computation.
I0428 20:12:20.861038 32236 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:12:20.861042 32236 net.cpp:200] relu2 needs backward computation.
I0428 20:12:20.861044 32236 net.cpp:200] ip2 needs backward computation.
I0428 20:12:20.861047 32236 net.cpp:200] relu1 needs backward computation.
I0428 20:12:20.861049 32236 net.cpp:200] ip1 needs backward computation.
I0428 20:12:20.861052 32236 net.cpp:200] pool1 needs backward computation.
I0428 20:12:20.861055 32236 net.cpp:200] conv1 needs backward computation.
I0428 20:12:20.861058 32236 net.cpp:200] pool0 needs backward computation.
I0428 20:12:20.861062 32236 net.cpp:200] conv0 needs backward computation.
I0428 20:12:20.861064 32236 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:12:20.861068 32236 net.cpp:202] mnist does not need backward computation.
I0428 20:12:20.861070 32236 net.cpp:244] This network produces output accuracy
I0428 20:12:20.861074 32236 net.cpp:244] This network produces output loss
I0428 20:12:20.861084 32236 net.cpp:257] Network initialization done.
I0428 20:12:20.861119 32236 solver.cpp:56] Solver scaffolding done.
I0428 20:12:20.861430 32236 caffe.cpp:248] Starting Optimization
I0428 20:12:20.861435 32236 solver.cpp:273] Solving LeNet
I0428 20:12:20.861438 32236 solver.cpp:274] Learning Rate Policy: inv
I0428 20:12:20.862363 32236 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:12:20.869272 32236 blocking_queue.cpp:49] Waiting for data
I0428 20:12:20.936049 32243 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:20.936885 32236 solver.cpp:398]     Test net output #0: accuracy = 0.0985
I0428 20:12:20.936919 32236 solver.cpp:398]     Test net output #1: loss = 2.31315 (* 1 = 2.31315 loss)
I0428 20:12:20.941606 32236 solver.cpp:219] Iteration 0 (-1.03136e-42 iter/s, 0.0801148s/100 iters), loss = 2.31405
I0428 20:12:20.941632 32236 solver.cpp:238]     Train net output #0: loss = 2.31405 (* 1 = 2.31405 loss)
I0428 20:12:20.941642 32236 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:12:21.097834 32236 solver.cpp:219] Iteration 100 (640.255 iter/s, 0.156188s/100 iters), loss = 0.92625
I0428 20:12:21.097875 32236 solver.cpp:238]     Train net output #0: loss = 0.92625 (* 1 = 0.92625 loss)
I0428 20:12:21.097882 32236 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:12:21.258854 32236 solver.cpp:219] Iteration 200 (621.188 iter/s, 0.160982s/100 iters), loss = 0.747463
I0428 20:12:21.258895 32236 solver.cpp:238]     Train net output #0: loss = 0.747463 (* 1 = 0.747463 loss)
I0428 20:12:21.258901 32236 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:12:21.416965 32236 solver.cpp:219] Iteration 300 (632.62 iter/s, 0.158073s/100 iters), loss = 0.753203
I0428 20:12:21.417007 32236 solver.cpp:238]     Train net output #0: loss = 0.753203 (* 1 = 0.753203 loss)
I0428 20:12:21.417014 32236 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:12:21.580818 32236 solver.cpp:219] Iteration 400 (610.481 iter/s, 0.163805s/100 iters), loss = 0.67054
I0428 20:12:21.580858 32236 solver.cpp:238]     Train net output #0: loss = 0.67054 (* 1 = 0.67054 loss)
I0428 20:12:21.580865 32236 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:12:21.744509 32236 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:12:21.811110 32243 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:21.813472 32236 solver.cpp:398]     Test net output #0: accuracy = 0.6718
I0428 20:12:21.813495 32236 solver.cpp:398]     Test net output #1: loss = 0.802771 (* 1 = 0.802771 loss)
I0428 20:12:21.815340 32236 solver.cpp:219] Iteration 500 (426.487 iter/s, 0.234474s/100 iters), loss = 0.806821
I0428 20:12:21.815366 32236 solver.cpp:238]     Train net output #0: loss = 0.806821 (* 1 = 0.806821 loss)
I0428 20:12:21.815372 32236 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:12:21.979554 32236 solver.cpp:219] Iteration 600 (609.099 iter/s, 0.164177s/100 iters), loss = 1.04661
I0428 20:12:21.979581 32236 solver.cpp:238]     Train net output #0: loss = 1.04661 (* 1 = 1.04661 loss)
I0428 20:12:21.979588 32236 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:12:22.137769 32236 solver.cpp:219] Iteration 700 (632.263 iter/s, 0.158162s/100 iters), loss = 0.733845
I0428 20:12:22.137811 32236 solver.cpp:238]     Train net output #0: loss = 0.733845 (* 1 = 0.733845 loss)
I0428 20:12:22.137818 32236 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:12:22.298126 32236 solver.cpp:219] Iteration 800 (623.766 iter/s, 0.160316s/100 iters), loss = 0.851837
I0428 20:12:22.298167 32236 solver.cpp:238]     Train net output #0: loss = 0.851837 (* 1 = 0.851837 loss)
I0428 20:12:22.298174 32236 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:12:22.460839 32236 solver.cpp:219] Iteration 900 (614.725 iter/s, 0.162674s/100 iters), loss = 0.760341
I0428 20:12:22.460880 32236 solver.cpp:238]     Train net output #0: loss = 0.760341 (* 1 = 0.760341 loss)
I0428 20:12:22.460903 32236 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:12:22.514052 32242 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:22.621145 32236 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:12:22.623877 32236 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:12:22.625273 32236 solver.cpp:311] Iteration 1000, loss = 0.761772
I0428 20:12:22.625290 32236 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:12:22.690366 32243 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:12:22.692656 32236 solver.cpp:398]     Test net output #0: accuracy = 0.6817
I0428 20:12:22.692690 32236 solver.cpp:398]     Test net output #1: loss = 0.765282 (* 1 = 0.765282 loss)
I0428 20:12:22.692695 32236 solver.cpp:316] Optimization Done.
I0428 20:12:22.692698 32236 caffe.cpp:259] Optimization Done.
