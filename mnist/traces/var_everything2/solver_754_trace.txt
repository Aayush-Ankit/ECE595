I0428 19:56:15.952764 28394 caffe.cpp:218] Using GPUs 0
I0428 19:56:15.985291 28394 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:16.451104 28394 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test754.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:16.451256 28394 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test754.prototxt
I0428 19:56:16.451750 28394 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:16.451772 28394 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:16.451892 28394 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:16.451998 28394 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:16.452137 28394 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:16.452168 28394 net.cpp:86] Creating Layer mnist
I0428 19:56:16.452178 28394 net.cpp:382] mnist -> data
I0428 19:56:16.452203 28394 net.cpp:382] mnist -> label
I0428 19:56:16.453611 28394 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:16.456002 28394 net.cpp:124] Setting up mnist
I0428 19:56:16.456034 28394 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:16.456042 28394 net.cpp:131] Top shape: 64 (64)
I0428 19:56:16.456043 28394 net.cpp:139] Memory required for data: 200960
I0428 19:56:16.456049 28394 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:16.456063 28394 net.cpp:86] Creating Layer conv0
I0428 19:56:16.456085 28394 net.cpp:408] conv0 <- data
I0428 19:56:16.456104 28394 net.cpp:382] conv0 -> conv0
I0428 19:56:16.680279 28394 net.cpp:124] Setting up conv0
I0428 19:56:16.680304 28394 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:16.680307 28394 net.cpp:139] Memory required for data: 1675520
I0428 19:56:16.680321 28394 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:16.680332 28394 net.cpp:86] Creating Layer pool0
I0428 19:56:16.680336 28394 net.cpp:408] pool0 <- conv0
I0428 19:56:16.680341 28394 net.cpp:382] pool0 -> pool0
I0428 19:56:16.680392 28394 net.cpp:124] Setting up pool0
I0428 19:56:16.680399 28394 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:16.680403 28394 net.cpp:139] Memory required for data: 2044160
I0428 19:56:16.680407 28394 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:16.680419 28394 net.cpp:86] Creating Layer conv1
I0428 19:56:16.680424 28394 net.cpp:408] conv1 <- pool0
I0428 19:56:16.680431 28394 net.cpp:382] conv1 -> conv1
I0428 19:56:16.682816 28394 net.cpp:124] Setting up conv1
I0428 19:56:16.682845 28394 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:16.682849 28394 net.cpp:139] Memory required for data: 2076928
I0428 19:56:16.682857 28394 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:16.682864 28394 net.cpp:86] Creating Layer pool1
I0428 19:56:16.682868 28394 net.cpp:408] pool1 <- conv1
I0428 19:56:16.682873 28394 net.cpp:382] pool1 -> pool1
I0428 19:56:16.682919 28394 net.cpp:124] Setting up pool1
I0428 19:56:16.682929 28394 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:16.682934 28394 net.cpp:139] Memory required for data: 2085120
I0428 19:56:16.682938 28394 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:16.682948 28394 net.cpp:86] Creating Layer ip1
I0428 19:56:16.682953 28394 net.cpp:408] ip1 <- pool1
I0428 19:56:16.682961 28394 net.cpp:382] ip1 -> ip1
I0428 19:56:16.683132 28394 net.cpp:124] Setting up ip1
I0428 19:56:16.683145 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.683148 28394 net.cpp:139] Memory required for data: 2087680
I0428 19:56:16.683161 28394 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:16.683167 28394 net.cpp:86] Creating Layer relu1
I0428 19:56:16.683173 28394 net.cpp:408] relu1 <- ip1
I0428 19:56:16.683179 28394 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:16.683428 28394 net.cpp:124] Setting up relu1
I0428 19:56:16.683439 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.683444 28394 net.cpp:139] Memory required for data: 2090240
I0428 19:56:16.683464 28394 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:16.683470 28394 net.cpp:86] Creating Layer ip2
I0428 19:56:16.683475 28394 net.cpp:408] ip2 <- ip1
I0428 19:56:16.683482 28394 net.cpp:382] ip2 -> ip2
I0428 19:56:16.683590 28394 net.cpp:124] Setting up ip2
I0428 19:56:16.683599 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.683604 28394 net.cpp:139] Memory required for data: 2092800
I0428 19:56:16.683610 28394 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:16.683619 28394 net.cpp:86] Creating Layer relu2
I0428 19:56:16.683640 28394 net.cpp:408] relu2 <- ip2
I0428 19:56:16.683646 28394 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:16.684722 28394 net.cpp:124] Setting up relu2
I0428 19:56:16.684753 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.684759 28394 net.cpp:139] Memory required for data: 2095360
I0428 19:56:16.684778 28394 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:16.684803 28394 net.cpp:86] Creating Layer ip3
I0428 19:56:16.684814 28394 net.cpp:408] ip3 <- ip2
I0428 19:56:16.684839 28394 net.cpp:382] ip3 -> ip3
I0428 19:56:16.685012 28394 net.cpp:124] Setting up ip3
I0428 19:56:16.685025 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.685031 28394 net.cpp:139] Memory required for data: 2097920
I0428 19:56:16.685045 28394 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:16.685052 28394 net.cpp:86] Creating Layer relu3
I0428 19:56:16.685058 28394 net.cpp:408] relu3 <- ip3
I0428 19:56:16.685065 28394 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:16.685407 28394 net.cpp:124] Setting up relu3
I0428 19:56:16.685436 28394 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:16.685441 28394 net.cpp:139] Memory required for data: 2100480
I0428 19:56:16.685447 28394 layer_factory.hpp:77] Creating layer loss
I0428 19:56:16.685456 28394 net.cpp:86] Creating Layer loss
I0428 19:56:16.685461 28394 net.cpp:408] loss <- ip3
I0428 19:56:16.685467 28394 net.cpp:408] loss <- label
I0428 19:56:16.685475 28394 net.cpp:382] loss -> loss
I0428 19:56:16.685500 28394 layer_factory.hpp:77] Creating layer loss
I0428 19:56:16.685852 28394 net.cpp:124] Setting up loss
I0428 19:56:16.685863 28394 net.cpp:131] Top shape: (1)
I0428 19:56:16.685883 28394 net.cpp:134]     with loss weight 1
I0428 19:56:16.685916 28394 net.cpp:139] Memory required for data: 2100484
I0428 19:56:16.685921 28394 net.cpp:200] loss needs backward computation.
I0428 19:56:16.685927 28394 net.cpp:200] relu3 needs backward computation.
I0428 19:56:16.685931 28394 net.cpp:200] ip3 needs backward computation.
I0428 19:56:16.685936 28394 net.cpp:200] relu2 needs backward computation.
I0428 19:56:16.685940 28394 net.cpp:200] ip2 needs backward computation.
I0428 19:56:16.685945 28394 net.cpp:200] relu1 needs backward computation.
I0428 19:56:16.685950 28394 net.cpp:200] ip1 needs backward computation.
I0428 19:56:16.685955 28394 net.cpp:200] pool1 needs backward computation.
I0428 19:56:16.685959 28394 net.cpp:200] conv1 needs backward computation.
I0428 19:56:16.685964 28394 net.cpp:200] pool0 needs backward computation.
I0428 19:56:16.685969 28394 net.cpp:200] conv0 needs backward computation.
I0428 19:56:16.685974 28394 net.cpp:202] mnist does not need backward computation.
I0428 19:56:16.685979 28394 net.cpp:244] This network produces output loss
I0428 19:56:16.685992 28394 net.cpp:257] Network initialization done.
I0428 19:56:16.686543 28394 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test754.prototxt
I0428 19:56:16.686600 28394 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:16.686764 28394 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:56:16.686889 28394 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:16.686944 28394 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:16.686964 28394 net.cpp:86] Creating Layer mnist
I0428 19:56:16.686971 28394 net.cpp:382] mnist -> data
I0428 19:56:16.686983 28394 net.cpp:382] mnist -> label
I0428 19:56:16.687098 28394 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:16.689873 28394 net.cpp:124] Setting up mnist
I0428 19:56:16.689901 28394 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:16.689906 28394 net.cpp:131] Top shape: 100 (100)
I0428 19:56:16.689908 28394 net.cpp:139] Memory required for data: 314000
I0428 19:56:16.689913 28394 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:16.689918 28394 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:16.689921 28394 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:16.689925 28394 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:16.689934 28394 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:16.690002 28394 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:16.690012 28394 net.cpp:131] Top shape: 100 (100)
I0428 19:56:16.690018 28394 net.cpp:131] Top shape: 100 (100)
I0428 19:56:16.690023 28394 net.cpp:139] Memory required for data: 314800
I0428 19:56:16.690027 28394 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:16.690042 28394 net.cpp:86] Creating Layer conv0
I0428 19:56:16.690047 28394 net.cpp:408] conv0 <- data
I0428 19:56:16.690054 28394 net.cpp:382] conv0 -> conv0
I0428 19:56:16.692243 28394 net.cpp:124] Setting up conv0
I0428 19:56:16.692286 28394 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:16.692289 28394 net.cpp:139] Memory required for data: 2618800
I0428 19:56:16.692297 28394 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:16.692306 28394 net.cpp:86] Creating Layer pool0
I0428 19:56:16.692308 28394 net.cpp:408] pool0 <- conv0
I0428 19:56:16.692313 28394 net.cpp:382] pool0 -> pool0
I0428 19:56:16.692363 28394 net.cpp:124] Setting up pool0
I0428 19:56:16.692371 28394 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:16.692376 28394 net.cpp:139] Memory required for data: 3194800
I0428 19:56:16.692381 28394 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:16.692395 28394 net.cpp:86] Creating Layer conv1
I0428 19:56:16.692400 28394 net.cpp:408] conv1 <- pool0
I0428 19:56:16.692409 28394 net.cpp:382] conv1 -> conv1
I0428 19:56:16.695163 28394 net.cpp:124] Setting up conv1
I0428 19:56:16.695191 28394 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:16.695195 28394 net.cpp:139] Memory required for data: 3246000
I0428 19:56:16.695204 28394 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:16.695212 28394 net.cpp:86] Creating Layer pool1
I0428 19:56:16.695216 28394 net.cpp:408] pool1 <- conv1
I0428 19:56:16.695221 28394 net.cpp:382] pool1 -> pool1
I0428 19:56:16.695288 28394 net.cpp:124] Setting up pool1
I0428 19:56:16.695312 28394 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:16.695317 28394 net.cpp:139] Memory required for data: 3258800
I0428 19:56:16.695322 28394 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:16.695340 28394 net.cpp:86] Creating Layer ip1
I0428 19:56:16.695359 28394 net.cpp:408] ip1 <- pool1
I0428 19:56:16.695369 28394 net.cpp:382] ip1 -> ip1
I0428 19:56:16.695605 28394 net.cpp:124] Setting up ip1
I0428 19:56:16.695617 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.695634 28394 net.cpp:139] Memory required for data: 3262800
I0428 19:56:16.695646 28394 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:16.695653 28394 net.cpp:86] Creating Layer relu1
I0428 19:56:16.695658 28394 net.cpp:408] relu1 <- ip1
I0428 19:56:16.695667 28394 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:16.695900 28394 net.cpp:124] Setting up relu1
I0428 19:56:16.695912 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.695917 28394 net.cpp:139] Memory required for data: 3266800
I0428 19:56:16.695922 28394 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:16.695935 28394 net.cpp:86] Creating Layer ip2
I0428 19:56:16.695940 28394 net.cpp:408] ip2 <- ip1
I0428 19:56:16.695946 28394 net.cpp:382] ip2 -> ip2
I0428 19:56:16.696082 28394 net.cpp:124] Setting up ip2
I0428 19:56:16.696094 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.696099 28394 net.cpp:139] Memory required for data: 3270800
I0428 19:56:16.696107 28394 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:16.696115 28394 net.cpp:86] Creating Layer relu2
I0428 19:56:16.696120 28394 net.cpp:408] relu2 <- ip2
I0428 19:56:16.696127 28394 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:16.696362 28394 net.cpp:124] Setting up relu2
I0428 19:56:16.696375 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.696380 28394 net.cpp:139] Memory required for data: 3274800
I0428 19:56:16.696385 28394 layer_factory.hpp:77] Creating layer ip3
I0428 19:56:16.696411 28394 net.cpp:86] Creating Layer ip3
I0428 19:56:16.696421 28394 net.cpp:408] ip3 <- ip2
I0428 19:56:16.696430 28394 net.cpp:382] ip3 -> ip3
I0428 19:56:16.696633 28394 net.cpp:124] Setting up ip3
I0428 19:56:16.696645 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.696650 28394 net.cpp:139] Memory required for data: 3278800
I0428 19:56:16.696661 28394 layer_factory.hpp:77] Creating layer relu3
I0428 19:56:16.696671 28394 net.cpp:86] Creating Layer relu3
I0428 19:56:16.696676 28394 net.cpp:408] relu3 <- ip3
I0428 19:56:16.696682 28394 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:56:16.698010 28394 net.cpp:124] Setting up relu3
I0428 19:56:16.698027 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.698032 28394 net.cpp:139] Memory required for data: 3282800
I0428 19:56:16.698037 28394 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:56:16.698047 28394 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:56:16.698052 28394 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:56:16.698060 28394 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:56:16.698070 28394 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:56:16.698119 28394 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:56:16.698129 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.698151 28394 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:16.698155 28394 net.cpp:139] Memory required for data: 3290800
I0428 19:56:16.698160 28394 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:16.698174 28394 net.cpp:86] Creating Layer accuracy
I0428 19:56:16.698180 28394 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:56:16.698186 28394 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:16.698194 28394 net.cpp:382] accuracy -> accuracy
I0428 19:56:16.698207 28394 net.cpp:124] Setting up accuracy
I0428 19:56:16.698215 28394 net.cpp:131] Top shape: (1)
I0428 19:56:16.698220 28394 net.cpp:139] Memory required for data: 3290804
I0428 19:56:16.698223 28394 layer_factory.hpp:77] Creating layer loss
I0428 19:56:16.698231 28394 net.cpp:86] Creating Layer loss
I0428 19:56:16.698236 28394 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:56:16.698242 28394 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:16.698251 28394 net.cpp:382] loss -> loss
I0428 19:56:16.698261 28394 layer_factory.hpp:77] Creating layer loss
I0428 19:56:16.698673 28394 net.cpp:124] Setting up loss
I0428 19:56:16.698688 28394 net.cpp:131] Top shape: (1)
I0428 19:56:16.698693 28394 net.cpp:134]     with loss weight 1
I0428 19:56:16.698703 28394 net.cpp:139] Memory required for data: 3290808
I0428 19:56:16.698751 28394 net.cpp:200] loss needs backward computation.
I0428 19:56:16.698758 28394 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:16.698778 28394 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:56:16.698784 28394 net.cpp:200] relu3 needs backward computation.
I0428 19:56:16.698788 28394 net.cpp:200] ip3 needs backward computation.
I0428 19:56:16.698794 28394 net.cpp:200] relu2 needs backward computation.
I0428 19:56:16.698798 28394 net.cpp:200] ip2 needs backward computation.
I0428 19:56:16.698804 28394 net.cpp:200] relu1 needs backward computation.
I0428 19:56:16.698808 28394 net.cpp:200] ip1 needs backward computation.
I0428 19:56:16.698813 28394 net.cpp:200] pool1 needs backward computation.
I0428 19:56:16.698818 28394 net.cpp:200] conv1 needs backward computation.
I0428 19:56:16.698823 28394 net.cpp:200] pool0 needs backward computation.
I0428 19:56:16.698828 28394 net.cpp:200] conv0 needs backward computation.
I0428 19:56:16.698834 28394 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:16.698840 28394 net.cpp:202] mnist does not need backward computation.
I0428 19:56:16.698844 28394 net.cpp:244] This network produces output accuracy
I0428 19:56:16.698849 28394 net.cpp:244] This network produces output loss
I0428 19:56:16.698866 28394 net.cpp:257] Network initialization done.
I0428 19:56:16.698925 28394 solver.cpp:56] Solver scaffolding done.
I0428 19:56:16.699409 28394 caffe.cpp:248] Starting Optimization
I0428 19:56:16.699434 28394 solver.cpp:273] Solving LeNet
I0428 19:56:16.699439 28394 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:16.700691 28394 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:16.704699 28394 blocking_queue.cpp:49] Waiting for data
I0428 19:56:16.775112 28401 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:16.775701 28394 solver.cpp:398]     Test net output #0: accuracy = 0.0984
I0428 19:56:16.775728 28394 solver.cpp:398]     Test net output #1: loss = 2.30689 (* 1 = 2.30689 loss)
I0428 19:56:16.778498 28394 solver.cpp:219] Iteration 0 (0 iter/s, 0.0790315s/100 iters), loss = 2.30007
I0428 19:56:16.778522 28394 solver.cpp:238]     Train net output #0: loss = 2.30007 (* 1 = 2.30007 loss)
I0428 19:56:16.778537 28394 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:16.859570 28394 solver.cpp:219] Iteration 100 (1234.03 iter/s, 0.0810353s/100 iters), loss = 1.71824
I0428 19:56:16.859593 28394 solver.cpp:238]     Train net output #0: loss = 1.71824 (* 1 = 1.71824 loss)
I0428 19:56:16.859599 28394 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:16.935323 28394 solver.cpp:219] Iteration 200 (1320.64 iter/s, 0.0757209s/100 iters), loss = 1.59139
I0428 19:56:16.935346 28394 solver.cpp:238]     Train net output #0: loss = 1.59139 (* 1 = 1.59139 loss)
I0428 19:56:16.935354 28394 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:17.008066 28394 solver.cpp:219] Iteration 300 (1375.3 iter/s, 0.0727112s/100 iters), loss = 1.30713
I0428 19:56:17.008090 28394 solver.cpp:238]     Train net output #0: loss = 1.30713 (* 1 = 1.30713 loss)
I0428 19:56:17.008098 28394 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:17.082429 28394 solver.cpp:219] Iteration 400 (1345.35 iter/s, 0.0743301s/100 iters), loss = 1.00079
I0428 19:56:17.082454 28394 solver.cpp:238]     Train net output #0: loss = 1.00079 (* 1 = 1.00079 loss)
I0428 19:56:17.082463 28394 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:17.154199 28394 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:17.230808 28401 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:17.231427 28394 solver.cpp:398]     Test net output #0: accuracy = 0.6452
I0428 19:56:17.231452 28394 solver.cpp:398]     Test net output #1: loss = 0.965213 (* 1 = 0.965213 loss)
I0428 19:56:17.232427 28394 solver.cpp:219] Iteration 500 (666.855 iter/s, 0.149958s/100 iters), loss = 0.965482
I0428 19:56:17.232488 28394 solver.cpp:238]     Train net output #0: loss = 0.965482 (* 1 = 0.965482 loss)
I0428 19:56:17.232533 28394 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:17.304903 28394 solver.cpp:219] Iteration 600 (1381.03 iter/s, 0.0724095s/100 iters), loss = 0.760133
I0428 19:56:17.304926 28394 solver.cpp:238]     Train net output #0: loss = 0.760133 (* 1 = 0.760133 loss)
I0428 19:56:17.304935 28394 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:17.377277 28394 solver.cpp:219] Iteration 700 (1382.31 iter/s, 0.0723425s/100 iters), loss = 0.808971
I0428 19:56:17.377300 28394 solver.cpp:238]     Train net output #0: loss = 0.808971 (* 1 = 0.808971 loss)
I0428 19:56:17.377307 28394 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:17.450531 28394 solver.cpp:219] Iteration 800 (1365.71 iter/s, 0.0732221s/100 iters), loss = 1.13382
I0428 19:56:17.450553 28394 solver.cpp:238]     Train net output #0: loss = 1.13382 (* 1 = 1.13382 loss)
I0428 19:56:17.450562 28394 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:17.523711 28394 solver.cpp:219] Iteration 900 (1367.08 iter/s, 0.0731484s/100 iters), loss = 0.924164
I0428 19:56:17.523735 28394 solver.cpp:238]     Train net output #0: loss = 0.924164 (* 1 = 0.924164 loss)
I0428 19:56:17.523741 28394 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:17.549885 28400 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:17.599738 28394 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:17.600641 28394 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:17.601469 28394 solver.cpp:311] Iteration 1000, loss = 0.595861
I0428 19:56:17.601516 28394 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:17.674625 28401 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:17.675216 28394 solver.cpp:398]     Test net output #0: accuracy = 0.8125
I0428 19:56:17.675252 28394 solver.cpp:398]     Test net output #1: loss = 0.629975 (* 1 = 0.629975 loss)
I0428 19:56:17.675261 28394 solver.cpp:316] Optimization Done.
I0428 19:56:17.675267 28394 caffe.cpp:259] Optimization Done.
