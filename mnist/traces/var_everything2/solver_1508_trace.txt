I0428 20:28:36.682708  3382 caffe.cpp:218] Using GPUs 0
I0428 20:28:36.725944  3382 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:28:37.250450  3382 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1508.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:28:37.250594  3382 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1508.prototxt
I0428 20:28:37.251013  3382 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:28:37.251032  3382 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:28:37.251137  3382 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:37.251217  3382 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:37.251319  3382 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:28:37.251345  3382 net.cpp:86] Creating Layer mnist
I0428 20:28:37.251355  3382 net.cpp:382] mnist -> data
I0428 20:28:37.251380  3382 net.cpp:382] mnist -> label
I0428 20:28:37.252468  3382 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:28:37.254930  3382 net.cpp:124] Setting up mnist
I0428 20:28:37.254951  3382 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:28:37.254956  3382 net.cpp:131] Top shape: 64 (64)
I0428 20:28:37.254961  3382 net.cpp:139] Memory required for data: 200960
I0428 20:28:37.254968  3382 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:37.254986  3382 net.cpp:86] Creating Layer conv0
I0428 20:28:37.255008  3382 net.cpp:408] conv0 <- data
I0428 20:28:37.255020  3382 net.cpp:382] conv0 -> conv0
I0428 20:28:37.545584  3382 net.cpp:124] Setting up conv0
I0428 20:28:37.545614  3382 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:28:37.545619  3382 net.cpp:139] Memory required for data: 14946560
I0428 20:28:37.545635  3382 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:37.545648  3382 net.cpp:86] Creating Layer pool0
I0428 20:28:37.545653  3382 net.cpp:408] pool0 <- conv0
I0428 20:28:37.545660  3382 net.cpp:382] pool0 -> pool0
I0428 20:28:37.545711  3382 net.cpp:124] Setting up pool0
I0428 20:28:37.545719  3382 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:28:37.545723  3382 net.cpp:139] Memory required for data: 18632960
I0428 20:28:37.545727  3382 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:37.545738  3382 net.cpp:86] Creating Layer conv1
I0428 20:28:37.545745  3382 net.cpp:408] conv1 <- pool0
I0428 20:28:37.545752  3382 net.cpp:382] conv1 -> conv1
I0428 20:28:37.548606  3382 net.cpp:124] Setting up conv1
I0428 20:28:37.548622  3382 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:28:37.548626  3382 net.cpp:139] Memory required for data: 18714880
I0428 20:28:37.548637  3382 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:37.548646  3382 net.cpp:86] Creating Layer pool1
I0428 20:28:37.548650  3382 net.cpp:408] pool1 <- conv1
I0428 20:28:37.548656  3382 net.cpp:382] pool1 -> pool1
I0428 20:28:37.548696  3382 net.cpp:124] Setting up pool1
I0428 20:28:37.548703  3382 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:28:37.548707  3382 net.cpp:139] Memory required for data: 18735360
I0428 20:28:37.548712  3382 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:37.548719  3382 net.cpp:86] Creating Layer ip1
I0428 20:28:37.548723  3382 net.cpp:408] ip1 <- pool1
I0428 20:28:37.548729  3382 net.cpp:382] ip1 -> ip1
I0428 20:28:37.548862  3382 net.cpp:124] Setting up ip1
I0428 20:28:37.548871  3382 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:37.548876  3382 net.cpp:139] Memory required for data: 18741760
I0428 20:28:37.548883  3382 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:37.548892  3382 net.cpp:86] Creating Layer relu1
I0428 20:28:37.548897  3382 net.cpp:408] relu1 <- ip1
I0428 20:28:37.548902  3382 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:37.549077  3382 net.cpp:124] Setting up relu1
I0428 20:28:37.549087  3382 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:37.549090  3382 net.cpp:139] Memory required for data: 18748160
I0428 20:28:37.549094  3382 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:37.549101  3382 net.cpp:86] Creating Layer ip2
I0428 20:28:37.549105  3382 net.cpp:408] ip2 <- ip1
I0428 20:28:37.549111  3382 net.cpp:382] ip2 -> ip2
I0428 20:28:37.549212  3382 net.cpp:124] Setting up ip2
I0428 20:28:37.549221  3382 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:37.549223  3382 net.cpp:139] Memory required for data: 18754560
I0428 20:28:37.549230  3382 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:37.549240  3382 net.cpp:86] Creating Layer relu2
I0428 20:28:37.549243  3382 net.cpp:408] relu2 <- ip2
I0428 20:28:37.549248  3382 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:37.550002  3382 net.cpp:124] Setting up relu2
I0428 20:28:37.550016  3382 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:28:37.550020  3382 net.cpp:139] Memory required for data: 18760960
I0428 20:28:37.550025  3382 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:37.550034  3382 net.cpp:86] Creating Layer ip3
I0428 20:28:37.550037  3382 net.cpp:408] ip3 <- ip2
I0428 20:28:37.550043  3382 net.cpp:382] ip3 -> ip3
I0428 20:28:37.550148  3382 net.cpp:124] Setting up ip3
I0428 20:28:37.550156  3382 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:37.550159  3382 net.cpp:139] Memory required for data: 18763520
I0428 20:28:37.550169  3382 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:37.550179  3382 net.cpp:86] Creating Layer relu3
I0428 20:28:37.550182  3382 net.cpp:408] relu3 <- ip3
I0428 20:28:37.550186  3382 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:37.550361  3382 net.cpp:124] Setting up relu3
I0428 20:28:37.550370  3382 net.cpp:131] Top shape: 64 10 (640)
I0428 20:28:37.550374  3382 net.cpp:139] Memory required for data: 18766080
I0428 20:28:37.550379  3382 layer_factory.hpp:77] Creating layer loss
I0428 20:28:37.550385  3382 net.cpp:86] Creating Layer loss
I0428 20:28:37.550389  3382 net.cpp:408] loss <- ip3
I0428 20:28:37.550393  3382 net.cpp:408] loss <- label
I0428 20:28:37.550400  3382 net.cpp:382] loss -> loss
I0428 20:28:37.550418  3382 layer_factory.hpp:77] Creating layer loss
I0428 20:28:37.550662  3382 net.cpp:124] Setting up loss
I0428 20:28:37.550671  3382 net.cpp:131] Top shape: (1)
I0428 20:28:37.550675  3382 net.cpp:134]     with loss weight 1
I0428 20:28:37.550690  3382 net.cpp:139] Memory required for data: 18766084
I0428 20:28:37.550695  3382 net.cpp:200] loss needs backward computation.
I0428 20:28:37.550699  3382 net.cpp:200] relu3 needs backward computation.
I0428 20:28:37.550704  3382 net.cpp:200] ip3 needs backward computation.
I0428 20:28:37.550707  3382 net.cpp:200] relu2 needs backward computation.
I0428 20:28:37.550710  3382 net.cpp:200] ip2 needs backward computation.
I0428 20:28:37.550714  3382 net.cpp:200] relu1 needs backward computation.
I0428 20:28:37.550719  3382 net.cpp:200] ip1 needs backward computation.
I0428 20:28:37.550721  3382 net.cpp:200] pool1 needs backward computation.
I0428 20:28:37.550725  3382 net.cpp:200] conv1 needs backward computation.
I0428 20:28:37.550729  3382 net.cpp:200] pool0 needs backward computation.
I0428 20:28:37.550734  3382 net.cpp:200] conv0 needs backward computation.
I0428 20:28:37.550737  3382 net.cpp:202] mnist does not need backward computation.
I0428 20:28:37.550741  3382 net.cpp:244] This network produces output loss
I0428 20:28:37.550751  3382 net.cpp:257] Network initialization done.
I0428 20:28:37.551090  3382 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1508.prototxt
I0428 20:28:37.551120  3382 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:28:37.551216  3382 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:28:37.551298  3382 layer_factory.hpp:77] Creating layer mnist
I0428 20:28:37.551345  3382 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:28:37.551358  3382 net.cpp:86] Creating Layer mnist
I0428 20:28:37.551364  3382 net.cpp:382] mnist -> data
I0428 20:28:37.551373  3382 net.cpp:382] mnist -> label
I0428 20:28:37.551461  3382 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:28:37.553632  3382 net.cpp:124] Setting up mnist
I0428 20:28:37.553647  3382 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:28:37.553653  3382 net.cpp:131] Top shape: 100 (100)
I0428 20:28:37.553655  3382 net.cpp:139] Memory required for data: 314000
I0428 20:28:37.553659  3382 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:28:37.553670  3382 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:28:37.553674  3382 net.cpp:408] label_mnist_1_split <- label
I0428 20:28:37.553681  3382 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:28:37.553689  3382 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:28:37.553738  3382 net.cpp:124] Setting up label_mnist_1_split
I0428 20:28:37.553745  3382 net.cpp:131] Top shape: 100 (100)
I0428 20:28:37.553750  3382 net.cpp:131] Top shape: 100 (100)
I0428 20:28:37.553752  3382 net.cpp:139] Memory required for data: 314800
I0428 20:28:37.553755  3382 layer_factory.hpp:77] Creating layer conv0
I0428 20:28:37.553764  3382 net.cpp:86] Creating Layer conv0
I0428 20:28:37.553768  3382 net.cpp:408] conv0 <- data
I0428 20:28:37.553773  3382 net.cpp:382] conv0 -> conv0
I0428 20:28:37.555518  3382 net.cpp:124] Setting up conv0
I0428 20:28:37.555554  3382 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:28:37.555558  3382 net.cpp:139] Memory required for data: 23354800
I0428 20:28:37.555583  3382 layer_factory.hpp:77] Creating layer pool0
I0428 20:28:37.555591  3382 net.cpp:86] Creating Layer pool0
I0428 20:28:37.555595  3382 net.cpp:408] pool0 <- conv0
I0428 20:28:37.555601  3382 net.cpp:382] pool0 -> pool0
I0428 20:28:37.555654  3382 net.cpp:124] Setting up pool0
I0428 20:28:37.555661  3382 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:28:37.555665  3382 net.cpp:139] Memory required for data: 29114800
I0428 20:28:37.555668  3382 layer_factory.hpp:77] Creating layer conv1
I0428 20:28:37.555677  3382 net.cpp:86] Creating Layer conv1
I0428 20:28:37.555681  3382 net.cpp:408] conv1 <- pool0
I0428 20:28:37.555686  3382 net.cpp:382] conv1 -> conv1
I0428 20:28:37.557296  3382 net.cpp:124] Setting up conv1
I0428 20:28:37.557310  3382 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:28:37.557314  3382 net.cpp:139] Memory required for data: 29242800
I0428 20:28:37.557323  3382 layer_factory.hpp:77] Creating layer pool1
I0428 20:28:37.557332  3382 net.cpp:86] Creating Layer pool1
I0428 20:28:37.557343  3382 net.cpp:408] pool1 <- conv1
I0428 20:28:37.557350  3382 net.cpp:382] pool1 -> pool1
I0428 20:28:37.557390  3382 net.cpp:124] Setting up pool1
I0428 20:28:37.557400  3382 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:28:37.557404  3382 net.cpp:139] Memory required for data: 29274800
I0428 20:28:37.557407  3382 layer_factory.hpp:77] Creating layer ip1
I0428 20:28:37.557413  3382 net.cpp:86] Creating Layer ip1
I0428 20:28:37.557417  3382 net.cpp:408] ip1 <- pool1
I0428 20:28:37.557423  3382 net.cpp:382] ip1 -> ip1
I0428 20:28:37.557557  3382 net.cpp:124] Setting up ip1
I0428 20:28:37.557565  3382 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:37.557580  3382 net.cpp:139] Memory required for data: 29284800
I0428 20:28:37.557590  3382 layer_factory.hpp:77] Creating layer relu1
I0428 20:28:37.557595  3382 net.cpp:86] Creating Layer relu1
I0428 20:28:37.557600  3382 net.cpp:408] relu1 <- ip1
I0428 20:28:37.557605  3382 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:28:37.557799  3382 net.cpp:124] Setting up relu1
I0428 20:28:37.557809  3382 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:37.557813  3382 net.cpp:139] Memory required for data: 29294800
I0428 20:28:37.557817  3382 layer_factory.hpp:77] Creating layer ip2
I0428 20:28:37.557832  3382 net.cpp:86] Creating Layer ip2
I0428 20:28:37.557835  3382 net.cpp:408] ip2 <- ip1
I0428 20:28:37.557842  3382 net.cpp:382] ip2 -> ip2
I0428 20:28:37.557950  3382 net.cpp:124] Setting up ip2
I0428 20:28:37.557957  3382 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:37.557960  3382 net.cpp:139] Memory required for data: 29304800
I0428 20:28:37.557966  3382 layer_factory.hpp:77] Creating layer relu2
I0428 20:28:37.557972  3382 net.cpp:86] Creating Layer relu2
I0428 20:28:37.557976  3382 net.cpp:408] relu2 <- ip2
I0428 20:28:37.557981  3382 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:28:37.558214  3382 net.cpp:124] Setting up relu2
I0428 20:28:37.558223  3382 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:28:37.558226  3382 net.cpp:139] Memory required for data: 29314800
I0428 20:28:37.558230  3382 layer_factory.hpp:77] Creating layer ip3
I0428 20:28:37.558236  3382 net.cpp:86] Creating Layer ip3
I0428 20:28:37.558240  3382 net.cpp:408] ip3 <- ip2
I0428 20:28:37.558245  3382 net.cpp:382] ip3 -> ip3
I0428 20:28:37.558367  3382 net.cpp:124] Setting up ip3
I0428 20:28:37.558374  3382 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:37.558377  3382 net.cpp:139] Memory required for data: 29318800
I0428 20:28:37.558393  3382 layer_factory.hpp:77] Creating layer relu3
I0428 20:28:37.558398  3382 net.cpp:86] Creating Layer relu3
I0428 20:28:37.558403  3382 net.cpp:408] relu3 <- ip3
I0428 20:28:37.558406  3382 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:28:37.559218  3382 net.cpp:124] Setting up relu3
I0428 20:28:37.559231  3382 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:37.559233  3382 net.cpp:139] Memory required for data: 29322800
I0428 20:28:37.559237  3382 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:28:37.559244  3382 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:28:37.559248  3382 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:28:37.559254  3382 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:28:37.559260  3382 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:28:37.559305  3382 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:28:37.559314  3382 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:37.559317  3382 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:28:37.559320  3382 net.cpp:139] Memory required for data: 29330800
I0428 20:28:37.559324  3382 layer_factory.hpp:77] Creating layer accuracy
I0428 20:28:37.559330  3382 net.cpp:86] Creating Layer accuracy
I0428 20:28:37.559334  3382 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:28:37.559337  3382 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:28:37.559342  3382 net.cpp:382] accuracy -> accuracy
I0428 20:28:37.559350  3382 net.cpp:124] Setting up accuracy
I0428 20:28:37.559355  3382 net.cpp:131] Top shape: (1)
I0428 20:28:37.559357  3382 net.cpp:139] Memory required for data: 29330804
I0428 20:28:37.559360  3382 layer_factory.hpp:77] Creating layer loss
I0428 20:28:37.559365  3382 net.cpp:86] Creating Layer loss
I0428 20:28:37.559370  3382 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:28:37.559373  3382 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:28:37.559379  3382 net.cpp:382] loss -> loss
I0428 20:28:37.559386  3382 layer_factory.hpp:77] Creating layer loss
I0428 20:28:37.559628  3382 net.cpp:124] Setting up loss
I0428 20:28:37.559636  3382 net.cpp:131] Top shape: (1)
I0428 20:28:37.559640  3382 net.cpp:134]     with loss weight 1
I0428 20:28:37.559655  3382 net.cpp:139] Memory required for data: 29330808
I0428 20:28:37.559660  3382 net.cpp:200] loss needs backward computation.
I0428 20:28:37.559664  3382 net.cpp:202] accuracy does not need backward computation.
I0428 20:28:37.559669  3382 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:28:37.559671  3382 net.cpp:200] relu3 needs backward computation.
I0428 20:28:37.559674  3382 net.cpp:200] ip3 needs backward computation.
I0428 20:28:37.559679  3382 net.cpp:200] relu2 needs backward computation.
I0428 20:28:37.559681  3382 net.cpp:200] ip2 needs backward computation.
I0428 20:28:37.559684  3382 net.cpp:200] relu1 needs backward computation.
I0428 20:28:37.559687  3382 net.cpp:200] ip1 needs backward computation.
I0428 20:28:37.559690  3382 net.cpp:200] pool1 needs backward computation.
I0428 20:28:37.559695  3382 net.cpp:200] conv1 needs backward computation.
I0428 20:28:37.559697  3382 net.cpp:200] pool0 needs backward computation.
I0428 20:28:37.559700  3382 net.cpp:200] conv0 needs backward computation.
I0428 20:28:37.559705  3382 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:28:37.559708  3382 net.cpp:202] mnist does not need backward computation.
I0428 20:28:37.559711  3382 net.cpp:244] This network produces output accuracy
I0428 20:28:37.559725  3382 net.cpp:244] This network produces output loss
I0428 20:28:37.559741  3382 net.cpp:257] Network initialization done.
I0428 20:28:37.559789  3382 solver.cpp:56] Solver scaffolding done.
I0428 20:28:37.560149  3382 caffe.cpp:248] Starting Optimization
I0428 20:28:37.560156  3382 solver.cpp:273] Solving LeNet
I0428 20:28:37.560159  3382 solver.cpp:274] Learning Rate Policy: inv
I0428 20:28:37.560999  3382 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:28:37.655755  3389 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:37.658179  3382 solver.cpp:398]     Test net output #0: accuracy = 0.0978
I0428 20:28:37.658200  3382 solver.cpp:398]     Test net output #1: loss = 2.31532 (* 1 = 2.31532 loss)
I0428 20:28:37.662637  3382 solver.cpp:219] Iteration 0 (-8.07148e-43 iter/s, 0.102451s/100 iters), loss = 2.33657
I0428 20:28:37.662678  3382 solver.cpp:238]     Train net output #0: loss = 2.33657 (* 1 = 2.33657 loss)
I0428 20:28:37.662689  3382 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:28:37.880046  3382 solver.cpp:219] Iteration 100 (460.068 iter/s, 0.217359s/100 iters), loss = 1.00356
I0428 20:28:37.880095  3382 solver.cpp:238]     Train net output #0: loss = 1.00356 (* 1 = 1.00356 loss)
I0428 20:28:37.880107  3382 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:28:38.102458  3382 solver.cpp:219] Iteration 200 (449.747 iter/s, 0.222347s/100 iters), loss = 0.638682
I0428 20:28:38.102504  3382 solver.cpp:238]     Train net output #0: loss = 0.638682 (* 1 = 0.638682 loss)
I0428 20:28:38.102516  3382 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:28:38.327013  3382 solver.cpp:219] Iteration 300 (445.451 iter/s, 0.224492s/100 iters), loss = 0.904229
I0428 20:28:38.327060  3382 solver.cpp:238]     Train net output #0: loss = 0.904229 (* 1 = 0.904229 loss)
I0428 20:28:38.327074  3382 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:28:38.549669  3382 solver.cpp:219] Iteration 400 (449.25 iter/s, 0.222593s/100 iters), loss = 0.479054
I0428 20:28:38.549715  3382 solver.cpp:238]     Train net output #0: loss = 0.479054 (* 1 = 0.479054 loss)
I0428 20:28:38.549728  3382 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:28:38.763970  3382 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:28:38.865890  3389 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:38.869376  3382 solver.cpp:398]     Test net output #0: accuracy = 0.7653
I0428 20:28:38.869415  3382 solver.cpp:398]     Test net output #1: loss = 0.604684 (* 1 = 0.604684 loss)
I0428 20:28:38.871358  3382 solver.cpp:219] Iteration 500 (310.919 iter/s, 0.321627s/100 iters), loss = 0.42199
I0428 20:28:38.871388  3382 solver.cpp:238]     Train net output #0: loss = 0.42199 (* 1 = 0.42199 loss)
I0428 20:28:38.871424  3382 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:28:39.089292  3382 solver.cpp:219] Iteration 600 (458.963 iter/s, 0.217883s/100 iters), loss = 0.352652
I0428 20:28:39.089344  3382 solver.cpp:238]     Train net output #0: loss = 0.352652 (* 1 = 0.352652 loss)
I0428 20:28:39.089359  3382 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:28:39.314942  3382 solver.cpp:219] Iteration 700 (443.302 iter/s, 0.22558s/100 iters), loss = 0.519943
I0428 20:28:39.314995  3382 solver.cpp:238]     Train net output #0: loss = 0.519943 (* 1 = 0.519943 loss)
I0428 20:28:39.315007  3382 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:28:39.540474  3382 solver.cpp:219] Iteration 800 (443.529 iter/s, 0.225464s/100 iters), loss = 0.555737
I0428 20:28:39.540524  3382 solver.cpp:238]     Train net output #0: loss = 0.555737 (* 1 = 0.555737 loss)
I0428 20:28:39.540537  3382 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:28:39.764097  3382 solver.cpp:219] Iteration 900 (447.316 iter/s, 0.223556s/100 iters), loss = 0.411879
I0428 20:28:39.764145  3382 solver.cpp:238]     Train net output #0: loss = 0.411878 (* 1 = 0.411878 loss)
I0428 20:28:39.764158  3382 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:28:39.838320  3388 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:39.984776  3382 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:28:39.986879  3382 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:28:39.988342  3382 solver.cpp:311] Iteration 1000, loss = 0.476878
I0428 20:28:39.988378  3382 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:28:40.092592  3389 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:28:40.096276  3382 solver.cpp:398]     Test net output #0: accuracy = 0.8727
I0428 20:28:40.096300  3382 solver.cpp:398]     Test net output #1: loss = 0.346748 (* 1 = 0.346748 loss)
I0428 20:28:40.096307  3382 solver.cpp:316] Optimization Done.
I0428 20:28:40.096312  3382 caffe.cpp:259] Optimization Done.
