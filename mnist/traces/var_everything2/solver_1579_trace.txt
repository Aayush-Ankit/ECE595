I0428 20:32:53.313248  4212 caffe.cpp:218] Using GPUs 0
I0428 20:32:53.353970  4212 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:32:53.818959  4212 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1579.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:32:53.819089  4212 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1579.prototxt
I0428 20:32:53.819403  4212 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:32:53.819419  4212 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:32:53.819495  4212 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:32:53.819555  4212 layer_factory.hpp:77] Creating layer mnist
I0428 20:32:53.819636  4212 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:32:53.819655  4212 net.cpp:86] Creating Layer mnist
I0428 20:32:53.819663  4212 net.cpp:382] mnist -> data
I0428 20:32:53.819682  4212 net.cpp:382] mnist -> label
I0428 20:32:53.820685  4212 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:32:53.823166  4212 net.cpp:124] Setting up mnist
I0428 20:32:53.823212  4212 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:32:53.823218  4212 net.cpp:131] Top shape: 64 (64)
I0428 20:32:53.823222  4212 net.cpp:139] Memory required for data: 200960
I0428 20:32:53.823230  4212 layer_factory.hpp:77] Creating layer conv0
I0428 20:32:53.823243  4212 net.cpp:86] Creating Layer conv0
I0428 20:32:53.823261  4212 net.cpp:408] conv0 <- data
I0428 20:32:53.823272  4212 net.cpp:382] conv0 -> conv0
I0428 20:32:54.060963  4212 net.cpp:124] Setting up conv0
I0428 20:32:54.061007  4212 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:32:54.061012  4212 net.cpp:139] Memory required for data: 14946560
I0428 20:32:54.061029  4212 layer_factory.hpp:77] Creating layer pool0
I0428 20:32:54.061043  4212 net.cpp:86] Creating Layer pool0
I0428 20:32:54.061048  4212 net.cpp:408] pool0 <- conv0
I0428 20:32:54.061070  4212 net.cpp:382] pool0 -> pool0
I0428 20:32:54.061133  4212 net.cpp:124] Setting up pool0
I0428 20:32:54.061156  4212 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:32:54.061161  4212 net.cpp:139] Memory required for data: 18632960
I0428 20:32:54.061164  4212 layer_factory.hpp:77] Creating layer conv1
I0428 20:32:54.061175  4212 net.cpp:86] Creating Layer conv1
I0428 20:32:54.061179  4212 net.cpp:408] conv1 <- pool0
I0428 20:32:54.061185  4212 net.cpp:382] conv1 -> conv1
I0428 20:32:54.063618  4212 net.cpp:124] Setting up conv1
I0428 20:32:54.063649  4212 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:32:54.063653  4212 net.cpp:139] Memory required for data: 19042560
I0428 20:32:54.063663  4212 layer_factory.hpp:77] Creating layer pool1
I0428 20:32:54.063671  4212 net.cpp:86] Creating Layer pool1
I0428 20:32:54.063676  4212 net.cpp:408] pool1 <- conv1
I0428 20:32:54.063681  4212 net.cpp:382] pool1 -> pool1
I0428 20:32:54.063736  4212 net.cpp:124] Setting up pool1
I0428 20:32:54.063750  4212 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:32:54.063753  4212 net.cpp:139] Memory required for data: 19144960
I0428 20:32:54.063757  4212 layer_factory.hpp:77] Creating layer ip1
I0428 20:32:54.063766  4212 net.cpp:86] Creating Layer ip1
I0428 20:32:54.063769  4212 net.cpp:408] ip1 <- pool1
I0428 20:32:54.063774  4212 net.cpp:382] ip1 -> ip1
I0428 20:32:54.063896  4212 net.cpp:124] Setting up ip1
I0428 20:32:54.063905  4212 net.cpp:131] Top shape: 64 10 (640)
I0428 20:32:54.063910  4212 net.cpp:139] Memory required for data: 19147520
I0428 20:32:54.063917  4212 layer_factory.hpp:77] Creating layer relu1
I0428 20:32:54.063925  4212 net.cpp:86] Creating Layer relu1
I0428 20:32:54.063930  4212 net.cpp:408] relu1 <- ip1
I0428 20:32:54.063935  4212 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:32:54.064139  4212 net.cpp:124] Setting up relu1
I0428 20:32:54.064149  4212 net.cpp:131] Top shape: 64 10 (640)
I0428 20:32:54.064153  4212 net.cpp:139] Memory required for data: 19150080
I0428 20:32:54.064157  4212 layer_factory.hpp:77] Creating layer ip2
I0428 20:32:54.064164  4212 net.cpp:86] Creating Layer ip2
I0428 20:32:54.064169  4212 net.cpp:408] ip2 <- ip1
I0428 20:32:54.064175  4212 net.cpp:382] ip2 -> ip2
I0428 20:32:54.064275  4212 net.cpp:124] Setting up ip2
I0428 20:32:54.064283  4212 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:32:54.064288  4212 net.cpp:139] Memory required for data: 19162880
I0428 20:32:54.064294  4212 layer_factory.hpp:77] Creating layer relu2
I0428 20:32:54.064302  4212 net.cpp:86] Creating Layer relu2
I0428 20:32:54.064306  4212 net.cpp:408] relu2 <- ip2
I0428 20:32:54.064312  4212 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:32:54.065138  4212 net.cpp:124] Setting up relu2
I0428 20:32:54.065167  4212 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:32:54.065171  4212 net.cpp:139] Memory required for data: 19175680
I0428 20:32:54.065191  4212 layer_factory.hpp:77] Creating layer ip3
I0428 20:32:54.065215  4212 net.cpp:86] Creating Layer ip3
I0428 20:32:54.065220  4212 net.cpp:408] ip3 <- ip2
I0428 20:32:54.065227  4212 net.cpp:382] ip3 -> ip3
I0428 20:32:54.065332  4212 net.cpp:124] Setting up ip3
I0428 20:32:54.065342  4212 net.cpp:131] Top shape: 64 10 (640)
I0428 20:32:54.065346  4212 net.cpp:139] Memory required for data: 19178240
I0428 20:32:54.065356  4212 layer_factory.hpp:77] Creating layer relu3
I0428 20:32:54.065362  4212 net.cpp:86] Creating Layer relu3
I0428 20:32:54.065367  4212 net.cpp:408] relu3 <- ip3
I0428 20:32:54.065372  4212 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:32:54.065570  4212 net.cpp:124] Setting up relu3
I0428 20:32:54.065579  4212 net.cpp:131] Top shape: 64 10 (640)
I0428 20:32:54.065583  4212 net.cpp:139] Memory required for data: 19180800
I0428 20:32:54.065587  4212 layer_factory.hpp:77] Creating layer loss
I0428 20:32:54.065594  4212 net.cpp:86] Creating Layer loss
I0428 20:32:54.065598  4212 net.cpp:408] loss <- ip3
I0428 20:32:54.065603  4212 net.cpp:408] loss <- label
I0428 20:32:54.065609  4212 net.cpp:382] loss -> loss
I0428 20:32:54.065627  4212 layer_factory.hpp:77] Creating layer loss
I0428 20:32:54.065894  4212 net.cpp:124] Setting up loss
I0428 20:32:54.065904  4212 net.cpp:131] Top shape: (1)
I0428 20:32:54.065909  4212 net.cpp:134]     with loss weight 1
I0428 20:32:54.065924  4212 net.cpp:139] Memory required for data: 19180804
I0428 20:32:54.065929  4212 net.cpp:200] loss needs backward computation.
I0428 20:32:54.065933  4212 net.cpp:200] relu3 needs backward computation.
I0428 20:32:54.065937  4212 net.cpp:200] ip3 needs backward computation.
I0428 20:32:54.065942  4212 net.cpp:200] relu2 needs backward computation.
I0428 20:32:54.065945  4212 net.cpp:200] ip2 needs backward computation.
I0428 20:32:54.065948  4212 net.cpp:200] relu1 needs backward computation.
I0428 20:32:54.065953  4212 net.cpp:200] ip1 needs backward computation.
I0428 20:32:54.065956  4212 net.cpp:200] pool1 needs backward computation.
I0428 20:32:54.065960  4212 net.cpp:200] conv1 needs backward computation.
I0428 20:32:54.065964  4212 net.cpp:200] pool0 needs backward computation.
I0428 20:32:54.065968  4212 net.cpp:200] conv0 needs backward computation.
I0428 20:32:54.065973  4212 net.cpp:202] mnist does not need backward computation.
I0428 20:32:54.065976  4212 net.cpp:244] This network produces output loss
I0428 20:32:54.065986  4212 net.cpp:257] Network initialization done.
I0428 20:32:54.066351  4212 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1579.prototxt
I0428 20:32:54.066395  4212 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:32:54.066490  4212 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:32:54.066588  4212 layer_factory.hpp:77] Creating layer mnist
I0428 20:32:54.066664  4212 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:32:54.066679  4212 net.cpp:86] Creating Layer mnist
I0428 20:32:54.066684  4212 net.cpp:382] mnist -> data
I0428 20:32:54.066692  4212 net.cpp:382] mnist -> label
I0428 20:32:54.066792  4212 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:32:54.068894  4212 net.cpp:124] Setting up mnist
I0428 20:32:54.068923  4212 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:32:54.068929  4212 net.cpp:131] Top shape: 100 (100)
I0428 20:32:54.068933  4212 net.cpp:139] Memory required for data: 314000
I0428 20:32:54.068938  4212 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:32:54.068946  4212 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:32:54.068950  4212 net.cpp:408] label_mnist_1_split <- label
I0428 20:32:54.068956  4212 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:32:54.068980  4212 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:32:54.069085  4212 net.cpp:124] Setting up label_mnist_1_split
I0428 20:32:54.069095  4212 net.cpp:131] Top shape: 100 (100)
I0428 20:32:54.069100  4212 net.cpp:131] Top shape: 100 (100)
I0428 20:32:54.069104  4212 net.cpp:139] Memory required for data: 314800
I0428 20:32:54.069109  4212 layer_factory.hpp:77] Creating layer conv0
I0428 20:32:54.069134  4212 net.cpp:86] Creating Layer conv0
I0428 20:32:54.069139  4212 net.cpp:408] conv0 <- data
I0428 20:32:54.069144  4212 net.cpp:382] conv0 -> conv0
I0428 20:32:54.070791  4212 net.cpp:124] Setting up conv0
I0428 20:32:54.070806  4212 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:32:54.070811  4212 net.cpp:139] Memory required for data: 23354800
I0428 20:32:54.070822  4212 layer_factory.hpp:77] Creating layer pool0
I0428 20:32:54.070830  4212 net.cpp:86] Creating Layer pool0
I0428 20:32:54.070834  4212 net.cpp:408] pool0 <- conv0
I0428 20:32:54.070840  4212 net.cpp:382] pool0 -> pool0
I0428 20:32:54.070878  4212 net.cpp:124] Setting up pool0
I0428 20:32:54.070885  4212 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:32:54.070889  4212 net.cpp:139] Memory required for data: 29114800
I0428 20:32:54.070894  4212 layer_factory.hpp:77] Creating layer conv1
I0428 20:32:54.070904  4212 net.cpp:86] Creating Layer conv1
I0428 20:32:54.070909  4212 net.cpp:408] conv1 <- pool0
I0428 20:32:54.070914  4212 net.cpp:382] conv1 -> conv1
I0428 20:32:54.073007  4212 net.cpp:124] Setting up conv1
I0428 20:32:54.073032  4212 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:32:54.073055  4212 net.cpp:139] Memory required for data: 29754800
I0428 20:32:54.073065  4212 layer_factory.hpp:77] Creating layer pool1
I0428 20:32:54.073073  4212 net.cpp:86] Creating Layer pool1
I0428 20:32:54.073078  4212 net.cpp:408] pool1 <- conv1
I0428 20:32:54.073084  4212 net.cpp:382] pool1 -> pool1
I0428 20:32:54.073169  4212 net.cpp:124] Setting up pool1
I0428 20:32:54.073194  4212 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:32:54.073199  4212 net.cpp:139] Memory required for data: 29914800
I0428 20:32:54.073201  4212 layer_factory.hpp:77] Creating layer ip1
I0428 20:32:54.073210  4212 net.cpp:86] Creating Layer ip1
I0428 20:32:54.073215  4212 net.cpp:408] ip1 <- pool1
I0428 20:32:54.073220  4212 net.cpp:382] ip1 -> ip1
I0428 20:32:54.073345  4212 net.cpp:124] Setting up ip1
I0428 20:32:54.073365  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.073370  4212 net.cpp:139] Memory required for data: 29918800
I0428 20:32:54.073379  4212 layer_factory.hpp:77] Creating layer relu1
I0428 20:32:54.073386  4212 net.cpp:86] Creating Layer relu1
I0428 20:32:54.073400  4212 net.cpp:408] relu1 <- ip1
I0428 20:32:54.073406  4212 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:32:54.073587  4212 net.cpp:124] Setting up relu1
I0428 20:32:54.073596  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.073601  4212 net.cpp:139] Memory required for data: 29922800
I0428 20:32:54.073604  4212 layer_factory.hpp:77] Creating layer ip2
I0428 20:32:54.073629  4212 net.cpp:86] Creating Layer ip2
I0428 20:32:54.073633  4212 net.cpp:408] ip2 <- ip1
I0428 20:32:54.073639  4212 net.cpp:382] ip2 -> ip2
I0428 20:32:54.073770  4212 net.cpp:124] Setting up ip2
I0428 20:32:54.073777  4212 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:32:54.073781  4212 net.cpp:139] Memory required for data: 29942800
I0428 20:32:54.073787  4212 layer_factory.hpp:77] Creating layer relu2
I0428 20:32:54.073794  4212 net.cpp:86] Creating Layer relu2
I0428 20:32:54.073798  4212 net.cpp:408] relu2 <- ip2
I0428 20:32:54.073803  4212 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:32:54.074048  4212 net.cpp:124] Setting up relu2
I0428 20:32:54.074059  4212 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:32:54.074062  4212 net.cpp:139] Memory required for data: 29962800
I0428 20:32:54.074066  4212 layer_factory.hpp:77] Creating layer ip3
I0428 20:32:54.074074  4212 net.cpp:86] Creating Layer ip3
I0428 20:32:54.074077  4212 net.cpp:408] ip3 <- ip2
I0428 20:32:54.074086  4212 net.cpp:382] ip3 -> ip3
I0428 20:32:54.074214  4212 net.cpp:124] Setting up ip3
I0428 20:32:54.074223  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.074229  4212 net.cpp:139] Memory required for data: 29966800
I0428 20:32:54.074237  4212 layer_factory.hpp:77] Creating layer relu3
I0428 20:32:54.074244  4212 net.cpp:86] Creating Layer relu3
I0428 20:32:54.074247  4212 net.cpp:408] relu3 <- ip3
I0428 20:32:54.074251  4212 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:32:54.075109  4212 net.cpp:124] Setting up relu3
I0428 20:32:54.075131  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.075135  4212 net.cpp:139] Memory required for data: 29970800
I0428 20:32:54.075155  4212 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:32:54.075160  4212 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:32:54.075165  4212 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:32:54.075182  4212 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:32:54.075189  4212 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:32:54.075242  4212 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:32:54.075250  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.075255  4212 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:32:54.075259  4212 net.cpp:139] Memory required for data: 29978800
I0428 20:32:54.075263  4212 layer_factory.hpp:77] Creating layer accuracy
I0428 20:32:54.075269  4212 net.cpp:86] Creating Layer accuracy
I0428 20:32:54.075273  4212 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:32:54.075278  4212 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:32:54.075294  4212 net.cpp:382] accuracy -> accuracy
I0428 20:32:54.075307  4212 net.cpp:124] Setting up accuracy
I0428 20:32:54.075312  4212 net.cpp:131] Top shape: (1)
I0428 20:32:54.075316  4212 net.cpp:139] Memory required for data: 29978804
I0428 20:32:54.075320  4212 layer_factory.hpp:77] Creating layer loss
I0428 20:32:54.075326  4212 net.cpp:86] Creating Layer loss
I0428 20:32:54.075330  4212 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:32:54.075335  4212 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:32:54.075340  4212 net.cpp:382] loss -> loss
I0428 20:32:54.075347  4212 layer_factory.hpp:77] Creating layer loss
I0428 20:32:54.075613  4212 net.cpp:124] Setting up loss
I0428 20:32:54.075624  4212 net.cpp:131] Top shape: (1)
I0428 20:32:54.075628  4212 net.cpp:134]     with loss weight 1
I0428 20:32:54.075644  4212 net.cpp:139] Memory required for data: 29978808
I0428 20:32:54.075647  4212 net.cpp:200] loss needs backward computation.
I0428 20:32:54.075652  4212 net.cpp:202] accuracy does not need backward computation.
I0428 20:32:54.075656  4212 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:32:54.075660  4212 net.cpp:200] relu3 needs backward computation.
I0428 20:32:54.075664  4212 net.cpp:200] ip3 needs backward computation.
I0428 20:32:54.075666  4212 net.cpp:200] relu2 needs backward computation.
I0428 20:32:54.075670  4212 net.cpp:200] ip2 needs backward computation.
I0428 20:32:54.075673  4212 net.cpp:200] relu1 needs backward computation.
I0428 20:32:54.075676  4212 net.cpp:200] ip1 needs backward computation.
I0428 20:32:54.075680  4212 net.cpp:200] pool1 needs backward computation.
I0428 20:32:54.075683  4212 net.cpp:200] conv1 needs backward computation.
I0428 20:32:54.075686  4212 net.cpp:200] pool0 needs backward computation.
I0428 20:32:54.075690  4212 net.cpp:200] conv0 needs backward computation.
I0428 20:32:54.075695  4212 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:32:54.075698  4212 net.cpp:202] mnist does not need backward computation.
I0428 20:32:54.075702  4212 net.cpp:244] This network produces output accuracy
I0428 20:32:54.075706  4212 net.cpp:244] This network produces output loss
I0428 20:32:54.075718  4212 net.cpp:257] Network initialization done.
I0428 20:32:54.075759  4212 solver.cpp:56] Solver scaffolding done.
I0428 20:32:54.076125  4212 caffe.cpp:248] Starting Optimization
I0428 20:32:54.076133  4212 solver.cpp:273] Solving LeNet
I0428 20:32:54.076151  4212 solver.cpp:274] Learning Rate Policy: inv
I0428 20:32:54.077002  4212 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:32:54.152112  4212 blocking_queue.cpp:49] Waiting for data
I0428 20:32:54.176057  4219 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:32:54.177696  4212 solver.cpp:398]     Test net output #0: accuracy = 0.078
I0428 20:32:54.177736  4212 solver.cpp:398]     Test net output #1: loss = 2.31537 (* 1 = 2.31537 loss)
I0428 20:32:54.182435  4212 solver.cpp:219] Iteration 0 (-7.65109e-43 iter/s, 0.106234s/100 iters), loss = 2.3125
I0428 20:32:54.182461  4212 solver.cpp:238]     Train net output #0: loss = 2.3125 (* 1 = 2.3125 loss)
I0428 20:32:54.182472  4212 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:32:54.399467  4212 solver.cpp:219] Iteration 100 (460.868 iter/s, 0.216982s/100 iters), loss = 0.481324
I0428 20:32:54.399514  4212 solver.cpp:238]     Train net output #0: loss = 0.481324 (* 1 = 0.481324 loss)
I0428 20:32:54.399528  4212 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:32:54.620254  4212 solver.cpp:219] Iteration 200 (453.073 iter/s, 0.220715s/100 iters), loss = 0.434984
I0428 20:32:54.620313  4212 solver.cpp:238]     Train net output #0: loss = 0.434984 (* 1 = 0.434984 loss)
I0428 20:32:54.620327  4212 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:32:54.842111  4212 solver.cpp:219] Iteration 300 (450.889 iter/s, 0.221784s/100 iters), loss = 0.297014
I0428 20:32:54.842154  4212 solver.cpp:238]     Train net output #0: loss = 0.297014 (* 1 = 0.297014 loss)
I0428 20:32:54.842164  4212 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:32:55.055739  4212 solver.cpp:219] Iteration 400 (468.234 iter/s, 0.213569s/100 iters), loss = 0.302176
I0428 20:32:55.055781  4212 solver.cpp:238]     Train net output #0: loss = 0.302176 (* 1 = 0.302176 loss)
I0428 20:32:55.055793  4212 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:32:55.272318  4212 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:32:55.378839  4219 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:32:55.380467  4212 solver.cpp:398]     Test net output #0: accuracy = 0.8732
I0428 20:32:55.380496  4212 solver.cpp:398]     Test net output #1: loss = 0.341029 (* 1 = 0.341029 loss)
I0428 20:32:55.382575  4212 solver.cpp:219] Iteration 500 (306.021 iter/s, 0.326775s/100 iters), loss = 0.309049
I0428 20:32:55.382627  4212 solver.cpp:238]     Train net output #0: loss = 0.309049 (* 1 = 0.309049 loss)
I0428 20:32:55.382637  4212 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:32:55.603684  4212 solver.cpp:219] Iteration 600 (452.408 iter/s, 0.22104s/100 iters), loss = 0.365329
I0428 20:32:55.603734  4212 solver.cpp:238]     Train net output #0: loss = 0.365329 (* 1 = 0.365329 loss)
I0428 20:32:55.603747  4212 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:32:55.824995  4212 solver.cpp:219] Iteration 700 (451.983 iter/s, 0.221247s/100 iters), loss = 0.342772
I0428 20:32:55.825032  4212 solver.cpp:238]     Train net output #0: loss = 0.342772 (* 1 = 0.342772 loss)
I0428 20:32:55.825042  4212 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:32:56.047394  4212 solver.cpp:219] Iteration 800 (449.753 iter/s, 0.222344s/100 iters), loss = 0.469706
I0428 20:32:56.047437  4212 solver.cpp:238]     Train net output #0: loss = 0.469706 (* 1 = 0.469706 loss)
I0428 20:32:56.047451  4212 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:32:56.264556  4212 solver.cpp:219] Iteration 900 (460.608 iter/s, 0.217104s/100 iters), loss = 0.191
I0428 20:32:56.264592  4212 solver.cpp:238]     Train net output #0: loss = 0.190999 (* 1 = 0.190999 loss)
I0428 20:32:56.264602  4212 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:32:56.333806  4218 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:32:56.479776  4212 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:32:56.482802  4212 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:32:56.484573  4212 solver.cpp:311] Iteration 1000, loss = 0.270925
I0428 20:32:56.484599  4212 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:32:56.585360  4219 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:32:56.588129  4212 solver.cpp:398]     Test net output #0: accuracy = 0.8786
I0428 20:32:56.588155  4212 solver.cpp:398]     Test net output #1: loss = 0.314505 (* 1 = 0.314505 loss)
I0428 20:32:56.588162  4212 solver.cpp:316] Optimization Done.
I0428 20:32:56.588166  4212 caffe.cpp:259] Optimization Done.
