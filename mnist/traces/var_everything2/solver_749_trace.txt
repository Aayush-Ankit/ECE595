I0428 19:56:06.210502 28350 caffe.cpp:218] Using GPUs 0
I0428 19:56:06.247506 28350 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:56:06.700620 28350 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test749.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:56:06.701257 28350 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test749.prototxt
I0428 19:56:06.701859 28350 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:56:06.701881 28350 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:56:06.702018 28350 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:06.702111 28350 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:06.702262 28350 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:56:06.702306 28350 net.cpp:86] Creating Layer mnist
I0428 19:56:06.702325 28350 net.cpp:382] mnist -> data
I0428 19:56:06.702352 28350 net.cpp:382] mnist -> label
I0428 19:56:06.703832 28350 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:56:06.706470 28350 net.cpp:124] Setting up mnist
I0428 19:56:06.706485 28350 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:56:06.706490 28350 net.cpp:131] Top shape: 64 (64)
I0428 19:56:06.706493 28350 net.cpp:139] Memory required for data: 200960
I0428 19:56:06.706498 28350 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:06.706538 28350 net.cpp:86] Creating Layer conv0
I0428 19:56:06.706547 28350 net.cpp:408] conv0 <- data
I0428 19:56:06.706563 28350 net.cpp:382] conv0 -> conv0
I0428 19:56:06.929648 28350 net.cpp:124] Setting up conv0
I0428 19:56:06.929675 28350 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:56:06.929679 28350 net.cpp:139] Memory required for data: 1675520
I0428 19:56:06.929711 28350 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:06.929724 28350 net.cpp:86] Creating Layer pool0
I0428 19:56:06.929730 28350 net.cpp:408] pool0 <- conv0
I0428 19:56:06.929738 28350 net.cpp:382] pool0 -> pool0
I0428 19:56:06.929791 28350 net.cpp:124] Setting up pool0
I0428 19:56:06.929816 28350 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:56:06.929821 28350 net.cpp:139] Memory required for data: 2044160
I0428 19:56:06.929824 28350 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:06.929838 28350 net.cpp:86] Creating Layer conv1
I0428 19:56:06.929843 28350 net.cpp:408] conv1 <- pool0
I0428 19:56:06.929850 28350 net.cpp:382] conv1 -> conv1
I0428 19:56:06.932117 28350 net.cpp:124] Setting up conv1
I0428 19:56:06.932147 28350 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:56:06.932152 28350 net.cpp:139] Memory required for data: 2076928
I0428 19:56:06.932160 28350 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:06.932168 28350 net.cpp:86] Creating Layer pool1
I0428 19:56:06.932171 28350 net.cpp:408] pool1 <- conv1
I0428 19:56:06.932176 28350 net.cpp:382] pool1 -> pool1
I0428 19:56:06.932224 28350 net.cpp:124] Setting up pool1
I0428 19:56:06.932234 28350 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:56:06.932240 28350 net.cpp:139] Memory required for data: 2085120
I0428 19:56:06.932245 28350 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:06.932255 28350 net.cpp:86] Creating Layer ip1
I0428 19:56:06.932260 28350 net.cpp:408] ip1 <- pool1
I0428 19:56:06.932267 28350 net.cpp:382] ip1 -> ip1
I0428 19:56:06.932430 28350 net.cpp:124] Setting up ip1
I0428 19:56:06.932442 28350 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:06.932446 28350 net.cpp:139] Memory required for data: 2091520
I0428 19:56:06.932457 28350 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:06.932464 28350 net.cpp:86] Creating Layer relu1
I0428 19:56:06.932469 28350 net.cpp:408] relu1 <- ip1
I0428 19:56:06.932476 28350 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:06.932685 28350 net.cpp:124] Setting up relu1
I0428 19:56:06.932698 28350 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:56:06.932703 28350 net.cpp:139] Memory required for data: 2097920
I0428 19:56:06.932708 28350 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:06.932716 28350 net.cpp:86] Creating Layer ip2
I0428 19:56:06.932720 28350 net.cpp:408] ip2 <- ip1
I0428 19:56:06.932729 28350 net.cpp:382] ip2 -> ip2
I0428 19:56:06.932888 28350 net.cpp:124] Setting up ip2
I0428 19:56:06.932899 28350 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:06.932905 28350 net.cpp:139] Memory required for data: 2100480
I0428 19:56:06.932914 28350 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:06.932924 28350 net.cpp:86] Creating Layer relu2
I0428 19:56:06.932930 28350 net.cpp:408] relu2 <- ip2
I0428 19:56:06.932937 28350 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:06.934090 28350 net.cpp:124] Setting up relu2
I0428 19:56:06.934121 28350 net.cpp:131] Top shape: 64 10 (640)
I0428 19:56:06.934126 28350 net.cpp:139] Memory required for data: 2103040
I0428 19:56:06.934132 28350 layer_factory.hpp:77] Creating layer loss
I0428 19:56:06.934146 28350 net.cpp:86] Creating Layer loss
I0428 19:56:06.934152 28350 net.cpp:408] loss <- ip2
I0428 19:56:06.934159 28350 net.cpp:408] loss <- label
I0428 19:56:06.934166 28350 net.cpp:382] loss -> loss
I0428 19:56:06.934185 28350 layer_factory.hpp:77] Creating layer loss
I0428 19:56:06.934561 28350 net.cpp:124] Setting up loss
I0428 19:56:06.934592 28350 net.cpp:131] Top shape: (1)
I0428 19:56:06.934598 28350 net.cpp:134]     with loss weight 1
I0428 19:56:06.934631 28350 net.cpp:139] Memory required for data: 2103044
I0428 19:56:06.934651 28350 net.cpp:200] loss needs backward computation.
I0428 19:56:06.934658 28350 net.cpp:200] relu2 needs backward computation.
I0428 19:56:06.934662 28350 net.cpp:200] ip2 needs backward computation.
I0428 19:56:06.934667 28350 net.cpp:200] relu1 needs backward computation.
I0428 19:56:06.934685 28350 net.cpp:200] ip1 needs backward computation.
I0428 19:56:06.934702 28350 net.cpp:200] pool1 needs backward computation.
I0428 19:56:06.934708 28350 net.cpp:200] conv1 needs backward computation.
I0428 19:56:06.934713 28350 net.cpp:200] pool0 needs backward computation.
I0428 19:56:06.934717 28350 net.cpp:200] conv0 needs backward computation.
I0428 19:56:06.934723 28350 net.cpp:202] mnist does not need backward computation.
I0428 19:56:06.934728 28350 net.cpp:244] This network produces output loss
I0428 19:56:06.934741 28350 net.cpp:257] Network initialization done.
I0428 19:56:06.935199 28350 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test749.prototxt
I0428 19:56:06.935250 28350 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:56:06.935406 28350 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:56:06.935539 28350 layer_factory.hpp:77] Creating layer mnist
I0428 19:56:06.935600 28350 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:56:06.935621 28350 net.cpp:86] Creating Layer mnist
I0428 19:56:06.935627 28350 net.cpp:382] mnist -> data
I0428 19:56:06.935639 28350 net.cpp:382] mnist -> label
I0428 19:56:06.935796 28350 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:56:06.938416 28350 net.cpp:124] Setting up mnist
I0428 19:56:06.938444 28350 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:56:06.938448 28350 net.cpp:131] Top shape: 100 (100)
I0428 19:56:06.938453 28350 net.cpp:139] Memory required for data: 314000
I0428 19:56:06.938457 28350 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:56:06.938463 28350 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:56:06.938467 28350 net.cpp:408] label_mnist_1_split <- label
I0428 19:56:06.938470 28350 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:56:06.938479 28350 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:56:06.938542 28350 net.cpp:124] Setting up label_mnist_1_split
I0428 19:56:06.938565 28350 net.cpp:131] Top shape: 100 (100)
I0428 19:56:06.938571 28350 net.cpp:131] Top shape: 100 (100)
I0428 19:56:06.938575 28350 net.cpp:139] Memory required for data: 314800
I0428 19:56:06.938581 28350 layer_factory.hpp:77] Creating layer conv0
I0428 19:56:06.938593 28350 net.cpp:86] Creating Layer conv0
I0428 19:56:06.938598 28350 net.cpp:408] conv0 <- data
I0428 19:56:06.938606 28350 net.cpp:382] conv0 -> conv0
I0428 19:56:06.940498 28350 net.cpp:124] Setting up conv0
I0428 19:56:06.940512 28350 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:56:06.940515 28350 net.cpp:139] Memory required for data: 2618800
I0428 19:56:06.940524 28350 layer_factory.hpp:77] Creating layer pool0
I0428 19:56:06.940532 28350 net.cpp:86] Creating Layer pool0
I0428 19:56:06.940537 28350 net.cpp:408] pool0 <- conv0
I0428 19:56:06.940544 28350 net.cpp:382] pool0 -> pool0
I0428 19:56:06.940592 28350 net.cpp:124] Setting up pool0
I0428 19:56:06.940600 28350 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:56:06.940605 28350 net.cpp:139] Memory required for data: 3194800
I0428 19:56:06.940610 28350 layer_factory.hpp:77] Creating layer conv1
I0428 19:56:06.940623 28350 net.cpp:86] Creating Layer conv1
I0428 19:56:06.940627 28350 net.cpp:408] conv1 <- pool0
I0428 19:56:06.940635 28350 net.cpp:382] conv1 -> conv1
I0428 19:56:06.943174 28350 net.cpp:124] Setting up conv1
I0428 19:56:06.943189 28350 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:56:06.943193 28350 net.cpp:139] Memory required for data: 3246000
I0428 19:56:06.943202 28350 layer_factory.hpp:77] Creating layer pool1
I0428 19:56:06.943209 28350 net.cpp:86] Creating Layer pool1
I0428 19:56:06.943215 28350 net.cpp:408] pool1 <- conv1
I0428 19:56:06.943222 28350 net.cpp:382] pool1 -> pool1
I0428 19:56:06.943274 28350 net.cpp:124] Setting up pool1
I0428 19:56:06.943284 28350 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:56:06.943289 28350 net.cpp:139] Memory required for data: 3258800
I0428 19:56:06.943295 28350 layer_factory.hpp:77] Creating layer ip1
I0428 19:56:06.943302 28350 net.cpp:86] Creating Layer ip1
I0428 19:56:06.943308 28350 net.cpp:408] ip1 <- pool1
I0428 19:56:06.943315 28350 net.cpp:382] ip1 -> ip1
I0428 19:56:06.943482 28350 net.cpp:124] Setting up ip1
I0428 19:56:06.943492 28350 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:06.943496 28350 net.cpp:139] Memory required for data: 3268800
I0428 19:56:06.943506 28350 layer_factory.hpp:77] Creating layer relu1
I0428 19:56:06.943512 28350 net.cpp:86] Creating Layer relu1
I0428 19:56:06.943517 28350 net.cpp:408] relu1 <- ip1
I0428 19:56:06.943523 28350 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:56:06.943810 28350 net.cpp:124] Setting up relu1
I0428 19:56:06.943823 28350 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:56:06.943828 28350 net.cpp:139] Memory required for data: 3278800
I0428 19:56:06.943850 28350 layer_factory.hpp:77] Creating layer ip2
I0428 19:56:06.943859 28350 net.cpp:86] Creating Layer ip2
I0428 19:56:06.943864 28350 net.cpp:408] ip2 <- ip1
I0428 19:56:06.943872 28350 net.cpp:382] ip2 -> ip2
I0428 19:56:06.944033 28350 net.cpp:124] Setting up ip2
I0428 19:56:06.944046 28350 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:06.944058 28350 net.cpp:139] Memory required for data: 3282800
I0428 19:56:06.944067 28350 layer_factory.hpp:77] Creating layer relu2
I0428 19:56:06.944075 28350 net.cpp:86] Creating Layer relu2
I0428 19:56:06.944082 28350 net.cpp:408] relu2 <- ip2
I0428 19:56:06.944088 28350 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:56:06.944406 28350 net.cpp:124] Setting up relu2
I0428 19:56:06.944420 28350 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:06.944427 28350 net.cpp:139] Memory required for data: 3286800
I0428 19:56:06.944432 28350 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:56:06.944453 28350 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:56:06.944458 28350 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:56:06.944466 28350 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:56:06.944489 28350 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:56:06.944581 28350 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:56:06.944607 28350 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:06.944613 28350 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:56:06.944618 28350 net.cpp:139] Memory required for data: 3294800
I0428 19:56:06.944623 28350 layer_factory.hpp:77] Creating layer accuracy
I0428 19:56:06.944630 28350 net.cpp:86] Creating Layer accuracy
I0428 19:56:06.944635 28350 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:56:06.944643 28350 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:56:06.944648 28350 net.cpp:382] accuracy -> accuracy
I0428 19:56:06.944658 28350 net.cpp:124] Setting up accuracy
I0428 19:56:06.944664 28350 net.cpp:131] Top shape: (1)
I0428 19:56:06.944669 28350 net.cpp:139] Memory required for data: 3294804
I0428 19:56:06.944674 28350 layer_factory.hpp:77] Creating layer loss
I0428 19:56:06.944679 28350 net.cpp:86] Creating Layer loss
I0428 19:56:06.944684 28350 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:56:06.944690 28350 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:56:06.944697 28350 net.cpp:382] loss -> loss
I0428 19:56:06.944705 28350 layer_factory.hpp:77] Creating layer loss
I0428 19:56:06.945051 28350 net.cpp:124] Setting up loss
I0428 19:56:06.945065 28350 net.cpp:131] Top shape: (1)
I0428 19:56:06.945070 28350 net.cpp:134]     with loss weight 1
I0428 19:56:06.945078 28350 net.cpp:139] Memory required for data: 3294808
I0428 19:56:06.945083 28350 net.cpp:200] loss needs backward computation.
I0428 19:56:06.945089 28350 net.cpp:202] accuracy does not need backward computation.
I0428 19:56:06.945096 28350 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:56:06.945101 28350 net.cpp:200] relu2 needs backward computation.
I0428 19:56:06.945106 28350 net.cpp:200] ip2 needs backward computation.
I0428 19:56:06.945111 28350 net.cpp:200] relu1 needs backward computation.
I0428 19:56:06.945128 28350 net.cpp:200] ip1 needs backward computation.
I0428 19:56:06.945143 28350 net.cpp:200] pool1 needs backward computation.
I0428 19:56:06.945148 28350 net.cpp:200] conv1 needs backward computation.
I0428 19:56:06.945153 28350 net.cpp:200] pool0 needs backward computation.
I0428 19:56:06.945158 28350 net.cpp:200] conv0 needs backward computation.
I0428 19:56:06.945163 28350 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:56:06.945179 28350 net.cpp:202] mnist does not need backward computation.
I0428 19:56:06.945183 28350 net.cpp:244] This network produces output accuracy
I0428 19:56:06.945189 28350 net.cpp:244] This network produces output loss
I0428 19:56:06.945204 28350 net.cpp:257] Network initialization done.
I0428 19:56:06.945255 28350 solver.cpp:56] Solver scaffolding done.
I0428 19:56:06.945662 28350 caffe.cpp:248] Starting Optimization
I0428 19:56:06.945672 28350 solver.cpp:273] Solving LeNet
I0428 19:56:06.945677 28350 solver.cpp:274] Learning Rate Policy: inv
I0428 19:56:06.946771 28350 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:56:06.950762 28350 blocking_queue.cpp:49] Waiting for data
I0428 19:56:07.021951 28357 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:07.022543 28350 solver.cpp:398]     Test net output #0: accuracy = 0.1582
I0428 19:56:07.022568 28350 solver.cpp:398]     Test net output #1: loss = 2.29144 (* 1 = 2.29144 loss)
I0428 19:56:07.025223 28350 solver.cpp:219] Iteration 0 (-1.02295e-42 iter/s, 0.0795014s/100 iters), loss = 2.32756
I0428 19:56:07.025248 28350 solver.cpp:238]     Train net output #0: loss = 2.32756 (* 1 = 2.32756 loss)
I0428 19:56:07.025262 28350 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:56:07.103291 28350 solver.cpp:219] Iteration 100 (1281.51 iter/s, 0.0780329s/100 iters), loss = 1.09065
I0428 19:56:07.103315 28350 solver.cpp:238]     Train net output #0: loss = 1.09065 (* 1 = 1.09065 loss)
I0428 19:56:07.103323 28350 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:56:07.171738 28350 solver.cpp:219] Iteration 200 (1461.68 iter/s, 0.0684145s/100 iters), loss = 0.701381
I0428 19:56:07.171792 28350 solver.cpp:238]     Train net output #0: loss = 0.701381 (* 1 = 0.701381 loss)
I0428 19:56:07.171807 28350 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:56:07.239269 28350 solver.cpp:219] Iteration 300 (1482.13 iter/s, 0.0674704s/100 iters), loss = 0.952606
I0428 19:56:07.239295 28350 solver.cpp:238]     Train net output #0: loss = 0.952606 (* 1 = 0.952606 loss)
I0428 19:56:07.239303 28350 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:56:07.307085 28350 solver.cpp:219] Iteration 400 (1475.3 iter/s, 0.0677827s/100 iters), loss = 0.338249
I0428 19:56:07.307109 28350 solver.cpp:238]     Train net output #0: loss = 0.338249 (* 1 = 0.338249 loss)
I0428 19:56:07.307139 28350 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:56:07.374327 28350 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:56:07.449292 28357 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:07.449887 28350 solver.cpp:398]     Test net output #0: accuracy = 0.8312
I0428 19:56:07.449914 28350 solver.cpp:398]     Test net output #1: loss = 0.47067 (* 1 = 0.47067 loss)
I0428 19:56:07.450855 28350 solver.cpp:219] Iteration 500 (695.75 iter/s, 0.14373s/100 iters), loss = 0.443936
I0428 19:56:07.450888 28350 solver.cpp:238]     Train net output #0: loss = 0.443936 (* 1 = 0.443936 loss)
I0428 19:56:07.450898 28350 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:56:07.526168 28350 solver.cpp:219] Iteration 600 (1328.49 iter/s, 0.0752732s/100 iters), loss = 0.463753
I0428 19:56:07.526192 28350 solver.cpp:238]     Train net output #0: loss = 0.463753 (* 1 = 0.463753 loss)
I0428 19:56:07.526201 28350 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:56:07.594890 28350 solver.cpp:219] Iteration 700 (1455.84 iter/s, 0.0686889s/100 iters), loss = 0.729933
I0428 19:56:07.594915 28350 solver.cpp:238]     Train net output #0: loss = 0.729933 (* 1 = 0.729933 loss)
I0428 19:56:07.594929 28350 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:56:07.662425 28350 solver.cpp:219] Iteration 800 (1481.46 iter/s, 0.0675011s/100 iters), loss = 0.595123
I0428 19:56:07.662449 28350 solver.cpp:238]     Train net output #0: loss = 0.595123 (* 1 = 0.595123 loss)
I0428 19:56:07.662458 28350 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:56:07.741520 28350 solver.cpp:219] Iteration 900 (1264.81 iter/s, 0.079063s/100 iters), loss = 0.519517
I0428 19:56:07.741544 28350 solver.cpp:238]     Train net output #0: loss = 0.519517 (* 1 = 0.519517 loss)
I0428 19:56:07.741557 28350 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:56:07.765547 28356 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:07.810330 28350 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:56:07.811012 28350 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:56:07.811610 28350 solver.cpp:311] Iteration 1000, loss = 0.423326
I0428 19:56:07.811643 28350 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:56:07.864593 28357 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:56:07.865146 28350 solver.cpp:398]     Test net output #0: accuracy = 0.851
I0428 19:56:07.865169 28350 solver.cpp:398]     Test net output #1: loss = 0.397915 (* 1 = 0.397915 loss)
I0428 19:56:07.865175 28350 solver.cpp:316] Optimization Done.
I0428 19:56:07.865180 28350 caffe.cpp:259] Optimization Done.
