I0428 19:48:49.510614 26605 caffe.cpp:218] Using GPUs 0
I0428 19:48:49.549502 26605 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:50.005892 26605 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test556.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:50.006019 26605 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test556.prototxt
I0428 19:48:50.006317 26605 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:50.006330 26605 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:50.006398 26605 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:50.006458 26605 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:50.006551 26605 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:50.006570 26605 net.cpp:86] Creating Layer mnist
I0428 19:48:50.006577 26605 net.cpp:382] mnist -> data
I0428 19:48:50.006594 26605 net.cpp:382] mnist -> label
I0428 19:48:50.007557 26605 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:50.009742 26605 net.cpp:124] Setting up mnist
I0428 19:48:50.009771 26605 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:50.009776 26605 net.cpp:131] Top shape: 64 (64)
I0428 19:48:50.009779 26605 net.cpp:139] Memory required for data: 200960
I0428 19:48:50.009784 26605 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:50.009809 26605 net.cpp:86] Creating Layer conv0
I0428 19:48:50.009814 26605 net.cpp:408] conv0 <- data
I0428 19:48:50.009840 26605 net.cpp:382] conv0 -> conv0
I0428 19:48:50.245955 26605 net.cpp:124] Setting up conv0
I0428 19:48:50.245980 26605 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:50.245985 26605 net.cpp:139] Memory required for data: 938240
I0428 19:48:50.246016 26605 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:50.246028 26605 net.cpp:86] Creating Layer pool0
I0428 19:48:50.246032 26605 net.cpp:408] pool0 <- conv0
I0428 19:48:50.246037 26605 net.cpp:382] pool0 -> pool0
I0428 19:48:50.246083 26605 net.cpp:124] Setting up pool0
I0428 19:48:50.246089 26605 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:50.246093 26605 net.cpp:139] Memory required for data: 1122560
I0428 19:48:50.246094 26605 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:50.246112 26605 net.cpp:86] Creating Layer conv1
I0428 19:48:50.246115 26605 net.cpp:408] conv1 <- pool0
I0428 19:48:50.246119 26605 net.cpp:382] conv1 -> conv1
I0428 19:48:50.247982 26605 net.cpp:124] Setting up conv1
I0428 19:48:50.247997 26605 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:50.248001 26605 net.cpp:139] Memory required for data: 1204480
I0428 19:48:50.248009 26605 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:50.248018 26605 net.cpp:86] Creating Layer pool1
I0428 19:48:50.248020 26605 net.cpp:408] pool1 <- conv1
I0428 19:48:50.248026 26605 net.cpp:382] pool1 -> pool1
I0428 19:48:50.248064 26605 net.cpp:124] Setting up pool1
I0428 19:48:50.248070 26605 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:50.248073 26605 net.cpp:139] Memory required for data: 1224960
I0428 19:48:50.248076 26605 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:50.248085 26605 net.cpp:86] Creating Layer ip1
I0428 19:48:50.248087 26605 net.cpp:408] ip1 <- pool1
I0428 19:48:50.248092 26605 net.cpp:382] ip1 -> ip1
I0428 19:48:50.249125 26605 net.cpp:124] Setting up ip1
I0428 19:48:50.249138 26605 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:50.249141 26605 net.cpp:139] Memory required for data: 1237760
I0428 19:48:50.249150 26605 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:50.249155 26605 net.cpp:86] Creating Layer relu1
I0428 19:48:50.249173 26605 net.cpp:408] relu1 <- ip1
I0428 19:48:50.249178 26605 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:50.249339 26605 net.cpp:124] Setting up relu1
I0428 19:48:50.249347 26605 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:48:50.249351 26605 net.cpp:139] Memory required for data: 1250560
I0428 19:48:50.249353 26605 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:50.249359 26605 net.cpp:86] Creating Layer ip2
I0428 19:48:50.249362 26605 net.cpp:408] ip2 <- ip1
I0428 19:48:50.249367 26605 net.cpp:382] ip2 -> ip2
I0428 19:48:50.249462 26605 net.cpp:124] Setting up ip2
I0428 19:48:50.249470 26605 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:50.249490 26605 net.cpp:139] Memory required for data: 1253120
I0428 19:48:50.249495 26605 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:50.249500 26605 net.cpp:86] Creating Layer relu2
I0428 19:48:50.249505 26605 net.cpp:408] relu2 <- ip2
I0428 19:48:50.249508 26605 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:50.250223 26605 net.cpp:124] Setting up relu2
I0428 19:48:50.250236 26605 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:50.250254 26605 net.cpp:139] Memory required for data: 1255680
I0428 19:48:50.250258 26605 layer_factory.hpp:77] Creating layer loss
I0428 19:48:50.250264 26605 net.cpp:86] Creating Layer loss
I0428 19:48:50.250267 26605 net.cpp:408] loss <- ip2
I0428 19:48:50.250272 26605 net.cpp:408] loss <- label
I0428 19:48:50.250277 26605 net.cpp:382] loss -> loss
I0428 19:48:50.250310 26605 layer_factory.hpp:77] Creating layer loss
I0428 19:48:50.250582 26605 net.cpp:124] Setting up loss
I0428 19:48:50.250607 26605 net.cpp:131] Top shape: (1)
I0428 19:48:50.250610 26605 net.cpp:134]     with loss weight 1
I0428 19:48:50.250639 26605 net.cpp:139] Memory required for data: 1255684
I0428 19:48:50.250643 26605 net.cpp:200] loss needs backward computation.
I0428 19:48:50.250648 26605 net.cpp:200] relu2 needs backward computation.
I0428 19:48:50.250650 26605 net.cpp:200] ip2 needs backward computation.
I0428 19:48:50.250653 26605 net.cpp:200] relu1 needs backward computation.
I0428 19:48:50.250670 26605 net.cpp:200] ip1 needs backward computation.
I0428 19:48:50.250674 26605 net.cpp:200] pool1 needs backward computation.
I0428 19:48:50.250690 26605 net.cpp:200] conv1 needs backward computation.
I0428 19:48:50.250710 26605 net.cpp:200] pool0 needs backward computation.
I0428 19:48:50.250713 26605 net.cpp:200] conv0 needs backward computation.
I0428 19:48:50.250716 26605 net.cpp:202] mnist does not need backward computation.
I0428 19:48:50.250720 26605 net.cpp:244] This network produces output loss
I0428 19:48:50.250744 26605 net.cpp:257] Network initialization done.
I0428 19:48:50.251102 26605 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test556.prototxt
I0428 19:48:50.251128 26605 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:50.251235 26605 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:50.251318 26605 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:50.251379 26605 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:50.251394 26605 net.cpp:86] Creating Layer mnist
I0428 19:48:50.251399 26605 net.cpp:382] mnist -> data
I0428 19:48:50.251407 26605 net.cpp:382] mnist -> label
I0428 19:48:50.251513 26605 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:50.253448 26605 net.cpp:124] Setting up mnist
I0428 19:48:50.253461 26605 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:50.253481 26605 net.cpp:131] Top shape: 100 (100)
I0428 19:48:50.253484 26605 net.cpp:139] Memory required for data: 314000
I0428 19:48:50.253487 26605 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:50.253494 26605 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:50.253497 26605 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:50.253504 26605 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:50.253509 26605 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:50.253588 26605 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:50.253605 26605 net.cpp:131] Top shape: 100 (100)
I0428 19:48:50.253609 26605 net.cpp:131] Top shape: 100 (100)
I0428 19:48:50.253612 26605 net.cpp:139] Memory required for data: 314800
I0428 19:48:50.253615 26605 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:50.253625 26605 net.cpp:86] Creating Layer conv0
I0428 19:48:50.253630 26605 net.cpp:408] conv0 <- data
I0428 19:48:50.253635 26605 net.cpp:382] conv0 -> conv0
I0428 19:48:50.255338 26605 net.cpp:124] Setting up conv0
I0428 19:48:50.255368 26605 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:50.255373 26605 net.cpp:139] Memory required for data: 1466800
I0428 19:48:50.255381 26605 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:50.255388 26605 net.cpp:86] Creating Layer pool0
I0428 19:48:50.255390 26605 net.cpp:408] pool0 <- conv0
I0428 19:48:50.255396 26605 net.cpp:382] pool0 -> pool0
I0428 19:48:50.255446 26605 net.cpp:124] Setting up pool0
I0428 19:48:50.255455 26605 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:50.255457 26605 net.cpp:139] Memory required for data: 1754800
I0428 19:48:50.255460 26605 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:50.255470 26605 net.cpp:86] Creating Layer conv1
I0428 19:48:50.255476 26605 net.cpp:408] conv1 <- pool0
I0428 19:48:50.255497 26605 net.cpp:382] conv1 -> conv1
I0428 19:48:50.257697 26605 net.cpp:124] Setting up conv1
I0428 19:48:50.257712 26605 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:50.257735 26605 net.cpp:139] Memory required for data: 1882800
I0428 19:48:50.257758 26605 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:50.257766 26605 net.cpp:86] Creating Layer pool1
I0428 19:48:50.257769 26605 net.cpp:408] pool1 <- conv1
I0428 19:48:50.257774 26605 net.cpp:382] pool1 -> pool1
I0428 19:48:50.257819 26605 net.cpp:124] Setting up pool1
I0428 19:48:50.257827 26605 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:50.257829 26605 net.cpp:139] Memory required for data: 1914800
I0428 19:48:50.257833 26605 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:50.257838 26605 net.cpp:86] Creating Layer ip1
I0428 19:48:50.257840 26605 net.cpp:408] ip1 <- pool1
I0428 19:48:50.257846 26605 net.cpp:382] ip1 -> ip1
I0428 19:48:50.258016 26605 net.cpp:124] Setting up ip1
I0428 19:48:50.258025 26605 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:50.258028 26605 net.cpp:139] Memory required for data: 1934800
I0428 19:48:50.258035 26605 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:50.258044 26605 net.cpp:86] Creating Layer relu1
I0428 19:48:50.258064 26605 net.cpp:408] relu1 <- ip1
I0428 19:48:50.258069 26605 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:50.258245 26605 net.cpp:124] Setting up relu1
I0428 19:48:50.258255 26605 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:48:50.258258 26605 net.cpp:139] Memory required for data: 1954800
I0428 19:48:50.258262 26605 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:50.258270 26605 net.cpp:86] Creating Layer ip2
I0428 19:48:50.258275 26605 net.cpp:408] ip2 <- ip1
I0428 19:48:50.258280 26605 net.cpp:382] ip2 -> ip2
I0428 19:48:50.258406 26605 net.cpp:124] Setting up ip2
I0428 19:48:50.258414 26605 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:50.258415 26605 net.cpp:139] Memory required for data: 1958800
I0428 19:48:50.258421 26605 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:50.258426 26605 net.cpp:86] Creating Layer relu2
I0428 19:48:50.258430 26605 net.cpp:408] relu2 <- ip2
I0428 19:48:50.258435 26605 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:50.258591 26605 net.cpp:124] Setting up relu2
I0428 19:48:50.258599 26605 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:50.258602 26605 net.cpp:139] Memory required for data: 1962800
I0428 19:48:50.258605 26605 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:48:50.258611 26605 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:48:50.258615 26605 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:48:50.258620 26605 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:48:50.258636 26605 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:48:50.258672 26605 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:48:50.258678 26605 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:50.258682 26605 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:50.258684 26605 net.cpp:139] Memory required for data: 1970800
I0428 19:48:50.258687 26605 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:50.258694 26605 net.cpp:86] Creating Layer accuracy
I0428 19:48:50.258700 26605 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:48:50.258719 26605 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:50.258724 26605 net.cpp:382] accuracy -> accuracy
I0428 19:48:50.258731 26605 net.cpp:124] Setting up accuracy
I0428 19:48:50.258735 26605 net.cpp:131] Top shape: (1)
I0428 19:48:50.258738 26605 net.cpp:139] Memory required for data: 1970804
I0428 19:48:50.258741 26605 layer_factory.hpp:77] Creating layer loss
I0428 19:48:50.258745 26605 net.cpp:86] Creating Layer loss
I0428 19:48:50.258749 26605 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:48:50.258751 26605 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:50.258756 26605 net.cpp:382] loss -> loss
I0428 19:48:50.258762 26605 layer_factory.hpp:77] Creating layer loss
I0428 19:48:50.259099 26605 net.cpp:124] Setting up loss
I0428 19:48:50.259109 26605 net.cpp:131] Top shape: (1)
I0428 19:48:50.259127 26605 net.cpp:134]     with loss weight 1
I0428 19:48:50.259135 26605 net.cpp:139] Memory required for data: 1970808
I0428 19:48:50.259145 26605 net.cpp:200] loss needs backward computation.
I0428 19:48:50.259163 26605 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:50.259167 26605 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:48:50.259171 26605 net.cpp:200] relu2 needs backward computation.
I0428 19:48:50.259173 26605 net.cpp:200] ip2 needs backward computation.
I0428 19:48:50.259176 26605 net.cpp:200] relu1 needs backward computation.
I0428 19:48:50.259179 26605 net.cpp:200] ip1 needs backward computation.
I0428 19:48:50.259182 26605 net.cpp:200] pool1 needs backward computation.
I0428 19:48:50.259186 26605 net.cpp:200] conv1 needs backward computation.
I0428 19:48:50.259193 26605 net.cpp:200] pool0 needs backward computation.
I0428 19:48:50.259197 26605 net.cpp:200] conv0 needs backward computation.
I0428 19:48:50.259201 26605 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:50.259223 26605 net.cpp:202] mnist does not need backward computation.
I0428 19:48:50.259241 26605 net.cpp:244] This network produces output accuracy
I0428 19:48:50.259244 26605 net.cpp:244] This network produces output loss
I0428 19:48:50.259271 26605 net.cpp:257] Network initialization done.
I0428 19:48:50.259326 26605 solver.cpp:56] Solver scaffolding done.
I0428 19:48:50.259675 26605 caffe.cpp:248] Starting Optimization
I0428 19:48:50.259680 26605 solver.cpp:273] Solving LeNet
I0428 19:48:50.259682 26605 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:50.260457 26605 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:50.263828 26605 blocking_queue.cpp:49] Waiting for data
I0428 19:48:50.331480 26612 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:50.331948 26605 solver.cpp:398]     Test net output #0: accuracy = 0.1129
I0428 19:48:50.331984 26605 solver.cpp:398]     Test net output #1: loss = 2.34996 (* 1 = 2.34996 loss)
I0428 19:48:50.333763 26605 solver.cpp:219] Iteration 0 (0 iter/s, 0.074026s/100 iters), loss = 2.34775
I0428 19:48:50.333816 26605 solver.cpp:238]     Train net output #0: loss = 2.34775 (* 1 = 2.34775 loss)
I0428 19:48:50.333829 26605 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:50.400945 26605 solver.cpp:219] Iteration 100 (1489.91 iter/s, 0.0671181s/100 iters), loss = 1.48883
I0428 19:48:50.401001 26605 solver.cpp:238]     Train net output #0: loss = 1.48883 (* 1 = 1.48883 loss)
I0428 19:48:50.401023 26605 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:50.470585 26605 solver.cpp:219] Iteration 200 (1436.95 iter/s, 0.0695921s/100 iters), loss = 0.665617
I0428 19:48:50.470636 26605 solver.cpp:238]     Train net output #0: loss = 0.665617 (* 1 = 0.665617 loss)
I0428 19:48:50.470644 26605 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:50.544482 26605 solver.cpp:219] Iteration 300 (1354.04 iter/s, 0.073853s/100 iters), loss = 0.573013
I0428 19:48:50.544538 26605 solver.cpp:238]     Train net output #0: loss = 0.573013 (* 1 = 0.573013 loss)
I0428 19:48:50.544543 26605 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:50.618988 26605 solver.cpp:219] Iteration 400 (1343.17 iter/s, 0.0744509s/100 iters), loss = 0.889946
I0428 19:48:50.619043 26605 solver.cpp:238]     Train net output #0: loss = 0.889946 (* 1 = 0.889946 loss)
I0428 19:48:50.619056 26605 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:50.689759 26605 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:50.742243 26612 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:50.742728 26605 solver.cpp:398]     Test net output #0: accuracy = 0.7622
I0428 19:48:50.742751 26605 solver.cpp:398]     Test net output #1: loss = 0.626715 (* 1 = 0.626715 loss)
I0428 19:48:50.743535 26605 solver.cpp:219] Iteration 500 (803.305 iter/s, 0.124486s/100 iters), loss = 0.762765
I0428 19:48:50.743561 26605 solver.cpp:238]     Train net output #0: loss = 0.762765 (* 1 = 0.762765 loss)
I0428 19:48:50.743569 26605 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:50.812248 26605 solver.cpp:219] Iteration 600 (1456.1 iter/s, 0.0686766s/100 iters), loss = 0.522461
I0428 19:48:50.812278 26605 solver.cpp:238]     Train net output #0: loss = 0.522461 (* 1 = 0.522461 loss)
I0428 19:48:50.812286 26605 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:50.880455 26605 solver.cpp:219] Iteration 700 (1466.97 iter/s, 0.0681677s/100 iters), loss = 0.483371
I0428 19:48:50.880484 26605 solver.cpp:238]     Train net output #0: loss = 0.483371 (* 1 = 0.483371 loss)
I0428 19:48:50.880491 26605 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:50.949103 26605 solver.cpp:219] Iteration 800 (1457.51 iter/s, 0.06861s/100 iters), loss = 0.633324
I0428 19:48:50.949133 26605 solver.cpp:238]     Train net output #0: loss = 0.633324 (* 1 = 0.633324 loss)
I0428 19:48:50.949141 26605 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:51.017846 26605 solver.cpp:219] Iteration 900 (1455.51 iter/s, 0.0687043s/100 iters), loss = 0.274122
I0428 19:48:51.017875 26605 solver.cpp:238]     Train net output #0: loss = 0.274122 (* 1 = 0.274122 loss)
I0428 19:48:51.017882 26605 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:51.040997 26611 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:51.084868 26605 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:51.085513 26605 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:51.085903 26605 solver.cpp:311] Iteration 1000, loss = 0.269962
I0428 19:48:51.085918 26605 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:51.138258 26612 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:51.138743 26605 solver.cpp:398]     Test net output #0: accuracy = 0.8705
I0428 19:48:51.138779 26605 solver.cpp:398]     Test net output #1: loss = 0.345387 (* 1 = 0.345387 loss)
I0428 19:48:51.138784 26605 solver.cpp:316] Optimization Done.
I0428 19:48:51.138787 26605 caffe.cpp:259] Optimization Done.
