I0428 20:13:19.725333 32444 caffe.cpp:218] Using GPUs 0
I0428 20:13:19.762780 32444 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:13:20.284971 32444 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1197.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:13:20.285109 32444 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1197.prototxt
I0428 20:13:20.285511 32444 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:13:20.285528 32444 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:13:20.285624 32444 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:20.285698 32444 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:20.285799 32444 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:13:20.285822 32444 net.cpp:86] Creating Layer mnist
I0428 20:13:20.285830 32444 net.cpp:382] mnist -> data
I0428 20:13:20.285852 32444 net.cpp:382] mnist -> label
I0428 20:13:20.286954 32444 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:13:20.289407 32444 net.cpp:124] Setting up mnist
I0428 20:13:20.289423 32444 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:13:20.289429 32444 net.cpp:131] Top shape: 64 (64)
I0428 20:13:20.289433 32444 net.cpp:139] Memory required for data: 200960
I0428 20:13:20.289440 32444 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:20.289456 32444 net.cpp:86] Creating Layer conv0
I0428 20:13:20.289479 32444 net.cpp:408] conv0 <- data
I0428 20:13:20.289490 32444 net.cpp:382] conv0 -> conv0
I0428 20:13:20.580189 32444 net.cpp:124] Setting up conv0
I0428 20:13:20.580220 32444 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:13:20.580225 32444 net.cpp:139] Memory required for data: 3887360
I0428 20:13:20.580243 32444 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:20.580257 32444 net.cpp:86] Creating Layer pool0
I0428 20:13:20.580262 32444 net.cpp:408] pool0 <- conv0
I0428 20:13:20.580268 32444 net.cpp:382] pool0 -> pool0
I0428 20:13:20.580322 32444 net.cpp:124] Setting up pool0
I0428 20:13:20.580328 32444 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:13:20.580332 32444 net.cpp:139] Memory required for data: 4808960
I0428 20:13:20.580337 32444 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:20.580348 32444 net.cpp:86] Creating Layer conv1
I0428 20:13:20.580353 32444 net.cpp:408] conv1 <- pool0
I0428 20:13:20.580358 32444 net.cpp:382] conv1 -> conv1
I0428 20:13:20.582921 32444 net.cpp:124] Setting up conv1
I0428 20:13:20.582938 32444 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:13:20.582943 32444 net.cpp:139] Memory required for data: 6447360
I0428 20:13:20.582953 32444 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:20.582962 32444 net.cpp:86] Creating Layer pool1
I0428 20:13:20.582967 32444 net.cpp:408] pool1 <- conv1
I0428 20:13:20.582973 32444 net.cpp:382] pool1 -> pool1
I0428 20:13:20.583024 32444 net.cpp:124] Setting up pool1
I0428 20:13:20.583029 32444 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:13:20.583034 32444 net.cpp:139] Memory required for data: 6856960
I0428 20:13:20.583036 32444 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:20.583045 32444 net.cpp:86] Creating Layer ip1
I0428 20:13:20.583048 32444 net.cpp:408] ip1 <- pool1
I0428 20:13:20.583055 32444 net.cpp:382] ip1 -> ip1
I0428 20:13:20.583442 32444 net.cpp:124] Setting up ip1
I0428 20:13:20.583452 32444 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:20.583456 32444 net.cpp:139] Memory required for data: 6863360
I0428 20:13:20.583464 32444 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:20.583472 32444 net.cpp:86] Creating Layer relu1
I0428 20:13:20.583474 32444 net.cpp:408] relu1 <- ip1
I0428 20:13:20.583479 32444 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:20.583678 32444 net.cpp:124] Setting up relu1
I0428 20:13:20.583688 32444 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:13:20.583691 32444 net.cpp:139] Memory required for data: 6869760
I0428 20:13:20.583695 32444 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:20.583703 32444 net.cpp:86] Creating Layer ip2
I0428 20:13:20.583708 32444 net.cpp:408] ip2 <- ip1
I0428 20:13:20.583714 32444 net.cpp:382] ip2 -> ip2
I0428 20:13:20.584846 32444 net.cpp:124] Setting up ip2
I0428 20:13:20.584863 32444 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:13:20.584868 32444 net.cpp:139] Memory required for data: 6882560
I0428 20:13:20.584877 32444 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:20.584884 32444 net.cpp:86] Creating Layer relu2
I0428 20:13:20.584888 32444 net.cpp:408] relu2 <- ip2
I0428 20:13:20.584894 32444 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:20.585758 32444 net.cpp:124] Setting up relu2
I0428 20:13:20.585774 32444 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:13:20.585778 32444 net.cpp:139] Memory required for data: 6895360
I0428 20:13:20.585783 32444 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:20.585791 32444 net.cpp:86] Creating Layer ip3
I0428 20:13:20.585795 32444 net.cpp:408] ip3 <- ip2
I0428 20:13:20.585801 32444 net.cpp:382] ip3 -> ip3
I0428 20:13:20.585925 32444 net.cpp:124] Setting up ip3
I0428 20:13:20.585934 32444 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:20.585938 32444 net.cpp:139] Memory required for data: 6897920
I0428 20:13:20.585948 32444 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:20.585954 32444 net.cpp:86] Creating Layer relu3
I0428 20:13:20.585958 32444 net.cpp:408] relu3 <- ip3
I0428 20:13:20.585963 32444 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:20.586164 32444 net.cpp:124] Setting up relu3
I0428 20:13:20.586174 32444 net.cpp:131] Top shape: 64 10 (640)
I0428 20:13:20.586179 32444 net.cpp:139] Memory required for data: 6900480
I0428 20:13:20.586182 32444 layer_factory.hpp:77] Creating layer loss
I0428 20:13:20.586195 32444 net.cpp:86] Creating Layer loss
I0428 20:13:20.586199 32444 net.cpp:408] loss <- ip3
I0428 20:13:20.586205 32444 net.cpp:408] loss <- label
I0428 20:13:20.586210 32444 net.cpp:382] loss -> loss
I0428 20:13:20.586226 32444 layer_factory.hpp:77] Creating layer loss
I0428 20:13:20.586503 32444 net.cpp:124] Setting up loss
I0428 20:13:20.586514 32444 net.cpp:131] Top shape: (1)
I0428 20:13:20.586519 32444 net.cpp:134]     with loss weight 1
I0428 20:13:20.586535 32444 net.cpp:139] Memory required for data: 6900484
I0428 20:13:20.586539 32444 net.cpp:200] loss needs backward computation.
I0428 20:13:20.586544 32444 net.cpp:200] relu3 needs backward computation.
I0428 20:13:20.586549 32444 net.cpp:200] ip3 needs backward computation.
I0428 20:13:20.586551 32444 net.cpp:200] relu2 needs backward computation.
I0428 20:13:20.586555 32444 net.cpp:200] ip2 needs backward computation.
I0428 20:13:20.586558 32444 net.cpp:200] relu1 needs backward computation.
I0428 20:13:20.586561 32444 net.cpp:200] ip1 needs backward computation.
I0428 20:13:20.586565 32444 net.cpp:200] pool1 needs backward computation.
I0428 20:13:20.586570 32444 net.cpp:200] conv1 needs backward computation.
I0428 20:13:20.586573 32444 net.cpp:200] pool0 needs backward computation.
I0428 20:13:20.586576 32444 net.cpp:200] conv0 needs backward computation.
I0428 20:13:20.586581 32444 net.cpp:202] mnist does not need backward computation.
I0428 20:13:20.586585 32444 net.cpp:244] This network produces output loss
I0428 20:13:20.586596 32444 net.cpp:257] Network initialization done.
I0428 20:13:20.586982 32444 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1197.prototxt
I0428 20:13:20.587013 32444 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:13:20.587121 32444 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:13:20.587216 32444 layer_factory.hpp:77] Creating layer mnist
I0428 20:13:20.587270 32444 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:13:20.587285 32444 net.cpp:86] Creating Layer mnist
I0428 20:13:20.587291 32444 net.cpp:382] mnist -> data
I0428 20:13:20.587301 32444 net.cpp:382] mnist -> label
I0428 20:13:20.587400 32444 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:13:20.589597 32444 net.cpp:124] Setting up mnist
I0428 20:13:20.589614 32444 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:13:20.589620 32444 net.cpp:131] Top shape: 100 (100)
I0428 20:13:20.589623 32444 net.cpp:139] Memory required for data: 314000
I0428 20:13:20.589628 32444 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:13:20.589637 32444 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:13:20.589640 32444 net.cpp:408] label_mnist_1_split <- label
I0428 20:13:20.589646 32444 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:13:20.589654 32444 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:13:20.589751 32444 net.cpp:124] Setting up label_mnist_1_split
I0428 20:13:20.589759 32444 net.cpp:131] Top shape: 100 (100)
I0428 20:13:20.589764 32444 net.cpp:131] Top shape: 100 (100)
I0428 20:13:20.589767 32444 net.cpp:139] Memory required for data: 314800
I0428 20:13:20.589771 32444 layer_factory.hpp:77] Creating layer conv0
I0428 20:13:20.589781 32444 net.cpp:86] Creating Layer conv0
I0428 20:13:20.589785 32444 net.cpp:408] conv0 <- data
I0428 20:13:20.589790 32444 net.cpp:382] conv0 -> conv0
I0428 20:13:20.591805 32444 net.cpp:124] Setting up conv0
I0428 20:13:20.591822 32444 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:13:20.591826 32444 net.cpp:139] Memory required for data: 6074800
I0428 20:13:20.591837 32444 layer_factory.hpp:77] Creating layer pool0
I0428 20:13:20.591846 32444 net.cpp:86] Creating Layer pool0
I0428 20:13:20.591851 32444 net.cpp:408] pool0 <- conv0
I0428 20:13:20.591858 32444 net.cpp:382] pool0 -> pool0
I0428 20:13:20.591903 32444 net.cpp:124] Setting up pool0
I0428 20:13:20.591910 32444 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:13:20.591913 32444 net.cpp:139] Memory required for data: 7514800
I0428 20:13:20.591917 32444 layer_factory.hpp:77] Creating layer conv1
I0428 20:13:20.591928 32444 net.cpp:86] Creating Layer conv1
I0428 20:13:20.591931 32444 net.cpp:408] conv1 <- pool0
I0428 20:13:20.591941 32444 net.cpp:382] conv1 -> conv1
I0428 20:13:20.594167 32444 net.cpp:124] Setting up conv1
I0428 20:13:20.594189 32444 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:13:20.594194 32444 net.cpp:139] Memory required for data: 10074800
I0428 20:13:20.594204 32444 layer_factory.hpp:77] Creating layer pool1
I0428 20:13:20.594213 32444 net.cpp:86] Creating Layer pool1
I0428 20:13:20.594218 32444 net.cpp:408] pool1 <- conv1
I0428 20:13:20.594228 32444 net.cpp:382] pool1 -> pool1
I0428 20:13:20.594275 32444 net.cpp:124] Setting up pool1
I0428 20:13:20.594283 32444 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:13:20.594286 32444 net.cpp:139] Memory required for data: 10714800
I0428 20:13:20.594290 32444 layer_factory.hpp:77] Creating layer ip1
I0428 20:13:20.594300 32444 net.cpp:86] Creating Layer ip1
I0428 20:13:20.594302 32444 net.cpp:408] ip1 <- pool1
I0428 20:13:20.594317 32444 net.cpp:382] ip1 -> ip1
I0428 20:13:20.594717 32444 net.cpp:124] Setting up ip1
I0428 20:13:20.594727 32444 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:20.594743 32444 net.cpp:139] Memory required for data: 10724800
I0428 20:13:20.594761 32444 layer_factory.hpp:77] Creating layer relu1
I0428 20:13:20.594774 32444 net.cpp:86] Creating Layer relu1
I0428 20:13:20.594779 32444 net.cpp:408] relu1 <- ip1
I0428 20:13:20.594789 32444 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:13:20.595068 32444 net.cpp:124] Setting up relu1
I0428 20:13:20.595085 32444 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:13:20.595089 32444 net.cpp:139] Memory required for data: 10734800
I0428 20:13:20.595093 32444 layer_factory.hpp:77] Creating layer ip2
I0428 20:13:20.595101 32444 net.cpp:86] Creating Layer ip2
I0428 20:13:20.595104 32444 net.cpp:408] ip2 <- ip1
I0428 20:13:20.595113 32444 net.cpp:382] ip2 -> ip2
I0428 20:13:20.595266 32444 net.cpp:124] Setting up ip2
I0428 20:13:20.595276 32444 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:13:20.595285 32444 net.cpp:139] Memory required for data: 10754800
I0428 20:13:20.595293 32444 layer_factory.hpp:77] Creating layer relu2
I0428 20:13:20.595299 32444 net.cpp:86] Creating Layer relu2
I0428 20:13:20.595301 32444 net.cpp:408] relu2 <- ip2
I0428 20:13:20.595309 32444 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:13:20.595504 32444 net.cpp:124] Setting up relu2
I0428 20:13:20.595515 32444 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:13:20.595518 32444 net.cpp:139] Memory required for data: 10774800
I0428 20:13:20.595522 32444 layer_factory.hpp:77] Creating layer ip3
I0428 20:13:20.595530 32444 net.cpp:86] Creating Layer ip3
I0428 20:13:20.595546 32444 net.cpp:408] ip3 <- ip2
I0428 20:13:20.595552 32444 net.cpp:382] ip3 -> ip3
I0428 20:13:20.595681 32444 net.cpp:124] Setting up ip3
I0428 20:13:20.595690 32444 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:20.595695 32444 net.cpp:139] Memory required for data: 10778800
I0428 20:13:20.595703 32444 layer_factory.hpp:77] Creating layer relu3
I0428 20:13:20.595710 32444 net.cpp:86] Creating Layer relu3
I0428 20:13:20.595712 32444 net.cpp:408] relu3 <- ip3
I0428 20:13:20.595718 32444 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:13:20.596591 32444 net.cpp:124] Setting up relu3
I0428 20:13:20.596606 32444 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:20.596611 32444 net.cpp:139] Memory required for data: 10782800
I0428 20:13:20.596614 32444 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:13:20.596621 32444 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:13:20.596626 32444 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:13:20.596632 32444 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:13:20.596639 32444 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:13:20.596693 32444 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:13:20.596698 32444 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:20.596704 32444 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:13:20.596706 32444 net.cpp:139] Memory required for data: 10790800
I0428 20:13:20.596711 32444 layer_factory.hpp:77] Creating layer accuracy
I0428 20:13:20.596716 32444 net.cpp:86] Creating Layer accuracy
I0428 20:13:20.596720 32444 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:13:20.596725 32444 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:13:20.596731 32444 net.cpp:382] accuracy -> accuracy
I0428 20:13:20.596740 32444 net.cpp:124] Setting up accuracy
I0428 20:13:20.596745 32444 net.cpp:131] Top shape: (1)
I0428 20:13:20.596748 32444 net.cpp:139] Memory required for data: 10790804
I0428 20:13:20.596751 32444 layer_factory.hpp:77] Creating layer loss
I0428 20:13:20.596757 32444 net.cpp:86] Creating Layer loss
I0428 20:13:20.596760 32444 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:13:20.596765 32444 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:13:20.596771 32444 net.cpp:382] loss -> loss
I0428 20:13:20.596778 32444 layer_factory.hpp:77] Creating layer loss
I0428 20:13:20.597077 32444 net.cpp:124] Setting up loss
I0428 20:13:20.597091 32444 net.cpp:131] Top shape: (1)
I0428 20:13:20.597097 32444 net.cpp:134]     with loss weight 1
I0428 20:13:20.597118 32444 net.cpp:139] Memory required for data: 10790808
I0428 20:13:20.597123 32444 net.cpp:200] loss needs backward computation.
I0428 20:13:20.597127 32444 net.cpp:202] accuracy does not need backward computation.
I0428 20:13:20.597132 32444 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:13:20.597136 32444 net.cpp:200] relu3 needs backward computation.
I0428 20:13:20.597138 32444 net.cpp:200] ip3 needs backward computation.
I0428 20:13:20.597142 32444 net.cpp:200] relu2 needs backward computation.
I0428 20:13:20.597146 32444 net.cpp:200] ip2 needs backward computation.
I0428 20:13:20.597149 32444 net.cpp:200] relu1 needs backward computation.
I0428 20:13:20.597152 32444 net.cpp:200] ip1 needs backward computation.
I0428 20:13:20.597156 32444 net.cpp:200] pool1 needs backward computation.
I0428 20:13:20.597160 32444 net.cpp:200] conv1 needs backward computation.
I0428 20:13:20.597164 32444 net.cpp:200] pool0 needs backward computation.
I0428 20:13:20.597167 32444 net.cpp:200] conv0 needs backward computation.
I0428 20:13:20.597172 32444 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:13:20.597177 32444 net.cpp:202] mnist does not need backward computation.
I0428 20:13:20.597179 32444 net.cpp:244] This network produces output accuracy
I0428 20:13:20.597183 32444 net.cpp:244] This network produces output loss
I0428 20:13:20.597199 32444 net.cpp:257] Network initialization done.
I0428 20:13:20.597249 32444 solver.cpp:56] Solver scaffolding done.
I0428 20:13:20.597668 32444 caffe.cpp:248] Starting Optimization
I0428 20:13:20.597687 32444 solver.cpp:273] Solving LeNet
I0428 20:13:20.597697 32444 solver.cpp:274] Learning Rate Policy: inv
I0428 20:13:20.598688 32444 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:13:20.608631 32444 blocking_queue.cpp:49] Waiting for data
I0428 20:13:20.676913 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:20.677986 32444 solver.cpp:398]     Test net output #0: accuracy = 0.1001
I0428 20:13:20.678017 32444 solver.cpp:398]     Test net output #1: loss = 2.31046 (* 1 = 2.31046 loss)
I0428 20:13:20.683514 32444 solver.cpp:219] Iteration 0 (0 iter/s, 0.0857846s/100 iters), loss = 2.30445
I0428 20:13:20.683544 32444 solver.cpp:238]     Train net output #0: loss = 2.30445 (* 1 = 2.30445 loss)
I0428 20:13:20.683558 32444 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:13:20.890890 32444 solver.cpp:219] Iteration 100 (482.341 iter/s, 0.207322s/100 iters), loss = 0.661271
I0428 20:13:20.890934 32444 solver.cpp:238]     Train net output #0: loss = 0.661271 (* 1 = 0.661271 loss)
I0428 20:13:20.890945 32444 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:13:21.109699 32444 solver.cpp:219] Iteration 200 (457.154 iter/s, 0.218745s/100 iters), loss = 0.425757
I0428 20:13:21.109746 32444 solver.cpp:238]     Train net output #0: loss = 0.425757 (* 1 = 0.425757 loss)
I0428 20:13:21.109758 32444 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:13:21.321527 32444 solver.cpp:219] Iteration 300 (472.224 iter/s, 0.211764s/100 iters), loss = 0.656234
I0428 20:13:21.321566 32444 solver.cpp:238]     Train net output #0: loss = 0.656234 (* 1 = 0.656234 loss)
I0428 20:13:21.321576 32444 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:13:21.530316 32444 solver.cpp:219] Iteration 400 (479.078 iter/s, 0.208734s/100 iters), loss = 0.31661
I0428 20:13:21.530356 32444 solver.cpp:238]     Train net output #0: loss = 0.31661 (* 1 = 0.31661 loss)
I0428 20:13:21.530365 32444 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:13:21.729332 32444 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:13:21.805745 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:21.806771 32444 solver.cpp:398]     Test net output #0: accuracy = 0.8707
I0428 20:13:21.806797 32444 solver.cpp:398]     Test net output #1: loss = 0.352571 (* 1 = 0.352571 loss)
I0428 20:13:21.808764 32444 solver.cpp:219] Iteration 500 (359.209 iter/s, 0.27839s/100 iters), loss = 0.325758
I0428 20:13:21.808817 32444 solver.cpp:238]     Train net output #0: loss = 0.325758 (* 1 = 0.325758 loss)
I0428 20:13:21.808826 32444 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:13:22.007850 32444 solver.cpp:219] Iteration 600 (502.451 iter/s, 0.199024s/100 iters), loss = 0.267451
I0428 20:13:22.007884 32444 solver.cpp:238]     Train net output #0: loss = 0.267451 (* 1 = 0.267451 loss)
I0428 20:13:22.007892 32444 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:13:22.208421 32444 solver.cpp:219] Iteration 700 (498.699 iter/s, 0.200522s/100 iters), loss = 0.237964
I0428 20:13:22.208454 32444 solver.cpp:238]     Train net output #0: loss = 0.237964 (* 1 = 0.237964 loss)
I0428 20:13:22.208463 32444 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:13:22.413992 32444 solver.cpp:219] Iteration 800 (486.568 iter/s, 0.205521s/100 iters), loss = 0.484856
I0428 20:13:22.414032 32444 solver.cpp:238]     Train net output #0: loss = 0.484856 (* 1 = 0.484856 loss)
I0428 20:13:22.414042 32444 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:13:22.614331 32444 solver.cpp:219] Iteration 900 (499.28 iter/s, 0.200288s/100 iters), loss = 0.330915
I0428 20:13:22.614363 32444 solver.cpp:238]     Train net output #0: loss = 0.330915 (* 1 = 0.330915 loss)
I0428 20:13:22.614372 32444 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:13:22.681654 32450 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:22.819507 32444 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:13:22.822739 32444 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:13:22.824291 32444 solver.cpp:311] Iteration 1000, loss = 0.288423
I0428 20:13:22.824311 32444 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:13:22.901813 32451 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:13:22.902863 32444 solver.cpp:398]     Test net output #0: accuracy = 0.8818
I0428 20:13:22.902886 32444 solver.cpp:398]     Test net output #1: loss = 0.298402 (* 1 = 0.298402 loss)
I0428 20:13:22.902892 32444 solver.cpp:316] Optimization Done.
I0428 20:13:22.902896 32444 caffe.cpp:259] Optimization Done.
