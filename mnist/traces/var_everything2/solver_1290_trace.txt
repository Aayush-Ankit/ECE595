I0428 20:17:14.947405   829 caffe.cpp:218] Using GPUs 0
I0428 20:17:14.985476   829 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:15.497473   829 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1290.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:15.497613   829 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1290.prototxt
I0428 20:17:15.497989   829 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:15.498008   829 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:15.498097   829 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:15.498172   829 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:15.498281   829 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:15.498307   829 net.cpp:86] Creating Layer mnist
I0428 20:17:15.498314   829 net.cpp:382] mnist -> data
I0428 20:17:15.498337   829 net.cpp:382] mnist -> label
I0428 20:17:15.499438   829 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:15.501875   829 net.cpp:124] Setting up mnist
I0428 20:17:15.501893   829 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:15.501900   829 net.cpp:131] Top shape: 64 (64)
I0428 20:17:15.501904   829 net.cpp:139] Memory required for data: 200960
I0428 20:17:15.501911   829 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:15.501927   829 net.cpp:86] Creating Layer conv0
I0428 20:17:15.501934   829 net.cpp:408] conv0 <- data
I0428 20:17:15.501945   829 net.cpp:382] conv0 -> conv0
I0428 20:17:15.792254   829 net.cpp:124] Setting up conv0
I0428 20:17:15.792281   829 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:15.792285   829 net.cpp:139] Memory required for data: 7573760
I0428 20:17:15.792318   829 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:15.792333   829 net.cpp:86] Creating Layer pool0
I0428 20:17:15.792338   829 net.cpp:408] pool0 <- conv0
I0428 20:17:15.792343   829 net.cpp:382] pool0 -> pool0
I0428 20:17:15.792395   829 net.cpp:124] Setting up pool0
I0428 20:17:15.792402   829 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:15.792404   829 net.cpp:139] Memory required for data: 9416960
I0428 20:17:15.792407   829 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:15.792421   829 net.cpp:86] Creating Layer conv1
I0428 20:17:15.792425   829 net.cpp:408] conv1 <- pool0
I0428 20:17:15.792430   829 net.cpp:382] conv1 -> conv1
I0428 20:17:15.795253   829 net.cpp:124] Setting up conv1
I0428 20:17:15.795267   829 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:15.795271   829 net.cpp:139] Memory required for data: 9580800
I0428 20:17:15.795280   829 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:15.795289   829 net.cpp:86] Creating Layer pool1
I0428 20:17:15.795292   829 net.cpp:408] pool1 <- conv1
I0428 20:17:15.795300   829 net.cpp:382] pool1 -> pool1
I0428 20:17:15.795338   829 net.cpp:124] Setting up pool1
I0428 20:17:15.795344   829 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:15.795347   829 net.cpp:139] Memory required for data: 9621760
I0428 20:17:15.795351   829 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:15.795358   829 net.cpp:86] Creating Layer ip1
I0428 20:17:15.795361   829 net.cpp:408] ip1 <- pool1
I0428 20:17:15.795366   829 net.cpp:382] ip1 -> ip1
I0428 20:17:15.795480   829 net.cpp:124] Setting up ip1
I0428 20:17:15.795488   829 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:15.795491   829 net.cpp:139] Memory required for data: 9624320
I0428 20:17:15.795498   829 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:15.795506   829 net.cpp:86] Creating Layer relu1
I0428 20:17:15.795509   829 net.cpp:408] relu1 <- ip1
I0428 20:17:15.795513   829 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:15.795691   829 net.cpp:124] Setting up relu1
I0428 20:17:15.795701   829 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:15.795704   829 net.cpp:139] Memory required for data: 9626880
I0428 20:17:15.795707   829 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:15.795713   829 net.cpp:86] Creating Layer ip2
I0428 20:17:15.795717   829 net.cpp:408] ip2 <- ip1
I0428 20:17:15.795722   829 net.cpp:382] ip2 -> ip2
I0428 20:17:15.795824   829 net.cpp:124] Setting up ip2
I0428 20:17:15.795831   829 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:15.795835   829 net.cpp:139] Memory required for data: 9629440
I0428 20:17:15.795840   829 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:15.795846   829 net.cpp:86] Creating Layer relu2
I0428 20:17:15.795850   829 net.cpp:408] relu2 <- ip2
I0428 20:17:15.795853   829 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:15.796583   829 net.cpp:124] Setting up relu2
I0428 20:17:15.796597   829 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:15.796599   829 net.cpp:139] Memory required for data: 9632000
I0428 20:17:15.796603   829 layer_factory.hpp:77] Creating layer loss
I0428 20:17:15.796609   829 net.cpp:86] Creating Layer loss
I0428 20:17:15.796613   829 net.cpp:408] loss <- ip2
I0428 20:17:15.796617   829 net.cpp:408] loss <- label
I0428 20:17:15.796622   829 net.cpp:382] loss -> loss
I0428 20:17:15.796639   829 layer_factory.hpp:77] Creating layer loss
I0428 20:17:15.796900   829 net.cpp:124] Setting up loss
I0428 20:17:15.796911   829 net.cpp:131] Top shape: (1)
I0428 20:17:15.796914   829 net.cpp:134]     with loss weight 1
I0428 20:17:15.796928   829 net.cpp:139] Memory required for data: 9632004
I0428 20:17:15.796931   829 net.cpp:200] loss needs backward computation.
I0428 20:17:15.796936   829 net.cpp:200] relu2 needs backward computation.
I0428 20:17:15.796938   829 net.cpp:200] ip2 needs backward computation.
I0428 20:17:15.796941   829 net.cpp:200] relu1 needs backward computation.
I0428 20:17:15.796944   829 net.cpp:200] ip1 needs backward computation.
I0428 20:17:15.796957   829 net.cpp:200] pool1 needs backward computation.
I0428 20:17:15.796960   829 net.cpp:200] conv1 needs backward computation.
I0428 20:17:15.796963   829 net.cpp:200] pool0 needs backward computation.
I0428 20:17:15.796967   829 net.cpp:200] conv0 needs backward computation.
I0428 20:17:15.796969   829 net.cpp:202] mnist does not need backward computation.
I0428 20:17:15.796972   829 net.cpp:244] This network produces output loss
I0428 20:17:15.796980   829 net.cpp:257] Network initialization done.
I0428 20:17:15.797278   829 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1290.prototxt
I0428 20:17:15.797304   829 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:15.797396   829 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:15.797464   829 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:15.797508   829 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:15.797521   829 net.cpp:86] Creating Layer mnist
I0428 20:17:15.797526   829 net.cpp:382] mnist -> data
I0428 20:17:15.797535   829 net.cpp:382] mnist -> label
I0428 20:17:15.797623   829 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:15.799527   829 net.cpp:124] Setting up mnist
I0428 20:17:15.799540   829 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:15.799546   829 net.cpp:131] Top shape: 100 (100)
I0428 20:17:15.799548   829 net.cpp:139] Memory required for data: 314000
I0428 20:17:15.799552   829 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:15.799561   829 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:15.799563   829 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:15.799568   829 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:15.799603   829 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:15.799681   829 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:15.799688   829 net.cpp:131] Top shape: 100 (100)
I0428 20:17:15.799692   829 net.cpp:131] Top shape: 100 (100)
I0428 20:17:15.799695   829 net.cpp:139] Memory required for data: 314800
I0428 20:17:15.799698   829 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:15.799723   829 net.cpp:86] Creating Layer conv0
I0428 20:17:15.799727   829 net.cpp:408] conv0 <- data
I0428 20:17:15.799749   829 net.cpp:382] conv0 -> conv0
I0428 20:17:15.801538   829 net.cpp:124] Setting up conv0
I0428 20:17:15.801553   829 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:15.801558   829 net.cpp:139] Memory required for data: 11834800
I0428 20:17:15.801568   829 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:15.801574   829 net.cpp:86] Creating Layer pool0
I0428 20:17:15.801578   829 net.cpp:408] pool0 <- conv0
I0428 20:17:15.801582   829 net.cpp:382] pool0 -> pool0
I0428 20:17:15.801620   829 net.cpp:124] Setting up pool0
I0428 20:17:15.801625   829 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:15.801627   829 net.cpp:139] Memory required for data: 14714800
I0428 20:17:15.801630   829 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:15.801640   829 net.cpp:86] Creating Layer conv1
I0428 20:17:15.801643   829 net.cpp:408] conv1 <- pool0
I0428 20:17:15.801651   829 net.cpp:382] conv1 -> conv1
I0428 20:17:15.803252   829 net.cpp:124] Setting up conv1
I0428 20:17:15.803267   829 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:15.803272   829 net.cpp:139] Memory required for data: 14970800
I0428 20:17:15.803280   829 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:15.803287   829 net.cpp:86] Creating Layer pool1
I0428 20:17:15.803289   829 net.cpp:408] pool1 <- conv1
I0428 20:17:15.803297   829 net.cpp:382] pool1 -> pool1
I0428 20:17:15.803333   829 net.cpp:124] Setting up pool1
I0428 20:17:15.803339   829 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:15.803341   829 net.cpp:139] Memory required for data: 15034800
I0428 20:17:15.803344   829 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:15.803351   829 net.cpp:86] Creating Layer ip1
I0428 20:17:15.803354   829 net.cpp:408] ip1 <- pool1
I0428 20:17:15.803361   829 net.cpp:382] ip1 -> ip1
I0428 20:17:15.803478   829 net.cpp:124] Setting up ip1
I0428 20:17:15.803486   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.803489   829 net.cpp:139] Memory required for data: 15038800
I0428 20:17:15.803496   829 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:15.803503   829 net.cpp:86] Creating Layer relu1
I0428 20:17:15.803506   829 net.cpp:408] relu1 <- ip1
I0428 20:17:15.803514   829 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:15.803709   829 net.cpp:124] Setting up relu1
I0428 20:17:15.803719   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.803722   829 net.cpp:139] Memory required for data: 15042800
I0428 20:17:15.803726   829 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:15.803740   829 net.cpp:86] Creating Layer ip2
I0428 20:17:15.803766   829 net.cpp:408] ip2 <- ip1
I0428 20:17:15.803771   829 net.cpp:382] ip2 -> ip2
I0428 20:17:15.803889   829 net.cpp:124] Setting up ip2
I0428 20:17:15.803895   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.803900   829 net.cpp:139] Memory required for data: 15046800
I0428 20:17:15.803905   829 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:15.803910   829 net.cpp:86] Creating Layer relu2
I0428 20:17:15.803912   829 net.cpp:408] relu2 <- ip2
I0428 20:17:15.803917   829 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:15.804085   829 net.cpp:124] Setting up relu2
I0428 20:17:15.804095   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.804097   829 net.cpp:139] Memory required for data: 15050800
I0428 20:17:15.804100   829 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:15.804111   829 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:15.804114   829 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:15.804121   829 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:15.804141   829 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:15.804183   829 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:15.804189   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.804193   829 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:15.804196   829 net.cpp:139] Memory required for data: 15058800
I0428 20:17:15.804198   829 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:15.804204   829 net.cpp:86] Creating Layer accuracy
I0428 20:17:15.804208   829 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:15.804213   829 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:15.804217   829 net.cpp:382] accuracy -> accuracy
I0428 20:17:15.804224   829 net.cpp:124] Setting up accuracy
I0428 20:17:15.804227   829 net.cpp:131] Top shape: (1)
I0428 20:17:15.804230   829 net.cpp:139] Memory required for data: 15058804
I0428 20:17:15.804234   829 layer_factory.hpp:77] Creating layer loss
I0428 20:17:15.804239   829 net.cpp:86] Creating Layer loss
I0428 20:17:15.804242   829 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:15.804246   829 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:15.804250   829 net.cpp:382] loss -> loss
I0428 20:17:15.804255   829 layer_factory.hpp:77] Creating layer loss
I0428 20:17:15.804584   829 net.cpp:124] Setting up loss
I0428 20:17:15.804595   829 net.cpp:131] Top shape: (1)
I0428 20:17:15.804600   829 net.cpp:134]     with loss weight 1
I0428 20:17:15.804606   829 net.cpp:139] Memory required for data: 15058808
I0428 20:17:15.804610   829 net.cpp:200] loss needs backward computation.
I0428 20:17:15.804613   829 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:15.804617   829 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:15.804620   829 net.cpp:200] relu2 needs backward computation.
I0428 20:17:15.804623   829 net.cpp:200] ip2 needs backward computation.
I0428 20:17:15.804626   829 net.cpp:200] relu1 needs backward computation.
I0428 20:17:15.804630   829 net.cpp:200] ip1 needs backward computation.
I0428 20:17:15.804632   829 net.cpp:200] pool1 needs backward computation.
I0428 20:17:15.804636   829 net.cpp:200] conv1 needs backward computation.
I0428 20:17:15.804638   829 net.cpp:200] pool0 needs backward computation.
I0428 20:17:15.804641   829 net.cpp:200] conv0 needs backward computation.
I0428 20:17:15.804646   829 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:15.804649   829 net.cpp:202] mnist does not need backward computation.
I0428 20:17:15.804651   829 net.cpp:244] This network produces output accuracy
I0428 20:17:15.804654   829 net.cpp:244] This network produces output loss
I0428 20:17:15.804666   829 net.cpp:257] Network initialization done.
I0428 20:17:15.804703   829 solver.cpp:56] Solver scaffolding done.
I0428 20:17:15.805001   829 caffe.cpp:248] Starting Optimization
I0428 20:17:15.805008   829 solver.cpp:273] Solving LeNet
I0428 20:17:15.805011   829 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:15.805142   829 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:15.811308   829 blocking_queue.cpp:49] Waiting for data
I0428 20:17:15.883477   836 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:15.884176   829 solver.cpp:398]     Test net output #0: accuracy = 0.0675
I0428 20:17:15.884193   829 solver.cpp:398]     Test net output #1: loss = 2.32146 (* 1 = 2.32146 loss)
I0428 20:17:15.888412   829 solver.cpp:219] Iteration 0 (-7.62719e-35 iter/s, 0.0833736s/100 iters), loss = 2.33056
I0428 20:17:15.888434   829 solver.cpp:238]     Train net output #0: loss = 2.33056 (* 1 = 2.33056 loss)
I0428 20:17:15.888461   829 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:16.004670   829 solver.cpp:219] Iteration 100 (860.43 iter/s, 0.116221s/100 iters), loss = 0.748408
I0428 20:17:16.004696   829 solver.cpp:238]     Train net output #0: loss = 0.748408 (* 1 = 0.748408 loss)
I0428 20:17:16.004719   829 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:16.130394   829 solver.cpp:219] Iteration 200 (795.634 iter/s, 0.125686s/100 iters), loss = 0.835456
I0428 20:17:16.130420   829 solver.cpp:238]     Train net output #0: loss = 0.835456 (* 1 = 0.835456 loss)
I0428 20:17:16.130442   829 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:16.246574   829 solver.cpp:219] Iteration 300 (861.007 iter/s, 0.116143s/100 iters), loss = 0.825958
I0428 20:17:16.246601   829 solver.cpp:238]     Train net output #0: loss = 0.825958 (* 1 = 0.825958 loss)
I0428 20:17:16.246625   829 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:16.361382   829 solver.cpp:219] Iteration 400 (871.308 iter/s, 0.11477s/100 iters), loss = 0.659719
I0428 20:17:16.361424   829 solver.cpp:238]     Train net output #0: loss = 0.659719 (* 1 = 0.659719 loss)
I0428 20:17:16.361431   829 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:16.475453   829 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:16.551972   836 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:16.552687   829 solver.cpp:398]     Test net output #0: accuracy = 0.7609
I0428 20:17:16.552711   829 solver.cpp:398]     Test net output #1: loss = 0.613403 (* 1 = 0.613403 loss)
I0428 20:17:16.553966   829 solver.cpp:219] Iteration 500 (519.365 iter/s, 0.192543s/100 iters), loss = 0.642464
I0428 20:17:16.554006   829 solver.cpp:238]     Train net output #0: loss = 0.642464 (* 1 = 0.642464 loss)
I0428 20:17:16.554014   829 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:16.683786   829 solver.cpp:219] Iteration 600 (770.518 iter/s, 0.129783s/100 iters), loss = 0.615668
I0428 20:17:16.683811   829 solver.cpp:238]     Train net output #0: loss = 0.615668 (* 1 = 0.615668 loss)
I0428 20:17:16.683818   829 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:16.813160   829 solver.cpp:219] Iteration 700 (773.178 iter/s, 0.129336s/100 iters), loss = 0.337917
I0428 20:17:16.813200   829 solver.cpp:238]     Train net output #0: loss = 0.337917 (* 1 = 0.337917 loss)
I0428 20:17:16.813207   829 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:16.929579   829 solver.cpp:219] Iteration 800 (859.234 iter/s, 0.116383s/100 iters), loss = 0.981152
I0428 20:17:16.929618   829 solver.cpp:238]     Train net output #0: loss = 0.981152 (* 1 = 0.981152 loss)
I0428 20:17:16.929625   829 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:17.050819   829 solver.cpp:219] Iteration 900 (825.05 iter/s, 0.121205s/100 iters), loss = 0.845856
I0428 20:17:17.050844   829 solver.cpp:238]     Train net output #0: loss = 0.845856 (* 1 = 0.845856 loss)
I0428 20:17:17.050850   829 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:17.090119   835 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:17.166396   829 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:17.167403   829 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:17.168151   829 solver.cpp:311] Iteration 1000, loss = 0.509511
I0428 20:17:17.168165   829 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:17.228570   836 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:17.230195   829 solver.cpp:398]     Test net output #0: accuracy = 0.7737
I0428 20:17:17.230212   829 solver.cpp:398]     Test net output #1: loss = 0.56154 (* 1 = 0.56154 loss)
I0428 20:17:17.230217   829 solver.cpp:316] Optimization Done.
I0428 20:17:17.230219   829 caffe.cpp:259] Optimization Done.
