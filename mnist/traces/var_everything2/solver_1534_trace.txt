I0428 20:30:09.318289  3681 caffe.cpp:218] Using GPUs 0
I0428 20:30:09.358167  3681 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:30:09.878255  3681 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1534.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:30:09.878394  3681 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1534.prototxt
I0428 20:30:09.878809  3681 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:30:09.878829  3681 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:30:09.878931  3681 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:09.879012  3681 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:09.879109  3681 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:30:09.879132  3681 net.cpp:86] Creating Layer mnist
I0428 20:30:09.879142  3681 net.cpp:382] mnist -> data
I0428 20:30:09.879164  3681 net.cpp:382] mnist -> label
I0428 20:30:09.880264  3681 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:30:09.882719  3681 net.cpp:124] Setting up mnist
I0428 20:30:09.882737  3681 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:30:09.882745  3681 net.cpp:131] Top shape: 64 (64)
I0428 20:30:09.882747  3681 net.cpp:139] Memory required for data: 200960
I0428 20:30:09.882755  3681 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:09.882783  3681 net.cpp:86] Creating Layer conv0
I0428 20:30:09.882805  3681 net.cpp:408] conv0 <- data
I0428 20:30:09.882822  3681 net.cpp:382] conv0 -> conv0
I0428 20:30:10.173779  3681 net.cpp:124] Setting up conv0
I0428 20:30:10.173811  3681 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:30:10.173816  3681 net.cpp:139] Memory required for data: 14946560
I0428 20:30:10.173835  3681 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:10.173849  3681 net.cpp:86] Creating Layer pool0
I0428 20:30:10.173854  3681 net.cpp:408] pool0 <- conv0
I0428 20:30:10.173861  3681 net.cpp:382] pool0 -> pool0
I0428 20:30:10.173916  3681 net.cpp:124] Setting up pool0
I0428 20:30:10.173923  3681 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:30:10.173928  3681 net.cpp:139] Memory required for data: 18632960
I0428 20:30:10.173931  3681 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:10.173944  3681 net.cpp:86] Creating Layer conv1
I0428 20:30:10.173949  3681 net.cpp:408] conv1 <- pool0
I0428 20:30:10.173954  3681 net.cpp:382] conv1 -> conv1
I0428 20:30:10.176250  3681 net.cpp:124] Setting up conv1
I0428 20:30:10.176268  3681 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:30:10.176273  3681 net.cpp:139] Memory required for data: 18796800
I0428 20:30:10.176285  3681 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:10.176293  3681 net.cpp:86] Creating Layer pool1
I0428 20:30:10.176297  3681 net.cpp:408] pool1 <- conv1
I0428 20:30:10.176303  3681 net.cpp:382] pool1 -> pool1
I0428 20:30:10.176347  3681 net.cpp:124] Setting up pool1
I0428 20:30:10.176357  3681 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:30:10.176362  3681 net.cpp:139] Memory required for data: 18837760
I0428 20:30:10.176365  3681 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:10.176374  3681 net.cpp:86] Creating Layer ip1
I0428 20:30:10.176378  3681 net.cpp:408] ip1 <- pool1
I0428 20:30:10.176383  3681 net.cpp:382] ip1 -> ip1
I0428 20:30:10.176511  3681 net.cpp:124] Setting up ip1
I0428 20:30:10.176519  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.176523  3681 net.cpp:139] Memory required for data: 18840320
I0428 20:30:10.176532  3681 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:10.176538  3681 net.cpp:86] Creating Layer relu1
I0428 20:30:10.176542  3681 net.cpp:408] relu1 <- ip1
I0428 20:30:10.176548  3681 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:10.176740  3681 net.cpp:124] Setting up relu1
I0428 20:30:10.176750  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.176754  3681 net.cpp:139] Memory required for data: 18842880
I0428 20:30:10.176759  3681 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:10.176766  3681 net.cpp:86] Creating Layer ip2
I0428 20:30:10.176770  3681 net.cpp:408] ip2 <- ip1
I0428 20:30:10.176775  3681 net.cpp:382] ip2 -> ip2
I0428 20:30:10.176893  3681 net.cpp:124] Setting up ip2
I0428 20:30:10.176903  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.176906  3681 net.cpp:139] Memory required for data: 18845440
I0428 20:30:10.176913  3681 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:10.176920  3681 net.cpp:86] Creating Layer relu2
I0428 20:30:10.176924  3681 net.cpp:408] relu2 <- ip2
I0428 20:30:10.176929  3681 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:10.177767  3681 net.cpp:124] Setting up relu2
I0428 20:30:10.177783  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.177786  3681 net.cpp:139] Memory required for data: 18848000
I0428 20:30:10.177790  3681 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:10.177799  3681 net.cpp:86] Creating Layer ip3
I0428 20:30:10.177803  3681 net.cpp:408] ip3 <- ip2
I0428 20:30:10.177810  3681 net.cpp:382] ip3 -> ip3
I0428 20:30:10.177922  3681 net.cpp:124] Setting up ip3
I0428 20:30:10.177932  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.177935  3681 net.cpp:139] Memory required for data: 18850560
I0428 20:30:10.177944  3681 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:10.177950  3681 net.cpp:86] Creating Layer relu3
I0428 20:30:10.177954  3681 net.cpp:408] relu3 <- ip3
I0428 20:30:10.177959  3681 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:10.178155  3681 net.cpp:124] Setting up relu3
I0428 20:30:10.178165  3681 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:10.178169  3681 net.cpp:139] Memory required for data: 18853120
I0428 20:30:10.178174  3681 layer_factory.hpp:77] Creating layer loss
I0428 20:30:10.178187  3681 net.cpp:86] Creating Layer loss
I0428 20:30:10.178191  3681 net.cpp:408] loss <- ip3
I0428 20:30:10.178196  3681 net.cpp:408] loss <- label
I0428 20:30:10.178203  3681 net.cpp:382] loss -> loss
I0428 20:30:10.178221  3681 layer_factory.hpp:77] Creating layer loss
I0428 20:30:10.178479  3681 net.cpp:124] Setting up loss
I0428 20:30:10.178490  3681 net.cpp:131] Top shape: (1)
I0428 20:30:10.178495  3681 net.cpp:134]     with loss weight 1
I0428 20:30:10.178514  3681 net.cpp:139] Memory required for data: 18853124
I0428 20:30:10.178517  3681 net.cpp:200] loss needs backward computation.
I0428 20:30:10.178522  3681 net.cpp:200] relu3 needs backward computation.
I0428 20:30:10.178526  3681 net.cpp:200] ip3 needs backward computation.
I0428 20:30:10.178530  3681 net.cpp:200] relu2 needs backward computation.
I0428 20:30:10.178534  3681 net.cpp:200] ip2 needs backward computation.
I0428 20:30:10.178537  3681 net.cpp:200] relu1 needs backward computation.
I0428 20:30:10.178541  3681 net.cpp:200] ip1 needs backward computation.
I0428 20:30:10.178545  3681 net.cpp:200] pool1 needs backward computation.
I0428 20:30:10.178549  3681 net.cpp:200] conv1 needs backward computation.
I0428 20:30:10.178553  3681 net.cpp:200] pool0 needs backward computation.
I0428 20:30:10.178556  3681 net.cpp:200] conv0 needs backward computation.
I0428 20:30:10.178561  3681 net.cpp:202] mnist does not need backward computation.
I0428 20:30:10.178565  3681 net.cpp:244] This network produces output loss
I0428 20:30:10.178576  3681 net.cpp:257] Network initialization done.
I0428 20:30:10.178962  3681 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1534.prototxt
I0428 20:30:10.178997  3681 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:30:10.179103  3681 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:10.179198  3681 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:10.179249  3681 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:30:10.179263  3681 net.cpp:86] Creating Layer mnist
I0428 20:30:10.179268  3681 net.cpp:382] mnist -> data
I0428 20:30:10.179278  3681 net.cpp:382] mnist -> label
I0428 20:30:10.179379  3681 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:30:10.181797  3681 net.cpp:124] Setting up mnist
I0428 20:30:10.181814  3681 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:30:10.181820  3681 net.cpp:131] Top shape: 100 (100)
I0428 20:30:10.181824  3681 net.cpp:139] Memory required for data: 314000
I0428 20:30:10.181829  3681 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:30:10.181838  3681 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:30:10.181841  3681 net.cpp:408] label_mnist_1_split <- label
I0428 20:30:10.181848  3681 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:30:10.181855  3681 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:30:10.181912  3681 net.cpp:124] Setting up label_mnist_1_split
I0428 20:30:10.181920  3681 net.cpp:131] Top shape: 100 (100)
I0428 20:30:10.181923  3681 net.cpp:131] Top shape: 100 (100)
I0428 20:30:10.181927  3681 net.cpp:139] Memory required for data: 314800
I0428 20:30:10.181931  3681 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:10.181941  3681 net.cpp:86] Creating Layer conv0
I0428 20:30:10.181944  3681 net.cpp:408] conv0 <- data
I0428 20:30:10.181951  3681 net.cpp:382] conv0 -> conv0
I0428 20:30:10.183871  3681 net.cpp:124] Setting up conv0
I0428 20:30:10.183887  3681 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:30:10.183892  3681 net.cpp:139] Memory required for data: 23354800
I0428 20:30:10.183903  3681 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:10.183912  3681 net.cpp:86] Creating Layer pool0
I0428 20:30:10.183915  3681 net.cpp:408] pool0 <- conv0
I0428 20:30:10.183921  3681 net.cpp:382] pool0 -> pool0
I0428 20:30:10.183962  3681 net.cpp:124] Setting up pool0
I0428 20:30:10.183969  3681 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:30:10.183972  3681 net.cpp:139] Memory required for data: 29114800
I0428 20:30:10.183976  3681 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:10.183987  3681 net.cpp:86] Creating Layer conv1
I0428 20:30:10.183991  3681 net.cpp:408] conv1 <- pool0
I0428 20:30:10.183997  3681 net.cpp:382] conv1 -> conv1
I0428 20:30:10.185850  3681 net.cpp:124] Setting up conv1
I0428 20:30:10.185866  3681 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:30:10.185871  3681 net.cpp:139] Memory required for data: 29370800
I0428 20:30:10.185881  3681 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:10.185889  3681 net.cpp:86] Creating Layer pool1
I0428 20:30:10.185894  3681 net.cpp:408] pool1 <- conv1
I0428 20:30:10.185909  3681 net.cpp:382] pool1 -> pool1
I0428 20:30:10.185952  3681 net.cpp:124] Setting up pool1
I0428 20:30:10.185959  3681 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:30:10.185963  3681 net.cpp:139] Memory required for data: 29434800
I0428 20:30:10.185967  3681 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:10.185974  3681 net.cpp:86] Creating Layer ip1
I0428 20:30:10.185978  3681 net.cpp:408] ip1 <- pool1
I0428 20:30:10.185984  3681 net.cpp:382] ip1 -> ip1
I0428 20:30:10.186107  3681 net.cpp:124] Setting up ip1
I0428 20:30:10.186117  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.186133  3681 net.cpp:139] Memory required for data: 29438800
I0428 20:30:10.186151  3681 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:10.186164  3681 net.cpp:86] Creating Layer relu1
I0428 20:30:10.186168  3681 net.cpp:408] relu1 <- ip1
I0428 20:30:10.186182  3681 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:10.186365  3681 net.cpp:124] Setting up relu1
I0428 20:30:10.186377  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.186380  3681 net.cpp:139] Memory required for data: 29442800
I0428 20:30:10.186384  3681 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:10.186393  3681 net.cpp:86] Creating Layer ip2
I0428 20:30:10.186398  3681 net.cpp:408] ip2 <- ip1
I0428 20:30:10.186403  3681 net.cpp:382] ip2 -> ip2
I0428 20:30:10.186511  3681 net.cpp:124] Setting up ip2
I0428 20:30:10.186518  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.186522  3681 net.cpp:139] Memory required for data: 29446800
I0428 20:30:10.186528  3681 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:10.186535  3681 net.cpp:86] Creating Layer relu2
I0428 20:30:10.186539  3681 net.cpp:408] relu2 <- ip2
I0428 20:30:10.186544  3681 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:10.186779  3681 net.cpp:124] Setting up relu2
I0428 20:30:10.186789  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.186792  3681 net.cpp:139] Memory required for data: 29450800
I0428 20:30:10.186796  3681 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:10.186803  3681 net.cpp:86] Creating Layer ip3
I0428 20:30:10.186815  3681 net.cpp:408] ip3 <- ip2
I0428 20:30:10.186820  3681 net.cpp:382] ip3 -> ip3
I0428 20:30:10.186978  3681 net.cpp:124] Setting up ip3
I0428 20:30:10.186987  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.186990  3681 net.cpp:139] Memory required for data: 29454800
I0428 20:30:10.187000  3681 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:10.187006  3681 net.cpp:86] Creating Layer relu3
I0428 20:30:10.187011  3681 net.cpp:408] relu3 <- ip3
I0428 20:30:10.187016  3681 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:10.187923  3681 net.cpp:124] Setting up relu3
I0428 20:30:10.187937  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.187942  3681 net.cpp:139] Memory required for data: 29458800
I0428 20:30:10.187947  3681 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:30:10.187952  3681 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:30:10.187957  3681 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:30:10.187964  3681 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:30:10.187973  3681 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:30:10.188040  3681 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:30:10.188050  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.188055  3681 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:10.188066  3681 net.cpp:139] Memory required for data: 29466800
I0428 20:30:10.188069  3681 layer_factory.hpp:77] Creating layer accuracy
I0428 20:30:10.188076  3681 net.cpp:86] Creating Layer accuracy
I0428 20:30:10.188079  3681 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:30:10.188084  3681 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:30:10.188097  3681 net.cpp:382] accuracy -> accuracy
I0428 20:30:10.188105  3681 net.cpp:124] Setting up accuracy
I0428 20:30:10.188110  3681 net.cpp:131] Top shape: (1)
I0428 20:30:10.188113  3681 net.cpp:139] Memory required for data: 29466804
I0428 20:30:10.188123  3681 layer_factory.hpp:77] Creating layer loss
I0428 20:30:10.188130  3681 net.cpp:86] Creating Layer loss
I0428 20:30:10.188134  3681 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:30:10.188139  3681 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:30:10.188144  3681 net.cpp:382] loss -> loss
I0428 20:30:10.188151  3681 layer_factory.hpp:77] Creating layer loss
I0428 20:30:10.188442  3681 net.cpp:124] Setting up loss
I0428 20:30:10.188453  3681 net.cpp:131] Top shape: (1)
I0428 20:30:10.188465  3681 net.cpp:134]     with loss weight 1
I0428 20:30:10.188483  3681 net.cpp:139] Memory required for data: 29466808
I0428 20:30:10.188488  3681 net.cpp:200] loss needs backward computation.
I0428 20:30:10.188499  3681 net.cpp:202] accuracy does not need backward computation.
I0428 20:30:10.188503  3681 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:30:10.188508  3681 net.cpp:200] relu3 needs backward computation.
I0428 20:30:10.188511  3681 net.cpp:200] ip3 needs backward computation.
I0428 20:30:10.188521  3681 net.cpp:200] relu2 needs backward computation.
I0428 20:30:10.188525  3681 net.cpp:200] ip2 needs backward computation.
I0428 20:30:10.188529  3681 net.cpp:200] relu1 needs backward computation.
I0428 20:30:10.188532  3681 net.cpp:200] ip1 needs backward computation.
I0428 20:30:10.188535  3681 net.cpp:200] pool1 needs backward computation.
I0428 20:30:10.188539  3681 net.cpp:200] conv1 needs backward computation.
I0428 20:30:10.188544  3681 net.cpp:200] pool0 needs backward computation.
I0428 20:30:10.188547  3681 net.cpp:200] conv0 needs backward computation.
I0428 20:30:10.188551  3681 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:30:10.188556  3681 net.cpp:202] mnist does not need backward computation.
I0428 20:30:10.188560  3681 net.cpp:244] This network produces output accuracy
I0428 20:30:10.188565  3681 net.cpp:244] This network produces output loss
I0428 20:30:10.188580  3681 net.cpp:257] Network initialization done.
I0428 20:30:10.188629  3681 solver.cpp:56] Solver scaffolding done.
I0428 20:30:10.189028  3681 caffe.cpp:248] Starting Optimization
I0428 20:30:10.189038  3681 solver.cpp:273] Solving LeNet
I0428 20:30:10.189040  3681 solver.cpp:274] Learning Rate Policy: inv
I0428 20:30:10.189330  3681 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:30:10.290848  3689 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:10.293545  3681 solver.cpp:398]     Test net output #0: accuracy = 0.1165
I0428 20:30:10.293571  3681 solver.cpp:398]     Test net output #1: loss = 2.29743 (* 1 = 2.29743 loss)
I0428 20:30:10.298472  3681 solver.cpp:219] Iteration 0 (-7.42688e-43 iter/s, 0.109397s/100 iters), loss = 2.26293
I0428 20:30:10.298504  3681 solver.cpp:238]     Train net output #0: loss = 2.26293 (* 1 = 2.26293 loss)
I0428 20:30:10.298518  3681 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:30:10.526449  3681 solver.cpp:219] Iteration 100 (438.752 iter/s, 0.227919s/100 iters), loss = 0.606938
I0428 20:30:10.526501  3681 solver.cpp:238]     Train net output #0: loss = 0.606938 (* 1 = 0.606938 loss)
I0428 20:30:10.526515  3681 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:30:10.755520  3681 solver.cpp:219] Iteration 200 (436.677 iter/s, 0.229002s/100 iters), loss = 0.520558
I0428 20:30:10.755578  3681 solver.cpp:238]     Train net output #0: loss = 0.520558 (* 1 = 0.520558 loss)
I0428 20:30:10.755592  3681 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:30:10.982308  3681 solver.cpp:219] Iteration 300 (441.085 iter/s, 0.226714s/100 iters), loss = 0.413182
I0428 20:30:10.982359  3681 solver.cpp:238]     Train net output #0: loss = 0.413182 (* 1 = 0.413182 loss)
I0428 20:30:10.982373  3681 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:30:11.210525  3681 solver.cpp:219] Iteration 400 (438.308 iter/s, 0.22815s/100 iters), loss = 0.523631
I0428 20:30:11.210573  3681 solver.cpp:238]     Train net output #0: loss = 0.52363 (* 1 = 0.52363 loss)
I0428 20:30:11.210587  3681 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:30:11.434623  3681 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:30:11.539381  3689 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:11.542198  3681 solver.cpp:398]     Test net output #0: accuracy = 0.9351
I0428 20:30:11.542227  3681 solver.cpp:398]     Test net output #1: loss = 0.385093 (* 1 = 0.385093 loss)
I0428 20:30:11.544178  3681 solver.cpp:219] Iteration 500 (299.772 iter/s, 0.333586s/100 iters), loss = 0.295797
I0428 20:30:11.544206  3681 solver.cpp:238]     Train net output #0: loss = 0.295797 (* 1 = 0.295797 loss)
I0428 20:30:11.544230  3681 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:30:11.766360  3681 solver.cpp:219] Iteration 600 (450.18 iter/s, 0.222133s/100 iters), loss = 0.285474
I0428 20:30:11.766405  3681 solver.cpp:238]     Train net output #0: loss = 0.285474 (* 1 = 0.285474 loss)
I0428 20:30:11.766420  3681 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:30:11.993227  3681 solver.cpp:219] Iteration 700 (440.91 iter/s, 0.226804s/100 iters), loss = 0.560947
I0428 20:30:11.993279  3681 solver.cpp:238]     Train net output #0: loss = 0.560947 (* 1 = 0.560947 loss)
I0428 20:30:11.993295  3681 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:30:12.222934  3681 solver.cpp:219] Iteration 800 (435.468 iter/s, 0.229638s/100 iters), loss = 0.505499
I0428 20:30:12.222986  3681 solver.cpp:238]     Train net output #0: loss = 0.505499 (* 1 = 0.505499 loss)
I0428 20:30:12.223000  3681 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:30:12.452143  3681 solver.cpp:219] Iteration 900 (436.414 iter/s, 0.22914s/100 iters), loss = 0.373741
I0428 20:30:12.452193  3681 solver.cpp:238]     Train net output #0: loss = 0.373741 (* 1 = 0.373741 loss)
I0428 20:30:12.452205  3681 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:30:12.528264  3688 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:12.678282  3681 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:30:12.680567  3681 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:30:12.681998  3681 solver.cpp:311] Iteration 1000, loss = 0.390271
I0428 20:30:12.682029  3681 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:30:12.783890  3689 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:12.786540  3681 solver.cpp:398]     Test net output #0: accuracy = 0.9521
I0428 20:30:12.786564  3681 solver.cpp:398]     Test net output #1: loss = 0.356671 (* 1 = 0.356671 loss)
I0428 20:30:12.786571  3681 solver.cpp:316] Optimization Done.
I0428 20:30:12.786576  3681 caffe.cpp:259] Optimization Done.
