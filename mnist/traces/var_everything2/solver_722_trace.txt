I0428 19:54:57.856995 28087 caffe.cpp:218] Using GPUs 0
I0428 19:54:57.885363 28087 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:58.325139 28087 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test722.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:58.325328 28087 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test722.prototxt
I0428 19:54:58.325655 28087 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:58.325670 28087 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:58.325744 28087 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:58.325803 28087 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:58.325880 28087 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:58.325897 28087 net.cpp:86] Creating Layer mnist
I0428 19:54:58.325903 28087 net.cpp:382] mnist -> data
I0428 19:54:58.325922 28087 net.cpp:382] mnist -> label
I0428 19:54:58.326956 28087 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:58.329306 28087 net.cpp:124] Setting up mnist
I0428 19:54:58.329355 28087 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:58.329360 28087 net.cpp:131] Top shape: 64 (64)
I0428 19:54:58.329363 28087 net.cpp:139] Memory required for data: 200960
I0428 19:54:58.329370 28087 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:58.329382 28087 net.cpp:86] Creating Layer conv0
I0428 19:54:58.329416 28087 net.cpp:408] conv0 <- data
I0428 19:54:58.329426 28087 net.cpp:382] conv0 -> conv0
I0428 19:54:58.558367 28087 net.cpp:124] Setting up conv0
I0428 19:54:58.558390 28087 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:58.558394 28087 net.cpp:139] Memory required for data: 938240
I0428 19:54:58.558408 28087 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:58.558420 28087 net.cpp:86] Creating Layer pool0
I0428 19:54:58.558424 28087 net.cpp:408] pool0 <- conv0
I0428 19:54:58.558429 28087 net.cpp:382] pool0 -> pool0
I0428 19:54:58.558490 28087 net.cpp:124] Setting up pool0
I0428 19:54:58.558501 28087 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:58.558504 28087 net.cpp:139] Memory required for data: 1122560
I0428 19:54:58.558507 28087 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:58.558517 28087 net.cpp:86] Creating Layer conv1
I0428 19:54:58.558521 28087 net.cpp:408] conv1 <- pool0
I0428 19:54:58.558524 28087 net.cpp:382] conv1 -> conv1
I0428 19:54:58.561322 28087 net.cpp:124] Setting up conv1
I0428 19:54:58.561352 28087 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:58.561355 28087 net.cpp:139] Memory required for data: 2760960
I0428 19:54:58.561363 28087 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:58.561370 28087 net.cpp:86] Creating Layer pool1
I0428 19:54:58.561373 28087 net.cpp:408] pool1 <- conv1
I0428 19:54:58.561379 28087 net.cpp:382] pool1 -> pool1
I0428 19:54:58.561431 28087 net.cpp:124] Setting up pool1
I0428 19:54:58.561439 28087 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:58.561441 28087 net.cpp:139] Memory required for data: 3170560
I0428 19:54:58.561444 28087 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:58.561451 28087 net.cpp:86] Creating Layer ip1
I0428 19:54:58.561455 28087 net.cpp:408] ip1 <- pool1
I0428 19:54:58.561461 28087 net.cpp:382] ip1 -> ip1
I0428 19:54:58.561640 28087 net.cpp:124] Setting up ip1
I0428 19:54:58.561646 28087 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:58.561650 28087 net.cpp:139] Memory required for data: 3173120
I0428 19:54:58.561656 28087 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:58.561661 28087 net.cpp:86] Creating Layer relu1
I0428 19:54:58.561664 28087 net.cpp:408] relu1 <- ip1
I0428 19:54:58.561669 28087 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:58.561846 28087 net.cpp:124] Setting up relu1
I0428 19:54:58.561854 28087 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:58.561857 28087 net.cpp:139] Memory required for data: 3175680
I0428 19:54:58.561861 28087 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:58.561867 28087 net.cpp:86] Creating Layer ip2
I0428 19:54:58.561869 28087 net.cpp:408] ip2 <- ip1
I0428 19:54:58.561874 28087 net.cpp:382] ip2 -> ip2
I0428 19:54:58.561964 28087 net.cpp:124] Setting up ip2
I0428 19:54:58.561970 28087 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:58.561974 28087 net.cpp:139] Memory required for data: 3188480
I0428 19:54:58.561978 28087 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:58.561983 28087 net.cpp:86] Creating Layer relu2
I0428 19:54:58.561986 28087 net.cpp:408] relu2 <- ip2
I0428 19:54:58.561991 28087 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:58.562700 28087 net.cpp:124] Setting up relu2
I0428 19:54:58.562711 28087 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:58.562731 28087 net.cpp:139] Memory required for data: 3201280
I0428 19:54:58.562734 28087 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:58.562741 28087 net.cpp:86] Creating Layer ip3
I0428 19:54:58.562744 28087 net.cpp:408] ip3 <- ip2
I0428 19:54:58.562749 28087 net.cpp:382] ip3 -> ip3
I0428 19:54:58.562844 28087 net.cpp:124] Setting up ip3
I0428 19:54:58.562851 28087 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:58.562855 28087 net.cpp:139] Memory required for data: 3203840
I0428 19:54:58.562862 28087 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:58.562868 28087 net.cpp:86] Creating Layer relu3
I0428 19:54:58.562870 28087 net.cpp:408] relu3 <- ip3
I0428 19:54:58.562875 28087 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:58.563093 28087 net.cpp:124] Setting up relu3
I0428 19:54:58.563102 28087 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:58.563105 28087 net.cpp:139] Memory required for data: 3206400
I0428 19:54:58.563108 28087 layer_factory.hpp:77] Creating layer loss
I0428 19:54:58.563115 28087 net.cpp:86] Creating Layer loss
I0428 19:54:58.563118 28087 net.cpp:408] loss <- ip3
I0428 19:54:58.563122 28087 net.cpp:408] loss <- label
I0428 19:54:58.563127 28087 net.cpp:382] loss -> loss
I0428 19:54:58.563146 28087 layer_factory.hpp:77] Creating layer loss
I0428 19:54:58.563419 28087 net.cpp:124] Setting up loss
I0428 19:54:58.563443 28087 net.cpp:131] Top shape: (1)
I0428 19:54:58.563446 28087 net.cpp:134]     with loss weight 1
I0428 19:54:58.563475 28087 net.cpp:139] Memory required for data: 3206404
I0428 19:54:58.563478 28087 net.cpp:200] loss needs backward computation.
I0428 19:54:58.563482 28087 net.cpp:200] relu3 needs backward computation.
I0428 19:54:58.563484 28087 net.cpp:200] ip3 needs backward computation.
I0428 19:54:58.563488 28087 net.cpp:200] relu2 needs backward computation.
I0428 19:54:58.563489 28087 net.cpp:200] ip2 needs backward computation.
I0428 19:54:58.563493 28087 net.cpp:200] relu1 needs backward computation.
I0428 19:54:58.563494 28087 net.cpp:200] ip1 needs backward computation.
I0428 19:54:58.563498 28087 net.cpp:200] pool1 needs backward computation.
I0428 19:54:58.563501 28087 net.cpp:200] conv1 needs backward computation.
I0428 19:54:58.563503 28087 net.cpp:200] pool0 needs backward computation.
I0428 19:54:58.563506 28087 net.cpp:200] conv0 needs backward computation.
I0428 19:54:58.563509 28087 net.cpp:202] mnist does not need backward computation.
I0428 19:54:58.563513 28087 net.cpp:244] This network produces output loss
I0428 19:54:58.563522 28087 net.cpp:257] Network initialization done.
I0428 19:54:58.563881 28087 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test722.prototxt
I0428 19:54:58.563925 28087 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:58.564041 28087 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:58.564123 28087 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:58.564167 28087 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:58.564178 28087 net.cpp:86] Creating Layer mnist
I0428 19:54:58.564184 28087 net.cpp:382] mnist -> data
I0428 19:54:58.564191 28087 net.cpp:382] mnist -> label
I0428 19:54:58.564298 28087 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:58.566355 28087 net.cpp:124] Setting up mnist
I0428 19:54:58.566400 28087 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:58.566404 28087 net.cpp:131] Top shape: 100 (100)
I0428 19:54:58.566407 28087 net.cpp:139] Memory required for data: 314000
I0428 19:54:58.566411 28087 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:58.566443 28087 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:58.566448 28087 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:58.566454 28087 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:58.566462 28087 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:58.566505 28087 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:58.566512 28087 net.cpp:131] Top shape: 100 (100)
I0428 19:54:58.566516 28087 net.cpp:131] Top shape: 100 (100)
I0428 19:54:58.566519 28087 net.cpp:139] Memory required for data: 314800
I0428 19:54:58.566522 28087 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:58.566532 28087 net.cpp:86] Creating Layer conv0
I0428 19:54:58.566535 28087 net.cpp:408] conv0 <- data
I0428 19:54:58.566540 28087 net.cpp:382] conv0 -> conv0
I0428 19:54:58.568323 28087 net.cpp:124] Setting up conv0
I0428 19:54:58.568352 28087 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:58.568356 28087 net.cpp:139] Memory required for data: 1466800
I0428 19:54:58.568366 28087 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:58.568378 28087 net.cpp:86] Creating Layer pool0
I0428 19:54:58.568397 28087 net.cpp:408] pool0 <- conv0
I0428 19:54:58.568403 28087 net.cpp:382] pool0 -> pool0
I0428 19:54:58.568455 28087 net.cpp:124] Setting up pool0
I0428 19:54:58.568462 28087 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:58.568465 28087 net.cpp:139] Memory required for data: 1754800
I0428 19:54:58.568467 28087 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:58.568492 28087 net.cpp:86] Creating Layer conv1
I0428 19:54:58.568500 28087 net.cpp:408] conv1 <- pool0
I0428 19:54:58.568507 28087 net.cpp:382] conv1 -> conv1
I0428 19:54:58.570308 28087 net.cpp:124] Setting up conv1
I0428 19:54:58.570322 28087 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:58.570341 28087 net.cpp:139] Memory required for data: 4314800
I0428 19:54:58.570366 28087 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:58.570372 28087 net.cpp:86] Creating Layer pool1
I0428 19:54:58.570376 28087 net.cpp:408] pool1 <- conv1
I0428 19:54:58.570384 28087 net.cpp:382] pool1 -> pool1
I0428 19:54:58.570421 28087 net.cpp:124] Setting up pool1
I0428 19:54:58.570427 28087 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:58.570430 28087 net.cpp:139] Memory required for data: 4954800
I0428 19:54:58.570433 28087 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:58.570441 28087 net.cpp:86] Creating Layer ip1
I0428 19:54:58.570444 28087 net.cpp:408] ip1 <- pool1
I0428 19:54:58.570451 28087 net.cpp:382] ip1 -> ip1
I0428 19:54:58.570650 28087 net.cpp:124] Setting up ip1
I0428 19:54:58.570673 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.570688 28087 net.cpp:139] Memory required for data: 4958800
I0428 19:54:58.570695 28087 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:58.570700 28087 net.cpp:86] Creating Layer relu1
I0428 19:54:58.570704 28087 net.cpp:408] relu1 <- ip1
I0428 19:54:58.570710 28087 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:58.570880 28087 net.cpp:124] Setting up relu1
I0428 19:54:58.570888 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.570893 28087 net.cpp:139] Memory required for data: 4962800
I0428 19:54:58.570894 28087 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:58.570904 28087 net.cpp:86] Creating Layer ip2
I0428 19:54:58.570906 28087 net.cpp:408] ip2 <- ip1
I0428 19:54:58.570911 28087 net.cpp:382] ip2 -> ip2
I0428 19:54:58.571023 28087 net.cpp:124] Setting up ip2
I0428 19:54:58.571032 28087 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:58.571034 28087 net.cpp:139] Memory required for data: 4982800
I0428 19:54:58.571040 28087 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:58.571045 28087 net.cpp:86] Creating Layer relu2
I0428 19:54:58.571049 28087 net.cpp:408] relu2 <- ip2
I0428 19:54:58.571053 28087 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:58.571300 28087 net.cpp:124] Setting up relu2
I0428 19:54:58.571321 28087 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:58.571326 28087 net.cpp:139] Memory required for data: 5002800
I0428 19:54:58.571328 28087 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:58.571336 28087 net.cpp:86] Creating Layer ip3
I0428 19:54:58.571338 28087 net.cpp:408] ip3 <- ip2
I0428 19:54:58.571343 28087 net.cpp:382] ip3 -> ip3
I0428 19:54:58.571461 28087 net.cpp:124] Setting up ip3
I0428 19:54:58.571470 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.571472 28087 net.cpp:139] Memory required for data: 5006800
I0428 19:54:58.571480 28087 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:58.571486 28087 net.cpp:86] Creating Layer relu3
I0428 19:54:58.571490 28087 net.cpp:408] relu3 <- ip3
I0428 19:54:58.571493 28087 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:58.572326 28087 net.cpp:124] Setting up relu3
I0428 19:54:58.572343 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.572362 28087 net.cpp:139] Memory required for data: 5010800
I0428 19:54:58.572365 28087 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:54:58.572371 28087 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:54:58.572374 28087 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:54:58.572378 28087 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:54:58.572386 28087 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:54:58.572434 28087 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:54:58.572440 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.572444 28087 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:58.572448 28087 net.cpp:139] Memory required for data: 5018800
I0428 19:54:58.572455 28087 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:58.572460 28087 net.cpp:86] Creating Layer accuracy
I0428 19:54:58.572463 28087 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:54:58.572468 28087 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:58.572474 28087 net.cpp:382] accuracy -> accuracy
I0428 19:54:58.572480 28087 net.cpp:124] Setting up accuracy
I0428 19:54:58.572484 28087 net.cpp:131] Top shape: (1)
I0428 19:54:58.572487 28087 net.cpp:139] Memory required for data: 5018804
I0428 19:54:58.572490 28087 layer_factory.hpp:77] Creating layer loss
I0428 19:54:58.572495 28087 net.cpp:86] Creating Layer loss
I0428 19:54:58.572499 28087 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:54:58.572502 28087 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:58.572506 28087 net.cpp:382] loss -> loss
I0428 19:54:58.572512 28087 layer_factory.hpp:77] Creating layer loss
I0428 19:54:58.572785 28087 net.cpp:124] Setting up loss
I0428 19:54:58.572796 28087 net.cpp:131] Top shape: (1)
I0428 19:54:58.572823 28087 net.cpp:134]     with loss weight 1
I0428 19:54:58.572840 28087 net.cpp:139] Memory required for data: 5018808
I0428 19:54:58.572845 28087 net.cpp:200] loss needs backward computation.
I0428 19:54:58.572849 28087 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:58.572854 28087 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:54:58.572857 28087 net.cpp:200] relu3 needs backward computation.
I0428 19:54:58.572860 28087 net.cpp:200] ip3 needs backward computation.
I0428 19:54:58.572863 28087 net.cpp:200] relu2 needs backward computation.
I0428 19:54:58.572866 28087 net.cpp:200] ip2 needs backward computation.
I0428 19:54:58.572870 28087 net.cpp:200] relu1 needs backward computation.
I0428 19:54:58.572872 28087 net.cpp:200] ip1 needs backward computation.
I0428 19:54:58.572875 28087 net.cpp:200] pool1 needs backward computation.
I0428 19:54:58.572880 28087 net.cpp:200] conv1 needs backward computation.
I0428 19:54:58.572882 28087 net.cpp:200] pool0 needs backward computation.
I0428 19:54:58.572885 28087 net.cpp:200] conv0 needs backward computation.
I0428 19:54:58.572890 28087 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:58.572899 28087 net.cpp:202] mnist does not need backward computation.
I0428 19:54:58.572902 28087 net.cpp:244] This network produces output accuracy
I0428 19:54:58.572906 28087 net.cpp:244] This network produces output loss
I0428 19:54:58.572919 28087 net.cpp:257] Network initialization done.
I0428 19:54:58.572964 28087 solver.cpp:56] Solver scaffolding done.
I0428 19:54:58.573382 28087 caffe.cpp:248] Starting Optimization
I0428 19:54:58.573388 28087 solver.cpp:273] Solving LeNet
I0428 19:54:58.573391 28087 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:58.574271 28087 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:58.579622 28087 blocking_queue.cpp:49] Waiting for data
I0428 19:54:58.649930 28094 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:58.650549 28087 solver.cpp:398]     Test net output #0: accuracy = 0.1003
I0428 19:54:58.650585 28087 solver.cpp:398]     Test net output #1: loss = 2.30969 (* 1 = 2.30969 loss)
I0428 19:54:58.654356 28087 solver.cpp:219] Iteration 0 (-2.2172e-31 iter/s, 0.0809062s/100 iters), loss = 2.30311
I0428 19:54:58.654397 28087 solver.cpp:238]     Train net output #0: loss = 2.30311 (* 1 = 2.30311 loss)
I0428 19:54:58.654408 28087 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:58.796278 28087 solver.cpp:219] Iteration 100 (704.87 iter/s, 0.14187s/100 iters), loss = 0.847904
I0428 19:54:58.796319 28087 solver.cpp:238]     Train net output #0: loss = 0.847904 (* 1 = 0.847904 loss)
I0428 19:54:58.796325 28087 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:58.948802 28087 solver.cpp:219] Iteration 200 (655.882 iter/s, 0.152466s/100 iters), loss = 0.673558
I0428 19:54:58.948843 28087 solver.cpp:238]     Train net output #0: loss = 0.673558 (* 1 = 0.673558 loss)
I0428 19:54:58.948851 28087 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:59.097110 28087 solver.cpp:219] Iteration 300 (674.51 iter/s, 0.148256s/100 iters), loss = 0.44193
I0428 19:54:59.097141 28087 solver.cpp:238]     Train net output #0: loss = 0.44193 (* 1 = 0.44193 loss)
I0428 19:54:59.097149 28087 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:59.241856 28087 solver.cpp:219] Iteration 400 (691.072 iter/s, 0.144703s/100 iters), loss = 0.186429
I0428 19:54:59.241899 28087 solver.cpp:238]     Train net output #0: loss = 0.186429 (* 1 = 0.186429 loss)
I0428 19:54:59.241906 28087 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:59.398344 28087 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:59.455637 28094 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:59.457454 28087 solver.cpp:398]     Test net output #0: accuracy = 0.9452
I0428 19:54:59.457476 28087 solver.cpp:398]     Test net output #1: loss = 0.177324 (* 1 = 0.177324 loss)
I0428 19:54:59.458871 28087 solver.cpp:219] Iteration 500 (460.921 iter/s, 0.216957s/100 iters), loss = 0.154601
I0428 19:54:59.458915 28087 solver.cpp:238]     Train net output #0: loss = 0.154601 (* 1 = 0.154601 loss)
I0428 19:54:59.458923 28087 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:59.605914 28087 solver.cpp:219] Iteration 600 (680.332 iter/s, 0.146987s/100 iters), loss = 0.155194
I0428 19:54:59.605949 28087 solver.cpp:238]     Train net output #0: loss = 0.155194 (* 1 = 0.155194 loss)
I0428 19:54:59.605957 28087 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:59.757447 28087 solver.cpp:219] Iteration 700 (660.094 iter/s, 0.151494s/100 iters), loss = 0.204238
I0428 19:54:59.757488 28087 solver.cpp:238]     Train net output #0: loss = 0.204238 (* 1 = 0.204238 loss)
I0428 19:54:59.757495 28087 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:59.901165 28087 solver.cpp:219] Iteration 800 (696.003 iter/s, 0.143677s/100 iters), loss = 0.399796
I0428 19:54:59.901228 28087 solver.cpp:238]     Train net output #0: loss = 0.399796 (* 1 = 0.399796 loss)
I0428 19:54:59.901234 28087 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:00.044839 28087 solver.cpp:219] Iteration 900 (696.33 iter/s, 0.14361s/100 iters), loss = 0.138023
I0428 19:55:00.044880 28087 solver.cpp:238]     Train net output #0: loss = 0.138023 (* 1 = 0.138023 loss)
I0428 19:55:00.044903 28087 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:00.090786 28093 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:00.198515 28087 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:00.200582 28087 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:00.201593 28087 solver.cpp:311] Iteration 1000, loss = 0.159855
I0428 19:55:00.201618 28087 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:00.267689 28094 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:00.268332 28087 solver.cpp:398]     Test net output #0: accuracy = 0.9701
I0428 19:55:00.268357 28087 solver.cpp:398]     Test net output #1: loss = 0.0938542 (* 1 = 0.0938542 loss)
I0428 19:55:00.268363 28087 solver.cpp:316] Optimization Done.
I0428 19:55:00.268368 28087 caffe.cpp:259] Optimization Done.
