I0428 19:54:52.125385 28071 caffe.cpp:218] Using GPUs 0
I0428 19:54:52.162330 28071 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:52.671406 28071 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test720.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:52.671541 28071 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test720.prototxt
I0428 19:54:52.671962 28071 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:52.671982 28071 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:52.672083 28071 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:52.672163 28071 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:52.672262 28071 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:52.672286 28071 net.cpp:86] Creating Layer mnist
I0428 19:54:52.672293 28071 net.cpp:382] mnist -> data
I0428 19:54:52.672315 28071 net.cpp:382] mnist -> label
I0428 19:54:52.673414 28071 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:52.675858 28071 net.cpp:124] Setting up mnist
I0428 19:54:52.675874 28071 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:52.675880 28071 net.cpp:131] Top shape: 64 (64)
I0428 19:54:52.675884 28071 net.cpp:139] Memory required for data: 200960
I0428 19:54:52.675890 28071 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:52.675921 28071 net.cpp:86] Creating Layer conv0
I0428 19:54:52.675942 28071 net.cpp:408] conv0 <- data
I0428 19:54:52.675954 28071 net.cpp:382] conv0 -> conv0
I0428 19:54:52.930678 28071 net.cpp:124] Setting up conv0
I0428 19:54:52.930718 28071 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:52.930722 28071 net.cpp:139] Memory required for data: 938240
I0428 19:54:52.930737 28071 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:52.930750 28071 net.cpp:86] Creating Layer pool0
I0428 19:54:52.930768 28071 net.cpp:408] pool0 <- conv0
I0428 19:54:52.930773 28071 net.cpp:382] pool0 -> pool0
I0428 19:54:52.930833 28071 net.cpp:124] Setting up pool0
I0428 19:54:52.930848 28071 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:52.930851 28071 net.cpp:139] Memory required for data: 1122560
I0428 19:54:52.930855 28071 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:52.930866 28071 net.cpp:86] Creating Layer conv1
I0428 19:54:52.930868 28071 net.cpp:408] conv1 <- pool0
I0428 19:54:52.930873 28071 net.cpp:382] conv1 -> conv1
I0428 19:54:52.933794 28071 net.cpp:124] Setting up conv1
I0428 19:54:52.933823 28071 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:52.933827 28071 net.cpp:139] Memory required for data: 2760960
I0428 19:54:52.933835 28071 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:52.933843 28071 net.cpp:86] Creating Layer pool1
I0428 19:54:52.933847 28071 net.cpp:408] pool1 <- conv1
I0428 19:54:52.933852 28071 net.cpp:382] pool1 -> pool1
I0428 19:54:52.933905 28071 net.cpp:124] Setting up pool1
I0428 19:54:52.933912 28071 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:52.933913 28071 net.cpp:139] Memory required for data: 3170560
I0428 19:54:52.933917 28071 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:52.933924 28071 net.cpp:86] Creating Layer ip1
I0428 19:54:52.933928 28071 net.cpp:408] ip1 <- pool1
I0428 19:54:52.933933 28071 net.cpp:382] ip1 -> ip1
I0428 19:54:52.934128 28071 net.cpp:124] Setting up ip1
I0428 19:54:52.934137 28071 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:52.934140 28071 net.cpp:139] Memory required for data: 3173120
I0428 19:54:52.934146 28071 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:52.934152 28071 net.cpp:86] Creating Layer relu1
I0428 19:54:52.934155 28071 net.cpp:408] relu1 <- ip1
I0428 19:54:52.934159 28071 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:52.934312 28071 net.cpp:124] Setting up relu1
I0428 19:54:52.934321 28071 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:52.934324 28071 net.cpp:139] Memory required for data: 3175680
I0428 19:54:52.934327 28071 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:52.934334 28071 net.cpp:86] Creating Layer ip2
I0428 19:54:52.934337 28071 net.cpp:408] ip2 <- ip1
I0428 19:54:52.934341 28071 net.cpp:382] ip2 -> ip2
I0428 19:54:52.934433 28071 net.cpp:124] Setting up ip2
I0428 19:54:52.934442 28071 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:52.934444 28071 net.cpp:139] Memory required for data: 3188480
I0428 19:54:52.934449 28071 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:52.934455 28071 net.cpp:86] Creating Layer relu2
I0428 19:54:52.934458 28071 net.cpp:408] relu2 <- ip2
I0428 19:54:52.934463 28071 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:52.935323 28071 net.cpp:124] Setting up relu2
I0428 19:54:52.935334 28071 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:54:52.935353 28071 net.cpp:139] Memory required for data: 3201280
I0428 19:54:52.935356 28071 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:52.935364 28071 net.cpp:86] Creating Layer ip3
I0428 19:54:52.935369 28071 net.cpp:408] ip3 <- ip2
I0428 19:54:52.935374 28071 net.cpp:382] ip3 -> ip3
I0428 19:54:52.935472 28071 net.cpp:124] Setting up ip3
I0428 19:54:52.935479 28071 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:52.935482 28071 net.cpp:139] Memory required for data: 3203840
I0428 19:54:52.935490 28071 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:52.935495 28071 net.cpp:86] Creating Layer relu3
I0428 19:54:52.935498 28071 net.cpp:408] relu3 <- ip3
I0428 19:54:52.935503 28071 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:52.935689 28071 net.cpp:124] Setting up relu3
I0428 19:54:52.935698 28071 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:52.935700 28071 net.cpp:139] Memory required for data: 3206400
I0428 19:54:52.935703 28071 layer_factory.hpp:77] Creating layer loss
I0428 19:54:52.935709 28071 net.cpp:86] Creating Layer loss
I0428 19:54:52.935712 28071 net.cpp:408] loss <- ip3
I0428 19:54:52.935716 28071 net.cpp:408] loss <- label
I0428 19:54:52.935721 28071 net.cpp:382] loss -> loss
I0428 19:54:52.935739 28071 layer_factory.hpp:77] Creating layer loss
I0428 19:54:52.935967 28071 net.cpp:124] Setting up loss
I0428 19:54:52.935976 28071 net.cpp:131] Top shape: (1)
I0428 19:54:52.935981 28071 net.cpp:134]     with loss weight 1
I0428 19:54:52.935994 28071 net.cpp:139] Memory required for data: 3206404
I0428 19:54:52.935997 28071 net.cpp:200] loss needs backward computation.
I0428 19:54:52.936002 28071 net.cpp:200] relu3 needs backward computation.
I0428 19:54:52.936004 28071 net.cpp:200] ip3 needs backward computation.
I0428 19:54:52.936007 28071 net.cpp:200] relu2 needs backward computation.
I0428 19:54:52.936010 28071 net.cpp:200] ip2 needs backward computation.
I0428 19:54:52.936013 28071 net.cpp:200] relu1 needs backward computation.
I0428 19:54:52.936015 28071 net.cpp:200] ip1 needs backward computation.
I0428 19:54:52.936018 28071 net.cpp:200] pool1 needs backward computation.
I0428 19:54:52.936022 28071 net.cpp:200] conv1 needs backward computation.
I0428 19:54:52.936025 28071 net.cpp:200] pool0 needs backward computation.
I0428 19:54:52.936028 28071 net.cpp:200] conv0 needs backward computation.
I0428 19:54:52.936031 28071 net.cpp:202] mnist does not need backward computation.
I0428 19:54:52.936034 28071 net.cpp:244] This network produces output loss
I0428 19:54:52.936043 28071 net.cpp:257] Network initialization done.
I0428 19:54:52.936467 28071 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test720.prototxt
I0428 19:54:52.936511 28071 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:52.936630 28071 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:52.936708 28071 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:52.936753 28071 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:52.936765 28071 net.cpp:86] Creating Layer mnist
I0428 19:54:52.936770 28071 net.cpp:382] mnist -> data
I0428 19:54:52.936779 28071 net.cpp:382] mnist -> label
I0428 19:54:52.936913 28071 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:52.939007 28071 net.cpp:124] Setting up mnist
I0428 19:54:52.939034 28071 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:52.939039 28071 net.cpp:131] Top shape: 100 (100)
I0428 19:54:52.939043 28071 net.cpp:139] Memory required for data: 314000
I0428 19:54:52.939047 28071 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:52.939054 28071 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:52.939057 28071 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:52.939062 28071 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:52.939069 28071 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:52.939121 28071 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:52.939126 28071 net.cpp:131] Top shape: 100 (100)
I0428 19:54:52.939129 28071 net.cpp:131] Top shape: 100 (100)
I0428 19:54:52.939132 28071 net.cpp:139] Memory required for data: 314800
I0428 19:54:52.939136 28071 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:52.939143 28071 net.cpp:86] Creating Layer conv0
I0428 19:54:52.939146 28071 net.cpp:408] conv0 <- data
I0428 19:54:52.939151 28071 net.cpp:382] conv0 -> conv0
I0428 19:54:52.940801 28071 net.cpp:124] Setting up conv0
I0428 19:54:52.940837 28071 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:52.940841 28071 net.cpp:139] Memory required for data: 1466800
I0428 19:54:52.940866 28071 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:52.940888 28071 net.cpp:86] Creating Layer pool0
I0428 19:54:52.940892 28071 net.cpp:408] pool0 <- conv0
I0428 19:54:52.940897 28071 net.cpp:382] pool0 -> pool0
I0428 19:54:52.940935 28071 net.cpp:124] Setting up pool0
I0428 19:54:52.940940 28071 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:52.940944 28071 net.cpp:139] Memory required for data: 1754800
I0428 19:54:52.940948 28071 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:52.940955 28071 net.cpp:86] Creating Layer conv1
I0428 19:54:52.940958 28071 net.cpp:408] conv1 <- pool0
I0428 19:54:52.940963 28071 net.cpp:382] conv1 -> conv1
I0428 19:54:52.942620 28071 net.cpp:124] Setting up conv1
I0428 19:54:52.942634 28071 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:52.942638 28071 net.cpp:139] Memory required for data: 4314800
I0428 19:54:52.942647 28071 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:52.942653 28071 net.cpp:86] Creating Layer pool1
I0428 19:54:52.942656 28071 net.cpp:408] pool1 <- conv1
I0428 19:54:52.942662 28071 net.cpp:382] pool1 -> pool1
I0428 19:54:52.942698 28071 net.cpp:124] Setting up pool1
I0428 19:54:52.942703 28071 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:52.942706 28071 net.cpp:139] Memory required for data: 4954800
I0428 19:54:52.942709 28071 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:52.942714 28071 net.cpp:86] Creating Layer ip1
I0428 19:54:52.942734 28071 net.cpp:408] ip1 <- pool1
I0428 19:54:52.942739 28071 net.cpp:382] ip1 -> ip1
I0428 19:54:52.942957 28071 net.cpp:124] Setting up ip1
I0428 19:54:52.942966 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.942981 28071 net.cpp:139] Memory required for data: 4958800
I0428 19:54:52.942996 28071 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:52.943002 28071 net.cpp:86] Creating Layer relu1
I0428 19:54:52.943006 28071 net.cpp:408] relu1 <- ip1
I0428 19:54:52.943011 28071 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:52.943186 28071 net.cpp:124] Setting up relu1
I0428 19:54:52.943194 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.943197 28071 net.cpp:139] Memory required for data: 4962800
I0428 19:54:52.943207 28071 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:52.943214 28071 net.cpp:86] Creating Layer ip2
I0428 19:54:52.943217 28071 net.cpp:408] ip2 <- ip1
I0428 19:54:52.943222 28071 net.cpp:382] ip2 -> ip2
I0428 19:54:52.943316 28071 net.cpp:124] Setting up ip2
I0428 19:54:52.943325 28071 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:52.943327 28071 net.cpp:139] Memory required for data: 4982800
I0428 19:54:52.943333 28071 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:52.943337 28071 net.cpp:86] Creating Layer relu2
I0428 19:54:52.943341 28071 net.cpp:408] relu2 <- ip2
I0428 19:54:52.943344 28071 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:52.943506 28071 net.cpp:124] Setting up relu2
I0428 19:54:52.943516 28071 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:54:52.943518 28071 net.cpp:139] Memory required for data: 5002800
I0428 19:54:52.943522 28071 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:52.943527 28071 net.cpp:86] Creating Layer ip3
I0428 19:54:52.943531 28071 net.cpp:408] ip3 <- ip2
I0428 19:54:52.943536 28071 net.cpp:382] ip3 -> ip3
I0428 19:54:52.943662 28071 net.cpp:124] Setting up ip3
I0428 19:54:52.943670 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.943672 28071 net.cpp:139] Memory required for data: 5006800
I0428 19:54:52.943681 28071 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:52.943686 28071 net.cpp:86] Creating Layer relu3
I0428 19:54:52.943688 28071 net.cpp:408] relu3 <- ip3
I0428 19:54:52.943692 28071 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:52.944597 28071 net.cpp:124] Setting up relu3
I0428 19:54:52.944607 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.944612 28071 net.cpp:139] Memory required for data: 5010800
I0428 19:54:52.944614 28071 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:54:52.944620 28071 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:54:52.944623 28071 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:54:52.944628 28071 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:54:52.944634 28071 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:54:52.944669 28071 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:54:52.944674 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.944679 28071 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:52.944681 28071 net.cpp:139] Memory required for data: 5018800
I0428 19:54:52.944684 28071 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:52.944689 28071 net.cpp:86] Creating Layer accuracy
I0428 19:54:52.944691 28071 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:54:52.944696 28071 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:52.944706 28071 net.cpp:382] accuracy -> accuracy
I0428 19:54:52.944713 28071 net.cpp:124] Setting up accuracy
I0428 19:54:52.944717 28071 net.cpp:131] Top shape: (1)
I0428 19:54:52.944720 28071 net.cpp:139] Memory required for data: 5018804
I0428 19:54:52.944722 28071 layer_factory.hpp:77] Creating layer loss
I0428 19:54:52.944726 28071 net.cpp:86] Creating Layer loss
I0428 19:54:52.944730 28071 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:54:52.944748 28071 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:52.944753 28071 net.cpp:382] loss -> loss
I0428 19:54:52.944758 28071 layer_factory.hpp:77] Creating layer loss
I0428 19:54:52.945030 28071 net.cpp:124] Setting up loss
I0428 19:54:52.945041 28071 net.cpp:131] Top shape: (1)
I0428 19:54:52.945045 28071 net.cpp:134]     with loss weight 1
I0428 19:54:52.945091 28071 net.cpp:139] Memory required for data: 5018808
I0428 19:54:52.945094 28071 net.cpp:200] loss needs backward computation.
I0428 19:54:52.945098 28071 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:52.945102 28071 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:54:52.945106 28071 net.cpp:200] relu3 needs backward computation.
I0428 19:54:52.945109 28071 net.cpp:200] ip3 needs backward computation.
I0428 19:54:52.945112 28071 net.cpp:200] relu2 needs backward computation.
I0428 19:54:52.945116 28071 net.cpp:200] ip2 needs backward computation.
I0428 19:54:52.945119 28071 net.cpp:200] relu1 needs backward computation.
I0428 19:54:52.945137 28071 net.cpp:200] ip1 needs backward computation.
I0428 19:54:52.945147 28071 net.cpp:200] pool1 needs backward computation.
I0428 19:54:52.945150 28071 net.cpp:200] conv1 needs backward computation.
I0428 19:54:52.945153 28071 net.cpp:200] pool0 needs backward computation.
I0428 19:54:52.945157 28071 net.cpp:200] conv0 needs backward computation.
I0428 19:54:52.945165 28071 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:52.945184 28071 net.cpp:202] mnist does not need backward computation.
I0428 19:54:52.945188 28071 net.cpp:244] This network produces output accuracy
I0428 19:54:52.945190 28071 net.cpp:244] This network produces output loss
I0428 19:54:52.945199 28071 net.cpp:257] Network initialization done.
I0428 19:54:52.945237 28071 solver.cpp:56] Solver scaffolding done.
I0428 19:54:52.945600 28071 caffe.cpp:248] Starting Optimization
I0428 19:54:52.945606 28071 solver.cpp:273] Solving LeNet
I0428 19:54:52.945610 28071 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:52.946439 28071 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:52.951988 28071 blocking_queue.cpp:49] Waiting for data
I0428 19:54:53.022121 28078 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:53.022745 28071 solver.cpp:398]     Test net output #0: accuracy = 0.0694
I0428 19:54:53.022763 28071 solver.cpp:398]     Test net output #1: loss = 2.31084 (* 1 = 2.31084 loss)
I0428 19:54:53.026587 28071 solver.cpp:219] Iteration 0 (0 iter/s, 0.0809544s/100 iters), loss = 2.31389
I0428 19:54:53.026610 28071 solver.cpp:238]     Train net output #0: loss = 2.31389 (* 1 = 2.31389 loss)
I0428 19:54:53.026621 28071 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:53.169296 28071 solver.cpp:219] Iteration 100 (700.899 iter/s, 0.142674s/100 iters), loss = 0.727257
I0428 19:54:53.169319 28071 solver.cpp:238]     Train net output #0: loss = 0.727257 (* 1 = 0.727257 loss)
I0428 19:54:53.169325 28071 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:53.310650 28071 solver.cpp:219] Iteration 200 (707.623 iter/s, 0.141318s/100 iters), loss = 0.439891
I0428 19:54:53.310672 28071 solver.cpp:238]     Train net output #0: loss = 0.439891 (* 1 = 0.439891 loss)
I0428 19:54:53.310678 28071 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:53.453999 28071 solver.cpp:219] Iteration 300 (697.768 iter/s, 0.143314s/100 iters), loss = 0.325318
I0428 19:54:53.454025 28071 solver.cpp:238]     Train net output #0: loss = 0.325318 (* 1 = 0.325318 loss)
I0428 19:54:53.454030 28071 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:53.613174 28071 solver.cpp:219] Iteration 400 (628.395 iter/s, 0.159136s/100 iters), loss = 0.100631
I0428 19:54:53.613207 28071 solver.cpp:238]     Train net output #0: loss = 0.100631 (* 1 = 0.100631 loss)
I0428 19:54:53.613215 28071 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:53.765391 28071 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:53.822037 28078 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:53.823850 28071 solver.cpp:398]     Test net output #0: accuracy = 0.9503
I0428 19:54:53.823873 28071 solver.cpp:398]     Test net output #1: loss = 0.159376 (* 1 = 0.159376 loss)
I0428 19:54:53.825304 28071 solver.cpp:219] Iteration 500 (471.514 iter/s, 0.212083s/100 iters), loss = 0.113433
I0428 19:54:53.825343 28071 solver.cpp:238]     Train net output #0: loss = 0.113433 (* 1 = 0.113433 loss)
I0428 19:54:53.825350 28071 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:53.967136 28071 solver.cpp:219] Iteration 600 (705.313 iter/s, 0.141781s/100 iters), loss = 0.10096
I0428 19:54:53.967164 28071 solver.cpp:238]     Train net output #0: loss = 0.10096 (* 1 = 0.10096 loss)
I0428 19:54:53.967171 28071 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:54.108260 28071 solver.cpp:219] Iteration 700 (708.8 iter/s, 0.141084s/100 iters), loss = 0.208017
I0428 19:54:54.108289 28071 solver.cpp:238]     Train net output #0: loss = 0.208017 (* 1 = 0.208017 loss)
I0428 19:54:54.108296 28071 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:54.249003 28071 solver.cpp:219] Iteration 800 (710.729 iter/s, 0.140701s/100 iters), loss = 0.228459
I0428 19:54:54.249032 28071 solver.cpp:238]     Train net output #0: loss = 0.228459 (* 1 = 0.228459 loss)
I0428 19:54:54.249039 28071 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:54.392213 28071 solver.cpp:219] Iteration 900 (698.478 iter/s, 0.143168s/100 iters), loss = 0.188258
I0428 19:54:54.392257 28071 solver.cpp:238]     Train net output #0: loss = 0.188258 (* 1 = 0.188258 loss)
I0428 19:54:54.392263 28071 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:54.439909 28077 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:54.533262 28071 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:54.534926 28071 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:54.535672 28071 solver.cpp:311] Iteration 1000, loss = 0.186568
I0428 19:54:54.535688 28071 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:54.605887 28078 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:54.606483 28071 solver.cpp:398]     Test net output #0: accuracy = 0.967
I0428 19:54:54.606501 28071 solver.cpp:398]     Test net output #1: loss = 0.103535 (* 1 = 0.103535 loss)
I0428 19:54:54.606506 28071 solver.cpp:316] Optimization Done.
I0428 19:54:54.606509 28071 caffe.cpp:259] Optimization Done.
