I0428 20:05:39.612360 30667 caffe.cpp:218] Using GPUs 0
I0428 20:05:39.654368 30667 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:05:40.232336 30667 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1006.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:05:40.232502 30667 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1006.prototxt
I0428 20:05:40.233094 30667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:05:40.233119 30667 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:05:40.233258 30667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:40.233357 30667 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:40.233485 30667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:05:40.233516 30667 net.cpp:86] Creating Layer mnist
I0428 20:05:40.233527 30667 net.cpp:382] mnist -> data
I0428 20:05:40.233556 30667 net.cpp:382] mnist -> label
I0428 20:05:40.234990 30667 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:05:40.238203 30667 net.cpp:124] Setting up mnist
I0428 20:05:40.238224 30667 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:05:40.238234 30667 net.cpp:131] Top shape: 64 (64)
I0428 20:05:40.238240 30667 net.cpp:139] Memory required for data: 200960
I0428 20:05:40.238250 30667 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:40.238270 30667 net.cpp:86] Creating Layer conv0
I0428 20:05:40.238296 30667 net.cpp:408] conv0 <- data
I0428 20:05:40.238312 30667 net.cpp:382] conv0 -> conv0
I0428 20:05:40.549618 30667 net.cpp:124] Setting up conv0
I0428 20:05:40.549650 30667 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:05:40.549655 30667 net.cpp:139] Memory required for data: 3887360
I0428 20:05:40.549674 30667 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:40.549690 30667 net.cpp:86] Creating Layer pool0
I0428 20:05:40.549695 30667 net.cpp:408] pool0 <- conv0
I0428 20:05:40.549701 30667 net.cpp:382] pool0 -> pool0
I0428 20:05:40.549769 30667 net.cpp:124] Setting up pool0
I0428 20:05:40.549792 30667 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:05:40.549796 30667 net.cpp:139] Memory required for data: 4808960
I0428 20:05:40.549800 30667 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:40.549814 30667 net.cpp:86] Creating Layer conv1
I0428 20:05:40.549819 30667 net.cpp:408] conv1 <- pool0
I0428 20:05:40.549826 30667 net.cpp:382] conv1 -> conv1
I0428 20:05:40.553478 30667 net.cpp:124] Setting up conv1
I0428 20:05:40.553509 30667 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:05:40.553514 30667 net.cpp:139] Memory required for data: 4841728
I0428 20:05:40.553525 30667 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:40.553534 30667 net.cpp:86] Creating Layer pool1
I0428 20:05:40.553539 30667 net.cpp:408] pool1 <- conv1
I0428 20:05:40.553545 30667 net.cpp:382] pool1 -> pool1
I0428 20:05:40.553603 30667 net.cpp:124] Setting up pool1
I0428 20:05:40.553622 30667 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:05:40.553625 30667 net.cpp:139] Memory required for data: 4849920
I0428 20:05:40.553645 30667 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:40.553654 30667 net.cpp:86] Creating Layer ip1
I0428 20:05:40.553659 30667 net.cpp:408] ip1 <- pool1
I0428 20:05:40.553666 30667 net.cpp:382] ip1 -> ip1
I0428 20:05:40.553807 30667 net.cpp:124] Setting up ip1
I0428 20:05:40.553817 30667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:40.553822 30667 net.cpp:139] Memory required for data: 4862720
I0428 20:05:40.553833 30667 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:40.553839 30667 net.cpp:86] Creating Layer relu1
I0428 20:05:40.553844 30667 net.cpp:408] relu1 <- ip1
I0428 20:05:40.553850 30667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:40.554069 30667 net.cpp:124] Setting up relu1
I0428 20:05:40.554080 30667 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:05:40.554085 30667 net.cpp:139] Memory required for data: 4875520
I0428 20:05:40.554090 30667 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:40.554097 30667 net.cpp:86] Creating Layer ip2
I0428 20:05:40.554101 30667 net.cpp:408] ip2 <- ip1
I0428 20:05:40.554108 30667 net.cpp:382] ip2 -> ip2
I0428 20:05:40.554225 30667 net.cpp:124] Setting up ip2
I0428 20:05:40.554235 30667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:40.554239 30667 net.cpp:139] Memory required for data: 4878080
I0428 20:05:40.554247 30667 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:40.554255 30667 net.cpp:86] Creating Layer relu2
I0428 20:05:40.554260 30667 net.cpp:408] relu2 <- ip2
I0428 20:05:40.554265 30667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:40.555220 30667 net.cpp:124] Setting up relu2
I0428 20:05:40.555235 30667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:40.555254 30667 net.cpp:139] Memory required for data: 4880640
I0428 20:05:40.555259 30667 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:40.555269 30667 net.cpp:86] Creating Layer ip3
I0428 20:05:40.555274 30667 net.cpp:408] ip3 <- ip2
I0428 20:05:40.555282 30667 net.cpp:382] ip3 -> ip3
I0428 20:05:40.555400 30667 net.cpp:124] Setting up ip3
I0428 20:05:40.555410 30667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:40.555415 30667 net.cpp:139] Memory required for data: 4883200
I0428 20:05:40.555426 30667 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:40.555433 30667 net.cpp:86] Creating Layer relu3
I0428 20:05:40.555438 30667 net.cpp:408] relu3 <- ip3
I0428 20:05:40.555444 30667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:40.555649 30667 net.cpp:124] Setting up relu3
I0428 20:05:40.555661 30667 net.cpp:131] Top shape: 64 10 (640)
I0428 20:05:40.555666 30667 net.cpp:139] Memory required for data: 4885760
I0428 20:05:40.555670 30667 layer_factory.hpp:77] Creating layer loss
I0428 20:05:40.555678 30667 net.cpp:86] Creating Layer loss
I0428 20:05:40.555682 30667 net.cpp:408] loss <- ip3
I0428 20:05:40.555690 30667 net.cpp:408] loss <- label
I0428 20:05:40.555696 30667 net.cpp:382] loss -> loss
I0428 20:05:40.555713 30667 layer_factory.hpp:77] Creating layer loss
I0428 20:05:40.556023 30667 net.cpp:124] Setting up loss
I0428 20:05:40.556035 30667 net.cpp:131] Top shape: (1)
I0428 20:05:40.556056 30667 net.cpp:134]     with loss weight 1
I0428 20:05:40.556072 30667 net.cpp:139] Memory required for data: 4885764
I0428 20:05:40.556077 30667 net.cpp:200] loss needs backward computation.
I0428 20:05:40.556082 30667 net.cpp:200] relu3 needs backward computation.
I0428 20:05:40.556087 30667 net.cpp:200] ip3 needs backward computation.
I0428 20:05:40.556092 30667 net.cpp:200] relu2 needs backward computation.
I0428 20:05:40.556097 30667 net.cpp:200] ip2 needs backward computation.
I0428 20:05:40.556100 30667 net.cpp:200] relu1 needs backward computation.
I0428 20:05:40.556105 30667 net.cpp:200] ip1 needs backward computation.
I0428 20:05:40.556110 30667 net.cpp:200] pool1 needs backward computation.
I0428 20:05:40.556114 30667 net.cpp:200] conv1 needs backward computation.
I0428 20:05:40.556120 30667 net.cpp:200] pool0 needs backward computation.
I0428 20:05:40.556124 30667 net.cpp:200] conv0 needs backward computation.
I0428 20:05:40.556143 30667 net.cpp:202] mnist does not need backward computation.
I0428 20:05:40.556147 30667 net.cpp:244] This network produces output loss
I0428 20:05:40.556160 30667 net.cpp:257] Network initialization done.
I0428 20:05:40.556619 30667 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1006.prototxt
I0428 20:05:40.556671 30667 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:05:40.556833 30667 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:05:40.556993 30667 layer_factory.hpp:77] Creating layer mnist
I0428 20:05:40.557050 30667 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:05:40.557067 30667 net.cpp:86] Creating Layer mnist
I0428 20:05:40.557075 30667 net.cpp:382] mnist -> data
I0428 20:05:40.557085 30667 net.cpp:382] mnist -> label
I0428 20:05:40.557214 30667 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:05:40.559947 30667 net.cpp:124] Setting up mnist
I0428 20:05:40.559974 30667 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:05:40.559980 30667 net.cpp:131] Top shape: 100 (100)
I0428 20:05:40.559985 30667 net.cpp:139] Memory required for data: 314000
I0428 20:05:40.559990 30667 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:05:40.560014 30667 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:05:40.560017 30667 net.cpp:408] label_mnist_1_split <- label
I0428 20:05:40.560024 30667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:05:40.560034 30667 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:05:40.560086 30667 net.cpp:124] Setting up label_mnist_1_split
I0428 20:05:40.560093 30667 net.cpp:131] Top shape: 100 (100)
I0428 20:05:40.560098 30667 net.cpp:131] Top shape: 100 (100)
I0428 20:05:40.560102 30667 net.cpp:139] Memory required for data: 314800
I0428 20:05:40.560107 30667 layer_factory.hpp:77] Creating layer conv0
I0428 20:05:40.560117 30667 net.cpp:86] Creating Layer conv0
I0428 20:05:40.560122 30667 net.cpp:408] conv0 <- data
I0428 20:05:40.560129 30667 net.cpp:382] conv0 -> conv0
I0428 20:05:40.562494 30667 net.cpp:124] Setting up conv0
I0428 20:05:40.562510 30667 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:05:40.562515 30667 net.cpp:139] Memory required for data: 6074800
I0428 20:05:40.562526 30667 layer_factory.hpp:77] Creating layer pool0
I0428 20:05:40.562549 30667 net.cpp:86] Creating Layer pool0
I0428 20:05:40.562554 30667 net.cpp:408] pool0 <- conv0
I0428 20:05:40.562561 30667 net.cpp:382] pool0 -> pool0
I0428 20:05:40.562604 30667 net.cpp:124] Setting up pool0
I0428 20:05:40.562611 30667 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:05:40.562631 30667 net.cpp:139] Memory required for data: 7514800
I0428 20:05:40.562636 30667 layer_factory.hpp:77] Creating layer conv1
I0428 20:05:40.562649 30667 net.cpp:86] Creating Layer conv1
I0428 20:05:40.562654 30667 net.cpp:408] conv1 <- pool0
I0428 20:05:40.562661 30667 net.cpp:382] conv1 -> conv1
I0428 20:05:40.565503 30667 net.cpp:124] Setting up conv1
I0428 20:05:40.565520 30667 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:05:40.565526 30667 net.cpp:139] Memory required for data: 7566000
I0428 20:05:40.565536 30667 layer_factory.hpp:77] Creating layer pool1
I0428 20:05:40.565559 30667 net.cpp:86] Creating Layer pool1
I0428 20:05:40.565565 30667 net.cpp:408] pool1 <- conv1
I0428 20:05:40.565572 30667 net.cpp:382] pool1 -> pool1
I0428 20:05:40.565621 30667 net.cpp:124] Setting up pool1
I0428 20:05:40.565639 30667 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:05:40.565642 30667 net.cpp:139] Memory required for data: 7578800
I0428 20:05:40.565647 30667 layer_factory.hpp:77] Creating layer ip1
I0428 20:05:40.565670 30667 net.cpp:86] Creating Layer ip1
I0428 20:05:40.565675 30667 net.cpp:408] ip1 <- pool1
I0428 20:05:40.565680 30667 net.cpp:382] ip1 -> ip1
I0428 20:05:40.565829 30667 net.cpp:124] Setting up ip1
I0428 20:05:40.565841 30667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:40.565865 30667 net.cpp:139] Memory required for data: 7598800
I0428 20:05:40.565876 30667 layer_factory.hpp:77] Creating layer relu1
I0428 20:05:40.565884 30667 net.cpp:86] Creating Layer relu1
I0428 20:05:40.565889 30667 net.cpp:408] relu1 <- ip1
I0428 20:05:40.565896 30667 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:05:40.566117 30667 net.cpp:124] Setting up relu1
I0428 20:05:40.566128 30667 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:05:40.566133 30667 net.cpp:139] Memory required for data: 7618800
I0428 20:05:40.566138 30667 layer_factory.hpp:77] Creating layer ip2
I0428 20:05:40.566148 30667 net.cpp:86] Creating Layer ip2
I0428 20:05:40.566153 30667 net.cpp:408] ip2 <- ip1
I0428 20:05:40.566159 30667 net.cpp:382] ip2 -> ip2
I0428 20:05:40.566305 30667 net.cpp:124] Setting up ip2
I0428 20:05:40.566315 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.566319 30667 net.cpp:139] Memory required for data: 7622800
I0428 20:05:40.566328 30667 layer_factory.hpp:77] Creating layer relu2
I0428 20:05:40.566334 30667 net.cpp:86] Creating Layer relu2
I0428 20:05:40.566337 30667 net.cpp:408] relu2 <- ip2
I0428 20:05:40.566344 30667 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:05:40.566555 30667 net.cpp:124] Setting up relu2
I0428 20:05:40.566565 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.566570 30667 net.cpp:139] Memory required for data: 7626800
I0428 20:05:40.566576 30667 layer_factory.hpp:77] Creating layer ip3
I0428 20:05:40.566586 30667 net.cpp:86] Creating Layer ip3
I0428 20:05:40.566589 30667 net.cpp:408] ip3 <- ip2
I0428 20:05:40.566596 30667 net.cpp:382] ip3 -> ip3
I0428 20:05:40.566710 30667 net.cpp:124] Setting up ip3
I0428 20:05:40.566720 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.566725 30667 net.cpp:139] Memory required for data: 7630800
I0428 20:05:40.566735 30667 layer_factory.hpp:77] Creating layer relu3
I0428 20:05:40.566742 30667 net.cpp:86] Creating Layer relu3
I0428 20:05:40.566768 30667 net.cpp:408] relu3 <- ip3
I0428 20:05:40.566776 30667 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:05:40.567900 30667 net.cpp:124] Setting up relu3
I0428 20:05:40.567915 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.567921 30667 net.cpp:139] Memory required for data: 7634800
I0428 20:05:40.567926 30667 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:05:40.567934 30667 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:05:40.567939 30667 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:05:40.567953 30667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:05:40.567961 30667 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:05:40.568007 30667 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:05:40.568017 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.568022 30667 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:05:40.568027 30667 net.cpp:139] Memory required for data: 7642800
I0428 20:05:40.568032 30667 layer_factory.hpp:77] Creating layer accuracy
I0428 20:05:40.568039 30667 net.cpp:86] Creating Layer accuracy
I0428 20:05:40.568050 30667 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:05:40.568056 30667 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:05:40.568063 30667 net.cpp:382] accuracy -> accuracy
I0428 20:05:40.568073 30667 net.cpp:124] Setting up accuracy
I0428 20:05:40.568084 30667 net.cpp:131] Top shape: (1)
I0428 20:05:40.568089 30667 net.cpp:139] Memory required for data: 7642804
I0428 20:05:40.568094 30667 layer_factory.hpp:77] Creating layer loss
I0428 20:05:40.568100 30667 net.cpp:86] Creating Layer loss
I0428 20:05:40.568105 30667 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:05:40.568111 30667 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:05:40.568117 30667 net.cpp:382] loss -> loss
I0428 20:05:40.568125 30667 layer_factory.hpp:77] Creating layer loss
I0428 20:05:40.568449 30667 net.cpp:124] Setting up loss
I0428 20:05:40.568460 30667 net.cpp:131] Top shape: (1)
I0428 20:05:40.568465 30667 net.cpp:134]     with loss weight 1
I0428 20:05:40.568475 30667 net.cpp:139] Memory required for data: 7642808
I0428 20:05:40.568490 30667 net.cpp:200] loss needs backward computation.
I0428 20:05:40.568495 30667 net.cpp:202] accuracy does not need backward computation.
I0428 20:05:40.568500 30667 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:05:40.568512 30667 net.cpp:200] relu3 needs backward computation.
I0428 20:05:40.568516 30667 net.cpp:200] ip3 needs backward computation.
I0428 20:05:40.568521 30667 net.cpp:200] relu2 needs backward computation.
I0428 20:05:40.568524 30667 net.cpp:200] ip2 needs backward computation.
I0428 20:05:40.568529 30667 net.cpp:200] relu1 needs backward computation.
I0428 20:05:40.568533 30667 net.cpp:200] ip1 needs backward computation.
I0428 20:05:40.568538 30667 net.cpp:200] pool1 needs backward computation.
I0428 20:05:40.568542 30667 net.cpp:200] conv1 needs backward computation.
I0428 20:05:40.568547 30667 net.cpp:200] pool0 needs backward computation.
I0428 20:05:40.568557 30667 net.cpp:200] conv0 needs backward computation.
I0428 20:05:40.568562 30667 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:05:40.568567 30667 net.cpp:202] mnist does not need backward computation.
I0428 20:05:40.568572 30667 net.cpp:244] This network produces output accuracy
I0428 20:05:40.568575 30667 net.cpp:244] This network produces output loss
I0428 20:05:40.568588 30667 net.cpp:257] Network initialization done.
I0428 20:05:40.568639 30667 solver.cpp:56] Solver scaffolding done.
I0428 20:05:40.569128 30667 caffe.cpp:248] Starting Optimization
I0428 20:05:40.569151 30667 solver.cpp:273] Solving LeNet
I0428 20:05:40.569156 30667 solver.cpp:274] Learning Rate Policy: inv
I0428 20:05:40.570288 30667 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:05:40.577114 30667 blocking_queue.cpp:49] Waiting for data
I0428 20:05:40.646837 30674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:40.649287 30667 solver.cpp:398]     Test net output #0: accuracy = 0.0985
I0428 20:05:40.649339 30667 solver.cpp:398]     Test net output #1: loss = 2.30471 (* 1 = 2.30471 loss)
I0428 20:05:40.654446 30667 solver.cpp:219] Iteration 0 (-6.63238e-31 iter/s, 0.0852541s/100 iters), loss = 2.28409
I0428 20:05:40.654503 30667 solver.cpp:238]     Train net output #0: loss = 2.28409 (* 1 = 2.28409 loss)
I0428 20:05:40.654523 30667 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:05:40.754128 30667 solver.cpp:219] Iteration 100 (1003.85 iter/s, 0.0996168s/100 iters), loss = 0.508038
I0428 20:05:40.754169 30667 solver.cpp:238]     Train net output #0: loss = 0.508038 (* 1 = 0.508038 loss)
I0428 20:05:40.754178 30667 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:05:40.845760 30667 solver.cpp:219] Iteration 200 (1091.83 iter/s, 0.0915897s/100 iters), loss = 0.438288
I0428 20:05:40.845788 30667 solver.cpp:238]     Train net output #0: loss = 0.438288 (* 1 = 0.438288 loss)
I0428 20:05:40.845800 30667 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:05:40.947314 30667 solver.cpp:219] Iteration 300 (985.093 iter/s, 0.101513s/100 iters), loss = 0.368393
I0428 20:05:40.947350 30667 solver.cpp:238]     Train net output #0: loss = 0.368393 (* 1 = 0.368393 loss)
I0428 20:05:40.947358 30667 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:05:41.048885 30667 solver.cpp:219] Iteration 400 (985.003 iter/s, 0.101523s/100 iters), loss = 0.220817
I0428 20:05:41.048921 30667 solver.cpp:238]     Train net output #0: loss = 0.220817 (* 1 = 0.220817 loss)
I0428 20:05:41.048936 30667 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:05:41.140297 30667 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:05:41.196965 30674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:41.197726 30667 solver.cpp:398]     Test net output #0: accuracy = 0.9155
I0428 20:05:41.197747 30667 solver.cpp:398]     Test net output #1: loss = 0.271991 (* 1 = 0.271991 loss)
I0428 20:05:41.198675 30667 solver.cpp:219] Iteration 500 (667.817 iter/s, 0.149742s/100 iters), loss = 0.414406
I0428 20:05:41.198719 30667 solver.cpp:238]     Train net output #0: loss = 0.414406 (* 1 = 0.414406 loss)
I0428 20:05:41.198727 30667 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:05:41.289463 30667 solver.cpp:219] Iteration 600 (1102.13 iter/s, 0.0907336s/100 iters), loss = 0.205135
I0428 20:05:41.289490 30667 solver.cpp:238]     Train net output #0: loss = 0.205135 (* 1 = 0.205135 loss)
I0428 20:05:41.289497 30667 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:05:41.381438 30667 solver.cpp:219] Iteration 700 (1087.69 iter/s, 0.0919378s/100 iters), loss = 0.278312
I0428 20:05:41.381467 30667 solver.cpp:238]     Train net output #0: loss = 0.278312 (* 1 = 0.278312 loss)
I0428 20:05:41.381474 30667 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:05:41.471312 30667 solver.cpp:219] Iteration 800 (1113.16 iter/s, 0.0898345s/100 iters), loss = 0.269501
I0428 20:05:41.471339 30667 solver.cpp:238]     Train net output #0: loss = 0.269501 (* 1 = 0.269501 loss)
I0428 20:05:41.471346 30667 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:05:41.560792 30667 solver.cpp:219] Iteration 900 (1118.03 iter/s, 0.0894434s/100 iters), loss = 0.239665
I0428 20:05:41.560827 30667 solver.cpp:238]     Train net output #0: loss = 0.239665 (* 1 = 0.239665 loss)
I0428 20:05:41.560834 30667 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:05:41.590662 30673 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:41.650101 30667 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:05:41.650830 30667 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:05:41.651374 30667 solver.cpp:311] Iteration 1000, loss = 0.264734
I0428 20:05:41.651393 30667 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:05:41.713825 30674 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:05:41.714462 30667 solver.cpp:398]     Test net output #0: accuracy = 0.9503
I0428 20:05:41.714485 30667 solver.cpp:398]     Test net output #1: loss = 0.16256 (* 1 = 0.16256 loss)
I0428 20:05:41.714491 30667 solver.cpp:316] Optimization Done.
I0428 20:05:41.714494 30667 caffe.cpp:259] Optimization Done.
