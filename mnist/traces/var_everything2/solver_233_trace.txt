I0428 19:35:50.183096 23601 caffe.cpp:218] Using GPUs 0
I0428 19:35:50.223572 23601 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:35:50.742853 23601 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test233.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:35:50.743032 23601 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test233.prototxt
I0428 19:35:50.743410 23601 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:35:50.743434 23601 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:35:50.743535 23601 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:50.743646 23601 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:50.743778 23601 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:35:50.743811 23601 net.cpp:86] Creating Layer mnist
I0428 19:35:50.743824 23601 net.cpp:382] mnist -> data
I0428 19:35:50.743856 23601 net.cpp:382] mnist -> label
I0428 19:35:50.745095 23601 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:35:50.747568 23601 net.cpp:124] Setting up mnist
I0428 19:35:50.747588 23601 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:35:50.747598 23601 net.cpp:131] Top shape: 64 (64)
I0428 19:35:50.747604 23601 net.cpp:139] Memory required for data: 200960
I0428 19:35:50.747614 23601 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:50.747642 23601 net.cpp:86] Creating Layer conv0
I0428 19:35:50.747653 23601 net.cpp:408] conv0 <- data
I0428 19:35:50.747670 23601 net.cpp:382] conv0 -> conv0
I0428 19:35:51.039243 23601 net.cpp:124] Setting up conv0
I0428 19:35:51.039274 23601 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:35:51.039281 23601 net.cpp:139] Memory required for data: 7573760
I0428 19:35:51.039304 23601 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:51.039324 23601 net.cpp:86] Creating Layer pool0
I0428 19:35:51.039353 23601 net.cpp:408] pool0 <- conv0
I0428 19:35:51.039366 23601 net.cpp:382] pool0 -> pool0
I0428 19:35:51.039429 23601 net.cpp:124] Setting up pool0
I0428 19:35:51.039439 23601 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:35:51.039445 23601 net.cpp:139] Memory required for data: 9416960
I0428 19:35:51.039451 23601 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:51.039463 23601 net.cpp:86] Creating Layer ip1
I0428 19:35:51.039470 23601 net.cpp:408] ip1 <- pool0
I0428 19:35:51.039479 23601 net.cpp:382] ip1 -> ip1
I0428 19:35:51.042666 23601 net.cpp:124] Setting up ip1
I0428 19:35:51.042683 23601 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:35:51.042690 23601 net.cpp:139] Memory required for data: 9429760
I0428 19:35:51.042703 23601 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:51.042716 23601 net.cpp:86] Creating Layer relu1
I0428 19:35:51.042722 23601 net.cpp:408] relu1 <- ip1
I0428 19:35:51.042731 23601 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:51.042914 23601 net.cpp:124] Setting up relu1
I0428 19:35:51.042927 23601 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:35:51.042932 23601 net.cpp:139] Memory required for data: 9442560
I0428 19:35:51.042937 23601 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:51.042948 23601 net.cpp:86] Creating Layer ip2
I0428 19:35:51.042954 23601 net.cpp:408] ip2 <- ip1
I0428 19:35:51.042963 23601 net.cpp:382] ip2 -> ip2
I0428 19:35:51.043090 23601 net.cpp:124] Setting up ip2
I0428 19:35:51.043100 23601 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:35:51.043107 23601 net.cpp:139] Memory required for data: 9455360
I0428 19:35:51.043119 23601 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:51.043131 23601 net.cpp:86] Creating Layer relu2
I0428 19:35:51.043141 23601 net.cpp:408] relu2 <- ip2
I0428 19:35:51.043149 23601 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:51.043918 23601 net.cpp:124] Setting up relu2
I0428 19:35:51.043933 23601 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:35:51.043939 23601 net.cpp:139] Memory required for data: 9468160
I0428 19:35:51.043946 23601 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:51.043957 23601 net.cpp:86] Creating Layer ip3
I0428 19:35:51.043963 23601 net.cpp:408] ip3 <- ip2
I0428 19:35:51.043973 23601 net.cpp:382] ip3 -> ip3
I0428 19:35:51.044087 23601 net.cpp:124] Setting up ip3
I0428 19:35:51.044098 23601 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:51.044103 23601 net.cpp:139] Memory required for data: 9470720
I0428 19:35:51.044113 23601 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:51.044124 23601 net.cpp:86] Creating Layer relu3
I0428 19:35:51.044133 23601 net.cpp:408] relu3 <- ip3
I0428 19:35:51.044142 23601 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:51.044309 23601 net.cpp:124] Setting up relu3
I0428 19:35:51.044319 23601 net.cpp:131] Top shape: 64 10 (640)
I0428 19:35:51.044325 23601 net.cpp:139] Memory required for data: 9473280
I0428 19:35:51.044332 23601 layer_factory.hpp:77] Creating layer loss
I0428 19:35:51.044340 23601 net.cpp:86] Creating Layer loss
I0428 19:35:51.044347 23601 net.cpp:408] loss <- ip3
I0428 19:35:51.044353 23601 net.cpp:408] loss <- label
I0428 19:35:51.044363 23601 net.cpp:382] loss -> loss
I0428 19:35:51.044389 23601 layer_factory.hpp:77] Creating layer loss
I0428 19:35:51.044636 23601 net.cpp:124] Setting up loss
I0428 19:35:51.044646 23601 net.cpp:131] Top shape: (1)
I0428 19:35:51.044652 23601 net.cpp:134]     with loss weight 1
I0428 19:35:51.044673 23601 net.cpp:139] Memory required for data: 9473284
I0428 19:35:51.044680 23601 net.cpp:200] loss needs backward computation.
I0428 19:35:51.044687 23601 net.cpp:200] relu3 needs backward computation.
I0428 19:35:51.044692 23601 net.cpp:200] ip3 needs backward computation.
I0428 19:35:51.044697 23601 net.cpp:200] relu2 needs backward computation.
I0428 19:35:51.044703 23601 net.cpp:200] ip2 needs backward computation.
I0428 19:35:51.044708 23601 net.cpp:200] relu1 needs backward computation.
I0428 19:35:51.044713 23601 net.cpp:200] ip1 needs backward computation.
I0428 19:35:51.044731 23601 net.cpp:200] pool0 needs backward computation.
I0428 19:35:51.044737 23601 net.cpp:200] conv0 needs backward computation.
I0428 19:35:51.044744 23601 net.cpp:202] mnist does not need backward computation.
I0428 19:35:51.044749 23601 net.cpp:244] This network produces output loss
I0428 19:35:51.044764 23601 net.cpp:257] Network initialization done.
I0428 19:35:51.045100 23601 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test233.prototxt
I0428 19:35:51.045151 23601 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:35:51.045243 23601 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:35:51.045343 23601 layer_factory.hpp:77] Creating layer mnist
I0428 19:35:51.045408 23601 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:35:51.045426 23601 net.cpp:86] Creating Layer mnist
I0428 19:35:51.045434 23601 net.cpp:382] mnist -> data
I0428 19:35:51.045446 23601 net.cpp:382] mnist -> label
I0428 19:35:51.045570 23601 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:35:51.047646 23601 net.cpp:124] Setting up mnist
I0428 19:35:51.047662 23601 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:35:51.047672 23601 net.cpp:131] Top shape: 100 (100)
I0428 19:35:51.047677 23601 net.cpp:139] Memory required for data: 314000
I0428 19:35:51.047683 23601 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:35:51.047698 23601 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:35:51.047706 23601 net.cpp:408] label_mnist_1_split <- label
I0428 19:35:51.047715 23601 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:35:51.047727 23601 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:35:51.047855 23601 net.cpp:124] Setting up label_mnist_1_split
I0428 19:35:51.047865 23601 net.cpp:131] Top shape: 100 (100)
I0428 19:35:51.047873 23601 net.cpp:131] Top shape: 100 (100)
I0428 19:35:51.047878 23601 net.cpp:139] Memory required for data: 314800
I0428 19:35:51.047896 23601 layer_factory.hpp:77] Creating layer conv0
I0428 19:35:51.047912 23601 net.cpp:86] Creating Layer conv0
I0428 19:35:51.047919 23601 net.cpp:408] conv0 <- data
I0428 19:35:51.047929 23601 net.cpp:382] conv0 -> conv0
I0428 19:35:51.049455 23601 net.cpp:124] Setting up conv0
I0428 19:35:51.049473 23601 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:35:51.049479 23601 net.cpp:139] Memory required for data: 11834800
I0428 19:35:51.049494 23601 layer_factory.hpp:77] Creating layer pool0
I0428 19:35:51.049505 23601 net.cpp:86] Creating Layer pool0
I0428 19:35:51.049513 23601 net.cpp:408] pool0 <- conv0
I0428 19:35:51.049522 23601 net.cpp:382] pool0 -> pool0
I0428 19:35:51.049567 23601 net.cpp:124] Setting up pool0
I0428 19:35:51.049577 23601 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:35:51.049583 23601 net.cpp:139] Memory required for data: 14714800
I0428 19:35:51.049588 23601 layer_factory.hpp:77] Creating layer ip1
I0428 19:35:51.049599 23601 net.cpp:86] Creating Layer ip1
I0428 19:35:51.049607 23601 net.cpp:408] ip1 <- pool0
I0428 19:35:51.049615 23601 net.cpp:382] ip1 -> ip1
I0428 19:35:51.051842 23601 net.cpp:124] Setting up ip1
I0428 19:35:51.051854 23601 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:35:51.051861 23601 net.cpp:139] Memory required for data: 14734800
I0428 19:35:51.051873 23601 layer_factory.hpp:77] Creating layer relu1
I0428 19:35:51.051882 23601 net.cpp:86] Creating Layer relu1
I0428 19:35:51.051894 23601 net.cpp:408] relu1 <- ip1
I0428 19:35:51.051903 23601 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:35:51.052089 23601 net.cpp:124] Setting up relu1
I0428 19:35:51.052099 23601 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:35:51.052106 23601 net.cpp:139] Memory required for data: 14754800
I0428 19:35:51.052112 23601 layer_factory.hpp:77] Creating layer ip2
I0428 19:35:51.052122 23601 net.cpp:86] Creating Layer ip2
I0428 19:35:51.052129 23601 net.cpp:408] ip2 <- ip1
I0428 19:35:51.052144 23601 net.cpp:382] ip2 -> ip2
I0428 19:35:51.052269 23601 net.cpp:124] Setting up ip2
I0428 19:35:51.052278 23601 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:35:51.052284 23601 net.cpp:139] Memory required for data: 14774800
I0428 19:35:51.052296 23601 layer_factory.hpp:77] Creating layer relu2
I0428 19:35:51.052305 23601 net.cpp:86] Creating Layer relu2
I0428 19:35:51.052310 23601 net.cpp:408] relu2 <- ip2
I0428 19:35:51.052319 23601 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:35:51.053154 23601 net.cpp:124] Setting up relu2
I0428 19:35:51.053169 23601 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:35:51.053174 23601 net.cpp:139] Memory required for data: 14794800
I0428 19:35:51.053180 23601 layer_factory.hpp:77] Creating layer ip3
I0428 19:35:51.053192 23601 net.cpp:86] Creating Layer ip3
I0428 19:35:51.053198 23601 net.cpp:408] ip3 <- ip2
I0428 19:35:51.053208 23601 net.cpp:382] ip3 -> ip3
I0428 19:35:51.053362 23601 net.cpp:124] Setting up ip3
I0428 19:35:51.053372 23601 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:51.053377 23601 net.cpp:139] Memory required for data: 14798800
I0428 19:35:51.053387 23601 layer_factory.hpp:77] Creating layer relu3
I0428 19:35:51.053396 23601 net.cpp:86] Creating Layer relu3
I0428 19:35:51.053403 23601 net.cpp:408] relu3 <- ip3
I0428 19:35:51.053411 23601 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:35:51.053570 23601 net.cpp:124] Setting up relu3
I0428 19:35:51.053580 23601 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:51.053586 23601 net.cpp:139] Memory required for data: 14802800
I0428 19:35:51.053591 23601 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:35:51.053599 23601 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:35:51.053609 23601 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:35:51.053618 23601 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:35:51.053628 23601 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:35:51.053669 23601 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:35:51.053678 23601 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:51.053697 23601 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:35:51.053707 23601 net.cpp:139] Memory required for data: 14810800
I0428 19:35:51.053714 23601 layer_factory.hpp:77] Creating layer accuracy
I0428 19:35:51.053722 23601 net.cpp:86] Creating Layer accuracy
I0428 19:35:51.053727 23601 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:35:51.053735 23601 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:35:51.053742 23601 net.cpp:382] accuracy -> accuracy
I0428 19:35:51.053755 23601 net.cpp:124] Setting up accuracy
I0428 19:35:51.053764 23601 net.cpp:131] Top shape: (1)
I0428 19:35:51.053769 23601 net.cpp:139] Memory required for data: 14810804
I0428 19:35:51.053774 23601 layer_factory.hpp:77] Creating layer loss
I0428 19:35:51.053783 23601 net.cpp:86] Creating Layer loss
I0428 19:35:51.053789 23601 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:35:51.053797 23601 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:35:51.053803 23601 net.cpp:382] loss -> loss
I0428 19:35:51.053813 23601 layer_factory.hpp:77] Creating layer loss
I0428 19:35:51.054055 23601 net.cpp:124] Setting up loss
I0428 19:35:51.054069 23601 net.cpp:131] Top shape: (1)
I0428 19:35:51.054077 23601 net.cpp:134]     with loss weight 1
I0428 19:35:51.054090 23601 net.cpp:139] Memory required for data: 14810808
I0428 19:35:51.054095 23601 net.cpp:200] loss needs backward computation.
I0428 19:35:51.054102 23601 net.cpp:202] accuracy does not need backward computation.
I0428 19:35:51.054108 23601 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:35:51.054114 23601 net.cpp:200] relu3 needs backward computation.
I0428 19:35:51.054119 23601 net.cpp:200] ip3 needs backward computation.
I0428 19:35:51.054126 23601 net.cpp:200] relu2 needs backward computation.
I0428 19:35:51.054131 23601 net.cpp:200] ip2 needs backward computation.
I0428 19:35:51.054136 23601 net.cpp:200] relu1 needs backward computation.
I0428 19:35:51.054141 23601 net.cpp:200] ip1 needs backward computation.
I0428 19:35:51.054147 23601 net.cpp:200] pool0 needs backward computation.
I0428 19:35:51.054152 23601 net.cpp:200] conv0 needs backward computation.
I0428 19:35:51.054157 23601 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:35:51.054164 23601 net.cpp:202] mnist does not need backward computation.
I0428 19:35:51.054169 23601 net.cpp:244] This network produces output accuracy
I0428 19:35:51.054175 23601 net.cpp:244] This network produces output loss
I0428 19:35:51.054190 23601 net.cpp:257] Network initialization done.
I0428 19:35:51.054234 23601 solver.cpp:56] Solver scaffolding done.
I0428 19:35:51.054507 23601 caffe.cpp:248] Starting Optimization
I0428 19:35:51.054514 23601 solver.cpp:273] Solving LeNet
I0428 19:35:51.054519 23601 solver.cpp:274] Learning Rate Policy: inv
I0428 19:35:51.056442 23601 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:35:51.154887 23608 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:51.157564 23601 solver.cpp:398]     Test net output #0: accuracy = 0.12
I0428 19:35:51.157588 23601 solver.cpp:398]     Test net output #1: loss = 2.29825 (* 1 = 2.29825 loss)
I0428 19:35:51.161991 23601 solver.cpp:219] Iteration 0 (0 iter/s, 0.107442s/100 iters), loss = 2.30696
I0428 19:35:51.162019 23601 solver.cpp:238]     Train net output #0: loss = 2.30696 (* 1 = 2.30696 loss)
I0428 19:35:51.162050 23601 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:35:51.308321 23601 solver.cpp:219] Iteration 100 (683.566 iter/s, 0.146292s/100 iters), loss = 0.268564
I0428 19:35:51.308356 23601 solver.cpp:238]     Train net output #0: loss = 0.268564 (* 1 = 0.268564 loss)
I0428 19:35:51.308364 23601 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:35:51.453411 23601 solver.cpp:219] Iteration 200 (689.439 iter/s, 0.145046s/100 iters), loss = 0.246141
I0428 19:35:51.453439 23601 solver.cpp:238]     Train net output #0: loss = 0.246141 (* 1 = 0.246141 loss)
I0428 19:35:51.453464 23601 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:35:51.598223 23601 solver.cpp:219] Iteration 300 (690.736 iter/s, 0.144773s/100 iters), loss = 0.24059
I0428 19:35:51.598266 23601 solver.cpp:238]     Train net output #0: loss = 0.24059 (* 1 = 0.24059 loss)
I0428 19:35:51.598292 23601 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:35:51.744698 23601 solver.cpp:219] Iteration 400 (682.958 iter/s, 0.146422s/100 iters), loss = 0.088084
I0428 19:35:51.744725 23601 solver.cpp:238]     Train net output #0: loss = 0.0880839 (* 1 = 0.0880839 loss)
I0428 19:35:51.744735 23601 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:35:51.889653 23601 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:35:51.985153 23608 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:51.988831 23601 solver.cpp:398]     Test net output #0: accuracy = 0.9533
I0428 19:35:51.988852 23601 solver.cpp:398]     Test net output #1: loss = 0.148669 (* 1 = 0.148669 loss)
I0428 19:35:51.990217 23601 solver.cpp:219] Iteration 500 (407.37 iter/s, 0.245477s/100 iters), loss = 0.338257
I0428 19:35:51.990242 23601 solver.cpp:238]     Train net output #0: loss = 0.338257 (* 1 = 0.338257 loss)
I0428 19:35:51.990252 23601 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:35:52.133436 23601 solver.cpp:219] Iteration 600 (698.398 iter/s, 0.143185s/100 iters), loss = 0.188224
I0428 19:35:52.133462 23601 solver.cpp:238]     Train net output #0: loss = 0.188224 (* 1 = 0.188224 loss)
I0428 19:35:52.133487 23601 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:35:52.277256 23601 solver.cpp:219] Iteration 700 (695.493 iter/s, 0.143783s/100 iters), loss = 0.218643
I0428 19:35:52.277282 23601 solver.cpp:238]     Train net output #0: loss = 0.218643 (* 1 = 0.218643 loss)
I0428 19:35:52.277304 23601 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:35:52.423321 23601 solver.cpp:219] Iteration 800 (684.807 iter/s, 0.146027s/100 iters), loss = 0.353468
I0428 19:35:52.423351 23601 solver.cpp:238]     Train net output #0: loss = 0.353468 (* 1 = 0.353468 loss)
I0428 19:35:52.423375 23601 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:35:52.568747 23601 solver.cpp:219] Iteration 900 (687.822 iter/s, 0.145386s/100 iters), loss = 0.161355
I0428 19:35:52.568773 23601 solver.cpp:238]     Train net output #0: loss = 0.161355 (* 1 = 0.161355 loss)
I0428 19:35:52.568799 23601 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:35:52.617183 23607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:52.713305 23601 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:35:52.719079 23601 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:35:52.722615 23601 solver.cpp:311] Iteration 1000, loss = 0.118564
I0428 19:35:52.722630 23601 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:35:52.821156 23608 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:35:52.823604 23601 solver.cpp:398]     Test net output #0: accuracy = 0.9715
I0428 19:35:52.823629 23601 solver.cpp:398]     Test net output #1: loss = 0.090867 (* 1 = 0.090867 loss)
I0428 19:35:52.823638 23601 solver.cpp:316] Optimization Done.
I0428 19:35:52.823644 23601 caffe.cpp:259] Optimization Done.
