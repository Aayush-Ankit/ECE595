I0428 19:46:55.944145 26085 caffe.cpp:218] Using GPUs 0
I0428 19:46:55.982097 26085 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:46:56.486935 26085 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test502.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:46:56.487069 26085 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test502.prototxt
I0428 19:46:56.487473 26085 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:46:56.487493 26085 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:46:56.487591 26085 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:56.487669 26085 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:56.487762 26085 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:46:56.487784 26085 net.cpp:86] Creating Layer mnist
I0428 19:46:56.487793 26085 net.cpp:382] mnist -> data
I0428 19:46:56.487815 26085 net.cpp:382] mnist -> label
I0428 19:46:56.488869 26085 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:46:56.491261 26085 net.cpp:124] Setting up mnist
I0428 19:46:56.491278 26085 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:46:56.491284 26085 net.cpp:131] Top shape: 64 (64)
I0428 19:46:56.491287 26085 net.cpp:139] Memory required for data: 200960
I0428 19:46:56.491294 26085 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:56.491330 26085 net.cpp:86] Creating Layer conv0
I0428 19:46:56.491349 26085 net.cpp:408] conv0 <- data
I0428 19:46:56.491364 26085 net.cpp:382] conv0 -> conv0
I0428 19:46:56.776779 26085 net.cpp:124] Setting up conv0
I0428 19:46:56.776814 26085 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:46:56.776820 26085 net.cpp:139] Memory required for data: 495872
I0428 19:46:56.776836 26085 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:56.776850 26085 net.cpp:86] Creating Layer pool0
I0428 19:46:56.776854 26085 net.cpp:408] pool0 <- conv0
I0428 19:46:56.776860 26085 net.cpp:382] pool0 -> pool0
I0428 19:46:56.776914 26085 net.cpp:124] Setting up pool0
I0428 19:46:56.776921 26085 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:46:56.776924 26085 net.cpp:139] Memory required for data: 569600
I0428 19:46:56.776927 26085 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:56.776940 26085 net.cpp:86] Creating Layer conv1
I0428 19:46:56.776944 26085 net.cpp:408] conv1 <- pool0
I0428 19:46:56.776949 26085 net.cpp:382] conv1 -> conv1
I0428 19:46:56.779969 26085 net.cpp:124] Setting up conv1
I0428 19:46:56.779986 26085 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:46:56.779991 26085 net.cpp:139] Memory required for data: 2208000
I0428 19:46:56.780001 26085 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:56.780009 26085 net.cpp:86] Creating Layer pool1
I0428 19:46:56.780014 26085 net.cpp:408] pool1 <- conv1
I0428 19:46:56.780019 26085 net.cpp:382] pool1 -> pool1
I0428 19:46:56.780062 26085 net.cpp:124] Setting up pool1
I0428 19:46:56.780078 26085 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:46:56.780081 26085 net.cpp:139] Memory required for data: 2617600
I0428 19:46:56.780086 26085 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:56.780093 26085 net.cpp:86] Creating Layer ip1
I0428 19:46:56.780097 26085 net.cpp:408] ip1 <- pool1
I0428 19:46:56.780102 26085 net.cpp:382] ip1 -> ip1
I0428 19:46:56.781644 26085 net.cpp:124] Setting up ip1
I0428 19:46:56.781659 26085 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:56.781663 26085 net.cpp:139] Memory required for data: 2630400
I0428 19:46:56.781673 26085 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:56.781680 26085 net.cpp:86] Creating Layer relu1
I0428 19:46:56.781683 26085 net.cpp:408] relu1 <- ip1
I0428 19:46:56.781689 26085 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:56.781883 26085 net.cpp:124] Setting up relu1
I0428 19:46:56.781893 26085 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:46:56.781896 26085 net.cpp:139] Memory required for data: 2643200
I0428 19:46:56.781900 26085 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:56.781908 26085 net.cpp:86] Creating Layer ip2
I0428 19:46:56.781911 26085 net.cpp:408] ip2 <- ip1
I0428 19:46:56.781916 26085 net.cpp:382] ip2 -> ip2
I0428 19:46:56.782949 26085 net.cpp:124] Setting up ip2
I0428 19:46:56.782963 26085 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:56.782968 26085 net.cpp:139] Memory required for data: 2649600
I0428 19:46:56.782975 26085 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:56.782982 26085 net.cpp:86] Creating Layer relu2
I0428 19:46:56.782986 26085 net.cpp:408] relu2 <- ip2
I0428 19:46:56.782991 26085 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:56.783809 26085 net.cpp:124] Setting up relu2
I0428 19:46:56.783823 26085 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:56.783828 26085 net.cpp:139] Memory required for data: 2656000
I0428 19:46:56.783831 26085 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:56.783839 26085 net.cpp:86] Creating Layer ip3
I0428 19:46:56.783843 26085 net.cpp:408] ip3 <- ip2
I0428 19:46:56.783849 26085 net.cpp:382] ip3 -> ip3
I0428 19:46:56.783962 26085 net.cpp:124] Setting up ip3
I0428 19:46:56.783972 26085 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:56.783975 26085 net.cpp:139] Memory required for data: 2658560
I0428 19:46:56.783984 26085 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:56.783990 26085 net.cpp:86] Creating Layer relu3
I0428 19:46:56.783994 26085 net.cpp:408] relu3 <- ip3
I0428 19:46:56.783998 26085 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:56.784186 26085 net.cpp:124] Setting up relu3
I0428 19:46:56.784196 26085 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:56.784200 26085 net.cpp:139] Memory required for data: 2661120
I0428 19:46:56.784204 26085 layer_factory.hpp:77] Creating layer loss
I0428 19:46:56.784210 26085 net.cpp:86] Creating Layer loss
I0428 19:46:56.784214 26085 net.cpp:408] loss <- ip3
I0428 19:46:56.784219 26085 net.cpp:408] loss <- label
I0428 19:46:56.784224 26085 net.cpp:382] loss -> loss
I0428 19:46:56.784245 26085 layer_factory.hpp:77] Creating layer loss
I0428 19:46:56.784492 26085 net.cpp:124] Setting up loss
I0428 19:46:56.784502 26085 net.cpp:131] Top shape: (1)
I0428 19:46:56.784507 26085 net.cpp:134]     with loss weight 1
I0428 19:46:56.784523 26085 net.cpp:139] Memory required for data: 2661124
I0428 19:46:56.784525 26085 net.cpp:200] loss needs backward computation.
I0428 19:46:56.784529 26085 net.cpp:200] relu3 needs backward computation.
I0428 19:46:56.784533 26085 net.cpp:200] ip3 needs backward computation.
I0428 19:46:56.784536 26085 net.cpp:200] relu2 needs backward computation.
I0428 19:46:56.784540 26085 net.cpp:200] ip2 needs backward computation.
I0428 19:46:56.784543 26085 net.cpp:200] relu1 needs backward computation.
I0428 19:46:56.784546 26085 net.cpp:200] ip1 needs backward computation.
I0428 19:46:56.784549 26085 net.cpp:200] pool1 needs backward computation.
I0428 19:46:56.784554 26085 net.cpp:200] conv1 needs backward computation.
I0428 19:46:56.784556 26085 net.cpp:200] pool0 needs backward computation.
I0428 19:46:56.784560 26085 net.cpp:200] conv0 needs backward computation.
I0428 19:46:56.784564 26085 net.cpp:202] mnist does not need backward computation.
I0428 19:46:56.784569 26085 net.cpp:244] This network produces output loss
I0428 19:46:56.784579 26085 net.cpp:257] Network initialization done.
I0428 19:46:56.784962 26085 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test502.prototxt
I0428 19:46:56.784992 26085 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:46:56.785094 26085 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:56.785182 26085 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:56.785228 26085 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:46:56.785243 26085 net.cpp:86] Creating Layer mnist
I0428 19:46:56.785248 26085 net.cpp:382] mnist -> data
I0428 19:46:56.785255 26085 net.cpp:382] mnist -> label
I0428 19:46:56.785348 26085 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:46:56.786497 26085 net.cpp:124] Setting up mnist
I0428 19:46:56.786511 26085 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:46:56.786516 26085 net.cpp:131] Top shape: 100 (100)
I0428 19:46:56.786520 26085 net.cpp:139] Memory required for data: 314000
I0428 19:46:56.786523 26085 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:46:56.786535 26085 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:46:56.786537 26085 net.cpp:408] label_mnist_1_split <- label
I0428 19:46:56.786545 26085 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:46:56.786552 26085 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:46:56.786666 26085 net.cpp:124] Setting up label_mnist_1_split
I0428 19:46:56.786675 26085 net.cpp:131] Top shape: 100 (100)
I0428 19:46:56.786679 26085 net.cpp:131] Top shape: 100 (100)
I0428 19:46:56.786682 26085 net.cpp:139] Memory required for data: 314800
I0428 19:46:56.786685 26085 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:56.786698 26085 net.cpp:86] Creating Layer conv0
I0428 19:46:56.786701 26085 net.cpp:408] conv0 <- data
I0428 19:46:56.786707 26085 net.cpp:382] conv0 -> conv0
I0428 19:46:56.788390 26085 net.cpp:124] Setting up conv0
I0428 19:46:56.788405 26085 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:46:56.788409 26085 net.cpp:139] Memory required for data: 775600
I0428 19:46:56.788419 26085 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:56.788427 26085 net.cpp:86] Creating Layer pool0
I0428 19:46:56.788431 26085 net.cpp:408] pool0 <- conv0
I0428 19:46:56.788436 26085 net.cpp:382] pool0 -> pool0
I0428 19:46:56.788477 26085 net.cpp:124] Setting up pool0
I0428 19:46:56.788482 26085 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:46:56.788486 26085 net.cpp:139] Memory required for data: 890800
I0428 19:46:56.788488 26085 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:56.788498 26085 net.cpp:86] Creating Layer conv1
I0428 19:46:56.788502 26085 net.cpp:408] conv1 <- pool0
I0428 19:46:56.788509 26085 net.cpp:382] conv1 -> conv1
I0428 19:46:56.790228 26085 net.cpp:124] Setting up conv1
I0428 19:46:56.790243 26085 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:46:56.790251 26085 net.cpp:139] Memory required for data: 3450800
I0428 19:46:56.790266 26085 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:56.790274 26085 net.cpp:86] Creating Layer pool1
I0428 19:46:56.790278 26085 net.cpp:408] pool1 <- conv1
I0428 19:46:56.790284 26085 net.cpp:382] pool1 -> pool1
I0428 19:46:56.790325 26085 net.cpp:124] Setting up pool1
I0428 19:46:56.790331 26085 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:46:56.790334 26085 net.cpp:139] Memory required for data: 4090800
I0428 19:46:56.790338 26085 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:56.790345 26085 net.cpp:86] Creating Layer ip1
I0428 19:46:56.790349 26085 net.cpp:408] ip1 <- pool1
I0428 19:46:56.790361 26085 net.cpp:382] ip1 -> ip1
I0428 19:46:56.790979 26085 net.cpp:124] Setting up ip1
I0428 19:46:56.790987 26085 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:56.791002 26085 net.cpp:139] Memory required for data: 4110800
I0428 19:46:56.791010 26085 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:56.791015 26085 net.cpp:86] Creating Layer relu1
I0428 19:46:56.791020 26085 net.cpp:408] relu1 <- ip1
I0428 19:46:56.791026 26085 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:56.791296 26085 net.cpp:124] Setting up relu1
I0428 19:46:56.791306 26085 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:46:56.791309 26085 net.cpp:139] Memory required for data: 4130800
I0428 19:46:56.791313 26085 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:56.791321 26085 net.cpp:86] Creating Layer ip2
I0428 19:46:56.791326 26085 net.cpp:408] ip2 <- ip1
I0428 19:46:56.791333 26085 net.cpp:382] ip2 -> ip2
I0428 19:46:56.791455 26085 net.cpp:124] Setting up ip2
I0428 19:46:56.791465 26085 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:56.791468 26085 net.cpp:139] Memory required for data: 4140800
I0428 19:46:56.791474 26085 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:56.791479 26085 net.cpp:86] Creating Layer relu2
I0428 19:46:56.791482 26085 net.cpp:408] relu2 <- ip2
I0428 19:46:56.791487 26085 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:56.791661 26085 net.cpp:124] Setting up relu2
I0428 19:46:56.791671 26085 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:56.791673 26085 net.cpp:139] Memory required for data: 4150800
I0428 19:46:56.791677 26085 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:56.791683 26085 net.cpp:86] Creating Layer ip3
I0428 19:46:56.791687 26085 net.cpp:408] ip3 <- ip2
I0428 19:46:56.791692 26085 net.cpp:382] ip3 -> ip3
I0428 19:46:56.791802 26085 net.cpp:124] Setting up ip3
I0428 19:46:56.791810 26085 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:56.791813 26085 net.cpp:139] Memory required for data: 4154800
I0428 19:46:56.791822 26085 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:56.791828 26085 net.cpp:86] Creating Layer relu3
I0428 19:46:56.791831 26085 net.cpp:408] relu3 <- ip3
I0428 19:46:56.791843 26085 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:56.792695 26085 net.cpp:124] Setting up relu3
I0428 19:46:56.792707 26085 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:56.792711 26085 net.cpp:139] Memory required for data: 4158800
I0428 19:46:56.792716 26085 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:46:56.792721 26085 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:46:56.792726 26085 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:46:56.792731 26085 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:46:56.792737 26085 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:46:56.792793 26085 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:46:56.792799 26085 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:56.792804 26085 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:56.792806 26085 net.cpp:139] Memory required for data: 4166800
I0428 19:46:56.792815 26085 layer_factory.hpp:77] Creating layer accuracy
I0428 19:46:56.792822 26085 net.cpp:86] Creating Layer accuracy
I0428 19:46:56.792826 26085 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:46:56.792830 26085 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:46:56.792835 26085 net.cpp:382] accuracy -> accuracy
I0428 19:46:56.792843 26085 net.cpp:124] Setting up accuracy
I0428 19:46:56.792847 26085 net.cpp:131] Top shape: (1)
I0428 19:46:56.792857 26085 net.cpp:139] Memory required for data: 4166804
I0428 19:46:56.792860 26085 layer_factory.hpp:77] Creating layer loss
I0428 19:46:56.792866 26085 net.cpp:86] Creating Layer loss
I0428 19:46:56.792870 26085 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:46:56.792875 26085 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:46:56.792879 26085 net.cpp:382] loss -> loss
I0428 19:46:56.792886 26085 layer_factory.hpp:77] Creating layer loss
I0428 19:46:56.793157 26085 net.cpp:124] Setting up loss
I0428 19:46:56.793167 26085 net.cpp:131] Top shape: (1)
I0428 19:46:56.793171 26085 net.cpp:134]     with loss weight 1
I0428 19:46:56.793189 26085 net.cpp:139] Memory required for data: 4166808
I0428 19:46:56.793192 26085 net.cpp:200] loss needs backward computation.
I0428 19:46:56.793196 26085 net.cpp:202] accuracy does not need backward computation.
I0428 19:46:56.793200 26085 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:46:56.793203 26085 net.cpp:200] relu3 needs backward computation.
I0428 19:46:56.793206 26085 net.cpp:200] ip3 needs backward computation.
I0428 19:46:56.793210 26085 net.cpp:200] relu2 needs backward computation.
I0428 19:46:56.793212 26085 net.cpp:200] ip2 needs backward computation.
I0428 19:46:56.793215 26085 net.cpp:200] relu1 needs backward computation.
I0428 19:46:56.793218 26085 net.cpp:200] ip1 needs backward computation.
I0428 19:46:56.793221 26085 net.cpp:200] pool1 needs backward computation.
I0428 19:46:56.793225 26085 net.cpp:200] conv1 needs backward computation.
I0428 19:46:56.793228 26085 net.cpp:200] pool0 needs backward computation.
I0428 19:46:56.793233 26085 net.cpp:200] conv0 needs backward computation.
I0428 19:46:56.793237 26085 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:46:56.793241 26085 net.cpp:202] mnist does not need backward computation.
I0428 19:46:56.793244 26085 net.cpp:244] This network produces output accuracy
I0428 19:46:56.793248 26085 net.cpp:244] This network produces output loss
I0428 19:46:56.793273 26085 net.cpp:257] Network initialization done.
I0428 19:46:56.793320 26085 solver.cpp:56] Solver scaffolding done.
I0428 19:46:56.793699 26085 caffe.cpp:248] Starting Optimization
I0428 19:46:56.793704 26085 solver.cpp:273] Solving LeNet
I0428 19:46:56.793707 26085 solver.cpp:274] Learning Rate Policy: inv
I0428 19:46:56.794003 26085 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:46:56.799315 26085 blocking_queue.cpp:49] Waiting for data
I0428 19:46:56.868834 26092 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:56.869449 26085 solver.cpp:398]     Test net output #0: accuracy = 0.0818
I0428 19:46:56.869472 26085 solver.cpp:398]     Test net output #1: loss = 2.30264 (* 1 = 2.30264 loss)
I0428 19:46:56.873323 26085 solver.cpp:219] Iteration 0 (-1.02155e-42 iter/s, 0.0795843s/100 iters), loss = 2.2904
I0428 19:46:56.873347 26085 solver.cpp:238]     Train net output #0: loss = 2.2904 (* 1 = 2.2904 loss)
I0428 19:46:56.873358 26085 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:46:57.025796 26085 solver.cpp:219] Iteration 100 (656.027 iter/s, 0.152433s/100 iters), loss = 0.183671
I0428 19:46:57.025822 26085 solver.cpp:238]     Train net output #0: loss = 0.183671 (* 1 = 0.183671 loss)
I0428 19:46:57.025843 26085 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:46:57.170429 26085 solver.cpp:219] Iteration 200 (691.587 iter/s, 0.144595s/100 iters), loss = 0.226414
I0428 19:46:57.170464 26085 solver.cpp:238]     Train net output #0: loss = 0.226414 (* 1 = 0.226414 loss)
I0428 19:46:57.170470 26085 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:46:57.320502 26085 solver.cpp:219] Iteration 300 (666.541 iter/s, 0.150028s/100 iters), loss = 0.26551
I0428 19:46:57.320561 26085 solver.cpp:238]     Train net output #0: loss = 0.26551 (* 1 = 0.26551 loss)
I0428 19:46:57.320577 26085 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:46:57.508764 26085 solver.cpp:219] Iteration 400 (531.387 iter/s, 0.188187s/100 iters), loss = 0.0925275
I0428 19:46:57.508831 26085 solver.cpp:238]     Train net output #0: loss = 0.0925275 (* 1 = 0.0925275 loss)
I0428 19:46:57.508848 26085 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:46:57.696442 26085 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:46:57.799887 26092 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:57.800678 26085 solver.cpp:398]     Test net output #0: accuracy = 0.9591
I0428 19:46:57.800709 26085 solver.cpp:398]     Test net output #1: loss = 0.127925 (* 1 = 0.127925 loss)
I0428 19:46:57.802597 26085 solver.cpp:219] Iteration 500 (340.412 iter/s, 0.293762s/100 iters), loss = 0.128487
I0428 19:46:57.802664 26085 solver.cpp:238]     Train net output #0: loss = 0.128487 (* 1 = 0.128487 loss)
I0428 19:46:57.802677 26085 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:46:57.956284 26085 solver.cpp:219] Iteration 600 (650.999 iter/s, 0.15361s/100 iters), loss = 0.207329
I0428 19:46:57.956312 26085 solver.cpp:238]     Train net output #0: loss = 0.207329 (* 1 = 0.207329 loss)
I0428 19:46:57.956321 26085 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:46:58.105015 26085 solver.cpp:219] Iteration 700 (672.541 iter/s, 0.14869s/100 iters), loss = 0.110656
I0428 19:46:58.105053 26085 solver.cpp:238]     Train net output #0: loss = 0.110655 (* 1 = 0.110655 loss)
I0428 19:46:58.105062 26085 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:46:58.254737 26085 solver.cpp:219] Iteration 800 (668.091 iter/s, 0.14968s/100 iters), loss = 0.246649
I0428 19:46:58.254773 26085 solver.cpp:238]     Train net output #0: loss = 0.246649 (* 1 = 0.246649 loss)
I0428 19:46:58.254781 26085 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:46:58.404173 26085 solver.cpp:219] Iteration 900 (669.369 iter/s, 0.149394s/100 iters), loss = 0.151948
I0428 19:46:58.404212 26085 solver.cpp:238]     Train net output #0: loss = 0.151948 (* 1 = 0.151948 loss)
I0428 19:46:58.404220 26085 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:46:58.454083 26091 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:58.551956 26085 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:46:58.554771 26085 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:46:58.556303 26085 solver.cpp:311] Iteration 1000, loss = 0.160015
I0428 19:46:58.556335 26085 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:46:58.623786 26092 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:58.626034 26085 solver.cpp:398]     Test net output #0: accuracy = 0.9714
I0428 19:46:58.626070 26085 solver.cpp:398]     Test net output #1: loss = 0.0887397 (* 1 = 0.0887397 loss)
I0428 19:46:58.626082 26085 solver.cpp:316] Optimization Done.
I0428 19:46:58.626087 26085 caffe.cpp:259] Optimization Done.
