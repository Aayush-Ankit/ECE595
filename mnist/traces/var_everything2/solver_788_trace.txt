I0428 19:57:25.162906 28675 caffe.cpp:218] Using GPUs 0
I0428 19:57:25.194391 28675 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:25.634053 28675 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test788.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:25.634202 28675 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test788.prototxt
I0428 19:57:25.634539 28675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:25.634553 28675 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:25.634637 28675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:25.634696 28675 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:25.634775 28675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:25.634798 28675 net.cpp:86] Creating Layer mnist
I0428 19:57:25.634804 28675 net.cpp:382] mnist -> data
I0428 19:57:25.634822 28675 net.cpp:382] mnist -> label
I0428 19:57:25.635895 28675 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:25.638171 28675 net.cpp:124] Setting up mnist
I0428 19:57:25.638217 28675 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:25.638222 28675 net.cpp:131] Top shape: 64 (64)
I0428 19:57:25.638226 28675 net.cpp:139] Memory required for data: 200960
I0428 19:57:25.638231 28675 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:25.638245 28675 net.cpp:86] Creating Layer conv0
I0428 19:57:25.638250 28675 net.cpp:408] conv0 <- data
I0428 19:57:25.638259 28675 net.cpp:382] conv0 -> conv0
I0428 19:57:25.870496 28675 net.cpp:124] Setting up conv0
I0428 19:57:25.870537 28675 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:25.870542 28675 net.cpp:139] Memory required for data: 1675520
I0428 19:57:25.870591 28675 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:25.870604 28675 net.cpp:86] Creating Layer pool0
I0428 19:57:25.870609 28675 net.cpp:408] pool0 <- conv0
I0428 19:57:25.870615 28675 net.cpp:382] pool0 -> pool0
I0428 19:57:25.870676 28675 net.cpp:124] Setting up pool0
I0428 19:57:25.870698 28675 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:25.870700 28675 net.cpp:139] Memory required for data: 2044160
I0428 19:57:25.870703 28675 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:25.870714 28675 net.cpp:86] Creating Layer conv1
I0428 19:57:25.870718 28675 net.cpp:408] conv1 <- pool0
I0428 19:57:25.870723 28675 net.cpp:382] conv1 -> conv1
I0428 19:57:25.873447 28675 net.cpp:124] Setting up conv1
I0428 19:57:25.873478 28675 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:25.873482 28675 net.cpp:139] Memory required for data: 2126080
I0428 19:57:25.873491 28675 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:25.873498 28675 net.cpp:86] Creating Layer pool1
I0428 19:57:25.873502 28675 net.cpp:408] pool1 <- conv1
I0428 19:57:25.873507 28675 net.cpp:382] pool1 -> pool1
I0428 19:57:25.873541 28675 net.cpp:124] Setting up pool1
I0428 19:57:25.873553 28675 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:25.873555 28675 net.cpp:139] Memory required for data: 2146560
I0428 19:57:25.873558 28675 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:25.873565 28675 net.cpp:86] Creating Layer ip1
I0428 19:57:25.873569 28675 net.cpp:408] ip1 <- pool1
I0428 19:57:25.873572 28675 net.cpp:382] ip1 -> ip1
I0428 19:57:25.873682 28675 net.cpp:124] Setting up ip1
I0428 19:57:25.873688 28675 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:25.873692 28675 net.cpp:139] Memory required for data: 2152960
I0428 19:57:25.873698 28675 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:25.873703 28675 net.cpp:86] Creating Layer relu1
I0428 19:57:25.873708 28675 net.cpp:408] relu1 <- ip1
I0428 19:57:25.873711 28675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:25.873880 28675 net.cpp:124] Setting up relu1
I0428 19:57:25.873889 28675 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:25.873891 28675 net.cpp:139] Memory required for data: 2159360
I0428 19:57:25.873894 28675 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:25.873900 28675 net.cpp:86] Creating Layer ip2
I0428 19:57:25.873903 28675 net.cpp:408] ip2 <- ip1
I0428 19:57:25.873908 28675 net.cpp:382] ip2 -> ip2
I0428 19:57:25.873993 28675 net.cpp:124] Setting up ip2
I0428 19:57:25.874001 28675 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:25.874003 28675 net.cpp:139] Memory required for data: 2161920
I0428 19:57:25.874008 28675 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:25.874013 28675 net.cpp:86] Creating Layer relu2
I0428 19:57:25.874017 28675 net.cpp:408] relu2 <- ip2
I0428 19:57:25.874020 28675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:25.874706 28675 net.cpp:124] Setting up relu2
I0428 19:57:25.874732 28675 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:25.874735 28675 net.cpp:139] Memory required for data: 2164480
I0428 19:57:25.874739 28675 layer_factory.hpp:77] Creating layer loss
I0428 19:57:25.874760 28675 net.cpp:86] Creating Layer loss
I0428 19:57:25.874764 28675 net.cpp:408] loss <- ip2
I0428 19:57:25.874769 28675 net.cpp:408] loss <- label
I0428 19:57:25.874774 28675 net.cpp:382] loss -> loss
I0428 19:57:25.874794 28675 layer_factory.hpp:77] Creating layer loss
I0428 19:57:25.875068 28675 net.cpp:124] Setting up loss
I0428 19:57:25.875093 28675 net.cpp:131] Top shape: (1)
I0428 19:57:25.875097 28675 net.cpp:134]     with loss weight 1
I0428 19:57:25.875113 28675 net.cpp:139] Memory required for data: 2164484
I0428 19:57:25.875118 28675 net.cpp:200] loss needs backward computation.
I0428 19:57:25.875120 28675 net.cpp:200] relu2 needs backward computation.
I0428 19:57:25.875124 28675 net.cpp:200] ip2 needs backward computation.
I0428 19:57:25.875128 28675 net.cpp:200] relu1 needs backward computation.
I0428 19:57:25.875130 28675 net.cpp:200] ip1 needs backward computation.
I0428 19:57:25.875144 28675 net.cpp:200] pool1 needs backward computation.
I0428 19:57:25.875147 28675 net.cpp:200] conv1 needs backward computation.
I0428 19:57:25.875151 28675 net.cpp:200] pool0 needs backward computation.
I0428 19:57:25.875154 28675 net.cpp:200] conv0 needs backward computation.
I0428 19:57:25.875159 28675 net.cpp:202] mnist does not need backward computation.
I0428 19:57:25.875161 28675 net.cpp:244] This network produces output loss
I0428 19:57:25.875170 28675 net.cpp:257] Network initialization done.
I0428 19:57:25.875519 28675 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test788.prototxt
I0428 19:57:25.875560 28675 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:25.875638 28675 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:57:25.875697 28675 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:25.875741 28675 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:25.875753 28675 net.cpp:86] Creating Layer mnist
I0428 19:57:25.875758 28675 net.cpp:382] mnist -> data
I0428 19:57:25.875766 28675 net.cpp:382] mnist -> label
I0428 19:57:25.875877 28675 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:25.878173 28675 net.cpp:124] Setting up mnist
I0428 19:57:25.878186 28675 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:25.878208 28675 net.cpp:131] Top shape: 100 (100)
I0428 19:57:25.878211 28675 net.cpp:139] Memory required for data: 314000
I0428 19:57:25.878216 28675 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:25.878221 28675 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:25.878226 28675 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:25.878231 28675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:25.878237 28675 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:25.878322 28675 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:25.878340 28675 net.cpp:131] Top shape: 100 (100)
I0428 19:57:25.878345 28675 net.cpp:131] Top shape: 100 (100)
I0428 19:57:25.878346 28675 net.cpp:139] Memory required for data: 314800
I0428 19:57:25.878350 28675 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:25.878358 28675 net.cpp:86] Creating Layer conv0
I0428 19:57:25.878361 28675 net.cpp:408] conv0 <- data
I0428 19:57:25.878366 28675 net.cpp:382] conv0 -> conv0
I0428 19:57:25.880054 28675 net.cpp:124] Setting up conv0
I0428 19:57:25.880084 28675 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:25.880089 28675 net.cpp:139] Memory required for data: 2618800
I0428 19:57:25.880097 28675 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:25.880105 28675 net.cpp:86] Creating Layer pool0
I0428 19:57:25.880108 28675 net.cpp:408] pool0 <- conv0
I0428 19:57:25.880112 28675 net.cpp:382] pool0 -> pool0
I0428 19:57:25.880149 28675 net.cpp:124] Setting up pool0
I0428 19:57:25.880156 28675 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:25.880159 28675 net.cpp:139] Memory required for data: 3194800
I0428 19:57:25.880162 28675 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:25.880172 28675 net.cpp:86] Creating Layer conv1
I0428 19:57:25.880174 28675 net.cpp:408] conv1 <- pool0
I0428 19:57:25.880182 28675 net.cpp:382] conv1 -> conv1
I0428 19:57:25.882371 28675 net.cpp:124] Setting up conv1
I0428 19:57:25.882400 28675 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:25.882405 28675 net.cpp:139] Memory required for data: 3322800
I0428 19:57:25.882414 28675 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:25.882421 28675 net.cpp:86] Creating Layer pool1
I0428 19:57:25.882424 28675 net.cpp:408] pool1 <- conv1
I0428 19:57:25.882446 28675 net.cpp:382] pool1 -> pool1
I0428 19:57:25.882488 28675 net.cpp:124] Setting up pool1
I0428 19:57:25.882495 28675 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:25.882498 28675 net.cpp:139] Memory required for data: 3354800
I0428 19:57:25.882501 28675 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:25.882506 28675 net.cpp:86] Creating Layer ip1
I0428 19:57:25.882517 28675 net.cpp:408] ip1 <- pool1
I0428 19:57:25.882524 28675 net.cpp:382] ip1 -> ip1
I0428 19:57:25.882664 28675 net.cpp:124] Setting up ip1
I0428 19:57:25.882673 28675 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:25.882675 28675 net.cpp:139] Memory required for data: 3364800
I0428 19:57:25.882683 28675 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:25.882689 28675 net.cpp:86] Creating Layer relu1
I0428 19:57:25.882692 28675 net.cpp:408] relu1 <- ip1
I0428 19:57:25.882696 28675 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:25.882906 28675 net.cpp:124] Setting up relu1
I0428 19:57:25.882928 28675 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:25.882931 28675 net.cpp:139] Memory required for data: 3374800
I0428 19:57:25.882935 28675 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:25.882942 28675 net.cpp:86] Creating Layer ip2
I0428 19:57:25.882946 28675 net.cpp:408] ip2 <- ip1
I0428 19:57:25.882952 28675 net.cpp:382] ip2 -> ip2
I0428 19:57:25.883074 28675 net.cpp:124] Setting up ip2
I0428 19:57:25.883081 28675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:25.883085 28675 net.cpp:139] Memory required for data: 3378800
I0428 19:57:25.883090 28675 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:25.883096 28675 net.cpp:86] Creating Layer relu2
I0428 19:57:25.883100 28675 net.cpp:408] relu2 <- ip2
I0428 19:57:25.883105 28675 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:25.883268 28675 net.cpp:124] Setting up relu2
I0428 19:57:25.883276 28675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:25.883280 28675 net.cpp:139] Memory required for data: 3382800
I0428 19:57:25.883283 28675 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:57:25.883291 28675 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:57:25.883293 28675 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:57:25.883297 28675 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:57:25.883314 28675 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:57:25.883365 28675 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:57:25.883373 28675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:25.883376 28675 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:25.883379 28675 net.cpp:139] Memory required for data: 3390800
I0428 19:57:25.883383 28675 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:25.883393 28675 net.cpp:86] Creating Layer accuracy
I0428 19:57:25.883396 28675 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:57:25.883399 28675 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:25.883404 28675 net.cpp:382] accuracy -> accuracy
I0428 19:57:25.883411 28675 net.cpp:124] Setting up accuracy
I0428 19:57:25.883415 28675 net.cpp:131] Top shape: (1)
I0428 19:57:25.883429 28675 net.cpp:139] Memory required for data: 3390804
I0428 19:57:25.883430 28675 layer_factory.hpp:77] Creating layer loss
I0428 19:57:25.883435 28675 net.cpp:86] Creating Layer loss
I0428 19:57:25.883438 28675 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:57:25.883442 28675 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:25.883447 28675 net.cpp:382] loss -> loss
I0428 19:57:25.883458 28675 layer_factory.hpp:77] Creating layer loss
I0428 19:57:25.883743 28675 net.cpp:124] Setting up loss
I0428 19:57:25.883751 28675 net.cpp:131] Top shape: (1)
I0428 19:57:25.883754 28675 net.cpp:134]     with loss weight 1
I0428 19:57:25.883760 28675 net.cpp:139] Memory required for data: 3390808
I0428 19:57:25.883764 28675 net.cpp:200] loss needs backward computation.
I0428 19:57:25.883767 28675 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:25.883771 28675 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:57:25.883774 28675 net.cpp:200] relu2 needs backward computation.
I0428 19:57:25.883777 28675 net.cpp:200] ip2 needs backward computation.
I0428 19:57:25.883780 28675 net.cpp:200] relu1 needs backward computation.
I0428 19:57:25.883782 28675 net.cpp:200] ip1 needs backward computation.
I0428 19:57:25.883785 28675 net.cpp:200] pool1 needs backward computation.
I0428 19:57:25.883790 28675 net.cpp:200] conv1 needs backward computation.
I0428 19:57:25.883792 28675 net.cpp:200] pool0 needs backward computation.
I0428 19:57:25.883795 28675 net.cpp:200] conv0 needs backward computation.
I0428 19:57:25.883798 28675 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:25.883802 28675 net.cpp:202] mnist does not need backward computation.
I0428 19:57:25.883810 28675 net.cpp:244] This network produces output accuracy
I0428 19:57:25.883815 28675 net.cpp:244] This network produces output loss
I0428 19:57:25.883824 28675 net.cpp:257] Network initialization done.
I0428 19:57:25.883862 28675 solver.cpp:56] Solver scaffolding done.
I0428 19:57:25.884140 28675 caffe.cpp:248] Starting Optimization
I0428 19:57:25.884152 28675 solver.cpp:273] Solving LeNet
I0428 19:57:25.884155 28675 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:25.884321 28675 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:25.888393 28675 blocking_queue.cpp:49] Waiting for data
I0428 19:57:25.960914 28684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:25.961411 28675 solver.cpp:398]     Test net output #0: accuracy = 0.1115
I0428 19:57:25.961446 28675 solver.cpp:398]     Test net output #1: loss = 2.29532 (* 1 = 2.29532 loss)
I0428 19:57:25.963914 28675 solver.cpp:219] Iteration 0 (-5.28005e-31 iter/s, 0.07972s/100 iters), loss = 2.31081
I0428 19:57:25.963937 28675 solver.cpp:238]     Train net output #0: loss = 2.31081 (* 1 = 2.31081 loss)
I0428 19:57:25.963979 28675 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:57:26.034124 28675 solver.cpp:219] Iteration 100 (1424.99 iter/s, 0.0701757s/100 iters), loss = 0.753132
I0428 19:57:26.034163 28675 solver.cpp:238]     Train net output #0: loss = 0.753132 (* 1 = 0.753132 loss)
I0428 19:57:26.034184 28675 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:57:26.104477 28675 solver.cpp:219] Iteration 200 (1422.07 iter/s, 0.0703202s/100 iters), loss = 0.54116
I0428 19:57:26.104528 28675 solver.cpp:238]     Train net output #0: loss = 0.54116 (* 1 = 0.54116 loss)
I0428 19:57:26.104534 28675 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:57:26.174751 28675 solver.cpp:219] Iteration 300 (1423.85 iter/s, 0.0702321s/100 iters), loss = 0.682199
I0428 19:57:26.174792 28675 solver.cpp:238]     Train net output #0: loss = 0.682199 (* 1 = 0.682199 loss)
I0428 19:57:26.174798 28675 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:57:26.243938 28675 solver.cpp:219] Iteration 400 (1446.03 iter/s, 0.0691548s/100 iters), loss = 0.945165
I0428 19:57:26.243978 28675 solver.cpp:238]     Train net output #0: loss = 0.945165 (* 1 = 0.945165 loss)
I0428 19:57:26.243983 28675 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:57:26.312713 28675 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:57:26.365890 28684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:26.366402 28675 solver.cpp:398]     Test net output #0: accuracy = 0.8346
I0428 19:57:26.366439 28675 solver.cpp:398]     Test net output #1: loss = 0.624782 (* 1 = 0.624782 loss)
I0428 19:57:26.367182 28675 solver.cpp:219] Iteration 500 (811.646 iter/s, 0.123206s/100 iters), loss = 0.770986
I0428 19:57:26.367204 28675 solver.cpp:238]     Train net output #0: loss = 0.770986 (* 1 = 0.770986 loss)
I0428 19:57:26.367213 28675 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:57:26.437091 28675 solver.cpp:219] Iteration 600 (1431.07 iter/s, 0.0698778s/100 iters), loss = 0.425685
I0428 19:57:26.437131 28675 solver.cpp:238]     Train net output #0: loss = 0.425685 (* 1 = 0.425685 loss)
I0428 19:57:26.437149 28675 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:57:26.506948 28675 solver.cpp:219] Iteration 700 (1432.16 iter/s, 0.0698245s/100 iters), loss = 0.656713
I0428 19:57:26.506973 28675 solver.cpp:238]     Train net output #0: loss = 0.656713 (* 1 = 0.656713 loss)
I0428 19:57:26.506978 28675 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:57:26.576233 28675 solver.cpp:219] Iteration 800 (1443.96 iter/s, 0.069254s/100 iters), loss = 0.585899
I0428 19:57:26.576272 28675 solver.cpp:238]     Train net output #0: loss = 0.585899 (* 1 = 0.585899 loss)
I0428 19:57:26.576278 28675 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:57:26.644301 28675 solver.cpp:219] Iteration 900 (1469.8 iter/s, 0.0680366s/100 iters), loss = 0.346465
I0428 19:57:26.644340 28675 solver.cpp:238]     Train net output #0: loss = 0.346465 (* 1 = 0.346465 loss)
I0428 19:57:26.644345 28675 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:57:26.667129 28683 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:26.712021 28675 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:57:26.712695 28675 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:57:26.713109 28675 solver.cpp:311] Iteration 1000, loss = 0.29915
I0428 19:57:26.713138 28675 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:57:26.757076 28684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:26.757587 28675 solver.cpp:398]     Test net output #0: accuracy = 0.8682
I0428 19:57:26.757604 28675 solver.cpp:398]     Test net output #1: loss = 0.355286 (* 1 = 0.355286 loss)
I0428 19:57:26.757625 28675 solver.cpp:316] Optimization Done.
I0428 19:57:26.757628 28675 caffe.cpp:259] Optimization Done.
