I0428 20:09:28.586719 31633 caffe.cpp:218] Using GPUs 0
I0428 20:09:28.624718 31633 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:09:29.138207 31633 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1110.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:09:29.138356 31633 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1110.prototxt
I0428 20:09:29.138775 31633 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:09:29.138795 31633 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:09:29.138897 31633 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:29.138979 31633 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:29.139078 31633 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:09:29.139101 31633 net.cpp:86] Creating Layer mnist
I0428 20:09:29.139111 31633 net.cpp:382] mnist -> data
I0428 20:09:29.139133 31633 net.cpp:382] mnist -> label
I0428 20:09:29.140230 31633 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:09:29.142698 31633 net.cpp:124] Setting up mnist
I0428 20:09:29.142716 31633 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:09:29.142722 31633 net.cpp:131] Top shape: 64 (64)
I0428 20:09:29.142726 31633 net.cpp:139] Memory required for data: 200960
I0428 20:09:29.142734 31633 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:29.142765 31633 net.cpp:86] Creating Layer conv0
I0428 20:09:29.142787 31633 net.cpp:408] conv0 <- data
I0428 20:09:29.142802 31633 net.cpp:382] conv0 -> conv0
I0428 20:09:29.417248 31633 net.cpp:124] Setting up conv0
I0428 20:09:29.417289 31633 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:09:29.417294 31633 net.cpp:139] Memory required for data: 3887360
I0428 20:09:29.417309 31633 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:29.417320 31633 net.cpp:86] Creating Layer pool0
I0428 20:09:29.417325 31633 net.cpp:408] pool0 <- conv0
I0428 20:09:29.417346 31633 net.cpp:382] pool0 -> pool0
I0428 20:09:29.417393 31633 net.cpp:124] Setting up pool0
I0428 20:09:29.417405 31633 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:09:29.417408 31633 net.cpp:139] Memory required for data: 4808960
I0428 20:09:29.417412 31633 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:29.417423 31633 net.cpp:86] Creating Layer conv1
I0428 20:09:29.417425 31633 net.cpp:408] conv1 <- pool0
I0428 20:09:29.417430 31633 net.cpp:382] conv1 -> conv1
I0428 20:09:29.420298 31633 net.cpp:124] Setting up conv1
I0428 20:09:29.420327 31633 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:09:29.420331 31633 net.cpp:139] Memory required for data: 5218560
I0428 20:09:29.420354 31633 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:29.420362 31633 net.cpp:86] Creating Layer pool1
I0428 20:09:29.420366 31633 net.cpp:408] pool1 <- conv1
I0428 20:09:29.420372 31633 net.cpp:382] pool1 -> pool1
I0428 20:09:29.420428 31633 net.cpp:124] Setting up pool1
I0428 20:09:29.420433 31633 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:09:29.420435 31633 net.cpp:139] Memory required for data: 5320960
I0428 20:09:29.420439 31633 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:29.420450 31633 net.cpp:86] Creating Layer ip1
I0428 20:09:29.420454 31633 net.cpp:408] ip1 <- pool1
I0428 20:09:29.420459 31633 net.cpp:382] ip1 -> ip1
I0428 20:09:29.421459 31633 net.cpp:124] Setting up ip1
I0428 20:09:29.421489 31633 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:29.421507 31633 net.cpp:139] Memory required for data: 5323520
I0428 20:09:29.421516 31633 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:29.421525 31633 net.cpp:86] Creating Layer relu1
I0428 20:09:29.421528 31633 net.cpp:408] relu1 <- ip1
I0428 20:09:29.421533 31633 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:29.421717 31633 net.cpp:124] Setting up relu1
I0428 20:09:29.421726 31633 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:29.421730 31633 net.cpp:139] Memory required for data: 5326080
I0428 20:09:29.421733 31633 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:29.421741 31633 net.cpp:86] Creating Layer ip2
I0428 20:09:29.421743 31633 net.cpp:408] ip2 <- ip1
I0428 20:09:29.421749 31633 net.cpp:382] ip2 -> ip2
I0428 20:09:29.421859 31633 net.cpp:124] Setting up ip2
I0428 20:09:29.421866 31633 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:09:29.421869 31633 net.cpp:139] Memory required for data: 5338880
I0428 20:09:29.421875 31633 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:29.421881 31633 net.cpp:86] Creating Layer relu2
I0428 20:09:29.421885 31633 net.cpp:408] relu2 <- ip2
I0428 20:09:29.421890 31633 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:29.422662 31633 net.cpp:124] Setting up relu2
I0428 20:09:29.422674 31633 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:09:29.422693 31633 net.cpp:139] Memory required for data: 5351680
I0428 20:09:29.422698 31633 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:29.422704 31633 net.cpp:86] Creating Layer ip3
I0428 20:09:29.422708 31633 net.cpp:408] ip3 <- ip2
I0428 20:09:29.422715 31633 net.cpp:382] ip3 -> ip3
I0428 20:09:29.422828 31633 net.cpp:124] Setting up ip3
I0428 20:09:29.422837 31633 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:29.422839 31633 net.cpp:139] Memory required for data: 5354240
I0428 20:09:29.422847 31633 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:29.422854 31633 net.cpp:86] Creating Layer relu3
I0428 20:09:29.422857 31633 net.cpp:408] relu3 <- ip3
I0428 20:09:29.422861 31633 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:29.423044 31633 net.cpp:124] Setting up relu3
I0428 20:09:29.423053 31633 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:29.423058 31633 net.cpp:139] Memory required for data: 5356800
I0428 20:09:29.423061 31633 layer_factory.hpp:77] Creating layer loss
I0428 20:09:29.423068 31633 net.cpp:86] Creating Layer loss
I0428 20:09:29.423070 31633 net.cpp:408] loss <- ip3
I0428 20:09:29.423074 31633 net.cpp:408] loss <- label
I0428 20:09:29.423080 31633 net.cpp:382] loss -> loss
I0428 20:09:29.423104 31633 layer_factory.hpp:77] Creating layer loss
I0428 20:09:29.423362 31633 net.cpp:124] Setting up loss
I0428 20:09:29.423373 31633 net.cpp:131] Top shape: (1)
I0428 20:09:29.423377 31633 net.cpp:134]     with loss weight 1
I0428 20:09:29.423393 31633 net.cpp:139] Memory required for data: 5356804
I0428 20:09:29.423396 31633 net.cpp:200] loss needs backward computation.
I0428 20:09:29.423399 31633 net.cpp:200] relu3 needs backward computation.
I0428 20:09:29.423403 31633 net.cpp:200] ip3 needs backward computation.
I0428 20:09:29.423405 31633 net.cpp:200] relu2 needs backward computation.
I0428 20:09:29.423408 31633 net.cpp:200] ip2 needs backward computation.
I0428 20:09:29.423410 31633 net.cpp:200] relu1 needs backward computation.
I0428 20:09:29.423413 31633 net.cpp:200] ip1 needs backward computation.
I0428 20:09:29.423416 31633 net.cpp:200] pool1 needs backward computation.
I0428 20:09:29.423419 31633 net.cpp:200] conv1 needs backward computation.
I0428 20:09:29.423422 31633 net.cpp:200] pool0 needs backward computation.
I0428 20:09:29.423425 31633 net.cpp:200] conv0 needs backward computation.
I0428 20:09:29.423429 31633 net.cpp:202] mnist does not need backward computation.
I0428 20:09:29.423431 31633 net.cpp:244] This network produces output loss
I0428 20:09:29.423440 31633 net.cpp:257] Network initialization done.
I0428 20:09:29.423810 31633 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1110.prototxt
I0428 20:09:29.423852 31633 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:09:29.423949 31633 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:29.424046 31633 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:29.424088 31633 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:09:29.424101 31633 net.cpp:86] Creating Layer mnist
I0428 20:09:29.424106 31633 net.cpp:382] mnist -> data
I0428 20:09:29.424114 31633 net.cpp:382] mnist -> label
I0428 20:09:29.424203 31633 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:09:29.426620 31633 net.cpp:124] Setting up mnist
I0428 20:09:29.426645 31633 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:09:29.426651 31633 net.cpp:131] Top shape: 100 (100)
I0428 20:09:29.426653 31633 net.cpp:139] Memory required for data: 314000
I0428 20:09:29.426657 31633 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:09:29.426695 31633 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:09:29.426699 31633 net.cpp:408] label_mnist_1_split <- label
I0428 20:09:29.426707 31633 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:09:29.426712 31633 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:09:29.426781 31633 net.cpp:124] Setting up label_mnist_1_split
I0428 20:09:29.426790 31633 net.cpp:131] Top shape: 100 (100)
I0428 20:09:29.426795 31633 net.cpp:131] Top shape: 100 (100)
I0428 20:09:29.426813 31633 net.cpp:139] Memory required for data: 314800
I0428 20:09:29.426817 31633 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:29.426842 31633 net.cpp:86] Creating Layer conv0
I0428 20:09:29.426846 31633 net.cpp:408] conv0 <- data
I0428 20:09:29.426851 31633 net.cpp:382] conv0 -> conv0
I0428 20:09:29.428719 31633 net.cpp:124] Setting up conv0
I0428 20:09:29.428733 31633 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:09:29.428737 31633 net.cpp:139] Memory required for data: 6074800
I0428 20:09:29.428746 31633 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:29.428753 31633 net.cpp:86] Creating Layer pool0
I0428 20:09:29.428756 31633 net.cpp:408] pool0 <- conv0
I0428 20:09:29.428762 31633 net.cpp:382] pool0 -> pool0
I0428 20:09:29.428802 31633 net.cpp:124] Setting up pool0
I0428 20:09:29.428807 31633 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:09:29.428818 31633 net.cpp:139] Memory required for data: 7514800
I0428 20:09:29.428823 31633 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:29.428833 31633 net.cpp:86] Creating Layer conv1
I0428 20:09:29.428836 31633 net.cpp:408] conv1 <- pool0
I0428 20:09:29.428858 31633 net.cpp:382] conv1 -> conv1
I0428 20:09:29.431217 31633 net.cpp:124] Setting up conv1
I0428 20:09:29.431231 31633 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:09:29.431233 31633 net.cpp:139] Memory required for data: 8154800
I0428 20:09:29.431242 31633 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:29.431265 31633 net.cpp:86] Creating Layer pool1
I0428 20:09:29.431269 31633 net.cpp:408] pool1 <- conv1
I0428 20:09:29.431274 31633 net.cpp:382] pool1 -> pool1
I0428 20:09:29.431318 31633 net.cpp:124] Setting up pool1
I0428 20:09:29.431324 31633 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:09:29.431327 31633 net.cpp:139] Memory required for data: 8314800
I0428 20:09:29.431337 31633 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:29.431344 31633 net.cpp:86] Creating Layer ip1
I0428 20:09:29.431349 31633 net.cpp:408] ip1 <- pool1
I0428 20:09:29.431354 31633 net.cpp:382] ip1 -> ip1
I0428 20:09:29.431545 31633 net.cpp:124] Setting up ip1
I0428 20:09:29.431555 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.431566 31633 net.cpp:139] Memory required for data: 8318800
I0428 20:09:29.431574 31633 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:29.431586 31633 net.cpp:86] Creating Layer relu1
I0428 20:09:29.431589 31633 net.cpp:408] relu1 <- ip1
I0428 20:09:29.431602 31633 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:29.431787 31633 net.cpp:124] Setting up relu1
I0428 20:09:29.431797 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.431799 31633 net.cpp:139] Memory required for data: 8322800
I0428 20:09:29.431802 31633 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:29.431810 31633 net.cpp:86] Creating Layer ip2
I0428 20:09:29.431814 31633 net.cpp:408] ip2 <- ip1
I0428 20:09:29.431819 31633 net.cpp:382] ip2 -> ip2
I0428 20:09:29.431928 31633 net.cpp:124] Setting up ip2
I0428 20:09:29.431936 31633 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:09:29.431939 31633 net.cpp:139] Memory required for data: 8342800
I0428 20:09:29.431946 31633 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:29.431951 31633 net.cpp:86] Creating Layer relu2
I0428 20:09:29.431955 31633 net.cpp:408] relu2 <- ip2
I0428 20:09:29.431959 31633 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:29.432129 31633 net.cpp:124] Setting up relu2
I0428 20:09:29.432137 31633 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:09:29.432140 31633 net.cpp:139] Memory required for data: 8362800
I0428 20:09:29.432144 31633 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:29.432163 31633 net.cpp:86] Creating Layer ip3
I0428 20:09:29.432166 31633 net.cpp:408] ip3 <- ip2
I0428 20:09:29.432188 31633 net.cpp:382] ip3 -> ip3
I0428 20:09:29.432307 31633 net.cpp:124] Setting up ip3
I0428 20:09:29.432315 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.432319 31633 net.cpp:139] Memory required for data: 8366800
I0428 20:09:29.432327 31633 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:29.432333 31633 net.cpp:86] Creating Layer relu3
I0428 20:09:29.432337 31633 net.cpp:408] relu3 <- ip3
I0428 20:09:29.432340 31633 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:29.433190 31633 net.cpp:124] Setting up relu3
I0428 20:09:29.433203 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.433208 31633 net.cpp:139] Memory required for data: 8370800
I0428 20:09:29.433212 31633 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:09:29.433217 31633 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:09:29.433220 31633 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:09:29.433225 31633 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:09:29.433231 31633 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:09:29.433277 31633 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:09:29.433284 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.433286 31633 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:29.433290 31633 net.cpp:139] Memory required for data: 8378800
I0428 20:09:29.433292 31633 layer_factory.hpp:77] Creating layer accuracy
I0428 20:09:29.433298 31633 net.cpp:86] Creating Layer accuracy
I0428 20:09:29.433301 31633 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:09:29.433305 31633 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:09:29.433310 31633 net.cpp:382] accuracy -> accuracy
I0428 20:09:29.433316 31633 net.cpp:124] Setting up accuracy
I0428 20:09:29.433320 31633 net.cpp:131] Top shape: (1)
I0428 20:09:29.433323 31633 net.cpp:139] Memory required for data: 8378804
I0428 20:09:29.433326 31633 layer_factory.hpp:77] Creating layer loss
I0428 20:09:29.433331 31633 net.cpp:86] Creating Layer loss
I0428 20:09:29.433334 31633 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:09:29.433338 31633 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:09:29.433342 31633 net.cpp:382] loss -> loss
I0428 20:09:29.433348 31633 layer_factory.hpp:77] Creating layer loss
I0428 20:09:29.433590 31633 net.cpp:124] Setting up loss
I0428 20:09:29.433599 31633 net.cpp:131] Top shape: (1)
I0428 20:09:29.433604 31633 net.cpp:134]     with loss weight 1
I0428 20:09:29.433619 31633 net.cpp:139] Memory required for data: 8378808
I0428 20:09:29.433624 31633 net.cpp:200] loss needs backward computation.
I0428 20:09:29.433626 31633 net.cpp:202] accuracy does not need backward computation.
I0428 20:09:29.433630 31633 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:09:29.433634 31633 net.cpp:200] relu3 needs backward computation.
I0428 20:09:29.433636 31633 net.cpp:200] ip3 needs backward computation.
I0428 20:09:29.433647 31633 net.cpp:200] relu2 needs backward computation.
I0428 20:09:29.433650 31633 net.cpp:200] ip2 needs backward computation.
I0428 20:09:29.433653 31633 net.cpp:200] relu1 needs backward computation.
I0428 20:09:29.433655 31633 net.cpp:200] ip1 needs backward computation.
I0428 20:09:29.433658 31633 net.cpp:200] pool1 needs backward computation.
I0428 20:09:29.433667 31633 net.cpp:200] conv1 needs backward computation.
I0428 20:09:29.433670 31633 net.cpp:200] pool0 needs backward computation.
I0428 20:09:29.433673 31633 net.cpp:200] conv0 needs backward computation.
I0428 20:09:29.433676 31633 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:09:29.433681 31633 net.cpp:202] mnist does not need backward computation.
I0428 20:09:29.433688 31633 net.cpp:244] This network produces output accuracy
I0428 20:09:29.433692 31633 net.cpp:244] This network produces output loss
I0428 20:09:29.433704 31633 net.cpp:257] Network initialization done.
I0428 20:09:29.433758 31633 solver.cpp:56] Solver scaffolding done.
I0428 20:09:29.434116 31633 caffe.cpp:248] Starting Optimization
I0428 20:09:29.434123 31633 solver.cpp:273] Solving LeNet
I0428 20:09:29.434125 31633 solver.cpp:274] Learning Rate Policy: inv
I0428 20:09:29.435048 31633 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:09:29.441059 31633 blocking_queue.cpp:49] Waiting for data
I0428 20:09:29.511657 31640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:29.512276 31633 solver.cpp:398]     Test net output #0: accuracy = 0.1052
I0428 20:09:29.512295 31633 solver.cpp:398]     Test net output #1: loss = 2.2948 (* 1 = 2.2948 loss)
I0428 20:09:29.516101 31633 solver.cpp:219] Iteration 0 (0 iter/s, 0.0819508s/100 iters), loss = 2.28759
I0428 20:09:29.516125 31633 solver.cpp:238]     Train net output #0: loss = 2.28759 (* 1 = 2.28759 loss)
I0428 20:09:29.516135 31633 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:09:29.620604 31633 solver.cpp:219] Iteration 100 (957.311 iter/s, 0.104459s/100 iters), loss = 1.00314
I0428 20:09:29.620645 31633 solver.cpp:238]     Train net output #0: loss = 1.00314 (* 1 = 1.00314 loss)
I0428 20:09:29.620656 31633 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:09:29.728633 31633 solver.cpp:219] Iteration 200 (926.108 iter/s, 0.107979s/100 iters), loss = 1.12652
I0428 20:09:29.728665 31633 solver.cpp:238]     Train net output #0: loss = 1.12652 (* 1 = 1.12652 loss)
I0428 20:09:29.728672 31633 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:09:29.831666 31633 solver.cpp:219] Iteration 300 (970.96 iter/s, 0.102991s/100 iters), loss = 0.793909
I0428 20:09:29.831697 31633 solver.cpp:238]     Train net output #0: loss = 0.793909 (* 1 = 0.793909 loss)
I0428 20:09:29.831704 31633 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:09:29.935904 31633 solver.cpp:219] Iteration 400 (959.731 iter/s, 0.104196s/100 iters), loss = 0.809437
I0428 20:09:29.935933 31633 solver.cpp:238]     Train net output #0: loss = 0.809437 (* 1 = 0.809437 loss)
I0428 20:09:29.935940 31633 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:09:30.040760 31633 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:09:30.114560 31640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:30.115283 31633 solver.cpp:398]     Test net output #0: accuracy = 0.7688
I0428 20:09:30.115308 31633 solver.cpp:398]     Test net output #1: loss = 0.789394 (* 1 = 0.789394 loss)
I0428 20:09:30.116583 31633 solver.cpp:219] Iteration 500 (553.65 iter/s, 0.180619s/100 iters), loss = 0.661087
I0428 20:09:30.116642 31633 solver.cpp:238]     Train net output #0: loss = 0.661087 (* 1 = 0.661087 loss)
I0428 20:09:30.116701 31633 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:09:30.226033 31633 solver.cpp:219] Iteration 600 (914.211 iter/s, 0.109384s/100 iters), loss = 0.546472
I0428 20:09:30.226056 31633 solver.cpp:238]     Train net output #0: loss = 0.546472 (* 1 = 0.546472 loss)
I0428 20:09:30.226061 31633 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:09:30.328604 31633 solver.cpp:219] Iteration 700 (975.246 iter/s, 0.102538s/100 iters), loss = 1.20401
I0428 20:09:30.328642 31633 solver.cpp:238]     Train net output #0: loss = 1.20401 (* 1 = 1.20401 loss)
I0428 20:09:30.328649 31633 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:09:30.432114 31633 solver.cpp:219] Iteration 800 (966.396 iter/s, 0.103477s/100 iters), loss = 0.765691
I0428 20:09:30.432155 31633 solver.cpp:238]     Train net output #0: loss = 0.765691 (* 1 = 0.765691 loss)
I0428 20:09:30.432160 31633 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:09:30.543337 31633 solver.cpp:219] Iteration 900 (899.394 iter/s, 0.111186s/100 iters), loss = 0.568074
I0428 20:09:30.543377 31633 solver.cpp:238]     Train net output #0: loss = 0.568074 (* 1 = 0.568074 loss)
I0428 20:09:30.543383 31633 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:09:30.578634 31639 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:30.643851 31633 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:09:30.645011 31633 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:09:30.645674 31633 solver.cpp:311] Iteration 1000, loss = 0.762424
I0428 20:09:30.645704 31633 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:09:30.716347 31640 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:30.717146 31633 solver.cpp:398]     Test net output #0: accuracy = 0.7885
I0428 20:09:30.717197 31633 solver.cpp:398]     Test net output #1: loss = 0.550581 (* 1 = 0.550581 loss)
I0428 20:09:30.717221 31633 solver.cpp:316] Optimization Done.
I0428 20:09:30.717226 31633 caffe.cpp:259] Optimization Done.
