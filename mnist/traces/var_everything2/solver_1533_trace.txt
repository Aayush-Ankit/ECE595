I0428 20:30:05.584615  3666 caffe.cpp:218] Using GPUs 0
I0428 20:30:05.624603  3666 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:30:06.144888  3666 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1533.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:30:06.145061  3666 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1533.prototxt
I0428 20:30:06.145476  3666 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:30:06.145500  3666 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:30:06.145612  3666 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:06.145719  3666 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:06.145851  3666 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:30:06.145885  3666 net.cpp:86] Creating Layer mnist
I0428 20:30:06.145897  3666 net.cpp:382] mnist -> data
I0428 20:30:06.145928  3666 net.cpp:382] mnist -> label
I0428 20:30:06.147202  3666 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:30:06.149677  3666 net.cpp:124] Setting up mnist
I0428 20:30:06.149698  3666 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:30:06.149708  3666 net.cpp:131] Top shape: 64 (64)
I0428 20:30:06.149715  3666 net.cpp:139] Memory required for data: 200960
I0428 20:30:06.149727  3666 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:06.149749  3666 net.cpp:86] Creating Layer conv0
I0428 20:30:06.149775  3666 net.cpp:408] conv0 <- data
I0428 20:30:06.149794  3666 net.cpp:382] conv0 -> conv0
I0428 20:30:06.431951  3666 net.cpp:124] Setting up conv0
I0428 20:30:06.431982  3666 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:30:06.431988  3666 net.cpp:139] Memory required for data: 14946560
I0428 20:30:06.432008  3666 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:06.432025  3666 net.cpp:86] Creating Layer pool0
I0428 20:30:06.432032  3666 net.cpp:408] pool0 <- conv0
I0428 20:30:06.432040  3666 net.cpp:382] pool0 -> pool0
I0428 20:30:06.432099  3666 net.cpp:124] Setting up pool0
I0428 20:30:06.432108  3666 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:30:06.432113  3666 net.cpp:139] Memory required for data: 18632960
I0428 20:30:06.432118  3666 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:06.432134  3666 net.cpp:86] Creating Layer conv1
I0428 20:30:06.432140  3666 net.cpp:408] conv1 <- pool0
I0428 20:30:06.432149  3666 net.cpp:382] conv1 -> conv1
I0428 20:30:06.434161  3666 net.cpp:124] Setting up conv1
I0428 20:30:06.434177  3666 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:30:06.434183  3666 net.cpp:139] Memory required for data: 18796800
I0428 20:30:06.434211  3666 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:06.434221  3666 net.cpp:86] Creating Layer pool1
I0428 20:30:06.434226  3666 net.cpp:408] pool1 <- conv1
I0428 20:30:06.434234  3666 net.cpp:382] pool1 -> pool1
I0428 20:30:06.434276  3666 net.cpp:124] Setting up pool1
I0428 20:30:06.434285  3666 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:30:06.434289  3666 net.cpp:139] Memory required for data: 18837760
I0428 20:30:06.434295  3666 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:06.434306  3666 net.cpp:86] Creating Layer ip1
I0428 20:30:06.434311  3666 net.cpp:408] ip1 <- pool1
I0428 20:30:06.434319  3666 net.cpp:382] ip1 -> ip1
I0428 20:30:06.434432  3666 net.cpp:124] Setting up ip1
I0428 20:30:06.434442  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.434447  3666 net.cpp:139] Memory required for data: 18840320
I0428 20:30:06.434458  3666 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:06.434469  3666 net.cpp:86] Creating Layer relu1
I0428 20:30:06.434478  3666 net.cpp:408] relu1 <- ip1
I0428 20:30:06.434484  3666 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:06.434643  3666 net.cpp:124] Setting up relu1
I0428 20:30:06.434653  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.434658  3666 net.cpp:139] Memory required for data: 18842880
I0428 20:30:06.434664  3666 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:06.434672  3666 net.cpp:86] Creating Layer ip2
I0428 20:30:06.434679  3666 net.cpp:408] ip2 <- ip1
I0428 20:30:06.434686  3666 net.cpp:382] ip2 -> ip2
I0428 20:30:06.434779  3666 net.cpp:124] Setting up ip2
I0428 20:30:06.434787  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.434792  3666 net.cpp:139] Memory required for data: 18845440
I0428 20:30:06.434801  3666 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:06.434810  3666 net.cpp:86] Creating Layer relu2
I0428 20:30:06.434815  3666 net.cpp:408] relu2 <- ip2
I0428 20:30:06.434823  3666 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:06.435613  3666 net.cpp:124] Setting up relu2
I0428 20:30:06.435626  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.435632  3666 net.cpp:139] Memory required for data: 18848000
I0428 20:30:06.435637  3666 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:06.435647  3666 net.cpp:86] Creating Layer ip3
I0428 20:30:06.435653  3666 net.cpp:408] ip3 <- ip2
I0428 20:30:06.435662  3666 net.cpp:382] ip3 -> ip3
I0428 20:30:06.435760  3666 net.cpp:124] Setting up ip3
I0428 20:30:06.435768  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.435773  3666 net.cpp:139] Memory required for data: 18850560
I0428 20:30:06.435786  3666 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:06.435796  3666 net.cpp:86] Creating Layer relu3
I0428 20:30:06.435801  3666 net.cpp:408] relu3 <- ip3
I0428 20:30:06.435808  3666 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:06.435968  3666 net.cpp:124] Setting up relu3
I0428 20:30:06.435978  3666 net.cpp:131] Top shape: 64 10 (640)
I0428 20:30:06.435983  3666 net.cpp:139] Memory required for data: 18853120
I0428 20:30:06.435988  3666 layer_factory.hpp:77] Creating layer loss
I0428 20:30:06.435997  3666 net.cpp:86] Creating Layer loss
I0428 20:30:06.436002  3666 net.cpp:408] loss <- ip3
I0428 20:30:06.436009  3666 net.cpp:408] loss <- label
I0428 20:30:06.436017  3666 net.cpp:382] loss -> loss
I0428 20:30:06.436039  3666 layer_factory.hpp:77] Creating layer loss
I0428 20:30:06.436252  3666 net.cpp:124] Setting up loss
I0428 20:30:06.436264  3666 net.cpp:131] Top shape: (1)
I0428 20:30:06.436269  3666 net.cpp:134]     with loss weight 1
I0428 20:30:06.436287  3666 net.cpp:139] Memory required for data: 18853124
I0428 20:30:06.436293  3666 net.cpp:200] loss needs backward computation.
I0428 20:30:06.436300  3666 net.cpp:200] relu3 needs backward computation.
I0428 20:30:06.436305  3666 net.cpp:200] ip3 needs backward computation.
I0428 20:30:06.436309  3666 net.cpp:200] relu2 needs backward computation.
I0428 20:30:06.436313  3666 net.cpp:200] ip2 needs backward computation.
I0428 20:30:06.436318  3666 net.cpp:200] relu1 needs backward computation.
I0428 20:30:06.436323  3666 net.cpp:200] ip1 needs backward computation.
I0428 20:30:06.436328  3666 net.cpp:200] pool1 needs backward computation.
I0428 20:30:06.436333  3666 net.cpp:200] conv1 needs backward computation.
I0428 20:30:06.436338  3666 net.cpp:200] pool0 needs backward computation.
I0428 20:30:06.436343  3666 net.cpp:200] conv0 needs backward computation.
I0428 20:30:06.436349  3666 net.cpp:202] mnist does not need backward computation.
I0428 20:30:06.436353  3666 net.cpp:244] This network produces output loss
I0428 20:30:06.436368  3666 net.cpp:257] Network initialization done.
I0428 20:30:06.436702  3666 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1533.prototxt
I0428 20:30:06.436735  3666 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:30:06.436856  3666 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:30:06.437021  3666 layer_factory.hpp:77] Creating layer mnist
I0428 20:30:06.437081  3666 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:30:06.437103  3666 net.cpp:86] Creating Layer mnist
I0428 20:30:06.437110  3666 net.cpp:382] mnist -> data
I0428 20:30:06.437124  3666 net.cpp:382] mnist -> label
I0428 20:30:06.437269  3666 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:30:06.439330  3666 net.cpp:124] Setting up mnist
I0428 20:30:06.439362  3666 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:30:06.439370  3666 net.cpp:131] Top shape: 100 (100)
I0428 20:30:06.439375  3666 net.cpp:139] Memory required for data: 314000
I0428 20:30:06.439381  3666 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:30:06.439406  3666 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:30:06.439412  3666 net.cpp:408] label_mnist_1_split <- label
I0428 20:30:06.439420  3666 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:30:06.439431  3666 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:30:06.439522  3666 net.cpp:124] Setting up label_mnist_1_split
I0428 20:30:06.439530  3666 net.cpp:131] Top shape: 100 (100)
I0428 20:30:06.439537  3666 net.cpp:131] Top shape: 100 (100)
I0428 20:30:06.439541  3666 net.cpp:139] Memory required for data: 314800
I0428 20:30:06.439546  3666 layer_factory.hpp:77] Creating layer conv0
I0428 20:30:06.439559  3666 net.cpp:86] Creating Layer conv0
I0428 20:30:06.439565  3666 net.cpp:408] conv0 <- data
I0428 20:30:06.439574  3666 net.cpp:382] conv0 -> conv0
I0428 20:30:06.441203  3666 net.cpp:124] Setting up conv0
I0428 20:30:06.441220  3666 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:30:06.441226  3666 net.cpp:139] Memory required for data: 23354800
I0428 20:30:06.441238  3666 layer_factory.hpp:77] Creating layer pool0
I0428 20:30:06.441249  3666 net.cpp:86] Creating Layer pool0
I0428 20:30:06.441256  3666 net.cpp:408] pool0 <- conv0
I0428 20:30:06.441264  3666 net.cpp:382] pool0 -> pool0
I0428 20:30:06.441306  3666 net.cpp:124] Setting up pool0
I0428 20:30:06.441314  3666 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:30:06.441319  3666 net.cpp:139] Memory required for data: 29114800
I0428 20:30:06.441324  3666 layer_factory.hpp:77] Creating layer conv1
I0428 20:30:06.441339  3666 net.cpp:86] Creating Layer conv1
I0428 20:30:06.441344  3666 net.cpp:408] conv1 <- pool0
I0428 20:30:06.441354  3666 net.cpp:382] conv1 -> conv1
I0428 20:30:06.443039  3666 net.cpp:124] Setting up conv1
I0428 20:30:06.443056  3666 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:30:06.443063  3666 net.cpp:139] Memory required for data: 29370800
I0428 20:30:06.443076  3666 layer_factory.hpp:77] Creating layer pool1
I0428 20:30:06.443087  3666 net.cpp:86] Creating Layer pool1
I0428 20:30:06.443097  3666 net.cpp:408] pool1 <- conv1
I0428 20:30:06.443105  3666 net.cpp:382] pool1 -> pool1
I0428 20:30:06.443147  3666 net.cpp:124] Setting up pool1
I0428 20:30:06.443156  3666 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:30:06.443162  3666 net.cpp:139] Memory required for data: 29434800
I0428 20:30:06.443167  3666 layer_factory.hpp:77] Creating layer ip1
I0428 20:30:06.443178  3666 net.cpp:86] Creating Layer ip1
I0428 20:30:06.443184  3666 net.cpp:408] ip1 <- pool1
I0428 20:30:06.443192  3666 net.cpp:382] ip1 -> ip1
I0428 20:30:06.443322  3666 net.cpp:124] Setting up ip1
I0428 20:30:06.443331  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.443347  3666 net.cpp:139] Memory required for data: 29438800
I0428 20:30:06.443364  3666 layer_factory.hpp:77] Creating layer relu1
I0428 20:30:06.443375  3666 net.cpp:86] Creating Layer relu1
I0428 20:30:06.443382  3666 net.cpp:408] relu1 <- ip1
I0428 20:30:06.443389  3666 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:30:06.443641  3666 net.cpp:124] Setting up relu1
I0428 20:30:06.443653  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.443660  3666 net.cpp:139] Memory required for data: 29442800
I0428 20:30:06.443665  3666 layer_factory.hpp:77] Creating layer ip2
I0428 20:30:06.443675  3666 net.cpp:86] Creating Layer ip2
I0428 20:30:06.443682  3666 net.cpp:408] ip2 <- ip1
I0428 20:30:06.443692  3666 net.cpp:382] ip2 -> ip2
I0428 20:30:06.443795  3666 net.cpp:124] Setting up ip2
I0428 20:30:06.443804  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.443810  3666 net.cpp:139] Memory required for data: 29446800
I0428 20:30:06.443819  3666 layer_factory.hpp:77] Creating layer relu2
I0428 20:30:06.443830  3666 net.cpp:86] Creating Layer relu2
I0428 20:30:06.443836  3666 net.cpp:408] relu2 <- ip2
I0428 20:30:06.443843  3666 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:30:06.444018  3666 net.cpp:124] Setting up relu2
I0428 20:30:06.444028  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.444033  3666 net.cpp:139] Memory required for data: 29450800
I0428 20:30:06.444038  3666 layer_factory.hpp:77] Creating layer ip3
I0428 20:30:06.444049  3666 net.cpp:86] Creating Layer ip3
I0428 20:30:06.444054  3666 net.cpp:408] ip3 <- ip2
I0428 20:30:06.444064  3666 net.cpp:382] ip3 -> ip3
I0428 20:30:06.444180  3666 net.cpp:124] Setting up ip3
I0428 20:30:06.444190  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.444193  3666 net.cpp:139] Memory required for data: 29454800
I0428 20:30:06.444205  3666 layer_factory.hpp:77] Creating layer relu3
I0428 20:30:06.444216  3666 net.cpp:86] Creating Layer relu3
I0428 20:30:06.444221  3666 net.cpp:408] relu3 <- ip3
I0428 20:30:06.444229  3666 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:30:06.445101  3666 net.cpp:124] Setting up relu3
I0428 20:30:06.445114  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.445142  3666 net.cpp:139] Memory required for data: 29458800
I0428 20:30:06.445148  3666 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:30:06.445157  3666 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:30:06.445176  3666 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:30:06.445185  3666 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:30:06.445195  3666 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:30:06.445246  3666 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:30:06.445256  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.445263  3666 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:30:06.445267  3666 net.cpp:139] Memory required for data: 29466800
I0428 20:30:06.445272  3666 layer_factory.hpp:77] Creating layer accuracy
I0428 20:30:06.445281  3666 net.cpp:86] Creating Layer accuracy
I0428 20:30:06.445286  3666 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:30:06.445293  3666 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:30:06.445300  3666 net.cpp:382] accuracy -> accuracy
I0428 20:30:06.445312  3666 net.cpp:124] Setting up accuracy
I0428 20:30:06.445319  3666 net.cpp:131] Top shape: (1)
I0428 20:30:06.445324  3666 net.cpp:139] Memory required for data: 29466804
I0428 20:30:06.445329  3666 layer_factory.hpp:77] Creating layer loss
I0428 20:30:06.445338  3666 net.cpp:86] Creating Layer loss
I0428 20:30:06.445350  3666 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:30:06.445363  3666 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:30:06.445370  3666 net.cpp:382] loss -> loss
I0428 20:30:06.445380  3666 layer_factory.hpp:77] Creating layer loss
I0428 20:30:06.445619  3666 net.cpp:124] Setting up loss
I0428 20:30:06.445629  3666 net.cpp:131] Top shape: (1)
I0428 20:30:06.445634  3666 net.cpp:134]     with loss weight 1
I0428 20:30:06.445653  3666 net.cpp:139] Memory required for data: 29466808
I0428 20:30:06.445664  3666 net.cpp:200] loss needs backward computation.
I0428 20:30:06.445670  3666 net.cpp:202] accuracy does not need backward computation.
I0428 20:30:06.445677  3666 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:30:06.445682  3666 net.cpp:200] relu3 needs backward computation.
I0428 20:30:06.445688  3666 net.cpp:200] ip3 needs backward computation.
I0428 20:30:06.445691  3666 net.cpp:200] relu2 needs backward computation.
I0428 20:30:06.445698  3666 net.cpp:200] ip2 needs backward computation.
I0428 20:30:06.445701  3666 net.cpp:200] relu1 needs backward computation.
I0428 20:30:06.445706  3666 net.cpp:200] ip1 needs backward computation.
I0428 20:30:06.445711  3666 net.cpp:200] pool1 needs backward computation.
I0428 20:30:06.445716  3666 net.cpp:200] conv1 needs backward computation.
I0428 20:30:06.445721  3666 net.cpp:200] pool0 needs backward computation.
I0428 20:30:06.445729  3666 net.cpp:200] conv0 needs backward computation.
I0428 20:30:06.445734  3666 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:30:06.445740  3666 net.cpp:202] mnist does not need backward computation.
I0428 20:30:06.445744  3666 net.cpp:244] This network produces output accuracy
I0428 20:30:06.445750  3666 net.cpp:244] This network produces output loss
I0428 20:30:06.445767  3666 net.cpp:257] Network initialization done.
I0428 20:30:06.445813  3666 solver.cpp:56] Solver scaffolding done.
I0428 20:30:06.446156  3666 caffe.cpp:248] Starting Optimization
I0428 20:30:06.446162  3666 solver.cpp:273] Solving LeNet
I0428 20:30:06.446166  3666 solver.cpp:274] Learning Rate Policy: inv
I0428 20:30:06.446449  3666 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:30:06.542675  3678 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:06.545214  3666 solver.cpp:398]     Test net output #0: accuracy = 0.0628
I0428 20:30:06.545238  3666 solver.cpp:398]     Test net output #1: loss = 2.30827 (* 1 = 2.30827 loss)
I0428 20:30:06.549618  3666 solver.cpp:219] Iteration 0 (-7.86128e-43 iter/s, 0.103416s/100 iters), loss = 2.30912
I0428 20:30:06.549645  3666 solver.cpp:238]     Train net output #0: loss = 2.30912 (* 1 = 2.30912 loss)
I0428 20:30:06.549677  3666 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:30:06.762712  3666 solver.cpp:219] Iteration 100 (469.388 iter/s, 0.213043s/100 iters), loss = 0.924047
I0428 20:30:06.762768  3666 solver.cpp:238]     Train net output #0: loss = 0.924047 (* 1 = 0.924047 loss)
I0428 20:30:06.762787  3666 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:30:06.984833  3666 solver.cpp:219] Iteration 200 (450.342 iter/s, 0.222053s/100 iters), loss = 0.766058
I0428 20:30:06.984884  3666 solver.cpp:238]     Train net output #0: loss = 0.766058 (* 1 = 0.766058 loss)
I0428 20:30:06.984902  3666 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:30:07.209331  3666 solver.cpp:219] Iteration 300 (445.567 iter/s, 0.224433s/100 iters), loss = 0.760095
I0428 20:30:07.209386  3666 solver.cpp:238]     Train net output #0: loss = 0.760095 (* 1 = 0.760095 loss)
I0428 20:30:07.209406  3666 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:30:07.431180  3666 solver.cpp:219] Iteration 400 (450.895 iter/s, 0.221781s/100 iters), loss = 0.689141
I0428 20:30:07.431232  3666 solver.cpp:238]     Train net output #0: loss = 0.689141 (* 1 = 0.689141 loss)
I0428 20:30:07.431251  3666 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:30:07.651778  3666 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:30:07.755357  3678 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:07.758920  3666 solver.cpp:398]     Test net output #0: accuracy = 0.8409
I0428 20:30:07.758949  3666 solver.cpp:398]     Test net output #1: loss = 0.617955 (* 1 = 0.617955 loss)
I0428 20:30:07.760885  3666 solver.cpp:219] Iteration 500 (303.362 iter/s, 0.329639s/100 iters), loss = 0.462881
I0428 20:30:07.760920  3666 solver.cpp:238]     Train net output #0: loss = 0.462881 (* 1 = 0.462881 loss)
I0428 20:30:07.760954  3666 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:30:07.985965  3666 solver.cpp:219] Iteration 600 (444.389 iter/s, 0.225028s/100 iters), loss = 0.421551
I0428 20:30:07.986022  3666 solver.cpp:238]     Train net output #0: loss = 0.421551 (* 1 = 0.421551 loss)
I0428 20:30:07.986042  3666 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:30:08.216565  3666 solver.cpp:219] Iteration 700 (433.783 iter/s, 0.23053s/100 iters), loss = 0.90373
I0428 20:30:08.216621  3666 solver.cpp:238]     Train net output #0: loss = 0.90373 (* 1 = 0.90373 loss)
I0428 20:30:08.216640  3666 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:30:08.443845  3666 solver.cpp:219] Iteration 800 (440.117 iter/s, 0.227212s/100 iters), loss = 0.640328
I0428 20:30:08.443900  3666 solver.cpp:238]     Train net output #0: loss = 0.640328 (* 1 = 0.640328 loss)
I0428 20:30:08.443920  3666 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:30:08.672261  3666 solver.cpp:219] Iteration 900 (437.93 iter/s, 0.228347s/100 iters), loss = 0.700392
I0428 20:30:08.672317  3666 solver.cpp:238]     Train net output #0: loss = 0.700392 (* 1 = 0.700392 loss)
I0428 20:30:08.672336  3666 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:30:08.748536  3677 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:08.897953  3666 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:30:08.900198  3666 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:30:08.902981  3666 solver.cpp:311] Iteration 1000, loss = 0.705848
I0428 20:30:08.903018  3666 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:30:09.015460  3678 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:30:09.019124  3666 solver.cpp:398]     Test net output #0: accuracy = 0.8631
I0428 20:30:09.019150  3666 solver.cpp:398]     Test net output #1: loss = 0.56981 (* 1 = 0.56981 loss)
I0428 20:30:09.019156  3666 solver.cpp:316] Optimization Done.
I0428 20:30:09.019160  3666 caffe.cpp:259] Optimization Done.
