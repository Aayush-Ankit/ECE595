I0428 19:30:08.091816 22209 caffe.cpp:218] Using GPUs 0
I0428 19:30:08.133128 22209 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:30:08.653015 22209 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test81.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:30:08.653187 22209 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test81.prototxt
I0428 19:30:08.653529 22209 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:30:08.653550 22209 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:30:08.653638 22209 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:30:08.653735 22209 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:08.653865 22209 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:30:08.653901 22209 net.cpp:86] Creating Layer mnist
I0428 19:30:08.653913 22209 net.cpp:382] mnist -> data
I0428 19:30:08.653946 22209 net.cpp:382] mnist -> label
I0428 19:30:08.655153 22209 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:30:08.657649 22209 net.cpp:124] Setting up mnist
I0428 19:30:08.657668 22209 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:30:08.657680 22209 net.cpp:131] Top shape: 64 (64)
I0428 19:30:08.657687 22209 net.cpp:139] Memory required for data: 200960
I0428 19:30:08.657698 22209 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:08.657722 22209 net.cpp:86] Creating Layer conv0
I0428 19:30:08.657734 22209 net.cpp:408] conv0 <- data
I0428 19:30:08.657752 22209 net.cpp:382] conv0 -> conv0
I0428 19:30:08.933182 22209 net.cpp:124] Setting up conv0
I0428 19:30:08.933210 22209 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:30:08.933215 22209 net.cpp:139] Memory required for data: 938240
I0428 19:30:08.933235 22209 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:08.933253 22209 net.cpp:86] Creating Layer pool0
I0428 19:30:08.933264 22209 net.cpp:408] pool0 <- conv0
I0428 19:30:08.933274 22209 net.cpp:382] pool0 -> pool0
I0428 19:30:08.933343 22209 net.cpp:124] Setting up pool0
I0428 19:30:08.933352 22209 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:30:08.933357 22209 net.cpp:139] Memory required for data: 1122560
I0428 19:30:08.933380 22209 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:08.933393 22209 net.cpp:86] Creating Layer ip1
I0428 19:30:08.933398 22209 net.cpp:408] ip1 <- pool0
I0428 19:30:08.933406 22209 net.cpp:382] ip1 -> ip1
I0428 19:30:08.934432 22209 net.cpp:124] Setting up ip1
I0428 19:30:08.934447 22209 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:08.934453 22209 net.cpp:139] Memory required for data: 1125120
I0428 19:30:08.934465 22209 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:08.934478 22209 net.cpp:86] Creating Layer relu1
I0428 19:30:08.934504 22209 net.cpp:408] relu1 <- ip1
I0428 19:30:08.934511 22209 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:08.934722 22209 net.cpp:124] Setting up relu1
I0428 19:30:08.934732 22209 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:08.934737 22209 net.cpp:139] Memory required for data: 1127680
I0428 19:30:08.934743 22209 layer_factory.hpp:77] Creating layer ip2
I0428 19:30:08.934753 22209 net.cpp:86] Creating Layer ip2
I0428 19:30:08.934758 22209 net.cpp:408] ip2 <- ip1
I0428 19:30:08.934767 22209 net.cpp:382] ip2 -> ip2
I0428 19:30:08.934876 22209 net.cpp:124] Setting up ip2
I0428 19:30:08.934885 22209 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:08.934890 22209 net.cpp:139] Memory required for data: 1130240
I0428 19:30:08.934901 22209 layer_factory.hpp:77] Creating layer relu2
I0428 19:30:08.934911 22209 net.cpp:86] Creating Layer relu2
I0428 19:30:08.934916 22209 net.cpp:408] relu2 <- ip2
I0428 19:30:08.934923 22209 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:30:08.935730 22209 net.cpp:124] Setting up relu2
I0428 19:30:08.935745 22209 net.cpp:131] Top shape: 64 10 (640)
I0428 19:30:08.935750 22209 net.cpp:139] Memory required for data: 1132800
I0428 19:30:08.935755 22209 layer_factory.hpp:77] Creating layer loss
I0428 19:30:08.935765 22209 net.cpp:86] Creating Layer loss
I0428 19:30:08.935786 22209 net.cpp:408] loss <- ip2
I0428 19:30:08.935807 22209 net.cpp:408] loss <- label
I0428 19:30:08.935817 22209 net.cpp:382] loss -> loss
I0428 19:30:08.935840 22209 layer_factory.hpp:77] Creating layer loss
I0428 19:30:08.936066 22209 net.cpp:124] Setting up loss
I0428 19:30:08.936077 22209 net.cpp:131] Top shape: (1)
I0428 19:30:08.936084 22209 net.cpp:134]     with loss weight 1
I0428 19:30:08.936103 22209 net.cpp:139] Memory required for data: 1132804
I0428 19:30:08.936110 22209 net.cpp:200] loss needs backward computation.
I0428 19:30:08.936115 22209 net.cpp:200] relu2 needs backward computation.
I0428 19:30:08.936120 22209 net.cpp:200] ip2 needs backward computation.
I0428 19:30:08.936126 22209 net.cpp:200] relu1 needs backward computation.
I0428 19:30:08.936131 22209 net.cpp:200] ip1 needs backward computation.
I0428 19:30:08.936136 22209 net.cpp:200] pool0 needs backward computation.
I0428 19:30:08.936141 22209 net.cpp:200] conv0 needs backward computation.
I0428 19:30:08.936147 22209 net.cpp:202] mnist does not need backward computation.
I0428 19:30:08.936152 22209 net.cpp:244] This network produces output loss
I0428 19:30:08.936164 22209 net.cpp:257] Network initialization done.
I0428 19:30:08.936432 22209 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test81.prototxt
I0428 19:30:08.936463 22209 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:30:08.936547 22209 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:30:08.936676 22209 layer_factory.hpp:77] Creating layer mnist
I0428 19:30:08.936735 22209 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:30:08.936753 22209 net.cpp:86] Creating Layer mnist
I0428 19:30:08.936763 22209 net.cpp:382] mnist -> data
I0428 19:30:08.936789 22209 net.cpp:382] mnist -> label
I0428 19:30:08.936930 22209 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:30:08.939352 22209 net.cpp:124] Setting up mnist
I0428 19:30:08.939383 22209 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:30:08.939390 22209 net.cpp:131] Top shape: 100 (100)
I0428 19:30:08.939411 22209 net.cpp:139] Memory required for data: 314000
I0428 19:30:08.939417 22209 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:30:08.939447 22209 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:30:08.939453 22209 net.cpp:408] label_mnist_1_split <- label
I0428 19:30:08.939461 22209 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:30:08.939472 22209 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:30:08.939561 22209 net.cpp:124] Setting up label_mnist_1_split
I0428 19:30:08.939569 22209 net.cpp:131] Top shape: 100 (100)
I0428 19:30:08.939576 22209 net.cpp:131] Top shape: 100 (100)
I0428 19:30:08.939581 22209 net.cpp:139] Memory required for data: 314800
I0428 19:30:08.939586 22209 layer_factory.hpp:77] Creating layer conv0
I0428 19:30:08.939600 22209 net.cpp:86] Creating Layer conv0
I0428 19:30:08.939607 22209 net.cpp:408] conv0 <- data
I0428 19:30:08.939615 22209 net.cpp:382] conv0 -> conv0
I0428 19:30:08.941329 22209 net.cpp:124] Setting up conv0
I0428 19:30:08.941344 22209 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:30:08.941350 22209 net.cpp:139] Memory required for data: 1466800
I0428 19:30:08.941364 22209 layer_factory.hpp:77] Creating layer pool0
I0428 19:30:08.941373 22209 net.cpp:86] Creating Layer pool0
I0428 19:30:08.941381 22209 net.cpp:408] pool0 <- conv0
I0428 19:30:08.941390 22209 net.cpp:382] pool0 -> pool0
I0428 19:30:08.941428 22209 net.cpp:124] Setting up pool0
I0428 19:30:08.941437 22209 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:30:08.941442 22209 net.cpp:139] Memory required for data: 1754800
I0428 19:30:08.941447 22209 layer_factory.hpp:77] Creating layer ip1
I0428 19:30:08.941457 22209 net.cpp:86] Creating Layer ip1
I0428 19:30:08.941462 22209 net.cpp:408] ip1 <- pool0
I0428 19:30:08.941471 22209 net.cpp:382] ip1 -> ip1
I0428 19:30:08.941601 22209 net.cpp:124] Setting up ip1
I0428 19:30:08.941609 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.941614 22209 net.cpp:139] Memory required for data: 1758800
I0428 19:30:08.941625 22209 layer_factory.hpp:77] Creating layer relu1
I0428 19:30:08.941633 22209 net.cpp:86] Creating Layer relu1
I0428 19:30:08.941640 22209 net.cpp:408] relu1 <- ip1
I0428 19:30:08.941648 22209 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:30:08.942018 22209 net.cpp:124] Setting up relu1
I0428 19:30:08.942030 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.942064 22209 net.cpp:139] Memory required for data: 1762800
I0428 19:30:08.942070 22209 layer_factory.hpp:77] Creating layer ip2
I0428 19:30:08.942080 22209 net.cpp:86] Creating Layer ip2
I0428 19:30:08.942086 22209 net.cpp:408] ip2 <- ip1
I0428 19:30:08.942111 22209 net.cpp:382] ip2 -> ip2
I0428 19:30:08.942214 22209 net.cpp:124] Setting up ip2
I0428 19:30:08.942221 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.942235 22209 net.cpp:139] Memory required for data: 1766800
I0428 19:30:08.942250 22209 layer_factory.hpp:77] Creating layer relu2
I0428 19:30:08.942258 22209 net.cpp:86] Creating Layer relu2
I0428 19:30:08.942265 22209 net.cpp:408] relu2 <- ip2
I0428 19:30:08.942273 22209 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:30:08.942464 22209 net.cpp:124] Setting up relu2
I0428 19:30:08.942477 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.942482 22209 net.cpp:139] Memory required for data: 1770800
I0428 19:30:08.942487 22209 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:30:08.942497 22209 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:30:08.942503 22209 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:30:08.942512 22209 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:30:08.942523 22209 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:30:08.942579 22209 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:30:08.942589 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.942603 22209 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:30:08.942612 22209 net.cpp:139] Memory required for data: 1778800
I0428 19:30:08.942618 22209 layer_factory.hpp:77] Creating layer accuracy
I0428 19:30:08.942626 22209 net.cpp:86] Creating Layer accuracy
I0428 19:30:08.942632 22209 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:30:08.942641 22209 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:30:08.942649 22209 net.cpp:382] accuracy -> accuracy
I0428 19:30:08.942661 22209 net.cpp:124] Setting up accuracy
I0428 19:30:08.942668 22209 net.cpp:131] Top shape: (1)
I0428 19:30:08.942673 22209 net.cpp:139] Memory required for data: 1778804
I0428 19:30:08.942678 22209 layer_factory.hpp:77] Creating layer loss
I0428 19:30:08.942687 22209 net.cpp:86] Creating Layer loss
I0428 19:30:08.942692 22209 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:30:08.942698 22209 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:30:08.942708 22209 net.cpp:382] loss -> loss
I0428 19:30:08.942718 22209 layer_factory.hpp:77] Creating layer loss
I0428 19:30:08.943708 22209 net.cpp:124] Setting up loss
I0428 19:30:08.943737 22209 net.cpp:131] Top shape: (1)
I0428 19:30:08.943742 22209 net.cpp:134]     with loss weight 1
I0428 19:30:08.943753 22209 net.cpp:139] Memory required for data: 1778808
I0428 19:30:08.943759 22209 net.cpp:200] loss needs backward computation.
I0428 19:30:08.943766 22209 net.cpp:202] accuracy does not need backward computation.
I0428 19:30:08.943773 22209 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:30:08.943778 22209 net.cpp:200] relu2 needs backward computation.
I0428 19:30:08.943783 22209 net.cpp:200] ip2 needs backward computation.
I0428 19:30:08.943789 22209 net.cpp:200] relu1 needs backward computation.
I0428 19:30:08.943794 22209 net.cpp:200] ip1 needs backward computation.
I0428 19:30:08.943799 22209 net.cpp:200] pool0 needs backward computation.
I0428 19:30:08.943804 22209 net.cpp:200] conv0 needs backward computation.
I0428 19:30:08.943810 22209 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:30:08.943817 22209 net.cpp:202] mnist does not need backward computation.
I0428 19:30:08.943822 22209 net.cpp:244] This network produces output accuracy
I0428 19:30:08.943828 22209 net.cpp:244] This network produces output loss
I0428 19:30:08.943843 22209 net.cpp:257] Network initialization done.
I0428 19:30:08.943883 22209 solver.cpp:56] Solver scaffolding done.
I0428 19:30:08.944108 22209 caffe.cpp:248] Starting Optimization
I0428 19:30:08.944115 22209 solver.cpp:273] Solving LeNet
I0428 19:30:08.944133 22209 solver.cpp:274] Learning Rate Policy: inv
I0428 19:30:08.944272 22209 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:30:08.947387 22209 blocking_queue.cpp:49] Waiting for data
I0428 19:30:09.020023 22216 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:09.020510 22209 solver.cpp:398]     Test net output #0: accuracy = 0.1116
I0428 19:30:09.020548 22209 solver.cpp:398]     Test net output #1: loss = 2.31402 (* 1 = 2.31402 loss)
I0428 19:30:09.022614 22209 solver.cpp:219] Iteration 0 (-4.24256e-31 iter/s, 0.0784483s/100 iters), loss = 2.27782
I0428 19:30:09.022657 22209 solver.cpp:238]     Train net output #0: loss = 2.27782 (* 1 = 2.27782 loss)
I0428 19:30:09.022682 22209 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:30:09.082895 22209 solver.cpp:219] Iteration 100 (1660.23 iter/s, 0.0602327s/100 iters), loss = 0.96601
I0428 19:30:09.082934 22209 solver.cpp:238]     Train net output #0: loss = 0.96601 (* 1 = 0.96601 loss)
I0428 19:30:09.082952 22209 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:30:09.136585 22209 solver.cpp:219] Iteration 200 (1864.02 iter/s, 0.0536474s/100 iters), loss = 0.710497
I0428 19:30:09.136615 22209 solver.cpp:238]     Train net output #0: loss = 0.710497 (* 1 = 0.710497 loss)
I0428 19:30:09.136627 22209 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:30:09.187619 22209 solver.cpp:219] Iteration 300 (1960.85 iter/s, 0.0509983s/100 iters), loss = 0.998029
I0428 19:30:09.187647 22209 solver.cpp:238]     Train net output #0: loss = 0.998029 (* 1 = 0.998029 loss)
I0428 19:30:09.187657 22209 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:30:09.239419 22209 solver.cpp:219] Iteration 400 (1931.76 iter/s, 0.0517662s/100 iters), loss = 0.669138
I0428 19:30:09.239446 22209 solver.cpp:238]     Train net output #0: loss = 0.669138 (* 1 = 0.669138 loss)
I0428 19:30:09.239472 22209 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:30:09.290805 22209 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:30:09.366536 22216 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:09.366937 22209 solver.cpp:398]     Test net output #0: accuracy = 0.7395
I0428 19:30:09.366961 22209 solver.cpp:398]     Test net output #1: loss = 0.727568 (* 1 = 0.727568 loss)
I0428 19:30:09.367557 22209 solver.cpp:219] Iteration 500 (780.638 iter/s, 0.1281s/100 iters), loss = 0.765354
I0428 19:30:09.367599 22209 solver.cpp:238]     Train net output #0: loss = 0.765354 (* 1 = 0.765354 loss)
I0428 19:30:09.367614 22209 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:30:09.423141 22209 solver.cpp:219] Iteration 600 (1800.15 iter/s, 0.055551s/100 iters), loss = 0.759938
I0428 19:30:09.423169 22209 solver.cpp:238]     Train net output #0: loss = 0.759938 (* 1 = 0.759938 loss)
I0428 19:30:09.423197 22209 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:30:09.473106 22209 solver.cpp:219] Iteration 700 (2002.92 iter/s, 0.0499272s/100 iters), loss = 0.656047
I0428 19:30:09.473182 22209 solver.cpp:238]     Train net output #0: loss = 0.656047 (* 1 = 0.656047 loss)
I0428 19:30:09.473193 22209 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:30:09.531275 22209 solver.cpp:219] Iteration 800 (1721.52 iter/s, 0.0580884s/100 iters), loss = 0.943362
I0428 19:30:09.531301 22209 solver.cpp:238]     Train net output #0: loss = 0.943362 (* 1 = 0.943362 loss)
I0428 19:30:09.531327 22209 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:30:09.584185 22209 solver.cpp:219] Iteration 900 (1891.21 iter/s, 0.0528763s/100 iters), loss = 0.820232
I0428 19:30:09.584249 22209 solver.cpp:238]     Train net output #0: loss = 0.820232 (* 1 = 0.820232 loss)
I0428 19:30:09.584259 22209 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:30:09.602072 22215 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:09.633632 22209 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:30:09.634268 22209 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:30:09.634675 22209 solver.cpp:311] Iteration 1000, loss = 0.714419
I0428 19:30:09.634691 22209 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:30:09.688181 22216 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:30:09.688634 22209 solver.cpp:398]     Test net output #0: accuracy = 0.7602
I0428 19:30:09.688657 22209 solver.cpp:398]     Test net output #1: loss = 0.654672 (* 1 = 0.654672 loss)
I0428 19:30:09.688663 22209 solver.cpp:316] Optimization Done.
I0428 19:30:09.688668 22209 caffe.cpp:259] Optimization Done.
