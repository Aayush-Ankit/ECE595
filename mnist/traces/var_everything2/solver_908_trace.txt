I0428 20:01:38.247215 29767 caffe.cpp:218] Using GPUs 0
I0428 20:01:38.276528 29767 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:01:38.724263 29767 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test908.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:01:38.724398 29767 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test908.prototxt
I0428 20:01:38.724715 29767 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:01:38.724730 29767 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:01:38.724802 29767 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:01:38.724890 29767 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:38.724974 29767 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:01:38.725008 29767 net.cpp:86] Creating Layer mnist
I0428 20:01:38.725014 29767 net.cpp:382] mnist -> data
I0428 20:01:38.725033 29767 net.cpp:382] mnist -> label
I0428 20:01:38.725955 29767 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:01:38.728209 29767 net.cpp:124] Setting up mnist
I0428 20:01:38.728255 29767 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:01:38.728260 29767 net.cpp:131] Top shape: 64 (64)
I0428 20:01:38.728278 29767 net.cpp:139] Memory required for data: 200960
I0428 20:01:38.728284 29767 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:38.728298 29767 net.cpp:86] Creating Layer conv0
I0428 20:01:38.728302 29767 net.cpp:408] conv0 <- data
I0428 20:01:38.728313 29767 net.cpp:382] conv0 -> conv0
I0428 20:01:38.962546 29767 net.cpp:124] Setting up conv0
I0428 20:01:38.962574 29767 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:01:38.962577 29767 net.cpp:139] Memory required for data: 1675520
I0428 20:01:38.962610 29767 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:38.962622 29767 net.cpp:86] Creating Layer pool0
I0428 20:01:38.962642 29767 net.cpp:408] pool0 <- conv0
I0428 20:01:38.962647 29767 net.cpp:382] pool0 -> pool0
I0428 20:01:38.962695 29767 net.cpp:124] Setting up pool0
I0428 20:01:38.962713 29767 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:01:38.962716 29767 net.cpp:139] Memory required for data: 2044160
I0428 20:01:38.962719 29767 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:38.962729 29767 net.cpp:86] Creating Layer conv1
I0428 20:01:38.962733 29767 net.cpp:408] conv1 <- pool0
I0428 20:01:38.962738 29767 net.cpp:382] conv1 -> conv1
I0428 20:01:38.965633 29767 net.cpp:124] Setting up conv1
I0428 20:01:38.965647 29767 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:01:38.965651 29767 net.cpp:139] Memory required for data: 2863360
I0428 20:01:38.965659 29767 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:38.965667 29767 net.cpp:86] Creating Layer pool1
I0428 20:01:38.965669 29767 net.cpp:408] pool1 <- conv1
I0428 20:01:38.965692 29767 net.cpp:382] pool1 -> pool1
I0428 20:01:38.965747 29767 net.cpp:124] Setting up pool1
I0428 20:01:38.965754 29767 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:01:38.965756 29767 net.cpp:139] Memory required for data: 3068160
I0428 20:01:38.965759 29767 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:38.965767 29767 net.cpp:86] Creating Layer ip1
I0428 20:01:38.965770 29767 net.cpp:408] ip1 <- pool1
I0428 20:01:38.965776 29767 net.cpp:382] ip1 -> ip1
I0428 20:01:38.966133 29767 net.cpp:124] Setting up ip1
I0428 20:01:38.966141 29767 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:38.966161 29767 net.cpp:139] Memory required for data: 3080960
I0428 20:01:38.966167 29767 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:38.966173 29767 net.cpp:86] Creating Layer relu1
I0428 20:01:38.966177 29767 net.cpp:408] relu1 <- ip1
I0428 20:01:38.966181 29767 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:38.966365 29767 net.cpp:124] Setting up relu1
I0428 20:01:38.966374 29767 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:01:38.966377 29767 net.cpp:139] Memory required for data: 3093760
I0428 20:01:38.966380 29767 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:38.966388 29767 net.cpp:86] Creating Layer ip2
I0428 20:01:38.966392 29767 net.cpp:408] ip2 <- ip1
I0428 20:01:38.966397 29767 net.cpp:382] ip2 -> ip2
I0428 20:01:38.966500 29767 net.cpp:124] Setting up ip2
I0428 20:01:38.966507 29767 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:38.966509 29767 net.cpp:139] Memory required for data: 3096320
I0428 20:01:38.966516 29767 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:38.966521 29767 net.cpp:86] Creating Layer relu2
I0428 20:01:38.966524 29767 net.cpp:408] relu2 <- ip2
I0428 20:01:38.966528 29767 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:38.967289 29767 net.cpp:124] Setting up relu2
I0428 20:01:38.967301 29767 net.cpp:131] Top shape: 64 10 (640)
I0428 20:01:38.967320 29767 net.cpp:139] Memory required for data: 3098880
I0428 20:01:38.967324 29767 layer_factory.hpp:77] Creating layer loss
I0428 20:01:38.967330 29767 net.cpp:86] Creating Layer loss
I0428 20:01:38.967334 29767 net.cpp:408] loss <- ip2
I0428 20:01:38.967337 29767 net.cpp:408] loss <- label
I0428 20:01:38.967344 29767 net.cpp:382] loss -> loss
I0428 20:01:38.967363 29767 layer_factory.hpp:77] Creating layer loss
I0428 20:01:38.967639 29767 net.cpp:124] Setting up loss
I0428 20:01:38.967649 29767 net.cpp:131] Top shape: (1)
I0428 20:01:38.967653 29767 net.cpp:134]     with loss weight 1
I0428 20:01:38.967667 29767 net.cpp:139] Memory required for data: 3098884
I0428 20:01:38.967670 29767 net.cpp:200] loss needs backward computation.
I0428 20:01:38.967674 29767 net.cpp:200] relu2 needs backward computation.
I0428 20:01:38.967677 29767 net.cpp:200] ip2 needs backward computation.
I0428 20:01:38.967695 29767 net.cpp:200] relu1 needs backward computation.
I0428 20:01:38.967699 29767 net.cpp:200] ip1 needs backward computation.
I0428 20:01:38.967711 29767 net.cpp:200] pool1 needs backward computation.
I0428 20:01:38.967715 29767 net.cpp:200] conv1 needs backward computation.
I0428 20:01:38.967717 29767 net.cpp:200] pool0 needs backward computation.
I0428 20:01:38.967720 29767 net.cpp:200] conv0 needs backward computation.
I0428 20:01:38.967723 29767 net.cpp:202] mnist does not need backward computation.
I0428 20:01:38.967726 29767 net.cpp:244] This network produces output loss
I0428 20:01:38.967736 29767 net.cpp:257] Network initialization done.
I0428 20:01:38.968031 29767 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test908.prototxt
I0428 20:01:38.968056 29767 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:01:38.968143 29767 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:01:38.968210 29767 layer_factory.hpp:77] Creating layer mnist
I0428 20:01:38.968255 29767 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:01:38.968267 29767 net.cpp:86] Creating Layer mnist
I0428 20:01:38.968271 29767 net.cpp:382] mnist -> data
I0428 20:01:38.968279 29767 net.cpp:382] mnist -> label
I0428 20:01:38.968369 29767 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:01:38.970336 29767 net.cpp:124] Setting up mnist
I0428 20:01:38.970366 29767 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:01:38.970371 29767 net.cpp:131] Top shape: 100 (100)
I0428 20:01:38.970373 29767 net.cpp:139] Memory required for data: 314000
I0428 20:01:38.970392 29767 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:01:38.970402 29767 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:01:38.970407 29767 net.cpp:408] label_mnist_1_split <- label
I0428 20:01:38.970410 29767 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:01:38.970417 29767 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:01:38.970510 29767 net.cpp:124] Setting up label_mnist_1_split
I0428 20:01:38.970518 29767 net.cpp:131] Top shape: 100 (100)
I0428 20:01:38.970521 29767 net.cpp:131] Top shape: 100 (100)
I0428 20:01:38.970525 29767 net.cpp:139] Memory required for data: 314800
I0428 20:01:38.970527 29767 layer_factory.hpp:77] Creating layer conv0
I0428 20:01:38.970537 29767 net.cpp:86] Creating Layer conv0
I0428 20:01:38.970541 29767 net.cpp:408] conv0 <- data
I0428 20:01:38.970546 29767 net.cpp:382] conv0 -> conv0
I0428 20:01:38.972262 29767 net.cpp:124] Setting up conv0
I0428 20:01:38.972275 29767 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:01:38.972278 29767 net.cpp:139] Memory required for data: 2618800
I0428 20:01:38.972287 29767 layer_factory.hpp:77] Creating layer pool0
I0428 20:01:38.972295 29767 net.cpp:86] Creating Layer pool0
I0428 20:01:38.972298 29767 net.cpp:408] pool0 <- conv0
I0428 20:01:38.972303 29767 net.cpp:382] pool0 -> pool0
I0428 20:01:38.972355 29767 net.cpp:124] Setting up pool0
I0428 20:01:38.972360 29767 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:01:38.972363 29767 net.cpp:139] Memory required for data: 3194800
I0428 20:01:38.972367 29767 layer_factory.hpp:77] Creating layer conv1
I0428 20:01:38.972376 29767 net.cpp:86] Creating Layer conv1
I0428 20:01:38.972379 29767 net.cpp:408] conv1 <- pool0
I0428 20:01:38.972385 29767 net.cpp:382] conv1 -> conv1
I0428 20:01:38.974076 29767 net.cpp:124] Setting up conv1
I0428 20:01:38.974107 29767 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:01:38.974112 29767 net.cpp:139] Memory required for data: 4474800
I0428 20:01:38.974122 29767 layer_factory.hpp:77] Creating layer pool1
I0428 20:01:38.974128 29767 net.cpp:86] Creating Layer pool1
I0428 20:01:38.974133 29767 net.cpp:408] pool1 <- conv1
I0428 20:01:38.974138 29767 net.cpp:382] pool1 -> pool1
I0428 20:01:38.974194 29767 net.cpp:124] Setting up pool1
I0428 20:01:38.974198 29767 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:01:38.974201 29767 net.cpp:139] Memory required for data: 4794800
I0428 20:01:38.974205 29767 layer_factory.hpp:77] Creating layer ip1
I0428 20:01:38.974212 29767 net.cpp:86] Creating Layer ip1
I0428 20:01:38.974216 29767 net.cpp:408] ip1 <- pool1
I0428 20:01:38.974222 29767 net.cpp:382] ip1 -> ip1
I0428 20:01:38.974617 29767 net.cpp:124] Setting up ip1
I0428 20:01:38.974625 29767 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:38.974644 29767 net.cpp:139] Memory required for data: 4814800
I0428 20:01:38.974651 29767 layer_factory.hpp:77] Creating layer relu1
I0428 20:01:38.974656 29767 net.cpp:86] Creating Layer relu1
I0428 20:01:38.974661 29767 net.cpp:408] relu1 <- ip1
I0428 20:01:38.974673 29767 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:01:38.974905 29767 net.cpp:124] Setting up relu1
I0428 20:01:38.974915 29767 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:01:38.974918 29767 net.cpp:139] Memory required for data: 4834800
I0428 20:01:38.974921 29767 layer_factory.hpp:77] Creating layer ip2
I0428 20:01:38.974927 29767 net.cpp:86] Creating Layer ip2
I0428 20:01:38.974931 29767 net.cpp:408] ip2 <- ip1
I0428 20:01:38.974937 29767 net.cpp:382] ip2 -> ip2
I0428 20:01:38.975100 29767 net.cpp:124] Setting up ip2
I0428 20:01:38.975109 29767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:38.975112 29767 net.cpp:139] Memory required for data: 4838800
I0428 20:01:38.975118 29767 layer_factory.hpp:77] Creating layer relu2
I0428 20:01:38.975123 29767 net.cpp:86] Creating Layer relu2
I0428 20:01:38.975126 29767 net.cpp:408] relu2 <- ip2
I0428 20:01:38.975131 29767 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:01:38.975307 29767 net.cpp:124] Setting up relu2
I0428 20:01:38.975316 29767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:38.975319 29767 net.cpp:139] Memory required for data: 4842800
I0428 20:01:38.975322 29767 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:01:38.975327 29767 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:01:38.975330 29767 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:01:38.975337 29767 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:01:38.975352 29767 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:01:38.975389 29767 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:01:38.975394 29767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:38.975399 29767 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:01:38.975401 29767 net.cpp:139] Memory required for data: 4850800
I0428 20:01:38.975404 29767 layer_factory.hpp:77] Creating layer accuracy
I0428 20:01:38.975409 29767 net.cpp:86] Creating Layer accuracy
I0428 20:01:38.975412 29767 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:01:38.975416 29767 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:01:38.975420 29767 net.cpp:382] accuracy -> accuracy
I0428 20:01:38.975426 29767 net.cpp:124] Setting up accuracy
I0428 20:01:38.975430 29767 net.cpp:131] Top shape: (1)
I0428 20:01:38.975433 29767 net.cpp:139] Memory required for data: 4850804
I0428 20:01:38.975436 29767 layer_factory.hpp:77] Creating layer loss
I0428 20:01:38.975441 29767 net.cpp:86] Creating Layer loss
I0428 20:01:38.975445 29767 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:01:38.975450 29767 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:01:38.975453 29767 net.cpp:382] loss -> loss
I0428 20:01:38.975461 29767 layer_factory.hpp:77] Creating layer loss
I0428 20:01:38.975697 29767 net.cpp:124] Setting up loss
I0428 20:01:38.975705 29767 net.cpp:131] Top shape: (1)
I0428 20:01:38.975708 29767 net.cpp:134]     with loss weight 1
I0428 20:01:38.975714 29767 net.cpp:139] Memory required for data: 4850808
I0428 20:01:38.975718 29767 net.cpp:200] loss needs backward computation.
I0428 20:01:38.975721 29767 net.cpp:202] accuracy does not need backward computation.
I0428 20:01:38.975724 29767 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:01:38.975728 29767 net.cpp:200] relu2 needs backward computation.
I0428 20:01:38.975729 29767 net.cpp:200] ip2 needs backward computation.
I0428 20:01:38.975733 29767 net.cpp:200] relu1 needs backward computation.
I0428 20:01:38.975735 29767 net.cpp:200] ip1 needs backward computation.
I0428 20:01:38.975739 29767 net.cpp:200] pool1 needs backward computation.
I0428 20:01:38.975742 29767 net.cpp:200] conv1 needs backward computation.
I0428 20:01:38.975745 29767 net.cpp:200] pool0 needs backward computation.
I0428 20:01:38.975749 29767 net.cpp:200] conv0 needs backward computation.
I0428 20:01:38.975751 29767 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:01:38.975755 29767 net.cpp:202] mnist does not need backward computation.
I0428 20:01:38.975759 29767 net.cpp:244] This network produces output accuracy
I0428 20:01:38.975761 29767 net.cpp:244] This network produces output loss
I0428 20:01:38.975782 29767 net.cpp:257] Network initialization done.
I0428 20:01:38.975819 29767 solver.cpp:56] Solver scaffolding done.
I0428 20:01:38.976119 29767 caffe.cpp:248] Starting Optimization
I0428 20:01:38.976126 29767 solver.cpp:273] Solving LeNet
I0428 20:01:38.976128 29767 solver.cpp:274] Learning Rate Policy: inv
I0428 20:01:38.976907 29767 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:01:38.980952 29767 blocking_queue.cpp:49] Waiting for data
I0428 20:01:39.042996 29774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:39.043527 29767 solver.cpp:398]     Test net output #0: accuracy = 0.0873
I0428 20:01:39.043566 29767 solver.cpp:398]     Test net output #1: loss = 2.31923 (* 1 = 2.31923 loss)
I0428 20:01:39.046633 29767 solver.cpp:219] Iteration 0 (-1.04664e-30 iter/s, 0.070478s/100 iters), loss = 2.31489
I0428 20:01:39.046658 29767 solver.cpp:238]     Train net output #0: loss = 2.31489 (* 1 = 2.31489 loss)
I0428 20:01:39.046669 29767 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:01:39.156451 29767 solver.cpp:219] Iteration 100 (910.99 iter/s, 0.109771s/100 iters), loss = 0.652474
I0428 20:01:39.156492 29767 solver.cpp:238]     Train net output #0: loss = 0.652474 (* 1 = 0.652474 loss)
I0428 20:01:39.156502 29767 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:01:39.265264 29767 solver.cpp:219] Iteration 200 (919.43 iter/s, 0.108763s/100 iters), loss = 0.368941
I0428 20:01:39.265296 29767 solver.cpp:238]     Train net output #0: loss = 0.368941 (* 1 = 0.368941 loss)
I0428 20:01:39.265305 29767 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:01:39.369560 29767 solver.cpp:219] Iteration 300 (959.201 iter/s, 0.104253s/100 iters), loss = 0.301078
I0428 20:01:39.369583 29767 solver.cpp:238]     Train net output #0: loss = 0.301078 (* 1 = 0.301078 loss)
I0428 20:01:39.369590 29767 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:01:39.470849 29767 solver.cpp:219] Iteration 400 (987.624 iter/s, 0.101253s/100 iters), loss = 0.337382
I0428 20:01:39.470880 29767 solver.cpp:238]     Train net output #0: loss = 0.337382 (* 1 = 0.337382 loss)
I0428 20:01:39.470886 29767 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:01:39.569680 29767 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:01:39.626425 29774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:39.626992 29767 solver.cpp:398]     Test net output #0: accuracy = 0.8734
I0428 20:01:39.627022 29767 solver.cpp:398]     Test net output #1: loss = 0.333815 (* 1 = 0.333815 loss)
I0428 20:01:39.628247 29767 solver.cpp:219] Iteration 500 (635.518 iter/s, 0.157352s/100 iters), loss = 0.351738
I0428 20:01:39.628301 29767 solver.cpp:238]     Train net output #0: loss = 0.351738 (* 1 = 0.351738 loss)
I0428 20:01:39.628314 29767 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:01:39.738368 29767 solver.cpp:219] Iteration 600 (908.602 iter/s, 0.110059s/100 iters), loss = 0.417553
I0428 20:01:39.738399 29767 solver.cpp:238]     Train net output #0: loss = 0.417553 (* 1 = 0.417553 loss)
I0428 20:01:39.738406 29767 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:01:39.842937 29767 solver.cpp:219] Iteration 700 (956.672 iter/s, 0.104529s/100 iters), loss = 0.327059
I0428 20:01:39.842963 29767 solver.cpp:238]     Train net output #0: loss = 0.327059 (* 1 = 0.327059 loss)
I0428 20:01:39.842989 29767 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:01:39.945057 29767 solver.cpp:219] Iteration 800 (979.589 iter/s, 0.102084s/100 iters), loss = 0.499137
I0428 20:01:39.945083 29767 solver.cpp:238]     Train net output #0: loss = 0.499137 (* 1 = 0.499137 loss)
I0428 20:01:39.945107 29767 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:01:40.054846 29767 solver.cpp:219] Iteration 900 (911.142 iter/s, 0.109752s/100 iters), loss = 0.278344
I0428 20:01:40.054888 29767 solver.cpp:238]     Train net output #0: loss = 0.278344 (* 1 = 0.278344 loss)
I0428 20:01:40.054911 29767 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:01:40.089634 29773 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:40.157490 29767 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:01:40.159178 29767 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:01:40.160073 29767 solver.cpp:311] Iteration 1000, loss = 0.346295
I0428 20:01:40.160087 29767 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:01:40.226440 29774 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:01:40.226934 29767 solver.cpp:398]     Test net output #0: accuracy = 0.8832
I0428 20:01:40.226953 29767 solver.cpp:398]     Test net output #1: loss = 0.295625 (* 1 = 0.295625 loss)
I0428 20:01:40.226958 29767 solver.cpp:316] Optimization Done.
I0428 20:01:40.226960 29767 caffe.cpp:259] Optimization Done.
