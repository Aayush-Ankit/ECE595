I0428 20:36:32.250592  4811 caffe.cpp:218] Using GPUs 0
I0428 20:36:32.287971  4811 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:32.743044  4811 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1638.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:32.743181  4811 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1638.prototxt
I0428 20:36:32.743463  4811 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:32.743476  4811 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:32.743558  4811 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:32.743633  4811 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:32.743718  4811 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:32.743754  4811 net.cpp:86] Creating Layer mnist
I0428 20:36:32.743762  4811 net.cpp:382] mnist -> data
I0428 20:36:32.743779  4811 net.cpp:382] mnist -> label
I0428 20:36:32.744853  4811 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:32.747099  4811 net.cpp:124] Setting up mnist
I0428 20:36:32.747129  4811 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:32.747138  4811 net.cpp:131] Top shape: 64 (64)
I0428 20:36:32.747155  4811 net.cpp:139] Memory required for data: 200960
I0428 20:36:32.747161  4811 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:32.747175  4811 net.cpp:86] Creating Layer conv0
I0428 20:36:32.747180  4811 net.cpp:408] conv0 <- data
I0428 20:36:32.747191  4811 net.cpp:382] conv0 -> conv0
I0428 20:36:32.977375  4811 net.cpp:124] Setting up conv0
I0428 20:36:32.977401  4811 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:32.977404  4811 net.cpp:139] Memory required for data: 14946560
I0428 20:36:32.977418  4811 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:32.977430  4811 net.cpp:86] Creating Layer pool0
I0428 20:36:32.977434  4811 net.cpp:408] pool0 <- conv0
I0428 20:36:32.977439  4811 net.cpp:382] pool0 -> pool0
I0428 20:36:32.977511  4811 net.cpp:124] Setting up pool0
I0428 20:36:32.977517  4811 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:32.977535  4811 net.cpp:139] Memory required for data: 18632960
I0428 20:36:32.977538  4811 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:32.977550  4811 net.cpp:86] Creating Layer conv1
I0428 20:36:32.977552  4811 net.cpp:408] conv1 <- pool0
I0428 20:36:32.977557  4811 net.cpp:382] conv1 -> conv1
I0428 20:36:32.981669  4811 net.cpp:124] Setting up conv1
I0428 20:36:32.981683  4811 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:32.981686  4811 net.cpp:139] Memory required for data: 20271360
I0428 20:36:32.981694  4811 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:32.981703  4811 net.cpp:86] Creating Layer pool1
I0428 20:36:32.981705  4811 net.cpp:408] pool1 <- conv1
I0428 20:36:32.981709  4811 net.cpp:382] pool1 -> pool1
I0428 20:36:32.981768  4811 net.cpp:124] Setting up pool1
I0428 20:36:32.981773  4811 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:32.981776  4811 net.cpp:139] Memory required for data: 20680960
I0428 20:36:32.981779  4811 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:32.981786  4811 net.cpp:86] Creating Layer ip1
I0428 20:36:32.981788  4811 net.cpp:408] ip1 <- pool1
I0428 20:36:32.981792  4811 net.cpp:382] ip1 -> ip1
I0428 20:36:32.982825  4811 net.cpp:124] Setting up ip1
I0428 20:36:32.982837  4811 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:32.982856  4811 net.cpp:139] Memory required for data: 20683520
I0428 20:36:32.982874  4811 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:32.982882  4811 net.cpp:86] Creating Layer relu1
I0428 20:36:32.982884  4811 net.cpp:408] relu1 <- ip1
I0428 20:36:32.982889  4811 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:32.983068  4811 net.cpp:124] Setting up relu1
I0428 20:36:32.983088  4811 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:32.983090  4811 net.cpp:139] Memory required for data: 20686080
I0428 20:36:32.983094  4811 layer_factory.hpp:77] Creating layer loss
I0428 20:36:32.983099  4811 net.cpp:86] Creating Layer loss
I0428 20:36:32.983103  4811 net.cpp:408] loss <- ip1
I0428 20:36:32.983105  4811 net.cpp:408] loss <- label
I0428 20:36:32.983111  4811 net.cpp:382] loss -> loss
I0428 20:36:32.983129  4811 layer_factory.hpp:77] Creating layer loss
I0428 20:36:32.983988  4811 net.cpp:124] Setting up loss
I0428 20:36:32.983999  4811 net.cpp:131] Top shape: (1)
I0428 20:36:32.984019  4811 net.cpp:134]     with loss weight 1
I0428 20:36:32.984033  4811 net.cpp:139] Memory required for data: 20686084
I0428 20:36:32.984036  4811 net.cpp:200] loss needs backward computation.
I0428 20:36:32.984040  4811 net.cpp:200] relu1 needs backward computation.
I0428 20:36:32.984043  4811 net.cpp:200] ip1 needs backward computation.
I0428 20:36:32.984046  4811 net.cpp:200] pool1 needs backward computation.
I0428 20:36:32.984050  4811 net.cpp:200] conv1 needs backward computation.
I0428 20:36:32.984052  4811 net.cpp:200] pool0 needs backward computation.
I0428 20:36:32.984055  4811 net.cpp:200] conv0 needs backward computation.
I0428 20:36:32.984058  4811 net.cpp:202] mnist does not need backward computation.
I0428 20:36:32.984061  4811 net.cpp:244] This network produces output loss
I0428 20:36:32.984069  4811 net.cpp:257] Network initialization done.
I0428 20:36:32.984349  4811 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1638.prototxt
I0428 20:36:32.984372  4811 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:32.984444  4811 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:32.984514  4811 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:32.984572  4811 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:32.984586  4811 net.cpp:86] Creating Layer mnist
I0428 20:36:32.984591  4811 net.cpp:382] mnist -> data
I0428 20:36:32.984597  4811 net.cpp:382] mnist -> label
I0428 20:36:32.984710  4811 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:32.986840  4811 net.cpp:124] Setting up mnist
I0428 20:36:32.986868  4811 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:32.986889  4811 net.cpp:131] Top shape: 100 (100)
I0428 20:36:32.986892  4811 net.cpp:139] Memory required for data: 314000
I0428 20:36:32.986896  4811 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:32.986923  4811 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:32.986928  4811 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:32.986932  4811 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:32.986939  4811 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:32.986980  4811 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:32.986987  4811 net.cpp:131] Top shape: 100 (100)
I0428 20:36:32.986991  4811 net.cpp:131] Top shape: 100 (100)
I0428 20:36:32.986994  4811 net.cpp:139] Memory required for data: 314800
I0428 20:36:32.986996  4811 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:32.987004  4811 net.cpp:86] Creating Layer conv0
I0428 20:36:32.987009  4811 net.cpp:408] conv0 <- data
I0428 20:36:32.987013  4811 net.cpp:382] conv0 -> conv0
I0428 20:36:32.987964  4811 net.cpp:124] Setting up conv0
I0428 20:36:32.987992  4811 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:32.987994  4811 net.cpp:139] Memory required for data: 23354800
I0428 20:36:32.988003  4811 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:32.988024  4811 net.cpp:86] Creating Layer pool0
I0428 20:36:32.988029  4811 net.cpp:408] pool0 <- conv0
I0428 20:36:32.988032  4811 net.cpp:382] pool0 -> pool0
I0428 20:36:32.988066  4811 net.cpp:124] Setting up pool0
I0428 20:36:32.988076  4811 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:32.988080  4811 net.cpp:139] Memory required for data: 29114800
I0428 20:36:32.988082  4811 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:32.988090  4811 net.cpp:86] Creating Layer conv1
I0428 20:36:32.988093  4811 net.cpp:408] conv1 <- pool0
I0428 20:36:32.988097  4811 net.cpp:382] conv1 -> conv1
I0428 20:36:32.991250  4811 net.cpp:124] Setting up conv1
I0428 20:36:32.991277  4811 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:32.991287  4811 net.cpp:139] Memory required for data: 31674800
I0428 20:36:32.991295  4811 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:32.991328  4811 net.cpp:86] Creating Layer pool1
I0428 20:36:32.991331  4811 net.cpp:408] pool1 <- conv1
I0428 20:36:32.991343  4811 net.cpp:382] pool1 -> pool1
I0428 20:36:32.991379  4811 net.cpp:124] Setting up pool1
I0428 20:36:32.991384  4811 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:32.991392  4811 net.cpp:139] Memory required for data: 32314800
I0428 20:36:32.991410  4811 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:32.991415  4811 net.cpp:86] Creating Layer ip1
I0428 20:36:32.991418  4811 net.cpp:408] ip1 <- pool1
I0428 20:36:32.991423  4811 net.cpp:382] ip1 -> ip1
I0428 20:36:32.991605  4811 net.cpp:124] Setting up ip1
I0428 20:36:32.991612  4811 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:32.991616  4811 net.cpp:139] Memory required for data: 32318800
I0428 20:36:32.991623  4811 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:32.991627  4811 net.cpp:86] Creating Layer relu1
I0428 20:36:32.991631  4811 net.cpp:408] relu1 <- ip1
I0428 20:36:32.991636  4811 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:32.992405  4811 net.cpp:124] Setting up relu1
I0428 20:36:32.992419  4811 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:32.992422  4811 net.cpp:139] Memory required for data: 32322800
I0428 20:36:32.992426  4811 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:36:32.992434  4811 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:36:32.992437  4811 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:36:32.992444  4811 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:36:32.992449  4811 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:36:32.992491  4811 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:36:32.992496  4811 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:32.992501  4811 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:32.992503  4811 net.cpp:139] Memory required for data: 32330800
I0428 20:36:32.992506  4811 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:32.992511  4811 net.cpp:86] Creating Layer accuracy
I0428 20:36:32.992514  4811 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:36:32.992519  4811 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:32.992523  4811 net.cpp:382] accuracy -> accuracy
I0428 20:36:32.992530  4811 net.cpp:124] Setting up accuracy
I0428 20:36:32.992534  4811 net.cpp:131] Top shape: (1)
I0428 20:36:32.992537  4811 net.cpp:139] Memory required for data: 32330804
I0428 20:36:32.992540  4811 layer_factory.hpp:77] Creating layer loss
I0428 20:36:32.992544  4811 net.cpp:86] Creating Layer loss
I0428 20:36:32.992547  4811 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:36:32.992552  4811 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:32.992557  4811 net.cpp:382] loss -> loss
I0428 20:36:32.992561  4811 layer_factory.hpp:77] Creating layer loss
I0428 20:36:32.992856  4811 net.cpp:124] Setting up loss
I0428 20:36:32.992864  4811 net.cpp:131] Top shape: (1)
I0428 20:36:32.992868  4811 net.cpp:134]     with loss weight 1
I0428 20:36:32.992874  4811 net.cpp:139] Memory required for data: 32330808
I0428 20:36:32.992878  4811 net.cpp:200] loss needs backward computation.
I0428 20:36:32.992889  4811 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:32.992893  4811 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:36:32.992897  4811 net.cpp:200] relu1 needs backward computation.
I0428 20:36:32.992904  4811 net.cpp:200] ip1 needs backward computation.
I0428 20:36:32.992908  4811 net.cpp:200] pool1 needs backward computation.
I0428 20:36:32.992910  4811 net.cpp:200] conv1 needs backward computation.
I0428 20:36:32.992914  4811 net.cpp:200] pool0 needs backward computation.
I0428 20:36:32.992923  4811 net.cpp:200] conv0 needs backward computation.
I0428 20:36:32.992926  4811 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:32.992930  4811 net.cpp:202] mnist does not need backward computation.
I0428 20:36:32.992938  4811 net.cpp:244] This network produces output accuracy
I0428 20:36:32.992941  4811 net.cpp:244] This network produces output loss
I0428 20:36:32.992976  4811 net.cpp:257] Network initialization done.
I0428 20:36:32.993016  4811 solver.cpp:56] Solver scaffolding done.
I0428 20:36:32.993229  4811 caffe.cpp:248] Starting Optimization
I0428 20:36:32.993237  4811 solver.cpp:273] Solving LeNet
I0428 20:36:32.993239  4811 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:32.994058  4811 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:33.113248  4819 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:33.115188  4811 solver.cpp:398]     Test net output #0: accuracy = 0.164
I0428 20:36:33.115223  4811 solver.cpp:398]     Test net output #1: loss = 2.3063 (* 1 = 2.3063 loss)
I0428 20:36:33.120492  4811 solver.cpp:219] Iteration 0 (0 iter/s, 0.127227s/100 iters), loss = 2.32945
I0428 20:36:33.120514  4811 solver.cpp:238]     Train net output #0: loss = 2.32945 (* 1 = 2.32945 loss)
I0428 20:36:33.120525  4811 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:33.370864  4811 solver.cpp:219] Iteration 100 (399.471 iter/s, 0.250331s/100 iters), loss = 0.812361
I0428 20:36:33.370908  4811 solver.cpp:238]     Train net output #0: loss = 0.812361 (* 1 = 0.812361 loss)
I0428 20:36:33.370914  4811 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:33.621032  4811 solver.cpp:219] Iteration 200 (399.803 iter/s, 0.250123s/100 iters), loss = 0.714096
I0428 20:36:33.621063  4811 solver.cpp:238]     Train net output #0: loss = 0.714096 (* 1 = 0.714096 loss)
I0428 20:36:33.621070  4811 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:33.879678  4811 solver.cpp:219] Iteration 300 (386.701 iter/s, 0.258598s/100 iters), loss = 0.412653
I0428 20:36:33.879720  4811 solver.cpp:238]     Train net output #0: loss = 0.412653 (* 1 = 0.412653 loss)
I0428 20:36:33.879727  4811 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:34.141522  4811 solver.cpp:219] Iteration 400 (381.974 iter/s, 0.261798s/100 iters), loss = 0.58175
I0428 20:36:34.141549  4811 solver.cpp:238]     Train net output #0: loss = 0.58175 (* 1 = 0.58175 loss)
I0428 20:36:34.141556  4811 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:34.394614  4811 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:34.515647  4819 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:34.518951  4811 solver.cpp:398]     Test net output #0: accuracy = 0.8848
I0428 20:36:34.519002  4811 solver.cpp:398]     Test net output #1: loss = 0.30884 (* 1 = 0.30884 loss)
I0428 20:36:34.521514  4811 solver.cpp:219] Iteration 500 (263.199 iter/s, 0.379941s/100 iters), loss = 0.431943
I0428 20:36:34.521551  4811 solver.cpp:238]     Train net output #0: loss = 0.431943 (* 1 = 0.431943 loss)
I0428 20:36:34.521559  4811 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:34.788988  4811 solver.cpp:219] Iteration 600 (373.947 iter/s, 0.267418s/100 iters), loss = 0.0789191
I0428 20:36:34.789031  4811 solver.cpp:238]     Train net output #0: loss = 0.0789191 (* 1 = 0.0789191 loss)
I0428 20:36:34.789036  4811 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:35.062335  4811 solver.cpp:219] Iteration 700 (365.917 iter/s, 0.273286s/100 iters), loss = 0.118344
I0428 20:36:35.062378  4811 solver.cpp:238]     Train net output #0: loss = 0.118344 (* 1 = 0.118344 loss)
I0428 20:36:35.062384  4811 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:35.336652  4811 solver.cpp:219] Iteration 800 (364.623 iter/s, 0.274256s/100 iters), loss = 0.207035
I0428 20:36:35.336694  4811 solver.cpp:238]     Train net output #0: loss = 0.207035 (* 1 = 0.207035 loss)
I0428 20:36:35.336714  4811 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:35.603114  4811 solver.cpp:219] Iteration 900 (375.369 iter/s, 0.266405s/100 iters), loss = 0.133085
I0428 20:36:35.603157  4811 solver.cpp:238]     Train net output #0: loss = 0.133085 (* 1 = 0.133085 loss)
I0428 20:36:35.603163  4811 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:35.693845  4818 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:35.869621  4811 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:35.874528  4811 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:35.877421  4811 solver.cpp:311] Iteration 1000, loss = 0.133108
I0428 20:36:35.877436  4811 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:35.999299  4819 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:36.002604  4811 solver.cpp:398]     Test net output #0: accuracy = 0.9775
I0428 20:36:36.002637  4811 solver.cpp:398]     Test net output #1: loss = 0.0700598 (* 1 = 0.0700598 loss)
I0428 20:36:36.002657  4811 solver.cpp:316] Optimization Done.
I0428 20:36:36.002661  4811 caffe.cpp:259] Optimization Done.
