I0428 19:46:32.566278 26020 caffe.cpp:218] Using GPUs 0
I0428 19:46:32.603718 26020 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:46:33.113940 26020 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test494.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:46:33.114089 26020 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test494.prototxt
I0428 19:46:33.114500 26020 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:46:33.114518 26020 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:46:33.114619 26020 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:33.114698 26020 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:33.114794 26020 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:46:33.114819 26020 net.cpp:86] Creating Layer mnist
I0428 19:46:33.114825 26020 net.cpp:382] mnist -> data
I0428 19:46:33.114848 26020 net.cpp:382] mnist -> label
I0428 19:46:33.115931 26020 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:46:33.118391 26020 net.cpp:124] Setting up mnist
I0428 19:46:33.118408 26020 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:46:33.118417 26020 net.cpp:131] Top shape: 64 (64)
I0428 19:46:33.118420 26020 net.cpp:139] Memory required for data: 200960
I0428 19:46:33.118428 26020 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:33.118443 26020 net.cpp:86] Creating Layer conv0
I0428 19:46:33.118463 26020 net.cpp:408] conv0 <- data
I0428 19:46:33.118479 26020 net.cpp:382] conv0 -> conv0
I0428 19:46:33.403769 26020 net.cpp:124] Setting up conv0
I0428 19:46:33.403795 26020 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:46:33.403800 26020 net.cpp:139] Memory required for data: 495872
I0428 19:46:33.403815 26020 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:33.403828 26020 net.cpp:86] Creating Layer pool0
I0428 19:46:33.403832 26020 net.cpp:408] pool0 <- conv0
I0428 19:46:33.403838 26020 net.cpp:382] pool0 -> pool0
I0428 19:46:33.403887 26020 net.cpp:124] Setting up pool0
I0428 19:46:33.403892 26020 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:46:33.403895 26020 net.cpp:139] Memory required for data: 569600
I0428 19:46:33.403898 26020 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:33.403911 26020 net.cpp:86] Creating Layer conv1
I0428 19:46:33.403914 26020 net.cpp:408] conv1 <- pool0
I0428 19:46:33.403919 26020 net.cpp:382] conv1 -> conv1
I0428 19:46:33.406700 26020 net.cpp:124] Setting up conv1
I0428 19:46:33.406716 26020 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:46:33.406720 26020 net.cpp:139] Memory required for data: 2208000
I0428 19:46:33.406729 26020 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:33.406738 26020 net.cpp:86] Creating Layer pool1
I0428 19:46:33.406740 26020 net.cpp:408] pool1 <- conv1
I0428 19:46:33.406746 26020 net.cpp:382] pool1 -> pool1
I0428 19:46:33.406785 26020 net.cpp:124] Setting up pool1
I0428 19:46:33.406790 26020 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:46:33.406793 26020 net.cpp:139] Memory required for data: 2617600
I0428 19:46:33.406796 26020 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:33.406805 26020 net.cpp:86] Creating Layer ip1
I0428 19:46:33.406807 26020 net.cpp:408] ip1 <- pool1
I0428 19:46:33.406814 26020 net.cpp:382] ip1 -> ip1
I0428 19:46:33.407146 26020 net.cpp:124] Setting up ip1
I0428 19:46:33.407155 26020 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:33.407157 26020 net.cpp:139] Memory required for data: 2624000
I0428 19:46:33.407165 26020 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:33.407171 26020 net.cpp:86] Creating Layer relu1
I0428 19:46:33.407174 26020 net.cpp:408] relu1 <- ip1
I0428 19:46:33.407178 26020 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:33.407351 26020 net.cpp:124] Setting up relu1
I0428 19:46:33.407361 26020 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:33.407363 26020 net.cpp:139] Memory required for data: 2630400
I0428 19:46:33.407366 26020 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:33.407373 26020 net.cpp:86] Creating Layer ip2
I0428 19:46:33.407377 26020 net.cpp:408] ip2 <- ip1
I0428 19:46:33.407382 26020 net.cpp:382] ip2 -> ip2
I0428 19:46:33.407482 26020 net.cpp:124] Setting up ip2
I0428 19:46:33.407490 26020 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:33.407492 26020 net.cpp:139] Memory required for data: 2636800
I0428 19:46:33.407498 26020 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:33.407503 26020 net.cpp:86] Creating Layer relu2
I0428 19:46:33.407507 26020 net.cpp:408] relu2 <- ip2
I0428 19:46:33.407511 26020 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:33.408242 26020 net.cpp:124] Setting up relu2
I0428 19:46:33.408254 26020 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:46:33.408258 26020 net.cpp:139] Memory required for data: 2643200
I0428 19:46:33.408262 26020 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:33.408269 26020 net.cpp:86] Creating Layer ip3
I0428 19:46:33.408273 26020 net.cpp:408] ip3 <- ip2
I0428 19:46:33.408279 26020 net.cpp:382] ip3 -> ip3
I0428 19:46:33.408385 26020 net.cpp:124] Setting up ip3
I0428 19:46:33.408391 26020 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:33.408394 26020 net.cpp:139] Memory required for data: 2645760
I0428 19:46:33.408404 26020 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:33.408409 26020 net.cpp:86] Creating Layer relu3
I0428 19:46:33.408412 26020 net.cpp:408] relu3 <- ip3
I0428 19:46:33.408416 26020 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:33.408594 26020 net.cpp:124] Setting up relu3
I0428 19:46:33.408603 26020 net.cpp:131] Top shape: 64 10 (640)
I0428 19:46:33.408607 26020 net.cpp:139] Memory required for data: 2648320
I0428 19:46:33.408609 26020 layer_factory.hpp:77] Creating layer loss
I0428 19:46:33.408615 26020 net.cpp:86] Creating Layer loss
I0428 19:46:33.408618 26020 net.cpp:408] loss <- ip3
I0428 19:46:33.408622 26020 net.cpp:408] loss <- label
I0428 19:46:33.408629 26020 net.cpp:382] loss -> loss
I0428 19:46:33.408648 26020 layer_factory.hpp:77] Creating layer loss
I0428 19:46:33.408918 26020 net.cpp:124] Setting up loss
I0428 19:46:33.408958 26020 net.cpp:131] Top shape: (1)
I0428 19:46:33.408962 26020 net.cpp:134]     with loss weight 1
I0428 19:46:33.408991 26020 net.cpp:139] Memory required for data: 2648324
I0428 19:46:33.408994 26020 net.cpp:200] loss needs backward computation.
I0428 19:46:33.408998 26020 net.cpp:200] relu3 needs backward computation.
I0428 19:46:33.409001 26020 net.cpp:200] ip3 needs backward computation.
I0428 19:46:33.409004 26020 net.cpp:200] relu2 needs backward computation.
I0428 19:46:33.409008 26020 net.cpp:200] ip2 needs backward computation.
I0428 19:46:33.409010 26020 net.cpp:200] relu1 needs backward computation.
I0428 19:46:33.409013 26020 net.cpp:200] ip1 needs backward computation.
I0428 19:46:33.409016 26020 net.cpp:200] pool1 needs backward computation.
I0428 19:46:33.409019 26020 net.cpp:200] conv1 needs backward computation.
I0428 19:46:33.409023 26020 net.cpp:200] pool0 needs backward computation.
I0428 19:46:33.409025 26020 net.cpp:200] conv0 needs backward computation.
I0428 19:46:33.409029 26020 net.cpp:202] mnist does not need backward computation.
I0428 19:46:33.409032 26020 net.cpp:244] This network produces output loss
I0428 19:46:33.409044 26020 net.cpp:257] Network initialization done.
I0428 19:46:33.409420 26020 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test494.prototxt
I0428 19:46:33.409446 26020 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:46:33.409538 26020 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:46:33.409618 26020 layer_factory.hpp:77] Creating layer mnist
I0428 19:46:33.409659 26020 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:46:33.409675 26020 net.cpp:86] Creating Layer mnist
I0428 19:46:33.409680 26020 net.cpp:382] mnist -> data
I0428 19:46:33.409687 26020 net.cpp:382] mnist -> label
I0428 19:46:33.409770 26020 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:46:33.411810 26020 net.cpp:124] Setting up mnist
I0428 19:46:33.411823 26020 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:46:33.411829 26020 net.cpp:131] Top shape: 100 (100)
I0428 19:46:33.411833 26020 net.cpp:139] Memory required for data: 314000
I0428 19:46:33.411836 26020 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:46:33.411846 26020 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:46:33.411849 26020 net.cpp:408] label_mnist_1_split <- label
I0428 19:46:33.411854 26020 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:46:33.411861 26020 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:46:33.411908 26020 net.cpp:124] Setting up label_mnist_1_split
I0428 19:46:33.411914 26020 net.cpp:131] Top shape: 100 (100)
I0428 19:46:33.411918 26020 net.cpp:131] Top shape: 100 (100)
I0428 19:46:33.411936 26020 net.cpp:139] Memory required for data: 314800
I0428 19:46:33.411937 26020 layer_factory.hpp:77] Creating layer conv0
I0428 19:46:33.411947 26020 net.cpp:86] Creating Layer conv0
I0428 19:46:33.411949 26020 net.cpp:408] conv0 <- data
I0428 19:46:33.411955 26020 net.cpp:382] conv0 -> conv0
I0428 19:46:33.413548 26020 net.cpp:124] Setting up conv0
I0428 19:46:33.413563 26020 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:46:33.413566 26020 net.cpp:139] Memory required for data: 775600
I0428 19:46:33.413575 26020 layer_factory.hpp:77] Creating layer pool0
I0428 19:46:33.413583 26020 net.cpp:86] Creating Layer pool0
I0428 19:46:33.413588 26020 net.cpp:408] pool0 <- conv0
I0428 19:46:33.413591 26020 net.cpp:382] pool0 -> pool0
I0428 19:46:33.413628 26020 net.cpp:124] Setting up pool0
I0428 19:46:33.413633 26020 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:46:33.413636 26020 net.cpp:139] Memory required for data: 890800
I0428 19:46:33.413640 26020 layer_factory.hpp:77] Creating layer conv1
I0428 19:46:33.413650 26020 net.cpp:86] Creating Layer conv1
I0428 19:46:33.413652 26020 net.cpp:408] conv1 <- pool0
I0428 19:46:33.413658 26020 net.cpp:382] conv1 -> conv1
I0428 19:46:33.415223 26020 net.cpp:124] Setting up conv1
I0428 19:46:33.415236 26020 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:46:33.415241 26020 net.cpp:139] Memory required for data: 3450800
I0428 19:46:33.415248 26020 layer_factory.hpp:77] Creating layer pool1
I0428 19:46:33.415266 26020 net.cpp:86] Creating Layer pool1
I0428 19:46:33.415271 26020 net.cpp:408] pool1 <- conv1
I0428 19:46:33.415277 26020 net.cpp:382] pool1 -> pool1
I0428 19:46:33.415313 26020 net.cpp:124] Setting up pool1
I0428 19:46:33.415319 26020 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:46:33.415323 26020 net.cpp:139] Memory required for data: 4090800
I0428 19:46:33.415325 26020 layer_factory.hpp:77] Creating layer ip1
I0428 19:46:33.415333 26020 net.cpp:86] Creating Layer ip1
I0428 19:46:33.415335 26020 net.cpp:408] ip1 <- pool1
I0428 19:46:33.415341 26020 net.cpp:382] ip1 -> ip1
I0428 19:46:33.415822 26020 net.cpp:124] Setting up ip1
I0428 19:46:33.415829 26020 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:33.415871 26020 net.cpp:139] Memory required for data: 4100800
I0428 19:46:33.415881 26020 layer_factory.hpp:77] Creating layer relu1
I0428 19:46:33.415887 26020 net.cpp:86] Creating Layer relu1
I0428 19:46:33.415890 26020 net.cpp:408] relu1 <- ip1
I0428 19:46:33.415897 26020 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:46:33.416064 26020 net.cpp:124] Setting up relu1
I0428 19:46:33.416071 26020 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:33.416074 26020 net.cpp:139] Memory required for data: 4110800
I0428 19:46:33.416077 26020 layer_factory.hpp:77] Creating layer ip2
I0428 19:46:33.416085 26020 net.cpp:86] Creating Layer ip2
I0428 19:46:33.416090 26020 net.cpp:408] ip2 <- ip1
I0428 19:46:33.416110 26020 net.cpp:382] ip2 -> ip2
I0428 19:46:33.416211 26020 net.cpp:124] Setting up ip2
I0428 19:46:33.416218 26020 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:33.416221 26020 net.cpp:139] Memory required for data: 4120800
I0428 19:46:33.416226 26020 layer_factory.hpp:77] Creating layer relu2
I0428 19:46:33.416231 26020 net.cpp:86] Creating Layer relu2
I0428 19:46:33.416234 26020 net.cpp:408] relu2 <- ip2
I0428 19:46:33.416239 26020 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:46:33.416429 26020 net.cpp:124] Setting up relu2
I0428 19:46:33.416437 26020 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:46:33.416440 26020 net.cpp:139] Memory required for data: 4130800
I0428 19:46:33.416445 26020 layer_factory.hpp:77] Creating layer ip3
I0428 19:46:33.416450 26020 net.cpp:86] Creating Layer ip3
I0428 19:46:33.416455 26020 net.cpp:408] ip3 <- ip2
I0428 19:46:33.416458 26020 net.cpp:382] ip3 -> ip3
I0428 19:46:33.416620 26020 net.cpp:124] Setting up ip3
I0428 19:46:33.416641 26020 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:33.416646 26020 net.cpp:139] Memory required for data: 4134800
I0428 19:46:33.416653 26020 layer_factory.hpp:77] Creating layer relu3
I0428 19:46:33.416658 26020 net.cpp:86] Creating Layer relu3
I0428 19:46:33.416661 26020 net.cpp:408] relu3 <- ip3
I0428 19:46:33.416666 26020 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:46:33.417549 26020 net.cpp:124] Setting up relu3
I0428 19:46:33.417578 26020 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:33.417582 26020 net.cpp:139] Memory required for data: 4138800
I0428 19:46:33.417585 26020 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:46:33.417590 26020 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:46:33.417593 26020 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:46:33.417599 26020 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:46:33.417605 26020 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:46:33.417644 26020 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:46:33.417649 26020 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:33.417654 26020 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:46:33.417656 26020 net.cpp:139] Memory required for data: 4146800
I0428 19:46:33.417659 26020 layer_factory.hpp:77] Creating layer accuracy
I0428 19:46:33.417664 26020 net.cpp:86] Creating Layer accuracy
I0428 19:46:33.417666 26020 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:46:33.417670 26020 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:46:33.417675 26020 net.cpp:382] accuracy -> accuracy
I0428 19:46:33.417682 26020 net.cpp:124] Setting up accuracy
I0428 19:46:33.417686 26020 net.cpp:131] Top shape: (1)
I0428 19:46:33.417690 26020 net.cpp:139] Memory required for data: 4146804
I0428 19:46:33.417692 26020 layer_factory.hpp:77] Creating layer loss
I0428 19:46:33.417707 26020 net.cpp:86] Creating Layer loss
I0428 19:46:33.417711 26020 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:46:33.417714 26020 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:46:33.417733 26020 net.cpp:382] loss -> loss
I0428 19:46:33.417739 26020 layer_factory.hpp:77] Creating layer loss
I0428 19:46:33.417979 26020 net.cpp:124] Setting up loss
I0428 19:46:33.417987 26020 net.cpp:131] Top shape: (1)
I0428 19:46:33.417990 26020 net.cpp:134]     with loss weight 1
I0428 19:46:33.418006 26020 net.cpp:139] Memory required for data: 4146808
I0428 19:46:33.418010 26020 net.cpp:200] loss needs backward computation.
I0428 19:46:33.418014 26020 net.cpp:202] accuracy does not need backward computation.
I0428 19:46:33.418017 26020 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:46:33.418020 26020 net.cpp:200] relu3 needs backward computation.
I0428 19:46:33.418023 26020 net.cpp:200] ip3 needs backward computation.
I0428 19:46:33.418026 26020 net.cpp:200] relu2 needs backward computation.
I0428 19:46:33.418028 26020 net.cpp:200] ip2 needs backward computation.
I0428 19:46:33.418031 26020 net.cpp:200] relu1 needs backward computation.
I0428 19:46:33.418035 26020 net.cpp:200] ip1 needs backward computation.
I0428 19:46:33.418037 26020 net.cpp:200] pool1 needs backward computation.
I0428 19:46:33.418040 26020 net.cpp:200] conv1 needs backward computation.
I0428 19:46:33.418057 26020 net.cpp:200] pool0 needs backward computation.
I0428 19:46:33.418061 26020 net.cpp:200] conv0 needs backward computation.
I0428 19:46:33.418063 26020 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:46:33.418067 26020 net.cpp:202] mnist does not need backward computation.
I0428 19:46:33.418071 26020 net.cpp:244] This network produces output accuracy
I0428 19:46:33.418073 26020 net.cpp:244] This network produces output loss
I0428 19:46:33.418084 26020 net.cpp:257] Network initialization done.
I0428 19:46:33.418124 26020 solver.cpp:56] Solver scaffolding done.
I0428 19:46:33.418440 26020 caffe.cpp:248] Starting Optimization
I0428 19:46:33.418447 26020 solver.cpp:273] Solving LeNet
I0428 19:46:33.418448 26020 solver.cpp:274] Learning Rate Policy: inv
I0428 19:46:33.419242 26020 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:46:33.423192 26020 blocking_queue.cpp:49] Waiting for data
I0428 19:46:33.494091 26027 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:33.494753 26020 solver.cpp:398]     Test net output #0: accuracy = 0.1158
I0428 19:46:33.494791 26020 solver.cpp:398]     Test net output #1: loss = 2.33815 (* 1 = 2.33815 loss)
I0428 19:46:33.498620 26020 solver.cpp:219] Iteration 0 (0 iter/s, 0.0801415s/100 iters), loss = 2.37974
I0428 19:46:33.498658 26020 solver.cpp:238]     Train net output #0: loss = 2.37974 (* 1 = 2.37974 loss)
I0428 19:46:33.498669 26020 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:46:33.643692 26020 solver.cpp:219] Iteration 100 (689.487 iter/s, 0.145035s/100 iters), loss = 0.348822
I0428 19:46:33.643718 26020 solver.cpp:238]     Train net output #0: loss = 0.348822 (* 1 = 0.348822 loss)
I0428 19:46:33.643725 26020 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:46:33.802110 26020 solver.cpp:219] Iteration 200 (631.43 iter/s, 0.158371s/100 iters), loss = 0.209458
I0428 19:46:33.802155 26020 solver.cpp:238]     Train net output #0: loss = 0.209458 (* 1 = 0.209458 loss)
I0428 19:46:33.802166 26020 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:46:33.985080 26020 solver.cpp:219] Iteration 300 (546.717 iter/s, 0.18291s/100 iters), loss = 0.245774
I0428 19:46:33.985124 26020 solver.cpp:238]     Train net output #0: loss = 0.245774 (* 1 = 0.245774 loss)
I0428 19:46:33.985136 26020 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:46:34.171079 26020 solver.cpp:219] Iteration 400 (537.805 iter/s, 0.185941s/100 iters), loss = 0.115873
I0428 19:46:34.171125 26020 solver.cpp:238]     Train net output #0: loss = 0.115873 (* 1 = 0.115873 loss)
I0428 19:46:34.171138 26020 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:46:34.351778 26020 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:46:34.413086 26027 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:34.414963 26020 solver.cpp:398]     Test net output #0: accuracy = 0.955
I0428 19:46:34.414994 26020 solver.cpp:398]     Test net output #1: loss = 0.145741 (* 1 = 0.145741 loss)
I0428 19:46:34.416537 26020 solver.cpp:219] Iteration 500 (407.505 iter/s, 0.245396s/100 iters), loss = 0.134646
I0428 19:46:34.416566 26020 solver.cpp:238]     Train net output #0: loss = 0.134646 (* 1 = 0.134646 loss)
I0428 19:46:34.416594 26020 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:46:34.593665 26020 solver.cpp:219] Iteration 600 (564.709 iter/s, 0.177082s/100 iters), loss = 0.167929
I0428 19:46:34.593716 26020 solver.cpp:238]     Train net output #0: loss = 0.16793 (* 1 = 0.16793 loss)
I0428 19:46:34.593727 26020 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:46:34.771273 26020 solver.cpp:219] Iteration 700 (563.211 iter/s, 0.177553s/100 iters), loss = 0.214171
I0428 19:46:34.771314 26020 solver.cpp:238]     Train net output #0: loss = 0.214172 (* 1 = 0.214172 loss)
I0428 19:46:34.771325 26020 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:46:34.946807 26020 solver.cpp:219] Iteration 800 (569.864 iter/s, 0.175481s/100 iters), loss = 0.378631
I0428 19:46:34.946853 26020 solver.cpp:238]     Train net output #0: loss = 0.378631 (* 1 = 0.378631 loss)
I0428 19:46:34.946862 26020 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:46:35.111230 26020 solver.cpp:219] Iteration 900 (608.363 iter/s, 0.164376s/100 iters), loss = 0.113361
I0428 19:46:35.111263 26020 solver.cpp:238]     Train net output #0: loss = 0.113361 (* 1 = 0.113361 loss)
I0428 19:46:35.111273 26020 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:46:35.166851 26026 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:35.279813 26020 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:46:35.282099 26020 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:46:35.283182 26020 solver.cpp:311] Iteration 1000, loss = 0.197778
I0428 19:46:35.283202 26020 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:46:35.337823 26027 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:46:35.339663 26020 solver.cpp:398]     Test net output #0: accuracy = 0.9693
I0428 19:46:35.339686 26020 solver.cpp:398]     Test net output #1: loss = 0.091978 (* 1 = 0.091978 loss)
I0428 19:46:35.339691 26020 solver.cpp:316] Optimization Done.
I0428 19:46:35.339695 26020 caffe.cpp:259] Optimization Done.
