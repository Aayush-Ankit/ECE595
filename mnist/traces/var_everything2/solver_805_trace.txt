I0428 19:57:59.154850 28861 caffe.cpp:218] Using GPUs 0
I0428 19:57:59.192351 28861 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:57:59.647584 28861 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test805.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:57:59.647712 28861 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test805.prototxt
I0428 19:57:59.648041 28861 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:57:59.648057 28861 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:57:59.648135 28861 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:59.648214 28861 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:59.648296 28861 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:57:59.648315 28861 net.cpp:86] Creating Layer mnist
I0428 19:57:59.648324 28861 net.cpp:382] mnist -> data
I0428 19:57:59.648341 28861 net.cpp:382] mnist -> label
I0428 19:57:59.649471 28861 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:57:59.651669 28861 net.cpp:124] Setting up mnist
I0428 19:57:59.651682 28861 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:57:59.651687 28861 net.cpp:131] Top shape: 64 (64)
I0428 19:57:59.651690 28861 net.cpp:139] Memory required for data: 200960
I0428 19:57:59.651695 28861 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:59.651710 28861 net.cpp:86] Creating Layer conv0
I0428 19:57:59.651726 28861 net.cpp:408] conv0 <- data
I0428 19:57:59.651737 28861 net.cpp:382] conv0 -> conv0
I0428 19:57:59.883038 28861 net.cpp:124] Setting up conv0
I0428 19:57:59.883064 28861 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:57:59.883067 28861 net.cpp:139] Memory required for data: 1675520
I0428 19:57:59.883081 28861 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:59.883093 28861 net.cpp:86] Creating Layer pool0
I0428 19:57:59.883097 28861 net.cpp:408] pool0 <- conv0
I0428 19:57:59.883102 28861 net.cpp:382] pool0 -> pool0
I0428 19:57:59.883159 28861 net.cpp:124] Setting up pool0
I0428 19:57:59.883164 28861 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:57:59.883167 28861 net.cpp:139] Memory required for data: 2044160
I0428 19:57:59.883170 28861 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:59.883180 28861 net.cpp:86] Creating Layer conv1
I0428 19:57:59.883183 28861 net.cpp:408] conv1 <- pool0
I0428 19:57:59.883188 28861 net.cpp:382] conv1 -> conv1
I0428 19:57:59.885983 28861 net.cpp:124] Setting up conv1
I0428 19:57:59.885998 28861 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:57:59.886001 28861 net.cpp:139] Memory required for data: 2126080
I0428 19:57:59.886010 28861 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:59.886018 28861 net.cpp:86] Creating Layer pool1
I0428 19:57:59.886020 28861 net.cpp:408] pool1 <- conv1
I0428 19:57:59.886025 28861 net.cpp:382] pool1 -> pool1
I0428 19:57:59.886073 28861 net.cpp:124] Setting up pool1
I0428 19:57:59.886095 28861 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:57:59.886097 28861 net.cpp:139] Memory required for data: 2146560
I0428 19:57:59.886101 28861 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:59.886107 28861 net.cpp:86] Creating Layer ip1
I0428 19:57:59.886109 28861 net.cpp:408] ip1 <- pool1
I0428 19:57:59.886114 28861 net.cpp:382] ip1 -> ip1
I0428 19:57:59.886219 28861 net.cpp:124] Setting up ip1
I0428 19:57:59.886241 28861 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:59.886245 28861 net.cpp:139] Memory required for data: 2152960
I0428 19:57:59.886251 28861 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:59.886256 28861 net.cpp:86] Creating Layer relu1
I0428 19:57:59.886260 28861 net.cpp:408] relu1 <- ip1
I0428 19:57:59.886265 28861 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:59.886421 28861 net.cpp:124] Setting up relu1
I0428 19:57:59.886430 28861 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:59.886433 28861 net.cpp:139] Memory required for data: 2159360
I0428 19:57:59.886436 28861 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:59.886442 28861 net.cpp:86] Creating Layer ip2
I0428 19:57:59.886445 28861 net.cpp:408] ip2 <- ip1
I0428 19:57:59.886449 28861 net.cpp:382] ip2 -> ip2
I0428 19:57:59.886555 28861 net.cpp:124] Setting up ip2
I0428 19:57:59.886561 28861 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:59.886564 28861 net.cpp:139] Memory required for data: 2165760
I0428 19:57:59.886569 28861 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:59.886574 28861 net.cpp:86] Creating Layer relu2
I0428 19:57:59.886577 28861 net.cpp:408] relu2 <- ip2
I0428 19:57:59.886581 28861 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:59.887354 28861 net.cpp:124] Setting up relu2
I0428 19:57:59.887367 28861 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:57:59.887385 28861 net.cpp:139] Memory required for data: 2172160
I0428 19:57:59.887388 28861 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:59.887395 28861 net.cpp:86] Creating Layer ip3
I0428 19:57:59.887400 28861 net.cpp:408] ip3 <- ip2
I0428 19:57:59.887405 28861 net.cpp:382] ip3 -> ip3
I0428 19:57:59.887513 28861 net.cpp:124] Setting up ip3
I0428 19:57:59.887521 28861 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:59.887523 28861 net.cpp:139] Memory required for data: 2174720
I0428 19:57:59.887531 28861 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:59.887536 28861 net.cpp:86] Creating Layer relu3
I0428 19:57:59.887538 28861 net.cpp:408] relu3 <- ip3
I0428 19:57:59.887542 28861 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:59.887712 28861 net.cpp:124] Setting up relu3
I0428 19:57:59.887719 28861 net.cpp:131] Top shape: 64 10 (640)
I0428 19:57:59.887722 28861 net.cpp:139] Memory required for data: 2177280
I0428 19:57:59.887725 28861 layer_factory.hpp:77] Creating layer loss
I0428 19:57:59.887732 28861 net.cpp:86] Creating Layer loss
I0428 19:57:59.887734 28861 net.cpp:408] loss <- ip3
I0428 19:57:59.887738 28861 net.cpp:408] loss <- label
I0428 19:57:59.887743 28861 net.cpp:382] loss -> loss
I0428 19:57:59.887760 28861 layer_factory.hpp:77] Creating layer loss
I0428 19:57:59.888002 28861 net.cpp:124] Setting up loss
I0428 19:57:59.888011 28861 net.cpp:131] Top shape: (1)
I0428 19:57:59.888015 28861 net.cpp:134]     with loss weight 1
I0428 19:57:59.888041 28861 net.cpp:139] Memory required for data: 2177284
I0428 19:57:59.888044 28861 net.cpp:200] loss needs backward computation.
I0428 19:57:59.888047 28861 net.cpp:200] relu3 needs backward computation.
I0428 19:57:59.888051 28861 net.cpp:200] ip3 needs backward computation.
I0428 19:57:59.888053 28861 net.cpp:200] relu2 needs backward computation.
I0428 19:57:59.888056 28861 net.cpp:200] ip2 needs backward computation.
I0428 19:57:59.888058 28861 net.cpp:200] relu1 needs backward computation.
I0428 19:57:59.888062 28861 net.cpp:200] ip1 needs backward computation.
I0428 19:57:59.888064 28861 net.cpp:200] pool1 needs backward computation.
I0428 19:57:59.888067 28861 net.cpp:200] conv1 needs backward computation.
I0428 19:57:59.888070 28861 net.cpp:200] pool0 needs backward computation.
I0428 19:57:59.888073 28861 net.cpp:200] conv0 needs backward computation.
I0428 19:57:59.888077 28861 net.cpp:202] mnist does not need backward computation.
I0428 19:57:59.888079 28861 net.cpp:244] This network produces output loss
I0428 19:57:59.888088 28861 net.cpp:257] Network initialization done.
I0428 19:57:59.888427 28861 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test805.prototxt
I0428 19:57:59.888453 28861 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:57:59.888555 28861 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:57:59.888634 28861 layer_factory.hpp:77] Creating layer mnist
I0428 19:57:59.888680 28861 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:57:59.888694 28861 net.cpp:86] Creating Layer mnist
I0428 19:57:59.888698 28861 net.cpp:382] mnist -> data
I0428 19:57:59.888705 28861 net.cpp:382] mnist -> label
I0428 19:57:59.888818 28861 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:57:59.890826 28861 net.cpp:124] Setting up mnist
I0428 19:57:59.890869 28861 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:57:59.890877 28861 net.cpp:131] Top shape: 100 (100)
I0428 19:57:59.890879 28861 net.cpp:139] Memory required for data: 314000
I0428 19:57:59.890883 28861 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:57:59.890915 28861 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:57:59.890919 28861 net.cpp:408] label_mnist_1_split <- label
I0428 19:57:59.890923 28861 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:57:59.890930 28861 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:57:59.890976 28861 net.cpp:124] Setting up label_mnist_1_split
I0428 19:57:59.890981 28861 net.cpp:131] Top shape: 100 (100)
I0428 19:57:59.890985 28861 net.cpp:131] Top shape: 100 (100)
I0428 19:57:59.890987 28861 net.cpp:139] Memory required for data: 314800
I0428 19:57:59.890990 28861 layer_factory.hpp:77] Creating layer conv0
I0428 19:57:59.891012 28861 net.cpp:86] Creating Layer conv0
I0428 19:57:59.891016 28861 net.cpp:408] conv0 <- data
I0428 19:57:59.891019 28861 net.cpp:382] conv0 -> conv0
I0428 19:57:59.892743 28861 net.cpp:124] Setting up conv0
I0428 19:57:59.892756 28861 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:57:59.892760 28861 net.cpp:139] Memory required for data: 2618800
I0428 19:57:59.892791 28861 layer_factory.hpp:77] Creating layer pool0
I0428 19:57:59.892798 28861 net.cpp:86] Creating Layer pool0
I0428 19:57:59.892802 28861 net.cpp:408] pool0 <- conv0
I0428 19:57:59.892807 28861 net.cpp:382] pool0 -> pool0
I0428 19:57:59.892848 28861 net.cpp:124] Setting up pool0
I0428 19:57:59.892855 28861 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:57:59.892858 28861 net.cpp:139] Memory required for data: 3194800
I0428 19:57:59.892860 28861 layer_factory.hpp:77] Creating layer conv1
I0428 19:57:59.892869 28861 net.cpp:86] Creating Layer conv1
I0428 19:57:59.892873 28861 net.cpp:408] conv1 <- pool0
I0428 19:57:59.892877 28861 net.cpp:382] conv1 -> conv1
I0428 19:57:59.895169 28861 net.cpp:124] Setting up conv1
I0428 19:57:59.895184 28861 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:57:59.895187 28861 net.cpp:139] Memory required for data: 3322800
I0428 19:57:59.895196 28861 layer_factory.hpp:77] Creating layer pool1
I0428 19:57:59.895220 28861 net.cpp:86] Creating Layer pool1
I0428 19:57:59.895223 28861 net.cpp:408] pool1 <- conv1
I0428 19:57:59.895228 28861 net.cpp:382] pool1 -> pool1
I0428 19:57:59.895283 28861 net.cpp:124] Setting up pool1
I0428 19:57:59.895299 28861 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:57:59.895303 28861 net.cpp:139] Memory required for data: 3354800
I0428 19:57:59.895305 28861 layer_factory.hpp:77] Creating layer ip1
I0428 19:57:59.895310 28861 net.cpp:86] Creating Layer ip1
I0428 19:57:59.895328 28861 net.cpp:408] ip1 <- pool1
I0428 19:57:59.895334 28861 net.cpp:382] ip1 -> ip1
I0428 19:57:59.895524 28861 net.cpp:124] Setting up ip1
I0428 19:57:59.895530 28861 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:59.895543 28861 net.cpp:139] Memory required for data: 3364800
I0428 19:57:59.895550 28861 layer_factory.hpp:77] Creating layer relu1
I0428 19:57:59.895566 28861 net.cpp:86] Creating Layer relu1
I0428 19:57:59.895570 28861 net.cpp:408] relu1 <- ip1
I0428 19:57:59.895576 28861 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:57:59.895789 28861 net.cpp:124] Setting up relu1
I0428 19:57:59.895799 28861 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:59.895802 28861 net.cpp:139] Memory required for data: 3374800
I0428 19:57:59.895805 28861 layer_factory.hpp:77] Creating layer ip2
I0428 19:57:59.895813 28861 net.cpp:86] Creating Layer ip2
I0428 19:57:59.895817 28861 net.cpp:408] ip2 <- ip1
I0428 19:57:59.895822 28861 net.cpp:382] ip2 -> ip2
I0428 19:57:59.895937 28861 net.cpp:124] Setting up ip2
I0428 19:57:59.895943 28861 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:59.895947 28861 net.cpp:139] Memory required for data: 3384800
I0428 19:57:59.895952 28861 layer_factory.hpp:77] Creating layer relu2
I0428 19:57:59.895956 28861 net.cpp:86] Creating Layer relu2
I0428 19:57:59.895972 28861 net.cpp:408] relu2 <- ip2
I0428 19:57:59.895977 28861 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:57:59.896145 28861 net.cpp:124] Setting up relu2
I0428 19:57:59.896152 28861 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:57:59.896155 28861 net.cpp:139] Memory required for data: 3394800
I0428 19:57:59.896158 28861 layer_factory.hpp:77] Creating layer ip3
I0428 19:57:59.896164 28861 net.cpp:86] Creating Layer ip3
I0428 19:57:59.896167 28861 net.cpp:408] ip3 <- ip2
I0428 19:57:59.896173 28861 net.cpp:382] ip3 -> ip3
I0428 19:57:59.896296 28861 net.cpp:124] Setting up ip3
I0428 19:57:59.896304 28861 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:59.896307 28861 net.cpp:139] Memory required for data: 3398800
I0428 19:57:59.896316 28861 layer_factory.hpp:77] Creating layer relu3
I0428 19:57:59.896319 28861 net.cpp:86] Creating Layer relu3
I0428 19:57:59.896338 28861 net.cpp:408] relu3 <- ip3
I0428 19:57:59.896342 28861 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:57:59.897255 28861 net.cpp:124] Setting up relu3
I0428 19:57:59.897267 28861 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:59.897271 28861 net.cpp:139] Memory required for data: 3402800
I0428 19:57:59.897274 28861 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:57:59.897280 28861 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:57:59.897284 28861 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:57:59.897289 28861 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:57:59.897295 28861 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:57:59.897363 28861 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:57:59.897377 28861 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:59.897382 28861 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:57:59.897389 28861 net.cpp:139] Memory required for data: 3410800
I0428 19:57:59.897392 28861 layer_factory.hpp:77] Creating layer accuracy
I0428 19:57:59.897398 28861 net.cpp:86] Creating Layer accuracy
I0428 19:57:59.897402 28861 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:57:59.897410 28861 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:57:59.897415 28861 net.cpp:382] accuracy -> accuracy
I0428 19:57:59.897421 28861 net.cpp:124] Setting up accuracy
I0428 19:57:59.897425 28861 net.cpp:131] Top shape: (1)
I0428 19:57:59.897428 28861 net.cpp:139] Memory required for data: 3410804
I0428 19:57:59.897430 28861 layer_factory.hpp:77] Creating layer loss
I0428 19:57:59.897436 28861 net.cpp:86] Creating Layer loss
I0428 19:57:59.897440 28861 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:57:59.897449 28861 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:57:59.897452 28861 net.cpp:382] loss -> loss
I0428 19:57:59.897457 28861 layer_factory.hpp:77] Creating layer loss
I0428 19:57:59.897730 28861 net.cpp:124] Setting up loss
I0428 19:57:59.897755 28861 net.cpp:131] Top shape: (1)
I0428 19:57:59.897758 28861 net.cpp:134]     with loss weight 1
I0428 19:57:59.897765 28861 net.cpp:139] Memory required for data: 3410808
I0428 19:57:59.897778 28861 net.cpp:200] loss needs backward computation.
I0428 19:57:59.897783 28861 net.cpp:202] accuracy does not need backward computation.
I0428 19:57:59.897786 28861 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:57:59.897811 28861 net.cpp:200] relu3 needs backward computation.
I0428 19:57:59.897814 28861 net.cpp:200] ip3 needs backward computation.
I0428 19:57:59.897817 28861 net.cpp:200] relu2 needs backward computation.
I0428 19:57:59.897819 28861 net.cpp:200] ip2 needs backward computation.
I0428 19:57:59.897828 28861 net.cpp:200] relu1 needs backward computation.
I0428 19:57:59.897831 28861 net.cpp:200] ip1 needs backward computation.
I0428 19:57:59.897835 28861 net.cpp:200] pool1 needs backward computation.
I0428 19:57:59.897847 28861 net.cpp:200] conv1 needs backward computation.
I0428 19:57:59.897850 28861 net.cpp:200] pool0 needs backward computation.
I0428 19:57:59.897853 28861 net.cpp:200] conv0 needs backward computation.
I0428 19:57:59.897858 28861 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:57:59.897862 28861 net.cpp:202] mnist does not need backward computation.
I0428 19:57:59.897866 28861 net.cpp:244] This network produces output accuracy
I0428 19:57:59.897868 28861 net.cpp:244] This network produces output loss
I0428 19:57:59.897881 28861 net.cpp:257] Network initialization done.
I0428 19:57:59.897923 28861 solver.cpp:56] Solver scaffolding done.
I0428 19:57:59.898285 28861 caffe.cpp:248] Starting Optimization
I0428 19:57:59.898298 28861 solver.cpp:273] Solving LeNet
I0428 19:57:59.898301 28861 solver.cpp:274] Learning Rate Policy: inv
I0428 19:57:59.899106 28861 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:57:59.902863 28861 blocking_queue.cpp:49] Waiting for data
I0428 19:57:59.973378 28868 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:57:59.973908 28861 solver.cpp:398]     Test net output #0: accuracy = 0.0897
I0428 19:57:59.973927 28861 solver.cpp:398]     Test net output #1: loss = 2.3323 (* 1 = 2.3323 loss)
I0428 19:57:59.976518 28861 solver.cpp:219] Iteration 0 (0 iter/s, 0.0781925s/100 iters), loss = 2.34189
I0428 19:57:59.976541 28861 solver.cpp:238]     Train net output #0: loss = 2.34189 (* 1 = 2.34189 loss)
I0428 19:57:59.976567 28861 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:00.062384 28861 solver.cpp:219] Iteration 100 (1165.1 iter/s, 0.0858297s/100 iters), loss = 0.957147
I0428 19:58:00.062424 28861 solver.cpp:238]     Train net output #0: loss = 0.957147 (* 1 = 0.957147 loss)
I0428 19:58:00.062430 28861 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:00.148025 28861 solver.cpp:219] Iteration 200 (1168.33 iter/s, 0.0855921s/100 iters), loss = 0.947684
I0428 19:58:00.148066 28861 solver.cpp:238]     Train net output #0: loss = 0.947684 (* 1 = 0.947684 loss)
I0428 19:58:00.148072 28861 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:00.227041 28861 solver.cpp:219] Iteration 300 (1266.42 iter/s, 0.0789627s/100 iters), loss = 0.849228
I0428 19:58:00.227079 28861 solver.cpp:238]     Train net output #0: loss = 0.849228 (* 1 = 0.849228 loss)
I0428 19:58:00.227089 28861 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:00.310041 28861 solver.cpp:219] Iteration 400 (1205.48 iter/s, 0.0829542s/100 iters), loss = 0.763376
I0428 19:58:00.310071 28861 solver.cpp:238]     Train net output #0: loss = 0.763376 (* 1 = 0.763376 loss)
I0428 19:58:00.310080 28861 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:00.386729 28861 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:00.449195 28868 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:00.449733 28861 solver.cpp:398]     Test net output #0: accuracy = 0.8299
I0428 19:58:00.449754 28861 solver.cpp:398]     Test net output #1: loss = 0.651413 (* 1 = 0.651413 loss)
I0428 19:58:00.450564 28861 solver.cpp:219] Iteration 500 (711.828 iter/s, 0.140483s/100 iters), loss = 0.685509
I0428 19:58:00.450588 28861 solver.cpp:238]     Train net output #0: loss = 0.685509 (* 1 = 0.685509 loss)
I0428 19:58:00.450610 28861 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:00.529750 28861 solver.cpp:219] Iteration 600 (1263.39 iter/s, 0.0791521s/100 iters), loss = 0.620458
I0428 19:58:00.529773 28861 solver.cpp:238]     Train net output #0: loss = 0.620458 (* 1 = 0.620458 loss)
I0428 19:58:00.529795 28861 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:00.607543 28861 solver.cpp:219] Iteration 700 (1286 iter/s, 0.0777605s/100 iters), loss = 0.625372
I0428 19:58:00.607578 28861 solver.cpp:238]     Train net output #0: loss = 0.625372 (* 1 = 0.625372 loss)
I0428 19:58:00.607584 28861 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:00.689648 28861 solver.cpp:219] Iteration 800 (1218.65 iter/s, 0.0820582s/100 iters), loss = 0.707052
I0428 19:58:00.689680 28861 solver.cpp:238]     Train net output #0: loss = 0.707052 (* 1 = 0.707052 loss)
I0428 19:58:00.689689 28861 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:00.767467 28861 solver.cpp:219] Iteration 900 (1285.7 iter/s, 0.0777789s/100 iters), loss = 0.671695
I0428 19:58:00.767491 28861 solver.cpp:238]     Train net output #0: loss = 0.671695 (* 1 = 0.671695 loss)
I0428 19:58:00.767498 28861 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:00.793130 28867 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:00.844326 28861 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:00.845075 28861 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:00.845505 28861 solver.cpp:311] Iteration 1000, loss = 0.675716
I0428 19:58:00.845521 28861 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:00.921386 28868 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:00.921901 28861 solver.cpp:398]     Test net output #0: accuracy = 0.8608
I0428 19:58:00.921922 28861 solver.cpp:398]     Test net output #1: loss = 0.57679 (* 1 = 0.57679 loss)
I0428 19:58:00.921926 28861 solver.cpp:316] Optimization Done.
I0428 19:58:00.921929 28861 caffe.cpp:259] Optimization Done.
