I0428 19:36:22.796775 23678 caffe.cpp:218] Using GPUs 0
I0428 19:36:22.832746 23678 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:36:23.345873 23678 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test242.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:36:23.346040 23678 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test242.prototxt
I0428 19:36:23.346371 23678 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:36:23.346391 23678 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:36:23.346477 23678 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:23.346572 23678 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:23.346700 23678 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:36:23.346730 23678 net.cpp:86] Creating Layer mnist
I0428 19:36:23.346745 23678 net.cpp:382] mnist -> data
I0428 19:36:23.346773 23678 net.cpp:382] mnist -> label
I0428 19:36:23.347935 23678 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:36:23.350359 23678 net.cpp:124] Setting up mnist
I0428 19:36:23.350379 23678 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:36:23.350389 23678 net.cpp:131] Top shape: 64 (64)
I0428 19:36:23.350395 23678 net.cpp:139] Memory required for data: 200960
I0428 19:36:23.350405 23678 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:23.350447 23678 net.cpp:86] Creating Layer conv0
I0428 19:36:23.350456 23678 net.cpp:408] conv0 <- data
I0428 19:36:23.350476 23678 net.cpp:382] conv0 -> conv0
I0428 19:36:23.639106 23678 net.cpp:124] Setting up conv0
I0428 19:36:23.639139 23678 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 19:36:23.639147 23678 net.cpp:139] Memory required for data: 14946560
I0428 19:36:23.639169 23678 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:23.639189 23678 net.cpp:86] Creating Layer pool0
I0428 19:36:23.639197 23678 net.cpp:408] pool0 <- conv0
I0428 19:36:23.639207 23678 net.cpp:382] pool0 -> pool0
I0428 19:36:23.639278 23678 net.cpp:124] Setting up pool0
I0428 19:36:23.639288 23678 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 19:36:23.639295 23678 net.cpp:139] Memory required for data: 18632960
I0428 19:36:23.639322 23678 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:23.639338 23678 net.cpp:86] Creating Layer ip1
I0428 19:36:23.639345 23678 net.cpp:408] ip1 <- pool0
I0428 19:36:23.639356 23678 net.cpp:382] ip1 -> ip1
I0428 19:36:23.642701 23678 net.cpp:124] Setting up ip1
I0428 19:36:23.642720 23678 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:36:23.642727 23678 net.cpp:139] Memory required for data: 18639360
I0428 19:36:23.642742 23678 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:23.642755 23678 net.cpp:86] Creating Layer relu1
I0428 19:36:23.642761 23678 net.cpp:408] relu1 <- ip1
I0428 19:36:23.642771 23678 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:23.642976 23678 net.cpp:124] Setting up relu1
I0428 19:36:23.642988 23678 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:36:23.642994 23678 net.cpp:139] Memory required for data: 18645760
I0428 19:36:23.643000 23678 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:23.643012 23678 net.cpp:86] Creating Layer ip2
I0428 19:36:23.643018 23678 net.cpp:408] ip2 <- ip1
I0428 19:36:23.643028 23678 net.cpp:382] ip2 -> ip2
I0428 19:36:23.643146 23678 net.cpp:124] Setting up ip2
I0428 19:36:23.643155 23678 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:23.643162 23678 net.cpp:139] Memory required for data: 18648320
I0428 19:36:23.643177 23678 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:23.643185 23678 net.cpp:86] Creating Layer relu2
I0428 19:36:23.643196 23678 net.cpp:408] relu2 <- ip2
I0428 19:36:23.643205 23678 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:23.644028 23678 net.cpp:124] Setting up relu2
I0428 19:36:23.644044 23678 net.cpp:131] Top shape: 64 10 (640)
I0428 19:36:23.644052 23678 net.cpp:139] Memory required for data: 18650880
I0428 19:36:23.644057 23678 layer_factory.hpp:77] Creating layer loss
I0428 19:36:23.644068 23678 net.cpp:86] Creating Layer loss
I0428 19:36:23.644075 23678 net.cpp:408] loss <- ip2
I0428 19:36:23.644083 23678 net.cpp:408] loss <- label
I0428 19:36:23.644093 23678 net.cpp:382] loss -> loss
I0428 19:36:23.644117 23678 layer_factory.hpp:77] Creating layer loss
I0428 19:36:23.644384 23678 net.cpp:124] Setting up loss
I0428 19:36:23.644397 23678 net.cpp:131] Top shape: (1)
I0428 19:36:23.644404 23678 net.cpp:134]     with loss weight 1
I0428 19:36:23.644426 23678 net.cpp:139] Memory required for data: 18650884
I0428 19:36:23.644433 23678 net.cpp:200] loss needs backward computation.
I0428 19:36:23.644440 23678 net.cpp:200] relu2 needs backward computation.
I0428 19:36:23.644446 23678 net.cpp:200] ip2 needs backward computation.
I0428 19:36:23.644453 23678 net.cpp:200] relu1 needs backward computation.
I0428 19:36:23.644459 23678 net.cpp:200] ip1 needs backward computation.
I0428 19:36:23.644464 23678 net.cpp:200] pool0 needs backward computation.
I0428 19:36:23.644470 23678 net.cpp:200] conv0 needs backward computation.
I0428 19:36:23.644477 23678 net.cpp:202] mnist does not need backward computation.
I0428 19:36:23.644482 23678 net.cpp:244] This network produces output loss
I0428 19:36:23.644496 23678 net.cpp:257] Network initialization done.
I0428 19:36:23.644780 23678 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test242.prototxt
I0428 19:36:23.644822 23678 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:36:23.644914 23678 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:36:23.645025 23678 layer_factory.hpp:77] Creating layer mnist
I0428 19:36:23.645090 23678 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:36:23.645114 23678 net.cpp:86] Creating Layer mnist
I0428 19:36:23.645123 23678 net.cpp:382] mnist -> data
I0428 19:36:23.645136 23678 net.cpp:382] mnist -> label
I0428 19:36:23.645272 23678 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:36:23.647403 23678 net.cpp:124] Setting up mnist
I0428 19:36:23.647419 23678 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:36:23.647428 23678 net.cpp:131] Top shape: 100 (100)
I0428 19:36:23.647435 23678 net.cpp:139] Memory required for data: 314000
I0428 19:36:23.647441 23678 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:36:23.647454 23678 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:36:23.647460 23678 net.cpp:408] label_mnist_1_split <- label
I0428 19:36:23.647469 23678 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:36:23.647481 23678 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:36:23.647590 23678 net.cpp:124] Setting up label_mnist_1_split
I0428 19:36:23.647600 23678 net.cpp:131] Top shape: 100 (100)
I0428 19:36:23.647608 23678 net.cpp:131] Top shape: 100 (100)
I0428 19:36:23.647614 23678 net.cpp:139] Memory required for data: 314800
I0428 19:36:23.647620 23678 layer_factory.hpp:77] Creating layer conv0
I0428 19:36:23.647635 23678 net.cpp:86] Creating Layer conv0
I0428 19:36:23.647644 23678 net.cpp:408] conv0 <- data
I0428 19:36:23.647655 23678 net.cpp:382] conv0 -> conv0
I0428 19:36:23.649385 23678 net.cpp:124] Setting up conv0
I0428 19:36:23.649405 23678 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 19:36:23.649411 23678 net.cpp:139] Memory required for data: 23354800
I0428 19:36:23.649427 23678 layer_factory.hpp:77] Creating layer pool0
I0428 19:36:23.649438 23678 net.cpp:86] Creating Layer pool0
I0428 19:36:23.649446 23678 net.cpp:408] pool0 <- conv0
I0428 19:36:23.649456 23678 net.cpp:382] pool0 -> pool0
I0428 19:36:23.649504 23678 net.cpp:124] Setting up pool0
I0428 19:36:23.649514 23678 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 19:36:23.649521 23678 net.cpp:139] Memory required for data: 29114800
I0428 19:36:23.649528 23678 layer_factory.hpp:77] Creating layer ip1
I0428 19:36:23.649539 23678 net.cpp:86] Creating Layer ip1
I0428 19:36:23.649545 23678 net.cpp:408] ip1 <- pool0
I0428 19:36:23.649555 23678 net.cpp:382] ip1 -> ip1
I0428 19:36:23.651970 23678 net.cpp:124] Setting up ip1
I0428 19:36:23.651983 23678 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:36:23.651989 23678 net.cpp:139] Memory required for data: 29124800
I0428 19:36:23.652004 23678 layer_factory.hpp:77] Creating layer relu1
I0428 19:36:23.652012 23678 net.cpp:86] Creating Layer relu1
I0428 19:36:23.652025 23678 net.cpp:408] relu1 <- ip1
I0428 19:36:23.652034 23678 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:36:23.652261 23678 net.cpp:124] Setting up relu1
I0428 19:36:23.652272 23678 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:36:23.652295 23678 net.cpp:139] Memory required for data: 29134800
I0428 19:36:23.652303 23678 layer_factory.hpp:77] Creating layer ip2
I0428 19:36:23.652314 23678 net.cpp:86] Creating Layer ip2
I0428 19:36:23.652321 23678 net.cpp:408] ip2 <- ip1
I0428 19:36:23.652331 23678 net.cpp:382] ip2 -> ip2
I0428 19:36:23.652449 23678 net.cpp:124] Setting up ip2
I0428 19:36:23.652460 23678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:23.652467 23678 net.cpp:139] Memory required for data: 29138800
I0428 19:36:23.652482 23678 layer_factory.hpp:77] Creating layer relu2
I0428 19:36:23.652493 23678 net.cpp:86] Creating Layer relu2
I0428 19:36:23.652499 23678 net.cpp:408] relu2 <- ip2
I0428 19:36:23.652508 23678 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:36:23.652690 23678 net.cpp:124] Setting up relu2
I0428 19:36:23.652704 23678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:23.652709 23678 net.cpp:139] Memory required for data: 29142800
I0428 19:36:23.652716 23678 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:36:23.652727 23678 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:36:23.652734 23678 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:36:23.652745 23678 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:36:23.652757 23678 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:36:23.652806 23678 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:36:23.652827 23678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:23.652835 23678 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:36:23.652854 23678 net.cpp:139] Memory required for data: 29150800
I0428 19:36:23.652860 23678 layer_factory.hpp:77] Creating layer accuracy
I0428 19:36:23.652870 23678 net.cpp:86] Creating Layer accuracy
I0428 19:36:23.652876 23678 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:36:23.652889 23678 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:36:23.652897 23678 net.cpp:382] accuracy -> accuracy
I0428 19:36:23.652910 23678 net.cpp:124] Setting up accuracy
I0428 19:36:23.652920 23678 net.cpp:131] Top shape: (1)
I0428 19:36:23.652926 23678 net.cpp:139] Memory required for data: 29150804
I0428 19:36:23.652932 23678 layer_factory.hpp:77] Creating layer loss
I0428 19:36:23.652940 23678 net.cpp:86] Creating Layer loss
I0428 19:36:23.652947 23678 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:36:23.652954 23678 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:36:23.652966 23678 net.cpp:382] loss -> loss
I0428 19:36:23.652976 23678 layer_factory.hpp:77] Creating layer loss
I0428 19:36:23.653960 23678 net.cpp:124] Setting up loss
I0428 19:36:23.653976 23678 net.cpp:131] Top shape: (1)
I0428 19:36:23.653982 23678 net.cpp:134]     with loss weight 1
I0428 19:36:23.653993 23678 net.cpp:139] Memory required for data: 29150808
I0428 19:36:23.654000 23678 net.cpp:200] loss needs backward computation.
I0428 19:36:23.654006 23678 net.cpp:202] accuracy does not need backward computation.
I0428 19:36:23.654013 23678 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:36:23.654019 23678 net.cpp:200] relu2 needs backward computation.
I0428 19:36:23.654024 23678 net.cpp:200] ip2 needs backward computation.
I0428 19:36:23.654031 23678 net.cpp:200] relu1 needs backward computation.
I0428 19:36:23.654036 23678 net.cpp:200] ip1 needs backward computation.
I0428 19:36:23.654042 23678 net.cpp:200] pool0 needs backward computation.
I0428 19:36:23.654047 23678 net.cpp:200] conv0 needs backward computation.
I0428 19:36:23.654053 23678 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:36:23.654060 23678 net.cpp:202] mnist does not need backward computation.
I0428 19:36:23.654065 23678 net.cpp:244] This network produces output accuracy
I0428 19:36:23.654072 23678 net.cpp:244] This network produces output loss
I0428 19:36:23.654093 23678 net.cpp:257] Network initialization done.
I0428 19:36:23.654139 23678 solver.cpp:56] Solver scaffolding done.
I0428 19:36:23.654374 23678 caffe.cpp:248] Starting Optimization
I0428 19:36:23.654382 23678 solver.cpp:273] Solving LeNet
I0428 19:36:23.654402 23678 solver.cpp:274] Learning Rate Policy: inv
I0428 19:36:23.655809 23678 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:36:23.812167 23685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:23.816516 23678 solver.cpp:398]     Test net output #0: accuracy = 0.1345
I0428 19:36:23.816540 23678 solver.cpp:398]     Test net output #1: loss = 2.30228 (* 1 = 2.30228 loss)
I0428 19:36:23.821424 23678 solver.cpp:219] Iteration 0 (0 iter/s, 0.166985s/100 iters), loss = 2.28705
I0428 19:36:23.821450 23678 solver.cpp:238]     Train net output #0: loss = 2.28705 (* 1 = 2.28705 loss)
I0428 19:36:23.821466 23678 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:36:24.040995 23678 solver.cpp:219] Iteration 100 (455.525 iter/s, 0.219527s/100 iters), loss = 1.37402
I0428 19:36:24.041026 23678 solver.cpp:238]     Train net output #0: loss = 1.37402 (* 1 = 1.37402 loss)
I0428 19:36:24.041038 23678 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:36:24.261061 23678 solver.cpp:219] Iteration 200 (454.505 iter/s, 0.22002s/100 iters), loss = 0.769278
I0428 19:36:24.261093 23678 solver.cpp:238]     Train net output #0: loss = 0.769278 (* 1 = 0.769278 loss)
I0428 19:36:24.261119 23678 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:36:24.488345 23678 solver.cpp:219] Iteration 300 (440.071 iter/s, 0.227236s/100 iters), loss = 0.798991
I0428 19:36:24.488382 23678 solver.cpp:238]     Train net output #0: loss = 0.798991 (* 1 = 0.798991 loss)
I0428 19:36:24.488391 23678 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:36:24.713624 23678 solver.cpp:219] Iteration 400 (444.001 iter/s, 0.225225s/100 iters), loss = 0.42084
I0428 19:36:24.713655 23678 solver.cpp:238]     Train net output #0: loss = 0.42084 (* 1 = 0.42084 loss)
I0428 19:36:24.713662 23678 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:36:24.937551 23678 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:36:25.092700 23685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:25.098544 23678 solver.cpp:398]     Test net output #0: accuracy = 0.9369
I0428 19:36:25.098582 23678 solver.cpp:398]     Test net output #1: loss = 0.212269 (* 1 = 0.212269 loss)
I0428 19:36:25.100708 23678 solver.cpp:219] Iteration 500 (258.377 iter/s, 0.387031s/100 iters), loss = 0.39607
I0428 19:36:25.100745 23678 solver.cpp:238]     Train net output #0: loss = 0.39607 (* 1 = 0.39607 loss)
I0428 19:36:25.100751 23678 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:36:25.319862 23678 solver.cpp:219] Iteration 600 (456.376 iter/s, 0.219117s/100 iters), loss = 0.144926
I0428 19:36:25.319905 23678 solver.cpp:238]     Train net output #0: loss = 0.144926 (* 1 = 0.144926 loss)
I0428 19:36:25.319911 23678 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:36:25.540879 23678 solver.cpp:219] Iteration 700 (452.542 iter/s, 0.220974s/100 iters), loss = 0.2381
I0428 19:36:25.540920 23678 solver.cpp:238]     Train net output #0: loss = 0.2381 (* 1 = 0.2381 loss)
I0428 19:36:25.540926 23678 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:36:25.766099 23678 solver.cpp:219] Iteration 800 (444.09 iter/s, 0.22518s/100 iters), loss = 0.270246
I0428 19:36:25.766142 23678 solver.cpp:238]     Train net output #0: loss = 0.270246 (* 1 = 0.270246 loss)
I0428 19:36:25.766149 23678 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:36:25.987769 23678 solver.cpp:219] Iteration 900 (451.21 iter/s, 0.221626s/100 iters), loss = 0.245623
I0428 19:36:25.987798 23678 solver.cpp:238]     Train net output #0: loss = 0.245623 (* 1 = 0.245623 loss)
I0428 19:36:25.987805 23678 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:36:26.061579 23684 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:26.208451 23678 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:36:26.214336 23678 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:36:26.218252 23678 solver.cpp:311] Iteration 1000, loss = 0.132736
I0428 19:36:26.218269 23678 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:36:26.371701 23685 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:36:26.377681 23678 solver.cpp:398]     Test net output #0: accuracy = 0.9656
I0428 19:36:26.377717 23678 solver.cpp:398]     Test net output #1: loss = 0.118796 (* 1 = 0.118796 loss)
I0428 19:36:26.377722 23678 solver.cpp:316] Optimization Done.
I0428 19:36:26.377724 23678 caffe.cpp:259] Optimization Done.
