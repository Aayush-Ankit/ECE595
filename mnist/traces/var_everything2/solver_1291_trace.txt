I0428 20:17:17.486444   839 caffe.cpp:218] Using GPUs 0
I0428 20:17:17.528836   839 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:17:18.125480   839 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1291.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:17:18.125665   839 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1291.prototxt
I0428 20:17:18.126180   839 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:17:18.126202   839 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:17:18.126325   839 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:18.126417   839 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:18.126535   839 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:17:18.126564   839 net.cpp:86] Creating Layer mnist
I0428 20:17:18.126575   839 net.cpp:382] mnist -> data
I0428 20:17:18.126603   839 net.cpp:382] mnist -> label
I0428 20:17:18.127985   839 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:17:18.131412   839 net.cpp:124] Setting up mnist
I0428 20:17:18.131434   839 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:17:18.131443   839 net.cpp:131] Top shape: 64 (64)
I0428 20:17:18.131448   839 net.cpp:139] Memory required for data: 200960
I0428 20:17:18.131458   839 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:18.131479   839 net.cpp:86] Creating Layer conv0
I0428 20:17:18.131490   839 net.cpp:408] conv0 <- data
I0428 20:17:18.131508   839 net.cpp:382] conv0 -> conv0
I0428 20:17:18.463496   839 net.cpp:124] Setting up conv0
I0428 20:17:18.463544   839 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:17:18.463551   839 net.cpp:139] Memory required for data: 7573760
I0428 20:17:18.463621   839 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:18.463637   839 net.cpp:86] Creating Layer pool0
I0428 20:17:18.463644   839 net.cpp:408] pool0 <- conv0
I0428 20:17:18.463651   839 net.cpp:382] pool0 -> pool0
I0428 20:17:18.463712   839 net.cpp:124] Setting up pool0
I0428 20:17:18.463723   839 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:17:18.463728   839 net.cpp:139] Memory required for data: 9416960
I0428 20:17:18.463733   839 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:18.463747   839 net.cpp:86] Creating Layer conv1
I0428 20:17:18.463752   839 net.cpp:408] conv1 <- pool0
I0428 20:17:18.463758   839 net.cpp:382] conv1 -> conv1
I0428 20:17:18.467756   839 net.cpp:124] Setting up conv1
I0428 20:17:18.467788   839 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:17:18.467794   839 net.cpp:139] Memory required for data: 9580800
I0428 20:17:18.467805   839 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:18.467815   839 net.cpp:86] Creating Layer pool1
I0428 20:17:18.467820   839 net.cpp:408] pool1 <- conv1
I0428 20:17:18.467842   839 net.cpp:382] pool1 -> pool1
I0428 20:17:18.467902   839 net.cpp:124] Setting up pool1
I0428 20:17:18.467912   839 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:17:18.467916   839 net.cpp:139] Memory required for data: 9621760
I0428 20:17:18.467921   839 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:18.467931   839 net.cpp:86] Creating Layer ip1
I0428 20:17:18.467936   839 net.cpp:408] ip1 <- pool1
I0428 20:17:18.467942   839 net.cpp:382] ip1 -> ip1
I0428 20:17:18.468073   839 net.cpp:124] Setting up ip1
I0428 20:17:18.468083   839 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:18.468087   839 net.cpp:139] Memory required for data: 9624320
I0428 20:17:18.468097   839 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:18.468106   839 net.cpp:86] Creating Layer relu1
I0428 20:17:18.468109   839 net.cpp:408] relu1 <- ip1
I0428 20:17:18.468116   839 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:18.468322   839 net.cpp:124] Setting up relu1
I0428 20:17:18.468334   839 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:18.468338   839 net.cpp:139] Memory required for data: 9626880
I0428 20:17:18.468343   839 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:18.468353   839 net.cpp:86] Creating Layer ip2
I0428 20:17:18.468356   839 net.cpp:408] ip2 <- ip1
I0428 20:17:18.468364   839 net.cpp:382] ip2 -> ip2
I0428 20:17:18.468478   839 net.cpp:124] Setting up ip2
I0428 20:17:18.468488   839 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:18.468493   839 net.cpp:139] Memory required for data: 9629440
I0428 20:17:18.468502   839 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:18.468509   839 net.cpp:86] Creating Layer relu2
I0428 20:17:18.468513   839 net.cpp:408] relu2 <- ip2
I0428 20:17:18.468519   839 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:18.469552   839 net.cpp:124] Setting up relu2
I0428 20:17:18.469583   839 net.cpp:131] Top shape: 64 10 (640)
I0428 20:17:18.469588   839 net.cpp:139] Memory required for data: 9632000
I0428 20:17:18.469593   839 layer_factory.hpp:77] Creating layer loss
I0428 20:17:18.469602   839 net.cpp:86] Creating Layer loss
I0428 20:17:18.469607   839 net.cpp:408] loss <- ip2
I0428 20:17:18.469614   839 net.cpp:408] loss <- label
I0428 20:17:18.469621   839 net.cpp:382] loss -> loss
I0428 20:17:18.469646   839 layer_factory.hpp:77] Creating layer loss
I0428 20:17:18.469982   839 net.cpp:124] Setting up loss
I0428 20:17:18.470010   839 net.cpp:131] Top shape: (1)
I0428 20:17:18.470016   839 net.cpp:134]     with loss weight 1
I0428 20:17:18.470043   839 net.cpp:139] Memory required for data: 9632004
I0428 20:17:18.470049   839 net.cpp:200] loss needs backward computation.
I0428 20:17:18.470054   839 net.cpp:200] relu2 needs backward computation.
I0428 20:17:18.470059   839 net.cpp:200] ip2 needs backward computation.
I0428 20:17:18.470064   839 net.cpp:200] relu1 needs backward computation.
I0428 20:17:18.470068   839 net.cpp:200] ip1 needs backward computation.
I0428 20:17:18.470085   839 net.cpp:200] pool1 needs backward computation.
I0428 20:17:18.470090   839 net.cpp:200] conv1 needs backward computation.
I0428 20:17:18.470096   839 net.cpp:200] pool0 needs backward computation.
I0428 20:17:18.470101   839 net.cpp:200] conv0 needs backward computation.
I0428 20:17:18.470106   839 net.cpp:202] mnist does not need backward computation.
I0428 20:17:18.470111   839 net.cpp:244] This network produces output loss
I0428 20:17:18.470124   839 net.cpp:257] Network initialization done.
I0428 20:17:18.470585   839 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1291.prototxt
I0428 20:17:18.470636   839 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:17:18.470754   839 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:17:18.470844   839 layer_factory.hpp:77] Creating layer mnist
I0428 20:17:18.470911   839 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:17:18.470927   839 net.cpp:86] Creating Layer mnist
I0428 20:17:18.470934   839 net.cpp:382] mnist -> data
I0428 20:17:18.470945   839 net.cpp:382] mnist -> label
I0428 20:17:18.471056   839 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:17:18.473722   839 net.cpp:124] Setting up mnist
I0428 20:17:18.473769   839 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:17:18.473778   839 net.cpp:131] Top shape: 100 (100)
I0428 20:17:18.473783   839 net.cpp:139] Memory required for data: 314000
I0428 20:17:18.473788   839 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:17:18.473801   839 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:17:18.473821   839 net.cpp:408] label_mnist_1_split <- label
I0428 20:17:18.473829   839 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:17:18.473839   839 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:17:18.473976   839 net.cpp:124] Setting up label_mnist_1_split
I0428 20:17:18.473987   839 net.cpp:131] Top shape: 100 (100)
I0428 20:17:18.473994   839 net.cpp:131] Top shape: 100 (100)
I0428 20:17:18.473999   839 net.cpp:139] Memory required for data: 314800
I0428 20:17:18.474004   839 layer_factory.hpp:77] Creating layer conv0
I0428 20:17:18.474015   839 net.cpp:86] Creating Layer conv0
I0428 20:17:18.474021   839 net.cpp:408] conv0 <- data
I0428 20:17:18.474045   839 net.cpp:382] conv0 -> conv0
I0428 20:17:18.476191   839 net.cpp:124] Setting up conv0
I0428 20:17:18.476223   839 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:17:18.476229   839 net.cpp:139] Memory required for data: 11834800
I0428 20:17:18.476243   839 layer_factory.hpp:77] Creating layer pool0
I0428 20:17:18.476250   839 net.cpp:86] Creating Layer pool0
I0428 20:17:18.476270   839 net.cpp:408] pool0 <- conv0
I0428 20:17:18.476279   839 net.cpp:382] pool0 -> pool0
I0428 20:17:18.476325   839 net.cpp:124] Setting up pool0
I0428 20:17:18.476354   839 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:17:18.476361   839 net.cpp:139] Memory required for data: 14714800
I0428 20:17:18.476366   839 layer_factory.hpp:77] Creating layer conv1
I0428 20:17:18.476378   839 net.cpp:86] Creating Layer conv1
I0428 20:17:18.476383   839 net.cpp:408] conv1 <- pool0
I0428 20:17:18.476392   839 net.cpp:382] conv1 -> conv1
I0428 20:17:18.478760   839 net.cpp:124] Setting up conv1
I0428 20:17:18.478795   839 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:17:18.478799   839 net.cpp:139] Memory required for data: 14970800
I0428 20:17:18.478812   839 layer_factory.hpp:77] Creating layer pool1
I0428 20:17:18.478821   839 net.cpp:86] Creating Layer pool1
I0428 20:17:18.478842   839 net.cpp:408] pool1 <- conv1
I0428 20:17:18.478849   839 net.cpp:382] pool1 -> pool1
I0428 20:17:18.478911   839 net.cpp:124] Setting up pool1
I0428 20:17:18.478922   839 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:17:18.478927   839 net.cpp:139] Memory required for data: 15034800
I0428 20:17:18.478932   839 layer_factory.hpp:77] Creating layer ip1
I0428 20:17:18.478941   839 net.cpp:86] Creating Layer ip1
I0428 20:17:18.478946   839 net.cpp:408] ip1 <- pool1
I0428 20:17:18.478955   839 net.cpp:382] ip1 -> ip1
I0428 20:17:18.479101   839 net.cpp:124] Setting up ip1
I0428 20:17:18.479113   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.479120   839 net.cpp:139] Memory required for data: 15038800
I0428 20:17:18.479141   839 layer_factory.hpp:77] Creating layer relu1
I0428 20:17:18.479153   839 net.cpp:86] Creating Layer relu1
I0428 20:17:18.479158   839 net.cpp:408] relu1 <- ip1
I0428 20:17:18.479166   839 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:17:18.479377   839 net.cpp:124] Setting up relu1
I0428 20:17:18.479405   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.479410   839 net.cpp:139] Memory required for data: 15042800
I0428 20:17:18.479416   839 layer_factory.hpp:77] Creating layer ip2
I0428 20:17:18.479427   839 net.cpp:86] Creating Layer ip2
I0428 20:17:18.479432   839 net.cpp:408] ip2 <- ip1
I0428 20:17:18.479440   839 net.cpp:382] ip2 -> ip2
I0428 20:17:18.479570   839 net.cpp:124] Setting up ip2
I0428 20:17:18.479581   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.479586   839 net.cpp:139] Memory required for data: 15046800
I0428 20:17:18.479595   839 layer_factory.hpp:77] Creating layer relu2
I0428 20:17:18.479602   839 net.cpp:86] Creating Layer relu2
I0428 20:17:18.479607   839 net.cpp:408] relu2 <- ip2
I0428 20:17:18.479614   839 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:17:18.479962   839 net.cpp:124] Setting up relu2
I0428 20:17:18.479980   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.479986   839 net.cpp:139] Memory required for data: 15050800
I0428 20:17:18.479991   839 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:17:18.479998   839 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:17:18.480003   839 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:17:18.480010   839 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:17:18.480032   839 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:17:18.480093   839 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:17:18.480103   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.480110   839 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:17:18.480115   839 net.cpp:139] Memory required for data: 15058800
I0428 20:17:18.480120   839 layer_factory.hpp:77] Creating layer accuracy
I0428 20:17:18.480129   839 net.cpp:86] Creating Layer accuracy
I0428 20:17:18.480135   839 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:17:18.480142   839 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:17:18.480149   839 net.cpp:382] accuracy -> accuracy
I0428 20:17:18.480166   839 net.cpp:124] Setting up accuracy
I0428 20:17:18.480173   839 net.cpp:131] Top shape: (1)
I0428 20:17:18.480178   839 net.cpp:139] Memory required for data: 15058804
I0428 20:17:18.480183   839 layer_factory.hpp:77] Creating layer loss
I0428 20:17:18.480190   839 net.cpp:86] Creating Layer loss
I0428 20:17:18.480196   839 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:17:18.480202   839 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:17:18.480214   839 net.cpp:382] loss -> loss
I0428 20:17:18.480224   839 layer_factory.hpp:77] Creating layer loss
I0428 20:17:18.480543   839 net.cpp:124] Setting up loss
I0428 20:17:18.480557   839 net.cpp:131] Top shape: (1)
I0428 20:17:18.480563   839 net.cpp:134]     with loss weight 1
I0428 20:17:18.480573   839 net.cpp:139] Memory required for data: 15058808
I0428 20:17:18.480578   839 net.cpp:200] loss needs backward computation.
I0428 20:17:18.480585   839 net.cpp:202] accuracy does not need backward computation.
I0428 20:17:18.480592   839 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:17:18.480598   839 net.cpp:200] relu2 needs backward computation.
I0428 20:17:18.480603   839 net.cpp:200] ip2 needs backward computation.
I0428 20:17:18.480608   839 net.cpp:200] relu1 needs backward computation.
I0428 20:17:18.480613   839 net.cpp:200] ip1 needs backward computation.
I0428 20:17:18.480619   839 net.cpp:200] pool1 needs backward computation.
I0428 20:17:18.480624   839 net.cpp:200] conv1 needs backward computation.
I0428 20:17:18.480638   839 net.cpp:200] pool0 needs backward computation.
I0428 20:17:18.480643   839 net.cpp:200] conv0 needs backward computation.
I0428 20:17:18.480648   839 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:17:18.480659   839 net.cpp:202] mnist does not need backward computation.
I0428 20:17:18.480664   839 net.cpp:244] This network produces output accuracy
I0428 20:17:18.480670   839 net.cpp:244] This network produces output loss
I0428 20:17:18.480686   839 net.cpp:257] Network initialization done.
I0428 20:17:18.480741   839 solver.cpp:56] Solver scaffolding done.
I0428 20:17:18.481142   839 caffe.cpp:248] Starting Optimization
I0428 20:17:18.481155   839 solver.cpp:273] Solving LeNet
I0428 20:17:18.481160   839 solver.cpp:274] Learning Rate Policy: inv
I0428 20:17:18.481325   839 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:17:18.488170   839 blocking_queue.cpp:49] Waiting for data
I0428 20:17:18.557243   846 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:18.557978   839 solver.cpp:398]     Test net output #0: accuracy = 0.074
I0428 20:17:18.558001   839 solver.cpp:398]     Test net output #1: loss = 2.32283 (* 1 = 2.32283 loss)
I0428 20:17:18.562254   839 solver.cpp:219] Iteration 0 (-4.47097e-31 iter/s, 0.0810619s/100 iters), loss = 2.33348
I0428 20:17:18.562281   839 solver.cpp:238]     Train net output #0: loss = 2.33348 (* 1 = 2.33348 loss)
I0428 20:17:18.562314   839 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:17:18.676800   839 solver.cpp:219] Iteration 100 (873.287 iter/s, 0.11451s/100 iters), loss = 1.09094
I0428 20:17:18.676836   839 solver.cpp:238]     Train net output #0: loss = 1.09094 (* 1 = 1.09094 loss)
I0428 20:17:18.676847   839 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:17:18.790788   839 solver.cpp:219] Iteration 200 (877.628 iter/s, 0.113944s/100 iters), loss = 1.01193
I0428 20:17:18.790818   839 solver.cpp:238]     Train net output #0: loss = 1.01193 (* 1 = 1.01193 loss)
I0428 20:17:18.790828   839 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:17:18.903275   839 solver.cpp:219] Iteration 300 (889.288 iter/s, 0.11245s/100 iters), loss = 0.873596
I0428 20:17:18.903301   839 solver.cpp:238]     Train net output #0: loss = 0.873596 (* 1 = 0.873596 loss)
I0428 20:17:18.903326   839 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:17:19.016850   839 solver.cpp:219] Iteration 400 (880.753 iter/s, 0.113539s/100 iters), loss = 0.883731
I0428 20:17:19.016880   839 solver.cpp:238]     Train net output #0: loss = 0.883731 (* 1 = 0.883731 loss)
I0428 20:17:19.016906   839 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:17:19.130555   839 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:17:19.192095   846 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:19.193624   839 solver.cpp:398]     Test net output #0: accuracy = 0.7435
I0428 20:17:19.193648   839 solver.cpp:398]     Test net output #1: loss = 0.82688 (* 1 = 0.82688 loss)
I0428 20:17:19.194773   839 solver.cpp:219] Iteration 500 (562.167 iter/s, 0.177883s/100 iters), loss = 0.710103
I0428 20:17:19.194802   839 solver.cpp:238]     Train net output #0: loss = 0.710103 (* 1 = 0.710103 loss)
I0428 20:17:19.194813   839 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:17:19.323326   839 solver.cpp:219] Iteration 600 (778.107 iter/s, 0.128517s/100 iters), loss = 0.694401
I0428 20:17:19.323354   839 solver.cpp:238]     Train net output #0: loss = 0.694401 (* 1 = 0.694401 loss)
I0428 20:17:19.323380   839 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:17:19.436254   839 solver.cpp:219] Iteration 700 (885.803 iter/s, 0.112892s/100 iters), loss = 0.623864
I0428 20:17:19.436282   839 solver.cpp:238]     Train net output #0: loss = 0.623864 (* 1 = 0.623864 loss)
I0428 20:17:19.436291   839 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:17:19.554169   839 solver.cpp:219] Iteration 800 (848.359 iter/s, 0.117875s/100 iters), loss = 0.747793
I0428 20:17:19.554211   839 solver.cpp:238]     Train net output #0: loss = 0.747793 (* 1 = 0.747793 loss)
I0428 20:17:19.554231   839 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:17:19.674155   839 solver.cpp:219] Iteration 900 (833.785 iter/s, 0.119935s/100 iters), loss = 0.828543
I0428 20:17:19.674185   839 solver.cpp:238]     Train net output #0: loss = 0.828543 (* 1 = 0.828543 loss)
I0428 20:17:19.674193   839 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:17:19.713276   845 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:19.790417   839 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:17:19.791489   839 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:17:19.792393   839 solver.cpp:311] Iteration 1000, loss = 0.578027
I0428 20:17:19.792426   839 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:17:19.866178   846 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:17:19.868607   839 solver.cpp:398]     Test net output #0: accuracy = 0.8576
I0428 20:17:19.868644   839 solver.cpp:398]     Test net output #1: loss = 0.57007 (* 1 = 0.57007 loss)
I0428 20:17:19.868651   839 solver.cpp:316] Optimization Done.
I0428 20:17:19.868656   839 caffe.cpp:259] Optimization Done.
