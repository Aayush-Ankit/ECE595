I0428 20:29:51.736280  3596 caffe.cpp:218] Using GPUs 0
I0428 20:29:51.771358  3596 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:29:52.221772  3596 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1529.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:29:52.221928  3596 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1529.prototxt
I0428 20:29:52.222244  3596 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:29:52.222262  3596 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:29:52.222339  3596 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:29:52.222420  3596 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:52.222522  3596 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:29:52.222548  3596 net.cpp:86] Creating Layer mnist
I0428 20:29:52.222558  3596 net.cpp:382] mnist -> data
I0428 20:29:52.222582  3596 net.cpp:382] mnist -> label
I0428 20:29:52.223678  3596 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:29:52.225986  3596 net.cpp:124] Setting up mnist
I0428 20:29:52.226016  3596 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:29:52.226024  3596 net.cpp:131] Top shape: 64 (64)
I0428 20:29:52.226044  3596 net.cpp:139] Memory required for data: 200960
I0428 20:29:52.226052  3596 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:52.226073  3596 net.cpp:86] Creating Layer conv0
I0428 20:29:52.226081  3596 net.cpp:408] conv0 <- data
I0428 20:29:52.226097  3596 net.cpp:382] conv0 -> conv0
I0428 20:29:52.453866  3596 net.cpp:124] Setting up conv0
I0428 20:29:52.453892  3596 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:29:52.453898  3596 net.cpp:139] Memory required for data: 14946560
I0428 20:29:52.453939  3596 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:52.453958  3596 net.cpp:86] Creating Layer pool0
I0428 20:29:52.453965  3596 net.cpp:408] pool0 <- conv0
I0428 20:29:52.453974  3596 net.cpp:382] pool0 -> pool0
I0428 20:29:52.454022  3596 net.cpp:124] Setting up pool0
I0428 20:29:52.454030  3596 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:29:52.454035  3596 net.cpp:139] Memory required for data: 18632960
I0428 20:29:52.454040  3596 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:52.454054  3596 net.cpp:86] Creating Layer conv1
I0428 20:29:52.454061  3596 net.cpp:408] conv1 <- pool0
I0428 20:29:52.454067  3596 net.cpp:382] conv1 -> conv1
I0428 20:29:52.456116  3596 net.cpp:124] Setting up conv1
I0428 20:29:52.456130  3596 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 20:29:52.456136  3596 net.cpp:139] Memory required for data: 18796800
I0428 20:29:52.456164  3596 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:52.456189  3596 net.cpp:86] Creating Layer pool1
I0428 20:29:52.456202  3596 net.cpp:408] pool1 <- conv1
I0428 20:29:52.456208  3596 net.cpp:382] pool1 -> pool1
I0428 20:29:52.456265  3596 net.cpp:124] Setting up pool1
I0428 20:29:52.456274  3596 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 20:29:52.456279  3596 net.cpp:139] Memory required for data: 18837760
I0428 20:29:52.456284  3596 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:52.456295  3596 net.cpp:86] Creating Layer ip1
I0428 20:29:52.456303  3596 net.cpp:408] ip1 <- pool1
I0428 20:29:52.456311  3596 net.cpp:382] ip1 -> ip1
I0428 20:29:52.456446  3596 net.cpp:124] Setting up ip1
I0428 20:29:52.456456  3596 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:52.456461  3596 net.cpp:139] Memory required for data: 18844160
I0428 20:29:52.456472  3596 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:52.456481  3596 net.cpp:86] Creating Layer relu1
I0428 20:29:52.456487  3596 net.cpp:408] relu1 <- ip1
I0428 20:29:52.456495  3596 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:52.456671  3596 net.cpp:124] Setting up relu1
I0428 20:29:52.456681  3596 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:29:52.456686  3596 net.cpp:139] Memory required for data: 18850560
I0428 20:29:52.456691  3596 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:52.456701  3596 net.cpp:86] Creating Layer ip2
I0428 20:29:52.456707  3596 net.cpp:408] ip2 <- ip1
I0428 20:29:52.456713  3596 net.cpp:382] ip2 -> ip2
I0428 20:29:52.456809  3596 net.cpp:124] Setting up ip2
I0428 20:29:52.456838  3596 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:52.456857  3596 net.cpp:139] Memory required for data: 18853120
I0428 20:29:52.456867  3596 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:52.456876  3596 net.cpp:86] Creating Layer relu2
I0428 20:29:52.456881  3596 net.cpp:408] relu2 <- ip2
I0428 20:29:52.456888  3596 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:52.457662  3596 net.cpp:124] Setting up relu2
I0428 20:29:52.457676  3596 net.cpp:131] Top shape: 64 10 (640)
I0428 20:29:52.457682  3596 net.cpp:139] Memory required for data: 18855680
I0428 20:29:52.457687  3596 layer_factory.hpp:77] Creating layer loss
I0428 20:29:52.457700  3596 net.cpp:86] Creating Layer loss
I0428 20:29:52.457705  3596 net.cpp:408] loss <- ip2
I0428 20:29:52.457711  3596 net.cpp:408] loss <- label
I0428 20:29:52.457720  3596 net.cpp:382] loss -> loss
I0428 20:29:52.457747  3596 layer_factory.hpp:77] Creating layer loss
I0428 20:29:52.458034  3596 net.cpp:124] Setting up loss
I0428 20:29:52.458043  3596 net.cpp:131] Top shape: (1)
I0428 20:29:52.458048  3596 net.cpp:134]     with loss weight 1
I0428 20:29:52.458066  3596 net.cpp:139] Memory required for data: 18855684
I0428 20:29:52.458072  3596 net.cpp:200] loss needs backward computation.
I0428 20:29:52.458077  3596 net.cpp:200] relu2 needs backward computation.
I0428 20:29:52.458081  3596 net.cpp:200] ip2 needs backward computation.
I0428 20:29:52.458088  3596 net.cpp:200] relu1 needs backward computation.
I0428 20:29:52.458092  3596 net.cpp:200] ip1 needs backward computation.
I0428 20:29:52.458107  3596 net.cpp:200] pool1 needs backward computation.
I0428 20:29:52.458112  3596 net.cpp:200] conv1 needs backward computation.
I0428 20:29:52.458117  3596 net.cpp:200] pool0 needs backward computation.
I0428 20:29:52.458122  3596 net.cpp:200] conv0 needs backward computation.
I0428 20:29:52.458127  3596 net.cpp:202] mnist does not need backward computation.
I0428 20:29:52.458132  3596 net.cpp:244] This network produces output loss
I0428 20:29:52.458143  3596 net.cpp:257] Network initialization done.
I0428 20:29:52.458438  3596 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1529.prototxt
I0428 20:29:52.458470  3596 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:29:52.458560  3596 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:29:52.458673  3596 layer_factory.hpp:77] Creating layer mnist
I0428 20:29:52.458745  3596 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:29:52.458762  3596 net.cpp:86] Creating Layer mnist
I0428 20:29:52.458770  3596 net.cpp:382] mnist -> data
I0428 20:29:52.458781  3596 net.cpp:382] mnist -> label
I0428 20:29:52.458941  3596 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:29:52.461437  3596 net.cpp:124] Setting up mnist
I0428 20:29:52.461468  3596 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:29:52.461478  3596 net.cpp:131] Top shape: 100 (100)
I0428 20:29:52.461483  3596 net.cpp:139] Memory required for data: 314000
I0428 20:29:52.461489  3596 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:29:52.461499  3596 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:29:52.461504  3596 net.cpp:408] label_mnist_1_split <- label
I0428 20:29:52.461513  3596 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:29:52.461524  3596 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:29:52.461624  3596 net.cpp:124] Setting up label_mnist_1_split
I0428 20:29:52.461648  3596 net.cpp:131] Top shape: 100 (100)
I0428 20:29:52.461654  3596 net.cpp:131] Top shape: 100 (100)
I0428 20:29:52.461659  3596 net.cpp:139] Memory required for data: 314800
I0428 20:29:52.461664  3596 layer_factory.hpp:77] Creating layer conv0
I0428 20:29:52.461678  3596 net.cpp:86] Creating Layer conv0
I0428 20:29:52.461685  3596 net.cpp:408] conv0 <- data
I0428 20:29:52.461695  3596 net.cpp:382] conv0 -> conv0
I0428 20:29:52.463302  3596 net.cpp:124] Setting up conv0
I0428 20:29:52.463317  3596 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:29:52.463323  3596 net.cpp:139] Memory required for data: 23354800
I0428 20:29:52.463336  3596 layer_factory.hpp:77] Creating layer pool0
I0428 20:29:52.463348  3596 net.cpp:86] Creating Layer pool0
I0428 20:29:52.463356  3596 net.cpp:408] pool0 <- conv0
I0428 20:29:52.463362  3596 net.cpp:382] pool0 -> pool0
I0428 20:29:52.463404  3596 net.cpp:124] Setting up pool0
I0428 20:29:52.463413  3596 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:29:52.463418  3596 net.cpp:139] Memory required for data: 29114800
I0428 20:29:52.463421  3596 layer_factory.hpp:77] Creating layer conv1
I0428 20:29:52.463438  3596 net.cpp:86] Creating Layer conv1
I0428 20:29:52.463457  3596 net.cpp:408] conv1 <- pool0
I0428 20:29:52.463467  3596 net.cpp:382] conv1 -> conv1
I0428 20:29:52.465296  3596 net.cpp:124] Setting up conv1
I0428 20:29:52.465309  3596 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 20:29:52.465314  3596 net.cpp:139] Memory required for data: 29370800
I0428 20:29:52.465344  3596 layer_factory.hpp:77] Creating layer pool1
I0428 20:29:52.465354  3596 net.cpp:86] Creating Layer pool1
I0428 20:29:52.465360  3596 net.cpp:408] pool1 <- conv1
I0428 20:29:52.465370  3596 net.cpp:382] pool1 -> pool1
I0428 20:29:52.465420  3596 net.cpp:124] Setting up pool1
I0428 20:29:52.465427  3596 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 20:29:52.465433  3596 net.cpp:139] Memory required for data: 29434800
I0428 20:29:52.465438  3596 layer_factory.hpp:77] Creating layer ip1
I0428 20:29:52.465450  3596 net.cpp:86] Creating Layer ip1
I0428 20:29:52.465456  3596 net.cpp:408] ip1 <- pool1
I0428 20:29:52.465468  3596 net.cpp:382] ip1 -> ip1
I0428 20:29:52.465632  3596 net.cpp:124] Setting up ip1
I0428 20:29:52.465641  3596 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:52.465646  3596 net.cpp:139] Memory required for data: 29444800
I0428 20:29:52.465658  3596 layer_factory.hpp:77] Creating layer relu1
I0428 20:29:52.465667  3596 net.cpp:86] Creating Layer relu1
I0428 20:29:52.465672  3596 net.cpp:408] relu1 <- ip1
I0428 20:29:52.465680  3596 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:29:52.465857  3596 net.cpp:124] Setting up relu1
I0428 20:29:52.465867  3596 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:29:52.465873  3596 net.cpp:139] Memory required for data: 29454800
I0428 20:29:52.465878  3596 layer_factory.hpp:77] Creating layer ip2
I0428 20:29:52.465888  3596 net.cpp:86] Creating Layer ip2
I0428 20:29:52.465894  3596 net.cpp:408] ip2 <- ip1
I0428 20:29:52.465904  3596 net.cpp:382] ip2 -> ip2
I0428 20:29:52.466007  3596 net.cpp:124] Setting up ip2
I0428 20:29:52.466015  3596 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:52.466020  3596 net.cpp:139] Memory required for data: 29458800
I0428 20:29:52.466029  3596 layer_factory.hpp:77] Creating layer relu2
I0428 20:29:52.466037  3596 net.cpp:86] Creating Layer relu2
I0428 20:29:52.466042  3596 net.cpp:408] relu2 <- ip2
I0428 20:29:52.466050  3596 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:29:52.466262  3596 net.cpp:124] Setting up relu2
I0428 20:29:52.466272  3596 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:52.466276  3596 net.cpp:139] Memory required for data: 29462800
I0428 20:29:52.466281  3596 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:29:52.466289  3596 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:29:52.466295  3596 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:29:52.466302  3596 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:29:52.466321  3596 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:29:52.466379  3596 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:29:52.466387  3596 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:52.466409  3596 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:29:52.466428  3596 net.cpp:139] Memory required for data: 29470800
I0428 20:29:52.466435  3596 layer_factory.hpp:77] Creating layer accuracy
I0428 20:29:52.466449  3596 net.cpp:86] Creating Layer accuracy
I0428 20:29:52.466456  3596 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:29:52.466464  3596 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:29:52.466471  3596 net.cpp:382] accuracy -> accuracy
I0428 20:29:52.466483  3596 net.cpp:124] Setting up accuracy
I0428 20:29:52.466491  3596 net.cpp:131] Top shape: (1)
I0428 20:29:52.466497  3596 net.cpp:139] Memory required for data: 29470804
I0428 20:29:52.466503  3596 layer_factory.hpp:77] Creating layer loss
I0428 20:29:52.466512  3596 net.cpp:86] Creating Layer loss
I0428 20:29:52.466519  3596 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:29:52.466526  3596 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:29:52.466533  3596 net.cpp:382] loss -> loss
I0428 20:29:52.466543  3596 layer_factory.hpp:77] Creating layer loss
I0428 20:29:52.466831  3596 net.cpp:124] Setting up loss
I0428 20:29:52.466841  3596 net.cpp:131] Top shape: (1)
I0428 20:29:52.466846  3596 net.cpp:134]     with loss weight 1
I0428 20:29:52.466856  3596 net.cpp:139] Memory required for data: 29470808
I0428 20:29:52.466861  3596 net.cpp:200] loss needs backward computation.
I0428 20:29:52.466866  3596 net.cpp:202] accuracy does not need backward computation.
I0428 20:29:52.466872  3596 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:29:52.466876  3596 net.cpp:200] relu2 needs backward computation.
I0428 20:29:52.466881  3596 net.cpp:200] ip2 needs backward computation.
I0428 20:29:52.466887  3596 net.cpp:200] relu1 needs backward computation.
I0428 20:29:52.466892  3596 net.cpp:200] ip1 needs backward computation.
I0428 20:29:52.466897  3596 net.cpp:200] pool1 needs backward computation.
I0428 20:29:52.466903  3596 net.cpp:200] conv1 needs backward computation.
I0428 20:29:52.466908  3596 net.cpp:200] pool0 needs backward computation.
I0428 20:29:52.466913  3596 net.cpp:200] conv0 needs backward computation.
I0428 20:29:52.466919  3596 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:29:52.466925  3596 net.cpp:202] mnist does not need backward computation.
I0428 20:29:52.466929  3596 net.cpp:244] This network produces output accuracy
I0428 20:29:52.466944  3596 net.cpp:244] This network produces output loss
I0428 20:29:52.466960  3596 net.cpp:257] Network initialization done.
I0428 20:29:52.467001  3596 solver.cpp:56] Solver scaffolding done.
I0428 20:29:52.467291  3596 caffe.cpp:248] Starting Optimization
I0428 20:29:52.467298  3596 solver.cpp:273] Solving LeNet
I0428 20:29:52.467303  3596 solver.cpp:274] Learning Rate Policy: inv
I0428 20:29:52.467525  3596 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:29:52.561266  3604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:52.563664  3596 solver.cpp:398]     Test net output #0: accuracy = 0.0967
I0428 20:29:52.563686  3596 solver.cpp:398]     Test net output #1: loss = 2.37007 (* 1 = 2.37007 loss)
I0428 20:29:52.568003  3596 solver.cpp:219] Iteration 0 (-8.07148e-43 iter/s, 0.100666s/100 iters), loss = 2.34839
I0428 20:29:52.568029  3596 solver.cpp:238]     Train net output #0: loss = 2.34839 (* 1 = 2.34839 loss)
I0428 20:29:52.568076  3596 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:29:52.765691  3596 solver.cpp:219] Iteration 100 (505.962 iter/s, 0.197643s/100 iters), loss = 0.523454
I0428 20:29:52.765733  3596 solver.cpp:238]     Train net output #0: loss = 0.523454 (* 1 = 0.523454 loss)
I0428 20:29:52.765746  3596 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:29:52.966053  3596 solver.cpp:219] Iteration 200 (499.222 iter/s, 0.200312s/100 iters), loss = 0.268406
I0428 20:29:52.966104  3596 solver.cpp:238]     Train net output #0: loss = 0.268406 (* 1 = 0.268406 loss)
I0428 20:29:52.966116  3596 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:29:53.165799  3596 solver.cpp:219] Iteration 300 (500.786 iter/s, 0.199686s/100 iters), loss = 0.207617
I0428 20:29:53.165833  3596 solver.cpp:238]     Train net output #0: loss = 0.207617 (* 1 = 0.207617 loss)
I0428 20:29:53.165844  3596 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:29:53.365674  3596 solver.cpp:219] Iteration 400 (500.427 iter/s, 0.199829s/100 iters), loss = 0.140528
I0428 20:29:53.365705  3596 solver.cpp:238]     Train net output #0: loss = 0.140528 (* 1 = 0.140528 loss)
I0428 20:29:53.365717  3596 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:29:53.563314  3596 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:29:53.659899  3604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:53.662395  3596 solver.cpp:398]     Test net output #0: accuracy = 0.9625
I0428 20:29:53.662423  3596 solver.cpp:398]     Test net output #1: loss = 0.120172 (* 1 = 0.120172 loss)
I0428 20:29:53.664350  3596 solver.cpp:219] Iteration 500 (334.867 iter/s, 0.298626s/100 iters), loss = 0.10024
I0428 20:29:53.664381  3596 solver.cpp:238]     Train net output #0: loss = 0.10024 (* 1 = 0.10024 loss)
I0428 20:29:53.664394  3596 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:29:53.870232  3596 solver.cpp:219] Iteration 600 (485.816 iter/s, 0.205839s/100 iters), loss = 0.154697
I0428 20:29:53.870263  3596 solver.cpp:238]     Train net output #0: loss = 0.154697 (* 1 = 0.154697 loss)
I0428 20:29:53.870271  3596 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:29:54.068581  3596 solver.cpp:219] Iteration 700 (504.28 iter/s, 0.198303s/100 iters), loss = 0.172466
I0428 20:29:54.068615  3596 solver.cpp:238]     Train net output #0: loss = 0.172466 (* 1 = 0.172466 loss)
I0428 20:29:54.068624  3596 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:29:54.265151  3596 solver.cpp:219] Iteration 800 (508.852 iter/s, 0.196521s/100 iters), loss = 0.206003
I0428 20:29:54.265182  3596 solver.cpp:238]     Train net output #0: loss = 0.206003 (* 1 = 0.206003 loss)
I0428 20:29:54.265188  3596 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:29:54.460227  3596 solver.cpp:219] Iteration 900 (512.742 iter/s, 0.19503s/100 iters), loss = 0.130157
I0428 20:29:54.460254  3596 solver.cpp:238]     Train net output #0: loss = 0.130157 (* 1 = 0.130157 loss)
I0428 20:29:54.460261  3596 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:29:54.524657  3603 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:54.658002  3596 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:29:54.660346  3596 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:29:54.661837  3596 solver.cpp:311] Iteration 1000, loss = 0.176552
I0428 20:29:54.661869  3596 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:29:54.671983  3596 blocking_queue.cpp:49] Waiting for data
I0428 20:29:54.777401  3604 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:29:54.778956  3596 solver.cpp:398]     Test net output #0: accuracy = 0.9732
I0428 20:29:54.778985  3596 solver.cpp:398]     Test net output #1: loss = 0.0807242 (* 1 = 0.0807242 loss)
I0428 20:29:54.778992  3596 solver.cpp:316] Optimization Done.
I0428 20:29:54.778997  3596 caffe.cpp:259] Optimization Done.
