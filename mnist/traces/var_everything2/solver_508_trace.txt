I0428 19:47:12.634765 26135 caffe.cpp:218] Using GPUs 0
I0428 19:47:12.672978 26135 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:47:13.190269 26135 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test508.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:47:13.190415 26135 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test508.prototxt
I0428 19:47:13.190759 26135 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:47:13.190773 26135 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:47:13.190855 26135 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:13.190924 26135 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:13.191028 26135 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:47:13.191053 26135 net.cpp:86] Creating Layer mnist
I0428 19:47:13.191063 26135 net.cpp:382] mnist -> data
I0428 19:47:13.191088 26135 net.cpp:382] mnist -> label
I0428 19:47:13.192179 26135 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:47:13.194645 26135 net.cpp:124] Setting up mnist
I0428 19:47:13.194664 26135 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:47:13.194671 26135 net.cpp:131] Top shape: 64 (64)
I0428 19:47:13.194674 26135 net.cpp:139] Memory required for data: 200960
I0428 19:47:13.194681 26135 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:13.194716 26135 net.cpp:86] Creating Layer conv0
I0428 19:47:13.194725 26135 net.cpp:408] conv0 <- data
I0428 19:47:13.194736 26135 net.cpp:382] conv0 -> conv0
I0428 19:47:13.485590 26135 net.cpp:124] Setting up conv0
I0428 19:47:13.485620 26135 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:47:13.485625 26135 net.cpp:139] Memory required for data: 938240
I0428 19:47:13.485642 26135 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:13.485656 26135 net.cpp:86] Creating Layer pool0
I0428 19:47:13.485661 26135 net.cpp:408] pool0 <- conv0
I0428 19:47:13.485667 26135 net.cpp:382] pool0 -> pool0
I0428 19:47:13.485720 26135 net.cpp:124] Setting up pool0
I0428 19:47:13.485726 26135 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:47:13.485746 26135 net.cpp:139] Memory required for data: 1122560
I0428 19:47:13.485750 26135 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:13.485762 26135 net.cpp:86] Creating Layer conv1
I0428 19:47:13.485766 26135 net.cpp:408] conv1 <- pool0
I0428 19:47:13.485772 26135 net.cpp:382] conv1 -> conv1
I0428 19:47:13.487828 26135 net.cpp:124] Setting up conv1
I0428 19:47:13.487844 26135 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:47:13.487849 26135 net.cpp:139] Memory required for data: 1155328
I0428 19:47:13.487859 26135 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:13.487867 26135 net.cpp:86] Creating Layer pool1
I0428 19:47:13.487871 26135 net.cpp:408] pool1 <- conv1
I0428 19:47:13.487877 26135 net.cpp:382] pool1 -> pool1
I0428 19:47:13.487920 26135 net.cpp:124] Setting up pool1
I0428 19:47:13.487926 26135 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:47:13.487928 26135 net.cpp:139] Memory required for data: 1163520
I0428 19:47:13.487932 26135 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:13.487939 26135 net.cpp:86] Creating Layer ip1
I0428 19:47:13.487943 26135 net.cpp:408] ip1 <- pool1
I0428 19:47:13.487948 26135 net.cpp:382] ip1 -> ip1
I0428 19:47:13.488057 26135 net.cpp:124] Setting up ip1
I0428 19:47:13.488065 26135 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:13.488070 26135 net.cpp:139] Memory required for data: 1166080
I0428 19:47:13.488078 26135 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:13.488085 26135 net.cpp:86] Creating Layer relu1
I0428 19:47:13.488088 26135 net.cpp:408] relu1 <- ip1
I0428 19:47:13.488092 26135 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:13.488277 26135 net.cpp:124] Setting up relu1
I0428 19:47:13.488287 26135 net.cpp:131] Top shape: 64 10 (640)
I0428 19:47:13.488291 26135 net.cpp:139] Memory required for data: 1168640
I0428 19:47:13.488294 26135 layer_factory.hpp:77] Creating layer loss
I0428 19:47:13.488301 26135 net.cpp:86] Creating Layer loss
I0428 19:47:13.488304 26135 net.cpp:408] loss <- ip1
I0428 19:47:13.488309 26135 net.cpp:408] loss <- label
I0428 19:47:13.488314 26135 net.cpp:382] loss -> loss
I0428 19:47:13.488333 26135 layer_factory.hpp:77] Creating layer loss
I0428 19:47:13.489236 26135 net.cpp:124] Setting up loss
I0428 19:47:13.489251 26135 net.cpp:131] Top shape: (1)
I0428 19:47:13.489255 26135 net.cpp:134]     with loss weight 1
I0428 19:47:13.489270 26135 net.cpp:139] Memory required for data: 1168644
I0428 19:47:13.489274 26135 net.cpp:200] loss needs backward computation.
I0428 19:47:13.489279 26135 net.cpp:200] relu1 needs backward computation.
I0428 19:47:13.489282 26135 net.cpp:200] ip1 needs backward computation.
I0428 19:47:13.489285 26135 net.cpp:200] pool1 needs backward computation.
I0428 19:47:13.489289 26135 net.cpp:200] conv1 needs backward computation.
I0428 19:47:13.489292 26135 net.cpp:200] pool0 needs backward computation.
I0428 19:47:13.489295 26135 net.cpp:200] conv0 needs backward computation.
I0428 19:47:13.489300 26135 net.cpp:202] mnist does not need backward computation.
I0428 19:47:13.489302 26135 net.cpp:244] This network produces output loss
I0428 19:47:13.489311 26135 net.cpp:257] Network initialization done.
I0428 19:47:13.489599 26135 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test508.prototxt
I0428 19:47:13.489626 26135 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:47:13.489711 26135 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:47:13.489790 26135 layer_factory.hpp:77] Creating layer mnist
I0428 19:47:13.489840 26135 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:47:13.489853 26135 net.cpp:86] Creating Layer mnist
I0428 19:47:13.489859 26135 net.cpp:382] mnist -> data
I0428 19:47:13.489867 26135 net.cpp:382] mnist -> label
I0428 19:47:13.489964 26135 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:47:13.492269 26135 net.cpp:124] Setting up mnist
I0428 19:47:13.492285 26135 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:47:13.492290 26135 net.cpp:131] Top shape: 100 (100)
I0428 19:47:13.492295 26135 net.cpp:139] Memory required for data: 314000
I0428 19:47:13.492300 26135 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:47:13.492316 26135 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:47:13.492321 26135 net.cpp:408] label_mnist_1_split <- label
I0428 19:47:13.492326 26135 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:47:13.492333 26135 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:47:13.492388 26135 net.cpp:124] Setting up label_mnist_1_split
I0428 19:47:13.492393 26135 net.cpp:131] Top shape: 100 (100)
I0428 19:47:13.492398 26135 net.cpp:131] Top shape: 100 (100)
I0428 19:47:13.492401 26135 net.cpp:139] Memory required for data: 314800
I0428 19:47:13.492404 26135 layer_factory.hpp:77] Creating layer conv0
I0428 19:47:13.492413 26135 net.cpp:86] Creating Layer conv0
I0428 19:47:13.492418 26135 net.cpp:408] conv0 <- data
I0428 19:47:13.492425 26135 net.cpp:382] conv0 -> conv0
I0428 19:47:13.493485 26135 net.cpp:124] Setting up conv0
I0428 19:47:13.493499 26135 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:47:13.493504 26135 net.cpp:139] Memory required for data: 1466800
I0428 19:47:13.493515 26135 layer_factory.hpp:77] Creating layer pool0
I0428 19:47:13.493522 26135 net.cpp:86] Creating Layer pool0
I0428 19:47:13.493526 26135 net.cpp:408] pool0 <- conv0
I0428 19:47:13.493532 26135 net.cpp:382] pool0 -> pool0
I0428 19:47:13.493574 26135 net.cpp:124] Setting up pool0
I0428 19:47:13.493580 26135 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:47:13.493583 26135 net.cpp:139] Memory required for data: 1754800
I0428 19:47:13.493587 26135 layer_factory.hpp:77] Creating layer conv1
I0428 19:47:13.493597 26135 net.cpp:86] Creating Layer conv1
I0428 19:47:13.493600 26135 net.cpp:408] conv1 <- pool0
I0428 19:47:13.493608 26135 net.cpp:382] conv1 -> conv1
I0428 19:47:13.495906 26135 net.cpp:124] Setting up conv1
I0428 19:47:13.495920 26135 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:47:13.495924 26135 net.cpp:139] Memory required for data: 1806000
I0428 19:47:13.495936 26135 layer_factory.hpp:77] Creating layer pool1
I0428 19:47:13.495944 26135 net.cpp:86] Creating Layer pool1
I0428 19:47:13.495961 26135 net.cpp:408] pool1 <- conv1
I0428 19:47:13.495970 26135 net.cpp:382] pool1 -> pool1
I0428 19:47:13.496059 26135 net.cpp:124] Setting up pool1
I0428 19:47:13.496068 26135 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:47:13.496073 26135 net.cpp:139] Memory required for data: 1818800
I0428 19:47:13.496075 26135 layer_factory.hpp:77] Creating layer ip1
I0428 19:47:13.496083 26135 net.cpp:86] Creating Layer ip1
I0428 19:47:13.496088 26135 net.cpp:408] ip1 <- pool1
I0428 19:47:13.496093 26135 net.cpp:382] ip1 -> ip1
I0428 19:47:13.496215 26135 net.cpp:124] Setting up ip1
I0428 19:47:13.496223 26135 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:13.496227 26135 net.cpp:139] Memory required for data: 1822800
I0428 19:47:13.496237 26135 layer_factory.hpp:77] Creating layer relu1
I0428 19:47:13.496243 26135 net.cpp:86] Creating Layer relu1
I0428 19:47:13.496248 26135 net.cpp:408] relu1 <- ip1
I0428 19:47:13.496253 26135 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:47:13.497153 26135 net.cpp:124] Setting up relu1
I0428 19:47:13.497166 26135 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:13.497170 26135 net.cpp:139] Memory required for data: 1826800
I0428 19:47:13.497174 26135 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:47:13.497181 26135 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:47:13.497184 26135 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:47:13.497190 26135 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:47:13.497198 26135 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:47:13.497254 26135 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:47:13.497262 26135 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:13.497267 26135 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:47:13.497269 26135 net.cpp:139] Memory required for data: 1834800
I0428 19:47:13.497273 26135 layer_factory.hpp:77] Creating layer accuracy
I0428 19:47:13.497280 26135 net.cpp:86] Creating Layer accuracy
I0428 19:47:13.497285 26135 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:47:13.497289 26135 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:47:13.497300 26135 net.cpp:382] accuracy -> accuracy
I0428 19:47:13.497323 26135 net.cpp:124] Setting up accuracy
I0428 19:47:13.497328 26135 net.cpp:131] Top shape: (1)
I0428 19:47:13.497330 26135 net.cpp:139] Memory required for data: 1834804
I0428 19:47:13.497334 26135 layer_factory.hpp:77] Creating layer loss
I0428 19:47:13.497340 26135 net.cpp:86] Creating Layer loss
I0428 19:47:13.497344 26135 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:47:13.497347 26135 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:47:13.497352 26135 net.cpp:382] loss -> loss
I0428 19:47:13.497359 26135 layer_factory.hpp:77] Creating layer loss
I0428 19:47:13.497625 26135 net.cpp:124] Setting up loss
I0428 19:47:13.497635 26135 net.cpp:131] Top shape: (1)
I0428 19:47:13.497638 26135 net.cpp:134]     with loss weight 1
I0428 19:47:13.497647 26135 net.cpp:139] Memory required for data: 1834808
I0428 19:47:13.497650 26135 net.cpp:200] loss needs backward computation.
I0428 19:47:13.497653 26135 net.cpp:202] accuracy does not need backward computation.
I0428 19:47:13.497658 26135 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:47:13.497661 26135 net.cpp:200] relu1 needs backward computation.
I0428 19:47:13.497664 26135 net.cpp:200] ip1 needs backward computation.
I0428 19:47:13.497668 26135 net.cpp:200] pool1 needs backward computation.
I0428 19:47:13.497670 26135 net.cpp:200] conv1 needs backward computation.
I0428 19:47:13.497673 26135 net.cpp:200] pool0 needs backward computation.
I0428 19:47:13.497676 26135 net.cpp:200] conv0 needs backward computation.
I0428 19:47:13.497680 26135 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:47:13.497691 26135 net.cpp:202] mnist does not need backward computation.
I0428 19:47:13.497695 26135 net.cpp:244] This network produces output accuracy
I0428 19:47:13.497699 26135 net.cpp:244] This network produces output loss
I0428 19:47:13.497710 26135 net.cpp:257] Network initialization done.
I0428 19:47:13.497757 26135 solver.cpp:56] Solver scaffolding done.
I0428 19:47:13.497985 26135 caffe.cpp:248] Starting Optimization
I0428 19:47:13.497993 26135 solver.cpp:273] Solving LeNet
I0428 19:47:13.497997 26135 solver.cpp:274] Learning Rate Policy: inv
I0428 19:47:13.498819 26135 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:47:13.501956 26135 blocking_queue.cpp:49] Waiting for data
I0428 19:47:13.575690 26142 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:13.576112 26135 solver.cpp:398]     Test net output #0: accuracy = 0.1069
I0428 19:47:13.576130 26135 solver.cpp:398]     Test net output #1: loss = 2.37163 (* 1 = 2.37163 loss)
I0428 19:47:13.577839 26135 solver.cpp:219] Iteration 0 (-1.01874e-42 iter/s, 0.0798157s/100 iters), loss = 2.33809
I0428 19:47:13.577883 26135 solver.cpp:238]     Train net output #0: loss = 2.33809 (* 1 = 2.33809 loss)
I0428 19:47:13.577896 26135 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:47:13.647567 26135 solver.cpp:219] Iteration 100 (1435.28 iter/s, 0.069673s/100 iters), loss = 0.636835
I0428 19:47:13.647594 26135 solver.cpp:238]     Train net output #0: loss = 0.636835 (* 1 = 0.636835 loss)
I0428 19:47:13.647600 26135 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:47:13.710364 26135 solver.cpp:219] Iteration 200 (1593.4 iter/s, 0.0627589s/100 iters), loss = 0.504838
I0428 19:47:13.710388 26135 solver.cpp:238]     Train net output #0: loss = 0.504838 (* 1 = 0.504838 loss)
I0428 19:47:13.710394 26135 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:47:13.766607 26135 solver.cpp:219] Iteration 300 (1779 iter/s, 0.0562115s/100 iters), loss = 0.420927
I0428 19:47:13.766630 26135 solver.cpp:238]     Train net output #0: loss = 0.420927 (* 1 = 0.420927 loss)
I0428 19:47:13.766636 26135 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:47:13.824138 26135 solver.cpp:219] Iteration 400 (1739.11 iter/s, 0.0575007s/100 iters), loss = 0.244791
I0428 19:47:13.824177 26135 solver.cpp:238]     Train net output #0: loss = 0.244791 (* 1 = 0.244791 loss)
I0428 19:47:13.824182 26135 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:47:13.878530 26135 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:47:13.954260 26142 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:13.954723 26135 solver.cpp:398]     Test net output #0: accuracy = 0.9129
I0428 19:47:13.954743 26135 solver.cpp:398]     Test net output #1: loss = 0.303503 (* 1 = 0.303503 loss)
I0428 19:47:13.955415 26135 solver.cpp:219] Iteration 500 (762.04 iter/s, 0.131227s/100 iters), loss = 0.426839
I0428 19:47:13.955438 26135 solver.cpp:238]     Train net output #0: loss = 0.426839 (* 1 = 0.426839 loss)
I0428 19:47:13.955451 26135 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:47:14.011690 26135 solver.cpp:219] Iteration 600 (1777.95 iter/s, 0.0562444s/100 iters), loss = 0.211096
I0428 19:47:14.011735 26135 solver.cpp:238]     Train net output #0: loss = 0.211096 (* 1 = 0.211096 loss)
I0428 19:47:14.011744 26135 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:47:14.067533 26135 solver.cpp:219] Iteration 700 (1792.41 iter/s, 0.0557909s/100 iters), loss = 0.467582
I0428 19:47:14.067589 26135 solver.cpp:238]     Train net output #0: loss = 0.467582 (* 1 = 0.467582 loss)
I0428 19:47:14.067597 26135 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:47:14.125161 26135 solver.cpp:219] Iteration 800 (1737.08 iter/s, 0.0575677s/100 iters), loss = 0.549536
I0428 19:47:14.125198 26135 solver.cpp:238]     Train net output #0: loss = 0.549536 (* 1 = 0.549536 loss)
I0428 19:47:14.125205 26135 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:47:14.180786 26135 solver.cpp:219] Iteration 900 (1798.72 iter/s, 0.055595s/100 iters), loss = 0.297834
I0428 19:47:14.180830 26135 solver.cpp:238]     Train net output #0: loss = 0.297834 (* 1 = 0.297834 loss)
I0428 19:47:14.180853 26135 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:47:14.199246 26141 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:14.237280 26135 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:47:14.237783 26135 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:47:14.238145 26135 solver.cpp:311] Iteration 1000, loss = 0.205924
I0428 19:47:14.238175 26135 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:47:14.311530 26142 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:47:14.312110 26135 solver.cpp:398]     Test net output #0: accuracy = 0.933
I0428 19:47:14.312137 26135 solver.cpp:398]     Test net output #1: loss = 0.222253 (* 1 = 0.222253 loss)
I0428 19:47:14.312151 26135 solver.cpp:316] Optimization Done.
I0428 19:47:14.312156 26135 caffe.cpp:259] Optimization Done.
