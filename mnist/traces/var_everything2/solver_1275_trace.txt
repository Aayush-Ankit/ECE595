I0428 20:16:37.394160   696 caffe.cpp:218] Using GPUs 0
I0428 20:16:37.432948   696 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:16:37.942229   696 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1275.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:16:37.942399   696 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1275.prototxt
I0428 20:16:37.942809   696 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:16:37.942832   696 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:16:37.942937   696 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:37.943042   696 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:37.943176   696 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:16:37.943210   696 net.cpp:86] Creating Layer mnist
I0428 20:16:37.943222   696 net.cpp:382] mnist -> data
I0428 20:16:37.943253   696 net.cpp:382] mnist -> label
I0428 20:16:37.944520   696 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:16:37.947011   696 net.cpp:124] Setting up mnist
I0428 20:16:37.947032   696 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:16:37.947043   696 net.cpp:131] Top shape: 64 (64)
I0428 20:16:37.947049   696 net.cpp:139] Memory required for data: 200960
I0428 20:16:37.947060   696 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:37.947084   696 net.cpp:86] Creating Layer conv0
I0428 20:16:37.947108   696 net.cpp:408] conv0 <- data
I0428 20:16:37.947126   696 net.cpp:382] conv0 -> conv0
I0428 20:16:38.215659   696 net.cpp:124] Setting up conv0
I0428 20:16:38.215687   696 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:16:38.215693   696 net.cpp:139] Memory required for data: 7573760
I0428 20:16:38.215713   696 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:38.215729   696 net.cpp:86] Creating Layer pool0
I0428 20:16:38.215741   696 net.cpp:408] pool0 <- conv0
I0428 20:16:38.215750   696 net.cpp:382] pool0 -> pool0
I0428 20:16:38.215803   696 net.cpp:124] Setting up pool0
I0428 20:16:38.215811   696 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:16:38.215816   696 net.cpp:139] Memory required for data: 9416960
I0428 20:16:38.215821   696 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:38.215836   696 net.cpp:86] Creating Layer conv1
I0428 20:16:38.215842   696 net.cpp:408] conv1 <- pool0
I0428 20:16:38.215850   696 net.cpp:382] conv1 -> conv1
I0428 20:16:38.218644   696 net.cpp:124] Setting up conv1
I0428 20:16:38.218662   696 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:16:38.218667   696 net.cpp:139] Memory required for data: 9498880
I0428 20:16:38.218680   696 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:38.218691   696 net.cpp:86] Creating Layer pool1
I0428 20:16:38.218698   696 net.cpp:408] pool1 <- conv1
I0428 20:16:38.218706   696 net.cpp:382] pool1 -> pool1
I0428 20:16:38.218760   696 net.cpp:124] Setting up pool1
I0428 20:16:38.218770   696 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:16:38.218775   696 net.cpp:139] Memory required for data: 9519360
I0428 20:16:38.218780   696 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:38.218789   696 net.cpp:86] Creating Layer ip1
I0428 20:16:38.218794   696 net.cpp:408] ip1 <- pool1
I0428 20:16:38.218801   696 net.cpp:382] ip1 -> ip1
I0428 20:16:38.218914   696 net.cpp:124] Setting up ip1
I0428 20:16:38.218922   696 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:38.218926   696 net.cpp:139] Memory required for data: 9525760
I0428 20:16:38.218938   696 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:38.218950   696 net.cpp:86] Creating Layer relu1
I0428 20:16:38.218958   696 net.cpp:408] relu1 <- ip1
I0428 20:16:38.218966   696 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:38.219120   696 net.cpp:124] Setting up relu1
I0428 20:16:38.219130   696 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:16:38.219135   696 net.cpp:139] Memory required for data: 9532160
I0428 20:16:38.219138   696 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:38.219148   696 net.cpp:86] Creating Layer ip2
I0428 20:16:38.219153   696 net.cpp:408] ip2 <- ip1
I0428 20:16:38.219161   696 net.cpp:382] ip2 -> ip2
I0428 20:16:38.219269   696 net.cpp:124] Setting up ip2
I0428 20:16:38.219277   696 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:38.219282   696 net.cpp:139] Memory required for data: 9544960
I0428 20:16:38.219291   696 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:38.219300   696 net.cpp:86] Creating Layer relu2
I0428 20:16:38.219305   696 net.cpp:408] relu2 <- ip2
I0428 20:16:38.219312   696 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:38.220062   696 net.cpp:124] Setting up relu2
I0428 20:16:38.220077   696 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:16:38.220082   696 net.cpp:139] Memory required for data: 9557760
I0428 20:16:38.220087   696 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:38.220096   696 net.cpp:86] Creating Layer ip3
I0428 20:16:38.220103   696 net.cpp:408] ip3 <- ip2
I0428 20:16:38.220110   696 net.cpp:382] ip3 -> ip3
I0428 20:16:38.220211   696 net.cpp:124] Setting up ip3
I0428 20:16:38.220221   696 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:38.220224   696 net.cpp:139] Memory required for data: 9560320
I0428 20:16:38.220237   696 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:38.220244   696 net.cpp:86] Creating Layer relu3
I0428 20:16:38.220250   696 net.cpp:408] relu3 <- ip3
I0428 20:16:38.220257   696 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:38.220414   696 net.cpp:124] Setting up relu3
I0428 20:16:38.220424   696 net.cpp:131] Top shape: 64 10 (640)
I0428 20:16:38.220429   696 net.cpp:139] Memory required for data: 9562880
I0428 20:16:38.220434   696 layer_factory.hpp:77] Creating layer loss
I0428 20:16:38.220443   696 net.cpp:86] Creating Layer loss
I0428 20:16:38.220448   696 net.cpp:408] loss <- ip3
I0428 20:16:38.220454   696 net.cpp:408] loss <- label
I0428 20:16:38.220463   696 net.cpp:382] loss -> loss
I0428 20:16:38.220484   696 layer_factory.hpp:77] Creating layer loss
I0428 20:16:38.220754   696 net.cpp:124] Setting up loss
I0428 20:16:38.220764   696 net.cpp:131] Top shape: (1)
I0428 20:16:38.220769   696 net.cpp:134]     with loss weight 1
I0428 20:16:38.220788   696 net.cpp:139] Memory required for data: 9562884
I0428 20:16:38.220795   696 net.cpp:200] loss needs backward computation.
I0428 20:16:38.220801   696 net.cpp:200] relu3 needs backward computation.
I0428 20:16:38.220806   696 net.cpp:200] ip3 needs backward computation.
I0428 20:16:38.220832   696 net.cpp:200] relu2 needs backward computation.
I0428 20:16:38.220839   696 net.cpp:200] ip2 needs backward computation.
I0428 20:16:38.220844   696 net.cpp:200] relu1 needs backward computation.
I0428 20:16:38.220849   696 net.cpp:200] ip1 needs backward computation.
I0428 20:16:38.220854   696 net.cpp:200] pool1 needs backward computation.
I0428 20:16:38.220873   696 net.cpp:200] conv1 needs backward computation.
I0428 20:16:38.220880   696 net.cpp:200] pool0 needs backward computation.
I0428 20:16:38.220885   696 net.cpp:200] conv0 needs backward computation.
I0428 20:16:38.220891   696 net.cpp:202] mnist does not need backward computation.
I0428 20:16:38.220896   696 net.cpp:244] This network produces output loss
I0428 20:16:38.220911   696 net.cpp:257] Network initialization done.
I0428 20:16:38.221321   696 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1275.prototxt
I0428 20:16:38.221356   696 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:16:38.221463   696 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:16:38.221583   696 layer_factory.hpp:77] Creating layer mnist
I0428 20:16:38.221637   696 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:16:38.221655   696 net.cpp:86] Creating Layer mnist
I0428 20:16:38.221662   696 net.cpp:382] mnist -> data
I0428 20:16:38.221673   696 net.cpp:382] mnist -> label
I0428 20:16:38.221797   696 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:16:38.223857   696 net.cpp:124] Setting up mnist
I0428 20:16:38.223902   696 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:16:38.223911   696 net.cpp:131] Top shape: 100 (100)
I0428 20:16:38.223915   696 net.cpp:139] Memory required for data: 314000
I0428 20:16:38.223920   696 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:16:38.223930   696 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:16:38.223937   696 net.cpp:408] label_mnist_1_split <- label
I0428 20:16:38.223943   696 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:16:38.223953   696 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:16:38.224033   696 net.cpp:124] Setting up label_mnist_1_split
I0428 20:16:38.224042   696 net.cpp:131] Top shape: 100 (100)
I0428 20:16:38.224048   696 net.cpp:131] Top shape: 100 (100)
I0428 20:16:38.224053   696 net.cpp:139] Memory required for data: 314800
I0428 20:16:38.224058   696 layer_factory.hpp:77] Creating layer conv0
I0428 20:16:38.224071   696 net.cpp:86] Creating Layer conv0
I0428 20:16:38.224077   696 net.cpp:408] conv0 <- data
I0428 20:16:38.224086   696 net.cpp:382] conv0 -> conv0
I0428 20:16:38.225738   696 net.cpp:124] Setting up conv0
I0428 20:16:38.225754   696 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:16:38.225759   696 net.cpp:139] Memory required for data: 11834800
I0428 20:16:38.225771   696 layer_factory.hpp:77] Creating layer pool0
I0428 20:16:38.225781   696 net.cpp:86] Creating Layer pool0
I0428 20:16:38.225788   696 net.cpp:408] pool0 <- conv0
I0428 20:16:38.225796   696 net.cpp:382] pool0 -> pool0
I0428 20:16:38.225836   696 net.cpp:124] Setting up pool0
I0428 20:16:38.225844   696 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:16:38.225849   696 net.cpp:139] Memory required for data: 14714800
I0428 20:16:38.225854   696 layer_factory.hpp:77] Creating layer conv1
I0428 20:16:38.225867   696 net.cpp:86] Creating Layer conv1
I0428 20:16:38.225872   696 net.cpp:408] conv1 <- pool0
I0428 20:16:38.225880   696 net.cpp:382] conv1 -> conv1
I0428 20:16:38.227581   696 net.cpp:124] Setting up conv1
I0428 20:16:38.227609   696 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:16:38.227632   696 net.cpp:139] Memory required for data: 14842800
I0428 20:16:38.227645   696 layer_factory.hpp:77] Creating layer pool1
I0428 20:16:38.227660   696 net.cpp:86] Creating Layer pool1
I0428 20:16:38.227668   696 net.cpp:408] pool1 <- conv1
I0428 20:16:38.227680   696 net.cpp:382] pool1 -> pool1
I0428 20:16:38.227721   696 net.cpp:124] Setting up pool1
I0428 20:16:38.227730   696 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:16:38.227735   696 net.cpp:139] Memory required for data: 14874800
I0428 20:16:38.227741   696 layer_factory.hpp:77] Creating layer ip1
I0428 20:16:38.227751   696 net.cpp:86] Creating Layer ip1
I0428 20:16:38.227757   696 net.cpp:408] ip1 <- pool1
I0428 20:16:38.227768   696 net.cpp:382] ip1 -> ip1
I0428 20:16:38.227883   696 net.cpp:124] Setting up ip1
I0428 20:16:38.227892   696 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:38.227910   696 net.cpp:139] Memory required for data: 14884800
I0428 20:16:38.227923   696 layer_factory.hpp:77] Creating layer relu1
I0428 20:16:38.227932   696 net.cpp:86] Creating Layer relu1
I0428 20:16:38.227939   696 net.cpp:408] relu1 <- ip1
I0428 20:16:38.227946   696 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:16:38.228145   696 net.cpp:124] Setting up relu1
I0428 20:16:38.228154   696 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:16:38.228159   696 net.cpp:139] Memory required for data: 14894800
I0428 20:16:38.228164   696 layer_factory.hpp:77] Creating layer ip2
I0428 20:16:38.228175   696 net.cpp:86] Creating Layer ip2
I0428 20:16:38.228180   696 net.cpp:408] ip2 <- ip1
I0428 20:16:38.228189   696 net.cpp:382] ip2 -> ip2
I0428 20:16:38.228338   696 net.cpp:124] Setting up ip2
I0428 20:16:38.228348   696 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:38.228353   696 net.cpp:139] Memory required for data: 14914800
I0428 20:16:38.228363   696 layer_factory.hpp:77] Creating layer relu2
I0428 20:16:38.228370   696 net.cpp:86] Creating Layer relu2
I0428 20:16:38.228376   696 net.cpp:408] relu2 <- ip2
I0428 20:16:38.228384   696 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:16:38.228554   696 net.cpp:124] Setting up relu2
I0428 20:16:38.228564   696 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:16:38.228570   696 net.cpp:139] Memory required for data: 14934800
I0428 20:16:38.228575   696 layer_factory.hpp:77] Creating layer ip3
I0428 20:16:38.228586   696 net.cpp:86] Creating Layer ip3
I0428 20:16:38.228592   696 net.cpp:408] ip3 <- ip2
I0428 20:16:38.228601   696 net.cpp:382] ip3 -> ip3
I0428 20:16:38.228721   696 net.cpp:124] Setting up ip3
I0428 20:16:38.228730   696 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:38.228744   696 net.cpp:139] Memory required for data: 14938800
I0428 20:16:38.228757   696 layer_factory.hpp:77] Creating layer relu3
I0428 20:16:38.228767   696 net.cpp:86] Creating Layer relu3
I0428 20:16:38.228773   696 net.cpp:408] relu3 <- ip3
I0428 20:16:38.228781   696 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:16:38.229624   696 net.cpp:124] Setting up relu3
I0428 20:16:38.229637   696 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:38.229643   696 net.cpp:139] Memory required for data: 14942800
I0428 20:16:38.229650   696 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:16:38.229657   696 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:16:38.229662   696 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:16:38.229684   696 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:16:38.229694   696 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:16:38.229750   696 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:16:38.229758   696 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:38.229764   696 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:16:38.229769   696 net.cpp:139] Memory required for data: 14950800
I0428 20:16:38.229774   696 layer_factory.hpp:77] Creating layer accuracy
I0428 20:16:38.229786   696 net.cpp:86] Creating Layer accuracy
I0428 20:16:38.229792   696 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:16:38.229802   696 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:16:38.229810   696 net.cpp:382] accuracy -> accuracy
I0428 20:16:38.229821   696 net.cpp:124] Setting up accuracy
I0428 20:16:38.229830   696 net.cpp:131] Top shape: (1)
I0428 20:16:38.229835   696 net.cpp:139] Memory required for data: 14950804
I0428 20:16:38.229841   696 layer_factory.hpp:77] Creating layer loss
I0428 20:16:38.229848   696 net.cpp:86] Creating Layer loss
I0428 20:16:38.229854   696 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:16:38.229861   696 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:16:38.229871   696 net.cpp:382] loss -> loss
I0428 20:16:38.229879   696 layer_factory.hpp:77] Creating layer loss
I0428 20:16:38.230134   696 net.cpp:124] Setting up loss
I0428 20:16:38.230144   696 net.cpp:131] Top shape: (1)
I0428 20:16:38.230149   696 net.cpp:134]     with loss weight 1
I0428 20:16:38.230170   696 net.cpp:139] Memory required for data: 14950808
I0428 20:16:38.230176   696 net.cpp:200] loss needs backward computation.
I0428 20:16:38.230182   696 net.cpp:202] accuracy does not need backward computation.
I0428 20:16:38.230188   696 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:16:38.230193   696 net.cpp:200] relu3 needs backward computation.
I0428 20:16:38.230198   696 net.cpp:200] ip3 needs backward computation.
I0428 20:16:38.230204   696 net.cpp:200] relu2 needs backward computation.
I0428 20:16:38.230209   696 net.cpp:200] ip2 needs backward computation.
I0428 20:16:38.230214   696 net.cpp:200] relu1 needs backward computation.
I0428 20:16:38.230219   696 net.cpp:200] ip1 needs backward computation.
I0428 20:16:38.230224   696 net.cpp:200] pool1 needs backward computation.
I0428 20:16:38.230231   696 net.cpp:200] conv1 needs backward computation.
I0428 20:16:38.230238   696 net.cpp:200] pool0 needs backward computation.
I0428 20:16:38.230243   696 net.cpp:200] conv0 needs backward computation.
I0428 20:16:38.230250   696 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:16:38.230257   696 net.cpp:202] mnist does not need backward computation.
I0428 20:16:38.230262   696 net.cpp:244] This network produces output accuracy
I0428 20:16:38.230268   696 net.cpp:244] This network produces output loss
I0428 20:16:38.230283   696 net.cpp:257] Network initialization done.
I0428 20:16:38.230331   696 solver.cpp:56] Solver scaffolding done.
I0428 20:16:38.230682   696 caffe.cpp:248] Starting Optimization
I0428 20:16:38.230690   696 solver.cpp:273] Solving LeNet
I0428 20:16:38.230695   696 solver.cpp:274] Learning Rate Policy: inv
I0428 20:16:38.231427   696 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:16:38.238487   696 blocking_queue.cpp:49] Waiting for data
I0428 20:16:38.299953   703 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:38.300859   696 solver.cpp:398]     Test net output #0: accuracy = 0.0972
I0428 20:16:38.300881   696 solver.cpp:398]     Test net output #1: loss = 2.31029 (* 1 = 2.31029 loss)
I0428 20:16:38.304987   696 solver.cpp:219] Iteration 0 (-1.09441e-42 iter/s, 0.0742656s/100 iters), loss = 2.31401
I0428 20:16:38.305016   696 solver.cpp:238]     Train net output #0: loss = 2.31401 (* 1 = 2.31401 loss)
I0428 20:16:38.305047   696 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:16:38.420199   696 solver.cpp:219] Iteration 100 (868.233 iter/s, 0.115176s/100 iters), loss = 0.379371
I0428 20:16:38.420228   696 solver.cpp:238]     Train net output #0: loss = 0.379371 (* 1 = 0.379371 loss)
I0428 20:16:38.420253   696 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:16:38.535480   696 solver.cpp:219] Iteration 200 (867.73 iter/s, 0.115243s/100 iters), loss = 0.248429
I0428 20:16:38.535508   696 solver.cpp:238]     Train net output #0: loss = 0.248429 (* 1 = 0.248429 loss)
I0428 20:16:38.535533   696 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:16:38.651589   696 solver.cpp:219] Iteration 300 (861.524 iter/s, 0.116073s/100 iters), loss = 0.246341
I0428 20:16:38.651618   696 solver.cpp:238]     Train net output #0: loss = 0.246341 (* 1 = 0.246341 loss)
I0428 20:16:38.651643   696 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:16:38.767891   696 solver.cpp:219] Iteration 400 (860.097 iter/s, 0.116266s/100 iters), loss = 0.255856
I0428 20:16:38.767918   696 solver.cpp:238]     Train net output #0: loss = 0.255856 (* 1 = 0.255856 loss)
I0428 20:16:38.767945   696 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:16:38.884055   696 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:16:38.947988   703 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:38.949702   696 solver.cpp:398]     Test net output #0: accuracy = 0.9511
I0428 20:16:38.949724   696 solver.cpp:398]     Test net output #1: loss = 0.159351 (* 1 = 0.159351 loss)
I0428 20:16:38.950906   696 solver.cpp:219] Iteration 500 (546.521 iter/s, 0.182976s/100 iters), loss = 0.129332
I0428 20:16:38.950966   696 solver.cpp:238]     Train net output #0: loss = 0.129332 (* 1 = 0.129332 loss)
I0428 20:16:38.950978   696 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:16:39.073612   696 solver.cpp:219] Iteration 600 (815.404 iter/s, 0.122639s/100 iters), loss = 0.102974
I0428 20:16:39.073645   696 solver.cpp:238]     Train net output #0: loss = 0.102974 (* 1 = 0.102974 loss)
I0428 20:16:39.073657   696 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:16:39.188724   696 solver.cpp:219] Iteration 700 (869.021 iter/s, 0.115072s/100 iters), loss = 0.145304
I0428 20:16:39.188755   696 solver.cpp:238]     Train net output #0: loss = 0.145304 (* 1 = 0.145304 loss)
I0428 20:16:39.188765   696 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:16:39.302652   696 solver.cpp:219] Iteration 800 (878.038 iter/s, 0.11389s/100 iters), loss = 0.279359
I0428 20:16:39.302680   696 solver.cpp:238]     Train net output #0: loss = 0.279359 (* 1 = 0.279359 loss)
I0428 20:16:39.302706   696 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:16:39.418344   696 solver.cpp:219] Iteration 900 (864.643 iter/s, 0.115655s/100 iters), loss = 0.207159
I0428 20:16:39.418372   696 solver.cpp:238]     Train net output #0: loss = 0.207159 (* 1 = 0.207159 loss)
I0428 20:16:39.418383   696 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:16:39.456604   702 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:39.537331   696 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:16:39.538280   696 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:16:39.539033   696 solver.cpp:311] Iteration 1000, loss = 0.152199
I0428 20:16:39.539052   696 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:16:39.616235   703 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:16:39.617061   696 solver.cpp:398]     Test net output #0: accuracy = 0.9692
I0428 20:16:39.617084   696 solver.cpp:398]     Test net output #1: loss = 0.100153 (* 1 = 0.100153 loss)
I0428 20:16:39.617094   696 solver.cpp:316] Optimization Done.
I0428 20:16:39.617099   696 caffe.cpp:259] Optimization Done.
