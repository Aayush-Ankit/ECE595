I0428 19:40:49.266530 24670 caffe.cpp:218] Using GPUs 0
I0428 19:40:49.306092 24670 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:49.827366 24670 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test346.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:49.827505 24670 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test346.prototxt
I0428 19:40:49.827909 24670 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:49.827929 24670 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:49.828024 24670 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:49.828099 24670 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:49.828197 24670 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:49.828219 24670 net.cpp:86] Creating Layer mnist
I0428 19:40:49.828227 24670 net.cpp:382] mnist -> data
I0428 19:40:49.828249 24670 net.cpp:382] mnist -> label
I0428 19:40:49.829358 24670 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:49.831806 24670 net.cpp:124] Setting up mnist
I0428 19:40:49.831823 24670 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:49.831830 24670 net.cpp:131] Top shape: 64 (64)
I0428 19:40:49.831833 24670 net.cpp:139] Memory required for data: 200960
I0428 19:40:49.831840 24670 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:49.831856 24670 net.cpp:86] Creating Layer conv0
I0428 19:40:49.831876 24670 net.cpp:408] conv0 <- data
I0428 19:40:49.831887 24670 net.cpp:382] conv0 -> conv0
I0428 19:40:50.105623 24670 net.cpp:124] Setting up conv0
I0428 19:40:50.105650 24670 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:50.105654 24670 net.cpp:139] Memory required for data: 495872
I0428 19:40:50.105669 24670 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:50.105696 24670 net.cpp:86] Creating Layer pool0
I0428 19:40:50.105700 24670 net.cpp:408] pool0 <- conv0
I0428 19:40:50.105705 24670 net.cpp:382] pool0 -> pool0
I0428 19:40:50.105749 24670 net.cpp:124] Setting up pool0
I0428 19:40:50.105763 24670 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:50.105767 24670 net.cpp:139] Memory required for data: 569600
I0428 19:40:50.105769 24670 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:50.105779 24670 net.cpp:86] Creating Layer conv1
I0428 19:40:50.105782 24670 net.cpp:408] conv1 <- pool0
I0428 19:40:50.105787 24670 net.cpp:382] conv1 -> conv1
I0428 19:40:50.107641 24670 net.cpp:124] Setting up conv1
I0428 19:40:50.107656 24670 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:50.107661 24670 net.cpp:139] Memory required for data: 651520
I0428 19:40:50.107669 24670 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:50.107676 24670 net.cpp:86] Creating Layer pool1
I0428 19:40:50.107694 24670 net.cpp:408] pool1 <- conv1
I0428 19:40:50.107700 24670 net.cpp:382] pool1 -> pool1
I0428 19:40:50.107738 24670 net.cpp:124] Setting up pool1
I0428 19:40:50.107743 24670 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:50.107746 24670 net.cpp:139] Memory required for data: 672000
I0428 19:40:50.107750 24670 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:50.107756 24670 net.cpp:86] Creating Layer ip1
I0428 19:40:50.107759 24670 net.cpp:408] ip1 <- pool1
I0428 19:40:50.107764 24670 net.cpp:382] ip1 -> ip1
I0428 19:40:50.108752 24670 net.cpp:124] Setting up ip1
I0428 19:40:50.108765 24670 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:50.108768 24670 net.cpp:139] Memory required for data: 684800
I0428 19:40:50.108777 24670 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:50.108783 24670 net.cpp:86] Creating Layer relu1
I0428 19:40:50.108788 24670 net.cpp:408] relu1 <- ip1
I0428 19:40:50.108791 24670 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:50.109050 24670 net.cpp:124] Setting up relu1
I0428 19:40:50.109060 24670 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:50.109063 24670 net.cpp:139] Memory required for data: 697600
I0428 19:40:50.109066 24670 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:50.109073 24670 net.cpp:86] Creating Layer ip2
I0428 19:40:50.109077 24670 net.cpp:408] ip2 <- ip1
I0428 19:40:50.109082 24670 net.cpp:382] ip2 -> ip2
I0428 19:40:50.109203 24670 net.cpp:124] Setting up ip2
I0428 19:40:50.109225 24670 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:50.109227 24670 net.cpp:139] Memory required for data: 704000
I0428 19:40:50.109247 24670 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:50.109253 24670 net.cpp:86] Creating Layer relu2
I0428 19:40:50.109256 24670 net.cpp:408] relu2 <- ip2
I0428 19:40:50.109259 24670 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:50.110033 24670 net.cpp:124] Setting up relu2
I0428 19:40:50.110045 24670 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:50.110049 24670 net.cpp:139] Memory required for data: 710400
I0428 19:40:50.110052 24670 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:50.110059 24670 net.cpp:86] Creating Layer ip3
I0428 19:40:50.110061 24670 net.cpp:408] ip3 <- ip2
I0428 19:40:50.110067 24670 net.cpp:382] ip3 -> ip3
I0428 19:40:50.110159 24670 net.cpp:124] Setting up ip3
I0428 19:40:50.110167 24670 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:50.110170 24670 net.cpp:139] Memory required for data: 712960
I0428 19:40:50.110177 24670 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:50.110183 24670 net.cpp:86] Creating Layer relu3
I0428 19:40:50.110185 24670 net.cpp:408] relu3 <- ip3
I0428 19:40:50.110189 24670 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:50.110347 24670 net.cpp:124] Setting up relu3
I0428 19:40:50.110355 24670 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:50.110358 24670 net.cpp:139] Memory required for data: 715520
I0428 19:40:50.110361 24670 layer_factory.hpp:77] Creating layer loss
I0428 19:40:50.110368 24670 net.cpp:86] Creating Layer loss
I0428 19:40:50.110370 24670 net.cpp:408] loss <- ip3
I0428 19:40:50.110373 24670 net.cpp:408] loss <- label
I0428 19:40:50.110378 24670 net.cpp:382] loss -> loss
I0428 19:40:50.110393 24670 layer_factory.hpp:77] Creating layer loss
I0428 19:40:50.110600 24670 net.cpp:124] Setting up loss
I0428 19:40:50.110610 24670 net.cpp:131] Top shape: (1)
I0428 19:40:50.110613 24670 net.cpp:134]     with loss weight 1
I0428 19:40:50.110627 24670 net.cpp:139] Memory required for data: 715524
I0428 19:40:50.110630 24670 net.cpp:200] loss needs backward computation.
I0428 19:40:50.110635 24670 net.cpp:200] relu3 needs backward computation.
I0428 19:40:50.110637 24670 net.cpp:200] ip3 needs backward computation.
I0428 19:40:50.110640 24670 net.cpp:200] relu2 needs backward computation.
I0428 19:40:50.110642 24670 net.cpp:200] ip2 needs backward computation.
I0428 19:40:50.110646 24670 net.cpp:200] relu1 needs backward computation.
I0428 19:40:50.110647 24670 net.cpp:200] ip1 needs backward computation.
I0428 19:40:50.110651 24670 net.cpp:200] pool1 needs backward computation.
I0428 19:40:50.110653 24670 net.cpp:200] conv1 needs backward computation.
I0428 19:40:50.110656 24670 net.cpp:200] pool0 needs backward computation.
I0428 19:40:50.110659 24670 net.cpp:200] conv0 needs backward computation.
I0428 19:40:50.110663 24670 net.cpp:202] mnist does not need backward computation.
I0428 19:40:50.110666 24670 net.cpp:244] This network produces output loss
I0428 19:40:50.110674 24670 net.cpp:257] Network initialization done.
I0428 19:40:50.111037 24670 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test346.prototxt
I0428 19:40:50.111065 24670 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:50.111158 24670 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:50.111264 24670 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:50.111306 24670 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:50.111318 24670 net.cpp:86] Creating Layer mnist
I0428 19:40:50.111322 24670 net.cpp:382] mnist -> data
I0428 19:40:50.111330 24670 net.cpp:382] mnist -> label
I0428 19:40:50.111409 24670 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:50.113370 24670 net.cpp:124] Setting up mnist
I0428 19:40:50.113401 24670 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:50.113406 24670 net.cpp:131] Top shape: 100 (100)
I0428 19:40:50.113409 24670 net.cpp:139] Memory required for data: 314000
I0428 19:40:50.113414 24670 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:50.113420 24670 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:50.113422 24670 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:50.113427 24670 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:50.113435 24670 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:50.113528 24670 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:50.113535 24670 net.cpp:131] Top shape: 100 (100)
I0428 19:40:50.113539 24670 net.cpp:131] Top shape: 100 (100)
I0428 19:40:50.113541 24670 net.cpp:139] Memory required for data: 314800
I0428 19:40:50.113544 24670 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:50.113554 24670 net.cpp:86] Creating Layer conv0
I0428 19:40:50.113556 24670 net.cpp:408] conv0 <- data
I0428 19:40:50.113561 24670 net.cpp:382] conv0 -> conv0
I0428 19:40:50.115222 24670 net.cpp:124] Setting up conv0
I0428 19:40:50.115236 24670 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:50.115241 24670 net.cpp:139] Memory required for data: 775600
I0428 19:40:50.115249 24670 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:50.115255 24670 net.cpp:86] Creating Layer pool0
I0428 19:40:50.115258 24670 net.cpp:408] pool0 <- conv0
I0428 19:40:50.115273 24670 net.cpp:382] pool0 -> pool0
I0428 19:40:50.115309 24670 net.cpp:124] Setting up pool0
I0428 19:40:50.115314 24670 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:50.115316 24670 net.cpp:139] Memory required for data: 890800
I0428 19:40:50.115319 24670 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:50.115327 24670 net.cpp:86] Creating Layer conv1
I0428 19:40:50.115330 24670 net.cpp:408] conv1 <- pool0
I0428 19:40:50.115335 24670 net.cpp:382] conv1 -> conv1
I0428 19:40:50.116957 24670 net.cpp:124] Setting up conv1
I0428 19:40:50.116973 24670 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:50.116977 24670 net.cpp:139] Memory required for data: 1018800
I0428 19:40:50.116986 24670 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:50.116993 24670 net.cpp:86] Creating Layer pool1
I0428 19:40:50.116997 24670 net.cpp:408] pool1 <- conv1
I0428 19:40:50.117003 24670 net.cpp:382] pool1 -> pool1
I0428 19:40:50.117040 24670 net.cpp:124] Setting up pool1
I0428 19:40:50.117054 24670 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:50.117058 24670 net.cpp:139] Memory required for data: 1050800
I0428 19:40:50.117061 24670 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:50.117067 24670 net.cpp:86] Creating Layer ip1
I0428 19:40:50.117071 24670 net.cpp:408] ip1 <- pool1
I0428 19:40:50.117076 24670 net.cpp:382] ip1 -> ip1
I0428 19:40:50.117254 24670 net.cpp:124] Setting up ip1
I0428 19:40:50.117262 24670 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:50.117276 24670 net.cpp:139] Memory required for data: 1070800
I0428 19:40:50.117285 24670 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:50.117290 24670 net.cpp:86] Creating Layer relu1
I0428 19:40:50.117295 24670 net.cpp:408] relu1 <- ip1
I0428 19:40:50.117300 24670 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:50.117475 24670 net.cpp:124] Setting up relu1
I0428 19:40:50.117485 24670 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:50.117488 24670 net.cpp:139] Memory required for data: 1090800
I0428 19:40:50.117491 24670 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:50.117498 24670 net.cpp:86] Creating Layer ip2
I0428 19:40:50.117516 24670 net.cpp:408] ip2 <- ip1
I0428 19:40:50.117522 24670 net.cpp:382] ip2 -> ip2
I0428 19:40:50.117620 24670 net.cpp:124] Setting up ip2
I0428 19:40:50.117629 24670 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:50.117631 24670 net.cpp:139] Memory required for data: 1100800
I0428 19:40:50.117637 24670 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:50.117641 24670 net.cpp:86] Creating Layer relu2
I0428 19:40:50.117645 24670 net.cpp:408] relu2 <- ip2
I0428 19:40:50.117648 24670 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:50.117854 24670 net.cpp:124] Setting up relu2
I0428 19:40:50.117863 24670 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:50.117866 24670 net.cpp:139] Memory required for data: 1110800
I0428 19:40:50.117869 24670 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:50.117875 24670 net.cpp:86] Creating Layer ip3
I0428 19:40:50.117878 24670 net.cpp:408] ip3 <- ip2
I0428 19:40:50.117883 24670 net.cpp:382] ip3 -> ip3
I0428 19:40:50.118018 24670 net.cpp:124] Setting up ip3
I0428 19:40:50.118026 24670 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:50.118028 24670 net.cpp:139] Memory required for data: 1114800
I0428 19:40:50.118036 24670 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:50.118041 24670 net.cpp:86] Creating Layer relu3
I0428 19:40:50.118044 24670 net.cpp:408] relu3 <- ip3
I0428 19:40:50.118047 24670 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:50.118880 24670 net.cpp:124] Setting up relu3
I0428 19:40:50.118891 24670 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:50.118909 24670 net.cpp:139] Memory required for data: 1118800
I0428 19:40:50.118912 24670 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:50.118918 24670 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:50.118921 24670 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:50.118927 24670 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:50.118932 24670 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:50.118971 24670 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:50.118976 24670 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:50.118979 24670 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:50.118983 24670 net.cpp:139] Memory required for data: 1126800
I0428 19:40:50.118985 24670 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:50.118990 24670 net.cpp:86] Creating Layer accuracy
I0428 19:40:50.118993 24670 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:50.118996 24670 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:50.119000 24670 net.cpp:382] accuracy -> accuracy
I0428 19:40:50.119007 24670 net.cpp:124] Setting up accuracy
I0428 19:40:50.119010 24670 net.cpp:131] Top shape: (1)
I0428 19:40:50.119014 24670 net.cpp:139] Memory required for data: 1126804
I0428 19:40:50.119016 24670 layer_factory.hpp:77] Creating layer loss
I0428 19:40:50.119020 24670 net.cpp:86] Creating Layer loss
I0428 19:40:50.119024 24670 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:50.119026 24670 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:50.119030 24670 net.cpp:382] loss -> loss
I0428 19:40:50.119036 24670 layer_factory.hpp:77] Creating layer loss
I0428 19:40:50.119256 24670 net.cpp:124] Setting up loss
I0428 19:40:50.119264 24670 net.cpp:131] Top shape: (1)
I0428 19:40:50.119268 24670 net.cpp:134]     with loss weight 1
I0428 19:40:50.119276 24670 net.cpp:139] Memory required for data: 1126808
I0428 19:40:50.119287 24670 net.cpp:200] loss needs backward computation.
I0428 19:40:50.119292 24670 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:50.119297 24670 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:50.119309 24670 net.cpp:200] relu3 needs backward computation.
I0428 19:40:50.119313 24670 net.cpp:200] ip3 needs backward computation.
I0428 19:40:50.119315 24670 net.cpp:200] relu2 needs backward computation.
I0428 19:40:50.119319 24670 net.cpp:200] ip2 needs backward computation.
I0428 19:40:50.119321 24670 net.cpp:200] relu1 needs backward computation.
I0428 19:40:50.119324 24670 net.cpp:200] ip1 needs backward computation.
I0428 19:40:50.119328 24670 net.cpp:200] pool1 needs backward computation.
I0428 19:40:50.119330 24670 net.cpp:200] conv1 needs backward computation.
I0428 19:40:50.119341 24670 net.cpp:200] pool0 needs backward computation.
I0428 19:40:50.119344 24670 net.cpp:200] conv0 needs backward computation.
I0428 19:40:50.119349 24670 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:50.119351 24670 net.cpp:202] mnist does not need backward computation.
I0428 19:40:50.119354 24670 net.cpp:244] This network produces output accuracy
I0428 19:40:50.119359 24670 net.cpp:244] This network produces output loss
I0428 19:40:50.119367 24670 net.cpp:257] Network initialization done.
I0428 19:40:50.119408 24670 solver.cpp:56] Solver scaffolding done.
I0428 19:40:50.119786 24670 caffe.cpp:248] Starting Optimization
I0428 19:40:50.119793 24670 solver.cpp:273] Solving LeNet
I0428 19:40:50.119797 24670 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:50.120057 24670 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:50.123504 24670 blocking_queue.cpp:49] Waiting for data
I0428 19:40:50.195874 24677 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:50.196370 24670 solver.cpp:398]     Test net output #0: accuracy = 0.1124
I0428 19:40:50.196405 24670 solver.cpp:398]     Test net output #1: loss = 2.29496 (* 1 = 2.29496 loss)
I0428 19:40:50.198304 24670 solver.cpp:219] Iteration 0 (0 iter/s, 0.0784507s/100 iters), loss = 2.29831
I0428 19:40:50.198348 24670 solver.cpp:238]     Train net output #0: loss = 2.29831 (* 1 = 2.29831 loss)
I0428 19:40:50.198359 24670 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:50.272737 24670 solver.cpp:219] Iteration 100 (1344.42 iter/s, 0.0743812s/100 iters), loss = 0.981138
I0428 19:40:50.272776 24670 solver.cpp:238]     Train net output #0: loss = 0.981138 (* 1 = 0.981138 loss)
I0428 19:40:50.272783 24670 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:50.343178 24670 solver.cpp:219] Iteration 200 (1420.6 iter/s, 0.0703928s/100 iters), loss = 0.560224
I0428 19:40:50.343216 24670 solver.cpp:238]     Train net output #0: loss = 0.560224 (* 1 = 0.560224 loss)
I0428 19:40:50.343224 24670 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:50.414824 24670 solver.cpp:219] Iteration 300 (1396.71 iter/s, 0.0715971s/100 iters), loss = 0.27673
I0428 19:40:50.414866 24670 solver.cpp:238]     Train net output #0: loss = 0.27673 (* 1 = 0.27673 loss)
I0428 19:40:50.414872 24670 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:50.488771 24670 solver.cpp:219] Iteration 400 (1353.24 iter/s, 0.0738968s/100 iters), loss = 0.233385
I0428 19:40:50.488816 24670 solver.cpp:238]     Train net output #0: loss = 0.233385 (* 1 = 0.233385 loss)
I0428 19:40:50.488823 24670 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:50.559240 24670 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:50.635001 24677 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:50.635488 24670 solver.cpp:398]     Test net output #0: accuracy = 0.9319
I0428 19:40:50.635507 24670 solver.cpp:398]     Test net output #1: loss = 0.225718 (* 1 = 0.225718 loss)
I0428 19:40:50.636368 24670 solver.cpp:219] Iteration 500 (677.698 iter/s, 0.147558s/100 iters), loss = 0.315595
I0428 19:40:50.636391 24670 solver.cpp:238]     Train net output #0: loss = 0.315595 (* 1 = 0.315595 loss)
I0428 19:40:50.636414 24670 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:50.708652 24670 solver.cpp:219] Iteration 600 (1384.04 iter/s, 0.0722525s/100 iters), loss = 0.200398
I0428 19:40:50.708693 24670 solver.cpp:238]     Train net output #0: loss = 0.200398 (* 1 = 0.200398 loss)
I0428 19:40:50.708698 24670 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:50.780081 24670 solver.cpp:219] Iteration 700 (1400.95 iter/s, 0.07138s/100 iters), loss = 0.397525
I0428 19:40:50.780122 24670 solver.cpp:238]     Train net output #0: loss = 0.397525 (* 1 = 0.397525 loss)
I0428 19:40:50.780128 24670 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:50.850282 24670 solver.cpp:219] Iteration 800 (1425.14 iter/s, 0.0701686s/100 iters), loss = 0.321285
I0428 19:40:50.850322 24670 solver.cpp:238]     Train net output #0: loss = 0.321285 (* 1 = 0.321285 loss)
I0428 19:40:50.850343 24670 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:50.920313 24670 solver.cpp:219] Iteration 900 (1428.58 iter/s, 0.0699995s/100 iters), loss = 0.343246
I0428 19:40:50.920354 24670 solver.cpp:238]     Train net output #0: loss = 0.343247 (* 1 = 0.343247 loss)
I0428 19:40:50.920361 24670 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:50.943902 24676 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:50.989553 24670 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:50.990278 24670 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:50.990694 24670 solver.cpp:311] Iteration 1000, loss = 0.287068
I0428 19:40:50.990720 24670 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:51.065449 24677 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:51.065901 24670 solver.cpp:398]     Test net output #0: accuracy = 0.955
I0428 19:40:51.065939 24670 solver.cpp:398]     Test net output #1: loss = 0.140399 (* 1 = 0.140399 loss)
I0428 19:40:51.065945 24670 solver.cpp:316] Optimization Done.
I0428 19:40:51.065948 24670 caffe.cpp:259] Optimization Done.
