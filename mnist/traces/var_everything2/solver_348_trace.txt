I0428 19:40:53.223356 24686 caffe.cpp:218] Using GPUs 0
I0428 19:40:53.264634 24686 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:53.731855 24686 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test348.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:53.732003 24686 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test348.prototxt
I0428 19:40:53.732383 24686 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:53.732416 24686 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:53.732502 24686 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:53.732568 24686 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:53.732663 24686 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:53.732682 24686 net.cpp:86] Creating Layer mnist
I0428 19:40:53.732691 24686 net.cpp:382] mnist -> data
I0428 19:40:53.732708 24686 net.cpp:382] mnist -> label
I0428 19:40:53.733768 24686 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:53.736070 24686 net.cpp:124] Setting up mnist
I0428 19:40:53.736101 24686 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:53.736109 24686 net.cpp:131] Top shape: 64 (64)
I0428 19:40:53.736111 24686 net.cpp:139] Memory required for data: 200960
I0428 19:40:53.736117 24686 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:53.736132 24686 net.cpp:86] Creating Layer conv0
I0428 19:40:53.736150 24686 net.cpp:408] conv0 <- data
I0428 19:40:53.736162 24686 net.cpp:382] conv0 -> conv0
I0428 19:40:53.968390 24686 net.cpp:124] Setting up conv0
I0428 19:40:53.968417 24686 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:53.968421 24686 net.cpp:139] Memory required for data: 495872
I0428 19:40:53.968436 24686 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:53.968447 24686 net.cpp:86] Creating Layer pool0
I0428 19:40:53.968451 24686 net.cpp:408] pool0 <- conv0
I0428 19:40:53.968456 24686 net.cpp:382] pool0 -> pool0
I0428 19:40:53.968533 24686 net.cpp:124] Setting up pool0
I0428 19:40:53.968538 24686 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:53.968541 24686 net.cpp:139] Memory required for data: 569600
I0428 19:40:53.968544 24686 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:53.968555 24686 net.cpp:86] Creating Layer conv1
I0428 19:40:53.968559 24686 net.cpp:408] conv1 <- pool0
I0428 19:40:53.968564 24686 net.cpp:382] conv1 -> conv1
I0428 19:40:53.970477 24686 net.cpp:124] Setting up conv1
I0428 19:40:53.970502 24686 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:53.970506 24686 net.cpp:139] Memory required for data: 651520
I0428 19:40:53.970531 24686 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:53.970540 24686 net.cpp:86] Creating Layer pool1
I0428 19:40:53.970543 24686 net.cpp:408] pool1 <- conv1
I0428 19:40:53.970548 24686 net.cpp:382] pool1 -> pool1
I0428 19:40:53.970587 24686 net.cpp:124] Setting up pool1
I0428 19:40:53.970592 24686 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:53.970595 24686 net.cpp:139] Memory required for data: 672000
I0428 19:40:53.970598 24686 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:53.970605 24686 net.cpp:86] Creating Layer ip1
I0428 19:40:53.970608 24686 net.cpp:408] ip1 <- pool1
I0428 19:40:53.970613 24686 net.cpp:382] ip1 -> ip1
I0428 19:40:53.971597 24686 net.cpp:124] Setting up ip1
I0428 19:40:53.971611 24686 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:53.971613 24686 net.cpp:139] Memory required for data: 684800
I0428 19:40:53.971622 24686 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:53.971628 24686 net.cpp:86] Creating Layer relu1
I0428 19:40:53.971632 24686 net.cpp:408] relu1 <- ip1
I0428 19:40:53.971637 24686 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:53.971809 24686 net.cpp:124] Setting up relu1
I0428 19:40:53.971817 24686 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:53.971822 24686 net.cpp:139] Memory required for data: 697600
I0428 19:40:53.971824 24686 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:53.971832 24686 net.cpp:86] Creating Layer ip2
I0428 19:40:53.971834 24686 net.cpp:408] ip2 <- ip1
I0428 19:40:53.971839 24686 net.cpp:382] ip2 -> ip2
I0428 19:40:53.971945 24686 net.cpp:124] Setting up ip2
I0428 19:40:53.971951 24686 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:53.971971 24686 net.cpp:139] Memory required for data: 710400
I0428 19:40:53.971976 24686 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:53.971982 24686 net.cpp:86] Creating Layer relu2
I0428 19:40:53.971987 24686 net.cpp:408] relu2 <- ip2
I0428 19:40:53.971990 24686 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:53.972756 24686 net.cpp:124] Setting up relu2
I0428 19:40:53.972784 24686 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:40:53.972789 24686 net.cpp:139] Memory required for data: 723200
I0428 19:40:53.972792 24686 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:53.972800 24686 net.cpp:86] Creating Layer ip3
I0428 19:40:53.972803 24686 net.cpp:408] ip3 <- ip2
I0428 19:40:53.972815 24686 net.cpp:382] ip3 -> ip3
I0428 19:40:53.972972 24686 net.cpp:124] Setting up ip3
I0428 19:40:53.972980 24686 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:53.972985 24686 net.cpp:139] Memory required for data: 725760
I0428 19:40:53.972992 24686 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:53.972998 24686 net.cpp:86] Creating Layer relu3
I0428 19:40:53.973002 24686 net.cpp:408] relu3 <- ip3
I0428 19:40:53.973007 24686 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:53.973213 24686 net.cpp:124] Setting up relu3
I0428 19:40:53.973237 24686 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:53.973240 24686 net.cpp:139] Memory required for data: 728320
I0428 19:40:53.973243 24686 layer_factory.hpp:77] Creating layer loss
I0428 19:40:53.973249 24686 net.cpp:86] Creating Layer loss
I0428 19:40:53.973253 24686 net.cpp:408] loss <- ip3
I0428 19:40:53.973256 24686 net.cpp:408] loss <- label
I0428 19:40:53.973263 24686 net.cpp:382] loss -> loss
I0428 19:40:53.973279 24686 layer_factory.hpp:77] Creating layer loss
I0428 19:40:53.973510 24686 net.cpp:124] Setting up loss
I0428 19:40:53.973518 24686 net.cpp:131] Top shape: (1)
I0428 19:40:53.973522 24686 net.cpp:134]     with loss weight 1
I0428 19:40:53.973536 24686 net.cpp:139] Memory required for data: 728324
I0428 19:40:53.973539 24686 net.cpp:200] loss needs backward computation.
I0428 19:40:53.973542 24686 net.cpp:200] relu3 needs backward computation.
I0428 19:40:53.973546 24686 net.cpp:200] ip3 needs backward computation.
I0428 19:40:53.973548 24686 net.cpp:200] relu2 needs backward computation.
I0428 19:40:53.973551 24686 net.cpp:200] ip2 needs backward computation.
I0428 19:40:53.973554 24686 net.cpp:200] relu1 needs backward computation.
I0428 19:40:53.973557 24686 net.cpp:200] ip1 needs backward computation.
I0428 19:40:53.973561 24686 net.cpp:200] pool1 needs backward computation.
I0428 19:40:53.973563 24686 net.cpp:200] conv1 needs backward computation.
I0428 19:40:53.973567 24686 net.cpp:200] pool0 needs backward computation.
I0428 19:40:53.973569 24686 net.cpp:200] conv0 needs backward computation.
I0428 19:40:53.973572 24686 net.cpp:202] mnist does not need backward computation.
I0428 19:40:53.973575 24686 net.cpp:244] This network produces output loss
I0428 19:40:53.973584 24686 net.cpp:257] Network initialization done.
I0428 19:40:53.973954 24686 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test348.prototxt
I0428 19:40:53.974011 24686 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:53.974098 24686 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:53.974174 24686 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:53.974218 24686 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:53.974231 24686 net.cpp:86] Creating Layer mnist
I0428 19:40:53.974236 24686 net.cpp:382] mnist -> data
I0428 19:40:53.974242 24686 net.cpp:382] mnist -> label
I0428 19:40:53.974320 24686 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:53.976480 24686 net.cpp:124] Setting up mnist
I0428 19:40:53.976507 24686 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:53.976512 24686 net.cpp:131] Top shape: 100 (100)
I0428 19:40:53.976516 24686 net.cpp:139] Memory required for data: 314000
I0428 19:40:53.976519 24686 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:53.976554 24686 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:53.976558 24686 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:53.976563 24686 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:53.976570 24686 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:53.976614 24686 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:53.976619 24686 net.cpp:131] Top shape: 100 (100)
I0428 19:40:53.976624 24686 net.cpp:131] Top shape: 100 (100)
I0428 19:40:53.976626 24686 net.cpp:139] Memory required for data: 314800
I0428 19:40:53.976629 24686 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:53.976637 24686 net.cpp:86] Creating Layer conv0
I0428 19:40:53.976640 24686 net.cpp:408] conv0 <- data
I0428 19:40:53.976645 24686 net.cpp:382] conv0 -> conv0
I0428 19:40:53.978368 24686 net.cpp:124] Setting up conv0
I0428 19:40:53.978381 24686 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:53.978385 24686 net.cpp:139] Memory required for data: 775600
I0428 19:40:53.978394 24686 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:53.978400 24686 net.cpp:86] Creating Layer pool0
I0428 19:40:53.978404 24686 net.cpp:408] pool0 <- conv0
I0428 19:40:53.978408 24686 net.cpp:382] pool0 -> pool0
I0428 19:40:53.978442 24686 net.cpp:124] Setting up pool0
I0428 19:40:53.978447 24686 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:53.978451 24686 net.cpp:139] Memory required for data: 890800
I0428 19:40:53.978453 24686 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:53.978461 24686 net.cpp:86] Creating Layer conv1
I0428 19:40:53.978464 24686 net.cpp:408] conv1 <- pool0
I0428 19:40:53.978469 24686 net.cpp:382] conv1 -> conv1
I0428 19:40:53.979948 24686 net.cpp:124] Setting up conv1
I0428 19:40:53.979962 24686 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:53.979966 24686 net.cpp:139] Memory required for data: 1018800
I0428 19:40:53.979975 24686 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:53.979981 24686 net.cpp:86] Creating Layer pool1
I0428 19:40:53.979984 24686 net.cpp:408] pool1 <- conv1
I0428 19:40:53.979990 24686 net.cpp:382] pool1 -> pool1
I0428 19:40:53.980023 24686 net.cpp:124] Setting up pool1
I0428 19:40:53.980028 24686 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:53.980031 24686 net.cpp:139] Memory required for data: 1050800
I0428 19:40:53.980034 24686 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:53.980041 24686 net.cpp:86] Creating Layer ip1
I0428 19:40:53.980051 24686 net.cpp:408] ip1 <- pool1
I0428 19:40:53.980056 24686 net.cpp:382] ip1 -> ip1
I0428 19:40:53.980176 24686 net.cpp:124] Setting up ip1
I0428 19:40:53.980185 24686 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:53.980198 24686 net.cpp:139] Memory required for data: 1070800
I0428 19:40:53.980206 24686 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:53.980211 24686 net.cpp:86] Creating Layer relu1
I0428 19:40:53.980214 24686 net.cpp:408] relu1 <- ip1
I0428 19:40:53.980219 24686 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:53.980377 24686 net.cpp:124] Setting up relu1
I0428 19:40:53.980386 24686 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:53.980389 24686 net.cpp:139] Memory required for data: 1090800
I0428 19:40:53.980392 24686 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:53.980399 24686 net.cpp:86] Creating Layer ip2
I0428 19:40:53.980402 24686 net.cpp:408] ip2 <- ip1
I0428 19:40:53.980408 24686 net.cpp:382] ip2 -> ip2
I0428 19:40:53.980514 24686 net.cpp:124] Setting up ip2
I0428 19:40:53.980520 24686 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:53.980523 24686 net.cpp:139] Memory required for data: 1110800
I0428 19:40:53.980528 24686 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:53.980533 24686 net.cpp:86] Creating Layer relu2
I0428 19:40:53.980536 24686 net.cpp:408] relu2 <- ip2
I0428 19:40:53.980540 24686 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:53.980689 24686 net.cpp:124] Setting up relu2
I0428 19:40:53.980696 24686 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:40:53.980700 24686 net.cpp:139] Memory required for data: 1130800
I0428 19:40:53.980702 24686 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:53.980707 24686 net.cpp:86] Creating Layer ip3
I0428 19:40:53.980711 24686 net.cpp:408] ip3 <- ip2
I0428 19:40:53.980716 24686 net.cpp:382] ip3 -> ip3
I0428 19:40:53.980808 24686 net.cpp:124] Setting up ip3
I0428 19:40:53.980831 24686 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:53.980834 24686 net.cpp:139] Memory required for data: 1134800
I0428 19:40:53.980842 24686 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:53.980870 24686 net.cpp:86] Creating Layer relu3
I0428 19:40:53.980873 24686 net.cpp:408] relu3 <- ip3
I0428 19:40:53.980877 24686 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:53.981770 24686 net.cpp:124] Setting up relu3
I0428 19:40:53.981781 24686 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:53.981786 24686 net.cpp:139] Memory required for data: 1138800
I0428 19:40:53.981788 24686 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:53.981793 24686 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:53.981797 24686 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:53.981802 24686 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:53.981808 24686 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:53.981848 24686 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:53.981853 24686 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:53.981856 24686 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:53.981859 24686 net.cpp:139] Memory required for data: 1146800
I0428 19:40:53.981863 24686 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:53.981866 24686 net.cpp:86] Creating Layer accuracy
I0428 19:40:53.981869 24686 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:53.981873 24686 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:53.981878 24686 net.cpp:382] accuracy -> accuracy
I0428 19:40:53.981884 24686 net.cpp:124] Setting up accuracy
I0428 19:40:53.981889 24686 net.cpp:131] Top shape: (1)
I0428 19:40:53.981890 24686 net.cpp:139] Memory required for data: 1146804
I0428 19:40:53.981894 24686 layer_factory.hpp:77] Creating layer loss
I0428 19:40:53.981897 24686 net.cpp:86] Creating Layer loss
I0428 19:40:53.981900 24686 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:53.981904 24686 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:53.981909 24686 net.cpp:382] loss -> loss
I0428 19:40:53.981914 24686 layer_factory.hpp:77] Creating layer loss
I0428 19:40:53.982146 24686 net.cpp:124] Setting up loss
I0428 19:40:53.982158 24686 net.cpp:131] Top shape: (1)
I0428 19:40:53.982162 24686 net.cpp:134]     with loss weight 1
I0428 19:40:53.982168 24686 net.cpp:139] Memory required for data: 1146808
I0428 19:40:53.982183 24686 net.cpp:200] loss needs backward computation.
I0428 19:40:53.982187 24686 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:53.982192 24686 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:53.982195 24686 net.cpp:200] relu3 needs backward computation.
I0428 19:40:53.982197 24686 net.cpp:200] ip3 needs backward computation.
I0428 19:40:53.982200 24686 net.cpp:200] relu2 needs backward computation.
I0428 19:40:53.982203 24686 net.cpp:200] ip2 needs backward computation.
I0428 19:40:53.982220 24686 net.cpp:200] relu1 needs backward computation.
I0428 19:40:53.982223 24686 net.cpp:200] ip1 needs backward computation.
I0428 19:40:53.982226 24686 net.cpp:200] pool1 needs backward computation.
I0428 19:40:53.982229 24686 net.cpp:200] conv1 needs backward computation.
I0428 19:40:53.982239 24686 net.cpp:200] pool0 needs backward computation.
I0428 19:40:53.982241 24686 net.cpp:200] conv0 needs backward computation.
I0428 19:40:53.982245 24686 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:53.982255 24686 net.cpp:202] mnist does not need backward computation.
I0428 19:40:53.982257 24686 net.cpp:244] This network produces output accuracy
I0428 19:40:53.982261 24686 net.cpp:244] This network produces output loss
I0428 19:40:53.982271 24686 net.cpp:257] Network initialization done.
I0428 19:40:53.982311 24686 solver.cpp:56] Solver scaffolding done.
I0428 19:40:53.982650 24686 caffe.cpp:248] Starting Optimization
I0428 19:40:53.982656 24686 solver.cpp:273] Solving LeNet
I0428 19:40:53.982661 24686 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:53.983502 24686 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:53.985644 24686 blocking_queue.cpp:49] Waiting for data
I0428 19:40:54.059483 24693 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:54.060076 24686 solver.cpp:398]     Test net output #0: accuracy = 0.0804
I0428 19:40:54.060113 24686 solver.cpp:398]     Test net output #1: loss = 2.31724 (* 1 = 2.31724 loss)
I0428 19:40:54.062656 24686 solver.cpp:219] Iteration 0 (0 iter/s, 0.0799631s/100 iters), loss = 2.31275
I0428 19:40:54.062695 24686 solver.cpp:238]     Train net output #0: loss = 2.31275 (* 1 = 2.31275 loss)
I0428 19:40:54.062714 24686 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:54.144675 24686 solver.cpp:219] Iteration 100 (1219.93 iter/s, 0.0819722s/100 iters), loss = 0.546095
I0428 19:40:54.144706 24686 solver.cpp:238]     Train net output #0: loss = 0.546095 (* 1 = 0.546095 loss)
I0428 19:40:54.144713 24686 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:54.215365 24686 solver.cpp:219] Iteration 200 (1415.39 iter/s, 0.0706519s/100 iters), loss = 0.19102
I0428 19:40:54.215389 24686 solver.cpp:238]     Train net output #0: loss = 0.19102 (* 1 = 0.19102 loss)
I0428 19:40:54.215395 24686 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:54.285487 24686 solver.cpp:219] Iteration 300 (1426.76 iter/s, 0.0700887s/100 iters), loss = 0.337811
I0428 19:40:54.285513 24686 solver.cpp:238]     Train net output #0: loss = 0.33781 (* 1 = 0.33781 loss)
I0428 19:40:54.285519 24686 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:54.355490 24686 solver.cpp:219] Iteration 400 (1429.22 iter/s, 0.069968s/100 iters), loss = 0.143912
I0428 19:40:54.355515 24686 solver.cpp:238]     Train net output #0: loss = 0.143911 (* 1 = 0.143911 loss)
I0428 19:40:54.355522 24686 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:54.424187 24686 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:54.476984 24693 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:54.477404 24686 solver.cpp:398]     Test net output #0: accuracy = 0.9394
I0428 19:40:54.477423 24686 solver.cpp:398]     Test net output #1: loss = 0.196853 (* 1 = 0.196853 loss)
I0428 19:40:54.478227 24686 solver.cpp:219] Iteration 500 (814.997 iter/s, 0.1227s/100 iters), loss = 0.231898
I0428 19:40:54.478253 24686 solver.cpp:238]     Train net output #0: loss = 0.231898 (* 1 = 0.231898 loss)
I0428 19:40:54.478284 24686 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:54.552727 24686 solver.cpp:219] Iteration 600 (1343.17 iter/s, 0.0744509s/100 iters), loss = 0.275402
I0428 19:40:54.552752 24686 solver.cpp:238]     Train net output #0: loss = 0.275402 (* 1 = 0.275402 loss)
I0428 19:40:54.552759 24686 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:54.624172 24686 solver.cpp:219] Iteration 700 (1400.33 iter/s, 0.0714117s/100 iters), loss = 0.222542
I0428 19:40:54.624197 24686 solver.cpp:238]     Train net output #0: loss = 0.222542 (* 1 = 0.222542 loss)
I0428 19:40:54.624203 24686 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:54.693807 24686 solver.cpp:219] Iteration 800 (1436.73 iter/s, 0.0696023s/100 iters), loss = 0.236677
I0428 19:40:54.693831 24686 solver.cpp:238]     Train net output #0: loss = 0.236676 (* 1 = 0.236676 loss)
I0428 19:40:54.693837 24686 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:54.762846 24686 solver.cpp:219] Iteration 900 (1449.14 iter/s, 0.0690063s/100 iters), loss = 0.182242
I0428 19:40:54.762871 24686 solver.cpp:238]     Train net output #0: loss = 0.182242 (* 1 = 0.182242 loss)
I0428 19:40:54.762877 24686 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:54.786428 24692 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:54.832310 24686 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:54.833063 24686 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:54.833611 24686 solver.cpp:311] Iteration 1000, loss = 0.163995
I0428 19:40:54.833626 24686 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:54.890218 24693 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:54.890627 24686 solver.cpp:398]     Test net output #0: accuracy = 0.9627
I0428 19:40:54.890645 24686 solver.cpp:398]     Test net output #1: loss = 0.116317 (* 1 = 0.116317 loss)
I0428 19:40:54.890650 24686 solver.cpp:316] Optimization Done.
I0428 19:40:54.890652 24686 caffe.cpp:259] Optimization Done.
