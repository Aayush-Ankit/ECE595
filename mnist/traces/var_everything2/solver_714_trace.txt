I0428 19:54:35.046387 28023 caffe.cpp:218] Using GPUs 0
I0428 19:54:35.083907 28023 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:35.598628 28023 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test714.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:35.598784 28023 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test714.prototxt
I0428 19:54:35.599442 28023 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:35.599473 28023 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:35.599634 28023 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:35.599751 28023 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:35.599884 28023 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:35.599918 28023 net.cpp:86] Creating Layer mnist
I0428 19:54:35.599933 28023 net.cpp:382] mnist -> data
I0428 19:54:35.599964 28023 net.cpp:382] mnist -> label
I0428 19:54:35.601541 28023 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:35.604390 28023 net.cpp:124] Setting up mnist
I0428 19:54:35.604408 28023 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:35.604414 28023 net.cpp:131] Top shape: 64 (64)
I0428 19:54:35.604418 28023 net.cpp:139] Memory required for data: 200960
I0428 19:54:35.604425 28023 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:35.604449 28023 net.cpp:86] Creating Layer conv0
I0428 19:54:35.604480 28023 net.cpp:408] conv0 <- data
I0428 19:54:35.604499 28023 net.cpp:382] conv0 -> conv0
I0428 19:54:35.884289 28023 net.cpp:124] Setting up conv0
I0428 19:54:35.884313 28023 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:35.884317 28023 net.cpp:139] Memory required for data: 938240
I0428 19:54:35.884331 28023 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:35.884343 28023 net.cpp:86] Creating Layer pool0
I0428 19:54:35.884347 28023 net.cpp:408] pool0 <- conv0
I0428 19:54:35.884353 28023 net.cpp:382] pool0 -> pool0
I0428 19:54:35.884404 28023 net.cpp:124] Setting up pool0
I0428 19:54:35.884413 28023 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:35.884418 28023 net.cpp:139] Memory required for data: 1122560
I0428 19:54:35.884423 28023 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:35.884435 28023 net.cpp:86] Creating Layer conv1
I0428 19:54:35.884440 28023 net.cpp:408] conv1 <- pool0
I0428 19:54:35.884448 28023 net.cpp:382] conv1 -> conv1
I0428 19:54:35.887706 28023 net.cpp:124] Setting up conv1
I0428 19:54:35.887735 28023 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:35.887739 28023 net.cpp:139] Memory required for data: 2760960
I0428 19:54:35.887748 28023 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:35.887756 28023 net.cpp:86] Creating Layer pool1
I0428 19:54:35.887759 28023 net.cpp:408] pool1 <- conv1
I0428 19:54:35.887763 28023 net.cpp:382] pool1 -> pool1
I0428 19:54:35.887812 28023 net.cpp:124] Setting up pool1
I0428 19:54:35.887821 28023 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:35.887826 28023 net.cpp:139] Memory required for data: 3170560
I0428 19:54:35.887831 28023 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:35.887842 28023 net.cpp:86] Creating Layer ip1
I0428 19:54:35.887847 28023 net.cpp:408] ip1 <- pool1
I0428 19:54:35.887854 28023 net.cpp:382] ip1 -> ip1
I0428 19:54:35.888134 28023 net.cpp:124] Setting up ip1
I0428 19:54:35.888146 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.888150 28023 net.cpp:139] Memory required for data: 3173120
I0428 19:54:35.888178 28023 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:35.888188 28023 net.cpp:86] Creating Layer relu1
I0428 19:54:35.888195 28023 net.cpp:408] relu1 <- ip1
I0428 19:54:35.888200 28023 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:35.888429 28023 net.cpp:124] Setting up relu1
I0428 19:54:35.888443 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.888448 28023 net.cpp:139] Memory required for data: 3175680
I0428 19:54:35.888453 28023 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:35.888479 28023 net.cpp:86] Creating Layer ip2
I0428 19:54:35.888484 28023 net.cpp:408] ip2 <- ip1
I0428 19:54:35.888494 28023 net.cpp:382] ip2 -> ip2
I0428 19:54:35.888634 28023 net.cpp:124] Setting up ip2
I0428 19:54:35.888648 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.888653 28023 net.cpp:139] Memory required for data: 3178240
I0428 19:54:35.888662 28023 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:35.888671 28023 net.cpp:86] Creating Layer relu2
I0428 19:54:35.888677 28023 net.cpp:408] relu2 <- ip2
I0428 19:54:35.888684 28023 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:35.889833 28023 net.cpp:124] Setting up relu2
I0428 19:54:35.889865 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.889870 28023 net.cpp:139] Memory required for data: 3180800
I0428 19:54:35.889876 28023 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:35.889889 28023 net.cpp:86] Creating Layer ip3
I0428 19:54:35.889894 28023 net.cpp:408] ip3 <- ip2
I0428 19:54:35.889904 28023 net.cpp:382] ip3 -> ip3
I0428 19:54:35.890059 28023 net.cpp:124] Setting up ip3
I0428 19:54:35.890070 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.890075 28023 net.cpp:139] Memory required for data: 3183360
I0428 19:54:35.890086 28023 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:35.890094 28023 net.cpp:86] Creating Layer relu3
I0428 19:54:35.890099 28023 net.cpp:408] relu3 <- ip3
I0428 19:54:35.890105 28023 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:35.890362 28023 net.cpp:124] Setting up relu3
I0428 19:54:35.890375 28023 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:35.890380 28023 net.cpp:139] Memory required for data: 3185920
I0428 19:54:35.890385 28023 layer_factory.hpp:77] Creating layer loss
I0428 19:54:35.890393 28023 net.cpp:86] Creating Layer loss
I0428 19:54:35.890413 28023 net.cpp:408] loss <- ip3
I0428 19:54:35.890419 28023 net.cpp:408] loss <- label
I0428 19:54:35.890429 28023 net.cpp:382] loss -> loss
I0428 19:54:35.890449 28023 layer_factory.hpp:77] Creating layer loss
I0428 19:54:35.890811 28023 net.cpp:124] Setting up loss
I0428 19:54:35.890833 28023 net.cpp:131] Top shape: (1)
I0428 19:54:35.890853 28023 net.cpp:134]     with loss weight 1
I0428 19:54:35.890872 28023 net.cpp:139] Memory required for data: 3185924
I0428 19:54:35.890892 28023 net.cpp:200] loss needs backward computation.
I0428 19:54:35.890898 28023 net.cpp:200] relu3 needs backward computation.
I0428 19:54:35.890903 28023 net.cpp:200] ip3 needs backward computation.
I0428 19:54:35.890921 28023 net.cpp:200] relu2 needs backward computation.
I0428 19:54:35.890925 28023 net.cpp:200] ip2 needs backward computation.
I0428 19:54:35.890930 28023 net.cpp:200] relu1 needs backward computation.
I0428 19:54:35.890934 28023 net.cpp:200] ip1 needs backward computation.
I0428 19:54:35.890939 28023 net.cpp:200] pool1 needs backward computation.
I0428 19:54:35.890944 28023 net.cpp:200] conv1 needs backward computation.
I0428 19:54:35.890949 28023 net.cpp:200] pool0 needs backward computation.
I0428 19:54:35.890954 28023 net.cpp:200] conv0 needs backward computation.
I0428 19:54:35.890959 28023 net.cpp:202] mnist does not need backward computation.
I0428 19:54:35.890962 28023 net.cpp:244] This network produces output loss
I0428 19:54:35.890979 28023 net.cpp:257] Network initialization done.
I0428 19:54:35.891511 28023 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test714.prototxt
I0428 19:54:35.891566 28023 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:35.891726 28023 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:54:35.891872 28023 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:35.891953 28023 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:35.891988 28023 net.cpp:86] Creating Layer mnist
I0428 19:54:35.891995 28023 net.cpp:382] mnist -> data
I0428 19:54:35.892007 28023 net.cpp:382] mnist -> label
I0428 19:54:35.892129 28023 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:35.895123 28023 net.cpp:124] Setting up mnist
I0428 19:54:35.895153 28023 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:35.895159 28023 net.cpp:131] Top shape: 100 (100)
I0428 19:54:35.895161 28023 net.cpp:139] Memory required for data: 314000
I0428 19:54:35.895164 28023 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:35.895172 28023 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:35.895175 28023 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:35.895180 28023 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:35.895186 28023 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:35.895254 28023 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:35.895265 28023 net.cpp:131] Top shape: 100 (100)
I0428 19:54:35.895272 28023 net.cpp:131] Top shape: 100 (100)
I0428 19:54:35.895277 28023 net.cpp:139] Memory required for data: 314800
I0428 19:54:35.895282 28023 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:35.895294 28023 net.cpp:86] Creating Layer conv0
I0428 19:54:35.895300 28023 net.cpp:408] conv0 <- data
I0428 19:54:35.895309 28023 net.cpp:382] conv0 -> conv0
I0428 19:54:35.897339 28023 net.cpp:124] Setting up conv0
I0428 19:54:35.897369 28023 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:35.897373 28023 net.cpp:139] Memory required for data: 1466800
I0428 19:54:35.897382 28023 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:35.897390 28023 net.cpp:86] Creating Layer pool0
I0428 19:54:35.897395 28023 net.cpp:408] pool0 <- conv0
I0428 19:54:35.897403 28023 net.cpp:382] pool0 -> pool0
I0428 19:54:35.897452 28023 net.cpp:124] Setting up pool0
I0428 19:54:35.897464 28023 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:35.897469 28023 net.cpp:139] Memory required for data: 1754800
I0428 19:54:35.897475 28023 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:35.897487 28023 net.cpp:86] Creating Layer conv1
I0428 19:54:35.897493 28023 net.cpp:408] conv1 <- pool0
I0428 19:54:35.897502 28023 net.cpp:382] conv1 -> conv1
I0428 19:54:35.899680 28023 net.cpp:124] Setting up conv1
I0428 19:54:35.899693 28023 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:35.899713 28023 net.cpp:139] Memory required for data: 4314800
I0428 19:54:35.899721 28023 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:35.899727 28023 net.cpp:86] Creating Layer pool1
I0428 19:54:35.899732 28023 net.cpp:408] pool1 <- conv1
I0428 19:54:35.899742 28023 net.cpp:382] pool1 -> pool1
I0428 19:54:35.899792 28023 net.cpp:124] Setting up pool1
I0428 19:54:35.899803 28023 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:35.899809 28023 net.cpp:139] Memory required for data: 4954800
I0428 19:54:35.899816 28023 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:35.899826 28023 net.cpp:86] Creating Layer ip1
I0428 19:54:35.899832 28023 net.cpp:408] ip1 <- pool1
I0428 19:54:35.899842 28023 net.cpp:382] ip1 -> ip1
I0428 19:54:35.900146 28023 net.cpp:124] Setting up ip1
I0428 19:54:35.900157 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.900177 28023 net.cpp:139] Memory required for data: 4958800
I0428 19:54:35.900199 28023 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:35.900208 28023 net.cpp:86] Creating Layer relu1
I0428 19:54:35.900215 28023 net.cpp:408] relu1 <- ip1
I0428 19:54:35.900223 28023 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:35.900542 28023 net.cpp:124] Setting up relu1
I0428 19:54:35.900555 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.900560 28023 net.cpp:139] Memory required for data: 4962800
I0428 19:54:35.900565 28023 layer_factory.hpp:77] Creating layer ip2
I0428 19:54:35.900576 28023 net.cpp:86] Creating Layer ip2
I0428 19:54:35.900581 28023 net.cpp:408] ip2 <- ip1
I0428 19:54:35.900591 28023 net.cpp:382] ip2 -> ip2
I0428 19:54:35.900727 28023 net.cpp:124] Setting up ip2
I0428 19:54:35.900738 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.900743 28023 net.cpp:139] Memory required for data: 4966800
I0428 19:54:35.900753 28023 layer_factory.hpp:77] Creating layer relu2
I0428 19:54:35.900779 28023 net.cpp:86] Creating Layer relu2
I0428 19:54:35.900784 28023 net.cpp:408] relu2 <- ip2
I0428 19:54:35.900792 28023 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:54:35.901063 28023 net.cpp:124] Setting up relu2
I0428 19:54:35.901078 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.901085 28023 net.cpp:139] Memory required for data: 4970800
I0428 19:54:35.901090 28023 layer_factory.hpp:77] Creating layer ip3
I0428 19:54:35.901101 28023 net.cpp:86] Creating Layer ip3
I0428 19:54:35.901108 28023 net.cpp:408] ip3 <- ip2
I0428 19:54:35.901130 28023 net.cpp:382] ip3 -> ip3
I0428 19:54:35.901278 28023 net.cpp:124] Setting up ip3
I0428 19:54:35.901288 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.901293 28023 net.cpp:139] Memory required for data: 4974800
I0428 19:54:35.901305 28023 layer_factory.hpp:77] Creating layer relu3
I0428 19:54:35.901314 28023 net.cpp:86] Creating Layer relu3
I0428 19:54:35.901319 28023 net.cpp:408] relu3 <- ip3
I0428 19:54:35.901326 28023 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:54:35.902601 28023 net.cpp:124] Setting up relu3
I0428 19:54:35.902631 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.902637 28023 net.cpp:139] Memory required for data: 4978800
I0428 19:54:35.902642 28023 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:54:35.902652 28023 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:54:35.902657 28023 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:54:35.902664 28023 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:54:35.902673 28023 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:54:35.902722 28023 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:54:35.902734 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.902740 28023 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:35.902745 28023 net.cpp:139] Memory required for data: 4986800
I0428 19:54:35.902750 28023 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:35.902763 28023 net.cpp:86] Creating Layer accuracy
I0428 19:54:35.902770 28023 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:54:35.902776 28023 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:35.902783 28023 net.cpp:382] accuracy -> accuracy
I0428 19:54:35.902793 28023 net.cpp:124] Setting up accuracy
I0428 19:54:35.902799 28023 net.cpp:131] Top shape: (1)
I0428 19:54:35.902804 28023 net.cpp:139] Memory required for data: 4986804
I0428 19:54:35.902808 28023 layer_factory.hpp:77] Creating layer loss
I0428 19:54:35.902815 28023 net.cpp:86] Creating Layer loss
I0428 19:54:35.902822 28023 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:54:35.902827 28023 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:35.902835 28023 net.cpp:382] loss -> loss
I0428 19:54:35.902844 28023 layer_factory.hpp:77] Creating layer loss
I0428 19:54:35.903272 28023 net.cpp:124] Setting up loss
I0428 19:54:35.903303 28023 net.cpp:131] Top shape: (1)
I0428 19:54:35.903309 28023 net.cpp:134]     with loss weight 1
I0428 19:54:35.903332 28023 net.cpp:139] Memory required for data: 4986808
I0428 19:54:35.903357 28023 net.cpp:200] loss needs backward computation.
I0428 19:54:35.903363 28023 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:35.903370 28023 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:54:35.903381 28023 net.cpp:200] relu3 needs backward computation.
I0428 19:54:35.903386 28023 net.cpp:200] ip3 needs backward computation.
I0428 19:54:35.903393 28023 net.cpp:200] relu2 needs backward computation.
I0428 19:54:35.903398 28023 net.cpp:200] ip2 needs backward computation.
I0428 19:54:35.903403 28023 net.cpp:200] relu1 needs backward computation.
I0428 19:54:35.903409 28023 net.cpp:200] ip1 needs backward computation.
I0428 19:54:35.903414 28023 net.cpp:200] pool1 needs backward computation.
I0428 19:54:35.903420 28023 net.cpp:200] conv1 needs backward computation.
I0428 19:54:35.903425 28023 net.cpp:200] pool0 needs backward computation.
I0428 19:54:35.903432 28023 net.cpp:200] conv0 needs backward computation.
I0428 19:54:35.903439 28023 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:35.903457 28023 net.cpp:202] mnist does not need backward computation.
I0428 19:54:35.903462 28023 net.cpp:244] This network produces output accuracy
I0428 19:54:35.903468 28023 net.cpp:244] This network produces output loss
I0428 19:54:35.903488 28023 net.cpp:257] Network initialization done.
I0428 19:54:35.903559 28023 solver.cpp:56] Solver scaffolding done.
I0428 19:54:35.904170 28023 caffe.cpp:248] Starting Optimization
I0428 19:54:35.904181 28023 solver.cpp:273] Solving LeNet
I0428 19:54:35.904186 28023 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:35.904464 28023 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:35.910794 28023 blocking_queue.cpp:49] Waiting for data
I0428 19:54:35.977746 28030 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:35.978507 28023 solver.cpp:398]     Test net output #0: accuracy = 0.0846
I0428 19:54:35.978530 28023 solver.cpp:398]     Test net output #1: loss = 2.29187 (* 1 = 2.29187 loss)
I0428 19:54:35.982429 28023 solver.cpp:219] Iteration 0 (-1.6137e-31 iter/s, 0.0782141s/100 iters), loss = 2.29372
I0428 19:54:35.982471 28023 solver.cpp:238]     Train net output #0: loss = 2.29372 (* 1 = 2.29372 loss)
I0428 19:54:35.982482 28023 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:36.127481 28023 solver.cpp:219] Iteration 100 (689.672 iter/s, 0.144996s/100 iters), loss = 1.5277
I0428 19:54:36.127522 28023 solver.cpp:238]     Train net output #0: loss = 1.5277 (* 1 = 1.5277 loss)
I0428 19:54:36.127543 28023 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:36.271234 28023 solver.cpp:219] Iteration 200 (695.82 iter/s, 0.143715s/100 iters), loss = 0.413143
I0428 19:54:36.271275 28023 solver.cpp:238]     Train net output #0: loss = 0.413143 (* 1 = 0.413143 loss)
I0428 19:54:36.271281 28023 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:36.415762 28023 solver.cpp:219] Iteration 300 (692.092 iter/s, 0.144489s/100 iters), loss = 0.259436
I0428 19:54:36.415794 28023 solver.cpp:238]     Train net output #0: loss = 0.259435 (* 1 = 0.259435 loss)
I0428 19:54:36.415802 28023 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:36.560523 28023 solver.cpp:219] Iteration 400 (691.005 iter/s, 0.144717s/100 iters), loss = 0.20848
I0428 19:54:36.560564 28023 solver.cpp:238]     Train net output #0: loss = 0.20848 (* 1 = 0.20848 loss)
I0428 19:54:36.560570 28023 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:36.704644 28023 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:36.758188 28030 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:36.760128 28023 solver.cpp:398]     Test net output #0: accuracy = 0.9498
I0428 19:54:36.760149 28023 solver.cpp:398]     Test net output #1: loss = 0.180227 (* 1 = 0.180227 loss)
I0428 19:54:36.761730 28023 solver.cpp:219] Iteration 500 (497.135 iter/s, 0.201153s/100 iters), loss = 0.20046
I0428 19:54:36.761770 28023 solver.cpp:238]     Train net output #0: loss = 0.20046 (* 1 = 0.20046 loss)
I0428 19:54:36.761791 28023 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:36.910905 28023 solver.cpp:219] Iteration 600 (670.527 iter/s, 0.149136s/100 iters), loss = 0.120697
I0428 19:54:36.910946 28023 solver.cpp:238]     Train net output #0: loss = 0.120697 (* 1 = 0.120697 loss)
I0428 19:54:36.910953 28023 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:37.063781 28023 solver.cpp:219] Iteration 700 (654.31 iter/s, 0.152833s/100 iters), loss = 0.256049
I0428 19:54:37.063814 28023 solver.cpp:238]     Train net output #0: loss = 0.256049 (* 1 = 0.256049 loss)
I0428 19:54:37.063822 28023 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:37.212867 28023 solver.cpp:219] Iteration 800 (670.956 iter/s, 0.149041s/100 iters), loss = 0.333572
I0428 19:54:37.212910 28023 solver.cpp:238]     Train net output #0: loss = 0.333572 (* 1 = 0.333572 loss)
I0428 19:54:37.212918 28023 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:37.360477 28023 solver.cpp:219] Iteration 900 (677.641 iter/s, 0.147571s/100 iters), loss = 0.190482
I0428 19:54:37.360517 28023 solver.cpp:238]     Train net output #0: loss = 0.190482 (* 1 = 0.190482 loss)
I0428 19:54:37.360524 28023 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:37.408385 28029 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:37.503017 28023 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:37.504907 28023 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:37.505893 28023 solver.cpp:311] Iteration 1000, loss = 0.126633
I0428 19:54:37.505913 28023 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:37.581918 28030 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:37.582638 28023 solver.cpp:398]     Test net output #0: accuracy = 0.9685
I0428 19:54:37.582679 28023 solver.cpp:398]     Test net output #1: loss = 0.102503 (* 1 = 0.102503 loss)
I0428 19:54:37.582686 28023 solver.cpp:316] Optimization Done.
I0428 19:54:37.582693 28023 caffe.cpp:259] Optimization Done.
