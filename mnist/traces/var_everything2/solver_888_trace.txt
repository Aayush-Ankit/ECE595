I0428 20:00:52.756393 29602 caffe.cpp:218] Using GPUs 0
I0428 20:00:52.786351 29602 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:00:53.236490 29602 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test888.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:00:53.236632 29602 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test888.prototxt
I0428 20:00:53.237040 29602 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:00:53.237071 29602 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:00:53.237166 29602 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:00:53.237251 29602 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:53.237331 29602 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:00:53.237349 29602 net.cpp:86] Creating Layer mnist
I0428 20:00:53.237355 29602 net.cpp:382] mnist -> data
I0428 20:00:53.237373 29602 net.cpp:382] mnist -> label
I0428 20:00:53.238276 29602 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:00:53.240481 29602 net.cpp:124] Setting up mnist
I0428 20:00:53.240510 29602 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:00:53.240515 29602 net.cpp:131] Top shape: 64 (64)
I0428 20:00:53.240519 29602 net.cpp:139] Memory required for data: 200960
I0428 20:00:53.240525 29602 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:53.240536 29602 net.cpp:86] Creating Layer conv0
I0428 20:00:53.240552 29602 net.cpp:408] conv0 <- data
I0428 20:00:53.240563 29602 net.cpp:382] conv0 -> conv0
I0428 20:00:53.474485 29602 net.cpp:124] Setting up conv0
I0428 20:00:53.474529 29602 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:00:53.474532 29602 net.cpp:139] Memory required for data: 1675520
I0428 20:00:53.474548 29602 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:53.474561 29602 net.cpp:86] Creating Layer pool0
I0428 20:00:53.474565 29602 net.cpp:408] pool0 <- conv0
I0428 20:00:53.474586 29602 net.cpp:382] pool0 -> pool0
I0428 20:00:53.474633 29602 net.cpp:124] Setting up pool0
I0428 20:00:53.474649 29602 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:00:53.474653 29602 net.cpp:139] Memory required for data: 2044160
I0428 20:00:53.474655 29602 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:53.474666 29602 net.cpp:86] Creating Layer conv1
I0428 20:00:53.474684 29602 net.cpp:408] conv1 <- pool0
I0428 20:00:53.474689 29602 net.cpp:382] conv1 -> conv1
I0428 20:00:53.477604 29602 net.cpp:124] Setting up conv1
I0428 20:00:53.477634 29602 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:00:53.477638 29602 net.cpp:139] Memory required for data: 2453760
I0428 20:00:53.477663 29602 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:53.477670 29602 net.cpp:86] Creating Layer pool1
I0428 20:00:53.477674 29602 net.cpp:408] pool1 <- conv1
I0428 20:00:53.477679 29602 net.cpp:382] pool1 -> pool1
I0428 20:00:53.477732 29602 net.cpp:124] Setting up pool1
I0428 20:00:53.477738 29602 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:00:53.477741 29602 net.cpp:139] Memory required for data: 2556160
I0428 20:00:53.477744 29602 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:53.477751 29602 net.cpp:86] Creating Layer ip1
I0428 20:00:53.477754 29602 net.cpp:408] ip1 <- pool1
I0428 20:00:53.477758 29602 net.cpp:382] ip1 -> ip1
I0428 20:00:53.477996 29602 net.cpp:124] Setting up ip1
I0428 20:00:53.478004 29602 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:00:53.478008 29602 net.cpp:139] Memory required for data: 2568960
I0428 20:00:53.478014 29602 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:53.478019 29602 net.cpp:86] Creating Layer relu1
I0428 20:00:53.478022 29602 net.cpp:408] relu1 <- ip1
I0428 20:00:53.478026 29602 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:53.478184 29602 net.cpp:124] Setting up relu1
I0428 20:00:53.478193 29602 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:00:53.478196 29602 net.cpp:139] Memory required for data: 2581760
I0428 20:00:53.478199 29602 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:53.478204 29602 net.cpp:86] Creating Layer ip2
I0428 20:00:53.478207 29602 net.cpp:408] ip2 <- ip1
I0428 20:00:53.478212 29602 net.cpp:382] ip2 -> ip2
I0428 20:00:53.478303 29602 net.cpp:124] Setting up ip2
I0428 20:00:53.478310 29602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:53.478313 29602 net.cpp:139] Memory required for data: 2584320
I0428 20:00:53.478318 29602 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:53.478324 29602 net.cpp:86] Creating Layer relu2
I0428 20:00:53.478327 29602 net.cpp:408] relu2 <- ip2
I0428 20:00:53.478330 29602 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:53.479154 29602 net.cpp:124] Setting up relu2
I0428 20:00:53.479166 29602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:53.479185 29602 net.cpp:139] Memory required for data: 2586880
I0428 20:00:53.479188 29602 layer_factory.hpp:77] Creating layer ip3
I0428 20:00:53.479195 29602 net.cpp:86] Creating Layer ip3
I0428 20:00:53.479198 29602 net.cpp:408] ip3 <- ip2
I0428 20:00:53.479204 29602 net.cpp:382] ip3 -> ip3
I0428 20:00:53.479300 29602 net.cpp:124] Setting up ip3
I0428 20:00:53.479307 29602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:53.479310 29602 net.cpp:139] Memory required for data: 2589440
I0428 20:00:53.479317 29602 layer_factory.hpp:77] Creating layer relu3
I0428 20:00:53.479322 29602 net.cpp:86] Creating Layer relu3
I0428 20:00:53.479326 29602 net.cpp:408] relu3 <- ip3
I0428 20:00:53.479329 29602 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:00:53.479506 29602 net.cpp:124] Setting up relu3
I0428 20:00:53.479514 29602 net.cpp:131] Top shape: 64 10 (640)
I0428 20:00:53.479517 29602 net.cpp:139] Memory required for data: 2592000
I0428 20:00:53.479521 29602 layer_factory.hpp:77] Creating layer loss
I0428 20:00:53.479527 29602 net.cpp:86] Creating Layer loss
I0428 20:00:53.479531 29602 net.cpp:408] loss <- ip3
I0428 20:00:53.479534 29602 net.cpp:408] loss <- label
I0428 20:00:53.479539 29602 net.cpp:382] loss -> loss
I0428 20:00:53.479553 29602 layer_factory.hpp:77] Creating layer loss
I0428 20:00:53.479787 29602 net.cpp:124] Setting up loss
I0428 20:00:53.479796 29602 net.cpp:131] Top shape: (1)
I0428 20:00:53.479799 29602 net.cpp:134]     with loss weight 1
I0428 20:00:53.479813 29602 net.cpp:139] Memory required for data: 2592004
I0428 20:00:53.479817 29602 net.cpp:200] loss needs backward computation.
I0428 20:00:53.479821 29602 net.cpp:200] relu3 needs backward computation.
I0428 20:00:53.479825 29602 net.cpp:200] ip3 needs backward computation.
I0428 20:00:53.479827 29602 net.cpp:200] relu2 needs backward computation.
I0428 20:00:53.479830 29602 net.cpp:200] ip2 needs backward computation.
I0428 20:00:53.479832 29602 net.cpp:200] relu1 needs backward computation.
I0428 20:00:53.479835 29602 net.cpp:200] ip1 needs backward computation.
I0428 20:00:53.479838 29602 net.cpp:200] pool1 needs backward computation.
I0428 20:00:53.479841 29602 net.cpp:200] conv1 needs backward computation.
I0428 20:00:53.479845 29602 net.cpp:200] pool0 needs backward computation.
I0428 20:00:53.479863 29602 net.cpp:200] conv0 needs backward computation.
I0428 20:00:53.479867 29602 net.cpp:202] mnist does not need backward computation.
I0428 20:00:53.479871 29602 net.cpp:244] This network produces output loss
I0428 20:00:53.479879 29602 net.cpp:257] Network initialization done.
I0428 20:00:53.480293 29602 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test888.prototxt
I0428 20:00:53.480335 29602 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:00:53.480444 29602 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:00:53.480537 29602 layer_factory.hpp:77] Creating layer mnist
I0428 20:00:53.480582 29602 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:00:53.480594 29602 net.cpp:86] Creating Layer mnist
I0428 20:00:53.480598 29602 net.cpp:382] mnist -> data
I0428 20:00:53.480607 29602 net.cpp:382] mnist -> label
I0428 20:00:53.480686 29602 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:00:53.482882 29602 net.cpp:124] Setting up mnist
I0428 20:00:53.482913 29602 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:00:53.482918 29602 net.cpp:131] Top shape: 100 (100)
I0428 20:00:53.482921 29602 net.cpp:139] Memory required for data: 314000
I0428 20:00:53.482925 29602 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:00:53.482931 29602 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:00:53.482935 29602 net.cpp:408] label_mnist_1_split <- label
I0428 20:00:53.482940 29602 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:00:53.482947 29602 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:00:53.482998 29602 net.cpp:124] Setting up label_mnist_1_split
I0428 20:00:53.483005 29602 net.cpp:131] Top shape: 100 (100)
I0428 20:00:53.483008 29602 net.cpp:131] Top shape: 100 (100)
I0428 20:00:53.483011 29602 net.cpp:139] Memory required for data: 314800
I0428 20:00:53.483014 29602 layer_factory.hpp:77] Creating layer conv0
I0428 20:00:53.483022 29602 net.cpp:86] Creating Layer conv0
I0428 20:00:53.483026 29602 net.cpp:408] conv0 <- data
I0428 20:00:53.483031 29602 net.cpp:382] conv0 -> conv0
I0428 20:00:53.484956 29602 net.cpp:124] Setting up conv0
I0428 20:00:53.484972 29602 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:00:53.484975 29602 net.cpp:139] Memory required for data: 2618800
I0428 20:00:53.484987 29602 layer_factory.hpp:77] Creating layer pool0
I0428 20:00:53.484992 29602 net.cpp:86] Creating Layer pool0
I0428 20:00:53.484997 29602 net.cpp:408] pool0 <- conv0
I0428 20:00:53.485002 29602 net.cpp:382] pool0 -> pool0
I0428 20:00:53.485040 29602 net.cpp:124] Setting up pool0
I0428 20:00:53.485046 29602 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:00:53.485049 29602 net.cpp:139] Memory required for data: 3194800
I0428 20:00:53.485054 29602 layer_factory.hpp:77] Creating layer conv1
I0428 20:00:53.485061 29602 net.cpp:86] Creating Layer conv1
I0428 20:00:53.485065 29602 net.cpp:408] conv1 <- pool0
I0428 20:00:53.485070 29602 net.cpp:382] conv1 -> conv1
I0428 20:00:53.487335 29602 net.cpp:124] Setting up conv1
I0428 20:00:53.487349 29602 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:00:53.487352 29602 net.cpp:139] Memory required for data: 3834800
I0428 20:00:53.487361 29602 layer_factory.hpp:77] Creating layer pool1
I0428 20:00:53.487367 29602 net.cpp:86] Creating Layer pool1
I0428 20:00:53.487386 29602 net.cpp:408] pool1 <- conv1
I0428 20:00:53.487391 29602 net.cpp:382] pool1 -> pool1
I0428 20:00:53.487428 29602 net.cpp:124] Setting up pool1
I0428 20:00:53.487454 29602 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:00:53.487473 29602 net.cpp:139] Memory required for data: 3994800
I0428 20:00:53.487485 29602 layer_factory.hpp:77] Creating layer ip1
I0428 20:00:53.487491 29602 net.cpp:86] Creating Layer ip1
I0428 20:00:53.487495 29602 net.cpp:408] ip1 <- pool1
I0428 20:00:53.487500 29602 net.cpp:382] ip1 -> ip1
I0428 20:00:53.487737 29602 net.cpp:124] Setting up ip1
I0428 20:00:53.487746 29602 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:00:53.487759 29602 net.cpp:139] Memory required for data: 4014800
I0428 20:00:53.487767 29602 layer_factory.hpp:77] Creating layer relu1
I0428 20:00:53.487772 29602 net.cpp:86] Creating Layer relu1
I0428 20:00:53.487776 29602 net.cpp:408] relu1 <- ip1
I0428 20:00:53.487795 29602 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:00:53.487992 29602 net.cpp:124] Setting up relu1
I0428 20:00:53.488001 29602 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:00:53.488004 29602 net.cpp:139] Memory required for data: 4034800
I0428 20:00:53.488008 29602 layer_factory.hpp:77] Creating layer ip2
I0428 20:00:53.488021 29602 net.cpp:86] Creating Layer ip2
I0428 20:00:53.488025 29602 net.cpp:408] ip2 <- ip1
I0428 20:00:53.488035 29602 net.cpp:382] ip2 -> ip2
I0428 20:00:53.488131 29602 net.cpp:124] Setting up ip2
I0428 20:00:53.488138 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.488142 29602 net.cpp:139] Memory required for data: 4038800
I0428 20:00:53.488147 29602 layer_factory.hpp:77] Creating layer relu2
I0428 20:00:53.488150 29602 net.cpp:86] Creating Layer relu2
I0428 20:00:53.488164 29602 net.cpp:408] relu2 <- ip2
I0428 20:00:53.488169 29602 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:00:53.488309 29602 net.cpp:124] Setting up relu2
I0428 20:00:53.488317 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.488320 29602 net.cpp:139] Memory required for data: 4042800
I0428 20:00:53.488323 29602 layer_factory.hpp:77] Creating layer ip3
I0428 20:00:53.488328 29602 net.cpp:86] Creating Layer ip3
I0428 20:00:53.488332 29602 net.cpp:408] ip3 <- ip2
I0428 20:00:53.488335 29602 net.cpp:382] ip3 -> ip3
I0428 20:00:53.488474 29602 net.cpp:124] Setting up ip3
I0428 20:00:53.488481 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.488486 29602 net.cpp:139] Memory required for data: 4046800
I0428 20:00:53.488492 29602 layer_factory.hpp:77] Creating layer relu3
I0428 20:00:53.488508 29602 net.cpp:86] Creating Layer relu3
I0428 20:00:53.488518 29602 net.cpp:408] relu3 <- ip3
I0428 20:00:53.488523 29602 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:00:53.489418 29602 net.cpp:124] Setting up relu3
I0428 20:00:53.489430 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.489434 29602 net.cpp:139] Memory required for data: 4050800
I0428 20:00:53.489437 29602 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:00:53.489442 29602 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:00:53.489445 29602 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:00:53.489450 29602 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:00:53.489457 29602 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:00:53.489500 29602 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:00:53.489504 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.489508 29602 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:00:53.489511 29602 net.cpp:139] Memory required for data: 4058800
I0428 20:00:53.489513 29602 layer_factory.hpp:77] Creating layer accuracy
I0428 20:00:53.489519 29602 net.cpp:86] Creating Layer accuracy
I0428 20:00:53.489522 29602 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:00:53.489532 29602 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:00:53.489537 29602 net.cpp:382] accuracy -> accuracy
I0428 20:00:53.489549 29602 net.cpp:124] Setting up accuracy
I0428 20:00:53.489552 29602 net.cpp:131] Top shape: (1)
I0428 20:00:53.489555 29602 net.cpp:139] Memory required for data: 4058804
I0428 20:00:53.489558 29602 layer_factory.hpp:77] Creating layer loss
I0428 20:00:53.489564 29602 net.cpp:86] Creating Layer loss
I0428 20:00:53.489567 29602 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:00:53.489570 29602 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:00:53.489574 29602 net.cpp:382] loss -> loss
I0428 20:00:53.489580 29602 layer_factory.hpp:77] Creating layer loss
I0428 20:00:53.489835 29602 net.cpp:124] Setting up loss
I0428 20:00:53.489843 29602 net.cpp:131] Top shape: (1)
I0428 20:00:53.489847 29602 net.cpp:134]     with loss weight 1
I0428 20:00:53.489879 29602 net.cpp:139] Memory required for data: 4058808
I0428 20:00:53.489883 29602 net.cpp:200] loss needs backward computation.
I0428 20:00:53.489887 29602 net.cpp:202] accuracy does not need backward computation.
I0428 20:00:53.489892 29602 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:00:53.489894 29602 net.cpp:200] relu3 needs backward computation.
I0428 20:00:53.489897 29602 net.cpp:200] ip3 needs backward computation.
I0428 20:00:53.489900 29602 net.cpp:200] relu2 needs backward computation.
I0428 20:00:53.489903 29602 net.cpp:200] ip2 needs backward computation.
I0428 20:00:53.489917 29602 net.cpp:200] relu1 needs backward computation.
I0428 20:00:53.489920 29602 net.cpp:200] ip1 needs backward computation.
I0428 20:00:53.489923 29602 net.cpp:200] pool1 needs backward computation.
I0428 20:00:53.489928 29602 net.cpp:200] conv1 needs backward computation.
I0428 20:00:53.489931 29602 net.cpp:200] pool0 needs backward computation.
I0428 20:00:53.489934 29602 net.cpp:200] conv0 needs backward computation.
I0428 20:00:53.489938 29602 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:00:53.489943 29602 net.cpp:202] mnist does not need backward computation.
I0428 20:00:53.489946 29602 net.cpp:244] This network produces output accuracy
I0428 20:00:53.489951 29602 net.cpp:244] This network produces output loss
I0428 20:00:53.489962 29602 net.cpp:257] Network initialization done.
I0428 20:00:53.490020 29602 solver.cpp:56] Solver scaffolding done.
I0428 20:00:53.490386 29602 caffe.cpp:248] Starting Optimization
I0428 20:00:53.490392 29602 solver.cpp:273] Solving LeNet
I0428 20:00:53.490396 29602 solver.cpp:274] Learning Rate Policy: inv
I0428 20:00:53.491245 29602 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:00:53.495649 29602 blocking_queue.cpp:49] Waiting for data
I0428 20:00:53.563253 29609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:53.563817 29602 solver.cpp:398]     Test net output #0: accuracy = 0.0719
I0428 20:00:53.563835 29602 solver.cpp:398]     Test net output #1: loss = 2.31043 (* 1 = 2.31043 loss)
I0428 20:00:53.566431 29602 solver.cpp:219] Iteration 0 (0 iter/s, 0.0760095s/100 iters), loss = 2.31567
I0428 20:00:53.566457 29602 solver.cpp:238]     Train net output #0: loss = 2.31567 (* 1 = 2.31567 loss)
I0428 20:00:53.566468 29602 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:00:53.667642 29602 solver.cpp:219] Iteration 100 (988.414 iter/s, 0.101172s/100 iters), loss = 1.73346
I0428 20:00:53.667666 29602 solver.cpp:238]     Train net output #0: loss = 1.73346 (* 1 = 1.73346 loss)
I0428 20:00:53.667688 29602 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:00:53.758416 29602 solver.cpp:219] Iteration 200 (1102.04 iter/s, 0.0907407s/100 iters), loss = 1.34319
I0428 20:00:53.758440 29602 solver.cpp:238]     Train net output #0: loss = 1.34319 (* 1 = 1.34319 loss)
I0428 20:00:53.758466 29602 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:00:53.847406 29602 solver.cpp:219] Iteration 300 (1124.14 iter/s, 0.0889569s/100 iters), loss = 1.87578
I0428 20:00:53.847429 29602 solver.cpp:238]     Train net output #0: loss = 1.87578 (* 1 = 1.87578 loss)
I0428 20:00:53.847451 29602 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:00:53.936523 29602 solver.cpp:219] Iteration 400 (1122.55 iter/s, 0.0890829s/100 iters), loss = 1.38776
I0428 20:00:53.936549 29602 solver.cpp:238]     Train net output #0: loss = 1.38776 (* 1 = 1.38776 loss)
I0428 20:00:53.936571 29602 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:00:54.025068 29602 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:00:54.100680 29609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:54.101311 29602 solver.cpp:398]     Test net output #0: accuracy = 0.5512
I0428 20:00:54.101331 29602 solver.cpp:398]     Test net output #1: loss = 1.27668 (* 1 = 1.27668 loss)
I0428 20:00:54.102268 29602 solver.cpp:219] Iteration 500 (603.48 iter/s, 0.165706s/100 iters), loss = 1.07611
I0428 20:00:54.102324 29602 solver.cpp:238]     Train net output #0: loss = 1.07611 (* 1 = 1.07611 loss)
I0428 20:00:54.102346 29602 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:00:54.199261 29602 solver.cpp:219] Iteration 600 (1031.68 iter/s, 0.0969289s/100 iters), loss = 1.10275
I0428 20:00:54.199288 29602 solver.cpp:238]     Train net output #0: loss = 1.10275 (* 1 = 1.10275 loss)
I0428 20:00:54.199295 29602 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:00:54.296314 29602 solver.cpp:219] Iteration 700 (1030.75 iter/s, 0.0970168s/100 iters), loss = 1.18256
I0428 20:00:54.296340 29602 solver.cpp:238]     Train net output #0: loss = 1.18256 (* 1 = 1.18256 loss)
I0428 20:00:54.296363 29602 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:00:54.387704 29602 solver.cpp:219] Iteration 800 (1094.63 iter/s, 0.0913551s/100 iters), loss = 1.11061
I0428 20:00:54.387730 29602 solver.cpp:238]     Train net output #0: loss = 1.11061 (* 1 = 1.11061 loss)
I0428 20:00:54.387753 29602 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:00:54.489378 29602 solver.cpp:219] Iteration 900 (983.892 iter/s, 0.101637s/100 iters), loss = 1.17858
I0428 20:00:54.489423 29602 solver.cpp:238]     Train net output #0: loss = 1.17858 (* 1 = 1.17858 loss)
I0428 20:00:54.489434 29602 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:00:54.522524 29608 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:54.585124 29602 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:00:54.586313 29602 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:00:54.586982 29602 solver.cpp:311] Iteration 1000, loss = 1.13007
I0428 20:00:54.586998 29602 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:00:54.663125 29609 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:00:54.664067 29602 solver.cpp:398]     Test net output #0: accuracy = 0.6723
I0428 20:00:54.664109 29602 solver.cpp:398]     Test net output #1: loss = 1.0339 (* 1 = 1.0339 loss)
I0428 20:00:54.664119 29602 solver.cpp:316] Optimization Done.
I0428 20:00:54.664125 29602 caffe.cpp:259] Optimization Done.
