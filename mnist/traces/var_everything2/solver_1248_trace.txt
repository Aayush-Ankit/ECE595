I0428 20:15:30.704625   460 caffe.cpp:218] Using GPUs 0
I0428 20:15:30.742564   460 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:15:31.197826   460 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1248.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:15:31.197957   460 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1248.prototxt
I0428 20:15:31.198245   460 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:15:31.198257   460 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:15:31.198323   460 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:15:31.198379   460 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:31.198472   460 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:15:31.198492   460 net.cpp:86] Creating Layer mnist
I0428 20:15:31.198498   460 net.cpp:382] mnist -> data
I0428 20:15:31.198514   460 net.cpp:382] mnist -> label
I0428 20:15:31.199421   460 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:15:31.201851   460 net.cpp:124] Setting up mnist
I0428 20:15:31.201881   460 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:15:31.201886   460 net.cpp:131] Top shape: 64 (64)
I0428 20:15:31.201889   460 net.cpp:139] Memory required for data: 200960
I0428 20:15:31.201895   460 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:31.201934   460 net.cpp:86] Creating Layer conv0
I0428 20:15:31.201959   460 net.cpp:408] conv0 <- data
I0428 20:15:31.201969   460 net.cpp:382] conv0 -> conv0
I0428 20:15:31.430493   460 net.cpp:124] Setting up conv0
I0428 20:15:31.430521   460 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:15:31.430524   460 net.cpp:139] Memory required for data: 7573760
I0428 20:15:31.430538   460 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:31.430549   460 net.cpp:86] Creating Layer pool0
I0428 20:15:31.430553   460 net.cpp:408] pool0 <- conv0
I0428 20:15:31.430558   460 net.cpp:382] pool0 -> pool0
I0428 20:15:31.430618   460 net.cpp:124] Setting up pool0
I0428 20:15:31.430622   460 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:15:31.430639   460 net.cpp:139] Memory required for data: 9416960
I0428 20:15:31.430642   460 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:31.430654   460 net.cpp:86] Creating Layer conv1
I0428 20:15:31.430656   460 net.cpp:408] conv1 <- pool0
I0428 20:15:31.430660   460 net.cpp:382] conv1 -> conv1
I0428 20:15:31.433492   460 net.cpp:124] Setting up conv1
I0428 20:15:31.433523   460 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:15:31.433527   460 net.cpp:139] Memory required for data: 9498880
I0428 20:15:31.433535   460 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:31.433542   460 net.cpp:86] Creating Layer pool1
I0428 20:15:31.433547   460 net.cpp:408] pool1 <- conv1
I0428 20:15:31.433550   460 net.cpp:382] pool1 -> pool1
I0428 20:15:31.433619   460 net.cpp:124] Setting up pool1
I0428 20:15:31.433626   460 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:15:31.433629   460 net.cpp:139] Memory required for data: 9519360
I0428 20:15:31.433632   460 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:31.433640   460 net.cpp:86] Creating Layer ip1
I0428 20:15:31.433642   460 net.cpp:408] ip1 <- pool1
I0428 20:15:31.433647   460 net.cpp:382] ip1 -> ip1
I0428 20:15:31.433739   460 net.cpp:124] Setting up ip1
I0428 20:15:31.433748   460 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:31.433750   460 net.cpp:139] Memory required for data: 9521920
I0428 20:15:31.433756   460 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:31.433761   460 net.cpp:86] Creating Layer relu1
I0428 20:15:31.433764   460 net.cpp:408] relu1 <- ip1
I0428 20:15:31.433769   460 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:31.433923   460 net.cpp:124] Setting up relu1
I0428 20:15:31.433930   460 net.cpp:131] Top shape: 64 10 (640)
I0428 20:15:31.433933   460 net.cpp:139] Memory required for data: 9524480
I0428 20:15:31.433936   460 layer_factory.hpp:77] Creating layer loss
I0428 20:15:31.433941   460 net.cpp:86] Creating Layer loss
I0428 20:15:31.433944   460 net.cpp:408] loss <- ip1
I0428 20:15:31.433948   460 net.cpp:408] loss <- label
I0428 20:15:31.433953   460 net.cpp:382] loss -> loss
I0428 20:15:31.433966   460 layer_factory.hpp:77] Creating layer loss
I0428 20:15:31.434825   460 net.cpp:124] Setting up loss
I0428 20:15:31.434839   460 net.cpp:131] Top shape: (1)
I0428 20:15:31.434857   460 net.cpp:134]     with loss weight 1
I0428 20:15:31.434870   460 net.cpp:139] Memory required for data: 9524484
I0428 20:15:31.434873   460 net.cpp:200] loss needs backward computation.
I0428 20:15:31.434877   460 net.cpp:200] relu1 needs backward computation.
I0428 20:15:31.434880   460 net.cpp:200] ip1 needs backward computation.
I0428 20:15:31.434883   460 net.cpp:200] pool1 needs backward computation.
I0428 20:15:31.434885   460 net.cpp:200] conv1 needs backward computation.
I0428 20:15:31.434888   460 net.cpp:200] pool0 needs backward computation.
I0428 20:15:31.434891   460 net.cpp:200] conv0 needs backward computation.
I0428 20:15:31.434895   460 net.cpp:202] mnist does not need backward computation.
I0428 20:15:31.434897   460 net.cpp:244] This network produces output loss
I0428 20:15:31.434904   460 net.cpp:257] Network initialization done.
I0428 20:15:31.435148   460 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1248.prototxt
I0428 20:15:31.435170   460 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:15:31.435241   460 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:15:31.435309   460 layer_factory.hpp:77] Creating layer mnist
I0428 20:15:31.435358   460 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:15:31.435370   460 net.cpp:86] Creating Layer mnist
I0428 20:15:31.435374   460 net.cpp:382] mnist -> data
I0428 20:15:31.435382   460 net.cpp:382] mnist -> label
I0428 20:15:31.435462   460 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:15:31.437577   460 net.cpp:124] Setting up mnist
I0428 20:15:31.437605   460 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:15:31.437610   460 net.cpp:131] Top shape: 100 (100)
I0428 20:15:31.437613   460 net.cpp:139] Memory required for data: 314000
I0428 20:15:31.437616   460 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:15:31.437623   460 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:15:31.437626   460 net.cpp:408] label_mnist_1_split <- label
I0428 20:15:31.437633   460 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:15:31.437639   460 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:15:31.437698   460 net.cpp:124] Setting up label_mnist_1_split
I0428 20:15:31.437705   460 net.cpp:131] Top shape: 100 (100)
I0428 20:15:31.437710   460 net.cpp:131] Top shape: 100 (100)
I0428 20:15:31.437712   460 net.cpp:139] Memory required for data: 314800
I0428 20:15:31.437716   460 layer_factory.hpp:77] Creating layer conv0
I0428 20:15:31.437723   460 net.cpp:86] Creating Layer conv0
I0428 20:15:31.437726   460 net.cpp:408] conv0 <- data
I0428 20:15:31.437732   460 net.cpp:382] conv0 -> conv0
I0428 20:15:31.438719   460 net.cpp:124] Setting up conv0
I0428 20:15:31.438730   460 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:15:31.438748   460 net.cpp:139] Memory required for data: 11834800
I0428 20:15:31.438756   460 layer_factory.hpp:77] Creating layer pool0
I0428 20:15:31.438778   460 net.cpp:86] Creating Layer pool0
I0428 20:15:31.438782   460 net.cpp:408] pool0 <- conv0
I0428 20:15:31.438787   460 net.cpp:382] pool0 -> pool0
I0428 20:15:31.438838   460 net.cpp:124] Setting up pool0
I0428 20:15:31.438843   460 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:15:31.438846   460 net.cpp:139] Memory required for data: 14714800
I0428 20:15:31.438849   460 layer_factory.hpp:77] Creating layer conv1
I0428 20:15:31.438858   460 net.cpp:86] Creating Layer conv1
I0428 20:15:31.438860   460 net.cpp:408] conv1 <- pool0
I0428 20:15:31.438865   460 net.cpp:382] conv1 -> conv1
I0428 20:15:31.440551   460 net.cpp:124] Setting up conv1
I0428 20:15:31.440579   460 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:15:31.440583   460 net.cpp:139] Memory required for data: 14842800
I0428 20:15:31.440592   460 layer_factory.hpp:77] Creating layer pool1
I0428 20:15:31.440603   460 net.cpp:86] Creating Layer pool1
I0428 20:15:31.440618   460 net.cpp:408] pool1 <- conv1
I0428 20:15:31.440624   460 net.cpp:382] pool1 -> pool1
I0428 20:15:31.440676   460 net.cpp:124] Setting up pool1
I0428 20:15:31.440706   460 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:15:31.440709   460 net.cpp:139] Memory required for data: 14874800
I0428 20:15:31.440713   460 layer_factory.hpp:77] Creating layer ip1
I0428 20:15:31.440719   460 net.cpp:86] Creating Layer ip1
I0428 20:15:31.440723   460 net.cpp:408] ip1 <- pool1
I0428 20:15:31.440729   460 net.cpp:382] ip1 -> ip1
I0428 20:15:31.440879   460 net.cpp:124] Setting up ip1
I0428 20:15:31.440893   460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:31.440897   460 net.cpp:139] Memory required for data: 14878800
I0428 20:15:31.440923   460 layer_factory.hpp:77] Creating layer relu1
I0428 20:15:31.440929   460 net.cpp:86] Creating Layer relu1
I0428 20:15:31.440933   460 net.cpp:408] relu1 <- ip1
I0428 20:15:31.440940   460 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:15:31.441830   460 net.cpp:124] Setting up relu1
I0428 20:15:31.441862   460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:31.441866   460 net.cpp:139] Memory required for data: 14882800
I0428 20:15:31.441870   460 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:15:31.441879   460 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:15:31.441882   460 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:15:31.441887   460 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:15:31.441893   460 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:15:31.441962   460 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:15:31.441972   460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:31.441977   460 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:15:31.441980   460 net.cpp:139] Memory required for data: 14890800
I0428 20:15:31.441983   460 layer_factory.hpp:77] Creating layer accuracy
I0428 20:15:31.441988   460 net.cpp:86] Creating Layer accuracy
I0428 20:15:31.441992   460 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:15:31.442001   460 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:15:31.442023   460 net.cpp:382] accuracy -> accuracy
I0428 20:15:31.442030   460 net.cpp:124] Setting up accuracy
I0428 20:15:31.442034   460 net.cpp:131] Top shape: (1)
I0428 20:15:31.442037   460 net.cpp:139] Memory required for data: 14890804
I0428 20:15:31.442040   460 layer_factory.hpp:77] Creating layer loss
I0428 20:15:31.442045   460 net.cpp:86] Creating Layer loss
I0428 20:15:31.442049   460 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:15:31.442052   460 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:15:31.442057   460 net.cpp:382] loss -> loss
I0428 20:15:31.442064   460 layer_factory.hpp:77] Creating layer loss
I0428 20:15:31.442307   460 net.cpp:124] Setting up loss
I0428 20:15:31.442317   460 net.cpp:131] Top shape: (1)
I0428 20:15:31.442322   460 net.cpp:134]     with loss weight 1
I0428 20:15:31.442342   460 net.cpp:139] Memory required for data: 14890808
I0428 20:15:31.442345   460 net.cpp:200] loss needs backward computation.
I0428 20:15:31.442349   460 net.cpp:202] accuracy does not need backward computation.
I0428 20:15:31.442353   460 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:15:31.442358   460 net.cpp:200] relu1 needs backward computation.
I0428 20:15:31.442359   460 net.cpp:200] ip1 needs backward computation.
I0428 20:15:31.442363   460 net.cpp:200] pool1 needs backward computation.
I0428 20:15:31.442371   460 net.cpp:200] conv1 needs backward computation.
I0428 20:15:31.442374   460 net.cpp:200] pool0 needs backward computation.
I0428 20:15:31.442378   460 net.cpp:200] conv0 needs backward computation.
I0428 20:15:31.442381   460 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:15:31.442385   460 net.cpp:202] mnist does not need backward computation.
I0428 20:15:31.442387   460 net.cpp:244] This network produces output accuracy
I0428 20:15:31.442391   460 net.cpp:244] This network produces output loss
I0428 20:15:31.442418   460 net.cpp:257] Network initialization done.
I0428 20:15:31.442463   460 solver.cpp:56] Solver scaffolding done.
I0428 20:15:31.442662   460 caffe.cpp:248] Starting Optimization
I0428 20:15:31.442668   460 solver.cpp:273] Solving LeNet
I0428 20:15:31.442672   460 solver.cpp:274] Learning Rate Policy: inv
I0428 20:15:31.443437   460 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:15:31.448916   460 blocking_queue.cpp:49] Waiting for data
I0428 20:15:31.520331   467 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:31.521019   460 solver.cpp:398]     Test net output #0: accuracy = 0.0756
I0428 20:15:31.521042   460 solver.cpp:398]     Test net output #1: loss = 2.34032 (* 1 = 2.34032 loss)
I0428 20:15:31.525251   460 solver.cpp:219] Iteration 0 (0 iter/s, 0.0825548s/100 iters), loss = 2.37486
I0428 20:15:31.525291   460 solver.cpp:238]     Train net output #0: loss = 2.37486 (* 1 = 2.37486 loss)
I0428 20:15:31.525316   460 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:15:31.628394   460 solver.cpp:219] Iteration 100 (970.017 iter/s, 0.103091s/100 iters), loss = 0.440193
I0428 20:15:31.628435   460 solver.cpp:238]     Train net output #0: loss = 0.440193 (* 1 = 0.440193 loss)
I0428 20:15:31.628442   460 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:15:31.730542   460 solver.cpp:219] Iteration 200 (979.461 iter/s, 0.102097s/100 iters), loss = 0.452927
I0428 20:15:31.730568   460 solver.cpp:238]     Train net output #0: loss = 0.452927 (* 1 = 0.452927 loss)
I0428 20:15:31.730574   460 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:15:31.836069   460 solver.cpp:219] Iteration 300 (947.981 iter/s, 0.105487s/100 iters), loss = 0.143999
I0428 20:15:31.836107   460 solver.cpp:238]     Train net output #0: loss = 0.143999 (* 1 = 0.143999 loss)
I0428 20:15:31.836117   460 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:15:31.944038   460 solver.cpp:219] Iteration 400 (926.6 iter/s, 0.107921s/100 iters), loss = 0.0901951
I0428 20:15:31.944075   460 solver.cpp:238]     Train net output #0: loss = 0.0901951 (* 1 = 0.0901951 loss)
I0428 20:15:31.944084   460 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:15:32.049273   460 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:15:32.107983   467 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:32.109426   460 solver.cpp:398]     Test net output #0: accuracy = 0.9603
I0428 20:15:32.109449   460 solver.cpp:398]     Test net output #1: loss = 0.135628 (* 1 = 0.135628 loss)
I0428 20:15:32.110432   460 solver.cpp:219] Iteration 500 (601.165 iter/s, 0.166344s/100 iters), loss = 0.164629
I0428 20:15:32.110456   460 solver.cpp:238]     Train net output #0: loss = 0.164629 (* 1 = 0.164629 loss)
I0428 20:15:32.110463   460 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:15:32.217730   460 solver.cpp:219] Iteration 600 (932.315 iter/s, 0.10726s/100 iters), loss = 0.0950368
I0428 20:15:32.217766   460 solver.cpp:238]     Train net output #0: loss = 0.0950368 (* 1 = 0.0950368 loss)
I0428 20:15:32.217774   460 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:15:32.325350   460 solver.cpp:219] Iteration 700 (929.573 iter/s, 0.107576s/100 iters), loss = 0.211489
I0428 20:15:32.325382   460 solver.cpp:238]     Train net output #0: loss = 0.211489 (* 1 = 0.211489 loss)
I0428 20:15:32.325390   460 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:15:32.430768   460 solver.cpp:219] Iteration 800 (948.987 iter/s, 0.105376s/100 iters), loss = 0.218098
I0428 20:15:32.430799   460 solver.cpp:238]     Train net output #0: loss = 0.218098 (* 1 = 0.218098 loss)
I0428 20:15:32.430810   460 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:15:32.536620   460 solver.cpp:219] Iteration 900 (945.065 iter/s, 0.105813s/100 iters), loss = 0.232751
I0428 20:15:32.536662   460 solver.cpp:238]     Train net output #0: loss = 0.232751 (* 1 = 0.232751 loss)
I0428 20:15:32.536670   460 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:15:32.572139   466 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:32.646757   460 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:15:32.647637   460 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:15:32.648337   460 solver.cpp:311] Iteration 1000, loss = 0.107577
I0428 20:15:32.648355   460 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:15:32.707789   467 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:15:32.709369   460 solver.cpp:398]     Test net output #0: accuracy = 0.9714
I0428 20:15:32.709394   460 solver.cpp:398]     Test net output #1: loss = 0.0940965 (* 1 = 0.0940965 loss)
I0428 20:15:32.709411   460 solver.cpp:316] Optimization Done.
I0428 20:15:32.709414   460 caffe.cpp:259] Optimization Done.
