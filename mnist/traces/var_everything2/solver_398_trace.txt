I0428 19:42:35.836303 25105 caffe.cpp:218] Using GPUs 0
I0428 19:42:35.876619 25105 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:36.392386 25105 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test398.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:36.392529 25105 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test398.prototxt
I0428 19:42:36.392911 25105 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:36.392930 25105 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:36.393020 25105 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:42:36.393097 25105 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:36.393195 25105 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:36.393219 25105 net.cpp:86] Creating Layer mnist
I0428 19:42:36.393227 25105 net.cpp:382] mnist -> data
I0428 19:42:36.393249 25105 net.cpp:382] mnist -> label
I0428 19:42:36.394337 25105 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:36.396790 25105 net.cpp:124] Setting up mnist
I0428 19:42:36.396807 25105 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:36.396821 25105 net.cpp:131] Top shape: 64 (64)
I0428 19:42:36.396826 25105 net.cpp:139] Memory required for data: 200960
I0428 19:42:36.396832 25105 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:36.396847 25105 net.cpp:86] Creating Layer conv0
I0428 19:42:36.396852 25105 net.cpp:408] conv0 <- data
I0428 19:42:36.396865 25105 net.cpp:382] conv0 -> conv0
I0428 19:42:36.668025 25105 net.cpp:124] Setting up conv0
I0428 19:42:36.668051 25105 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:36.668056 25105 net.cpp:139] Memory required for data: 495872
I0428 19:42:36.668087 25105 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:36.668115 25105 net.cpp:86] Creating Layer pool0
I0428 19:42:36.668119 25105 net.cpp:408] pool0 <- conv0
I0428 19:42:36.668139 25105 net.cpp:382] pool0 -> pool0
I0428 19:42:36.668236 25105 net.cpp:124] Setting up pool0
I0428 19:42:36.668256 25105 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:36.668258 25105 net.cpp:139] Memory required for data: 569600
I0428 19:42:36.668262 25105 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:36.668273 25105 net.cpp:86] Creating Layer conv1
I0428 19:42:36.668277 25105 net.cpp:408] conv1 <- pool0
I0428 19:42:36.668282 25105 net.cpp:382] conv1 -> conv1
I0428 19:42:36.671216 25105 net.cpp:124] Setting up conv1
I0428 19:42:36.671247 25105 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:42:36.671250 25105 net.cpp:139] Memory required for data: 979200
I0428 19:42:36.671258 25105 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:36.671267 25105 net.cpp:86] Creating Layer pool1
I0428 19:42:36.671270 25105 net.cpp:408] pool1 <- conv1
I0428 19:42:36.671275 25105 net.cpp:382] pool1 -> pool1
I0428 19:42:36.671326 25105 net.cpp:124] Setting up pool1
I0428 19:42:36.671332 25105 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:42:36.671335 25105 net.cpp:139] Memory required for data: 1081600
I0428 19:42:36.671339 25105 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:36.671345 25105 net.cpp:86] Creating Layer ip1
I0428 19:42:36.671349 25105 net.cpp:408] ip1 <- pool1
I0428 19:42:36.671352 25105 net.cpp:382] ip1 -> ip1
I0428 19:42:36.672426 25105 net.cpp:124] Setting up ip1
I0428 19:42:36.672438 25105 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:42:36.672457 25105 net.cpp:139] Memory required for data: 1088000
I0428 19:42:36.672466 25105 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:36.672472 25105 net.cpp:86] Creating Layer relu1
I0428 19:42:36.672474 25105 net.cpp:408] relu1 <- ip1
I0428 19:42:36.672478 25105 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:36.672649 25105 net.cpp:124] Setting up relu1
I0428 19:42:36.672657 25105 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:42:36.672660 25105 net.cpp:139] Memory required for data: 1094400
I0428 19:42:36.672663 25105 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:36.672669 25105 net.cpp:86] Creating Layer ip2
I0428 19:42:36.672672 25105 net.cpp:408] ip2 <- ip1
I0428 19:42:36.672677 25105 net.cpp:382] ip2 -> ip2
I0428 19:42:36.672781 25105 net.cpp:124] Setting up ip2
I0428 19:42:36.672787 25105 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:36.672791 25105 net.cpp:139] Memory required for data: 1096960
I0428 19:42:36.672796 25105 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:36.672801 25105 net.cpp:86] Creating Layer relu2
I0428 19:42:36.672804 25105 net.cpp:408] relu2 <- ip2
I0428 19:42:36.672808 25105 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:36.673624 25105 net.cpp:124] Setting up relu2
I0428 19:42:36.673635 25105 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:36.673638 25105 net.cpp:139] Memory required for data: 1099520
I0428 19:42:36.673641 25105 layer_factory.hpp:77] Creating layer loss
I0428 19:42:36.673647 25105 net.cpp:86] Creating Layer loss
I0428 19:42:36.673650 25105 net.cpp:408] loss <- ip2
I0428 19:42:36.673655 25105 net.cpp:408] loss <- label
I0428 19:42:36.673660 25105 net.cpp:382] loss -> loss
I0428 19:42:36.673674 25105 layer_factory.hpp:77] Creating layer loss
I0428 19:42:36.673919 25105 net.cpp:124] Setting up loss
I0428 19:42:36.673929 25105 net.cpp:131] Top shape: (1)
I0428 19:42:36.673933 25105 net.cpp:134]     with loss weight 1
I0428 19:42:36.673946 25105 net.cpp:139] Memory required for data: 1099524
I0428 19:42:36.673950 25105 net.cpp:200] loss needs backward computation.
I0428 19:42:36.673954 25105 net.cpp:200] relu2 needs backward computation.
I0428 19:42:36.673956 25105 net.cpp:200] ip2 needs backward computation.
I0428 19:42:36.673959 25105 net.cpp:200] relu1 needs backward computation.
I0428 19:42:36.673962 25105 net.cpp:200] ip1 needs backward computation.
I0428 19:42:36.673975 25105 net.cpp:200] pool1 needs backward computation.
I0428 19:42:36.673979 25105 net.cpp:200] conv1 needs backward computation.
I0428 19:42:36.673981 25105 net.cpp:200] pool0 needs backward computation.
I0428 19:42:36.673985 25105 net.cpp:200] conv0 needs backward computation.
I0428 19:42:36.673988 25105 net.cpp:202] mnist does not need backward computation.
I0428 19:42:36.673991 25105 net.cpp:244] This network produces output loss
I0428 19:42:36.674000 25105 net.cpp:257] Network initialization done.
I0428 19:42:36.674291 25105 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test398.prototxt
I0428 19:42:36.674316 25105 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:36.674396 25105 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:42:36.674470 25105 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:36.674513 25105 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:36.674525 25105 net.cpp:86] Creating Layer mnist
I0428 19:42:36.674530 25105 net.cpp:382] mnist -> data
I0428 19:42:36.674536 25105 net.cpp:382] mnist -> label
I0428 19:42:36.674615 25105 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:36.676414 25105 net.cpp:124] Setting up mnist
I0428 19:42:36.676426 25105 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:36.676430 25105 net.cpp:131] Top shape: 100 (100)
I0428 19:42:36.676434 25105 net.cpp:139] Memory required for data: 314000
I0428 19:42:36.676437 25105 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:36.676443 25105 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:36.676447 25105 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:36.676452 25105 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:36.676458 25105 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:36.676492 25105 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:36.676506 25105 net.cpp:131] Top shape: 100 (100)
I0428 19:42:36.676509 25105 net.cpp:131] Top shape: 100 (100)
I0428 19:42:36.676512 25105 net.cpp:139] Memory required for data: 314800
I0428 19:42:36.676514 25105 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:36.676523 25105 net.cpp:86] Creating Layer conv0
I0428 19:42:36.676525 25105 net.cpp:408] conv0 <- data
I0428 19:42:36.676530 25105 net.cpp:382] conv0 -> conv0
I0428 19:42:36.678470 25105 net.cpp:124] Setting up conv0
I0428 19:42:36.678484 25105 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:36.678488 25105 net.cpp:139] Memory required for data: 775600
I0428 19:42:36.678498 25105 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:36.678520 25105 net.cpp:86] Creating Layer pool0
I0428 19:42:36.678524 25105 net.cpp:408] pool0 <- conv0
I0428 19:42:36.678544 25105 net.cpp:382] pool0 -> pool0
I0428 19:42:36.678580 25105 net.cpp:124] Setting up pool0
I0428 19:42:36.678584 25105 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:36.678587 25105 net.cpp:139] Memory required for data: 890800
I0428 19:42:36.678591 25105 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:36.678599 25105 net.cpp:86] Creating Layer conv1
I0428 19:42:36.678602 25105 net.cpp:408] conv1 <- pool0
I0428 19:42:36.678607 25105 net.cpp:382] conv1 -> conv1
I0428 19:42:36.680141 25105 net.cpp:124] Setting up conv1
I0428 19:42:36.680155 25105 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:42:36.680166 25105 net.cpp:139] Memory required for data: 1530800
I0428 19:42:36.680173 25105 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:36.680181 25105 net.cpp:86] Creating Layer pool1
I0428 19:42:36.680184 25105 net.cpp:408] pool1 <- conv1
I0428 19:42:36.680189 25105 net.cpp:382] pool1 -> pool1
I0428 19:42:36.680225 25105 net.cpp:124] Setting up pool1
I0428 19:42:36.680230 25105 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:42:36.680234 25105 net.cpp:139] Memory required for data: 1690800
I0428 19:42:36.680238 25105 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:36.680243 25105 net.cpp:86] Creating Layer ip1
I0428 19:42:36.680253 25105 net.cpp:408] ip1 <- pool1
I0428 19:42:36.680258 25105 net.cpp:382] ip1 -> ip1
I0428 19:42:36.680424 25105 net.cpp:124] Setting up ip1
I0428 19:42:36.680433 25105 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:42:36.680435 25105 net.cpp:139] Memory required for data: 1700800
I0428 19:42:36.680444 25105 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:36.680449 25105 net.cpp:86] Creating Layer relu1
I0428 19:42:36.680451 25105 net.cpp:408] relu1 <- ip1
I0428 19:42:36.680456 25105 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:36.680630 25105 net.cpp:124] Setting up relu1
I0428 19:42:36.680639 25105 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:42:36.680642 25105 net.cpp:139] Memory required for data: 1710800
I0428 19:42:36.680645 25105 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:36.680665 25105 net.cpp:86] Creating Layer ip2
I0428 19:42:36.680668 25105 net.cpp:408] ip2 <- ip1
I0428 19:42:36.680673 25105 net.cpp:382] ip2 -> ip2
I0428 19:42:36.680788 25105 net.cpp:124] Setting up ip2
I0428 19:42:36.680795 25105 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:36.680799 25105 net.cpp:139] Memory required for data: 1714800
I0428 19:42:36.680804 25105 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:36.680809 25105 net.cpp:86] Creating Layer relu2
I0428 19:42:36.680843 25105 net.cpp:408] relu2 <- ip2
I0428 19:42:36.680847 25105 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:36.681010 25105 net.cpp:124] Setting up relu2
I0428 19:42:36.681018 25105 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:36.681021 25105 net.cpp:139] Memory required for data: 1718800
I0428 19:42:36.681025 25105 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:42:36.681030 25105 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:42:36.681032 25105 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:42:36.681038 25105 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:42:36.681054 25105 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:42:36.681092 25105 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:42:36.681097 25105 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:36.681102 25105 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:36.681104 25105 net.cpp:139] Memory required for data: 1726800
I0428 19:42:36.681107 25105 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:36.681114 25105 net.cpp:86] Creating Layer accuracy
I0428 19:42:36.681118 25105 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:42:36.681121 25105 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:36.681128 25105 net.cpp:382] accuracy -> accuracy
I0428 19:42:36.681134 25105 net.cpp:124] Setting up accuracy
I0428 19:42:36.681161 25105 net.cpp:131] Top shape: (1)
I0428 19:42:36.681164 25105 net.cpp:139] Memory required for data: 1726804
I0428 19:42:36.681166 25105 layer_factory.hpp:77] Creating layer loss
I0428 19:42:36.681171 25105 net.cpp:86] Creating Layer loss
I0428 19:42:36.681174 25105 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:42:36.681177 25105 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:36.681181 25105 net.cpp:382] loss -> loss
I0428 19:42:36.681188 25105 layer_factory.hpp:77] Creating layer loss
I0428 19:42:36.681444 25105 net.cpp:124] Setting up loss
I0428 19:42:36.681455 25105 net.cpp:131] Top shape: (1)
I0428 19:42:36.681460 25105 net.cpp:134]     with loss weight 1
I0428 19:42:36.681466 25105 net.cpp:139] Memory required for data: 1726808
I0428 19:42:36.681469 25105 net.cpp:200] loss needs backward computation.
I0428 19:42:36.681473 25105 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:36.681476 25105 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:42:36.681479 25105 net.cpp:200] relu2 needs backward computation.
I0428 19:42:36.681481 25105 net.cpp:200] ip2 needs backward computation.
I0428 19:42:36.681484 25105 net.cpp:200] relu1 needs backward computation.
I0428 19:42:36.681488 25105 net.cpp:200] ip1 needs backward computation.
I0428 19:42:36.681506 25105 net.cpp:200] pool1 needs backward computation.
I0428 19:42:36.681509 25105 net.cpp:200] conv1 needs backward computation.
I0428 19:42:36.681512 25105 net.cpp:200] pool0 needs backward computation.
I0428 19:42:36.681515 25105 net.cpp:200] conv0 needs backward computation.
I0428 19:42:36.681519 25105 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:36.681522 25105 net.cpp:202] mnist does not need backward computation.
I0428 19:42:36.681525 25105 net.cpp:244] This network produces output accuracy
I0428 19:42:36.681529 25105 net.cpp:244] This network produces output loss
I0428 19:42:36.681538 25105 net.cpp:257] Network initialization done.
I0428 19:42:36.681577 25105 solver.cpp:56] Solver scaffolding done.
I0428 19:42:36.681929 25105 caffe.cpp:248] Starting Optimization
I0428 19:42:36.681936 25105 solver.cpp:273] Solving LeNet
I0428 19:42:36.681938 25105 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:36.682107 25105 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:36.685369 25105 blocking_queue.cpp:49] Waiting for data
I0428 19:42:36.759122 25112 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:36.759557 25105 solver.cpp:398]     Test net output #0: accuracy = 0.0819
I0428 19:42:36.759575 25105 solver.cpp:398]     Test net output #1: loss = 2.32851 (* 1 = 2.32851 loss)
I0428 19:42:36.760731 25105 solver.cpp:219] Iteration 0 (-1.04957e-42 iter/s, 0.0787596s/100 iters), loss = 2.33962
I0428 19:42:36.760784 25105 solver.cpp:238]     Train net output #0: loss = 2.33962 (* 1 = 2.33962 loss)
I0428 19:42:36.760797 25105 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:36.851961 25105 solver.cpp:219] Iteration 100 (1096.91 iter/s, 0.0911651s/100 iters), loss = 0.391911
I0428 19:42:36.851986 25105 solver.cpp:238]     Train net output #0: loss = 0.391911 (* 1 = 0.391911 loss)
I0428 19:42:36.852008 25105 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:36.931185 25105 solver.cpp:219] Iteration 200 (1262.85 iter/s, 0.0791859s/100 iters), loss = 0.243772
I0428 19:42:36.931221 25105 solver.cpp:238]     Train net output #0: loss = 0.243772 (* 1 = 0.243772 loss)
I0428 19:42:36.931246 25105 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:37.006850 25105 solver.cpp:219] Iteration 300 (1322.43 iter/s, 0.0756182s/100 iters), loss = 0.205181
I0428 19:42:37.006875 25105 solver.cpp:238]     Train net output #0: loss = 0.205181 (* 1 = 0.205181 loss)
I0428 19:42:37.006898 25105 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:37.081583 25105 solver.cpp:219] Iteration 400 (1338.74 iter/s, 0.0746968s/100 iters), loss = 0.192916
I0428 19:42:37.081606 25105 solver.cpp:238]     Train net output #0: loss = 0.192916 (* 1 = 0.192916 loss)
I0428 19:42:37.081627 25105 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:37.154736 25105 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:37.231010 25112 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:37.231534 25105 solver.cpp:398]     Test net output #0: accuracy = 0.9465
I0428 19:42:37.231561 25105 solver.cpp:398]     Test net output #1: loss = 0.161841 (* 1 = 0.161841 loss)
I0428 19:42:37.232533 25105 solver.cpp:219] Iteration 500 (662.633 iter/s, 0.150913s/100 iters), loss = 0.23678
I0428 19:42:37.232573 25105 solver.cpp:238]     Train net output #0: loss = 0.23678 (* 1 = 0.23678 loss)
I0428 19:42:37.232584 25105 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:37.317350 25105 solver.cpp:219] Iteration 600 (1179.73 iter/s, 0.0847652s/100 iters), loss = 0.117158
I0428 19:42:37.317381 25105 solver.cpp:238]     Train net output #0: loss = 0.117158 (* 1 = 0.117158 loss)
I0428 19:42:37.317389 25105 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:37.396600 25105 solver.cpp:219] Iteration 700 (1262.51 iter/s, 0.0792073s/100 iters), loss = 0.307653
I0428 19:42:37.396630 25105 solver.cpp:238]     Train net output #0: loss = 0.307653 (* 1 = 0.307653 loss)
I0428 19:42:37.396636 25105 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:37.476558 25105 solver.cpp:219] Iteration 800 (1251.39 iter/s, 0.0799109s/100 iters), loss = 0.439505
I0428 19:42:37.476593 25105 solver.cpp:238]     Train net output #0: loss = 0.439505 (* 1 = 0.439505 loss)
I0428 19:42:37.476603 25105 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:37.555886 25105 solver.cpp:219] Iteration 900 (1261.33 iter/s, 0.0792812s/100 iters), loss = 0.283214
I0428 19:42:37.555915 25105 solver.cpp:238]     Train net output #0: loss = 0.283214 (* 1 = 0.283214 loss)
I0428 19:42:37.555922 25105 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:37.582576 25111 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:37.644976 25105 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:37.646023 25105 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:37.646692 25105 solver.cpp:311] Iteration 1000, loss = 0.171833
I0428 19:42:37.646715 25105 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:37.725118 25112 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:37.725713 25105 solver.cpp:398]     Test net output #0: accuracy = 0.9679
I0428 19:42:37.725739 25105 solver.cpp:398]     Test net output #1: loss = 0.102279 (* 1 = 0.102279 loss)
I0428 19:42:37.725747 25105 solver.cpp:316] Optimization Done.
I0428 19:42:37.725754 25105 caffe.cpp:259] Optimization Done.
