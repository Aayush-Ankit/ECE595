I0428 20:25:21.944939  2579 caffe.cpp:218] Using GPUs 0
I0428 20:25:21.981632  2579 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:25:22.490463  2579 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1453.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:25:22.490600  2579 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1453.prototxt
I0428 20:25:22.490988  2579 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:25:22.491005  2579 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:25:22.491094  2579 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:22.491171  2579 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:22.491272  2579 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:25:22.491297  2579 net.cpp:86] Creating Layer mnist
I0428 20:25:22.491304  2579 net.cpp:382] mnist -> data
I0428 20:25:22.491328  2579 net.cpp:382] mnist -> label
I0428 20:25:22.492416  2579 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:25:22.494870  2579 net.cpp:124] Setting up mnist
I0428 20:25:22.494889  2579 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:25:22.494895  2579 net.cpp:131] Top shape: 64 (64)
I0428 20:25:22.494899  2579 net.cpp:139] Memory required for data: 200960
I0428 20:25:22.494905  2579 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:22.494923  2579 net.cpp:86] Creating Layer conv0
I0428 20:25:22.494930  2579 net.cpp:408] conv0 <- data
I0428 20:25:22.494941  2579 net.cpp:382] conv0 -> conv0
I0428 20:25:22.778687  2579 net.cpp:124] Setting up conv0
I0428 20:25:22.778714  2579 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:25:22.778719  2579 net.cpp:139] Memory required for data: 14946560
I0428 20:25:22.778755  2579 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:22.778769  2579 net.cpp:86] Creating Layer pool0
I0428 20:25:22.778774  2579 net.cpp:408] pool0 <- conv0
I0428 20:25:22.778779  2579 net.cpp:382] pool0 -> pool0
I0428 20:25:22.778834  2579 net.cpp:124] Setting up pool0
I0428 20:25:22.778841  2579 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:25:22.778843  2579 net.cpp:139] Memory required for data: 18632960
I0428 20:25:22.778846  2579 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:22.778857  2579 net.cpp:86] Creating Layer conv1
I0428 20:25:22.778861  2579 net.cpp:408] conv1 <- pool0
I0428 20:25:22.778865  2579 net.cpp:382] conv1 -> conv1
I0428 20:25:22.781520  2579 net.cpp:124] Setting up conv1
I0428 20:25:22.781535  2579 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:25:22.781539  2579 net.cpp:139] Memory required for data: 18665728
I0428 20:25:22.781548  2579 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:22.781554  2579 net.cpp:86] Creating Layer pool1
I0428 20:25:22.781558  2579 net.cpp:408] pool1 <- conv1
I0428 20:25:22.781563  2579 net.cpp:382] pool1 -> pool1
I0428 20:25:22.781599  2579 net.cpp:124] Setting up pool1
I0428 20:25:22.781605  2579 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:25:22.781607  2579 net.cpp:139] Memory required for data: 18673920
I0428 20:25:22.781610  2579 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:22.781616  2579 net.cpp:86] Creating Layer ip1
I0428 20:25:22.781620  2579 net.cpp:408] ip1 <- pool1
I0428 20:25:22.781623  2579 net.cpp:382] ip1 -> ip1
I0428 20:25:22.781728  2579 net.cpp:124] Setting up ip1
I0428 20:25:22.781734  2579 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:25:22.781738  2579 net.cpp:139] Memory required for data: 18686720
I0428 20:25:22.781745  2579 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:22.781750  2579 net.cpp:86] Creating Layer relu1
I0428 20:25:22.781754  2579 net.cpp:408] relu1 <- ip1
I0428 20:25:22.781757  2579 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:22.781934  2579 net.cpp:124] Setting up relu1
I0428 20:25:22.781944  2579 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:25:22.781946  2579 net.cpp:139] Memory required for data: 18699520
I0428 20:25:22.781949  2579 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:22.781955  2579 net.cpp:86] Creating Layer ip2
I0428 20:25:22.781958  2579 net.cpp:408] ip2 <- ip1
I0428 20:25:22.781963  2579 net.cpp:382] ip2 -> ip2
I0428 20:25:22.782058  2579 net.cpp:124] Setting up ip2
I0428 20:25:22.782064  2579 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:22.782068  2579 net.cpp:139] Memory required for data: 18702080
I0428 20:25:22.782073  2579 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:22.782079  2579 net.cpp:86] Creating Layer relu2
I0428 20:25:22.782083  2579 net.cpp:408] relu2 <- ip2
I0428 20:25:22.782086  2579 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:22.782807  2579 net.cpp:124] Setting up relu2
I0428 20:25:22.782820  2579 net.cpp:131] Top shape: 64 10 (640)
I0428 20:25:22.782824  2579 net.cpp:139] Memory required for data: 18704640
I0428 20:25:22.782827  2579 layer_factory.hpp:77] Creating layer loss
I0428 20:25:22.782833  2579 net.cpp:86] Creating Layer loss
I0428 20:25:22.782836  2579 net.cpp:408] loss <- ip2
I0428 20:25:22.782841  2579 net.cpp:408] loss <- label
I0428 20:25:22.782846  2579 net.cpp:382] loss -> loss
I0428 20:25:22.782866  2579 layer_factory.hpp:77] Creating layer loss
I0428 20:25:22.783102  2579 net.cpp:124] Setting up loss
I0428 20:25:22.783112  2579 net.cpp:131] Top shape: (1)
I0428 20:25:22.783115  2579 net.cpp:134]     with loss weight 1
I0428 20:25:22.783129  2579 net.cpp:139] Memory required for data: 18704644
I0428 20:25:22.783133  2579 net.cpp:200] loss needs backward computation.
I0428 20:25:22.783136  2579 net.cpp:200] relu2 needs backward computation.
I0428 20:25:22.783139  2579 net.cpp:200] ip2 needs backward computation.
I0428 20:25:22.783141  2579 net.cpp:200] relu1 needs backward computation.
I0428 20:25:22.783144  2579 net.cpp:200] ip1 needs backward computation.
I0428 20:25:22.783157  2579 net.cpp:200] pool1 needs backward computation.
I0428 20:25:22.783160  2579 net.cpp:200] conv1 needs backward computation.
I0428 20:25:22.783164  2579 net.cpp:200] pool0 needs backward computation.
I0428 20:25:22.783166  2579 net.cpp:200] conv0 needs backward computation.
I0428 20:25:22.783169  2579 net.cpp:202] mnist does not need backward computation.
I0428 20:25:22.783172  2579 net.cpp:244] This network produces output loss
I0428 20:25:22.783180  2579 net.cpp:257] Network initialization done.
I0428 20:25:22.783455  2579 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1453.prototxt
I0428 20:25:22.783479  2579 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:25:22.783558  2579 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:25:22.783618  2579 layer_factory.hpp:77] Creating layer mnist
I0428 20:25:22.783661  2579 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:25:22.783674  2579 net.cpp:86] Creating Layer mnist
I0428 20:25:22.783679  2579 net.cpp:382] mnist -> data
I0428 20:25:22.783685  2579 net.cpp:382] mnist -> label
I0428 20:25:22.783764  2579 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:25:22.785770  2579 net.cpp:124] Setting up mnist
I0428 20:25:22.785800  2579 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:25:22.785805  2579 net.cpp:131] Top shape: 100 (100)
I0428 20:25:22.785809  2579 net.cpp:139] Memory required for data: 314000
I0428 20:25:22.785812  2579 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:25:22.785861  2579 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:25:22.785866  2579 net.cpp:408] label_mnist_1_split <- label
I0428 20:25:22.785871  2579 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:25:22.785877  2579 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:25:22.785992  2579 net.cpp:124] Setting up label_mnist_1_split
I0428 20:25:22.786000  2579 net.cpp:131] Top shape: 100 (100)
I0428 20:25:22.786005  2579 net.cpp:131] Top shape: 100 (100)
I0428 20:25:22.786006  2579 net.cpp:139] Memory required for data: 314800
I0428 20:25:22.786010  2579 layer_factory.hpp:77] Creating layer conv0
I0428 20:25:22.786017  2579 net.cpp:86] Creating Layer conv0
I0428 20:25:22.786020  2579 net.cpp:408] conv0 <- data
I0428 20:25:22.786026  2579 net.cpp:382] conv0 -> conv0
I0428 20:25:22.787473  2579 net.cpp:124] Setting up conv0
I0428 20:25:22.787487  2579 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:25:22.787492  2579 net.cpp:139] Memory required for data: 23354800
I0428 20:25:22.787500  2579 layer_factory.hpp:77] Creating layer pool0
I0428 20:25:22.787511  2579 net.cpp:86] Creating Layer pool0
I0428 20:25:22.787518  2579 net.cpp:408] pool0 <- conv0
I0428 20:25:22.787523  2579 net.cpp:382] pool0 -> pool0
I0428 20:25:22.787559  2579 net.cpp:124] Setting up pool0
I0428 20:25:22.787566  2579 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:25:22.787569  2579 net.cpp:139] Memory required for data: 29114800
I0428 20:25:22.787572  2579 layer_factory.hpp:77] Creating layer conv1
I0428 20:25:22.787580  2579 net.cpp:86] Creating Layer conv1
I0428 20:25:22.787585  2579 net.cpp:408] conv1 <- pool0
I0428 20:25:22.787588  2579 net.cpp:382] conv1 -> conv1
I0428 20:25:22.789042  2579 net.cpp:124] Setting up conv1
I0428 20:25:22.789057  2579 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:25:22.789060  2579 net.cpp:139] Memory required for data: 29166000
I0428 20:25:22.789084  2579 layer_factory.hpp:77] Creating layer pool1
I0428 20:25:22.789090  2579 net.cpp:86] Creating Layer pool1
I0428 20:25:22.789094  2579 net.cpp:408] pool1 <- conv1
I0428 20:25:22.789099  2579 net.cpp:382] pool1 -> pool1
I0428 20:25:22.789134  2579 net.cpp:124] Setting up pool1
I0428 20:25:22.789140  2579 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:25:22.789144  2579 net.cpp:139] Memory required for data: 29178800
I0428 20:25:22.789146  2579 layer_factory.hpp:77] Creating layer ip1
I0428 20:25:22.789152  2579 net.cpp:86] Creating Layer ip1
I0428 20:25:22.789155  2579 net.cpp:408] ip1 <- pool1
I0428 20:25:22.789160  2579 net.cpp:382] ip1 -> ip1
I0428 20:25:22.789281  2579 net.cpp:124] Setting up ip1
I0428 20:25:22.789289  2579 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:25:22.789293  2579 net.cpp:139] Memory required for data: 29198800
I0428 20:25:22.789299  2579 layer_factory.hpp:77] Creating layer relu1
I0428 20:25:22.789304  2579 net.cpp:86] Creating Layer relu1
I0428 20:25:22.789307  2579 net.cpp:408] relu1 <- ip1
I0428 20:25:22.789312  2579 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:25:22.789521  2579 net.cpp:124] Setting up relu1
I0428 20:25:22.789530  2579 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:25:22.789532  2579 net.cpp:139] Memory required for data: 29218800
I0428 20:25:22.789536  2579 layer_factory.hpp:77] Creating layer ip2
I0428 20:25:22.789542  2579 net.cpp:86] Creating Layer ip2
I0428 20:25:22.789546  2579 net.cpp:408] ip2 <- ip1
I0428 20:25:22.789551  2579 net.cpp:382] ip2 -> ip2
I0428 20:25:22.789692  2579 net.cpp:124] Setting up ip2
I0428 20:25:22.789700  2579 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:22.789702  2579 net.cpp:139] Memory required for data: 29222800
I0428 20:25:22.789707  2579 layer_factory.hpp:77] Creating layer relu2
I0428 20:25:22.789717  2579 net.cpp:86] Creating Layer relu2
I0428 20:25:22.789721  2579 net.cpp:408] relu2 <- ip2
I0428 20:25:22.789723  2579 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:25:22.789876  2579 net.cpp:124] Setting up relu2
I0428 20:25:22.789885  2579 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:22.789890  2579 net.cpp:139] Memory required for data: 29226800
I0428 20:25:22.789892  2579 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:25:22.789896  2579 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:25:22.789899  2579 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:25:22.789906  2579 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:25:22.789921  2579 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:25:22.789970  2579 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:25:22.789978  2579 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:22.789981  2579 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:25:22.789984  2579 net.cpp:139] Memory required for data: 29234800
I0428 20:25:22.789988  2579 layer_factory.hpp:77] Creating layer accuracy
I0428 20:25:22.789994  2579 net.cpp:86] Creating Layer accuracy
I0428 20:25:22.789996  2579 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:25:22.790015  2579 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:25:22.790019  2579 net.cpp:382] accuracy -> accuracy
I0428 20:25:22.790026  2579 net.cpp:124] Setting up accuracy
I0428 20:25:22.790030  2579 net.cpp:131] Top shape: (1)
I0428 20:25:22.790033  2579 net.cpp:139] Memory required for data: 29234804
I0428 20:25:22.790036  2579 layer_factory.hpp:77] Creating layer loss
I0428 20:25:22.790042  2579 net.cpp:86] Creating Layer loss
I0428 20:25:22.790045  2579 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:25:22.790048  2579 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:25:22.790053  2579 net.cpp:382] loss -> loss
I0428 20:25:22.790065  2579 layer_factory.hpp:77] Creating layer loss
I0428 20:25:22.790349  2579 net.cpp:124] Setting up loss
I0428 20:25:22.790357  2579 net.cpp:131] Top shape: (1)
I0428 20:25:22.790375  2579 net.cpp:134]     with loss weight 1
I0428 20:25:22.790381  2579 net.cpp:139] Memory required for data: 29234808
I0428 20:25:22.790385  2579 net.cpp:200] loss needs backward computation.
I0428 20:25:22.790388  2579 net.cpp:202] accuracy does not need backward computation.
I0428 20:25:22.790391  2579 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:25:22.790395  2579 net.cpp:200] relu2 needs backward computation.
I0428 20:25:22.790397  2579 net.cpp:200] ip2 needs backward computation.
I0428 20:25:22.790400  2579 net.cpp:200] relu1 needs backward computation.
I0428 20:25:22.790402  2579 net.cpp:200] ip1 needs backward computation.
I0428 20:25:22.790405  2579 net.cpp:200] pool1 needs backward computation.
I0428 20:25:22.790407  2579 net.cpp:200] conv1 needs backward computation.
I0428 20:25:22.790410  2579 net.cpp:200] pool0 needs backward computation.
I0428 20:25:22.790413  2579 net.cpp:200] conv0 needs backward computation.
I0428 20:25:22.790416  2579 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:25:22.790428  2579 net.cpp:202] mnist does not need backward computation.
I0428 20:25:22.790439  2579 net.cpp:244] This network produces output accuracy
I0428 20:25:22.790442  2579 net.cpp:244] This network produces output loss
I0428 20:25:22.790453  2579 net.cpp:257] Network initialization done.
I0428 20:25:22.790489  2579 solver.cpp:56] Solver scaffolding done.
I0428 20:25:22.790743  2579 caffe.cpp:248] Starting Optimization
I0428 20:25:22.790748  2579 solver.cpp:273] Solving LeNet
I0428 20:25:22.790751  2579 solver.cpp:274] Learning Rate Policy: inv
I0428 20:25:22.791438  2579 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:25:22.885035  2587 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:22.888226  2579 solver.cpp:398]     Test net output #0: accuracy = 0.1118
I0428 20:25:22.888243  2579 solver.cpp:398]     Test net output #1: loss = 2.30455 (* 1 = 2.30455 loss)
I0428 20:25:22.892457  2579 solver.cpp:219] Iteration 0 (-2.10663e-31 iter/s, 0.101678s/100 iters), loss = 2.33333
I0428 20:25:22.892480  2579 solver.cpp:238]     Train net output #0: loss = 2.33333 (* 1 = 2.33333 loss)
I0428 20:25:22.892508  2579 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:25:23.089239  2579 solver.cpp:219] Iteration 100 (508.287 iter/s, 0.196739s/100 iters), loss = 0.994354
I0428 20:25:23.089269  2579 solver.cpp:238]     Train net output #0: loss = 0.994354 (* 1 = 0.994354 loss)
I0428 20:25:23.089277  2579 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:25:23.292017  2579 solver.cpp:219] Iteration 200 (493.263 iter/s, 0.202731s/100 iters), loss = 1.10783
I0428 20:25:23.292073  2579 solver.cpp:238]     Train net output #0: loss = 1.10783 (* 1 = 1.10783 loss)
I0428 20:25:23.292081  2579 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:25:23.494218  2579 solver.cpp:219] Iteration 300 (494.735 iter/s, 0.202128s/100 iters), loss = 0.961482
I0428 20:25:23.494266  2579 solver.cpp:238]     Train net output #0: loss = 0.961482 (* 1 = 0.961482 loss)
I0428 20:25:23.494279  2579 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:25:23.701676  2579 solver.cpp:219] Iteration 400 (482.179 iter/s, 0.207392s/100 iters), loss = 1.30273
I0428 20:25:23.701732  2579 solver.cpp:238]     Train net output #0: loss = 1.30273 (* 1 = 1.30273 loss)
I0428 20:25:23.701752  2579 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:25:23.908362  2579 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:25:24.004597  2587 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:24.007899  2579 solver.cpp:398]     Test net output #0: accuracy = 0.8335
I0428 20:25:24.007925  2579 solver.cpp:398]     Test net output #1: loss = 0.531103 (* 1 = 0.531103 loss)
I0428 20:25:24.009790  2579 solver.cpp:219] Iteration 500 (324.63 iter/s, 0.308043s/100 iters), loss = 0.67674
I0428 20:25:24.009819  2579 solver.cpp:238]     Train net output #0: loss = 0.67674 (* 1 = 0.67674 loss)
I0428 20:25:24.009826  2579 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:25:24.216462  2579 solver.cpp:219] Iteration 600 (483.971 iter/s, 0.206624s/100 iters), loss = 0.26375
I0428 20:25:24.216514  2579 solver.cpp:238]     Train net output #0: loss = 0.26375 (* 1 = 0.26375 loss)
I0428 20:25:24.216527  2579 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:25:24.427261  2579 solver.cpp:219] Iteration 700 (474.534 iter/s, 0.210733s/100 iters), loss = 0.322297
I0428 20:25:24.427309  2579 solver.cpp:238]     Train net output #0: loss = 0.322297 (* 1 = 0.322297 loss)
I0428 20:25:24.427320  2579 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:25:24.633579  2579 solver.cpp:219] Iteration 800 (484.851 iter/s, 0.206249s/100 iters), loss = 0.25461
I0428 20:25:24.633637  2579 solver.cpp:238]     Train net output #0: loss = 0.25461 (* 1 = 0.25461 loss)
I0428 20:25:24.633651  2579 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:25:24.840497  2579 solver.cpp:219] Iteration 900 (483.452 iter/s, 0.206846s/100 iters), loss = 0.297624
I0428 20:25:24.840538  2579 solver.cpp:238]     Train net output #0: loss = 0.297624 (* 1 = 0.297624 loss)
I0428 20:25:24.840546  2579 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:25:24.905875  2586 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:25.040851  2579 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:25:25.042492  2579 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:25:25.043581  2579 solver.cpp:311] Iteration 1000, loss = 0.203702
I0428 20:25:25.043608  2579 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:25:25.141320  2587 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:25:25.144434  2579 solver.cpp:398]     Test net output #0: accuracy = 0.9454
I0428 20:25:25.144459  2579 solver.cpp:398]     Test net output #1: loss = 0.178249 (* 1 = 0.178249 loss)
I0428 20:25:25.144464  2579 solver.cpp:316] Optimization Done.
I0428 20:25:25.144469  2579 caffe.cpp:259] Optimization Done.
