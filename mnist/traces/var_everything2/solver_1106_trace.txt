I0428 20:09:19.267824 31600 caffe.cpp:218] Using GPUs 0
I0428 20:09:19.299445 31600 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:09:19.787475 31600 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1106.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:09:19.787606 31600 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1106.prototxt
I0428 20:09:19.787950 31600 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:09:19.787963 31600 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:09:19.788043 31600 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:19.788105 31600 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:19.788187 31600 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:09:19.788205 31600 net.cpp:86] Creating Layer mnist
I0428 20:09:19.788214 31600 net.cpp:382] mnist -> data
I0428 20:09:19.788233 31600 net.cpp:382] mnist -> label
I0428 20:09:19.789242 31600 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:09:19.791383 31600 net.cpp:124] Setting up mnist
I0428 20:09:19.791414 31600 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:09:19.791419 31600 net.cpp:131] Top shape: 64 (64)
I0428 20:09:19.791421 31600 net.cpp:139] Memory required for data: 200960
I0428 20:09:19.791435 31600 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:19.791450 31600 net.cpp:86] Creating Layer conv0
I0428 20:09:19.791467 31600 net.cpp:408] conv0 <- data
I0428 20:09:19.791478 31600 net.cpp:382] conv0 -> conv0
I0428 20:09:20.015025 31600 net.cpp:124] Setting up conv0
I0428 20:09:20.015051 31600 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:09:20.015055 31600 net.cpp:139] Memory required for data: 3887360
I0428 20:09:20.015069 31600 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:20.015081 31600 net.cpp:86] Creating Layer pool0
I0428 20:09:20.015085 31600 net.cpp:408] pool0 <- conv0
I0428 20:09:20.015091 31600 net.cpp:382] pool0 -> pool0
I0428 20:09:20.015133 31600 net.cpp:124] Setting up pool0
I0428 20:09:20.015156 31600 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:09:20.015158 31600 net.cpp:139] Memory required for data: 4808960
I0428 20:09:20.015177 31600 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:20.015203 31600 net.cpp:86] Creating Layer conv1
I0428 20:09:20.015206 31600 net.cpp:408] conv1 <- pool0
I0428 20:09:20.015215 31600 net.cpp:382] conv1 -> conv1
I0428 20:09:20.018024 31600 net.cpp:124] Setting up conv1
I0428 20:09:20.018038 31600 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 20:09:20.018059 31600 net.cpp:139] Memory required for data: 5218560
I0428 20:09:20.018067 31600 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:20.018074 31600 net.cpp:86] Creating Layer pool1
I0428 20:09:20.018079 31600 net.cpp:408] pool1 <- conv1
I0428 20:09:20.018082 31600 net.cpp:382] pool1 -> pool1
I0428 20:09:20.018118 31600 net.cpp:124] Setting up pool1
I0428 20:09:20.018126 31600 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 20:09:20.018128 31600 net.cpp:139] Memory required for data: 5320960
I0428 20:09:20.018131 31600 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:20.018138 31600 net.cpp:86] Creating Layer ip1
I0428 20:09:20.018141 31600 net.cpp:408] ip1 <- pool1
I0428 20:09:20.018146 31600 net.cpp:382] ip1 -> ip1
I0428 20:09:20.019121 31600 net.cpp:124] Setting up ip1
I0428 20:09:20.019134 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.019136 31600 net.cpp:139] Memory required for data: 5323520
I0428 20:09:20.019160 31600 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:20.019167 31600 net.cpp:86] Creating Layer relu1
I0428 20:09:20.019171 31600 net.cpp:408] relu1 <- ip1
I0428 20:09:20.019176 31600 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:20.019348 31600 net.cpp:124] Setting up relu1
I0428 20:09:20.019356 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.019359 31600 net.cpp:139] Memory required for data: 5326080
I0428 20:09:20.019362 31600 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:20.019368 31600 net.cpp:86] Creating Layer ip2
I0428 20:09:20.019371 31600 net.cpp:408] ip2 <- ip1
I0428 20:09:20.019376 31600 net.cpp:382] ip2 -> ip2
I0428 20:09:20.019464 31600 net.cpp:124] Setting up ip2
I0428 20:09:20.019470 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.019474 31600 net.cpp:139] Memory required for data: 5328640
I0428 20:09:20.019479 31600 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:20.019484 31600 net.cpp:86] Creating Layer relu2
I0428 20:09:20.019487 31600 net.cpp:408] relu2 <- ip2
I0428 20:09:20.019490 31600 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:20.020292 31600 net.cpp:124] Setting up relu2
I0428 20:09:20.020305 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.020324 31600 net.cpp:139] Memory required for data: 5331200
I0428 20:09:20.020328 31600 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:20.020336 31600 net.cpp:86] Creating Layer ip3
I0428 20:09:20.020340 31600 net.cpp:408] ip3 <- ip2
I0428 20:09:20.020345 31600 net.cpp:382] ip3 -> ip3
I0428 20:09:20.020462 31600 net.cpp:124] Setting up ip3
I0428 20:09:20.020469 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.020473 31600 net.cpp:139] Memory required for data: 5333760
I0428 20:09:20.020480 31600 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:20.020486 31600 net.cpp:86] Creating Layer relu3
I0428 20:09:20.020489 31600 net.cpp:408] relu3 <- ip3
I0428 20:09:20.020494 31600 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:20.020685 31600 net.cpp:124] Setting up relu3
I0428 20:09:20.020709 31600 net.cpp:131] Top shape: 64 10 (640)
I0428 20:09:20.020712 31600 net.cpp:139] Memory required for data: 5336320
I0428 20:09:20.020715 31600 layer_factory.hpp:77] Creating layer loss
I0428 20:09:20.020736 31600 net.cpp:86] Creating Layer loss
I0428 20:09:20.020741 31600 net.cpp:408] loss <- ip3
I0428 20:09:20.020745 31600 net.cpp:408] loss <- label
I0428 20:09:20.020750 31600 net.cpp:382] loss -> loss
I0428 20:09:20.020768 31600 layer_factory.hpp:77] Creating layer loss
I0428 20:09:20.021085 31600 net.cpp:124] Setting up loss
I0428 20:09:20.021095 31600 net.cpp:131] Top shape: (1)
I0428 20:09:20.021116 31600 net.cpp:134]     with loss weight 1
I0428 20:09:20.021129 31600 net.cpp:139] Memory required for data: 5336324
I0428 20:09:20.021133 31600 net.cpp:200] loss needs backward computation.
I0428 20:09:20.021136 31600 net.cpp:200] relu3 needs backward computation.
I0428 20:09:20.021140 31600 net.cpp:200] ip3 needs backward computation.
I0428 20:09:20.021143 31600 net.cpp:200] relu2 needs backward computation.
I0428 20:09:20.021147 31600 net.cpp:200] ip2 needs backward computation.
I0428 20:09:20.021149 31600 net.cpp:200] relu1 needs backward computation.
I0428 20:09:20.021152 31600 net.cpp:200] ip1 needs backward computation.
I0428 20:09:20.021155 31600 net.cpp:200] pool1 needs backward computation.
I0428 20:09:20.021158 31600 net.cpp:200] conv1 needs backward computation.
I0428 20:09:20.021176 31600 net.cpp:200] pool0 needs backward computation.
I0428 20:09:20.021179 31600 net.cpp:200] conv0 needs backward computation.
I0428 20:09:20.021183 31600 net.cpp:202] mnist does not need backward computation.
I0428 20:09:20.021200 31600 net.cpp:244] This network produces output loss
I0428 20:09:20.021224 31600 net.cpp:257] Network initialization done.
I0428 20:09:20.021549 31600 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1106.prototxt
I0428 20:09:20.021606 31600 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:09:20.021690 31600 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:09:20.021762 31600 layer_factory.hpp:77] Creating layer mnist
I0428 20:09:20.021821 31600 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:09:20.021832 31600 net.cpp:86] Creating Layer mnist
I0428 20:09:20.021837 31600 net.cpp:382] mnist -> data
I0428 20:09:20.021844 31600 net.cpp:382] mnist -> label
I0428 20:09:20.021941 31600 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:09:20.023872 31600 net.cpp:124] Setting up mnist
I0428 20:09:20.023901 31600 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:09:20.023906 31600 net.cpp:131] Top shape: 100 (100)
I0428 20:09:20.023910 31600 net.cpp:139] Memory required for data: 314000
I0428 20:09:20.023914 31600 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:09:20.023921 31600 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:09:20.023923 31600 net.cpp:408] label_mnist_1_split <- label
I0428 20:09:20.023928 31600 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:09:20.023934 31600 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:09:20.024003 31600 net.cpp:124] Setting up label_mnist_1_split
I0428 20:09:20.024008 31600 net.cpp:131] Top shape: 100 (100)
I0428 20:09:20.024011 31600 net.cpp:131] Top shape: 100 (100)
I0428 20:09:20.024014 31600 net.cpp:139] Memory required for data: 314800
I0428 20:09:20.024016 31600 layer_factory.hpp:77] Creating layer conv0
I0428 20:09:20.024024 31600 net.cpp:86] Creating Layer conv0
I0428 20:09:20.024027 31600 net.cpp:408] conv0 <- data
I0428 20:09:20.024032 31600 net.cpp:382] conv0 -> conv0
I0428 20:09:20.025661 31600 net.cpp:124] Setting up conv0
I0428 20:09:20.025676 31600 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:09:20.025678 31600 net.cpp:139] Memory required for data: 6074800
I0428 20:09:20.025698 31600 layer_factory.hpp:77] Creating layer pool0
I0428 20:09:20.025704 31600 net.cpp:86] Creating Layer pool0
I0428 20:09:20.025708 31600 net.cpp:408] pool0 <- conv0
I0428 20:09:20.025712 31600 net.cpp:382] pool0 -> pool0
I0428 20:09:20.025746 31600 net.cpp:124] Setting up pool0
I0428 20:09:20.025753 31600 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:09:20.025755 31600 net.cpp:139] Memory required for data: 7514800
I0428 20:09:20.025758 31600 layer_factory.hpp:77] Creating layer conv1
I0428 20:09:20.025766 31600 net.cpp:86] Creating Layer conv1
I0428 20:09:20.025769 31600 net.cpp:408] conv1 <- pool0
I0428 20:09:20.025774 31600 net.cpp:382] conv1 -> conv1
I0428 20:09:20.027868 31600 net.cpp:124] Setting up conv1
I0428 20:09:20.027880 31600 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 20:09:20.027884 31600 net.cpp:139] Memory required for data: 8154800
I0428 20:09:20.027894 31600 layer_factory.hpp:77] Creating layer pool1
I0428 20:09:20.027899 31600 net.cpp:86] Creating Layer pool1
I0428 20:09:20.027904 31600 net.cpp:408] pool1 <- conv1
I0428 20:09:20.027907 31600 net.cpp:382] pool1 -> pool1
I0428 20:09:20.027994 31600 net.cpp:124] Setting up pool1
I0428 20:09:20.028002 31600 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 20:09:20.028003 31600 net.cpp:139] Memory required for data: 8314800
I0428 20:09:20.028007 31600 layer_factory.hpp:77] Creating layer ip1
I0428 20:09:20.028012 31600 net.cpp:86] Creating Layer ip1
I0428 20:09:20.028017 31600 net.cpp:408] ip1 <- pool1
I0428 20:09:20.028020 31600 net.cpp:382] ip1 -> ip1
I0428 20:09:20.028131 31600 net.cpp:124] Setting up ip1
I0428 20:09:20.028137 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.028151 31600 net.cpp:139] Memory required for data: 8318800
I0428 20:09:20.028158 31600 layer_factory.hpp:77] Creating layer relu1
I0428 20:09:20.028162 31600 net.cpp:86] Creating Layer relu1
I0428 20:09:20.028167 31600 net.cpp:408] relu1 <- ip1
I0428 20:09:20.028170 31600 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:09:20.028339 31600 net.cpp:124] Setting up relu1
I0428 20:09:20.028347 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.028350 31600 net.cpp:139] Memory required for data: 8322800
I0428 20:09:20.028354 31600 layer_factory.hpp:77] Creating layer ip2
I0428 20:09:20.028362 31600 net.cpp:86] Creating Layer ip2
I0428 20:09:20.028364 31600 net.cpp:408] ip2 <- ip1
I0428 20:09:20.028369 31600 net.cpp:382] ip2 -> ip2
I0428 20:09:20.028498 31600 net.cpp:124] Setting up ip2
I0428 20:09:20.028506 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.028508 31600 net.cpp:139] Memory required for data: 8326800
I0428 20:09:20.028513 31600 layer_factory.hpp:77] Creating layer relu2
I0428 20:09:20.028518 31600 net.cpp:86] Creating Layer relu2
I0428 20:09:20.028522 31600 net.cpp:408] relu2 <- ip2
I0428 20:09:20.028525 31600 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:09:20.028786 31600 net.cpp:124] Setting up relu2
I0428 20:09:20.028796 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.028800 31600 net.cpp:139] Memory required for data: 8330800
I0428 20:09:20.028803 31600 layer_factory.hpp:77] Creating layer ip3
I0428 20:09:20.028836 31600 net.cpp:86] Creating Layer ip3
I0428 20:09:20.028839 31600 net.cpp:408] ip3 <- ip2
I0428 20:09:20.028846 31600 net.cpp:382] ip3 -> ip3
I0428 20:09:20.028982 31600 net.cpp:124] Setting up ip3
I0428 20:09:20.028990 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.028993 31600 net.cpp:139] Memory required for data: 8334800
I0428 20:09:20.029001 31600 layer_factory.hpp:77] Creating layer relu3
I0428 20:09:20.029006 31600 net.cpp:86] Creating Layer relu3
I0428 20:09:20.029011 31600 net.cpp:408] relu3 <- ip3
I0428 20:09:20.029014 31600 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:09:20.029877 31600 net.cpp:124] Setting up relu3
I0428 20:09:20.029889 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.029892 31600 net.cpp:139] Memory required for data: 8338800
I0428 20:09:20.029896 31600 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:09:20.029901 31600 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:09:20.029904 31600 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:09:20.029911 31600 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:09:20.029916 31600 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:09:20.029952 31600 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:09:20.029958 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.029963 31600 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:09:20.029964 31600 net.cpp:139] Memory required for data: 8346800
I0428 20:09:20.029968 31600 layer_factory.hpp:77] Creating layer accuracy
I0428 20:09:20.029971 31600 net.cpp:86] Creating Layer accuracy
I0428 20:09:20.029974 31600 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:09:20.029978 31600 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:09:20.029983 31600 net.cpp:382] accuracy -> accuracy
I0428 20:09:20.029989 31600 net.cpp:124] Setting up accuracy
I0428 20:09:20.029991 31600 net.cpp:131] Top shape: (1)
I0428 20:09:20.029994 31600 net.cpp:139] Memory required for data: 8346804
I0428 20:09:20.029996 31600 layer_factory.hpp:77] Creating layer loss
I0428 20:09:20.030002 31600 net.cpp:86] Creating Layer loss
I0428 20:09:20.030005 31600 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:09:20.030009 31600 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:09:20.030012 31600 net.cpp:382] loss -> loss
I0428 20:09:20.030017 31600 layer_factory.hpp:77] Creating layer loss
I0428 20:09:20.030273 31600 net.cpp:124] Setting up loss
I0428 20:09:20.030282 31600 net.cpp:131] Top shape: (1)
I0428 20:09:20.030285 31600 net.cpp:134]     with loss weight 1
I0428 20:09:20.030303 31600 net.cpp:139] Memory required for data: 8346808
I0428 20:09:20.030305 31600 net.cpp:200] loss needs backward computation.
I0428 20:09:20.030309 31600 net.cpp:202] accuracy does not need backward computation.
I0428 20:09:20.030313 31600 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:09:20.030315 31600 net.cpp:200] relu3 needs backward computation.
I0428 20:09:20.030318 31600 net.cpp:200] ip3 needs backward computation.
I0428 20:09:20.030320 31600 net.cpp:200] relu2 needs backward computation.
I0428 20:09:20.030323 31600 net.cpp:200] ip2 needs backward computation.
I0428 20:09:20.030325 31600 net.cpp:200] relu1 needs backward computation.
I0428 20:09:20.030328 31600 net.cpp:200] ip1 needs backward computation.
I0428 20:09:20.030331 31600 net.cpp:200] pool1 needs backward computation.
I0428 20:09:20.030333 31600 net.cpp:200] conv1 needs backward computation.
I0428 20:09:20.030336 31600 net.cpp:200] pool0 needs backward computation.
I0428 20:09:20.030339 31600 net.cpp:200] conv0 needs backward computation.
I0428 20:09:20.030342 31600 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:09:20.030346 31600 net.cpp:202] mnist does not need backward computation.
I0428 20:09:20.030349 31600 net.cpp:244] This network produces output accuracy
I0428 20:09:20.030354 31600 net.cpp:244] This network produces output loss
I0428 20:09:20.030364 31600 net.cpp:257] Network initialization done.
I0428 20:09:20.030403 31600 solver.cpp:56] Solver scaffolding done.
I0428 20:09:20.030755 31600 caffe.cpp:248] Starting Optimization
I0428 20:09:20.030761 31600 solver.cpp:273] Solving LeNet
I0428 20:09:20.030763 31600 solver.cpp:274] Learning Rate Policy: inv
I0428 20:09:20.031503 31600 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:09:20.036653 31600 blocking_queue.cpp:49] Waiting for data
I0428 20:09:20.108587 31607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:20.109248 31600 solver.cpp:398]     Test net output #0: accuracy = 0.1021
I0428 20:09:20.109267 31600 solver.cpp:398]     Test net output #1: loss = 2.32866 (* 1 = 2.32866 loss)
I0428 20:09:20.112781 31600 solver.cpp:219] Iteration 0 (-7.47195e-31 iter/s, 0.0819926s/100 iters), loss = 2.31902
I0428 20:09:20.112855 31600 solver.cpp:238]     Train net output #0: loss = 2.31902 (* 1 = 2.31902 loss)
I0428 20:09:20.112869 31600 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:09:20.213852 31600 solver.cpp:219] Iteration 100 (990.087 iter/s, 0.101001s/100 iters), loss = 0.677551
I0428 20:09:20.213879 31600 solver.cpp:238]     Train net output #0: loss = 0.677551 (* 1 = 0.677551 loss)
I0428 20:09:20.213901 31600 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:09:20.312963 31600 solver.cpp:219] Iteration 200 (1009.41 iter/s, 0.0990679s/100 iters), loss = 0.478563
I0428 20:09:20.313004 31600 solver.cpp:238]     Train net output #0: loss = 0.478563 (* 1 = 0.478563 loss)
I0428 20:09:20.313022 31600 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:09:20.420192 31600 solver.cpp:219] Iteration 300 (933.01 iter/s, 0.10718s/100 iters), loss = 0.52726
I0428 20:09:20.420219 31600 solver.cpp:238]     Train net output #0: loss = 0.52726 (* 1 = 0.52726 loss)
I0428 20:09:20.420227 31600 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:09:20.527052 31600 solver.cpp:219] Iteration 400 (936.159 iter/s, 0.106819s/100 iters), loss = 0.307466
I0428 20:09:20.527089 31600 solver.cpp:238]     Train net output #0: loss = 0.307466 (* 1 = 0.307466 loss)
I0428 20:09:20.527102 31600 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:09:20.633081 31600 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:09:20.693267 31607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:20.693876 31600 solver.cpp:398]     Test net output #0: accuracy = 0.8545
I0428 20:09:20.693895 31600 solver.cpp:398]     Test net output #1: loss = 0.405542 (* 1 = 0.405542 loss)
I0428 20:09:20.694926 31600 solver.cpp:219] Iteration 500 (595.854 iter/s, 0.167826s/100 iters), loss = 0.223233
I0428 20:09:20.694967 31600 solver.cpp:238]     Train net output #0: loss = 0.223233 (* 1 = 0.223233 loss)
I0428 20:09:20.694974 31600 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:09:20.799444 31600 solver.cpp:219] Iteration 600 (957.218 iter/s, 0.104469s/100 iters), loss = 0.25408
I0428 20:09:20.799468 31600 solver.cpp:238]     Train net output #0: loss = 0.25408 (* 1 = 0.25408 loss)
I0428 20:09:20.799474 31600 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:09:20.903797 31600 solver.cpp:219] Iteration 700 (958.589 iter/s, 0.10432s/100 iters), loss = 0.535903
I0428 20:09:20.903823 31600 solver.cpp:238]     Train net output #0: loss = 0.535903 (* 1 = 0.535903 loss)
I0428 20:09:20.903830 31600 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:09:21.010630 31600 solver.cpp:219] Iteration 800 (936.364 iter/s, 0.106796s/100 iters), loss = 0.342853
I0428 20:09:21.010656 31600 solver.cpp:238]     Train net output #0: loss = 0.342853 (* 1 = 0.342853 loss)
I0428 20:09:21.010663 31600 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:09:21.120296 31600 solver.cpp:219] Iteration 900 (912.172 iter/s, 0.109628s/100 iters), loss = 0.291131
I0428 20:09:21.120321 31600 solver.cpp:238]     Train net output #0: loss = 0.291131 (* 1 = 0.291131 loss)
I0428 20:09:21.120327 31600 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:09:21.154150 31606 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:21.228473 31600 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:09:21.229755 31600 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:09:21.230556 31600 solver.cpp:311] Iteration 1000, loss = 0.128659
I0428 20:09:21.230577 31600 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:09:21.302587 31607 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:09:21.303217 31600 solver.cpp:398]     Test net output #0: accuracy = 0.9641
I0428 20:09:21.303239 31600 solver.cpp:398]     Test net output #1: loss = 0.123363 (* 1 = 0.123363 loss)
I0428 20:09:21.303244 31600 solver.cpp:316] Optimization Done.
I0428 20:09:21.303248 31600 caffe.cpp:259] Optimization Done.
