I0428 19:42:25.062706 25063 caffe.cpp:218] Using GPUs 0
I0428 19:42:25.097026 25063 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:42:25.609191 25063 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test393.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:42:25.609338 25063 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test393.prototxt
I0428 19:42:25.609719 25063 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:42:25.609735 25063 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:42:25.609825 25063 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:42:25.609901 25063 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:25.609999 25063 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:42:25.610023 25063 net.cpp:86] Creating Layer mnist
I0428 19:42:25.610030 25063 net.cpp:382] mnist -> data
I0428 19:42:25.610054 25063 net.cpp:382] mnist -> label
I0428 19:42:25.611135 25063 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:42:25.613595 25063 net.cpp:124] Setting up mnist
I0428 19:42:25.613634 25063 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:42:25.613642 25063 net.cpp:131] Top shape: 64 (64)
I0428 19:42:25.613646 25063 net.cpp:139] Memory required for data: 200960
I0428 19:42:25.613652 25063 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:25.613669 25063 net.cpp:86] Creating Layer conv0
I0428 19:42:25.613674 25063 net.cpp:408] conv0 <- data
I0428 19:42:25.613687 25063 net.cpp:382] conv0 -> conv0
I0428 19:42:25.866016 25063 net.cpp:124] Setting up conv0
I0428 19:42:25.866058 25063 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:42:25.866062 25063 net.cpp:139] Memory required for data: 495872
I0428 19:42:25.866094 25063 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:25.866122 25063 net.cpp:86] Creating Layer pool0
I0428 19:42:25.866127 25063 net.cpp:408] pool0 <- conv0
I0428 19:42:25.866132 25063 net.cpp:382] pool0 -> pool0
I0428 19:42:25.866178 25063 net.cpp:124] Setting up pool0
I0428 19:42:25.866185 25063 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:42:25.866189 25063 net.cpp:139] Memory required for data: 569600
I0428 19:42:25.866191 25063 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:25.866201 25063 net.cpp:86] Creating Layer conv1
I0428 19:42:25.866204 25063 net.cpp:408] conv1 <- pool0
I0428 19:42:25.866209 25063 net.cpp:382] conv1 -> conv1
I0428 19:42:25.868983 25063 net.cpp:124] Setting up conv1
I0428 19:42:25.868996 25063 net.cpp:131] Top shape: 64 25 8 8 (102400)
I0428 19:42:25.868999 25063 net.cpp:139] Memory required for data: 979200
I0428 19:42:25.869007 25063 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:25.869016 25063 net.cpp:86] Creating Layer pool1
I0428 19:42:25.869019 25063 net.cpp:408] pool1 <- conv1
I0428 19:42:25.869038 25063 net.cpp:382] pool1 -> pool1
I0428 19:42:25.869076 25063 net.cpp:124] Setting up pool1
I0428 19:42:25.869081 25063 net.cpp:131] Top shape: 64 25 4 4 (25600)
I0428 19:42:25.869083 25063 net.cpp:139] Memory required for data: 1081600
I0428 19:42:25.869086 25063 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:25.869093 25063 net.cpp:86] Creating Layer ip1
I0428 19:42:25.869096 25063 net.cpp:408] ip1 <- pool1
I0428 19:42:25.869102 25063 net.cpp:382] ip1 -> ip1
I0428 19:42:25.869231 25063 net.cpp:124] Setting up ip1
I0428 19:42:25.869240 25063 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:25.869242 25063 net.cpp:139] Memory required for data: 1084160
I0428 19:42:25.869248 25063 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:25.869269 25063 net.cpp:86] Creating Layer relu1
I0428 19:42:25.869272 25063 net.cpp:408] relu1 <- ip1
I0428 19:42:25.869277 25063 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:25.869439 25063 net.cpp:124] Setting up relu1
I0428 19:42:25.869448 25063 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:25.869451 25063 net.cpp:139] Memory required for data: 1086720
I0428 19:42:25.869453 25063 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:25.869459 25063 net.cpp:86] Creating Layer ip2
I0428 19:42:25.869462 25063 net.cpp:408] ip2 <- ip1
I0428 19:42:25.869468 25063 net.cpp:382] ip2 -> ip2
I0428 19:42:25.869560 25063 net.cpp:124] Setting up ip2
I0428 19:42:25.869566 25063 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:25.869570 25063 net.cpp:139] Memory required for data: 1089280
I0428 19:42:25.869575 25063 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:25.869595 25063 net.cpp:86] Creating Layer relu2
I0428 19:42:25.869597 25063 net.cpp:408] relu2 <- ip2
I0428 19:42:25.869602 25063 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:25.870278 25063 net.cpp:124] Setting up relu2
I0428 19:42:25.870290 25063 net.cpp:131] Top shape: 64 10 (640)
I0428 19:42:25.870293 25063 net.cpp:139] Memory required for data: 1091840
I0428 19:42:25.870296 25063 layer_factory.hpp:77] Creating layer loss
I0428 19:42:25.870301 25063 net.cpp:86] Creating Layer loss
I0428 19:42:25.870304 25063 net.cpp:408] loss <- ip2
I0428 19:42:25.870308 25063 net.cpp:408] loss <- label
I0428 19:42:25.870316 25063 net.cpp:382] loss -> loss
I0428 19:42:25.870332 25063 layer_factory.hpp:77] Creating layer loss
I0428 19:42:25.870574 25063 net.cpp:124] Setting up loss
I0428 19:42:25.870584 25063 net.cpp:131] Top shape: (1)
I0428 19:42:25.870587 25063 net.cpp:134]     with loss weight 1
I0428 19:42:25.870600 25063 net.cpp:139] Memory required for data: 1091844
I0428 19:42:25.870604 25063 net.cpp:200] loss needs backward computation.
I0428 19:42:25.870607 25063 net.cpp:200] relu2 needs backward computation.
I0428 19:42:25.870609 25063 net.cpp:200] ip2 needs backward computation.
I0428 19:42:25.870612 25063 net.cpp:200] relu1 needs backward computation.
I0428 19:42:25.870615 25063 net.cpp:200] ip1 needs backward computation.
I0428 19:42:25.870618 25063 net.cpp:200] pool1 needs backward computation.
I0428 19:42:25.870631 25063 net.cpp:200] conv1 needs backward computation.
I0428 19:42:25.870635 25063 net.cpp:200] pool0 needs backward computation.
I0428 19:42:25.870637 25063 net.cpp:200] conv0 needs backward computation.
I0428 19:42:25.870640 25063 net.cpp:202] mnist does not need backward computation.
I0428 19:42:25.870643 25063 net.cpp:244] This network produces output loss
I0428 19:42:25.870654 25063 net.cpp:257] Network initialization done.
I0428 19:42:25.870936 25063 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test393.prototxt
I0428 19:42:25.870960 25063 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:42:25.871040 25063 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:42:25.871103 25063 layer_factory.hpp:77] Creating layer mnist
I0428 19:42:25.871143 25063 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:42:25.871155 25063 net.cpp:86] Creating Layer mnist
I0428 19:42:25.871160 25063 net.cpp:382] mnist -> data
I0428 19:42:25.871167 25063 net.cpp:382] mnist -> label
I0428 19:42:25.871248 25063 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:42:25.873208 25063 net.cpp:124] Setting up mnist
I0428 19:42:25.873224 25063 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:42:25.873229 25063 net.cpp:131] Top shape: 100 (100)
I0428 19:42:25.873232 25063 net.cpp:139] Memory required for data: 314000
I0428 19:42:25.873235 25063 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:42:25.873272 25063 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:42:25.873276 25063 net.cpp:408] label_mnist_1_split <- label
I0428 19:42:25.873283 25063 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:42:25.873289 25063 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:42:25.873332 25063 net.cpp:124] Setting up label_mnist_1_split
I0428 19:42:25.873349 25063 net.cpp:131] Top shape: 100 (100)
I0428 19:42:25.873353 25063 net.cpp:131] Top shape: 100 (100)
I0428 19:42:25.873355 25063 net.cpp:139] Memory required for data: 314800
I0428 19:42:25.873358 25063 layer_factory.hpp:77] Creating layer conv0
I0428 19:42:25.873368 25063 net.cpp:86] Creating Layer conv0
I0428 19:42:25.873370 25063 net.cpp:408] conv0 <- data
I0428 19:42:25.873375 25063 net.cpp:382] conv0 -> conv0
I0428 19:42:25.875156 25063 net.cpp:124] Setting up conv0
I0428 19:42:25.875185 25063 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:42:25.875187 25063 net.cpp:139] Memory required for data: 775600
I0428 19:42:25.875196 25063 layer_factory.hpp:77] Creating layer pool0
I0428 19:42:25.875202 25063 net.cpp:86] Creating Layer pool0
I0428 19:42:25.875205 25063 net.cpp:408] pool0 <- conv0
I0428 19:42:25.875211 25063 net.cpp:382] pool0 -> pool0
I0428 19:42:25.875246 25063 net.cpp:124] Setting up pool0
I0428 19:42:25.875250 25063 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:42:25.875253 25063 net.cpp:139] Memory required for data: 890800
I0428 19:42:25.875255 25063 layer_factory.hpp:77] Creating layer conv1
I0428 19:42:25.875267 25063 net.cpp:86] Creating Layer conv1
I0428 19:42:25.875269 25063 net.cpp:408] conv1 <- pool0
I0428 19:42:25.875274 25063 net.cpp:382] conv1 -> conv1
I0428 19:42:25.876778 25063 net.cpp:124] Setting up conv1
I0428 19:42:25.876791 25063 net.cpp:131] Top shape: 100 25 8 8 (160000)
I0428 19:42:25.876794 25063 net.cpp:139] Memory required for data: 1530800
I0428 19:42:25.876806 25063 layer_factory.hpp:77] Creating layer pool1
I0428 19:42:25.876818 25063 net.cpp:86] Creating Layer pool1
I0428 19:42:25.876837 25063 net.cpp:408] pool1 <- conv1
I0428 19:42:25.876864 25063 net.cpp:382] pool1 -> pool1
I0428 19:42:25.876922 25063 net.cpp:124] Setting up pool1
I0428 19:42:25.876929 25063 net.cpp:131] Top shape: 100 25 4 4 (40000)
I0428 19:42:25.876932 25063 net.cpp:139] Memory required for data: 1690800
I0428 19:42:25.876935 25063 layer_factory.hpp:77] Creating layer ip1
I0428 19:42:25.876942 25063 net.cpp:86] Creating Layer ip1
I0428 19:42:25.876946 25063 net.cpp:408] ip1 <- pool1
I0428 19:42:25.876952 25063 net.cpp:382] ip1 -> ip1
I0428 19:42:25.877089 25063 net.cpp:124] Setting up ip1
I0428 19:42:25.877099 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877101 25063 net.cpp:139] Memory required for data: 1694800
I0428 19:42:25.877110 25063 layer_factory.hpp:77] Creating layer relu1
I0428 19:42:25.877116 25063 net.cpp:86] Creating Layer relu1
I0428 19:42:25.877120 25063 net.cpp:408] relu1 <- ip1
I0428 19:42:25.877125 25063 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:42:25.877351 25063 net.cpp:124] Setting up relu1
I0428 19:42:25.877359 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877362 25063 net.cpp:139] Memory required for data: 1698800
I0428 19:42:25.877367 25063 layer_factory.hpp:77] Creating layer ip2
I0428 19:42:25.877373 25063 net.cpp:86] Creating Layer ip2
I0428 19:42:25.877377 25063 net.cpp:408] ip2 <- ip1
I0428 19:42:25.877382 25063 net.cpp:382] ip2 -> ip2
I0428 19:42:25.877475 25063 net.cpp:124] Setting up ip2
I0428 19:42:25.877482 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877485 25063 net.cpp:139] Memory required for data: 1702800
I0428 19:42:25.877490 25063 layer_factory.hpp:77] Creating layer relu2
I0428 19:42:25.877497 25063 net.cpp:86] Creating Layer relu2
I0428 19:42:25.877501 25063 net.cpp:408] relu2 <- ip2
I0428 19:42:25.877504 25063 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:42:25.877661 25063 net.cpp:124] Setting up relu2
I0428 19:42:25.877670 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877671 25063 net.cpp:139] Memory required for data: 1706800
I0428 19:42:25.877674 25063 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:42:25.877679 25063 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:42:25.877682 25063 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:42:25.877686 25063 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:42:25.877701 25063 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:42:25.877741 25063 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:42:25.877746 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877749 25063 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:42:25.877753 25063 net.cpp:139] Memory required for data: 1714800
I0428 19:42:25.877754 25063 layer_factory.hpp:77] Creating layer accuracy
I0428 19:42:25.877759 25063 net.cpp:86] Creating Layer accuracy
I0428 19:42:25.877763 25063 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:42:25.877766 25063 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:42:25.877771 25063 net.cpp:382] accuracy -> accuracy
I0428 19:42:25.877777 25063 net.cpp:124] Setting up accuracy
I0428 19:42:25.877780 25063 net.cpp:131] Top shape: (1)
I0428 19:42:25.877784 25063 net.cpp:139] Memory required for data: 1714804
I0428 19:42:25.877785 25063 layer_factory.hpp:77] Creating layer loss
I0428 19:42:25.877790 25063 net.cpp:86] Creating Layer loss
I0428 19:42:25.877792 25063 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:42:25.877796 25063 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:42:25.877800 25063 net.cpp:382] loss -> loss
I0428 19:42:25.877806 25063 layer_factory.hpp:77] Creating layer loss
I0428 19:42:25.878032 25063 net.cpp:124] Setting up loss
I0428 19:42:25.878057 25063 net.cpp:131] Top shape: (1)
I0428 19:42:25.878060 25063 net.cpp:134]     with loss weight 1
I0428 19:42:25.878067 25063 net.cpp:139] Memory required for data: 1714808
I0428 19:42:25.878070 25063 net.cpp:200] loss needs backward computation.
I0428 19:42:25.878074 25063 net.cpp:202] accuracy does not need backward computation.
I0428 19:42:25.878077 25063 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:42:25.878082 25063 net.cpp:200] relu2 needs backward computation.
I0428 19:42:25.878083 25063 net.cpp:200] ip2 needs backward computation.
I0428 19:42:25.878087 25063 net.cpp:200] relu1 needs backward computation.
I0428 19:42:25.878089 25063 net.cpp:200] ip1 needs backward computation.
I0428 19:42:25.878093 25063 net.cpp:200] pool1 needs backward computation.
I0428 19:42:25.878095 25063 net.cpp:200] conv1 needs backward computation.
I0428 19:42:25.878098 25063 net.cpp:200] pool0 needs backward computation.
I0428 19:42:25.878109 25063 net.cpp:200] conv0 needs backward computation.
I0428 19:42:25.878113 25063 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:42:25.878116 25063 net.cpp:202] mnist does not need backward computation.
I0428 19:42:25.878119 25063 net.cpp:244] This network produces output accuracy
I0428 19:42:25.878123 25063 net.cpp:244] This network produces output loss
I0428 19:42:25.878134 25063 net.cpp:257] Network initialization done.
I0428 19:42:25.878170 25063 solver.cpp:56] Solver scaffolding done.
I0428 19:42:25.878444 25063 caffe.cpp:248] Starting Optimization
I0428 19:42:25.878450 25063 solver.cpp:273] Solving LeNet
I0428 19:42:25.878453 25063 solver.cpp:274] Learning Rate Policy: inv
I0428 19:42:25.878595 25063 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:42:25.882082 25063 blocking_queue.cpp:49] Waiting for data
I0428 19:42:25.951616 25070 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:25.952055 25063 solver.cpp:398]     Test net output #0: accuracy = 0.0865
I0428 19:42:25.952091 25063 solver.cpp:398]     Test net output #1: loss = 2.37851 (* 1 = 2.37851 loss)
I0428 19:42:25.953193 25063 solver.cpp:219] Iteration 0 (0 iter/s, 0.0747162s/100 iters), loss = 2.26665
I0428 19:42:25.953238 25063 solver.cpp:238]     Train net output #0: loss = 2.26665 (* 1 = 2.26665 loss)
I0428 19:42:25.953249 25063 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:42:26.041278 25063 solver.cpp:219] Iteration 100 (1135.99 iter/s, 0.0880292s/100 iters), loss = 0.401191
I0428 19:42:26.041319 25063 solver.cpp:238]     Train net output #0: loss = 0.401191 (* 1 = 0.401191 loss)
I0428 19:42:26.041326 25063 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:42:26.119586 25063 solver.cpp:219] Iteration 200 (1277.67 iter/s, 0.0782673s/100 iters), loss = 0.21114
I0428 19:42:26.119638 25063 solver.cpp:238]     Train net output #0: loss = 0.21114 (* 1 = 0.21114 loss)
I0428 19:42:26.119644 25063 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:42:26.195508 25063 solver.cpp:219] Iteration 300 (1317.99 iter/s, 0.0758733s/100 iters), loss = 0.270607
I0428 19:42:26.195549 25063 solver.cpp:238]     Train net output #0: loss = 0.270607 (* 1 = 0.270607 loss)
I0428 19:42:26.195554 25063 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:42:26.272392 25063 solver.cpp:219] Iteration 400 (1301.55 iter/s, 0.0768317s/100 iters), loss = 0.173608
I0428 19:42:26.272431 25063 solver.cpp:238]     Train net output #0: loss = 0.173608 (* 1 = 0.173608 loss)
I0428 19:42:26.272438 25063 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:42:26.347816 25063 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:42:26.422888 25070 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:26.423326 25063 solver.cpp:398]     Test net output #0: accuracy = 0.9476
I0428 19:42:26.423362 25063 solver.cpp:398]     Test net output #1: loss = 0.177561 (* 1 = 0.177561 loss)
I0428 19:42:26.424288 25063 solver.cpp:219] Iteration 500 (658.576 iter/s, 0.151843s/100 iters), loss = 0.152906
I0428 19:42:26.424311 25063 solver.cpp:238]     Train net output #0: loss = 0.152906 (* 1 = 0.152906 loss)
I0428 19:42:26.424319 25063 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:42:26.512156 25063 solver.cpp:219] Iteration 600 (1138.53 iter/s, 0.0878326s/100 iters), loss = 0.172972
I0428 19:42:26.512181 25063 solver.cpp:238]     Train net output #0: loss = 0.172972 (* 1 = 0.172972 loss)
I0428 19:42:26.512187 25063 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:42:26.589716 25063 solver.cpp:219] Iteration 700 (1289.92 iter/s, 0.0775239s/100 iters), loss = 0.270193
I0428 19:42:26.589771 25063 solver.cpp:238]     Train net output #0: loss = 0.270193 (* 1 = 0.270193 loss)
I0428 19:42:26.589792 25063 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:42:26.667254 25063 solver.cpp:219] Iteration 800 (1290.52 iter/s, 0.0774881s/100 iters), loss = 0.388371
I0428 19:42:26.667294 25063 solver.cpp:238]     Train net output #0: loss = 0.388371 (* 1 = 0.388371 loss)
I0428 19:42:26.667300 25063 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:42:26.743885 25063 solver.cpp:219] Iteration 900 (1305.86 iter/s, 0.0765778s/100 iters), loss = 0.288933
I0428 19:42:26.743923 25063 solver.cpp:238]     Train net output #0: loss = 0.288933 (* 1 = 0.288933 loss)
I0428 19:42:26.743929 25063 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:42:26.769246 25069 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:26.818732 25063 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:42:26.819452 25063 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:42:26.819947 25063 solver.cpp:311] Iteration 1000, loss = 0.193482
I0428 19:42:26.819978 25063 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:42:26.895073 25070 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:42:26.895515 25063 solver.cpp:398]     Test net output #0: accuracy = 0.9691
I0428 19:42:26.895550 25063 solver.cpp:398]     Test net output #1: loss = 0.105931 (* 1 = 0.105931 loss)
I0428 19:42:26.895556 25063 solver.cpp:316] Optimization Done.
I0428 19:42:26.895561 25063 caffe.cpp:259] Optimization Done.
