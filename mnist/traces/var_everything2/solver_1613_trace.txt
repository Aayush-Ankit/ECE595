I0428 20:34:56.746723  4550 caffe.cpp:218] Using GPUs 0
I0428 20:34:56.775782  4550 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:34:57.222839  4550 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1613.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:34:57.222967  4550 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1613.prototxt
I0428 20:34:57.223336  4550 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:34:57.223368  4550 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:34:57.223464  4550 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:34:57.223526  4550 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:57.223620  4550 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:34:57.223640  4550 net.cpp:86] Creating Layer mnist
I0428 20:34:57.223649  4550 net.cpp:382] mnist -> data
I0428 20:34:57.223666  4550 net.cpp:382] mnist -> label
I0428 20:34:57.224704  4550 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:34:57.227041  4550 net.cpp:124] Setting up mnist
I0428 20:34:57.227069  4550 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:34:57.227073  4550 net.cpp:131] Top shape: 64 (64)
I0428 20:34:57.227077  4550 net.cpp:139] Memory required for data: 200960
I0428 20:34:57.227082  4550 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:57.227094  4550 net.cpp:86] Creating Layer conv0
I0428 20:34:57.227110  4550 net.cpp:408] conv0 <- data
I0428 20:34:57.227121  4550 net.cpp:382] conv0 -> conv0
I0428 20:34:57.455106  4550 net.cpp:124] Setting up conv0
I0428 20:34:57.455129  4550 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:34:57.455133  4550 net.cpp:139] Memory required for data: 14946560
I0428 20:34:57.455163  4550 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:57.455175  4550 net.cpp:86] Creating Layer pool0
I0428 20:34:57.455179  4550 net.cpp:408] pool0 <- conv0
I0428 20:34:57.455200  4550 net.cpp:382] pool0 -> pool0
I0428 20:34:57.455248  4550 net.cpp:124] Setting up pool0
I0428 20:34:57.455255  4550 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:34:57.455258  4550 net.cpp:139] Memory required for data: 18632960
I0428 20:34:57.455261  4550 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:57.455272  4550 net.cpp:86] Creating Layer conv1
I0428 20:34:57.455278  4550 net.cpp:408] conv1 <- pool0
I0428 20:34:57.455286  4550 net.cpp:382] conv1 -> conv1
I0428 20:34:57.458822  4550 net.cpp:124] Setting up conv1
I0428 20:34:57.458853  4550 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:34:57.458856  4550 net.cpp:139] Memory required for data: 19452160
I0428 20:34:57.458863  4550 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:57.458874  4550 net.cpp:86] Creating Layer pool1
I0428 20:34:57.458892  4550 net.cpp:408] pool1 <- conv1
I0428 20:34:57.458897  4550 net.cpp:382] pool1 -> pool1
I0428 20:34:57.458935  4550 net.cpp:124] Setting up pool1
I0428 20:34:57.458941  4550 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:34:57.458945  4550 net.cpp:139] Memory required for data: 19656960
I0428 20:34:57.458946  4550 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:57.458955  4550 net.cpp:86] Creating Layer ip1
I0428 20:34:57.458957  4550 net.cpp:408] ip1 <- pool1
I0428 20:34:57.458961  4550 net.cpp:382] ip1 -> ip1
I0428 20:34:57.459945  4550 net.cpp:124] Setting up ip1
I0428 20:34:57.459957  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.459976  4550 net.cpp:139] Memory required for data: 19659520
I0428 20:34:57.459985  4550 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:57.459992  4550 net.cpp:86] Creating Layer relu1
I0428 20:34:57.459996  4550 net.cpp:408] relu1 <- ip1
I0428 20:34:57.460000  4550 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:57.460171  4550 net.cpp:124] Setting up relu1
I0428 20:34:57.460180  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.460183  4550 net.cpp:139] Memory required for data: 19662080
I0428 20:34:57.460186  4550 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:57.460194  4550 net.cpp:86] Creating Layer ip2
I0428 20:34:57.460197  4550 net.cpp:408] ip2 <- ip1
I0428 20:34:57.460202  4550 net.cpp:382] ip2 -> ip2
I0428 20:34:57.460299  4550 net.cpp:124] Setting up ip2
I0428 20:34:57.460307  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.460309  4550 net.cpp:139] Memory required for data: 19664640
I0428 20:34:57.460315  4550 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:57.460322  4550 net.cpp:86] Creating Layer relu2
I0428 20:34:57.460325  4550 net.cpp:408] relu2 <- ip2
I0428 20:34:57.460330  4550 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:57.461144  4550 net.cpp:124] Setting up relu2
I0428 20:34:57.461156  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.461176  4550 net.cpp:139] Memory required for data: 19667200
I0428 20:34:57.461180  4550 layer_factory.hpp:77] Creating layer ip3
I0428 20:34:57.461189  4550 net.cpp:86] Creating Layer ip3
I0428 20:34:57.461192  4550 net.cpp:408] ip3 <- ip2
I0428 20:34:57.461199  4550 net.cpp:382] ip3 -> ip3
I0428 20:34:57.461295  4550 net.cpp:124] Setting up ip3
I0428 20:34:57.461303  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.461307  4550 net.cpp:139] Memory required for data: 19669760
I0428 20:34:57.461313  4550 layer_factory.hpp:77] Creating layer relu3
I0428 20:34:57.461318  4550 net.cpp:86] Creating Layer relu3
I0428 20:34:57.461321  4550 net.cpp:408] relu3 <- ip3
I0428 20:34:57.461325  4550 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:34:57.461503  4550 net.cpp:124] Setting up relu3
I0428 20:34:57.461513  4550 net.cpp:131] Top shape: 64 10 (640)
I0428 20:34:57.461515  4550 net.cpp:139] Memory required for data: 19672320
I0428 20:34:57.461519  4550 layer_factory.hpp:77] Creating layer loss
I0428 20:34:57.461524  4550 net.cpp:86] Creating Layer loss
I0428 20:34:57.461527  4550 net.cpp:408] loss <- ip3
I0428 20:34:57.461531  4550 net.cpp:408] loss <- label
I0428 20:34:57.461537  4550 net.cpp:382] loss -> loss
I0428 20:34:57.461555  4550 layer_factory.hpp:77] Creating layer loss
I0428 20:34:57.461807  4550 net.cpp:124] Setting up loss
I0428 20:34:57.461815  4550 net.cpp:131] Top shape: (1)
I0428 20:34:57.461818  4550 net.cpp:134]     with loss weight 1
I0428 20:34:57.461833  4550 net.cpp:139] Memory required for data: 19672324
I0428 20:34:57.461836  4550 net.cpp:200] loss needs backward computation.
I0428 20:34:57.461840  4550 net.cpp:200] relu3 needs backward computation.
I0428 20:34:57.461843  4550 net.cpp:200] ip3 needs backward computation.
I0428 20:34:57.461845  4550 net.cpp:200] relu2 needs backward computation.
I0428 20:34:57.461848  4550 net.cpp:200] ip2 needs backward computation.
I0428 20:34:57.461851  4550 net.cpp:200] relu1 needs backward computation.
I0428 20:34:57.461854  4550 net.cpp:200] ip1 needs backward computation.
I0428 20:34:57.461858  4550 net.cpp:200] pool1 needs backward computation.
I0428 20:34:57.461860  4550 net.cpp:200] conv1 needs backward computation.
I0428 20:34:57.461863  4550 net.cpp:200] pool0 needs backward computation.
I0428 20:34:57.461866  4550 net.cpp:200] conv0 needs backward computation.
I0428 20:34:57.461869  4550 net.cpp:202] mnist does not need backward computation.
I0428 20:34:57.461871  4550 net.cpp:244] This network produces output loss
I0428 20:34:57.461896  4550 net.cpp:257] Network initialization done.
I0428 20:34:57.462256  4550 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1613.prototxt
I0428 20:34:57.462299  4550 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:34:57.462389  4550 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:34:57.462481  4550 layer_factory.hpp:77] Creating layer mnist
I0428 20:34:57.462524  4550 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:34:57.462538  4550 net.cpp:86] Creating Layer mnist
I0428 20:34:57.462543  4550 net.cpp:382] mnist -> data
I0428 20:34:57.462549  4550 net.cpp:382] mnist -> label
I0428 20:34:57.462631  4550 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:34:57.463755  4550 net.cpp:124] Setting up mnist
I0428 20:34:57.463783  4550 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:34:57.463788  4550 net.cpp:131] Top shape: 100 (100)
I0428 20:34:57.463790  4550 net.cpp:139] Memory required for data: 314000
I0428 20:34:57.463793  4550 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:34:57.463832  4550 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:34:57.463836  4550 net.cpp:408] label_mnist_1_split <- label
I0428 20:34:57.463841  4550 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:34:57.463847  4550 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:34:57.463910  4550 net.cpp:124] Setting up label_mnist_1_split
I0428 20:34:57.463917  4550 net.cpp:131] Top shape: 100 (100)
I0428 20:34:57.463920  4550 net.cpp:131] Top shape: 100 (100)
I0428 20:34:57.463923  4550 net.cpp:139] Memory required for data: 314800
I0428 20:34:57.463925  4550 layer_factory.hpp:77] Creating layer conv0
I0428 20:34:57.463935  4550 net.cpp:86] Creating Layer conv0
I0428 20:34:57.463938  4550 net.cpp:408] conv0 <- data
I0428 20:34:57.463944  4550 net.cpp:382] conv0 -> conv0
I0428 20:34:57.465698  4550 net.cpp:124] Setting up conv0
I0428 20:34:57.465713  4550 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:34:57.465730  4550 net.cpp:139] Memory required for data: 23354800
I0428 20:34:57.465741  4550 layer_factory.hpp:77] Creating layer pool0
I0428 20:34:57.465747  4550 net.cpp:86] Creating Layer pool0
I0428 20:34:57.465751  4550 net.cpp:408] pool0 <- conv0
I0428 20:34:57.465759  4550 net.cpp:382] pool0 -> pool0
I0428 20:34:57.465796  4550 net.cpp:124] Setting up pool0
I0428 20:34:57.465818  4550 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:34:57.465821  4550 net.cpp:139] Memory required for data: 29114800
I0428 20:34:57.465824  4550 layer_factory.hpp:77] Creating layer conv1
I0428 20:34:57.465833  4550 net.cpp:86] Creating Layer conv1
I0428 20:34:57.465837  4550 net.cpp:408] conv1 <- pool0
I0428 20:34:57.465844  4550 net.cpp:382] conv1 -> conv1
I0428 20:34:57.469163  4550 net.cpp:124] Setting up conv1
I0428 20:34:57.469178  4550 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:34:57.469182  4550 net.cpp:139] Memory required for data: 30394800
I0428 20:34:57.469189  4550 layer_factory.hpp:77] Creating layer pool1
I0428 20:34:57.469211  4550 net.cpp:86] Creating Layer pool1
I0428 20:34:57.469215  4550 net.cpp:408] pool1 <- conv1
I0428 20:34:57.469221  4550 net.cpp:382] pool1 -> pool1
I0428 20:34:57.469256  4550 net.cpp:124] Setting up pool1
I0428 20:34:57.469264  4550 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:34:57.469265  4550 net.cpp:139] Memory required for data: 30714800
I0428 20:34:57.469274  4550 layer_factory.hpp:77] Creating layer ip1
I0428 20:34:57.469280  4550 net.cpp:86] Creating Layer ip1
I0428 20:34:57.469288  4550 net.cpp:408] ip1 <- pool1
I0428 20:34:57.469295  4550 net.cpp:382] ip1 -> ip1
I0428 20:34:57.469456  4550 net.cpp:124] Setting up ip1
I0428 20:34:57.469473  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.469476  4550 net.cpp:139] Memory required for data: 30718800
I0428 20:34:57.469483  4550 layer_factory.hpp:77] Creating layer relu1
I0428 20:34:57.469488  4550 net.cpp:86] Creating Layer relu1
I0428 20:34:57.469492  4550 net.cpp:408] relu1 <- ip1
I0428 20:34:57.469496  4550 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:34:57.469705  4550 net.cpp:124] Setting up relu1
I0428 20:34:57.469713  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.469715  4550 net.cpp:139] Memory required for data: 30722800
I0428 20:34:57.469718  4550 layer_factory.hpp:77] Creating layer ip2
I0428 20:34:57.469725  4550 net.cpp:86] Creating Layer ip2
I0428 20:34:57.469728  4550 net.cpp:408] ip2 <- ip1
I0428 20:34:57.469733  4550 net.cpp:382] ip2 -> ip2
I0428 20:34:57.469844  4550 net.cpp:124] Setting up ip2
I0428 20:34:57.469851  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.469853  4550 net.cpp:139] Memory required for data: 30726800
I0428 20:34:57.469863  4550 layer_factory.hpp:77] Creating layer relu2
I0428 20:34:57.469868  4550 net.cpp:86] Creating Layer relu2
I0428 20:34:57.469871  4550 net.cpp:408] relu2 <- ip2
I0428 20:34:57.469876  4550 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:34:57.470024  4550 net.cpp:124] Setting up relu2
I0428 20:34:57.470031  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.470034  4550 net.cpp:139] Memory required for data: 30730800
I0428 20:34:57.470037  4550 layer_factory.hpp:77] Creating layer ip3
I0428 20:34:57.470043  4550 net.cpp:86] Creating Layer ip3
I0428 20:34:57.470046  4550 net.cpp:408] ip3 <- ip2
I0428 20:34:57.470052  4550 net.cpp:382] ip3 -> ip3
I0428 20:34:57.470141  4550 net.cpp:124] Setting up ip3
I0428 20:34:57.470147  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.470150  4550 net.cpp:139] Memory required for data: 30734800
I0428 20:34:57.470162  4550 layer_factory.hpp:77] Creating layer relu3
I0428 20:34:57.470168  4550 net.cpp:86] Creating Layer relu3
I0428 20:34:57.470171  4550 net.cpp:408] relu3 <- ip3
I0428 20:34:57.470175  4550 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:34:57.471016  4550 net.cpp:124] Setting up relu3
I0428 20:34:57.471027  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.471032  4550 net.cpp:139] Memory required for data: 30738800
I0428 20:34:57.471035  4550 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:34:57.471041  4550 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:34:57.471045  4550 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:34:57.471050  4550 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:34:57.471055  4550 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:34:57.471093  4550 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:34:57.471099  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.471103  4550 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:34:57.471107  4550 net.cpp:139] Memory required for data: 30746800
I0428 20:34:57.471108  4550 layer_factory.hpp:77] Creating layer accuracy
I0428 20:34:57.471117  4550 net.cpp:86] Creating Layer accuracy
I0428 20:34:57.471119  4550 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:34:57.471123  4550 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:34:57.471129  4550 net.cpp:382] accuracy -> accuracy
I0428 20:34:57.471135  4550 net.cpp:124] Setting up accuracy
I0428 20:34:57.471139  4550 net.cpp:131] Top shape: (1)
I0428 20:34:57.471143  4550 net.cpp:139] Memory required for data: 30746804
I0428 20:34:57.471144  4550 layer_factory.hpp:77] Creating layer loss
I0428 20:34:57.471149  4550 net.cpp:86] Creating Layer loss
I0428 20:34:57.471153  4550 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:34:57.471155  4550 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:34:57.471160  4550 net.cpp:382] loss -> loss
I0428 20:34:57.471166  4550 layer_factory.hpp:77] Creating layer loss
I0428 20:34:57.471444  4550 net.cpp:124] Setting up loss
I0428 20:34:57.471453  4550 net.cpp:131] Top shape: (1)
I0428 20:34:57.471457  4550 net.cpp:134]     with loss weight 1
I0428 20:34:57.471473  4550 net.cpp:139] Memory required for data: 30746808
I0428 20:34:57.471493  4550 net.cpp:200] loss needs backward computation.
I0428 20:34:57.471496  4550 net.cpp:202] accuracy does not need backward computation.
I0428 20:34:57.471500  4550 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:34:57.471503  4550 net.cpp:200] relu3 needs backward computation.
I0428 20:34:57.471506  4550 net.cpp:200] ip3 needs backward computation.
I0428 20:34:57.471509  4550 net.cpp:200] relu2 needs backward computation.
I0428 20:34:57.471513  4550 net.cpp:200] ip2 needs backward computation.
I0428 20:34:57.471514  4550 net.cpp:200] relu1 needs backward computation.
I0428 20:34:57.471518  4550 net.cpp:200] ip1 needs backward computation.
I0428 20:34:57.471520  4550 net.cpp:200] pool1 needs backward computation.
I0428 20:34:57.471524  4550 net.cpp:200] conv1 needs backward computation.
I0428 20:34:57.471526  4550 net.cpp:200] pool0 needs backward computation.
I0428 20:34:57.471530  4550 net.cpp:200] conv0 needs backward computation.
I0428 20:34:57.471534  4550 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:34:57.471539  4550 net.cpp:202] mnist does not need backward computation.
I0428 20:34:57.471540  4550 net.cpp:244] This network produces output accuracy
I0428 20:34:57.471544  4550 net.cpp:244] This network produces output loss
I0428 20:34:57.471555  4550 net.cpp:257] Network initialization done.
I0428 20:34:57.471598  4550 solver.cpp:56] Solver scaffolding done.
I0428 20:34:57.471993  4550 caffe.cpp:248] Starting Optimization
I0428 20:34:57.471999  4550 solver.cpp:273] Solving LeNet
I0428 20:34:57.472002  4550 solver.cpp:274] Learning Rate Policy: inv
I0428 20:34:57.472189  4550 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:34:57.582144  4557 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:57.584954  4550 solver.cpp:398]     Test net output #0: accuracy = 0.0653
I0428 20:34:57.584976  4550 solver.cpp:398]     Test net output #1: loss = 2.31142 (* 1 = 2.31142 loss)
I0428 20:34:57.591003  4550 solver.cpp:219] Iteration 0 (1.91343 iter/s, 0.118974s/100 iters), loss = 2.31838
I0428 20:34:57.591028  4550 solver.cpp:238]     Train net output #0: loss = 2.31838 (* 1 = 2.31838 loss)
I0428 20:34:57.591042  4550 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:34:57.835294  4550 solver.cpp:219] Iteration 100 (409.448 iter/s, 0.244231s/100 iters), loss = 0.67147
I0428 20:34:57.835355  4550 solver.cpp:238]     Train net output #0: loss = 0.67147 (* 1 = 0.67147 loss)
I0428 20:34:57.835369  4550 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:34:58.086833  4550 solver.cpp:219] Iteration 200 (397.675 iter/s, 0.251462s/100 iters), loss = 0.284951
I0428 20:34:58.086882  4550 solver.cpp:238]     Train net output #0: loss = 0.284951 (* 1 = 0.284951 loss)
I0428 20:34:58.086895  4550 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:34:58.334944  4550 solver.cpp:219] Iteration 300 (403.152 iter/s, 0.248046s/100 iters), loss = 0.472219
I0428 20:34:58.334986  4550 solver.cpp:238]     Train net output #0: loss = 0.472219 (* 1 = 0.472219 loss)
I0428 20:34:58.334997  4550 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:34:58.582013  4550 solver.cpp:219] Iteration 400 (404.84 iter/s, 0.247011s/100 iters), loss = 0.159183
I0428 20:34:58.582051  4550 solver.cpp:238]     Train net output #0: loss = 0.159183 (* 1 = 0.159183 loss)
I0428 20:34:58.582070  4550 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:34:58.826577  4550 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:34:58.940050  4557 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:34:58.944227  4550 solver.cpp:398]     Test net output #0: accuracy = 0.9566
I0428 20:34:58.944252  4550 solver.cpp:398]     Test net output #1: loss = 0.145097 (* 1 = 0.145097 loss)
I0428 20:34:58.946483  4550 solver.cpp:219] Iteration 500 (274.415 iter/s, 0.364412s/100 iters), loss = 0.169503
I0428 20:34:58.946509  4550 solver.cpp:238]     Train net output #0: loss = 0.169503 (* 1 = 0.169503 loss)
I0428 20:34:58.946534  4550 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:34:59.191290  4550 solver.cpp:219] Iteration 600 (408.559 iter/s, 0.244763s/100 iters), loss = 0.125909
I0428 20:34:59.191329  4550 solver.cpp:238]     Train net output #0: loss = 0.125909 (* 1 = 0.125909 loss)
I0428 20:34:59.191339  4550 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:34:59.442190  4550 solver.cpp:219] Iteration 700 (398.657 iter/s, 0.250842s/100 iters), loss = 0.107909
I0428 20:34:59.442230  4550 solver.cpp:238]     Train net output #0: loss = 0.107909 (* 1 = 0.107909 loss)
I0428 20:34:59.442241  4550 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:34:59.694808  4550 solver.cpp:219] Iteration 800 (395.947 iter/s, 0.252559s/100 iters), loss = 0.261842
I0428 20:34:59.694845  4550 solver.cpp:238]     Train net output #0: loss = 0.261842 (* 1 = 0.261842 loss)
I0428 20:34:59.694855  4550 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:34:59.952631  4550 solver.cpp:219] Iteration 900 (387.95 iter/s, 0.257765s/100 iters), loss = 0.124633
I0428 20:34:59.952682  4550 solver.cpp:238]     Train net output #0: loss = 0.124633 (* 1 = 0.124633 loss)
I0428 20:34:59.952697  4550 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:35:00.042809  4556 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:00.217625  4550 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:35:00.224104  4550 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:35:00.227093  4550 solver.cpp:311] Iteration 1000, loss = 0.13436
I0428 20:35:00.227124  4550 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:35:00.345532  4557 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:00.349769  4550 solver.cpp:398]     Test net output #0: accuracy = 0.9701
I0428 20:35:00.349792  4550 solver.cpp:398]     Test net output #1: loss = 0.0956755 (* 1 = 0.0956755 loss)
I0428 20:35:00.349798  4550 solver.cpp:316] Optimization Done.
I0428 20:35:00.349812  4550 caffe.cpp:259] Optimization Done.
