I0428 20:14:19.766907 32652 caffe.cpp:218] Using GPUs 0
I0428 20:14:19.800999 32652 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:20.308550 32652 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1219.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:20.308688 32652 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1219.prototxt
I0428 20:14:20.309084 32652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:20.309101 32652 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:20.309195 32652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:20.309270 32652 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:20.309376 32652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:20.309401 32652 net.cpp:86] Creating Layer mnist
I0428 20:14:20.309408 32652 net.cpp:382] mnist -> data
I0428 20:14:20.309430 32652 net.cpp:382] mnist -> label
I0428 20:14:20.310536 32652 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:20.313012 32652 net.cpp:124] Setting up mnist
I0428 20:14:20.313031 32652 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:20.313037 32652 net.cpp:131] Top shape: 64 (64)
I0428 20:14:20.313041 32652 net.cpp:139] Memory required for data: 200960
I0428 20:14:20.313048 32652 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:20.313066 32652 net.cpp:86] Creating Layer conv0
I0428 20:14:20.313071 32652 net.cpp:408] conv0 <- data
I0428 20:14:20.313083 32652 net.cpp:382] conv0 -> conv0
I0428 20:14:20.607612 32652 net.cpp:124] Setting up conv0
I0428 20:14:20.607645 32652 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:20.607650 32652 net.cpp:139] Memory required for data: 7573760
I0428 20:14:20.607692 32652 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:20.607705 32652 net.cpp:86] Creating Layer pool0
I0428 20:14:20.607710 32652 net.cpp:408] pool0 <- conv0
I0428 20:14:20.607717 32652 net.cpp:382] pool0 -> pool0
I0428 20:14:20.607775 32652 net.cpp:124] Setting up pool0
I0428 20:14:20.607785 32652 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:20.607789 32652 net.cpp:139] Memory required for data: 9416960
I0428 20:14:20.607792 32652 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:20.607805 32652 net.cpp:86] Creating Layer conv1
I0428 20:14:20.607810 32652 net.cpp:408] conv1 <- pool0
I0428 20:14:20.607815 32652 net.cpp:382] conv1 -> conv1
I0428 20:14:20.609990 32652 net.cpp:124] Setting up conv1
I0428 20:14:20.610008 32652 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:20.610013 32652 net.cpp:139] Memory required for data: 9449728
I0428 20:14:20.610023 32652 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:20.610033 32652 net.cpp:86] Creating Layer pool1
I0428 20:14:20.610036 32652 net.cpp:408] pool1 <- conv1
I0428 20:14:20.610043 32652 net.cpp:382] pool1 -> pool1
I0428 20:14:20.610085 32652 net.cpp:124] Setting up pool1
I0428 20:14:20.610091 32652 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:20.610095 32652 net.cpp:139] Memory required for data: 9457920
I0428 20:14:20.610100 32652 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:20.610107 32652 net.cpp:86] Creating Layer ip1
I0428 20:14:20.610111 32652 net.cpp:408] ip1 <- pool1
I0428 20:14:20.610117 32652 net.cpp:382] ip1 -> ip1
I0428 20:14:20.610254 32652 net.cpp:124] Setting up ip1
I0428 20:14:20.610262 32652 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:14:20.610266 32652 net.cpp:139] Memory required for data: 9470720
I0428 20:14:20.610275 32652 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:20.610281 32652 net.cpp:86] Creating Layer relu1
I0428 20:14:20.610285 32652 net.cpp:408] relu1 <- ip1
I0428 20:14:20.610291 32652 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:20.610488 32652 net.cpp:124] Setting up relu1
I0428 20:14:20.610501 32652 net.cpp:131] Top shape: 64 50 (3200)
I0428 20:14:20.610507 32652 net.cpp:139] Memory required for data: 9483520
I0428 20:14:20.610512 32652 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:20.610523 32652 net.cpp:86] Creating Layer ip2
I0428 20:14:20.610530 32652 net.cpp:408] ip2 <- ip1
I0428 20:14:20.610540 32652 net.cpp:382] ip2 -> ip2
I0428 20:14:20.610667 32652 net.cpp:124] Setting up ip2
I0428 20:14:20.610677 32652 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:20.610682 32652 net.cpp:139] Memory required for data: 9486080
I0428 20:14:20.610688 32652 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:20.610695 32652 net.cpp:86] Creating Layer relu2
I0428 20:14:20.610699 32652 net.cpp:408] relu2 <- ip2
I0428 20:14:20.610704 32652 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:20.611562 32652 net.cpp:124] Setting up relu2
I0428 20:14:20.611577 32652 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:20.611582 32652 net.cpp:139] Memory required for data: 9488640
I0428 20:14:20.611587 32652 layer_factory.hpp:77] Creating layer loss
I0428 20:14:20.611594 32652 net.cpp:86] Creating Layer loss
I0428 20:14:20.611598 32652 net.cpp:408] loss <- ip2
I0428 20:14:20.611604 32652 net.cpp:408] loss <- label
I0428 20:14:20.611611 32652 net.cpp:382] loss -> loss
I0428 20:14:20.611631 32652 layer_factory.hpp:77] Creating layer loss
I0428 20:14:20.611912 32652 net.cpp:124] Setting up loss
I0428 20:14:20.611923 32652 net.cpp:131] Top shape: (1)
I0428 20:14:20.611927 32652 net.cpp:134]     with loss weight 1
I0428 20:14:20.611943 32652 net.cpp:139] Memory required for data: 9488644
I0428 20:14:20.611948 32652 net.cpp:200] loss needs backward computation.
I0428 20:14:20.611951 32652 net.cpp:200] relu2 needs backward computation.
I0428 20:14:20.611955 32652 net.cpp:200] ip2 needs backward computation.
I0428 20:14:20.611959 32652 net.cpp:200] relu1 needs backward computation.
I0428 20:14:20.611963 32652 net.cpp:200] ip1 needs backward computation.
I0428 20:14:20.611980 32652 net.cpp:200] pool1 needs backward computation.
I0428 20:14:20.611984 32652 net.cpp:200] conv1 needs backward computation.
I0428 20:14:20.611987 32652 net.cpp:200] pool0 needs backward computation.
I0428 20:14:20.611991 32652 net.cpp:200] conv0 needs backward computation.
I0428 20:14:20.611995 32652 net.cpp:202] mnist does not need backward computation.
I0428 20:14:20.611999 32652 net.cpp:244] This network produces output loss
I0428 20:14:20.612010 32652 net.cpp:257] Network initialization done.
I0428 20:14:20.612356 32652 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1219.prototxt
I0428 20:14:20.612387 32652 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:20.612486 32652 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:14:20.612561 32652 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:20.612615 32652 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:20.612630 32652 net.cpp:86] Creating Layer mnist
I0428 20:14:20.612635 32652 net.cpp:382] mnist -> data
I0428 20:14:20.612644 32652 net.cpp:382] mnist -> label
I0428 20:14:20.612746 32652 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:20.615178 32652 net.cpp:124] Setting up mnist
I0428 20:14:20.615195 32652 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:20.615201 32652 net.cpp:131] Top shape: 100 (100)
I0428 20:14:20.615206 32652 net.cpp:139] Memory required for data: 314000
I0428 20:14:20.615209 32652 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:20.615217 32652 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:20.615221 32652 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:20.615227 32652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:20.615236 32652 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:20.615370 32652 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:20.615391 32652 net.cpp:131] Top shape: 100 (100)
I0428 20:14:20.615396 32652 net.cpp:131] Top shape: 100 (100)
I0428 20:14:20.615399 32652 net.cpp:139] Memory required for data: 314800
I0428 20:14:20.615403 32652 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:20.615413 32652 net.cpp:86] Creating Layer conv0
I0428 20:14:20.615417 32652 net.cpp:408] conv0 <- data
I0428 20:14:20.615423 32652 net.cpp:382] conv0 -> conv0
I0428 20:14:20.617297 32652 net.cpp:124] Setting up conv0
I0428 20:14:20.617314 32652 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:20.617319 32652 net.cpp:139] Memory required for data: 11834800
I0428 20:14:20.617331 32652 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:20.617338 32652 net.cpp:86] Creating Layer pool0
I0428 20:14:20.617342 32652 net.cpp:408] pool0 <- conv0
I0428 20:14:20.617348 32652 net.cpp:382] pool0 -> pool0
I0428 20:14:20.617390 32652 net.cpp:124] Setting up pool0
I0428 20:14:20.617396 32652 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:20.617400 32652 net.cpp:139] Memory required for data: 14714800
I0428 20:14:20.617403 32652 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:20.617413 32652 net.cpp:86] Creating Layer conv1
I0428 20:14:20.617418 32652 net.cpp:408] conv1 <- pool0
I0428 20:14:20.617424 32652 net.cpp:382] conv1 -> conv1
I0428 20:14:20.619133 32652 net.cpp:124] Setting up conv1
I0428 20:14:20.619150 32652 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:20.619155 32652 net.cpp:139] Memory required for data: 14766000
I0428 20:14:20.619165 32652 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:20.619174 32652 net.cpp:86] Creating Layer pool1
I0428 20:14:20.619177 32652 net.cpp:408] pool1 <- conv1
I0428 20:14:20.619184 32652 net.cpp:382] pool1 -> pool1
I0428 20:14:20.619225 32652 net.cpp:124] Setting up pool1
I0428 20:14:20.619233 32652 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:20.619237 32652 net.cpp:139] Memory required for data: 14778800
I0428 20:14:20.619241 32652 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:20.619256 32652 net.cpp:86] Creating Layer ip1
I0428 20:14:20.619261 32652 net.cpp:408] ip1 <- pool1
I0428 20:14:20.619266 32652 net.cpp:382] ip1 -> ip1
I0428 20:14:20.619390 32652 net.cpp:124] Setting up ip1
I0428 20:14:20.619400 32652 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:14:20.619410 32652 net.cpp:139] Memory required for data: 14798800
I0428 20:14:20.619420 32652 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:20.619426 32652 net.cpp:86] Creating Layer relu1
I0428 20:14:20.619429 32652 net.cpp:408] relu1 <- ip1
I0428 20:14:20.619436 32652 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:20.619621 32652 net.cpp:124] Setting up relu1
I0428 20:14:20.619632 32652 net.cpp:131] Top shape: 100 50 (5000)
I0428 20:14:20.619645 32652 net.cpp:139] Memory required for data: 14818800
I0428 20:14:20.619649 32652 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:20.619657 32652 net.cpp:86] Creating Layer ip2
I0428 20:14:20.619662 32652 net.cpp:408] ip2 <- ip1
I0428 20:14:20.619668 32652 net.cpp:382] ip2 -> ip2
I0428 20:14:20.619784 32652 net.cpp:124] Setting up ip2
I0428 20:14:20.619793 32652 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:20.619796 32652 net.cpp:139] Memory required for data: 14822800
I0428 20:14:20.619803 32652 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:20.619808 32652 net.cpp:86] Creating Layer relu2
I0428 20:14:20.619812 32652 net.cpp:408] relu2 <- ip2
I0428 20:14:20.619817 32652 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:20.620002 32652 net.cpp:124] Setting up relu2
I0428 20:14:20.620012 32652 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:20.620016 32652 net.cpp:139] Memory required for data: 14826800
I0428 20:14:20.620028 32652 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:14:20.620033 32652 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:14:20.620038 32652 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:14:20.620043 32652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:14:20.620062 32652 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:14:20.620108 32652 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:14:20.620115 32652 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:20.620121 32652 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:20.620123 32652 net.cpp:139] Memory required for data: 14834800
I0428 20:14:20.620127 32652 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:20.620132 32652 net.cpp:86] Creating Layer accuracy
I0428 20:14:20.620136 32652 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:14:20.620141 32652 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:20.620147 32652 net.cpp:382] accuracy -> accuracy
I0428 20:14:20.620154 32652 net.cpp:124] Setting up accuracy
I0428 20:14:20.620159 32652 net.cpp:131] Top shape: (1)
I0428 20:14:20.620162 32652 net.cpp:139] Memory required for data: 14834804
I0428 20:14:20.620167 32652 layer_factory.hpp:77] Creating layer loss
I0428 20:14:20.620172 32652 net.cpp:86] Creating Layer loss
I0428 20:14:20.620174 32652 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:14:20.620179 32652 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:20.620184 32652 net.cpp:382] loss -> loss
I0428 20:14:20.620192 32652 layer_factory.hpp:77] Creating layer loss
I0428 20:14:20.620501 32652 net.cpp:124] Setting up loss
I0428 20:14:20.620512 32652 net.cpp:131] Top shape: (1)
I0428 20:14:20.620523 32652 net.cpp:134]     with loss weight 1
I0428 20:14:20.620532 32652 net.cpp:139] Memory required for data: 14834808
I0428 20:14:20.620535 32652 net.cpp:200] loss needs backward computation.
I0428 20:14:20.620540 32652 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:20.620545 32652 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:14:20.620556 32652 net.cpp:200] relu2 needs backward computation.
I0428 20:14:20.620560 32652 net.cpp:200] ip2 needs backward computation.
I0428 20:14:20.620564 32652 net.cpp:200] relu1 needs backward computation.
I0428 20:14:20.620568 32652 net.cpp:200] ip1 needs backward computation.
I0428 20:14:20.620571 32652 net.cpp:200] pool1 needs backward computation.
I0428 20:14:20.620575 32652 net.cpp:200] conv1 needs backward computation.
I0428 20:14:20.620579 32652 net.cpp:200] pool0 needs backward computation.
I0428 20:14:20.620584 32652 net.cpp:200] conv0 needs backward computation.
I0428 20:14:20.620589 32652 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:20.620592 32652 net.cpp:202] mnist does not need backward computation.
I0428 20:14:20.620596 32652 net.cpp:244] This network produces output accuracy
I0428 20:14:20.620606 32652 net.cpp:244] This network produces output loss
I0428 20:14:20.620617 32652 net.cpp:257] Network initialization done.
I0428 20:14:20.620661 32652 solver.cpp:56] Solver scaffolding done.
I0428 20:14:20.620985 32652 caffe.cpp:248] Starting Optimization
I0428 20:14:20.620995 32652 solver.cpp:273] Solving LeNet
I0428 20:14:20.620998 32652 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:20.621845 32652 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:20.627925 32652 blocking_queue.cpp:49] Waiting for data
I0428 20:14:20.699045 32661 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:20.699874 32652 solver.cpp:398]     Test net output #0: accuracy = 0.1307
I0428 20:14:20.699900 32652 solver.cpp:398]     Test net output #1: loss = 2.30745 (* 1 = 2.30745 loss)
I0428 20:14:20.704555 32652 solver.cpp:219] Iteration 0 (0 iter/s, 0.0835277s/100 iters), loss = 2.31817
I0428 20:14:20.704586 32652 solver.cpp:238]     Train net output #0: loss = 2.31817 (* 1 = 2.31817 loss)
I0428 20:14:20.704599 32652 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:20.815433 32652 solver.cpp:219] Iteration 100 (902.243 iter/s, 0.110835s/100 iters), loss = 0.399466
I0428 20:14:20.815467 32652 solver.cpp:238]     Train net output #0: loss = 0.399466 (* 1 = 0.399466 loss)
I0428 20:14:20.815475 32652 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:20.929453 32652 solver.cpp:219] Iteration 200 (877.383 iter/s, 0.113975s/100 iters), loss = 0.276896
I0428 20:14:20.929502 32652 solver.cpp:238]     Train net output #0: loss = 0.276896 (* 1 = 0.276896 loss)
I0428 20:14:20.929512 32652 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:21.037811 32652 solver.cpp:219] Iteration 300 (923.35 iter/s, 0.108301s/100 iters), loss = 0.309883
I0428 20:14:21.037837 32652 solver.cpp:238]     Train net output #0: loss = 0.309883 (* 1 = 0.309883 loss)
I0428 20:14:21.037860 32652 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:21.144405 32652 solver.cpp:219] Iteration 400 (938.56 iter/s, 0.106546s/100 iters), loss = 0.144479
I0428 20:14:21.144443 32652 solver.cpp:238]     Train net output #0: loss = 0.144479 (* 1 = 0.144479 loss)
I0428 20:14:21.144449 32652 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:21.249617 32652 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:21.327177 32661 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:21.327898 32652 solver.cpp:398]     Test net output #0: accuracy = 0.9444
I0428 20:14:21.327916 32652 solver.cpp:398]     Test net output #1: loss = 0.178089 (* 1 = 0.178089 loss)
I0428 20:14:21.328979 32652 solver.cpp:219] Iteration 500 (541.948 iter/s, 0.18452s/100 iters), loss = 0.142171
I0428 20:14:21.329012 32652 solver.cpp:238]     Train net output #0: loss = 0.142171 (* 1 = 0.142171 loss)
I0428 20:14:21.329023 32652 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:21.443835 32652 solver.cpp:219] Iteration 600 (870.983 iter/s, 0.114813s/100 iters), loss = 0.126603
I0428 20:14:21.443873 32652 solver.cpp:238]     Train net output #0: loss = 0.126603 (* 1 = 0.126603 loss)
I0428 20:14:21.443881 32652 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:21.549019 32652 solver.cpp:219] Iteration 700 (951.018 iter/s, 0.10515s/100 iters), loss = 0.195345
I0428 20:14:21.549064 32652 solver.cpp:238]     Train net output #0: loss = 0.195345 (* 1 = 0.195345 loss)
I0428 20:14:21.549070 32652 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:21.656147 32652 solver.cpp:219] Iteration 800 (933.947 iter/s, 0.107073s/100 iters), loss = 0.413104
I0428 20:14:21.656174 32652 solver.cpp:238]     Train net output #0: loss = 0.413104 (* 1 = 0.413104 loss)
I0428 20:14:21.656182 32652 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:21.765899 32652 solver.cpp:219] Iteration 900 (911.449 iter/s, 0.109715s/100 iters), loss = 0.210459
I0428 20:14:21.765940 32652 solver.cpp:238]     Train net output #0: loss = 0.210459 (* 1 = 0.210459 loss)
I0428 20:14:21.765946 32652 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:21.802811 32658 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:21.871729 32652 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:21.872686 32652 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:21.873450 32652 solver.cpp:311] Iteration 1000, loss = 0.120983
I0428 20:14:21.873469 32652 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:21.949668 32661 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:21.950363 32652 solver.cpp:398]     Test net output #0: accuracy = 0.9646
I0428 20:14:21.950384 32652 solver.cpp:398]     Test net output #1: loss = 0.116368 (* 1 = 0.116368 loss)
I0428 20:14:21.950390 32652 solver.cpp:316] Optimization Done.
I0428 20:14:21.950394 32652 caffe.cpp:259] Optimization Done.
