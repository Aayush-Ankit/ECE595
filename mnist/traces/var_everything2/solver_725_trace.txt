I0428 19:55:06.325726 28119 caffe.cpp:218] Using GPUs 0
I0428 19:55:06.362603 28119 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:06.877259 28119 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test725.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:06.877396 28119 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test725.prototxt
I0428 19:55:06.877818 28119 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:06.877840 28119 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:06.877940 28119 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:06.878022 28119 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:06.878124 28119 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:06.878147 28119 net.cpp:86] Creating Layer mnist
I0428 19:55:06.878156 28119 net.cpp:382] mnist -> data
I0428 19:55:06.878178 28119 net.cpp:382] mnist -> label
I0428 19:55:06.879276 28119 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:06.881769 28119 net.cpp:124] Setting up mnist
I0428 19:55:06.881788 28119 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:06.881795 28119 net.cpp:131] Top shape: 64 (64)
I0428 19:55:06.881799 28119 net.cpp:139] Memory required for data: 200960
I0428 19:55:06.881806 28119 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:06.881824 28119 net.cpp:86] Creating Layer conv0
I0428 19:55:06.881852 28119 net.cpp:408] conv0 <- data
I0428 19:55:06.881865 28119 net.cpp:382] conv0 -> conv0
I0428 19:55:07.162595 28119 net.cpp:124] Setting up conv0
I0428 19:55:07.162622 28119 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:07.162626 28119 net.cpp:139] Memory required for data: 938240
I0428 19:55:07.162642 28119 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:07.162655 28119 net.cpp:86] Creating Layer pool0
I0428 19:55:07.162659 28119 net.cpp:408] pool0 <- conv0
I0428 19:55:07.162664 28119 net.cpp:382] pool0 -> pool0
I0428 19:55:07.162724 28119 net.cpp:124] Setting up pool0
I0428 19:55:07.162729 28119 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:07.162731 28119 net.cpp:139] Memory required for data: 1122560
I0428 19:55:07.162734 28119 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:07.162744 28119 net.cpp:86] Creating Layer conv1
I0428 19:55:07.162747 28119 net.cpp:408] conv1 <- pool0
I0428 19:55:07.162752 28119 net.cpp:382] conv1 -> conv1
I0428 19:55:07.165591 28119 net.cpp:124] Setting up conv1
I0428 19:55:07.165621 28119 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:07.165626 28119 net.cpp:139] Memory required for data: 2760960
I0428 19:55:07.165634 28119 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:07.165642 28119 net.cpp:86] Creating Layer pool1
I0428 19:55:07.165647 28119 net.cpp:408] pool1 <- conv1
I0428 19:55:07.165652 28119 net.cpp:382] pool1 -> pool1
I0428 19:55:07.165705 28119 net.cpp:124] Setting up pool1
I0428 19:55:07.165710 28119 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:07.165714 28119 net.cpp:139] Memory required for data: 3170560
I0428 19:55:07.165716 28119 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:07.165724 28119 net.cpp:86] Creating Layer ip1
I0428 19:55:07.165727 28119 net.cpp:408] ip1 <- pool1
I0428 19:55:07.165731 28119 net.cpp:382] ip1 -> ip1
I0428 19:55:07.166093 28119 net.cpp:124] Setting up ip1
I0428 19:55:07.166101 28119 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:07.166119 28119 net.cpp:139] Memory required for data: 3176960
I0428 19:55:07.166126 28119 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:07.166133 28119 net.cpp:86] Creating Layer relu1
I0428 19:55:07.166136 28119 net.cpp:408] relu1 <- ip1
I0428 19:55:07.166141 28119 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:07.166306 28119 net.cpp:124] Setting up relu1
I0428 19:55:07.166316 28119 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:07.166318 28119 net.cpp:139] Memory required for data: 3183360
I0428 19:55:07.166321 28119 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:07.166329 28119 net.cpp:86] Creating Layer ip2
I0428 19:55:07.166332 28119 net.cpp:408] ip2 <- ip1
I0428 19:55:07.166337 28119 net.cpp:382] ip2 -> ip2
I0428 19:55:07.166430 28119 net.cpp:124] Setting up ip2
I0428 19:55:07.166437 28119 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:07.166440 28119 net.cpp:139] Memory required for data: 3185920
I0428 19:55:07.166445 28119 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:07.166452 28119 net.cpp:86] Creating Layer relu2
I0428 19:55:07.166455 28119 net.cpp:408] relu2 <- ip2
I0428 19:55:07.166474 28119 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:07.167276 28119 net.cpp:124] Setting up relu2
I0428 19:55:07.167306 28119 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:07.167309 28119 net.cpp:139] Memory required for data: 3188480
I0428 19:55:07.167313 28119 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:07.167320 28119 net.cpp:86] Creating Layer ip3
I0428 19:55:07.167325 28119 net.cpp:408] ip3 <- ip2
I0428 19:55:07.167346 28119 net.cpp:382] ip3 -> ip3
I0428 19:55:07.167488 28119 net.cpp:124] Setting up ip3
I0428 19:55:07.167496 28119 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:07.167500 28119 net.cpp:139] Memory required for data: 3191040
I0428 19:55:07.167506 28119 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:07.167511 28119 net.cpp:86] Creating Layer relu3
I0428 19:55:07.167515 28119 net.cpp:408] relu3 <- ip3
I0428 19:55:07.167520 28119 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:07.167685 28119 net.cpp:124] Setting up relu3
I0428 19:55:07.167693 28119 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:07.167696 28119 net.cpp:139] Memory required for data: 3193600
I0428 19:55:07.167699 28119 layer_factory.hpp:77] Creating layer loss
I0428 19:55:07.167706 28119 net.cpp:86] Creating Layer loss
I0428 19:55:07.167709 28119 net.cpp:408] loss <- ip3
I0428 19:55:07.167713 28119 net.cpp:408] loss <- label
I0428 19:55:07.167718 28119 net.cpp:382] loss -> loss
I0428 19:55:07.167735 28119 layer_factory.hpp:77] Creating layer loss
I0428 19:55:07.168018 28119 net.cpp:124] Setting up loss
I0428 19:55:07.168027 28119 net.cpp:131] Top shape: (1)
I0428 19:55:07.168045 28119 net.cpp:134]     with loss weight 1
I0428 19:55:07.168077 28119 net.cpp:139] Memory required for data: 3193604
I0428 19:55:07.168081 28119 net.cpp:200] loss needs backward computation.
I0428 19:55:07.168084 28119 net.cpp:200] relu3 needs backward computation.
I0428 19:55:07.168087 28119 net.cpp:200] ip3 needs backward computation.
I0428 19:55:07.168090 28119 net.cpp:200] relu2 needs backward computation.
I0428 19:55:07.168093 28119 net.cpp:200] ip2 needs backward computation.
I0428 19:55:07.168097 28119 net.cpp:200] relu1 needs backward computation.
I0428 19:55:07.168099 28119 net.cpp:200] ip1 needs backward computation.
I0428 19:55:07.168102 28119 net.cpp:200] pool1 needs backward computation.
I0428 19:55:07.168105 28119 net.cpp:200] conv1 needs backward computation.
I0428 19:55:07.168108 28119 net.cpp:200] pool0 needs backward computation.
I0428 19:55:07.168110 28119 net.cpp:200] conv0 needs backward computation.
I0428 19:55:07.168114 28119 net.cpp:202] mnist does not need backward computation.
I0428 19:55:07.168118 28119 net.cpp:244] This network produces output loss
I0428 19:55:07.168128 28119 net.cpp:257] Network initialization done.
I0428 19:55:07.168470 28119 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test725.prototxt
I0428 19:55:07.168498 28119 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:07.168586 28119 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:07.168681 28119 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:07.168725 28119 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:07.168738 28119 net.cpp:86] Creating Layer mnist
I0428 19:55:07.168743 28119 net.cpp:382] mnist -> data
I0428 19:55:07.168751 28119 net.cpp:382] mnist -> label
I0428 19:55:07.168869 28119 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:07.170897 28119 net.cpp:124] Setting up mnist
I0428 19:55:07.170928 28119 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:07.170933 28119 net.cpp:131] Top shape: 100 (100)
I0428 19:55:07.170935 28119 net.cpp:139] Memory required for data: 314000
I0428 19:55:07.170938 28119 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:07.171012 28119 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:07.171017 28119 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:07.171023 28119 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:07.171031 28119 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:07.171080 28119 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:07.171088 28119 net.cpp:131] Top shape: 100 (100)
I0428 19:55:07.171092 28119 net.cpp:131] Top shape: 100 (100)
I0428 19:55:07.171095 28119 net.cpp:139] Memory required for data: 314800
I0428 19:55:07.171098 28119 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:07.171108 28119 net.cpp:86] Creating Layer conv0
I0428 19:55:07.171111 28119 net.cpp:408] conv0 <- data
I0428 19:55:07.171119 28119 net.cpp:382] conv0 -> conv0
I0428 19:55:07.172858 28119 net.cpp:124] Setting up conv0
I0428 19:55:07.172871 28119 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:07.172876 28119 net.cpp:139] Memory required for data: 1466800
I0428 19:55:07.172884 28119 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:07.172890 28119 net.cpp:86] Creating Layer pool0
I0428 19:55:07.172894 28119 net.cpp:408] pool0 <- conv0
I0428 19:55:07.172899 28119 net.cpp:382] pool0 -> pool0
I0428 19:55:07.172932 28119 net.cpp:124] Setting up pool0
I0428 19:55:07.172938 28119 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:07.172940 28119 net.cpp:139] Memory required for data: 1754800
I0428 19:55:07.172943 28119 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:07.172951 28119 net.cpp:86] Creating Layer conv1
I0428 19:55:07.172955 28119 net.cpp:408] conv1 <- pool0
I0428 19:55:07.172960 28119 net.cpp:382] conv1 -> conv1
I0428 19:55:07.174618 28119 net.cpp:124] Setting up conv1
I0428 19:55:07.174635 28119 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:07.174639 28119 net.cpp:139] Memory required for data: 4314800
I0428 19:55:07.174649 28119 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:07.174654 28119 net.cpp:86] Creating Layer pool1
I0428 19:55:07.174659 28119 net.cpp:408] pool1 <- conv1
I0428 19:55:07.174664 28119 net.cpp:382] pool1 -> pool1
I0428 19:55:07.174708 28119 net.cpp:124] Setting up pool1
I0428 19:55:07.174715 28119 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:07.174724 28119 net.cpp:139] Memory required for data: 4954800
I0428 19:55:07.174727 28119 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:07.174732 28119 net.cpp:86] Creating Layer ip1
I0428 19:55:07.174742 28119 net.cpp:408] ip1 <- pool1
I0428 19:55:07.174748 28119 net.cpp:382] ip1 -> ip1
I0428 19:55:07.175093 28119 net.cpp:124] Setting up ip1
I0428 19:55:07.175101 28119 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:07.175113 28119 net.cpp:139] Memory required for data: 4964800
I0428 19:55:07.175120 28119 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:07.175134 28119 net.cpp:86] Creating Layer relu1
I0428 19:55:07.175137 28119 net.cpp:408] relu1 <- ip1
I0428 19:55:07.175143 28119 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:07.175304 28119 net.cpp:124] Setting up relu1
I0428 19:55:07.175313 28119 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:07.175317 28119 net.cpp:139] Memory required for data: 4974800
I0428 19:55:07.175319 28119 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:07.175328 28119 net.cpp:86] Creating Layer ip2
I0428 19:55:07.175331 28119 net.cpp:408] ip2 <- ip1
I0428 19:55:07.175336 28119 net.cpp:382] ip2 -> ip2
I0428 19:55:07.175431 28119 net.cpp:124] Setting up ip2
I0428 19:55:07.175438 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.175443 28119 net.cpp:139] Memory required for data: 4978800
I0428 19:55:07.175451 28119 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:07.175458 28119 net.cpp:86] Creating Layer relu2
I0428 19:55:07.175462 28119 net.cpp:408] relu2 <- ip2
I0428 19:55:07.175467 28119 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:07.175689 28119 net.cpp:124] Setting up relu2
I0428 19:55:07.175698 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.175709 28119 net.cpp:139] Memory required for data: 4982800
I0428 19:55:07.175711 28119 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:07.175717 28119 net.cpp:86] Creating Layer ip3
I0428 19:55:07.175720 28119 net.cpp:408] ip3 <- ip2
I0428 19:55:07.175726 28119 net.cpp:382] ip3 -> ip3
I0428 19:55:07.175882 28119 net.cpp:124] Setting up ip3
I0428 19:55:07.175889 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.175892 28119 net.cpp:139] Memory required for data: 4986800
I0428 19:55:07.175899 28119 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:07.175905 28119 net.cpp:86] Creating Layer relu3
I0428 19:55:07.175909 28119 net.cpp:408] relu3 <- ip3
I0428 19:55:07.175912 28119 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:07.176646 28119 net.cpp:124] Setting up relu3
I0428 19:55:07.176659 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.176663 28119 net.cpp:139] Memory required for data: 4990800
I0428 19:55:07.176666 28119 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:07.176673 28119 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:07.176684 28119 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:07.176689 28119 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:07.176694 28119 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:07.176733 28119 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:07.176738 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.176741 28119 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:07.176743 28119 net.cpp:139] Memory required for data: 4998800
I0428 19:55:07.176746 28119 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:07.176751 28119 net.cpp:86] Creating Layer accuracy
I0428 19:55:07.176760 28119 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:07.176764 28119 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:07.176770 28119 net.cpp:382] accuracy -> accuracy
I0428 19:55:07.176791 28119 net.cpp:124] Setting up accuracy
I0428 19:55:07.176795 28119 net.cpp:131] Top shape: (1)
I0428 19:55:07.176803 28119 net.cpp:139] Memory required for data: 4998804
I0428 19:55:07.176806 28119 layer_factory.hpp:77] Creating layer loss
I0428 19:55:07.176817 28119 net.cpp:86] Creating Layer loss
I0428 19:55:07.176837 28119 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:07.176842 28119 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:07.176862 28119 net.cpp:382] loss -> loss
I0428 19:55:07.176870 28119 layer_factory.hpp:77] Creating layer loss
I0428 19:55:07.177310 28119 net.cpp:124] Setting up loss
I0428 19:55:07.177320 28119 net.cpp:131] Top shape: (1)
I0428 19:55:07.177335 28119 net.cpp:134]     with loss weight 1
I0428 19:55:07.177356 28119 net.cpp:139] Memory required for data: 4998808
I0428 19:55:07.177359 28119 net.cpp:200] loss needs backward computation.
I0428 19:55:07.177362 28119 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:07.177366 28119 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:07.177368 28119 net.cpp:200] relu3 needs backward computation.
I0428 19:55:07.177371 28119 net.cpp:200] ip3 needs backward computation.
I0428 19:55:07.177374 28119 net.cpp:200] relu2 needs backward computation.
I0428 19:55:07.177376 28119 net.cpp:200] ip2 needs backward computation.
I0428 19:55:07.177379 28119 net.cpp:200] relu1 needs backward computation.
I0428 19:55:07.177382 28119 net.cpp:200] ip1 needs backward computation.
I0428 19:55:07.177384 28119 net.cpp:200] pool1 needs backward computation.
I0428 19:55:07.177387 28119 net.cpp:200] conv1 needs backward computation.
I0428 19:55:07.177390 28119 net.cpp:200] pool0 needs backward computation.
I0428 19:55:07.177393 28119 net.cpp:200] conv0 needs backward computation.
I0428 19:55:07.177397 28119 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:07.177400 28119 net.cpp:202] mnist does not need backward computation.
I0428 19:55:07.177402 28119 net.cpp:244] This network produces output accuracy
I0428 19:55:07.177407 28119 net.cpp:244] This network produces output loss
I0428 19:55:07.177417 28119 net.cpp:257] Network initialization done.
I0428 19:55:07.177455 28119 solver.cpp:56] Solver scaffolding done.
I0428 19:55:07.177791 28119 caffe.cpp:248] Starting Optimization
I0428 19:55:07.177798 28119 solver.cpp:273] Solving LeNet
I0428 19:55:07.177800 28119 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:07.177965 28119 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:07.183795 28119 blocking_queue.cpp:49] Waiting for data
I0428 19:55:07.254156 28127 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:07.254765 28119 solver.cpp:398]     Test net output #0: accuracy = 0.1038
I0428 19:55:07.254784 28119 solver.cpp:398]     Test net output #1: loss = 2.304 (* 1 = 2.304 loss)
I0428 19:55:07.258461 28119 solver.cpp:219] Iteration 0 (-1.1393e-34 iter/s, 0.0806332s/100 iters), loss = 2.29934
I0428 19:55:07.258486 28119 solver.cpp:238]     Train net output #0: loss = 2.29934 (* 1 = 2.29934 loss)
I0428 19:55:07.258496 28119 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:07.413234 28119 solver.cpp:219] Iteration 100 (646.276 iter/s, 0.154733s/100 iters), loss = 0.729539
I0428 19:55:07.413275 28119 solver.cpp:238]     Train net output #0: loss = 0.729539 (* 1 = 0.729539 loss)
I0428 19:55:07.413281 28119 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:07.561717 28119 solver.cpp:219] Iteration 200 (673.719 iter/s, 0.14843s/100 iters), loss = 0.594994
I0428 19:55:07.561758 28119 solver.cpp:238]     Train net output #0: loss = 0.594994 (* 1 = 0.594994 loss)
I0428 19:55:07.561763 28119 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:07.707712 28119 solver.cpp:219] Iteration 300 (685.124 iter/s, 0.145959s/100 iters), loss = 0.382034
I0428 19:55:07.707753 28119 solver.cpp:238]     Train net output #0: loss = 0.382034 (* 1 = 0.382034 loss)
I0428 19:55:07.707759 28119 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:07.855952 28119 solver.cpp:219] Iteration 400 (674.757 iter/s, 0.148201s/100 iters), loss = 0.34579
I0428 19:55:07.855990 28119 solver.cpp:238]     Train net output #0: loss = 0.34579 (* 1 = 0.34579 loss)
I0428 19:55:07.855995 28119 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:08.004019 28119 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:08.073531 28127 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:08.074121 28119 solver.cpp:398]     Test net output #0: accuracy = 0.8478
I0428 19:55:08.074141 28119 solver.cpp:398]     Test net output #1: loss = 0.416954 (* 1 = 0.416954 loss)
I0428 19:55:08.075726 28119 solver.cpp:219] Iteration 500 (455.096 iter/s, 0.219734s/100 iters), loss = 0.41931
I0428 19:55:08.075764 28119 solver.cpp:238]     Train net output #0: loss = 0.41931 (* 1 = 0.41931 loss)
I0428 19:55:08.075772 28119 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:08.223526 28119 solver.cpp:219] Iteration 600 (676.817 iter/s, 0.14775s/100 iters), loss = 0.39457
I0428 19:55:08.223564 28119 solver.cpp:238]     Train net output #0: loss = 0.39457 (* 1 = 0.39457 loss)
I0428 19:55:08.223570 28119 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:08.371829 28119 solver.cpp:219] Iteration 700 (674.459 iter/s, 0.148267s/100 iters), loss = 0.361623
I0428 19:55:08.371870 28119 solver.cpp:238]     Train net output #0: loss = 0.361623 (* 1 = 0.361623 loss)
I0428 19:55:08.371876 28119 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:08.527837 28119 solver.cpp:219] Iteration 800 (641.147 iter/s, 0.155971s/100 iters), loss = 0.4462
I0428 19:55:08.527861 28119 solver.cpp:238]     Train net output #0: loss = 0.4462 (* 1 = 0.4462 loss)
I0428 19:55:08.527868 28119 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:08.681010 28119 solver.cpp:219] Iteration 900 (653.018 iter/s, 0.153135s/100 iters), loss = 0.198292
I0428 19:55:08.681049 28119 solver.cpp:238]     Train net output #0: loss = 0.198291 (* 1 = 0.198291 loss)
I0428 19:55:08.681056 28119 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:08.730267 28125 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:08.826627 28119 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:08.828757 28119 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:08.829784 28119 solver.cpp:311] Iteration 1000, loss = 0.37122
I0428 19:55:08.829799 28119 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:08.905513 28127 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:08.906136 28119 solver.cpp:398]     Test net output #0: accuracy = 0.8751
I0428 19:55:08.906158 28119 solver.cpp:398]     Test net output #1: loss = 0.322786 (* 1 = 0.322786 loss)
I0428 19:55:08.906164 28119 solver.cpp:316] Optimization Done.
I0428 19:55:08.906167 28119 caffe.cpp:259] Optimization Done.
