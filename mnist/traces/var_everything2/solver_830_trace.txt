I0428 19:58:49.806529 29092 caffe.cpp:218] Using GPUs 0
I0428 19:58:49.843322 29092 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:58:50.354256 29092 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test830.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:58:50.354395 29092 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test830.prototxt
I0428 19:58:50.354765 29092 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:58:50.354782 29092 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:58:50.354868 29092 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:58:50.354936 29092 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:50.355039 29092 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:58:50.355064 29092 net.cpp:86] Creating Layer mnist
I0428 19:58:50.355072 29092 net.cpp:382] mnist -> data
I0428 19:58:50.355094 29092 net.cpp:382] mnist -> label
I0428 19:58:50.356194 29092 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:58:50.358640 29092 net.cpp:124] Setting up mnist
I0428 19:58:50.358659 29092 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:58:50.358666 29092 net.cpp:131] Top shape: 64 (64)
I0428 19:58:50.358670 29092 net.cpp:139] Memory required for data: 200960
I0428 19:58:50.358677 29092 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:50.358693 29092 net.cpp:86] Creating Layer conv0
I0428 19:58:50.358700 29092 net.cpp:408] conv0 <- data
I0428 19:58:50.358711 29092 net.cpp:382] conv0 -> conv0
I0428 19:58:50.648564 29092 net.cpp:124] Setting up conv0
I0428 19:58:50.648593 29092 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 19:58:50.648597 29092 net.cpp:139] Memory required for data: 1675520
I0428 19:58:50.648635 29092 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:50.648649 29092 net.cpp:86] Creating Layer pool0
I0428 19:58:50.648654 29092 net.cpp:408] pool0 <- conv0
I0428 19:58:50.648659 29092 net.cpp:382] pool0 -> pool0
I0428 19:58:50.648710 29092 net.cpp:124] Setting up pool0
I0428 19:58:50.648715 29092 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 19:58:50.648718 29092 net.cpp:139] Memory required for data: 2044160
I0428 19:58:50.648722 29092 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:50.648732 29092 net.cpp:86] Creating Layer conv1
I0428 19:58:50.648736 29092 net.cpp:408] conv1 <- pool0
I0428 19:58:50.648741 29092 net.cpp:382] conv1 -> conv1
I0428 19:58:50.651518 29092 net.cpp:124] Setting up conv1
I0428 19:58:50.651535 29092 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:58:50.651538 29092 net.cpp:139] Memory required for data: 2208000
I0428 19:58:50.651547 29092 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:50.651556 29092 net.cpp:86] Creating Layer pool1
I0428 19:58:50.651561 29092 net.cpp:408] pool1 <- conv1
I0428 19:58:50.651566 29092 net.cpp:382] pool1 -> pool1
I0428 19:58:50.651607 29092 net.cpp:124] Setting up pool1
I0428 19:58:50.651612 29092 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:58:50.651615 29092 net.cpp:139] Memory required for data: 2248960
I0428 19:58:50.651618 29092 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:50.651625 29092 net.cpp:86] Creating Layer ip1
I0428 19:58:50.651628 29092 net.cpp:408] ip1 <- pool1
I0428 19:58:50.651636 29092 net.cpp:382] ip1 -> ip1
I0428 19:58:50.652638 29092 net.cpp:124] Setting up ip1
I0428 19:58:50.652650 29092 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:50.652653 29092 net.cpp:139] Memory required for data: 2261760
I0428 19:58:50.652662 29092 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:50.652669 29092 net.cpp:86] Creating Layer relu1
I0428 19:58:50.652673 29092 net.cpp:408] relu1 <- ip1
I0428 19:58:50.652678 29092 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:50.652878 29092 net.cpp:124] Setting up relu1
I0428 19:58:50.652887 29092 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:58:50.652891 29092 net.cpp:139] Memory required for data: 2274560
I0428 19:58:50.652894 29092 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:50.652902 29092 net.cpp:86] Creating Layer ip2
I0428 19:58:50.652906 29092 net.cpp:408] ip2 <- ip1
I0428 19:58:50.652911 29092 net.cpp:382] ip2 -> ip2
I0428 19:58:50.653018 29092 net.cpp:124] Setting up ip2
I0428 19:58:50.653025 29092 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:50.653028 29092 net.cpp:139] Memory required for data: 2277120
I0428 19:58:50.653034 29092 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:50.653041 29092 net.cpp:86] Creating Layer relu2
I0428 19:58:50.653044 29092 net.cpp:408] relu2 <- ip2
I0428 19:58:50.653050 29092 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:50.653803 29092 net.cpp:124] Setting up relu2
I0428 19:58:50.653816 29092 net.cpp:131] Top shape: 64 10 (640)
I0428 19:58:50.653820 29092 net.cpp:139] Memory required for data: 2279680
I0428 19:58:50.653823 29092 layer_factory.hpp:77] Creating layer loss
I0428 19:58:50.653836 29092 net.cpp:86] Creating Layer loss
I0428 19:58:50.653839 29092 net.cpp:408] loss <- ip2
I0428 19:58:50.653843 29092 net.cpp:408] loss <- label
I0428 19:58:50.653849 29092 net.cpp:382] loss -> loss
I0428 19:58:50.653864 29092 layer_factory.hpp:77] Creating layer loss
I0428 19:58:50.654114 29092 net.cpp:124] Setting up loss
I0428 19:58:50.654124 29092 net.cpp:131] Top shape: (1)
I0428 19:58:50.654126 29092 net.cpp:134]     with loss weight 1
I0428 19:58:50.654140 29092 net.cpp:139] Memory required for data: 2279684
I0428 19:58:50.654144 29092 net.cpp:200] loss needs backward computation.
I0428 19:58:50.654147 29092 net.cpp:200] relu2 needs backward computation.
I0428 19:58:50.654151 29092 net.cpp:200] ip2 needs backward computation.
I0428 19:58:50.654155 29092 net.cpp:200] relu1 needs backward computation.
I0428 19:58:50.654157 29092 net.cpp:200] ip1 needs backward computation.
I0428 19:58:50.654170 29092 net.cpp:200] pool1 needs backward computation.
I0428 19:58:50.654173 29092 net.cpp:200] conv1 needs backward computation.
I0428 19:58:50.654176 29092 net.cpp:200] pool0 needs backward computation.
I0428 19:58:50.654180 29092 net.cpp:200] conv0 needs backward computation.
I0428 19:58:50.654183 29092 net.cpp:202] mnist does not need backward computation.
I0428 19:58:50.654186 29092 net.cpp:244] This network produces output loss
I0428 19:58:50.654196 29092 net.cpp:257] Network initialization done.
I0428 19:58:50.654489 29092 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test830.prototxt
I0428 19:58:50.654515 29092 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:58:50.654603 29092 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:58:50.654671 29092 layer_factory.hpp:77] Creating layer mnist
I0428 19:58:50.654714 29092 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:58:50.654726 29092 net.cpp:86] Creating Layer mnist
I0428 19:58:50.654733 29092 net.cpp:382] mnist -> data
I0428 19:58:50.654741 29092 net.cpp:382] mnist -> label
I0428 19:58:50.654837 29092 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:58:50.656927 29092 net.cpp:124] Setting up mnist
I0428 19:58:50.656940 29092 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:58:50.656945 29092 net.cpp:131] Top shape: 100 (100)
I0428 19:58:50.656949 29092 net.cpp:139] Memory required for data: 314000
I0428 19:58:50.656952 29092 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:58:50.656958 29092 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:58:50.656962 29092 net.cpp:408] label_mnist_1_split <- label
I0428 19:58:50.656968 29092 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:58:50.656976 29092 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:58:50.657016 29092 net.cpp:124] Setting up label_mnist_1_split
I0428 19:58:50.657032 29092 net.cpp:131] Top shape: 100 (100)
I0428 19:58:50.657035 29092 net.cpp:131] Top shape: 100 (100)
I0428 19:58:50.657038 29092 net.cpp:139] Memory required for data: 314800
I0428 19:58:50.657042 29092 layer_factory.hpp:77] Creating layer conv0
I0428 19:58:50.657052 29092 net.cpp:86] Creating Layer conv0
I0428 19:58:50.657055 29092 net.cpp:408] conv0 <- data
I0428 19:58:50.657060 29092 net.cpp:382] conv0 -> conv0
I0428 19:58:50.658805 29092 net.cpp:124] Setting up conv0
I0428 19:58:50.658819 29092 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 19:58:50.658823 29092 net.cpp:139] Memory required for data: 2618800
I0428 19:58:50.658833 29092 layer_factory.hpp:77] Creating layer pool0
I0428 19:58:50.658839 29092 net.cpp:86] Creating Layer pool0
I0428 19:58:50.658844 29092 net.cpp:408] pool0 <- conv0
I0428 19:58:50.658849 29092 net.cpp:382] pool0 -> pool0
I0428 19:58:50.658886 29092 net.cpp:124] Setting up pool0
I0428 19:58:50.658895 29092 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 19:58:50.658898 29092 net.cpp:139] Memory required for data: 3194800
I0428 19:58:50.658901 29092 layer_factory.hpp:77] Creating layer conv1
I0428 19:58:50.658910 29092 net.cpp:86] Creating Layer conv1
I0428 19:58:50.658915 29092 net.cpp:408] conv1 <- pool0
I0428 19:58:50.658920 29092 net.cpp:382] conv1 -> conv1
I0428 19:58:50.661027 29092 net.cpp:124] Setting up conv1
I0428 19:58:50.661042 29092 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:58:50.661046 29092 net.cpp:139] Memory required for data: 3450800
I0428 19:58:50.661072 29092 layer_factory.hpp:77] Creating layer pool1
I0428 19:58:50.661082 29092 net.cpp:86] Creating Layer pool1
I0428 19:58:50.661084 29092 net.cpp:408] pool1 <- conv1
I0428 19:58:50.661092 29092 net.cpp:382] pool1 -> pool1
I0428 19:58:50.661151 29092 net.cpp:124] Setting up pool1
I0428 19:58:50.661159 29092 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:58:50.661164 29092 net.cpp:139] Memory required for data: 3514800
I0428 19:58:50.661181 29092 layer_factory.hpp:77] Creating layer ip1
I0428 19:58:50.661187 29092 net.cpp:86] Creating Layer ip1
I0428 19:58:50.661191 29092 net.cpp:408] ip1 <- pool1
I0428 19:58:50.661197 29092 net.cpp:382] ip1 -> ip1
I0428 19:58:50.661355 29092 net.cpp:124] Setting up ip1
I0428 19:58:50.661362 29092 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:50.661365 29092 net.cpp:139] Memory required for data: 3534800
I0428 19:58:50.661372 29092 layer_factory.hpp:77] Creating layer relu1
I0428 19:58:50.661379 29092 net.cpp:86] Creating Layer relu1
I0428 19:58:50.661382 29092 net.cpp:408] relu1 <- ip1
I0428 19:58:50.661386 29092 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:58:50.661649 29092 net.cpp:124] Setting up relu1
I0428 19:58:50.661659 29092 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:58:50.661664 29092 net.cpp:139] Memory required for data: 3554800
I0428 19:58:50.661666 29092 layer_factory.hpp:77] Creating layer ip2
I0428 19:58:50.661680 29092 net.cpp:86] Creating Layer ip2
I0428 19:58:50.661684 29092 net.cpp:408] ip2 <- ip1
I0428 19:58:50.661689 29092 net.cpp:382] ip2 -> ip2
I0428 19:58:50.661797 29092 net.cpp:124] Setting up ip2
I0428 19:58:50.661803 29092 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:50.661806 29092 net.cpp:139] Memory required for data: 3558800
I0428 19:58:50.661813 29092 layer_factory.hpp:77] Creating layer relu2
I0428 19:58:50.661818 29092 net.cpp:86] Creating Layer relu2
I0428 19:58:50.661820 29092 net.cpp:408] relu2 <- ip2
I0428 19:58:50.661825 29092 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:58:50.662004 29092 net.cpp:124] Setting up relu2
I0428 19:58:50.662029 29092 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:50.662032 29092 net.cpp:139] Memory required for data: 3562800
I0428 19:58:50.662035 29092 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:58:50.662042 29092 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:58:50.662045 29092 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:58:50.662050 29092 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:58:50.662067 29092 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:58:50.662106 29092 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:58:50.662112 29092 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:50.662117 29092 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:58:50.662120 29092 net.cpp:139] Memory required for data: 3570800
I0428 19:58:50.662123 29092 layer_factory.hpp:77] Creating layer accuracy
I0428 19:58:50.662128 29092 net.cpp:86] Creating Layer accuracy
I0428 19:58:50.662132 29092 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:58:50.662142 29092 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:58:50.662148 29092 net.cpp:382] accuracy -> accuracy
I0428 19:58:50.662156 29092 net.cpp:124] Setting up accuracy
I0428 19:58:50.662160 29092 net.cpp:131] Top shape: (1)
I0428 19:58:50.662164 29092 net.cpp:139] Memory required for data: 3570804
I0428 19:58:50.662168 29092 layer_factory.hpp:77] Creating layer loss
I0428 19:58:50.662173 29092 net.cpp:86] Creating Layer loss
I0428 19:58:50.662175 29092 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:58:50.662179 29092 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:58:50.662191 29092 net.cpp:382] loss -> loss
I0428 19:58:50.662197 29092 layer_factory.hpp:77] Creating layer loss
I0428 19:58:50.662461 29092 net.cpp:124] Setting up loss
I0428 19:58:50.662469 29092 net.cpp:131] Top shape: (1)
I0428 19:58:50.662473 29092 net.cpp:134]     with loss weight 1
I0428 19:58:50.662479 29092 net.cpp:139] Memory required for data: 3570808
I0428 19:58:50.662483 29092 net.cpp:200] loss needs backward computation.
I0428 19:58:50.662487 29092 net.cpp:202] accuracy does not need backward computation.
I0428 19:58:50.662490 29092 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:58:50.662493 29092 net.cpp:200] relu2 needs backward computation.
I0428 19:58:50.662497 29092 net.cpp:200] ip2 needs backward computation.
I0428 19:58:50.662499 29092 net.cpp:200] relu1 needs backward computation.
I0428 19:58:50.662503 29092 net.cpp:200] ip1 needs backward computation.
I0428 19:58:50.662504 29092 net.cpp:200] pool1 needs backward computation.
I0428 19:58:50.662508 29092 net.cpp:200] conv1 needs backward computation.
I0428 19:58:50.662511 29092 net.cpp:200] pool0 needs backward computation.
I0428 19:58:50.662514 29092 net.cpp:200] conv0 needs backward computation.
I0428 19:58:50.662518 29092 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:58:50.662521 29092 net.cpp:202] mnist does not need backward computation.
I0428 19:58:50.662524 29092 net.cpp:244] This network produces output accuracy
I0428 19:58:50.662528 29092 net.cpp:244] This network produces output loss
I0428 19:58:50.662539 29092 net.cpp:257] Network initialization done.
I0428 19:58:50.662575 29092 solver.cpp:56] Solver scaffolding done.
I0428 19:58:50.662938 29092 caffe.cpp:248] Starting Optimization
I0428 19:58:50.662948 29092 solver.cpp:273] Solving LeNet
I0428 19:58:50.662953 29092 solver.cpp:274] Learning Rate Policy: inv
I0428 19:58:50.663774 29092 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:58:50.667675 29092 blocking_queue.cpp:49] Waiting for data
I0428 19:58:50.738592 29099 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:50.739086 29092 solver.cpp:398]     Test net output #0: accuracy = 0.1334
I0428 19:58:50.739120 29092 solver.cpp:398]     Test net output #1: loss = 2.30006 (* 1 = 2.30006 loss)
I0428 19:58:50.741570 29092 solver.cpp:219] Iteration 0 (0 iter/s, 0.0785776s/100 iters), loss = 2.28575
I0428 19:58:50.741597 29092 solver.cpp:238]     Train net output #0: loss = 2.28575 (* 1 = 2.28575 loss)
I0428 19:58:50.741611 29092 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:58:50.814203 29092 solver.cpp:219] Iteration 100 (1377.5 iter/s, 0.0725954s/100 iters), loss = 0.692094
I0428 19:58:50.814241 29092 solver.cpp:238]     Train net output #0: loss = 0.692094 (* 1 = 0.692094 loss)
I0428 19:58:50.814247 29092 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:58:50.897438 29092 solver.cpp:219] Iteration 200 (1202.14 iter/s, 0.0831848s/100 iters), loss = 0.501686
I0428 19:58:50.897480 29092 solver.cpp:238]     Train net output #0: loss = 0.501686 (* 1 = 0.501686 loss)
I0428 19:58:50.897486 29092 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:58:50.974318 29092 solver.cpp:219] Iteration 300 (1301.58 iter/s, 0.0768297s/100 iters), loss = 0.265104
I0428 19:58:50.974355 29092 solver.cpp:238]     Train net output #0: loss = 0.265104 (* 1 = 0.265104 loss)
I0428 19:58:50.974361 29092 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:58:51.046049 29092 solver.cpp:219] Iteration 400 (1394.97 iter/s, 0.0716861s/100 iters), loss = 0.133609
I0428 19:58:51.046088 29092 solver.cpp:238]     Train net output #0: loss = 0.133609 (* 1 = 0.133609 loss)
I0428 19:58:51.046094 29092 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:58:51.117537 29092 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:58:51.193017 29099 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:51.193519 29092 solver.cpp:398]     Test net output #0: accuracy = 0.9559
I0428 19:58:51.193539 29092 solver.cpp:398]     Test net output #1: loss = 0.138849 (* 1 = 0.138849 loss)
I0428 19:58:51.194332 29092 solver.cpp:219] Iteration 500 (674.543 iter/s, 0.148249s/100 iters), loss = 0.114303
I0428 19:58:51.194355 29092 solver.cpp:238]     Train net output #0: loss = 0.114302 (* 1 = 0.114302 loss)
I0428 19:58:51.194363 29092 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:58:51.279196 29092 solver.cpp:219] Iteration 600 (1178.81 iter/s, 0.0848312s/100 iters), loss = 0.079273
I0428 19:58:51.279219 29092 solver.cpp:238]     Train net output #0: loss = 0.079273 (* 1 = 0.079273 loss)
I0428 19:58:51.279240 29092 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:58:51.352834 29092 solver.cpp:219] Iteration 700 (1358.57 iter/s, 0.073607s/100 iters), loss = 0.109857
I0428 19:58:51.352857 29092 solver.cpp:238]     Train net output #0: loss = 0.109857 (* 1 = 0.109857 loss)
I0428 19:58:51.352880 29092 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:58:51.425004 29092 solver.cpp:219] Iteration 800 (1386.28 iter/s, 0.0721357s/100 iters), loss = 0.284594
I0428 19:58:51.425031 29092 solver.cpp:238]     Train net output #0: loss = 0.284594 (* 1 = 0.284594 loss)
I0428 19:58:51.425037 29092 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:58:51.507342 29092 solver.cpp:219] Iteration 900 (1215.04 iter/s, 0.082302s/100 iters), loss = 0.0974494
I0428 19:58:51.507397 29092 solver.cpp:238]     Train net output #0: loss = 0.0974493 (* 1 = 0.0974493 loss)
I0428 19:58:51.507403 29092 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:58:51.535838 29098 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:51.589412 29092 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:58:51.590291 29092 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:58:51.590816 29092 solver.cpp:311] Iteration 1000, loss = 0.127699
I0428 19:58:51.590831 29092 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:58:51.665758 29099 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:58:51.666358 29092 solver.cpp:398]     Test net output #0: accuracy = 0.9723
I0428 19:58:51.666389 29092 solver.cpp:398]     Test net output #1: loss = 0.0884165 (* 1 = 0.0884165 loss)
I0428 19:58:51.666398 29092 solver.cpp:316] Optimization Done.
I0428 19:58:51.666402 29092 caffe.cpp:259] Optimization Done.
