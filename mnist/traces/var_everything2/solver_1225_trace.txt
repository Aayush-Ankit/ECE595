I0428 20:14:34.150645 32705 caffe.cpp:218] Using GPUs 0
I0428 20:14:34.180369 32705 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:34.618698 32705 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1225.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:34.618835 32705 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1225.prototxt
I0428 20:14:34.619151 32705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:34.619165 32705 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:34.619240 32705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:34.619297 32705 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:34.619379 32705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:34.619397 32705 net.cpp:86] Creating Layer mnist
I0428 20:14:34.619403 32705 net.cpp:382] mnist -> data
I0428 20:14:34.619422 32705 net.cpp:382] mnist -> label
I0428 20:14:34.620316 32705 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:34.622423 32705 net.cpp:124] Setting up mnist
I0428 20:14:34.622469 32705 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:34.622474 32705 net.cpp:131] Top shape: 64 (64)
I0428 20:14:34.622478 32705 net.cpp:139] Memory required for data: 200960
I0428 20:14:34.622483 32705 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:34.622527 32705 net.cpp:86] Creating Layer conv0
I0428 20:14:34.622560 32705 net.cpp:408] conv0 <- data
I0428 20:14:34.622570 32705 net.cpp:382] conv0 -> conv0
I0428 20:14:34.846858 32705 net.cpp:124] Setting up conv0
I0428 20:14:34.846884 32705 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:34.846887 32705 net.cpp:139] Memory required for data: 7573760
I0428 20:14:34.846901 32705 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:34.846915 32705 net.cpp:86] Creating Layer pool0
I0428 20:14:34.846918 32705 net.cpp:408] pool0 <- conv0
I0428 20:14:34.846923 32705 net.cpp:382] pool0 -> pool0
I0428 20:14:34.846987 32705 net.cpp:124] Setting up pool0
I0428 20:14:34.846997 32705 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:34.847000 32705 net.cpp:139] Memory required for data: 9416960
I0428 20:14:34.847003 32705 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:34.847013 32705 net.cpp:86] Creating Layer conv1
I0428 20:14:34.847018 32705 net.cpp:408] conv1 <- pool0
I0428 20:14:34.847021 32705 net.cpp:382] conv1 -> conv1
I0428 20:14:34.848929 32705 net.cpp:124] Setting up conv1
I0428 20:14:34.848944 32705 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:34.848948 32705 net.cpp:139] Memory required for data: 9449728
I0428 20:14:34.848958 32705 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:34.848964 32705 net.cpp:86] Creating Layer pool1
I0428 20:14:34.848984 32705 net.cpp:408] pool1 <- conv1
I0428 20:14:34.848989 32705 net.cpp:382] pool1 -> pool1
I0428 20:14:34.849025 32705 net.cpp:124] Setting up pool1
I0428 20:14:34.849032 32705 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:34.849036 32705 net.cpp:139] Memory required for data: 9457920
I0428 20:14:34.849040 32705 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:34.849051 32705 net.cpp:86] Creating Layer ip1
I0428 20:14:34.849054 32705 net.cpp:408] ip1 <- pool1
I0428 20:14:34.849059 32705 net.cpp:382] ip1 -> ip1
I0428 20:14:34.849159 32705 net.cpp:124] Setting up ip1
I0428 20:14:34.849166 32705 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:34.849169 32705 net.cpp:139] Memory required for data: 9460480
I0428 20:14:34.849177 32705 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:34.849184 32705 net.cpp:86] Creating Layer relu1
I0428 20:14:34.849186 32705 net.cpp:408] relu1 <- ip1
I0428 20:14:34.849190 32705 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:34.849400 32705 net.cpp:124] Setting up relu1
I0428 20:14:34.849407 32705 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:34.849411 32705 net.cpp:139] Memory required for data: 9463040
I0428 20:14:34.849413 32705 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:34.849421 32705 net.cpp:86] Creating Layer ip2
I0428 20:14:34.849423 32705 net.cpp:408] ip2 <- ip1
I0428 20:14:34.849428 32705 net.cpp:382] ip2 -> ip2
I0428 20:14:34.849521 32705 net.cpp:124] Setting up ip2
I0428 20:14:34.849529 32705 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:34.849531 32705 net.cpp:139] Memory required for data: 9469440
I0428 20:14:34.849537 32705 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:34.849544 32705 net.cpp:86] Creating Layer relu2
I0428 20:14:34.849546 32705 net.cpp:408] relu2 <- ip2
I0428 20:14:34.849550 32705 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:34.850284 32705 net.cpp:124] Setting up relu2
I0428 20:14:34.850296 32705 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:14:34.850316 32705 net.cpp:139] Memory required for data: 9475840
I0428 20:14:34.850319 32705 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:34.850327 32705 net.cpp:86] Creating Layer ip3
I0428 20:14:34.850329 32705 net.cpp:408] ip3 <- ip2
I0428 20:14:34.850334 32705 net.cpp:382] ip3 -> ip3
I0428 20:14:34.850427 32705 net.cpp:124] Setting up ip3
I0428 20:14:34.850450 32705 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:34.850453 32705 net.cpp:139] Memory required for data: 9478400
I0428 20:14:34.850461 32705 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:34.850467 32705 net.cpp:86] Creating Layer relu3
I0428 20:14:34.850471 32705 net.cpp:408] relu3 <- ip3
I0428 20:14:34.850474 32705 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:34.850658 32705 net.cpp:124] Setting up relu3
I0428 20:14:34.850667 32705 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:34.850670 32705 net.cpp:139] Memory required for data: 9480960
I0428 20:14:34.850674 32705 layer_factory.hpp:77] Creating layer loss
I0428 20:14:34.850679 32705 net.cpp:86] Creating Layer loss
I0428 20:14:34.850683 32705 net.cpp:408] loss <- ip3
I0428 20:14:34.850687 32705 net.cpp:408] loss <- label
I0428 20:14:34.850692 32705 net.cpp:382] loss -> loss
I0428 20:14:34.850710 32705 layer_factory.hpp:77] Creating layer loss
I0428 20:14:34.850960 32705 net.cpp:124] Setting up loss
I0428 20:14:34.850968 32705 net.cpp:131] Top shape: (1)
I0428 20:14:34.850972 32705 net.cpp:134]     with loss weight 1
I0428 20:14:34.850987 32705 net.cpp:139] Memory required for data: 9480964
I0428 20:14:34.850991 32705 net.cpp:200] loss needs backward computation.
I0428 20:14:34.850994 32705 net.cpp:200] relu3 needs backward computation.
I0428 20:14:34.850997 32705 net.cpp:200] ip3 needs backward computation.
I0428 20:14:34.851001 32705 net.cpp:200] relu2 needs backward computation.
I0428 20:14:34.851003 32705 net.cpp:200] ip2 needs backward computation.
I0428 20:14:34.851006 32705 net.cpp:200] relu1 needs backward computation.
I0428 20:14:34.851009 32705 net.cpp:200] ip1 needs backward computation.
I0428 20:14:34.851012 32705 net.cpp:200] pool1 needs backward computation.
I0428 20:14:34.851014 32705 net.cpp:200] conv1 needs backward computation.
I0428 20:14:34.851018 32705 net.cpp:200] pool0 needs backward computation.
I0428 20:14:34.851021 32705 net.cpp:200] conv0 needs backward computation.
I0428 20:14:34.851024 32705 net.cpp:202] mnist does not need backward computation.
I0428 20:14:34.851027 32705 net.cpp:244] This network produces output loss
I0428 20:14:34.851035 32705 net.cpp:257] Network initialization done.
I0428 20:14:34.851392 32705 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1225.prototxt
I0428 20:14:34.851433 32705 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:34.851548 32705 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:34.851626 32705 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:34.851670 32705 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:34.851681 32705 net.cpp:86] Creating Layer mnist
I0428 20:14:34.851687 32705 net.cpp:382] mnist -> data
I0428 20:14:34.851693 32705 net.cpp:382] mnist -> label
I0428 20:14:34.851778 32705 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:34.853896 32705 net.cpp:124] Setting up mnist
I0428 20:14:34.853940 32705 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:34.853947 32705 net.cpp:131] Top shape: 100 (100)
I0428 20:14:34.853950 32705 net.cpp:139] Memory required for data: 314000
I0428 20:14:34.853953 32705 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:34.853984 32705 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:34.853989 32705 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:34.853996 32705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:34.854002 32705 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:34.854121 32705 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:34.854130 32705 net.cpp:131] Top shape: 100 (100)
I0428 20:14:34.854133 32705 net.cpp:131] Top shape: 100 (100)
I0428 20:14:34.854136 32705 net.cpp:139] Memory required for data: 314800
I0428 20:14:34.854140 32705 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:34.854149 32705 net.cpp:86] Creating Layer conv0
I0428 20:14:34.854152 32705 net.cpp:408] conv0 <- data
I0428 20:14:34.854158 32705 net.cpp:382] conv0 -> conv0
I0428 20:14:34.855849 32705 net.cpp:124] Setting up conv0
I0428 20:14:34.855862 32705 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:34.855881 32705 net.cpp:139] Memory required for data: 11834800
I0428 20:14:34.855890 32705 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:34.855912 32705 net.cpp:86] Creating Layer pool0
I0428 20:14:34.855916 32705 net.cpp:408] pool0 <- conv0
I0428 20:14:34.855921 32705 net.cpp:382] pool0 -> pool0
I0428 20:14:34.855957 32705 net.cpp:124] Setting up pool0
I0428 20:14:34.855962 32705 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:34.855965 32705 net.cpp:139] Memory required for data: 14714800
I0428 20:14:34.855967 32705 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:34.855978 32705 net.cpp:86] Creating Layer conv1
I0428 20:14:34.855980 32705 net.cpp:408] conv1 <- pool0
I0428 20:14:34.855985 32705 net.cpp:382] conv1 -> conv1
I0428 20:14:34.857597 32705 net.cpp:124] Setting up conv1
I0428 20:14:34.857611 32705 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:34.857631 32705 net.cpp:139] Memory required for data: 14766000
I0428 20:14:34.857655 32705 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:34.857661 32705 net.cpp:86] Creating Layer pool1
I0428 20:14:34.857666 32705 net.cpp:408] pool1 <- conv1
I0428 20:14:34.857671 32705 net.cpp:382] pool1 -> pool1
I0428 20:14:34.857707 32705 net.cpp:124] Setting up pool1
I0428 20:14:34.857712 32705 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:34.857714 32705 net.cpp:139] Memory required for data: 14778800
I0428 20:14:34.857717 32705 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:34.857722 32705 net.cpp:86] Creating Layer ip1
I0428 20:14:34.857725 32705 net.cpp:408] ip1 <- pool1
I0428 20:14:34.857731 32705 net.cpp:382] ip1 -> ip1
I0428 20:14:34.857861 32705 net.cpp:124] Setting up ip1
I0428 20:14:34.857868 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.857882 32705 net.cpp:139] Memory required for data: 14782800
I0428 20:14:34.857890 32705 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:34.857895 32705 net.cpp:86] Creating Layer relu1
I0428 20:14:34.857900 32705 net.cpp:408] relu1 <- ip1
I0428 20:14:34.857908 32705 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:34.858109 32705 net.cpp:124] Setting up relu1
I0428 20:14:34.858119 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.858121 32705 net.cpp:139] Memory required for data: 14786800
I0428 20:14:34.858124 32705 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:34.858132 32705 net.cpp:86] Creating Layer ip2
I0428 20:14:34.858135 32705 net.cpp:408] ip2 <- ip1
I0428 20:14:34.858140 32705 net.cpp:382] ip2 -> ip2
I0428 20:14:34.858289 32705 net.cpp:124] Setting up ip2
I0428 20:14:34.858297 32705 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:34.858300 32705 net.cpp:139] Memory required for data: 14796800
I0428 20:14:34.858305 32705 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:34.858310 32705 net.cpp:86] Creating Layer relu2
I0428 20:14:34.858314 32705 net.cpp:408] relu2 <- ip2
I0428 20:14:34.858320 32705 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:34.858499 32705 net.cpp:124] Setting up relu2
I0428 20:14:34.858506 32705 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:14:34.858510 32705 net.cpp:139] Memory required for data: 14806800
I0428 20:14:34.858513 32705 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:34.858520 32705 net.cpp:86] Creating Layer ip3
I0428 20:14:34.858523 32705 net.cpp:408] ip3 <- ip2
I0428 20:14:34.858528 32705 net.cpp:382] ip3 -> ip3
I0428 20:14:34.858628 32705 net.cpp:124] Setting up ip3
I0428 20:14:34.858635 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.858639 32705 net.cpp:139] Memory required for data: 14810800
I0428 20:14:34.858647 32705 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:34.858652 32705 net.cpp:86] Creating Layer relu3
I0428 20:14:34.858655 32705 net.cpp:408] relu3 <- ip3
I0428 20:14:34.858659 32705 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:34.859485 32705 net.cpp:124] Setting up relu3
I0428 20:14:34.859496 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.859499 32705 net.cpp:139] Memory required for data: 14814800
I0428 20:14:34.859519 32705 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:34.859539 32705 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:34.859544 32705 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:34.859549 32705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:34.859556 32705 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:34.859634 32705 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:34.859642 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.859645 32705 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:34.859648 32705 net.cpp:139] Memory required for data: 14822800
I0428 20:14:34.859652 32705 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:34.859658 32705 net.cpp:86] Creating Layer accuracy
I0428 20:14:34.859660 32705 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:34.859664 32705 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:34.859668 32705 net.cpp:382] accuracy -> accuracy
I0428 20:14:34.859675 32705 net.cpp:124] Setting up accuracy
I0428 20:14:34.859679 32705 net.cpp:131] Top shape: (1)
I0428 20:14:34.859683 32705 net.cpp:139] Memory required for data: 14822804
I0428 20:14:34.859684 32705 layer_factory.hpp:77] Creating layer loss
I0428 20:14:34.859689 32705 net.cpp:86] Creating Layer loss
I0428 20:14:34.859693 32705 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:34.859696 32705 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:34.859701 32705 net.cpp:382] loss -> loss
I0428 20:14:34.859707 32705 layer_factory.hpp:77] Creating layer loss
I0428 20:14:34.859954 32705 net.cpp:124] Setting up loss
I0428 20:14:34.859966 32705 net.cpp:131] Top shape: (1)
I0428 20:14:34.859969 32705 net.cpp:134]     with loss weight 1
I0428 20:14:34.859983 32705 net.cpp:139] Memory required for data: 14822808
I0428 20:14:34.859987 32705 net.cpp:200] loss needs backward computation.
I0428 20:14:34.859990 32705 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:34.859994 32705 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:34.859997 32705 net.cpp:200] relu3 needs backward computation.
I0428 20:14:34.860007 32705 net.cpp:200] ip3 needs backward computation.
I0428 20:14:34.860008 32705 net.cpp:200] relu2 needs backward computation.
I0428 20:14:34.860011 32705 net.cpp:200] ip2 needs backward computation.
I0428 20:14:34.860014 32705 net.cpp:200] relu1 needs backward computation.
I0428 20:14:34.860018 32705 net.cpp:200] ip1 needs backward computation.
I0428 20:14:34.860020 32705 net.cpp:200] pool1 needs backward computation.
I0428 20:14:34.860023 32705 net.cpp:200] conv1 needs backward computation.
I0428 20:14:34.860026 32705 net.cpp:200] pool0 needs backward computation.
I0428 20:14:34.860029 32705 net.cpp:200] conv0 needs backward computation.
I0428 20:14:34.860033 32705 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:34.860036 32705 net.cpp:202] mnist does not need backward computation.
I0428 20:14:34.860039 32705 net.cpp:244] This network produces output accuracy
I0428 20:14:34.860043 32705 net.cpp:244] This network produces output loss
I0428 20:14:34.860054 32705 net.cpp:257] Network initialization done.
I0428 20:14:34.860092 32705 solver.cpp:56] Solver scaffolding done.
I0428 20:14:34.860491 32705 caffe.cpp:248] Starting Optimization
I0428 20:14:34.860497 32705 solver.cpp:273] Solving LeNet
I0428 20:14:34.860499 32705 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:34.861469 32705 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:34.869221 32705 blocking_queue.cpp:49] Waiting for data
I0428 20:14:34.930354 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:34.931324 32705 solver.cpp:398]     Test net output #0: accuracy = 0.1066
I0428 20:14:34.931358 32705 solver.cpp:398]     Test net output #1: loss = 2.29707 (* 1 = 2.29707 loss)
I0428 20:14:34.935591 32705 solver.cpp:219] Iteration 0 (0 iter/s, 0.075052s/100 iters), loss = 2.28947
I0428 20:14:34.935631 32705 solver.cpp:238]     Train net output #0: loss = 2.28947 (* 1 = 2.28947 loss)
I0428 20:14:34.935657 32705 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:35.048043 32705 solver.cpp:219] Iteration 100 (889.685 iter/s, 0.112399s/100 iters), loss = 0.79982
I0428 20:14:35.048084 32705 solver.cpp:238]     Train net output #0: loss = 0.79982 (* 1 = 0.79982 loss)
I0428 20:14:35.048090 32705 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:35.161300 32705 solver.cpp:219] Iteration 200 (883.223 iter/s, 0.113222s/100 iters), loss = 0.437277
I0428 20:14:35.161355 32705 solver.cpp:238]     Train net output #0: loss = 0.437277 (* 1 = 0.437277 loss)
I0428 20:14:35.161361 32705 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:35.273815 32705 solver.cpp:219] Iteration 300 (889.158 iter/s, 0.112466s/100 iters), loss = 0.249722
I0428 20:14:35.273839 32705 solver.cpp:238]     Train net output #0: loss = 0.249722 (* 1 = 0.249722 loss)
I0428 20:14:35.273861 32705 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:35.386679 32705 solver.cpp:219] Iteration 400 (886.294 iter/s, 0.112829s/100 iters), loss = 0.214942
I0428 20:14:35.386719 32705 solver.cpp:238]     Train net output #0: loss = 0.214942 (* 1 = 0.214942 loss)
I0428 20:14:35.386725 32705 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:35.498486 32705 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:35.561951 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:35.563611 32705 solver.cpp:398]     Test net output #0: accuracy = 0.9373
I0428 20:14:35.563647 32705 solver.cpp:398]     Test net output #1: loss = 0.206708 (* 1 = 0.206708 loss)
I0428 20:14:35.564760 32705 solver.cpp:219] Iteration 500 (561.659 iter/s, 0.178044s/100 iters), loss = 0.195418
I0428 20:14:35.564832 32705 solver.cpp:238]     Train net output #0: loss = 0.195418 (* 1 = 0.195418 loss)
I0428 20:14:35.564841 32705 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:35.697590 32705 solver.cpp:219] Iteration 600 (753.108 iter/s, 0.132783s/100 iters), loss = 0.150236
I0428 20:14:35.697629 32705 solver.cpp:238]     Train net output #0: loss = 0.150236 (* 1 = 0.150236 loss)
I0428 20:14:35.697635 32705 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:35.819692 32705 solver.cpp:219] Iteration 700 (819.326 iter/s, 0.122052s/100 iters), loss = 0.248148
I0428 20:14:35.819731 32705 solver.cpp:238]     Train net output #0: loss = 0.248148 (* 1 = 0.248148 loss)
I0428 20:14:35.819751 32705 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:35.932173 32705 solver.cpp:219] Iteration 800 (889.434 iter/s, 0.112431s/100 iters), loss = 0.281224
I0428 20:14:35.932230 32705 solver.cpp:238]     Train net output #0: loss = 0.281223 (* 1 = 0.281223 loss)
I0428 20:14:35.932236 32705 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:36.042748 32705 solver.cpp:219] Iteration 900 (904.786 iter/s, 0.110523s/100 iters), loss = 0.225161
I0428 20:14:36.042773 32705 solver.cpp:238]     Train net output #0: loss = 0.225161 (* 1 = 0.225161 loss)
I0428 20:14:36.042779 32705 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:36.079890 32711 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:36.152142 32705 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:36.153113 32705 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:36.153784 32705 solver.cpp:311] Iteration 1000, loss = 0.268073
I0428 20:14:36.153798 32705 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:36.231964 32712 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:36.232751 32705 solver.cpp:398]     Test net output #0: accuracy = 0.9513
I0428 20:14:36.232786 32705 solver.cpp:398]     Test net output #1: loss = 0.158046 (* 1 = 0.158046 loss)
I0428 20:14:36.232792 32705 solver.cpp:316] Optimization Done.
I0428 20:14:36.232795 32705 caffe.cpp:259] Optimization Done.
