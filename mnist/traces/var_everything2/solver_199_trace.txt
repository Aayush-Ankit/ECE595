I0428 19:34:13.307359 23291 caffe.cpp:218] Using GPUs 0
I0428 19:34:13.348611 23291 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:34:13.866063 23291 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test199.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:34:13.866242 23291 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test199.prototxt
I0428 19:34:13.866585 23291 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:34:13.866603 23291 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:34:13.866691 23291 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:13.866789 23291 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:13.866925 23291 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:34:13.866957 23291 net.cpp:86] Creating Layer mnist
I0428 19:34:13.866972 23291 net.cpp:382] mnist -> data
I0428 19:34:13.867002 23291 net.cpp:382] mnist -> label
I0428 19:34:13.868208 23291 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:34:13.870690 23291 net.cpp:124] Setting up mnist
I0428 19:34:13.870712 23291 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:34:13.870744 23291 net.cpp:131] Top shape: 64 (64)
I0428 19:34:13.870753 23291 net.cpp:139] Memory required for data: 200960
I0428 19:34:13.870764 23291 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:13.870785 23291 net.cpp:86] Creating Layer conv0
I0428 19:34:13.870795 23291 net.cpp:408] conv0 <- data
I0428 19:34:13.870815 23291 net.cpp:382] conv0 -> conv0
I0428 19:34:14.150454 23291 net.cpp:124] Setting up conv0
I0428 19:34:14.150483 23291 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 19:34:14.150490 23291 net.cpp:139] Memory required for data: 7573760
I0428 19:34:14.150509 23291 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:14.150526 23291 net.cpp:86] Creating Layer pool0
I0428 19:34:14.150540 23291 net.cpp:408] pool0 <- conv0
I0428 19:34:14.150549 23291 net.cpp:382] pool0 -> pool0
I0428 19:34:14.150606 23291 net.cpp:124] Setting up pool0
I0428 19:34:14.150615 23291 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 19:34:14.150620 23291 net.cpp:139] Memory required for data: 9416960
I0428 19:34:14.150641 23291 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:14.150671 23291 net.cpp:86] Creating Layer ip1
I0428 19:34:14.150679 23291 net.cpp:408] ip1 <- pool0
I0428 19:34:14.150687 23291 net.cpp:382] ip1 -> ip1
I0428 19:34:14.152101 23291 net.cpp:124] Setting up ip1
I0428 19:34:14.152115 23291 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:14.152120 23291 net.cpp:139] Memory required for data: 9419520
I0428 19:34:14.152132 23291 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:14.152143 23291 net.cpp:86] Creating Layer relu1
I0428 19:34:14.152168 23291 net.cpp:408] relu1 <- ip1
I0428 19:34:14.152176 23291 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:14.152338 23291 net.cpp:124] Setting up relu1
I0428 19:34:14.152348 23291 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:14.152353 23291 net.cpp:139] Memory required for data: 9422080
I0428 19:34:14.152356 23291 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:14.152365 23291 net.cpp:86] Creating Layer ip2
I0428 19:34:14.152370 23291 net.cpp:408] ip2 <- ip1
I0428 19:34:14.152379 23291 net.cpp:382] ip2 -> ip2
I0428 19:34:14.152472 23291 net.cpp:124] Setting up ip2
I0428 19:34:14.152480 23291 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:14.152484 23291 net.cpp:139] Memory required for data: 9424640
I0428 19:34:14.152496 23291 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:14.152504 23291 net.cpp:86] Creating Layer relu2
I0428 19:34:14.152511 23291 net.cpp:408] relu2 <- ip2
I0428 19:34:14.152518 23291 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:14.153404 23291 net.cpp:124] Setting up relu2
I0428 19:34:14.153419 23291 net.cpp:131] Top shape: 64 10 (640)
I0428 19:34:14.153424 23291 net.cpp:139] Memory required for data: 9427200
I0428 19:34:14.153429 23291 layer_factory.hpp:77] Creating layer loss
I0428 19:34:14.153436 23291 net.cpp:86] Creating Layer loss
I0428 19:34:14.153441 23291 net.cpp:408] loss <- ip2
I0428 19:34:14.153448 23291 net.cpp:408] loss <- label
I0428 19:34:14.153456 23291 net.cpp:382] loss -> loss
I0428 19:34:14.153478 23291 layer_factory.hpp:77] Creating layer loss
I0428 19:34:14.153709 23291 net.cpp:124] Setting up loss
I0428 19:34:14.153720 23291 net.cpp:131] Top shape: (1)
I0428 19:34:14.153724 23291 net.cpp:134]     with loss weight 1
I0428 19:34:14.153743 23291 net.cpp:139] Memory required for data: 9427204
I0428 19:34:14.153748 23291 net.cpp:200] loss needs backward computation.
I0428 19:34:14.153753 23291 net.cpp:200] relu2 needs backward computation.
I0428 19:34:14.153759 23291 net.cpp:200] ip2 needs backward computation.
I0428 19:34:14.153762 23291 net.cpp:200] relu1 needs backward computation.
I0428 19:34:14.153767 23291 net.cpp:200] ip1 needs backward computation.
I0428 19:34:14.153771 23291 net.cpp:200] pool0 needs backward computation.
I0428 19:34:14.153776 23291 net.cpp:200] conv0 needs backward computation.
I0428 19:34:14.153781 23291 net.cpp:202] mnist does not need backward computation.
I0428 19:34:14.153785 23291 net.cpp:244] This network produces output loss
I0428 19:34:14.153798 23291 net.cpp:257] Network initialization done.
I0428 19:34:14.154096 23291 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test199.prototxt
I0428 19:34:14.154129 23291 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:34:14.154224 23291 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool0"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:34:14.154353 23291 layer_factory.hpp:77] Creating layer mnist
I0428 19:34:14.154424 23291 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:34:14.154441 23291 net.cpp:86] Creating Layer mnist
I0428 19:34:14.154450 23291 net.cpp:382] mnist -> data
I0428 19:34:14.154460 23291 net.cpp:382] mnist -> label
I0428 19:34:14.154580 23291 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:34:14.155812 23291 net.cpp:124] Setting up mnist
I0428 19:34:14.155843 23291 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:34:14.155849 23291 net.cpp:131] Top shape: 100 (100)
I0428 19:34:14.155854 23291 net.cpp:139] Memory required for data: 314000
I0428 19:34:14.155859 23291 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:34:14.155889 23291 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:34:14.155895 23291 net.cpp:408] label_mnist_1_split <- label
I0428 19:34:14.155905 23291 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:34:14.155915 23291 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:34:14.156049 23291 net.cpp:124] Setting up label_mnist_1_split
I0428 19:34:14.156059 23291 net.cpp:131] Top shape: 100 (100)
I0428 19:34:14.156065 23291 net.cpp:131] Top shape: 100 (100)
I0428 19:34:14.156070 23291 net.cpp:139] Memory required for data: 314800
I0428 19:34:14.156075 23291 layer_factory.hpp:77] Creating layer conv0
I0428 19:34:14.156091 23291 net.cpp:86] Creating Layer conv0
I0428 19:34:14.156097 23291 net.cpp:408] conv0 <- data
I0428 19:34:14.156106 23291 net.cpp:382] conv0 -> conv0
I0428 19:34:14.157796 23291 net.cpp:124] Setting up conv0
I0428 19:34:14.157811 23291 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 19:34:14.157816 23291 net.cpp:139] Memory required for data: 11834800
I0428 19:34:14.157840 23291 layer_factory.hpp:77] Creating layer pool0
I0428 19:34:14.157850 23291 net.cpp:86] Creating Layer pool0
I0428 19:34:14.157855 23291 net.cpp:408] pool0 <- conv0
I0428 19:34:14.157868 23291 net.cpp:382] pool0 -> pool0
I0428 19:34:14.157912 23291 net.cpp:124] Setting up pool0
I0428 19:34:14.157920 23291 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 19:34:14.157925 23291 net.cpp:139] Memory required for data: 14714800
I0428 19:34:14.157930 23291 layer_factory.hpp:77] Creating layer ip1
I0428 19:34:14.157943 23291 net.cpp:86] Creating Layer ip1
I0428 19:34:14.157948 23291 net.cpp:408] ip1 <- pool0
I0428 19:34:14.157958 23291 net.cpp:382] ip1 -> ip1
I0428 19:34:14.158498 23291 net.cpp:124] Setting up ip1
I0428 19:34:14.158506 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.158511 23291 net.cpp:139] Memory required for data: 14718800
I0428 19:34:14.158524 23291 layer_factory.hpp:77] Creating layer relu1
I0428 19:34:14.158532 23291 net.cpp:86] Creating Layer relu1
I0428 19:34:14.158537 23291 net.cpp:408] relu1 <- ip1
I0428 19:34:14.158545 23291 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:34:14.158715 23291 net.cpp:124] Setting up relu1
I0428 19:34:14.158753 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.158787 23291 net.cpp:139] Memory required for data: 14722800
I0428 19:34:14.158793 23291 layer_factory.hpp:77] Creating layer ip2
I0428 19:34:14.158804 23291 net.cpp:86] Creating Layer ip2
I0428 19:34:14.158812 23291 net.cpp:408] ip2 <- ip1
I0428 19:34:14.158819 23291 net.cpp:382] ip2 -> ip2
I0428 19:34:14.158922 23291 net.cpp:124] Setting up ip2
I0428 19:34:14.158932 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.158937 23291 net.cpp:139] Memory required for data: 14726800
I0428 19:34:14.158951 23291 layer_factory.hpp:77] Creating layer relu2
I0428 19:34:14.158959 23291 net.cpp:86] Creating Layer relu2
I0428 19:34:14.158967 23291 net.cpp:408] relu2 <- ip2
I0428 19:34:14.158973 23291 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:34:14.159162 23291 net.cpp:124] Setting up relu2
I0428 19:34:14.159173 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.159178 23291 net.cpp:139] Memory required for data: 14730800
I0428 19:34:14.159183 23291 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:34:14.159193 23291 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:34:14.159198 23291 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:34:14.159206 23291 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:34:14.159216 23291 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:34:14.159266 23291 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:34:14.159276 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.159281 23291 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:34:14.159286 23291 net.cpp:139] Memory required for data: 14738800
I0428 19:34:14.159291 23291 layer_factory.hpp:77] Creating layer accuracy
I0428 19:34:14.159299 23291 net.cpp:86] Creating Layer accuracy
I0428 19:34:14.159304 23291 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:34:14.159325 23291 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:34:14.159335 23291 net.cpp:382] accuracy -> accuracy
I0428 19:34:14.159346 23291 net.cpp:124] Setting up accuracy
I0428 19:34:14.159354 23291 net.cpp:131] Top shape: (1)
I0428 19:34:14.159360 23291 net.cpp:139] Memory required for data: 14738804
I0428 19:34:14.159382 23291 layer_factory.hpp:77] Creating layer loss
I0428 19:34:14.159391 23291 net.cpp:86] Creating Layer loss
I0428 19:34:14.159397 23291 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:34:14.159404 23291 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:34:14.159409 23291 net.cpp:382] loss -> loss
I0428 19:34:14.159420 23291 layer_factory.hpp:77] Creating layer loss
I0428 19:34:14.160423 23291 net.cpp:124] Setting up loss
I0428 19:34:14.160436 23291 net.cpp:131] Top shape: (1)
I0428 19:34:14.160455 23291 net.cpp:134]     with loss weight 1
I0428 19:34:14.160465 23291 net.cpp:139] Memory required for data: 14738808
I0428 19:34:14.160470 23291 net.cpp:200] loss needs backward computation.
I0428 19:34:14.160475 23291 net.cpp:202] accuracy does not need backward computation.
I0428 19:34:14.160481 23291 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:34:14.160485 23291 net.cpp:200] relu2 needs backward computation.
I0428 19:34:14.160490 23291 net.cpp:200] ip2 needs backward computation.
I0428 19:34:14.160495 23291 net.cpp:200] relu1 needs backward computation.
I0428 19:34:14.160500 23291 net.cpp:200] ip1 needs backward computation.
I0428 19:34:14.160504 23291 net.cpp:200] pool0 needs backward computation.
I0428 19:34:14.160509 23291 net.cpp:200] conv0 needs backward computation.
I0428 19:34:14.160521 23291 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:34:14.160526 23291 net.cpp:202] mnist does not need backward computation.
I0428 19:34:14.160531 23291 net.cpp:244] This network produces output accuracy
I0428 19:34:14.160537 23291 net.cpp:244] This network produces output loss
I0428 19:34:14.160557 23291 net.cpp:257] Network initialization done.
I0428 19:34:14.160610 23291 solver.cpp:56] Solver scaffolding done.
I0428 19:34:14.160838 23291 caffe.cpp:248] Starting Optimization
I0428 19:34:14.160846 23291 solver.cpp:273] Solving LeNet
I0428 19:34:14.160866 23291 solver.cpp:274] Learning Rate Policy: inv
I0428 19:34:14.161664 23291 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:34:14.257591 23298 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:14.260119 23291 solver.cpp:398]     Test net output #0: accuracy = 0.1092
I0428 19:34:14.260140 23291 solver.cpp:398]     Test net output #1: loss = 2.29663 (* 1 = 2.29663 loss)
I0428 19:34:14.264334 23291 solver.cpp:219] Iteration 0 (-2.19704e-31 iter/s, 0.103436s/100 iters), loss = 2.33147
I0428 19:34:14.264361 23291 solver.cpp:238]     Train net output #0: loss = 2.33147 (* 1 = 2.33147 loss)
I0428 19:34:14.264394 23291 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:34:14.397686 23291 solver.cpp:219] Iteration 100 (750.128 iter/s, 0.133311s/100 iters), loss = 0.959245
I0428 19:34:14.397714 23291 solver.cpp:238]     Train net output #0: loss = 0.959245 (* 1 = 0.959245 loss)
I0428 19:34:14.397724 23291 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:34:14.535393 23291 solver.cpp:219] Iteration 200 (726.393 iter/s, 0.137667s/100 iters), loss = 1.17863
I0428 19:34:14.535429 23291 solver.cpp:238]     Train net output #0: loss = 1.17863 (* 1 = 1.17863 loss)
I0428 19:34:14.535442 23291 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:34:14.669736 23291 solver.cpp:219] Iteration 300 (744.608 iter/s, 0.134299s/100 iters), loss = 0.854556
I0428 19:34:14.669765 23291 solver.cpp:238]     Train net output #0: loss = 0.854556 (* 1 = 0.854556 loss)
I0428 19:34:14.669776 23291 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:34:14.808275 23291 solver.cpp:219] Iteration 400 (722.027 iter/s, 0.138499s/100 iters), loss = 0.802085
I0428 19:34:14.808316 23291 solver.cpp:238]     Train net output #0: loss = 0.802085 (* 1 = 0.802085 loss)
I0428 19:34:14.808341 23291 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:34:14.944984 23291 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:34:15.044306 23298 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:15.047803 23291 solver.cpp:398]     Test net output #0: accuracy = 0.6814
I0428 19:34:15.047827 23291 solver.cpp:398]     Test net output #1: loss = 0.828221 (* 1 = 0.828221 loss)
I0428 19:34:15.049127 23291 solver.cpp:219] Iteration 500 (415.295 iter/s, 0.240793s/100 iters), loss = 0.994557
I0428 19:34:15.049156 23291 solver.cpp:238]     Train net output #0: loss = 0.994557 (* 1 = 0.994557 loss)
I0428 19:34:15.049168 23291 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:34:15.185206 23291 solver.cpp:219] Iteration 600 (735.076 iter/s, 0.13604s/100 iters), loss = 0.900603
I0428 19:34:15.185235 23291 solver.cpp:238]     Train net output #0: loss = 0.900603 (* 1 = 0.900603 loss)
I0428 19:34:15.185262 23291 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:34:15.318884 23291 solver.cpp:219] Iteration 700 (748.289 iter/s, 0.133638s/100 iters), loss = 1.0232
I0428 19:34:15.318918 23291 solver.cpp:238]     Train net output #0: loss = 1.0232 (* 1 = 1.0232 loss)
I0428 19:34:15.318928 23291 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:34:15.456604 23291 solver.cpp:219] Iteration 800 (726.343 iter/s, 0.137676s/100 iters), loss = 1.03833
I0428 19:34:15.456634 23291 solver.cpp:238]     Train net output #0: loss = 1.03833 (* 1 = 1.03833 loss)
I0428 19:34:15.456661 23291 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:34:15.591994 23291 solver.cpp:219] Iteration 900 (738.824 iter/s, 0.13535s/100 iters), loss = 1.11733
I0428 19:34:15.592020 23291 solver.cpp:238]     Train net output #0: loss = 1.11733 (* 1 = 1.11733 loss)
I0428 19:34:15.592046 23291 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:34:15.638708 23297 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:15.728251 23291 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:34:15.730139 23291 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:34:15.731644 23291 solver.cpp:311] Iteration 1000, loss = 0.854436
I0428 19:34:15.731660 23291 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:34:15.825485 23298 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:34:15.827003 23291 solver.cpp:398]     Test net output #0: accuracy = 0.6855
I0428 19:34:15.827023 23291 solver.cpp:398]     Test net output #1: loss = 0.792861 (* 1 = 0.792861 loss)
I0428 19:34:15.827046 23291 solver.cpp:316] Optimization Done.
I0428 19:34:15.827051 23291 caffe.cpp:259] Optimization Done.
