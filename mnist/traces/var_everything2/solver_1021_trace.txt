I0428 20:06:11.886173 30815 caffe.cpp:218] Using GPUs 0
I0428 20:06:11.918860 30815 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:12.427451 30815 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1021.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:12.427626 30815 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1021.prototxt
I0428 20:06:12.428009 30815 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:12.428028 30815 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:12.428118 30815 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:12.428192 30815 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:12.428294 30815 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:12.428316 30815 net.cpp:86] Creating Layer mnist
I0428 20:06:12.428328 30815 net.cpp:382] mnist -> data
I0428 20:06:12.428349 30815 net.cpp:382] mnist -> label
I0428 20:06:12.429472 30815 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:12.432097 30815 net.cpp:124] Setting up mnist
I0428 20:06:12.432117 30815 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:12.432130 30815 net.cpp:131] Top shape: 64 (64)
I0428 20:06:12.432134 30815 net.cpp:139] Memory required for data: 200960
I0428 20:06:12.432142 30815 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:12.432169 30815 net.cpp:86] Creating Layer conv0
I0428 20:06:12.432180 30815 net.cpp:408] conv0 <- data
I0428 20:06:12.432204 30815 net.cpp:382] conv0 -> conv0
I0428 20:06:12.698366 30815 net.cpp:124] Setting up conv0
I0428 20:06:12.698415 30815 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:12.698423 30815 net.cpp:139] Memory required for data: 3887360
I0428 20:06:12.698498 30815 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:12.698516 30815 net.cpp:86] Creating Layer pool0
I0428 20:06:12.698523 30815 net.cpp:408] pool0 <- conv0
I0428 20:06:12.698532 30815 net.cpp:382] pool0 -> pool0
I0428 20:06:12.698603 30815 net.cpp:124] Setting up pool0
I0428 20:06:12.698617 30815 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:12.698623 30815 net.cpp:139] Memory required for data: 4808960
I0428 20:06:12.698631 30815 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:12.698647 30815 net.cpp:86] Creating Layer conv1
I0428 20:06:12.698652 30815 net.cpp:408] conv1 <- pool0
I0428 20:06:12.698662 30815 net.cpp:382] conv1 -> conv1
I0428 20:06:12.702913 30815 net.cpp:124] Setting up conv1
I0428 20:06:12.702935 30815 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:12.702942 30815 net.cpp:139] Memory required for data: 4890880
I0428 20:06:12.702956 30815 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:12.702968 30815 net.cpp:86] Creating Layer pool1
I0428 20:06:12.702975 30815 net.cpp:408] pool1 <- conv1
I0428 20:06:12.702982 30815 net.cpp:382] pool1 -> pool1
I0428 20:06:12.703049 30815 net.cpp:124] Setting up pool1
I0428 20:06:12.703064 30815 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:12.703070 30815 net.cpp:139] Memory required for data: 4911360
I0428 20:06:12.703076 30815 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:12.703088 30815 net.cpp:86] Creating Layer ip1
I0428 20:06:12.703092 30815 net.cpp:408] ip1 <- pool1
I0428 20:06:12.703101 30815 net.cpp:382] ip1 -> ip1
I0428 20:06:12.703275 30815 net.cpp:124] Setting up ip1
I0428 20:06:12.703287 30815 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:06:12.703292 30815 net.cpp:139] Memory required for data: 4917760
I0428 20:06:12.703305 30815 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:12.703312 30815 net.cpp:86] Creating Layer relu1
I0428 20:06:12.703318 30815 net.cpp:408] relu1 <- ip1
I0428 20:06:12.703325 30815 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:12.703586 30815 net.cpp:124] Setting up relu1
I0428 20:06:12.703600 30815 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:06:12.703606 30815 net.cpp:139] Memory required for data: 4924160
I0428 20:06:12.703611 30815 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:12.703621 30815 net.cpp:86] Creating Layer ip2
I0428 20:06:12.703627 30815 net.cpp:408] ip2 <- ip1
I0428 20:06:12.703635 30815 net.cpp:382] ip2 -> ip2
I0428 20:06:12.703783 30815 net.cpp:124] Setting up ip2
I0428 20:06:12.703794 30815 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:12.703799 30815 net.cpp:139] Memory required for data: 4926720
I0428 20:06:12.703809 30815 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:12.703819 30815 net.cpp:86] Creating Layer relu2
I0428 20:06:12.703825 30815 net.cpp:408] relu2 <- ip2
I0428 20:06:12.703832 30815 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:12.704955 30815 net.cpp:124] Setting up relu2
I0428 20:06:12.704974 30815 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:12.704980 30815 net.cpp:139] Memory required for data: 4929280
I0428 20:06:12.704987 30815 layer_factory.hpp:77] Creating layer loss
I0428 20:06:12.704996 30815 net.cpp:86] Creating Layer loss
I0428 20:06:12.705003 30815 net.cpp:408] loss <- ip2
I0428 20:06:12.705010 30815 net.cpp:408] loss <- label
I0428 20:06:12.705019 30815 net.cpp:382] loss -> loss
I0428 20:06:12.705049 30815 layer_factory.hpp:77] Creating layer loss
I0428 20:06:12.705440 30815 net.cpp:124] Setting up loss
I0428 20:06:12.705456 30815 net.cpp:131] Top shape: (1)
I0428 20:06:12.705468 30815 net.cpp:134]     with loss weight 1
I0428 20:06:12.705488 30815 net.cpp:139] Memory required for data: 4929284
I0428 20:06:12.705493 30815 net.cpp:200] loss needs backward computation.
I0428 20:06:12.705499 30815 net.cpp:200] relu2 needs backward computation.
I0428 20:06:12.705505 30815 net.cpp:200] ip2 needs backward computation.
I0428 20:06:12.705509 30815 net.cpp:200] relu1 needs backward computation.
I0428 20:06:12.705514 30815 net.cpp:200] ip1 needs backward computation.
I0428 20:06:12.705535 30815 net.cpp:200] pool1 needs backward computation.
I0428 20:06:12.705541 30815 net.cpp:200] conv1 needs backward computation.
I0428 20:06:12.705546 30815 net.cpp:200] pool0 needs backward computation.
I0428 20:06:12.705551 30815 net.cpp:200] conv0 needs backward computation.
I0428 20:06:12.705557 30815 net.cpp:202] mnist does not need backward computation.
I0428 20:06:12.705562 30815 net.cpp:244] This network produces output loss
I0428 20:06:12.705576 30815 net.cpp:257] Network initialization done.
I0428 20:06:12.706034 30815 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1021.prototxt
I0428 20:06:12.706085 30815 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:12.706217 30815 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 20:06:12.706315 30815 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:12.706414 30815 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:12.706444 30815 net.cpp:86] Creating Layer mnist
I0428 20:06:12.706451 30815 net.cpp:382] mnist -> data
I0428 20:06:12.706463 30815 net.cpp:382] mnist -> label
I0428 20:06:12.706596 30815 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:12.709429 30815 net.cpp:124] Setting up mnist
I0428 20:06:12.709455 30815 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:12.709463 30815 net.cpp:131] Top shape: 100 (100)
I0428 20:06:12.709470 30815 net.cpp:139] Memory required for data: 314000
I0428 20:06:12.709475 30815 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:12.709497 30815 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:12.709503 30815 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:12.709511 30815 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:12.709522 30815 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:12.709651 30815 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:12.709681 30815 net.cpp:131] Top shape: 100 (100)
I0428 20:06:12.709689 30815 net.cpp:131] Top shape: 100 (100)
I0428 20:06:12.709694 30815 net.cpp:139] Memory required for data: 314800
I0428 20:06:12.709699 30815 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:12.709714 30815 net.cpp:86] Creating Layer conv0
I0428 20:06:12.709719 30815 net.cpp:408] conv0 <- data
I0428 20:06:12.709728 30815 net.cpp:382] conv0 -> conv0
I0428 20:06:12.711912 30815 net.cpp:124] Setting up conv0
I0428 20:06:12.711935 30815 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:12.711948 30815 net.cpp:139] Memory required for data: 6074800
I0428 20:06:12.711963 30815 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:12.711974 30815 net.cpp:86] Creating Layer pool0
I0428 20:06:12.711979 30815 net.cpp:408] pool0 <- conv0
I0428 20:06:12.711997 30815 net.cpp:382] pool0 -> pool0
I0428 20:06:12.712054 30815 net.cpp:124] Setting up pool0
I0428 20:06:12.712065 30815 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:12.712074 30815 net.cpp:139] Memory required for data: 7514800
I0428 20:06:12.712080 30815 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:12.712093 30815 net.cpp:86] Creating Layer conv1
I0428 20:06:12.712098 30815 net.cpp:408] conv1 <- pool0
I0428 20:06:12.712107 30815 net.cpp:382] conv1 -> conv1
I0428 20:06:12.715000 30815 net.cpp:124] Setting up conv1
I0428 20:06:12.715020 30815 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:12.715026 30815 net.cpp:139] Memory required for data: 7642800
I0428 20:06:12.715039 30815 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:12.715049 30815 net.cpp:86] Creating Layer pool1
I0428 20:06:12.715065 30815 net.cpp:408] pool1 <- conv1
I0428 20:06:12.715072 30815 net.cpp:382] pool1 -> pool1
I0428 20:06:12.715148 30815 net.cpp:124] Setting up pool1
I0428 20:06:12.715160 30815 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:12.715167 30815 net.cpp:139] Memory required for data: 7674800
I0428 20:06:12.715171 30815 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:12.715180 30815 net.cpp:86] Creating Layer ip1
I0428 20:06:12.715185 30815 net.cpp:408] ip1 <- pool1
I0428 20:06:12.715193 30815 net.cpp:382] ip1 -> ip1
I0428 20:06:12.715353 30815 net.cpp:124] Setting up ip1
I0428 20:06:12.715368 30815 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:06:12.715375 30815 net.cpp:139] Memory required for data: 7684800
I0428 20:06:12.715386 30815 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:12.715394 30815 net.cpp:86] Creating Layer relu1
I0428 20:06:12.715399 30815 net.cpp:408] relu1 <- ip1
I0428 20:06:12.715406 30815 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:12.715699 30815 net.cpp:124] Setting up relu1
I0428 20:06:12.715713 30815 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:06:12.715719 30815 net.cpp:139] Memory required for data: 7694800
I0428 20:06:12.715724 30815 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:12.715735 30815 net.cpp:86] Creating Layer ip2
I0428 20:06:12.715742 30815 net.cpp:408] ip2 <- ip1
I0428 20:06:12.715754 30815 net.cpp:382] ip2 -> ip2
I0428 20:06:12.715909 30815 net.cpp:124] Setting up ip2
I0428 20:06:12.715920 30815 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:12.715926 30815 net.cpp:139] Memory required for data: 7698800
I0428 20:06:12.715935 30815 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:12.715942 30815 net.cpp:86] Creating Layer relu2
I0428 20:06:12.715947 30815 net.cpp:408] relu2 <- ip2
I0428 20:06:12.715955 30815 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:12.716186 30815 net.cpp:124] Setting up relu2
I0428 20:06:12.716197 30815 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:12.716203 30815 net.cpp:139] Memory required for data: 7702800
I0428 20:06:12.716207 30815 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 20:06:12.716215 30815 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 20:06:12.716220 30815 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 20:06:12.716228 30815 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 20:06:12.716251 30815 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 20:06:12.716303 30815 net.cpp:124] Setting up ip2_relu2_0_split
I0428 20:06:12.716315 30815 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:12.716320 30815 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:12.716325 30815 net.cpp:139] Memory required for data: 7710800
I0428 20:06:12.716331 30815 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:12.716338 30815 net.cpp:86] Creating Layer accuracy
I0428 20:06:12.716343 30815 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 20:06:12.716349 30815 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:12.716356 30815 net.cpp:382] accuracy -> accuracy
I0428 20:06:12.716367 30815 net.cpp:124] Setting up accuracy
I0428 20:06:12.716372 30815 net.cpp:131] Top shape: (1)
I0428 20:06:12.716377 30815 net.cpp:139] Memory required for data: 7710804
I0428 20:06:12.716382 30815 layer_factory.hpp:77] Creating layer loss
I0428 20:06:12.716388 30815 net.cpp:86] Creating Layer loss
I0428 20:06:12.716393 30815 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 20:06:12.716399 30815 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:12.716406 30815 net.cpp:382] loss -> loss
I0428 20:06:12.716415 30815 layer_factory.hpp:77] Creating layer loss
I0428 20:06:12.716759 30815 net.cpp:124] Setting up loss
I0428 20:06:12.716773 30815 net.cpp:131] Top shape: (1)
I0428 20:06:12.716778 30815 net.cpp:134]     with loss weight 1
I0428 20:06:12.716791 30815 net.cpp:139] Memory required for data: 7710808
I0428 20:06:12.716796 30815 net.cpp:200] loss needs backward computation.
I0428 20:06:12.716802 30815 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:12.716809 30815 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 20:06:12.716835 30815 net.cpp:200] relu2 needs backward computation.
I0428 20:06:12.716842 30815 net.cpp:200] ip2 needs backward computation.
I0428 20:06:12.716850 30815 net.cpp:200] relu1 needs backward computation.
I0428 20:06:12.716858 30815 net.cpp:200] ip1 needs backward computation.
I0428 20:06:12.716866 30815 net.cpp:200] pool1 needs backward computation.
I0428 20:06:12.716874 30815 net.cpp:200] conv1 needs backward computation.
I0428 20:06:12.716883 30815 net.cpp:200] pool0 needs backward computation.
I0428 20:06:12.716892 30815 net.cpp:200] conv0 needs backward computation.
I0428 20:06:12.716902 30815 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:12.716910 30815 net.cpp:202] mnist does not need backward computation.
I0428 20:06:12.716915 30815 net.cpp:244] This network produces output accuracy
I0428 20:06:12.716920 30815 net.cpp:244] This network produces output loss
I0428 20:06:12.716935 30815 net.cpp:257] Network initialization done.
I0428 20:06:12.716989 30815 solver.cpp:56] Solver scaffolding done.
I0428 20:06:12.717387 30815 caffe.cpp:248] Starting Optimization
I0428 20:06:12.717397 30815 solver.cpp:273] Solving LeNet
I0428 20:06:12.717402 30815 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:12.718421 30815 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:12.769474 30815 blocking_queue.cpp:49] Waiting for data
I0428 20:06:12.778424 30822 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:12.779001 30815 solver.cpp:398]     Test net output #0: accuracy = 0.0695
I0428 20:06:12.779022 30815 solver.cpp:398]     Test net output #1: loss = 2.3227 (* 1 = 2.3227 loss)
I0428 20:06:12.782786 30815 solver.cpp:219] Iteration 0 (-1.33948e-31 iter/s, 0.0653568s/100 iters), loss = 2.34122
I0428 20:06:12.782816 30815 solver.cpp:238]     Train net output #0: loss = 2.34122 (* 1 = 2.34122 loss)
I0428 20:06:12.782830 30815 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:12.867275 30815 solver.cpp:219] Iteration 100 (1184.14 iter/s, 0.0844493s/100 iters), loss = 1.35471
I0428 20:06:12.867314 30815 solver.cpp:238]     Train net output #0: loss = 1.35471 (* 1 = 1.35471 loss)
I0428 20:06:12.867322 30815 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:12.951758 30815 solver.cpp:219] Iteration 200 (1184.23 iter/s, 0.0844431s/100 iters), loss = 1.00719
I0428 20:06:12.951802 30815 solver.cpp:238]     Train net output #0: loss = 1.00719 (* 1 = 1.00719 loss)
I0428 20:06:12.951817 30815 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:13.034904 30815 solver.cpp:219] Iteration 300 (1203.46 iter/s, 0.0830935s/100 iters), loss = 1.22034
I0428 20:06:13.034940 30815 solver.cpp:238]     Train net output #0: loss = 1.22034 (* 1 = 1.22034 loss)
I0428 20:06:13.034950 30815 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:13.118540 30815 solver.cpp:219] Iteration 400 (1196.21 iter/s, 0.0835973s/100 iters), loss = 1.16751
I0428 20:06:13.118579 30815 solver.cpp:238]     Train net output #0: loss = 1.16751 (* 1 = 1.16751 loss)
I0428 20:06:13.118587 30815 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:13.201695 30815 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:13.257421 30822 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:13.258023 30815 solver.cpp:398]     Test net output #0: accuracy = 0.6417
I0428 20:06:13.258044 30815 solver.cpp:398]     Test net output #1: loss = 1.07976 (* 1 = 1.07976 loss)
I0428 20:06:13.258960 30815 solver.cpp:219] Iteration 500 (712.357 iter/s, 0.140379s/100 iters), loss = 1.07751
I0428 20:06:13.259013 30815 solver.cpp:238]     Train net output #0: loss = 1.07751 (* 1 = 1.07751 loss)
I0428 20:06:13.259022 30815 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:13.347203 30815 solver.cpp:219] Iteration 600 (1134.01 iter/s, 0.0881823s/100 iters), loss = 1.14418
I0428 20:06:13.347240 30815 solver.cpp:238]     Train net output #0: loss = 1.14418 (* 1 = 1.14418 loss)
I0428 20:06:13.347249 30815 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:13.431087 30815 solver.cpp:219] Iteration 700 (1192.79 iter/s, 0.0838369s/100 iters), loss = 0.895605
I0428 20:06:13.431115 30815 solver.cpp:238]     Train net output #0: loss = 0.895605 (* 1 = 0.895605 loss)
I0428 20:06:13.431123 30815 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:13.512253 30815 solver.cpp:219] Iteration 800 (1232.61 iter/s, 0.0811284s/100 iters), loss = 1.23077
I0428 20:06:13.512292 30815 solver.cpp:238]     Train net output #0: loss = 1.23077 (* 1 = 1.23077 loss)
I0428 20:06:13.512300 30815 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:13.604794 30815 solver.cpp:219] Iteration 900 (1081.02 iter/s, 0.0925051s/100 iters), loss = 1.18362
I0428 20:06:13.604842 30815 solver.cpp:238]     Train net output #0: loss = 1.18362 (* 1 = 1.18362 loss)
I0428 20:06:13.604849 30815 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:13.633088 30821 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:13.685662 30815 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:13.686377 30815 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:13.686887 30815 solver.cpp:311] Iteration 1000, loss = 1.04328
I0428 20:06:13.686902 30815 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:13.761327 30822 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:13.761911 30815 solver.cpp:398]     Test net output #0: accuracy = 0.6538
I0428 20:06:13.761947 30815 solver.cpp:398]     Test net output #1: loss = 1.0469 (* 1 = 1.0469 loss)
I0428 20:06:13.761953 30815 solver.cpp:316] Optimization Done.
I0428 20:06:13.761956 30815 caffe.cpp:259] Optimization Done.
