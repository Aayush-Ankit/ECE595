I0428 20:14:26.980803 32680 caffe.cpp:218] Using GPUs 0
I0428 20:14:27.017251 32680 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:14:27.524991 32680 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1222.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:14:27.525131 32680 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1222.prototxt
I0428 20:14:27.525550 32680 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:14:27.525570 32680 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:14:27.525672 32680 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:27.525753 32680 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:27.525856 32680 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:14:27.525880 32680 net.cpp:86] Creating Layer mnist
I0428 20:14:27.525892 32680 net.cpp:382] mnist -> data
I0428 20:14:27.525914 32680 net.cpp:382] mnist -> label
I0428 20:14:27.527020 32680 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:14:27.529469 32680 net.cpp:124] Setting up mnist
I0428 20:14:27.529486 32680 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:14:27.529492 32680 net.cpp:131] Top shape: 64 (64)
I0428 20:14:27.529495 32680 net.cpp:139] Memory required for data: 200960
I0428 20:14:27.529502 32680 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:27.529520 32680 net.cpp:86] Creating Layer conv0
I0428 20:14:27.529541 32680 net.cpp:408] conv0 <- data
I0428 20:14:27.529556 32680 net.cpp:382] conv0 -> conv0
I0428 20:14:27.786713 32680 net.cpp:124] Setting up conv0
I0428 20:14:27.786738 32680 net.cpp:131] Top shape: 64 50 24 24 (1843200)
I0428 20:14:27.786742 32680 net.cpp:139] Memory required for data: 7573760
I0428 20:14:27.786757 32680 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:27.786769 32680 net.cpp:86] Creating Layer pool0
I0428 20:14:27.786772 32680 net.cpp:408] pool0 <- conv0
I0428 20:14:27.786777 32680 net.cpp:382] pool0 -> pool0
I0428 20:14:27.786840 32680 net.cpp:124] Setting up pool0
I0428 20:14:27.786847 32680 net.cpp:131] Top shape: 64 50 12 12 (460800)
I0428 20:14:27.786850 32680 net.cpp:139] Memory required for data: 9416960
I0428 20:14:27.786854 32680 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:27.786864 32680 net.cpp:86] Creating Layer conv1
I0428 20:14:27.786870 32680 net.cpp:408] conv1 <- pool0
I0428 20:14:27.786891 32680 net.cpp:382] conv1 -> conv1
I0428 20:14:27.788871 32680 net.cpp:124] Setting up conv1
I0428 20:14:27.788885 32680 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 20:14:27.788889 32680 net.cpp:139] Memory required for data: 9449728
I0428 20:14:27.788898 32680 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:27.788907 32680 net.cpp:86] Creating Layer pool1
I0428 20:14:27.788909 32680 net.cpp:408] pool1 <- conv1
I0428 20:14:27.788916 32680 net.cpp:382] pool1 -> pool1
I0428 20:14:27.788954 32680 net.cpp:124] Setting up pool1
I0428 20:14:27.788962 32680 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 20:14:27.788966 32680 net.cpp:139] Memory required for data: 9457920
I0428 20:14:27.788969 32680 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:27.788977 32680 net.cpp:86] Creating Layer ip1
I0428 20:14:27.788980 32680 net.cpp:408] ip1 <- pool1
I0428 20:14:27.788986 32680 net.cpp:382] ip1 -> ip1
I0428 20:14:27.789093 32680 net.cpp:124] Setting up ip1
I0428 20:14:27.789100 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.789104 32680 net.cpp:139] Memory required for data: 9460480
I0428 20:14:27.789127 32680 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:27.789146 32680 net.cpp:86] Creating Layer relu1
I0428 20:14:27.789151 32680 net.cpp:408] relu1 <- ip1
I0428 20:14:27.789157 32680 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:27.789335 32680 net.cpp:124] Setting up relu1
I0428 20:14:27.789345 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.789347 32680 net.cpp:139] Memory required for data: 9463040
I0428 20:14:27.789350 32680 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:27.789357 32680 net.cpp:86] Creating Layer ip2
I0428 20:14:27.789361 32680 net.cpp:408] ip2 <- ip1
I0428 20:14:27.789366 32680 net.cpp:382] ip2 -> ip2
I0428 20:14:27.789504 32680 net.cpp:124] Setting up ip2
I0428 20:14:27.789510 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.789513 32680 net.cpp:139] Memory required for data: 9465600
I0428 20:14:27.789518 32680 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:27.789525 32680 net.cpp:86] Creating Layer relu2
I0428 20:14:27.789528 32680 net.cpp:408] relu2 <- ip2
I0428 20:14:27.789533 32680 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:27.790323 32680 net.cpp:124] Setting up relu2
I0428 20:14:27.790336 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.790339 32680 net.cpp:139] Memory required for data: 9468160
I0428 20:14:27.790343 32680 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:27.790351 32680 net.cpp:86] Creating Layer ip3
I0428 20:14:27.790357 32680 net.cpp:408] ip3 <- ip2
I0428 20:14:27.790364 32680 net.cpp:382] ip3 -> ip3
I0428 20:14:27.790465 32680 net.cpp:124] Setting up ip3
I0428 20:14:27.790473 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.790477 32680 net.cpp:139] Memory required for data: 9470720
I0428 20:14:27.790484 32680 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:27.790493 32680 net.cpp:86] Creating Layer relu3
I0428 20:14:27.790496 32680 net.cpp:408] relu3 <- ip3
I0428 20:14:27.790500 32680 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:27.790691 32680 net.cpp:124] Setting up relu3
I0428 20:14:27.790700 32680 net.cpp:131] Top shape: 64 10 (640)
I0428 20:14:27.790704 32680 net.cpp:139] Memory required for data: 9473280
I0428 20:14:27.790706 32680 layer_factory.hpp:77] Creating layer loss
I0428 20:14:27.790714 32680 net.cpp:86] Creating Layer loss
I0428 20:14:27.790716 32680 net.cpp:408] loss <- ip3
I0428 20:14:27.790720 32680 net.cpp:408] loss <- label
I0428 20:14:27.790725 32680 net.cpp:382] loss -> loss
I0428 20:14:27.790740 32680 layer_factory.hpp:77] Creating layer loss
I0428 20:14:27.790995 32680 net.cpp:124] Setting up loss
I0428 20:14:27.791003 32680 net.cpp:131] Top shape: (1)
I0428 20:14:27.791007 32680 net.cpp:134]     with loss weight 1
I0428 20:14:27.791020 32680 net.cpp:139] Memory required for data: 9473284
I0428 20:14:27.791023 32680 net.cpp:200] loss needs backward computation.
I0428 20:14:27.791028 32680 net.cpp:200] relu3 needs backward computation.
I0428 20:14:27.791029 32680 net.cpp:200] ip3 needs backward computation.
I0428 20:14:27.791033 32680 net.cpp:200] relu2 needs backward computation.
I0428 20:14:27.791035 32680 net.cpp:200] ip2 needs backward computation.
I0428 20:14:27.791038 32680 net.cpp:200] relu1 needs backward computation.
I0428 20:14:27.791040 32680 net.cpp:200] ip1 needs backward computation.
I0428 20:14:27.791044 32680 net.cpp:200] pool1 needs backward computation.
I0428 20:14:27.791048 32680 net.cpp:200] conv1 needs backward computation.
I0428 20:14:27.791049 32680 net.cpp:200] pool0 needs backward computation.
I0428 20:14:27.791052 32680 net.cpp:200] conv0 needs backward computation.
I0428 20:14:27.791055 32680 net.cpp:202] mnist does not need backward computation.
I0428 20:14:27.791059 32680 net.cpp:244] This network produces output loss
I0428 20:14:27.791066 32680 net.cpp:257] Network initialization done.
I0428 20:14:27.791446 32680 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1222.prototxt
I0428 20:14:27.791474 32680 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:14:27.791585 32680 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:14:27.791695 32680 layer_factory.hpp:77] Creating layer mnist
I0428 20:14:27.791735 32680 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:14:27.791749 32680 net.cpp:86] Creating Layer mnist
I0428 20:14:27.791756 32680 net.cpp:382] mnist -> data
I0428 20:14:27.791764 32680 net.cpp:382] mnist -> label
I0428 20:14:27.791872 32680 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:14:27.793953 32680 net.cpp:124] Setting up mnist
I0428 20:14:27.793982 32680 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:14:27.793987 32680 net.cpp:131] Top shape: 100 (100)
I0428 20:14:27.793988 32680 net.cpp:139] Memory required for data: 314000
I0428 20:14:27.793992 32680 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:14:27.793998 32680 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:14:27.794001 32680 net.cpp:408] label_mnist_1_split <- label
I0428 20:14:27.794008 32680 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:14:27.794013 32680 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:14:27.794108 32680 net.cpp:124] Setting up label_mnist_1_split
I0428 20:14:27.794116 32680 net.cpp:131] Top shape: 100 (100)
I0428 20:14:27.794121 32680 net.cpp:131] Top shape: 100 (100)
I0428 20:14:27.794122 32680 net.cpp:139] Memory required for data: 314800
I0428 20:14:27.794126 32680 layer_factory.hpp:77] Creating layer conv0
I0428 20:14:27.794136 32680 net.cpp:86] Creating Layer conv0
I0428 20:14:27.794140 32680 net.cpp:408] conv0 <- data
I0428 20:14:27.794145 32680 net.cpp:382] conv0 -> conv0
I0428 20:14:27.795855 32680 net.cpp:124] Setting up conv0
I0428 20:14:27.795867 32680 net.cpp:131] Top shape: 100 50 24 24 (2880000)
I0428 20:14:27.795886 32680 net.cpp:139] Memory required for data: 11834800
I0428 20:14:27.795895 32680 layer_factory.hpp:77] Creating layer pool0
I0428 20:14:27.795904 32680 net.cpp:86] Creating Layer pool0
I0428 20:14:27.795908 32680 net.cpp:408] pool0 <- conv0
I0428 20:14:27.795912 32680 net.cpp:382] pool0 -> pool0
I0428 20:14:27.795950 32680 net.cpp:124] Setting up pool0
I0428 20:14:27.795956 32680 net.cpp:131] Top shape: 100 50 12 12 (720000)
I0428 20:14:27.795959 32680 net.cpp:139] Memory required for data: 14714800
I0428 20:14:27.795963 32680 layer_factory.hpp:77] Creating layer conv1
I0428 20:14:27.795972 32680 net.cpp:86] Creating Layer conv1
I0428 20:14:27.795975 32680 net.cpp:408] conv1 <- pool0
I0428 20:14:27.795981 32680 net.cpp:382] conv1 -> conv1
I0428 20:14:27.797478 32680 net.cpp:124] Setting up conv1
I0428 20:14:27.797507 32680 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 20:14:27.797510 32680 net.cpp:139] Memory required for data: 14766000
I0428 20:14:27.797518 32680 layer_factory.hpp:77] Creating layer pool1
I0428 20:14:27.797526 32680 net.cpp:86] Creating Layer pool1
I0428 20:14:27.797529 32680 net.cpp:408] pool1 <- conv1
I0428 20:14:27.797535 32680 net.cpp:382] pool1 -> pool1
I0428 20:14:27.797574 32680 net.cpp:124] Setting up pool1
I0428 20:14:27.797581 32680 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 20:14:27.797585 32680 net.cpp:139] Memory required for data: 14778800
I0428 20:14:27.797586 32680 layer_factory.hpp:77] Creating layer ip1
I0428 20:14:27.797593 32680 net.cpp:86] Creating Layer ip1
I0428 20:14:27.797596 32680 net.cpp:408] ip1 <- pool1
I0428 20:14:27.797601 32680 net.cpp:382] ip1 -> ip1
I0428 20:14:27.797739 32680 net.cpp:124] Setting up ip1
I0428 20:14:27.797747 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.797760 32680 net.cpp:139] Memory required for data: 14782800
I0428 20:14:27.797767 32680 layer_factory.hpp:77] Creating layer relu1
I0428 20:14:27.797773 32680 net.cpp:86] Creating Layer relu1
I0428 20:14:27.797776 32680 net.cpp:408] relu1 <- ip1
I0428 20:14:27.797781 32680 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:14:27.797971 32680 net.cpp:124] Setting up relu1
I0428 20:14:27.797981 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.797984 32680 net.cpp:139] Memory required for data: 14786800
I0428 20:14:27.797987 32680 layer_factory.hpp:77] Creating layer ip2
I0428 20:14:27.797996 32680 net.cpp:86] Creating Layer ip2
I0428 20:14:27.798002 32680 net.cpp:408] ip2 <- ip1
I0428 20:14:27.798008 32680 net.cpp:382] ip2 -> ip2
I0428 20:14:27.798105 32680 net.cpp:124] Setting up ip2
I0428 20:14:27.798112 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.798115 32680 net.cpp:139] Memory required for data: 14790800
I0428 20:14:27.798131 32680 layer_factory.hpp:77] Creating layer relu2
I0428 20:14:27.798137 32680 net.cpp:86] Creating Layer relu2
I0428 20:14:27.798156 32680 net.cpp:408] relu2 <- ip2
I0428 20:14:27.798161 32680 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:14:27.798389 32680 net.cpp:124] Setting up relu2
I0428 20:14:27.798399 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.798403 32680 net.cpp:139] Memory required for data: 14794800
I0428 20:14:27.798422 32680 layer_factory.hpp:77] Creating layer ip3
I0428 20:14:27.798444 32680 net.cpp:86] Creating Layer ip3
I0428 20:14:27.798446 32680 net.cpp:408] ip3 <- ip2
I0428 20:14:27.798452 32680 net.cpp:382] ip3 -> ip3
I0428 20:14:27.798564 32680 net.cpp:124] Setting up ip3
I0428 20:14:27.798571 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.798574 32680 net.cpp:139] Memory required for data: 14798800
I0428 20:14:27.798583 32680 layer_factory.hpp:77] Creating layer relu3
I0428 20:14:27.798588 32680 net.cpp:86] Creating Layer relu3
I0428 20:14:27.798590 32680 net.cpp:408] relu3 <- ip3
I0428 20:14:27.798595 32680 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:14:27.799464 32680 net.cpp:124] Setting up relu3
I0428 20:14:27.799476 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.799496 32680 net.cpp:139] Memory required for data: 14802800
I0428 20:14:27.799499 32680 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:14:27.799505 32680 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:14:27.799510 32680 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:14:27.799515 32680 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:14:27.799522 32680 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:14:27.799576 32680 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:14:27.799582 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.799592 32680 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:14:27.799593 32680 net.cpp:139] Memory required for data: 14810800
I0428 20:14:27.799597 32680 layer_factory.hpp:77] Creating layer accuracy
I0428 20:14:27.799603 32680 net.cpp:86] Creating Layer accuracy
I0428 20:14:27.799607 32680 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:14:27.799610 32680 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:14:27.799614 32680 net.cpp:382] accuracy -> accuracy
I0428 20:14:27.799621 32680 net.cpp:124] Setting up accuracy
I0428 20:14:27.799625 32680 net.cpp:131] Top shape: (1)
I0428 20:14:27.799628 32680 net.cpp:139] Memory required for data: 14810804
I0428 20:14:27.799631 32680 layer_factory.hpp:77] Creating layer loss
I0428 20:14:27.799636 32680 net.cpp:86] Creating Layer loss
I0428 20:14:27.799640 32680 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:14:27.799643 32680 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:14:27.799648 32680 net.cpp:382] loss -> loss
I0428 20:14:27.799654 32680 layer_factory.hpp:77] Creating layer loss
I0428 20:14:27.799904 32680 net.cpp:124] Setting up loss
I0428 20:14:27.799912 32680 net.cpp:131] Top shape: (1)
I0428 20:14:27.799916 32680 net.cpp:134]     with loss weight 1
I0428 20:14:27.799932 32680 net.cpp:139] Memory required for data: 14810808
I0428 20:14:27.799937 32680 net.cpp:200] loss needs backward computation.
I0428 20:14:27.799939 32680 net.cpp:202] accuracy does not need backward computation.
I0428 20:14:27.799944 32680 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:14:27.799947 32680 net.cpp:200] relu3 needs backward computation.
I0428 20:14:27.799958 32680 net.cpp:200] ip3 needs backward computation.
I0428 20:14:27.799962 32680 net.cpp:200] relu2 needs backward computation.
I0428 20:14:27.799980 32680 net.cpp:200] ip2 needs backward computation.
I0428 20:14:27.799983 32680 net.cpp:200] relu1 needs backward computation.
I0428 20:14:27.799998 32680 net.cpp:200] ip1 needs backward computation.
I0428 20:14:27.800001 32680 net.cpp:200] pool1 needs backward computation.
I0428 20:14:27.800004 32680 net.cpp:200] conv1 needs backward computation.
I0428 20:14:27.800007 32680 net.cpp:200] pool0 needs backward computation.
I0428 20:14:27.800011 32680 net.cpp:200] conv0 needs backward computation.
I0428 20:14:27.800020 32680 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:14:27.800024 32680 net.cpp:202] mnist does not need backward computation.
I0428 20:14:27.800026 32680 net.cpp:244] This network produces output accuracy
I0428 20:14:27.800029 32680 net.cpp:244] This network produces output loss
I0428 20:14:27.800040 32680 net.cpp:257] Network initialization done.
I0428 20:14:27.800081 32680 solver.cpp:56] Solver scaffolding done.
I0428 20:14:27.800501 32680 caffe.cpp:248] Starting Optimization
I0428 20:14:27.800508 32680 solver.cpp:273] Solving LeNet
I0428 20:14:27.800509 32680 solver.cpp:274] Learning Rate Policy: inv
I0428 20:14:27.801451 32680 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:14:27.807011 32680 blocking_queue.cpp:49] Waiting for data
I0428 20:14:27.880735 32688 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:27.881503 32680 solver.cpp:398]     Test net output #0: accuracy = 0.0748
I0428 20:14:27.881538 32680 solver.cpp:398]     Test net output #1: loss = 2.34312 (* 1 = 2.34312 loss)
I0428 20:14:27.885815 32680 solver.cpp:219] Iteration 0 (-2.12796e-31 iter/s, 0.0852654s/100 iters), loss = 2.30748
I0428 20:14:27.885854 32680 solver.cpp:238]     Train net output #0: loss = 2.30748 (* 1 = 2.30748 loss)
I0428 20:14:27.885880 32680 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:14:28.000219 32680 solver.cpp:219] Iteration 100 (874.484 iter/s, 0.114353s/100 iters), loss = 0.796753
I0428 20:14:28.000260 32680 solver.cpp:238]     Train net output #0: loss = 0.796753 (* 1 = 0.796753 loss)
I0428 20:14:28.000267 32680 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:14:28.112331 32680 solver.cpp:219] Iteration 200 (892.27 iter/s, 0.112074s/100 iters), loss = 0.529315
I0428 20:14:28.112371 32680 solver.cpp:238]     Train net output #0: loss = 0.529315 (* 1 = 0.529315 loss)
I0428 20:14:28.112377 32680 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:14:28.224081 32680 solver.cpp:219] Iteration 300 (895.141 iter/s, 0.111714s/100 iters), loss = 0.505848
I0428 20:14:28.224123 32680 solver.cpp:238]     Train net output #0: loss = 0.505848 (* 1 = 0.505848 loss)
I0428 20:14:28.224145 32680 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:14:28.336508 32680 solver.cpp:219] Iteration 400 (889.888 iter/s, 0.112374s/100 iters), loss = 0.539268
I0428 20:14:28.336549 32680 solver.cpp:238]     Train net output #0: loss = 0.539268 (* 1 = 0.539268 loss)
I0428 20:14:28.336555 32680 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:14:28.446952 32680 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:14:28.512364 32688 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:28.514209 32680 solver.cpp:398]     Test net output #0: accuracy = 0.8961
I0428 20:14:28.514243 32680 solver.cpp:398]     Test net output #1: loss = 0.362174 (* 1 = 0.362174 loss)
I0428 20:14:28.515358 32680 solver.cpp:219] Iteration 500 (559.298 iter/s, 0.178796s/100 iters), loss = 0.515918
I0428 20:14:28.515413 32680 solver.cpp:238]     Train net output #0: loss = 0.515918 (* 1 = 0.515918 loss)
I0428 20:14:28.515436 32680 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:14:28.636442 32680 solver.cpp:219] Iteration 600 (826.307 iter/s, 0.12102s/100 iters), loss = 0.377712
I0428 20:14:28.636484 32680 solver.cpp:238]     Train net output #0: loss = 0.377712 (* 1 = 0.377712 loss)
I0428 20:14:28.636492 32680 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:14:28.755848 32680 solver.cpp:219] Iteration 700 (837.848 iter/s, 0.119353s/100 iters), loss = 0.408606
I0428 20:14:28.755890 32680 solver.cpp:238]     Train net output #0: loss = 0.408606 (* 1 = 0.408606 loss)
I0428 20:14:28.755897 32680 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:14:28.866961 32680 solver.cpp:219] Iteration 800 (900.28 iter/s, 0.111077s/100 iters), loss = 0.360275
I0428 20:14:28.867003 32680 solver.cpp:238]     Train net output #0: loss = 0.360275 (* 1 = 0.360275 loss)
I0428 20:14:28.867009 32680 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:14:28.978188 32680 solver.cpp:219] Iteration 900 (899.486 iter/s, 0.111175s/100 iters), loss = 0.229946
I0428 20:14:28.978229 32680 solver.cpp:238]     Train net output #0: loss = 0.229945 (* 1 = 0.229945 loss)
I0428 20:14:28.978235 32680 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:14:29.015420 32686 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:29.087925 32680 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:14:29.088805 32680 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:14:29.089534 32680 solver.cpp:311] Iteration 1000, loss = 0.249303
I0428 20:14:29.089550 32680 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:14:29.167240 32688 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:14:29.167984 32680 solver.cpp:398]     Test net output #0: accuracy = 0.9366
I0428 20:14:29.168004 32680 solver.cpp:398]     Test net output #1: loss = 0.217463 (* 1 = 0.217463 loss)
I0428 20:14:29.168009 32680 solver.cpp:316] Optimization Done.
I0428 20:14:29.168011 32680 caffe.cpp:259] Optimization Done.
