I0428 20:02:08.316578 29881 caffe.cpp:218] Using GPUs 0
I0428 20:02:08.349171 29881 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:02:08.841737 29881 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test921.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:02:08.841905 29881 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test921.prototxt
I0428 20:02:08.842336 29881 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:02:08.842355 29881 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:02:08.842468 29881 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:08.842545 29881 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:08.842650 29881 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:02:08.842676 29881 net.cpp:86] Creating Layer mnist
I0428 20:02:08.842684 29881 net.cpp:382] mnist -> data
I0428 20:02:08.842710 29881 net.cpp:382] mnist -> label
I0428 20:02:08.843889 29881 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:02:08.846513 29881 net.cpp:124] Setting up mnist
I0428 20:02:08.846537 29881 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:02:08.846554 29881 net.cpp:131] Top shape: 64 (64)
I0428 20:02:08.846560 29881 net.cpp:139] Memory required for data: 200960
I0428 20:02:08.846566 29881 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:08.846582 29881 net.cpp:86] Creating Layer conv0
I0428 20:02:08.846612 29881 net.cpp:408] conv0 <- data
I0428 20:02:08.846624 29881 net.cpp:382] conv0 -> conv0
I0428 20:02:09.133029 29881 net.cpp:124] Setting up conv0
I0428 20:02:09.133059 29881 net.cpp:131] Top shape: 64 10 24 24 (368640)
I0428 20:02:09.133064 29881 net.cpp:139] Memory required for data: 1675520
I0428 20:02:09.133083 29881 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:09.133098 29881 net.cpp:86] Creating Layer pool0
I0428 20:02:09.133103 29881 net.cpp:408] pool0 <- conv0
I0428 20:02:09.133110 29881 net.cpp:382] pool0 -> pool0
I0428 20:02:09.133173 29881 net.cpp:124] Setting up pool0
I0428 20:02:09.133179 29881 net.cpp:131] Top shape: 64 10 12 12 (92160)
I0428 20:02:09.133184 29881 net.cpp:139] Memory required for data: 2044160
I0428 20:02:09.133188 29881 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:09.133200 29881 net.cpp:86] Creating Layer conv1
I0428 20:02:09.133204 29881 net.cpp:408] conv1 <- pool0
I0428 20:02:09.133210 29881 net.cpp:382] conv1 -> conv1
I0428 20:02:09.136365 29881 net.cpp:124] Setting up conv1
I0428 20:02:09.136382 29881 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:02:09.136386 29881 net.cpp:139] Memory required for data: 2863360
I0428 20:02:09.136397 29881 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:09.136406 29881 net.cpp:86] Creating Layer pool1
I0428 20:02:09.136410 29881 net.cpp:408] pool1 <- conv1
I0428 20:02:09.136416 29881 net.cpp:382] pool1 -> pool1
I0428 20:02:09.136459 29881 net.cpp:124] Setting up pool1
I0428 20:02:09.136466 29881 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:02:09.136471 29881 net.cpp:139] Memory required for data: 3068160
I0428 20:02:09.136473 29881 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:09.136482 29881 net.cpp:86] Creating Layer ip1
I0428 20:02:09.136487 29881 net.cpp:408] ip1 <- pool1
I0428 20:02:09.136492 29881 net.cpp:382] ip1 -> ip1
I0428 20:02:09.136734 29881 net.cpp:124] Setting up ip1
I0428 20:02:09.136744 29881 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:09.136747 29881 net.cpp:139] Memory required for data: 3074560
I0428 20:02:09.136756 29881 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:09.136771 29881 net.cpp:86] Creating Layer relu1
I0428 20:02:09.136775 29881 net.cpp:408] relu1 <- ip1
I0428 20:02:09.136780 29881 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:09.136984 29881 net.cpp:124] Setting up relu1
I0428 20:02:09.136996 29881 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:09.136999 29881 net.cpp:139] Memory required for data: 3080960
I0428 20:02:09.137003 29881 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:09.137011 29881 net.cpp:86] Creating Layer ip2
I0428 20:02:09.137014 29881 net.cpp:408] ip2 <- ip1
I0428 20:02:09.137020 29881 net.cpp:382] ip2 -> ip2
I0428 20:02:09.137130 29881 net.cpp:124] Setting up ip2
I0428 20:02:09.137138 29881 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:09.137142 29881 net.cpp:139] Memory required for data: 3087360
I0428 20:02:09.137150 29881 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:09.137156 29881 net.cpp:86] Creating Layer relu2
I0428 20:02:09.137161 29881 net.cpp:408] relu2 <- ip2
I0428 20:02:09.137166 29881 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:09.138012 29881 net.cpp:124] Setting up relu2
I0428 20:02:09.138026 29881 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:02:09.138031 29881 net.cpp:139] Memory required for data: 3093760
I0428 20:02:09.138036 29881 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:09.138043 29881 net.cpp:86] Creating Layer ip3
I0428 20:02:09.138047 29881 net.cpp:408] ip3 <- ip2
I0428 20:02:09.138054 29881 net.cpp:382] ip3 -> ip3
I0428 20:02:09.138165 29881 net.cpp:124] Setting up ip3
I0428 20:02:09.138178 29881 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:09.138182 29881 net.cpp:139] Memory required for data: 3096320
I0428 20:02:09.138192 29881 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:09.138198 29881 net.cpp:86] Creating Layer relu3
I0428 20:02:09.138202 29881 net.cpp:408] relu3 <- ip3
I0428 20:02:09.138207 29881 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:09.138397 29881 net.cpp:124] Setting up relu3
I0428 20:02:09.138407 29881 net.cpp:131] Top shape: 64 10 (640)
I0428 20:02:09.138411 29881 net.cpp:139] Memory required for data: 3098880
I0428 20:02:09.138415 29881 layer_factory.hpp:77] Creating layer loss
I0428 20:02:09.138422 29881 net.cpp:86] Creating Layer loss
I0428 20:02:09.138427 29881 net.cpp:408] loss <- ip3
I0428 20:02:09.138432 29881 net.cpp:408] loss <- label
I0428 20:02:09.138437 29881 net.cpp:382] loss -> loss
I0428 20:02:09.138458 29881 layer_factory.hpp:77] Creating layer loss
I0428 20:02:09.138717 29881 net.cpp:124] Setting up loss
I0428 20:02:09.138727 29881 net.cpp:131] Top shape: (1)
I0428 20:02:09.138731 29881 net.cpp:134]     with loss weight 1
I0428 20:02:09.138746 29881 net.cpp:139] Memory required for data: 3098884
I0428 20:02:09.138751 29881 net.cpp:200] loss needs backward computation.
I0428 20:02:09.138756 29881 net.cpp:200] relu3 needs backward computation.
I0428 20:02:09.138759 29881 net.cpp:200] ip3 needs backward computation.
I0428 20:02:09.138763 29881 net.cpp:200] relu2 needs backward computation.
I0428 20:02:09.138767 29881 net.cpp:200] ip2 needs backward computation.
I0428 20:02:09.138770 29881 net.cpp:200] relu1 needs backward computation.
I0428 20:02:09.138774 29881 net.cpp:200] ip1 needs backward computation.
I0428 20:02:09.138777 29881 net.cpp:200] pool1 needs backward computation.
I0428 20:02:09.138782 29881 net.cpp:200] conv1 needs backward computation.
I0428 20:02:09.138785 29881 net.cpp:200] pool0 needs backward computation.
I0428 20:02:09.138789 29881 net.cpp:200] conv0 needs backward computation.
I0428 20:02:09.138794 29881 net.cpp:202] mnist does not need backward computation.
I0428 20:02:09.138797 29881 net.cpp:244] This network produces output loss
I0428 20:02:09.138808 29881 net.cpp:257] Network initialization done.
I0428 20:02:09.139189 29881 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test921.prototxt
I0428 20:02:09.139221 29881 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:02:09.139339 29881 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:02:09.139430 29881 layer_factory.hpp:77] Creating layer mnist
I0428 20:02:09.139480 29881 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:02:09.139495 29881 net.cpp:86] Creating Layer mnist
I0428 20:02:09.139502 29881 net.cpp:382] mnist -> data
I0428 20:02:09.139511 29881 net.cpp:382] mnist -> label
I0428 20:02:09.139605 29881 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:02:09.141775 29881 net.cpp:124] Setting up mnist
I0428 20:02:09.141790 29881 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:02:09.141805 29881 net.cpp:131] Top shape: 100 (100)
I0428 20:02:09.141809 29881 net.cpp:139] Memory required for data: 314000
I0428 20:02:09.141813 29881 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:02:09.141821 29881 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:02:09.141826 29881 net.cpp:408] label_mnist_1_split <- label
I0428 20:02:09.141832 29881 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:02:09.141840 29881 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:02:09.141958 29881 net.cpp:124] Setting up label_mnist_1_split
I0428 20:02:09.141968 29881 net.cpp:131] Top shape: 100 (100)
I0428 20:02:09.141971 29881 net.cpp:131] Top shape: 100 (100)
I0428 20:02:09.141975 29881 net.cpp:139] Memory required for data: 314800
I0428 20:02:09.141979 29881 layer_factory.hpp:77] Creating layer conv0
I0428 20:02:09.141989 29881 net.cpp:86] Creating Layer conv0
I0428 20:02:09.141993 29881 net.cpp:408] conv0 <- data
I0428 20:02:09.141999 29881 net.cpp:382] conv0 -> conv0
I0428 20:02:09.143718 29881 net.cpp:124] Setting up conv0
I0428 20:02:09.143733 29881 net.cpp:131] Top shape: 100 10 24 24 (576000)
I0428 20:02:09.143738 29881 net.cpp:139] Memory required for data: 2618800
I0428 20:02:09.143749 29881 layer_factory.hpp:77] Creating layer pool0
I0428 20:02:09.143757 29881 net.cpp:86] Creating Layer pool0
I0428 20:02:09.143761 29881 net.cpp:408] pool0 <- conv0
I0428 20:02:09.143769 29881 net.cpp:382] pool0 -> pool0
I0428 20:02:09.143810 29881 net.cpp:124] Setting up pool0
I0428 20:02:09.143815 29881 net.cpp:131] Top shape: 100 10 12 12 (144000)
I0428 20:02:09.143820 29881 net.cpp:139] Memory required for data: 3194800
I0428 20:02:09.143823 29881 layer_factory.hpp:77] Creating layer conv1
I0428 20:02:09.143833 29881 net.cpp:86] Creating Layer conv1
I0428 20:02:09.143836 29881 net.cpp:408] conv1 <- pool0
I0428 20:02:09.143842 29881 net.cpp:382] conv1 -> conv1
I0428 20:02:09.145572 29881 net.cpp:124] Setting up conv1
I0428 20:02:09.145601 29881 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:02:09.145604 29881 net.cpp:139] Memory required for data: 4474800
I0428 20:02:09.145617 29881 layer_factory.hpp:77] Creating layer pool1
I0428 20:02:09.145623 29881 net.cpp:86] Creating Layer pool1
I0428 20:02:09.145628 29881 net.cpp:408] pool1 <- conv1
I0428 20:02:09.145635 29881 net.cpp:382] pool1 -> pool1
I0428 20:02:09.145676 29881 net.cpp:124] Setting up pool1
I0428 20:02:09.145683 29881 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:02:09.145694 29881 net.cpp:139] Memory required for data: 4794800
I0428 20:02:09.145697 29881 layer_factory.hpp:77] Creating layer ip1
I0428 20:02:09.145704 29881 net.cpp:86] Creating Layer ip1
I0428 20:02:09.145709 29881 net.cpp:408] ip1 <- pool1
I0428 20:02:09.145714 29881 net.cpp:382] ip1 -> ip1
I0428 20:02:09.145962 29881 net.cpp:124] Setting up ip1
I0428 20:02:09.145972 29881 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:09.145987 29881 net.cpp:139] Memory required for data: 4804800
I0428 20:02:09.145997 29881 layer_factory.hpp:77] Creating layer relu1
I0428 20:02:09.146003 29881 net.cpp:86] Creating Layer relu1
I0428 20:02:09.146008 29881 net.cpp:408] relu1 <- ip1
I0428 20:02:09.146013 29881 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:02:09.146198 29881 net.cpp:124] Setting up relu1
I0428 20:02:09.146208 29881 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:09.146212 29881 net.cpp:139] Memory required for data: 4814800
I0428 20:02:09.146216 29881 layer_factory.hpp:77] Creating layer ip2
I0428 20:02:09.146225 29881 net.cpp:86] Creating Layer ip2
I0428 20:02:09.146229 29881 net.cpp:408] ip2 <- ip1
I0428 20:02:09.146235 29881 net.cpp:382] ip2 -> ip2
I0428 20:02:09.146386 29881 net.cpp:124] Setting up ip2
I0428 20:02:09.146395 29881 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:09.146399 29881 net.cpp:139] Memory required for data: 4824800
I0428 20:02:09.146406 29881 layer_factory.hpp:77] Creating layer relu2
I0428 20:02:09.146412 29881 net.cpp:86] Creating Layer relu2
I0428 20:02:09.146416 29881 net.cpp:408] relu2 <- ip2
I0428 20:02:09.146421 29881 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:02:09.146664 29881 net.cpp:124] Setting up relu2
I0428 20:02:09.146674 29881 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:02:09.146679 29881 net.cpp:139] Memory required for data: 4834800
I0428 20:02:09.146683 29881 layer_factory.hpp:77] Creating layer ip3
I0428 20:02:09.146689 29881 net.cpp:86] Creating Layer ip3
I0428 20:02:09.146694 29881 net.cpp:408] ip3 <- ip2
I0428 20:02:09.146708 29881 net.cpp:382] ip3 -> ip3
I0428 20:02:09.146817 29881 net.cpp:124] Setting up ip3
I0428 20:02:09.146826 29881 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:09.146829 29881 net.cpp:139] Memory required for data: 4838800
I0428 20:02:09.146839 29881 layer_factory.hpp:77] Creating layer relu3
I0428 20:02:09.146845 29881 net.cpp:86] Creating Layer relu3
I0428 20:02:09.146849 29881 net.cpp:408] relu3 <- ip3
I0428 20:02:09.146854 29881 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:02:09.147730 29881 net.cpp:124] Setting up relu3
I0428 20:02:09.147744 29881 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:09.147748 29881 net.cpp:139] Memory required for data: 4842800
I0428 20:02:09.147753 29881 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:02:09.147759 29881 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:02:09.147763 29881 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:02:09.147769 29881 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:02:09.147788 29881 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:02:09.147833 29881 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:02:09.147840 29881 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:09.147843 29881 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:02:09.147847 29881 net.cpp:139] Memory required for data: 4850800
I0428 20:02:09.147851 29881 layer_factory.hpp:77] Creating layer accuracy
I0428 20:02:09.147862 29881 net.cpp:86] Creating Layer accuracy
I0428 20:02:09.147866 29881 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:02:09.147871 29881 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:02:09.147876 29881 net.cpp:382] accuracy -> accuracy
I0428 20:02:09.147884 29881 net.cpp:124] Setting up accuracy
I0428 20:02:09.147889 29881 net.cpp:131] Top shape: (1)
I0428 20:02:09.147892 29881 net.cpp:139] Memory required for data: 4850804
I0428 20:02:09.147897 29881 layer_factory.hpp:77] Creating layer loss
I0428 20:02:09.147902 29881 net.cpp:86] Creating Layer loss
I0428 20:02:09.147905 29881 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:02:09.147912 29881 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:02:09.147917 29881 net.cpp:382] loss -> loss
I0428 20:02:09.147923 29881 layer_factory.hpp:77] Creating layer loss
I0428 20:02:09.148181 29881 net.cpp:124] Setting up loss
I0428 20:02:09.148192 29881 net.cpp:131] Top shape: (1)
I0428 20:02:09.148197 29881 net.cpp:134]     with loss weight 1
I0428 20:02:09.148217 29881 net.cpp:139] Memory required for data: 4850808
I0428 20:02:09.148222 29881 net.cpp:200] loss needs backward computation.
I0428 20:02:09.148226 29881 net.cpp:202] accuracy does not need backward computation.
I0428 20:02:09.148231 29881 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:02:09.148236 29881 net.cpp:200] relu3 needs backward computation.
I0428 20:02:09.148239 29881 net.cpp:200] ip3 needs backward computation.
I0428 20:02:09.148243 29881 net.cpp:200] relu2 needs backward computation.
I0428 20:02:09.148247 29881 net.cpp:200] ip2 needs backward computation.
I0428 20:02:09.148252 29881 net.cpp:200] relu1 needs backward computation.
I0428 20:02:09.148254 29881 net.cpp:200] ip1 needs backward computation.
I0428 20:02:09.148258 29881 net.cpp:200] pool1 needs backward computation.
I0428 20:02:09.148262 29881 net.cpp:200] conv1 needs backward computation.
I0428 20:02:09.148267 29881 net.cpp:200] pool0 needs backward computation.
I0428 20:02:09.148270 29881 net.cpp:200] conv0 needs backward computation.
I0428 20:02:09.148275 29881 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:02:09.148280 29881 net.cpp:202] mnist does not need backward computation.
I0428 20:02:09.148283 29881 net.cpp:244] This network produces output accuracy
I0428 20:02:09.148288 29881 net.cpp:244] This network produces output loss
I0428 20:02:09.148301 29881 net.cpp:257] Network initialization done.
I0428 20:02:09.148350 29881 solver.cpp:56] Solver scaffolding done.
I0428 20:02:09.148738 29881 caffe.cpp:248] Starting Optimization
I0428 20:02:09.148746 29881 solver.cpp:273] Solving LeNet
I0428 20:02:09.148749 29881 solver.cpp:274] Learning Rate Policy: inv
I0428 20:02:09.149750 29881 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:02:09.154222 29881 blocking_queue.cpp:49] Waiting for data
I0428 20:02:09.227449 29888 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:09.228121 29881 solver.cpp:398]     Test net output #0: accuracy = 0.075
I0428 20:02:09.228168 29881 solver.cpp:398]     Test net output #1: loss = 2.31116 (* 1 = 2.31116 loss)
I0428 20:02:09.232719 29881 solver.cpp:219] Iteration 0 (-3.9186e-31 iter/s, 0.0839292s/100 iters), loss = 2.31796
I0428 20:02:09.232760 29881 solver.cpp:238]     Train net output #0: loss = 2.31796 (* 1 = 2.31796 loss)
I0428 20:02:09.232776 29881 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:02:09.347767 29881 solver.cpp:219] Iteration 100 (869.578 iter/s, 0.114998s/100 iters), loss = 0.578712
I0428 20:02:09.347800 29881 solver.cpp:238]     Train net output #0: loss = 0.578712 (* 1 = 0.578712 loss)
I0428 20:02:09.347807 29881 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:02:09.456223 29881 solver.cpp:219] Iteration 200 (922.425 iter/s, 0.10841s/100 iters), loss = 0.279475
I0428 20:02:09.456269 29881 solver.cpp:238]     Train net output #0: loss = 0.279475 (* 1 = 0.279475 loss)
I0428 20:02:09.456277 29881 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:02:09.565150 29881 solver.cpp:219] Iteration 300 (918.443 iter/s, 0.10888s/100 iters), loss = 0.254451
I0428 20:02:09.565181 29881 solver.cpp:238]     Train net output #0: loss = 0.254451 (* 1 = 0.254451 loss)
I0428 20:02:09.565194 29881 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:02:09.673198 29881 solver.cpp:219] Iteration 400 (925.869 iter/s, 0.108007s/100 iters), loss = 0.105698
I0428 20:02:09.673228 29881 solver.cpp:238]     Train net output #0: loss = 0.105698 (* 1 = 0.105698 loss)
I0428 20:02:09.673238 29881 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:02:09.781658 29881 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:02:09.834394 29888 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:09.834929 29881 solver.cpp:398]     Test net output #0: accuracy = 0.9626
I0428 20:02:09.834954 29881 solver.cpp:398]     Test net output #1: loss = 0.118158 (* 1 = 0.118158 loss)
I0428 20:02:09.836066 29881 solver.cpp:219] Iteration 500 (614.159 iter/s, 0.162824s/100 iters), loss = 0.105476
I0428 20:02:09.836109 29881 solver.cpp:238]     Train net output #0: loss = 0.105476 (* 1 = 0.105476 loss)
I0428 20:02:09.836117 29881 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:02:09.949532 29881 solver.cpp:219] Iteration 600 (881.745 iter/s, 0.113411s/100 iters), loss = 0.0937369
I0428 20:02:09.949563 29881 solver.cpp:238]     Train net output #0: loss = 0.0937369 (* 1 = 0.0937369 loss)
I0428 20:02:09.949578 29881 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:02:10.064010 29881 solver.cpp:219] Iteration 700 (873.849 iter/s, 0.114436s/100 iters), loss = 0.137647
I0428 20:02:10.064043 29881 solver.cpp:238]     Train net output #0: loss = 0.137647 (* 1 = 0.137647 loss)
I0428 20:02:10.064050 29881 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:02:10.175539 29881 solver.cpp:219] Iteration 800 (896.974 iter/s, 0.111486s/100 iters), loss = 0.259655
I0428 20:02:10.175582 29881 solver.cpp:238]     Train net output #0: loss = 0.259655 (* 1 = 0.259655 loss)
I0428 20:02:10.175590 29881 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:02:10.284469 29881 solver.cpp:219] Iteration 900 (918.331 iter/s, 0.108893s/100 iters), loss = 0.098065
I0428 20:02:10.284507 29881 solver.cpp:238]     Train net output #0: loss = 0.0980651 (* 1 = 0.0980651 loss)
I0428 20:02:10.284512 29881 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:02:10.320474 29887 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:10.401180 29881 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:02:10.402880 29881 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:02:10.403909 29881 solver.cpp:311] Iteration 1000, loss = 0.123278
I0428 20:02:10.403935 29881 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:02:10.479158 29888 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:02:10.479729 29881 solver.cpp:398]     Test net output #0: accuracy = 0.9757
I0428 20:02:10.479753 29881 solver.cpp:398]     Test net output #1: loss = 0.0774899 (* 1 = 0.0774899 loss)
I0428 20:02:10.479763 29881 solver.cpp:316] Optimization Done.
I0428 20:02:10.479768 29881 caffe.cpp:259] Optimization Done.
