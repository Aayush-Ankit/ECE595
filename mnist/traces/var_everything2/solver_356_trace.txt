I0428 19:41:09.089319 24753 caffe.cpp:218] Using GPUs 0
I0428 19:41:09.129601 24753 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:41:09.593813 24753 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test356.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:41:09.593962 24753 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test356.prototxt
I0428 19:41:09.594277 24753 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:41:09.594292 24753 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:41:09.594364 24753 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:09.594427 24753 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:09.594511 24753 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:41:09.594532 24753 net.cpp:86] Creating Layer mnist
I0428 19:41:09.594539 24753 net.cpp:382] mnist -> data
I0428 19:41:09.594559 24753 net.cpp:382] mnist -> label
I0428 19:41:09.595479 24753 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:41:09.597739 24753 net.cpp:124] Setting up mnist
I0428 19:41:09.597772 24753 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:41:09.597777 24753 net.cpp:131] Top shape: 64 (64)
I0428 19:41:09.597780 24753 net.cpp:139] Memory required for data: 200960
I0428 19:41:09.597801 24753 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:09.597822 24753 net.cpp:86] Creating Layer conv0
I0428 19:41:09.597826 24753 net.cpp:408] conv0 <- data
I0428 19:41:09.597838 24753 net.cpp:382] conv0 -> conv0
I0428 19:41:09.829826 24753 net.cpp:124] Setting up conv0
I0428 19:41:09.829854 24753 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:41:09.829857 24753 net.cpp:139] Memory required for data: 495872
I0428 19:41:09.829905 24753 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:09.829917 24753 net.cpp:86] Creating Layer pool0
I0428 19:41:09.829921 24753 net.cpp:408] pool0 <- conv0
I0428 19:41:09.829926 24753 net.cpp:382] pool0 -> pool0
I0428 19:41:09.829972 24753 net.cpp:124] Setting up pool0
I0428 19:41:09.829978 24753 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:41:09.829982 24753 net.cpp:139] Memory required for data: 569600
I0428 19:41:09.829984 24753 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:09.829994 24753 net.cpp:86] Creating Layer conv1
I0428 19:41:09.829998 24753 net.cpp:408] conv1 <- pool0
I0428 19:41:09.830003 24753 net.cpp:382] conv1 -> conv1
I0428 19:41:09.831789 24753 net.cpp:124] Setting up conv1
I0428 19:41:09.831804 24753 net.cpp:131] Top shape: 64 10 8 8 (40960)
I0428 19:41:09.831807 24753 net.cpp:139] Memory required for data: 733440
I0428 19:41:09.831815 24753 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:09.831823 24753 net.cpp:86] Creating Layer pool1
I0428 19:41:09.831827 24753 net.cpp:408] pool1 <- conv1
I0428 19:41:09.831832 24753 net.cpp:382] pool1 -> pool1
I0428 19:41:09.831867 24753 net.cpp:124] Setting up pool1
I0428 19:41:09.831874 24753 net.cpp:131] Top shape: 64 10 4 4 (10240)
I0428 19:41:09.831877 24753 net.cpp:139] Memory required for data: 774400
I0428 19:41:09.831881 24753 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:09.831887 24753 net.cpp:86] Creating Layer ip1
I0428 19:41:09.831889 24753 net.cpp:408] ip1 <- pool1
I0428 19:41:09.831894 24753 net.cpp:382] ip1 -> ip1
I0428 19:41:09.832911 24753 net.cpp:124] Setting up ip1
I0428 19:41:09.832924 24753 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:09.832928 24753 net.cpp:139] Memory required for data: 776960
I0428 19:41:09.832937 24753 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:09.832963 24753 net.cpp:86] Creating Layer relu1
I0428 19:41:09.832967 24753 net.cpp:408] relu1 <- ip1
I0428 19:41:09.832972 24753 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:09.833155 24753 net.cpp:124] Setting up relu1
I0428 19:41:09.833164 24753 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:09.833168 24753 net.cpp:139] Memory required for data: 779520
I0428 19:41:09.833170 24753 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:09.833191 24753 net.cpp:86] Creating Layer ip2
I0428 19:41:09.833194 24753 net.cpp:408] ip2 <- ip1
I0428 19:41:09.833199 24753 net.cpp:382] ip2 -> ip2
I0428 19:41:09.833287 24753 net.cpp:124] Setting up ip2
I0428 19:41:09.833294 24753 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:09.833297 24753 net.cpp:139] Memory required for data: 782080
I0428 19:41:09.833302 24753 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:09.833307 24753 net.cpp:86] Creating Layer relu2
I0428 19:41:09.833310 24753 net.cpp:408] relu2 <- ip2
I0428 19:41:09.833314 24753 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:09.833999 24753 net.cpp:124] Setting up relu2
I0428 19:41:09.834012 24753 net.cpp:131] Top shape: 64 10 (640)
I0428 19:41:09.834014 24753 net.cpp:139] Memory required for data: 784640
I0428 19:41:09.834018 24753 layer_factory.hpp:77] Creating layer loss
I0428 19:41:09.834024 24753 net.cpp:86] Creating Layer loss
I0428 19:41:09.834028 24753 net.cpp:408] loss <- ip2
I0428 19:41:09.834031 24753 net.cpp:408] loss <- label
I0428 19:41:09.834036 24753 net.cpp:382] loss -> loss
I0428 19:41:09.834055 24753 layer_factory.hpp:77] Creating layer loss
I0428 19:41:09.834272 24753 net.cpp:124] Setting up loss
I0428 19:41:09.834282 24753 net.cpp:131] Top shape: (1)
I0428 19:41:09.834285 24753 net.cpp:134]     with loss weight 1
I0428 19:41:09.834298 24753 net.cpp:139] Memory required for data: 784644
I0428 19:41:09.834301 24753 net.cpp:200] loss needs backward computation.
I0428 19:41:09.834305 24753 net.cpp:200] relu2 needs backward computation.
I0428 19:41:09.834307 24753 net.cpp:200] ip2 needs backward computation.
I0428 19:41:09.834311 24753 net.cpp:200] relu1 needs backward computation.
I0428 19:41:09.834313 24753 net.cpp:200] ip1 needs backward computation.
I0428 19:41:09.834316 24753 net.cpp:200] pool1 needs backward computation.
I0428 19:41:09.834328 24753 net.cpp:200] conv1 needs backward computation.
I0428 19:41:09.834331 24753 net.cpp:200] pool0 needs backward computation.
I0428 19:41:09.834334 24753 net.cpp:200] conv0 needs backward computation.
I0428 19:41:09.834337 24753 net.cpp:202] mnist does not need backward computation.
I0428 19:41:09.834341 24753 net.cpp:244] This network produces output loss
I0428 19:41:09.834348 24753 net.cpp:257] Network initialization done.
I0428 19:41:09.834625 24753 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test356.prototxt
I0428 19:41:09.834650 24753 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:41:09.834728 24753 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 10
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:41:09.834789 24753 layer_factory.hpp:77] Creating layer mnist
I0428 19:41:09.834832 24753 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:41:09.834844 24753 net.cpp:86] Creating Layer mnist
I0428 19:41:09.834848 24753 net.cpp:382] mnist -> data
I0428 19:41:09.834856 24753 net.cpp:382] mnist -> label
I0428 19:41:09.834934 24753 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:41:09.836796 24753 net.cpp:124] Setting up mnist
I0428 19:41:09.836830 24753 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:41:09.836835 24753 net.cpp:131] Top shape: 100 (100)
I0428 19:41:09.836838 24753 net.cpp:139] Memory required for data: 314000
I0428 19:41:09.836841 24753 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:41:09.836848 24753 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:41:09.836851 24753 net.cpp:408] label_mnist_1_split <- label
I0428 19:41:09.836855 24753 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:41:09.836863 24753 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:41:09.836899 24753 net.cpp:124] Setting up label_mnist_1_split
I0428 19:41:09.836915 24753 net.cpp:131] Top shape: 100 (100)
I0428 19:41:09.836920 24753 net.cpp:131] Top shape: 100 (100)
I0428 19:41:09.836922 24753 net.cpp:139] Memory required for data: 314800
I0428 19:41:09.836925 24753 layer_factory.hpp:77] Creating layer conv0
I0428 19:41:09.836933 24753 net.cpp:86] Creating Layer conv0
I0428 19:41:09.836936 24753 net.cpp:408] conv0 <- data
I0428 19:41:09.836941 24753 net.cpp:382] conv0 -> conv0
I0428 19:41:09.838536 24753 net.cpp:124] Setting up conv0
I0428 19:41:09.838548 24753 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:41:09.838552 24753 net.cpp:139] Memory required for data: 775600
I0428 19:41:09.838560 24753 layer_factory.hpp:77] Creating layer pool0
I0428 19:41:09.838567 24753 net.cpp:86] Creating Layer pool0
I0428 19:41:09.838570 24753 net.cpp:408] pool0 <- conv0
I0428 19:41:09.838575 24753 net.cpp:382] pool0 -> pool0
I0428 19:41:09.838608 24753 net.cpp:124] Setting up pool0
I0428 19:41:09.838613 24753 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:41:09.838616 24753 net.cpp:139] Memory required for data: 890800
I0428 19:41:09.838619 24753 layer_factory.hpp:77] Creating layer conv1
I0428 19:41:09.838627 24753 net.cpp:86] Creating Layer conv1
I0428 19:41:09.838630 24753 net.cpp:408] conv1 <- pool0
I0428 19:41:09.838634 24753 net.cpp:382] conv1 -> conv1
I0428 19:41:09.840095 24753 net.cpp:124] Setting up conv1
I0428 19:41:09.840107 24753 net.cpp:131] Top shape: 100 10 8 8 (64000)
I0428 19:41:09.840111 24753 net.cpp:139] Memory required for data: 1146800
I0428 19:41:09.840119 24753 layer_factory.hpp:77] Creating layer pool1
I0428 19:41:09.840126 24753 net.cpp:86] Creating Layer pool1
I0428 19:41:09.840129 24753 net.cpp:408] pool1 <- conv1
I0428 19:41:09.840134 24753 net.cpp:382] pool1 -> pool1
I0428 19:41:09.840168 24753 net.cpp:124] Setting up pool1
I0428 19:41:09.840178 24753 net.cpp:131] Top shape: 100 10 4 4 (16000)
I0428 19:41:09.840180 24753 net.cpp:139] Memory required for data: 1210800
I0428 19:41:09.840183 24753 layer_factory.hpp:77] Creating layer ip1
I0428 19:41:09.840189 24753 net.cpp:86] Creating Layer ip1
I0428 19:41:09.840193 24753 net.cpp:408] ip1 <- pool1
I0428 19:41:09.840198 24753 net.cpp:382] ip1 -> ip1
I0428 19:41:09.840328 24753 net.cpp:124] Setting up ip1
I0428 19:41:09.840337 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.840340 24753 net.cpp:139] Memory required for data: 1214800
I0428 19:41:09.840348 24753 layer_factory.hpp:77] Creating layer relu1
I0428 19:41:09.840353 24753 net.cpp:86] Creating Layer relu1
I0428 19:41:09.840355 24753 net.cpp:408] relu1 <- ip1
I0428 19:41:09.840366 24753 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:41:09.840528 24753 net.cpp:124] Setting up relu1
I0428 19:41:09.840538 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.840541 24753 net.cpp:139] Memory required for data: 1218800
I0428 19:41:09.840544 24753 layer_factory.hpp:77] Creating layer ip2
I0428 19:41:09.840551 24753 net.cpp:86] Creating Layer ip2
I0428 19:41:09.840554 24753 net.cpp:408] ip2 <- ip1
I0428 19:41:09.840560 24753 net.cpp:382] ip2 -> ip2
I0428 19:41:09.840670 24753 net.cpp:124] Setting up ip2
I0428 19:41:09.840677 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.840680 24753 net.cpp:139] Memory required for data: 1222800
I0428 19:41:09.840687 24753 layer_factory.hpp:77] Creating layer relu2
I0428 19:41:09.840690 24753 net.cpp:86] Creating Layer relu2
I0428 19:41:09.840694 24753 net.cpp:408] relu2 <- ip2
I0428 19:41:09.840713 24753 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:41:09.840905 24753 net.cpp:124] Setting up relu2
I0428 19:41:09.840914 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.840919 24753 net.cpp:139] Memory required for data: 1226800
I0428 19:41:09.840921 24753 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:41:09.840934 24753 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:41:09.840937 24753 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:41:09.840942 24753 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:41:09.840960 24753 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:41:09.841007 24753 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:41:09.841014 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.841018 24753 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:41:09.841022 24753 net.cpp:139] Memory required for data: 1234800
I0428 19:41:09.841025 24753 layer_factory.hpp:77] Creating layer accuracy
I0428 19:41:09.841030 24753 net.cpp:86] Creating Layer accuracy
I0428 19:41:09.841033 24753 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:41:09.841037 24753 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:41:09.841042 24753 net.cpp:382] accuracy -> accuracy
I0428 19:41:09.841048 24753 net.cpp:124] Setting up accuracy
I0428 19:41:09.841053 24753 net.cpp:131] Top shape: (1)
I0428 19:41:09.841055 24753 net.cpp:139] Memory required for data: 1234804
I0428 19:41:09.841058 24753 layer_factory.hpp:77] Creating layer loss
I0428 19:41:09.841063 24753 net.cpp:86] Creating Layer loss
I0428 19:41:09.841065 24753 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:41:09.841069 24753 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:41:09.841073 24753 net.cpp:382] loss -> loss
I0428 19:41:09.841079 24753 layer_factory.hpp:77] Creating layer loss
I0428 19:41:09.841336 24753 net.cpp:124] Setting up loss
I0428 19:41:09.841346 24753 net.cpp:131] Top shape: (1)
I0428 19:41:09.841349 24753 net.cpp:134]     with loss weight 1
I0428 19:41:09.841356 24753 net.cpp:139] Memory required for data: 1234808
I0428 19:41:09.841359 24753 net.cpp:200] loss needs backward computation.
I0428 19:41:09.841363 24753 net.cpp:202] accuracy does not need backward computation.
I0428 19:41:09.841367 24753 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:41:09.841370 24753 net.cpp:200] relu2 needs backward computation.
I0428 19:41:09.841373 24753 net.cpp:200] ip2 needs backward computation.
I0428 19:41:09.841377 24753 net.cpp:200] relu1 needs backward computation.
I0428 19:41:09.841380 24753 net.cpp:200] ip1 needs backward computation.
I0428 19:41:09.841383 24753 net.cpp:200] pool1 needs backward computation.
I0428 19:41:09.841393 24753 net.cpp:200] conv1 needs backward computation.
I0428 19:41:09.841398 24753 net.cpp:200] pool0 needs backward computation.
I0428 19:41:09.841400 24753 net.cpp:200] conv0 needs backward computation.
I0428 19:41:09.841403 24753 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:41:09.841413 24753 net.cpp:202] mnist does not need backward computation.
I0428 19:41:09.841415 24753 net.cpp:244] This network produces output accuracy
I0428 19:41:09.841418 24753 net.cpp:244] This network produces output loss
I0428 19:41:09.841428 24753 net.cpp:257] Network initialization done.
I0428 19:41:09.841492 24753 solver.cpp:56] Solver scaffolding done.
I0428 19:41:09.841779 24753 caffe.cpp:248] Starting Optimization
I0428 19:41:09.841785 24753 solver.cpp:273] Solving LeNet
I0428 19:41:09.841804 24753 solver.cpp:274] Learning Rate Policy: inv
I0428 19:41:09.842550 24753 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:41:09.844316 24753 blocking_queue.cpp:49] Waiting for data
I0428 19:41:09.917902 24760 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:09.918337 24753 solver.cpp:398]     Test net output #0: accuracy = 0.0944
I0428 19:41:09.918362 24753 solver.cpp:398]     Test net output #1: loss = 2.29416 (* 1 = 2.29416 loss)
I0428 19:41:09.920040 24753 solver.cpp:219] Iteration 0 (0 iter/s, 0.0782121s/100 iters), loss = 2.29334
I0428 19:41:09.920073 24753 solver.cpp:238]     Train net output #0: loss = 2.29334 (* 1 = 2.29334 loss)
I0428 19:41:09.920086 24753 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:41:09.995169 24753 solver.cpp:219] Iteration 100 (1331.77 iter/s, 0.0750879s/100 iters), loss = 0.545367
I0428 19:41:09.995193 24753 solver.cpp:238]     Train net output #0: loss = 0.545367 (* 1 = 0.545367 loss)
I0428 19:41:09.995200 24753 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:41:10.060614 24753 solver.cpp:219] Iteration 200 (1528.77 iter/s, 0.0654121s/100 iters), loss = 0.277175
I0428 19:41:10.060650 24753 solver.cpp:238]     Train net output #0: loss = 0.277175 (* 1 = 0.277175 loss)
I0428 19:41:10.060657 24753 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:41:10.138602 24753 solver.cpp:219] Iteration 300 (1283.06 iter/s, 0.0779388s/100 iters), loss = 0.348247
I0428 19:41:10.138643 24753 solver.cpp:238]     Train net output #0: loss = 0.348247 (* 1 = 0.348247 loss)
I0428 19:41:10.138654 24753 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:41:10.213096 24753 solver.cpp:219] Iteration 400 (1343.24 iter/s, 0.0744468s/100 iters), loss = 0.213703
I0428 19:41:10.213125 24753 solver.cpp:238]     Train net output #0: loss = 0.213703 (* 1 = 0.213703 loss)
I0428 19:41:10.213134 24753 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:41:10.282483 24753 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:41:10.352915 24760 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:10.353340 24753 solver.cpp:398]     Test net output #0: accuracy = 0.9366
I0428 19:41:10.353364 24753 solver.cpp:398]     Test net output #1: loss = 0.207994 (* 1 = 0.207994 loss)
I0428 19:41:10.354122 24753 solver.cpp:219] Iteration 500 (709.295 iter/s, 0.140985s/100 iters), loss = 0.196335
I0428 19:41:10.354157 24753 solver.cpp:238]     Train net output #0: loss = 0.196335 (* 1 = 0.196335 loss)
I0428 19:41:10.354169 24753 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:41:10.425366 24753 solver.cpp:219] Iteration 600 (1404.46 iter/s, 0.0712018s/100 iters), loss = 0.165747
I0428 19:41:10.425395 24753 solver.cpp:238]     Train net output #0: loss = 0.165747 (* 1 = 0.165747 loss)
I0428 19:41:10.425403 24753 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:41:10.495111 24753 solver.cpp:219] Iteration 700 (1434.58 iter/s, 0.0697068s/100 iters), loss = 0.261548
I0428 19:41:10.495141 24753 solver.cpp:238]     Train net output #0: loss = 0.261548 (* 1 = 0.261548 loss)
I0428 19:41:10.495148 24753 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:41:10.564713 24753 solver.cpp:219] Iteration 800 (1437.56 iter/s, 0.0695624s/100 iters), loss = 0.396132
I0428 19:41:10.564740 24753 solver.cpp:238]     Train net output #0: loss = 0.396132 (* 1 = 0.396132 loss)
I0428 19:41:10.564749 24753 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:41:10.634647 24753 solver.cpp:219] Iteration 900 (1430.67 iter/s, 0.0698972s/100 iters), loss = 0.245494
I0428 19:41:10.634675 24753 solver.cpp:238]     Train net output #0: loss = 0.245494 (* 1 = 0.245494 loss)
I0428 19:41:10.634683 24753 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:41:10.658133 24759 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:10.704044 24753 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:41:10.704660 24753 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:41:10.705068 24753 solver.cpp:311] Iteration 1000, loss = 0.182869
I0428 19:41:10.705085 24753 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:41:10.776530 24760 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:41:10.777112 24753 solver.cpp:398]     Test net output #0: accuracy = 0.9594
I0428 19:41:10.777142 24753 solver.cpp:398]     Test net output #1: loss = 0.13231 (* 1 = 0.13231 loss)
I0428 19:41:10.777150 24753 solver.cpp:316] Optimization Done.
I0428 19:41:10.777158 24753 caffe.cpp:259] Optimization Done.
