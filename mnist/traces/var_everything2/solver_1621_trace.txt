I0428 20:35:27.567317  4624 caffe.cpp:218] Using GPUs 0
I0428 20:35:27.605361  4624 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:35:28.064970  4624 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1621.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:35:28.065104  4624 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1621.prototxt
I0428 20:35:28.065454  4624 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:35:28.065485  4624 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:35:28.065567  4624 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:28.065630  4624 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:28.065712  4624 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:35:28.065735  4624 net.cpp:86] Creating Layer mnist
I0428 20:35:28.065742  4624 net.cpp:382] mnist -> data
I0428 20:35:28.065763  4624 net.cpp:382] mnist -> label
I0428 20:35:28.066659  4624 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:35:28.068858  4624 net.cpp:124] Setting up mnist
I0428 20:35:28.068873  4624 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:35:28.068881  4624 net.cpp:131] Top shape: 64 (64)
I0428 20:35:28.068883  4624 net.cpp:139] Memory required for data: 200960
I0428 20:35:28.068889  4624 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:28.068902  4624 net.cpp:86] Creating Layer conv0
I0428 20:35:28.068920  4624 net.cpp:408] conv0 <- data
I0428 20:35:28.068933  4624 net.cpp:382] conv0 -> conv0
I0428 20:35:28.301636  4624 net.cpp:124] Setting up conv0
I0428 20:35:28.301661  4624 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:35:28.301664  4624 net.cpp:139] Memory required for data: 14946560
I0428 20:35:28.301678  4624 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:28.301692  4624 net.cpp:86] Creating Layer pool0
I0428 20:35:28.301695  4624 net.cpp:408] pool0 <- conv0
I0428 20:35:28.301715  4624 net.cpp:382] pool0 -> pool0
I0428 20:35:28.301764  4624 net.cpp:124] Setting up pool0
I0428 20:35:28.301771  4624 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:35:28.301774  4624 net.cpp:139] Memory required for data: 18632960
I0428 20:35:28.301777  4624 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:28.301789  4624 net.cpp:86] Creating Layer conv1
I0428 20:35:28.301792  4624 net.cpp:408] conv1 <- pool0
I0428 20:35:28.301796  4624 net.cpp:382] conv1 -> conv1
I0428 20:35:28.305418  4624 net.cpp:124] Setting up conv1
I0428 20:35:28.305449  4624 net.cpp:131] Top shape: 64 50 8 8 (204800)
I0428 20:35:28.305452  4624 net.cpp:139] Memory required for data: 19452160
I0428 20:35:28.305460  4624 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:28.305469  4624 net.cpp:86] Creating Layer pool1
I0428 20:35:28.305472  4624 net.cpp:408] pool1 <- conv1
I0428 20:35:28.305495  4624 net.cpp:382] pool1 -> pool1
I0428 20:35:28.305531  4624 net.cpp:124] Setting up pool1
I0428 20:35:28.305538  4624 net.cpp:131] Top shape: 64 50 4 4 (51200)
I0428 20:35:28.305541  4624 net.cpp:139] Memory required for data: 19656960
I0428 20:35:28.305544  4624 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:28.305557  4624 net.cpp:86] Creating Layer ip1
I0428 20:35:28.305563  4624 net.cpp:408] ip1 <- pool1
I0428 20:35:28.305567  4624 net.cpp:382] ip1 -> ip1
I0428 20:35:28.305806  4624 net.cpp:124] Setting up ip1
I0428 20:35:28.305814  4624 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:28.305816  4624 net.cpp:139] Memory required for data: 19663360
I0428 20:35:28.305822  4624 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:28.305829  4624 net.cpp:86] Creating Layer relu1
I0428 20:35:28.305842  4624 net.cpp:408] relu1 <- ip1
I0428 20:35:28.305848  4624 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:28.306028  4624 net.cpp:124] Setting up relu1
I0428 20:35:28.306037  4624 net.cpp:131] Top shape: 64 25 (1600)
I0428 20:35:28.306054  4624 net.cpp:139] Memory required for data: 19669760
I0428 20:35:28.306057  4624 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:28.306064  4624 net.cpp:86] Creating Layer ip2
I0428 20:35:28.306067  4624 net.cpp:408] ip2 <- ip1
I0428 20:35:28.306071  4624 net.cpp:382] ip2 -> ip2
I0428 20:35:28.306160  4624 net.cpp:124] Setting up ip2
I0428 20:35:28.306167  4624 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:28.306170  4624 net.cpp:139] Memory required for data: 19672320
I0428 20:35:28.306174  4624 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:28.306181  4624 net.cpp:86] Creating Layer relu2
I0428 20:35:28.306185  4624 net.cpp:408] relu2 <- ip2
I0428 20:35:28.306188  4624 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:28.306969  4624 net.cpp:124] Setting up relu2
I0428 20:35:28.306998  4624 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:28.307003  4624 net.cpp:139] Memory required for data: 19674880
I0428 20:35:28.307005  4624 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:28.307013  4624 net.cpp:86] Creating Layer ip3
I0428 20:35:28.307015  4624 net.cpp:408] ip3 <- ip2
I0428 20:35:28.307021  4624 net.cpp:382] ip3 -> ip3
I0428 20:35:28.307118  4624 net.cpp:124] Setting up ip3
I0428 20:35:28.307126  4624 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:28.307128  4624 net.cpp:139] Memory required for data: 19677440
I0428 20:35:28.307137  4624 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:28.307142  4624 net.cpp:86] Creating Layer relu3
I0428 20:35:28.307144  4624 net.cpp:408] relu3 <- ip3
I0428 20:35:28.307149  4624 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:28.307312  4624 net.cpp:124] Setting up relu3
I0428 20:35:28.307322  4624 net.cpp:131] Top shape: 64 10 (640)
I0428 20:35:28.307324  4624 net.cpp:139] Memory required for data: 19680000
I0428 20:35:28.307328  4624 layer_factory.hpp:77] Creating layer loss
I0428 20:35:28.307348  4624 net.cpp:86] Creating Layer loss
I0428 20:35:28.307350  4624 net.cpp:408] loss <- ip3
I0428 20:35:28.307354  4624 net.cpp:408] loss <- label
I0428 20:35:28.307359  4624 net.cpp:382] loss -> loss
I0428 20:35:28.307375  4624 layer_factory.hpp:77] Creating layer loss
I0428 20:35:28.307608  4624 net.cpp:124] Setting up loss
I0428 20:35:28.307617  4624 net.cpp:131] Top shape: (1)
I0428 20:35:28.307621  4624 net.cpp:134]     with loss weight 1
I0428 20:35:28.307634  4624 net.cpp:139] Memory required for data: 19680004
I0428 20:35:28.307637  4624 net.cpp:200] loss needs backward computation.
I0428 20:35:28.307641  4624 net.cpp:200] relu3 needs backward computation.
I0428 20:35:28.307643  4624 net.cpp:200] ip3 needs backward computation.
I0428 20:35:28.307646  4624 net.cpp:200] relu2 needs backward computation.
I0428 20:35:28.307648  4624 net.cpp:200] ip2 needs backward computation.
I0428 20:35:28.307651  4624 net.cpp:200] relu1 needs backward computation.
I0428 20:35:28.307654  4624 net.cpp:200] ip1 needs backward computation.
I0428 20:35:28.307657  4624 net.cpp:200] pool1 needs backward computation.
I0428 20:35:28.307659  4624 net.cpp:200] conv1 needs backward computation.
I0428 20:35:28.307662  4624 net.cpp:200] pool0 needs backward computation.
I0428 20:35:28.307665  4624 net.cpp:200] conv0 needs backward computation.
I0428 20:35:28.307668  4624 net.cpp:202] mnist does not need backward computation.
I0428 20:35:28.307672  4624 net.cpp:244] This network produces output loss
I0428 20:35:28.307682  4624 net.cpp:257] Network initialization done.
I0428 20:35:28.308058  4624 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1621.prototxt
I0428 20:35:28.308100  4624 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:35:28.308203  4624 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:35:28.308300  4624 layer_factory.hpp:77] Creating layer mnist
I0428 20:35:28.308342  4624 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:35:28.308354  4624 net.cpp:86] Creating Layer mnist
I0428 20:35:28.308359  4624 net.cpp:382] mnist -> data
I0428 20:35:28.308367  4624 net.cpp:382] mnist -> label
I0428 20:35:28.308452  4624 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:35:28.309644  4624 net.cpp:124] Setting up mnist
I0428 20:35:28.309672  4624 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:35:28.309695  4624 net.cpp:131] Top shape: 100 (100)
I0428 20:35:28.309697  4624 net.cpp:139] Memory required for data: 314000
I0428 20:35:28.309701  4624 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:35:28.309728  4624 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:35:28.309733  4624 net.cpp:408] label_mnist_1_split <- label
I0428 20:35:28.309754  4624 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:35:28.309762  4624 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:35:28.309809  4624 net.cpp:124] Setting up label_mnist_1_split
I0428 20:35:28.309816  4624 net.cpp:131] Top shape: 100 (100)
I0428 20:35:28.309820  4624 net.cpp:131] Top shape: 100 (100)
I0428 20:35:28.309823  4624 net.cpp:139] Memory required for data: 314800
I0428 20:35:28.309826  4624 layer_factory.hpp:77] Creating layer conv0
I0428 20:35:28.309835  4624 net.cpp:86] Creating Layer conv0
I0428 20:35:28.309839  4624 net.cpp:408] conv0 <- data
I0428 20:35:28.309845  4624 net.cpp:382] conv0 -> conv0
I0428 20:35:28.311491  4624 net.cpp:124] Setting up conv0
I0428 20:35:28.311522  4624 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:35:28.311525  4624 net.cpp:139] Memory required for data: 23354800
I0428 20:35:28.311544  4624 layer_factory.hpp:77] Creating layer pool0
I0428 20:35:28.311553  4624 net.cpp:86] Creating Layer pool0
I0428 20:35:28.311555  4624 net.cpp:408] pool0 <- conv0
I0428 20:35:28.311560  4624 net.cpp:382] pool0 -> pool0
I0428 20:35:28.311597  4624 net.cpp:124] Setting up pool0
I0428 20:35:28.311604  4624 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:35:28.311606  4624 net.cpp:139] Memory required for data: 29114800
I0428 20:35:28.311609  4624 layer_factory.hpp:77] Creating layer conv1
I0428 20:35:28.311619  4624 net.cpp:86] Creating Layer conv1
I0428 20:35:28.311621  4624 net.cpp:408] conv1 <- pool0
I0428 20:35:28.311628  4624 net.cpp:382] conv1 -> conv1
I0428 20:35:28.314888  4624 net.cpp:124] Setting up conv1
I0428 20:35:28.314900  4624 net.cpp:131] Top shape: 100 50 8 8 (320000)
I0428 20:35:28.314904  4624 net.cpp:139] Memory required for data: 30394800
I0428 20:35:28.314913  4624 layer_factory.hpp:77] Creating layer pool1
I0428 20:35:28.314919  4624 net.cpp:86] Creating Layer pool1
I0428 20:35:28.314923  4624 net.cpp:408] pool1 <- conv1
I0428 20:35:28.314929  4624 net.cpp:382] pool1 -> pool1
I0428 20:35:28.314977  4624 net.cpp:124] Setting up pool1
I0428 20:35:28.314996  4624 net.cpp:131] Top shape: 100 50 4 4 (80000)
I0428 20:35:28.314999  4624 net.cpp:139] Memory required for data: 30714800
I0428 20:35:28.315002  4624 layer_factory.hpp:77] Creating layer ip1
I0428 20:35:28.315008  4624 net.cpp:86] Creating Layer ip1
I0428 20:35:28.315011  4624 net.cpp:408] ip1 <- pool1
I0428 20:35:28.315017  4624 net.cpp:382] ip1 -> ip1
I0428 20:35:28.315239  4624 net.cpp:124] Setting up ip1
I0428 20:35:28.315258  4624 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:28.315261  4624 net.cpp:139] Memory required for data: 30724800
I0428 20:35:28.315269  4624 layer_factory.hpp:77] Creating layer relu1
I0428 20:35:28.315274  4624 net.cpp:86] Creating Layer relu1
I0428 20:35:28.315279  4624 net.cpp:408] relu1 <- ip1
I0428 20:35:28.315284  4624 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:35:28.315441  4624 net.cpp:124] Setting up relu1
I0428 20:35:28.315450  4624 net.cpp:131] Top shape: 100 25 (2500)
I0428 20:35:28.315454  4624 net.cpp:139] Memory required for data: 30734800
I0428 20:35:28.315456  4624 layer_factory.hpp:77] Creating layer ip2
I0428 20:35:28.315464  4624 net.cpp:86] Creating Layer ip2
I0428 20:35:28.315467  4624 net.cpp:408] ip2 <- ip1
I0428 20:35:28.315472  4624 net.cpp:382] ip2 -> ip2
I0428 20:35:28.315585  4624 net.cpp:124] Setting up ip2
I0428 20:35:28.315593  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.315595  4624 net.cpp:139] Memory required for data: 30738800
I0428 20:35:28.315600  4624 layer_factory.hpp:77] Creating layer relu2
I0428 20:35:28.315605  4624 net.cpp:86] Creating Layer relu2
I0428 20:35:28.315608  4624 net.cpp:408] relu2 <- ip2
I0428 20:35:28.315623  4624 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:35:28.315821  4624 net.cpp:124] Setting up relu2
I0428 20:35:28.315830  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.315834  4624 net.cpp:139] Memory required for data: 30742800
I0428 20:35:28.315837  4624 layer_factory.hpp:77] Creating layer ip3
I0428 20:35:28.315843  4624 net.cpp:86] Creating Layer ip3
I0428 20:35:28.315846  4624 net.cpp:408] ip3 <- ip2
I0428 20:35:28.315851  4624 net.cpp:382] ip3 -> ip3
I0428 20:35:28.315963  4624 net.cpp:124] Setting up ip3
I0428 20:35:28.315970  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.315973  4624 net.cpp:139] Memory required for data: 30746800
I0428 20:35:28.315981  4624 layer_factory.hpp:77] Creating layer relu3
I0428 20:35:28.315987  4624 net.cpp:86] Creating Layer relu3
I0428 20:35:28.315990  4624 net.cpp:408] relu3 <- ip3
I0428 20:35:28.315994  4624 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:35:28.316920  4624 net.cpp:124] Setting up relu3
I0428 20:35:28.316933  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.316953  4624 net.cpp:139] Memory required for data: 30750800
I0428 20:35:28.316957  4624 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:35:28.316964  4624 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:35:28.316967  4624 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:35:28.316973  4624 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:35:28.316979  4624 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:35:28.317019  4624 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:35:28.317028  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.317031  4624 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:35:28.317034  4624 net.cpp:139] Memory required for data: 30758800
I0428 20:35:28.317037  4624 layer_factory.hpp:77] Creating layer accuracy
I0428 20:35:28.317044  4624 net.cpp:86] Creating Layer accuracy
I0428 20:35:28.317047  4624 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:35:28.317051  4624 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:35:28.317056  4624 net.cpp:382] accuracy -> accuracy
I0428 20:35:28.317064  4624 net.cpp:124] Setting up accuracy
I0428 20:35:28.317067  4624 net.cpp:131] Top shape: (1)
I0428 20:35:28.317081  4624 net.cpp:139] Memory required for data: 30758804
I0428 20:35:28.317085  4624 layer_factory.hpp:77] Creating layer loss
I0428 20:35:28.317090  4624 net.cpp:86] Creating Layer loss
I0428 20:35:28.317093  4624 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:35:28.317096  4624 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:35:28.317102  4624 net.cpp:382] loss -> loss
I0428 20:35:28.317108  4624 layer_factory.hpp:77] Creating layer loss
I0428 20:35:28.317369  4624 net.cpp:124] Setting up loss
I0428 20:35:28.317378  4624 net.cpp:131] Top shape: (1)
I0428 20:35:28.317383  4624 net.cpp:134]     with loss weight 1
I0428 20:35:28.317397  4624 net.cpp:139] Memory required for data: 30758808
I0428 20:35:28.317401  4624 net.cpp:200] loss needs backward computation.
I0428 20:35:28.317405  4624 net.cpp:202] accuracy does not need backward computation.
I0428 20:35:28.317409  4624 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:35:28.317412  4624 net.cpp:200] relu3 needs backward computation.
I0428 20:35:28.317431  4624 net.cpp:200] ip3 needs backward computation.
I0428 20:35:28.317435  4624 net.cpp:200] relu2 needs backward computation.
I0428 20:35:28.317437  4624 net.cpp:200] ip2 needs backward computation.
I0428 20:35:28.317456  4624 net.cpp:200] relu1 needs backward computation.
I0428 20:35:28.317458  4624 net.cpp:200] ip1 needs backward computation.
I0428 20:35:28.317462  4624 net.cpp:200] pool1 needs backward computation.
I0428 20:35:28.317472  4624 net.cpp:200] conv1 needs backward computation.
I0428 20:35:28.317476  4624 net.cpp:200] pool0 needs backward computation.
I0428 20:35:28.317479  4624 net.cpp:200] conv0 needs backward computation.
I0428 20:35:28.317483  4624 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:35:28.317487  4624 net.cpp:202] mnist does not need backward computation.
I0428 20:35:28.317489  4624 net.cpp:244] This network produces output accuracy
I0428 20:35:28.317493  4624 net.cpp:244] This network produces output loss
I0428 20:35:28.317507  4624 net.cpp:257] Network initialization done.
I0428 20:35:28.317550  4624 solver.cpp:56] Solver scaffolding done.
I0428 20:35:28.317967  4624 caffe.cpp:248] Starting Optimization
I0428 20:35:28.317973  4624 solver.cpp:273] Solving LeNet
I0428 20:35:28.317975  4624 solver.cpp:274] Learning Rate Policy: inv
I0428 20:35:28.318265  4624 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:35:28.429329  4631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:28.430982  4624 solver.cpp:398]     Test net output #0: accuracy = 0.1065
I0428 20:35:28.431001  4624 solver.cpp:398]     Test net output #1: loss = 2.31632 (* 1 = 2.31632 loss)
I0428 20:35:28.435683  4624 solver.cpp:219] Iteration 0 (-3.51509e-31 iter/s, 0.117661s/100 iters), loss = 2.32848
I0428 20:35:28.435705  4624 solver.cpp:238]     Train net output #0: loss = 2.32848 (* 1 = 2.32848 loss)
I0428 20:35:28.435717  4624 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:35:28.668437  4624 solver.cpp:219] Iteration 100 (429.713 iter/s, 0.232713s/100 iters), loss = 0.617136
I0428 20:35:28.668480  4624 solver.cpp:238]     Train net output #0: loss = 0.617136 (* 1 = 0.617136 loss)
I0428 20:35:28.668486  4624 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:35:28.900132  4624 solver.cpp:219] Iteration 200 (431.687 iter/s, 0.231649s/100 iters), loss = 0.32283
I0428 20:35:28.900171  4624 solver.cpp:238]     Train net output #0: loss = 0.32283 (* 1 = 0.32283 loss)
I0428 20:35:28.900180  4624 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:35:29.134717  4624 solver.cpp:219] Iteration 300 (426.379 iter/s, 0.234533s/100 iters), loss = 0.246567
I0428 20:35:29.134747  4624 solver.cpp:238]     Train net output #0: loss = 0.246567 (* 1 = 0.246567 loss)
I0428 20:35:29.134754  4624 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:35:29.363260  4624 solver.cpp:219] Iteration 400 (437.642 iter/s, 0.228497s/100 iters), loss = 0.059086
I0428 20:35:29.363286  4624 solver.cpp:238]     Train net output #0: loss = 0.059086 (* 1 = 0.059086 loss)
I0428 20:35:29.363293  4624 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:35:29.594213  4624 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:35:29.631562  4624 blocking_queue.cpp:49] Waiting for data
I0428 20:35:29.703326  4631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:29.705091  4624 solver.cpp:398]     Test net output #0: accuracy = 0.9609
I0428 20:35:29.705127  4624 solver.cpp:398]     Test net output #1: loss = 0.132533 (* 1 = 0.132533 loss)
I0428 20:35:29.707382  4624 solver.cpp:219] Iteration 500 (290.634 iter/s, 0.344075s/100 iters), loss = 0.220821
I0428 20:35:29.707435  4624 solver.cpp:238]     Train net output #0: loss = 0.220821 (* 1 = 0.220821 loss)
I0428 20:35:29.707442  4624 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:35:29.942602  4624 solver.cpp:219] Iteration 600 (425.258 iter/s, 0.235152s/100 iters), loss = 0.107285
I0428 20:35:29.942646  4624 solver.cpp:238]     Train net output #0: loss = 0.107285 (* 1 = 0.107285 loss)
I0428 20:35:29.942652  4624 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:35:30.177104  4624 solver.cpp:219] Iteration 700 (426.569 iter/s, 0.234428s/100 iters), loss = 0.145204
I0428 20:35:30.177130  4624 solver.cpp:238]     Train net output #0: loss = 0.145204 (* 1 = 0.145204 loss)
I0428 20:35:30.177137  4624 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:35:30.412839  4624 solver.cpp:219] Iteration 800 (424.284 iter/s, 0.235691s/100 iters), loss = 0.269376
I0428 20:35:30.412864  4624 solver.cpp:238]     Train net output #0: loss = 0.269376 (* 1 = 0.269376 loss)
I0428 20:35:30.412871  4624 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:35:30.648613  4624 solver.cpp:219] Iteration 900 (424.236 iter/s, 0.235718s/100 iters), loss = 0.143482
I0428 20:35:30.648643  4624 solver.cpp:238]     Train net output #0: loss = 0.143482 (* 1 = 0.143482 loss)
I0428 20:35:30.648650  4624 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:35:30.726533  4630 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:30.881536  4624 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:35:30.886139  4624 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:35:30.888206  4624 solver.cpp:311] Iteration 1000, loss = 0.0697777
I0428 20:35:30.888222  4624 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:35:30.996232  4631 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:35:30.998936  4624 solver.cpp:398]     Test net output #0: accuracy = 0.9729
I0428 20:35:30.998971  4624 solver.cpp:398]     Test net output #1: loss = 0.0836871 (* 1 = 0.0836871 loss)
I0428 20:35:30.998977  4624 solver.cpp:316] Optimization Done.
I0428 20:35:30.998981  4624 caffe.cpp:259] Optimization Done.
