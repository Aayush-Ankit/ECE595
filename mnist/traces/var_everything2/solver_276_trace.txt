I0428 19:38:31.250325 24039 caffe.cpp:218] Using GPUs 0
I0428 19:38:31.289118 24039 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:38:31.801920 24039 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test276.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:38:31.802095 24039 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test276.prototxt
I0428 19:38:31.802480 24039 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:38:31.802505 24039 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:38:31.802608 24039 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:31.802718 24039 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:31.802853 24039 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:38:31.802886 24039 net.cpp:86] Creating Layer mnist
I0428 19:38:31.802901 24039 net.cpp:382] mnist -> data
I0428 19:38:31.802932 24039 net.cpp:382] mnist -> label
I0428 19:38:31.804163 24039 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:38:31.806639 24039 net.cpp:124] Setting up mnist
I0428 19:38:31.806660 24039 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:38:31.806670 24039 net.cpp:131] Top shape: 64 (64)
I0428 19:38:31.806676 24039 net.cpp:139] Memory required for data: 200960
I0428 19:38:31.806687 24039 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:31.806711 24039 net.cpp:86] Creating Layer conv0
I0428 19:38:31.806721 24039 net.cpp:408] conv0 <- data
I0428 19:38:31.806741 24039 net.cpp:382] conv0 -> conv0
I0428 19:38:32.075026 24039 net.cpp:124] Setting up conv0
I0428 19:38:32.075055 24039 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:38:32.075060 24039 net.cpp:139] Memory required for data: 495872
I0428 19:38:32.075135 24039 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:32.075155 24039 net.cpp:86] Creating Layer pool0
I0428 19:38:32.075161 24039 net.cpp:408] pool0 <- conv0
I0428 19:38:32.075171 24039 net.cpp:382] pool0 -> pool0
I0428 19:38:32.075227 24039 net.cpp:124] Setting up pool0
I0428 19:38:32.075237 24039 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:38:32.075242 24039 net.cpp:139] Memory required for data: 569600
I0428 19:38:32.075247 24039 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:32.075263 24039 net.cpp:86] Creating Layer conv1
I0428 19:38:32.075269 24039 net.cpp:408] conv1 <- pool0
I0428 19:38:32.075278 24039 net.cpp:382] conv1 -> conv1
I0428 19:38:32.077122 24039 net.cpp:124] Setting up conv1
I0428 19:38:32.077149 24039 net.cpp:131] Top shape: 64 2 8 8 (8192)
I0428 19:38:32.077155 24039 net.cpp:139] Memory required for data: 602368
I0428 19:38:32.077167 24039 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:32.077178 24039 net.cpp:86] Creating Layer pool1
I0428 19:38:32.077184 24039 net.cpp:408] pool1 <- conv1
I0428 19:38:32.077193 24039 net.cpp:382] pool1 -> pool1
I0428 19:38:32.077237 24039 net.cpp:124] Setting up pool1
I0428 19:38:32.077245 24039 net.cpp:131] Top shape: 64 2 4 4 (2048)
I0428 19:38:32.077250 24039 net.cpp:139] Memory required for data: 610560
I0428 19:38:32.077255 24039 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:32.077277 24039 net.cpp:86] Creating Layer ip1
I0428 19:38:32.077287 24039 net.cpp:408] ip1 <- pool1
I0428 19:38:32.077296 24039 net.cpp:382] ip1 -> ip1
I0428 19:38:32.077397 24039 net.cpp:124] Setting up ip1
I0428 19:38:32.077406 24039 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:32.077411 24039 net.cpp:139] Memory required for data: 613120
I0428 19:38:32.077422 24039 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:32.077431 24039 net.cpp:86] Creating Layer relu1
I0428 19:38:32.077438 24039 net.cpp:408] relu1 <- ip1
I0428 19:38:32.077445 24039 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:32.077631 24039 net.cpp:124] Setting up relu1
I0428 19:38:32.077642 24039 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:32.077646 24039 net.cpp:139] Memory required for data: 615680
I0428 19:38:32.077651 24039 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:32.077661 24039 net.cpp:86] Creating Layer ip2
I0428 19:38:32.077666 24039 net.cpp:408] ip2 <- ip1
I0428 19:38:32.077674 24039 net.cpp:382] ip2 -> ip2
I0428 19:38:32.077771 24039 net.cpp:124] Setting up ip2
I0428 19:38:32.077780 24039 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:32.077785 24039 net.cpp:139] Memory required for data: 618240
I0428 19:38:32.077795 24039 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:32.077803 24039 net.cpp:86] Creating Layer relu2
I0428 19:38:32.077811 24039 net.cpp:408] relu2 <- ip2
I0428 19:38:32.077817 24039 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:32.078523 24039 net.cpp:124] Setting up relu2
I0428 19:38:32.078537 24039 net.cpp:131] Top shape: 64 10 (640)
I0428 19:38:32.078542 24039 net.cpp:139] Memory required for data: 620800
I0428 19:38:32.078547 24039 layer_factory.hpp:77] Creating layer loss
I0428 19:38:32.078557 24039 net.cpp:86] Creating Layer loss
I0428 19:38:32.078562 24039 net.cpp:408] loss <- ip2
I0428 19:38:32.078569 24039 net.cpp:408] loss <- label
I0428 19:38:32.078578 24039 net.cpp:382] loss -> loss
I0428 19:38:32.078599 24039 layer_factory.hpp:77] Creating layer loss
I0428 19:38:32.078855 24039 net.cpp:124] Setting up loss
I0428 19:38:32.078866 24039 net.cpp:131] Top shape: (1)
I0428 19:38:32.078871 24039 net.cpp:134]     with loss weight 1
I0428 19:38:32.078889 24039 net.cpp:139] Memory required for data: 620804
I0428 19:38:32.078896 24039 net.cpp:200] loss needs backward computation.
I0428 19:38:32.078902 24039 net.cpp:200] relu2 needs backward computation.
I0428 19:38:32.078907 24039 net.cpp:200] ip2 needs backward computation.
I0428 19:38:32.078912 24039 net.cpp:200] relu1 needs backward computation.
I0428 19:38:32.078917 24039 net.cpp:200] ip1 needs backward computation.
I0428 19:38:32.078922 24039 net.cpp:200] pool1 needs backward computation.
I0428 19:38:32.078938 24039 net.cpp:200] conv1 needs backward computation.
I0428 19:38:32.078944 24039 net.cpp:200] pool0 needs backward computation.
I0428 19:38:32.078949 24039 net.cpp:200] conv0 needs backward computation.
I0428 19:38:32.078955 24039 net.cpp:202] mnist does not need backward computation.
I0428 19:38:32.078960 24039 net.cpp:244] This network produces output loss
I0428 19:38:32.078972 24039 net.cpp:257] Network initialization done.
I0428 19:38:32.079254 24039 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test276.prototxt
I0428 19:38:32.079284 24039 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:38:32.079371 24039 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:38:32.079479 24039 layer_factory.hpp:77] Creating layer mnist
I0428 19:38:32.079540 24039 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:38:32.079556 24039 net.cpp:86] Creating Layer mnist
I0428 19:38:32.079565 24039 net.cpp:382] mnist -> data
I0428 19:38:32.079576 24039 net.cpp:382] mnist -> label
I0428 19:38:32.079694 24039 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:38:32.081715 24039 net.cpp:124] Setting up mnist
I0428 19:38:32.081758 24039 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:38:32.081765 24039 net.cpp:131] Top shape: 100 (100)
I0428 19:38:32.081770 24039 net.cpp:139] Memory required for data: 314000
I0428 19:38:32.081776 24039 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:38:32.081786 24039 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:38:32.081792 24039 net.cpp:408] label_mnist_1_split <- label
I0428 19:38:32.081800 24039 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:38:32.081810 24039 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:38:32.081931 24039 net.cpp:124] Setting up label_mnist_1_split
I0428 19:38:32.081964 24039 net.cpp:131] Top shape: 100 (100)
I0428 19:38:32.081970 24039 net.cpp:131] Top shape: 100 (100)
I0428 19:38:32.081975 24039 net.cpp:139] Memory required for data: 314800
I0428 19:38:32.081980 24039 layer_factory.hpp:77] Creating layer conv0
I0428 19:38:32.081992 24039 net.cpp:86] Creating Layer conv0
I0428 19:38:32.082000 24039 net.cpp:408] conv0 <- data
I0428 19:38:32.082008 24039 net.cpp:382] conv0 -> conv0
I0428 19:38:32.083503 24039 net.cpp:124] Setting up conv0
I0428 19:38:32.083519 24039 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:38:32.083525 24039 net.cpp:139] Memory required for data: 775600
I0428 19:38:32.083539 24039 layer_factory.hpp:77] Creating layer pool0
I0428 19:38:32.083549 24039 net.cpp:86] Creating Layer pool0
I0428 19:38:32.083554 24039 net.cpp:408] pool0 <- conv0
I0428 19:38:32.083562 24039 net.cpp:382] pool0 -> pool0
I0428 19:38:32.083606 24039 net.cpp:124] Setting up pool0
I0428 19:38:32.083613 24039 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:38:32.083619 24039 net.cpp:139] Memory required for data: 890800
I0428 19:38:32.083638 24039 layer_factory.hpp:77] Creating layer conv1
I0428 19:38:32.083652 24039 net.cpp:86] Creating Layer conv1
I0428 19:38:32.083657 24039 net.cpp:408] conv1 <- pool0
I0428 19:38:32.083667 24039 net.cpp:382] conv1 -> conv1
I0428 19:38:32.085234 24039 net.cpp:124] Setting up conv1
I0428 19:38:32.085250 24039 net.cpp:131] Top shape: 100 2 8 8 (12800)
I0428 19:38:32.085256 24039 net.cpp:139] Memory required for data: 942000
I0428 19:38:32.085270 24039 layer_factory.hpp:77] Creating layer pool1
I0428 19:38:32.085279 24039 net.cpp:86] Creating Layer pool1
I0428 19:38:32.085285 24039 net.cpp:408] pool1 <- conv1
I0428 19:38:32.085294 24039 net.cpp:382] pool1 -> pool1
I0428 19:38:32.085342 24039 net.cpp:124] Setting up pool1
I0428 19:38:32.085350 24039 net.cpp:131] Top shape: 100 2 4 4 (3200)
I0428 19:38:32.085356 24039 net.cpp:139] Memory required for data: 954800
I0428 19:38:32.085361 24039 layer_factory.hpp:77] Creating layer ip1
I0428 19:38:32.085371 24039 net.cpp:86] Creating Layer ip1
I0428 19:38:32.085376 24039 net.cpp:408] ip1 <- pool1
I0428 19:38:32.085384 24039 net.cpp:382] ip1 -> ip1
I0428 19:38:32.085487 24039 net.cpp:124] Setting up ip1
I0428 19:38:32.085497 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.085503 24039 net.cpp:139] Memory required for data: 958800
I0428 19:38:32.085515 24039 layer_factory.hpp:77] Creating layer relu1
I0428 19:38:32.085523 24039 net.cpp:86] Creating Layer relu1
I0428 19:38:32.085530 24039 net.cpp:408] relu1 <- ip1
I0428 19:38:32.085541 24039 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:38:32.085707 24039 net.cpp:124] Setting up relu1
I0428 19:38:32.085718 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.085723 24039 net.cpp:139] Memory required for data: 962800
I0428 19:38:32.085728 24039 layer_factory.hpp:77] Creating layer ip2
I0428 19:38:32.085739 24039 net.cpp:86] Creating Layer ip2
I0428 19:38:32.085746 24039 net.cpp:408] ip2 <- ip1
I0428 19:38:32.085753 24039 net.cpp:382] ip2 -> ip2
I0428 19:38:32.085857 24039 net.cpp:124] Setting up ip2
I0428 19:38:32.085866 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.085871 24039 net.cpp:139] Memory required for data: 966800
I0428 19:38:32.085880 24039 layer_factory.hpp:77] Creating layer relu2
I0428 19:38:32.085891 24039 net.cpp:86] Creating Layer relu2
I0428 19:38:32.085896 24039 net.cpp:408] relu2 <- ip2
I0428 19:38:32.085903 24039 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:38:32.086086 24039 net.cpp:124] Setting up relu2
I0428 19:38:32.086107 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.086112 24039 net.cpp:139] Memory required for data: 970800
I0428 19:38:32.086117 24039 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:38:32.086127 24039 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:38:32.086133 24039 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:38:32.086139 24039 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:38:32.086154 24039 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:38:32.086215 24039 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:38:32.086223 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.086230 24039 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:38:32.086235 24039 net.cpp:139] Memory required for data: 978800
I0428 19:38:32.086239 24039 layer_factory.hpp:77] Creating layer accuracy
I0428 19:38:32.086249 24039 net.cpp:86] Creating Layer accuracy
I0428 19:38:32.086256 24039 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:38:32.086262 24039 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:38:32.086269 24039 net.cpp:382] accuracy -> accuracy
I0428 19:38:32.086280 24039 net.cpp:124] Setting up accuracy
I0428 19:38:32.086288 24039 net.cpp:131] Top shape: (1)
I0428 19:38:32.086308 24039 net.cpp:139] Memory required for data: 978804
I0428 19:38:32.086313 24039 layer_factory.hpp:77] Creating layer loss
I0428 19:38:32.086319 24039 net.cpp:86] Creating Layer loss
I0428 19:38:32.086325 24039 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:38:32.086330 24039 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:38:32.086339 24039 net.cpp:382] loss -> loss
I0428 19:38:32.086349 24039 layer_factory.hpp:77] Creating layer loss
I0428 19:38:32.086597 24039 net.cpp:124] Setting up loss
I0428 19:38:32.086607 24039 net.cpp:131] Top shape: (1)
I0428 19:38:32.086613 24039 net.cpp:134]     with loss weight 1
I0428 19:38:32.086622 24039 net.cpp:139] Memory required for data: 978808
I0428 19:38:32.086632 24039 net.cpp:200] loss needs backward computation.
I0428 19:38:32.086639 24039 net.cpp:202] accuracy does not need backward computation.
I0428 19:38:32.086645 24039 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:38:32.086652 24039 net.cpp:200] relu2 needs backward computation.
I0428 19:38:32.086657 24039 net.cpp:200] ip2 needs backward computation.
I0428 19:38:32.086661 24039 net.cpp:200] relu1 needs backward computation.
I0428 19:38:32.086666 24039 net.cpp:200] ip1 needs backward computation.
I0428 19:38:32.086671 24039 net.cpp:200] pool1 needs backward computation.
I0428 19:38:32.086678 24039 net.cpp:200] conv1 needs backward computation.
I0428 19:38:32.086683 24039 net.cpp:200] pool0 needs backward computation.
I0428 19:38:32.086688 24039 net.cpp:200] conv0 needs backward computation.
I0428 19:38:32.086694 24039 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:38:32.086700 24039 net.cpp:202] mnist does not need backward computation.
I0428 19:38:32.086705 24039 net.cpp:244] This network produces output accuracy
I0428 19:38:32.086710 24039 net.cpp:244] This network produces output loss
I0428 19:38:32.086729 24039 net.cpp:257] Network initialization done.
I0428 19:38:32.086772 24039 solver.cpp:56] Solver scaffolding done.
I0428 19:38:32.087040 24039 caffe.cpp:248] Starting Optimization
I0428 19:38:32.087047 24039 solver.cpp:273] Solving LeNet
I0428 19:38:32.087054 24039 solver.cpp:274] Learning Rate Policy: inv
I0428 19:38:32.087893 24039 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:38:32.090028 24039 blocking_queue.cpp:49] Waiting for data
I0428 19:38:32.162997 24046 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:32.163468 24039 solver.cpp:398]     Test net output #0: accuracy = 0.0819
I0428 19:38:32.163496 24039 solver.cpp:398]     Test net output #1: loss = 2.35743 (* 1 = 2.35743 loss)
I0428 19:38:32.165565 24039 solver.cpp:219] Iteration 0 (0 iter/s, 0.0784631s/100 iters), loss = 2.32622
I0428 19:38:32.165603 24039 solver.cpp:238]     Train net output #0: loss = 2.32622 (* 1 = 2.32622 loss)
I0428 19:38:32.165626 24039 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:38:32.235057 24039 solver.cpp:219] Iteration 100 (1439.98 iter/s, 0.0694456s/100 iters), loss = 1.06384
I0428 19:38:32.235088 24039 solver.cpp:238]     Train net output #0: loss = 1.06384 (* 1 = 1.06384 loss)
I0428 19:38:32.235100 24039 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:38:32.296596 24039 solver.cpp:219] Iteration 200 (1626.33 iter/s, 0.0614881s/100 iters), loss = 0.900782
I0428 19:38:32.296633 24039 solver.cpp:238]     Train net output #0: loss = 0.900782 (* 1 = 0.900782 loss)
I0428 19:38:32.296658 24039 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:38:32.355147 24039 solver.cpp:219] Iteration 300 (1709.12 iter/s, 0.0585095s/100 iters), loss = 0.500259
I0428 19:38:32.355175 24039 solver.cpp:238]     Train net output #0: loss = 0.500259 (* 1 = 0.500259 loss)
I0428 19:38:32.355201 24039 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:38:32.415253 24039 solver.cpp:219] Iteration 400 (1664.67 iter/s, 0.0600719s/100 iters), loss = 0.539716
I0428 19:38:32.415280 24039 solver.cpp:238]     Train net output #0: loss = 0.539716 (* 1 = 0.539716 loss)
I0428 19:38:32.415305 24039 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:38:32.475064 24039 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:38:32.550217 24046 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:32.550616 24039 solver.cpp:398]     Test net output #0: accuracy = 0.8337
I0428 19:38:32.550642 24039 solver.cpp:398]     Test net output #1: loss = 0.530644 (* 1 = 0.530644 loss)
I0428 19:38:32.551350 24039 solver.cpp:219] Iteration 500 (734.971 iter/s, 0.13606s/100 iters), loss = 0.604439
I0428 19:38:32.551376 24039 solver.cpp:238]     Train net output #0: loss = 0.604439 (* 1 = 0.604439 loss)
I0428 19:38:32.551386 24039 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:38:32.611868 24039 solver.cpp:219] Iteration 600 (1653.29 iter/s, 0.0604856s/100 iters), loss = 0.401339
I0428 19:38:32.611896 24039 solver.cpp:238]     Train net output #0: loss = 0.401339 (* 1 = 0.401339 loss)
I0428 19:38:32.611907 24039 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:38:32.672849 24039 solver.cpp:219] Iteration 700 (1640.78 iter/s, 0.0609467s/100 iters), loss = 0.574755
I0428 19:38:32.672878 24039 solver.cpp:238]     Train net output #0: loss = 0.574755 (* 1 = 0.574755 loss)
I0428 19:38:32.672902 24039 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:38:32.740058 24039 solver.cpp:219] Iteration 800 (1488.66 iter/s, 0.0671744s/100 iters), loss = 0.47138
I0428 19:38:32.740089 24039 solver.cpp:238]     Train net output #0: loss = 0.47138 (* 1 = 0.47138 loss)
I0428 19:38:32.740109 24039 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:38:32.805583 24039 solver.cpp:219] Iteration 900 (1527.05 iter/s, 0.0654858s/100 iters), loss = 0.44697
I0428 19:38:32.805611 24039 solver.cpp:238]     Train net output #0: loss = 0.44697 (* 1 = 0.44697 loss)
I0428 19:38:32.805630 24039 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:38:32.827353 24045 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:32.867846 24039 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:38:32.868371 24039 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:38:32.868713 24039 solver.cpp:311] Iteration 1000, loss = 0.27988
I0428 19:38:32.868729 24039 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:38:32.929002 24046 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:38:32.929510 24039 solver.cpp:398]     Test net output #0: accuracy = 0.9157
I0428 19:38:32.929546 24039 solver.cpp:398]     Test net output #1: loss = 0.276297 (* 1 = 0.276297 loss)
I0428 19:38:32.929553 24039 solver.cpp:316] Optimization Done.
I0428 19:38:32.929558 24039 caffe.cpp:259] Optimization Done.
