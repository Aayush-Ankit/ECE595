I0428 19:54:03.742946 27927 caffe.cpp:218] Using GPUs 0
I0428 19:54:03.779959 27927 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:54:04.292938 27927 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test703.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:54:04.293074 27927 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test703.prototxt
I0428 19:54:04.293416 27927 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:54:04.293432 27927 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:54:04.293514 27927 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:54:04.293583 27927 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:04.293687 27927 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:54:04.293711 27927 net.cpp:86] Creating Layer mnist
I0428 19:54:04.293720 27927 net.cpp:382] mnist -> data
I0428 19:54:04.293741 27927 net.cpp:382] mnist -> label
I0428 19:54:04.294839 27927 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:54:04.297518 27927 net.cpp:124] Setting up mnist
I0428 19:54:04.297540 27927 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:54:04.297546 27927 net.cpp:131] Top shape: 64 (64)
I0428 19:54:04.297550 27927 net.cpp:139] Memory required for data: 200960
I0428 19:54:04.297556 27927 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:04.297605 27927 net.cpp:86] Creating Layer conv0
I0428 19:54:04.297611 27927 net.cpp:408] conv0 <- data
I0428 19:54:04.297631 27927 net.cpp:382] conv0 -> conv0
I0428 19:54:04.582048 27927 net.cpp:124] Setting up conv0
I0428 19:54:04.582075 27927 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:54:04.582079 27927 net.cpp:139] Memory required for data: 938240
I0428 19:54:04.582095 27927 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:04.582108 27927 net.cpp:86] Creating Layer pool0
I0428 19:54:04.582111 27927 net.cpp:408] pool0 <- conv0
I0428 19:54:04.582118 27927 net.cpp:382] pool0 -> pool0
I0428 19:54:04.582164 27927 net.cpp:124] Setting up pool0
I0428 19:54:04.582170 27927 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:54:04.582186 27927 net.cpp:139] Memory required for data: 1122560
I0428 19:54:04.582190 27927 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:04.582201 27927 net.cpp:86] Creating Layer conv1
I0428 19:54:04.582203 27927 net.cpp:408] conv1 <- pool0
I0428 19:54:04.582208 27927 net.cpp:382] conv1 -> conv1
I0428 19:54:04.585026 27927 net.cpp:124] Setting up conv1
I0428 19:54:04.585041 27927 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:54:04.585045 27927 net.cpp:139] Memory required for data: 2760960
I0428 19:54:04.585054 27927 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:04.585062 27927 net.cpp:86] Creating Layer pool1
I0428 19:54:04.585065 27927 net.cpp:408] pool1 <- conv1
I0428 19:54:04.585070 27927 net.cpp:382] pool1 -> pool1
I0428 19:54:04.585106 27927 net.cpp:124] Setting up pool1
I0428 19:54:04.585113 27927 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:54:04.585115 27927 net.cpp:139] Memory required for data: 3170560
I0428 19:54:04.585119 27927 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:04.585124 27927 net.cpp:86] Creating Layer ip1
I0428 19:54:04.585127 27927 net.cpp:408] ip1 <- pool1
I0428 19:54:04.585132 27927 net.cpp:382] ip1 -> ip1
I0428 19:54:04.585361 27927 net.cpp:124] Setting up ip1
I0428 19:54:04.585369 27927 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:04.585372 27927 net.cpp:139] Memory required for data: 3173120
I0428 19:54:04.585378 27927 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:04.585384 27927 net.cpp:86] Creating Layer relu1
I0428 19:54:04.585387 27927 net.cpp:408] relu1 <- ip1
I0428 19:54:04.585391 27927 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:04.585541 27927 net.cpp:124] Setting up relu1
I0428 19:54:04.585549 27927 net.cpp:131] Top shape: 64 10 (640)
I0428 19:54:04.585552 27927 net.cpp:139] Memory required for data: 3175680
I0428 19:54:04.585556 27927 layer_factory.hpp:77] Creating layer loss
I0428 19:54:04.585561 27927 net.cpp:86] Creating Layer loss
I0428 19:54:04.585563 27927 net.cpp:408] loss <- ip1
I0428 19:54:04.585567 27927 net.cpp:408] loss <- label
I0428 19:54:04.585572 27927 net.cpp:382] loss -> loss
I0428 19:54:04.585584 27927 layer_factory.hpp:77] Creating layer loss
I0428 19:54:04.586401 27927 net.cpp:124] Setting up loss
I0428 19:54:04.586414 27927 net.cpp:131] Top shape: (1)
I0428 19:54:04.586432 27927 net.cpp:134]     with loss weight 1
I0428 19:54:04.586447 27927 net.cpp:139] Memory required for data: 3175684
I0428 19:54:04.586450 27927 net.cpp:200] loss needs backward computation.
I0428 19:54:04.586454 27927 net.cpp:200] relu1 needs backward computation.
I0428 19:54:04.586457 27927 net.cpp:200] ip1 needs backward computation.
I0428 19:54:04.586460 27927 net.cpp:200] pool1 needs backward computation.
I0428 19:54:04.586463 27927 net.cpp:200] conv1 needs backward computation.
I0428 19:54:04.586467 27927 net.cpp:200] pool0 needs backward computation.
I0428 19:54:04.586469 27927 net.cpp:200] conv0 needs backward computation.
I0428 19:54:04.586472 27927 net.cpp:202] mnist does not need backward computation.
I0428 19:54:04.586475 27927 net.cpp:244] This network produces output loss
I0428 19:54:04.586483 27927 net.cpp:257] Network initialization done.
I0428 19:54:04.586768 27927 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test703.prototxt
I0428 19:54:04.586793 27927 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:54:04.586868 27927 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 19:54:04.586951 27927 layer_factory.hpp:77] Creating layer mnist
I0428 19:54:04.586997 27927 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:54:04.587008 27927 net.cpp:86] Creating Layer mnist
I0428 19:54:04.587013 27927 net.cpp:382] mnist -> data
I0428 19:54:04.587019 27927 net.cpp:382] mnist -> label
I0428 19:54:04.587095 27927 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:54:04.589314 27927 net.cpp:124] Setting up mnist
I0428 19:54:04.589329 27927 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:54:04.589335 27927 net.cpp:131] Top shape: 100 (100)
I0428 19:54:04.589339 27927 net.cpp:139] Memory required for data: 314000
I0428 19:54:04.589342 27927 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:54:04.589349 27927 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:54:04.589352 27927 net.cpp:408] label_mnist_1_split <- label
I0428 19:54:04.589357 27927 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:54:04.589365 27927 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:54:04.589426 27927 net.cpp:124] Setting up label_mnist_1_split
I0428 19:54:04.589431 27927 net.cpp:131] Top shape: 100 (100)
I0428 19:54:04.589434 27927 net.cpp:131] Top shape: 100 (100)
I0428 19:54:04.589437 27927 net.cpp:139] Memory required for data: 314800
I0428 19:54:04.589440 27927 layer_factory.hpp:77] Creating layer conv0
I0428 19:54:04.589448 27927 net.cpp:86] Creating Layer conv0
I0428 19:54:04.589452 27927 net.cpp:408] conv0 <- data
I0428 19:54:04.589457 27927 net.cpp:382] conv0 -> conv0
I0428 19:54:04.590451 27927 net.cpp:124] Setting up conv0
I0428 19:54:04.590461 27927 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:54:04.590466 27927 net.cpp:139] Memory required for data: 1466800
I0428 19:54:04.590473 27927 layer_factory.hpp:77] Creating layer pool0
I0428 19:54:04.590497 27927 net.cpp:86] Creating Layer pool0
I0428 19:54:04.590500 27927 net.cpp:408] pool0 <- conv0
I0428 19:54:04.590504 27927 net.cpp:382] pool0 -> pool0
I0428 19:54:04.590541 27927 net.cpp:124] Setting up pool0
I0428 19:54:04.590546 27927 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:54:04.590549 27927 net.cpp:139] Memory required for data: 1754800
I0428 19:54:04.590551 27927 layer_factory.hpp:77] Creating layer conv1
I0428 19:54:04.590560 27927 net.cpp:86] Creating Layer conv1
I0428 19:54:04.590564 27927 net.cpp:408] conv1 <- pool0
I0428 19:54:04.590569 27927 net.cpp:382] conv1 -> conv1
I0428 19:54:04.592278 27927 net.cpp:124] Setting up conv1
I0428 19:54:04.592289 27927 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:54:04.592293 27927 net.cpp:139] Memory required for data: 4314800
I0428 19:54:04.592319 27927 layer_factory.hpp:77] Creating layer pool1
I0428 19:54:04.592324 27927 net.cpp:86] Creating Layer pool1
I0428 19:54:04.592339 27927 net.cpp:408] pool1 <- conv1
I0428 19:54:04.592345 27927 net.cpp:382] pool1 -> pool1
I0428 19:54:04.592391 27927 net.cpp:124] Setting up pool1
I0428 19:54:04.592396 27927 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:54:04.592406 27927 net.cpp:139] Memory required for data: 4954800
I0428 19:54:04.592408 27927 layer_factory.hpp:77] Creating layer ip1
I0428 19:54:04.592417 27927 net.cpp:86] Creating Layer ip1
I0428 19:54:04.592424 27927 net.cpp:408] ip1 <- pool1
I0428 19:54:04.592430 27927 net.cpp:382] ip1 -> ip1
I0428 19:54:04.592633 27927 net.cpp:124] Setting up ip1
I0428 19:54:04.592641 27927 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:04.592645 27927 net.cpp:139] Memory required for data: 4958800
I0428 19:54:04.592653 27927 layer_factory.hpp:77] Creating layer relu1
I0428 19:54:04.592658 27927 net.cpp:86] Creating Layer relu1
I0428 19:54:04.592666 27927 net.cpp:408] relu1 <- ip1
I0428 19:54:04.592671 27927 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:54:04.593649 27927 net.cpp:124] Setting up relu1
I0428 19:54:04.593662 27927 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:04.593664 27927 net.cpp:139] Memory required for data: 4962800
I0428 19:54:04.593668 27927 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 19:54:04.593675 27927 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 19:54:04.593678 27927 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 19:54:04.593683 27927 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 19:54:04.593689 27927 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 19:54:04.593767 27927 net.cpp:124] Setting up ip1_relu1_0_split
I0428 19:54:04.593775 27927 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:04.593777 27927 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:54:04.593780 27927 net.cpp:139] Memory required for data: 4970800
I0428 19:54:04.593783 27927 layer_factory.hpp:77] Creating layer accuracy
I0428 19:54:04.593787 27927 net.cpp:86] Creating Layer accuracy
I0428 19:54:04.593791 27927 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 19:54:04.593794 27927 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:54:04.593799 27927 net.cpp:382] accuracy -> accuracy
I0428 19:54:04.593806 27927 net.cpp:124] Setting up accuracy
I0428 19:54:04.593816 27927 net.cpp:131] Top shape: (1)
I0428 19:54:04.593818 27927 net.cpp:139] Memory required for data: 4970804
I0428 19:54:04.593821 27927 layer_factory.hpp:77] Creating layer loss
I0428 19:54:04.593825 27927 net.cpp:86] Creating Layer loss
I0428 19:54:04.593832 27927 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 19:54:04.593837 27927 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:54:04.593840 27927 net.cpp:382] loss -> loss
I0428 19:54:04.593847 27927 layer_factory.hpp:77] Creating layer loss
I0428 19:54:04.594110 27927 net.cpp:124] Setting up loss
I0428 19:54:04.594117 27927 net.cpp:131] Top shape: (1)
I0428 19:54:04.594121 27927 net.cpp:134]     with loss weight 1
I0428 19:54:04.594127 27927 net.cpp:139] Memory required for data: 4970808
I0428 19:54:04.594137 27927 net.cpp:200] loss needs backward computation.
I0428 19:54:04.594141 27927 net.cpp:202] accuracy does not need backward computation.
I0428 19:54:04.594144 27927 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 19:54:04.594147 27927 net.cpp:200] relu1 needs backward computation.
I0428 19:54:04.594151 27927 net.cpp:200] ip1 needs backward computation.
I0428 19:54:04.594154 27927 net.cpp:200] pool1 needs backward computation.
I0428 19:54:04.594157 27927 net.cpp:200] conv1 needs backward computation.
I0428 19:54:04.594161 27927 net.cpp:200] pool0 needs backward computation.
I0428 19:54:04.594169 27927 net.cpp:200] conv0 needs backward computation.
I0428 19:54:04.594172 27927 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:54:04.594177 27927 net.cpp:202] mnist does not need backward computation.
I0428 19:54:04.594179 27927 net.cpp:244] This network produces output accuracy
I0428 19:54:04.594188 27927 net.cpp:244] This network produces output loss
I0428 19:54:04.594209 27927 net.cpp:257] Network initialization done.
I0428 19:54:04.594249 27927 solver.cpp:56] Solver scaffolding done.
I0428 19:54:04.594492 27927 caffe.cpp:248] Starting Optimization
I0428 19:54:04.594499 27927 solver.cpp:273] Solving LeNet
I0428 19:54:04.594502 27927 solver.cpp:274] Learning Rate Policy: inv
I0428 19:54:04.594604 27927 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:54:04.599212 27927 blocking_queue.cpp:49] Waiting for data
I0428 19:54:04.671751 27934 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:04.672317 27927 solver.cpp:398]     Test net output #0: accuracy = 0.1315
I0428 19:54:04.672338 27927 solver.cpp:398]     Test net output #1: loss = 2.30466 (* 1 = 2.30466 loss)
I0428 19:54:04.675837 27927 solver.cpp:219] Iteration 0 (-2.54329e-31 iter/s, 0.0813095s/100 iters), loss = 2.32238
I0428 19:54:04.675863 27927 solver.cpp:238]     Train net output #0: loss = 2.32238 (* 1 = 2.32238 loss)
I0428 19:54:04.675873 27927 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:54:04.816640 27927 solver.cpp:219] Iteration 100 (710.418 iter/s, 0.140762s/100 iters), loss = 0.597488
I0428 19:54:04.816684 27927 solver.cpp:238]     Train net output #0: loss = 0.597488 (* 1 = 0.597488 loss)
I0428 19:54:04.816690 27927 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:54:04.952721 27927 solver.cpp:219] Iteration 200 (735.159 iter/s, 0.136025s/100 iters), loss = 0.411181
I0428 19:54:04.952765 27927 solver.cpp:238]     Train net output #0: loss = 0.411181 (* 1 = 0.411181 loss)
I0428 19:54:04.952772 27927 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:54:05.098181 27927 solver.cpp:219] Iteration 300 (687.759 iter/s, 0.1454s/100 iters), loss = 0.644517
I0428 19:54:05.098218 27927 solver.cpp:238]     Train net output #0: loss = 0.644517 (* 1 = 0.644517 loss)
I0428 19:54:05.098228 27927 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:54:05.236485 27927 solver.cpp:219] Iteration 400 (723.294 iter/s, 0.138256s/100 iters), loss = 0.75949
I0428 19:54:05.236528 27927 solver.cpp:238]     Train net output #0: loss = 0.75949 (* 1 = 0.75949 loss)
I0428 19:54:05.236534 27927 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:54:05.362077 27927 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:54:05.439049 27934 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:05.439605 27927 solver.cpp:398]     Test net output #0: accuracy = 0.7794
I0428 19:54:05.439626 27927 solver.cpp:398]     Test net output #1: loss = 0.570151 (* 1 = 0.570151 loss)
I0428 19:54:05.441036 27927 solver.cpp:219] Iteration 500 (488.98 iter/s, 0.204507s/100 iters), loss = 0.75621
I0428 19:54:05.441077 27927 solver.cpp:238]     Train net output #0: loss = 0.75621 (* 1 = 0.75621 loss)
I0428 19:54:05.441085 27927 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:54:05.581779 27927 solver.cpp:219] Iteration 600 (710.781 iter/s, 0.14069s/100 iters), loss = 0.395272
I0428 19:54:05.581820 27927 solver.cpp:238]     Train net output #0: loss = 0.395272 (* 1 = 0.395272 loss)
I0428 19:54:05.581825 27927 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:54:05.714934 27927 solver.cpp:219] Iteration 700 (751.242 iter/s, 0.133113s/100 iters), loss = 0.365018
I0428 19:54:05.714988 27927 solver.cpp:238]     Train net output #0: loss = 0.365018 (* 1 = 0.365018 loss)
I0428 19:54:05.715003 27927 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:54:05.846825 27927 solver.cpp:219] Iteration 800 (758.548 iter/s, 0.131831s/100 iters), loss = 0.473386
I0428 19:54:05.846868 27927 solver.cpp:238]     Train net output #0: loss = 0.473386 (* 1 = 0.473386 loss)
I0428 19:54:05.846875 27927 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:54:05.980823 27927 solver.cpp:219] Iteration 900 (746.509 iter/s, 0.133957s/100 iters), loss = 0.507979
I0428 19:54:05.980865 27927 solver.cpp:238]     Train net output #0: loss = 0.507979 (* 1 = 0.507979 loss)
I0428 19:54:05.980875 27927 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:54:06.025697 27933 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:06.119885 27927 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:54:06.121489 27927 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:54:06.122160 27927 solver.cpp:311] Iteration 1000, loss = 0.374177
I0428 19:54:06.122179 27927 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:54:06.197266 27934 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:54:06.197825 27927 solver.cpp:398]     Test net output #0: accuracy = 0.8819
I0428 19:54:06.197847 27927 solver.cpp:398]     Test net output #1: loss = 0.30798 (* 1 = 0.30798 loss)
I0428 19:54:06.197852 27927 solver.cpp:316] Optimization Done.
I0428 19:54:06.197856 27927 caffe.cpp:259] Optimization Done.
