I0428 19:55:33.894264 28204 caffe.cpp:218] Using GPUs 0
I0428 19:55:33.926605 28204 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:55:34.408349 28204 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test735.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:55:34.408484 28204 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test735.prototxt
I0428 19:55:34.408941 28204 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:55:34.408958 28204 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:55:34.409041 28204 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:34.409107 28204 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:34.409209 28204 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:55:34.409226 28204 net.cpp:86] Creating Layer mnist
I0428 19:55:34.409234 28204 net.cpp:382] mnist -> data
I0428 19:55:34.409251 28204 net.cpp:382] mnist -> label
I0428 19:55:34.410236 28204 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:55:34.412660 28204 net.cpp:124] Setting up mnist
I0428 19:55:34.412691 28204 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:55:34.412710 28204 net.cpp:131] Top shape: 64 (64)
I0428 19:55:34.412714 28204 net.cpp:139] Memory required for data: 200960
I0428 19:55:34.412719 28204 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:34.412751 28204 net.cpp:86] Creating Layer conv0
I0428 19:55:34.412770 28204 net.cpp:408] conv0 <- data
I0428 19:55:34.412782 28204 net.cpp:382] conv0 -> conv0
I0428 19:55:34.639192 28204 net.cpp:124] Setting up conv0
I0428 19:55:34.639233 28204 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:55:34.639238 28204 net.cpp:139] Memory required for data: 938240
I0428 19:55:34.639252 28204 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:34.639266 28204 net.cpp:86] Creating Layer pool0
I0428 19:55:34.639271 28204 net.cpp:408] pool0 <- conv0
I0428 19:55:34.639292 28204 net.cpp:382] pool0 -> pool0
I0428 19:55:34.639348 28204 net.cpp:124] Setting up pool0
I0428 19:55:34.639366 28204 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:55:34.639369 28204 net.cpp:139] Memory required for data: 1122560
I0428 19:55:34.639372 28204 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:34.639385 28204 net.cpp:86] Creating Layer conv1
I0428 19:55:34.639389 28204 net.cpp:408] conv1 <- pool0
I0428 19:55:34.639394 28204 net.cpp:382] conv1 -> conv1
I0428 19:55:34.642398 28204 net.cpp:124] Setting up conv1
I0428 19:55:34.642428 28204 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 19:55:34.642432 28204 net.cpp:139] Memory required for data: 2760960
I0428 19:55:34.642458 28204 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:34.642480 28204 net.cpp:86] Creating Layer pool1
I0428 19:55:34.642483 28204 net.cpp:408] pool1 <- conv1
I0428 19:55:34.642505 28204 net.cpp:382] pool1 -> pool1
I0428 19:55:34.642544 28204 net.cpp:124] Setting up pool1
I0428 19:55:34.642559 28204 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 19:55:34.642561 28204 net.cpp:139] Memory required for data: 3170560
I0428 19:55:34.642565 28204 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:34.642572 28204 net.cpp:86] Creating Layer ip1
I0428 19:55:34.642575 28204 net.cpp:408] ip1 <- pool1
I0428 19:55:34.642580 28204 net.cpp:382] ip1 -> ip1
I0428 19:55:34.644083 28204 net.cpp:124] Setting up ip1
I0428 19:55:34.644096 28204 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:34.644115 28204 net.cpp:139] Memory required for data: 3183360
I0428 19:55:34.644140 28204 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:34.644147 28204 net.cpp:86] Creating Layer relu1
I0428 19:55:34.644151 28204 net.cpp:408] relu1 <- ip1
I0428 19:55:34.644156 28204 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:34.644340 28204 net.cpp:124] Setting up relu1
I0428 19:55:34.644349 28204 net.cpp:131] Top shape: 64 50 (3200)
I0428 19:55:34.644353 28204 net.cpp:139] Memory required for data: 3196160
I0428 19:55:34.644356 28204 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:34.644364 28204 net.cpp:86] Creating Layer ip2
I0428 19:55:34.644367 28204 net.cpp:408] ip2 <- ip1
I0428 19:55:34.644373 28204 net.cpp:382] ip2 -> ip2
I0428 19:55:34.645429 28204 net.cpp:124] Setting up ip2
I0428 19:55:34.645457 28204 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:34.645462 28204 net.cpp:139] Memory required for data: 3202560
I0428 19:55:34.645467 28204 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:34.645475 28204 net.cpp:86] Creating Layer relu2
I0428 19:55:34.645478 28204 net.cpp:408] relu2 <- ip2
I0428 19:55:34.645483 28204 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:34.646364 28204 net.cpp:124] Setting up relu2
I0428 19:55:34.646394 28204 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:55:34.646396 28204 net.cpp:139] Memory required for data: 3208960
I0428 19:55:34.646400 28204 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:34.646407 28204 net.cpp:86] Creating Layer ip3
I0428 19:55:34.646410 28204 net.cpp:408] ip3 <- ip2
I0428 19:55:34.646417 28204 net.cpp:382] ip3 -> ip3
I0428 19:55:34.646538 28204 net.cpp:124] Setting up ip3
I0428 19:55:34.646548 28204 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:34.646550 28204 net.cpp:139] Memory required for data: 3211520
I0428 19:55:34.646559 28204 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:34.646564 28204 net.cpp:86] Creating Layer relu3
I0428 19:55:34.646567 28204 net.cpp:408] relu3 <- ip3
I0428 19:55:34.646574 28204 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:34.646756 28204 net.cpp:124] Setting up relu3
I0428 19:55:34.646765 28204 net.cpp:131] Top shape: 64 10 (640)
I0428 19:55:34.646769 28204 net.cpp:139] Memory required for data: 3214080
I0428 19:55:34.646771 28204 layer_factory.hpp:77] Creating layer loss
I0428 19:55:34.646778 28204 net.cpp:86] Creating Layer loss
I0428 19:55:34.646781 28204 net.cpp:408] loss <- ip3
I0428 19:55:34.646785 28204 net.cpp:408] loss <- label
I0428 19:55:34.646791 28204 net.cpp:382] loss -> loss
I0428 19:55:34.646806 28204 layer_factory.hpp:77] Creating layer loss
I0428 19:55:34.647110 28204 net.cpp:124] Setting up loss
I0428 19:55:34.647119 28204 net.cpp:131] Top shape: (1)
I0428 19:55:34.647137 28204 net.cpp:134]     with loss weight 1
I0428 19:55:34.647151 28204 net.cpp:139] Memory required for data: 3214084
I0428 19:55:34.647156 28204 net.cpp:200] loss needs backward computation.
I0428 19:55:34.647159 28204 net.cpp:200] relu3 needs backward computation.
I0428 19:55:34.647162 28204 net.cpp:200] ip3 needs backward computation.
I0428 19:55:34.647179 28204 net.cpp:200] relu2 needs backward computation.
I0428 19:55:34.647182 28204 net.cpp:200] ip2 needs backward computation.
I0428 19:55:34.647186 28204 net.cpp:200] relu1 needs backward computation.
I0428 19:55:34.647188 28204 net.cpp:200] ip1 needs backward computation.
I0428 19:55:34.647192 28204 net.cpp:200] pool1 needs backward computation.
I0428 19:55:34.647194 28204 net.cpp:200] conv1 needs backward computation.
I0428 19:55:34.647197 28204 net.cpp:200] pool0 needs backward computation.
I0428 19:55:34.647200 28204 net.cpp:200] conv0 needs backward computation.
I0428 19:55:34.647203 28204 net.cpp:202] mnist does not need backward computation.
I0428 19:55:34.647207 28204 net.cpp:244] This network produces output loss
I0428 19:55:34.647217 28204 net.cpp:257] Network initialization done.
I0428 19:55:34.647603 28204 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test735.prototxt
I0428 19:55:34.647647 28204 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:55:34.647747 28204 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 50
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:55:34.647846 28204 layer_factory.hpp:77] Creating layer mnist
I0428 19:55:34.647893 28204 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:55:34.647907 28204 net.cpp:86] Creating Layer mnist
I0428 19:55:34.647910 28204 net.cpp:382] mnist -> data
I0428 19:55:34.647919 28204 net.cpp:382] mnist -> label
I0428 19:55:34.648025 28204 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:55:34.649260 28204 net.cpp:124] Setting up mnist
I0428 19:55:34.649289 28204 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:55:34.649296 28204 net.cpp:131] Top shape: 100 (100)
I0428 19:55:34.649299 28204 net.cpp:139] Memory required for data: 314000
I0428 19:55:34.649303 28204 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:55:34.649310 28204 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:55:34.649333 28204 net.cpp:408] label_mnist_1_split <- label
I0428 19:55:34.649338 28204 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:55:34.649343 28204 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:55:34.649420 28204 net.cpp:124] Setting up label_mnist_1_split
I0428 19:55:34.649427 28204 net.cpp:131] Top shape: 100 (100)
I0428 19:55:34.649431 28204 net.cpp:131] Top shape: 100 (100)
I0428 19:55:34.649435 28204 net.cpp:139] Memory required for data: 314800
I0428 19:55:34.649437 28204 layer_factory.hpp:77] Creating layer conv0
I0428 19:55:34.649446 28204 net.cpp:86] Creating Layer conv0
I0428 19:55:34.649449 28204 net.cpp:408] conv0 <- data
I0428 19:55:34.649456 28204 net.cpp:382] conv0 -> conv0
I0428 19:55:34.651120 28204 net.cpp:124] Setting up conv0
I0428 19:55:34.651151 28204 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:55:34.651154 28204 net.cpp:139] Memory required for data: 1466800
I0428 19:55:34.651165 28204 layer_factory.hpp:77] Creating layer pool0
I0428 19:55:34.651172 28204 net.cpp:86] Creating Layer pool0
I0428 19:55:34.651175 28204 net.cpp:408] pool0 <- conv0
I0428 19:55:34.651180 28204 net.cpp:382] pool0 -> pool0
I0428 19:55:34.651249 28204 net.cpp:124] Setting up pool0
I0428 19:55:34.651257 28204 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:55:34.651260 28204 net.cpp:139] Memory required for data: 1754800
I0428 19:55:34.651263 28204 layer_factory.hpp:77] Creating layer conv1
I0428 19:55:34.651273 28204 net.cpp:86] Creating Layer conv1
I0428 19:55:34.651276 28204 net.cpp:408] conv1 <- pool0
I0428 19:55:34.651283 28204 net.cpp:382] conv1 -> conv1
I0428 19:55:34.653136 28204 net.cpp:124] Setting up conv1
I0428 19:55:34.653165 28204 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 19:55:34.653169 28204 net.cpp:139] Memory required for data: 4314800
I0428 19:55:34.653213 28204 layer_factory.hpp:77] Creating layer pool1
I0428 19:55:34.653218 28204 net.cpp:86] Creating Layer pool1
I0428 19:55:34.653221 28204 net.cpp:408] pool1 <- conv1
I0428 19:55:34.653228 28204 net.cpp:382] pool1 -> pool1
I0428 19:55:34.653264 28204 net.cpp:124] Setting up pool1
I0428 19:55:34.653270 28204 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 19:55:34.653272 28204 net.cpp:139] Memory required for data: 4954800
I0428 19:55:34.653276 28204 layer_factory.hpp:77] Creating layer ip1
I0428 19:55:34.653282 28204 net.cpp:86] Creating Layer ip1
I0428 19:55:34.653285 28204 net.cpp:408] ip1 <- pool1
I0428 19:55:34.653291 28204 net.cpp:382] ip1 -> ip1
I0428 19:55:34.653930 28204 net.cpp:124] Setting up ip1
I0428 19:55:34.653939 28204 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:34.653967 28204 net.cpp:139] Memory required for data: 4974800
I0428 19:55:34.653975 28204 layer_factory.hpp:77] Creating layer relu1
I0428 19:55:34.653981 28204 net.cpp:86] Creating Layer relu1
I0428 19:55:34.653985 28204 net.cpp:408] relu1 <- ip1
I0428 19:55:34.653991 28204 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:55:34.654155 28204 net.cpp:124] Setting up relu1
I0428 19:55:34.654180 28204 net.cpp:131] Top shape: 100 50 (5000)
I0428 19:55:34.654183 28204 net.cpp:139] Memory required for data: 4994800
I0428 19:55:34.654186 28204 layer_factory.hpp:77] Creating layer ip2
I0428 19:55:34.654193 28204 net.cpp:86] Creating Layer ip2
I0428 19:55:34.654196 28204 net.cpp:408] ip2 <- ip1
I0428 19:55:34.654209 28204 net.cpp:382] ip2 -> ip2
I0428 19:55:34.654336 28204 net.cpp:124] Setting up ip2
I0428 19:55:34.654345 28204 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:34.654347 28204 net.cpp:139] Memory required for data: 5004800
I0428 19:55:34.654352 28204 layer_factory.hpp:77] Creating layer relu2
I0428 19:55:34.654357 28204 net.cpp:86] Creating Layer relu2
I0428 19:55:34.654361 28204 net.cpp:408] relu2 <- ip2
I0428 19:55:34.654367 28204 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:55:34.654597 28204 net.cpp:124] Setting up relu2
I0428 19:55:34.654608 28204 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:55:34.654611 28204 net.cpp:139] Memory required for data: 5014800
I0428 19:55:34.654614 28204 layer_factory.hpp:77] Creating layer ip3
I0428 19:55:34.654623 28204 net.cpp:86] Creating Layer ip3
I0428 19:55:34.654625 28204 net.cpp:408] ip3 <- ip2
I0428 19:55:34.654630 28204 net.cpp:382] ip3 -> ip3
I0428 19:55:34.654798 28204 net.cpp:124] Setting up ip3
I0428 19:55:34.654806 28204 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:34.654809 28204 net.cpp:139] Memory required for data: 5018800
I0428 19:55:34.654817 28204 layer_factory.hpp:77] Creating layer relu3
I0428 19:55:34.654824 28204 net.cpp:86] Creating Layer relu3
I0428 19:55:34.654826 28204 net.cpp:408] relu3 <- ip3
I0428 19:55:34.654846 28204 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:55:34.655684 28204 net.cpp:124] Setting up relu3
I0428 19:55:34.655709 28204 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:34.655712 28204 net.cpp:139] Memory required for data: 5022800
I0428 19:55:34.655715 28204 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:55:34.655735 28204 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:55:34.655740 28204 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:55:34.655745 28204 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:55:34.655751 28204 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:55:34.655793 28204 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:55:34.655808 28204 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:34.655812 28204 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:55:34.655815 28204 net.cpp:139] Memory required for data: 5030800
I0428 19:55:34.655818 28204 layer_factory.hpp:77] Creating layer accuracy
I0428 19:55:34.655823 28204 net.cpp:86] Creating Layer accuracy
I0428 19:55:34.655827 28204 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:55:34.655831 28204 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:55:34.655836 28204 net.cpp:382] accuracy -> accuracy
I0428 19:55:34.655844 28204 net.cpp:124] Setting up accuracy
I0428 19:55:34.655848 28204 net.cpp:131] Top shape: (1)
I0428 19:55:34.655851 28204 net.cpp:139] Memory required for data: 5030804
I0428 19:55:34.655854 28204 layer_factory.hpp:77] Creating layer loss
I0428 19:55:34.655860 28204 net.cpp:86] Creating Layer loss
I0428 19:55:34.655864 28204 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:55:34.655867 28204 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:55:34.655871 28204 net.cpp:382] loss -> loss
I0428 19:55:34.655895 28204 layer_factory.hpp:77] Creating layer loss
I0428 19:55:34.656154 28204 net.cpp:124] Setting up loss
I0428 19:55:34.656163 28204 net.cpp:131] Top shape: (1)
I0428 19:55:34.656167 28204 net.cpp:134]     with loss weight 1
I0428 19:55:34.656182 28204 net.cpp:139] Memory required for data: 5030808
I0428 19:55:34.656185 28204 net.cpp:200] loss needs backward computation.
I0428 19:55:34.656189 28204 net.cpp:202] accuracy does not need backward computation.
I0428 19:55:34.656193 28204 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:55:34.656196 28204 net.cpp:200] relu3 needs backward computation.
I0428 19:55:34.656198 28204 net.cpp:200] ip3 needs backward computation.
I0428 19:55:34.656201 28204 net.cpp:200] relu2 needs backward computation.
I0428 19:55:34.656204 28204 net.cpp:200] ip2 needs backward computation.
I0428 19:55:34.656208 28204 net.cpp:200] relu1 needs backward computation.
I0428 19:55:34.656209 28204 net.cpp:200] ip1 needs backward computation.
I0428 19:55:34.656213 28204 net.cpp:200] pool1 needs backward computation.
I0428 19:55:34.656216 28204 net.cpp:200] conv1 needs backward computation.
I0428 19:55:34.656219 28204 net.cpp:200] pool0 needs backward computation.
I0428 19:55:34.656222 28204 net.cpp:200] conv0 needs backward computation.
I0428 19:55:34.656225 28204 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:55:34.656229 28204 net.cpp:202] mnist does not need backward computation.
I0428 19:55:34.656231 28204 net.cpp:244] This network produces output accuracy
I0428 19:55:34.656235 28204 net.cpp:244] This network produces output loss
I0428 19:55:34.656246 28204 net.cpp:257] Network initialization done.
I0428 19:55:34.656288 28204 solver.cpp:56] Solver scaffolding done.
I0428 19:55:34.656692 28204 caffe.cpp:248] Starting Optimization
I0428 19:55:34.656699 28204 solver.cpp:273] Solving LeNet
I0428 19:55:34.656702 28204 solver.cpp:274] Learning Rate Policy: inv
I0428 19:55:34.656934 28204 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:55:34.662884 28204 blocking_queue.cpp:49] Waiting for data
I0428 19:55:34.722096 28211 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:34.722700 28204 solver.cpp:398]     Test net output #0: accuracy = 0.1398
I0428 19:55:34.722734 28204 solver.cpp:398]     Test net output #1: loss = 2.30593 (* 1 = 2.30593 loss)
I0428 19:55:34.726560 28204 solver.cpp:219] Iteration 0 (-1.44232e-30 iter/s, 0.0698071s/100 iters), loss = 2.29215
I0428 19:55:34.726600 28204 solver.cpp:238]     Train net output #0: loss = 2.29215 (* 1 = 2.29215 loss)
I0428 19:55:34.726613 28204 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:55:34.875738 28204 solver.cpp:219] Iteration 100 (670.591 iter/s, 0.149122s/100 iters), loss = 1.43284
I0428 19:55:34.875778 28204 solver.cpp:238]     Train net output #0: loss = 1.43284 (* 1 = 1.43284 loss)
I0428 19:55:34.875784 28204 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:55:35.029297 28204 solver.cpp:219] Iteration 200 (651.376 iter/s, 0.153521s/100 iters), loss = 1.24679
I0428 19:55:35.029337 28204 solver.cpp:238]     Train net output #0: loss = 1.24679 (* 1 = 1.24679 loss)
I0428 19:55:35.029359 28204 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:55:35.183253 28204 solver.cpp:219] Iteration 300 (649.768 iter/s, 0.153901s/100 iters), loss = 1.14464
I0428 19:55:35.183279 28204 solver.cpp:238]     Train net output #0: loss = 1.14464 (* 1 = 1.14464 loss)
I0428 19:55:35.183284 28204 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:55:35.334404 28204 solver.cpp:219] Iteration 400 (661.758 iter/s, 0.151113s/100 iters), loss = 0.659692
I0428 19:55:35.334445 28204 solver.cpp:238]     Train net output #0: loss = 0.659692 (* 1 = 0.659692 loss)
I0428 19:55:35.334451 28204 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:55:35.483762 28204 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:55:35.561381 28211 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:35.562007 28204 solver.cpp:398]     Test net output #0: accuracy = 0.7516
I0428 19:55:35.562044 28204 solver.cpp:398]     Test net output #1: loss = 0.649238 (* 1 = 0.649238 loss)
I0428 19:55:35.563623 28204 solver.cpp:219] Iteration 500 (436.345 iter/s, 0.229176s/100 iters), loss = 0.557094
I0428 19:55:35.563688 28204 solver.cpp:238]     Train net output #0: loss = 0.557094 (* 1 = 0.557094 loss)
I0428 19:55:35.563699 28204 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:55:35.718931 28204 solver.cpp:219] Iteration 600 (644.192 iter/s, 0.155233s/100 iters), loss = 0.627138
I0428 19:55:35.718957 28204 solver.cpp:238]     Train net output #0: loss = 0.627138 (* 1 = 0.627138 loss)
I0428 19:55:35.718963 28204 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:55:35.870362 28204 solver.cpp:219] Iteration 700 (660.54 iter/s, 0.151391s/100 iters), loss = 0.707816
I0428 19:55:35.870403 28204 solver.cpp:238]     Train net output #0: loss = 0.707816 (* 1 = 0.707816 loss)
I0428 19:55:35.870409 28204 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:55:36.013672 28204 solver.cpp:219] Iteration 800 (698.039 iter/s, 0.143259s/100 iters), loss = 0.419589
I0428 19:55:36.013712 28204 solver.cpp:238]     Train net output #0: loss = 0.419589 (* 1 = 0.419589 loss)
I0428 19:55:36.013720 28204 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:55:36.157279 28204 solver.cpp:219] Iteration 900 (696.534 iter/s, 0.143568s/100 iters), loss = 0.496339
I0428 19:55:36.157318 28204 solver.cpp:238]     Train net output #0: loss = 0.496339 (* 1 = 0.496339 loss)
I0428 19:55:36.157325 28204 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:55:36.204466 28210 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:36.299705 28204 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:55:36.302342 28204 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:55:36.303608 28204 solver.cpp:311] Iteration 1000, loss = 0.423424
I0428 19:55:36.303638 28204 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:55:36.380168 28211 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:55:36.380815 28204 solver.cpp:398]     Test net output #0: accuracy = 0.8746
I0428 19:55:36.380868 28204 solver.cpp:398]     Test net output #1: loss = 0.331013 (* 1 = 0.331013 loss)
I0428 19:55:36.380890 28204 solver.cpp:316] Optimization Done.
I0428 19:55:36.380893 28204 caffe.cpp:259] Optimization Done.
