I0428 19:40:13.472440 24495 caffe.cpp:218] Using GPUs 0
I0428 19:40:13.510579 24495 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:40:13.973736 24495 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test328.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:40:13.973896 24495 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test328.prototxt
I0428 19:40:13.974246 24495 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:40:13.974267 24495 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:40:13.974378 24495 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:13.974472 24495 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:13.974589 24495 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:40:13.974633 24495 net.cpp:86] Creating Layer mnist
I0428 19:40:13.974643 24495 net.cpp:382] mnist -> data
I0428 19:40:13.974671 24495 net.cpp:382] mnist -> label
I0428 19:40:13.975833 24495 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:40:13.978063 24495 net.cpp:124] Setting up mnist
I0428 19:40:13.978081 24495 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:40:13.978091 24495 net.cpp:131] Top shape: 64 (64)
I0428 19:40:13.978096 24495 net.cpp:139] Memory required for data: 200960
I0428 19:40:13.978106 24495 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:13.978124 24495 net.cpp:86] Creating Layer conv0
I0428 19:40:13.978145 24495 net.cpp:408] conv0 <- data
I0428 19:40:13.978163 24495 net.cpp:382] conv0 -> conv0
I0428 19:40:14.215847 24495 net.cpp:124] Setting up conv0
I0428 19:40:14.215875 24495 net.cpp:131] Top shape: 64 2 24 24 (73728)
I0428 19:40:14.215881 24495 net.cpp:139] Memory required for data: 495872
I0428 19:40:14.215916 24495 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:14.215934 24495 net.cpp:86] Creating Layer pool0
I0428 19:40:14.215947 24495 net.cpp:408] pool0 <- conv0
I0428 19:40:14.215956 24495 net.cpp:382] pool0 -> pool0
I0428 19:40:14.216012 24495 net.cpp:124] Setting up pool0
I0428 19:40:14.216022 24495 net.cpp:131] Top shape: 64 2 12 12 (18432)
I0428 19:40:14.216027 24495 net.cpp:139] Memory required for data: 569600
I0428 19:40:14.216032 24495 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:14.216047 24495 net.cpp:86] Creating Layer conv1
I0428 19:40:14.216053 24495 net.cpp:408] conv1 <- pool0
I0428 19:40:14.216061 24495 net.cpp:382] conv1 -> conv1
I0428 19:40:14.218030 24495 net.cpp:124] Setting up conv1
I0428 19:40:14.218049 24495 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:40:14.218055 24495 net.cpp:139] Memory required for data: 651520
I0428 19:40:14.218070 24495 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:14.218083 24495 net.cpp:86] Creating Layer pool1
I0428 19:40:14.218091 24495 net.cpp:408] pool1 <- conv1
I0428 19:40:14.218099 24495 net.cpp:382] pool1 -> pool1
I0428 19:40:14.218147 24495 net.cpp:124] Setting up pool1
I0428 19:40:14.218156 24495 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:40:14.218161 24495 net.cpp:139] Memory required for data: 672000
I0428 19:40:14.218168 24495 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:14.218180 24495 net.cpp:86] Creating Layer ip1
I0428 19:40:14.218205 24495 net.cpp:408] ip1 <- pool1
I0428 19:40:14.218228 24495 net.cpp:382] ip1 -> ip1
I0428 19:40:14.218345 24495 net.cpp:124] Setting up ip1
I0428 19:40:14.218354 24495 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:14.218359 24495 net.cpp:139] Memory required for data: 674560
I0428 19:40:14.218371 24495 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:14.218382 24495 net.cpp:86] Creating Layer relu1
I0428 19:40:14.218389 24495 net.cpp:408] relu1 <- ip1
I0428 19:40:14.218397 24495 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:14.218561 24495 net.cpp:124] Setting up relu1
I0428 19:40:14.218570 24495 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:14.218575 24495 net.cpp:139] Memory required for data: 677120
I0428 19:40:14.218580 24495 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:14.218590 24495 net.cpp:86] Creating Layer ip2
I0428 19:40:14.218596 24495 net.cpp:408] ip2 <- ip1
I0428 19:40:14.218605 24495 net.cpp:382] ip2 -> ip2
I0428 19:40:14.218705 24495 net.cpp:124] Setting up ip2
I0428 19:40:14.218713 24495 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:14.218719 24495 net.cpp:139] Memory required for data: 683520
I0428 19:40:14.218729 24495 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:14.218737 24495 net.cpp:86] Creating Layer relu2
I0428 19:40:14.218744 24495 net.cpp:408] relu2 <- ip2
I0428 19:40:14.218751 24495 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:14.219545 24495 net.cpp:124] Setting up relu2
I0428 19:40:14.219558 24495 net.cpp:131] Top shape: 64 25 (1600)
I0428 19:40:14.219578 24495 net.cpp:139] Memory required for data: 689920
I0428 19:40:14.219599 24495 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:14.219610 24495 net.cpp:86] Creating Layer ip3
I0428 19:40:14.219616 24495 net.cpp:408] ip3 <- ip2
I0428 19:40:14.219626 24495 net.cpp:382] ip3 -> ip3
I0428 19:40:14.219727 24495 net.cpp:124] Setting up ip3
I0428 19:40:14.219736 24495 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:14.219741 24495 net.cpp:139] Memory required for data: 692480
I0428 19:40:14.219754 24495 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:14.219764 24495 net.cpp:86] Creating Layer relu3
I0428 19:40:14.219770 24495 net.cpp:408] relu3 <- ip3
I0428 19:40:14.219777 24495 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:14.219946 24495 net.cpp:124] Setting up relu3
I0428 19:40:14.219956 24495 net.cpp:131] Top shape: 64 10 (640)
I0428 19:40:14.219961 24495 net.cpp:139] Memory required for data: 695040
I0428 19:40:14.219966 24495 layer_factory.hpp:77] Creating layer loss
I0428 19:40:14.219975 24495 net.cpp:86] Creating Layer loss
I0428 19:40:14.219981 24495 net.cpp:408] loss <- ip3
I0428 19:40:14.219988 24495 net.cpp:408] loss <- label
I0428 19:40:14.219996 24495 net.cpp:382] loss -> loss
I0428 19:40:14.220019 24495 layer_factory.hpp:77] Creating layer loss
I0428 19:40:14.220247 24495 net.cpp:124] Setting up loss
I0428 19:40:14.220257 24495 net.cpp:131] Top shape: (1)
I0428 19:40:14.220262 24495 net.cpp:134]     with loss weight 1
I0428 19:40:14.220280 24495 net.cpp:139] Memory required for data: 695044
I0428 19:40:14.220288 24495 net.cpp:200] loss needs backward computation.
I0428 19:40:14.220293 24495 net.cpp:200] relu3 needs backward computation.
I0428 19:40:14.220299 24495 net.cpp:200] ip3 needs backward computation.
I0428 19:40:14.220304 24495 net.cpp:200] relu2 needs backward computation.
I0428 19:40:14.220309 24495 net.cpp:200] ip2 needs backward computation.
I0428 19:40:14.220314 24495 net.cpp:200] relu1 needs backward computation.
I0428 19:40:14.220319 24495 net.cpp:200] ip1 needs backward computation.
I0428 19:40:14.220325 24495 net.cpp:200] pool1 needs backward computation.
I0428 19:40:14.220330 24495 net.cpp:200] conv1 needs backward computation.
I0428 19:40:14.220335 24495 net.cpp:200] pool0 needs backward computation.
I0428 19:40:14.220341 24495 net.cpp:200] conv0 needs backward computation.
I0428 19:40:14.220347 24495 net.cpp:202] mnist does not need backward computation.
I0428 19:40:14.220352 24495 net.cpp:244] This network produces output loss
I0428 19:40:14.220366 24495 net.cpp:257] Network initialization done.
I0428 19:40:14.220705 24495 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test328.prototxt
I0428 19:40:14.220757 24495 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:40:14.220908 24495 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 25
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 19:40:14.221035 24495 layer_factory.hpp:77] Creating layer mnist
I0428 19:40:14.221101 24495 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:40:14.221135 24495 net.cpp:86] Creating Layer mnist
I0428 19:40:14.221144 24495 net.cpp:382] mnist -> data
I0428 19:40:14.221170 24495 net.cpp:382] mnist -> label
I0428 19:40:14.221312 24495 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:40:14.223809 24495 net.cpp:124] Setting up mnist
I0428 19:40:14.223839 24495 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:40:14.223847 24495 net.cpp:131] Top shape: 100 (100)
I0428 19:40:14.223868 24495 net.cpp:139] Memory required for data: 314000
I0428 19:40:14.223875 24495 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:40:14.223886 24495 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:40:14.223891 24495 net.cpp:408] label_mnist_1_split <- label
I0428 19:40:14.223899 24495 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:40:14.223911 24495 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:40:14.224020 24495 net.cpp:124] Setting up label_mnist_1_split
I0428 19:40:14.224030 24495 net.cpp:131] Top shape: 100 (100)
I0428 19:40:14.224035 24495 net.cpp:131] Top shape: 100 (100)
I0428 19:40:14.224040 24495 net.cpp:139] Memory required for data: 314800
I0428 19:40:14.224046 24495 layer_factory.hpp:77] Creating layer conv0
I0428 19:40:14.224061 24495 net.cpp:86] Creating Layer conv0
I0428 19:40:14.224068 24495 net.cpp:408] conv0 <- data
I0428 19:40:14.224077 24495 net.cpp:382] conv0 -> conv0
I0428 19:40:14.225664 24495 net.cpp:124] Setting up conv0
I0428 19:40:14.225680 24495 net.cpp:131] Top shape: 100 2 24 24 (115200)
I0428 19:40:14.225687 24495 net.cpp:139] Memory required for data: 775600
I0428 19:40:14.225716 24495 layer_factory.hpp:77] Creating layer pool0
I0428 19:40:14.225726 24495 net.cpp:86] Creating Layer pool0
I0428 19:40:14.225733 24495 net.cpp:408] pool0 <- conv0
I0428 19:40:14.225741 24495 net.cpp:382] pool0 -> pool0
I0428 19:40:14.225785 24495 net.cpp:124] Setting up pool0
I0428 19:40:14.225795 24495 net.cpp:131] Top shape: 100 2 12 12 (28800)
I0428 19:40:14.225800 24495 net.cpp:139] Memory required for data: 890800
I0428 19:40:14.225805 24495 layer_factory.hpp:77] Creating layer conv1
I0428 19:40:14.225818 24495 net.cpp:86] Creating Layer conv1
I0428 19:40:14.225826 24495 net.cpp:408] conv1 <- pool0
I0428 19:40:14.225834 24495 net.cpp:382] conv1 -> conv1
I0428 19:40:14.227360 24495 net.cpp:124] Setting up conv1
I0428 19:40:14.227373 24495 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:40:14.227396 24495 net.cpp:139] Memory required for data: 1018800
I0428 19:40:14.227408 24495 layer_factory.hpp:77] Creating layer pool1
I0428 19:40:14.227419 24495 net.cpp:86] Creating Layer pool1
I0428 19:40:14.227432 24495 net.cpp:408] pool1 <- conv1
I0428 19:40:14.227440 24495 net.cpp:382] pool1 -> pool1
I0428 19:40:14.227483 24495 net.cpp:124] Setting up pool1
I0428 19:40:14.227491 24495 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:40:14.227496 24495 net.cpp:139] Memory required for data: 1050800
I0428 19:40:14.227502 24495 layer_factory.hpp:77] Creating layer ip1
I0428 19:40:14.227514 24495 net.cpp:86] Creating Layer ip1
I0428 19:40:14.227519 24495 net.cpp:408] ip1 <- pool1
I0428 19:40:14.227527 24495 net.cpp:382] ip1 -> ip1
I0428 19:40:14.227633 24495 net.cpp:124] Setting up ip1
I0428 19:40:14.227643 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.227663 24495 net.cpp:139] Memory required for data: 1054800
I0428 19:40:14.227677 24495 layer_factory.hpp:77] Creating layer relu1
I0428 19:40:14.227686 24495 net.cpp:86] Creating Layer relu1
I0428 19:40:14.227694 24495 net.cpp:408] relu1 <- ip1
I0428 19:40:14.227701 24495 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:40:14.227872 24495 net.cpp:124] Setting up relu1
I0428 19:40:14.227882 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.227888 24495 net.cpp:139] Memory required for data: 1058800
I0428 19:40:14.227895 24495 layer_factory.hpp:77] Creating layer ip2
I0428 19:40:14.227906 24495 net.cpp:86] Creating Layer ip2
I0428 19:40:14.227913 24495 net.cpp:408] ip2 <- ip1
I0428 19:40:14.227922 24495 net.cpp:382] ip2 -> ip2
I0428 19:40:14.228086 24495 net.cpp:124] Setting up ip2
I0428 19:40:14.228094 24495 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:14.228099 24495 net.cpp:139] Memory required for data: 1068800
I0428 19:40:14.228109 24495 layer_factory.hpp:77] Creating layer relu2
I0428 19:40:14.228116 24495 net.cpp:86] Creating Layer relu2
I0428 19:40:14.228122 24495 net.cpp:408] relu2 <- ip2
I0428 19:40:14.228130 24495 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:40:14.228291 24495 net.cpp:124] Setting up relu2
I0428 19:40:14.228302 24495 net.cpp:131] Top shape: 100 25 (2500)
I0428 19:40:14.228307 24495 net.cpp:139] Memory required for data: 1078800
I0428 19:40:14.228312 24495 layer_factory.hpp:77] Creating layer ip3
I0428 19:40:14.228322 24495 net.cpp:86] Creating Layer ip3
I0428 19:40:14.228327 24495 net.cpp:408] ip3 <- ip2
I0428 19:40:14.228335 24495 net.cpp:382] ip3 -> ip3
I0428 19:40:14.228438 24495 net.cpp:124] Setting up ip3
I0428 19:40:14.228447 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.228453 24495 net.cpp:139] Memory required for data: 1082800
I0428 19:40:14.228466 24495 layer_factory.hpp:77] Creating layer relu3
I0428 19:40:14.228477 24495 net.cpp:86] Creating Layer relu3
I0428 19:40:14.228483 24495 net.cpp:408] relu3 <- ip3
I0428 19:40:14.228492 24495 net.cpp:369] relu3 -> ip3 (in-place)
I0428 19:40:14.229367 24495 net.cpp:124] Setting up relu3
I0428 19:40:14.229382 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.229387 24495 net.cpp:139] Memory required for data: 1086800
I0428 19:40:14.229393 24495 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 19:40:14.229401 24495 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 19:40:14.229408 24495 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 19:40:14.229416 24495 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 19:40:14.229427 24495 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 19:40:14.229471 24495 net.cpp:124] Setting up ip3_relu3_0_split
I0428 19:40:14.229480 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.229486 24495 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:40:14.229492 24495 net.cpp:139] Memory required for data: 1094800
I0428 19:40:14.229497 24495 layer_factory.hpp:77] Creating layer accuracy
I0428 19:40:14.229507 24495 net.cpp:86] Creating Layer accuracy
I0428 19:40:14.229512 24495 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 19:40:14.229521 24495 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:40:14.229528 24495 net.cpp:382] accuracy -> accuracy
I0428 19:40:14.229540 24495 net.cpp:124] Setting up accuracy
I0428 19:40:14.229548 24495 net.cpp:131] Top shape: (1)
I0428 19:40:14.229554 24495 net.cpp:139] Memory required for data: 1094804
I0428 19:40:14.229560 24495 layer_factory.hpp:77] Creating layer loss
I0428 19:40:14.229569 24495 net.cpp:86] Creating Layer loss
I0428 19:40:14.229574 24495 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 19:40:14.229581 24495 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:40:14.229600 24495 net.cpp:382] loss -> loss
I0428 19:40:14.229609 24495 layer_factory.hpp:77] Creating layer loss
I0428 19:40:14.229838 24495 net.cpp:124] Setting up loss
I0428 19:40:14.229851 24495 net.cpp:131] Top shape: (1)
I0428 19:40:14.229856 24495 net.cpp:134]     with loss weight 1
I0428 19:40:14.229866 24495 net.cpp:139] Memory required for data: 1094808
I0428 19:40:14.229892 24495 net.cpp:200] loss needs backward computation.
I0428 19:40:14.229899 24495 net.cpp:202] accuracy does not need backward computation.
I0428 19:40:14.229907 24495 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 19:40:14.229912 24495 net.cpp:200] relu3 needs backward computation.
I0428 19:40:14.229918 24495 net.cpp:200] ip3 needs backward computation.
I0428 19:40:14.229924 24495 net.cpp:200] relu2 needs backward computation.
I0428 19:40:14.229929 24495 net.cpp:200] ip2 needs backward computation.
I0428 19:40:14.229934 24495 net.cpp:200] relu1 needs backward computation.
I0428 19:40:14.229940 24495 net.cpp:200] ip1 needs backward computation.
I0428 19:40:14.229946 24495 net.cpp:200] pool1 needs backward computation.
I0428 19:40:14.229959 24495 net.cpp:200] conv1 needs backward computation.
I0428 19:40:14.229965 24495 net.cpp:200] pool0 needs backward computation.
I0428 19:40:14.229971 24495 net.cpp:200] conv0 needs backward computation.
I0428 19:40:14.229979 24495 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:40:14.229985 24495 net.cpp:202] mnist does not need backward computation.
I0428 19:40:14.229990 24495 net.cpp:244] This network produces output accuracy
I0428 19:40:14.229996 24495 net.cpp:244] This network produces output loss
I0428 19:40:14.230012 24495 net.cpp:257] Network initialization done.
I0428 19:40:14.230062 24495 solver.cpp:56] Solver scaffolding done.
I0428 19:40:14.230432 24495 caffe.cpp:248] Starting Optimization
I0428 19:40:14.230439 24495 solver.cpp:273] Solving LeNet
I0428 19:40:14.230444 24495 solver.cpp:274] Learning Rate Policy: inv
I0428 19:40:14.231279 24495 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:40:14.233899 24495 blocking_queue.cpp:49] Waiting for data
I0428 19:40:14.302317 24502 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:14.302857 24495 solver.cpp:398]     Test net output #0: accuracy = 0.0971
I0428 19:40:14.302889 24495 solver.cpp:398]     Test net output #1: loss = 2.31509 (* 1 = 2.31509 loss)
I0428 19:40:14.305250 24495 solver.cpp:219] Iteration 0 (0 iter/s, 0.0747715s/100 iters), loss = 2.31652
I0428 19:40:14.305290 24495 solver.cpp:238]     Train net output #0: loss = 2.31652 (* 1 = 2.31652 loss)
I0428 19:40:14.305315 24495 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:40:14.382937 24495 solver.cpp:219] Iteration 100 (1287.95 iter/s, 0.0776426s/100 iters), loss = 1.50739
I0428 19:40:14.382971 24495 solver.cpp:238]     Train net output #0: loss = 1.50739 (* 1 = 1.50739 loss)
I0428 19:40:14.382982 24495 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:40:14.451939 24495 solver.cpp:219] Iteration 200 (1450.04 iter/s, 0.0689635s/100 iters), loss = 1.13214
I0428 19:40:14.451967 24495 solver.cpp:238]     Train net output #0: loss = 1.13214 (* 1 = 1.13214 loss)
I0428 19:40:14.451993 24495 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:40:14.521986 24495 solver.cpp:219] Iteration 300 (1428.33 iter/s, 0.0700119s/100 iters), loss = 0.389959
I0428 19:40:14.522017 24495 solver.cpp:238]     Train net output #0: loss = 0.389959 (* 1 = 0.389959 loss)
I0428 19:40:14.522042 24495 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:40:14.591750 24495 solver.cpp:219] Iteration 400 (1434.12 iter/s, 0.0697293s/100 iters), loss = 0.435486
I0428 19:40:14.591778 24495 solver.cpp:238]     Train net output #0: loss = 0.435486 (* 1 = 0.435486 loss)
I0428 19:40:14.591804 24495 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:40:14.660315 24495 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:40:14.712538 24502 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:14.713011 24495 solver.cpp:398]     Test net output #0: accuracy = 0.8551
I0428 19:40:14.713037 24495 solver.cpp:398]     Test net output #1: loss = 0.460839 (* 1 = 0.460839 loss)
I0428 19:40:14.713860 24495 solver.cpp:219] Iteration 500 (819.188 iter/s, 0.122072s/100 iters), loss = 0.612531
I0428 19:40:14.713907 24495 solver.cpp:238]     Train net output #0: loss = 0.61253 (* 1 = 0.61253 loss)
I0428 19:40:14.713934 24495 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:40:14.786722 24495 solver.cpp:219] Iteration 600 (1373.45 iter/s, 0.0728095s/100 iters), loss = 0.298354
I0428 19:40:14.786752 24495 solver.cpp:238]     Train net output #0: loss = 0.298354 (* 1 = 0.298354 loss)
I0428 19:40:14.786764 24495 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:40:14.859279 24495 solver.cpp:219] Iteration 700 (1378.92 iter/s, 0.0725208s/100 iters), loss = 0.254779
I0428 19:40:14.859310 24495 solver.cpp:238]     Train net output #0: loss = 0.254779 (* 1 = 0.254779 loss)
I0428 19:40:14.859321 24495 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:40:14.930815 24495 solver.cpp:219] Iteration 800 (1398.61 iter/s, 0.0714998s/100 iters), loss = 0.420182
I0428 19:40:14.930845 24495 solver.cpp:238]     Train net output #0: loss = 0.420182 (* 1 = 0.420182 loss)
I0428 19:40:14.930856 24495 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:40:15.001574 24495 solver.cpp:219] Iteration 900 (1413.98 iter/s, 0.0707224s/100 iters), loss = 0.230405
I0428 19:40:15.001603 24495 solver.cpp:238]     Train net output #0: loss = 0.230405 (* 1 = 0.230405 loss)
I0428 19:40:15.001613 24495 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:40:15.025431 24501 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:15.071622 24495 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:40:15.072211 24495 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:40:15.072648 24495 solver.cpp:311] Iteration 1000, loss = 0.314846
I0428 19:40:15.072664 24495 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:40:15.147538 24502 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:40:15.148136 24495 solver.cpp:398]     Test net output #0: accuracy = 0.9409
I0428 19:40:15.148172 24495 solver.cpp:398]     Test net output #1: loss = 0.200985 (* 1 = 0.200985 loss)
I0428 19:40:15.148188 24495 solver.cpp:316] Optimization Done.
I0428 19:40:15.148198 24495 caffe.cpp:259] Optimization Done.
