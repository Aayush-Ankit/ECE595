I0428 20:06:26.808419 30876 caffe.cpp:218] Using GPUs 0
I0428 20:06:26.849326 30876 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:06:27.371987 30876 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1028.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:06:27.372129 30876 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1028.prototxt
I0428 20:06:27.372545 30876 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:06:27.372565 30876 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:06:27.372666 30876 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:06:27.372745 30876 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:27.372850 30876 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:06:27.372874 30876 net.cpp:86] Creating Layer mnist
I0428 20:06:27.372884 30876 net.cpp:382] mnist -> data
I0428 20:06:27.372903 30876 net.cpp:382] mnist -> label
I0428 20:06:27.373997 30876 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:06:27.376664 30876 net.cpp:124] Setting up mnist
I0428 20:06:27.376682 30876 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:06:27.376688 30876 net.cpp:131] Top shape: 64 (64)
I0428 20:06:27.376690 30876 net.cpp:139] Memory required for data: 200960
I0428 20:06:27.376698 30876 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:27.376716 30876 net.cpp:86] Creating Layer conv0
I0428 20:06:27.376740 30876 net.cpp:408] conv0 <- data
I0428 20:06:27.376755 30876 net.cpp:382] conv0 -> conv0
I0428 20:06:27.666318 30876 net.cpp:124] Setting up conv0
I0428 20:06:27.666348 30876 net.cpp:131] Top shape: 64 25 24 24 (921600)
I0428 20:06:27.666352 30876 net.cpp:139] Memory required for data: 3887360
I0428 20:06:27.666370 30876 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:27.666384 30876 net.cpp:86] Creating Layer pool0
I0428 20:06:27.666389 30876 net.cpp:408] pool0 <- conv0
I0428 20:06:27.666395 30876 net.cpp:382] pool0 -> pool0
I0428 20:06:27.666442 30876 net.cpp:124] Setting up pool0
I0428 20:06:27.666450 30876 net.cpp:131] Top shape: 64 25 12 12 (230400)
I0428 20:06:27.666452 30876 net.cpp:139] Memory required for data: 4808960
I0428 20:06:27.666455 30876 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:27.666467 30876 net.cpp:86] Creating Layer conv1
I0428 20:06:27.666471 30876 net.cpp:408] conv1 <- pool0
I0428 20:06:27.666476 30876 net.cpp:382] conv1 -> conv1
I0428 20:06:27.669378 30876 net.cpp:124] Setting up conv1
I0428 20:06:27.669394 30876 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 20:06:27.669399 30876 net.cpp:139] Memory required for data: 4890880
I0428 20:06:27.669409 30876 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:27.669416 30876 net.cpp:86] Creating Layer pool1
I0428 20:06:27.669420 30876 net.cpp:408] pool1 <- conv1
I0428 20:06:27.669426 30876 net.cpp:382] pool1 -> pool1
I0428 20:06:27.669466 30876 net.cpp:124] Setting up pool1
I0428 20:06:27.669471 30876 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 20:06:27.669474 30876 net.cpp:139] Memory required for data: 4911360
I0428 20:06:27.669477 30876 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:27.669486 30876 net.cpp:86] Creating Layer ip1
I0428 20:06:27.669488 30876 net.cpp:408] ip1 <- pool1
I0428 20:06:27.669493 30876 net.cpp:382] ip1 -> ip1
I0428 20:06:27.669597 30876 net.cpp:124] Setting up ip1
I0428 20:06:27.669605 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.669608 30876 net.cpp:139] Memory required for data: 4913920
I0428 20:06:27.669615 30876 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:27.669621 30876 net.cpp:86] Creating Layer relu1
I0428 20:06:27.669625 30876 net.cpp:408] relu1 <- ip1
I0428 20:06:27.669630 30876 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:27.669811 30876 net.cpp:124] Setting up relu1
I0428 20:06:27.669821 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.669823 30876 net.cpp:139] Memory required for data: 4916480
I0428 20:06:27.669826 30876 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:27.669833 30876 net.cpp:86] Creating Layer ip2
I0428 20:06:27.669837 30876 net.cpp:408] ip2 <- ip1
I0428 20:06:27.669842 30876 net.cpp:382] ip2 -> ip2
I0428 20:06:27.669946 30876 net.cpp:124] Setting up ip2
I0428 20:06:27.669955 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.669957 30876 net.cpp:139] Memory required for data: 4919040
I0428 20:06:27.669963 30876 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:27.669970 30876 net.cpp:86] Creating Layer relu2
I0428 20:06:27.669973 30876 net.cpp:408] relu2 <- ip2
I0428 20:06:27.669977 30876 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:27.670739 30876 net.cpp:124] Setting up relu2
I0428 20:06:27.670754 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.670758 30876 net.cpp:139] Memory required for data: 4921600
I0428 20:06:27.670761 30876 layer_factory.hpp:77] Creating layer ip3
I0428 20:06:27.670768 30876 net.cpp:86] Creating Layer ip3
I0428 20:06:27.670773 30876 net.cpp:408] ip3 <- ip2
I0428 20:06:27.670779 30876 net.cpp:382] ip3 -> ip3
I0428 20:06:27.670886 30876 net.cpp:124] Setting up ip3
I0428 20:06:27.670895 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.670898 30876 net.cpp:139] Memory required for data: 4924160
I0428 20:06:27.670907 30876 layer_factory.hpp:77] Creating layer relu3
I0428 20:06:27.670912 30876 net.cpp:86] Creating Layer relu3
I0428 20:06:27.670915 30876 net.cpp:408] relu3 <- ip3
I0428 20:06:27.670919 30876 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:06:27.671124 30876 net.cpp:124] Setting up relu3
I0428 20:06:27.671133 30876 net.cpp:131] Top shape: 64 10 (640)
I0428 20:06:27.671136 30876 net.cpp:139] Memory required for data: 4926720
I0428 20:06:27.671139 30876 layer_factory.hpp:77] Creating layer loss
I0428 20:06:27.671146 30876 net.cpp:86] Creating Layer loss
I0428 20:06:27.671149 30876 net.cpp:408] loss <- ip3
I0428 20:06:27.671154 30876 net.cpp:408] loss <- label
I0428 20:06:27.671159 30876 net.cpp:382] loss -> loss
I0428 20:06:27.671174 30876 layer_factory.hpp:77] Creating layer loss
I0428 20:06:27.671428 30876 net.cpp:124] Setting up loss
I0428 20:06:27.671437 30876 net.cpp:131] Top shape: (1)
I0428 20:06:27.671442 30876 net.cpp:134]     with loss weight 1
I0428 20:06:27.671455 30876 net.cpp:139] Memory required for data: 4926724
I0428 20:06:27.671459 30876 net.cpp:200] loss needs backward computation.
I0428 20:06:27.671463 30876 net.cpp:200] relu3 needs backward computation.
I0428 20:06:27.671466 30876 net.cpp:200] ip3 needs backward computation.
I0428 20:06:27.671469 30876 net.cpp:200] relu2 needs backward computation.
I0428 20:06:27.671473 30876 net.cpp:200] ip2 needs backward computation.
I0428 20:06:27.671475 30876 net.cpp:200] relu1 needs backward computation.
I0428 20:06:27.671478 30876 net.cpp:200] ip1 needs backward computation.
I0428 20:06:27.671481 30876 net.cpp:200] pool1 needs backward computation.
I0428 20:06:27.671484 30876 net.cpp:200] conv1 needs backward computation.
I0428 20:06:27.671488 30876 net.cpp:200] pool0 needs backward computation.
I0428 20:06:27.671490 30876 net.cpp:200] conv0 needs backward computation.
I0428 20:06:27.671494 30876 net.cpp:202] mnist does not need backward computation.
I0428 20:06:27.671499 30876 net.cpp:244] This network produces output loss
I0428 20:06:27.671509 30876 net.cpp:257] Network initialization done.
I0428 20:06:27.671849 30876 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1028.prototxt
I0428 20:06:27.671878 30876 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:06:27.671975 30876 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 25
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "ip3"
  top: "ip3"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip3"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
I0428 20:06:27.672062 30876 layer_factory.hpp:77] Creating layer mnist
I0428 20:06:27.672108 30876 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:06:27.672122 30876 net.cpp:86] Creating Layer mnist
I0428 20:06:27.672127 30876 net.cpp:382] mnist -> data
I0428 20:06:27.672137 30876 net.cpp:382] mnist -> label
I0428 20:06:27.672226 30876 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:06:27.674235 30876 net.cpp:124] Setting up mnist
I0428 20:06:27.674250 30876 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:06:27.674255 30876 net.cpp:131] Top shape: 100 (100)
I0428 20:06:27.674258 30876 net.cpp:139] Memory required for data: 314000
I0428 20:06:27.674263 30876 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:06:27.674270 30876 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:06:27.674273 30876 net.cpp:408] label_mnist_1_split <- label
I0428 20:06:27.674290 30876 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:06:27.674298 30876 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:06:27.674352 30876 net.cpp:124] Setting up label_mnist_1_split
I0428 20:06:27.674358 30876 net.cpp:131] Top shape: 100 (100)
I0428 20:06:27.674362 30876 net.cpp:131] Top shape: 100 (100)
I0428 20:06:27.674365 30876 net.cpp:139] Memory required for data: 314800
I0428 20:06:27.674368 30876 layer_factory.hpp:77] Creating layer conv0
I0428 20:06:27.674377 30876 net.cpp:86] Creating Layer conv0
I0428 20:06:27.674382 30876 net.cpp:408] conv0 <- data
I0428 20:06:27.674388 30876 net.cpp:382] conv0 -> conv0
I0428 20:06:27.676177 30876 net.cpp:124] Setting up conv0
I0428 20:06:27.676192 30876 net.cpp:131] Top shape: 100 25 24 24 (1440000)
I0428 20:06:27.676196 30876 net.cpp:139] Memory required for data: 6074800
I0428 20:06:27.676205 30876 layer_factory.hpp:77] Creating layer pool0
I0428 20:06:27.676213 30876 net.cpp:86] Creating Layer pool0
I0428 20:06:27.676216 30876 net.cpp:408] pool0 <- conv0
I0428 20:06:27.676223 30876 net.cpp:382] pool0 -> pool0
I0428 20:06:27.676264 30876 net.cpp:124] Setting up pool0
I0428 20:06:27.676268 30876 net.cpp:131] Top shape: 100 25 12 12 (360000)
I0428 20:06:27.676271 30876 net.cpp:139] Memory required for data: 7514800
I0428 20:06:27.676275 30876 layer_factory.hpp:77] Creating layer conv1
I0428 20:06:27.676285 30876 net.cpp:86] Creating Layer conv1
I0428 20:06:27.676288 30876 net.cpp:408] conv1 <- pool0
I0428 20:06:27.676295 30876 net.cpp:382] conv1 -> conv1
I0428 20:06:27.678464 30876 net.cpp:124] Setting up conv1
I0428 20:06:27.678480 30876 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 20:06:27.678484 30876 net.cpp:139] Memory required for data: 7642800
I0428 20:06:27.678493 30876 layer_factory.hpp:77] Creating layer pool1
I0428 20:06:27.678500 30876 net.cpp:86] Creating Layer pool1
I0428 20:06:27.678503 30876 net.cpp:408] pool1 <- conv1
I0428 20:06:27.678510 30876 net.cpp:382] pool1 -> pool1
I0428 20:06:27.678551 30876 net.cpp:124] Setting up pool1
I0428 20:06:27.678558 30876 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 20:06:27.678561 30876 net.cpp:139] Memory required for data: 7674800
I0428 20:06:27.678565 30876 layer_factory.hpp:77] Creating layer ip1
I0428 20:06:27.678572 30876 net.cpp:86] Creating Layer ip1
I0428 20:06:27.678575 30876 net.cpp:408] ip1 <- pool1
I0428 20:06:27.678581 30876 net.cpp:382] ip1 -> ip1
I0428 20:06:27.678782 30876 net.cpp:124] Setting up ip1
I0428 20:06:27.678791 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.678804 30876 net.cpp:139] Memory required for data: 7678800
I0428 20:06:27.678813 30876 layer_factory.hpp:77] Creating layer relu1
I0428 20:06:27.678818 30876 net.cpp:86] Creating Layer relu1
I0428 20:06:27.678822 30876 net.cpp:408] relu1 <- ip1
I0428 20:06:27.678828 30876 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:06:27.679023 30876 net.cpp:124] Setting up relu1
I0428 20:06:27.679033 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.679035 30876 net.cpp:139] Memory required for data: 7682800
I0428 20:06:27.679039 30876 layer_factory.hpp:77] Creating layer ip2
I0428 20:06:27.679047 30876 net.cpp:86] Creating Layer ip2
I0428 20:06:27.679051 30876 net.cpp:408] ip2 <- ip1
I0428 20:06:27.679057 30876 net.cpp:382] ip2 -> ip2
I0428 20:06:27.679165 30876 net.cpp:124] Setting up ip2
I0428 20:06:27.679173 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.679177 30876 net.cpp:139] Memory required for data: 7686800
I0428 20:06:27.679183 30876 layer_factory.hpp:77] Creating layer relu2
I0428 20:06:27.679198 30876 net.cpp:86] Creating Layer relu2
I0428 20:06:27.679205 30876 net.cpp:408] relu2 <- ip2
I0428 20:06:27.679213 30876 net.cpp:369] relu2 -> ip2 (in-place)
I0428 20:06:27.679381 30876 net.cpp:124] Setting up relu2
I0428 20:06:27.679390 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.679394 30876 net.cpp:139] Memory required for data: 7690800
I0428 20:06:27.679397 30876 layer_factory.hpp:77] Creating layer ip3
I0428 20:06:27.679404 30876 net.cpp:86] Creating Layer ip3
I0428 20:06:27.679407 30876 net.cpp:408] ip3 <- ip2
I0428 20:06:27.679412 30876 net.cpp:382] ip3 -> ip3
I0428 20:06:27.679522 30876 net.cpp:124] Setting up ip3
I0428 20:06:27.679530 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.679533 30876 net.cpp:139] Memory required for data: 7694800
I0428 20:06:27.679541 30876 layer_factory.hpp:77] Creating layer relu3
I0428 20:06:27.679548 30876 net.cpp:86] Creating Layer relu3
I0428 20:06:27.679556 30876 net.cpp:408] relu3 <- ip3
I0428 20:06:27.679561 30876 net.cpp:369] relu3 -> ip3 (in-place)
I0428 20:06:27.680408 30876 net.cpp:124] Setting up relu3
I0428 20:06:27.680421 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.680425 30876 net.cpp:139] Memory required for data: 7698800
I0428 20:06:27.680428 30876 layer_factory.hpp:77] Creating layer ip3_relu3_0_split
I0428 20:06:27.680434 30876 net.cpp:86] Creating Layer ip3_relu3_0_split
I0428 20:06:27.680438 30876 net.cpp:408] ip3_relu3_0_split <- ip3
I0428 20:06:27.680443 30876 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_0
I0428 20:06:27.680449 30876 net.cpp:382] ip3_relu3_0_split -> ip3_relu3_0_split_1
I0428 20:06:27.680501 30876 net.cpp:124] Setting up ip3_relu3_0_split
I0428 20:06:27.680510 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.680513 30876 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:06:27.680516 30876 net.cpp:139] Memory required for data: 7706800
I0428 20:06:27.680519 30876 layer_factory.hpp:77] Creating layer accuracy
I0428 20:06:27.680526 30876 net.cpp:86] Creating Layer accuracy
I0428 20:06:27.680528 30876 net.cpp:408] accuracy <- ip3_relu3_0_split_0
I0428 20:06:27.680533 30876 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:06:27.680539 30876 net.cpp:382] accuracy -> accuracy
I0428 20:06:27.680547 30876 net.cpp:124] Setting up accuracy
I0428 20:06:27.680552 30876 net.cpp:131] Top shape: (1)
I0428 20:06:27.680554 30876 net.cpp:139] Memory required for data: 7706804
I0428 20:06:27.680557 30876 layer_factory.hpp:77] Creating layer loss
I0428 20:06:27.680563 30876 net.cpp:86] Creating Layer loss
I0428 20:06:27.680567 30876 net.cpp:408] loss <- ip3_relu3_0_split_1
I0428 20:06:27.680570 30876 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:06:27.680575 30876 net.cpp:382] loss -> loss
I0428 20:06:27.680582 30876 layer_factory.hpp:77] Creating layer loss
I0428 20:06:27.680876 30876 net.cpp:124] Setting up loss
I0428 20:06:27.680886 30876 net.cpp:131] Top shape: (1)
I0428 20:06:27.680891 30876 net.cpp:134]     with loss weight 1
I0428 20:06:27.680897 30876 net.cpp:139] Memory required for data: 7706808
I0428 20:06:27.680910 30876 net.cpp:200] loss needs backward computation.
I0428 20:06:27.680915 30876 net.cpp:202] accuracy does not need backward computation.
I0428 20:06:27.680919 30876 net.cpp:200] ip3_relu3_0_split needs backward computation.
I0428 20:06:27.680922 30876 net.cpp:200] relu3 needs backward computation.
I0428 20:06:27.680927 30876 net.cpp:200] ip3 needs backward computation.
I0428 20:06:27.680929 30876 net.cpp:200] relu2 needs backward computation.
I0428 20:06:27.680932 30876 net.cpp:200] ip2 needs backward computation.
I0428 20:06:27.680935 30876 net.cpp:200] relu1 needs backward computation.
I0428 20:06:27.680938 30876 net.cpp:200] ip1 needs backward computation.
I0428 20:06:27.680941 30876 net.cpp:200] pool1 needs backward computation.
I0428 20:06:27.680944 30876 net.cpp:200] conv1 needs backward computation.
I0428 20:06:27.680948 30876 net.cpp:200] pool0 needs backward computation.
I0428 20:06:27.680951 30876 net.cpp:200] conv0 needs backward computation.
I0428 20:06:27.680955 30876 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:06:27.680959 30876 net.cpp:202] mnist does not need backward computation.
I0428 20:06:27.680961 30876 net.cpp:244] This network produces output accuracy
I0428 20:06:27.680965 30876 net.cpp:244] This network produces output loss
I0428 20:06:27.680979 30876 net.cpp:257] Network initialization done.
I0428 20:06:27.681021 30876 solver.cpp:56] Solver scaffolding done.
I0428 20:06:27.681429 30876 caffe.cpp:248] Starting Optimization
I0428 20:06:27.681434 30876 solver.cpp:273] Solving LeNet
I0428 20:06:27.681437 30876 solver.cpp:274] Learning Rate Policy: inv
I0428 20:06:27.682341 30876 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:06:27.687368 30876 blocking_queue.cpp:49] Waiting for data
I0428 20:06:27.758438 30883 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:27.759055 30876 solver.cpp:398]     Test net output #0: accuracy = 0.0988
I0428 20:06:27.759073 30876 solver.cpp:398]     Test net output #1: loss = 2.30597 (* 1 = 2.30597 loss)
I0428 20:06:27.762719 30876 solver.cpp:219] Iteration 0 (0 iter/s, 0.0812442s/100 iters), loss = 2.31446
I0428 20:06:27.762743 30876 solver.cpp:238]     Train net output #0: loss = 2.31446 (* 1 = 2.31446 loss)
I0428 20:06:27.762754 30876 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:06:27.849429 30876 solver.cpp:219] Iteration 100 (1153.74 iter/s, 0.0866744s/100 iters), loss = 0.985932
I0428 20:06:27.849470 30876 solver.cpp:238]     Train net output #0: loss = 0.985932 (* 1 = 0.985932 loss)
I0428 20:06:27.849476 30876 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:06:27.944895 30876 solver.cpp:219] Iteration 200 (1047.91 iter/s, 0.0954276s/100 iters), loss = 0.630737
I0428 20:06:27.944948 30876 solver.cpp:238]     Train net output #0: loss = 0.630737 (* 1 = 0.630737 loss)
I0428 20:06:27.944957 30876 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:06:28.040949 30876 solver.cpp:219] Iteration 300 (1041.59 iter/s, 0.0960072s/100 iters), loss = 0.498009
I0428 20:06:28.040990 30876 solver.cpp:238]     Train net output #0: loss = 0.498009 (* 1 = 0.498009 loss)
I0428 20:06:28.040997 30876 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:06:28.127697 30876 solver.cpp:219] Iteration 400 (1153.42 iter/s, 0.086699s/100 iters), loss = 0.210455
I0428 20:06:28.127735 30876 solver.cpp:238]     Train net output #0: loss = 0.210455 (* 1 = 0.210455 loss)
I0428 20:06:28.127740 30876 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:06:28.213493 30876 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:06:28.289633 30883 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:28.290407 30876 solver.cpp:398]     Test net output #0: accuracy = 0.9256
I0428 20:06:28.290457 30876 solver.cpp:398]     Test net output #1: loss = 0.248363 (* 1 = 0.248363 loss)
I0428 20:06:28.291600 30876 solver.cpp:219] Iteration 500 (610.264 iter/s, 0.163864s/100 iters), loss = 0.201969
I0428 20:06:28.291640 30876 solver.cpp:238]     Train net output #0: loss = 0.201969 (* 1 = 0.201969 loss)
I0428 20:06:28.291673 30876 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:06:28.399091 30876 solver.cpp:219] Iteration 600 (930.769 iter/s, 0.107438s/100 iters), loss = 0.151434
I0428 20:06:28.399137 30876 solver.cpp:238]     Train net output #0: loss = 0.151434 (* 1 = 0.151434 loss)
I0428 20:06:28.399147 30876 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:06:28.496171 30876 solver.cpp:219] Iteration 700 (1030.64 iter/s, 0.0970271s/100 iters), loss = 0.301844
I0428 20:06:28.496201 30876 solver.cpp:238]     Train net output #0: loss = 0.301844 (* 1 = 0.301844 loss)
I0428 20:06:28.496209 30876 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:06:28.588032 30876 solver.cpp:219] Iteration 800 (1089.09 iter/s, 0.09182s/100 iters), loss = 0.245399
I0428 20:06:28.588063 30876 solver.cpp:238]     Train net output #0: loss = 0.245399 (* 1 = 0.245399 loss)
I0428 20:06:28.588071 30876 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:06:28.679734 30876 solver.cpp:219] Iteration 900 (1090.99 iter/s, 0.0916603s/100 iters), loss = 0.336896
I0428 20:06:28.679765 30876 solver.cpp:238]     Train net output #0: loss = 0.336896 (* 1 = 0.336896 loss)
I0428 20:06:28.679774 30876 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:06:28.710366 30882 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:28.770193 30876 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:06:28.771010 30876 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:06:28.771574 30876 solver.cpp:311] Iteration 1000, loss = 0.168137
I0428 20:06:28.771592 30876 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:06:28.843806 30883 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:06:28.844434 30876 solver.cpp:398]     Test net output #0: accuracy = 0.9548
I0428 20:06:28.844460 30876 solver.cpp:398]     Test net output #1: loss = 0.142709 (* 1 = 0.142709 loss)
I0428 20:06:28.844466 30876 solver.cpp:316] Optimization Done.
I0428 20:06:28.844472 30876 caffe.cpp:259] Optimization Done.
