I0428 19:48:35.832967 26523 caffe.cpp:218] Using GPUs 0
I0428 19:48:35.870415 26523 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 19:48:36.334710 26523 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test549.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 19:48:36.334888 26523 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test549.prototxt
I0428 19:48:36.335230 26523 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 19:48:36.335247 26523 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 19:48:36.335325 26523 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:36.335408 26523 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:36.335549 26523 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 19:48:36.335579 26523 net.cpp:86] Creating Layer mnist
I0428 19:48:36.335592 26523 net.cpp:382] mnist -> data
I0428 19:48:36.335633 26523 net.cpp:382] mnist -> label
I0428 19:48:36.336918 26523 data_layer.cpp:45] output data size: 64,1,28,28
I0428 19:48:36.339103 26523 net.cpp:124] Setting up mnist
I0428 19:48:36.339138 26523 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 19:48:36.339145 26523 net.cpp:131] Top shape: 64 (64)
I0428 19:48:36.339150 26523 net.cpp:139] Memory required for data: 200960
I0428 19:48:36.339159 26523 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:36.339179 26523 net.cpp:86] Creating Layer conv0
I0428 19:48:36.339187 26523 net.cpp:408] conv0 <- data
I0428 19:48:36.339203 26523 net.cpp:382] conv0 -> conv0
I0428 19:48:36.567096 26523 net.cpp:124] Setting up conv0
I0428 19:48:36.567126 26523 net.cpp:131] Top shape: 64 5 24 24 (184320)
I0428 19:48:36.567131 26523 net.cpp:139] Memory required for data: 938240
I0428 19:48:36.567173 26523 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:36.567191 26523 net.cpp:86] Creating Layer pool0
I0428 19:48:36.567198 26523 net.cpp:408] pool0 <- conv0
I0428 19:48:36.567206 26523 net.cpp:382] pool0 -> pool0
I0428 19:48:36.567255 26523 net.cpp:124] Setting up pool0
I0428 19:48:36.567263 26523 net.cpp:131] Top shape: 64 5 12 12 (46080)
I0428 19:48:36.567267 26523 net.cpp:139] Memory required for data: 1122560
I0428 19:48:36.567272 26523 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:36.567287 26523 net.cpp:86] Creating Layer conv1
I0428 19:48:36.567293 26523 net.cpp:408] conv1 <- pool0
I0428 19:48:36.567301 26523 net.cpp:382] conv1 -> conv1
I0428 19:48:36.569264 26523 net.cpp:124] Setting up conv1
I0428 19:48:36.569280 26523 net.cpp:131] Top shape: 64 5 8 8 (20480)
I0428 19:48:36.569285 26523 net.cpp:139] Memory required for data: 1204480
I0428 19:48:36.569314 26523 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:36.569324 26523 net.cpp:86] Creating Layer pool1
I0428 19:48:36.569330 26523 net.cpp:408] pool1 <- conv1
I0428 19:48:36.569339 26523 net.cpp:382] pool1 -> pool1
I0428 19:48:36.569380 26523 net.cpp:124] Setting up pool1
I0428 19:48:36.569388 26523 net.cpp:131] Top shape: 64 5 4 4 (5120)
I0428 19:48:36.569393 26523 net.cpp:139] Memory required for data: 1224960
I0428 19:48:36.569398 26523 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:36.569408 26523 net.cpp:86] Creating Layer ip1
I0428 19:48:36.569418 26523 net.cpp:408] ip1 <- pool1
I0428 19:48:36.569428 26523 net.cpp:382] ip1 -> ip1
I0428 19:48:36.569543 26523 net.cpp:124] Setting up ip1
I0428 19:48:36.569551 26523 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:36.569555 26523 net.cpp:139] Memory required for data: 1227520
I0428 19:48:36.569566 26523 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:36.569574 26523 net.cpp:86] Creating Layer relu1
I0428 19:48:36.569581 26523 net.cpp:408] relu1 <- ip1
I0428 19:48:36.569587 26523 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:36.569741 26523 net.cpp:124] Setting up relu1
I0428 19:48:36.569751 26523 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:36.569756 26523 net.cpp:139] Memory required for data: 1230080
I0428 19:48:36.569759 26523 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:36.569768 26523 net.cpp:86] Creating Layer ip2
I0428 19:48:36.569773 26523 net.cpp:408] ip2 <- ip1
I0428 19:48:36.569782 26523 net.cpp:382] ip2 -> ip2
I0428 19:48:36.569888 26523 net.cpp:124] Setting up ip2
I0428 19:48:36.569912 26523 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:36.569917 26523 net.cpp:139] Memory required for data: 1232640
I0428 19:48:36.569926 26523 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:36.569936 26523 net.cpp:86] Creating Layer relu2
I0428 19:48:36.569942 26523 net.cpp:408] relu2 <- ip2
I0428 19:48:36.569949 26523 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:36.570732 26523 net.cpp:124] Setting up relu2
I0428 19:48:36.570746 26523 net.cpp:131] Top shape: 64 10 (640)
I0428 19:48:36.570751 26523 net.cpp:139] Memory required for data: 1235200
I0428 19:48:36.570757 26523 layer_factory.hpp:77] Creating layer loss
I0428 19:48:36.570766 26523 net.cpp:86] Creating Layer loss
I0428 19:48:36.570771 26523 net.cpp:408] loss <- ip2
I0428 19:48:36.570780 26523 net.cpp:408] loss <- label
I0428 19:48:36.570787 26523 net.cpp:382] loss -> loss
I0428 19:48:36.570812 26523 layer_factory.hpp:77] Creating layer loss
I0428 19:48:36.571061 26523 net.cpp:124] Setting up loss
I0428 19:48:36.571074 26523 net.cpp:131] Top shape: (1)
I0428 19:48:36.571079 26523 net.cpp:134]     with loss weight 1
I0428 19:48:36.571097 26523 net.cpp:139] Memory required for data: 1235204
I0428 19:48:36.571120 26523 net.cpp:200] loss needs backward computation.
I0428 19:48:36.571126 26523 net.cpp:200] relu2 needs backward computation.
I0428 19:48:36.571131 26523 net.cpp:200] ip2 needs backward computation.
I0428 19:48:36.571137 26523 net.cpp:200] relu1 needs backward computation.
I0428 19:48:36.571142 26523 net.cpp:200] ip1 needs backward computation.
I0428 19:48:36.571147 26523 net.cpp:200] pool1 needs backward computation.
I0428 19:48:36.571166 26523 net.cpp:200] conv1 needs backward computation.
I0428 19:48:36.571172 26523 net.cpp:200] pool0 needs backward computation.
I0428 19:48:36.571178 26523 net.cpp:200] conv0 needs backward computation.
I0428 19:48:36.571184 26523 net.cpp:202] mnist does not need backward computation.
I0428 19:48:36.571189 26523 net.cpp:244] This network produces output loss
I0428 19:48:36.571203 26523 net.cpp:257] Network initialization done.
I0428 19:48:36.571522 26523 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test549.prototxt
I0428 19:48:36.571553 26523 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 19:48:36.571657 26523 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 5
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "ip2"
  top: "ip2"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
I0428 19:48:36.571753 26523 layer_factory.hpp:77] Creating layer mnist
I0428 19:48:36.571811 26523 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 19:48:36.571828 26523 net.cpp:86] Creating Layer mnist
I0428 19:48:36.571836 26523 net.cpp:382] mnist -> data
I0428 19:48:36.571847 26523 net.cpp:382] mnist -> label
I0428 19:48:36.571974 26523 data_layer.cpp:45] output data size: 100,1,28,28
I0428 19:48:36.574172 26523 net.cpp:124] Setting up mnist
I0428 19:48:36.574203 26523 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 19:48:36.574211 26523 net.cpp:131] Top shape: 100 (100)
I0428 19:48:36.574216 26523 net.cpp:139] Memory required for data: 314000
I0428 19:48:36.574223 26523 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 19:48:36.574236 26523 net.cpp:86] Creating Layer label_mnist_1_split
I0428 19:48:36.574242 26523 net.cpp:408] label_mnist_1_split <- label
I0428 19:48:36.574250 26523 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 19:48:36.574260 26523 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 19:48:36.574362 26523 net.cpp:124] Setting up label_mnist_1_split
I0428 19:48:36.574380 26523 net.cpp:131] Top shape: 100 (100)
I0428 19:48:36.574388 26523 net.cpp:131] Top shape: 100 (100)
I0428 19:48:36.574391 26523 net.cpp:139] Memory required for data: 314800
I0428 19:48:36.574398 26523 layer_factory.hpp:77] Creating layer conv0
I0428 19:48:36.574414 26523 net.cpp:86] Creating Layer conv0
I0428 19:48:36.574436 26523 net.cpp:408] conv0 <- data
I0428 19:48:36.574445 26523 net.cpp:382] conv0 -> conv0
I0428 19:48:36.575896 26523 net.cpp:124] Setting up conv0
I0428 19:48:36.575911 26523 net.cpp:131] Top shape: 100 5 24 24 (288000)
I0428 19:48:36.575915 26523 net.cpp:139] Memory required for data: 1466800
I0428 19:48:36.575928 26523 layer_factory.hpp:77] Creating layer pool0
I0428 19:48:36.575937 26523 net.cpp:86] Creating Layer pool0
I0428 19:48:36.575944 26523 net.cpp:408] pool0 <- conv0
I0428 19:48:36.575951 26523 net.cpp:382] pool0 -> pool0
I0428 19:48:36.575989 26523 net.cpp:124] Setting up pool0
I0428 19:48:36.575996 26523 net.cpp:131] Top shape: 100 5 12 12 (72000)
I0428 19:48:36.576009 26523 net.cpp:139] Memory required for data: 1754800
I0428 19:48:36.576014 26523 layer_factory.hpp:77] Creating layer conv1
I0428 19:48:36.576025 26523 net.cpp:86] Creating Layer conv1
I0428 19:48:36.576032 26523 net.cpp:408] conv1 <- pool0
I0428 19:48:36.576040 26523 net.cpp:382] conv1 -> conv1
I0428 19:48:36.578398 26523 net.cpp:124] Setting up conv1
I0428 19:48:36.578413 26523 net.cpp:131] Top shape: 100 5 8 8 (32000)
I0428 19:48:36.578418 26523 net.cpp:139] Memory required for data: 1882800
I0428 19:48:36.578446 26523 layer_factory.hpp:77] Creating layer pool1
I0428 19:48:36.578456 26523 net.cpp:86] Creating Layer pool1
I0428 19:48:36.578462 26523 net.cpp:408] pool1 <- conv1
I0428 19:48:36.578469 26523 net.cpp:382] pool1 -> pool1
I0428 19:48:36.578512 26523 net.cpp:124] Setting up pool1
I0428 19:48:36.578521 26523 net.cpp:131] Top shape: 100 5 4 4 (8000)
I0428 19:48:36.578526 26523 net.cpp:139] Memory required for data: 1914800
I0428 19:48:36.578531 26523 layer_factory.hpp:77] Creating layer ip1
I0428 19:48:36.578539 26523 net.cpp:86] Creating Layer ip1
I0428 19:48:36.578547 26523 net.cpp:408] ip1 <- pool1
I0428 19:48:36.578557 26523 net.cpp:382] ip1 -> ip1
I0428 19:48:36.578670 26523 net.cpp:124] Setting up ip1
I0428 19:48:36.578677 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.578682 26523 net.cpp:139] Memory required for data: 1918800
I0428 19:48:36.578693 26523 layer_factory.hpp:77] Creating layer relu1
I0428 19:48:36.578701 26523 net.cpp:86] Creating Layer relu1
I0428 19:48:36.578706 26523 net.cpp:408] relu1 <- ip1
I0428 19:48:36.578713 26523 net.cpp:369] relu1 -> ip1 (in-place)
I0428 19:48:36.578953 26523 net.cpp:124] Setting up relu1
I0428 19:48:36.578963 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.578969 26523 net.cpp:139] Memory required for data: 1922800
I0428 19:48:36.578974 26523 layer_factory.hpp:77] Creating layer ip2
I0428 19:48:36.578984 26523 net.cpp:86] Creating Layer ip2
I0428 19:48:36.578990 26523 net.cpp:408] ip2 <- ip1
I0428 19:48:36.578999 26523 net.cpp:382] ip2 -> ip2
I0428 19:48:36.579092 26523 net.cpp:124] Setting up ip2
I0428 19:48:36.579100 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.579105 26523 net.cpp:139] Memory required for data: 1926800
I0428 19:48:36.579128 26523 layer_factory.hpp:77] Creating layer relu2
I0428 19:48:36.579136 26523 net.cpp:86] Creating Layer relu2
I0428 19:48:36.579141 26523 net.cpp:408] relu2 <- ip2
I0428 19:48:36.579147 26523 net.cpp:369] relu2 -> ip2 (in-place)
I0428 19:48:36.579291 26523 net.cpp:124] Setting up relu2
I0428 19:48:36.579301 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.579306 26523 net.cpp:139] Memory required for data: 1930800
I0428 19:48:36.579313 26523 layer_factory.hpp:77] Creating layer ip2_relu2_0_split
I0428 19:48:36.579319 26523 net.cpp:86] Creating Layer ip2_relu2_0_split
I0428 19:48:36.579324 26523 net.cpp:408] ip2_relu2_0_split <- ip2
I0428 19:48:36.579332 26523 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_0
I0428 19:48:36.579352 26523 net.cpp:382] ip2_relu2_0_split -> ip2_relu2_0_split_1
I0428 19:48:36.579391 26523 net.cpp:124] Setting up ip2_relu2_0_split
I0428 19:48:36.579399 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.579406 26523 net.cpp:131] Top shape: 100 10 (1000)
I0428 19:48:36.579411 26523 net.cpp:139] Memory required for data: 1938800
I0428 19:48:36.579414 26523 layer_factory.hpp:77] Creating layer accuracy
I0428 19:48:36.579422 26523 net.cpp:86] Creating Layer accuracy
I0428 19:48:36.579427 26523 net.cpp:408] accuracy <- ip2_relu2_0_split_0
I0428 19:48:36.579433 26523 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 19:48:36.579440 26523 net.cpp:382] accuracy -> accuracy
I0428 19:48:36.579450 26523 net.cpp:124] Setting up accuracy
I0428 19:48:36.579458 26523 net.cpp:131] Top shape: (1)
I0428 19:48:36.579463 26523 net.cpp:139] Memory required for data: 1938804
I0428 19:48:36.579468 26523 layer_factory.hpp:77] Creating layer loss
I0428 19:48:36.579473 26523 net.cpp:86] Creating Layer loss
I0428 19:48:36.579479 26523 net.cpp:408] loss <- ip2_relu2_0_split_1
I0428 19:48:36.579485 26523 net.cpp:408] loss <- label_mnist_1_split_1
I0428 19:48:36.579491 26523 net.cpp:382] loss -> loss
I0428 19:48:36.579500 26523 layer_factory.hpp:77] Creating layer loss
I0428 19:48:36.579802 26523 net.cpp:124] Setting up loss
I0428 19:48:36.579813 26523 net.cpp:131] Top shape: (1)
I0428 19:48:36.579818 26523 net.cpp:134]     with loss weight 1
I0428 19:48:36.579828 26523 net.cpp:139] Memory required for data: 1938808
I0428 19:48:36.579833 26523 net.cpp:200] loss needs backward computation.
I0428 19:48:36.579839 26523 net.cpp:202] accuracy does not need backward computation.
I0428 19:48:36.579845 26523 net.cpp:200] ip2_relu2_0_split needs backward computation.
I0428 19:48:36.579851 26523 net.cpp:200] relu2 needs backward computation.
I0428 19:48:36.579855 26523 net.cpp:200] ip2 needs backward computation.
I0428 19:48:36.579861 26523 net.cpp:200] relu1 needs backward computation.
I0428 19:48:36.579866 26523 net.cpp:200] ip1 needs backward computation.
I0428 19:48:36.579871 26523 net.cpp:200] pool1 needs backward computation.
I0428 19:48:36.579877 26523 net.cpp:200] conv1 needs backward computation.
I0428 19:48:36.579882 26523 net.cpp:200] pool0 needs backward computation.
I0428 19:48:36.579905 26523 net.cpp:200] conv0 needs backward computation.
I0428 19:48:36.579910 26523 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 19:48:36.579917 26523 net.cpp:202] mnist does not need backward computation.
I0428 19:48:36.579922 26523 net.cpp:244] This network produces output accuracy
I0428 19:48:36.579946 26523 net.cpp:244] This network produces output loss
I0428 19:48:36.579962 26523 net.cpp:257] Network initialization done.
I0428 19:48:36.580018 26523 solver.cpp:56] Solver scaffolding done.
I0428 19:48:36.580287 26523 caffe.cpp:248] Starting Optimization
I0428 19:48:36.580294 26523 solver.cpp:273] Solving LeNet
I0428 19:48:36.580299 26523 solver.cpp:274] Learning Rate Policy: inv
I0428 19:48:36.581117 26523 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 19:48:36.584444 26523 blocking_queue.cpp:49] Waiting for data
I0428 19:48:36.653064 26530 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:36.653548 26523 solver.cpp:398]     Test net output #0: accuracy = 0.0543
I0428 19:48:36.653570 26523 solver.cpp:398]     Test net output #1: loss = 2.34212 (* 1 = 2.34212 loss)
I0428 19:48:36.655395 26523 solver.cpp:219] Iteration 0 (-8.68756e-31 iter/s, 0.0750661s/100 iters), loss = 2.34457
I0428 19:48:36.655457 26523 solver.cpp:238]     Train net output #0: loss = 2.34457 (* 1 = 2.34457 loss)
I0428 19:48:36.655474 26523 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 19:48:36.731132 26523 solver.cpp:219] Iteration 100 (1321.48 iter/s, 0.0756729s/100 iters), loss = 1.49181
I0428 19:48:36.731160 26523 solver.cpp:238]     Train net output #0: loss = 1.49181 (* 1 = 1.49181 loss)
I0428 19:48:36.731170 26523 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 19:48:36.797981 26523 solver.cpp:219] Iteration 200 (1496.67 iter/s, 0.066815s/100 iters), loss = 0.929474
I0428 19:48:36.798020 26523 solver.cpp:238]     Train net output #0: loss = 0.929474 (* 1 = 0.929474 loss)
I0428 19:48:36.798030 26523 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 19:48:36.868391 26523 solver.cpp:219] Iteration 300 (1421.45 iter/s, 0.0703508s/100 iters), loss = 1.23849
I0428 19:48:36.868422 26523 solver.cpp:238]     Train net output #0: loss = 1.23849 (* 1 = 1.23849 loss)
I0428 19:48:36.868432 26523 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 19:48:36.933835 26523 solver.cpp:219] Iteration 400 (1528.89 iter/s, 0.065407s/100 iters), loss = 1.08748
I0428 19:48:36.933861 26523 solver.cpp:238]     Train net output #0: loss = 1.08748 (* 1 = 1.08748 loss)
I0428 19:48:36.933871 26523 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 19:48:36.998426 26523 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 19:48:37.067443 26530 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:37.067909 26523 solver.cpp:398]     Test net output #0: accuracy = 0.7223
I0428 19:48:37.067929 26523 solver.cpp:398]     Test net output #1: loss = 0.795423 (* 1 = 0.795423 loss)
I0428 19:48:37.068701 26523 solver.cpp:219] Iteration 500 (741.669 iter/s, 0.134831s/100 iters), loss = 0.763439
I0428 19:48:37.068727 26523 solver.cpp:238]     Train net output #0: loss = 0.763439 (* 1 = 0.763439 loss)
I0428 19:48:37.068743 26523 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 19:48:37.145457 26523 solver.cpp:219] Iteration 600 (1303.39 iter/s, 0.0767232s/100 iters), loss = 0.387281
I0428 19:48:37.145484 26523 solver.cpp:238]     Train net output #0: loss = 0.387281 (* 1 = 0.387281 loss)
I0428 19:48:37.145493 26523 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 19:48:37.211963 26523 solver.cpp:219] Iteration 700 (1504.37 iter/s, 0.066473s/100 iters), loss = 0.565109
I0428 19:48:37.211990 26523 solver.cpp:238]     Train net output #0: loss = 0.565109 (* 1 = 0.565109 loss)
I0428 19:48:37.212000 26523 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 19:48:37.278506 26523 solver.cpp:219] Iteration 800 (1503.56 iter/s, 0.0665088s/100 iters), loss = 0.593595
I0428 19:48:37.278534 26523 solver.cpp:238]     Train net output #0: loss = 0.593595 (* 1 = 0.593595 loss)
I0428 19:48:37.278558 26523 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 19:48:37.344740 26523 solver.cpp:219] Iteration 900 (1510.54 iter/s, 0.0662014s/100 iters), loss = 0.488383
I0428 19:48:37.344769 26523 solver.cpp:238]     Train net output #0: loss = 0.488383 (* 1 = 0.488383 loss)
I0428 19:48:37.344779 26523 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 19:48:37.366741 26529 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:37.409400 26523 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 19:48:37.409932 26523 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 19:48:37.410382 26523 solver.cpp:311] Iteration 1000, loss = 0.434935
I0428 19:48:37.410413 26523 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 19:48:37.485391 26530 data_layer.cpp:73] Restarting data prefetching from start.
I0428 19:48:37.485940 26523 solver.cpp:398]     Test net output #0: accuracy = 0.8477
I0428 19:48:37.485968 26523 solver.cpp:398]     Test net output #1: loss = 0.425741 (* 1 = 0.425741 loss)
I0428 19:48:37.485977 26523 solver.cpp:316] Optimization Done.
I0428 19:48:37.485981 26523 caffe.cpp:259] Optimization Done.
