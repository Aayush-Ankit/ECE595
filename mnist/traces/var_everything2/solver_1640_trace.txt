I0428 20:36:40.289834  4832 caffe.cpp:218] Using GPUs 0
I0428 20:36:40.327982  4832 caffe.cpp:223] GPU 0: TITAN X (Pascal)
I0428 20:36:40.861141  4832 solver.cpp:44] Initializing solver from parameters: 
test_iter: 100
test_interval: 500
base_lr: 0.01
display: 100
max_iter: 1000
lr_policy: "inv"
gamma: 0.0001
power: 0.75
momentum: 0.9
weight_decay: 0.0005
snapshot: 5000
snapshot_prefix: "examples/mnist/lenet"
solver_mode: GPU
device_id: 0
net: "ECE595/mnist/train_test/var_everything2/lenet_train_test1640.prototxt"
train_state {
  level: 0
  stage: ""
}
I0428 20:36:40.861277  4832 solver.cpp:87] Creating training net from net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1640.prototxt
I0428 20:36:40.861565  4832 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer mnist
I0428 20:36:40.861578  4832 net.cpp:296] The NetState phase (0) differed from the phase (1) specified by a rule in layer accuracy
I0428 20:36:40.861646  4832 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TRAIN
  level: 0
  stage: ""
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:40.861702  4832 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:40.861789  4832 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_train_lmdb
I0428 20:36:40.861809  4832 net.cpp:86] Creating Layer mnist
I0428 20:36:40.861816  4832 net.cpp:382] mnist -> data
I0428 20:36:40.861835  4832 net.cpp:382] mnist -> label
I0428 20:36:40.862814  4832 data_layer.cpp:45] output data size: 64,1,28,28
I0428 20:36:40.865051  4832 net.cpp:124] Setting up mnist
I0428 20:36:40.865082  4832 net.cpp:131] Top shape: 64 1 28 28 (50176)
I0428 20:36:40.865087  4832 net.cpp:131] Top shape: 64 (64)
I0428 20:36:40.865090  4832 net.cpp:139] Memory required for data: 200960
I0428 20:36:40.865097  4832 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:40.865111  4832 net.cpp:86] Creating Layer conv0
I0428 20:36:40.865116  4832 net.cpp:408] conv0 <- data
I0428 20:36:40.865128  4832 net.cpp:382] conv0 -> conv0
I0428 20:36:41.097661  4832 net.cpp:124] Setting up conv0
I0428 20:36:41.097702  4832 net.cpp:131] Top shape: 64 100 24 24 (3686400)
I0428 20:36:41.097707  4832 net.cpp:139] Memory required for data: 14946560
I0428 20:36:41.097723  4832 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:41.097734  4832 net.cpp:86] Creating Layer pool0
I0428 20:36:41.097738  4832 net.cpp:408] pool0 <- conv0
I0428 20:36:41.097743  4832 net.cpp:382] pool0 -> pool0
I0428 20:36:41.097805  4832 net.cpp:124] Setting up pool0
I0428 20:36:41.097810  4832 net.cpp:131] Top shape: 64 100 12 12 (921600)
I0428 20:36:41.097829  4832 net.cpp:139] Memory required for data: 18632960
I0428 20:36:41.097832  4832 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:41.097843  4832 net.cpp:86] Creating Layer conv1
I0428 20:36:41.097846  4832 net.cpp:408] conv1 <- pool0
I0428 20:36:41.097851  4832 net.cpp:382] conv1 -> conv1
I0428 20:36:41.101835  4832 net.cpp:124] Setting up conv1
I0428 20:36:41.101850  4832 net.cpp:131] Top shape: 64 100 8 8 (409600)
I0428 20:36:41.101852  4832 net.cpp:139] Memory required for data: 20271360
I0428 20:36:41.101861  4832 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:41.101867  4832 net.cpp:86] Creating Layer pool1
I0428 20:36:41.101871  4832 net.cpp:408] pool1 <- conv1
I0428 20:36:41.101874  4832 net.cpp:382] pool1 -> pool1
I0428 20:36:41.101922  4832 net.cpp:124] Setting up pool1
I0428 20:36:41.101927  4832 net.cpp:131] Top shape: 64 100 4 4 (102400)
I0428 20:36:41.101929  4832 net.cpp:139] Memory required for data: 20680960
I0428 20:36:41.101933  4832 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:41.101939  4832 net.cpp:86] Creating Layer ip1
I0428 20:36:41.101941  4832 net.cpp:408] ip1 <- pool1
I0428 20:36:41.101946  4832 net.cpp:382] ip1 -> ip1
I0428 20:36:41.102939  4832 net.cpp:124] Setting up ip1
I0428 20:36:41.102952  4832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:41.102972  4832 net.cpp:139] Memory required for data: 20683520
I0428 20:36:41.102979  4832 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:41.102987  4832 net.cpp:86] Creating Layer relu1
I0428 20:36:41.102989  4832 net.cpp:408] relu1 <- ip1
I0428 20:36:41.102994  4832 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:41.103198  4832 net.cpp:124] Setting up relu1
I0428 20:36:41.103206  4832 net.cpp:131] Top shape: 64 10 (640)
I0428 20:36:41.103209  4832 net.cpp:139] Memory required for data: 20686080
I0428 20:36:41.103212  4832 layer_factory.hpp:77] Creating layer loss
I0428 20:36:41.103219  4832 net.cpp:86] Creating Layer loss
I0428 20:36:41.103221  4832 net.cpp:408] loss <- ip1
I0428 20:36:41.103225  4832 net.cpp:408] loss <- label
I0428 20:36:41.103231  4832 net.cpp:382] loss -> loss
I0428 20:36:41.103250  4832 layer_factory.hpp:77] Creating layer loss
I0428 20:36:41.104080  4832 net.cpp:124] Setting up loss
I0428 20:36:41.104092  4832 net.cpp:131] Top shape: (1)
I0428 20:36:41.104111  4832 net.cpp:134]     with loss weight 1
I0428 20:36:41.104125  4832 net.cpp:139] Memory required for data: 20686084
I0428 20:36:41.104130  4832 net.cpp:200] loss needs backward computation.
I0428 20:36:41.104132  4832 net.cpp:200] relu1 needs backward computation.
I0428 20:36:41.104135  4832 net.cpp:200] ip1 needs backward computation.
I0428 20:36:41.104138  4832 net.cpp:200] pool1 needs backward computation.
I0428 20:36:41.104141  4832 net.cpp:200] conv1 needs backward computation.
I0428 20:36:41.104145  4832 net.cpp:200] pool0 needs backward computation.
I0428 20:36:41.104147  4832 net.cpp:200] conv0 needs backward computation.
I0428 20:36:41.104151  4832 net.cpp:202] mnist does not need backward computation.
I0428 20:36:41.104153  4832 net.cpp:244] This network produces output loss
I0428 20:36:41.104161  4832 net.cpp:257] Network initialization done.
I0428 20:36:41.104425  4832 solver.cpp:173] Creating test net (#0) specified by net file: ECE595/mnist/train_test/var_everything2/lenet_train_test1640.prototxt
I0428 20:36:41.104447  4832 net.cpp:296] The NetState phase (1) differed from the phase (0) specified by a rule in layer mnist
I0428 20:36:41.104537  4832 net.cpp:53] Initializing net from parameters: 
name: "LeNet"
state {
  phase: TEST
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "conv0"
  type: "Convolution"
  bottom: "data"
  top: "conv0"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool0"
  type: "Pooling"
  bottom: "conv0"
  top: "pool0"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "pool0"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 100
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool1"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip1"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip1"
  bottom: "label"
  top: "loss"
}
I0428 20:36:41.104606  4832 layer_factory.hpp:77] Creating layer mnist
I0428 20:36:41.104650  4832 db_lmdb.cpp:35] Opened lmdb examples/mnist/mnist_test_lmdb
I0428 20:36:41.104661  4832 net.cpp:86] Creating Layer mnist
I0428 20:36:41.104666  4832 net.cpp:382] mnist -> data
I0428 20:36:41.104674  4832 net.cpp:382] mnist -> label
I0428 20:36:41.104771  4832 data_layer.cpp:45] output data size: 100,1,28,28
I0428 20:36:41.107110  4832 net.cpp:124] Setting up mnist
I0428 20:36:41.107139  4832 net.cpp:131] Top shape: 100 1 28 28 (78400)
I0428 20:36:41.107161  4832 net.cpp:131] Top shape: 100 (100)
I0428 20:36:41.107163  4832 net.cpp:139] Memory required for data: 314000
I0428 20:36:41.107167  4832 layer_factory.hpp:77] Creating layer label_mnist_1_split
I0428 20:36:41.107209  4832 net.cpp:86] Creating Layer label_mnist_1_split
I0428 20:36:41.107214  4832 net.cpp:408] label_mnist_1_split <- label
I0428 20:36:41.107218  4832 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_0
I0428 20:36:41.107225  4832 net.cpp:382] label_mnist_1_split -> label_mnist_1_split_1
I0428 20:36:41.107270  4832 net.cpp:124] Setting up label_mnist_1_split
I0428 20:36:41.107276  4832 net.cpp:131] Top shape: 100 (100)
I0428 20:36:41.107280  4832 net.cpp:131] Top shape: 100 (100)
I0428 20:36:41.107283  4832 net.cpp:139] Memory required for data: 314800
I0428 20:36:41.107286  4832 layer_factory.hpp:77] Creating layer conv0
I0428 20:36:41.107295  4832 net.cpp:86] Creating Layer conv0
I0428 20:36:41.107297  4832 net.cpp:408] conv0 <- data
I0428 20:36:41.107307  4832 net.cpp:382] conv0 -> conv0
I0428 20:36:41.108312  4832 net.cpp:124] Setting up conv0
I0428 20:36:41.108324  4832 net.cpp:131] Top shape: 100 100 24 24 (5760000)
I0428 20:36:41.108342  4832 net.cpp:139] Memory required for data: 23354800
I0428 20:36:41.108351  4832 layer_factory.hpp:77] Creating layer pool0
I0428 20:36:41.108357  4832 net.cpp:86] Creating Layer pool0
I0428 20:36:41.108361  4832 net.cpp:408] pool0 <- conv0
I0428 20:36:41.108364  4832 net.cpp:382] pool0 -> pool0
I0428 20:36:41.108399  4832 net.cpp:124] Setting up pool0
I0428 20:36:41.108404  4832 net.cpp:131] Top shape: 100 100 12 12 (1440000)
I0428 20:36:41.108407  4832 net.cpp:139] Memory required for data: 29114800
I0428 20:36:41.108424  4832 layer_factory.hpp:77] Creating layer conv1
I0428 20:36:41.108433  4832 net.cpp:86] Creating Layer conv1
I0428 20:36:41.108435  4832 net.cpp:408] conv1 <- pool0
I0428 20:36:41.108440  4832 net.cpp:382] conv1 -> conv1
I0428 20:36:41.111431  4832 net.cpp:124] Setting up conv1
I0428 20:36:41.111459  4832 net.cpp:131] Top shape: 100 100 8 8 (640000)
I0428 20:36:41.111464  4832 net.cpp:139] Memory required for data: 31674800
I0428 20:36:41.111471  4832 layer_factory.hpp:77] Creating layer pool1
I0428 20:36:41.111487  4832 net.cpp:86] Creating Layer pool1
I0428 20:36:41.111491  4832 net.cpp:408] pool1 <- conv1
I0428 20:36:41.111496  4832 net.cpp:382] pool1 -> pool1
I0428 20:36:41.111551  4832 net.cpp:124] Setting up pool1
I0428 20:36:41.111555  4832 net.cpp:131] Top shape: 100 100 4 4 (160000)
I0428 20:36:41.111558  4832 net.cpp:139] Memory required for data: 32314800
I0428 20:36:41.111562  4832 layer_factory.hpp:77] Creating layer ip1
I0428 20:36:41.111567  4832 net.cpp:86] Creating Layer ip1
I0428 20:36:41.111570  4832 net.cpp:408] ip1 <- pool1
I0428 20:36:41.111575  4832 net.cpp:382] ip1 -> ip1
I0428 20:36:41.111759  4832 net.cpp:124] Setting up ip1
I0428 20:36:41.111766  4832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:41.111769  4832 net.cpp:139] Memory required for data: 32318800
I0428 20:36:41.111778  4832 layer_factory.hpp:77] Creating layer relu1
I0428 20:36:41.111783  4832 net.cpp:86] Creating Layer relu1
I0428 20:36:41.111785  4832 net.cpp:408] relu1 <- ip1
I0428 20:36:41.111790  4832 net.cpp:369] relu1 -> ip1 (in-place)
I0428 20:36:41.112578  4832 net.cpp:124] Setting up relu1
I0428 20:36:41.112591  4832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:41.112609  4832 net.cpp:139] Memory required for data: 32322800
I0428 20:36:41.112612  4832 layer_factory.hpp:77] Creating layer ip1_relu1_0_split
I0428 20:36:41.112619  4832 net.cpp:86] Creating Layer ip1_relu1_0_split
I0428 20:36:41.112622  4832 net.cpp:408] ip1_relu1_0_split <- ip1
I0428 20:36:41.112628  4832 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_0
I0428 20:36:41.112634  4832 net.cpp:382] ip1_relu1_0_split -> ip1_relu1_0_split_1
I0428 20:36:41.112679  4832 net.cpp:124] Setting up ip1_relu1_0_split
I0428 20:36:41.112684  4832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:41.112689  4832 net.cpp:131] Top shape: 100 10 (1000)
I0428 20:36:41.112691  4832 net.cpp:139] Memory required for data: 32330800
I0428 20:36:41.112695  4832 layer_factory.hpp:77] Creating layer accuracy
I0428 20:36:41.112700  4832 net.cpp:86] Creating Layer accuracy
I0428 20:36:41.112704  4832 net.cpp:408] accuracy <- ip1_relu1_0_split_0
I0428 20:36:41.112707  4832 net.cpp:408] accuracy <- label_mnist_1_split_0
I0428 20:36:41.112712  4832 net.cpp:382] accuracy -> accuracy
I0428 20:36:41.112718  4832 net.cpp:124] Setting up accuracy
I0428 20:36:41.112722  4832 net.cpp:131] Top shape: (1)
I0428 20:36:41.112725  4832 net.cpp:139] Memory required for data: 32330804
I0428 20:36:41.112728  4832 layer_factory.hpp:77] Creating layer loss
I0428 20:36:41.112732  4832 net.cpp:86] Creating Layer loss
I0428 20:36:41.112735  4832 net.cpp:408] loss <- ip1_relu1_0_split_1
I0428 20:36:41.112740  4832 net.cpp:408] loss <- label_mnist_1_split_1
I0428 20:36:41.112743  4832 net.cpp:382] loss -> loss
I0428 20:36:41.112749  4832 layer_factory.hpp:77] Creating layer loss
I0428 20:36:41.113039  4832 net.cpp:124] Setting up loss
I0428 20:36:41.113049  4832 net.cpp:131] Top shape: (1)
I0428 20:36:41.113054  4832 net.cpp:134]     with loss weight 1
I0428 20:36:41.113060  4832 net.cpp:139] Memory required for data: 32330808
I0428 20:36:41.113065  4832 net.cpp:200] loss needs backward computation.
I0428 20:36:41.113068  4832 net.cpp:202] accuracy does not need backward computation.
I0428 20:36:41.113072  4832 net.cpp:200] ip1_relu1_0_split needs backward computation.
I0428 20:36:41.113075  4832 net.cpp:200] relu1 needs backward computation.
I0428 20:36:41.113078  4832 net.cpp:200] ip1 needs backward computation.
I0428 20:36:41.113082  4832 net.cpp:200] pool1 needs backward computation.
I0428 20:36:41.113085  4832 net.cpp:200] conv1 needs backward computation.
I0428 20:36:41.113088  4832 net.cpp:200] pool0 needs backward computation.
I0428 20:36:41.113098  4832 net.cpp:200] conv0 needs backward computation.
I0428 20:36:41.113102  4832 net.cpp:202] label_mnist_1_split does not need backward computation.
I0428 20:36:41.113106  4832 net.cpp:202] mnist does not need backward computation.
I0428 20:36:41.113109  4832 net.cpp:244] This network produces output accuracy
I0428 20:36:41.113112  4832 net.cpp:244] This network produces output loss
I0428 20:36:41.113152  4832 net.cpp:257] Network initialization done.
I0428 20:36:41.113200  4832 solver.cpp:56] Solver scaffolding done.
I0428 20:36:41.113425  4832 caffe.cpp:248] Starting Optimization
I0428 20:36:41.113432  4832 solver.cpp:273] Solving LeNet
I0428 20:36:41.113435  4832 solver.cpp:274] Learning Rate Policy: inv
I0428 20:36:41.114279  4832 solver.cpp:331] Iteration 0, Testing net (#0)
I0428 20:36:41.236173  4841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:41.238204  4832 solver.cpp:398]     Test net output #0: accuracy = 0.0411
I0428 20:36:41.238237  4832 solver.cpp:398]     Test net output #1: loss = 2.40888 (* 1 = 2.40888 loss)
I0428 20:36:41.247277  4832 solver.cpp:219] Iteration 0 (-1.00355e-30 iter/s, 0.133812s/100 iters), loss = 2.41276
I0428 20:36:41.247314  4832 solver.cpp:238]     Train net output #0: loss = 2.41276 (* 1 = 2.41276 loss)
I0428 20:36:41.247326  4832 sgd_solver.cpp:105] Iteration 0, lr = 0.01
I0428 20:36:41.537899  4832 solver.cpp:219] Iteration 100 (344.141 iter/s, 0.290578s/100 iters), loss = 1.0799
I0428 20:36:41.537940  4832 solver.cpp:238]     Train net output #0: loss = 1.0799 (* 1 = 1.0799 loss)
I0428 20:36:41.537947  4832 sgd_solver.cpp:105] Iteration 100, lr = 0.00992565
I0428 20:36:41.829547  4832 solver.cpp:219] Iteration 200 (342.951 iter/s, 0.291587s/100 iters), loss = 1.08196
I0428 20:36:41.829573  4832 solver.cpp:238]     Train net output #0: loss = 1.08196 (* 1 = 1.08196 loss)
I0428 20:36:41.829581  4832 sgd_solver.cpp:105] Iteration 200, lr = 0.00985258
I0428 20:36:42.123037  4832 solver.cpp:219] Iteration 300 (340.78 iter/s, 0.293445s/100 iters), loss = 0.985147
I0428 20:36:42.123078  4832 solver.cpp:238]     Train net output #0: loss = 0.985147 (* 1 = 0.985147 loss)
I0428 20:36:42.123085  4832 sgd_solver.cpp:105] Iteration 300, lr = 0.00978075
I0428 20:36:42.411439  4832 solver.cpp:219] Iteration 400 (346.792 iter/s, 0.288357s/100 iters), loss = 0.961383
I0428 20:36:42.411465  4832 solver.cpp:238]     Train net output #0: loss = 0.961383 (* 1 = 0.961383 loss)
I0428 20:36:42.411473  4832 sgd_solver.cpp:105] Iteration 400, lr = 0.00971013
I0428 20:36:42.691679  4832 solver.cpp:331] Iteration 500, Testing net (#0)
I0428 20:36:42.820968  4841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:42.824331  4832 solver.cpp:398]     Test net output #0: accuracy = 0.952
I0428 20:36:42.824369  4832 solver.cpp:398]     Test net output #1: loss = 0.161313 (* 1 = 0.161313 loss)
I0428 20:36:42.827167  4832 solver.cpp:219] Iteration 500 (240.572 iter/s, 0.415675s/100 iters), loss = 0.151544
I0428 20:36:42.827189  4832 solver.cpp:238]     Train net output #0: loss = 0.151544 (* 1 = 0.151544 loss)
I0428 20:36:42.827196  4832 sgd_solver.cpp:105] Iteration 500, lr = 0.00964069
I0428 20:36:43.104782  4832 solver.cpp:219] Iteration 600 (360.265 iter/s, 0.277574s/100 iters), loss = 0.133403
I0428 20:36:43.104825  4832 solver.cpp:238]     Train net output #0: loss = 0.133403 (* 1 = 0.133403 loss)
I0428 20:36:43.104832  4832 sgd_solver.cpp:105] Iteration 600, lr = 0.0095724
I0428 20:36:43.378793  4832 solver.cpp:219] Iteration 700 (365.03 iter/s, 0.27395s/100 iters), loss = 0.124811
I0428 20:36:43.378834  4832 solver.cpp:238]     Train net output #0: loss = 0.124811 (* 1 = 0.124811 loss)
I0428 20:36:43.378839  4832 sgd_solver.cpp:105] Iteration 700, lr = 0.00950522
I0428 20:36:43.648439  4832 solver.cpp:219] Iteration 800 (370.917 iter/s, 0.269602s/100 iters), loss = 0.25872
I0428 20:36:43.648471  4832 solver.cpp:238]     Train net output #0: loss = 0.25872 (* 1 = 0.25872 loss)
I0428 20:36:43.648479  4832 sgd_solver.cpp:105] Iteration 800, lr = 0.00943913
I0428 20:36:43.920444  4832 solver.cpp:219] Iteration 900 (367.712 iter/s, 0.271952s/100 iters), loss = 0.143271
I0428 20:36:43.920482  4832 solver.cpp:238]     Train net output #0: loss = 0.143271 (* 1 = 0.143271 loss)
I0428 20:36:43.920492  4832 sgd_solver.cpp:105] Iteration 900, lr = 0.00937411
I0428 20:36:44.011575  4839 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:44.192934  4832 solver.cpp:448] Snapshotting to binary proto file examples/mnist/lenet_iter_1000.caffemodel
I0428 20:36:44.200767  4832 sgd_solver.cpp:273] Snapshotting solver state to binary proto file examples/mnist/lenet_iter_1000.solverstate
I0428 20:36:44.205201  4832 solver.cpp:311] Iteration 1000, loss = 0.0939642
I0428 20:36:44.205231  4832 solver.cpp:331] Iteration 1000, Testing net (#0)
I0428 20:36:44.331303  4841 data_layer.cpp:73] Restarting data prefetching from start.
I0428 20:36:44.335633  4832 solver.cpp:398]     Test net output #0: accuracy = 0.9764
I0428 20:36:44.335659  4832 solver.cpp:398]     Test net output #1: loss = 0.0744885 (* 1 = 0.0744885 loss)
I0428 20:36:44.335665  4832 solver.cpp:316] Optimization Done.
I0428 20:36:44.335669  4832 caffe.cpp:259] Optimization Done.
